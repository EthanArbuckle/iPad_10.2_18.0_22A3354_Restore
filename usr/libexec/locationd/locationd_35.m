uint64_t sub_1015D14A0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 124);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 40), 1u);
    v4 = *(_DWORD *)(v3 + 124);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 3u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 4u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x40000) == 0)
      goto LABEL_7;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 5u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x40000) == 0)
  {
LABEL_7:
    if ((v4 & 0x80000) == 0)
      goto LABEL_8;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 100), 6u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x80000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100000) == 0)
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 104), 7u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x100000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 108), 8u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 80), 9u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x4000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 84), 0xAu);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 88), 0xBu);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x100) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 60), 0xCu);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 64), 0xDu);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x400) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 68), 0xEu);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x800) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 0xFu);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x800) == 0)
  {
LABEL_17:
    if ((v4 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(float *)(v3 + 72), 0x10u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x20000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 96), 0x11u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x20) == 0)
  {
LABEL_19:
    if ((v4 & 0x1000) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(float *)(v3 + 48), 0x12u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x1000) == 0)
  {
LABEL_20:
    if ((v4 & 0x40) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 76), 0x13u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x40) == 0)
  {
LABEL_21:
    if ((v4 & 0x10000) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 52), 0x14u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x10000) == 0)
  {
LABEL_22:
    if ((v4 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 92), 0x15u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x200000) == 0)
  {
LABEL_23:
    if ((v4 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 112), 0x16u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x800000) == 0)
  {
LABEL_24:
    if ((v4 & 0x400000) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 116), 0x18u);
  }
LABEL_48:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 120), 0x17u);
  if ((*(_DWORD *)(v3 + 124) & 0x400000) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 116), 0x18u);
  return result;
}

uint64_t sub_1015D1764(uint64_t result)
{
  *(_QWORD *)result = off_1021C08A8;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1015D1778(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C08A8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_1015D17B8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C08A8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t sub_1015D180C(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  char v4;

  *(_QWORD *)result = off_1021C08A8;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  v2 = *(_BYTE *)(a2 + 20);
  if ((v2 & 1) != 0)
  {
    v3 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) |= 1u;
    *(_BYTE *)(result + 16) = v3;
    v2 = *(_BYTE *)(a2 + 20);
  }
  if ((v2 & 2) != 0)
  {
    v4 = *(_BYTE *)(a2 + 17);
    *(_BYTE *)(result + 20) |= 2u;
    *(_BYTE *)(result + 17) = v4;
  }
  return result;
}

uint64_t sub_1015D18C4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  char v6;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "deviceMotion");
  v6 = *(_BYTE *)(a1 + 20);
  if ((v6 & 1) != 0)
  {
    PB::TextFormatter::format(this, "inQuiescentMode", *(_BYTE *)(a1 + 16));
    v6 = *(_BYTE *)(a1 + 20);
  }
  if ((v6 & 2) != 0)
    PB::TextFormatter::format(this, "shouldGyroBeOn", *(_BYTE *)(a1 + 17));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015D194C(_BYTE *a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  BOOL v28;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        a1[20] |= 2u;
        v21 = *((_QWORD *)this + 1);
        if (v21 >= *((_QWORD *)this + 2))
        {
          v24 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v22 = v21 + 1;
          v23 = *(unsigned __int8 *)(*(_QWORD *)this + v21);
          *((_QWORD *)this + 1) = v22;
          v24 = v23 != 0;
        }
        a1[17] = v24;
      }
      else if ((_DWORD)v20 == 2)
      {
        a1[20] |= 1u;
        v25 = *((_QWORD *)this + 1);
        if (v25 >= *((_QWORD *)this + 2))
        {
          v28 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v26 = v25 + 1;
          v27 = *(unsigned __int8 *)(*(_QWORD *)this + v25);
          *((_QWORD *)this + 1) = v26;
          v28 = v27 != 0;
        }
        a1[16] = v28;
      }
      else
      {
        if ((_DWORD)v20 == 1)
          operator new();
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015D1BC4(uint64_t result, PB::Writer *this)
{
  BOOL *v3;
  const PB::Base *v4;
  BOOL v5;

  v3 = (BOOL *)result;
  v4 = *(const PB::Base **)(result + 8);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4, 1u);
  v5 = v3[20];
  if (v5)
  {
    result = PB::Writer::write(this, v3[16], 2u);
    v5 = v3[20];
  }
  if ((v5 & 2) != 0)
    return PB::Writer::write(this, v3[17], 3u);
  return result;
}

uint64_t sub_1015D1C30(uint64_t result)
{
  if (!*(_QWORD *)(result + 8))
    operator new();
  return result;
}

void sub_1015D1CA0(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_1021C08E0;
  v2 = (void *)*((_QWORD *)this + 16);
  if (v2)
  {
    *((_QWORD *)this + 17) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 13);
  if (v3)
  {
    *((_QWORD *)this + 14) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 10);
  if (v4)
  {
    *((_QWORD *)this + 11) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 7);
  if (v5)
  {
    *((_QWORD *)this + 8) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 4);
  if (v6)
  {
    *((_QWORD *)this + 5) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 1);
  if (v7)
  {
    *((_QWORD *)this + 2) = v7;
    operator delete(v7);
  }
  PB::Base::~Base(this);
}

void sub_1015D1D30(PB::Base *a1)
{
  sub_1015D1CA0(a1);
  operator delete();
}

uint64_t sub_1015D1D54(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = (char *)(a1 + 56);
  *(_QWORD *)a1 = &off_1021C08E0;
  *(_OWORD *)(a1 + 104) = 0u;
  v6 = (char *)(a1 + 104);
  *(_DWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if ((*(_BYTE *)(a2 + 160) & 1) != 0)
  {
    v7 = *(_QWORD *)(a2 + 152);
    *(_BYTE *)(a1 + 160) = 1;
    *(_QWORD *)(a1 + 152) = v7;
  }
  if (a1 != a2)
  {
    sub_1002A3054((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
    sub_1002A3054(v5, *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
    sub_1002A3054(v6, *(char **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 2);
    sub_1002A3054(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
    sub_1002A3054((char *)(a1 + 80), *(char **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
    sub_1002A3054((char *)(a1 + 128), *(char **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 2);
  }
  return a1;
}

uint64_t sub_1015D1E68(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  float *v14;
  float *v15;
  float v16;
  float *v17;
  float *v18;
  float v19;
  float *v20;
  float *v21;
  float v22;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "dx", v7);
  }
  v8 = *(float **)(a1 + 32);
  v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "estimate", v10);
  }
  v11 = *(float **)(a1 + 56);
  v12 = *(float **)(a1 + 64);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(this, "measurement", v13);
  }
  v14 = *(float **)(a1 + 80);
  v15 = *(float **)(a1 + 88);
  while (v14 != v15)
  {
    v16 = *v14++;
    PB::TextFormatter::format(this, "noisevariance", v16);
  }
  v17 = *(float **)(a1 + 104);
  v18 = *(float **)(a1 + 112);
  while (v17 != v18)
  {
    v19 = *v17++;
    PB::TextFormatter::format(this, "residual", v19);
  }
  v20 = *(float **)(a1 + 128);
  v21 = *(float **)(a1 + 136);
  while (v20 != v21)
  {
    v22 = *v20++;
    PB::TextFormatter::format(this, "statevariance", v22);
  }
  if ((*(_BYTE *)(a1 + 160) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 152));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1015D1FCC(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  _DWORD *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  _DWORD *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  _DWORD *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  _DWORD *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  _DWORD *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  int v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  _DWORD *v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  int v111;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  _DWORD *v115;
  unint64_t v116;
  char *v117;
  unint64_t v118;
  char *v119;
  unint64_t v120;
  char *v121;
  unint64_t v122;
  char *v123;
  unint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  char *v162;
  int v163;
  char *v164;
  int v165;
  char *v166;
  int v167;
  char *v168;
  int v169;
  char *v170;
  int v171;
  char *v172;
  int v173;
  unint64_t v174;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void **v182;
  void **v183;
  _BYTE v184[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v181 = a1 + 144;
    v182 = (void **)(a1 + 80);
    v183 = (void **)(a1 + 128);
    v10 = (void **)(a1 + 8);
    v179 = a1 + 24;
    v180 = a1 + 96;
    v11 = (void **)(a1 + 104);
    v12 = (void **)(a1 + 56);
    v177 = a1 + 72;
    v178 = a1 + 120;
    v13 = (void **)(a1 + 32);
    v176 = a1 + 48;
    while (1)
    {
      v14 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v4 = v18;
        if (v16++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 160) |= 1u;
          v27 = *((_QWORD *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)this + 2))
            goto LABEL_278;
          *(_QWORD *)(a1 + 152) = *(_QWORD *)(*(_QWORD *)this + v27);
          v28 = *((_QWORD *)this + 1) + 8;
          goto LABEL_280;
        case 2u:
          if ((_DWORD)v26 != 2)
          {
            v114 = *(char **)(a1 + 40);
            v113 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v114 >= v113)
            {
              v126 = (char *)*v13;
              v127 = (v114 - (_BYTE *)*v13) >> 2;
              v128 = v127 + 1;
              if ((unint64_t)(v127 + 1) >> 62)
LABEL_289:
                sub_100259694();
              v129 = v113 - (_QWORD)v126;
              if (v129 >> 1 > v128)
                v128 = v129 >> 1;
              if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFFCLL)
                v130 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v130 = v128;
              if (v130)
              {
                v131 = (char *)sub_100260634(v176, v130);
                v126 = *(char **)(a1 + 32);
                v114 = *(char **)(a1 + 40);
              }
              else
              {
                v131 = 0;
              }
              v162 = &v131[4 * v127];
              *(_DWORD *)v162 = 0;
              v115 = v162 + 4;
              while (v114 != v126)
              {
                v163 = *((_DWORD *)v114 - 1);
                v114 -= 4;
                *((_DWORD *)v162 - 1) = v163;
                v162 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v162;
              *(_QWORD *)(a1 + 40) = v115;
              *(_QWORD *)(a1 + 48) = &v131[4 * v130];
              if (v126)
                operator delete(v126);
            }
            else
            {
              *(_DWORD *)v114 = 0;
              v115 = v114 + 4;
            }
            *(_QWORD *)(a1 + 40) = v115;
            goto LABEL_276;
          }
          if ((PB::Reader::placeMark(this, v184, v26, a4) & 1) != 0)
            return 0;
          v29 = *((_QWORD *)this + 1);
          v30 = *((_QWORD *)this + 2);
          while (v29 < v30 && !*((_BYTE *)this + 24))
          {
            v32 = *(char **)(a1 + 40);
            v31 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v32 >= v31)
            {
              v34 = (char *)*v13;
              v35 = (v32 - (_BYTE *)*v13) >> 2;
              v36 = v35 + 1;
              if ((unint64_t)(v35 + 1) >> 62)
                goto LABEL_289;
              v37 = v31 - (_QWORD)v34;
              if (v37 >> 1 > v36)
                v36 = v37 >> 1;
              if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
                v38 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v38 = v36;
              if (v38)
              {
                v39 = (char *)sub_100260634(v176, v38);
                v34 = *(char **)(a1 + 32);
                v32 = *(char **)(a1 + 40);
              }
              else
              {
                v39 = 0;
              }
              v40 = &v39[4 * v35];
              *(_DWORD *)v40 = 0;
              v33 = v40 + 4;
              while (v32 != v34)
              {
                v41 = *((_DWORD *)v32 - 1);
                v32 -= 4;
                *((_DWORD *)v40 - 1) = v41;
                v40 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v40;
              *(_QWORD *)(a1 + 40) = v33;
              *(_QWORD *)(a1 + 48) = &v39[4 * v38];
              if (v34)
                operator delete(v34);
            }
            else
            {
              *(_DWORD *)v32 = 0;
              v33 = v32 + 4;
            }
            *(_QWORD *)(a1 + 40) = v33;
            v42 = *((_QWORD *)this + 1);
            if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((_QWORD *)this + 2))
              goto LABEL_172;
            *(v33 - 1) = *(_DWORD *)(*(_QWORD *)this + v42);
            v30 = *((_QWORD *)this + 2);
            v29 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v29;
          }
          goto LABEL_173;
        case 3u:
          if ((_DWORD)v26 != 2)
          {
            v117 = *(char **)(a1 + 64);
            v116 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v117 >= v116)
            {
              v132 = (char *)*v12;
              v133 = (v117 - (_BYTE *)*v12) >> 2;
              v134 = v133 + 1;
              if ((unint64_t)(v133 + 1) >> 62)
LABEL_290:
                sub_100259694();
              v135 = v116 - (_QWORD)v132;
              if (v135 >> 1 > v134)
                v134 = v135 >> 1;
              if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFFCLL)
                v136 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v136 = v134;
              if (v136)
              {
                v137 = (char *)sub_100260634(v177, v136);
                v132 = *(char **)(a1 + 56);
                v117 = *(char **)(a1 + 64);
              }
              else
              {
                v137 = 0;
              }
              v164 = &v137[4 * v133];
              *(_DWORD *)v164 = 0;
              v115 = v164 + 4;
              while (v117 != v132)
              {
                v165 = *((_DWORD *)v117 - 1);
                v117 -= 4;
                *((_DWORD *)v164 - 1) = v165;
                v164 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v164;
              *(_QWORD *)(a1 + 64) = v115;
              *(_QWORD *)(a1 + 72) = &v137[4 * v136];
              if (v132)
                operator delete(v132);
            }
            else
            {
              *(_DWORD *)v117 = 0;
              v115 = v117 + 4;
            }
            *(_QWORD *)(a1 + 64) = v115;
            goto LABEL_276;
          }
          if ((PB::Reader::placeMark(this, v184, v26, a4) & 1) != 0)
            return 0;
          v43 = *((_QWORD *)this + 1);
          v44 = *((_QWORD *)this + 2);
          while (v43 < v44 && !*((_BYTE *)this + 24))
          {
            v46 = *(char **)(a1 + 64);
            v45 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v46 >= v45)
            {
              v48 = (char *)*v12;
              v49 = (v46 - (_BYTE *)*v12) >> 2;
              v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62)
                goto LABEL_290;
              v51 = v45 - (_QWORD)v48;
              if (v51 >> 1 > v50)
                v50 = v51 >> 1;
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
                v52 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v52 = v50;
              if (v52)
              {
                v53 = (char *)sub_100260634(v177, v52);
                v48 = *(char **)(a1 + 56);
                v46 = *(char **)(a1 + 64);
              }
              else
              {
                v53 = 0;
              }
              v54 = &v53[4 * v49];
              *(_DWORD *)v54 = 0;
              v47 = v54 + 4;
              while (v46 != v48)
              {
                v55 = *((_DWORD *)v46 - 1);
                v46 -= 4;
                *((_DWORD *)v54 - 1) = v55;
                v54 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v54;
              *(_QWORD *)(a1 + 64) = v47;
              *(_QWORD *)(a1 + 72) = &v53[4 * v52];
              if (v48)
                operator delete(v48);
            }
            else
            {
              *(_DWORD *)v46 = 0;
              v47 = v46 + 4;
            }
            *(_QWORD *)(a1 + 64) = v47;
            v56 = *((_QWORD *)this + 1);
            if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((_QWORD *)this + 2))
              goto LABEL_172;
            *(v47 - 1) = *(_DWORD *)(*(_QWORD *)this + v56);
            v44 = *((_QWORD *)this + 2);
            v43 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v43;
          }
          goto LABEL_173;
        case 4u:
          if ((_DWORD)v26 != 2)
          {
            v119 = *(char **)(a1 + 112);
            v118 = *(_QWORD *)(a1 + 120);
            if ((unint64_t)v119 >= v118)
            {
              v138 = (char *)*v11;
              v139 = (v119 - (_BYTE *)*v11) >> 2;
              v140 = v139 + 1;
              if ((unint64_t)(v139 + 1) >> 62)
LABEL_291:
                sub_100259694();
              v141 = v118 - (_QWORD)v138;
              if (v141 >> 1 > v140)
                v140 = v141 >> 1;
              if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL)
                v142 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v142 = v140;
              if (v142)
              {
                v143 = (char *)sub_100260634(v178, v142);
                v138 = *(char **)(a1 + 104);
                v119 = *(char **)(a1 + 112);
              }
              else
              {
                v143 = 0;
              }
              v166 = &v143[4 * v139];
              *(_DWORD *)v166 = 0;
              v115 = v166 + 4;
              while (v119 != v138)
              {
                v167 = *((_DWORD *)v119 - 1);
                v119 -= 4;
                *((_DWORD *)v166 - 1) = v167;
                v166 -= 4;
              }
              *(_QWORD *)(a1 + 104) = v166;
              *(_QWORD *)(a1 + 112) = v115;
              *(_QWORD *)(a1 + 120) = &v143[4 * v142];
              if (v138)
                operator delete(v138);
            }
            else
            {
              *(_DWORD *)v119 = 0;
              v115 = v119 + 4;
            }
            *(_QWORD *)(a1 + 112) = v115;
            goto LABEL_276;
          }
          if ((PB::Reader::placeMark(this, v184, v26, a4) & 1) != 0)
            return 0;
          v57 = *((_QWORD *)this + 1);
          v58 = *((_QWORD *)this + 2);
          while (v57 < v58 && !*((_BYTE *)this + 24))
          {
            v60 = *(char **)(a1 + 112);
            v59 = *(_QWORD *)(a1 + 120);
            if ((unint64_t)v60 >= v59)
            {
              v62 = (char *)*v11;
              v63 = (v60 - (_BYTE *)*v11) >> 2;
              v64 = v63 + 1;
              if ((unint64_t)(v63 + 1) >> 62)
                goto LABEL_291;
              v65 = v59 - (_QWORD)v62;
              if (v65 >> 1 > v64)
                v64 = v65 >> 1;
              if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
                v66 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v66 = v64;
              if (v66)
              {
                v67 = (char *)sub_100260634(v178, v66);
                v62 = *(char **)(a1 + 104);
                v60 = *(char **)(a1 + 112);
              }
              else
              {
                v67 = 0;
              }
              v68 = &v67[4 * v63];
              *(_DWORD *)v68 = 0;
              v61 = v68 + 4;
              while (v60 != v62)
              {
                v69 = *((_DWORD *)v60 - 1);
                v60 -= 4;
                *((_DWORD *)v68 - 1) = v69;
                v68 -= 4;
              }
              *(_QWORD *)(a1 + 104) = v68;
              *(_QWORD *)(a1 + 112) = v61;
              *(_QWORD *)(a1 + 120) = &v67[4 * v66];
              if (v62)
                operator delete(v62);
            }
            else
            {
              *(_DWORD *)v60 = 0;
              v61 = v60 + 4;
            }
            *(_QWORD *)(a1 + 112) = v61;
            v70 = *((_QWORD *)this + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)this + 2))
              goto LABEL_172;
            *(v61 - 1) = *(_DWORD *)(*(_QWORD *)this + v70);
            v58 = *((_QWORD *)this + 2);
            v57 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v57;
          }
          goto LABEL_173;
        case 5u:
          if ((_DWORD)v26 != 2)
          {
            v121 = *(char **)(a1 + 16);
            v120 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v121 >= v120)
            {
              v144 = (char *)*v10;
              v145 = (v121 - (_BYTE *)*v10) >> 2;
              v146 = v145 + 1;
              if ((unint64_t)(v145 + 1) >> 62)
LABEL_292:
                sub_100259694();
              v147 = v120 - (_QWORD)v144;
              if (v147 >> 1 > v146)
                v146 = v147 >> 1;
              if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFFCLL)
                v148 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v148 = v146;
              if (v148)
              {
                v149 = (char *)sub_100260634(v179, v148);
                v144 = *(char **)(a1 + 8);
                v121 = *(char **)(a1 + 16);
              }
              else
              {
                v149 = 0;
              }
              v168 = &v149[4 * v145];
              *(_DWORD *)v168 = 0;
              v115 = v168 + 4;
              while (v121 != v144)
              {
                v169 = *((_DWORD *)v121 - 1);
                v121 -= 4;
                *((_DWORD *)v168 - 1) = v169;
                v168 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v168;
              *(_QWORD *)(a1 + 16) = v115;
              *(_QWORD *)(a1 + 24) = &v149[4 * v148];
              if (v144)
                operator delete(v144);
            }
            else
            {
              *(_DWORD *)v121 = 0;
              v115 = v121 + 4;
            }
            *(_QWORD *)(a1 + 16) = v115;
            goto LABEL_276;
          }
          if ((PB::Reader::placeMark(this, v184, v26, a4) & 1) != 0)
            return 0;
          v71 = *((_QWORD *)this + 1);
          v72 = *((_QWORD *)this + 2);
          while (v71 < v72 && !*((_BYTE *)this + 24))
          {
            v74 = *(char **)(a1 + 16);
            v73 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v74 >= v73)
            {
              v76 = (char *)*v10;
              v77 = (v74 - (_BYTE *)*v10) >> 2;
              v78 = v77 + 1;
              if ((unint64_t)(v77 + 1) >> 62)
                goto LABEL_292;
              v79 = v73 - (_QWORD)v76;
              if (v79 >> 1 > v78)
                v78 = v79 >> 1;
              if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL)
                v80 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v80 = v78;
              if (v80)
              {
                v81 = (char *)sub_100260634(v179, v80);
                v76 = *(char **)(a1 + 8);
                v74 = *(char **)(a1 + 16);
              }
              else
              {
                v81 = 0;
              }
              v82 = &v81[4 * v77];
              *(_DWORD *)v82 = 0;
              v75 = v82 + 4;
              while (v74 != v76)
              {
                v83 = *((_DWORD *)v74 - 1);
                v74 -= 4;
                *((_DWORD *)v82 - 1) = v83;
                v82 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v82;
              *(_QWORD *)(a1 + 16) = v75;
              *(_QWORD *)(a1 + 24) = &v81[4 * v80];
              if (v76)
                operator delete(v76);
            }
            else
            {
              *(_DWORD *)v74 = 0;
              v75 = v74 + 4;
            }
            *(_QWORD *)(a1 + 16) = v75;
            v84 = *((_QWORD *)this + 1);
            if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((_QWORD *)this + 2))
              goto LABEL_172;
            *(v75 - 1) = *(_DWORD *)(*(_QWORD *)this + v84);
            v72 = *((_QWORD *)this + 2);
            v71 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v71;
          }
          goto LABEL_173;
        case 6u:
          if ((_DWORD)v26 != 2)
          {
            v123 = *(char **)(a1 + 88);
            v122 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v123 >= v122)
            {
              v150 = (char *)*v182;
              v151 = (v123 - (_BYTE *)*v182) >> 2;
              v152 = v151 + 1;
              if ((unint64_t)(v151 + 1) >> 62)
LABEL_293:
                sub_100259694();
              v153 = v122 - (_QWORD)v150;
              if (v153 >> 1 > v152)
                v152 = v153 >> 1;
              if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFFCLL)
                v154 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v154 = v152;
              if (v154)
              {
                v155 = (char *)sub_100260634(v180, v154);
                v150 = *(char **)(a1 + 80);
                v123 = *(char **)(a1 + 88);
              }
              else
              {
                v155 = 0;
              }
              v170 = &v155[4 * v151];
              *(_DWORD *)v170 = 0;
              v115 = v170 + 4;
              while (v123 != v150)
              {
                v171 = *((_DWORD *)v123 - 1);
                v123 -= 4;
                *((_DWORD *)v170 - 1) = v171;
                v170 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v170;
              *(_QWORD *)(a1 + 88) = v115;
              *(_QWORD *)(a1 + 96) = &v155[4 * v154];
              if (v150)
                operator delete(v150);
            }
            else
            {
              *(_DWORD *)v123 = 0;
              v115 = v123 + 4;
            }
            *(_QWORD *)(a1 + 88) = v115;
            goto LABEL_276;
          }
          if ((PB::Reader::placeMark(this, v184, v26, a4) & 1) != 0)
            return 0;
          v85 = *((_QWORD *)this + 1);
          v86 = *((_QWORD *)this + 2);
          while (v85 < v86 && !*((_BYTE *)this + 24))
          {
            v88 = *(char **)(a1 + 88);
            v87 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v88 >= v87)
            {
              v90 = (char *)*v182;
              v91 = (v88 - (_BYTE *)*v182) >> 2;
              v92 = v91 + 1;
              if ((unint64_t)(v91 + 1) >> 62)
                goto LABEL_293;
              v93 = v87 - (_QWORD)v90;
              if (v93 >> 1 > v92)
                v92 = v93 >> 1;
              if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL)
                v94 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v94 = v92;
              if (v94)
              {
                v95 = (char *)sub_100260634(v180, v94);
                v90 = *(char **)(a1 + 80);
                v88 = *(char **)(a1 + 88);
              }
              else
              {
                v95 = 0;
              }
              v96 = &v95[4 * v91];
              *(_DWORD *)v96 = 0;
              v89 = v96 + 4;
              while (v88 != v90)
              {
                v97 = *((_DWORD *)v88 - 1);
                v88 -= 4;
                *((_DWORD *)v96 - 1) = v97;
                v96 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v96;
              *(_QWORD *)(a1 + 88) = v89;
              *(_QWORD *)(a1 + 96) = &v95[4 * v94];
              if (v90)
                operator delete(v90);
            }
            else
            {
              *(_DWORD *)v88 = 0;
              v89 = v88 + 4;
            }
            *(_QWORD *)(a1 + 88) = v89;
            v98 = *((_QWORD *)this + 1);
            if (v98 > 0xFFFFFFFFFFFFFFFBLL || v98 + 4 > *((_QWORD *)this + 2))
              goto LABEL_172;
            *(v89 - 1) = *(_DWORD *)(*(_QWORD *)this + v98);
            v86 = *((_QWORD *)this + 2);
            v85 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v85;
          }
          goto LABEL_173;
        case 7u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v184, v26, a4) & 1) != 0)
              return 0;
            v99 = *((_QWORD *)this + 1);
            v100 = *((_QWORD *)this + 2);
            while (v99 < v100 && !*((_BYTE *)this + 24))
            {
              v102 = *(char **)(a1 + 136);
              v101 = *(_QWORD *)(a1 + 144);
              if ((unint64_t)v102 >= v101)
              {
                v104 = (char *)*v183;
                v105 = (v102 - (_BYTE *)*v183) >> 2;
                v106 = v105 + 1;
                if ((unint64_t)(v105 + 1) >> 62)
                  goto LABEL_294;
                v107 = v101 - (_QWORD)v104;
                if (v107 >> 1 > v106)
                  v106 = v107 >> 1;
                if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFFCLL)
                  v108 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v108 = v106;
                if (v108)
                {
                  v109 = (char *)sub_100260634(v181, v108);
                  v104 = *(char **)(a1 + 128);
                  v102 = *(char **)(a1 + 136);
                }
                else
                {
                  v109 = 0;
                }
                v110 = &v109[4 * v105];
                *(_DWORD *)v110 = 0;
                v103 = v110 + 4;
                while (v102 != v104)
                {
                  v111 = *((_DWORD *)v102 - 1);
                  v102 -= 4;
                  *((_DWORD *)v110 - 1) = v111;
                  v110 -= 4;
                }
                *(_QWORD *)(a1 + 128) = v110;
                *(_QWORD *)(a1 + 136) = v103;
                *(_QWORD *)(a1 + 144) = &v109[4 * v108];
                if (v104)
                  operator delete(v104);
              }
              else
              {
                *(_DWORD *)v102 = 0;
                v103 = v102 + 4;
              }
              *(_QWORD *)(a1 + 136) = v103;
              v112 = *((_QWORD *)this + 1);
              if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((_QWORD *)this + 2))
              {
LABEL_172:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v103 - 1) = *(_DWORD *)(*(_QWORD *)this + v112);
              v100 = *((_QWORD *)this + 2);
              v99 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v99;
            }
LABEL_173:
            PB::Reader::recallMark(this, v184);
          }
          else
          {
            v125 = *(char **)(a1 + 136);
            v124 = *(_QWORD *)(a1 + 144);
            if ((unint64_t)v125 >= v124)
            {
              v156 = (char *)*v183;
              v157 = (v125 - (_BYTE *)*v183) >> 2;
              v158 = v157 + 1;
              if ((unint64_t)(v157 + 1) >> 62)
LABEL_294:
                sub_100259694();
              v159 = v124 - (_QWORD)v156;
              if (v159 >> 1 > v158)
                v158 = v159 >> 1;
              if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFFCLL)
                v160 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v160 = v158;
              if (v160)
              {
                v161 = (char *)sub_100260634(v181, v160);
                v156 = *(char **)(a1 + 128);
                v125 = *(char **)(a1 + 136);
              }
              else
              {
                v161 = 0;
              }
              v172 = &v161[4 * v157];
              *(_DWORD *)v172 = 0;
              v115 = v172 + 4;
              while (v125 != v156)
              {
                v173 = *((_DWORD *)v125 - 1);
                v125 -= 4;
                *((_DWORD *)v172 - 1) = v173;
                v172 -= 4;
              }
              *(_QWORD *)(a1 + 128) = v172;
              *(_QWORD *)(a1 + 136) = v115;
              *(_QWORD *)(a1 + 144) = &v161[4 * v160];
              if (v156)
                operator delete(v156);
            }
            else
            {
              *(_DWORD *)v125 = 0;
              v115 = v125 + 4;
            }
            *(_QWORD *)(a1 + 136) = v115;
LABEL_276:
            v174 = *((_QWORD *)this + 1);
            if (v174 <= 0xFFFFFFFFFFFFFFFBLL && v174 + 4 <= *((_QWORD *)this + 2))
            {
              *(v115 - 1) = *(_DWORD *)(*(_QWORD *)this + v174);
              v28 = *((_QWORD *)this + 1) + 4;
LABEL_280:
              *((_QWORD *)this + 1) = v28;
            }
            else
            {
LABEL_278:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_281:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || *((_BYTE *)this + 24))
            return v6 == 0;
          break;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_281;
      }
    }
    v21 = 0;
    v22 = 0;
    v17 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v23 = v4 + 1;
      v24 = *(_BYTE *)(v14 + v4);
      *((_QWORD *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0)
        goto LABEL_21;
      v21 += 7;
      v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        v17 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_1015D2C38(uint64_t result, PB::Writer *this)
{
  _QWORD *v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  float *v14;
  float v15;
  float *v16;
  float *v17;
  float v18;
  float *v19;
  float *v20;
  float v21;

  v3 = (_QWORD *)result;
  if ((*(_BYTE *)(result + 160) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 152), 1u);
  v4 = (float *)v3[4];
  v5 = (float *)v3[5];
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6, 2u);
  }
  v7 = (float *)v3[7];
  v8 = (float *)v3[8];
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9, 3u);
  }
  v10 = (float *)v3[13];
  v11 = (float *)v3[14];
  while (v10 != v11)
  {
    v12 = *v10++;
    result = PB::Writer::write(this, v12, 4u);
  }
  v13 = (float *)v3[1];
  v14 = (float *)v3[2];
  while (v13 != v14)
  {
    v15 = *v13++;
    result = PB::Writer::write(this, v15, 5u);
  }
  v16 = (float *)v3[10];
  v17 = (float *)v3[11];
  while (v16 != v17)
  {
    v18 = *v16++;
    result = PB::Writer::write(this, v18, 6u);
  }
  v20 = (float *)v3[16];
  v19 = (float *)v3[17];
  while (v20 != v19)
  {
    v21 = *v20++;
    result = PB::Writer::write(this, v21, 7u);
  }
  return result;
}

double sub_1015D2D38(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021C0918;
  *(_DWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_1015D2D5C(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1021C0918;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_1015D2DAC(PB::Base *a1)
{
  sub_1015D2D5C(a1);
  operator delete();
}

uint64_t sub_1015D2DD0(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_1021C0918;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if ((*(_BYTE *)(a2 + 64) & 1) != 0)
  {
    v5 = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 64) = 1;
    *(_QWORD *)(a1 + 56) = v5;
  }
  if (a1 != a2)
  {
    sub_1002A3054((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
    sub_1002A3054(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  }
  return a1;
}

uint64_t sub_1015D2E70(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "biasvariance", v7);
  }
  v8 = *(float **)(a1 + 32);
  v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "statevariance", v10);
  }
  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1015D2F24(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  _DWORD *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  _DWORD *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  _DWORD *v60;
  unint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  int v76;
  char *v77;
  int v78;
  unint64_t v79;
  _BYTE v81[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    v12 = (void **)(a1 + 32);
    v13 = a1 + 48;
    while (1)
    {
      v14 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
      {
        v21 = 0;
        v22 = 0;
        v17 = 0;
        if (v4 > v5)
          v5 = v4;
        while (v5 != v4)
        {
          v23 = v4 + 1;
          v24 = *(_BYTE *)(v14 + v4);
          *((_QWORD *)this + 1) = v23;
          v17 |= (unint64_t)(v24 & 0x7F) << v21;
          if ((v24 & 0x80) == 0)
            goto LABEL_21;
          v21 += 7;
          v4 = v23;
          if (v22++ >= 9)
          {
LABEL_20:
            v17 = 0;
            goto LABEL_21;
          }
        }
        v6 = 1;
        *((_BYTE *)this + 24) = 1;
        return v6 == 0;
      }
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v4 = v18;
        if (v16++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      v27 = v17 >> 3;
      if ((v17 >> 3) == 3)
        break;
      if ((_DWORD)v27 == 2)
      {
        if ((_DWORD)v26 == 2)
        {
          if ((PB::Reader::placeMark(this, v81, v26, a4) & 1) != 0)
            return 0;
          v44 = *((_QWORD *)this + 1);
          v45 = *((_QWORD *)this + 2);
          while (v44 < v45 && !*((_BYTE *)this + 24))
          {
            v47 = *(char **)(a1 + 40);
            v46 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v47 >= v46)
            {
              v49 = (char *)*v12;
              v50 = (v47 - (_BYTE *)*v12) >> 2;
              v51 = v50 + 1;
              if ((unint64_t)(v50 + 1) >> 62)
                goto LABEL_128;
              v52 = v46 - (_QWORD)v49;
              if (v52 >> 1 > v51)
                v51 = v52 >> 1;
              if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
                v53 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v53 = v51;
              if (v53)
              {
                v54 = (char *)sub_100260634(v13, v53);
                v49 = *(char **)(a1 + 32);
                v47 = *(char **)(a1 + 40);
              }
              else
              {
                v54 = 0;
              }
              v55 = &v54[4 * v50];
              *(_DWORD *)v55 = 0;
              v48 = v55 + 4;
              while (v47 != v49)
              {
                v56 = *((_DWORD *)v47 - 1);
                v47 -= 4;
                *((_DWORD *)v55 - 1) = v56;
                v55 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v55;
              *(_QWORD *)(a1 + 40) = v48;
              *(_QWORD *)(a1 + 48) = &v54[4 * v53];
              if (v49)
                operator delete(v49);
            }
            else
            {
              *(_DWORD *)v47 = 0;
              v48 = v47 + 4;
            }
            *(_QWORD *)(a1 + 40) = v48;
            v57 = *((_QWORD *)this + 1);
            if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((_QWORD *)this + 2))
              goto LABEL_82;
            *(v48 - 1) = *(_DWORD *)(*(_QWORD *)this + v57);
            v45 = *((_QWORD *)this + 2);
            v44 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v44;
          }
          goto LABEL_83;
        }
        v62 = *(char **)(a1 + 40);
        v61 = *(_QWORD *)(a1 + 48);
        if ((unint64_t)v62 >= v61)
        {
          v69 = (char *)*v12;
          v70 = (v62 - (_BYTE *)*v12) >> 2;
          v71 = v70 + 1;
          if ((unint64_t)(v70 + 1) >> 62)
LABEL_128:
            sub_100259694();
          v72 = v61 - (_QWORD)v69;
          if (v72 >> 1 > v71)
            v71 = v72 >> 1;
          if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
            v73 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v73 = v71;
          if (v73)
          {
            v74 = (char *)sub_100260634(v13, v73);
            v69 = *(char **)(a1 + 32);
            v62 = *(char **)(a1 + 40);
          }
          else
          {
            v74 = 0;
          }
          v77 = &v74[4 * v70];
          *(_DWORD *)v77 = 0;
          v60 = v77 + 4;
          while (v62 != v69)
          {
            v78 = *((_DWORD *)v62 - 1);
            v62 -= 4;
            *((_DWORD *)v77 - 1) = v78;
            v77 -= 4;
          }
          *(_QWORD *)(a1 + 32) = v77;
          *(_QWORD *)(a1 + 40) = v60;
          *(_QWORD *)(a1 + 48) = &v74[4 * v73];
          if (v69)
            operator delete(v69);
        }
        else
        {
          *(_DWORD *)v62 = 0;
          v60 = v62 + 4;
        }
        *(_QWORD *)(a1 + 40) = v60;
LABEL_114:
        v79 = *((_QWORD *)this + 1);
        if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((_QWORD *)this + 2))
        {
LABEL_116:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_119;
        }
        *(v60 - 1) = *(_DWORD *)(*(_QWORD *)this + v79);
        v29 = *((_QWORD *)this + 1) + 4;
        goto LABEL_118;
      }
      if ((_DWORD)v27 == 1)
      {
        *(_BYTE *)(a1 + 64) |= 1u;
        v28 = *((_QWORD *)this + 1);
        if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((_QWORD *)this + 2))
          goto LABEL_116;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v28);
        v29 = *((_QWORD *)this + 1) + 8;
LABEL_118:
        *((_QWORD *)this + 1) = v29;
        goto LABEL_119;
      }
      if ((PB::Reader::skip(this, v27, v17 & 7, 0) & 1) == 0)
        return 0;
LABEL_119:
      v4 = *((_QWORD *)this + 1);
      v5 = *((_QWORD *)this + 2);
      v6 = *((unsigned __int8 *)this + 24);
      if (v4 >= v5 || *((_BYTE *)this + 24))
        return v6 == 0;
    }
    if ((_DWORD)v26 == 2)
    {
      if ((PB::Reader::placeMark(this, v81, v26, a4) & 1) != 0)
        return 0;
      v30 = *((_QWORD *)this + 1);
      v31 = *((_QWORD *)this + 2);
      while (v30 < v31 && !*((_BYTE *)this + 24))
      {
        v33 = *(char **)(a1 + 16);
        v32 = *(_QWORD *)(a1 + 24);
        if ((unint64_t)v33 >= v32)
        {
          v35 = (char *)*v10;
          v36 = (v33 - (_BYTE *)*v10) >> 2;
          v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 62)
            goto LABEL_127;
          v38 = v32 - (_QWORD)v35;
          if (v38 >> 1 > v37)
            v37 = v38 >> 1;
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
            v39 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v39 = v37;
          if (v39)
          {
            v40 = (char *)sub_100260634(v11, v39);
            v35 = *(char **)(a1 + 8);
            v33 = *(char **)(a1 + 16);
          }
          else
          {
            v40 = 0;
          }
          v41 = &v40[4 * v36];
          *(_DWORD *)v41 = 0;
          v34 = v41 + 4;
          while (v33 != v35)
          {
            v42 = *((_DWORD *)v33 - 1);
            v33 -= 4;
            *((_DWORD *)v41 - 1) = v42;
            v41 -= 4;
          }
          *(_QWORD *)(a1 + 8) = v41;
          *(_QWORD *)(a1 + 16) = v34;
          *(_QWORD *)(a1 + 24) = &v40[4 * v39];
          if (v35)
            operator delete(v35);
        }
        else
        {
          *(_DWORD *)v33 = 0;
          v34 = v33 + 4;
        }
        *(_QWORD *)(a1 + 16) = v34;
        v43 = *((_QWORD *)this + 1);
        if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((_QWORD *)this + 2))
        {
LABEL_82:
          *((_BYTE *)this + 24) = 1;
          break;
        }
        *(v34 - 1) = *(_DWORD *)(*(_QWORD *)this + v43);
        v31 = *((_QWORD *)this + 2);
        v30 = *((_QWORD *)this + 1) + 4;
        *((_QWORD *)this + 1) = v30;
      }
LABEL_83:
      PB::Reader::recallMark(this, v81);
      goto LABEL_119;
    }
    v59 = *(char **)(a1 + 16);
    v58 = *(_QWORD *)(a1 + 24);
    if ((unint64_t)v59 >= v58)
    {
      v63 = (char *)*v10;
      v64 = (v59 - (_BYTE *)*v10) >> 2;
      v65 = v64 + 1;
      if ((unint64_t)(v64 + 1) >> 62)
LABEL_127:
        sub_100259694();
      v66 = v58 - (_QWORD)v63;
      if (v66 >> 1 > v65)
        v65 = v66 >> 1;
      if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
        v67 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v67 = v65;
      if (v67)
      {
        v68 = (char *)sub_100260634(v11, v67);
        v63 = *(char **)(a1 + 8);
        v59 = *(char **)(a1 + 16);
      }
      else
      {
        v68 = 0;
      }
      v75 = &v68[4 * v64];
      *(_DWORD *)v75 = 0;
      v60 = v75 + 4;
      while (v59 != v63)
      {
        v76 = *((_DWORD *)v59 - 1);
        v59 -= 4;
        *((_DWORD *)v75 - 1) = v76;
        v75 -= 4;
      }
      *(_QWORD *)(a1 + 8) = v75;
      *(_QWORD *)(a1 + 16) = v60;
      *(_QWORD *)(a1 + 24) = &v68[4 * v67];
      if (v63)
        operator delete(v63);
    }
    else
    {
      *(_DWORD *)v59 = 0;
      v60 = v59 + 4;
    }
    *(_QWORD *)(a1 + 16) = v60;
    goto LABEL_114;
  }
  return v6 == 0;
}

uint64_t sub_1015D349C(uint64_t result, PB::Writer *this)
{
  _QWORD *v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;

  v3 = (_QWORD *)result;
  if ((*(_BYTE *)(result + 64) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 56), 1u);
  v4 = (float *)v3[4];
  v5 = (float *)v3[5];
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6, 2u);
  }
  v8 = (float *)v3[1];
  v7 = (float *)v3[2];
  while (v8 != v7)
  {
    v9 = *v8++;
    result = PB::Writer::write(this, v9, 3u);
  }
  return result;
}

uint64_t sub_1015D351C(uint64_t result)
{
  *(_QWORD *)result = &off_1021C0950;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_1015D3534(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_1015D3558(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1021C0950;
  *(_DWORD *)(a1 + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 2) != 0)
  {
    v4 = *(_QWORD *)(a2 + 16);
    v3 = 2;
    *(_BYTE *)(a1 + 28) = 2;
    *(_QWORD *)(a1 + 16) = v4;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
LABEL_5:
    v4 = *(_QWORD *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 28) = v3 | 4;
    *(_DWORD *)(a1 + 24) = v4;
  }
  return *(float *)&v4;
}

uint64_t sub_1015D35C8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "theta", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "cadence", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015D3658(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 28) |= 4u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
          goto LABEL_32;
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
        v2 = *((_QWORD *)this + 1) + 4;
      }
      else
      {
        if ((_DWORD)v20 == 2)
        {
          *(_BYTE *)(a1 + 28) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_32;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
        }
        else
        {
          if ((_DWORD)v20 != 1)
          {
            result = PB::Reader::skip(this, v20, v11 & 7, 0);
            if (!(_DWORD)result)
              return result;
            v2 = *((_QWORD *)this + 1);
            goto LABEL_38;
          }
          *(_BYTE *)(a1 + 28) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          {
LABEL_32:
            *((_BYTE *)this + 24) = 1;
            goto LABEL_38;
          }
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
        }
        v2 = *((_QWORD *)this + 1) + 8;
      }
      *((_QWORD *)this + 1) = v2;
LABEL_38:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_1015D3878(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return result;
      return PB::Writer::write(this, *(float *)(v3 + 24), 3u);
    }
  }
  else if ((*(_BYTE *)(result + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 24), 3u);
  return result;
}

uint64_t sub_1015D38F0(uint64_t result)
{
  *(_QWORD *)result = &off_1021C0988;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1015D3908(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015D392C(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_1021C0988;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_1015D397C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "displacingState", *(_DWORD *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015D39E4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v25;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015D3C70(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  return result;
}

uint64_t sub_1015D3CC8(uint64_t result)
{
  *(_QWORD *)result = &off_1021C09C0;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_1015D3CE0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015D3D04(uint64_t result, uint64_t a2)
{
  char v2;

  *(_QWORD *)result = &off_1021C09C0;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_BYTE *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_BYTE *)(result + 8) = v2;
  }
  return result;
}

uint64_t sub_1015D3D30(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "displayOn", *(_BYTE *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015D3D7C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        if (v2 >= v3)
        {
          v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v21 = v20 != 0;
        }
        *(_BYTE *)(a1 + 8) = v21;
      }
      else
      {
        result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015D3F08(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::write(this, *(_BYTE *)(result + 8), 1u);
  return result;
}

double sub_1015D3F28(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021C09F8;
  *(_DWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  return result;
}

void sub_1015D3F64(PB::Base *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_1021C09F8;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)*((_QWORD *)this + 10);
  if (v4)
  {
    *((_QWORD *)this + 11) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 7);
  if (v5)
  {
    *((_QWORD *)this + 8) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 4);
  if (v6)
  {
    *((_QWORD *)this + 5) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 1);
  if (v7)
  {
    *((_QWORD *)this + 2) = v7;
    operator delete(v7);
  }
  PB::Base::~Base(this);
}

void sub_1015D4004(PB::Base *a1)
{
  sub_1015D3F64(a1);
  operator delete();
}

uint64_t sub_1015D4028(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  int v12;
  uint64_t v13;
  int v14;
  char v15;
  int v16;
  int v17;
  int v18;

  *(_QWORD *)a1 = &off_1021C09F8;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = (char *)(a1 + 56);
  *(_DWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  if ((*(_WORD *)(a2 + 168) & 2) != 0)
  {
    v6 = *(_QWORD *)(a2 + 128);
    *(_WORD *)(a1 + 168) = 2;
    *(_QWORD *)(a1 + 128) = v6;
  }
  if (a1 != a2)
  {
    sub_1002A3054((char *)(a1 + 80), *(char **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
    sub_1002A3054(v5, *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
  }
  v7 = *(_WORD *)(a2 + 168);
  if ((v7 & 0x20) != 0)
  {
    v12 = *(_DWORD *)(a2 + 148);
    *(_WORD *)(a1 + 168) |= 0x20u;
    *(_DWORD *)(a1 + 148) = v12;
    v7 = *(_WORD *)(a2 + 168);
    if ((v7 & 1) == 0)
    {
LABEL_7:
      if ((v7 & 0x100) == 0)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  else if ((v7 & 1) == 0)
  {
    goto LABEL_7;
  }
  v13 = *(_QWORD *)(a2 + 120);
  *(_WORD *)(a1 + 168) |= 1u;
  *(_QWORD *)(a1 + 120) = v13;
  if ((*(_WORD *)(a2 + 168) & 0x100) != 0)
  {
LABEL_8:
    v8 = *(_DWORD *)(a2 + 160);
    *(_WORD *)(a1 + 168) |= 0x100u;
    *(_DWORD *)(a1 + 160) = v8;
  }
LABEL_9:
  if (*(_QWORD *)(a2 + 104))
    operator new();
  if (*(_QWORD *)(a2 + 112))
    operator new();
  v9 = *(_WORD *)(a2 + 168);
  if ((v9 & 0x10) != 0)
  {
    v14 = *(_DWORD *)(a2 + 144);
    *(_WORD *)(a1 + 168) |= 0x10u;
    *(_DWORD *)(a1 + 144) = v14;
    v9 = *(_WORD *)(a2 + 168);
    if ((v9 & 0x200) == 0)
    {
LABEL_15:
      if ((v9 & 4) == 0)
        goto LABEL_16;
      goto LABEL_28;
    }
  }
  else if ((*(_WORD *)(a2 + 168) & 0x200) == 0)
  {
    goto LABEL_15;
  }
  v15 = *(_BYTE *)(a2 + 164);
  *(_WORD *)(a1 + 168) |= 0x200u;
  *(_BYTE *)(a1 + 164) = v15;
  v9 = *(_WORD *)(a2 + 168);
  if ((v9 & 4) == 0)
  {
LABEL_16:
    if ((v9 & 8) == 0)
      goto LABEL_17;
    goto LABEL_29;
  }
LABEL_28:
  v16 = *(_DWORD *)(a2 + 136);
  *(_WORD *)(a1 + 168) |= 4u;
  *(_DWORD *)(a1 + 136) = v16;
  v9 = *(_WORD *)(a2 + 168);
  if ((v9 & 8) == 0)
  {
LABEL_17:
    if ((v9 & 0x40) == 0)
      goto LABEL_18;
    goto LABEL_30;
  }
LABEL_29:
  v17 = *(_DWORD *)(a2 + 140);
  *(_WORD *)(a1 + 168) |= 8u;
  *(_DWORD *)(a1 + 140) = v17;
  v9 = *(_WORD *)(a2 + 168);
  if ((v9 & 0x40) == 0)
  {
LABEL_18:
    if ((v9 & 0x80) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_30:
  v18 = *(_DWORD *)(a2 + 152);
  *(_WORD *)(a1 + 168) |= 0x40u;
  *(_DWORD *)(a1 + 152) = v18;
  if ((*(_WORD *)(a2 + 168) & 0x80) != 0)
  {
LABEL_19:
    v10 = *(_DWORD *)(a2 + 156);
    *(_WORD *)(a1 + 168) |= 0x80u;
    *(_DWORD *)(a1 + 156) = v10;
  }
LABEL_20:
  if (a1 != a2)
  {
    sub_1002A3054(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
    sub_1002A3054((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  }
  return a1;
}

uint64_t sub_1015D42BC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;
  float *v6;
  float *v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  float *v12;
  float v13;
  __int16 v14;
  float *v15;
  float *v16;
  float v17;
  float *v18;
  float *v19;
  float v20;
  __int16 v21;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 168);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "AzABufferMean", *(float *)(a1 + 136));
    v5 = *(_WORD *)(a1 + 168);
  }
  if ((v5 & 8) != 0)
    PB::TextFormatter::format(this, "AzBBufferMean", *(float *)(a1 + 140));
  v6 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "cachedAttitude", v8);
  }
  v9 = *(_QWORD *)(a1 + 104);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, this, "candidateA");
  v10 = *(_QWORD *)(a1 + 112);
  if (v10)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, this, "candidateB");
  v11 = *(float **)(a1 + 32);
  v12 = *(float **)(a1 + 40);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(this, "currAttitude", v13);
  }
  v14 = *(_WORD *)(a1 + 168);
  if ((v14 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "disambiguationFlag", *(_DWORD *)(a1 + 144));
    v14 = *(_WORD *)(a1 + 168);
    if ((v14 & 1) == 0)
    {
LABEL_15:
      if ((v14 & 0x20) == 0)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else if ((v14 & 1) == 0)
  {
    goto LABEL_15;
  }
  PB::TextFormatter::format(this, "lastDoTUpdateTime", *(double *)(a1 + 120));
  if ((*(_WORD *)(a1 + 168) & 0x20) != 0)
LABEL_16:
    PB::TextFormatter::format(this, "lastEstimatedDoTAngleRad", *(float *)(a1 + 148));
LABEL_17:
  v15 = *(float **)(a1 + 56);
  v16 = *(float **)(a1 + 64);
  while (v15 != v16)
  {
    v17 = *v15++;
    PB::TextFormatter::format(this, "lpfInertialRotationRate", v17);
  }
  v18 = *(float **)(a1 + 80);
  v19 = *(float **)(a1 + 88);
  while (v18 != v19)
  {
    v20 = *v18++;
    PB::TextFormatter::format(this, "lpfInertialUserAccel", v20);
  }
  v21 = *(_WORD *)(a1 + 168);
  if ((v21 & 0x200) != 0)
  {
    PB::TextFormatter::format(this, "newDisambiguation", *(_BYTE *)(a1 + 164));
    v21 = *(_WORD *)(a1 + 168);
    if ((v21 & 0x40) == 0)
    {
LABEL_23:
      if ((v21 & 0x80) == 0)
        goto LABEL_24;
      goto LABEL_33;
    }
  }
  else if ((v21 & 0x40) == 0)
  {
    goto LABEL_23;
  }
  PB::TextFormatter::format(this, "numAbortedPeaks", *(_DWORD *)(a1 + 152));
  v21 = *(_WORD *)(a1 + 168);
  if ((v21 & 0x80) == 0)
  {
LABEL_24:
    if ((v21 & 0x100) == 0)
      goto LABEL_25;
LABEL_34:
    PB::TextFormatter::format(this, "stateFSM", *(_DWORD *)(a1 + 160));
    if ((*(_WORD *)(a1 + 168) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_26;
  }
LABEL_33:
  PB::TextFormatter::format(this, "numLargeYawDetections", *(_DWORD *)(a1 + 156));
  v21 = *(_WORD *)(a1 + 168);
  if ((v21 & 0x100) != 0)
    goto LABEL_34;
LABEL_25:
  if ((v21 & 2) != 0)
LABEL_26:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 128));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1015D4524(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  BOOL v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  char v25;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  _DWORD *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  BOOL v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  _DWORD *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  _DWORD *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char v90;
  unsigned int v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char v98;
  unsigned int v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  _DWORD *v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  char *v123;
  int v124;
  unint64_t v125;
  unint64_t v126;
  char *v127;
  _DWORD *v128;
  char v129;
  unsigned int v130;
  unint64_t v131;
  char v132;
  unint64_t v133;
  char *v134;
  unint64_t v135;
  char *v136;
  char v137;
  unsigned int v138;
  unint64_t v139;
  char v140;
  char v141;
  unsigned int v142;
  unint64_t v143;
  char v144;
  char v145;
  unsigned int v146;
  unint64_t v147;
  char v148;
  unint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  char *v174;
  char *v175;
  int v176;
  char *v177;
  int v178;
  char *v179;
  int v180;
  char *v181;
  int v182;
  unint64_t v183;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _BYTE v189[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 32);
    v11 = (void **)(a1 + 8);
    v187 = a1 + 24;
    v188 = a1 + 48;
    v12 = (void **)(a1 + 56);
    v186 = a1 + 72;
    v13 = (void **)(a1 + 80);
    v14 = a1 + 96;
    while (1)
    {
      v15 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      while (1)
      {
        v19 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v20 = *(_BYTE *)(v15 + v4);
        v18 |= (unint64_t)(v20 & 0x7F) << v16;
        if ((v20 & 0x80) == 0)
          break;
        v16 += 7;
        v4 = v19;
        v21 = v17++ > 8;
        if (v21)
          goto LABEL_20;
      }
LABEL_21:
      v27 = v18 & 7;
      if ((_DWORD)v27 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v18 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 168) |= 2u;
          v28 = *((_QWORD *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((_QWORD *)this + 2))
            goto LABEL_287;
          *(_QWORD *)(a1 + 128) = *(_QWORD *)(*(_QWORD *)this + v28);
          goto LABEL_53;
        case 2u:
          if ((_DWORD)v27 != 2)
          {
            v136 = *(char **)(a1 + 88);
            v135 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v136 >= v135)
            {
              v163 = (char *)*v13;
              v164 = (v136 - (_BYTE *)*v13) >> 2;
              v165 = v164 + 1;
              if ((unint64_t)(v164 + 1) >> 62)
LABEL_303:
                sub_100259694();
              v166 = v135 - (_QWORD)v163;
              if (v166 >> 1 > v165)
                v165 = v166 >> 1;
              if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFFCLL)
                v167 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v167 = v165;
              if (v167)
              {
                v168 = (char *)sub_100260634(v14, v167);
                v163 = *(char **)(a1 + 80);
                v136 = *(char **)(a1 + 88);
              }
              else
              {
                v168 = 0;
              }
              v179 = &v168[4 * v164];
              *(_DWORD *)v179 = 0;
              v128 = v179 + 4;
              while (v136 != v163)
              {
                v180 = *((_DWORD *)v136 - 1);
                v136 -= 4;
                *((_DWORD *)v179 - 1) = v180;
                v179 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v179;
              *(_QWORD *)(a1 + 88) = v128;
              *(_QWORD *)(a1 + 96) = &v168[4 * v167];
              if (v163)
                operator delete(v163);
            }
            else
            {
              *(_DWORD *)v136 = 0;
              v128 = v136 + 4;
            }
            *(_QWORD *)(a1 + 88) = v128;
            goto LABEL_285;
          }
          if ((PB::Reader::placeMark(this, v189, v27, a4) & 1) != 0)
            return 0;
          v72 = *((_QWORD *)this + 1);
          v73 = *((_QWORD *)this + 2);
          while (v72 < v73 && !*((_BYTE *)this + 24))
          {
            v75 = *(char **)(a1 + 88);
            v74 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v75 >= v74)
            {
              v77 = (char *)*v13;
              v78 = (v75 - (_BYTE *)*v13) >> 2;
              v79 = v78 + 1;
              if ((unint64_t)(v78 + 1) >> 62)
                goto LABEL_303;
              v80 = v74 - (_QWORD)v77;
              if (v80 >> 1 > v79)
                v79 = v80 >> 1;
              if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL)
                v81 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v81 = v79;
              if (v81)
              {
                v82 = (char *)sub_100260634(v14, v81);
                v77 = *(char **)(a1 + 80);
                v75 = *(char **)(a1 + 88);
              }
              else
              {
                v82 = 0;
              }
              v83 = &v82[4 * v78];
              *(_DWORD *)v83 = 0;
              v76 = v83 + 4;
              while (v75 != v77)
              {
                v84 = *((_DWORD *)v75 - 1);
                v75 -= 4;
                *((_DWORD *)v83 - 1) = v84;
                v83 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v83;
              *(_QWORD *)(a1 + 88) = v76;
              *(_QWORD *)(a1 + 96) = &v82[4 * v81];
              if (v77)
                operator delete(v77);
            }
            else
            {
              *(_DWORD *)v75 = 0;
              v76 = v75 + 4;
            }
            *(_QWORD *)(a1 + 88) = v76;
            v85 = *((_QWORD *)this + 1);
            if (v85 > 0xFFFFFFFFFFFFFFFBLL || v85 + 4 > *((_QWORD *)this + 2))
              goto LABEL_169;
            *(v76 - 1) = *(_DWORD *)(*(_QWORD *)this + v85);
            v73 = *((_QWORD *)this + 2);
            v72 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v72;
          }
          goto LABEL_170;
        case 3u:
          if ((_DWORD)v27 != 2)
          {
            v127 = *(char **)(a1 + 64);
            v126 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v127 >= v126)
            {
              v151 = (char *)*v12;
              v152 = (v127 - (_BYTE *)*v12) >> 2;
              v153 = v152 + 1;
              if ((unint64_t)(v152 + 1) >> 62)
LABEL_301:
                sub_100259694();
              v154 = v126 - (_QWORD)v151;
              if (v154 >> 1 > v153)
                v153 = v154 >> 1;
              if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL)
                v155 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v155 = v153;
              if (v155)
              {
                v156 = (char *)sub_100260634(v186, v155);
                v151 = *(char **)(a1 + 56);
                v127 = *(char **)(a1 + 64);
              }
              else
              {
                v156 = 0;
              }
              v175 = &v156[4 * v152];
              *(_DWORD *)v175 = 0;
              v128 = v175 + 4;
              while (v127 != v151)
              {
                v176 = *((_DWORD *)v127 - 1);
                v127 -= 4;
                *((_DWORD *)v175 - 1) = v176;
                v175 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v175;
              *(_QWORD *)(a1 + 64) = v128;
              *(_QWORD *)(a1 + 72) = &v156[4 * v155];
              if (v151)
                operator delete(v151);
            }
            else
            {
              *(_DWORD *)v127 = 0;
              v128 = v127 + 4;
            }
            *(_QWORD *)(a1 + 64) = v128;
            goto LABEL_285;
          }
          if ((PB::Reader::placeMark(this, v189, v27, a4) & 1) != 0)
            return 0;
          v29 = *((_QWORD *)this + 1);
          v30 = *((_QWORD *)this + 2);
          while (v29 < v30 && !*((_BYTE *)this + 24))
          {
            v32 = *(char **)(a1 + 64);
            v31 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v32 >= v31)
            {
              v34 = (char *)*v12;
              v35 = (v32 - (_BYTE *)*v12) >> 2;
              v36 = v35 + 1;
              if ((unint64_t)(v35 + 1) >> 62)
                goto LABEL_301;
              v37 = v31 - (_QWORD)v34;
              if (v37 >> 1 > v36)
                v36 = v37 >> 1;
              if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
                v38 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v38 = v36;
              if (v38)
              {
                v39 = (char *)sub_100260634(v186, v38);
                v34 = *(char **)(a1 + 56);
                v32 = *(char **)(a1 + 64);
              }
              else
              {
                v39 = 0;
              }
              v40 = &v39[4 * v35];
              *(_DWORD *)v40 = 0;
              v33 = v40 + 4;
              while (v32 != v34)
              {
                v41 = *((_DWORD *)v32 - 1);
                v32 -= 4;
                *((_DWORD *)v40 - 1) = v41;
                v40 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v40;
              *(_QWORD *)(a1 + 64) = v33;
              *(_QWORD *)(a1 + 72) = &v39[4 * v38];
              if (v34)
                operator delete(v34);
            }
            else
            {
              *(_DWORD *)v32 = 0;
              v33 = v32 + 4;
            }
            *(_QWORD *)(a1 + 64) = v33;
            v42 = *((_QWORD *)this + 1);
            if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((_QWORD *)this + 2))
              goto LABEL_169;
            *(v33 - 1) = *(_DWORD *)(*(_QWORD *)this + v42);
            v30 = *((_QWORD *)this + 2);
            v29 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v29;
          }
          goto LABEL_170;
        case 4u:
          *(_WORD *)(a1 + 168) |= 0x20u;
          v86 = *((_QWORD *)this + 1);
          if (v86 > 0xFFFFFFFFFFFFFFFBLL || v86 + 4 > *((_QWORD *)this + 2))
            goto LABEL_287;
          *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(_QWORD *)this + v86);
          goto LABEL_289;
        case 5u:
          *(_WORD *)(a1 + 168) |= 1u;
          v43 = *((_QWORD *)this + 1);
          if (v43 > 0xFFFFFFFFFFFFFFF7 || v43 + 8 > *((_QWORD *)this + 2))
            goto LABEL_287;
          *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)this + v43);
LABEL_53:
          v44 = *((_QWORD *)this + 1) + 8;
          goto LABEL_290;
        case 6u:
          *(_WORD *)(a1 + 168) |= 0x100u;
          v87 = *((_QWORD *)this + 1);
          v88 = *((_QWORD *)this + 2);
          v89 = *(_QWORD *)this;
          if (v87 <= 0xFFFFFFFFFFFFFFF5 && v87 + 10 <= v88)
          {
            v90 = 0;
            v91 = 0;
            v92 = 0;
            do
            {
              v93 = v87 + 1;
              *((_QWORD *)this + 1) = v87 + 1;
              v94 = *(_BYTE *)(v89 + v87);
              v92 |= (unint64_t)(v94 & 0x7F) << v90;
              if ((v94 & 0x80) == 0)
                goto LABEL_250;
              v90 += 7;
              v87 = v93;
              v21 = v91++ > 8;
            }
            while (!v21);
LABEL_192:
            LODWORD(v92) = 0;
            goto LABEL_250;
          }
          v137 = 0;
          v138 = 0;
          v92 = 0;
          if (v88 <= v87)
            v88 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v88 == v87)
            {
              LODWORD(v92) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v139 = v87 + 1;
              v140 = *(_BYTE *)(v89 + v87);
              *((_QWORD *)this + 1) = v139;
              v92 |= (unint64_t)(v140 & 0x7F) << v137;
              if (v140 < 0)
              {
                v137 += 7;
                v87 = v139;
                v21 = v138++ > 8;
                if (v21)
                  goto LABEL_192;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v92) = 0;
            }
            break;
          }
LABEL_250:
          *(_DWORD *)(a1 + 160) = v92;
          goto LABEL_291;
        case 7u:
          operator new();
        case 8u:
          operator new();
        case 9u:
          *(_WORD *)(a1 + 168) |= 0x10u;
          v95 = *((_QWORD *)this + 1);
          v96 = *((_QWORD *)this + 2);
          v97 = *(_QWORD *)this;
          if (v95 <= 0xFFFFFFFFFFFFFFF5 && v95 + 10 <= v96)
          {
            v98 = 0;
            v99 = 0;
            v100 = 0;
            do
            {
              v101 = v95 + 1;
              *((_QWORD *)this + 1) = v95 + 1;
              v102 = *(_BYTE *)(v97 + v95);
              v100 |= (unint64_t)(v102 & 0x7F) << v98;
              if ((v102 & 0x80) == 0)
                goto LABEL_253;
              v98 += 7;
              v95 = v101;
              v21 = v99++ > 8;
            }
            while (!v21);
LABEL_199:
            LODWORD(v100) = 0;
            goto LABEL_253;
          }
          v141 = 0;
          v142 = 0;
          v100 = 0;
          if (v96 <= v95)
            v96 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v96 == v95)
            {
              LODWORD(v100) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v143 = v95 + 1;
              v144 = *(_BYTE *)(v97 + v95);
              *((_QWORD *)this + 1) = v143;
              v100 |= (unint64_t)(v144 & 0x7F) << v141;
              if (v144 < 0)
              {
                v141 += 7;
                v95 = v143;
                v21 = v142++ > 8;
                if (v21)
                  goto LABEL_199;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v100) = 0;
            }
            break;
          }
LABEL_253:
          *(_DWORD *)(a1 + 144) = v100;
          goto LABEL_291;
        case 0xAu:
          *(_WORD *)(a1 + 168) |= 0x200u;
          v45 = *((_QWORD *)this + 1);
          if (v45 >= *((_QWORD *)this + 2))
          {
            v48 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v46 = v45 + 1;
            v47 = *(unsigned __int8 *)(*(_QWORD *)this + v45);
            *((_QWORD *)this + 1) = v46;
            v48 = v47 != 0;
          }
          *(_BYTE *)(a1 + 164) = v48;
          goto LABEL_291;
        case 0xBu:
          *(_WORD *)(a1 + 168) |= 4u;
          v103 = *((_QWORD *)this + 1);
          if (v103 > 0xFFFFFFFFFFFFFFFBLL || v103 + 4 > *((_QWORD *)this + 2))
            goto LABEL_287;
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v103);
          goto LABEL_289;
        case 0xCu:
          *(_WORD *)(a1 + 168) |= 8u;
          v49 = *((_QWORD *)this + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)this + 2))
            goto LABEL_287;
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v49);
          goto LABEL_289;
        case 0xDu:
          *(_WORD *)(a1 + 168) |= 0x40u;
          v50 = *((_QWORD *)this + 1);
          v51 = *((_QWORD *)this + 2);
          v52 = *(_QWORD *)this;
          if (v50 <= 0xFFFFFFFFFFFFFFF5 && v50 + 10 <= v51)
          {
            v53 = 0;
            v54 = 0;
            v55 = 0;
            do
            {
              v56 = v50 + 1;
              *((_QWORD *)this + 1) = v50 + 1;
              v57 = *(_BYTE *)(v52 + v50);
              v55 |= (unint64_t)(v57 & 0x7F) << v53;
              if ((v57 & 0x80) == 0)
                goto LABEL_247;
              v53 += 7;
              v50 = v56;
              v21 = v54++ > 8;
            }
            while (!v21);
LABEL_181:
            LODWORD(v55) = 0;
            goto LABEL_247;
          }
          v129 = 0;
          v130 = 0;
          v55 = 0;
          if (v51 <= v50)
            v51 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v51 == v50)
            {
              LODWORD(v55) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v131 = v50 + 1;
              v132 = *(_BYTE *)(v52 + v50);
              *((_QWORD *)this + 1) = v131;
              v55 |= (unint64_t)(v132 & 0x7F) << v129;
              if (v132 < 0)
              {
                v129 += 7;
                v50 = v131;
                v21 = v130++ > 8;
                if (v21)
                  goto LABEL_181;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v55) = 0;
            }
            break;
          }
LABEL_247:
          *(_DWORD *)(a1 + 152) = v55;
          goto LABEL_291;
        case 0xEu:
          *(_WORD *)(a1 + 168) |= 0x80u;
          v104 = *((_QWORD *)this + 1);
          v105 = *((_QWORD *)this + 2);
          v106 = *(_QWORD *)this;
          if (v104 <= 0xFFFFFFFFFFFFFFF5 && v104 + 10 <= v105)
          {
            v107 = 0;
            v108 = 0;
            v109 = 0;
            do
            {
              v110 = v104 + 1;
              *((_QWORD *)this + 1) = v104 + 1;
              v111 = *(_BYTE *)(v106 + v104);
              v109 |= (unint64_t)(v111 & 0x7F) << v107;
              if ((v111 & 0x80) == 0)
                goto LABEL_256;
              v107 += 7;
              v104 = v110;
              v21 = v108++ > 8;
            }
            while (!v21);
LABEL_206:
            LODWORD(v109) = 0;
            goto LABEL_256;
          }
          v145 = 0;
          v146 = 0;
          v109 = 0;
          if (v105 <= v104)
            v105 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v105 == v104)
            {
              LODWORD(v109) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v147 = v104 + 1;
              v148 = *(_BYTE *)(v106 + v104);
              *((_QWORD *)this + 1) = v147;
              v109 |= (unint64_t)(v148 & 0x7F) << v145;
              if (v148 < 0)
              {
                v145 += 7;
                v104 = v147;
                v21 = v146++ > 8;
                if (v21)
                  goto LABEL_206;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v109) = 0;
            }
            break;
          }
LABEL_256:
          *(_DWORD *)(a1 + 156) = v109;
          goto LABEL_291;
        case 0xFu:
          if ((_DWORD)v27 != 2)
          {
            v134 = *(char **)(a1 + 16);
            v133 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v134 >= v133)
            {
              v157 = (char *)*v11;
              v158 = (v134 - (_BYTE *)*v11) >> 2;
              v159 = v158 + 1;
              if ((unint64_t)(v158 + 1) >> 62)
LABEL_302:
                sub_100259694();
              v160 = v133 - (_QWORD)v157;
              if (v160 >> 1 > v159)
                v159 = v160 >> 1;
              if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL)
                v161 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v161 = v159;
              if (v161)
              {
                v162 = (char *)sub_100260634(v187, v161);
                v157 = *(char **)(a1 + 8);
                v134 = *(char **)(a1 + 16);
              }
              else
              {
                v162 = 0;
              }
              v177 = &v162[4 * v158];
              *(_DWORD *)v177 = 0;
              v128 = v177 + 4;
              while (v134 != v157)
              {
                v178 = *((_DWORD *)v134 - 1);
                v134 -= 4;
                *((_DWORD *)v177 - 1) = v178;
                v177 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v177;
              *(_QWORD *)(a1 + 16) = v128;
              *(_QWORD *)(a1 + 24) = &v162[4 * v161];
              if (v157)
                operator delete(v157);
            }
            else
            {
              *(_DWORD *)v134 = 0;
              v128 = v134 + 4;
            }
            *(_QWORD *)(a1 + 16) = v128;
            goto LABEL_285;
          }
          if ((PB::Reader::placeMark(this, v189, v27, a4) & 1) != 0)
            return 0;
          v58 = *((_QWORD *)this + 1);
          v59 = *((_QWORD *)this + 2);
          while (v58 < v59 && !*((_BYTE *)this + 24))
          {
            v61 = *(char **)(a1 + 16);
            v60 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v61 >= v60)
            {
              v63 = (char *)*v11;
              v64 = (v61 - (_BYTE *)*v11) >> 2;
              v65 = v64 + 1;
              if ((unint64_t)(v64 + 1) >> 62)
                goto LABEL_302;
              v66 = v60 - (_QWORD)v63;
              if (v66 >> 1 > v65)
                v65 = v66 >> 1;
              if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
                v67 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v67 = v65;
              if (v67)
              {
                v68 = (char *)sub_100260634(v187, v67);
                v63 = *(char **)(a1 + 8);
                v61 = *(char **)(a1 + 16);
              }
              else
              {
                v68 = 0;
              }
              v69 = &v68[4 * v64];
              *(_DWORD *)v69 = 0;
              v62 = v69 + 4;
              while (v61 != v63)
              {
                v70 = *((_DWORD *)v61 - 1);
                v61 -= 4;
                *((_DWORD *)v69 - 1) = v70;
                v69 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v69;
              *(_QWORD *)(a1 + 16) = v62;
              *(_QWORD *)(a1 + 24) = &v68[4 * v67];
              if (v63)
                operator delete(v63);
            }
            else
            {
              *(_DWORD *)v61 = 0;
              v62 = v61 + 4;
            }
            *(_QWORD *)(a1 + 16) = v62;
            v71 = *((_QWORD *)this + 1);
            if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((_QWORD *)this + 2))
              goto LABEL_169;
            *(v62 - 1) = *(_DWORD *)(*(_QWORD *)this + v71);
            v59 = *((_QWORD *)this + 2);
            v58 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v58;
          }
          goto LABEL_170;
        case 0x10u:
          if ((_DWORD)v27 == 2)
          {
            if ((PB::Reader::placeMark(this, v189, v27, a4) & 1) != 0)
              return 0;
            v112 = *((_QWORD *)this + 1);
            v113 = *((_QWORD *)this + 2);
            while (v112 < v113 && !*((_BYTE *)this + 24))
            {
              v115 = *(char **)(a1 + 40);
              v114 = *(_QWORD *)(a1 + 48);
              if ((unint64_t)v115 >= v114)
              {
                v117 = (char *)*v10;
                v118 = (v115 - (_BYTE *)*v10) >> 2;
                v119 = v118 + 1;
                if ((unint64_t)(v118 + 1) >> 62)
                  goto LABEL_304;
                v120 = v114 - (_QWORD)v117;
                if (v120 >> 1 > v119)
                  v119 = v120 >> 1;
                if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFFCLL)
                  v121 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v121 = v119;
                if (v121)
                {
                  v122 = (char *)sub_100260634(v188, v121);
                  v117 = *(char **)(a1 + 32);
                  v115 = *(char **)(a1 + 40);
                }
                else
                {
                  v122 = 0;
                }
                v123 = &v122[4 * v118];
                *(_DWORD *)v123 = 0;
                v116 = v123 + 4;
                while (v115 != v117)
                {
                  v124 = *((_DWORD *)v115 - 1);
                  v115 -= 4;
                  *((_DWORD *)v123 - 1) = v124;
                  v123 -= 4;
                }
                *(_QWORD *)(a1 + 32) = v123;
                *(_QWORD *)(a1 + 40) = v116;
                *(_QWORD *)(a1 + 48) = &v122[4 * v121];
                if (v117)
                  operator delete(v117);
              }
              else
              {
                *(_DWORD *)v115 = 0;
                v116 = v115 + 4;
              }
              *(_QWORD *)(a1 + 40) = v116;
              v125 = *((_QWORD *)this + 1);
              if (v125 > 0xFFFFFFFFFFFFFFFBLL || v125 + 4 > *((_QWORD *)this + 2))
              {
LABEL_169:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v116 - 1) = *(_DWORD *)(*(_QWORD *)this + v125);
              v113 = *((_QWORD *)this + 2);
              v112 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v112;
            }
LABEL_170:
            PB::Reader::recallMark(this, v189);
          }
          else
          {
            v150 = *(char **)(a1 + 40);
            v149 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v150 >= v149)
            {
              v169 = (char *)*v10;
              v170 = (v150 - (_BYTE *)*v10) >> 2;
              v171 = v170 + 1;
              if ((unint64_t)(v170 + 1) >> 62)
LABEL_304:
                sub_100259694();
              v172 = v149 - (_QWORD)v169;
              if (v172 >> 1 > v171)
                v171 = v172 >> 1;
              if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFFCLL)
                v173 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v173 = v171;
              if (v173)
              {
                v174 = (char *)sub_100260634(v188, v173);
                v169 = *(char **)(a1 + 32);
                v150 = *(char **)(a1 + 40);
              }
              else
              {
                v174 = 0;
              }
              v181 = &v174[4 * v170];
              *(_DWORD *)v181 = 0;
              v128 = v181 + 4;
              while (v150 != v169)
              {
                v182 = *((_DWORD *)v150 - 1);
                v150 -= 4;
                *((_DWORD *)v181 - 1) = v182;
                v181 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v181;
              *(_QWORD *)(a1 + 40) = v128;
              *(_QWORD *)(a1 + 48) = &v174[4 * v173];
              if (v169)
                operator delete(v169);
            }
            else
            {
              *(_DWORD *)v150 = 0;
              v128 = v150 + 4;
            }
            *(_QWORD *)(a1 + 40) = v128;
LABEL_285:
            v183 = *((_QWORD *)this + 1);
            if (v183 <= 0xFFFFFFFFFFFFFFFBLL && v183 + 4 <= *((_QWORD *)this + 2))
            {
              *(v128 - 1) = *(_DWORD *)(*(_QWORD *)this + v183);
LABEL_289:
              v44 = *((_QWORD *)this + 1) + 4;
LABEL_290:
              *((_QWORD *)this + 1) = v44;
            }
            else
            {
LABEL_287:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_291:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0)
            return v6 == 0;
          break;
        default:
          if ((PB::Reader::skip(this, v18 >> 3, v18 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_291;
      }
    }
    v22 = 0;
    v23 = 0;
    v18 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v24 = v4 + 1;
      v25 = *(_BYTE *)(v15 + v4);
      *((_QWORD *)this + 1) = v24;
      v18 |= (unint64_t)(v25 & 0x7F) << v22;
      if ((v25 & 0x80) == 0)
        goto LABEL_21;
      v22 += 7;
      v4 = v24;
      if (v23++ >= 9)
      {
LABEL_20:
        v18 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_1015D53A4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  __int16 v10;
  const PB::Base *v11;
  const PB::Base *v12;
  __int16 v13;
  float *v14;
  float *v15;
  float v16;
  float *v17;
  float *v18;
  float v19;

  v3 = result;
  if ((*(_WORD *)(result + 168) & 2) != 0)
    result = PB::Writer::write(this, *(double *)(result + 128), 1u);
  v4 = *(float **)(v3 + 80);
  v5 = *(float **)(v3 + 88);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6, 2u);
  }
  v7 = *(float **)(v3 + 56);
  v8 = *(float **)(v3 + 64);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9, 3u);
  }
  v10 = *(_WORD *)(v3 + 168);
  if ((v10 & 0x20) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 148), 4u);
    v10 = *(_WORD *)(v3 + 168);
    if ((v10 & 1) == 0)
    {
LABEL_11:
      if ((v10 & 0x100) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  else if ((v10 & 1) == 0)
  {
    goto LABEL_11;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 120), 5u);
  if ((*(_WORD *)(v3 + 168) & 0x100) != 0)
LABEL_12:
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 160), 6u);
LABEL_13:
  v11 = *(const PB::Base **)(v3 + 104);
  if (v11)
    result = PB::Writer::writeSubmessage(this, v11, 7u);
  v12 = *(const PB::Base **)(v3 + 112);
  if (v12)
    result = PB::Writer::writeSubmessage(this, v12, 8u);
  v13 = *(_WORD *)(v3 + 168);
  if ((v13 & 0x10) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 144), 9u);
    v13 = *(_WORD *)(v3 + 168);
    if ((v13 & 0x200) == 0)
    {
LABEL_19:
      if ((v13 & 4) == 0)
        goto LABEL_20;
      goto LABEL_36;
    }
  }
  else if ((*(_WORD *)(v3 + 168) & 0x200) == 0)
  {
    goto LABEL_19;
  }
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 164), 0xAu);
  v13 = *(_WORD *)(v3 + 168);
  if ((v13 & 4) == 0)
  {
LABEL_20:
    if ((v13 & 8) == 0)
      goto LABEL_21;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 136), 0xBu);
  v13 = *(_WORD *)(v3 + 168);
  if ((v13 & 8) == 0)
  {
LABEL_21:
    if ((v13 & 0x40) == 0)
      goto LABEL_22;
LABEL_38:
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 152), 0xDu);
    if ((*(_WORD *)(v3 + 168) & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 140), 0xCu);
  v13 = *(_WORD *)(v3 + 168);
  if ((v13 & 0x40) != 0)
    goto LABEL_38;
LABEL_22:
  if ((v13 & 0x80) != 0)
LABEL_23:
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 156), 0xEu);
LABEL_24:
  v14 = *(float **)(v3 + 8);
  v15 = *(float **)(v3 + 16);
  while (v14 != v15)
  {
    v16 = *v14++;
    result = PB::Writer::write(this, v16, 0xFu);
  }
  v18 = *(float **)(v3 + 32);
  v17 = *(float **)(v3 + 40);
  while (v18 != v17)
  {
    v19 = *v18++;
    result = PB::Writer::write(this, v19, 0x10u);
  }
  return result;
}

double sub_1015D5588(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021C0A30;
  *(_DWORD *)(a1 + 204) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  return result;
}

void sub_1015D55CC(PB::Base *this)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  *(_QWORD *)this = &off_1021C0A30;
  v2 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 19);
  if (v3)
  {
    *((_QWORD *)this + 20) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 16);
  if (v4)
  {
    *((_QWORD *)this + 17) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 13);
  if (v5)
  {
    *((_QWORD *)this + 14) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 10);
  if (v6)
  {
    *((_QWORD *)this + 11) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 7);
  if (v7)
  {
    *((_QWORD *)this + 8) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 4);
  if (v8)
  {
    *((_QWORD *)this + 5) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 1);
  if (v9)
  {
    *((_QWORD *)this + 2) = v9;
    operator delete(v9);
  }
  PB::Base::~Base(this);
}

void sub_1015D5684(PB::Base *a1)
{
  sub_1015D55CC(a1);
  operator delete();
}

uint64_t sub_1015D56A8(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char v9;
  char v10;
  int v11;
  int v13;
  char v14;
  char v15;

  *(_QWORD *)a1 = &off_1021C0A30;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = (char *)(a1 + 56);
  *(_OWORD *)(a1 + 104) = 0u;
  v6 = (char *)(a1 + 104);
  *(_OWORD *)(a1 + 152) = 0u;
  v7 = (char *)(a1 + 152);
  *(_DWORD *)(a1 + 204) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  if ((*(_BYTE *)(a2 + 204) & 1) != 0)
  {
    v8 = *(_QWORD *)(a2 + 184);
    *(_BYTE *)(a1 + 204) = 1;
    *(_QWORD *)(a1 + 184) = v8;
  }
  if (a1 != a2)
  {
    sub_1002A3054(v7, *(char **)(a2 + 152), *(_QWORD *)(a2 + 160), (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 2);
    sub_1002A3054((char *)(a1 + 80), *(char **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
    sub_1002A3054(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
    sub_1002A3054((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  }
  v9 = *(_BYTE *)(a2 + 204);
  if ((v9 & 2) != 0)
  {
    v13 = *(_DWORD *)(a2 + 192);
    *(_BYTE *)(a1 + 204) |= 2u;
    *(_DWORD *)(a1 + 192) = v13;
    v9 = *(_BYTE *)(a2 + 204);
    if ((v9 & 8) == 0)
    {
LABEL_7:
      if ((v9 & 0x10) == 0)
        goto LABEL_8;
      goto LABEL_21;
    }
  }
  else if ((*(_BYTE *)(a2 + 204) & 8) == 0)
  {
    goto LABEL_7;
  }
  v14 = *(_BYTE *)(a2 + 200);
  *(_BYTE *)(a1 + 204) |= 8u;
  *(_BYTE *)(a1 + 200) = v14;
  v9 = *(_BYTE *)(a2 + 204);
  if ((v9 & 0x10) == 0)
  {
LABEL_8:
    if ((v9 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_21:
  v15 = *(_BYTE *)(a2 + 201);
  *(_BYTE *)(a1 + 204) |= 0x10u;
  *(_BYTE *)(a1 + 201) = v15;
  if ((*(_BYTE *)(a2 + 204) & 0x20) != 0)
  {
LABEL_9:
    v10 = *(_BYTE *)(a2 + 202);
    *(_BYTE *)(a1 + 204) |= 0x20u;
    *(_BYTE *)(a1 + 202) = v10;
  }
LABEL_10:
  if (*(_QWORD *)(a2 + 176))
    operator new();
  if (a1 != a2)
    sub_1002A3054(v6, *(char **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 2);
  if ((*(_BYTE *)(a2 + 204) & 4) != 0)
  {
    v11 = *(_DWORD *)(a2 + 196);
    *(_BYTE *)(a1 + 204) |= 4u;
    *(_DWORD *)(a1 + 196) = v11;
  }
  if (a1 != a2)
  {
    sub_1002A3054((char *)(a1 + 128), *(char **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 2);
    sub_1002A3054(v5, *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
  }
  return a1;
}

uint64_t sub_1015D58C8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  float *v6;
  float *v7;
  float v8;
  float *v9;
  float *v10;
  float v11;
  char v12;
  float *v13;
  float *v14;
  float v15;
  float *v16;
  float *v17;
  float v18;
  float *v19;
  float *v20;
  float v21;
  float *v22;
  float *v23;
  float v24;
  float *v25;
  float *v26;
  float v27;
  char v28;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 176);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "TNBFrame");
  if ((*(_BYTE *)(a1 + 204) & 2) != 0)
    PB::TextFormatter::format(this, "dotQuality", *(float *)(a1 + 192));
  v6 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "dotVector", v8);
  }
  if ((*(_BYTE *)(a1 + 204) & 8) != 0)
    PB::TextFormatter::format(this, "fusingGaze", *(_BYTE *)(a1 + 200));
  v9 = *(float **)(a1 + 32);
  v10 = *(float **)(a1 + 40);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(this, "gazeVector", v11);
  }
  v12 = *(_BYTE *)(a1 + 204);
  if ((v12 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "hasStep", *(_BYTE *)(a1 + 201));
    v12 = *(_BYTE *)(a1 + 204);
  }
  if ((v12 & 0x20) != 0)
    PB::TextFormatter::format(this, "hasValidTNBFrame", *(_BYTE *)(a1 + 202));
  v13 = *(float **)(a1 + 56);
  v14 = *(float **)(a1 + 64);
  while (v13 != v14)
  {
    v15 = *v13++;
    PB::TextFormatter::format(this, "lpfInertialRotationRate", v15);
  }
  v16 = *(float **)(a1 + 80);
  v17 = *(float **)(a1 + 88);
  while (v16 != v17)
  {
    v18 = *v16++;
    PB::TextFormatter::format(this, "lpfInertialUserAccel", v18);
  }
  v19 = *(float **)(a1 + 104);
  v20 = *(float **)(a1 + 112);
  while (v19 != v20)
  {
    v21 = *v19++;
    PB::TextFormatter::format(this, "rawDoTVector", v21);
  }
  v22 = *(float **)(a1 + 128);
  v23 = *(float **)(a1 + 136);
  while (v22 != v23)
  {
    v24 = *v22++;
    PB::TextFormatter::format(this, "rawInertialRotationRate", v24);
  }
  v25 = *(float **)(a1 + 152);
  v26 = *(float **)(a1 + 160);
  while (v25 != v26)
  {
    v27 = *v25++;
    PB::TextFormatter::format(this, "rawInertialUserAccel", v27);
  }
  v28 = *(_BYTE *)(a1 + 204);
  if ((v28 & 4) != 0)
  {
    PB::TextFormatter::format(this, "speed", *(float *)(a1 + 196));
    v28 = *(_BYTE *)(a1 + 204);
  }
  if ((v28 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 184));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1015D5B04(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  _DWORD *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  _DWORD *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  _DWORD *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  _DWORD *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  int v88;
  BOOL v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  BOOL v93;
  unint64_t v94;
  unint64_t v95;
  int v96;
  BOOL v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  _DWORD *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  _DWORD *v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  int v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  char *v130;
  _DWORD *v131;
  char *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  char *v142;
  _DWORD *v143;
  unint64_t v144;
  char *v145;
  unint64_t v146;
  char *v147;
  unint64_t v148;
  char *v149;
  unint64_t v150;
  char *v151;
  unint64_t v152;
  char *v153;
  unint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  char *v197;
  char *v198;
  int v199;
  char *v200;
  int v201;
  char *v202;
  int v203;
  char *v204;
  int v205;
  char *v206;
  int v207;
  char *v208;
  int v209;
  char *v210;
  int v211;
  unint64_t v212;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  void **v221;
  void **v222;
  void **v223;
  _BYTE v224[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v220 = a1 + 72;
    v222 = (void **)(a1 + 128);
    v223 = (void **)(a1 + 56);
    v221 = (void **)(a1 + 104);
    v218 = a1 + 120;
    v219 = a1 + 144;
    v10 = (void **)(a1 + 32);
    v11 = (void **)(a1 + 8);
    v216 = a1 + 24;
    v217 = a1 + 48;
    v12 = (void **)(a1 + 80);
    v13 = (void **)(a1 + 152);
    v214 = a1 + 168;
    v215 = a1 + 96;
    while (1)
    {
      v14 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v4 = v18;
        if (v16++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 204) |= 1u;
          v27 = *((_QWORD *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)this + 2))
            goto LABEL_338;
          *(_QWORD *)(a1 + 184) = *(_QWORD *)(*(_QWORD *)this + v27);
          v28 = *((_QWORD *)this + 1) + 8;
          goto LABEL_341;
        case 2u:
          if ((_DWORD)v26 != 2)
          {
            v142 = *(char **)(a1 + 160);
            v141 = *(_QWORD *)(a1 + 168);
            if ((unint64_t)v142 >= v141)
            {
              v156 = (char *)*v13;
              v157 = (v142 - (_BYTE *)*v13) >> 2;
              v158 = v157 + 1;
              if ((unint64_t)(v157 + 1) >> 62)
LABEL_350:
                sub_100259694();
              v159 = v141 - (_QWORD)v156;
              if (v159 >> 1 > v158)
                v158 = v159 >> 1;
              if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFFCLL)
                v160 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v160 = v158;
              if (v160)
              {
                v161 = (char *)sub_100260634(v214, v160);
                v156 = *(char **)(a1 + 152);
                v142 = *(char **)(a1 + 160);
              }
              else
              {
                v161 = 0;
              }
              v198 = &v161[4 * v157];
              *(_DWORD *)v198 = 0;
              v143 = v198 + 4;
              while (v142 != v156)
              {
                v199 = *((_DWORD *)v142 - 1);
                v142 -= 4;
                *((_DWORD *)v198 - 1) = v199;
                v198 -= 4;
              }
              *(_QWORD *)(a1 + 152) = v198;
              *(_QWORD *)(a1 + 160) = v143;
              *(_QWORD *)(a1 + 168) = &v161[4 * v160];
              if (v156)
                operator delete(v156);
            }
            else
            {
              *(_DWORD *)v142 = 0;
              v143 = v142 + 4;
            }
            *(_QWORD *)(a1 + 160) = v143;
            goto LABEL_336;
          }
          if ((PB::Reader::placeMark(this, v224, v26, a4) & 1) != 0)
            return 0;
          v29 = *((_QWORD *)this + 1);
          v30 = *((_QWORD *)this + 2);
          while (v29 < v30 && !*((_BYTE *)this + 24))
          {
            v32 = *(char **)(a1 + 160);
            v31 = *(_QWORD *)(a1 + 168);
            if ((unint64_t)v32 >= v31)
            {
              v34 = (char *)*v13;
              v35 = (v32 - (_BYTE *)*v13) >> 2;
              v36 = v35 + 1;
              if ((unint64_t)(v35 + 1) >> 62)
                goto LABEL_350;
              v37 = v31 - (_QWORD)v34;
              if (v37 >> 1 > v36)
                v36 = v37 >> 1;
              if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
                v38 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v38 = v36;
              if (v38)
              {
                v39 = (char *)sub_100260634(v214, v38);
                v34 = *(char **)(a1 + 152);
                v32 = *(char **)(a1 + 160);
              }
              else
              {
                v39 = 0;
              }
              v40 = &v39[4 * v35];
              *(_DWORD *)v40 = 0;
              v33 = v40 + 4;
              while (v32 != v34)
              {
                v41 = *((_DWORD *)v32 - 1);
                v32 -= 4;
                *((_DWORD *)v40 - 1) = v41;
                v40 -= 4;
              }
              *(_QWORD *)(a1 + 152) = v40;
              *(_QWORD *)(a1 + 160) = v33;
              *(_QWORD *)(a1 + 168) = &v39[4 * v38];
              if (v34)
                operator delete(v34);
            }
            else
            {
              *(_DWORD *)v32 = 0;
              v33 = v32 + 4;
            }
            *(_QWORD *)(a1 + 160) = v33;
            v42 = *((_QWORD *)this + 1);
            if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((_QWORD *)this + 2))
              goto LABEL_209;
            *(v33 - 1) = *(_DWORD *)(*(_QWORD *)this + v42);
            v30 = *((_QWORD *)this + 2);
            v29 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v29;
          }
          goto LABEL_210;
        case 3u:
          if ((_DWORD)v26 != 2)
          {
            v145 = *(char **)(a1 + 88);
            v144 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v145 >= v144)
            {
              v162 = (char *)*v12;
              v163 = (v145 - (_BYTE *)*v12) >> 2;
              v164 = v163 + 1;
              if ((unint64_t)(v163 + 1) >> 62)
LABEL_351:
                sub_100259694();
              v165 = v144 - (_QWORD)v162;
              if (v165 >> 1 > v164)
                v164 = v165 >> 1;
              if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFFCLL)
                v166 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v166 = v164;
              if (v166)
              {
                v167 = (char *)sub_100260634(v215, v166);
                v162 = *(char **)(a1 + 80);
                v145 = *(char **)(a1 + 88);
              }
              else
              {
                v167 = 0;
              }
              v200 = &v167[4 * v163];
              *(_DWORD *)v200 = 0;
              v143 = v200 + 4;
              while (v145 != v162)
              {
                v201 = *((_DWORD *)v145 - 1);
                v145 -= 4;
                *((_DWORD *)v200 - 1) = v201;
                v200 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v200;
              *(_QWORD *)(a1 + 88) = v143;
              *(_QWORD *)(a1 + 96) = &v167[4 * v166];
              if (v162)
                operator delete(v162);
            }
            else
            {
              *(_DWORD *)v145 = 0;
              v143 = v145 + 4;
            }
            *(_QWORD *)(a1 + 88) = v143;
            goto LABEL_336;
          }
          if ((PB::Reader::placeMark(this, v224, v26, a4) & 1) != 0)
            return 0;
          v43 = *((_QWORD *)this + 1);
          v44 = *((_QWORD *)this + 2);
          while (v43 < v44 && !*((_BYTE *)this + 24))
          {
            v46 = *(char **)(a1 + 88);
            v45 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v46 >= v45)
            {
              v48 = (char *)*v12;
              v49 = (v46 - (_BYTE *)*v12) >> 2;
              v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62)
                goto LABEL_351;
              v51 = v45 - (_QWORD)v48;
              if (v51 >> 1 > v50)
                v50 = v51 >> 1;
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
                v52 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v52 = v50;
              if (v52)
              {
                v53 = (char *)sub_100260634(v215, v52);
                v48 = *(char **)(a1 + 80);
                v46 = *(char **)(a1 + 88);
              }
              else
              {
                v53 = 0;
              }
              v54 = &v53[4 * v49];
              *(_DWORD *)v54 = 0;
              v47 = v54 + 4;
              while (v46 != v48)
              {
                v55 = *((_DWORD *)v46 - 1);
                v46 -= 4;
                *((_DWORD *)v54 - 1) = v55;
                v54 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v54;
              *(_QWORD *)(a1 + 88) = v47;
              *(_QWORD *)(a1 + 96) = &v53[4 * v52];
              if (v48)
                operator delete(v48);
            }
            else
            {
              *(_DWORD *)v46 = 0;
              v47 = v46 + 4;
            }
            *(_QWORD *)(a1 + 88) = v47;
            v56 = *((_QWORD *)this + 1);
            if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((_QWORD *)this + 2))
              goto LABEL_209;
            *(v47 - 1) = *(_DWORD *)(*(_QWORD *)this + v56);
            v44 = *((_QWORD *)this + 2);
            v43 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v43;
          }
          goto LABEL_210;
        case 4u:
          if ((_DWORD)v26 != 2)
          {
            v147 = *(char **)(a1 + 16);
            v146 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v147 >= v146)
            {
              v168 = (char *)*v11;
              v169 = (v147 - (_BYTE *)*v11) >> 2;
              v170 = v169 + 1;
              if ((unint64_t)(v169 + 1) >> 62)
LABEL_352:
                sub_100259694();
              v171 = v146 - (_QWORD)v168;
              if (v171 >> 1 > v170)
                v170 = v171 >> 1;
              if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFFCLL)
                v172 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v172 = v170;
              if (v172)
              {
                v173 = (char *)sub_100260634(v216, v172);
                v168 = *(char **)(a1 + 8);
                v147 = *(char **)(a1 + 16);
              }
              else
              {
                v173 = 0;
              }
              v202 = &v173[4 * v169];
              *(_DWORD *)v202 = 0;
              v143 = v202 + 4;
              while (v147 != v168)
              {
                v203 = *((_DWORD *)v147 - 1);
                v147 -= 4;
                *((_DWORD *)v202 - 1) = v203;
                v202 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v202;
              *(_QWORD *)(a1 + 16) = v143;
              *(_QWORD *)(a1 + 24) = &v173[4 * v172];
              if (v168)
                operator delete(v168);
            }
            else
            {
              *(_DWORD *)v147 = 0;
              v143 = v147 + 4;
            }
            *(_QWORD *)(a1 + 16) = v143;
            goto LABEL_336;
          }
          if ((PB::Reader::placeMark(this, v224, v26, a4) & 1) != 0)
            return 0;
          v57 = *((_QWORD *)this + 1);
          v58 = *((_QWORD *)this + 2);
          while (v57 < v58 && !*((_BYTE *)this + 24))
          {
            v60 = *(char **)(a1 + 16);
            v59 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v60 >= v59)
            {
              v62 = (char *)*v11;
              v63 = (v60 - (_BYTE *)*v11) >> 2;
              v64 = v63 + 1;
              if ((unint64_t)(v63 + 1) >> 62)
                goto LABEL_352;
              v65 = v59 - (_QWORD)v62;
              if (v65 >> 1 > v64)
                v64 = v65 >> 1;
              if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
                v66 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v66 = v64;
              if (v66)
              {
                v67 = (char *)sub_100260634(v216, v66);
                v62 = *(char **)(a1 + 8);
                v60 = *(char **)(a1 + 16);
              }
              else
              {
                v67 = 0;
              }
              v68 = &v67[4 * v63];
              *(_DWORD *)v68 = 0;
              v61 = v68 + 4;
              while (v60 != v62)
              {
                v69 = *((_DWORD *)v60 - 1);
                v60 -= 4;
                *((_DWORD *)v68 - 1) = v69;
                v68 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v68;
              *(_QWORD *)(a1 + 16) = v61;
              *(_QWORD *)(a1 + 24) = &v67[4 * v66];
              if (v62)
                operator delete(v62);
            }
            else
            {
              *(_DWORD *)v60 = 0;
              v61 = v60 + 4;
            }
            *(_QWORD *)(a1 + 16) = v61;
            v70 = *((_QWORD *)this + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)this + 2))
              goto LABEL_209;
            *(v61 - 1) = *(_DWORD *)(*(_QWORD *)this + v70);
            v58 = *((_QWORD *)this + 2);
            v57 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v57;
          }
          goto LABEL_210;
        case 5u:
          if ((_DWORD)v26 != 2)
          {
            v149 = *(char **)(a1 + 40);
            v148 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v149 >= v148)
            {
              v174 = (char *)*v10;
              v175 = (v149 - (_BYTE *)*v10) >> 2;
              v176 = v175 + 1;
              if ((unint64_t)(v175 + 1) >> 62)
LABEL_353:
                sub_100259694();
              v177 = v148 - (_QWORD)v174;
              if (v177 >> 1 > v176)
                v176 = v177 >> 1;
              if ((unint64_t)v177 >= 0x7FFFFFFFFFFFFFFCLL)
                v178 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v178 = v176;
              if (v178)
              {
                v179 = (char *)sub_100260634(v217, v178);
                v174 = *(char **)(a1 + 32);
                v149 = *(char **)(a1 + 40);
              }
              else
              {
                v179 = 0;
              }
              v204 = &v179[4 * v175];
              *(_DWORD *)v204 = 0;
              v143 = v204 + 4;
              while (v149 != v174)
              {
                v205 = *((_DWORD *)v149 - 1);
                v149 -= 4;
                *((_DWORD *)v204 - 1) = v205;
                v204 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v204;
              *(_QWORD *)(a1 + 40) = v143;
              *(_QWORD *)(a1 + 48) = &v179[4 * v178];
              if (v174)
                operator delete(v174);
            }
            else
            {
              *(_DWORD *)v149 = 0;
              v143 = v149 + 4;
            }
            *(_QWORD *)(a1 + 40) = v143;
            goto LABEL_336;
          }
          if ((PB::Reader::placeMark(this, v224, v26, a4) & 1) != 0)
            return 0;
          v71 = *((_QWORD *)this + 1);
          v72 = *((_QWORD *)this + 2);
          while (v71 < v72 && !*((_BYTE *)this + 24))
          {
            v74 = *(char **)(a1 + 40);
            v73 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v74 >= v73)
            {
              v76 = (char *)*v10;
              v77 = (v74 - (_BYTE *)*v10) >> 2;
              v78 = v77 + 1;
              if ((unint64_t)(v77 + 1) >> 62)
                goto LABEL_353;
              v79 = v73 - (_QWORD)v76;
              if (v79 >> 1 > v78)
                v78 = v79 >> 1;
              if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL)
                v80 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v80 = v78;
              if (v80)
              {
                v81 = (char *)sub_100260634(v217, v80);
                v76 = *(char **)(a1 + 32);
                v74 = *(char **)(a1 + 40);
              }
              else
              {
                v81 = 0;
              }
              v82 = &v81[4 * v77];
              *(_DWORD *)v82 = 0;
              v75 = v82 + 4;
              while (v74 != v76)
              {
                v83 = *((_DWORD *)v74 - 1);
                v74 -= 4;
                *((_DWORD *)v82 - 1) = v83;
                v82 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v82;
              *(_QWORD *)(a1 + 40) = v75;
              *(_QWORD *)(a1 + 48) = &v81[4 * v80];
              if (v76)
                operator delete(v76);
            }
            else
            {
              *(_DWORD *)v74 = 0;
              v75 = v74 + 4;
            }
            *(_QWORD *)(a1 + 40) = v75;
            v84 = *((_QWORD *)this + 1);
            if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((_QWORD *)this + 2))
              goto LABEL_209;
            *(v75 - 1) = *(_DWORD *)(*(_QWORD *)this + v84);
            v72 = *((_QWORD *)this + 2);
            v71 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v71;
          }
          goto LABEL_210;
        case 6u:
          *(_BYTE *)(a1 + 204) |= 2u;
          v85 = *((_QWORD *)this + 1);
          if (v85 > 0xFFFFFFFFFFFFFFFBLL || v85 + 4 > *((_QWORD *)this + 2))
            goto LABEL_338;
          *(_DWORD *)(a1 + 192) = *(_DWORD *)(*(_QWORD *)this + v85);
          goto LABEL_340;
        case 7u:
          *(_BYTE *)(a1 + 204) |= 8u;
          v86 = *((_QWORD *)this + 1);
          if (v86 >= *((_QWORD *)this + 2))
          {
            v89 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v87 = v86 + 1;
            v88 = *(unsigned __int8 *)(*(_QWORD *)this + v86);
            *((_QWORD *)this + 1) = v87;
            v89 = v88 != 0;
          }
          *(_BYTE *)(a1 + 200) = v89;
          goto LABEL_342;
        case 8u:
          *(_BYTE *)(a1 + 204) |= 0x10u;
          v90 = *((_QWORD *)this + 1);
          if (v90 >= *((_QWORD *)this + 2))
          {
            v93 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v91 = v90 + 1;
            v92 = *(unsigned __int8 *)(*(_QWORD *)this + v90);
            *((_QWORD *)this + 1) = v91;
            v93 = v92 != 0;
          }
          *(_BYTE *)(a1 + 201) = v93;
          goto LABEL_342;
        case 9u:
          *(_BYTE *)(a1 + 204) |= 0x20u;
          v94 = *((_QWORD *)this + 1);
          if (v94 >= *((_QWORD *)this + 2))
          {
            v97 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v95 = v94 + 1;
            v96 = *(unsigned __int8 *)(*(_QWORD *)this + v94);
            *((_QWORD *)this + 1) = v95;
            v97 = v96 != 0;
          }
          *(_BYTE *)(a1 + 202) = v97;
          goto LABEL_342;
        case 0xAu:
          operator new();
        case 0xBu:
          if ((_DWORD)v26 != 2)
          {
            v151 = *(char **)(a1 + 112);
            v150 = *(_QWORD *)(a1 + 120);
            if ((unint64_t)v151 >= v150)
            {
              v180 = (char *)*v221;
              v181 = (v151 - (_BYTE *)*v221) >> 2;
              v182 = v181 + 1;
              if ((unint64_t)(v181 + 1) >> 62)
LABEL_354:
                sub_100259694();
              v183 = v150 - (_QWORD)v180;
              if (v183 >> 1 > v182)
                v182 = v183 >> 1;
              if ((unint64_t)v183 >= 0x7FFFFFFFFFFFFFFCLL)
                v184 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v184 = v182;
              if (v184)
              {
                v185 = (char *)sub_100260634(v218, v184);
                v180 = *(char **)(a1 + 104);
                v151 = *(char **)(a1 + 112);
              }
              else
              {
                v185 = 0;
              }
              v206 = &v185[4 * v181];
              *(_DWORD *)v206 = 0;
              v143 = v206 + 4;
              while (v151 != v180)
              {
                v207 = *((_DWORD *)v151 - 1);
                v151 -= 4;
                *((_DWORD *)v206 - 1) = v207;
                v206 -= 4;
              }
              *(_QWORD *)(a1 + 104) = v206;
              *(_QWORD *)(a1 + 112) = v143;
              *(_QWORD *)(a1 + 120) = &v185[4 * v184];
              if (v180)
                operator delete(v180);
            }
            else
            {
              *(_DWORD *)v151 = 0;
              v143 = v151 + 4;
            }
            *(_QWORD *)(a1 + 112) = v143;
            goto LABEL_336;
          }
          if ((PB::Reader::placeMark(this, v224, v26, a4) & 1) != 0)
            return 0;
          v98 = *((_QWORD *)this + 1);
          v99 = *((_QWORD *)this + 2);
          while (v98 < v99 && !*((_BYTE *)this + 24))
          {
            v101 = *(char **)(a1 + 112);
            v100 = *(_QWORD *)(a1 + 120);
            if ((unint64_t)v101 >= v100)
            {
              v103 = (char *)*v221;
              v104 = (v101 - (_BYTE *)*v221) >> 2;
              v105 = v104 + 1;
              if ((unint64_t)(v104 + 1) >> 62)
                goto LABEL_354;
              v106 = v100 - (_QWORD)v103;
              if (v106 >> 1 > v105)
                v105 = v106 >> 1;
              if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL)
                v107 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v107 = v105;
              if (v107)
              {
                v108 = (char *)sub_100260634(v218, v107);
                v103 = *(char **)(a1 + 104);
                v101 = *(char **)(a1 + 112);
              }
              else
              {
                v108 = 0;
              }
              v109 = &v108[4 * v104];
              *(_DWORD *)v109 = 0;
              v102 = v109 + 4;
              while (v101 != v103)
              {
                v110 = *((_DWORD *)v101 - 1);
                v101 -= 4;
                *((_DWORD *)v109 - 1) = v110;
                v109 -= 4;
              }
              *(_QWORD *)(a1 + 104) = v109;
              *(_QWORD *)(a1 + 112) = v102;
              *(_QWORD *)(a1 + 120) = &v108[4 * v107];
              if (v103)
                operator delete(v103);
            }
            else
            {
              *(_DWORD *)v101 = 0;
              v102 = v101 + 4;
            }
            *(_QWORD *)(a1 + 112) = v102;
            v111 = *((_QWORD *)this + 1);
            if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((_QWORD *)this + 2))
              goto LABEL_209;
            *(v102 - 1) = *(_DWORD *)(*(_QWORD *)this + v111);
            v99 = *((_QWORD *)this + 2);
            v98 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v98;
          }
          goto LABEL_210;
        case 0xCu:
          *(_BYTE *)(a1 + 204) |= 4u;
          v112 = *((_QWORD *)this + 1);
          if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((_QWORD *)this + 2))
            goto LABEL_338;
          *(_DWORD *)(a1 + 196) = *(_DWORD *)(*(_QWORD *)this + v112);
          goto LABEL_340;
        case 0xDu:
          if ((_DWORD)v26 != 2)
          {
            v153 = *(char **)(a1 + 136);
            v152 = *(_QWORD *)(a1 + 144);
            if ((unint64_t)v153 >= v152)
            {
              v186 = (char *)*v222;
              v187 = (v153 - (_BYTE *)*v222) >> 2;
              v188 = v187 + 1;
              if ((unint64_t)(v187 + 1) >> 62)
LABEL_355:
                sub_100259694();
              v189 = v152 - (_QWORD)v186;
              if (v189 >> 1 > v188)
                v188 = v189 >> 1;
              if ((unint64_t)v189 >= 0x7FFFFFFFFFFFFFFCLL)
                v190 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v190 = v188;
              if (v190)
              {
                v191 = (char *)sub_100260634(v219, v190);
                v186 = *(char **)(a1 + 128);
                v153 = *(char **)(a1 + 136);
              }
              else
              {
                v191 = 0;
              }
              v208 = &v191[4 * v187];
              *(_DWORD *)v208 = 0;
              v143 = v208 + 4;
              while (v153 != v186)
              {
                v209 = *((_DWORD *)v153 - 1);
                v153 -= 4;
                *((_DWORD *)v208 - 1) = v209;
                v208 -= 4;
              }
              *(_QWORD *)(a1 + 128) = v208;
              *(_QWORD *)(a1 + 136) = v143;
              *(_QWORD *)(a1 + 144) = &v191[4 * v190];
              if (v186)
                operator delete(v186);
            }
            else
            {
              *(_DWORD *)v153 = 0;
              v143 = v153 + 4;
            }
            *(_QWORD *)(a1 + 136) = v143;
            goto LABEL_336;
          }
          if ((PB::Reader::placeMark(this, v224, v26, a4) & 1) != 0)
            return 0;
          v113 = *((_QWORD *)this + 1);
          v114 = *((_QWORD *)this + 2);
          while (v113 < v114 && !*((_BYTE *)this + 24))
          {
            v116 = *(char **)(a1 + 136);
            v115 = *(_QWORD *)(a1 + 144);
            if ((unint64_t)v116 >= v115)
            {
              v118 = (char *)*v222;
              v119 = (v116 - (_BYTE *)*v222) >> 2;
              v120 = v119 + 1;
              if ((unint64_t)(v119 + 1) >> 62)
                goto LABEL_355;
              v121 = v115 - (_QWORD)v118;
              if (v121 >> 1 > v120)
                v120 = v121 >> 1;
              if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFFCLL)
                v122 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v122 = v120;
              if (v122)
              {
                v123 = (char *)sub_100260634(v219, v122);
                v118 = *(char **)(a1 + 128);
                v116 = *(char **)(a1 + 136);
              }
              else
              {
                v123 = 0;
              }
              v124 = &v123[4 * v119];
              *(_DWORD *)v124 = 0;
              v117 = v124 + 4;
              while (v116 != v118)
              {
                v125 = *((_DWORD *)v116 - 1);
                v116 -= 4;
                *((_DWORD *)v124 - 1) = v125;
                v124 -= 4;
              }
              *(_QWORD *)(a1 + 128) = v124;
              *(_QWORD *)(a1 + 136) = v117;
              *(_QWORD *)(a1 + 144) = &v123[4 * v122];
              if (v118)
                operator delete(v118);
            }
            else
            {
              *(_DWORD *)v116 = 0;
              v117 = v116 + 4;
            }
            *(_QWORD *)(a1 + 136) = v117;
            v126 = *((_QWORD *)this + 1);
            if (v126 > 0xFFFFFFFFFFFFFFFBLL || v126 + 4 > *((_QWORD *)this + 2))
              goto LABEL_209;
            *(v117 - 1) = *(_DWORD *)(*(_QWORD *)this + v126);
            v114 = *((_QWORD *)this + 2);
            v113 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v113;
          }
          goto LABEL_210;
        case 0xEu:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v224, v26, a4) & 1) != 0)
              return 0;
            v127 = *((_QWORD *)this + 1);
            v128 = *((_QWORD *)this + 2);
            while (v127 < v128 && !*((_BYTE *)this + 24))
            {
              v130 = *(char **)(a1 + 64);
              v129 = *(_QWORD *)(a1 + 72);
              if ((unint64_t)v130 >= v129)
              {
                v132 = (char *)*v223;
                v133 = (v130 - (_BYTE *)*v223) >> 2;
                v134 = v133 + 1;
                if ((unint64_t)(v133 + 1) >> 62)
                  goto LABEL_356;
                v135 = v129 - (_QWORD)v132;
                if (v135 >> 1 > v134)
                  v134 = v135 >> 1;
                if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFFCLL)
                  v136 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v136 = v134;
                if (v136)
                {
                  v137 = (char *)sub_100260634(v220, v136);
                  v132 = *(char **)(a1 + 56);
                  v130 = *(char **)(a1 + 64);
                }
                else
                {
                  v137 = 0;
                }
                v138 = &v137[4 * v133];
                *(_DWORD *)v138 = 0;
                v131 = v138 + 4;
                while (v130 != v132)
                {
                  v139 = *((_DWORD *)v130 - 1);
                  v130 -= 4;
                  *((_DWORD *)v138 - 1) = v139;
                  v138 -= 4;
                }
                *(_QWORD *)(a1 + 56) = v138;
                *(_QWORD *)(a1 + 64) = v131;
                *(_QWORD *)(a1 + 72) = &v137[4 * v136];
                if (v132)
                  operator delete(v132);
              }
              else
              {
                *(_DWORD *)v130 = 0;
                v131 = v130 + 4;
              }
              *(_QWORD *)(a1 + 64) = v131;
              v140 = *((_QWORD *)this + 1);
              if (v140 > 0xFFFFFFFFFFFFFFFBLL || v140 + 4 > *((_QWORD *)this + 2))
              {
LABEL_209:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v131 - 1) = *(_DWORD *)(*(_QWORD *)this + v140);
              v128 = *((_QWORD *)this + 2);
              v127 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v127;
            }
LABEL_210:
            PB::Reader::recallMark(this, v224);
          }
          else
          {
            v155 = *(char **)(a1 + 64);
            v154 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v155 >= v154)
            {
              v192 = (char *)*v223;
              v193 = (v155 - (_BYTE *)*v223) >> 2;
              v194 = v193 + 1;
              if ((unint64_t)(v193 + 1) >> 62)
LABEL_356:
                sub_100259694();
              v195 = v154 - (_QWORD)v192;
              if (v195 >> 1 > v194)
                v194 = v195 >> 1;
              if ((unint64_t)v195 >= 0x7FFFFFFFFFFFFFFCLL)
                v196 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v196 = v194;
              if (v196)
              {
                v197 = (char *)sub_100260634(v220, v196);
                v192 = *(char **)(a1 + 56);
                v155 = *(char **)(a1 + 64);
              }
              else
              {
                v197 = 0;
              }
              v210 = &v197[4 * v193];
              *(_DWORD *)v210 = 0;
              v143 = v210 + 4;
              while (v155 != v192)
              {
                v211 = *((_DWORD *)v155 - 1);
                v155 -= 4;
                *((_DWORD *)v210 - 1) = v211;
                v210 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v210;
              *(_QWORD *)(a1 + 64) = v143;
              *(_QWORD *)(a1 + 72) = &v197[4 * v196];
              if (v192)
                operator delete(v192);
            }
            else
            {
              *(_DWORD *)v155 = 0;
              v143 = v155 + 4;
            }
            *(_QWORD *)(a1 + 64) = v143;
LABEL_336:
            v212 = *((_QWORD *)this + 1);
            if (v212 <= 0xFFFFFFFFFFFFFFFBLL && v212 + 4 <= *((_QWORD *)this + 2))
            {
              *(v143 - 1) = *(_DWORD *)(*(_QWORD *)this + v212);
LABEL_340:
              v28 = *((_QWORD *)this + 1) + 4;
LABEL_341:
              *((_QWORD *)this + 1) = v28;
            }
            else
            {
LABEL_338:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_342:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || *((_BYTE *)this + 24))
            return v6 == 0;
          break;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_342;
      }
    }
    v21 = 0;
    v22 = 0;
    v17 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v23 = v4 + 1;
      v24 = *(_BYTE *)(v14 + v4);
      *((_QWORD *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0)
        goto LABEL_21;
      v21 += 7;
      v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        v17 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_1015D6B00(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  float *v14;
  float v15;
  char v16;
  const PB::Base *v17;
  float *v18;
  float *v19;
  float v20;
  float *v21;
  float *v22;
  float v23;
  float *v24;
  float *v25;
  float v26;

  v3 = result;
  if ((*(_BYTE *)(result + 204) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 184), 1u);
  v4 = *(float **)(v3 + 152);
  v5 = *(float **)(v3 + 160);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6, 2u);
  }
  v7 = *(float **)(v3 + 80);
  v8 = *(float **)(v3 + 88);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9, 3u);
  }
  v10 = *(float **)(v3 + 8);
  v11 = *(float **)(v3 + 16);
  while (v10 != v11)
  {
    v12 = *v10++;
    result = PB::Writer::write(this, v12, 4u);
  }
  v13 = *(float **)(v3 + 32);
  v14 = *(float **)(v3 + 40);
  while (v13 != v14)
  {
    v15 = *v13++;
    result = PB::Writer::write(this, v15, 5u);
  }
  v16 = *(_BYTE *)(v3 + 204);
  if ((v16 & 2) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 192), 6u);
    v16 = *(_BYTE *)(v3 + 204);
    if ((v16 & 8) == 0)
    {
LABEL_17:
      if ((v16 & 0x10) == 0)
        goto LABEL_18;
      goto LABEL_36;
    }
  }
  else if ((*(_BYTE *)(v3 + 204) & 8) == 0)
  {
    goto LABEL_17;
  }
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 200), 7u);
  v16 = *(_BYTE *)(v3 + 204);
  if ((v16 & 0x10) == 0)
  {
LABEL_18:
    if ((v16 & 0x20) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_36:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 201), 8u);
  if ((*(_BYTE *)(v3 + 204) & 0x20) != 0)
LABEL_19:
    result = PB::Writer::write(this, *(_BYTE *)(v3 + 202), 9u);
LABEL_20:
  v17 = *(const PB::Base **)(v3 + 176);
  if (v17)
    result = PB::Writer::writeSubmessage(this, v17, 0xAu);
  v18 = *(float **)(v3 + 104);
  v19 = *(float **)(v3 + 112);
  while (v18 != v19)
  {
    v20 = *v18++;
    result = PB::Writer::write(this, v20, 0xBu);
  }
  if ((*(_BYTE *)(v3 + 204) & 4) != 0)
    result = PB::Writer::write(this, *(float *)(v3 + 196), 0xCu);
  v21 = *(float **)(v3 + 128);
  v22 = *(float **)(v3 + 136);
  while (v21 != v22)
  {
    v23 = *v21++;
    result = PB::Writer::write(this, v23, 0xDu);
  }
  v25 = *(float **)(v3 + 56);
  v24 = *(float **)(v3 + 64);
  while (v25 != v24)
  {
    v26 = *v25++;
    result = PB::Writer::write(this, v26, 0xEu);
  }
  return result;
}

uint64_t sub_1015D6CBC(uint64_t result)
{
  *(_QWORD *)result = &off_1021C0A68;
  *(_DWORD *)(result + 120) = 0;
  return result;
}

void sub_1015D6CD4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_1015D6CF8(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)a1 = &off_1021C0A68;
  *(_DWORD *)(a1 + 120) = 0;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_DWORD *)(a1 + 120) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_DWORD *)(a2 + 120);
    if ((v2 & 0x1000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x1000000) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 108);
    v3 |= 0x1000000u;
    *(_DWORD *)(a1 + 120) = v3;
    *(_DWORD *)(a1 + 108) = v4;
    v2 = *(_DWORD *)(a2 + 120);
  }
LABEL_6:
  if ((v2 & 0x200000) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 96);
    v3 |= 0x200000u;
    *(_DWORD *)(a1 + 120) = v3;
    *(_DWORD *)(a1 + 96) = v4;
    v2 = *(_DWORD *)(a2 + 120);
    if ((v2 & 0x400000) == 0)
    {
LABEL_8:
      if ((v2 & 0x800000) == 0)
        goto LABEL_9;
      goto LABEL_34;
    }
  }
  else if ((v2 & 0x400000) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 100);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 100) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x800000) == 0)
  {
LABEL_9:
    if ((v2 & 0x100000) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(v4) = *(_DWORD *)(a2 + 104);
  v3 |= 0x800000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 104) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x100000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  LODWORD(v4) = *(_DWORD *)(a2 + 92);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 92) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  LODWORD(v4) = *(_DWORD *)(a2 + 112);
  v3 |= 0x2000000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 112) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 24) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(v4) = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 32) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20000) == 0)
      goto LABEL_15;
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(v4) = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 28) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x20000) == 0)
  {
LABEL_15:
    if ((v2 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(v4) = *(_DWORD *)(a2 + 80);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 80) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x10000) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_42;
  }
LABEL_41:
  v5 = *(_DWORD *)(a2 + 76);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 76) = v5;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x4000) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_43;
  }
LABEL_42:
  LODWORD(v4) = *(_DWORD *)(a2 + 68);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 68) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x8000) == 0)
  {
LABEL_18:
    if ((v2 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(v4) = *(_DWORD *)(a2 + 72);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 72) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x2000) == 0)
  {
LABEL_19:
    if ((v2 & 0x800) == 0)
      goto LABEL_20;
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *(_DWORD *)(a2 + 64);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 64) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x800) == 0)
  {
LABEL_20:
    if ((v2 & 0x1000) == 0)
      goto LABEL_21;
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *(_DWORD *)(a2 + 56);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 56) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x1000) == 0)
  {
LABEL_21:
    if ((v2 & 0x200) == 0)
      goto LABEL_22;
    goto LABEL_47;
  }
LABEL_46:
  v6 = *(_DWORD *)(a2 + 60);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 60) = v6;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x200) == 0)
  {
LABEL_22:
    if ((v2 & 0x400) == 0)
      goto LABEL_23;
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *(_DWORD *)(a2 + 48);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 48) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x400) == 0)
  {
LABEL_23:
    if ((v2 & 0x100) == 0)
      goto LABEL_24;
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(v4) = *(_DWORD *)(a2 + 52);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 52) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x100) == 0)
  {
LABEL_24:
    if ((v2 & 0x40) == 0)
      goto LABEL_25;
    goto LABEL_50;
  }
LABEL_49:
  LODWORD(v4) = *(_DWORD *)(a2 + 44);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 44) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x40) == 0)
  {
LABEL_25:
    if ((v2 & 0x80) == 0)
      goto LABEL_26;
    goto LABEL_51;
  }
LABEL_50:
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 36) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x80) == 0)
  {
LABEL_26:
    if ((v2 & 2) == 0)
      goto LABEL_27;
    goto LABEL_52;
  }
LABEL_51:
  v7 = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 40) = v7;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 2) == 0)
  {
LABEL_27:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_53;
  }
LABEL_52:
  LODWORD(v4) = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 16) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x80000) == 0)
      goto LABEL_29;
    goto LABEL_54;
  }
LABEL_53:
  LODWORD(v4) = *(_DWORD *)(a2 + 116);
  v3 |= 0x4000000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 116) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x80000) == 0)
  {
LABEL_29:
    if ((v2 & 4) == 0)
      goto LABEL_30;
    goto LABEL_55;
  }
LABEL_54:
  LODWORD(v4) = *(_DWORD *)(a2 + 88);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 88) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 4) == 0)
  {
LABEL_30:
    if ((v2 & 0x40000) == 0)
      return *(float *)&v4;
    goto LABEL_56;
  }
LABEL_55:
  v8 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 20) = v8;
  if ((*(_DWORD *)(a2 + 120) & 0x40000) == 0)
    return *(float *)&v4;
LABEL_56:
  LODWORD(v4) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 120) = v3 | 0x40000;
  *(_DWORD *)(a1 + 84) = v4;
  return *(float *)&v4;
}

uint64_t sub_1015D7008(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "biasFraction", *(float *)(a1 + 16));
    v5 = *(_DWORD *)(a1 + 120);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_32;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "cookie", *(_DWORD *)(a1 + 20));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "currentRange", *(float *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "distanceReleaseThreshold", *(float *)(a1 + 28));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "distanceTriggerThreshold", *(float *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "habcBiasCorrectedDenominator", *(float *)(a1 + 36));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "habcBiasCorrectedNumFramesCaptured", *(_DWORD *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "habcBiasCorrectedNumerator", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "habcBiasCorrectedRateBaseline", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "habcBiasCorrectedRateBaselineSigma", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "habcDenominator", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "habcNumFramesCaptured", *(_DWORD *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "habcNumerator", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "habcRateBaseline", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "habcRateBaselineSigma", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "numBaselineCaptureFrames", *(_DWORD *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "numEffSpads", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0)
      goto LABEL_20;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "rateScalingFactor", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0)
      goto LABEL_21;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "reflectanceEstimate", *(float *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "signalDeltaNCounts", *(float *)(a1 + 92));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0)
      goto LABEL_23;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "signalRateBaselineKcpss", *(float *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "signalRateBaselineSigmaKcpss", *(float *)(a1 + 100));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_25;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "signalRateNoiseMarginKcpss", *(float *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_26;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "signalRateSigmaKcpss", *(float *)(a1 + 108));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_27;
LABEL_55:
    PB::TextFormatter::format(this, "smudgeTimeoutCountdownMs", *(float *)(a1 + 116));
    if ((*(_DWORD *)(a1 + 120) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_28;
  }
LABEL_54:
  PB::TextFormatter::format(this, "signalRateTriggerThresholdNCounts", *(float *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x4000000) != 0)
    goto LABEL_55;
LABEL_27:
  if ((v5 & 1) != 0)
LABEL_28:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015D7398(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 120) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_151;
            case 2u:
              *(_DWORD *)(a1 + 120) |= 0x1000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 3u:
              *(_DWORD *)(a1 + 120) |= 0x200000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 4u:
              *(_DWORD *)(a1 + 120) |= 0x400000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 5u:
              *(_DWORD *)(a1 + 120) |= 0x800000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 6u:
              *(_DWORD *)(a1 + 120) |= 0x100000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 7u:
              *(_DWORD *)(a1 + 120) |= 0x2000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 8u:
              *(_DWORD *)(a1 + 120) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 9u:
              *(_DWORD *)(a1 + 120) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 0xAu:
              *(_DWORD *)(a1 + 120) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 0xBu:
              *(_DWORD *)(a1 + 120) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 0xCu:
              *(_DWORD *)(a1 + 120) |= 0x10000u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_161;
                  }
                  v47 = v21++;
                  v48 = *(_BYTE *)(v22 + v47);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_160:
                    v2 = v47 + 1;
                    goto LABEL_161;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_160;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_161;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_161:
              *(_DWORD *)(a1 + 76) = v25;
              goto LABEL_152;
            case 0xDu:
              *(_DWORD *)(a1 + 120) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 0xEu:
              *(_DWORD *)(a1 + 120) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 0xFu:
              *(_DWORD *)(a1 + 120) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 0x10u:
              *(_DWORD *)(a1 + 120) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 0x11u:
              *(_DWORD *)(a1 + 120) |= 0x1000u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_166;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_165:
                    v2 = v51 + 1;
                    goto LABEL_166;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_165;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_166;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_166:
              *(_DWORD *)(a1 + 60) = v31;
              goto LABEL_152;
            case 0x12u:
              *(_DWORD *)(a1 + 120) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 0x13u:
              *(_DWORD *)(a1 + 120) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 0x14u:
              *(_DWORD *)(a1 + 120) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 0x15u:
              *(_DWORD *)(a1 + 120) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 0x16u:
              *(_DWORD *)(a1 + 120) |= 0x80u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_171;
                  }
                  v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_170:
                    v2 = v55 + 1;
                    goto LABEL_171;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_170;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_171;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_171:
              *(_DWORD *)(a1 + 40) = v37;
              goto LABEL_152;
            case 0x17u:
              *(_DWORD *)(a1 + 120) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 0x18u:
              *(_DWORD *)(a1 + 120) |= 0x4000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 0x19u:
              *(_DWORD *)(a1 + 120) |= 0x80000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 0x1Au:
              *(_DWORD *)(a1 + 120) |= 4u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_176;
                  }
                  v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_175:
                    v2 = v59 + 1;
                    goto LABEL_176;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_175;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_176;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_176:
              *(_DWORD *)(a1 + 20) = v43;
LABEL_152:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x1Bu:
              *(_DWORD *)(a1 + 120) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_150:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_151:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_120:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_152;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_152;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015D7DE4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 120);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_DWORD *)(v3 + 120);
    if ((v4 & 0x1000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000) == 0)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else if ((v4 & 0x1000000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 108), 2u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x200000) == 0)
  {
LABEL_4:
    if ((v4 & 0x400000) == 0)
      goto LABEL_5;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 96), 3u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x400000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800000) == 0)
      goto LABEL_6;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 100), 4u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x800000) == 0)
  {
LABEL_6:
    if ((v4 & 0x100000) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 104), 5u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x100000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 92), 6u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 112), 7u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 24), 8u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 32), 9u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000) == 0)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 0xAu);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x20000) == 0)
  {
LABEL_12:
    if ((v4 & 0x10000) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 80), 0xBu);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x10000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 76), 0xCu);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x4000) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(float *)(v3 + 68), 0xDu);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 72), 0xEu);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x2000) == 0)
  {
LABEL_16:
    if ((v4 & 0x800) == 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(float *)(v3 + 64), 0xFu);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x800) == 0)
  {
LABEL_17:
    if ((v4 & 0x1000) == 0)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(float *)(v3 + 56), 0x10u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x1000) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 0x11u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 0x400) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(float *)(v3 + 48), 0x12u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x400) == 0)
  {
LABEL_20:
    if ((v4 & 0x100) == 0)
      goto LABEL_21;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(float *)(v3 + 52), 0x13u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x100) == 0)
  {
LABEL_21:
    if ((v4 & 0x40) == 0)
      goto LABEL_22;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(float *)(v3 + 44), 0x14u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v4 & 0x80) == 0)
      goto LABEL_23;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(float *)(v3 + 36), 0x15u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x80) == 0)
  {
LABEL_23:
    if ((v4 & 2) == 0)
      goto LABEL_24;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 0x16u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 2) == 0)
  {
LABEL_24:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(float *)(v3 + 16), 0x17u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(float *)(v3 + 116), 0x18u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x80000) == 0)
  {
LABEL_26:
    if ((v4 & 4) == 0)
      goto LABEL_27;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::write(this, *(float *)(v3 + 88), 0x19u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 4) == 0)
  {
LABEL_27:
    if ((v4 & 0x40000) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 84), 0x1Bu);
  }
LABEL_54:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 0x1Au);
  if ((*(_DWORD *)(v3 + 120) & 0x40000) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 84), 0x1Bu);
  return result;
}

uint64_t sub_1015D80FC(uint64_t result)
{
  *(_QWORD *)result = &off_1021C0AA0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_1015D8114(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015D8138(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;

  *(_QWORD *)result = &off_1021C0AA0;
  *(_DWORD *)(result + 24) = 0;
  v2 = *(_BYTE *)(a2 + 24);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 24) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 24);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 24) & 4) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(result + 24) = v3;
    *(_DWORD *)(result + 20) = v5;
    v2 = *(_BYTE *)(a2 + 24);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 24) = v3 | 2;
    *(_DWORD *)(result + 16) = v6;
  }
  return result;
}

uint64_t sub_1015D81A8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 2) == 0)
  {
    if ((*(_BYTE *)(a1 + 24) & 4) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "proximityState", *(_DWORD *)(a1 + 20));
    if ((*(_BYTE *)(a1 + 24) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "proximityRawValue", *(_DWORD *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 4) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 1) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015D8238(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_62;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_61;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_61:
          v2 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_62:
        *(_DWORD *)(a1 + 16) = v25;
      }
      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 24) |= 4u;
        v27 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v28 = *(_QWORD *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_67;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)this + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_66;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v31) = 0;
LABEL_66:
          v2 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v2 = v27 + 1;
            *((_QWORD *)this + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v2;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_67:
        *(_DWORD *)(a1 + 20) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015D85B8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 24);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return result;
      return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 3u);
    }
  }
  else if ((*(_BYTE *)(result + 24) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 2u);
  if ((*(_BYTE *)(v3 + 24) & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 3u);
  return result;
}

_QWORD *sub_1015D8630(_QWORD *result)
{
  *result = &off_1021C0AD8;
  *(_QWORD *)((char *)result + 164) = 0;
  return result;
}

void sub_1015D8648(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015D866C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;

  *(_QWORD *)result = &off_1021C0AD8;
  *(_QWORD *)(result + 164) = 0;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x10) != 0)
  {
    v4 = *(_QWORD *)(a2 + 40);
    v3 = 16;
    *(_QWORD *)(result + 164) = 16;
    *(_QWORD *)(result + 40) = v4;
    v2 = *(_QWORD *)(a2 + 164);
    if ((v2 & 0x80000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80000) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 104);
    v3 |= 0x80000uLL;
    *(_QWORD *)(result + 164) = v3;
    *(_DWORD *)(result + 104) = v5;
    v2 = *(_QWORD *)(a2 + 164);
  }
LABEL_6:
  if ((v2 & 0x20000000) != 0)
  {
    v6 = *(_DWORD *)(a2 + 144);
    v3 |= 0x20000000uLL;
    *(_QWORD *)(result + 164) = v3;
    *(_DWORD *)(result + 144) = v6;
    v2 = *(_QWORD *)(a2 + 164);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40000000) == 0)
        goto LABEL_9;
      goto LABEL_41;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 48);
  v3 |= 0x20uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 48) = v7;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_42;
  }
LABEL_41:
  v8 = *(_DWORD *)(a2 + 148);
  v3 |= 0x40000000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 148) = v8;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x100000000) == 0)
      goto LABEL_11;
    goto LABEL_43;
  }
LABEL_42:
  v9 = *(_DWORD *)(a2 + 52);
  v3 |= 0x40uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 52) = v9;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x2000) == 0)
      goto LABEL_12;
    goto LABEL_44;
  }
LABEL_43:
  v10 = *(_DWORD *)(a2 + 156);
  v3 |= (unint64_t)&_mh_execute_header;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 156) = v10;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x2000) == 0)
  {
LABEL_12:
    if ((v2 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_45;
  }
LABEL_44:
  v11 = *(_DWORD *)(a2 + 80);
  v3 |= 0x2000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 80) = v11;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x1000) == 0)
  {
LABEL_13:
    if ((v2 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_46;
  }
LABEL_45:
  v12 = *(_DWORD *)(a2 + 76);
  v3 |= 0x1000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 76) = v12;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x80) == 0)
  {
LABEL_14:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_15;
    goto LABEL_47;
  }
LABEL_46:
  v13 = *(_DWORD *)(a2 + 56);
  v3 |= 0x80uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 56) = v13;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_16;
    goto LABEL_48;
  }
LABEL_47:
  v14 = *(_DWORD *)(a2 + 160);
  v3 |= 0x200000000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 160) = v14;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_49;
  }
LABEL_48:
  v15 = *(_DWORD *)(a2 + 140);
  v3 |= 0x10000000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 140) = v15;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_50;
  }
LABEL_49:
  v16 = *(_DWORD *)(a2 + 68);
  v3 |= 0x400uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 68) = v16;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x4000) == 0)
  {
LABEL_18:
    if ((v2 & 0x800000) == 0)
      goto LABEL_19;
    goto LABEL_51;
  }
LABEL_50:
  v17 = *(_DWORD *)(a2 + 84);
  v3 |= 0x4000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 84) = v17;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x800000) == 0)
  {
LABEL_19:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_20;
    goto LABEL_52;
  }
LABEL_51:
  v18 = *(_DWORD *)(a2 + 120);
  v3 |= 0x800000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 120) = v18;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_21;
    goto LABEL_53;
  }
LABEL_52:
  v19 = *(_DWORD *)(a2 + 128);
  v3 |= 0x2000000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 128) = v19;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_21:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_22;
    goto LABEL_54;
  }
LABEL_53:
  v20 = *(_DWORD *)(a2 + 136);
  v3 |= 0x8000000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 136) = v20;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x400000) == 0)
      goto LABEL_23;
    goto LABEL_55;
  }
LABEL_54:
  v21 = *(_DWORD *)(a2 + 132);
  v3 |= 0x4000000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 132) = v21;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x400000) == 0)
  {
LABEL_23:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_24;
    goto LABEL_56;
  }
LABEL_55:
  v22 = *(_DWORD *)(a2 + 116);
  v3 |= 0x400000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 116) = v22;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_57;
  }
LABEL_56:
  v23 = *(_DWORD *)(a2 + 124);
  v3 |= 0x1000000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 124) = v23;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000) == 0)
      goto LABEL_26;
    goto LABEL_58;
  }
LABEL_57:
  v24 = *(_DWORD *)(a2 + 152);
  v3 |= 0x80000000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 152) = v24;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x100000) == 0)
      goto LABEL_27;
    goto LABEL_59;
  }
LABEL_58:
  v25 = *(_DWORD *)(a2 + 88);
  v3 |= 0x8000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 88) = v25;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x100000) == 0)
  {
LABEL_27:
    if ((v2 & 0x100) == 0)
      goto LABEL_28;
    goto LABEL_60;
  }
LABEL_59:
  v26 = *(_DWORD *)(a2 + 108);
  v3 |= 0x100000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 108) = v26;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x100) == 0)
  {
LABEL_28:
    if ((v2 & 0x200000) == 0)
      goto LABEL_29;
    goto LABEL_61;
  }
LABEL_60:
  v27 = *(_DWORD *)(a2 + 60);
  v3 |= 0x100uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 60) = v27;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x200000) == 0)
  {
LABEL_29:
    if ((v2 & 0x200) == 0)
      goto LABEL_30;
    goto LABEL_62;
  }
LABEL_61:
  v28 = *(_DWORD *)(a2 + 112);
  v3 |= 0x200000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 112) = v28;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x200) == 0)
  {
LABEL_30:
    if ((v2 & 0x20000) == 0)
      goto LABEL_31;
    goto LABEL_63;
  }
LABEL_62:
  v29 = *(_DWORD *)(a2 + 64);
  v3 |= 0x200uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 64) = v29;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x20000) == 0)
  {
LABEL_31:
    if ((v2 & 0x40000) == 0)
      goto LABEL_32;
    goto LABEL_64;
  }
LABEL_63:
  v30 = *(_DWORD *)(a2 + 96);
  v3 |= 0x20000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 96) = v30;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x40000) == 0)
  {
LABEL_32:
    if ((v2 & 0x10000) == 0)
      goto LABEL_33;
    goto LABEL_65;
  }
LABEL_64:
  v31 = *(_DWORD *)(a2 + 100);
  v3 |= 0x40000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 100) = v31;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x10000) == 0)
  {
LABEL_33:
    if ((v2 & 8) == 0)
      goto LABEL_34;
    goto LABEL_66;
  }
LABEL_65:
  v32 = *(_DWORD *)(a2 + 92);
  v3 |= 0x10000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 92) = v32;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 8) == 0)
  {
LABEL_34:
    if ((v2 & 4) == 0)
      goto LABEL_35;
    goto LABEL_67;
  }
LABEL_66:
  v33 = *(_QWORD *)(a2 + 32);
  v3 |= 8uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_QWORD *)(result + 32) = v33;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 4) == 0)
  {
LABEL_35:
    if ((v2 & 1) == 0)
      goto LABEL_36;
    goto LABEL_68;
  }
LABEL_67:
  v34 = *(_QWORD *)(a2 + 24);
  v3 |= 4uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_QWORD *)(result + 24) = v34;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 1) == 0)
  {
LABEL_36:
    if ((v2 & 2) == 0)
      goto LABEL_37;
    goto LABEL_69;
  }
LABEL_68:
  v35 = *(_QWORD *)(a2 + 8);
  v3 |= 1uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_QWORD *)(result + 8) = v35;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 2) == 0)
  {
LABEL_37:
    if ((v2 & 0x800) == 0)
      return result;
LABEL_70:
    v37 = *(_DWORD *)(a2 + 72);
    *(_QWORD *)(result + 164) = v3 | 0x800;
    *(_DWORD *)(result + 72) = v37;
    return result;
  }
LABEL_69:
  v36 = *(_QWORD *)(a2 + 16);
  v3 |= 2uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_QWORD *)(result + 16) = v36;
  if ((*(_QWORD *)(a2 + 164) & 0x800) != 0)
    goto LABEL_70;
  return result;
}

uint64_t sub_1015D8A40(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "ambientRatePerSPAD", *(float *)(a1 + 48));
    v5 = *(_QWORD *)(a1 + 164);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_39;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "ambientRateTotal", *(float *)(a1 + 52));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 0x100) == 0)
      goto LABEL_5;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "blockSelectByte", *(_DWORD *)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x100) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "correctedSignalRatePerSPAD", *(float *)(a1 + 60));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "estimatedAmbientBias", *(float *)(a1 + 64));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "integrationTime", *(_DWORD *)(a1 + 68));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x800) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "numAOPClients", *(_DWORD *)(a1 + 72));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "numAperturedSPADs", *(_DWORD *)(a1 + 76));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "numFullSPADs", *(_DWORD *)(a1 + 80));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "oscFrequencySetting", *(_DWORD *)(a1 + 84));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x8000) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0)
      goto LABEL_13;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "oscTrim", *(_DWORD *)(a1 + 88));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 1) == 0)
  {
LABEL_13:
    if ((v5 & 0x10000) == 0)
      goto LABEL_14;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "pearlScanWindowOnTs", *(_QWORD *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x10000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0)
      goto LABEL_15;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "pearlScanWindowOpen", *(_DWORD *)(a1 + 92));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 4) == 0)
      goto LABEL_16;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "pearlScanWindownOffTs", *(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 4) == 0)
  {
LABEL_16:
    if ((v5 & 8) == 0)
      goto LABEL_17;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "pearlSessionOffTs", *(_QWORD *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 8) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "pearlSessionOnTs", *(_QWORD *)(a1 + 32));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "pearlSessionRunning", *(_DWORD *)(a1 + 96));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0)
      goto LABEL_20;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "pearlSessionType", *(_DWORD *)(a1 + 100));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0)
      goto LABEL_21;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "rawRange", *(float *)(a1 + 104));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "refPhaseOffset", *(_DWORD *)(a1 + 108));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0)
      goto LABEL_23;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "refSignalRateTotal", *(float *)(a1 + 112));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "regValAmbientWindowEvents", *(_DWORD *)(a1 + 116));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_25;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "regValRange", *(_DWORD *)(a1 + 120));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_26;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "regValRefAmbientWindowEvents", *(_DWORD *)(a1 + 124));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_27;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "regValRefRange", *(_DWORD *)(a1 + 128));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_28;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "regValRefSignalTotalEvents", *(_DWORD *)(a1 + 132));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_29;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "regValSignalTotalEvents", *(_DWORD *)(a1 + 136));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_30;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "signalEventLimit", *(_DWORD *)(a1 + 140));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_31;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "signalRatePerSPAD", *(float *)(a1 + 144));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "signalRateTotal", *(float *)(a1 + 148));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x10) == 0)
      goto LABEL_33;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "signalToAmbientWindowRatio", *(_DWORD *)(a1 + 152));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x10) == 0)
  {
LABEL_33:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_34;
LABEL_69:
    PB::TextFormatter::format(this, "totalRateTotal", *(float *)(a1 + 156));
    if ((*(_QWORD *)(a1 + 164) & 0x200000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_35;
  }
LABEL_68:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x100000000) != 0)
    goto LABEL_69;
LABEL_34:
  if ((v5 & 0x200000000) != 0)
LABEL_35:
    PB::TextFormatter::format(this, "vhvSetting", *(_DWORD *)(a1 + 160));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015D8EB0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char v120;
  unsigned int v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char v128;
  unsigned int v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char v136;
  unsigned int v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  char v163;
  unsigned int v164;
  uint64_t v165;
  unint64_t v166;
  char v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  char v171;
  unsigned int v172;
  uint64_t v173;
  unint64_t v174;
  char v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  char v179;
  unsigned int v180;
  uint64_t v181;
  unint64_t v182;
  char v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  char v187;
  unsigned int v188;
  uint64_t v189;
  unint64_t v190;
  char v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  char v195;
  unsigned int v196;
  uint64_t v197;
  unint64_t v198;
  char v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  char v203;
  unsigned int v204;
  uint64_t v205;
  unint64_t v206;
  char v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  char v211;
  unsigned int v212;
  uint64_t v213;
  unint64_t v214;
  char v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  char v219;
  unsigned int v220;
  uint64_t v221;
  unint64_t v222;
  char v223;
  char v224;
  unsigned int v225;
  unint64_t v226;
  char v227;
  char v228;
  unsigned int v229;
  unint64_t v230;
  char v231;
  char v232;
  unsigned int v233;
  unint64_t v234;
  char v235;
  char v236;
  unsigned int v237;
  unint64_t v238;
  char v239;
  char v240;
  unsigned int v241;
  unint64_t v242;
  char v243;
  char v244;
  unsigned int v245;
  unint64_t v246;
  char v247;
  char v248;
  unsigned int v249;
  unint64_t v250;
  char v251;
  char v252;
  unsigned int v253;
  unint64_t v254;
  char v255;
  char v256;
  unsigned int v257;
  unint64_t v258;
  char v259;
  char v260;
  unsigned int v261;
  unint64_t v262;
  char v263;
  char v264;
  unsigned int v265;
  unint64_t v266;
  char v267;
  char v268;
  unsigned int v269;
  unint64_t v270;
  char v271;
  char v272;
  unsigned int v273;
  unint64_t v274;
  char v275;
  char v276;
  unsigned int v277;
  unint64_t v278;
  char v279;
  char v280;
  unsigned int v281;
  unint64_t v282;
  char v283;
  char v284;
  unsigned int v285;
  unint64_t v286;
  char v287;
  char v288;
  unsigned int v289;
  unint64_t v290;
  char v291;
  char v292;
  unsigned int v293;
  unint64_t v294;
  char v295;
  char v296;
  unsigned int v297;
  unint64_t v298;
  char v299;
  char v300;
  unsigned int v301;
  unint64_t v302;
  char v303;
  char v304;
  unsigned int v305;
  unint64_t v306;
  char v307;
  char v308;
  unsigned int v309;
  unint64_t v310;
  char v311;
  char v312;
  unsigned int v313;
  unint64_t v314;
  char v315;
  char v316;
  unsigned int v317;
  unint64_t v318;
  char v319;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_QWORD *)(a1 + 164) |= 0x10uLL;
          v20 = *((_QWORD *)this + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)this + 2))
            goto LABEL_165;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v20);
          v21 = *((_QWORD *)this + 1) + 8;
          goto LABEL_392;
        case 2u:
          *(_QWORD *)(a1 + 164) |= 0x80000uLL;
          v23 = *((_QWORD *)this + 1);
          if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((_QWORD *)this + 2))
            goto LABEL_165;
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v23);
          goto LABEL_391;
        case 3u:
          *(_QWORD *)(a1 + 164) |= 0x20000000uLL;
          v24 = *((_QWORD *)this + 1);
          if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((_QWORD *)this + 2))
            goto LABEL_165;
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v24);
          goto LABEL_391;
        case 4u:
          *(_QWORD *)(a1 + 164) |= 0x20uLL;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((_QWORD *)this + 2))
            goto LABEL_165;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v25);
          goto LABEL_391;
        case 5u:
          *(_QWORD *)(a1 + 164) |= 0x40000000uLL;
          v26 = *((_QWORD *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((_QWORD *)this + 2))
            goto LABEL_165;
          *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(_QWORD *)this + v26);
          goto LABEL_391;
        case 6u:
          *(_QWORD *)(a1 + 164) |= 0x40uLL;
          v27 = *((_QWORD *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((_QWORD *)this + 2))
            goto LABEL_165;
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v27);
          goto LABEL_391;
        case 7u:
          *(_QWORD *)(a1 + 164) |= (unint64_t)&_mh_execute_header;
          v28 = *((_QWORD *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((_QWORD *)this + 2))
            goto LABEL_165;
          *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(_QWORD *)this + v28);
          goto LABEL_391;
        case 8u:
          *(_QWORD *)(a1 + 164) |= 0x2000uLL;
          v29 = *((_QWORD *)this + 1);
          v30 = *((_QWORD *)this + 2);
          v31 = *(_QWORD *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)this + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_396;
              v32 += 7;
              v29 = v35;
              v14 = v33++ > 8;
            }
            while (!v14);
LABEL_228:
            LODWORD(v34) = 0;
            goto LABEL_396;
          }
          v224 = 0;
          v225 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v226 = v29 + 1;
              v227 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)this + 1) = v226;
              v34 |= (unint64_t)(v227 & 0x7F) << v224;
              if (v227 < 0)
              {
                v224 += 7;
                v29 = v226;
                v14 = v225++ > 8;
                if (v14)
                  goto LABEL_228;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v34) = 0;
            }
            break;
          }
LABEL_396:
          *(_DWORD *)(a1 + 80) = v34;
          goto LABEL_489;
        case 9u:
          *(_QWORD *)(a1 + 164) |= 0x1000uLL;
          v37 = *((_QWORD *)this + 1);
          v38 = *((_QWORD *)this + 2);
          v39 = *(_QWORD *)this;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            v40 = 0;
            v41 = 0;
            v42 = 0;
            do
            {
              v43 = v37 + 1;
              *((_QWORD *)this + 1) = v37 + 1;
              v44 = *(_BYTE *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0)
                goto LABEL_400;
              v40 += 7;
              v37 = v43;
              v14 = v41++ > 8;
            }
            while (!v14);
LABEL_235:
            LODWORD(v42) = 0;
            goto LABEL_400;
          }
          v228 = 0;
          v229 = 0;
          v42 = 0;
          if (v38 <= v37)
            v38 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v38 == v37)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v230 = v37 + 1;
              v231 = *(_BYTE *)(v39 + v37);
              *((_QWORD *)this + 1) = v230;
              v42 |= (unint64_t)(v231 & 0x7F) << v228;
              if (v231 < 0)
              {
                v228 += 7;
                v37 = v230;
                v14 = v229++ > 8;
                if (v14)
                  goto LABEL_235;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v42) = 0;
            }
            break;
          }
LABEL_400:
          *(_DWORD *)(a1 + 76) = v42;
          goto LABEL_489;
        case 0xAu:
          *(_QWORD *)(a1 + 164) |= 0x80uLL;
          v45 = *((_QWORD *)this + 1);
          v46 = *((_QWORD *)this + 2);
          v47 = *(_QWORD *)this;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            v48 = 0;
            v49 = 0;
            v50 = 0;
            do
            {
              v51 = v45 + 1;
              *((_QWORD *)this + 1) = v45 + 1;
              v52 = *(_BYTE *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0)
                goto LABEL_404;
              v48 += 7;
              v45 = v51;
              v14 = v49++ > 8;
            }
            while (!v14);
LABEL_242:
            LODWORD(v50) = 0;
            goto LABEL_404;
          }
          v232 = 0;
          v233 = 0;
          v50 = 0;
          if (v46 <= v45)
            v46 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v46 == v45)
            {
              LODWORD(v50) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v234 = v45 + 1;
              v235 = *(_BYTE *)(v47 + v45);
              *((_QWORD *)this + 1) = v234;
              v50 |= (unint64_t)(v235 & 0x7F) << v232;
              if (v235 < 0)
              {
                v232 += 7;
                v45 = v234;
                v14 = v233++ > 8;
                if (v14)
                  goto LABEL_242;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v50) = 0;
            }
            break;
          }
LABEL_404:
          *(_DWORD *)(a1 + 56) = v50;
          goto LABEL_489;
        case 0xBu:
          *(_QWORD *)(a1 + 164) |= 0x200000000uLL;
          v53 = *((_QWORD *)this + 1);
          v54 = *((_QWORD *)this + 2);
          v55 = *(_QWORD *)this;
          if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
          {
            v56 = 0;
            v57 = 0;
            v58 = 0;
            do
            {
              v59 = v53 + 1;
              *((_QWORD *)this + 1) = v53 + 1;
              v60 = *(_BYTE *)(v55 + v53);
              v58 |= (unint64_t)(v60 & 0x7F) << v56;
              if ((v60 & 0x80) == 0)
                goto LABEL_408;
              v56 += 7;
              v53 = v59;
              v14 = v57++ > 8;
            }
            while (!v14);
LABEL_249:
            LODWORD(v58) = 0;
            goto LABEL_408;
          }
          v236 = 0;
          v237 = 0;
          v58 = 0;
          if (v54 <= v53)
            v54 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v54 == v53)
            {
              LODWORD(v58) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v238 = v53 + 1;
              v239 = *(_BYTE *)(v55 + v53);
              *((_QWORD *)this + 1) = v238;
              v58 |= (unint64_t)(v239 & 0x7F) << v236;
              if (v239 < 0)
              {
                v236 += 7;
                v53 = v238;
                v14 = v237++ > 8;
                if (v14)
                  goto LABEL_249;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v58) = 0;
            }
            break;
          }
LABEL_408:
          *(_DWORD *)(a1 + 160) = v58;
          goto LABEL_489;
        case 0xCu:
          *(_QWORD *)(a1 + 164) |= 0x10000000uLL;
          v61 = *((_QWORD *)this + 1);
          v62 = *((_QWORD *)this + 2);
          v63 = *(_QWORD *)this;
          if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
          {
            v64 = 0;
            v65 = 0;
            v66 = 0;
            do
            {
              v67 = v61 + 1;
              *((_QWORD *)this + 1) = v61 + 1;
              v68 = *(_BYTE *)(v63 + v61);
              v66 |= (unint64_t)(v68 & 0x7F) << v64;
              if ((v68 & 0x80) == 0)
                goto LABEL_412;
              v64 += 7;
              v61 = v67;
              v14 = v65++ > 8;
            }
            while (!v14);
LABEL_256:
            LODWORD(v66) = 0;
            goto LABEL_412;
          }
          v240 = 0;
          v241 = 0;
          v66 = 0;
          if (v62 <= v61)
            v62 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v62 == v61)
            {
              LODWORD(v66) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v242 = v61 + 1;
              v243 = *(_BYTE *)(v63 + v61);
              *((_QWORD *)this + 1) = v242;
              v66 |= (unint64_t)(v243 & 0x7F) << v240;
              if (v243 < 0)
              {
                v240 += 7;
                v61 = v242;
                v14 = v241++ > 8;
                if (v14)
                  goto LABEL_256;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v66) = 0;
            }
            break;
          }
LABEL_412:
          *(_DWORD *)(a1 + 140) = v66;
          goto LABEL_489;
        case 0xDu:
          *(_QWORD *)(a1 + 164) |= 0x400uLL;
          v69 = *((_QWORD *)this + 1);
          v70 = *((_QWORD *)this + 2);
          v71 = *(_QWORD *)this;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            v72 = 0;
            v73 = 0;
            v74 = 0;
            do
            {
              v75 = v69 + 1;
              *((_QWORD *)this + 1) = v69 + 1;
              v76 = *(_BYTE *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0)
                goto LABEL_416;
              v72 += 7;
              v69 = v75;
              v14 = v73++ > 8;
            }
            while (!v14);
LABEL_263:
            LODWORD(v74) = 0;
            goto LABEL_416;
          }
          v244 = 0;
          v245 = 0;
          v74 = 0;
          if (v70 <= v69)
            v70 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v246 = v69 + 1;
              v247 = *(_BYTE *)(v71 + v69);
              *((_QWORD *)this + 1) = v246;
              v74 |= (unint64_t)(v247 & 0x7F) << v244;
              if (v247 < 0)
              {
                v244 += 7;
                v69 = v246;
                v14 = v245++ > 8;
                if (v14)
                  goto LABEL_263;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v74) = 0;
            }
            break;
          }
LABEL_416:
          *(_DWORD *)(a1 + 68) = v74;
          goto LABEL_489;
        case 0xEu:
          *(_QWORD *)(a1 + 164) |= 0x4000uLL;
          v77 = *((_QWORD *)this + 1);
          v78 = *((_QWORD *)this + 2);
          v79 = *(_QWORD *)this;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            v80 = 0;
            v81 = 0;
            v82 = 0;
            do
            {
              v83 = v77 + 1;
              *((_QWORD *)this + 1) = v77 + 1;
              v84 = *(_BYTE *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0)
                goto LABEL_420;
              v80 += 7;
              v77 = v83;
              v14 = v81++ > 8;
            }
            while (!v14);
LABEL_270:
            LODWORD(v82) = 0;
            goto LABEL_420;
          }
          v248 = 0;
          v249 = 0;
          v82 = 0;
          if (v78 <= v77)
            v78 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v78 == v77)
            {
              LODWORD(v82) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v250 = v77 + 1;
              v251 = *(_BYTE *)(v79 + v77);
              *((_QWORD *)this + 1) = v250;
              v82 |= (unint64_t)(v251 & 0x7F) << v248;
              if (v251 < 0)
              {
                v248 += 7;
                v77 = v250;
                v14 = v249++ > 8;
                if (v14)
                  goto LABEL_270;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v82) = 0;
            }
            break;
          }
LABEL_420:
          *(_DWORD *)(a1 + 84) = v82;
          goto LABEL_489;
        case 0xFu:
          *(_QWORD *)(a1 + 164) |= 0x800000uLL;
          v85 = *((_QWORD *)this + 1);
          v86 = *((_QWORD *)this + 2);
          v87 = *(_QWORD *)this;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            v88 = 0;
            v89 = 0;
            v90 = 0;
            do
            {
              v91 = v85 + 1;
              *((_QWORD *)this + 1) = v85 + 1;
              v92 = *(_BYTE *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0)
                goto LABEL_424;
              v88 += 7;
              v85 = v91;
              v14 = v89++ > 8;
            }
            while (!v14);
LABEL_277:
            LODWORD(v90) = 0;
            goto LABEL_424;
          }
          v252 = 0;
          v253 = 0;
          v90 = 0;
          if (v86 <= v85)
            v86 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v86 == v85)
            {
              LODWORD(v90) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v254 = v85 + 1;
              v255 = *(_BYTE *)(v87 + v85);
              *((_QWORD *)this + 1) = v254;
              v90 |= (unint64_t)(v255 & 0x7F) << v252;
              if (v255 < 0)
              {
                v252 += 7;
                v85 = v254;
                v14 = v253++ > 8;
                if (v14)
                  goto LABEL_277;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v90) = 0;
            }
            break;
          }
LABEL_424:
          *(_DWORD *)(a1 + 120) = v90;
          goto LABEL_489;
        case 0x10u:
          *(_QWORD *)(a1 + 164) |= 0x2000000uLL;
          v93 = *((_QWORD *)this + 1);
          v94 = *((_QWORD *)this + 2);
          v95 = *(_QWORD *)this;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            v96 = 0;
            v97 = 0;
            v98 = 0;
            do
            {
              v99 = v93 + 1;
              *((_QWORD *)this + 1) = v93 + 1;
              v100 = *(_BYTE *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0)
                goto LABEL_428;
              v96 += 7;
              v93 = v99;
              v14 = v97++ > 8;
            }
            while (!v14);
LABEL_284:
            LODWORD(v98) = 0;
            goto LABEL_428;
          }
          v256 = 0;
          v257 = 0;
          v98 = 0;
          if (v94 <= v93)
            v94 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v94 == v93)
            {
              LODWORD(v98) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v258 = v93 + 1;
              v259 = *(_BYTE *)(v95 + v93);
              *((_QWORD *)this + 1) = v258;
              v98 |= (unint64_t)(v259 & 0x7F) << v256;
              if (v259 < 0)
              {
                v256 += 7;
                v93 = v258;
                v14 = v257++ > 8;
                if (v14)
                  goto LABEL_284;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v98) = 0;
            }
            break;
          }
LABEL_428:
          *(_DWORD *)(a1 + 128) = v98;
          goto LABEL_489;
        case 0x11u:
          *(_QWORD *)(a1 + 164) |= 0x8000000uLL;
          v101 = *((_QWORD *)this + 1);
          v102 = *((_QWORD *)this + 2);
          v103 = *(_QWORD *)this;
          if (v101 <= 0xFFFFFFFFFFFFFFF5 && v101 + 10 <= v102)
          {
            v104 = 0;
            v105 = 0;
            v106 = 0;
            do
            {
              v107 = v101 + 1;
              *((_QWORD *)this + 1) = v101 + 1;
              v108 = *(_BYTE *)(v103 + v101);
              v106 |= (unint64_t)(v108 & 0x7F) << v104;
              if ((v108 & 0x80) == 0)
                goto LABEL_432;
              v104 += 7;
              v101 = v107;
              v14 = v105++ > 8;
            }
            while (!v14);
LABEL_291:
            LODWORD(v106) = 0;
            goto LABEL_432;
          }
          v260 = 0;
          v261 = 0;
          v106 = 0;
          if (v102 <= v101)
            v102 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v102 == v101)
            {
              LODWORD(v106) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v262 = v101 + 1;
              v263 = *(_BYTE *)(v103 + v101);
              *((_QWORD *)this + 1) = v262;
              v106 |= (unint64_t)(v263 & 0x7F) << v260;
              if (v263 < 0)
              {
                v260 += 7;
                v101 = v262;
                v14 = v261++ > 8;
                if (v14)
                  goto LABEL_291;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v106) = 0;
            }
            break;
          }
LABEL_432:
          *(_DWORD *)(a1 + 136) = v106;
          goto LABEL_489;
        case 0x12u:
          *(_QWORD *)(a1 + 164) |= 0x4000000uLL;
          v109 = *((_QWORD *)this + 1);
          v110 = *((_QWORD *)this + 2);
          v111 = *(_QWORD *)this;
          if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
          {
            v112 = 0;
            v113 = 0;
            v114 = 0;
            do
            {
              v115 = v109 + 1;
              *((_QWORD *)this + 1) = v109 + 1;
              v116 = *(_BYTE *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0)
                goto LABEL_436;
              v112 += 7;
              v109 = v115;
              v14 = v113++ > 8;
            }
            while (!v14);
LABEL_298:
            LODWORD(v114) = 0;
            goto LABEL_436;
          }
          v264 = 0;
          v265 = 0;
          v114 = 0;
          if (v110 <= v109)
            v110 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v266 = v109 + 1;
              v267 = *(_BYTE *)(v111 + v109);
              *((_QWORD *)this + 1) = v266;
              v114 |= (unint64_t)(v267 & 0x7F) << v264;
              if (v267 < 0)
              {
                v264 += 7;
                v109 = v266;
                v14 = v265++ > 8;
                if (v14)
                  goto LABEL_298;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v114) = 0;
            }
            break;
          }
LABEL_436:
          *(_DWORD *)(a1 + 132) = v114;
          goto LABEL_489;
        case 0x13u:
          *(_QWORD *)(a1 + 164) |= 0x400000uLL;
          v117 = *((_QWORD *)this + 1);
          v118 = *((_QWORD *)this + 2);
          v119 = *(_QWORD *)this;
          if (v117 <= 0xFFFFFFFFFFFFFFF5 && v117 + 10 <= v118)
          {
            v120 = 0;
            v121 = 0;
            v122 = 0;
            do
            {
              v123 = v117 + 1;
              *((_QWORD *)this + 1) = v117 + 1;
              v124 = *(_BYTE *)(v119 + v117);
              v122 |= (unint64_t)(v124 & 0x7F) << v120;
              if ((v124 & 0x80) == 0)
                goto LABEL_440;
              v120 += 7;
              v117 = v123;
              v14 = v121++ > 8;
            }
            while (!v14);
LABEL_305:
            LODWORD(v122) = 0;
            goto LABEL_440;
          }
          v268 = 0;
          v269 = 0;
          v122 = 0;
          if (v118 <= v117)
            v118 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v118 == v117)
            {
              LODWORD(v122) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v270 = v117 + 1;
              v271 = *(_BYTE *)(v119 + v117);
              *((_QWORD *)this + 1) = v270;
              v122 |= (unint64_t)(v271 & 0x7F) << v268;
              if (v271 < 0)
              {
                v268 += 7;
                v117 = v270;
                v14 = v269++ > 8;
                if (v14)
                  goto LABEL_305;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v122) = 0;
            }
            break;
          }
LABEL_440:
          *(_DWORD *)(a1 + 116) = v122;
          goto LABEL_489;
        case 0x14u:
          *(_QWORD *)(a1 + 164) |= 0x1000000uLL;
          v125 = *((_QWORD *)this + 1);
          v126 = *((_QWORD *)this + 2);
          v127 = *(_QWORD *)this;
          if (v125 <= 0xFFFFFFFFFFFFFFF5 && v125 + 10 <= v126)
          {
            v128 = 0;
            v129 = 0;
            v130 = 0;
            do
            {
              v131 = v125 + 1;
              *((_QWORD *)this + 1) = v125 + 1;
              v132 = *(_BYTE *)(v127 + v125);
              v130 |= (unint64_t)(v132 & 0x7F) << v128;
              if ((v132 & 0x80) == 0)
                goto LABEL_444;
              v128 += 7;
              v125 = v131;
              v14 = v129++ > 8;
            }
            while (!v14);
LABEL_312:
            LODWORD(v130) = 0;
            goto LABEL_444;
          }
          v272 = 0;
          v273 = 0;
          v130 = 0;
          if (v126 <= v125)
            v126 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v126 == v125)
            {
              LODWORD(v130) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v274 = v125 + 1;
              v275 = *(_BYTE *)(v127 + v125);
              *((_QWORD *)this + 1) = v274;
              v130 |= (unint64_t)(v275 & 0x7F) << v272;
              if (v275 < 0)
              {
                v272 += 7;
                v125 = v274;
                v14 = v273++ > 8;
                if (v14)
                  goto LABEL_312;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v130) = 0;
            }
            break;
          }
LABEL_444:
          *(_DWORD *)(a1 + 124) = v130;
          goto LABEL_489;
        case 0x15u:
          *(_QWORD *)(a1 + 164) |= 0x80000000uLL;
          v133 = *((_QWORD *)this + 1);
          v134 = *((_QWORD *)this + 2);
          v135 = *(_QWORD *)this;
          if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
          {
            v136 = 0;
            v137 = 0;
            v138 = 0;
            do
            {
              v139 = v133 + 1;
              *((_QWORD *)this + 1) = v133 + 1;
              v140 = *(_BYTE *)(v135 + v133);
              v138 |= (unint64_t)(v140 & 0x7F) << v136;
              if ((v140 & 0x80) == 0)
                goto LABEL_448;
              v136 += 7;
              v133 = v139;
              v14 = v137++ > 8;
            }
            while (!v14);
LABEL_319:
            LODWORD(v138) = 0;
            goto LABEL_448;
          }
          v276 = 0;
          v277 = 0;
          v138 = 0;
          if (v134 <= v133)
            v134 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v134 == v133)
            {
              LODWORD(v138) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v278 = v133 + 1;
              v279 = *(_BYTE *)(v135 + v133);
              *((_QWORD *)this + 1) = v278;
              v138 |= (unint64_t)(v279 & 0x7F) << v276;
              if (v279 < 0)
              {
                v276 += 7;
                v133 = v278;
                v14 = v277++ > 8;
                if (v14)
                  goto LABEL_319;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v138) = 0;
            }
            break;
          }
LABEL_448:
          *(_DWORD *)(a1 + 152) = v138;
          goto LABEL_489;
        case 0x16u:
          *(_QWORD *)(a1 + 164) |= 0x8000uLL;
          v141 = *((_QWORD *)this + 1);
          v142 = *((_QWORD *)this + 2);
          v143 = *(_QWORD *)this;
          if (v141 <= 0xFFFFFFFFFFFFFFF5 && v141 + 10 <= v142)
          {
            v144 = 0;
            v145 = 0;
            v146 = 0;
            do
            {
              v147 = v141 + 1;
              *((_QWORD *)this + 1) = v141 + 1;
              v148 = *(_BYTE *)(v143 + v141);
              v146 |= (unint64_t)(v148 & 0x7F) << v144;
              if ((v148 & 0x80) == 0)
                goto LABEL_452;
              v144 += 7;
              v141 = v147;
              v14 = v145++ > 8;
            }
            while (!v14);
LABEL_326:
            LODWORD(v146) = 0;
            goto LABEL_452;
          }
          v280 = 0;
          v281 = 0;
          v146 = 0;
          if (v142 <= v141)
            v142 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v142 == v141)
            {
              LODWORD(v146) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v282 = v141 + 1;
              v283 = *(_BYTE *)(v143 + v141);
              *((_QWORD *)this + 1) = v282;
              v146 |= (unint64_t)(v283 & 0x7F) << v280;
              if (v283 < 0)
              {
                v280 += 7;
                v141 = v282;
                v14 = v281++ > 8;
                if (v14)
                  goto LABEL_326;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v146) = 0;
            }
            break;
          }
LABEL_452:
          *(_DWORD *)(a1 + 88) = v146;
          goto LABEL_489;
        case 0x17u:
          *(_QWORD *)(a1 + 164) |= 0x100000uLL;
          v149 = *((_QWORD *)this + 1);
          v150 = *((_QWORD *)this + 2);
          v151 = *(_QWORD *)this;
          if (v149 <= 0xFFFFFFFFFFFFFFF5 && v149 + 10 <= v150)
          {
            v152 = 0;
            v153 = 0;
            v154 = 0;
            do
            {
              v155 = v149 + 1;
              *((_QWORD *)this + 1) = v149 + 1;
              v156 = *(_BYTE *)(v151 + v149);
              v154 |= (unint64_t)(v156 & 0x7F) << v152;
              if ((v156 & 0x80) == 0)
                goto LABEL_456;
              v152 += 7;
              v149 = v155;
              v14 = v153++ > 8;
            }
            while (!v14);
LABEL_333:
            LODWORD(v154) = 0;
            goto LABEL_456;
          }
          v284 = 0;
          v285 = 0;
          v154 = 0;
          if (v150 <= v149)
            v150 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v150 == v149)
            {
              LODWORD(v154) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v286 = v149 + 1;
              v287 = *(_BYTE *)(v151 + v149);
              *((_QWORD *)this + 1) = v286;
              v154 |= (unint64_t)(v287 & 0x7F) << v284;
              if (v287 < 0)
              {
                v284 += 7;
                v149 = v286;
                v14 = v285++ > 8;
                if (v14)
                  goto LABEL_333;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v154) = 0;
            }
            break;
          }
LABEL_456:
          *(_DWORD *)(a1 + 108) = v154;
          goto LABEL_489;
        case 0x18u:
          *(_QWORD *)(a1 + 164) |= 0x100uLL;
          v157 = *((_QWORD *)this + 1);
          if (v157 > 0xFFFFFFFFFFFFFFFBLL || v157 + 4 > *((_QWORD *)this + 2))
            goto LABEL_165;
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v157);
          goto LABEL_391;
        case 0x19u:
          *(_QWORD *)(a1 + 164) |= 0x200000uLL;
          v158 = *((_QWORD *)this + 1);
          if (v158 > 0xFFFFFFFFFFFFFFFBLL || v158 + 4 > *((_QWORD *)this + 2))
            goto LABEL_165;
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v158);
          goto LABEL_391;
        case 0x1Au:
          *(_QWORD *)(a1 + 164) |= 0x200uLL;
          v159 = *((_QWORD *)this + 1);
          if (v159 <= 0xFFFFFFFFFFFFFFFBLL && v159 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v159);
LABEL_391:
            v21 = *((_QWORD *)this + 1) + 4;
LABEL_392:
            *((_QWORD *)this + 1) = v21;
          }
          else
          {
LABEL_165:
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_489;
        case 0x1Bu:
          *(_QWORD *)(a1 + 164) |= 0x20000uLL;
          v160 = *((_QWORD *)this + 1);
          v161 = *((_QWORD *)this + 2);
          v162 = *(_QWORD *)this;
          if (v160 <= 0xFFFFFFFFFFFFFFF5 && v160 + 10 <= v161)
          {
            v163 = 0;
            v164 = 0;
            v165 = 0;
            do
            {
              v166 = v160 + 1;
              *((_QWORD *)this + 1) = v160 + 1;
              v167 = *(_BYTE *)(v162 + v160);
              v165 |= (unint64_t)(v167 & 0x7F) << v163;
              if ((v167 & 0x80) == 0)
                goto LABEL_460;
              v163 += 7;
              v160 = v166;
              v14 = v164++ > 8;
            }
            while (!v14);
LABEL_340:
            LODWORD(v165) = 0;
            goto LABEL_460;
          }
          v288 = 0;
          v289 = 0;
          v165 = 0;
          if (v161 <= v160)
            v161 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v161 == v160)
            {
              LODWORD(v165) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v290 = v160 + 1;
              v291 = *(_BYTE *)(v162 + v160);
              *((_QWORD *)this + 1) = v290;
              v165 |= (unint64_t)(v291 & 0x7F) << v288;
              if (v291 < 0)
              {
                v288 += 7;
                v160 = v290;
                v14 = v289++ > 8;
                if (v14)
                  goto LABEL_340;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v165) = 0;
            }
            break;
          }
LABEL_460:
          *(_DWORD *)(a1 + 96) = v165;
          goto LABEL_489;
        case 0x1Cu:
          *(_QWORD *)(a1 + 164) |= 0x40000uLL;
          v168 = *((_QWORD *)this + 1);
          v169 = *((_QWORD *)this + 2);
          v170 = *(_QWORD *)this;
          if (v168 <= 0xFFFFFFFFFFFFFFF5 && v168 + 10 <= v169)
          {
            v171 = 0;
            v172 = 0;
            v173 = 0;
            do
            {
              v174 = v168 + 1;
              *((_QWORD *)this + 1) = v168 + 1;
              v175 = *(_BYTE *)(v170 + v168);
              v173 |= (unint64_t)(v175 & 0x7F) << v171;
              if ((v175 & 0x80) == 0)
                goto LABEL_464;
              v171 += 7;
              v168 = v174;
              v14 = v172++ > 8;
            }
            while (!v14);
LABEL_347:
            LODWORD(v173) = 0;
            goto LABEL_464;
          }
          v292 = 0;
          v293 = 0;
          v173 = 0;
          if (v169 <= v168)
            v169 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v169 == v168)
            {
              LODWORD(v173) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v294 = v168 + 1;
              v295 = *(_BYTE *)(v170 + v168);
              *((_QWORD *)this + 1) = v294;
              v173 |= (unint64_t)(v295 & 0x7F) << v292;
              if (v295 < 0)
              {
                v292 += 7;
                v168 = v294;
                v14 = v293++ > 8;
                if (v14)
                  goto LABEL_347;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v173) = 0;
            }
            break;
          }
LABEL_464:
          *(_DWORD *)(a1 + 100) = v173;
          goto LABEL_489;
        case 0x1Du:
          *(_QWORD *)(a1 + 164) |= 0x10000uLL;
          v176 = *((_QWORD *)this + 1);
          v177 = *((_QWORD *)this + 2);
          v178 = *(_QWORD *)this;
          if (v176 <= 0xFFFFFFFFFFFFFFF5 && v176 + 10 <= v177)
          {
            v179 = 0;
            v180 = 0;
            v181 = 0;
            do
            {
              v182 = v176 + 1;
              *((_QWORD *)this + 1) = v176 + 1;
              v183 = *(_BYTE *)(v178 + v176);
              v181 |= (unint64_t)(v183 & 0x7F) << v179;
              if ((v183 & 0x80) == 0)
                goto LABEL_468;
              v179 += 7;
              v176 = v182;
              v14 = v180++ > 8;
            }
            while (!v14);
LABEL_354:
            LODWORD(v181) = 0;
            goto LABEL_468;
          }
          v296 = 0;
          v297 = 0;
          v181 = 0;
          if (v177 <= v176)
            v177 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v177 == v176)
            {
              LODWORD(v181) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v298 = v176 + 1;
              v299 = *(_BYTE *)(v178 + v176);
              *((_QWORD *)this + 1) = v298;
              v181 |= (unint64_t)(v299 & 0x7F) << v296;
              if (v299 < 0)
              {
                v296 += 7;
                v176 = v298;
                v14 = v297++ > 8;
                if (v14)
                  goto LABEL_354;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v181) = 0;
            }
            break;
          }
LABEL_468:
          *(_DWORD *)(a1 + 92) = v181;
          goto LABEL_489;
        case 0x1Eu:
          *(_QWORD *)(a1 + 164) |= 8uLL;
          v184 = *((_QWORD *)this + 1);
          v185 = *((_QWORD *)this + 2);
          v186 = *(_QWORD *)this;
          if (v184 <= 0xFFFFFFFFFFFFFFF5 && v184 + 10 <= v185)
          {
            v187 = 0;
            v188 = 0;
            v189 = 0;
            do
            {
              v190 = v184 + 1;
              *((_QWORD *)this + 1) = v184 + 1;
              v191 = *(_BYTE *)(v186 + v184);
              v189 |= (unint64_t)(v191 & 0x7F) << v187;
              if ((v191 & 0x80) == 0)
                goto LABEL_472;
              v187 += 7;
              v184 = v190;
              v14 = v188++ > 8;
            }
            while (!v14);
LABEL_361:
            v189 = 0;
            goto LABEL_472;
          }
          v300 = 0;
          v301 = 0;
          v189 = 0;
          if (v185 <= v184)
            v185 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v185 == v184)
            {
              v189 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v302 = v184 + 1;
              v303 = *(_BYTE *)(v186 + v184);
              *((_QWORD *)this + 1) = v302;
              v189 |= (unint64_t)(v303 & 0x7F) << v300;
              if (v303 < 0)
              {
                v300 += 7;
                v184 = v302;
                v14 = v301++ > 8;
                if (v14)
                  goto LABEL_361;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v189 = 0;
            }
            break;
          }
LABEL_472:
          *(_QWORD *)(a1 + 32) = v189;
          goto LABEL_489;
        case 0x1Fu:
          *(_QWORD *)(a1 + 164) |= 4uLL;
          v192 = *((_QWORD *)this + 1);
          v193 = *((_QWORD *)this + 2);
          v194 = *(_QWORD *)this;
          if (v192 <= 0xFFFFFFFFFFFFFFF5 && v192 + 10 <= v193)
          {
            v195 = 0;
            v196 = 0;
            v197 = 0;
            do
            {
              v198 = v192 + 1;
              *((_QWORD *)this + 1) = v192 + 1;
              v199 = *(_BYTE *)(v194 + v192);
              v197 |= (unint64_t)(v199 & 0x7F) << v195;
              if ((v199 & 0x80) == 0)
                goto LABEL_476;
              v195 += 7;
              v192 = v198;
              v14 = v196++ > 8;
            }
            while (!v14);
LABEL_368:
            v197 = 0;
            goto LABEL_476;
          }
          v304 = 0;
          v305 = 0;
          v197 = 0;
          if (v193 <= v192)
            v193 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v193 == v192)
            {
              v197 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v306 = v192 + 1;
              v307 = *(_BYTE *)(v194 + v192);
              *((_QWORD *)this + 1) = v306;
              v197 |= (unint64_t)(v307 & 0x7F) << v304;
              if (v307 < 0)
              {
                v304 += 7;
                v192 = v306;
                v14 = v305++ > 8;
                if (v14)
                  goto LABEL_368;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v197 = 0;
            }
            break;
          }
LABEL_476:
          *(_QWORD *)(a1 + 24) = v197;
          goto LABEL_489;
        case 0x20u:
          *(_QWORD *)(a1 + 164) |= 1uLL;
          v200 = *((_QWORD *)this + 1);
          v201 = *((_QWORD *)this + 2);
          v202 = *(_QWORD *)this;
          if (v200 <= 0xFFFFFFFFFFFFFFF5 && v200 + 10 <= v201)
          {
            v203 = 0;
            v204 = 0;
            v205 = 0;
            do
            {
              v206 = v200 + 1;
              *((_QWORD *)this + 1) = v200 + 1;
              v207 = *(_BYTE *)(v202 + v200);
              v205 |= (unint64_t)(v207 & 0x7F) << v203;
              if ((v207 & 0x80) == 0)
                goto LABEL_480;
              v203 += 7;
              v200 = v206;
              v14 = v204++ > 8;
            }
            while (!v14);
LABEL_375:
            v205 = 0;
            goto LABEL_480;
          }
          v308 = 0;
          v309 = 0;
          v205 = 0;
          if (v201 <= v200)
            v201 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v201 == v200)
            {
              v205 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v310 = v200 + 1;
              v311 = *(_BYTE *)(v202 + v200);
              *((_QWORD *)this + 1) = v310;
              v205 |= (unint64_t)(v311 & 0x7F) << v308;
              if (v311 < 0)
              {
                v308 += 7;
                v200 = v310;
                v14 = v309++ > 8;
                if (v14)
                  goto LABEL_375;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v205 = 0;
            }
            break;
          }
LABEL_480:
          *(_QWORD *)(a1 + 8) = v205;
          goto LABEL_489;
        case 0x21u:
          *(_QWORD *)(a1 + 164) |= 2uLL;
          v208 = *((_QWORD *)this + 1);
          v209 = *((_QWORD *)this + 2);
          v210 = *(_QWORD *)this;
          if (v208 <= 0xFFFFFFFFFFFFFFF5 && v208 + 10 <= v209)
          {
            v211 = 0;
            v212 = 0;
            v213 = 0;
            do
            {
              v214 = v208 + 1;
              *((_QWORD *)this + 1) = v208 + 1;
              v215 = *(_BYTE *)(v210 + v208);
              v213 |= (unint64_t)(v215 & 0x7F) << v211;
              if ((v215 & 0x80) == 0)
                goto LABEL_484;
              v211 += 7;
              v208 = v214;
              v14 = v212++ > 8;
            }
            while (!v14);
LABEL_382:
            v213 = 0;
            goto LABEL_484;
          }
          v312 = 0;
          v313 = 0;
          v213 = 0;
          if (v209 <= v208)
            v209 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v209 == v208)
            {
              v213 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v314 = v208 + 1;
              v315 = *(_BYTE *)(v210 + v208);
              *((_QWORD *)this + 1) = v314;
              v213 |= (unint64_t)(v315 & 0x7F) << v312;
              if (v315 < 0)
              {
                v312 += 7;
                v208 = v314;
                v14 = v313++ > 8;
                if (v14)
                  goto LABEL_382;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v213 = 0;
            }
            break;
          }
LABEL_484:
          *(_QWORD *)(a1 + 16) = v213;
          goto LABEL_489;
        case 0x22u:
          *(_QWORD *)(a1 + 164) |= 0x800uLL;
          v216 = *((_QWORD *)this + 1);
          v217 = *((_QWORD *)this + 2);
          v218 = *(_QWORD *)this;
          if (v216 <= 0xFFFFFFFFFFFFFFF5 && v216 + 10 <= v217)
          {
            v219 = 0;
            v220 = 0;
            v221 = 0;
            do
            {
              v222 = v216 + 1;
              *((_QWORD *)this + 1) = v216 + 1;
              v223 = *(_BYTE *)(v218 + v216);
              v221 |= (unint64_t)(v223 & 0x7F) << v219;
              if ((v223 & 0x80) == 0)
                goto LABEL_488;
              v219 += 7;
              v216 = v222;
              v14 = v220++ > 8;
            }
            while (!v14);
LABEL_389:
            LODWORD(v221) = 0;
            goto LABEL_488;
          }
          v316 = 0;
          v317 = 0;
          v221 = 0;
          if (v217 <= v216)
            v217 = *((_QWORD *)this + 1);
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_489;
      }
      while (1)
      {
        if (v217 == v216)
        {
          LODWORD(v221) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_488;
        }
        v318 = v216 + 1;
        v319 = *(_BYTE *)(v218 + v216);
        *((_QWORD *)this + 1) = v318;
        v221 |= (unint64_t)(v319 & 0x7F) << v316;
        if ((v319 & 0x80) == 0)
          break;
        v316 += 7;
        v216 = v318;
        v14 = v317++ > 8;
        if (v14)
          goto LABEL_389;
      }
      if (*((_BYTE *)this + 24))
        LODWORD(v221) = 0;
LABEL_488:
      *(_DWORD *)(a1 + 72) = v221;
LABEL_489:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015DA820(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  v4 = *(_QWORD *)(result + 164);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 40), 1u);
    v4 = *(_QWORD *)(v3 + 164);
    if ((v4 & 0x80000) == 0)
    {
LABEL_3:
      if ((v4 & 0x20000000) == 0)
        goto LABEL_4;
      goto LABEL_38;
    }
  }
  else if ((v4 & 0x80000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 104), 2u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 144), 3u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_6;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 48), 4u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 148), 5u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_8;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(float *)(v3 + 52), 6u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x2000) == 0)
      goto LABEL_9;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 156), 7u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x2000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 8u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x1000) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 76), 9u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_12;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 0xAu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_13;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 160), 0xBu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 140), 0xCu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 68), 0xDu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x4000) == 0)
  {
LABEL_15:
    if ((v4 & 0x800000) == 0)
      goto LABEL_16;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 84), 0xEu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x800000) == 0)
  {
LABEL_16:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_17;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 120), 0xFu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_18;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 128), 0x10u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_19;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 136), 0x11u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 132), 0x12u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x400000) == 0)
  {
LABEL_20:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_21;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 116), 0x13u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 124), 0x14u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 152), 0x15u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x100000) == 0)
      goto LABEL_24;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 0x16u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x100000) == 0)
  {
LABEL_24:
    if ((v4 & 0x100) == 0)
      goto LABEL_25;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 108), 0x17u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x100) == 0)
  {
LABEL_25:
    if ((v4 & 0x200000) == 0)
      goto LABEL_26;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(float *)(v3 + 60), 0x18u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x200000) == 0)
  {
LABEL_26:
    if ((v4 & 0x200) == 0)
      goto LABEL_27;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::write(this, *(float *)(v3 + 112), 0x19u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x200) == 0)
  {
LABEL_27:
    if ((v4 & 0x20000) == 0)
      goto LABEL_28;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::write(this, *(float *)(v3 + 64), 0x1Au);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20000) == 0)
  {
LABEL_28:
    if ((v4 & 0x40000) == 0)
      goto LABEL_29;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 96), 0x1Bu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40000) == 0)
  {
LABEL_29:
    if ((v4 & 0x10000) == 0)
      goto LABEL_30;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 100), 0x1Cu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x10000) == 0)
  {
LABEL_30:
    if ((v4 & 8) == 0)
      goto LABEL_31;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 92), 0x1Du);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 8) == 0)
  {
LABEL_31:
    if ((v4 & 4) == 0)
      goto LABEL_32;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 32), 0x1Eu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 4) == 0)
  {
LABEL_32:
    if ((v4 & 1) == 0)
      goto LABEL_33;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 24), 0x1Fu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 1) == 0)
  {
LABEL_33:
    if ((v4 & 2) == 0)
      goto LABEL_34;
    goto LABEL_68;
  }
LABEL_67:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 8), 0x20u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 2) == 0)
  {
LABEL_34:
    if ((v4 & 0x800) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 72), 0x22u);
  }
LABEL_68:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 16), 0x21u);
  if ((*(_QWORD *)(v3 + 164) & 0x800) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 72), 0x22u);
  return result;
}

uint64_t sub_1015DABFC(uint64_t result)
{
  *(_QWORD *)result = &off_1021C0B10;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1015DAC14(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015DAC38(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_1021C0B10;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_1015DAC88(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "proximityState", *(_DWORD *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015DACF0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v25;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015DAF7C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  return result;
}

uint64_t sub_1015DAFD4(uint64_t result)
{
  *(_QWORD *)result = &off_1021C0B48;
  *(_DWORD *)(result + 28) = -1;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_1015DAFF4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015DB018(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  *(_QWORD *)result = &off_1021C0B48;
  *(_DWORD *)(result + 28) = -1;
  *(_DWORD *)(result + 48) = 0;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_WORD *)(result + 48) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_WORD *)(a2 + 48);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 40);
    v3 |= 0x80u;
    *(_WORD *)(result + 48) = v3;
    *(_DWORD *)(result + 40) = v5;
    v2 = *(_WORD *)(a2 + 48);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(_WORD *)(result + 48) = v3;
    *(_DWORD *)(result + 28) = v6;
    v2 = *(_WORD *)(a2 + 48);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 16) = v7;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v8 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 20) = v8;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  v9 = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 32) = v9;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v10 = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 36) = v10;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      return result;
LABEL_20:
    v12 = *(_DWORD *)(a2 + 24);
    *(_WORD *)(result + 48) = v3 | 8;
    *(_DWORD *)(result + 24) = v12;
    return result;
  }
LABEL_19:
  v11 = *(_DWORD *)(a2 + 44);
  v3 |= 0x100u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 44) = v11;
  if ((*(_WORD *)(a2 + 48) & 8) != 0)
    goto LABEL_20;
  return result;
}

uint64_t sub_1015DB138(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "currentMeanAngleY", *(float *)(a1 + 16));
    v5 = *(_WORD *)(a1 + 48);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "deltaMeanAngleY", *(float *)(a1 + 20));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "doubleTapCounter", *(_DWORD *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "doubleTapStatus", *(_DWORD *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "entropyConcha", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "entropyTragus", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(this, "tapInterval", *(float *)(a1 + 44));
    if ((*(_WORD *)(a1 + 48) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x100) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 1) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015DB288(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 48) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_86;
            case 2u:
              *(_WORD *)(a1 + 48) |= 0x80u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_91;
                  }
                  v41 = v21++;
                  v42 = *(_BYTE *)(v22 + v41);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_90:
                    v2 = v41 + 1;
                    goto LABEL_91;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_90;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_91;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_91:
              *(_DWORD *)(a1 + 40) = v25;
              goto LABEL_102;
            case 3u:
              *(_WORD *)(a1 + 48) |= 0x10u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_96;
                  }
                  v45 = v27++;
                  v46 = *(_BYTE *)(v28 + v45);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_95:
                    v2 = v45 + 1;
                    goto LABEL_96;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_95;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_96;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_96:
              *(_DWORD *)(a1 + 28) = v31;
              goto LABEL_102;
            case 4u:
              *(_WORD *)(a1 + 48) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_85;
            case 5u:
              *(_WORD *)(a1 + 48) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_85;
            case 6u:
              *(_WORD *)(a1 + 48) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_85;
            case 7u:
              *(_WORD *)(a1 + 48) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_85;
            case 8u:
              *(_WORD *)(a1 + 48) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_85:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_86:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_55:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_102;
            case 9u:
              *(_WORD *)(a1 + 48) |= 8u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_101;
                  }
                  v49 = v33++;
                  v50 = *(_BYTE *)(v34 + v49);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_100:
                    v2 = v49 + 1;
                    goto LABEL_101;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_100;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_101;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_101:
              *(_DWORD *)(a1 + 24) = v37;
LABEL_102:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_102;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015DB820(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 48);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 2u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 3u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 16), 4u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(float *)(v3 + 20), 5u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 32), 6u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(float *)(v3 + 36), 7u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 9u);
  }
LABEL_18:
  result = PB::Writer::write(this, *(float *)(v3 + 44), 8u);
  if ((*(_WORD *)(v3 + 48) & 8) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 9u);
  return result;
}

uint64_t sub_1015DB940(uint64_t result)
{
  *(_QWORD *)result = &off_1021C0B80;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void sub_1015DB958(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015DB97C(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char v14;

  *(_QWORD *)result = &off_1021C0B80;
  *(_DWORD *)(result + 60) = 0;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 2) != 0)
  {
    v4 = *(_QWORD *)(a2 + 16);
    v3 = 2;
    *(_WORD *)(result + 60) = 2;
    *(_QWORD *)(result + 16) = v4;
    v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 1) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 8);
    v3 |= 1u;
    *(_WORD *)(result + 60) = v3;
    *(_QWORD *)(result + 8) = v5;
    v2 = *(_WORD *)(a2 + 60);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *(_DWORD *)(a2 + 32);
    v3 |= 0x10u;
    *(_WORD *)(result + 60) = v3;
    *(_DWORD *)(result + 32) = v6;
    v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 36);
  v3 |= 0x20u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 36) = v7;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v8 = *(_DWORD *)(a2 + 52);
  v3 |= 0x200u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 52) = v8;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  v9 = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 28) = v9;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  v10 = *(_DWORD *)(a2 + 40);
  v3 |= 0x40u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 40) = v10;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v11 = *(_DWORD *)(a2 + 48);
  v3 |= 0x100u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 48) = v11;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  v12 = *(_DWORD *)(a2 + 44);
  v3 |= 0x80u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 44) = v12;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x400) == 0)
      return result;
LABEL_24:
    v14 = *(_BYTE *)(a2 + 56);
    *(_WORD *)(result + 60) = v3 | 0x400;
    *(_BYTE *)(result + 56) = v14;
    return result;
  }
LABEL_23:
  v13 = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 24) = v13;
  if ((*(_WORD *)(a2 + 60) & 0x400) != 0)
    goto LABEL_24;
  return result;
}

uint64_t sub_1015DBACC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "averageFilteredPressure", *(float *)(a1 + 24));
    v5 = *(_WORD *)(a1 + 60);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "deltaStepCount", *(_DWORD *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "elevationAscended", *(_DWORD *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "elevationDescended", *(_DWORD *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "isWorkoutElevationFusion", *(_BYTE *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "pressureAmplitude", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "pressureFailureState", *(_DWORD *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "pressureQuality", *(_DWORD *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 1) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 8));
    if ((*(_WORD *)(a1 + 60) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(this, "source", *(_DWORD *)(a1 + 52));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 1) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 2) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015DBC5C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  int v57;
  BOOL v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 60) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_78;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_30;
            case 2u:
              *(_WORD *)(a1 + 60) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_78;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_30:
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_127;
            case 3u:
              *(_WORD *)(a1 + 60) |= 0x10u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_132;
                  }
                  v61 = v21++;
                  v62 = *(_BYTE *)(v22 + v61);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_131:
                    v2 = v61 + 1;
                    goto LABEL_132;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_131;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_132;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_132:
              *(_DWORD *)(a1 + 32) = v25;
              goto LABEL_158;
            case 4u:
              *(_WORD *)(a1 + 60) |= 0x20u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_137;
                  }
                  v65 = v27++;
                  v66 = *(_BYTE *)(v28 + v65);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_136:
                    v2 = v65 + 1;
                    goto LABEL_137;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_136;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_137;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_137:
              *(_DWORD *)(a1 + 36) = v31;
              goto LABEL_158;
            case 5u:
              *(_WORD *)(a1 + 60) |= 0x200u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_142;
                  }
                  v69 = v33++;
                  v70 = *(_BYTE *)(v34 + v69);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_141:
                    v2 = v69 + 1;
                    goto LABEL_142;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_141;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_142;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_142:
              *(_DWORD *)(a1 + 52) = v37;
              goto LABEL_158;
            case 6u:
              *(_WORD *)(a1 + 60) |= 8u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_147;
                  }
                  v73 = v39++;
                  v74 = *(_BYTE *)(v40 + v73);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_146:
                    v2 = v73 + 1;
                    goto LABEL_147;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_146;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_147;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_147:
              *(_DWORD *)(a1 + 28) = v43;
              goto LABEL_158;
            case 7u:
              *(_WORD *)(a1 + 60) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_78;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_126;
            case 8u:
              *(_WORD *)(a1 + 60) |= 0x100u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_152;
                  }
                  v77 = v45++;
                  v78 = *(_BYTE *)(v46 + v77);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_151:
                    v2 = v77 + 1;
                    goto LABEL_152;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_151;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_152;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_152:
              *(_DWORD *)(a1 + 48) = v49;
              goto LABEL_158;
            case 9u:
              *(_WORD *)(a1 + 60) |= 0x80u;
              v51 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v52 = *(_QWORD *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v79 = 0;
                v80 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_157;
                  }
                  v81 = v51++;
                  v82 = *(_BYTE *)(v52 + v81);
                  *((_QWORD *)this + 1) = v51;
                  v55 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0)
                    break;
                  v79 += 7;
                  v14 = v80++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_156:
                    v2 = v81 + 1;
                    goto LABEL_157;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v55) = 0;
                goto LABEL_156;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v2 = v51 + 1;
                *((_QWORD *)this + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_157;
                v53 += 7;
                v51 = v2;
                v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_157:
              *(_DWORD *)(a1 + 44) = v55;
LABEL_158:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xAu:
              *(_WORD *)(a1 + 60) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_126:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_127:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_78:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_158;
            case 0xBu:
              *(_WORD *)(a1 + 60) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v58 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v57 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v58 = v57 != 0;
              }
              *(_BYTE *)(a1 + 56) = v58;
              goto LABEL_158;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_158;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015DC48C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 60);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 3u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 4u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 52), 5u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 6u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 40), 7u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 8u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 44), 9u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x400) == 0)
      return result;
    return PB::Writer::write(this, *(_BYTE *)(v3 + 56), 0xBu);
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 24), 0xAu);
  if ((*(_WORD *)(v3 + 60) & 0x400) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 56), 0xBu);
  return result;
}

uint64_t sub_1015DC5E4(uint64_t result)
{
  *(_QWORD *)result = &off_1021C0BB8;
  *(_DWORD *)(result + 92) = 0;
  return result;
}

void sub_1015DC5FC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015DC620(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  char v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  char v20;

  *(_QWORD *)result = &off_1021C0BB8;
  *(_DWORD *)(result + 92) = 0;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 8) != 0)
  {
    v4 = *(_QWORD *)(a2 + 32);
    v3 = 8;
    *(_DWORD *)(result + 92) = 8;
    *(_QWORD *)(result + 32) = v4;
    v2 = *(_DWORD *)(a2 + 92);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_DWORD *)(result + 92) = v3;
    *(_QWORD *)(result + 16) = v5;
    v2 = *(_DWORD *)(a2 + 92);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *(_QWORD *)(a2 + 24);
    v3 |= 4u;
    *(_DWORD *)(result + 92) = v3;
    *(_QWORD *)(result + 24) = v6;
    v2 = *(_DWORD *)(a2 + 92);
    if ((v2 & 0x1000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_24;
    }
  }
  else if ((v2 & 0x1000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 76);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 76) = v7;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  v8 = *(_DWORD *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 48) = v8;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x4000) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  v9 = *(_DWORD *)(a2 + 84);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 84) = v9;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  v10 = *(_DWORD *)(a2 + 60);
  v3 |= 0x100u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 60) = v10;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x8000) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  v11 = *(_DWORD *)(a2 + 56);
  v3 |= 0x80u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 56) = v11;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x8000) == 0)
  {
LABEL_13:
    if ((v2 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  v12 = *(_BYTE *)(a2 + 88);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 92) = v3;
  *(_BYTE *)(result + 88) = v12;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x200) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  v13 = *(_DWORD *)(a2 + 64);
  v3 |= 0x200u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 64) = v13;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 0x40) == 0)
      goto LABEL_16;
    goto LABEL_31;
  }
LABEL_30:
  v14 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(result + 92) = v3;
  *(_QWORD *)(result + 40) = v14;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x40) == 0)
  {
LABEL_16:
    if ((v2 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_32;
  }
LABEL_31:
  v15 = *(_DWORD *)(a2 + 52);
  v3 |= 0x40u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 52) = v15;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x2000) == 0)
  {
LABEL_17:
    if ((v2 & 1) == 0)
      goto LABEL_18;
    goto LABEL_33;
  }
LABEL_32:
  v16 = *(_DWORD *)(a2 + 80);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 80) = v16;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 1) == 0)
  {
LABEL_18:
    if ((v2 & 0x400) == 0)
      goto LABEL_19;
    goto LABEL_34;
  }
LABEL_33:
  v17 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 92) = v3;
  *(_QWORD *)(result + 8) = v17;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x400) == 0)
  {
LABEL_19:
    if ((v2 & 0x800) == 0)
      goto LABEL_20;
    goto LABEL_35;
  }
LABEL_34:
  v18 = *(_DWORD *)(a2 + 68);
  v3 |= 0x400u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 68) = v18;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x800) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0)
      return result;
LABEL_36:
    v20 = *(_BYTE *)(a2 + 89);
    *(_DWORD *)(result + 92) = v3 | 0x10000;
    *(_BYTE *)(result + 89) = v20;
    return result;
  }
LABEL_35:
  v19 = *(_DWORD *)(a2 + 72);
  v3 |= 0x800u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 72) = v19;
  if ((*(_DWORD *)(a2 + 92) & 0x10000) != 0)
    goto LABEL_36;
  return result;
}

uint64_t sub_1015DC818(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "altitudeDelta", *(float *)(a1 + 48));
    v5 = *(_DWORD *)(a1 + 92);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "altitudeDeltaStreaming", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 0x8000) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "deltaTime", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x8000) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "didEstimate", *(_BYTE *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 2) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "downhillStartTime", *(double *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 2) == 0)
  {
LABEL_7:
    if ((v5 & 4) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "elevationAscended", *(_QWORD *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 4) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "elevationDescended", *(_QWORD *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "gradeType", *(_DWORD *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "heightRef", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "isWorkoutElevationFusion", *(_BYTE *)(a1 + 89));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "predictionError", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "predictionIntercept", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 8) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "source", *(_DWORD *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 8) == 0)
  {
LABEL_15:
    if ((v5 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x2000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10) == 0)
      goto LABEL_17;
LABEL_35:
    PB::TextFormatter::format(this, "timeRef", *(double *)(a1 + 40));
    if ((*(_DWORD *)(a1 + 92) & 0x4000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_18;
  }
LABEL_34:
  PB::TextFormatter::format(this, "timeDeltaStreaming", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x10) != 0)
    goto LABEL_35;
LABEL_17:
  if ((v5 & 0x4000) != 0)
LABEL_18:
    PB::TextFormatter::format(this, "verticalSpeed", *(float *)(a1 + 84));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015DCA68(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  int v45;
  BOOL v46;
  int v47;
  BOOL v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 92) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_87;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_81;
            case 2u:
              *(_DWORD *)(a1 + 92) |= 2u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    v25 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_129;
                  }
                  v51 = v21++;
                  v52 = *(_BYTE *)(v22 + v51);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    v25 = 0;
LABEL_128:
                    v2 = v51 + 1;
                    goto LABEL_129;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v25 = 0;
                goto LABEL_128;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_129;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              v25 = 0;
LABEL_129:
              *(_QWORD *)(a1 + 16) = v25;
              goto LABEL_145;
            case 3u:
              *(_DWORD *)(a1 + 92) |= 4u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_134;
                  }
                  v55 = v27++;
                  v56 = *(_BYTE *)(v28 + v55);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_133:
                    v2 = v55 + 1;
                    goto LABEL_134;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_133;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_134;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_134:
              *(_QWORD *)(a1 + 24) = v31;
              goto LABEL_145;
            case 4u:
              *(_DWORD *)(a1 + 92) |= 0x1000u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_139;
                  }
                  v59 = v33++;
                  v60 = *(_BYTE *)(v34 + v59);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_138:
                    v2 = v59 + 1;
                    goto LABEL_139;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_138;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_139;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_139:
              *(_DWORD *)(a1 + 76) = v37;
              goto LABEL_145;
            case 5u:
              *(_DWORD *)(a1 + 92) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_87;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_123;
            case 6u:
              *(_DWORD *)(a1 + 92) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_87;
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_123;
            case 7u:
              *(_DWORD *)(a1 + 92) |= 0x100u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v61 = 0;
                v62 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_144;
                  }
                  v63 = v39++;
                  v64 = *(_BYTE *)(v40 + v63);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_143:
                    v2 = v63 + 1;
                    goto LABEL_144;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_143;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_144;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_144:
              *(_DWORD *)(a1 + 60) = v43;
LABEL_145:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 8u:
              *(_DWORD *)(a1 + 92) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_87;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_123;
            case 9u:
              *(_DWORD *)(a1 + 92) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v46 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v45 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v46 = v45 != 0;
              }
              *(_BYTE *)(a1 + 88) = v46;
              goto LABEL_145;
            case 0xAu:
              *(_DWORD *)(a1 + 92) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_87;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_123;
            case 0xBu:
              *(_DWORD *)(a1 + 92) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_87;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_81;
            case 0xCu:
              *(_DWORD *)(a1 + 92) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_87;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_123;
            case 0xDu:
              *(_DWORD *)(a1 + 92) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_87;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_123;
            case 0xEu:
              *(_DWORD *)(a1 + 92) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_87;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_81:
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_124;
            case 0xFu:
              *(_DWORD *)(a1 + 92) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_87;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_123;
            case 0x10u:
              *(_DWORD *)(a1 + 92) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_123:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_124:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_87:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_145;
            case 0x11u:
              *(_DWORD *)(a1 + 92) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v48 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v47 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v48 = v47 != 0;
              }
              *(_BYTE *)(a1 + 89) = v48;
              goto LABEL_145;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_145;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015DD28C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 92);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    v4 = *(_DWORD *)(v3 + 92);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_21;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 16), 2u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x1000) == 0)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 24), 3u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x1000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 76), 4u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 48), 5u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 84), 6u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 7u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 56), 8u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x8000) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 88), 9u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(float *)(v3 + 64), 0xAu);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 0xBu);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 52), 0xCu);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x2000) == 0)
  {
LABEL_14:
    if ((v4 & 1) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 80), 0xDu);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 1) == 0)
  {
LABEL_15:
    if ((v4 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 0xEu);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_16:
    if ((v4 & 0x800) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 68), 0xFu);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0)
      return result;
    return PB::Writer::write(this, *(_BYTE *)(v3 + 89), 0x11u);
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 72), 0x10u);
  if ((*(_DWORD *)(v3 + 92) & 0x10000) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 89), 0x11u);
  return result;
}

uint64_t sub_1015DD48C(uint64_t result)
{
  *(_QWORD *)result = &off_1021C0BF0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1015DD4A0(PB::Base *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1021C0BF0;
  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_1006B3398((uint64_t)v2, v3);
  PB::Base::~Base(this);
}

void sub_1015DD4E0(PB::Base *a1)
{
  sub_1015DD4A0(a1);
  operator delete();
}

uint64_t sub_1015DD504(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  char v3;
  int v4;
  char v5;

  *(_QWORD *)result = &off_1021C0BF0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 32) = 0;
  if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    v2 = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(result + 32) = 1;
    *(_QWORD *)(result + 16) = v2;
  }
  if (*(_QWORD *)(a2 + 8))
    operator new();
  v3 = *(_BYTE *)(a2 + 32);
  if ((v3 & 2) != 0)
  {
    v4 = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(result + 32) |= 2u;
    *(_DWORD *)(result + 24) = v4;
    v3 = *(_BYTE *)(a2 + 32);
  }
  if ((v3 & 4) != 0)
  {
    v5 = *(_BYTE *)(a2 + 28);
    *(_BYTE *)(result + 32) |= 4u;
    *(_BYTE *)(result + 28) = v5;
  }
  return result;
}

uint64_t sub_1015DD604(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
    PB::TextFormatter::format(this, "active", *(_BYTE *)(a1 + 28));
  if (*(_QWORD *)(a1 + 8))
    PB::TextFormatter::format(this, "clientId");
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "threshold", *(float *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 32);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015DD6A0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  BOOL v27;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          if (v10++ > 8)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v20 = *((_QWORD *)this + 1);
              if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)this + 2))
                goto LABEL_30;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v20);
              v21 = *((_QWORD *)this + 1) + 8;
              goto LABEL_36;
            case 2u:
              operator new();
            case 3u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v23 = *((_QWORD *)this + 1);
              if (v23 <= 0xFFFFFFFFFFFFFFFBLL && v23 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v23);
                v21 = *((_QWORD *)this + 1) + 4;
LABEL_36:
                *((_QWORD *)this + 1) = v21;
              }
              else
              {
LABEL_30:
                *((_BYTE *)this + 24) = 1;
              }
LABEL_37:
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || *((_BYTE *)this + 24))
                return v4 == 0;
              continue;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v24 = *((_QWORD *)this + 1);
              if (v24 >= *((_QWORD *)this + 2))
              {
                v27 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v25 = v24 + 1;
                v26 = *(unsigned __int8 *)(*(_QWORD *)this + v24);
                *((_QWORD *)this + 1) = v25;
                v27 = v26 != 0;
              }
              *(_BYTE *)(a1 + 28) = v27;
              goto LABEL_37;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              goto LABEL_37;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015DD944(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = result;
  if ((*(_BYTE *)(result + 32) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 16), 1u);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4)
    result = PB::Writer::write(this, v4, 2);
  v5 = *(_BYTE *)(v3 + 32);
  if ((v5 & 2) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 24), 3u);
    v5 = *(_BYTE *)(v3 + 32);
  }
  if ((v5 & 4) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 28), 4u);
  return result;
}

uint64_t sub_1015DD9C8(uint64_t result)
{
  *(_QWORD *)result = &off_1021C0C28;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_1015DD9E0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015DDA04(uint64_t result, uint64_t a2)
{
  int v2;

  *(_QWORD *)result = &off_1021C0C28;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_DWORD *)(result + 8) = v2;
  }
  return result;
}

uint64_t sub_1015DDA30(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015DDA7C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)this + 1);
          else
            v2 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_42:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015DDCB0(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(result + 8), 1u);
  return result;
}

uint64_t sub_1015DDCD0(uint64_t result)
{
  *(_QWORD *)result = &off_1021C0C60;
  *(_DWORD *)(result + 96) = 0;
  return result;
}

void sub_1015DDCE8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015DDD0C(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  char v19;
  char v20;
  int v21;

  *(_QWORD *)result = &off_1021C0C60;
  *(_DWORD *)(result + 96) = 0;
  v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x10) != 0)
  {
    v4 = *(_QWORD *)(a2 + 40);
    v3 = 16;
    *(_DWORD *)(result + 96) = 16;
    *(_QWORD *)(result + 40) = v4;
    v2 = *(_DWORD *)(a2 + 96);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_DWORD *)(result + 96) = v3;
    *(_QWORD *)(result + 16) = v5;
    v2 = *(_DWORD *)(a2 + 96);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *(_QWORD *)(a2 + 24);
    v3 |= 4u;
    *(_DWORD *)(result + 96) = v3;
    *(_QWORD *)(result + 24) = v6;
    v2 = *(_DWORD *)(a2 + 96);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_25;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 96) = v3;
  *(_QWORD *)(result + 32) = v7;
  v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  v8 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 96) = v3;
  *(_QWORD *)(result + 8) = v8;
  v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x1000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  v9 = *(_DWORD *)(a2 + 76);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 96) = v3;
  *(_DWORD *)(result + 76) = v9;
  v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  v10 = *(_DWORD *)(a2 + 80);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 96) = v3;
  *(_DWORD *)(result + 80) = v10;
  v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x4000) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  v11 = *(_DWORD *)(a2 + 84);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 96) = v3;
  *(_DWORD *)(result + 84) = v11;
  v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  v12 = *(_DWORD *)(a2 + 64);
  v3 |= 0x200u;
  *(_DWORD *)(result + 96) = v3;
  *(_DWORD *)(result + 64) = v12;
  v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  v13 = *(_DWORD *)(a2 + 68);
  v3 |= 0x400u;
  *(_DWORD *)(result + 96) = v3;
  *(_DWORD *)(result + 68) = v13;
  v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x40) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  v14 = *(_DWORD *)(a2 + 72);
  v3 |= 0x800u;
  *(_DWORD *)(result + 96) = v3;
  *(_DWORD *)(result + 72) = v14;
  v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x40) == 0)
  {
LABEL_16:
    if ((v2 & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_32:
  v15 = *(_DWORD *)(a2 + 52);
  v3 |= 0x40u;
  *(_DWORD *)(result + 96) = v3;
  *(_DWORD *)(result + 52) = v15;
  v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x80) == 0)
  {
LABEL_17:
    if ((v2 & 0x100) == 0)
      goto LABEL_18;
    goto LABEL_34;
  }
LABEL_33:
  v16 = *(_DWORD *)(a2 + 56);
  v3 |= 0x80u;
  *(_DWORD *)(result + 96) = v3;
  *(_DWORD *)(result + 56) = v16;
  v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x100) == 0)
  {
LABEL_18:
    if ((v2 & 0x20) == 0)
      goto LABEL_19;
    goto LABEL_35;
  }
LABEL_34:
  v17 = *(_DWORD *)(a2 + 60);
  v3 |= 0x100u;
  *(_DWORD *)(result + 96) = v3;
  *(_DWORD *)(result + 60) = v17;
  v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x20) == 0)
  {
LABEL_19:
    if ((v2 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_36;
  }
LABEL_35:
  v18 = *(_DWORD *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(result + 96) = v3;
  *(_DWORD *)(result + 48) = v18;
  v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x10000) == 0)
  {
LABEL_20:
    if ((v2 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_37;
  }
LABEL_36:
  v19 = *(_BYTE *)(a2 + 92);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 96) = v3;
  *(_BYTE *)(result + 92) = v19;
  v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x20000) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000) == 0)
      return result;
LABEL_38:
    v21 = *(_DWORD *)(a2 + 88);
    *(_DWORD *)(result + 96) = v3 | 0x8000;
    *(_DWORD *)(result + 88) = v21;
    return result;
  }
LABEL_37:
  v20 = *(_BYTE *)(a2 + 93);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 96) = v3;
  *(_BYTE *)(result + 93) = v20;
  if ((*(_DWORD *)(a2 + 96) & 0x8000) != 0)
    goto LABEL_38;
  return result;
}

uint64_t sub_1015DDF20(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x10000) != 0)
  {
    PB::TextFormatter::format(this, "doingBiasEstimation", *(_BYTE *)(a1 + 92));
    v5 = *(_DWORD *)(a1 + 96);
    if ((v5 & 0x20000) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "doingYawCorrection", *(_BYTE *)(a1 + 93));
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "magneticFieldCalibrationLevel", *(_DWORD *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "magneticFieldX", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "magneticFieldY", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "magneticFieldZ", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 2) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "quaternionW", *(double *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 2) == 0)
  {
LABEL_9:
    if ((v5 & 4) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "quaternionX", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 4) == 0)
  {
LABEL_10:
    if ((v5 & 8) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "quaternionY", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 8) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "quaternionZ", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x200) == 0)
  {
LABEL_12:
    if ((v5 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "rotationRateX", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x400) == 0)
  {
LABEL_13:
    if ((v5 & 0x800) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "rotationRateY", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x800) == 0)
  {
LABEL_14:
    if ((v5 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "rotationRateZ", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x10) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "userAccelerationX", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0)
      goto LABEL_18;
LABEL_37:
    PB::TextFormatter::format(this, "userAccelerationZ", *(float *)(a1 + 84));
    if ((*(_DWORD *)(a1 + 96) & 0x8000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_19;
  }
LABEL_36:
  PB::TextFormatter::format(this, "userAccelerationY", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x4000) != 0)
    goto LABEL_37;
LABEL_18:
  if ((v5 & 0x8000) != 0)
LABEL_19:
    PB::TextFormatter::format(this, "variant", *(_DWORD *)(a1 + 88));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015DE190(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  unint64_t v43;
  char v44;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 96) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_39;
            case 2u:
              *(_DWORD *)(a1 + 96) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_39;
            case 3u:
              *(_DWORD *)(a1 + 96) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_39;
            case 4u:
              *(_DWORD *)(a1 + 96) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_39;
            case 5u:
              *(_DWORD *)(a1 + 96) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_39:
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_105;
            case 6u:
              *(_DWORD *)(a1 + 96) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 7u:
              *(_DWORD *)(a1 + 96) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 8u:
              *(_DWORD *)(a1 + 96) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 9u:
              *(_DWORD *)(a1 + 96) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 0xAu:
              *(_DWORD *)(a1 + 96) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 0xBu:
              *(_DWORD *)(a1 + 96) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 0xCu:
              *(_DWORD *)(a1 + 96) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 0xDu:
              *(_DWORD *)(a1 + 96) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 0xEu:
              *(_DWORD *)(a1 + 96) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_104:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_105:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_66:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_116;
            case 0xFu:
              *(_DWORD *)(a1 + 96) |= 0x20u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_110;
                  }
                  v39 = v21++;
                  v40 = *(_BYTE *)(v22 + v39);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_109:
                    v2 = v39 + 1;
                    goto LABEL_110;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_109;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_110;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_110:
              *(_DWORD *)(a1 + 48) = v25;
              goto LABEL_116;
            case 0x10u:
              *(_DWORD *)(a1 + 96) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 92) = v28;
              goto LABEL_116;
            case 0x11u:
              *(_DWORD *)(a1 + 96) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 93) = v30;
              goto LABEL_116;
            case 0x12u:
              *(_DWORD *)(a1 + 96) |= 0x8000u;
              v31 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v32 = *(_QWORD *)this;
              if (v31 > 0xFFFFFFFFFFFFFFF5 || v31 + 10 > v2)
              {
                v41 = 0;
                v42 = 0;
                v35 = 0;
                if (v2 <= v31)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_115;
                  }
                  v43 = v31++;
                  v44 = *(_BYTE *)(v32 + v43);
                  *((_QWORD *)this + 1) = v31;
                  v35 |= (unint64_t)(v44 & 0x7F) << v41;
                  if ((v44 & 0x80) == 0)
                    break;
                  v41 += 7;
                  v14 = v42++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_114:
                    v2 = v43 + 1;
                    goto LABEL_115;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v35) = 0;
                goto LABEL_114;
              }
              v33 = 0;
              v34 = 0;
              v35 = 0;
              do
              {
                v2 = v31 + 1;
                *((_QWORD *)this + 1) = v31 + 1;
                v36 = *(_BYTE *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0)
                  goto LABEL_115;
                v33 += 7;
                v31 = v2;
                v14 = v34++ > 8;
              }
              while (!v14);
              LODWORD(v35) = 0;
LABEL_115:
              *(_DWORD *)(a1 + 88) = v35;
LABEL_116:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_116;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015DE884(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 96);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 40), 1u);
    v4 = *(_DWORD *)(v3 + 96);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 3u);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 4u);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 5u);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 76), 6u);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 80), 7u);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x4000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(float *)(v3 + 84), 8u);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(float *)(v3 + 64), 9u);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(float *)(v3 + 68), 0xAu);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 72), 0xBu);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 52), 0xCu);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x80) == 0)
  {
LABEL_14:
    if ((v4 & 0x100) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 56), 0xDu);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x100) == 0)
  {
LABEL_15:
    if ((v4 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 60), 0xEu);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x20) == 0)
  {
LABEL_16:
    if ((v4 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 0xFu);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x10000) == 0)
  {
LABEL_17:
    if ((v4 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 92), 0x10u);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x20000) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 0x12u);
  }
LABEL_36:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 93), 0x11u);
  if ((*(_DWORD *)(v3 + 96) & 0x8000) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 0x12u);
  return result;
}

void sub_1015DEAA4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015DEAC8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "name", *(_DWORD *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 16);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "value", *(float *)(a1 + 12));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015DEB30(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 16) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
        {
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 4;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 8) = v25;
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015DEDBC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 16);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 12), 2u);
  return result;
}

uint64_t sub_1015DEE14(uint64_t result)
{
  *(_QWORD *)result = off_1021C0CD0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_1015DEE2C(void **a1)
{
  void **v2;

  *a1 = off_1021C0CD0;
  v2 = a1 + 1;
  sub_100724968(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_1015DEE74(void **a1)
{
  void **v2;

  *a1 = off_1021C0CD0;
  v2 = a1 + 1;
  sub_100724968(&v2);
  PB::Base::~Base((PB::Base *)a1);
  operator delete();
}

uint64_t sub_1015DEED0(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)result = off_1021C0CD0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 48) = 0;
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)(a2 + 16))
    sub_1015DEF7C();
  v2 = *(_BYTE *)(a2 + 48);
  if ((v2 & 2) != 0)
  {
    v3 = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(result + 48) |= 2u;
    *(_QWORD *)(result + 40) = v3;
    v2 = *(_BYTE *)(a2 + 48);
  }
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(result + 48) |= 1u;
    *(_QWORD *)(result + 32) = v4;
  }
  return result;
}

void sub_1015DEF7C()
{
  operator new();
}

void sub_1015DF0F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1015DF114(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(uint64_t **)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "blendShapeCoefficients");
  }
  v8 = *(_BYTE *)(a1 + 48);
  if ((v8 & 1) != 0)
  {
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 32));
    v8 = *(_BYTE *)(a1 + 48);
  }
  if ((v8 & 2) != 0)
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015DF1C0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        break;
      if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 48) |= 2u;
        v22 = *((_QWORD *)this + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
          goto LABEL_30;
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v22);
LABEL_34:
        *((_QWORD *)this + 1) += 8;
        goto LABEL_35;
      }
      if ((_DWORD)v20 == 1)
        sub_1015DF400();
      result = PB::Reader::skip(this, v20, v11 & 7, 0);
      if (!(_DWORD)result)
        return result;
LABEL_35:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    *(_BYTE *)(a1 + 48) |= 1u;
    v21 = *((_QWORD *)this + 1);
    if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)this + 2))
    {
LABEL_30:
      *((_BYTE *)this + 24) = 1;
      goto LABEL_35;
    }
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v21);
    goto LABEL_34;
  }
  return v4 == 0;
}

void sub_1015DF400()
{
  operator new();
}

void sub_1015DF53C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1015DF558(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;
  char v7;

  v3 = result;
  v4 = *(const PB::Base ***)(result + 8);
  v5 = *(const PB::Base ***)(result + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::writeSubmessage(this, v6, 1u);
  }
  v7 = *(_BYTE *)(v3 + 48);
  if ((v7 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 40), 2u);
    v7 = *(_BYTE *)(v3 + 48);
  }
  if ((v7 & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 32), 3u);
  return result;
}

uint64_t sub_1015DF5DC(uint64_t result)
{
  *(_QWORD *)result = &off_1021C0D08;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1015DF5F4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1015DF618(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)result = &off_1021C0D08;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_1015DF668(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "isCovered", *(_BYTE *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015DF6D0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  int v21;
  BOOL v22;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 >= *((_QWORD *)this + 2))
        {
          v22 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v22 = v21 != 0;
        }
        *(_BYTE *)(a1 + 16) = v22;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1015DF8B4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 16), 2u);
  return result;
}

double sub_1015DF90C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021C0D40;
  *(_DWORD *)(a1 + 88) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_1015DF930(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1021C0D40;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_1015DF980(PB::Base *a1)
{
  sub_1015DF930(a1);
  operator delete();
}

uint64_t sub_1015DF9A4(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char v6;
  int v7;
  int v9;
  int v10;
  char v11;
  char v12;
  int v13;
  int v14;

  *(_QWORD *)a1 = &off_1021C0D40;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if ((*(_BYTE *)(a2 + 88) & 1) != 0)
  {
    v5 = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 88) = 1;
    *(_QWORD *)(a1 + 56) = v5;
  }
  if (a1 != a2)
  {
    sub_1002A3054((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
    sub_1002A3054(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  }
  v6 = *(_BYTE *)(a2 + 88);
  if ((v6 & 4) != 0)
  {
    v9 = *(_DWORD *)(a2 + 68);
    *(_BYTE *)(a1 + 88) |= 4u;
    *(_DWORD *)(a1 + 68) = v9;
    v6 = *(_BYTE *)(a2 + 88);
    if ((v6 & 8) == 0)
    {
LABEL_7:
      if ((v6 & 0x40) == 0)
        goto LABEL_8;
      goto LABEL_16;
    }
  }
  else if ((*(_BYTE *)(a2 + 88) & 8) == 0)
  {
    goto LABEL_7;
  }
  v10 = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) |= 8u;
  *(_DWORD *)(a1 + 72) = v10;
  v6 = *(_BYTE *)(a2 + 88);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  v11 = *(_BYTE *)(a2 + 84);
  *(_BYTE *)(a1 + 88) |= 0x40u;
  *(_BYTE *)(a1 + 84) = v11;
  v6 = *(_BYTE *)(a2 + 88);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 2) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  v12 = *(_BYTE *)(a2 + 85);
  *(_BYTE *)(a1 + 88) |= 0x80u;
  *(_BYTE *)(a1 + 85) = v12;
  v6 = *(_BYTE *)(a2 + 88);
  if ((v6 & 2) == 0)
  {
LABEL_10:
    if ((v6 & 0x10) == 0)
      goto LABEL_11;
LABEL_19:
    v14 = *(_DWORD *)(a2 + 76);
    *(_BYTE *)(a1 + 88) |= 0x10u;
    *(_DWORD *)(a1 + 76) = v14;
    if ((*(_BYTE *)(a2 + 88) & 0x20) == 0)
      return a1;
    goto LABEL_12;
  }
LABEL_18:
  v13 = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 88) |= 2u;
  *(_DWORD *)(a1 + 64) = v13;
  v6 = *(_BYTE *)(a2 + 88);
  if ((v6 & 0x10) != 0)
    goto LABEL_19;
LABEL_11:
  if ((v6 & 0x20) != 0)
  {
LABEL_12:
    v7 = *(_DWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 88) |= 0x20u;
    *(_DWORD *)(a1 + 80) = v7;
  }
  return a1;
}

uint64_t sub_1015DFB24(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  char v11;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 32);
  v6 = *(float **)(a1 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "accel", v7);
  }
  v8 = *(float **)(a1 + 8);
  v9 = *(float **)(a1 + 16);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "accelFiltered", v10);
  }
  v11 = *(_BYTE *)(a1 + 88);
  if ((v11 & 2) != 0)
  {
    PB::TextFormatter::format(this, "faceDownState", *(_DWORD *)(a1 + 64));
    v11 = *(_BYTE *)(a1 + 88);
    if ((v11 & 4) == 0)
    {
LABEL_7:
      if ((v11 & 8) == 0)
        goto LABEL_8;
      goto LABEL_17;
    }
  }
  else if ((*(_BYTE *)(a1 + 88) & 4) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(this, "gravityAngle", *(float *)(a1 + 68));
  v11 = *(_BYTE *)(a1 + 88);
  if ((v11 & 8) == 0)
  {
LABEL_8:
    if ((v11 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "gravityAngleVar", *(float *)(a1 + 72));
  v11 = *(_BYTE *)(a1 + 88);
  if ((v11 & 0x40) == 0)
  {
LABEL_9:
    if ((v11 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "isFaceDown", *(_BYTE *)(a1 + 84));
  v11 = *(_BYTE *)(a1 + 88);
  if ((v11 & 0x10) == 0)
  {
LABEL_10:
    if ((v11 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "pocketProbability", *(float *)(a1 + 76));
  v11 = *(_BYTE *)(a1 + 88);
  if ((v11 & 0x20) == 0)
  {
LABEL_11:
    if ((v11 & 0x80) == 0)
      goto LABEL_12;
LABEL_21:
    PB::TextFormatter::format(this, "shouldSuppress", *(_BYTE *)(a1 + 85));
    if ((*(_BYTE *)(a1 + 88) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_13;
  }
LABEL_20:
  PB::TextFormatter::format(this, "pocketProbabilityVar", *(float *)(a1 + 80));
  v11 = *(_BYTE *)(a1 + 88);
  if (v11 < 0)
    goto LABEL_21;
LABEL_12:
  if ((v11 & 1) != 0)
LABEL_13:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1015DFCBC(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  BOOL v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  _DWORD *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  _DWORD *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  BOOL v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  BOOL v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  _DWORD *v79;
  unint64_t v80;
  char *v81;
  char v82;
  unsigned int v83;
  unint64_t v84;
  char v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  int v99;
  char *v100;
  int v101;
  unint64_t v102;
  _BYTE v105[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    v12 = (void **)(a1 + 32);
    v13 = a1 + 48;
    while (1)
    {
      v14 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v4 = v18;
        v20 = v16++ > 8;
        if (v20)
          goto LABEL_20;
      }
LABEL_21:
      v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 88) |= 1u;
          v27 = *((_QWORD *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)this + 2))
            goto LABEL_152;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v27);
          v28 = *((_QWORD *)this + 1) + 8;
          goto LABEL_155;
        case 2u:
          if ((_DWORD)v26 != 2)
          {
            v78 = *(char **)(a1 + 40);
            v77 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v78 >= v77)
            {
              v86 = (char *)*v12;
              v87 = (v78 - (_BYTE *)*v12) >> 2;
              v88 = v87 + 1;
              if ((unint64_t)(v87 + 1) >> 62)
LABEL_166:
                sub_100259694();
              v89 = v77 - (_QWORD)v86;
              if (v89 >> 1 > v88)
                v88 = v89 >> 1;
              if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL)
                v90 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v90 = v88;
              if (v90)
              {
                v91 = (char *)sub_100260634(v13, v90);
                v86 = *(char **)(a1 + 32);
                v78 = *(char **)(a1 + 40);
              }
              else
              {
                v91 = 0;
              }
              v98 = &v91[4 * v87];
              *(_DWORD *)v98 = 0;
              v79 = v98 + 4;
              while (v78 != v86)
              {
                v99 = *((_DWORD *)v78 - 1);
                v78 -= 4;
                *((_DWORD *)v98 - 1) = v99;
                v98 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v98;
              *(_QWORD *)(a1 + 40) = v79;
              *(_QWORD *)(a1 + 48) = &v91[4 * v90];
              if (v86)
                operator delete(v86);
            }
            else
            {
              *(_DWORD *)v78 = 0;
              v79 = v78 + 4;
            }
            *(_QWORD *)(a1 + 40) = v79;
            goto LABEL_150;
          }
          if ((PB::Reader::placeMark(this, v105, v26, a4) & 1) != 0)
            return 0;
          v29 = *((_QWORD *)this + 1);
          v30 = *((_QWORD *)this + 2);
          while (v29 < v30 && !*((_BYTE *)this + 24))
          {
            v32 = *(char **)(a1 + 40);
            v31 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v32 >= v31)
            {
              v34 = (char *)*v12;
              v35 = (v32 - (_BYTE *)*v12) >> 2;
              v36 = v35 + 1;
              if ((unint64_t)(v35 + 1) >> 62)
                goto LABEL_166;
              v37 = v31 - (_QWORD)v34;
              if (v37 >> 1 > v36)
                v36 = v37 >> 1;
              if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
                v38 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v38 = v36;
              if (v38)
              {
                v39 = (char *)sub_100260634(v13, v38);
                v34 = *(char **)(a1 + 32);
                v32 = *(char **)(a1 + 40);
              }
              else
              {
                v39 = 0;
              }
              v40 = &v39[4 * v35];
              *(_DWORD *)v40 = 0;
              v33 = v40 + 4;
              while (v32 != v34)
              {
                v41 = *((_DWORD *)v32 - 1);
                v32 -= 4;
                *((_DWORD *)v40 - 1) = v41;
                v40 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v40;
              *(_QWORD *)(a1 + 40) = v33;
              *(_QWORD *)(a1 + 48) = &v39[4 * v38];
              if (v34)
                operator delete(v34);
            }
            else
            {
              *(_DWORD *)v32 = 0;
              v33 = v32 + 4;
            }
            *(_QWORD *)(a1 + 40) = v33;
            v42 = *((_QWORD *)this + 1);
            if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((_QWORD *)this + 2))
              goto LABEL_114;
            *(v33 - 1) = *(_DWORD *)(*(_QWORD *)this + v42);
            v30 = *((_QWORD *)this + 2);
            v29 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v29;
          }
          goto LABEL_115;
        case 3u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v105, v26, a4) & 1) != 0)
              return 0;
            v43 = *((_QWORD *)this + 1);
            v44 = *((_QWORD *)this + 2);
            while (v43 < v44 && !*((_BYTE *)this + 24))
            {
              v46 = *(char **)(a1 + 16);
              v45 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v46 >= v45)
              {
                v48 = (char *)*v10;
                v49 = (v46 - (_BYTE *)*v10) >> 2;
                v50 = v49 + 1;
                if ((unint64_t)(v49 + 1) >> 62)
                  goto LABEL_167;
                v51 = v45 - (_QWORD)v48;
                if (v51 >> 1 > v50)
                  v50 = v51 >> 1;
                if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
                  v52 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v52 = v50;
                if (v52)
                {
                  v53 = (char *)sub_100260634(v11, v52);
                  v48 = *(char **)(a1 + 8);
                  v46 = *(char **)(a1 + 16);
                }
                else
                {
                  v53 = 0;
                }
                v54 = &v53[4 * v49];
                *(_DWORD *)v54 = 0;
                v47 = v54 + 4;
                while (v46 != v48)
                {
                  v55 = *((_DWORD *)v46 - 1);
                  v46 -= 4;
                  *((_DWORD *)v54 - 1) = v55;
                  v54 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v54;
                *(_QWORD *)(a1 + 16) = v47;
                *(_QWORD *)(a1 + 24) = &v53[4 * v52];
                if (v48)
                  operator delete(v48);
              }
              else
              {
                *(_DWORD *)v46 = 0;
                v47 = v46 + 4;
              }
              *(_QWORD *)(a1 + 16) = v47;
              v56 = *((_QWORD *)this + 1);
              if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((_QWORD *)this + 2))
              {
LABEL_114:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v47 - 1) = *(_DWORD *)(*(_QWORD *)this + v56);
              v44 = *((_QWORD *)this + 2);
              v43 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v43;
            }
LABEL_115:
            PB::Reader::recallMark(this, v105);
          }
          else
          {
            v81 = *(char **)(a1 + 16);
            v80 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v81 >= v80)
            {
              v92 = (char *)*v10;
              v93 = (v81 - (_BYTE *)*v10) >> 2;
              v94 = v93 + 1;
              if ((unint64_t)(v93 + 1) >> 62)
LABEL_167:
                sub_100259694();
              v95 = v80 - (_QWORD)v92;
              if (v95 >> 1 > v94)
                v94 = v95 >> 1;
              if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL)
                v96 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v96 = v94;
              if (v96)
              {
                v97 = (char *)sub_100260634(v11, v96);
                v92 = *(char **)(a1 + 8);
                v81 = *(char **)(a1 + 16);
              }
              else
              {
                v97 = 0;
              }
              v100 = &v97[4 * v93];
              *(_DWORD *)v100 = 0;
              v79 = v100 + 4;
              while (v81 != v92)
              {
                v101 = *((_DWORD *)v81 - 1);
                v81 -= 4;
                *((_DWORD *)v100 - 1) = v101;
                v100 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v100;
              *(_QWORD *)(a1 + 16) = v79;
              *(_QWORD *)(a1 + 24) = &v97[4 * v96];
              if (v92)
                operator delete(v92);
            }
            else
            {
              *(_DWORD *)v81 = 0;
              v79 = v81 + 4;
            }
            *(_QWORD *)(a1 + 16) = v79;
LABEL_150:
            v102 = *((_QWORD *)this + 1);
            if (v102 <= 0xFFFFFFFFFFFFFFFBLL && v102 + 4 <= *((_QWORD *)this + 2))
            {
              *(v79 - 1) = *(_DWORD *)(*(_QWORD *)this + v102);
LABEL_154:
              v28 = *((_QWORD *)this + 1) + 4;
LABEL_155:
              *((_QWORD *)this + 1) = v28;
            }
            else
            {
LABEL_152:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_156:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0)
            return v6 == 0;
          break;
        case 4u:
          *(_BYTE *)(a1 + 88) |= 4u;
          v57 = *((_QWORD *)this + 1);
          if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((_QWORD *)this + 2))
            goto LABEL_152;
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v57);
          goto LABEL_154;
        case 5u:
          *(_BYTE *)(a1 + 88) |= 8u;
          v58 = *((_QWORD *)this + 1);
          if (v58 > 0xFFFFFFFFFFFFFFFBLL || v58 + 4 > *((_QWORD *)this + 2))
            goto LABEL_152;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v58);
          goto LABEL_154;
        case 6u:
          *(_BYTE *)(a1 + 88) |= 0x40u;
          v59 = *((_QWORD *)this + 1);
          if (v59 >= *((_QWORD *)this + 2))
          {
            v62 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v60 = v59 + 1;
            v61 = *(unsigned __int8 *)(*(_QWORD *)this + v59);
            *((_QWORD *)this + 1) = v60;
            v62 = v61 != 0;
          }
          *(_BYTE *)(a1 + 84) = v62;
          goto LABEL_156;
        case 7u:
          *(_BYTE *)(a1 + 88) |= 0x80u;
          v63 = *((_QWORD *)this + 1);
          if (v63 >= *((_QWORD *)this + 2))
          {
            v66 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v64 = v63 + 1;
            v65 = *(unsigned __int8 *)(*(_QWORD *)this + v63);
            *((_QWORD *)this + 1) = v64;
            v66 = v65 != 0;
          }
          *(_BYTE *)(a1 + 85) = v66;
          goto LABEL_156;
        case 8u:
          *(_BYTE *)(a1 + 88) |= 2u;
          v67 = *((_QWORD *)this + 1);
          v68 = *((_QWORD *)this + 2);
          v69 = *(_QWORD *)this;
          if (v67 <= 0xFFFFFFFFFFFFFFF5 && v67 + 10 <= v68)
          {
            v70 = 0;
            v71 = 0;
            v72 = 0;
            do
            {
              v73 = v67 + 1;
              *((_QWORD *)this + 1) = v67 + 1;
              v74 = *(_BYTE *)(v69 + v67);
              v72 |= (unint64_t)(v74 & 0x7F) << v70;
              if ((v74 & 0x80) == 0)
                goto LABEL_135;
              v70 += 7;
              v67 = v73;
              v20 = v71++ > 8;
            }
            while (!v20);
LABEL_113:
            LODWORD(v72) = 0;
            goto LABEL_135;
          }
          v82 = 0;
          v83 = 0;
          v72 = 0;
          if (v68 <= v67)
            v68 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v68 == v67)
            {
              LODWORD(v72) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v84 = v67 + 1;
              v85 = *(_BYTE *)(v69 + v67);
              *((_QWORD *)this + 1) = v84;
              v72 |= (unint64_t)(v85 & 0x7F) << v82;
              if (v85 < 0)
              {
                v82 += 7;
                v67 = v84;
                v20 = v83++ > 8;
                if (v20)
                  goto LABEL_113;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v72) = 0;
            }
            break;
          }
LABEL_135:
          *(_DWORD *)(a1 + 64) = v72;
          goto LABEL_156;
        case 9u:
          *(_BYTE *)(a1 + 88) |= 0x10u;
          v75 = *((_QWORD *)this + 1);
          if (v75 > 0xFFFFFFFFFFFFFFFBLL || v75 + 4 > *((_QWORD *)this + 2))
            goto LABEL_152;
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v75);
          goto LABEL_154;
        case 0xAu:
          *(_BYTE *)(a1 + 88) |= 0x20u;
          v76 = *((_QWORD *)this + 1);
          if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((_QWORD *)this + 2))
            goto LABEL_152;
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v76);
          goto LABEL_154;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_156;
      }
    }
    v21 = 0;
    v22 = 0;
    v17 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v23 = v4 + 1;
      v24 = *(_BYTE *)(v14 + v4);
      *((_QWORD *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0)
        goto LABEL_21;
      v21 += 7;
      v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        v17 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_1015E0498(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  char v10;

  v3 = result;
  if ((*(_BYTE *)(result + 88) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 56), 1u);
  v4 = *(float **)(v3 + 32);
  v5 = *(float **)(v3 + 40);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6, 2u);
  }
  v7 = *(float **)(v3 + 8);
  v8 = *(float **)(v3 + 16);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9, 3u);
  }
  v10 = *(_BYTE *)(v3 + 88);
  if ((v10 & 4) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 68), 4u);
    v10 = *(_BYTE *)(v3 + 88);
    if ((v10 & 8) == 0)
    {
LABEL_11:
      if ((v10 & 0x40) == 0)
        goto LABEL_12;
      goto LABEL_19;
    }
  }
  else if ((*(_BYTE *)(v3 + 88) & 8) == 0)
  {
    goto LABEL_11;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 72), 5u);
  v10 = *(_BYTE *)(v3 + 88);
  if ((v10 & 0x40) == 0)
  {
LABEL_12:
    if ((v10 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 84), 6u);
  v10 = *(_BYTE *)(v3 + 88);
  if ((v10 & 0x80) == 0)
  {
LABEL_13:
    if ((v10 & 2) == 0)
      goto LABEL_14;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 85), 7u);
  v10 = *(_BYTE *)(v3 + 88);
  if ((v10 & 2) == 0)
  {
LABEL_14:
    if ((v10 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 64), 8u);
  v10 = *(_BYTE *)(v3 + 88);
  if ((v10 & 0x10) == 0)
  {
LABEL_15:
    if ((v10 & 0x20) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 80), 0xAu);
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 76), 9u);
  if ((*(_BYTE *)(v3 + 88) & 0x20) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 80), 0xAu);
  return result;
}

uint64_t sub_1015E05E4(uint64_t result)
{
  *(_QWORD *)result = &off_1021C0D78;
  *(_DWORD *)(result + 136) = 0;
  return result;
}

void sub_1015E05FC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_1015E0620(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;
  char v10;

  *(_QWORD *)a1 = &off_1021C0D78;
  *(_DWORD *)(a1 + 136) = 0;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 2) != 0)
  {
    v4 = *(_QWORD *)(a2 + 16);
    v3 = 2;
    *(_DWORD *)(a1 + 136) = 2;
    *(_QWORD *)(a1 + 16) = v4;
    v2 = *(_DWORD *)(a2 + 136);
    if ((v2 & 0x2000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x2000000) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 116);
    v3 |= 0x2000000u;
    *(_DWORD *)(a1 + 136) = v3;
    *(_DWORD *)(a1 + 116) = v5;
    v2 = *(_DWORD *)(a2 + 136);
  }
LABEL_6:
  if ((v2 & 0x10000) != 0)
  {
    v6 = *(_DWORD *)(a2 + 80);
    v3 |= 0x10000u;
    *(_DWORD *)(a1 + 136) = v3;
    *(_DWORD *)(a1 + 80) = v6;
    v2 = *(_DWORD *)(a2 + 136);
    if ((v2 & 0x80000) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000) == 0)
        goto LABEL_9;
      goto LABEL_38;
    }
  }
  else if ((v2 & 0x80000) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 92);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 92) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x100000) == 0)
  {
LABEL_9:
    if ((v2 & 0x200000) == 0)
      goto LABEL_10;
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(v4) = *(_DWORD *)(a2 + 96);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 96) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x200000) == 0)
  {
LABEL_10:
    if ((v2 & 0x40000) == 0)
      goto LABEL_11;
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(v4) = *(_DWORD *)(a2 + 100);
  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 100) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x40000) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_12;
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(v4) = *(_DWORD *)(a2 + 88);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 88) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_13;
    goto LABEL_42;
  }
LABEL_41:
  LODWORD(v4) = *(_DWORD *)(a2 + 120);
  v3 |= 0x4000000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 120) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_14;
    goto LABEL_43;
  }
LABEL_42:
  LODWORD(v4) = *(_DWORD *)(a2 + 124);
  v3 |= 0x8000000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 124) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(v4) = *(_DWORD *)(a2 + 128);
  v3 |= 0x10000000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 128) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *(_DWORD *)(a2 + 76);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 76) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 36) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0)
      goto LABEL_18;
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(v4) = *(_DWORD *)(a2 + 56);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 56) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 4) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 24) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000) == 0)
      goto LABEL_20;
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(v4) = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 32) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x20000) == 0)
  {
LABEL_20:
    if ((v2 & 0x40) == 0)
      goto LABEL_21;
    goto LABEL_50;
  }
LABEL_49:
  v7 = *(_DWORD *)(a2 + 84);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 84) = v7;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x40) == 0)
  {
LABEL_21:
    if ((v2 & 1) == 0)
      goto LABEL_22;
    goto LABEL_51;
  }
LABEL_50:
  v8 = *(_DWORD *)(a2 + 40);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 40) = v8;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 1) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_23;
    goto LABEL_52;
  }
LABEL_51:
  v4 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_24;
    goto LABEL_53;
  }
LABEL_52:
  v9 = *(_BYTE *)(a2 + 133);
  v3 |= 0x40000000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_BYTE *)(a1 + 133) = v9;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_24:
    if ((v2 & 8) == 0)
      goto LABEL_25;
    goto LABEL_54;
  }
LABEL_53:
  v10 = *(_BYTE *)(a2 + 132);
  v3 |= 0x20000000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_BYTE *)(a1 + 132) = v10;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 8) == 0)
  {
LABEL_25:
    if ((v2 & 0x4000) == 0)
      goto LABEL_26;
    goto LABEL_55;
  }
LABEL_54:
  LODWORD(v4) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 28) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x4000) == 0)
  {
LABEL_26:
    if ((v2 & 0x80) == 0)
      goto LABEL_27;
    goto LABEL_56;
  }
LABEL_55:
  LODWORD(v4) = *(_DWORD *)(a2 + 72);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 72) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x80) == 0)
  {
LABEL_27:
    if ((v2 & 0x100) == 0)
      goto LABEL_28;
    goto LABEL_57;
  }
LABEL_56:
  LODWORD(v4) = *(_DWORD *)(a2 + 44);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 44) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x100) == 0)
  {
LABEL_28:
    if ((v2 & 0x200) == 0)
      goto LABEL_29;
    goto LABEL_58;
  }
LABEL_57:
  LODWORD(v4) = *(_DWORD *)(a2 + 48);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 48) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x200) == 0)
  {
LABEL_29:
    if ((v2 & 0x800) == 0)
      goto LABEL_30;
    goto LABEL_59;
  }
LABEL_58:
  LODWORD(v4) = *(_DWORD *)(a2 + 52);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 52) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x800) == 0)
  {
LABEL_30:
    if ((v2 & 0x1000) == 0)
      goto LABEL_31;
    goto LABEL_60;
  }
LABEL_59:
  LODWORD(v4) = *(_DWORD *)(a2 + 60);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 60) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x1000) == 0)
  {
LABEL_31:
    if ((v2 & 0x2000) == 0)
      goto LABEL_32;
    goto LABEL_61;
  }
LABEL_60:
  LODWORD(v4) = *(_DWORD *)(a2 + 64);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 64) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x2000) == 0)
  {
LABEL_32:
    if ((v2 & 0x400000) == 0)
      goto LABEL_33;
    goto LABEL_62;
  }
LABEL_61:
  LODWORD(v4) = *(_DWORD *)(a2 + 68);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 68) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x400000) == 0)
  {
LABEL_33:
    if ((v2 & 0x800000) == 0)
      goto LABEL_34;
    goto LABEL_63;
  }
LABEL_62:
  LODWORD(v4) = *(_DWORD *)(a2 + 104);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 104) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x800000) == 0)
  {
LABEL_34:
    if ((v2 & 0x1000000) == 0)
      return *(float *)&v4;
    goto LABEL_64;
  }
LABEL_63:
  LODWORD(v4) = *(_DWORD *)(a2 + 108);
  v3 |= 0x800000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 108) = v4;
  if ((*(_DWORD *)(a2 + 136) & 0x1000000) == 0)
    return *(float *)&v4;
LABEL_64:
  LODWORD(v4) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 136) = v3 | 0x1000000;
  *(_DWORD *)(a1 + 112) = v4;
  return *(float *)&v4;
}

uint64_t sub_1015E09A0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "aperture", *(float *)(a1 + 24));
    v5 = *(_DWORD *)(a1 + 136);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_36;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "confidence", *(float *)(a1 + 28));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "ev", *(float *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "exposureDuration", *(float *)(a1 + 36));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "failureCode", *(_DWORD *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "gaze_x", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "gaze_y", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "gaze_z", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "iso", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "left_eye_x", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "left_eye_y", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "left_eye_z", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x4000) == 0)
  {
LABEL_14:
    if ((v5 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "lidAngle", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x8000) == 0)
  {
LABEL_15:
    if ((v5 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "lux", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x10000) == 0)
  {
LABEL_16:
    if ((v5 & 0x20000) == 0)
      goto LABEL_17;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "orientation", *(_DWORD *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x20000) == 0)
  {
LABEL_17:
    if ((v5 & 0x40000) == 0)
      goto LABEL_18;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "poseLibrary", *(_DWORD *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x40000) == 0)
  {
LABEL_18:
    if ((v5 & 0x80000) == 0)
      goto LABEL_19;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "qw", *(float *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x80000) == 0)
  {
LABEL_19:
    if ((v5 & 0x100000) == 0)
      goto LABEL_20;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "qx", *(float *)(a1 + 92));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x100000) == 0)
  {
LABEL_20:
    if ((v5 & 0x200000) == 0)
      goto LABEL_21;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "qy", *(float *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x200000) == 0)
  {
LABEL_21:
    if ((v5 & 0x400000) == 0)
      goto LABEL_22;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "qz", *(float *)(a1 + 100));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x400000) == 0)
  {
LABEL_22:
    if ((v5 & 0x800000) == 0)
      goto LABEL_23;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "right_eye_x", *(float *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x800000) == 0)
  {
LABEL_23:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_24;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "right_eye_y", *(float *)(a1 + 108));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v5 & 1) == 0)
      goto LABEL_25;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "right_eye_z", *(float *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 1) == 0)
  {
LABEL_25:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_26;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "rollValue", *(double *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_26:
    if ((v5 & 2) == 0)
      goto LABEL_27;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "sensorCovered", *(_BYTE *)(a1 + 132));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 2) == 0)
  {
LABEL_27:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_28;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_29;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "tooDark", *(_BYTE *)(a1 + 133));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_30;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 116));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_31;
LABEL_63:
    PB::TextFormatter::format(this, "y", *(float *)(a1 + 124));
    if ((*(_DWORD *)(a1 + 136) & 0x10000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_32;
  }
LABEL_62:
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 120));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x8000000) != 0)
    goto LABEL_63;
LABEL_31:
  if ((v5 & 0x10000000) != 0)
LABEL_32:
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 128));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015E0DB0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  int v45;
  BOOL v46;
  int v47;
  BOOL v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 136) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 2u:
              *(_DWORD *)(a1 + 136) |= 0x2000000u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_176;
                  }
                  v51 = v21++;
                  v52 = *(_BYTE *)(v22 + v51);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_175:
                    v2 = v51 + 1;
                    goto LABEL_176;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_175;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_176;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_176:
              *(_DWORD *)(a1 + 116) = v25;
              goto LABEL_167;
            case 3u:
              *(_DWORD *)(a1 + 136) |= 0x10000u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_181;
                  }
                  v55 = v27++;
                  v56 = *(_BYTE *)(v28 + v55);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_180:
                    v2 = v55 + 1;
                    goto LABEL_181;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_180;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_181;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_181:
              *(_DWORD *)(a1 + 80) = v31;
              goto LABEL_167;
            case 4u:
              *(_DWORD *)(a1 + 136) |= 0x80000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 5u:
              *(_DWORD *)(a1 + 136) |= 0x100000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 6u:
              *(_DWORD *)(a1 + 136) |= 0x200000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 7u:
              *(_DWORD *)(a1 + 136) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 8u:
              *(_DWORD *)(a1 + 136) |= 0x4000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 9u:
              *(_DWORD *)(a1 + 136) |= 0x8000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0xAu:
              *(_DWORD *)(a1 + 136) |= 0x10000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0xBu:
              *(_DWORD *)(a1 + 136) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0xCu:
              *(_DWORD *)(a1 + 136) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0xDu:
              *(_DWORD *)(a1 + 136) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0xEu:
              *(_DWORD *)(a1 + 136) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0xFu:
              *(_DWORD *)(a1 + 136) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0x10u:
              *(_DWORD *)(a1 + 136) |= 0x20000u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_186;
                  }
                  v59 = v33++;
                  v60 = *(_BYTE *)(v34 + v59);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_185:
                    v2 = v59 + 1;
                    goto LABEL_186;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_185;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_186;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_186:
              *(_DWORD *)(a1 + 84) = v37;
              goto LABEL_167;
            case 0x11u:
              *(_DWORD *)(a1 + 136) |= 0x40u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v61 = 0;
                v62 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_191;
                  }
                  v63 = v39++;
                  v64 = *(_BYTE *)(v40 + v63);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_190:
                    v2 = v63 + 1;
                    goto LABEL_191;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_190;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_191;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_191:
              *(_DWORD *)(a1 + 40) = v43;
LABEL_167:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x12u:
              *(_DWORD *)(a1 + 136) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_94:
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_166;
            case 0x13u:
              *(_DWORD *)(a1 + 136) |= 0x40000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v46 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v45 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v46 = v45 != 0;
              }
              *(_BYTE *)(a1 + 133) = v46;
              goto LABEL_167;
            case 0x14u:
              *(_DWORD *)(a1 + 136) |= 0x20000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v48 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v47 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v48 = v47 != 0;
              }
              *(_BYTE *)(a1 + 132) = v48;
              goto LABEL_167;
            case 0x15u:
              *(_DWORD *)(a1 + 136) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0x16u:
              *(_DWORD *)(a1 + 136) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0x17u:
              *(_DWORD *)(a1 + 136) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0x18u:
              *(_DWORD *)(a1 + 136) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0x19u:
              *(_DWORD *)(a1 + 136) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0x1Au:
              *(_DWORD *)(a1 + 136) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0x1Bu:
              *(_DWORD *)(a1 + 136) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0x1Cu:
              *(_DWORD *)(a1 + 136) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0x1Du:
              *(_DWORD *)(a1 + 136) |= 0x400000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0x1Eu:
              *(_DWORD *)(a1 + 136) |= 0x800000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0x1Fu:
              *(_DWORD *)(a1 + 136) |= 0x1000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_165:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_166:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_131:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_167;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_167;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1015E18FC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 136);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    v4 = *(_DWORD *)(v3 + 136);
    if ((v4 & 0x2000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x10000) == 0)
        goto LABEL_4;
      goto LABEL_35;
    }
  }
  else if ((v4 & 0x2000000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 116), 2u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10000) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000) == 0)
      goto LABEL_5;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 3u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x80000) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 92), 4u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x200000) == 0)
      goto LABEL_7;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 96), 5u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x200000) == 0)
  {
LABEL_7:
    if ((v4 & 0x40000) == 0)
      goto LABEL_8;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 100), 6u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40000) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_9;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 88), 7u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 120), 8u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_11;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(float *)(v3 + 124), 9u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 128), 0xAu);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(float *)(v3 + 76), 0xBu);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(float *)(v3 + 36), 0xCu);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0)
      goto LABEL_15;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(float *)(v3 + 56), 0xDu);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 4) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(float *)(v3 + 24), 0xEu);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000) == 0)
      goto LABEL_17;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(float *)(v3 + 32), 0xFu);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20000) == 0)
  {
LABEL_17:
    if ((v4 & 0x40) == 0)
      goto LABEL_18;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 84), 0x10u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40) == 0)
  {
LABEL_18:
    if ((v4 & 1) == 0)
      goto LABEL_19;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 0x11u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 1) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_20;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 0x12u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_21;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 133), 0x13u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0)
      goto LABEL_22;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 132), 0x14u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 8) == 0)
  {
LABEL_22:
    if ((v4 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 0x15u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x4000) == 0)
  {
LABEL_23:
    if ((v4 & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::write(this, *(float *)(v3 + 72), 0x16u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x80) == 0)
  {
LABEL_24:
    if ((v4 & 0x100) == 0)
      goto LABEL_25;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::write(this, *(float *)(v3 + 44), 0x17u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x100) == 0)
  {
LABEL_25:
    if ((v4 & 0x200) == 0)
      goto LABEL_26;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::write(this, *(float *)(v3 + 48), 0x18u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x200) == 0)
  {
LABEL_26:
    if ((v4 & 0x800) == 0)
      goto LABEL_27;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(float *)(v3 + 52), 0x19u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x800) == 0)
  {
LABEL_27:
    if ((v4 & 0x1000) == 0)
      goto LABEL_28;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::write(this, *(float *)(v3 + 60), 0x1Au);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x1000) == 0)
  {
LABEL_28:
    if ((v4 & 0x2000) == 0)
      goto LABEL_29;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(float *)(v3 + 64), 0x1Bu);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x2000) == 0)
  {
LABEL_29:
    if ((v4 & 0x400000) == 0)
      goto LABEL_30;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::write(this, *(float *)(v3 + 68), 0x1Cu);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x400000) == 0)
  {
LABEL_30:
    if ((v4 & 0x800000) == 0)
      goto LABEL_31;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::write(this, *(float *)(v3 + 104), 0x1Du);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x800000) == 0)
  {
LABEL_31:
    if ((v4 & 0x1000000) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 112), 0x1Fu);
  }
LABEL_62:
  result = PB::Writer::write(this, *(float *)(v3 + 108), 0x1Eu);
  if ((*(_DWORD *)(v3 + 136) & 0x1000000) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 112), 0x1Fu);
  return result;
}

uint64_t sub_1015E1C84(uint64_t result)
{
  *(_QWORD *)result = off_1021C0DB0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1015E1C9C(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1021C0DB0;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_1015E1CE0(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1021C0DB0;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t sub_1015E1D38(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)result = off_1021C0DB0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    v3 = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(result + 32) = 2;
    *(_QWORD *)(result + 16) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 32) & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
LABEL_5:
    v4 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 32) = v2;
    *(_QWORD *)(result + 8) = v4;
  }
LABEL_6:
  if (*(_QWORD *)(a2 + 24))
    operator new();
  return result;
}

uint64_t sub_1015E1DF8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 32);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 16));
  v6 = *(_QWORD *)(a1 + 24);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015E1E80(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        operator new();
      if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 32) |= 1u;
        v22 = *((_QWORD *)this + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
          goto LABEL_30;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v22);
      }
      else
      {
        if ((_DWORD)v20 != 1)
        {
          result = PB::Reader::skip(this, v20, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_35;
        }
        *(_BYTE *)(a1 + 32) |= 2u;
        v21 = *((_QWORD *)this + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)this + 2))
        {
LABEL_30:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_35;
        }
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v21);
      }
      *((_QWORD *)this + 1) += 8;
LABEL_35:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_1015E20F4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    v4 = *(_BYTE *)(v3 + 32);
  }
  if ((v4 & 1) != 0)
    result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  v5 = *(const PB::Base **)(v3 + 24);
  if (v5)
    return PB::Writer::writeSubmessage(this, v5, 3u);
  return result;
}

uint64_t sub_1015E2160(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD handler[5];

  *(_QWORD *)a1 = 0;
  v2 = dispatch_queue_create("CMMsl.Writer", 0);
  *(_QWORD *)(a1 + 8) = v2;
  v3 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v2);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 300;
  *(_DWORD *)(a1 + 40) = -1;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 0x40000000;
  handler[2] = sub_1015E2248;
  handler[3] = &unk_1021C1930;
  handler[4] = a1;
  dispatch_source_set_event_handler(v3, handler);
  dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL);
  dispatch_resume(*(dispatch_object_t *)(a1 + 16));
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  deflateInit_((z_streamp)(a1 + 80), -1, "1.2.12", 112);
  return a1;
}

void sub_1015E2248(uint64_t a1)
{
  sub_1015E2250(*(_QWORD **)(a1 + 32));
}

void sub_1015E2250(_QWORD *a1)
{
  void **v1;
  z_stream *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  const void *v8;
  NSObject *v9;
  NSObject *v10;
  _QWORD destructor[5];

  v1 = (void **)(a1 + 7);
  if (a1[7])
  {
    v3 = (z_stream *)(a1 + 10);
    while (1)
    {
      v4 = deflate(v3, 4);
      if (v4)
        break;
      sub_1015E2B90((char *)a1);
    }
    if (v4 == 1)
    {
      v5 = a1[15];
      v6 = v5 + 28;
      v7 = (v5 + 35) & 0xFFFFFFFFFFFFFFF8;
      *(_DWORD *)(a1[7] + 12) = v5 + 12;
      if (v5 + 28 < v7)
      {
        do
          *((_BYTE *)*v1 + v6++) = 0;
        while (v7 != v6);
      }
      v8 = (const void *)a1[7];
      if (*a1)
      {
        (*(void (**)(_QWORD, const void *, size_t))(*(_QWORD *)*a1 + 24))(*a1, v8, v7);
        free(*v1);
      }
      else
      {
        v9 = a1[1];
        destructor[0] = _NSConcreteStackBlock;
        destructor[1] = 0x40000000;
        destructor[2] = sub_1015E2C04;
        destructor[3] = &unk_1021C1A38;
        destructor[4] = v8;
        v10 = dispatch_data_create(v8, v7, v9, destructor);
        dispatch_io_write((dispatch_io_t)a1[3], a1[6], v10, (dispatch_queue_t)a1[1], &stru_1021C1A78);
        dispatch_release(v10);
      }
      a1[6] += v7;
      v1[1] = 0;
      v1[2] = 0;
      *v1 = 0;
      deflateReset(v3);
      dispatch_source_set_timer((dispatch_source_t)a1[2], 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, (unint64_t)(1000000000 * a1[4]) >> 1);
    }
    else
    {
      fprintf(__stderrp, "zstream status? Msl %d\n", v4);
    }
  }
}

void sub_1015E23EC(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  v2 = *(NSObject **)(a1 + 8);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000;
  v3[2] = sub_1015E2444;
  v3[3] = &unk_1021C1950;
  v3[4] = a1;
  v3[5] = a2;
  dispatch_sync(v2, v3);
}

uint64_t sub_1015E2444(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (*(_DWORD *)(v1 + 40) != -1)
    sub_1019580B0();
  *(_QWORD *)(v1 + 32) = *(_QWORD *)(result + 40);
  return result;
}

uint64_t sub_1015E2470(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  int v5;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  v3 = *(NSObject **)(a1 + 16);
  if (v3)
    dispatch_release(v3);
  v4 = *(NSObject **)(a1 + 24);
  if (v4)
  {
    dispatch_release(v4);
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 40);
    if ((v5 & 0x80000000) == 0)
      close(v5);
  }
  free(*(void **)(a1 + 56));
  deflateEnd((z_streamp)(a1 + 80));
  return a1;
}

uint64_t sub_1015E24DC(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD v6[7];
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  v3 = *(NSObject **)(a1 + 8);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  v6[2] = sub_1015E2574;
  v6[3] = &unk_1021C1998;
  v6[5] = a1;
  v6[6] = a2;
  v7 = a3;
  v6[4] = &v8;
  dispatch_sync(v3, v6);
  v4 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v4;
}

dispatch_io_t sub_1015E2574(uint64_t a1)
{
  uint64_t v2;
  int v3;
  off_t v4;
  off_t v5;
  unint64_t v6;
  FILE *v7;
  const char *v8;
  size_t v9;
  dispatch_io_t result;
  dispatch_fd_t v11;
  NSObject *v12;
  FILE *v13;
  const char *v14;
  size_t v15;
  _QWORD cleanup_handler[4];
  dispatch_fd_t v17;
  uint64_t __buf;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = open_dprotected_np(*(const char **)(a1 + 48), 16777730, *(_DWORD *)(a1 + 56), 0, 438);
  *(_DWORD *)(v2 + 40) = v3;
  if (v3 < 0)
  {
    v7 = __stderrp;
    v8 = "Cannot open Msl file\n";
    v9 = 21;
    return (dispatch_io_t)fwrite(v8, v9, 1uLL, v7);
  }
  v4 = lseek(v3, 0, 2);
  if (v4 < 0)
  {
    v7 = __stderrp;
    v8 = "Cannot seek to end of Msl file\n";
    v9 = 31;
    return (dispatch_io_t)fwrite(v8, v9, 1uLL, v7);
  }
  v5 = v4;
  if (lseek(*(_DWORD *)(v2 + 40), 0, 0) < 0)
  {
    v7 = __stderrp;
    v8 = "Cannot seek to start of Msl file\n";
    v9 = 33;
    return (dispatch_io_t)fwrite(v8, v9, 1uLL, v7);
  }
  if (v5)
  {
    __buf = 0;
    if (pread(*(_DWORD *)(v2 + 40), &__buf, 8uLL, 0) != 8)
    {
      v13 = __stderrp;
      v14 = "Short signature in Msl file\n";
      v15 = 28;
      return (dispatch_io_t)fwrite(v14, v15, 1uLL, v13);
    }
    if (__buf != 0xE020C5BE006C536DLL)
    {
      v13 = __stderrp;
      v14 = "Bad signature in Msl file\n";
      v15 = 26;
      return (dispatch_io_t)fwrite(v14, v15, 1uLL, v13);
    }
    v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v6 = 8;
    pwrite(*(_DWORD *)(v2 + 40), &unk_101CC8B30, 8uLL, 0);
  }
  *(_QWORD *)(v2 + 48) = v6;
  v11 = *(_DWORD *)(v2 + 40);
  v12 = *(NSObject **)(v2 + 8);
  cleanup_handler[0] = _NSConcreteStackBlock;
  cleanup_handler[1] = 0x40000000;
  cleanup_handler[2] = sub_1015E277C;
  cleanup_handler[3] = &unk_1021C1970;
  v17 = v11;
  result = dispatch_io_create(1uLL, v11, v12, cleanup_handler);
  *(_QWORD *)(v2 + 24) = result;
  if (result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    return result;
  }
  v13 = __stderrp;
  v14 = "Cannot create dispatch_io for Msl file\n";
  v15 = 39;
  return (dispatch_io_t)fwrite(v14, v15, 1uLL, v13);
}

uint64_t sub_1015E277C(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

uint64_t sub_1015E2784(_QWORD *a1, uint64_t a2, char a3)
{
  *a1 = a2;
  if ((a3 & 1) == 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a2 + 24))(a2, &unk_101CC8B30, 8);
    a1[6] = 8;
  }
  return 1;
}

void sub_1015E27D4(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  v2 = *(NSObject **)(a1 + 8);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000;
  v3[2] = sub_1015E282C;
  v3[3] = &unk_1021C19B8;
  v3[4] = a1;
  v3[5] = a2;
  dispatch_sync(v2, v3);
}

void sub_1015E282C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 32);
  PB::Writer::Writer((PB::Writer *)&v5);
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), &v5);
  v3 = *(_QWORD *)(v2 + 56);
  if (!v3)
  {
    sub_1015E28F0(v2);
    v3 = *(_QWORD *)(v2 + 56);
  }
  ++*(_DWORD *)(v3 + 16);
  v4 = v5 - v6;
  sub_1015E29C0((char *)v2, (uint64_t)&v4, 4);
  sub_1015E29C0((char *)v2, v6, v5 - v6);
  if (!*(_QWORD *)(v2 + 72))
    sub_1015E2250((_QWORD *)v2);
  PB::Writer::~Writer((PB::Writer *)&v5);
}

void sub_1015E28D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PB::Writer::~Writer((PB::Writer *)va);
  _Unwind_Resume(a1);
}

void sub_1015E28F0(uint64_t a1)
{
  uint64_t v2;
  int tv_sec;
  unint64_t v4;
  NSObject *v5;
  dispatch_time_t v6;
  timeval v7;

  *(_QWORD *)(a1 + 56) = malloc_type_malloc(0x8000uLL, 0x4A3B362DuLL);
  *(_OWORD *)(a1 + 64) = xmmword_101CC8B20;
  gettimeofday(&v7, 0);
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)v2 = 0x5979AAB3D5E07959;
  *(_QWORD *)(v2 + 8) = 1936614771;
  tv_sec = v7.tv_sec;
  *(_DWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 20) = tv_sec;
  *(_DWORD *)(v2 + 24) = 1000 * v7.tv_usec;
  *(_QWORD *)(a1 + 104) = v2 + 28;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a1 + 64) - 28;
  v4 = 1000000000 * *(_QWORD *)(a1 + 32);
  v5 = *(NSObject **)(a1 + 16);
  v6 = dispatch_time(0, v4);
  dispatch_source_set_timer(v5, v6, 0xFFFFFFFFFFFFFFFFLL, v4 >> 1);
}

char *sub_1015E29C0(char *result, uint64_t a2, int a3)
{
  z_stream *v3;
  char *v4;

  *((_QWORD *)result + 10) = a2;
  v3 = (z_stream *)(result + 80);
  *((_DWORD *)result + 22) = a3;
  if (a3)
  {
    v4 = result;
    do
    {
      result = (char *)deflate(v3, 0);
      if (!(_DWORD)result && !*((_DWORD *)v4 + 28))
        result = sub_1015E2B90(v4);
    }
    while (*((_DWORD *)v4 + 22));
  }
  return result;
}

void sub_1015E2A14(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1015E2A6C;
  block[3] = &unk_1021C19D8;
  block[4] = a1;
  dispatch_sync(v1, block);
}

void sub_1015E2A6C(uint64_t a1)
{
  sub_1015E2250(*(_QWORD **)(a1 + 32));
}

void sub_1015E2A74(uint64_t a1)
{
  dispatch_semaphore_t v2;
  NSObject *v3;
  _QWORD v4[6];

  v2 = dispatch_semaphore_create(0);
  v3 = *(NSObject **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  v4[2] = sub_1015E2AE0;
  v4[3] = &unk_1021C1A18;
  v4[4] = a1;
  v4[5] = v2;
  dispatch_sync(v3, v4);
}

void sub_1015E2AE0(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD v5[6];

  v2 = *(_QWORD **)(a1 + 32);
  sub_1015E2250(v2);
  v3 = v2[3];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  v5[2] = sub_1015E2B64;
  v5[3] = &unk_1021C19F8;
  v4 = *(_QWORD *)(a1 + 40);
  v5[4] = v2;
  v5[5] = v4;
  dispatch_io_barrier(v3, v5);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
}

intptr_t sub_1015E2B64(uint64_t a1)
{
  fsync(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 40));
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

char *sub_1015E2B90(char *result)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  v3 = *((_QWORD *)result + 8);
  v2 = *((_QWORD *)result + 9);
  if (v2)
  {
    *((_DWORD *)result + 28) += v2;
    *((_QWORD *)result + 8) = v3 + v2;
    *((_QWORD *)result + 9) = 0;
  }
  else
  {
    *((_QWORD *)result + 8) = 2 * v3;
    result = (char *)malloc_type_realloc(*((void **)result + 7), 2 * v3, 0x59C50B5uLL);
    *((_QWORD *)v1 + 7) = result;
    v4 = *((_QWORD *)v1 + 15);
    *((_QWORD *)v1 + 13) = &result[v4 + 28];
    *((_DWORD *)v1 + 28) = *((_DWORD *)v1 + 16) - v4;
  }
  return result;
}

void sub_1015E2C04(uint64_t a1)
{
  free(*(void **)(a1 + 32));
}

void sub_1015E2C0C(id a1, BOOL a2, dispatch_data_s *a3, int a4)
{
  FILE *v4;
  char *v5;

  if (a4 || !a2)
  {
    v4 = __stderrp;
    v5 = strerror(a4);
    fprintf(v4, "Msl dispatch io write error %s\n", v5);
  }
}

uint64_t sub_1015E2C60(uint64_t a1)
{
  return *(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 48);
}

uint64_t sub_1015E2C70(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;
  __int128 v9;
  char v10;
  NSObject *v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = (uint64_t *)(a1 + 16);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 16), *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)v4 = v5;
  }
  if (*(char *)(a2 + 63) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 40), *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v6;
  }
  v7 = (_BYTE *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0)
  {
    sub_100115CE4(v7, *(void **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)v7 = v8;
  }
  v9 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = v9;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_BYTE *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0xBFF0000000000000;
  v10 = sub_10163B750(v4);
  *(_BYTE *)(a1 + 136) = v10;
  if ((v10 & 1) == 0)
  {
    if (qword_10230F958 != -1)
      dispatch_once(&qword_10230F958, &stru_1021C1AB8);
    v11 = qword_10230F950;
    if (os_log_type_enabled((os_log_t)qword_10230F950, OS_LOG_TYPE_ERROR))
      sub_1019580D8(a1, v4, v11);
  }
  return a1;
}

void sub_1015E2DB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 63) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1015E2E1C(uint64_t a1)
{
  sub_1015E2E90(a1);
  sub_1015E3ABC((uint64_t *)(a1 + 128), 0);
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_1015E2E90(uint64_t a1)
{
  uint64_t result;
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 128);
  result = *(_QWORD *)(a1 + 128);
  if (result)
  {
    sub_1015E2A74(result);
    return sub_1015E3ABC(v2, 0);
  }
  return result;
}

void sub_1015E2ED0(uint64_t a1)
{
  sub_1015E2E90(a1);
  operator new();
}

void sub_1015E3100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1004E5F2C((uint64_t)&a22);
  _Unwind_Resume(a1);
}

_QWORD *sub_1015E3168(_QWORD *a1, uint64_t *a2)
{
  const std::locale::facet *v4;
  const std::ios_base *v5;
  void *rdbuf;
  std::ios_base::fmtflags fmtflags;
  const std::locale::facet *v8;
  const char *v9;
  uint64_t v10;
  size_t v11;
  _BYTE v13[16];
  std::locale v14;

  std::ostream::sentry::sentry(v13, a1);
  if (v13[0])
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v4 = std::locale::use_facet(&v14, &std::time_put<char,std::ostreambuf_iterator<char>>::id);
    std::locale::~locale(&v14);
    v5 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
    rdbuf = v5->__rdbuf_;
    fmtflags = v5[1].__fmtflags_;
    if (fmtflags == -1)
    {
      std::ios_base::getloc(v5);
      v8 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 32);
      std::locale::~locale(&v14);
      v5[1].__fmtflags_ = fmtflags;
    }
    v10 = *a2;
    v9 = (const char *)a2[1];
    v11 = strlen(v9);
    if (!std::time_put<char,std::ostreambuf_iterator<char>>::put(v4, rdbuf, v5, (char)fmtflags, v10, v9, &v9[v11]))std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 1);
  }
  std::ostream::sentry::~sentry(v13);
  return a1;
}

void sub_1015E3298(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::ostream::sentry::~sentry(&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1015E3278);
}

void sub_1015E32E8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1015E32FC(uint64_t a1@<X0>, const void **a2@<X1>, const void **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, std::string *a6@<X8>)
{
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  char v21;
  uint64_t v22;
  int v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  std::string *v26;
  std::string v27;
  std::string v28;
  std::string v29;
  _QWORD v30[2];

  sub_10078A2A0(a3, 95, (uint64_t)&v27);
  v11 = *(char *)(a4 + 23);
  if (v11 >= 0)
    v12 = (const std::string::value_type *)a4;
  else
    v12 = *(const std::string::value_type **)a4;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a4 + 23);
  else
    v13 = *(_QWORD *)(a4 + 8);
  v14 = std::string::append(&v27, v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v28, 46);
  v29 = v28;
  memset(&v28, 0, sizeof(v28));
  v16 = *(char *)(a5 + 23);
  if (v16 >= 0)
    v17 = (const std::string::value_type *)a5;
  else
    v17 = *(const std::string::value_type **)a5;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(a5 + 23);
  else
    v18 = *(_QWORD *)(a5 + 8);
  v19 = std::string::append(&v29, v17, v18);
  v20 = v19->__r_.__value_.__r.__words[0];
  v30[0] = v19->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v30 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
  v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  v22 = v30[0];
  *(_QWORD *)(a1 + 104) = v20;
  *(_QWORD *)(a1 + 112) = v22;
  *(_QWORD *)(a1 + 119) = *(_QWORD *)((char *)v30 + 7);
  *(_BYTE *)(a1 + 127) = v21;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  sub_10078A2A0(a2, 47, (uint64_t)&v29);
  v23 = *(char *)(a1 + 127);
  if (v23 >= 0)
    v24 = (const std::string::value_type *)(a1 + 104);
  else
    v24 = *(const std::string::value_type **)(a1 + 104);
  if (v23 >= 0)
    v25 = *(unsigned __int8 *)(a1 + 127);
  else
    v25 = *(_QWORD *)(a1 + 112);
  v26 = std::string::append(&v29, v24, v25);
  *a6 = *v26;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
}

void sub_1015E34C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1015E352C(uint64_t a1)
{
  std::locale v1;
  uint64_t v2;

  sub_10163B8FC((uint64_t *)(a1 + 16), (uint64_t *)(a1 + 64), &v2);
  sub_1015E3B24(&v1, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0);
}

void sub_1015E3890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  sub_100261F44((uint64_t)&a17);
  std::locale::~locale(&a12);
  a12.__locale_ = (std::locale::__imp *)&a20;
  sub_100259608((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1015E38D8(uint64_t a1, uint64_t a2)
{
  double v4;

  v4 = sub_1001FCBB4();
  sub_1015E3904(a1, a2, v4);
}

void sub_1015E3904(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  unint64_t v7;
  double v8;
  NSObject *v9;
  NSObject *v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;

  if (!*(_BYTE *)(a1 + 136))
  {
    if (qword_10230F958 != -1)
      dispatch_once(&qword_10230F958, &stru_1021C1AB8);
    v9 = qword_10230F950;
    if (os_log_type_enabled((os_log_t)qword_10230F950, OS_LOG_TYPE_FAULT))
      sub_10195815C(v9);
    v10 = qword_10230F950;
    if (os_log_type_enabled((os_log_t)qword_10230F950, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      v12 = "assert";
      v13 = 2080;
      v14 = "fValid";
      v15 = 2080;
      v16 = "On call to writeItem client should check if the logger was opened";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Event: %s\n Condition: %s\n Message: %s", buf, 0x20u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Framework/MotionSensorLogging/MSLWriterManager.cpp", 68, "writeItem");
  }
  v6 = *(_QWORD *)(a1 + 128);
  if (!v6
    || *(double *)(a1 + 144) < 0.0
    || sub_1015E2C60(v6) > *(_QWORD *)a1
    || (v8 = *(double *)(a1 + 144), v8 > a3)
    || (LODWORD(v7) = *(_DWORD *)(a1 + 8), a3 - v8 > (double)v7))
  {
    sub_1015E2ED0(a1);
  }
  sub_1015E27D4(*(_QWORD *)(a1 + 128), a2);
}

void sub_1015E3AAC(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 128);
  if (v1)
    sub_1015E2A74(v1);
}

uint64_t sub_1015E3ABC(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1015E24D8(result);
    operator delete();
  }
  return result;
}

void sub_1015E3AF8(id a1)
{
  qword_10230F950 = (uint64_t)os_log_create("com.apple.MotionSensorLogging", "MSL");
}

void sub_1015E3B24(std::locale *a1, const char *a2, int a3)
{
  std::locale *v5;

  v5 = sub_1015E3BB4(a1);
  LODWORD(v5[3].__locale_) = a3;
  *(_OWORD *)((char *)&v5[3].__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v5[5].__locale_ + 4) = 0u;
  HIDWORD(v5[7].__locale_) = 0;
  strlen(a2);
  sub_1015E3C10();
}

void sub_1015E3B98(_Unwind_Exception *a1)
{
  std::locale *v1;

  sub_100261F44((uint64_t)&v1[5]);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::locale *sub_1015E3BB4(std::locale *a1)
{
  std::locale *v2;

  v2 = std::locale::locale(a1);
  a1[1].__locale_ = (std::locale::__imp *)std::locale::use_facet(v2, &std::ctype<char>::id);
  a1[2].__locale_ = (std::locale::__imp *)std::locale::use_facet(a1, &std::collate<char>::id);
  return a1;
}

void sub_1015E3BFC(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_1015E3C10()
{
  operator new();
}

void sub_1015E3D64(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1015E3D80(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  sub_1015E43EC(&v2, a2);
}

char *sub_1015E3DF0(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;

  v6 = a2;
  do
  {
    v7 = v6;
    v6 = sub_1015E469C(a1, (char *)v6, a3);
  }
  while (v6 != v7);
  if (v7 == a2)
    operator new();
  if (v7 != (unsigned __int8 *)a3)
  {
    if (*v7 == 124)
    {
      v8 = v7 + 1;
      v9 = v7 + 1;
      do
      {
        v10 = v9;
        v9 = sub_1015E469C(a1, (char *)v9, a3);
      }
      while (v9 != v10);
      if (v10 == v8)
        operator new();
      sub_1015E45BC();
    }
    return (char *)v7;
  }
  return a3;
}

unsigned __int8 *sub_1015E3F38(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v6;

  v3 = a2;
  if (a2 == a3)
    return a2;
  v4 = a3;
  if (*a2 == 94)
    operator new();
  if (a2 != a3)
  {
    do
    {
      v6 = v3;
      v3 = sub_1015E8048(a1, v3, v4);
    }
    while (v3 != v6);
    if (v6 != v4)
    {
      if (v6 + 1 == v4 && *v6 == 36)
        operator new();
      sub_100F947B4();
    }
  }
  return v4;
}

unsigned __int8 *sub_1015E4084(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  unsigned __int8 *v6;

  v3 = a3;
  v6 = sub_1015E8588(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2)
LABEL_8:
    sub_100F947B4();
  if (v6 != (unsigned __int8 *)v3)
  {
    if (*v6 == 124)
    {
      if (sub_1015E8588(a1, (char *)v6 + 1, v3) != v6 + 1)
        sub_1015E45BC();
      goto LABEL_8;
    }
    return v6;
  }
  return (unsigned __int8 *)v3;
}

unsigned __int8 *sub_1015E4124(uint64_t a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;

  v6 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v6)
    v7 = v6;
  else
    v7 = a3;
  if (v7 == __s)
    operator new();
  sub_1015E3F38(a1, __s, v7);
  if (v7 == a3)
    v8 = v7;
  else
    v8 = v7 + 1;
  if (v8 != a3)
  {
    v9 = (unsigned __int8 *)memchr(v8, 10, a3 - v8);
    if (v9)
      v10 = v9;
    else
      v10 = a3;
    if (v10 != v8)
    {
      sub_1015E3F38(a1, v8, v10);
      sub_1015E45BC();
    }
    operator new();
  }
  return a3;
}

char *sub_1015E427C(uint64_t a1, char *__s, char *a3)
{
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;

  v6 = (char *)memchr(__s, 10, a3 - __s);
  if (v6)
    v7 = v6;
  else
    v7 = a3;
  if (v7 == __s)
    operator new();
  sub_1015E4084(a1, __s, v7);
  if (v7 == a3)
    v8 = v7;
  else
    v8 = v7 + 1;
  if (v8 != a3)
  {
    v9 = (char *)memchr(v8, 10, a3 - v8);
    if (v9)
      v10 = v9;
    else
      v10 = a3;
    if (v10 != v8)
    {
      sub_1015E4084(a1, v8, v10);
      sub_1015E45BC();
    }
    operator new();
  }
  return a3;
}

void sub_1015E43D8()
{
  operator delete();
}

void sub_1015E43EC(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1015E4444(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_1015E4468(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

_QWORD *sub_1015E448C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_102196190;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1015E44D0(_QWORD *a1)
{
  uint64_t v1;

  *a1 = off_102196190;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  operator delete();
}

_QWORD *sub_1015E4524(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_102196190;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1015E4568(_QWORD *a1)
{
  uint64_t v1;

  *a1 = off_102196190;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  operator delete();
}

void sub_1015E45BC()
{
  operator new();
}

unsigned __int8 *sub_1015E469C(uint64_t a1, char *a2, char *a3)
{
  unsigned __int8 *result;
  unsigned __int8 *v7;

  result = (unsigned __int8 *)sub_1015E4730(a1, a2, a3);
  if (result == (unsigned __int8 *)a2)
  {
    v7 = sub_1015E49D8(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
    result = (unsigned __int8 *)a2;
    if (v7 != (unsigned __int8 *)a2)
      return sub_1015E4BE0(a1, v7, (unsigned __int8 *)a3);
  }
  return result;
}

char *sub_1015E4730(uint64_t a1, char *a2, char *a3)
{
  int v6;
  char *v7;
  BOOL v8;
  char *v9;
  int v11;
  int v13;
  std::locale v14[3];
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  if (a2 != a3)
  {
    v6 = *a2;
    if (v6 > 91)
    {
      if (v6 == 92)
      {
        if (a2 + 1 != a3)
        {
          v13 = a2[1];
          if (v13 == 66 || v13 == 98)
            sub_1015E4EE0();
        }
      }
      else if (v6 == 94)
      {
        operator new();
      }
    }
    else
    {
      if (v6 == 36)
        operator new();
      v8 = v6 == 40;
      v7 = a2 + 1;
      v8 = !v8 || v7 == a3;
      if (!v8)
      {
        v8 = *v7 == 63;
        v9 = a2 + 2;
        if (v8 && v9 != a3)
        {
          v11 = *v9;
          if (v11 == 33)
          {
            sub_1015E3BB4(v14);
            v15 = 0u;
            v17 = 0;
            v16 = 0u;
            LODWORD(v15) = *(_DWORD *)(a1 + 24);
            sub_1015E3C10(v14, a2 + 3, a3);
            sub_1015E4F64();
          }
          if (v11 == 61)
          {
            sub_1015E3BB4(v14);
            v15 = 0u;
            v17 = 0;
            v16 = 0u;
            LODWORD(v15) = *(_DWORD *)(a1 + 24);
            sub_1015E3C10(v14, a2 + 3, a3);
            sub_1015E4F64();
          }
        }
      }
    }
  }
  return a2;
}

void sub_1015E49AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100261F44((uint64_t)&a14);
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1015E49D8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  int v6;
  _DWORD *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = (char)*a2;
  if (v6 > 62)
  {
    if (v6 > 91)
    {
      if (v6 == 92)
        return sub_1015E5980(a1, a2, a3);
      if (v6 != 123)
        return sub_100F91634(a1, a2, a3);
    }
    else
    {
      if (v6 == 91)
        return sub_1015E5A20(a1, a2, a3);
      if (v6 != 63)
        return sub_100F91634(a1, a2, a3);
    }
LABEL_28:
    sub_100F915E8();
  }
  if (v6 == 40)
  {
    if (a2 + 1 == a3)
      goto LABEL_29;
    if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
    {
      v8 = (_DWORD *)(a1 + 36);
      ++*(_DWORD *)(a1 + 36);
      v9 = (unsigned __int8 *)sub_1015E3DF0(a1, a2 + 3, a3);
      if (v9 == a3)
        goto LABEL_29;
      v10 = v9;
      if (*v9 != 41)
        goto LABEL_29;
    }
    else
    {
      sub_1015E5B30(a1);
      v8 = (_DWORD *)(a1 + 36);
      ++*(_DWORD *)(a1 + 36);
      v11 = (unsigned __int8 *)sub_1015E3DF0(a1, v3 + 1, a3);
      if (v11 == a3 || (v10 = v11, *v11 != 41))
LABEL_29:
        sub_100F90808();
      sub_1015E5BA4(a1);
    }
    --*v8;
    return v10 + 1;
  }
  if (v6 == 46)
    operator new();
  if ((v6 - 42) < 2)
    goto LABEL_28;
  return sub_100F91634(a1, a2, a3);
}

unsigned __int8 *sub_1015E4BE0(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  unsigned __int8 *v11;
  int v12;
  int v13;

  if (a2 == a3)
    return a2;
  v5 = (char)*a2;
  if (v5 <= 62)
  {
    if (v5 == 42 || v5 == 43)
LABEL_18:
      sub_1015E7D10();
    return a2;
  }
  if (v5 == 63)
    goto LABEL_18;
  if (v5 == 123)
  {
    v6 = a2 + 1;
    v7 = sub_100F943C8(a1, a2 + 1, a3, &v13);
    if (v7 == v6)
      goto LABEL_23;
    if (v7 != a3)
    {
      v8 = (char)*v7;
      if (v8 != 44)
      {
        if (v8 == 125)
          goto LABEL_18;
LABEL_23:
        sub_100F94464();
      }
      v9 = v7 + 1;
      if (v7 + 1 == a3)
        goto LABEL_23;
      if (*v9 == 125)
        goto LABEL_18;
      v12 = -1;
      v11 = sub_100F943C8(a1, v9, a3, &v12);
      if (v11 != v9 && v11 != a3 && *v11 == 125)
      {
        if (v12 >= v13)
          goto LABEL_18;
        goto LABEL_23;
      }
    }
    sub_100F944B0();
  }
  return a2;
}

void sub_1015E4EE0()
{
  operator new();
}

void sub_1015E4F64()
{
  operator new();
}

void sub_1015E4FE4()
{
  operator delete();
}

_QWORD *sub_1015E5008(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_102196190;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1015E504C(_QWORD *a1)
{
  uint64_t v1;

  *a1 = off_102196190;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  operator delete();
}

_QWORD *sub_1015E50A0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_102196190;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1015E50E4(_QWORD *a1)
{
  uint64_t v1;

  *a1 = off_102196190;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  operator delete();
}

std::locale *sub_1015E5138(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)off_102196250;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_102196190;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_1015E5190(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)off_102196250;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_102196190;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete();
}

std::locale *sub_1015E51F8(std::locale *a1)
{
  std::locale *v2;
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)off_102196298;
  v2 = a1 + 2;
  sub_100261F44((uint64_t)&a1[7]);
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)off_102196190;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_1015E5260(std::locale *a1)
{
  std::locale *v2;
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)off_102196298;
  v2 = a1 + 2;
  sub_100261F44((uint64_t)&a1[7]);
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)off_102196190;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete();
}

char *sub_1015E52D8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, char a5)
{
  _OWORD *v8;
  char *result;

  *(_QWORD *)(a1 + 24) = a4;
  v8 = (_OWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 32) = a4;
  *(_BYTE *)(a1 + 40) = 0;
  result = sub_100F90C2C((char **)a1, a2, (__int128 *)(a1 + 24));
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a3;
  *(_BYTE *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = *v8;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a1 + 40);
  if ((a5 & 1) == 0)
    *(_QWORD *)(a1 + 104) = a3;
  *(_BYTE *)(a1 + 96) = 1;
  return result;
}

uint64_t sub_1015E5348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  _OWORD *v11;
  _OWORD *v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t *v34;
  _BYTE v37[56];
  void *__p[2];
  _QWORD v39[4];
  __int128 v40;
  char v41;
  _OWORD *v42;
  _OWORD *v43;
  unint64_t v44;

  v42 = 0;
  v43 = 0;
  v44 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    *(_QWORD *)&v40 = a3;
    *((_QWORD *)&v40 + 1) = a3;
    v41 = 0;
    *(_DWORD *)v37 = 0;
    memset(&v37[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v39, 0, 21);
    v43 = (_OWORD *)sub_1015E5748((uint64_t *)&v42, (uint64_t)v37);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)&v37[32])
    {
      *(_QWORD *)&v37[40] = *(_QWORD *)&v37[32];
      operator delete(*(void **)&v37[32]);
    }
    v34 = a4;
    v11 = v43;
    *((_DWORD *)v43 - 24) = 0;
    *((_QWORD *)v11 - 11) = a2;
    *((_QWORD *)v11 - 10) = a2;
    *((_QWORD *)v11 - 9) = a3;
    sub_100F90DA0((uint64_t)(v11 - 4), *(unsigned int *)(a1 + 28), &v40);
    sub_100F90DDC((uint64_t)v43 - 40, *(unsigned int *)(a1 + 32));
    v12 = v43;
    *((_QWORD *)v43 - 2) = v6;
    *((_DWORD *)v12 - 2) = a5;
    *((_BYTE *)v12 - 4) = a6;
    v13 = 1;
    while (2)
    {
      if ((v13 & 0xFFF) == 0 && (int)(v13 >> 12) >= (int)a3 - (int)a2)
        sub_100F90E0C();
      v15 = v12 - 1;
      v14 = *((_QWORD *)v12 - 2);
      v16 = v12 - 6;
      if (v14)
        (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v14 + 16))(v14, v12 - 6);
      switch(*(_DWORD *)v16)
      {
        case 0xFFFFFC18:
          v17 = *((_QWORD *)v12 - 10);
          if ((a5 & 0x20) != 0 && v17 == a2 || (a5 & 0x1000) != 0 && v17 != a3)
            goto LABEL_16;
          v25 = *v34;
          *(_QWORD *)v25 = a2;
          *(_QWORD *)(v25 + 8) = v17;
          *(_BYTE *)(v25 + 16) = 1;
          v26 = *((_QWORD *)v12 - 8);
          v27 = *((_QWORD *)v12 - 7) - v26;
          if (v27)
          {
            v28 = 0xAAAAAAAAAAAAAAABLL * (v27 >> 3);
            v29 = (_BYTE *)(v26 + 16);
            v30 = 1;
            do
            {
              v31 = v25 + 24 * v30;
              *(_OWORD *)v31 = *((_OWORD *)v29 - 1);
              v32 = *v29;
              v29 += 24;
              *(_BYTE *)(v31 + 16) = v32;
            }
            while (v28 > v30++);
          }
          v6 = 1;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          v18 = v43 - 6;
          sub_100F9107C((uint64_t)&v44, (_QWORD *)v43 - 12);
          v43 = v18;
          goto LABEL_23;
        case 0xFFFFFC20:
          v19 = *(v12 - 5);
          *(_OWORD *)v37 = *v16;
          *(_OWORD *)&v37[16] = v19;
          memset(&v37[32], 0, 24);
          sub_1015E5894(&v37[32], *((__int128 **)v12 - 8), *((__int128 **)v12 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v12 - 7) - *((_QWORD *)v12 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v39[0] = 0;
          sub_1015E5910((char *)__p, *((__int128 **)v12 - 5), *((__int128 **)v12 - 4), (uint64_t)(*((_QWORD *)v12 - 4) - *((_QWORD *)v12 - 5)) >> 4);
          v20 = *v15;
          *(_QWORD *)((char *)&v39[1] + 5) = *(_QWORD *)((char *)v12 - 11);
          v39[1] = v20;
          (*(void (**)(_QWORD, uint64_t, _OWORD *))(*(_QWORD *)*v15 + 24))(*v15, 1, v12 - 6);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v39[1] + 24))(v39[1], 0, v37);
          v21 = v43;
          if ((unint64_t)v43 >= v44)
          {
            v43 = (_OWORD *)sub_1015E5748((uint64_t *)&v42, (uint64_t)v37);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v22 = *(_OWORD *)&v37[16];
            *v43 = *(_OWORD *)v37;
            v21[1] = v22;
            *((_QWORD *)v21 + 4) = 0;
            *((_QWORD *)v21 + 5) = 0;
            *((_QWORD *)v21 + 6) = 0;
            *((_QWORD *)v21 + 7) = 0;
            v21[2] = *(_OWORD *)&v37[32];
            *((_QWORD *)v21 + 6) = *(_QWORD *)&v37[48];
            memset(&v37[32], 0, 24);
            *((_QWORD *)v21 + 8) = 0;
            *((_QWORD *)v21 + 9) = 0;
            *(_OWORD *)((char *)v21 + 56) = *(_OWORD *)__p;
            *((_QWORD *)v21 + 9) = v39[0];
            __p[0] = 0;
            __p[1] = 0;
            v39[0] = 0;
            v23 = v39[1];
            *(_QWORD *)((char *)v21 + 85) = *(_QWORD *)((char *)&v39[1] + 5);
            *((_QWORD *)v21 + 10) = v23;
            v43 = v21 + 6;
          }
          if (*(_QWORD *)&v37[32])
          {
            *(_QWORD *)&v37[40] = *(_QWORD *)&v37[32];
            operator delete(*(void **)&v37[32]);
          }
LABEL_23:
          v12 = v43;
          ++v13;
          if (v42 != v43)
            continue;
          v6 = 0;
          break;
        default:
          sub_100F90E58();
      }
      break;
    }
  }
  *(_QWORD *)v37 = &v42;
  sub_100F913B4((void ***)v37);
  return v6;
}

void sub_1015E56F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;

  sub_100E60BCC(&a13);
  a13 = v18 - 112;
  sub_100F913B4((void ***)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1015E5748(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  void *v16[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x155555555555555)
    v9 = 0x2AAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  if (v9)
    v10 = (char *)sub_10067257C(v7, v9);
  else
    v10 = 0;
  v11 = &v10[96 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[96 * v9];
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *((_QWORD *)v11 + 7) = 0;
  *((_QWORD *)v11 + 8) = 0;
  *((_QWORD *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v11 + 9) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v13 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v11 + 85) = *(_QWORD *)(a2 + 85);
  *((_QWORD *)v11 + 10) = v13;
  v16[2] = v11 + 96;
  sub_100F90EA4(a1, v16);
  v14 = a1[1];
  sub_100F910C0(v16);
  return v14;
}

void sub_1015E5880(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100F910C0((void **)va);
  _Unwind_Resume(a1);
}

char *sub_1015E5894(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = sub_100259C18(result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1015E58F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1015E5910(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = sub_1002AE87C(result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1015E5964(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_1015E5980(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *result;

  if (a2 == a3 || *a2 != 92)
    return a2;
  v5 = a2 + 1;
  if (a2 + 1 == a3)
    sub_100F916A4();
  result = sub_1015E5CA8(a1, a2 + 1, a3);
  if (result == v5)
  {
    result = (unsigned __int8 *)sub_100F917A4(a1, (char *)a2 + 1, (char *)a3);
    if (result == v5)
    {
      result = sub_1015E5D64(a1, (char *)a2 + 1, (char *)a3, 0);
      if (result == v5)
        return a2;
    }
  }
  return result;
}

_BYTE *sub_1015E5A20(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 != a3)
      sub_1015E6680();
    sub_100F92BF4();
  }
  return a2;
}

uint64_t sub_1015E5B30(uint64_t result)
{
  if ((*(_BYTE *)(result + 24) & 2) == 0)
    operator new();
  return result;
}

uint64_t sub_1015E5BA4(uint64_t result)
{
  if ((*(_BYTE *)(result + 24) & 2) == 0)
    operator new();
  return result;
}

_QWORD *sub_1015E5C10(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_102196190;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1015E5C54(_QWORD *a1)
{
  uint64_t v1;

  *a1 = off_102196190;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  operator delete();
}

unsigned __int8 *sub_1015E5CA8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v4;
  unsigned int v5;
  unsigned __int8 *v6;
  int v7;

  if (a2 != a3)
  {
    v4 = *a2;
    v5 = v4 - 48;
    if (v4 == 48)
      sub_1015E6030(a1);
    if ((v4 - 49) <= 8)
    {
      v6 = a2 + 1;
      if (a2 + 1 == a3)
        goto LABEL_12;
      do
      {
        v7 = *v6;
        if ((v7 - 48) > 9)
          break;
        if (v5 >= 0x19999999)
          goto LABEL_14;
        ++v6;
        v5 = v7 + 10 * v5 - 48;
      }
      while (v6 != a3);
      if (v5)
      {
LABEL_12:
        if (v5 <= *(_DWORD *)(a1 + 28))
          sub_1015E6154(a1);
      }
LABEL_14:
      sub_100F91B4C();
    }
  }
  return a2;
}

unsigned __int8 *sub_1015E5D64(uint64_t a1, char *a2, char *a3, std::string *this)
{
  char *v4;
  int v5;
  char v6;
  std::string *v7;
  std::string::value_type v8;
  int v9;
  int v10;
  char v11;
  int v12;
  char v13;
  int v14;
  char v15;
  char v16;

  v4 = a2;
  if (a2 == a3)
    return (unsigned __int8 *)v4;
  v5 = *a2;
  if (v5 > 109)
  {
    v6 = 0;
    switch(*a2)
    {
      case 'n':
        if (!this)
          goto LABEL_52;
        v7 = this;
        v8 = 10;
        goto LABEL_50;
      case 'r':
        if (!this)
          goto LABEL_52;
        v7 = this;
        v8 = 13;
        goto LABEL_50;
      case 't':
        if (!this)
          goto LABEL_52;
        v7 = this;
        v8 = 9;
        goto LABEL_50;
      case 'u':
        if (a2 + 1 == a3)
          goto LABEL_55;
        v9 = a2[1];
        if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6)
          goto LABEL_55;
        v4 = a2 + 2;
        if (a2 + 2 == a3)
          goto LABEL_55;
        v10 = *v4;
        v11 = -48;
        if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38)
          goto LABEL_24;
        v10 |= 0x20u;
        if ((v10 - 97) >= 6)
          goto LABEL_55;
        v11 = -87;
LABEL_24:
        v6 = 16 * (v11 + v10);
LABEL_25:
        if (v4 + 1 == a3)
          goto LABEL_55;
        v12 = v4[1];
        v13 = -48;
        if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
          goto LABEL_30;
        v12 |= 0x20u;
        if ((v12 - 97) >= 6)
          goto LABEL_55;
        v13 = -87;
LABEL_30:
        if (v4 + 2 == a3)
          goto LABEL_55;
        v14 = v4[2];
        v15 = -48;
        if ((v14 & 0xF8) == 0x30 || (v14 & 0xFE) == 0x38)
          goto LABEL_35;
        v14 |= 0x20u;
        if ((v14 - 97) >= 6)
          goto LABEL_55;
        v15 = -87;
LABEL_35:
        if (!this)
          sub_1015E6030(a1);
        std::string::operator=(this, v15 + v14 + 16 * (v13 + v12 + v6));
        v4 += 3;
        break;
      case 'v':
        if (!this)
          goto LABEL_52;
        v7 = this;
        v8 = 11;
        goto LABEL_50;
      case 'x':
        goto LABEL_25;
      default:
        goto LABEL_45;
    }
    return (unsigned __int8 *)v4;
  }
  if (v5 == 48)
  {
    if (this)
    {
      v7 = this;
      v8 = 0;
      goto LABEL_50;
    }
LABEL_52:
    sub_1015E6030(a1);
  }
  if (v5 != 99)
  {
    if (v5 == 102)
    {
      if (this)
      {
        v7 = this;
        v8 = 12;
LABEL_50:
        std::string::operator=(v7, v8);
        return (unsigned __int8 *)++v4;
      }
      goto LABEL_52;
    }
LABEL_45:
    if (*a2 != 95
      && ((v5 & 0x80) != 0
       || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 4 * *a2) & 0x500) == 0))
    {
      v8 = *a2;
      if (this)
      {
        v7 = this;
        goto LABEL_50;
      }
      goto LABEL_52;
    }
LABEL_55:
    sub_100F916A4();
  }
  if (a2 + 1 == a3)
    goto LABEL_55;
  v16 = a2[1];
  if (((v16 & 0xDF) - 65) > 0x19u)
    goto LABEL_55;
  if (!this)
    sub_1015E6030(a1);
  std::string::operator=(this, v16 & 0x1F);
  v4 += 2;
  return (unsigned __int8 *)v4;
}

void sub_1015E6030(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 24);
  if ((v1 & 1) == 0)
  {
    if ((v1 & 8) == 0)
      operator new();
    operator new();
  }
  operator new();
}

void sub_1015E6130()
{
  operator delete();
}

void sub_1015E6154(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 24);
  if ((v1 & 1) == 0)
  {
    if ((v1 & 8) == 0)
      operator new();
    operator new();
  }
  operator new();
}

std::locale *sub_1015E6250(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)off_102196328;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_102196190;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_1015E62A8(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)off_102196328;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_102196190;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete();
}

std::locale *sub_1015E6310(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)off_102196370;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_102196190;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_1015E6368(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)off_102196370;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_102196190;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete();
}

_QWORD *sub_1015E63D0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_102196190;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1015E6414(_QWORD *a1)
{
  uint64_t v1;

  *a1 = off_102196190;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  operator delete();
}

std::locale *sub_1015E6468(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)off_102196400;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_102196190;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_1015E64C0(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)off_102196400;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_102196190;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete();
}

std::locale *sub_1015E6528(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)off_102196448;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_102196190;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_1015E6580(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)off_102196448;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_102196190;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete();
}

_QWORD *sub_1015E65E8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_102196190;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1015E662C(_QWORD *a1)
{
  uint64_t v1;

  *a1 = off_102196190;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  operator delete();
}

void sub_1015E6680()
{
  operator new();
}

void sub_1015E66F4()
{
  operator delete();
}

std::locale *sub_1015E6718(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  a1->__locale_ = (std::locale::__imp *)off_1021964D8;
  v7 = a1 + 17;
  sub_100259608((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  sub_1003B01F4((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_102196190;
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

void sub_1015E67CC(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v6;

  a1->__locale_ = (std::locale::__imp *)off_1021964D8;
  v6 = a1 + 17;
  sub_100259608((void ***)&v6);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v6 = a1 + 11;
  sub_1003B01F4((void ***)&v6);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_102196190;
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  operator delete();
}

void sub_1015E6894(uint64_t a1, char *a2, char *a3)
{
  unint64_t v4;
  void **v5;
  void *__p[2];
  unsigned __int8 v7;

  sub_1015E6AC4(__p, a2, a3, a3 - a2);
  v4 = v7;
  if ((v7 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v7 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v5, (char *)v5 + v4);
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_1015E6914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1015E6930(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  sub_1015E6AC4(&__s, a2, a3, a3 - a2);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a1 + 16) + 32))(&v13, *(_QWORD *)(a1 + 16), v10, (char *)v10 + size);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(std::string *)a4 = v13;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a4 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a4 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_1015E6A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1015E6AC4(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    sub_1002594D4();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

void sub_1015E6B68(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  sub_1015E6AC4(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v7, (char *)v7 + v6);
  v8 = *(unsigned __int8 *)(a4 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0)
        v10 = (_BYTE *)a4;
      else
        v10 = *(_BYTE **)a4;
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void sub_1015E6C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_1015E6C5C(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  _BYTE *v4;
  int v5;
  uint64_t v6;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  int v15;
  _BYTE *v16;
  std::string *v17;
  uint64_t v18;
  std::string::size_type size;
  char v20;
  uint64_t v22;
  std::string __p;
  std::string v24;
  std::string v25;
  std::string v26;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  if (v5 == 93)
    return v4;
  v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      v10 = sub_1015E71E4(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_34;
    }
    if (v9 == 61)
    {
      v10 = sub_1015E7008(a1, a2 + 2, a3, a4);
LABEL_34:
      v6 = v10;
      v20 = 0;
      goto LABEL_38;
    }
    goto LABEL_9;
  }
  v18 = sub_1015E729C(a1, a2 + 2, a3, (uint64_t)&v26);
  v4 = (_BYTE *)v18;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v26.__r_.__value_.__l.__size_;
  v14 = (char *)v18;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      v12 = *v4;
      if (v12 == 92)
      {
        v13 = v4 + 1;
        if (v11)
        {
          v14 = sub_1015E74B0(a1, v13, a3, &v26);
        }
        else
        {
          v14 = (char *)sub_1015E7388(a1, v13, a3, &v26, v6);
          v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v26, v12);
    v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3
    || (v15 = *v14, v15 == 93)
    || (v16 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v16 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
LABEL_36:
          sub_100F93A34(v6, v17->__r_.__value_.__s.__data_[0], v17->__r_.__value_.__s.__data_[1]);
          goto LABEL_37;
        }
        v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_28;
      }
    }
    else if (*((_BYTE *)&v26.__r_.__value_.__s + 23))
    {
      v17 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1)
        goto LABEL_36;
LABEL_28:
      sub_100F91F74(v6, v17->__r_.__value_.__s.__data_[0]);
    }
LABEL_37:
    v20 = 1;
    v4 = v14;
    goto LABEL_38;
  }
  memset(&v25, 0, sizeof(v25));
  v4 = v14 + 2;
  if (v14 + 2 != a3 && *v16 == 91 && *v4 == 46)
  {
    v22 = sub_1015E729C(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    v4 = (_BYTE *)v22;
    goto LABEL_56;
  }
  if ((v11 | 0x40) == 0x40)
  {
    LODWORD(v16) = *v16;
    if ((_DWORD)v16 == 92)
    {
      if (v11)
        v22 = (uint64_t)sub_1015E74B0(a1, v14 + 2, a3, &v25);
      else
        v22 = (uint64_t)sub_1015E7388(a1, v14 + 2, a3, &v25, v6);
      goto LABEL_55;
    }
  }
  else
  {
    LOBYTE(v16) = *v16;
  }
  std::string::operator=(&v25, (std::string::value_type)v16);
LABEL_56:
  v24 = v26;
  memset(&v26, 0, sizeof(v26));
  __p = v25;
  memset(&v25, 0, sizeof(v25));
  sub_100F93670(v6, (char *)&v24, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v20 = 1;
LABEL_38:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if ((v20 & 1) != 0)
    return v4;
  return (_BYTE *)v6;
}

void sub_1015E6FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a28 < 0)
    operator delete(a23);
  if (*(char *)(v28 - 49) < 0)
    operator delete(*(void **)(v28 - 72));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1015E7008(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  uint64_t i;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *__p[2];
  unsigned __int8 v16;
  void *v17;
  uint64_t v18;
  unsigned __int8 v19;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_33;
  for (i = 0; a2[i] != 61 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_33;
  }
  if (&a2[i] == a3)
LABEL_33:
    sub_100F92BF4();
  sub_1015E7688(a1, a2, &a2[i], (uint64_t)&v17);
  if (((char)v19 & 0x80000000) == 0)
  {
    v8 = v19;
    if (v19)
    {
      v9 = (char *)&v17;
      goto LABEL_14;
    }
LABEL_34:
    sub_100F93C5C();
  }
  v8 = v18;
  if (!v18)
    goto LABEL_34;
  v9 = (char *)v17;
LABEL_14:
  sub_1015E781C(a1, v9, &v9[v8], (uint64_t)__p);
  v10 = v16;
  if ((v16 & 0x80u) != 0)
    v10 = (unint64_t)__p[1];
  if (v10)
  {
    sub_100F93CA8(a4, (__int128 *)__p);
  }
  else
  {
    v11 = v19;
    if ((v19 & 0x80u) != 0)
      v11 = v18;
    if (v11 == 2)
    {
      v13 = (char *)&v17;
      if ((v19 & 0x80u) != 0)
        v13 = (char *)v17;
      sub_100F93A34((uint64_t)a4, *v13, v13[1]);
    }
    else
    {
      if (v11 != 1)
        sub_100F93C5C();
      v12 = (char *)&v17;
      if ((v19 & 0x80u) != 0)
        v12 = (char *)v17;
      sub_100F91F74((uint64_t)a4, *v12);
    }
  }
  if ((char)v16 < 0)
    operator delete(__p[0]);
  if ((char)v19 < 0)
    operator delete(v17);
  return (uint64_t)&a2[i + 2];
}

void sub_1015E71AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1015E71E4(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t i;
  int v7;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_11;
  for (i = 0; a2[i] != 58 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_11;
  }
  if (&a2[i] == a3)
LABEL_11:
    sub_100F92BF4();
  v7 = sub_1015E7A8C(a1, a2, &a2[i], *(_BYTE *)(a1 + 24) & 1);
  if (!v7)
    sub_100F93E7C();
  *(_DWORD *)(a4 + 160) |= v7;
  return (uint64_t)&a2[i + 2];
}

uint64_t sub_1015E729C(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t i;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  unint64_t v11;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  for (i = 0; a2[i] != 46 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_15;
  }
  if (&a2[i] == a3)
LABEL_15:
    sub_100F92BF4();
  sub_1015E7688(a1, a2, &a2[i], (uint64_t)&v10);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v10;
  v7 = v11;
  *(_QWORD *)(a4 + 16) = v11;
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 - 1 >= 2)
    sub_100F93C5C();
  return (uint64_t)&a2[i + 2];
}

unsigned __int8 *sub_1015E7388(uint64_t a1, char *a2, char *a3, std::string *this, uint64_t a5)
{
  int v6;
  int v7;
  int v8;
  std::string::value_type v9;
  std::string *v10;

  if (a2 == a3)
    sub_100F916A4();
  v6 = *a2;
  if (v6 > 97)
  {
    if (v6 > 114)
    {
      if (v6 != 115)
      {
        if (v6 != 119)
          return sub_1015E5D64(a1, a2, a3, this);
        *(_DWORD *)(a5 + 160) |= 0x500u;
        sub_100F91F74(a5, 95);
        return (unsigned __int8 *)(a2 + 1);
      }
      v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (v6 == 98)
      {
        v10 = this;
        v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (unsigned __int8 *)(a2 + 1);
      }
      if (v6 != 100)
        return sub_1015E5D64(a1, a2, a3, this);
      v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (unsigned __int8 *)(a2 + 1);
  }
  if (v6 <= 82)
  {
    if (*a2)
    {
      if (v6 == 68)
      {
        v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (unsigned __int8 *)(a2 + 1);
      }
      return sub_1015E5D64(a1, a2, a3, this);
    }
    v9 = 0;
    v10 = this;
    goto LABEL_19;
  }
  if (v6 == 83)
  {
    v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (v6 == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    sub_100F93F80(a5, 95);
    return (unsigned __int8 *)(a2 + 1);
  }
  return sub_1015E5D64(a1, a2, a3, this);
}

char *sub_1015E74B0(uint64_t a1, char *a2, char *a3, std::string *this)
{
  int v5;
  std::string *v6;
  std::string::value_type v7;
  char v8;
  int v9;
  std::string::value_type v10;
  char *v11;

  if (a2 == a3)
LABEL_45:
    sub_100F916A4();
  v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (!this)
          goto LABEL_43;
        v6 = this;
        LOBYTE(v5) = 10;
        goto LABEL_16;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (!this)
          goto LABEL_43;
        v6 = this;
        LOBYTE(v5) = 13;
        goto LABEL_16;
      case 't':
        if (!this)
          goto LABEL_43;
        v6 = this;
        LOBYTE(v5) = 9;
        goto LABEL_16;
      case 'v':
        if (!this)
          goto LABEL_43;
        v6 = this;
        LOBYTE(v5) = 11;
        goto LABEL_16;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
        }
        else
        {
          if (v5 != 102)
            goto LABEL_21;
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
        }
        break;
    }
    goto LABEL_43;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97)
        goto LABEL_21;
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
LABEL_43:
      sub_1015E6030(a1);
    }
LABEL_14:
    if (this)
    {
      v6 = this;
      goto LABEL_16;
    }
    goto LABEL_43;
  }
  if (v5 == 34 || v5 == 47)
    goto LABEL_14;
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30)
    goto LABEL_45;
  v7 = v5 - 48;
  v11 = a2 + 1;
  if (a2 + 1 == a3)
  {
LABEL_38:
    v11 = a3;
    goto LABEL_39;
  }
  if ((*v11 & 0xF8) == 0x30)
  {
    v7 = *v11 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      v8 = a2[2];
      v9 = v8 & 0xF8;
      v10 = v8 + 8 * v7 - 48;
      if (v9 == 48)
        v11 = a2 + 3;
      else
        v11 = a2 + 2;
      if (v9 == 48)
        v7 = v10;
      goto LABEL_39;
    }
    goto LABEL_38;
  }
LABEL_39:
  if (!this)
    sub_1015E6030(a1);
  std::string::operator=(this, v7);
  return v11;
}

void sub_1015E7688(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  sub_1015E6AC4(&__s, a2, a3, a3 - a2);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a1 + 16) + 32))(&v13, *(_QWORD *)(a1 + 16), v10, (char *)v10 + size);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(std::string *)a4 = v13;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a4 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a4 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_1015E77E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1015E781C(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  sub_1015E6AC4(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v7, (char *)v7 + v6);
  v8 = *(unsigned __int8 *)(a4 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0)
        v10 = (_BYTE *)a4;
      else
        v10 = *(_BYTE **)a4;
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void sub_1015E78F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1015E7910(_QWORD *result, __int128 *a2)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;

  v2 = result;
  v3 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    result = sub_100115CE4((_BYTE *)result[1], *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  v2[1] = v3 + 24;
  return result;
}

void sub_1015E7964(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1015E796C(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1002596A8(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(v11, *(void **)a2, *((_QWORD *)a2 + 1));
    v11 = v16;
  }
  else
  {
    v12 = *a2;
    *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v11 = v12;
  }
  v16 = v11 + 24;
  sub_100074D44(a1, v15);
  v13 = a1[1];
  sub_100074DB8((uint64_t)v15);
  return v13;
}

void sub_1015E7A78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100074DB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1015E7A8C(uint64_t a1, char *a2, char *a3, BOOL a4)
{
  unint64_t v6;
  void **v7;
  void **v8;
  uint64_t classname;
  void *__p[2];
  unsigned __int8 v12;

  sub_1015E6AC4(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v7, (char *)v7 + v6);
  if ((v12 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  classname = std::__get_classname((const char *)v8, a4);
  if ((char)v12 < 0)
    operator delete(__p[0]);
  return classname;
}

void sub_1015E7B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1015E7B44(uint64_t a1, char *a2, char *a3)
{
  unint64_t v4;
  void **v5;
  void *__p[2];
  unsigned __int8 v7;

  sub_1015E6AC4(__p, a2, a3, a3 - a2);
  v4 = v7;
  if ((v7 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v7 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v5, (char *)v5 + v4);
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_1015E7BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1015E7BE0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_102196190;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1015E7C24(_QWORD *a1)
{
  uint64_t v1;

  *a1 = off_102196190;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  operator delete();
}

_QWORD *sub_1015E7C78(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_102196190;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1015E7CBC(_QWORD *a1)
{
  uint64_t v1;

  *a1 = off_102196190;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  operator delete();
}

void sub_1015E7D10()
{
  operator new();
}

void sub_1015E7E30(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1015E7E58(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_102196610;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = off_102196190;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_1015E7EC0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_102196610;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = off_102196190;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  operator delete();
}

void sub_1015E7F3C()
{
  operator delete();
}

_QWORD *sub_1015E7F50(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_102196610;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = off_102196190;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_1015E7FB8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_102196610;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = off_102196190;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  operator delete();
}

void sub_1015E8034()
{
  operator delete();
}

unsigned __int8 *sub_1015E8048(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v6;

  if (a2 == a3)
    return a2;
  v6 = sub_1015E80D0(a1, a2, a3);
  if (v6 == a2)
    return a2;
  else
    return sub_1015E81DC(a1, v6, a3);
}

_BYTE *sub_1015E80D0(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v6;
  _BYTE *v7;
  int v8;
  uint64_t v9;
  _BYTE *v10;
  int v12;
  uint64_t v13;

  v6 = sub_1015E837C(a1, a2, a3);
  v7 = v6;
  if (v6 == a2 && v6 != a3)
  {
    if (a2 + 1 == a3 || *a2 != 92)
    {
      return a2;
    }
    else
    {
      v8 = a2[1];
      if (v8 == 40)
      {
        v9 = (uint64_t)(a2 + 2);
        sub_1015E5B30(a1);
        do
        {
          v10 = (_BYTE *)v9;
          v9 = sub_1015E8048(a1, v9, a3);
        }
        while ((_BYTE *)v9 != v10);
        if (v10 == a3 || v10 + 1 == a3 || *v10 != 92 || v10[1] != 41)
          sub_100F90808();
        v7 = v10 + 2;
        sub_1015E5BA4(a1);
      }
      else
      {
        v12 = sub_1015E852C(a1, v8);
        v13 = 2;
        if (!v12)
          v13 = 0;
        return &a2[v13];
      }
    }
  }
  return v7;
}

unsigned __int8 *sub_1015E81DC(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v4;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  int v12;
  int v13;

  if (a2 != a3)
  {
    v4 = *a2;
    if (v4 == 42)
      sub_1015E7D10();
    if (a2 + 1 != a3 && v4 == 92 && a2[1] == 123)
    {
      v6 = a2 + 2;
      v13 = 0;
      v7 = sub_100F943C8(a1, a2 + 2, a3, &v13);
      if (v7 == v6)
        goto LABEL_16;
      if (v7 != a3)
      {
        v8 = v7 + 1;
        v9 = *v7;
        if (v9 == 44)
        {
          v12 = -1;
          v10 = sub_100F943C8(a1, v8, a3, &v12);
          if (v10 != a3 && v10 + 1 != a3 && *v10 == 92 && v10[1] == 125)
          {
            if (v12 != -1 && v12 < v13)
LABEL_16:
              sub_100F94464();
LABEL_20:
            sub_1015E7D10();
          }
        }
        else if (v8 != a3 && v9 == 92 && *v8 == 125)
        {
          goto LABEL_20;
        }
      }
      sub_100F944B0();
    }
  }
  return a2;
}

_BYTE *sub_1015E837C(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  int v6;
  _BYTE *result;

  if (a2 == a3)
  {
    result = sub_100F94C50(a1, a2, a3);
    if (result != a2)
      return result;
    return sub_1015E5A20(a1, a2, a3);
  }
  v6 = *a2;
  if ((a2 + 1 != a3 || v6 != 36)
    && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
  {
    sub_1015E6030(a1);
  }
  result = sub_100F94C50(a1, a2, a3);
  if (result == a2)
  {
    if (*a2 == 46)
      operator new();
    return sub_1015E5A20(a1, a2, a3);
  }
  return result;
}

_QWORD *sub_1015E8494(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_102196190;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1015E84D8(_QWORD *a1)
{
  uint64_t v1;

  *a1 = off_102196190;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  operator delete();
}

uint64_t sub_1015E852C(uint64_t a1, unsigned __int8 a2)
{
  if (((a2 & 0xF8) == 0x30 || (a2 & 0xFE) == 0x38) && a2 - 49 <= 8)
  {
    if (a2 - 48 <= *(_DWORD *)(a1 + 28))
      sub_1015E6154(a1);
    sub_100F91B4C();
  }
  return 0;
}

unsigned __int8 *sub_1015E8588(uint64_t a1, char *a2, char *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v6 = sub_1015E85E4(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2)
    sub_100F947B4();
  do
  {
    v7 = v6;
    v6 = sub_1015E85E4(a1, (char *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

unsigned __int8 *sub_1015E85E4(uint64_t a1, char *a2, char *a3)
{
  char *v6;
  unsigned __int8 *v7;
  int v8;
  char *v9;
  char *v10;

  v6 = sub_1015E8794(a1, a2, a3);
  v7 = (unsigned __int8 *)v6;
  if (v6 == a2 && v6 != a3)
  {
    v8 = *a2;
    if (v8 == 36)
      operator new();
    if (v8 != 40)
    {
      if (v8 == 94)
        operator new();
      return (unsigned __int8 *)a2;
    }
    sub_1015E5B30(a1);
    ++*(_DWORD *)(a1 + 36);
    v9 = (char *)sub_1015E4084(a1, a2 + 1, a3);
    if (v9 == a3 || (v10 = v9, *v9 != 41))
      sub_100F90808();
    sub_1015E5BA4(a1);
    --*(_DWORD *)(a1 + 36);
    v7 = (unsigned __int8 *)(v10 + 1);
  }
  if (v7 != (unsigned __int8 *)a2)
    return sub_1015E4BE0(a1, v7, (unsigned __int8 *)a3);
  return (unsigned __int8 *)a2;
}

char *sub_1015E8794(uint64_t a1, char *a2, char *a3)
{
  char *result;

  result = sub_100F94FDC(a1, a2, a3);
  if (result == a2)
  {
    result = sub_1015E885C(a1, a2, a3);
    if (result == a2)
    {
      if (a2 != a3 && *a2 == 46)
        operator new();
      return sub_1015E5A20(a1, a2, a3);
    }
  }
  return result;
}

char *sub_1015E885C(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  unsigned __int8 *v4;
  int v5;
  BOOL v6;
  int v8;
  uint64_t v9;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = (unsigned __int8 *)(a2 + 1);
  if (v3 + 1 == a3 || *v3 != 92)
    return v3;
  v5 = (char)*v4;
  v6 = (v5 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
  if (!v6 || (v5 - 123) < 3)
    sub_1015E6030(a1);
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0x40)
  {
    v8 = sub_1015E852C(a1, *v4);
    v9 = 2;
    if (!v8)
      v9 = 0;
    v3 += v9;
    return v3;
  }
  return sub_1015E74B0(a1, (char *)v4, a3, 0);
}

void sub_1015E8920(uint64_t a1, unint64_t a2, uint64_t **a3, uint64_t a4, char a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  BOOL v18;
  uint64_t v19;
  __int128 v20;
  BOOL v21;
  unint64_t v22;
  void **v23;
  _BOOL4 v24;
  BOOL v25;
  void **v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  BOOL v30;
  _BOOL4 v31;
  __int128 *v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  __int128 v36;
  BOOL v37;
  BOOL v38;
  unint64_t v39;
  _BOOL4 v40;
  unint64_t v41;
  BOOL v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BOOL4 v46;
  BOOL v47;
  __int128 *v48;
  __int128 v49;
  __int128 v50;
  _BOOL4 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  void **v55;
  uint64_t v56;
  void **v57;
  void **v58;
  _BOOL4 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  void **v63;
  BOOL v64;
  uint64_t v65;
  __int128 v66;
  _OWORD *v67;
  int64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  _BOOL4 v74;
  uint64_t v75;
  BOOL v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  _BOOL4 v81;
  _BOOL4 v82;
  __int128 v83;
  int64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BOOL4 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _BOOL4 v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  BOOL v102;
  __int128 v103;
  void **v105;
  uint64_t i;
  void **v107;
  _BOOL4 v108;
  __int128 v109;
  uint64_t v110;
  void **v111;
  BOOL v112;
  int v113;
  uint64_t v114;
  __int128 v115;
  void **v116;
  int64_t v117;
  _OWORD *v118;
  void **v119;
  int64_t v120;
  void *v121;
  unint64_t v122;
  char v123;
  char v124;
  __int128 v125;
  void *v126;
  void *__p[2];
  char v128;
  void *v129[2];
  void *v130;
  _BYTE v131[15];

void sub_1015E9AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

__n128 sub_1015E9BBC(uint64_t a1, void **a2, void **a3, void **a4, void **a5, uint64_t **a6)
{
  _BOOL4 v12;
  __n128 result;
  void *v14;
  __int128 v15;
  void *v16;
  _BOOL4 v17;
  void *v18;
  __int128 v19;
  void *v20;
  _BOOL4 v21;
  void *v22;
  __int128 v23;
  void *v24;
  _BOOL4 v25;
  void *v26;
  void *v27;
  void *__p[2];
  char v29;
  void *v30[2];
  char v31;
  _BYTE v32[33];

  sub_1015EB67C(a1, a2, a3, a4, a6);
  sub_1015EA454(*a6, a5, v30);
  sub_1015EA454(*a6, a4, __p);
  v12 = sub_100279008((uint64_t)v32, (const void **)v30, (const void **)__p);
  if (v29 < 0)
    operator delete(__p[0]);
  if (v31 < 0)
  {
    operator delete(v30[0]);
    if (!v12)
      return result;
  }
  else if (!v12)
  {
    return result;
  }
  v14 = a4[2];
  v15 = *(_OWORD *)a4;
  v16 = a5[2];
  *(_OWORD *)a4 = *(_OWORD *)a5;
  a4[2] = v16;
  *(_OWORD *)a5 = v15;
  a5[2] = v14;
  sub_1015EA454(*a6, a4, v30);
  sub_1015EA454(*a6, a3, __p);
  v17 = sub_100279008((uint64_t)v32, (const void **)v30, (const void **)__p);
  if (v29 < 0)
    operator delete(__p[0]);
  if (v31 < 0)
  {
    operator delete(v30[0]);
    if (!v17)
      return result;
  }
  else if (!v17)
  {
    return result;
  }
  v18 = a3[2];
  v19 = *(_OWORD *)a3;
  v20 = a4[2];
  *(_OWORD *)a3 = *(_OWORD *)a4;
  a3[2] = v20;
  *(_OWORD *)a4 = v19;
  a4[2] = v18;
  sub_1015EA454(*a6, a3, v30);
  sub_1015EA454(*a6, a2, __p);
  v21 = sub_100279008((uint64_t)v32, (const void **)v30, (const void **)__p);
  if (v29 < 0)
    operator delete(__p[0]);
  if (v31 < 0)
  {
    operator delete(v30[0]);
    if (!v21)
      return result;
  }
  else if (!v21)
  {
    return result;
  }
  v22 = a2[2];
  v23 = *(_OWORD *)a2;
  v24 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = v24;
  *(_OWORD *)a3 = v23;
  a3[2] = v22;
  sub_1015EA454(*a6, a2, v30);
  sub_1015EA454(*a6, (void **)a1, __p);
  v25 = sub_100279008((uint64_t)v32, (const void **)v30, (const void **)__p);
  if (v29 < 0)
    operator delete(__p[0]);
  if (v31 < 0)
    operator delete(v30[0]);
  if (v25)
  {
    v26 = *(void **)(a1 + 16);
    result = *(__n128 *)a1;
    v27 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v27;
    *(__n128 *)a2 = result;
    a2[2] = v26;
  }
  return result;
}

void sub_1015E9E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_1015E9E34(void **a1, void **a2, void **a3, uint64_t **a4)
{
  BOOL v8;
  _BOOL4 v9;
  void *v10;
  __n128 result;
  void *v12;
  _BOOL4 v13;
  void *v14;
  __n128 v15;
  void *v16;
  _BOOL4 v17;
  void *v18;
  void *v19;
  __int128 v20;
  void *v21;
  _BOOL4 v22;
  void *v23;
  void *v24;
  void *__p[2];
  char v26;
  const void *v27[2];
  char v28;
  _BYTE v29[33];

  sub_1015EA454(*a4, a2, v27);
  sub_1015EA454(*a4, a1, __p);
  v8 = sub_100279008((uint64_t)v29, v27, (const void **)__p);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
  {
    operator delete((void *)v27[0]);
    if (v8)
      goto LABEL_5;
  }
  else if (v8)
  {
LABEL_5:
    sub_1015EA454(*a4, a3, v27);
    sub_1015EA454(*a4, a2, __p);
    v9 = sub_100279008((uint64_t)v29, v27, (const void **)__p);
    if (v26 < 0)
      operator delete(__p[0]);
    if (v28 < 0)
    {
      operator delete((void *)v27[0]);
      if (v9)
        goto LABEL_9;
    }
    else if (v9)
    {
LABEL_9:
      v10 = a1[2];
      result = *(__n128 *)a1;
      v12 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v12;
LABEL_23:
      *(__n128 *)a3 = result;
      a3[2] = v10;
      return result;
    }
    v14 = a1[2];
    v15 = *(__n128 *)a1;
    v16 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v16;
    *(__n128 *)a2 = v15;
    a2[2] = v14;
    sub_1015EA454(*a4, a3, v27);
    sub_1015EA454(*a4, a2, __p);
    v17 = sub_100279008((uint64_t)v29, v27, (const void **)__p);
    if (v26 < 0)
      operator delete(__p[0]);
    if (v28 < 0)
      operator delete((void *)v27[0]);
    if (v17)
    {
      v10 = a2[2];
      result = *(__n128 *)a2;
      v18 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v18;
      goto LABEL_23;
    }
    return result;
  }
  sub_1015EA454(*a4, a3, v27);
  sub_1015EA454(*a4, a2, __p);
  v13 = sub_100279008((uint64_t)v29, v27, (const void **)__p);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
  {
    operator delete((void *)v27[0]);
    if (!v13)
      return result;
  }
  else if (!v13)
  {
    return result;
  }
  v19 = a2[2];
  v20 = *(_OWORD *)a2;
  v21 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = v21;
  *(_OWORD *)a3 = v20;
  a3[2] = v19;
  sub_1015EA454(*a4, a2, v27);
  sub_1015EA454(*a4, a1, __p);
  v22 = sub_100279008((uint64_t)v29, v27, (const void **)__p);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete((void *)v27[0]);
  if (v22)
  {
    v23 = a1[2];
    result = *(__n128 *)a1;
    v24 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v24;
    *(__n128 *)a2 = result;
    a2[2] = v23;
  }
  return result;
}

void sub_1015EA0D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(exception_object);
}

BOOL sub_1015EA104(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  BOOL v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  void *__p[2];
  char v26;
  void *v27[2];
  char v28;
  char v29;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = a2 - 24;
      sub_1015EA454(*a3, (void **)(a2 - 24), v27);
      sub_1015EA454(*a3, (void **)a1, __p);
      v9 = sub_100279008((uint64_t)&v23, (const void **)v27, (const void **)__p);
      if (v26 < 0)
        operator delete(__p[0]);
      if (v28 < 0)
        operator delete(v27[0]);
      if (v9)
      {
        v10 = *(_QWORD *)(a1 + 16);
        v11 = *(_OWORD *)a1;
        v12 = *(_QWORD *)(v8 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(_QWORD *)(a1 + 16) = v12;
        *(_OWORD *)v8 = v11;
        *(_QWORD *)(v8 + 16) = v10;
      }
      return 1;
    case 3uLL:
      sub_1015E9E34((void **)a1, (void **)(a1 + 24), (void **)(a2 - 24), a3);
      return 1;
    case 4uLL:
      sub_1015EB67C(a1, (void **)(a1 + 24), (void **)(a1 + 48), (void **)(a2 - 24), a3);
      return 1;
    case 5uLL:
      sub_1015E9BBC(a1, (void **)(a1 + 24), (void **)(a1 + 48), (void **)(a1 + 72), (void **)(a2 - 24), a3);
      return 1;
    default:
      v13 = (void **)(a1 + 48);
      sub_1015E9E34((void **)a1, (void **)(a1 + 24), (void **)(a1 + 48), a3);
      v14 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v15 = 0;
      v16 = 0;
      break;
  }
  while (1)
  {
    sub_1015EA454(*a3, (void **)v14, v27);
    sub_1015EA454(*a3, v13, __p);
    v17 = sub_100279008((uint64_t)&v23, (const void **)v27, (const void **)__p);
    if (v26 < 0)
      operator delete(__p[0]);
    if (v28 < 0)
      break;
    if (v17)
      goto LABEL_17;
LABEL_30:
    v13 = (void **)v14;
    v15 += 24;
    v14 += 24;
    if (v14 == a2)
      return 1;
  }
  operator delete(v27[0]);
  if (!v17)
    goto LABEL_30;
LABEL_17:
  v23 = *(_OWORD *)v14;
  v24 = *(_QWORD *)(v14 + 16);
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)v14 = 0;
  v18 = v15;
  do
  {
    v19 = a1 + v18;
    v20 = (void **)(a1 + v18 + 72);
    if (*(char *)(a1 + v18 + 95) < 0)
      operator delete(*v20);
    *(_OWORD *)v20 = *(_OWORD *)(v19 + 48);
    *(_QWORD *)(a1 + v18 + 88) = *(_QWORD *)(v19 + 64);
    *(_BYTE *)(v19 + 71) = 0;
    *(_BYTE *)(v19 + 48) = 0;
    if (v18 == -48)
    {
      v22 = a1;
      goto LABEL_29;
    }
    sub_1015EA454(*a3, (void **)&v23, v27);
    sub_1015EA454(*a3, (void **)(a1 + v18 + 24), __p);
    v21 = sub_100279008((uint64_t)&v29, (const void **)v27, (const void **)__p);
    if (v26 < 0)
      operator delete(__p[0]);
    if (v28 < 0)
      operator delete(v27[0]);
    v18 -= 24;
  }
  while (v21);
  v22 = a1 + v18 + 72;
  if (*(char *)(a1 + v18 + 95) < 0)
    operator delete(*(void **)v22);
LABEL_29:
  *(_OWORD *)v22 = v23;
  *(_QWORD *)(v22 + 16) = v24;
  if (++v16 != 8)
    goto LABEL_30;
  return v14 + 24 == a2;
}

void sub_1015EA408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1015EA454(uint64_t *a1@<X0>, void **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  void *v6;
  void *v7;
  void *__p[2];
  _BYTE v9[25];
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;

  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  *(_OWORD *)__p = 0u;
  memset(v9, 0, sizeof(v9));
  v5 = *a1;
  v6 = (void *)*((unsigned __int8 *)a2 + 23);
  if ((char)v6 >= 0)
    v7 = a2;
  else
    v7 = *a2;
  if ((char)v6 < 0)
    v6 = a2[1];
  sub_100F95128((uint64_t)v7, (uint64_t)v6 + (_QWORD)v7, (uint64_t)__p, v5, 0);
  if ((void *)((char *)__p[1] - (char *)__p[0]) == (void *)48)
  {
    if (*((_BYTE *)__p[0] + 40))
    {
      sub_1015E6AC4(a3, *((char **)__p[0] + 3), *((char **)__p[0] + 4), *((_QWORD *)__p[0] + 4) - *((_QWORD *)__p[0] + 3));
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
    }
  }
  else if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(a3, *a2, (unint64_t)a2[1]);
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    a3[2] = a2[2];
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1015EA53C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1015EA558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  sub_1015E52D8(a4, *(_DWORD *)(a1 + 28) + 1, a2, a3, (unsigned __int16)(v9 & 0x800) >> 11);
  if (sub_1015EA8BC(a1, a2, a3, (uint64_t *)a4, v9, (v9 & 0x800) == 0))
  {
    if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4)
      v10 = (uint64_t *)(a4 + 24);
    else
      v10 = *(uint64_t **)a4;
LABEL_8:
    v11 = *v10;
    *(_QWORD *)(a4 + 56) = *v10;
    *(_BYTE *)(a4 + 64) = *(_QWORD *)(a4 + 48) != v11;
    v12 = v10[1];
    *(_QWORD *)(a4 + 72) = v12;
    *(_BYTE *)(a4 + 88) = v12 != *(_QWORD *)(a4 + 80);
    return 1;
  }
  if (a2 != a3 && (v9 & 0x40) == 0)
  {
    v14 = v9 | 0x80;
    v15 = a2 + 1;
    if (v15 != a3)
    {
      while (1)
      {
        sub_100F90C2C((char **)a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3), (__int128 *)(a4 + 24));
        v16 = sub_1015EA8BC(a1, v15, a3, (uint64_t *)a4, v14, 0);
        v18 = *(_QWORD *)a4;
        v17 = *(_QWORD *)(a4 + 8);
        if (v16)
          break;
        sub_100F90C2C((char **)a4, 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3), (__int128 *)(a4 + 24));
        if (++v15 == a3)
          goto LABEL_14;
      }
      if (v17 == v18)
        v10 = (uint64_t *)(a4 + 24);
      else
        v10 = *(uint64_t **)a4;
      goto LABEL_8;
    }
LABEL_14:
    sub_100F90C2C((char **)a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3), (__int128 *)(a4 + 24));
    if (sub_1015EA8BC(a1, a3, a3, (uint64_t *)a4, v14, 0))
    {
      if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4)
        v10 = (uint64_t *)(a4 + 24);
      else
        v10 = *(uint64_t **)a4;
      goto LABEL_8;
    }
  }
  result = 0;
  *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  return result;
}

void sub_1015EA730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  v10 = a4[6];
  sub_100F95C70(a1, 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  v11 = *(_QWORD *)a1;
  if (*(_QWORD *)(a1 + 8) != *(_QWORD *)a1)
  {
    v12 = 0;
    v13 = 0;
    v15 = *a4;
    v14 = a4[1];
    do
    {
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3);
      v17 = (_QWORD *)(v15 + v12);
      if (v16 <= v13)
        v18 = a4 + 3;
      else
        v18 = v17;
      *(_QWORD *)(v11 + v12) = a2 + *v18 - v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v13)
        v19 = a4 + 3;
      else
        v19 = (uint64_t *)(*a4 + v12);
      *(_QWORD *)(*(_QWORD *)a1 + v12 + 8) = a2 + v19[1] - v10;
      v15 = *a4;
      v14 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v14 - *a4) >> 3) <= v13)
        v20 = a4 + 3;
      else
        v20 = (uint64_t *)(*a4 + v12);
      v21 = *((_BYTE *)v20 + 16);
      v11 = *(_QWORD *)a1;
      v22 = *(_QWORD *)(a1 + 8);
      *(_BYTE *)(*(_QWORD *)a1 + v12 + 16) = v21;
      ++v13;
      v12 += 24;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL * ((v22 - v11) >> 3));
  }
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 40) = 0;
  v23 = a2 + a4[6] - v10;
  *(_QWORD *)(a1 + 48) = v23;
  *(_QWORD *)(a1 + 56) = a2 + a4[7] - v10;
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a4 + 64);
  *(_QWORD *)(a1 + 72) = a2 + a4[9] - v10;
  *(_QWORD *)(a1 + 80) = a2 + a4[10] - v10;
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a4 + 88);
  if ((a5 & 1) == 0)
    *(_QWORD *)(a1 + 104) = v23;
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a4 + 96);
}

uint64_t sub_1015EA8BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
    return sub_1015E5348(a1, a2, a3, a4, a5, a6);
  if (*(_DWORD *)(a1 + 28))
    return sub_1015EAE14(a1, a2, a3, a4, a5, a6);
  return sub_1015EA8DC(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1015EA8DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  BOOL v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  char v53;
  _BYTE v55[40];
  __int128 v56;
  void *__p[2];
  _QWORD v58[3];
  __int128 v59;
  __int128 v60;
  __int128 v61;

  v60 = 0u;
  v61 = 0u;
  v59 = 0u;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    *(_DWORD *)v55 = 0;
    memset(&v55[8], 0, 32);
    v56 = 0uLL;
    *(_OWORD *)__p = 0uLL;
    memset(v58, 0, 21);
    sub_100F9521C(&v59, (uint64_t)v55);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)&v55[32])
    {
      *(_QWORD *)&v56 = *(_QWORD *)&v55[32];
      operator delete(*(void **)&v55[32]);
    }
    v12 = *((_QWORD *)&v59 + 1);
    v13 = *((_QWORD *)&v61 + 1) + v61 - 1;
    v14 = v13 / 0x2A;
    v15 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * (v13 / 0x2A));
    v16 = 3 * (v13 % 0x2A);
    v17 = v15 + 32 * v16;
    *(_DWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = a2;
    *(_QWORD *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 24) = a3;
    sub_100F90DDC(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 56, *(unsigned int *)(a1 + 32));
    v53 = 0;
    v18 = 0;
    v51 = 0;
    v52 = a2;
    v19 = a3 - a2;
    v20 = *((_QWORD *)&v61 + 1);
    v21 = *((_QWORD *)&v59 + 1);
    v22 = *((_QWORD *)&v61 + 1) + v61 - 1;
    v23 = v22 / 0x2A;
    v24 = 3 * (v22 % 0x2A);
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * v23) + 32 * v24 + 80) = v6;
    v25 = *(_QWORD *)(v21 + 8 * v23) + 32 * v24;
    *(_DWORD *)(v25 + 88) = a5;
    *(_BYTE *)(v25 + 92) = a6;
    while (2)
    {
      if ((++v18 & 0xFFF) == 0 && (int)(v18 >> 12) >= (int)v19)
        sub_100F90E0C();
      v27 = v20 + v61 - 1;
      v28 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * (v27 / 0x2A));
      v29 = v27 % 0x2A;
      v30 = v28 + 96 * (v27 % 0x2A);
      v32 = (_QWORD *)(v30 + 80);
      v31 = *(_QWORD *)(v30 + 80);
      if (v31)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v31 + 16))(v31, v28 + 96 * v29);
      switch(*(_DWORD *)v30)
      {
        case 0xFFFFFC18:
          v33 = *(_QWORD *)(v28 + 96 * v29 + 16);
          v35 = (a5 & 0x1000) == 0 || v33 == a3;
          v36 = v33 != v52 || (a5 & 0x20) == 0;
          if (!v36 || !v35)
            goto LABEL_37;
          v37 = v33 - *(_QWORD *)(v28 + 96 * v29 + 8);
          v38 = v51;
          if ((v53 & (v51 >= v37)) == 0)
            v38 = v37;
          if (v38 != v19)
          {
            v51 = v38;
            sub_100F9531C(&v59);
            v53 = 1;
            goto LABEL_38;
          }
          v39 = (void **)*((_QWORD *)&v59 + 1);
          v40 = v60;
          if ((_QWORD)v60 == *((_QWORD *)&v59 + 1))
          {
            v40 = *((_QWORD *)&v59 + 1);
          }
          else
          {
            v41 = (_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * ((unint64_t)v61 / 0x2A));
            v42 = (_QWORD *)(*v41 + 96 * ((unint64_t)v61 % 0x2A));
            v43 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * ((*((_QWORD *)&v61 + 1) + (_QWORD)v61) / 0x2AuLL))
                + 96 * ((*((_QWORD *)&v61 + 1) + (_QWORD)v61) % 0x2AuLL);
            if (v42 != (_QWORD *)v43)
            {
              do
              {
                sub_100F9107C((uint64_t)&v61 + 8, v42);
                v42 += 12;
                if ((_QWORD *)((char *)v42 - *v41) == (_QWORD *)4032)
                {
                  v44 = (_QWORD *)v41[1];
                  ++v41;
                  v42 = v44;
                }
              }
              while (v42 != (_QWORD *)v43);
              v39 = (void **)*((_QWORD *)&v59 + 1);
              v40 = v60;
            }
          }
          *((_QWORD *)&v61 + 1) = 0;
          v47 = v40 - (_QWORD)v39;
          if (v47 >= 0x11)
          {
            do
            {
              operator delete(*v39);
              v39 = (void **)(*((_QWORD *)&v59 + 1) + 8);
              *((_QWORD *)&v59 + 1) = v39;
              v47 = v60 - (_QWORD)v39;
            }
            while ((_QWORD)v60 - (_QWORD)v39 > 0x10uLL);
          }
          if (v47 >> 3 == 1)
          {
            v48 = 21;
          }
          else
          {
            if (v47 >> 3 != 2)
              goto LABEL_53;
            v48 = 42;
          }
          *(_QWORD *)&v61 = v48;
LABEL_53:
          v53 = 1;
          v51 = v19;
LABEL_38:
          v20 = *((_QWORD *)&v61 + 1);
          if (*((_QWORD *)&v61 + 1))
            continue;
          if ((v53 & 1) != 0)
          {
            v49 = *a4;
            *(_QWORD *)v49 = v52;
            *(_QWORD *)(v49 + 8) = v52 + v51;
            v6 = 1;
            *(_BYTE *)(v49 + 16) = 1;
          }
          else
          {
            v6 = 0;
          }
          break;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_38;
        case 0xFFFFFC1D:
          sub_100F9539C((uint64_t)&v59, v28 + 96 * v29);
          goto LABEL_37;
        case 0xFFFFFC1F:
LABEL_37:
          sub_100F9531C(&v59);
          goto LABEL_38;
        case 0xFFFFFC20:
          v45 = *(_OWORD *)(v30 + 16);
          *(_OWORD *)v55 = *(_OWORD *)v30;
          *(_OWORD *)&v55[16] = v45;
          v56 = 0uLL;
          *(_QWORD *)&v55[32] = 0;
          sub_1015E5894(&v55[32], *(__int128 **)(v28 + 96 * v29 + 32), *(__int128 **)(v28 + 96 * v29 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v28 + 96 * v29 + 40) - *(_QWORD *)(v28 + 96 * v29 + 32)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v58[0] = 0;
          sub_1015E5910((char *)__p, *(__int128 **)(v28 + 96 * v29 + 56), *(__int128 **)(v28 + 96 * v29 + 64), (uint64_t)(*(_QWORD *)(v28 + 96 * v29 + 64) - *(_QWORD *)(v28 + 96 * v29 + 56)) >> 4);
          v46 = *v32;
          *(_QWORD *)((char *)&v58[1] + 5) = *(_QWORD *)(v30 + 85);
          v58[1] = v46;
          (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*v32 + 24))(*v32, 1, v28 + 96 * v29);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v58[1] + 24))(v58[1], 0, v55);
          sub_100F9521C(&v59, (uint64_t)v55);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (*(_QWORD *)&v55[32])
          {
            *(_QWORD *)&v56 = *(_QWORD *)&v55[32];
            operator delete(*(void **)&v55[32]);
          }
          goto LABEL_38;
        default:
          sub_100F90E58();
      }
      break;
    }
  }
  sub_100F95B2C(&v59);
  return v6;
}

void sub_1015EADC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;

  sub_100F95B2C((_QWORD *)(v22 - 144));
  _Unwind_Resume(a1);
}

uint64_t sub_1015EAE14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  _OWORD *v11;
  unsigned int v12;
  uint64_t v13;
  _OWORD *v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  _BYTE *v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  void *v22;
  _OWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t *v41;
  uint64_t v42;
  char v43;
  _BYTE v46[56];
  void *__p[2];
  _QWORD v48[4];
  __int128 v49;
  char v50;
  _BYTE v51[40];
  __int128 v52;
  void *v53[6];
  _OWORD *v54;
  _OWORD *v55;
  _QWORD v56[3];

  v54 = 0;
  v55 = 0;
  v56[0] = 0;
  *(_DWORD *)v51 = 0;
  memset(&v51[8], 0, 32);
  v52 = 0u;
  memset(v53, 0, 37);
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
    goto LABEL_43;
  *(_QWORD *)&v49 = a3;
  *((_QWORD *)&v49 + 1) = a3;
  v50 = 0;
  *(_DWORD *)v46 = 0;
  memset(&v46[8], 0, 48);
  *(_OWORD *)__p = 0uLL;
  memset(v48, 0, 21);
  v55 = (_OWORD *)sub_1015E5748((uint64_t *)&v54, (uint64_t)v46);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*(_QWORD *)&v46[32])
  {
    *(_QWORD *)&v46[40] = *(_QWORD *)&v46[32];
    operator delete(*(void **)&v46[32]);
  }
  v41 = a4;
  v11 = v55;
  *((_DWORD *)v55 - 24) = 0;
  *((_QWORD *)v11 - 11) = a2;
  *((_QWORD *)v11 - 10) = a2;
  *((_QWORD *)v11 - 9) = a3;
  sub_100F90DA0((uint64_t)(v11 - 4), *(unsigned int *)(a1 + 28), &v49);
  sub_100F90DDC((uint64_t)v55 - 40, *(unsigned int *)(a1 + 32));
  v42 = 0;
  v43 = 0;
  v12 = 0;
  v13 = a3 - a2;
  v14 = v55;
  *((_QWORD *)v55 - 2) = v6;
  *((_DWORD *)v14 - 2) = a5;
  *((_BYTE *)v14 - 4) = a6;
  do
  {
    v15 = (++v12 & 0xFFF) != 0 || (int)(v12 >> 12) < (int)v13;
    if (!v15)
      sub_100F90E0C();
    v17 = v14 - 1;
    v16 = *((_QWORD *)v14 - 2);
    v18 = v14 - 6;
    if (v16)
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v16 + 16))(v16, v14 - 6);
    switch(*(_DWORD *)v18)
    {
      case 0xFFFFFC18:
        v19 = *((_QWORD *)v14 - 10);
        if ((a5 & 0x20) != 0 && v19 == a2 || (a5 & 0x1000) != 0 && v19 != a3)
          goto LABEL_19;
        v26 = v19 - *((_QWORD *)v14 - 11);
        v27 = v42;
        if ((v43 & (v42 >= v26)) == 0)
        {
          v28 = *(v14 - 5);
          *(_OWORD *)v51 = *(_OWORD *)v18;
          *(_OWORD *)&v51[16] = v28;
          if (v51 != v18)
          {
            sub_1015EB37C(&v51[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
            sub_1015EB530(v53, *((uint64_t **)v14 - 5), *((uint64_t **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
          }
          v29 = (void *)*v17;
          *(void **)((char *)&v53[3] + 5) = *(void **)((char *)v14 - 11);
          v53[3] = v29;
          v27 = v26;
        }
        v30 = v55;
        if (v27 == v13)
        {
          v31 = (uint64_t)v54;
          while (v30 != (_QWORD *)v31)
          {
            v30 -= 12;
            sub_100F9107C((uint64_t)v56, v30);
          }
          v55 = (_OWORD *)v31;
          v43 = 1;
          v42 = a3 - a2;
        }
        else
        {
          v42 = v27;
          v32 = v55 - 6;
          sub_100F9107C((uint64_t)v56, (_QWORD *)v55 - 12);
          v55 = v32;
          v43 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_19:
        v20 = v55 - 6;
        sub_100F9107C((uint64_t)v56, (_QWORD *)v55 - 12);
        v55 = v20;
        break;
      case 0xFFFFFC20:
        v21 = *(v14 - 5);
        *(_OWORD *)v46 = *(_OWORD *)v18;
        *(_OWORD *)&v46[16] = v21;
        memset(&v46[32], 0, 24);
        sub_1015E5894(&v46[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
        __p[0] = 0;
        __p[1] = 0;
        v48[0] = 0;
        sub_1015E5910((char *)__p, *((__int128 **)v14 - 5), *((__int128 **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
        v22 = (void *)*v17;
        *(_QWORD *)((char *)&v48[1] + 5) = *(_QWORD *)((char *)v14 - 11);
        v48[1] = v22;
        (*(void (**)(_QWORD, uint64_t, _OWORD *))(*(_QWORD *)*v17 + 24))(*v17, 1, v14 - 6);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v48[1] + 24))(v48[1], 0, v46);
        v23 = v55;
        if ((unint64_t)v55 >= v56[0])
        {
          v55 = (_OWORD *)sub_1015E5748((uint64_t *)&v54, (uint64_t)v46);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          v24 = *(_OWORD *)&v46[16];
          *v55 = *(_OWORD *)v46;
          v23[1] = v24;
          *((_QWORD *)v23 + 4) = 0;
          *((_QWORD *)v23 + 5) = 0;
          *((_QWORD *)v23 + 6) = 0;
          *((_QWORD *)v23 + 7) = 0;
          v23[2] = *(_OWORD *)&v46[32];
          *((_QWORD *)v23 + 6) = *(_QWORD *)&v46[48];
          memset(&v46[32], 0, 24);
          *((_QWORD *)v23 + 8) = 0;
          *((_QWORD *)v23 + 9) = 0;
          *(_OWORD *)((char *)v23 + 56) = *(_OWORD *)__p;
          *((_QWORD *)v23 + 9) = v48[0];
          __p[0] = 0;
          __p[1] = 0;
          v48[0] = 0;
          v25 = v48[1];
          *(_QWORD *)((char *)v23 + 85) = *(_QWORD *)((char *)&v48[1] + 5);
          *((_QWORD *)v23 + 10) = v25;
          v55 = v23 + 6;
        }
        if (*(_QWORD *)&v46[32])
        {
          *(_QWORD *)&v46[40] = *(_QWORD *)&v46[32];
          operator delete(*(void **)&v46[32]);
        }
        break;
      default:
        sub_100F90E58();
    }
    v14 = v55;
  }
  while (v54 != v55);
  if ((v43 & 1) != 0)
  {
    v33 = *v41;
    *(_QWORD *)v33 = a2;
    *(_QWORD *)(v33 + 8) = a2 + v42;
    *(_BYTE *)(v33 + 16) = 1;
    if ((_QWORD)v52 != *(_QWORD *)&v51[32])
    {
      v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - *(_QWORD *)&v51[32]) >> 3);
      v35 = (_BYTE *)(*(_QWORD *)&v51[32] + 16);
      v36 = 1;
      do
      {
        v37 = v33 + 24 * v36;
        *(_OWORD *)v37 = *((_OWORD *)v35 - 1);
        v38 = *v35;
        v35 += 24;
        *(_BYTE *)(v37 + 16) = v38;
        v15 = v34 > v36++;
      }
      while (v15);
    }
    v39 = 1;
  }
  else
  {
LABEL_43:
    v39 = 0;
  }
  if (v53[0])
  {
    v53[1] = v53[0];
    operator delete(v53[0]);
  }
  if (*(_QWORD *)&v51[32])
  {
    *(_QWORD *)&v52 = *(_QWORD *)&v51[32];
    operator delete(*(void **)&v51[32]);
  }
  *(_QWORD *)v51 = &v54;
  sub_100F913B4((void ***)v51);
  return v39;
}

void sub_1015EB31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  sub_100E60BCC(&a19);
  sub_100E60BCC(&a35);
  a35 = v35 - 120;
  sub_100F913B4((void ***)&a35);
  _Unwind_Resume(a1);
}

char *sub_1015EB37C(_QWORD *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  __int128 v17;
  int64_t v18;
  char *v19;
  unint64_t v20;
  __int128 *v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  char *v26;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= a4)
  {
    v19 = (char *)a1[1];
    v14 = a1 + 1;
    v13 = v19;
    v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - result) >> 3);
    if (v20 >= a4)
    {
      v25 = result;
      if (a2 != a3)
      {
        v26 = result;
        do
        {
          *(_OWORD *)v26 = *v6;
          v26[16] = *((_BYTE *)v6 + 16);
          v25 += 24;
          v6 = (__int128 *)((char *)v6 + 24);
          v26 += 24;
        }
        while (v6 != a3);
      }
      v18 = v25 - result;
      v13 = result;
    }
    else
    {
      v21 = (__int128 *)((char *)a2 + 24 * v20);
      if (v13 != result)
      {
        do
        {
          *(_OWORD *)result = *v6;
          result[16] = *((_BYTE *)v6 + 16);
          v6 = (__int128 *)((char *)v6 + 24);
          result += 24;
        }
        while (v6 != v21);
      }
      v22 = v13;
      if (v21 != a3)
      {
        v23 = v13;
        do
        {
          v24 = *v21;
          *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
          *(_OWORD *)v23 = v24;
          v23 += 24;
          v21 = (__int128 *)((char *)v21 + 24);
          v22 += 24;
        }
        while (v21 != a3);
      }
      v18 = v22 - v13;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      sub_100259694();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    result = sub_100259C18(a1, v12);
    v15 = (char *)a1[1];
    v14 = a1 + 1;
    v13 = v15;
    v16 = v15;
    if (v6 != a3)
    {
      v16 = v13;
      do
      {
        v17 = *v6;
        *((_QWORD *)v16 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v16 = v17;
        v16 += 24;
        v6 = (__int128 *)((char *)v6 + 24);
      }
      while (v6 != a3);
    }
    v18 = v16 - v13;
  }
  *v14 = &v13[v18];
  return result;
}

char *sub_1015EB530(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  unint64_t v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      v26 = result;
      if (a2 != a3)
      {
        v27 = result;
        do
        {
          v28 = *v6;
          v29 = v6[1];
          v6 += 2;
          *(_QWORD *)v27 = v28;
          *((_QWORD *)v27 + 1) = v29;
          v27 += 16;
          v26 += 16;
        }
        while (v6 != a3);
      }
      v17 = (char *)(v26 - result);
      v12 = result;
    }
    else
    {
      v20 = (__int128 *)&a2[2 * v19];
      if (v12 != result)
      {
        do
        {
          v21 = *v6;
          v22 = v6[1];
          v6 += 2;
          *(_QWORD *)result = v21;
          *((_QWORD *)result + 1) = v22;
          result += 16;
        }
        while (v6 != (uint64_t *)v20);
      }
      v23 = v12;
      if (v20 != (__int128 *)a3)
      {
        v24 = v12;
        do
        {
          v25 = *v20++;
          *(_OWORD *)v24 = v25;
          v24 += 16;
          v23 += 16;
        }
        while (v20 != (__int128 *)a3);
      }
      v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60)
      sub_100259694();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_1002AE87C(a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *(_OWORD *)v6;
        v6 += 2;
        *(_OWORD *)v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

__n128 sub_1015EB67C(uint64_t a1, void **a2, void **a3, void **a4, uint64_t **a5)
{
  _BOOL4 v10;
  __n128 result;
  void *v12;
  __int128 v13;
  void *v14;
  _BOOL4 v15;
  void *v16;
  __int128 v17;
  void *v18;
  _BOOL4 v19;
  void *v20;
  void *v21;
  void *__p[2];
  char v23;
  void *v24[2];
  char v25;
  _BYTE v26[33];

  sub_1015E9E34((void **)a1, a2, a3, a5);
  sub_1015EA454(*a5, a4, v24);
  sub_1015EA454(*a5, a3, __p);
  v10 = sub_100279008((uint64_t)v26, (const void **)v24, (const void **)__p);
  if (v23 < 0)
    operator delete(__p[0]);
  if (v25 < 0)
  {
    operator delete(v24[0]);
    if (!v10)
      return result;
  }
  else if (!v10)
  {
    return result;
  }
  v12 = a3[2];
  v13 = *(_OWORD *)a3;
  v14 = a4[2];
  *(_OWORD *)a3 = *(_OWORD *)a4;
  a3[2] = v14;
  *(_OWORD *)a4 = v13;
  a4[2] = v12;
  sub_1015EA454(*a5, a3, v24);
  sub_1015EA454(*a5, a2, __p);
  v15 = sub_100279008((uint64_t)v26, (const void **)v24, (const void **)__p);
  if (v23 < 0)
    operator delete(__p[0]);
  if (v25 < 0)
  {
    operator delete(v24[0]);
    if (!v15)
      return result;
  }
  else if (!v15)
  {
    return result;
  }
  v16 = a2[2];
  v17 = *(_OWORD *)a2;
  v18 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = v18;
  *(_OWORD *)a3 = v17;
  a3[2] = v16;
  sub_1015EA454(*a5, a2, v24);
  sub_1015EA454(*a5, (void **)a1, __p);
  v19 = sub_100279008((uint64_t)v26, (const void **)v24, (const void **)__p);
  if (v23 < 0)
    operator delete(__p[0]);
  if (v25 < 0)
    operator delete(v24[0]);
  if (v19)
  {
    v20 = *(void **)(a1 + 16);
    result = *(__n128 *)a1;
    v21 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v21;
    *(__n128 *)a2 = result;
    a2[2] = v20;
  }
  return result;
}

void sub_1015EB840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1015EB864(_QWORD *a1)
{
  *a1 = &off_1021C1AE8;
  bzero(a1 + 1, 0x260uLL);
  bzero(a1 + 78, 0xBB4uLL);
  return a1;
}

void sub_1015EB8A8(PB::Base *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;

  *(_QWORD *)this = &off_1021C1AE8;
  v2 = *((_QWORD *)this + 451);
  *((_QWORD *)this + 451) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 450);
  *((_QWORD *)this + 450) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 449);
  *((_QWORD *)this + 449) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 448);
  *((_QWORD *)this + 448) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 447);
  *((_QWORD *)this + 447) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 446);
  *((_QWORD *)this + 446) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 445);
  *((_QWORD *)this + 445) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 444);
  *((_QWORD *)this + 444) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 443);
  *((_QWORD *)this + 443) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 442);
  *((_QWORD *)this + 442) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 441);
  *((_QWORD *)this + 441) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 440);
  *((_QWORD *)this + 440) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 439);
  *((_QWORD *)this + 439) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *((_QWORD *)this + 438);
  *((_QWORD *)this + 438) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *((_QWORD *)this + 437);
  *((_QWORD *)this + 437) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *((_QWORD *)this + 436);
  *((_QWORD *)this + 436) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *((_QWORD *)this + 435);
  *((_QWORD *)this + 435) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *((_QWORD *)this + 434);
  *((_QWORD *)this + 434) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *((_QWORD *)this + 433);
  *((_QWORD *)this + 433) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *((_QWORD *)this + 432);
  *((_QWORD *)this + 432) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *((_QWORD *)this + 431);
  *((_QWORD *)this + 431) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *((_QWORD *)this + 430);
  *((_QWORD *)this + 430) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *((_QWORD *)this + 429);
  *((_QWORD *)this + 429) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = *((_QWORD *)this + 428);
  *((_QWORD *)this + 428) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *((_QWORD *)this + 427);
  *((_QWORD *)this + 427) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = *((_QWORD *)this + 426);
  *((_QWORD *)this + 426) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *((_QWORD *)this + 425);
  *((_QWORD *)this + 425) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = *((_QWORD *)this + 424);
  *((_QWORD *)this + 424) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = *((_QWORD *)this + 423);
  *((_QWORD *)this + 423) = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = *((_QWORD *)this + 422);
  *((_QWORD *)this + 422) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = *((_QWORD *)this + 421);
  *((_QWORD *)this + 421) = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = *((_QWORD *)this + 420);
  *((_QWORD *)this + 420) = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = *((_QWORD *)this + 419);
  *((_QWORD *)this + 419) = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v35 = *((_QWORD *)this + 418);
  *((_QWORD *)this + 418) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = *((_QWORD *)this + 417);
  *((_QWORD *)this + 417) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = *((_QWORD *)this + 416);
  *((_QWORD *)this + 416) = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = *((_QWORD *)this + 415);
  *((_QWORD *)this + 415) = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = *((_QWORD *)this + 414);
  *((_QWORD *)this + 414) = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = *((_QWORD *)this + 413);
  *((_QWORD *)this + 413) = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = *((_QWORD *)this + 412);
  *((_QWORD *)this + 412) = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = *((_QWORD *)this + 411);
  *((_QWORD *)this + 411) = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  v43 = *((_QWORD *)this + 410);
  *((_QWORD *)this + 410) = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = *((_QWORD *)this + 409);
  *((_QWORD *)this + 409) = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = *((_QWORD *)this + 408);
  *((_QWORD *)this + 408) = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = *((_QWORD *)this + 407);
  *((_QWORD *)this + 407) = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = *((_QWORD *)this + 406);
  *((_QWORD *)this + 406) = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v48 = *((_QWORD *)this + 405);
  *((_QWORD *)this + 405) = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = *((_QWORD *)this + 404);
  *((_QWORD *)this + 404) = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = *((_QWORD *)this + 403);
  *((_QWORD *)this + 403) = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = *((_QWORD *)this + 402);
  *((_QWORD *)this + 402) = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = *((_QWORD *)this + 401);
  *((_QWORD *)this + 401) = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  v53 = *((_QWORD *)this + 400);
  *((_QWORD *)this + 400) = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = *((_QWORD *)this + 399);
  *((_QWORD *)this + 399) = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  v55 = *((_QWORD *)this + 398);
  *((_QWORD *)this + 398) = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = *((_QWORD *)this + 397);
  *((_QWORD *)this + 397) = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = *((_QWORD *)this + 396);
  *((_QWORD *)this + 396) = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = *((_QWORD *)this + 395);
  *((_QWORD *)this + 395) = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v59 = *((_QWORD *)this + 394);
  *((_QWORD *)this + 394) = 0;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  v60 = *((_QWORD *)this + 393);
  *((_QWORD *)this + 393) = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  v61 = *((_QWORD *)this + 392);
  *((_QWORD *)this + 392) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *((_QWORD *)this + 391);
  *((_QWORD *)this + 391) = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  v63 = *((_QWORD *)this + 390);
  *((_QWORD *)this + 390) = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = *((_QWORD *)this + 389);
  *((_QWORD *)this + 389) = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  v65 = *((_QWORD *)this + 388);
  *((_QWORD *)this + 388) = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  v66 = *((_QWORD *)this + 387);
  *((_QWORD *)this + 387) = 0;
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  v67 = *((_QWORD *)this + 386);
  *((_QWORD *)this + 386) = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  v68 = *((_QWORD *)this + 385);
  *((_QWORD *)this + 385) = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  v69 = *((_QWORD *)this + 384);
  *((_QWORD *)this + 384) = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  v70 = *((_QWORD *)this + 383);
  *((_QWORD *)this + 383) = 0;
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  v71 = *((_QWORD *)this + 382);
  *((_QWORD *)this + 382) = 0;
  if (v71)
    (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  v72 = *((_QWORD *)this + 381);
  *((_QWORD *)this + 381) = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  v73 = *((_QWORD *)this + 380);
  *((_QWORD *)this + 380) = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  v74 = *((_QWORD *)this + 379);
  *((_QWORD *)this + 379) = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  v75 = *((_QWORD *)this + 378);
  *((_QWORD *)this + 378) = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = *((_QWORD *)this + 377);
  *((_QWORD *)this + 377) = 0;
  if (v76)
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
  v77 = *((_QWORD *)this + 376);
  *((_QWORD *)this + 376) = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  v78 = *((_QWORD *)this + 375);
  *((_QWORD *)this + 375) = 0;
  if (v78)
    (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
  v79 = *((_QWORD *)this + 374);
  *((_QWORD *)this + 374) = 0;
  if (v79)
    (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
  v80 = *((_QWORD *)this + 373);
  *((_QWORD *)this + 373) = 0;
  if (v80)
    (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
  v81 = *((_QWORD *)this + 372);
  *((_QWORD *)this + 372) = 0;
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  v82 = *((_QWORD *)this + 371);
  *((_QWORD *)this + 371) = 0;
  if (v82)
    (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
  v83 = *((_QWORD *)this + 370);
  *((_QWORD *)this + 370) = 0;
  if (v83)
    (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
  v84 = *((_QWORD *)this + 369);
  *((_QWORD *)this + 369) = 0;
  if (v84)
    (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
  v85 = *((_QWORD *)this + 368);
  *((_QWORD *)this + 368) = 0;
  if (v85)
    (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
  v86 = *((_QWORD *)this + 367);
  *((_QWORD *)this + 367) = 0;
  if (v86)
    (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
  v87 = *((_QWORD *)this + 366);
  *((_QWORD *)this + 366) = 0;
  if (v87)
    (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
  v88 = *((_QWORD *)this + 365);
  *((_QWORD *)this + 365) = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  v89 = *((_QWORD *)this + 364);
  *((_QWORD *)this + 364) = 0;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
  v90 = *((_QWORD *)this + 363);
  *((_QWORD *)this + 363) = 0;
  if (v90)
    (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
  v91 = *((_QWORD *)this + 362);
  *((_QWORD *)this + 362) = 0;
  if (v91)
    (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
  v92 = *((_QWORD *)this + 361);
  *((_QWORD *)this + 361) = 0;
  if (v92)
    (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
  v93 = *((_QWORD *)this + 360);
  *((_QWORD *)this + 360) = 0;
  if (v93)
    (*(void (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
  v94 = *((_QWORD *)this + 359);
  *((_QWORD *)this + 359) = 0;
  if (v94)
    (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
  v95 = *((_QWORD *)this + 358);
  *((_QWORD *)this + 358) = 0;
  if (v95)
    (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
  v96 = *((_QWORD *)this + 357);
  *((_QWORD *)this + 357) = 0;
  if (v96)
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
  v97 = *((_QWORD *)this + 356);
  *((_QWORD *)this + 356) = 0;
  if (v97)
    (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
  v98 = *((_QWORD *)this + 355);
  *((_QWORD *)this + 355) = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  v99 = *((_QWORD *)this + 354);
  *((_QWORD *)this + 354) = 0;
  if (v99)
    (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
  v100 = *((_QWORD *)this + 353);
  *((_QWORD *)this + 353) = 0;
  if (v100)
    (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
  v101 = *((_QWORD *)this + 352);
  *((_QWORD *)this + 352) = 0;
  if (v101)
    (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
  v102 = *((_QWORD *)this + 351);
  *((_QWORD *)this + 351) = 0;
  if (v102)
    (*(void (**)(uint64_t))(*(_QWORD *)v102 + 8))(v102);
  v103 = *((_QWORD *)this + 350);
  *((_QWORD *)this + 350) = 0;
  if (v103)
    (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
  v104 = *((_QWORD *)this + 349);
  *((_QWORD *)this + 349) = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  v105 = *((_QWORD *)this + 348);
  *((_QWORD *)this + 348) = 0;
  if (v105)
    (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
  v106 = *((_QWORD *)this + 347);
  *((_QWORD *)this + 347) = 0;
  if (v106)
    (*(void (**)(uint64_t))(*(_QWORD *)v106 + 8))(v106);
  v107 = *((_QWORD *)this + 346);
  *((_QWORD *)this + 346) = 0;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  v108 = *((_QWORD *)this + 345);
  *((_QWORD *)this + 345) = 0;
  if (v108)
    (*(void (**)(uint64_t))(*(_QWORD *)v108 + 8))(v108);
  v109 = *((_QWORD *)this + 344);
  *((_QWORD *)this + 344) = 0;
  if (v109)
    (*(void (**)(uint64_t))(*(_QWORD *)v109 + 8))(v109);
  v110 = *((_QWORD *)this + 343);
  *((_QWORD *)this + 343) = 0;
  if (v110)
    (*(void (**)(uint64_t))(*(_QWORD *)v110 + 8))(v110);
  v111 = *((_QWORD *)this + 342);
  *((_QWORD *)this + 342) = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  v112 = *((_QWORD *)this + 341);
  *((_QWORD *)this + 341) = 0;
  if (v112)
    (*(void (**)(uint64_t))(*(_QWORD *)v112 + 8))(v112);
  v113 = *((_QWORD *)this + 340);
  *((_QWORD *)this + 340) = 0;
  if (v113)
    (*(void (**)(uint64_t))(*(_QWORD *)v113 + 8))(v113);
  v114 = *((_QWORD *)this + 339);
  *((_QWORD *)this + 339) = 0;
  if (v114)
    (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
  v115 = *((_QWORD *)this + 338);
  *((_QWORD *)this + 338) = 0;
  if (v115)
    (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
  v116 = *((_QWORD *)this + 337);
  *((_QWORD *)this + 337) = 0;
  if (v116)
    (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
  v117 = *((_QWORD *)this + 336);
  *((_QWORD *)this + 336) = 0;
  if (v117)
    (*(void (**)(uint64_t))(*(_QWORD *)v117 + 8))(v117);
  v118 = *((_QWORD *)this + 335);
  *((_QWORD *)this + 335) = 0;
  if (v118)
    (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
  v119 = *((_QWORD *)this + 334);
  *((_QWORD *)this + 334) = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  v120 = *((_QWORD *)this + 333);
  *((_QWORD *)this + 333) = 0;
  if (v120)
    (*(void (**)(uint64_t))(*(_QWORD *)v120 + 8))(v120);
  v121 = *((_QWORD *)this + 332);
  *((_QWORD *)this + 332) = 0;
  if (v121)
    (*(void (**)(uint64_t))(*(_QWORD *)v121 + 8))(v121);
  v122 = *((_QWORD *)this + 331);
  *((_QWORD *)this + 331) = 0;
  if (v122)
    (*(void (**)(uint64_t))(*(_QWORD *)v122 + 8))(v122);
  v123 = *((_QWORD *)this + 330);
  *((_QWORD *)this + 330) = 0;
  if (v123)
    (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
  v124 = *((_QWORD *)this + 329);
  *((_QWORD *)this + 329) = 0;
  if (v124)
    (*(void (**)(uint64_t))(*(_QWORD *)v124 + 8))(v124);
  v125 = *((_QWORD *)this + 328);
  *((_QWORD *)this + 328) = 0;
  if (v125)
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  v126 = *((_QWORD *)this + 327);
  *((_QWORD *)this + 327) = 0;
  if (v126)
    (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
  v127 = *((_QWORD *)this + 326);
  *((_QWORD *)this + 326) = 0;
  if (v127)
    (*(void (**)(uint64_t))(*(_QWORD *)v127 + 8))(v127);
  v128 = *((_QWORD *)this + 325);
  *((_QWORD *)this + 325) = 0;
  if (v128)
    (*(void (**)(uint64_t))(*(_QWORD *)v128 + 8))(v128);
  v129 = *((_QWORD *)this + 324);
  *((_QWORD *)this + 324) = 0;
  if (v129)
    (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
  v130 = *((_QWORD *)this + 323);
  *((_QWORD *)this + 323) = 0;
  if (v130)
    (*(void (**)(uint64_t))(*(_QWORD *)v130 + 8))(v130);
  v131 = *((_QWORD *)this + 322);
  *((_QWORD *)this + 322) = 0;
  if (v131)
    (*(void (**)(uint64_t))(*(_QWORD *)v131 + 8))(v131);
  v132 = *((_QWORD *)this + 321);
  *((_QWORD *)this + 321) = 0;
  if (v132)
    (*(void (**)(uint64_t))(*(_QWORD *)v132 + 8))(v132);
  v133 = *((_QWORD *)this + 320);
  *((_QWORD *)this + 320) = 0;
  if (v133)
    (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
  v134 = *((_QWORD *)this + 319);
  *((_QWORD *)this + 319) = 0;
  if (v134)
    (*(void (**)(uint64_t))(*(_QWORD *)v134 + 8))(v134);
  v135 = *((_QWORD *)this + 318);
  *((_QWORD *)this + 318) = 0;
  if (v135)
    (*(void (**)(uint64_t))(*(_QWORD *)v135 + 8))(v135);
  v136 = *((_QWORD *)this + 317);
  *((_QWORD *)this + 317) = 0;
  if (v136)
    (*(void (**)(uint64_t))(*(_QWORD *)v136 + 8))(v136);
  v137 = *((_QWORD *)this + 316);
  *((_QWORD *)this + 316) = 0;
  if (v137)
    (*(void (**)(uint64_t))(*(_QWORD *)v137 + 8))(v137);
  v138 = *((_QWORD *)this + 315);
  *((_QWORD *)this + 315) = 0;
  if (v138)
    (*(void (**)(uint64_t))(*(_QWORD *)v138 + 8))(v138);
  v139 = *((_QWORD *)this + 314);
  *((_QWORD *)this + 314) = 0;
  if (v139)
    (*(void (**)(uint64_t))(*(_QWORD *)v139 + 8))(v139);
  v140 = *((_QWORD *)this + 313);
  *((_QWORD *)this + 313) = 0;
  if (v140)
    (*(void (**)(uint64_t))(*(_QWORD *)v140 + 8))(v140);
  v141 = *((_QWORD *)this + 312);
  *((_QWORD *)this + 312) = 0;
  if (v141)
    (*(void (**)(uint64_t))(*(_QWORD *)v141 + 8))(v141);
  v142 = *((_QWORD *)this + 311);
  *((_QWORD *)this + 311) = 0;
  if (v142)
    (*(void (**)(uint64_t))(*(_QWORD *)v142 + 8))(v142);
  v143 = *((_QWORD *)this + 310);
  *((_QWORD *)this + 310) = 0;
  if (v143)
    (*(void (**)(uint64_t))(*(_QWORD *)v143 + 8))(v143);
  v144 = *((_QWORD *)this + 309);
  *((_QWORD *)this + 309) = 0;
  if (v144)
    (*(void (**)(uint64_t))(*(_QWORD *)v144 + 8))(v144);
  v145 = *((_QWORD *)this + 308);
  *((_QWORD *)this + 308) = 0;
  if (v145)
    (*(void (**)(uint64_t))(*(_QWORD *)v145 + 8))(v145);
  v146 = *((_QWORD *)this + 307);
  *((_QWORD *)this + 307) = 0;
  if (v146)
    (*(void (**)(uint64_t))(*(_QWORD *)v146 + 8))(v146);
  v147 = *((_QWORD *)this + 306);
  *((_QWORD *)this + 306) = 0;
  if (v147)
    (*(void (**)(uint64_t))(*(_QWORD *)v147 + 8))(v147);
  v148 = *((_QWORD *)this + 305);
  *((_QWORD *)this + 305) = 0;
  if (v148)
    (*(void (**)(uint64_t))(*(_QWORD *)v148 + 8))(v148);
  v149 = *((_QWORD *)this + 304);
  *((_QWORD *)this + 304) = 0;
  if (v149)
    (*(void (**)(uint64_t))(*(_QWORD *)v149 + 8))(v149);
  v150 = *((_QWORD *)this + 303);
  *((_QWORD *)this + 303) = 0;
  if (v150)
    (*(void (**)(uint64_t))(*(_QWORD *)v150 + 8))(v150);
  v151 = *((_QWORD *)this + 302);
  *((_QWORD *)this + 302) = 0;
  if (v151)
    (*(void (**)(uint64_t))(*(_QWORD *)v151 + 8))(v151);
  v152 = *((_QWORD *)this + 301);
  *((_QWORD *)this + 301) = 0;
  if (v152)
    (*(void (**)(uint64_t))(*(_QWORD *)v152 + 8))(v152);
  v153 = *((_QWORD *)this + 300);
  *((_QWORD *)this + 300) = 0;
  if (v153)
    (*(void (**)(uint64_t))(*(_QWORD *)v153 + 8))(v153);
  v154 = *((_QWORD *)this + 299);
  *((_QWORD *)this + 299) = 0;
  if (v154)
    (*(void (**)(uint64_t))(*(_QWORD *)v154 + 8))(v154);
  v155 = *((_QWORD *)this + 298);
  *((_QWORD *)this + 298) = 0;
  if (v155)
    (*(void (**)(uint64_t))(*(_QWORD *)v155 + 8))(v155);
  v156 = *((_QWORD *)this + 297);
  *((_QWORD *)this + 297) = 0;
  if (v156)
    (*(void (**)(uint64_t))(*(_QWORD *)v156 + 8))(v156);
  v157 = *((_QWORD *)this + 296);
  *((_QWORD *)this + 296) = 0;
  if (v157)
    (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
  v158 = *((_QWORD *)this + 295);
  *((_QWORD *)this + 295) = 0;
  if (v158)
    (*(void (**)(uint64_t))(*(_QWORD *)v158 + 8))(v158);
  v159 = *((_QWORD *)this + 294);
  *((_QWORD *)this + 294) = 0;
  if (v159)
    (*(void (**)(uint64_t))(*(_QWORD *)v159 + 8))(v159);
  v160 = *((_QWORD *)this + 293);
  *((_QWORD *)this + 293) = 0;
  if (v160)
    (*(void (**)(uint64_t))(*(_QWORD *)v160 + 8))(v160);
  v161 = *((_QWORD *)this + 292);
  *((_QWORD *)this + 292) = 0;
  if (v161)
    (*(void (**)(uint64_t))(*(_QWORD *)v161 + 8))(v161);
  v162 = *((_QWORD *)this + 291);
  *((_QWORD *)this + 291) = 0;
  if (v162)
    (*(void (**)(uint64_t))(*(_QWORD *)v162 + 8))(v162);
  v163 = *((_QWORD *)this + 290);
  *((_QWORD *)this + 290) = 0;
  if (v163)
    (*(void (**)(uint64_t))(*(_QWORD *)v163 + 8))(v163);
  v164 = *((_QWORD *)this + 289);
  *((_QWORD *)this + 289) = 0;
  if (v164)
    (*(void (**)(uint64_t))(*(_QWORD *)v164 + 8))(v164);
  v165 = *((_QWORD *)this + 288);
  *((_QWORD *)this + 288) = 0;
  if (v165)
    (*(void (**)(uint64_t))(*(_QWORD *)v165 + 8))(v165);
  v166 = *((_QWORD *)this + 287);
  *((_QWORD *)this + 287) = 0;
  if (v166)
    (*(void (**)(uint64_t))(*(_QWORD *)v166 + 8))(v166);
  v167 = *((_QWORD *)this + 286);
  *((_QWORD *)this + 286) = 0;
  if (v167)
    (*(void (**)(uint64_t))(*(_QWORD *)v167 + 8))(v167);
  v168 = *((_QWORD *)this + 285);
  *((_QWORD *)this + 285) = 0;
  if (v168)
    (*(void (**)(uint64_t))(*(_QWORD *)v168 + 8))(v168);
  v169 = *((_QWORD *)this + 284);
  *((_QWORD *)this + 284) = 0;
  if (v169)
    (*(void (**)(uint64_t))(*(_QWORD *)v169 + 8))(v169);
  v170 = *((_QWORD *)this + 283);
  *((_QWORD *)this + 283) = 0;
  if (v170)
    (*(void (**)(uint64_t))(*(_QWORD *)v170 + 8))(v170);
  v171 = *((_QWORD *)this + 282);
  *((_QWORD *)this + 282) = 0;
  if (v171)
    (*(void (**)(uint64_t))(*(_QWORD *)v171 + 8))(v171);
  v172 = *((_QWORD *)this + 281);
  *((_QWORD *)this + 281) = 0;
  if (v172)
    (*(void (**)(uint64_t))(*(_QWORD *)v172 + 8))(v172);
  v173 = *((_QWORD *)this + 280);
  *((_QWORD *)this + 280) = 0;
  if (v173)
    (*(void (**)(uint64_t))(*(_QWORD *)v173 + 8))(v173);
  v174 = *((_QWORD *)this + 279);
  *((_QWORD *)this + 279) = 0;
  if (v174)
    (*(void (**)(uint64_t))(*(_QWORD *)v174 + 8))(v174);
  v175 = *((_QWORD *)this + 278);
  *((_QWORD *)this + 278) = 0;
  if (v175)
    (*(void (**)(uint64_t))(*(_QWORD *)v175 + 8))(v175);
  v176 = *((_QWORD *)this + 277);
  *((_QWORD *)this + 277) = 0;
  if (v176)
    (*(void (**)(uint64_t))(*(_QWORD *)v176 + 8))(v176);
  v177 = *((_QWORD *)this + 276);
  *((_QWORD *)this + 276) = 0;
  if (v177)
    (*(void (**)(uint64_t))(*(_QWORD *)v177 + 8))(v177);
  v178 = *((_QWORD *)this + 275);
  *((_QWORD *)this + 275) = 0;
  if (v178)
    (*(void (**)(uint64_t))(*(_QWORD *)v178 + 8))(v178);
  v179 = *((_QWORD *)this + 274);
  *((_QWORD *)this + 274) = 0;
  if (v179)
    (*(void (**)(uint64_t))(*(_QWORD *)v179 + 8))(v179);
  v180 = *((_QWORD *)this + 273);
  *((_QWORD *)this + 273) = 0;
  if (v180)
    (*(void (**)(uint64_t))(*(_QWORD *)v180 + 8))(v180);
  v181 = *((_QWORD *)this + 272);
  *((_QWORD *)this + 272) = 0;
  if (v181)
    (*(void (**)(uint64_t))(*(_QWORD *)v181 + 8))(v181);
  v182 = *((_QWORD *)this + 271);
  *((_QWORD *)this + 271) = 0;
  if (v182)
    (*(void (**)(uint64_t))(*(_QWORD *)v182 + 8))(v182);
  v183 = *((_QWORD *)this + 270);
  *((_QWORD *)this + 270) = 0;
  if (v183)
    (*(void (**)(uint64_t))(*(_QWORD *)v183 + 8))(v183);
  v184 = *((_QWORD *)this + 269);
  *((_QWORD *)this + 269) = 0;
  if (v184)
    (*(void (**)(uint64_t))(*(_QWORD *)v184 + 8))(v184);
  v185 = *((_QWORD *)this + 268);
  *((_QWORD *)this + 268) = 0;
  if (v185)
    (*(void (**)(uint64_t))(*(_QWORD *)v185 + 8))(v185);
  v186 = *((_QWORD *)this + 267);
  *((_QWORD *)this + 267) = 0;
  if (v186)
    (*(void (**)(uint64_t))(*(_QWORD *)v186 + 8))(v186);
  v187 = *((_QWORD *)this + 266);
  *((_QWORD *)this + 266) = 0;
  if (v187)
    (*(void (**)(uint64_t))(*(_QWORD *)v187 + 8))(v187);
  v188 = *((_QWORD *)this + 265);
  *((_QWORD *)this + 265) = 0;
  if (v188)
    (*(void (**)(uint64_t))(*(_QWORD *)v188 + 8))(v188);
  v189 = *((_QWORD *)this + 264);
  *((_QWORD *)this + 264) = 0;
  if (v189)
    (*(void (**)(uint64_t))(*(_QWORD *)v189 + 8))(v189);
  v190 = *((_QWORD *)this + 263);
  *((_QWORD *)this + 263) = 0;
  if (v190)
    (*(void (**)(uint64_t))(*(_QWORD *)v190 + 8))(v190);
  v191 = *((_QWORD *)this + 262);
  *((_QWORD *)this + 262) = 0;
  if (v191)
    (*(void (**)(uint64_t))(*(_QWORD *)v191 + 8))(v191);
  v192 = *((_QWORD *)this + 261);
  *((_QWORD *)this + 261) = 0;
  if (v192)
    (*(void (**)(uint64_t))(*(_QWORD *)v192 + 8))(v192);
  v193 = *((_QWORD *)this + 260);
  *((_QWORD *)this + 260) = 0;
  if (v193)
    (*(void (**)(uint64_t))(*(_QWORD *)v193 + 8))(v193);
  v194 = *((_QWORD *)this + 259);
  *((_QWORD *)this + 259) = 0;
  if (v194)
    (*(void (**)(uint64_t))(*(_QWORD *)v194 + 8))(v194);
  v195 = *((_QWORD *)this + 258);
  *((_QWORD *)this + 258) = 0;
  if (v195)
    (*(void (**)(uint64_t))(*(_QWORD *)v195 + 8))(v195);
  v196 = *((_QWORD *)this + 257);
  *((_QWORD *)this + 257) = 0;
  if (v196)
    (*(void (**)(uint64_t))(*(_QWORD *)v196 + 8))(v196);
  v197 = *((_QWORD *)this + 256);
  *((_QWORD *)this + 256) = 0;
  if (v197)
    (*(void (**)(uint64_t))(*(_QWORD *)v197 + 8))(v197);
  v198 = *((_QWORD *)this + 255);
  *((_QWORD *)this + 255) = 0;
  if (v198)
    (*(void (**)(uint64_t))(*(_QWORD *)v198 + 8))(v198);
  v199 = *((_QWORD *)this + 254);
  *((_QWORD *)this + 254) = 0;
  if (v199)
    (*(void (**)(uint64_t))(*(_QWORD *)v199 + 8))(v199);
  v200 = *((_QWORD *)this + 253);
  *((_QWORD *)this + 253) = 0;
  if (v200)
    (*(void (**)(uint64_t))(*(_QWORD *)v200 + 8))(v200);
  v201 = *((_QWORD *)this + 252);
  *((_QWORD *)this + 252) = 0;
  if (v201)
    (*(void (**)(uint64_t))(*(_QWORD *)v201 + 8))(v201);
  v202 = *((_QWORD *)this + 251);
  *((_QWORD *)this + 251) = 0;
  if (v202)
    (*(void (**)(uint64_t))(*(_QWORD *)v202 + 8))(v202);
  v203 = *((_QWORD *)this + 250);
  *((_QWORD *)this + 250) = 0;
  if (v203)
    (*(void (**)(uint64_t))(*(_QWORD *)v203 + 8))(v203);
  v204 = *((_QWORD *)this + 249);
  *((_QWORD *)this + 249) = 0;
  if (v204)
    (*(void (**)(uint64_t))(*(_QWORD *)v204 + 8))(v204);
  v205 = *((_QWORD *)this + 248);
  *((_QWORD *)this + 248) = 0;
  if (v205)
    (*(void (**)(uint64_t))(*(_QWORD *)v205 + 8))(v205);
  v206 = *((_QWORD *)this + 247);
  *((_QWORD *)this + 247) = 0;
  if (v206)
    (*(void (**)(uint64_t))(*(_QWORD *)v206 + 8))(v206);
  v207 = *((_QWORD *)this + 246);
  *((_QWORD *)this + 246) = 0;
  if (v207)
    (*(void (**)(uint64_t))(*(_QWORD *)v207 + 8))(v207);
  v208 = *((_QWORD *)this + 245);
  *((_QWORD *)this + 245) = 0;
  if (v208)
    (*(void (**)(uint64_t))(*(_QWORD *)v208 + 8))(v208);
  v209 = *((_QWORD *)this + 244);
  *((_QWORD *)this + 244) = 0;
  if (v209)
    (*(void (**)(uint64_t))(*(_QWORD *)v209 + 8))(v209);
  v210 = *((_QWORD *)this + 243);
  *((_QWORD *)this + 243) = 0;
  if (v210)
    (*(void (**)(uint64_t))(*(_QWORD *)v210 + 8))(v210);
  v211 = *((_QWORD *)this + 242);
  *((_QWORD *)this + 242) = 0;
  if (v211)
    (*(void (**)(uint64_t))(*(_QWORD *)v211 + 8))(v211);
  v212 = *((_QWORD *)this + 241);
  *((_QWORD *)this + 241) = 0;
  if (v212)
    (*(void (**)(uint64_t))(*(_QWORD *)v212 + 8))(v212);
  v213 = *((_QWORD *)this + 240);
  *((_QWORD *)this + 240) = 0;
  if (v213)
    (*(void (**)(uint64_t))(*(_QWORD *)v213 + 8))(v213);
  v214 = *((_QWORD *)this + 239);
  *((_QWORD *)this + 239) = 0;
  if (v214)
    (*(void (**)(uint64_t))(*(_QWORD *)v214 + 8))(v214);
  v215 = *((_QWORD *)this + 238);
  *((_QWORD *)this + 238) = 0;
  if (v215)
    (*(void (**)(uint64_t))(*(_QWORD *)v215 + 8))(v215);
  v216 = *((_QWORD *)this + 237);
  *((_QWORD *)this + 237) = 0;
  if (v216)
    (*(void (**)(uint64_t))(*(_QWORD *)v216 + 8))(v216);
  v217 = *((_QWORD *)this + 236);
  *((_QWORD *)this + 236) = 0;
  if (v217)
    (*(void (**)(uint64_t))(*(_QWORD *)v217 + 8))(v217);
  v218 = *((_QWORD *)this + 235);
  *((_QWORD *)this + 235) = 0;
  if (v218)
    (*(void (**)(uint64_t))(*(_QWORD *)v218 + 8))(v218);
  v219 = *((_QWORD *)this + 234);
  *((_QWORD *)this + 234) = 0;
  if (v219)
    (*(void (**)(uint64_t))(*(_QWORD *)v219 + 8))(v219);
  v220 = *((_QWORD *)this + 233);
  *((_QWORD *)this + 233) = 0;
  if (v220)
    (*(void (**)(uint64_t))(*(_QWORD *)v220 + 8))(v220);
  v221 = *((_QWORD *)this + 232);
  *((_QWORD *)this + 232) = 0;
  if (v221)
    (*(void (**)(uint64_t))(*(_QWORD *)v221 + 8))(v221);
  v222 = *((_QWORD *)this + 231);
  *((_QWORD *)this + 231) = 0;
  if (v222)
    (*(void (**)(uint64_t))(*(_QWORD *)v222 + 8))(v222);
  v223 = *((_QWORD *)this + 230);
  *((_QWORD *)this + 230) = 0;
  if (v223)
    (*(void (**)(uint64_t))(*(_QWORD *)v223 + 8))(v223);
  v224 = *((_QWORD *)this + 229);
  *((_QWORD *)this + 229) = 0;
  if (v224)
    (*(void (**)(uint64_t))(*(_QWORD *)v224 + 8))(v224);
  v225 = *((_QWORD *)this + 228);
  *((_QWORD *)this + 228) = 0;
  if (v225)
    (*(void (**)(uint64_t))(*(_QWORD *)v225 + 8))(v225);
  v226 = *((_QWORD *)this + 227);
  *((_QWORD *)this + 227) = 0;
  if (v226)
    (*(void (**)(uint64_t))(*(_QWORD *)v226 + 8))(v226);
  v227 = *((_QWORD *)this + 226);
  *((_QWORD *)this + 226) = 0;
  if (v227)
    (*(void (**)(uint64_t))(*(_QWORD *)v227 + 8))(v227);
  v228 = *((_QWORD *)this + 225);
  *((_QWORD *)this + 225) = 0;
  if (v228)
    (*(void (**)(uint64_t))(*(_QWORD *)v228 + 8))(v228);
  v229 = *((_QWORD *)this + 224);
  *((_QWORD *)this + 224) = 0;
  if (v229)
    (*(void (**)(uint64_t))(*(_QWORD *)v229 + 8))(v229);
  v230 = *((_QWORD *)this + 223);
  *((_QWORD *)this + 223) = 0;
  if (v230)
    (*(void (**)(uint64_t))(*(_QWORD *)v230 + 8))(v230);
  v231 = *((_QWORD *)this + 222);
  *((_QWORD *)this + 222) = 0;
  if (v231)
    (*(void (**)(uint64_t))(*(_QWORD *)v231 + 8))(v231);
  v232 = *((_QWORD *)this + 221);
  *((_QWORD *)this + 221) = 0;
  if (v232)
    (*(void (**)(uint64_t))(*(_QWORD *)v232 + 8))(v232);
  v233 = *((_QWORD *)this + 220);
  *((_QWORD *)this + 220) = 0;
  if (v233)
    (*(void (**)(uint64_t))(*(_QWORD *)v233 + 8))(v233);
  v234 = *((_QWORD *)this + 219);
  *((_QWORD *)this + 219) = 0;
  if (v234)
    (*(void (**)(uint64_t))(*(_QWORD *)v234 + 8))(v234);
  v235 = *((_QWORD *)this + 218);
  *((_QWORD *)this + 218) = 0;
  if (v235)
    (*(void (**)(uint64_t))(*(_QWORD *)v235 + 8))(v235);
  v236 = *((_QWORD *)this + 217);
  *((_QWORD *)this + 217) = 0;
  if (v236)
    (*(void (**)(uint64_t))(*(_QWORD *)v236 + 8))(v236);
  v237 = *((_QWORD *)this + 216);
  *((_QWORD *)this + 216) = 0;
  if (v237)
    (*(void (**)(uint64_t))(*(_QWORD *)v237 + 8))(v237);
  v238 = *((_QWORD *)this + 215);
  *((_QWORD *)this + 215) = 0;
  if (v238)
    (*(void (**)(uint64_t))(*(_QWORD *)v238 + 8))(v238);
  v239 = *((_QWORD *)this + 214);
  *((_QWORD *)this + 214) = 0;
  if (v239)
    (*(void (**)(uint64_t))(*(_QWORD *)v239 + 8))(v239);
  v240 = *((_QWORD *)this + 213);
  *((_QWORD *)this + 213) = 0;
  if (v240)
    (*(void (**)(uint64_t))(*(_QWORD *)v240 + 8))(v240);
  v241 = *((_QWORD *)this + 212);
  *((_QWORD *)this + 212) = 0;
  if (v241)
    (*(void (**)(uint64_t))(*(_QWORD *)v241 + 8))(v241);
  v242 = *((_QWORD *)this + 211);
  *((_QWORD *)this + 211) = 0;
  if (v242)
    (*(void (**)(uint64_t))(*(_QWORD *)v242 + 8))(v242);
  v243 = *((_QWORD *)this + 210);
  *((_QWORD *)this + 210) = 0;
  if (v243)
    (*(void (**)(uint64_t))(*(_QWORD *)v243 + 8))(v243);
  v244 = *((_QWORD *)this + 209);
  *((_QWORD *)this + 209) = 0;
  if (v244)
    (*(void (**)(uint64_t))(*(_QWORD *)v244 + 8))(v244);
  v245 = *((_QWORD *)this + 208);
  *((_QWORD *)this + 208) = 0;
  if (v245)
    (*(void (**)(uint64_t))(*(_QWORD *)v245 + 8))(v245);
  v246 = *((_QWORD *)this + 207);
  *((_QWORD *)this + 207) = 0;
  if (v246)
    (*(void (**)(uint64_t))(*(_QWORD *)v246 + 8))(v246);
  v247 = *((_QWORD *)this + 206);
  *((_QWORD *)this + 206) = 0;
  if (v247)
    (*(void (**)(uint64_t))(*(_QWORD *)v247 + 8))(v247);
  v248 = *((_QWORD *)this + 205);
  *((_QWORD *)this + 205) = 0;
  if (v248)
    (*(void (**)(uint64_t))(*(_QWORD *)v248 + 8))(v248);
  v249 = *((_QWORD *)this + 204);
  *((_QWORD *)this + 204) = 0;
  if (v249)
    (*(void (**)(uint64_t))(*(_QWORD *)v249 + 8))(v249);
  v250 = *((_QWORD *)this + 203);
  *((_QWORD *)this + 203) = 0;
  if (v250)
    (*(void (**)(uint64_t))(*(_QWORD *)v250 + 8))(v250);
  v251 = *((_QWORD *)this + 202);
  *((_QWORD *)this + 202) = 0;
  if (v251)
    (*(void (**)(uint64_t))(*(_QWORD *)v251 + 8))(v251);
  v252 = *((_QWORD *)this + 201);
  *((_QWORD *)this + 201) = 0;
  if (v252)
    (*(void (**)(uint64_t))(*(_QWORD *)v252 + 8))(v252);
  v253 = *((_QWORD *)this + 200);
  *((_QWORD *)this + 200) = 0;
  if (v253)
    (*(void (**)(uint64_t))(*(_QWORD *)v253 + 8))(v253);
  v254 = *((_QWORD *)this + 199);
  *((_QWORD *)this + 199) = 0;
  if (v254)
    (*(void (**)(uint64_t))(*(_QWORD *)v254 + 8))(v254);
  v255 = *((_QWORD *)this + 198);
  *((_QWORD *)this + 198) = 0;
  if (v255)
    (*(void (**)(uint64_t))(*(_QWORD *)v255 + 8))(v255);
  v256 = *((_QWORD *)this + 197);
  *((_QWORD *)this + 197) = 0;
  if (v256)
    (*(void (**)(uint64_t))(*(_QWORD *)v256 + 8))(v256);
  v257 = *((_QWORD *)this + 196);
  *((_QWORD *)this + 196) = 0;
  if (v257)
    (*(void (**)(uint64_t))(*(_QWORD *)v257 + 8))(v257);
  v258 = *((_QWORD *)this + 195);
  *((_QWORD *)this + 195) = 0;
  if (v258)
    (*(void (**)(uint64_t))(*(_QWORD *)v258 + 8))(v258);
  v259 = *((_QWORD *)this + 194);
  *((_QWORD *)this + 194) = 0;
  if (v259)
    (*(void (**)(uint64_t))(*(_QWORD *)v259 + 8))(v259);
  v260 = *((_QWORD *)this + 193);
  *((_QWORD *)this + 193) = 0;
  if (v260)
    (*(void (**)(uint64_t))(*(_QWORD *)v260 + 8))(v260);
  v261 = *((_QWORD *)this + 192);
  *((_QWORD *)this + 192) = 0;
  if (v261)
    (*(void (**)(uint64_t))(*(_QWORD *)v261 + 8))(v261);
  v262 = *((_QWORD *)this + 191);
  *((_QWORD *)this + 191) = 0;
  if (v262)
    (*(void (**)(uint64_t))(*(_QWORD *)v262 + 8))(v262);
  v263 = *((_QWORD *)this + 190);
  *((_QWORD *)this + 190) = 0;
  if (v263)
    (*(void (**)(uint64_t))(*(_QWORD *)v263 + 8))(v263);
  v264 = *((_QWORD *)this + 189);
  *((_QWORD *)this + 189) = 0;
  if (v264)
    (*(void (**)(uint64_t))(*(_QWORD *)v264 + 8))(v264);
  v265 = *((_QWORD *)this + 188);
  *((_QWORD *)this + 188) = 0;
  if (v265)
    (*(void (**)(uint64_t))(*(_QWORD *)v265 + 8))(v265);
  v266 = *((_QWORD *)this + 187);
  *((_QWORD *)this + 187) = 0;
  if (v266)
    (*(void (**)(uint64_t))(*(_QWORD *)v266 + 8))(v266);
  v267 = *((_QWORD *)this + 186);
  *((_QWORD *)this + 186) = 0;
  if (v267)
    (*(void (**)(uint64_t))(*(_QWORD *)v267 + 8))(v267);
  v268 = *((_QWORD *)this + 185);
  *((_QWORD *)this + 185) = 0;
  if (v268)
    (*(void (**)(uint64_t))(*(_QWORD *)v268 + 8))(v268);
  v269 = *((_QWORD *)this + 184);
  *((_QWORD *)this + 184) = 0;
  if (v269)
    (*(void (**)(uint64_t))(*(_QWORD *)v269 + 8))(v269);
  v270 = *((_QWORD *)this + 183);
  *((_QWORD *)this + 183) = 0;
  if (v270)
    (*(void (**)(uint64_t))(*(_QWORD *)v270 + 8))(v270);
  v271 = *((_QWORD *)this + 182);
  *((_QWORD *)this + 182) = 0;
  if (v271)
    (*(void (**)(uint64_t))(*(_QWORD *)v271 + 8))(v271);
  v272 = *((_QWORD *)this + 181);
  *((_QWORD *)this + 181) = 0;
  if (v272)
    (*(void (**)(uint64_t))(*(_QWORD *)v272 + 8))(v272);
  v273 = *((_QWORD *)this + 180);
  *((_QWORD *)this + 180) = 0;
  if (v273)
    (*(void (**)(uint64_t))(*(_QWORD *)v273 + 8))(v273);
  v274 = *((_QWORD *)this + 179);
  *((_QWORD *)this + 179) = 0;
  if (v274)
    (*(void (**)(uint64_t))(*(_QWORD *)v274 + 8))(v274);
  v275 = *((_QWORD *)this + 178);
  *((_QWORD *)this + 178) = 0;
  if (v275)
    (*(void (**)(uint64_t))(*(_QWORD *)v275 + 8))(v275);
  v276 = *((_QWORD *)this + 177);
  *((_QWORD *)this + 177) = 0;
  if (v276)
    (*(void (**)(uint64_t))(*(_QWORD *)v276 + 8))(v276);
  v277 = *((_QWORD *)this + 176);
  *((_QWORD *)this + 176) = 0;
  if (v277)
    (*(void (**)(uint64_t))(*(_QWORD *)v277 + 8))(v277);
  v278 = *((_QWORD *)this + 175);
  *((_QWORD *)this + 175) = 0;
  if (v278)
    (*(void (**)(uint64_t))(*(_QWORD *)v278 + 8))(v278);
  v279 = *((_QWORD *)this + 174);
  *((_QWORD *)this + 174) = 0;
  if (v279)
    (*(void (**)(uint64_t))(*(_QWORD *)v279 + 8))(v279);
  v280 = *((_QWORD *)this + 173);
  *((_QWORD *)this + 173) = 0;
  if (v280)
    (*(void (**)(uint64_t))(*(_QWORD *)v280 + 8))(v280);
  v281 = *((_QWORD *)this + 172);
  *((_QWORD *)this + 172) = 0;
  if (v281)
    (*(void (**)(uint64_t))(*(_QWORD *)v281 + 8))(v281);
  v282 = *((_QWORD *)this + 171);
  *((_QWORD *)this + 171) = 0;
  if (v282)
    (*(void (**)(uint64_t))(*(_QWORD *)v282 + 8))(v282);
  v283 = *((_QWORD *)this + 170);
  *((_QWORD *)this + 170) = 0;
  if (v283)
    (*(void (**)(uint64_t))(*(_QWORD *)v283 + 8))(v283);
  v284 = *((_QWORD *)this + 169);
  *((_QWORD *)this + 169) = 0;
  if (v284)
    (*(void (**)(uint64_t))(*(_QWORD *)v284 + 8))(v284);
  v285 = *((_QWORD *)this + 168);
  *((_QWORD *)this + 168) = 0;
  if (v285)
    (*(void (**)(uint64_t))(*(_QWORD *)v285 + 8))(v285);
  v286 = *((_QWORD *)this + 167);
  *((_QWORD *)this + 167) = 0;
  if (v286)
    (*(void (**)(uint64_t))(*(_QWORD *)v286 + 8))(v286);
  v287 = *((_QWORD *)this + 166);
  *((_QWORD *)this + 166) = 0;
  if (v287)
    (*(void (**)(uint64_t))(*(_QWORD *)v287 + 8))(v287);
  v288 = *((_QWORD *)this + 165);
  *((_QWORD *)this + 165) = 0;
  if (v288)
    (*(void (**)(uint64_t))(*(_QWORD *)v288 + 8))(v288);
  v289 = *((_QWORD *)this + 164);
  *((_QWORD *)this + 164) = 0;
  if (v289)
    (*(void (**)(uint64_t))(*(_QWORD *)v289 + 8))(v289);
  v290 = *((_QWORD *)this + 163);
  *((_QWORD *)this + 163) = 0;
  if (v290)
    (*(void (**)(uint64_t))(*(_QWORD *)v290 + 8))(v290);
  v291 = *((_QWORD *)this + 162);
  *((_QWORD *)this + 162) = 0;
  if (v291)
    (*(void (**)(uint64_t))(*(_QWORD *)v291 + 8))(v291);
  v292 = *((_QWORD *)this + 161);
  *((_QWORD *)this + 161) = 0;
  if (v292)
    (*(void (**)(uint64_t))(*(_QWORD *)v292 + 8))(v292);
  v293 = *((_QWORD *)this + 160);
  *((_QWORD *)this + 160) = 0;
  if (v293)
    (*(void (**)(uint64_t))(*(_QWORD *)v293 + 8))(v293);
  v294 = *((_QWORD *)this + 159);
  *((_QWORD *)this + 159) = 0;
  if (v294)
    (*(void (**)(uint64_t))(*(_QWORD *)v294 + 8))(v294);
  v295 = *((_QWORD *)this + 158);
  *((_QWORD *)this + 158) = 0;
  if (v295)
    (*(void (**)(uint64_t))(*(_QWORD *)v295 + 8))(v295);
  v296 = *((_QWORD *)this + 157);
  *((_QWORD *)this + 157) = 0;
  if (v296)
    (*(void (**)(uint64_t))(*(_QWORD *)v296 + 8))(v296);
  v297 = *((_QWORD *)this + 156);
  *((_QWORD *)this + 156) = 0;
  if (v297)
    (*(void (**)(uint64_t))(*(_QWORD *)v297 + 8))(v297);
  v298 = *((_QWORD *)this + 155);
  *((_QWORD *)this + 155) = 0;
  if (v298)
    (*(void (**)(uint64_t))(*(_QWORD *)v298 + 8))(v298);
  v299 = *((_QWORD *)this + 154);
  *((_QWORD *)this + 154) = 0;
  if (v299)
    (*(void (**)(uint64_t))(*(_QWORD *)v299 + 8))(v299);
  v300 = *((_QWORD *)this + 153);
  *((_QWORD *)this + 153) = 0;
  if (v300)
    (*(void (**)(uint64_t))(*(_QWORD *)v300 + 8))(v300);
  v301 = *((_QWORD *)this + 152);
  *((_QWORD *)this + 152) = 0;
  if (v301)
    (*(void (**)(uint64_t))(*(_QWORD *)v301 + 8))(v301);
  v302 = *((_QWORD *)this + 151);
  *((_QWORD *)this + 151) = 0;
  if (v302)
    (*(void (**)(uint64_t))(*(_QWORD *)v302 + 8))(v302);
  v303 = *((_QWORD *)this + 150);
  *((_QWORD *)this + 150) = 0;
  if (v303)
    (*(void (**)(uint64_t))(*(_QWORD *)v303 + 8))(v303);
  v304 = *((_QWORD *)this + 149);
  *((_QWORD *)this + 149) = 0;
  if (v304)
    (*(void (**)(uint64_t))(*(_QWORD *)v304 + 8))(v304);
  v305 = *((_QWORD *)this + 148);
  *((_QWORD *)this + 148) = 0;
  if (v305)
    (*(void (**)(uint64_t))(*(_QWORD *)v305 + 8))(v305);
  v306 = *((_QWORD *)this + 147);
  *((_QWORD *)this + 147) = 0;
  if (v306)
    (*(void (**)(uint64_t))(*(_QWORD *)v306 + 8))(v306);
  v307 = *((_QWORD *)this + 146);
  *((_QWORD *)this + 146) = 0;
  if (v307)
    (*(void (**)(uint64_t))(*(_QWORD *)v307 + 8))(v307);
  v308 = *((_QWORD *)this + 145);
  *((_QWORD *)this + 145) = 0;
  if (v308)
    (*(void (**)(uint64_t))(*(_QWORD *)v308 + 8))(v308);
  v309 = *((_QWORD *)this + 144);
  *((_QWORD *)this + 144) = 0;
  if (v309)
    (*(void (**)(uint64_t))(*(_QWORD *)v309 + 8))(v309);
  v310 = *((_QWORD *)this + 143);
  *((_QWORD *)this + 143) = 0;
  if (v310)
    (*(void (**)(uint64_t))(*(_QWORD *)v310 + 8))(v310);
  v311 = *((_QWORD *)this + 142);
  *((_QWORD *)this + 142) = 0;
  if (v311)
    (*(void (**)(uint64_t))(*(_QWORD *)v311 + 8))(v311);
  v312 = *((_QWORD *)this + 141);
  *((_QWORD *)this + 141) = 0;
  if (v312)
    (*(void (**)(uint64_t))(*(_QWORD *)v312 + 8))(v312);
  v313 = *((_QWORD *)this + 140);
  *((_QWORD *)this + 140) = 0;
  if (v313)
    (*(void (**)(uint64_t))(*(_QWORD *)v313 + 8))(v313);
  v314 = *((_QWORD *)this + 139);
  *((_QWORD *)this + 139) = 0;
  if (v314)
    (*(void (**)(uint64_t))(*(_QWORD *)v314 + 8))(v314);
  v315 = *((_QWORD *)this + 138);
  *((_QWORD *)this + 138) = 0;
  if (v315)
    (*(void (**)(uint64_t))(*(_QWORD *)v315 + 8))(v315);
  v316 = *((_QWORD *)this + 137);
  *((_QWORD *)this + 137) = 0;
  if (v316)
    (*(void (**)(uint64_t))(*(_QWORD *)v316 + 8))(v316);
  v317 = *((_QWORD *)this + 136);
  *((_QWORD *)this + 136) = 0;
  if (v317)
    (*(void (**)(uint64_t))(*(_QWORD *)v317 + 8))(v317);
  v318 = *((_QWORD *)this + 135);
  *((_QWORD *)this + 135) = 0;
  if (v318)
    (*(void (**)(uint64_t))(*(_QWORD *)v318 + 8))(v318);
  v319 = *((_QWORD *)this + 134);
  *((_QWORD *)this + 134) = 0;
  if (v319)
    (*(void (**)(uint64_t))(*(_QWORD *)v319 + 8))(v319);
  v320 = *((_QWORD *)this + 133);
  *((_QWORD *)this + 133) = 0;
  if (v320)
    (*(void (**)(uint64_t))(*(_QWORD *)v320 + 8))(v320);
  v321 = *((_QWORD *)this + 132);
  *((_QWORD *)this + 132) = 0;
  if (v321)
    (*(void (**)(uint64_t))(*(_QWORD *)v321 + 8))(v321);
  v322 = *((_QWORD *)this + 131);
  *((_QWORD *)this + 131) = 0;
  if (v322)
    (*(void (**)(uint64_t))(*(_QWORD *)v322 + 8))(v322);
  v323 = *((_QWORD *)this + 130);
  *((_QWORD *)this + 130) = 0;
  if (v323)
    (*(void (**)(uint64_t))(*(_QWORD *)v323 + 8))(v323);
  v324 = *((_QWORD *)this + 129);
  *((_QWORD *)this + 129) = 0;
  if (v324)
    (*(void (**)(uint64_t))(*(_QWORD *)v324 + 8))(v324);
  v325 = *((_QWORD *)this + 128);
  *((_QWORD *)this + 128) = 0;
  if (v325)
    (*(void (**)(uint64_t))(*(_QWORD *)v325 + 8))(v325);
  v326 = *((_QWORD *)this + 127);
  *((_QWORD *)this + 127) = 0;
  if (v326)
    (*(void (**)(uint64_t))(*(_QWORD *)v326 + 8))(v326);
  v327 = *((_QWORD *)this + 126);
  *((_QWORD *)this + 126) = 0;
  if (v327)
    (*(void (**)(uint64_t))(*(_QWORD *)v327 + 8))(v327);
  v328 = *((_QWORD *)this + 125);
  *((_QWORD *)this + 125) = 0;
  if (v328)
    (*(void (**)(uint64_t))(*(_QWORD *)v328 + 8))(v328);
  v329 = *((_QWORD *)this + 124);
  *((_QWORD *)this + 124) = 0;
  if (v329)
    (*(void (**)(uint64_t))(*(_QWORD *)v329 + 8))(v329);
  v330 = *((_QWORD *)this + 123);
  *((_QWORD *)this + 123) = 0;
  if (v330)
    (*(void (**)(uint64_t))(*(_QWORD *)v330 + 8))(v330);
  v331 = *((_QWORD *)this + 122);
  *((_QWORD *)this + 122) = 0;
  if (v331)
    (*(void (**)(uint64_t))(*(_QWORD *)v331 + 8))(v331);
  v332 = *((_QWORD *)this + 121);
  *((_QWORD *)this + 121) = 0;
  if (v332)
    (*(void (**)(uint64_t))(*(_QWORD *)v332 + 8))(v332);
  v333 = *((_QWORD *)this + 120);
  *((_QWORD *)this + 120) = 0;
  if (v333)
    (*(void (**)(uint64_t))(*(_QWORD *)v333 + 8))(v333);
  v334 = *((_QWORD *)this + 119);
  *((_QWORD *)this + 119) = 0;
  if (v334)
    (*(void (**)(uint64_t))(*(_QWORD *)v334 + 8))(v334);
  v335 = *((_QWORD *)this + 118);
  *((_QWORD *)this + 118) = 0;
  if (v335)
    (*(void (**)(uint64_t))(*(_QWORD *)v335 + 8))(v335);
  v336 = *((_QWORD *)this + 117);
  *((_QWORD *)this + 117) = 0;
  if (v336)
    (*(void (**)(uint64_t))(*(_QWORD *)v336 + 8))(v336);
  v337 = *((_QWORD *)this + 116);
  *((_QWORD *)this + 116) = 0;
  if (v337)
    (*(void (**)(uint64_t))(*(_QWORD *)v337 + 8))(v337);
  v338 = *((_QWORD *)this + 115);
  *((_QWORD *)this + 115) = 0;
  if (v338)
    (*(void (**)(uint64_t))(*(_QWORD *)v338 + 8))(v338);
  v339 = *((_QWORD *)this + 114);
  *((_QWORD *)this + 114) = 0;
  if (v339)
    (*(void (**)(uint64_t))(*(_QWORD *)v339 + 8))(v339);
  v340 = *((_QWORD *)this + 113);
  *((_QWORD *)this + 113) = 0;
  if (v340)
    (*(void (**)(uint64_t))(*(_QWORD *)v340 + 8))(v340);
  v341 = *((_QWORD *)this + 112);
  *((_QWORD *)this + 112) = 0;
  if (v341)
    (*(void (**)(uint64_t))(*(_QWORD *)v341 + 8))(v341);
  v342 = *((_QWORD *)this + 111);
  *((_QWORD *)this + 111) = 0;
  if (v342)
    (*(void (**)(uint64_t))(*(_QWORD *)v342 + 8))(v342);
  v343 = *((_QWORD *)this + 110);
  *((_QWORD *)this + 110) = 0;
  if (v343)
    (*(void (**)(uint64_t))(*(_QWORD *)v343 + 8))(v343);
  v344 = *((_QWORD *)this + 109);
  *((_QWORD *)this + 109) = 0;
  if (v344)
    (*(void (**)(uint64_t))(*(_QWORD *)v344 + 8))(v344);
  v345 = *((_QWORD *)this + 108);
  *((_QWORD *)this + 108) = 0;
  if (v345)
    (*(void (**)(uint64_t))(*(_QWORD *)v345 + 8))(v345);
  v346 = *((_QWORD *)this + 107);
  *((_QWORD *)this + 107) = 0;
  if (v346)
    (*(void (**)(uint64_t))(*(_QWORD *)v346 + 8))(v346);
  v347 = *((_QWORD *)this + 106);
  *((_QWORD *)this + 106) = 0;
  if (v347)
    (*(void (**)(uint64_t))(*(_QWORD *)v347 + 8))(v347);
  v348 = *((_QWORD *)this + 105);
  *((_QWORD *)this + 105) = 0;
  if (v348)
    (*(void (**)(uint64_t))(*(_QWORD *)v348 + 8))(v348);
  v349 = *((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = 0;
  if (v349)
    (*(void (**)(uint64_t))(*(_QWORD *)v349 + 8))(v349);
  v350 = *((_QWORD *)this + 103);
  *((_QWORD *)this + 103) = 0;
  if (v350)
    (*(void (**)(uint64_t))(*(_QWORD *)v350 + 8))(v350);
  v351 = *((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v351)
    (*(void (**)(uint64_t))(*(_QWORD *)v351 + 8))(v351);
  v352 = *((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v352)
    (*(void (**)(uint64_t))(*(_QWORD *)v352 + 8))(v352);
  v353 = *((_QWORD *)this + 100);
  *((_QWORD *)this + 100) = 0;
  if (v353)
    (*(void (**)(uint64_t))(*(_QWORD *)v353 + 8))(v353);
  v354 = *((_QWORD *)this + 99);
  *((_QWORD *)this + 99) = 0;
  if (v354)
    (*(void (**)(uint64_t))(*(_QWORD *)v354 + 8))(v354);
  v355 = *((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = 0;
  if (v355)
    (*(void (**)(uint64_t))(*(_QWORD *)v355 + 8))(v355);
  v356 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v356)
    (*(void (**)(uint64_t))(*(_QWORD *)v356 + 8))(v356);
  v357 = *((_QWORD *)this + 96);
  *((_QWORD *)this + 96) = 0;
  if (v357)
    (*(void (**)(uint64_t))(*(_QWORD *)v357 + 8))(v357);
  v358 = *((_QWORD *)this + 95);
  *((_QWORD *)this + 95) = 0;
  if (v358)
    (*(void (**)(uint64_t))(*(_QWORD *)v358 + 8))(v358);
  v359 = *((_QWORD *)this + 94);
  *((_QWORD *)this + 94) = 0;
  if (v359)
    (*(void (**)(uint64_t))(*(_QWORD *)v359 + 8))(v359);
  v360 = *((_QWORD *)this + 93);
  *((_QWORD *)this + 93) = 0;
  if (v360)
    (*(void (**)(uint64_t))(*(_QWORD *)v360 + 8))(v360);
  v361 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v361)
    (*(void (**)(uint64_t))(*(_QWORD *)v361 + 8))(v361);
  v362 = *((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v362)
    (*(void (**)(uint64_t))(*(_QWORD *)v362 + 8))(v362);
  v363 = *((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = 0;
  if (v363)
    (*(void (**)(uint64_t))(*(_QWORD *)v363 + 8))(v363);
  v364 = *((_QWORD *)this + 89);
  *((_QWORD *)this + 89) = 0;
  if (v364)
    (*(void (**)(uint64_t))(*(_QWORD *)v364 + 8))(v364);
  v365 = *((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = 0;
  if (v365)
    (*(void (**)(uint64_t))(*(_QWORD *)v365 + 8))(v365);
  v366 = *((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = 0;
  if (v366)
    (*(void (**)(uint64_t))(*(_QWORD *)v366 + 8))(v366);
  v367 = *((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = 0;
  if (v367)
    (*(void (**)(uint64_t))(*(_QWORD *)v367 + 8))(v367);
  v368 = *((_QWORD *)this + 85);
  *((_QWORD *)this + 85) = 0;
  if (v368)
    (*(void (**)(uint64_t))(*(_QWORD *)v368 + 8))(v368);
  v369 = *((_QWORD *)this + 84);
  *((_QWORD *)this + 84) = 0;
  if (v369)
    (*(void (**)(uint64_t))(*(_QWORD *)v369 + 8))(v369);
  v370 = *((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (v370)
    (*(void (**)(uint64_t))(*(_QWORD *)v370 + 8))(v370);
  v371 = *((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v371)
    (*(void (**)(uint64_t))(*(_QWORD *)v371 + 8))(v371);
  v372 = *((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = 0;
  if (v372)
    (*(void (**)(uint64_t))(*(_QWORD *)v372 + 8))(v372);
  v373 = *((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = 0;
  if (v373)
    (*(void (**)(uint64_t))(*(_QWORD *)v373 + 8))(v373);
  v374 = *((_QWORD *)this + 79);
  *((_QWORD *)this + 79) = 0;
  if (v374)
    (*(void (**)(uint64_t))(*(_QWORD *)v374 + 8))(v374);
  v375 = *((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0;
  if (v375)
    (*(void (**)(uint64_t))(*(_QWORD *)v375 + 8))(v375);
  v376 = *((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = 0;
  if (v376)
    (*(void (**)(uint64_t))(*(_QWORD *)v376 + 8))(v376);
  v377 = *((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;
  if (v377)
    (*(void (**)(uint64_t))(*(_QWORD *)v377 + 8))(v377);
  v378 = *((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = 0;
  if (v378)
    (*(void (**)(uint64_t))(*(_QWORD *)v378 + 8))(v378);
  v379 = *((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = 0;
  if (v379)
    (*(void (**)(uint64_t))(*(_QWORD *)v379 + 8))(v379);
  v380 = *((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v380)
    (*(void (**)(uint64_t))(*(_QWORD *)v380 + 8))(v380);
  v381 = *((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = 0;
  if (v381)
    (*(void (**)(uint64_t))(*(_QWORD *)v381 + 8))(v381);
  v382 = *((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v382)
    (*(void (**)(uint64_t))(*(_QWORD *)v382 + 8))(v382);
  v383 = *((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = 0;
  if (v383)
    (*(void (**)(uint64_t))(*(_QWORD *)v383 + 8))(v383);
  v384 = *((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = 0;
  if (v384)
    (*(void (**)(uint64_t))(*(_QWORD *)v384 + 8))(v384);
  v385 = *((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v385)
    (*(void (**)(uint64_t))(*(_QWORD *)v385 + 8))(v385);
  v386 = *((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v386)
    (*(void (**)(uint64_t))(*(_QWORD *)v386 + 8))(v386);
  v387 = *((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v387)
    (*(void (**)(uint64_t))(*(_QWORD *)v387 + 8))(v387);
  v388 = *((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v388)
    (*(void (**)(uint64_t))(*(_QWORD *)v388 + 8))(v388);
  v389 = *((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = 0;
  if (v389)
    (*(void (**)(uint64_t))(*(_QWORD *)v389 + 8))(v389);
  v390 = *((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v390)
    (*(void (**)(uint64_t))(*(_QWORD *)v390 + 8))(v390);
  v391 = *((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v391)
    (*(void (**)(uint64_t))(*(_QWORD *)v391 + 8))(v391);
  v392 = *((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v392)
    (*(void (**)(uint64_t))(*(_QWORD *)v392 + 8))(v392);
  v393 = *((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v393)
    (*(void (**)(uint64_t))(*(_QWORD *)v393 + 8))(v393);
  v394 = *((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v394)
    (*(void (**)(uint64_t))(*(_QWORD *)v394 + 8))(v394);
  v395 = *((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v395)
    (*(void (**)(uint64_t))(*(_QWORD *)v395 + 8))(v395);
  v396 = *((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v396)
    (*(void (**)(uint64_t))(*(_QWORD *)v396 + 8))(v396);
  v397 = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v397)
    (*(void (**)(uint64_t))(*(_QWORD *)v397 + 8))(v397);
  v398 = *((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v398)
    (*(void (**)(uint64_t))(*(_QWORD *)v398 + 8))(v398);
  v399 = *((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v399)
    (*(void (**)(uint64_t))(*(_QWORD *)v399 + 8))(v399);
  v400 = *((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v400)
    (*(void (**)(uint64_t))(*(_QWORD *)v400 + 8))(v400);
  v401 = *((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v401)
    (*(void (**)(uint64_t))(*(_QWORD *)v401 + 8))(v401);
  v402 = *((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v402)
    (*(void (**)(uint64_t))(*(_QWORD *)v402 + 8))(v402);
  v403 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v403)
    (*(void (**)(uint64_t))(*(_QWORD *)v403 + 8))(v403);
  v404 = *((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v404)
    (*(void (**)(uint64_t))(*(_QWORD *)v404 + 8))(v404);
  v405 = *((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v405)
    (*(void (**)(uint64_t))(*(_QWORD *)v405 + 8))(v405);
  v406 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v406)
    (*(void (**)(uint64_t))(*(_QWORD *)v406 + 8))(v406);
  v407 = *((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v407)
    (*(void (**)(uint64_t))(*(_QWORD *)v407 + 8))(v407);
  v408 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v408)
    (*(void (**)(uint64_t))(*(_QWORD *)v408 + 8))(v408);
  v409 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v409)
    (*(void (**)(uint64_t))(*(_QWORD *)v409 + 8))(v409);
  v410 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v410)
    (*(void (**)(uint64_t))(*(_QWORD *)v410 + 8))(v410);
  v411 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v411)
    (*(void (**)(uint64_t))(*(_QWORD *)v411 + 8))(v411);
  v412 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v412)
    (*(void (**)(uint64_t))(*(_QWORD *)v412 + 8))(v412);
  v413 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v413)
    (*(void (**)(uint64_t))(*(_QWORD *)v413 + 8))(v413);
  v414 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v414)
    (*(void (**)(uint64_t))(*(_QWORD *)v414 + 8))(v414);
  v415 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v415)
    (*(void (**)(uint64_t))(*(_QWORD *)v415 + 8))(v415);
  v416 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v416)
    (*(void (**)(uint64_t))(*(_QWORD *)v416 + 8))(v416);
  v417 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v417)
    (*(void (**)(uint64_t))(*(_QWORD *)v417 + 8))(v417);
  v418 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v418)
    (*(void (**)(uint64_t))(*(_QWORD *)v418 + 8))(v418);
  v419 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v419)
    (*(void (**)(uint64_t))(*(_QWORD *)v419 + 8))(v419);
  v420 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v420)
    (*(void (**)(uint64_t))(*(_QWORD *)v420 + 8))(v420);
  v421 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v421)
    (*(void (**)(uint64_t))(*(_QWORD *)v421 + 8))(v421);
  v422 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v422)
    (*(void (**)(uint64_t))(*(_QWORD *)v422 + 8))(v422);
  v423 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v423)
    (*(void (**)(uint64_t))(*(_QWORD *)v423 + 8))(v423);
  v424 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v424)
    (*(void (**)(uint64_t))(*(_QWORD *)v424 + 8))(v424);
  v425 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v425)
    (*(void (**)(uint64_t))(*(_QWORD *)v425 + 8))(v425);
  v426 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v426)
    (*(void (**)(uint64_t))(*(_QWORD *)v426 + 8))(v426);
  v427 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v427)
    (*(void (**)(uint64_t))(*(_QWORD *)v427 + 8))(v427);
  v428 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v428)
    (*(void (**)(uint64_t))(*(_QWORD *)v428 + 8))(v428);
  v429 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v429)
    (*(void (**)(uint64_t))(*(_QWORD *)v429 + 8))(v429);
  v430 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v430)
    (*(void (**)(uint64_t))(*(_QWORD *)v430 + 8))(v430);
  v431 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v431)
    (*(void (**)(uint64_t))(*(_QWORD *)v431 + 8))(v431);
  v432 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v432)
    (*(void (**)(uint64_t))(*(_QWORD *)v432 + 8))(v432);
  v433 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v433)
    (*(void (**)(uint64_t))(*(_QWORD *)v433 + 8))(v433);
  v434 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v434)
    (*(void (**)(uint64_t))(*(_QWORD *)v434 + 8))(v434);
  v435 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v435)
    (*(void (**)(uint64_t))(*(_QWORD *)v435 + 8))(v435);
  v436 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v436)
    (*(void (**)(uint64_t))(*(_QWORD *)v436 + 8))(v436);
  v437 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v437)
    (*(void (**)(uint64_t))(*(_QWORD *)v437 + 8))(v437);
  v438 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v438)
    (*(void (**)(uint64_t))(*(_QWORD *)v438 + 8))(v438);
  v439 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v439)
    (*(void (**)(uint64_t))(*(_QWORD *)v439 + 8))(v439);
  v440 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v440)
    (*(void (**)(uint64_t))(*(_QWORD *)v440 + 8))(v440);
  v441 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v441)
    (*(void (**)(uint64_t))(*(_QWORD *)v441 + 8))(v441);
  v442 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v442)
    (*(void (**)(uint64_t))(*(_QWORD *)v442 + 8))(v442);
  v443 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v443)
    (*(void (**)(uint64_t))(*(_QWORD *)v443 + 8))(v443);
  v444 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v444)
    (*(void (**)(uint64_t))(*(_QWORD *)v444 + 8))(v444);
  v445 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v445)
    (*(void (**)(uint64_t))(*(_QWORD *)v445 + 8))(v445);
  v446 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v446)
    (*(void (**)(uint64_t))(*(_QWORD *)v446 + 8))(v446);
  v447 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v447)
    (*(void (**)(uint64_t))(*(_QWORD *)v447 + 8))(v447);
  v448 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v448)
    (*(void (**)(uint64_t))(*(_QWORD *)v448 + 8))(v448);
  v449 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v449)
    (*(void (**)(uint64_t))(*(_QWORD *)v449 + 8))(v449);
  v450 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v450)
    (*(void (**)(uint64_t))(*(_QWORD *)v450 + 8))(v450);
  v451 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v451)
    (*(void (**)(uint64_t))(*(_QWORD *)v451 + 8))(v451);
  PB::Base::~Base(this);
}

void sub_1015EE308(PB::Base *a1)
{
  sub_1015EB8A8(a1);
  operator delete();
}

uint64_t sub_1015EE32C(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_1021C1AE8;
  v4 = (void *)(a1 + 624);
  bzero((void *)(a1 + 8), 0x260uLL);
  bzero(v4, 0xBB4uLL);
  if ((*(_BYTE *)(a2 + 3616) & 1) != 0)
  {
    v5 = *(_QWORD *)(a2 + 616);
    *(_BYTE *)(a1 + 3616) = 1;
    *(_QWORD *)(a1 + 616) = v5;
  }
  if (*(_QWORD *)(a2 + 1168))
    operator new();
  if (*(_QWORD *)(a2 + 1160))
    operator new();
  if (*(_QWORD *)(a2 + 1136))
    operator new();
  if (*(_QWORD *)(a2 + 1128))
    operator new();
  if (*(_QWORD *)(a2 + 680))
    operator new();
  if (*(_QWORD *)(a2 + 672))
    operator new();
  if (*(_QWORD *)(a2 + 728))
    operator new();
  if (*(_QWORD *)(a2 + 720))
    operator new();
  if (*(_QWORD *)(a2 + 1440))
    operator new();
  if (*(_QWORD *)(a2 + 760))
    operator new();
  if (*(_QWORD *)(a2 + 88))
    operator new();
  if (*(_QWORD *)(a2 + 144))
    operator new();
  if (*(_QWORD *)(a2 + 216))
    operator new();
  if (*(_QWORD *)(a2 + 3448))
    operator new();
  if (*(_QWORD *)(a2 + 3472))
    operator new();
  if (*(_QWORD *)(a2 + 3488))
    operator new();
  if (*(_QWORD *)(a2 + 3520))
    operator new();
  if (*(_QWORD *)(a2 + 3552))
    operator new();
  if (*(_QWORD *)(a2 + 3536))
    operator new();
  if (*(_QWORD *)(a2 + 3584))
    operator new();
  if (*(_QWORD *)(a2 + 3320))
    operator new();
  if (*(_QWORD *)(a2 + 544))
    operator new();
  if (*(_QWORD *)(a2 + 552))
    operator new();
  if (*(_QWORD *)(a2 + 560))
    operator new();
  if (*(_QWORD *)(a2 + 536))
    operator new();
  if (*(_QWORD *)(a2 + 568))
    operator new();
  if (*(_QWORD *)(a2 + 3512))
    operator new();
  if (*(_QWORD *)(a2 + 2304))
    operator new();
  if (*(_QWORD *)(a2 + 2720))
    operator new();
  if (*(_QWORD *)(a2 + 3568))
    operator new();
  if (*(_QWORD *)(a2 + 3400))
    operator new();
  if (*(_QWORD *)(a2 + 608))
    operator new();
  if (*(_QWORD *)(a2 + 3416))
    operator new();
  if (*(_QWORD *)(a2 + 1408))
    operator new();
  if (*(_QWORD *)(a2 + 1392))
    operator new();
  if (*(_QWORD *)(a2 + 1352))
    operator new();
  if (*(_QWORD *)(a2 + 224))
    operator new();
  if (*(_QWORD *)(a2 + 232))
    operator new();
  if (*(_QWORD *)(a2 + 272))
    operator new();
  if (*(_QWORD *)(a2 + 912))
    operator new();
  if (*(_QWORD *)(a2 + 3576))
    operator new();
  if (*(_QWORD *)(a2 + 3544))
    operator new();
  if (*(_QWORD *)(a2 + 1344))
    operator new();
  if (*(_QWORD *)(a2 + 128))
    operator new();
  if (*(_QWORD *)(a2 + 3280))
    operator new();
  if (*(_QWORD *)(a2 + 352))
    operator new();
  if (*(_QWORD *)(a2 + 3256))
    operator new();
  if (*(_QWORD *)(a2 + 1880))
    operator new();
  if (*(_QWORD *)(a2 + 1000))
    operator new();
  if (*(_QWORD *)(a2 + 80))
    operator new();
  if (*(_QWORD *)(a2 + 2072))
    operator new();
  if (*(_QWORD *)(a2 + 3032))
    operator new();
  if (*(_QWORD *)(a2 + 1960))
    operator new();
  if (*(_QWORD *)(a2 + 712))
    operator new();
  if (*(_QWORD *)(a2 + 3264))
    operator new();
  if (*(_QWORD *)(a2 + 2848))
    operator new();
  if (*(_QWORD *)(a2 + 3272))
    operator new();
  if (*(_QWORD *)(a2 + 3312))
    operator new();
  if (*(_QWORD *)(a2 + 1752))
    operator new();
  if (*(_QWORD *)(a2 + 1552))
    operator new();
  if (*(_QWORD *)(a2 + 1328))
    operator new();
  if (*(_QWORD *)(a2 + 1720))
    operator new();
  if (*(_QWORD *)(a2 + 3176))
    operator new();
  if (*(_QWORD *)(a2 + 1680))
    operator new();
  if (*(_QWORD *)(a2 + 3184))
    operator new();
  if (*(_QWORD *)(a2 + 376))
    operator new();
  if (*(_QWORD *)(a2 + 3128))
    operator new();
  if (*(_QWORD *)(a2 + 368))
    operator new();
  if (*(_QWORD *)(a2 + 3136))
    operator new();
  if (*(_QWORD *)(a2 + 3456))
    operator new();
  if (*(_QWORD *)(a2 + 296))
    operator new();
  if (*(_QWORD *)(a2 + 3440))
    operator new();
  if (*(_QWORD *)(a2 + 3288))
    operator new();
  if (*(_QWORD *)(a2 + 1240))
    operator new();
  if (*(_QWORD *)(a2 + 2936))
    operator new();
  if (*(_QWORD *)(a2 + 1048))
    operator new();
  if (*(_QWORD *)(a2 + 872))
    operator new();
  if (*(_QWORD *)(a2 + 32))
    operator new();
  if (*(_QWORD *)(a2 + 2024))
    operator new();
  if (*(_QWORD *)(a2 + 1984))
    operator new();
  if (*(_QWORD *)(a2 + 496))
    operator new();
  if (*(_QWORD *)(a2 + 1736))
    operator new();
  if (*(_QWORD *)(a2 + 2664))
    operator new();
  if (*(_QWORD *)(a2 + 1464))
    operator new();
  if (*(_QWORD *)(a2 + 704))
    operator new();
  if (*(_QWORD *)(a2 + 1208))
    operator new();
  if (*(_QWORD *)(a2 + 1216))
    operator new();
  if (*(_QWORD *)(a2 + 1200))
    operator new();
  if (*(_QWORD *)(a2 + 1192))
    operator new();
  if (*(_QWORD *)(a2 + 472))
    operator new();
  if (*(_QWORD *)(a2 + 1056))
    operator new();
  if (*(_QWORD *)(a2 + 1976))
    operator new();
  if (*(_QWORD *)(a2 + 1888))
    operator new();
  if (*(_QWORD *)(a2 + 2432))
    operator new();
  if (*(_QWORD *)(a2 + 2440))
    operator new();
  if (*(_QWORD *)(a2 + 504))
    operator new();
  if (*(_QWORD *)(a2 + 1472))
    operator new();
  if (*(_QWORD *)(a2 + 696))
    operator new();
  if (*(_QWORD *)(a2 + 2544))
    operator new();
  if (*(_QWORD *)(a2 + 3328))
    operator new();
  if (*(_QWORD *)(a2 + 1904))
    operator new();
  if (*(_QWORD *)(a2 + 1912))
    operator new();
  if (*(_QWORD *)(a2 + 2536))
    operator new();
  if (*(_QWORD *)(a2 + 3528))
    operator new();
  if (*(_QWORD *)(a2 + 3480))
    operator new();
  if (*(_QWORD *)(a2 + 2656))
    operator new();
  if (*(_QWORD *)(a2 + 584))
    operator new();
  if (*(_QWORD *)(a2 + 480))
    operator new();
  if (*(_QWORD *)(a2 + 488))
    operator new();
  if (*(_QWORD *)(a2 + 2128))
    operator new();
  if (*(_QWORD *)(a2 + 2392))
    operator new();
  if (*(_QWORD *)(a2 + 2400))
    operator new();
  if (*(_QWORD *)(a2 + 384))
    operator new();
  if (*(_QWORD *)(a2 + 3144))
    operator new();
  if (*(_QWORD *)(a2 + 344))
    operator new();
  if (*(_QWORD *)(a2 + 464))
    operator new();
  if (*(_QWORD *)(a2 + 512))
    operator new();
  if (*(_QWORD *)(a2 + 3360))
    operator new();
  if (*(_QWORD *)(a2 + 3000))
    operator new();
  if (*(_QWORD *)(a2 + 2960))
    operator new();
  if (*(_QWORD *)(a2 + 2984))
    operator new();
  if (*(_QWORD *)(a2 + 2976))
    operator new();
  if (*(_QWORD *)(a2 + 3008))
    operator new();
  if (*(_QWORD *)(a2 + 3016))
    operator new();
  if (*(_QWORD *)(a2 + 2968))
    operator new();
  if (*(_QWORD *)(a2 + 1936))
    operator new();
  if (*(_QWORD *)(a2 + 3560))
    operator new();
  if (*(_QWORD *)(a2 + 1840))
    operator new();
  if (*(_QWORD *)(a2 + 192))
    operator new();
  if (*(_QWORD *)(a2 + 3040))
    operator new();
  if (*(_QWORD *)(a2 + 3048))
    operator new();
  if (*(_QWORD *)(a2 + 2904))
    operator new();
  if (*(_QWORD *)(a2 + 736))
    operator new();
  if (*(_QWORD *)(a2 + 888))
    operator new();
  if (*(_QWORD *)(a2 + 456))
    operator new();
  if (*(_QWORD *)(a2 + 1872))
    operator new();
  if (*(_QWORD *)(a2 + 448))
    operator new();
  if (*(_QWORD *)(a2 + 2464))
    operator new();
  if (*(_QWORD *)(a2 + 1040))
    operator new();
  if (*(_QWORD *)(a2 + 784))
    operator new();
  if (*(_QWORD *)(a2 + 8))
    operator new();
  if (*(_QWORD *)(a2 + 16))
    operator new();
  if (*(_QWORD *)(a2 + 320))
    operator new();
  if (*(_QWORD *)(a2 + 1848))
    operator new();
  if (*(_QWORD *)(a2 + 3248))
    operator new();
  if (*(_QWORD *)(a2 + 2744))
    operator new();
  if (*(_QWORD *)(a2 + 3600))
    operator new();
  if (*(_QWORD *)(a2 + 3592))
    operator new();
  if (*(_QWORD *)(a2 + 360))
    operator new();
  if (*(_QWORD *)(a2 + 2248))
    operator new();
  if (*(_QWORD *)(a2 + 2424))
    operator new();
  if (*(_QWORD *)(a2 + 1832))
    operator new();
  if (*(_QWORD *)(a2 + 1856))
    operator new();
  if (*(_QWORD *)(a2 + 2752))
    operator new();
  if (*(_QWORD *)(a2 + 408))
    operator new();
  if (*(_QWORD *)(a2 + 416))
    operator new();
  if (*(_QWORD *)(a2 + 2000))
    operator new();
  if (*(_QWORD *)(a2 + 2152))
    operator new();
  if (*(_QWORD *)(a2 + 72))
    operator new();
  if (*(_QWORD *)(a2 + 832))
    operator new();
  if (*(_QWORD *)(a2 + 2256))
    operator new();
  if (*(_QWORD *)(a2 + 1088))
    operator new();
  if (*(_QWORD *)(a2 + 1096))
    operator new();
  if (*(_QWORD *)(a2 + 1080))
    operator new();
  if (*(_QWORD *)(a2 + 896))
    operator new();
  if (*(_QWORD *)(a2 + 3464))
    operator new();
  if (*(_QWORD *)(a2 + 3088))
    operator new();
  if (*(_QWORD *)(a2 + 2768))
    operator new();
  if (*(_QWORD *)(a2 + 2616))
    operator new();
  if (*(_QWORD *)(a2 + 1792))
    operator new();
  if (*(_QWORD *)(a2 + 1800))
    operator new();
  if (*(_QWORD *)(a2 + 304))
    operator new();
  if (*(_QWORD *)(a2 + 1784))
    operator new();
  if (*(_QWORD *)(a2 + 3336))
    operator new();
  if (*(_QWORD *)(a2 + 2600))
    operator new();
  if (*(_QWORD *)(a2 + 432))
    operator new();
  if (*(_QWORD *)(a2 + 2712))
    operator new();
  if (*(_QWORD *)(a2 + 1808))
    operator new();
  if (*(_QWORD *)(a2 + 1776))
    operator new();
  if (*(_QWORD *)(a2 + 400))
    operator new();
  if (*(_QWORD *)(a2 + 440))
    operator new();
  if (*(_QWORD *)(a2 + 1320))
    operator new();
  if (*(_QWORD *)(a2 + 2896))
    operator new();
  if (*(_QWORD *)(a2 + 2920))
    operator new();
  if (*(_QWORD *)(a2 + 2912))
    operator new();
  if (*(_QWORD *)(a2 + 1032))
    operator new();
  if (*(_QWORD *)(a2 + 3392))
    operator new();
  if (*(_QWORD *)(a2 + 920))
    operator new();
  if (*(_QWORD *)(a2 + 3368))
    operator new();
  if (*(_QWORD *)(a2 + 3376))
    operator new();
  if (*(_QWORD *)(a2 + 3160))
    operator new();
  if (*(_QWORD *)(a2 + 1112))
    operator new();
  if (*(_QWORD *)(a2 + 1120))
    operator new();
  if (*(_QWORD *)(a2 + 1944))
    operator new();
  if (*(_QWORD *)(a2 + 1024))
    operator new();
  if (*(_QWORD *)(a2 + 3504))
    operator new();
  if (*(_QWORD *)(a2 + 112))
    operator new();
  if (*(_QWORD *)(a2 + 2328))
    operator new();
  if (*(_QWORD *)(a2 + 1416))
    operator new();
  if (*(_QWORD *)(a2 + 2408))
    operator new();
  if (*(_QWORD *)(a2 + 2416))
    operator new();
  if (*(_QWORD *)(a2 + 2320))
    operator new();
  if (*(_QWORD *)(a2 + 864))
    operator new();
  if (*(_QWORD *)(a2 + 1424))
    operator new();
  if (*(_QWORD *)(a2 + 3424))
    operator new();
  if (*(_QWORD *)(a2 + 2352))
    operator new();
  if (*(_QWORD *)(a2 + 2376))
    operator new();
  if (*(_QWORD *)(a2 + 1272))
    operator new();
  if (*(_QWORD *)(a2 + 2992))
    operator new();
  if (*(_QWORD *)(a2 + 2368))
    operator new();
  if (*(_QWORD *)(a2 + 1968))
    operator new();
  if (*(_QWORD *)(a2 + 3384))
    operator new();
  if (*(_QWORD *)(a2 + 176))
    operator new();
  if (*(_QWORD *)(a2 + 208))
    operator new();
  if (*(_QWORD *)(a2 + 2032))
    operator new();
  if (*(_QWORD *)(a2 + 776))
    operator new();
  if (*(_QWORD *)(a2 + 2448))
    operator new();
  if (*(_QWORD *)(a2 + 2456))
    operator new();
  if (*(_QWORD *)(a2 + 1336))
    operator new();
  if (*(_QWORD *)(a2 + 3496))
    operator new();
  if (*(_QWORD *)(a2 + 3072))
    operator new();
  if (*(_QWORD *)(a2 + 3168))
    operator new();
  if (*(_QWORD *)(a2 + 24))
    operator new();
  if (*(_QWORD *)(a2 + 40))
    operator new();
  if (*(_QWORD *)(a2 + 64))
    operator new();
  if (*(_QWORD *)(a2 + 48))
    operator new();
  if (*(_QWORD *)(a2 + 1144))
    operator new();
  if (*(_QWORD *)(a2 + 1256))
    operator new();
  if (*(_QWORD *)(a2 + 1264))
    operator new();
  if (*(_QWORD *)(a2 + 1152))
    operator new();
  if (*(_QWORD *)(a2 + 1184))
    operator new();
  if (*(_QWORD *)(a2 + 1232))
    operator new();
  if (*(_QWORD *)(a2 + 1920))
    operator new();
  if (*(_QWORD *)(a2 + 640))
    operator new();
  if (*(_QWORD *)(a2 + 648))
    operator new();
  if (*(_QWORD *)(a2 + 1224))
    operator new();
  if (*(_QWORD *)(a2 + 656))
    operator new();
  if (*(_QWORD *)(a2 + 2528))
    operator new();
  if (*(_QWORD *)(a2 + 2584))
    operator new();
  if (*(_QWORD *)(a2 + 2552))
    operator new();
  if (*(_QWORD *)(a2 + 2592))
    operator new();
  if (*(_QWORD *)(a2 + 3152))
    operator new();
  if (*(_QWORD *)(a2 + 744))
    operator new();
  if (*(_QWORD *)(a2 + 2048))
    operator new();
  if (*(_QWORD *)(a2 + 56))
    operator new();
  if (*(_QWORD *)(a2 + 1248))
    operator new();
  if (*(_QWORD *)(a2 + 2576))
    operator new();
  if (*(_QWORD *)(a2 + 392))
    operator new();
  if (*(_QWORD *)(a2 + 2840))
    operator new();
  if (*(_QWORD *)(a2 + 1864))
    operator new();
  if (*(_QWORD *)(a2 + 2016))
    operator new();
  if (*(_QWORD *)(a2 + 880))
    operator new();
  if (*(_QWORD *)(a2 + 2104))
    operator new();
  if (*(_QWORD *)(a2 + 2096))
    operator new();
  if (*(_QWORD *)(a2 + 528))
    operator new();
  if (*(_QWORD *)(a2 + 3432))
    operator new();
  if (*(_QWORD *)(a2 + 2136))
    operator new();
  if (*(_QWORD *)(a2 + 3064))
    operator new();
  if (*(_QWORD *)(a2 + 848))
    operator new();
  if (*(_QWORD *)(a2 + 632))
    operator new();
  if (*(_QWORD *)(a2 + 2008))
    operator new();
  if (*(_QWORD *)(a2 + 2064))
    operator new();
  if (*(_QWORD *)(a2 + 3080))
    operator new();
  if (*(_QWORD *)(a2 + 600))
    operator new();
  if (*(_QWORD *)(a2 + 2112))
    operator new();
  if (*(_QWORD *)(a2 + 1952))
    operator new();
  if (*(_QWORD *)(a2 + 1008))
    operator new();
  if (*(_QWORD *)(a2 + 424))
    operator new();
  if (*(_QWORD *)(a2 + 3216))
    operator new();
  if (*(_QWORD *)(a2 + 3024))
    operator new();
  if (*(_QWORD *)(a2 + 3408))
    operator new();
  if (*(_QWORD *)(a2 + 2056))
    operator new();
  if (*(_QWORD *)(a2 + 2040))
    operator new();
  if (*(_QWORD *)(a2 + 2120))
    operator new();
  if (*(_QWORD *)(a2 + 2568))
    operator new();
  if (*(_QWORD *)(a2 + 1400))
    operator new();
  if (*(_QWORD *)(a2 + 624))
    operator new();
  if (*(_QWORD *)(a2 + 288))
    operator new();
  if (*(_QWORD *)(a2 + 1384))
    operator new();
  if (*(_QWORD *)(a2 + 1368))
    operator new();
  if (*(_QWORD *)(a2 + 1376))
    operator new();
  if (*(_QWORD *)(a2 + 1360))
    operator new();
  if (*(_QWORD *)(a2 + 120))
    operator new();
  if (*(_QWORD *)(a2 + 96))
    operator new();
  if (*(_QWORD *)(a2 + 240))
    operator new();
  if (*(_QWORD *)(a2 + 3120))
    operator new();
  if (*(_QWORD *)(a2 + 3112))
    operator new();
  if (*(_QWORD *)(a2 + 840))
    operator new();
  if (*(_QWORD *)(a2 + 280))
    operator new();
  if (*(_QWORD *)(a2 + 1104))
    operator new();
  if (*(_QWORD *)(a2 + 2688))
    operator new();
  if (*(_QWORD *)(a2 + 2704))
    operator new();
  if (*(_QWORD *)(a2 + 2696))
    operator new();
  if (*(_QWORD *)(a2 + 3608))
    operator new();
  if (*(_QWORD *)(a2 + 328))
    operator new();
  if (*(_QWORD *)(a2 + 2520))
    operator new();
  if (*(_QWORD *)(a2 + 2088))
    operator new();
  if (*(_QWORD *)(a2 + 2080))
    operator new();
  if (*(_QWORD *)(a2 + 520))
    operator new();
  if (*(_QWORD *)(a2 + 160))
    operator new();
  if (*(_QWORD *)(a2 + 168))
    operator new();
  if (*(_QWORD *)(a2 + 152))
    operator new();
  if (*(_QWORD *)(a2 + 1064))
    operator new();
  if (*(_QWORD *)(a2 + 1072))
    operator new();
  if (*(_QWORD *)(a2 + 664))
    operator new();
  if (*(_QWORD *)(a2 + 3304))
    operator new();
  if (*(_QWORD *)(a2 + 3296))
    operator new();
  if (*(_QWORD *)(a2 + 200))
    operator new();
  if (*(_QWORD *)(a2 + 952))
    operator new();
  if (*(_QWORD *)(a2 + 960))
    operator new();
  if (*(_QWORD *)(a2 + 968))
    operator new();
  if (*(_QWORD *)(a2 + 936))
    operator new();
  if (*(_QWORD *)(a2 + 992))
    operator new();
  if (*(_QWORD *)(a2 + 136))
    operator new();
  if (*(_QWORD *)(a2 + 2680))
    operator new();
  if (*(_QWORD *)(a2 + 2672))
    operator new();
  if (*(_QWORD *)(a2 + 752))
    operator new();
  if (*(_QWORD *)(a2 + 944))
    operator new();
  if (*(_QWORD *)(a2 + 3352))
    operator new();
  if (*(_QWORD *)(a2 + 184))
    operator new();
  if (*(_QWORD *)(a2 + 976))
    operator new();
  if (*(_QWORD *)(a2 + 1176))
    operator new();
  if (*(_QWORD *)(a2 + 3056))
    operator new();
  if (*(_QWORD *)(a2 + 1016))
    operator new();
  if (*(_QWORD *)(a2 + 264))
    operator new();
  if (*(_QWORD *)(a2 + 2864))
    operator new();
  if (*(_QWORD *)(a2 + 2888))
    operator new();
  if (*(_QWORD *)(a2 + 2872))
    operator new();
  if (*(_QWORD *)(a2 + 2880))
    operator new();
  if (*(_QWORD *)(a2 + 2928))
    operator new();
  if (*(_QWORD *)(a2 + 984))
    operator new();
  if (*(_QWORD *)(a2 + 1456))
    operator new();
  if (*(_QWORD *)(a2 + 2560))
    operator new();
  if (*(_QWORD *)(a2 + 1992))
    operator new();
  if (*(_QWORD *)(a2 + 928))
    operator new();
  if (*(_QWORD *)(a2 + 1824))
    operator new();
  if (*(_QWORD *)(a2 + 816))
    operator new();
  if (*(_QWORD *)(a2 + 800))
    operator new();
  if (*(_QWORD *)(a2 + 808))
    operator new();
  if (*(_QWORD *)(a2 + 792))
    operator new();
  if (*(_QWORD *)(a2 + 2144))
    operator new();
  if (*(_QWORD *)(a2 + 1528))
    operator new();
  if (*(_QWORD *)(a2 + 1536))
    operator new();
  if (*(_QWORD *)(a2 + 1560))
    operator new();
  if (*(_QWORD *)(a2 + 1648))
    operator new();
  if (*(_QWORD *)(a2 + 1768))
    operator new();
  if (*(_QWORD *)(a2 + 1760))
    operator new();
  if (*(_QWORD *)(a2 + 1632))
    operator new();
  if (*(_QWORD *)(a2 + 1312))
    operator new();
  if (*(_QWORD *)(a2 + 1304))
    operator new();
  if (*(_QWORD *)(a2 + 1520))
    operator new();
  if (*(_QWORD *)(a2 + 1544))
    operator new();
  if (*(_QWORD *)(a2 + 1656))
    operator new();
  if (*(_QWORD *)(a2 + 1664))
    operator new();
  if (*(_QWORD *)(a2 + 1696))
    operator new();
  if (*(_QWORD *)(a2 + 1600))
    operator new();
  if (*(_QWORD *)(a2 + 1584))
    operator new();
  if (*(_QWORD *)(a2 + 1704))
    operator new();
  if (*(_QWORD *)(a2 + 1592))
    operator new();
  if (*(_QWORD *)(a2 + 1672))
    operator new();
  if (*(_QWORD *)(a2 + 768))
    operator new();
  if (*(_QWORD *)(a2 + 3224))
    operator new();
  if (*(_QWORD *)(a2 + 1296))
    operator new();
  if (*(_QWORD *)(a2 + 3232))
    operator new();
  if (*(_QWORD *)(a2 + 3240))
    operator new();
  if (*(_QWORD *)(a2 + 2728))
    operator new();
  if (*(_QWORD *)(a2 + 2736))
    operator new();
  if (*(_QWORD *)(a2 + 2760))
    operator new();
  if (*(_QWORD *)(a2 + 2800))
    operator new();
  if (*(_QWORD *)(a2 + 2784))
    operator new();
  if (*(_QWORD *)(a2 + 1712))
    operator new();
  if (*(_QWORD *)(a2 + 1624))
    operator new();
  if (*(_QWORD *)(a2 + 2776))
    operator new();
  if (*(_QWORD *)(a2 + 1448))
    operator new();
  if (*(_QWORD *)(a2 + 1576))
    operator new();
  if (*(_QWORD *)(a2 + 1640))
    operator new();
  if (*(_QWORD *)(a2 + 1280))
    operator new();
  if (*(_QWORD *)(a2 + 592))
    operator new();
  if (*(_QWORD *)(a2 + 2336))
    operator new();
  if (*(_QWORD *)(a2 + 688))
    operator new();
  if (*(_QWORD *)(a2 + 856))
    operator new();
  if (*(_QWORD *)(a2 + 3200))
    operator new();
  if (*(_QWORD *)(a2 + 2608))
    operator new();
  if (*(_QWORD *)(a2 + 1728))
    operator new();
  if (*(_QWORD *)(a2 + 3344))
    operator new();
  if (*(_QWORD *)(a2 + 1568))
    operator new();
  if (*(_QWORD *)(a2 + 2792))
    operator new();
  if (*(_QWORD *)(a2 + 3096))
    operator new();
  if (*(_QWORD *)(a2 + 2312))
    operator new();
  if (*(_QWORD *)(a2 + 1896))
    operator new();
  if (*(_QWORD *)(a2 + 2264))
    operator new();
  if (*(_QWORD *)(a2 + 2272))
    operator new();
  if (*(_QWORD *)(a2 + 2280))
    operator new();
  if (*(_QWORD *)(a2 + 2160))
    operator new();
  if (*(_QWORD *)(a2 + 2296))
    operator new();
  if (*(_QWORD *)(a2 + 1816))
    operator new();
  if (*(_QWORD *)(a2 + 3208))
    operator new();
  if (*(_QWORD *)(a2 + 2232))
    operator new();
  if (*(_QWORD *)(a2 + 2240))
    operator new();
  if (*(_QWORD *)(a2 + 3192))
    operator new();
  if (*(_QWORD *)(a2 + 3104))
    operator new();
  if (*(_QWORD *)(a2 + 824))
    operator new();
  if (*(_QWORD *)(a2 + 1744))
    operator new();
  if (*(_QWORD *)(a2 + 2856))
    operator new();
  if (*(_QWORD *)(a2 + 2224))
    operator new();
  if (*(_QWORD *)(a2 + 2176))
    operator new();
  if (*(_QWORD *)(a2 + 2168))
    operator new();
  if (*(_QWORD *)(a2 + 2200))
    operator new();
  if (*(_QWORD *)(a2 + 104))
    operator new();
  if (*(_QWORD *)(a2 + 2288))
    operator new();
  if (*(_QWORD *)(a2 + 2472))
    operator new();
  if (*(_QWORD *)(a2 + 2496))
    operator new();
  if (*(_QWORD *)(a2 + 1688))
    operator new();
  if (*(_QWORD *)(a2 + 2504))
    operator new();
  if (*(_QWORD *)(a2 + 2480))
    operator new();
  if (*(_QWORD *)(a2 + 2216))
    operator new();
  if (*(_QWORD *)(a2 + 576))
    operator new();
  if (*(_QWORD *)(a2 + 2208))
    operator new();
  if (*(_QWORD *)(a2 + 2344))
    operator new();
  if (*(_QWORD *)(a2 + 1928))
    operator new();
  if (*(_QWORD *)(a2 + 1504))
    operator new();
  if (*(_QWORD *)(a2 + 1512))
    operator new();
  if (*(_QWORD *)(a2 + 2488))
    operator new();
  if (*(_QWORD *)(a2 + 2192))
    operator new();
  if (*(_QWORD *)(a2 + 2184))
    operator new();
  if (*(_QWORD *)(a2 + 1616))
    operator new();
  if (*(_QWORD *)(a2 + 1608))
    operator new();
  if (*(_QWORD *)(a2 + 2512))
    operator new();
  if (*(_QWORD *)(a2 + 312))
    operator new();
  if (*(_QWORD *)(a2 + 904))
    operator new();
  if (*(_QWORD *)(a2 + 2360))
    operator new();
  if (*(_QWORD *)(a2 + 2384))
    operator new();
  if (*(_QWORD *)(a2 + 256))
    operator new();
  if (*(_QWORD *)(a2 + 248))
    operator new();
  if (*(_QWORD *)(a2 + 2816))
    operator new();
  if (*(_QWORD *)(a2 + 2808))
    operator new();
  if (*(_QWORD *)(a2 + 2624))
    operator new();
  if (*(_QWORD *)(a2 + 2632))
    operator new();
  if (*(_QWORD *)(a2 + 2648))
    operator new();
  if (*(_QWORD *)(a2 + 1288))
    operator new();
  if (*(_QWORD *)(a2 + 2640))
    operator new();
  if (*(_QWORD *)(a2 + 336))
    operator new();
  if (*(_QWORD *)(a2 + 1480))
    operator new();
  if (*(_QWORD *)(a2 + 1488))
    operator new();
  if (*(_QWORD *)(a2 + 1496))
    operator new();
  if (*(_QWORD *)(a2 + 2824))
    operator new();
  if (*(_QWORD *)(a2 + 2832))
    operator new();
  if (*(_QWORD *)(a2 + 2944))
    operator new();
  if (*(_QWORD *)(a2 + 2952))
    operator new();
  if (*(_QWORD *)(a2 + 1432))
    operator new();
  return a1;
}

uint64_t sub_1015F5B2C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "aPSleep");
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "aPWake");
  v7 = *(_QWORD *)(a1 + 24);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "accel");
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, this, "accel800");
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, this, "accelBatch");
  v10 = *(_QWORD *)(a1 + 48);
  if (v10)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, this, "accelGesture");
  v11 = *(_QWORD *)(a1 + 56);
  if (v11)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, this, "accelGps");
  v12 = *(_QWORD *)(a1 + 64);
  if (v12)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v12 + 32))(v12, this, "accelOscarEmu");
  v13 = *(_QWORD *)(a1 + 72);
  if (v13)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v13 + 32))(v13, this, "accelTNBFrame");
  v14 = *(_QWORD *)(a1 + 80);
  if (v14)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v14 + 32))(v14, this, "accelerometerPace");
  v15 = *(_QWORD *)(a1 + 88);
  if (v15)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v15 + 32))(v15, this, "accessoryAccel");
  v16 = *(_QWORD *)(a1 + 96);
  if (v16)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v16 + 32))(v16, this, "accessoryAccelConfig");
  v17 = *(_QWORD *)(a1 + 104);
  if (v17)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v17 + 32))(v17, this, "accessoryActivityAsleepConfidenceEpoch");
  v18 = *(_QWORD *)(a1 + 112);
  if (v18)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v18 + 32))(v18, this, "accessoryActivityStateUpdate");
  v19 = *(_QWORD *)(a1 + 120);
  if (v19)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v19 + 32))(v19, this, "accessoryConfig");
  v20 = *(_QWORD *)(a1 + 128);
  if (v20)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v20 + 32))(v20, this, "accessoryDeviceMotion");
  v21 = *(_QWORD *)(a1 + 136);
  if (v21)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v21 + 32))(v21, this, "accessoryDeviceMotionConfig");
  v22 = *(_QWORD *)(a1 + 144);
  if (v22)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v22 + 32))(v22, this, "accessoryGyro");
  v23 = *(_QWORD *)(a1 + 152);
  if (v23)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v23 + 32))(v23, this, "accessoryGyroCachedBias");
  v24 = *(_QWORD *)(a1 + 160);
  if (v24)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v24 + 32))(v24, this, "accessoryGyroConfig");
  v25 = *(_QWORD *)(a1 + 168);
  if (v25)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v25 + 32))(v25, this, "accessoryGyroGYTT");
  v26 = *(_QWORD *)(a1 + 176);
  if (v26)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v26 + 32))(v26, this, "accessoryHeartRate");
  v27 = *(_QWORD *)(a1 + 184);
  if (v27)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v27 + 32))(v27, this, "accessoryInEarStatus");
  v28 = *(_QWORD *)(a1 + 192);
  if (v28)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v28 + 32))(v28, this, "accessoryMagnetometer");
  v29 = *(_QWORD *)(a1 + 200);
  if (v29)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v29 + 32))(v29, this, "accessoryMagnetometerConfig");
  v30 = *(_QWORD *)(a1 + 208);
  if (v30)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v30 + 32))(v30, this, "accessoryPPG");
  v31 = *(_QWORD *)(a1 + 216);
  if (v31)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v31 + 32))(v31, this, "accessoryProx");
  v32 = *(_QWORD *)(a1 + 224);
  if (v32)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v32 + 32))(v32, this, "accessoryProxSensorDrop");
  v33 = *(_QWORD *)(a1 + 232);
  if (v33)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v33 + 32))(v33, this, "accessoryProxTempComp");
  v34 = *(_QWORD *)(a1 + 240);
  if (v34)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v34 + 32))(v34, this, "accessoryProximityConfig");
  v35 = *(_QWORD *)(a1 + 248);
  if (v35)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v35 + 32))(v35, this, "accessorySleepStateConfidenceEpoch");
  v36 = *(_QWORD *)(a1 + 256);
  if (v36)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v36 + 32))(v36, this, "accessorySleepStateUpdate");
  v37 = *(_QWORD *)(a1 + 264);
  if (v37)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v37 + 32))(v37, this, "accessoryStepDetectorDebug");
  v38 = *(_QWORD *)(a1 + 272);
  if (v38)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v38 + 32))(v38, this, "accessoryWake");
  v39 = *(_QWORD *)(a1 + 280);
  if (v39)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v39 + 32))(v39, this, "accessoryWakeDebug");
  v40 = *(_QWORD *)(a1 + 288);
  if (v40)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v40 + 32))(v40, this, "airpodEvent");
  v41 = *(_QWORD *)(a1 + 296);
  if (v41)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v41 + 32))(v41, this, "alsData");
  v42 = *(_QWORD *)(a1 + 304);
  if (v42)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v42 + 32))(v42, this, "alsPhone");
  v43 = *(_QWORD *)(a1 + 312);
  if (v43)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v43 + 32))(v43, this, "altimeter");
  v44 = *(_QWORD *)(a1 + 320);
  if (v44)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v44 + 32))(v44, this, "altimeterKF");
  v45 = *(_QWORD *)(a1 + 328);
  if (v45)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v45 + 32))(v45, this, "anchorCorrection");
  v46 = *(_QWORD *)(a1 + 336);
  if (v46)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v46 + 32))(v46, this, "anchorMotionCorrespondence");
  v47 = *(_QWORD *)(a1 + 344);
  if (v47)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v47 + 32))(v47, this, "appleCV3DSLAMState");
  v48 = *(_QWORD *)(a1 + 352);
  if (v48)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v48 + 32))(v48, this, "arSessionState");
  v49 = *(_QWORD *)(a1 + 360);
  if (v49)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v49 + 32))(v49, this, "arkitWorldPose");
  v50 = *(_QWORD *)(a1 + 368);
  if (v50)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v50 + 32))(v50, this, "audioAccessoryDeviceMotion");
  v51 = *(_QWORD *)(a1 + 376);
  if (v51)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v51 + 32))(v51, this, "auxiliaryDeviceMotion");
  v52 = *(_QWORD *)(a1 + 384);
  if (v52)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v52 + 32))(v52, this, "averagedALSData");
  v53 = *(_QWORD *)(a1 + 392);
  if (v53)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v53 + 32))(v53, this, "bTConnection");
  v54 = *(_QWORD *)(a1 + 400);
  if (v54)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v54 + 32))(v54, this, "backlightState");
  v55 = *(_QWORD *)(a1 + 408);
  if (v55)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v55 + 32))(v55, this, "basebandCompassCoex");
  v56 = *(_QWORD *)(a1 + 416);
  if (v56)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v56 + 32))(v56, this, "basebandCompassCoexConstraints");
  v57 = *(_QWORD *)(a1 + 424);
  if (v57)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v57 + 32))(v57, this, "basebandSpeed");
  v58 = *(_QWORD *)(a1 + 432);
  if (v58)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v58 + 32))(v58, this, "baselineResetCheck");
  v59 = *(_QWORD *)(a1 + 440);
  if (v59)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v59 + 32))(v59, this, "batchedLocationFromOdometer");
  v60 = *(_QWORD *)(a1 + 448);
  if (v60)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v60 + 32))(v60, this, "batterySaverModeStatus");
  v61 = *(_QWORD *)(a1 + 456);
  if (v61)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v61 + 32))(v61, this, "batteryStatus");
  v62 = *(_QWORD *)(a1 + 464);
  if (v62)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v62 + 32))(v62, this, "bioMotionAnchorPose");
  v63 = *(_QWORD *)(a1 + 472);
  if (v63)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v63 + 32))(v63, this, "bioMotionClassification");
  v64 = *(_QWORD *)(a1 + 480);
  if (v64)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v64 + 32))(v64, this, "bioMotionLinkLengthFitParameters");
  v65 = *(_QWORD *)(a1 + 488);
  if (v65)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v65 + 32))(v65, this, "bioMotionOnlineLinkLengthUpdate");
  v66 = *(_QWORD *)(a1 + 496);
  if (v66)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v66 + 32))(v66, this, "bioMotionPose");
  v67 = *(_QWORD *)(a1 + 504);
  if (v67)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v67 + 32))(v67, this, "bioMotionPredictedPose");
  v68 = *(_QWORD *)(a1 + 512);
  if (v68)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v68 + 32))(v68, this, "bioMotionPropagatedAnchor");
  v69 = *(_QWORD *)(a1 + 520);
  if (v69)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v69 + 32))(v69, this, "bleedToZeroCorrection");
  v70 = *(_QWORD *)(a1 + 528);
  if (v70)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v70 + 32))(v70, this, "bodyMetrics");
  v71 = *(_QWORD *)(a1 + 536);
  if (v71)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v71 + 32))(v71, this, "braveHeartAccel");
  v72 = *(_QWORD *)(a1 + 544);
  if (v72)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v72 + 32))(v72, this, "braveHeartDeviceMotion");
  v73 = *(_QWORD *)(a1 + 552);
  if (v73)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v73 + 32))(v73, this, "braveHeartNatalieData");
  v74 = *(_QWORD *)(a1 + 560);
  if (v74)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v74 + 32))(v74, this, "braveHeartVO2MaxInput");
  v75 = *(_QWORD *)(a1 + 568);
  if (v75)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v75 + 32))(v75, this, "braveHeartWorkoutEvent");
  v76 = *(_QWORD *)(a1 + 576);
  if (v76)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v76 + 32))(v76, this, "bumpToWakeState");
  v77 = *(_QWORD *)(a1 + 584);
  if (v77)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v77 + 32))(v77, this, "cV3DPredictedPose");
  v78 = *(_QWORD *)(a1 + 592);
  if (v78)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v78 + 32))(v78, this, "calorimetryMETsConsumed");
  v79 = *(_QWORD *)(a1 + 600);
  if (v79)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v79 + 32))(v79, this, "calorimetryPauseEvent");
  v80 = *(_QWORD *)(a1 + 608);
  if (v80)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v80 + 32))(v80, this, "catherineHealthKitData");
  if ((*(_BYTE *)(a1 + 3616) & 1) != 0)
    PB::TextFormatter::format(this, "cftime", *(double *)(a1 + 616));
  v81 = *(_QWORD *)(a1 + 624);
  if (v81)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v81 + 32))(v81, this, "clefCalibration");
  v82 = *(_QWORD *)(a1 + 632);
  if (v82)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v82 + 32))(v82, this, "coarseElevationChange");
  v83 = *(_QWORD *)(a1 + 640);
  if (v83)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v83 + 32))(v83, this, "compass");
  v84 = *(_QWORD *)(a1 + 648);
  if (v84)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v84 + 32))(v84, this, "compassAlignment");
  v85 = *(_QWORD *)(a1 + 656);
  if (v85)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v85 + 32))(v85, this, "compassCalibration");
  v86 = *(_QWORD *)(a1 + 664);
  if (v86)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v86 + 32))(v86, this, "compassCalibrationAttempt");
  v87 = *(_QWORD *)(a1 + 672);
  if (v87)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v87 + 32))(v87, this, "compassConstraints");
  v88 = *(_QWORD *)(a1 + 680);
  if (v88)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v88 + 32))(v88, this, "compassCorrection");
  v89 = *(_QWORD *)(a1 + 688);
  if (v89)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v89 + 32))(v89, this, "complexHandMotion");
  v90 = *(_QWORD *)(a1 + 696);
  if (v90)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v90 + 32))(v90, this, "constrainedIntegratorModelPredictedPose");
  v91 = *(_QWORD *)(a1 + 704);
  if (v91)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v91 + 32))(v91, this, "constrainedIntegratorPose");
  v92 = *(_QWORD *)(a1 + 712);
  if (v92)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v92 + 32))(v92, this, "coprocessorReplyGaitMetrics");
  v93 = *(_QWORD *)(a1 + 720);
  if (v93)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v93 + 32))(v93, this, "courseConstraints");
  v94 = *(_QWORD *)(a1 + 728);
  if (v94)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v94 + 32))(v94, this, "courseCorrection");
  v95 = *(_QWORD *)(a1 + 736);
  if (v95)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v95 + 32))(v95, this, "cvWatchCalories");
  v96 = *(_QWORD *)(a1 + 744);
  if (v96)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v96 + 32))(v96, this, "deviceMotion");
  v97 = *(_QWORD *)(a1 + 752);
  if (v97)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v97 + 32))(v97, this, "deviceMotionAlwaysOn");
  v98 = *(_QWORD *)(a1 + 760);
  if (v98)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v98 + 32))(v98, this, "deviceMotionCovariance");
  v99 = *(_QWORD *)(a1 + 768);
  if (v99)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v99 + 32))(v99, this, "directionOfTravelMetrics");
  v100 = *(_QWORD *)(a1 + 776);
  if (v100)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v100 + 32))(v100, this, "displacingState");
  v101 = *(_QWORD *)(a1 + 784);
  if (v101)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v101 + 32))(v101, this, "displayStatus");
  v102 = *(_QWORD *)(a1 + 792);
  if (v102)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v102 + 32))(v102, this, "dopplerDebugRecord");
  v103 = *(_QWORD *)(a1 + 800);
  if (v103)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v103 + 32))(v103, this, "dopplerProximityEvent");
  v104 = *(_QWORD *)(a1 + 808);
  if (v104)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v104 + 32))(v104, this, "dopplerRawDataInput");
  v105 = *(_QWORD *)(a1 + 816);
  if (v105)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v105 + 32))(v105, this, "dopplerSample");
  v106 = *(_QWORD *)(a1 + 824);
  if (v106)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v106 + 32))(v106, this, "dotEstimatorHandSwing");
  v107 = *(_QWORD *)(a1 + 832);
  if (v107)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v107 + 32))(v107, this, "dotEstimatorWithTNB");
  v108 = *(_QWORD *)(a1 + 840);
  if (v108)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v108 + 32))(v108, this, "doubleTap");
  v109 = *(_QWORD *)(a1 + 848);
  if (v109)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v109 + 32))(v109, this, "elevationChange");
  v110 = *(_QWORD *)(a1 + 856);
  if (v110)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v110 + 32))(v110, this, "elevationGradeEstimator");
  v111 = *(_QWORD *)(a1 + 864);
  if (v111)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v111 + 32))(v111, this, "elevationThreshold");
  v112 = *(_QWORD *)(a1 + 872);
  if (v112)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v112 + 32))(v112, this, "emergencyState");
  v113 = *(_QWORD *)(a1 + 880);
  if (v113)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v113 + 32))(v113, this, "enhancedDeviceMotion");
  v114 = *(_QWORD *)(a1 + 888);
  if (v114)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v114 + 32))(v114, this, "faceBlendShapeCoefficientsSample");
  v115 = *(_QWORD *)(a1 + 896);
  if (v115)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v115 + 32))(v115, this, "faceCovered");
  v116 = *(_QWORD *)(a1 + 904);
  if (v116)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v116 + 32))(v116, this, "faceDownDetection");
  v117 = *(_QWORD *)(a1 + 912);
  if (v117)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v117 + 32))(v117, this, "facePose");
  v118 = *(_QWORD *)(a1 + 920);
  if (v118)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v118 + 32))(v118, this, "facePoseSynchronized");
  v119 = *(_QWORD *)(a1 + 928);
  if (v119)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v119 + 32))(v119, this, "fallDetectionActivityClassifierReplay");
  v120 = *(_QWORD *)(a1 + 936);
  if (v120)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v120 + 32))(v120, this, "fallDetectionDetector");
  v121 = *(_QWORD *)(a1 + 944);
  if (v121)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v121 + 32))(v121, this, "fallDetectionGyroControllerReplay");
  v122 = *(_QWORD *)(a1 + 952);
  if (v122)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v122 + 32))(v122, this, "fallDetectionReferee");
  v123 = *(_QWORD *)(a1 + 960);
  if (v123)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v123 + 32))(v123, this, "fallDetectionReplay");
  v124 = *(_QWORD *)(a1 + 968);
  if (v124)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v124 + 32))(v124, this, "fallDetectionStateMachine");
  v125 = *(_QWORD *)(a1 + 976);
  if (v125)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v125 + 32))(v125, this, "fallDetectionWristStateReplay");
  v126 = *(_QWORD *)(a1 + 984);
  if (v126)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v126 + 32))(v126, this, "fallDistanceReplay");
  v127 = *(_QWORD *)(a1 + 992);
  if (v127)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v127 + 32))(v127, this, "fallFalsePositiveSuppressionFeatures");
  v128 = *(_QWORD *)(a1 + 1000);
  if (v128)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v128 + 32))(v128, this, "fallSnippet");
  v129 = *(_QWORD *)(a1 + 1008);
  if (v129)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v129 + 32))(v129, this, "fallStats");
  v130 = *(_QWORD *)(a1 + 1016);
  if (v130)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v130 + 32))(v130, this, "firstStepFeatures");
  v131 = *(_QWORD *)(a1 + 1024);
  if (v131)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v131 + 32))(v131, this, "fitnessMachineData");
  v132 = *(_QWORD *)(a1 + 1032);
  if (v132)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v132 + 32))(v132, this, "fitnessMachineSample");
  v133 = *(_QWORD *)(a1 + 1040);
  if (v133)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v133 + 32))(v133, this, "focusModes");
  v134 = *(_QWORD *)(a1 + 1048);
  if (v134)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v134 + 32))(v134, this, "frequencyResponse");
  v135 = *(_QWORD *)(a1 + 1056);
  if (v135)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v135 + 32))(v135, this, "fusedBioMotionClassification");
  v136 = *(_QWORD *)(a1 + 1064);
  if (v136)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v136 + 32))(v136, this, "gaitCycleSegment");
  v137 = *(_QWORD *)(a1 + 1072);
  if (v137)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v137 + 32))(v137, this, "gaitCycleSegmentationState");
  v138 = *(_QWORD *)(a1 + 1080);
  if (v138)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v138 + 32))(v138, this, "gaitEventsHKResult");
  v139 = *(_QWORD *)(a1 + 1088);
  if (v139)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v139 + 32))(v139, this, "gaitEventsModelOutput");
  v140 = *(_QWORD *)(a1 + 1096);
  if (v140)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v140 + 32))(v140, this, "gaitEventsStrideAggregation");
  v141 = *(_QWORD *)(a1 + 1104);
  if (v141)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v141 + 32))(v141, this, "geomagneticData");
  v142 = *(_QWORD *)(a1 + 1112);
  if (v142)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v142 + 32))(v142, this, "gnssAvailabilityPredictorData");
  v143 = *(_QWORD *)(a1 + 1120);
  if (v143)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v143 + 32))(v143, this, "gnssLeechLocationData");
  v144 = *(_QWORD *)(a1 + 1128);
  if (v144)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v144 + 32))(v144, this, "gravityConstraints");
  v145 = *(_QWORD *)(a1 + 1136);
  if (v145)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v145 + 32))(v145, this, "gravityCorrection");
  v146 = *(_QWORD *)(a1 + 1144);
  if (v146)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v146 + 32))(v146, this, "gyro");
  v147 = *(_QWORD *)(a1 + 1152);
  if (v147)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v147 + 32))(v147, this, "gyroBiasAndVariance");
  v148 = *(_QWORD *)(a1 + 1160);
  if (v148)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v148 + 32))(v148, this, "gyroBiasConstraints");
  v149 = *(_QWORD *)(a1 + 1168);
  if (v149)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v149 + 32))(v149, this, "gyroBiasCorrection");
  v150 = *(_QWORD *)(a1 + 1176);
  if (v150)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v150 + 32))(v150, this, "gyroBiasEstimateError");
  v151 = *(_QWORD *)(a1 + 1184);
  if (v151)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v151 + 32))(v151, this, "gyroBiasFit");
  v152 = *(_QWORD *)(a1 + 1192);
  if (v152)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v152 + 32))(v152, this, "gyroCalibrationDataFactory");
  v153 = *(_QWORD *)(a1 + 1200);
  if (v153)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v153 + 32))(v153, this, "gyroCalibrationDataNonlinearNonFactory");
  v154 = *(_QWORD *)(a1 + 1208);
  if (v154)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v154 + 32))(v154, this, "gyroCalibrationSample");
  v155 = *(_QWORD *)(a1 + 1216);
  if (v155)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v155 + 32))(v155, this, "gyroCalibrationSampleNonlinear");
  v156 = *(_QWORD *)(a1 + 1224);
  if (v156)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v156 + 32))(v156, this, "gyroCompass");
  v157 = *(_QWORD *)(a1 + 1232);
  if (v157)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v157 + 32))(v157, this, "gyroDt");
  v158 = *(_QWORD *)(a1 + 1240);
  if (v158)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v158 + 32))(v158, this, "gyroFactoryCalibrationData");
  v159 = *(_QWORD *)(a1 + 1248);
  if (v159)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v159 + 32))(v159, this, "gyroGps");
  v160 = *(_QWORD *)(a1 + 1256);
  if (v160)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v160 + 32))(v160, this, "gyroOscarEmu");
  v161 = *(_QWORD *)(a1 + 1264);
  if (v161)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v161 + 32))(v161, this, "gyroTemperature");
  v162 = *(_QWORD *)(a1 + 1272);
  if (v162)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v162 + 32))(v162, this, "hapticModuleState");
  v163 = *(_QWORD *)(a1 + 1280);
  if (v163)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v163 + 32))(v163, this, "harmonicMetrics");
  v164 = *(_QWORD *)(a1 + 1288);
  if (v164)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v164 + 32))(v164, this, "headToHeadsetAttitudeEstimatorMeasurementUpdate");
  v165 = *(_QWORD *)(a1 + 1296);
  if (v165)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v165 + 32))(v165, this, "headToHeadsetTransformationEstimate");
  v166 = *(_QWORD *)(a1 + 1304);
  if (v166)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v166 + 32))(v166, this, "headTrackingBehaviorUpdate");
  v167 = *(_QWORD *)(a1 + 1312);
  if (v167)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v167 + 32))(v167, this, "headTrackingClientModeUpdate");
  v168 = *(_QWORD *)(a1 + 1320);
  if (v168)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v168 + 32))(v168, this, "heartRateReference");
  v169 = *(_QWORD *)(a1 + 1328);
  if (v169)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v169 + 32))(v169, this, "hgAccel");
  v170 = *(_QWORD *)(a1 + 1336);
  if (v170)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v170 + 32))(v170, this, "hidShower");
  v171 = *(_QWORD *)(a1 + 1344);
  if (v171)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v171 + 32))(v171, this, "inEarAdditionalState");
  v172 = *(_QWORD *)(a1 + 1352);
  if (v172)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v172 + 32))(v172, this, "inEarBaseline");
  v173 = *(_QWORD *)(a1 + 1360);
  if (v173)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v173 + 32))(v173, this, "inEarBaselining");
  v174 = *(_QWORD *)(a1 + 1368);
  if (v174)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v174 + 32))(v174, this, "inEarConstraints");
  v175 = *(_QWORD *)(a1 + 1376);
  if (v175)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v175 + 32))(v175, this, "inEarOpenLid");
  v176 = *(_QWORD *)(a1 + 1384);
  if (v176)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v176 + 32))(v176, this, "inEarOptical");
  v177 = *(_QWORD *)(a1 + 1392);
  if (v177)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v177 + 32))(v177, this, "inEarSession");
  v178 = *(_QWORD *)(a1 + 1400);
  if (v178)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v178 + 32))(v178, this, "inEarTransition");
  v179 = *(_QWORD *)(a1 + 1408);
  if (v179)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v179 + 32))(v179, this, "inEarTransitionEntry");
  v180 = *(_QWORD *)(a1 + 1416);
  if (v180)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v180 + 32))(v180, this, "inertialOdometry");
  v181 = *(_QWORD *)(a1 + 1424);
  if (v181)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v181 + 32))(v181, this, "initialHistoricalMeanSeaLevelPressure");
  v182 = *(_QWORD *)(a1 + 1432);
  if (v182)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v182 + 32))(v182, this, "interpolatedAccessoryAccel");
  v183 = *(_QWORD *)(a1 + 1440);
  if (v183)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v183 + 32))(v183, this, "intersiloNSCodingData");
  v184 = *(_QWORD *)(a1 + 1448);
  if (v184)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v184 + 32))(v184, this, "ispPacket");
  v185 = *(_QWORD *)(a1 + 1456);
  if (v185)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v185 + 32))(v185, this, "jitterBufferLevel");
  v186 = *(_QWORD *)(a1 + 1464);
  if (v186)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v186 + 32))(v186, this, "jointLinkModelPose");
  v187 = *(_QWORD *)(a1 + 1472);
  if (v187)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v187 + 32))(v187, this, "jointLinkModelPredictedPose");
  v188 = *(_QWORD *)(a1 + 1480);
  if (v188)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v188 + 32))(v188, this, "kData1");
  v189 = *(_QWORD *)(a1 + 1488);
  if (v189)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v189 + 32))(v189, this, "kData2");
  v190 = *(_QWORD *)(a1 + 1496);
  if (v190)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v190 + 32))(v190, this, "kData3");
  v191 = *(_QWORD *)(a1 + 1504);
  if (v191)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v191 + 32))(v191, this, "kappaActivityPhone");
  v192 = *(_QWORD *)(a1 + 1512);
  if (v192)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v192 + 32))(v192, this, "kappaActivityWatch");
  v193 = *(_QWORD *)(a1 + 1520);
  if (v193)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v193 + 32))(v193, this, "kappaAirbagResult");
  v194 = *(_QWORD *)(a1 + 1528);
  if (v194)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v194 + 32))(v194, this, "kappaAudioResult");
  v195 = *(_QWORD *)(a1 + 1536);
  if (v195)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v195 + 32))(v195, this, "kappaBaroResult");
  v196 = *(_QWORD *)(a1 + 1544);
  if (v196)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v196 + 32))(v196, this, "kappaCrashResult");
  v197 = *(_QWORD *)(a1 + 1552);
  if (v197)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v197 + 32))(v197, this, "kappaDirectionOfTravel");
  v198 = *(_QWORD *)(a1 + 1560);
  if (v198)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v198 + 32))(v198, this, "kappaGpsResult");
  v199 = *(_QWORD *)(a1 + 1568);
  if (v199)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v199 + 32))(v199, this, "kappaGravityAutocorrelationResult");
  v200 = *(_QWORD *)(a1 + 1576);
  if (v200)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v200 + 32))(v200, this, "kappaHighSpeedCrashResult");
  v201 = *(_QWORD *)(a1 + 1584);
  if (v201)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v201 + 32))(v201, this, "kappaLackOfMotionResult");
  v202 = *(_QWORD *)(a1 + 1592);
  if (v202)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v202 + 32))(v202, this, "kappaLocalAudioResult");
  v203 = *(_QWORD *)(a1 + 1600);
  if (v203)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v203 + 32))(v203, this, "kappaMildImpactResult");
  v204 = *(_QWORD *)(a1 + 1608);
  if (v204)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v204 + 32))(v204, this, "kappaPeakDetectorMapMagTimestamps");
  v205 = *(_QWORD *)(a1 + 1616);
  if (v205)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v205 + 32))(v205, this, "kappaPeakDetectorMapResult");
  v206 = *(_QWORD *)(a1 + 1624);
  if (v206)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v206 + 32))(v206, this, "kappaPulseDeltaV");
  v207 = *(_QWORD *)(a1 + 1632);
  if (v207)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v207 + 32))(v207, this, "kappaPulseInertialAccel");
  v208 = *(_QWORD *)(a1 + 1640);
  if (v208)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v208 + 32))(v208, this, "kappaPulseInertialHgAccel");
  v209 = *(_QWORD *)(a1 + 1648);
  if (v209)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v209 + 32))(v209, this, "kappaPulseResult");
  v210 = *(_QWORD *)(a1 + 1656);
  if (v210)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v210 + 32))(v210, this, "kappaQuiescenceResult");
  v211 = *(_QWORD *)(a1 + 1664);
  if (v211)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v211 + 32))(v211, this, "kappaRecoveryResult");
  v212 = *(_QWORD *)(a1 + 1672);
  if (v212)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v212 + 32))(v212, this, "kappaRemoteAudioResult");
  v213 = *(_QWORD *)(a1 + 1680);
  if (v213)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v213 + 32))(v213, this, "kappaRoads");
  v214 = *(_QWORD *)(a1 + 1688);
  if (v214)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v214 + 32))(v214, this, "kappaRoadsResult");
  v215 = *(_QWORD *)(a1 + 1696);
  if (v215)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v215 + 32))(v215, this, "kappaRolloverCrashResult");
  v216 = *(_QWORD *)(a1 + 1704);
  if (v216)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v216 + 32))(v216, this, "kappaSevereCrashResult");
  v217 = *(_QWORD *)(a1 + 1712);
  if (v217)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v217 + 32))(v217, this, "kappaSpinResult");
  v218 = *(_QWORD *)(a1 + 1720);
  if (v218)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v218 + 32))(v218, this, "kappaSteps");
  v219 = *(_QWORD *)(a1 + 1728);
  if (v219)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v219 + 32))(v219, this, "kappaStepsResult");
  v220 = *(_QWORD *)(a1 + 1736);
  if (v220)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v220 + 32))(v220, this, "kappaTrigger");
  v221 = *(_QWORD *)(a1 + 1744);
  if (v221)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v221 + 32))(v221, this, "kappaTriggerClustersResult");
  v222 = *(_QWORD *)(a1 + 1752);
  if (v222)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v222 + 32))(v222, this, "kappaTriggerDebug");
  v223 = *(_QWORD *)(a1 + 1760);
  if (v223)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v223 + 32))(v223, this, "kappaZgDetected");
  v224 = *(_QWORD *)(a1 + 1768);
  if (v224)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v224 + 32))(v224, this, "kappaZgResult");
  v225 = *(_QWORD *)(a1 + 1776);
  if (v225)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v225 + 32))(v225, this, "keyboardAttached");
  v226 = *(_QWORD *)(a1 + 1784);
  if (v226)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v226 + 32))(v226, this, "keyboardKeyPress");
  v227 = *(_QWORD *)(a1 + 1792);
  if (v227)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v227 + 32))(v227, this, "keyboardMotionFeatures");
  v228 = *(_QWORD *)(a1 + 1800);
  if (v228)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v228 + 32))(v228, this, "keyboardMotionState");
  v229 = *(_QWORD *)(a1 + 1808);
  if (v229)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v229 + 32))(v229, this, "keyboardMotionTrackpad");
  v230 = *(_QWORD *)(a1 + 1816);
  if (v230)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v230 + 32))(v230, this, "kmVelocityEstimatorState");
  v231 = *(_QWORD *)(a1 + 1824);
  if (v231)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v231 + 32))(v231, this, "legacyALS5CHInput");
  v232 = *(_QWORD *)(a1 + 1832);
  if (v232)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v232 + 32))(v232, this, "liftToWakeFeaturesNeo");
  v233 = *(_QWORD *)(a1 + 1840);
  if (v233)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v233 + 32))(v233, this, "liftToWakeOnHeadStatus");
  v234 = *(_QWORD *)(a1 + 1848);
  if (v234)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v234 + 32))(v234, this, "liftToWakeState");
  v235 = *(_QWORD *)(a1 + 1856);
  if (v235)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v235 + 32))(v235, this, "liftToWakeStatusNeo");
  v236 = *(_QWORD *)(a1 + 1864);
  if (v236)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v236 + 32))(v236, this, "locationOscarEmu");
  v237 = *(_QWORD *)(a1 + 1872);
  if (v237)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v237 + 32))(v237, this, "lockScreenStatus");
  v238 = *(_QWORD *)(a1 + 1880);
  if (v238)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v238 + 32))(v238, this, "lslHeadingEstimation");
  v239 = *(_QWORD *)(a1 + 1888);
  if (v239)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v239 + 32))(v239, this, "mLBasedBioMotionClassification");
  v240 = *(_QWORD *)(a1 + 1896);
  if (v240)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v240 + 32))(v240, this, "magicMountState");
  v241 = *(_QWORD *)(a1 + 1904);
  if (v241)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v241 + 32))(v241, this, "magneticAccessoryType1");
  v242 = *(_QWORD *)(a1 + 1912);
  if (v242)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v242 + 32))(v242, this, "magneticAccessoryType2");
  v243 = *(_QWORD *)(a1 + 1920);
  if (v243)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v243 + 32))(v243, this, "magnetometer");
  v244 = *(_QWORD *)(a1 + 1928);
  if (v244)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v244 + 32))(v244, this, "magnetometerCalibratorFilterParameters");
  v245 = *(_QWORD *)(a1 + 1936);
  if (v245)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v245 + 32))(v245, this, "magnetometerReset");
  v246 = *(_QWORD *)(a1 + 1944);
  if (v246)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v246 + 32))(v246, this, "mapsRouteHintData");
  v247 = *(_QWORD *)(a1 + 1952);
  if (v247)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v247 + 32))(v247, this, "metsInfo");
  v248 = *(_QWORD *)(a1 + 1960);
  if (v248)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v248 + 32))(v248, this, "mobilityBoutMetrics");
  v249 = *(_QWORD *)(a1 + 1968);
  if (v249)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v249 + 32))(v249, this, "mobilitySmoothedGaitMetrics");
  v250 = *(_QWORD *)(a1 + 1976);
  if (v250)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v250 + 32))(v250, this, "modelBasedBioMotionClassification");
  v251 = *(_QWORD *)(a1 + 1984);
  if (v251)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v251 + 32))(v251, this, "motionActivity");
  v252 = *(_QWORD *)(a1 + 1992);
  if (v252)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v252 + 32))(v252, this, "motionActivityReplay");
  v253 = *(_QWORD *)(a1 + 2000);
  if (v253)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v253 + 32))(v253, this, "motionContextActivity");
  v254 = *(_QWORD *)(a1 + 2008);
  if (v254)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v254 + 32))(v254, this, "motionGPSLocation");
  v255 = *(_QWORD *)(a1 + 2016);
  if (v255)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v255 + 32))(v255, this, "motionHint");
  v256 = *(_QWORD *)(a1 + 2024);
  if (v256)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v256 + 32))(v256, this, "motionLocation");
  v257 = *(_QWORD *)(a1 + 2032);
  if (v257)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v257 + 32))(v257, this, "motionLoiAltitudeData");
  v258 = *(_QWORD *)(a1 + 2040);
  if (v258)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v258 + 32))(v258, this, "motionLoiData");
  v259 = *(_QWORD *)(a1 + 2048);
  if (v259)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v259 + 32))(v259, this, "motionStateUpdate");
  v260 = *(_QWORD *)(a1 + 2056);
  if (v260)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v260 + 32))(v260, this, "motionWifiAssociation");
  v261 = *(_QWORD *)(a1 + 2064);
  if (v261)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v261 + 32))(v261, this, "motionWifiLocation");
  v262 = *(_QWORD *)(a1 + 2072);
  if (v262)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v262 + 32))(v262, this, "movementStats");
  v263 = *(_QWORD *)(a1 + 2080);
  if (v263)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v263 + 32))(v263, this, "movementStatsGravityProjection");
  v264 = *(_QWORD *)(a1 + 2088);
  if (v264)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v264 + 32))(v264, this, "movementStatsSignal");
  v265 = *(_QWORD *)(a1 + 2096);
  if (v265)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v265 + 32))(v265, this, "natalieData");
  v266 = *(_QWORD *)(a1 + 2104);
  if (v266)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v266 + 32))(v266, this, "nonlinearBiasFit");
  v267 = *(_QWORD *)(a1 + 2112);
  if (v267)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v267 + 32))(v267, this, "odometer");
  v268 = *(_QWORD *)(a1 + 2120);
  if (v268)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v268 + 32))(v268, this, "odometerWithAltitude");
  v269 = *(_QWORD *)(a1 + 2128);
  if (v269)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v269 + 32))(v269, this, "odtPose");
  v270 = *(_QWORD *)(a1 + 2136);
  if (v270)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v270 + 32))(v270, this, "onsetHeartRateData");
  v271 = *(_QWORD *)(a1 + 2144);
  if (v271)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v271 + 32))(v271, this, "orientation");
  v272 = *(_QWORD *)(a1 + 2152);
  if (v272)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v272 + 32))(v272, this, "pdrAlgType");
  v273 = *(_QWORD *)(a1 + 2160);
  if (v273)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v273 + 32))(v273, this, "pdrDOTEstimatorState");
  v274 = *(_QWORD *)(a1 + 2168);
  if (v274)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v274 + 32))(v274, this, "pdrDOTEstimatorStateArmSwing");
  v275 = *(_QWORD *)(a1 + 2176);
  if (v275)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v275 + 32))(v275, this, "pdrDOTEstimatorStateBody");
  v276 = *(_QWORD *)(a1 + 2184);
  if (v276)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v276 + 32))(v276, this, "pdrDOTEstimatorStateBodyDebug");
  v277 = *(_QWORD *)(a1 + 2192);
  if (v277)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v277 + 32))(v277, this, "pdrDOTEstimatorStateDebug");
  v278 = *(_QWORD *)(a1 + 2200);
  if (v278)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v278 + 32))(v278, this, "pdrDOTEstimatorStateHeading");
  v279 = *(_QWORD *)(a1 + 2208);
  if (v279)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v279 + 32))(v279, this, "pdrDOTEstimatorUncertaintyModelOnBody");
  v280 = *(_QWORD *)(a1 + 2216);
  if (v280)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v280 + 32))(v280, this, "pdrDOTMeasurementSelectorState");
  v281 = *(_QWORD *)(a1 + 2224);
  if (v281)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v281 + 32))(v281, this, "pdrFeatures");
  v282 = *(_QWORD *)(a1 + 2232);
  if (v282)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v282 + 32))(v282, this, "pdrFenceReference");
  v283 = *(_QWORD *)(a1 + 2240);
  if (v283)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v283 + 32))(v283, this, "pdrFenceState");
  v284 = *(_QWORD *)(a1 + 2248);
  if (v284)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v284 + 32))(v284, this, "pdrImpulse");
  v285 = *(_QWORD *)(a1 + 2256);
  if (v285)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v285 + 32))(v285, this, "pdrMLModelOutput");
  v286 = *(_QWORD *)(a1 + 2264);
  if (v286)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v286 + 32))(v286, this, "pdrPedestrianClassifierState");
  v287 = *(_QWORD *)(a1 + 2272);
  if (v287)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v287 + 32))(v287, this, "pdrPlacementClassifierState");
  v288 = *(_QWORD *)(a1 + 2280);
  if (v288)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v288 + 32))(v288, this, "pdrSpeedEstimatorState");
  v289 = *(_QWORD *)(a1 + 2288);
  if (v289)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v289 + 32))(v289, this, "pdrSpeedEstimatorStateDebug");
  v290 = *(_QWORD *)(a1 + 2296);
  if (v290)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v290 + 32))(v290, this, "pdrVelocityEstimatorState");
  v291 = *(_QWORD *)(a1 + 2304);
  if (v291)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v291 + 32))(v291, this, "pearlAttitude");
  v292 = *(_QWORD *)(a1 + 2312);
  if (v292)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v292 + 32))(v292, this, "pedOdomFusionExtendedModeSegment");
  v293 = *(_QWORD *)(a1 + 2320);
  if (v293)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v293 + 32))(v293, this, "pedestrianCalorieModelDebugging");
  v294 = *(_QWORD *)(a1 + 2328);
  if (v294)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v294 + 32))(v294, this, "pedestrianFenceExit");
  v295 = *(_QWORD *)(a1 + 2336);
  if (v295)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v295 + 32))(v295, this, "pedometerPathStraightness");
  v296 = *(_QWORD *)(a1 + 2344);
  if (v296)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v296 + 32))(v296, this, "peerState");
  v297 = *(_QWORD *)(a1 + 2352);
  if (v297)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v297 + 32))(v297, this, "pencilDeviceMotion");
  v298 = *(_QWORD *)(a1 + 2360);
  if (v298)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v298 + 32))(v298, this, "pencilFusionDMYawAlignmentUpdate");
  v299 = *(_QWORD *)(a1 + 2368);
  if (v299)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v299 + 32))(v299, this, "pencilFusionReplayResult");
  v300 = *(_QWORD *)(a1 + 2376);
  if (v300)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v300 + 32))(v300, this, "pencilFusionResult");
  v301 = *(_QWORD *)(a1 + 2384);
  if (v301)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v301 + 32))(v301, this, "pencilFusionRingSensorTrustModelUpdate");
  v302 = *(_QWORD *)(a1 + 2392);
  if (v302)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v302 + 32))(v302, this, "pencilTipForce");
  v303 = *(_QWORD *)(a1 + 2400);
  if (v303)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v303 + 32))(v303, this, "pencilTouch");
  v304 = *(_QWORD *)(a1 + 2408);
  if (v304)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v304 + 32))(v304, this, "physicalEffortInput");
  v305 = *(_QWORD *)(a1 + 2416);
  if (v305)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v305 + 32))(v305, this, "physicalEffortSample");
  v306 = *(_QWORD *)(a1 + 2424);
  if (v306)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v306 + 32))(v306, this, "pocketDetectionPacket");
  v307 = *(_QWORD *)(a1 + 2432);
  if (v307)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v307 + 32))(v307, this, "pose");
  v308 = *(_QWORD *)(a1 + 2440);
  if (v308)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v308 + 32))(v308, this, "poseState");
  v309 = *(_QWORD *)(a1 + 2448);
  if (v309)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v309 + 32))(v309, this, "postureJoint");
  v310 = *(_QWORD *)(a1 + 2456);
  if (v310)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v310 + 32))(v310, this, "postureSkeleton");
  v311 = *(_QWORD *)(a1 + 2464);
  if (v311)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v311 + 32))(v311, this, "powerManagementUserActivity");
  v312 = *(_QWORD *)(a1 + 2472);
  if (v312)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v312 + 32))(v312, this, "precisionFindingDOTEstimate");
  v313 = *(_QWORD *)(a1 + 2480);
  if (v313)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v313 + 32))(v313, this, "precisionFindingRangeFilter");
  v314 = *(_QWORD *)(a1 + 2488);
  if (v314)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v314 + 32))(v314, this, "precisionFindingSessionStartStop");
  v315 = *(_QWORD *)(a1 + 2496);
  if (v315)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v315 + 32))(v315, this, "precisionFindingState");
  v316 = *(_QWORD *)(a1 + 2504);
  if (v316)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v316 + 32))(v316, this, "precisionFindingVelocityEstimate");
  v317 = *(_QWORD *)(a1 + 2512);
  if (v317)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v317 + 32))(v317, this, "precisionFindingVerticalState");
  v318 = *(_QWORD *)(a1 + 2520);
  if (v318)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v318 + 32))(v318, this, "predictedRelativeDeviceMotion");
  v319 = *(_QWORD *)(a1 + 2528);
  if (v319)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v319 + 32))(v319, this, "pressure");
  v320 = *(_QWORD *)(a1 + 2536);
  if (v320)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v320 + 32))(v320, this, "pressureCalibration");
  v321 = *(_QWORD *)(a1 + 2544);
  if (v321)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v321 + 32))(v321, this, "pressureCompensated");
  v322 = *(_QWORD *)(a1 + 2552);
  if (v322)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v322 + 32))(v322, this, "pressureFiltered");
  v323 = *(_QWORD *)(a1 + 2560);
  if (v323)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v323 + 32))(v323, this, "pressureFiltered1HzLowPass");
  v324 = *(_QWORD *)(a1 + 2568);
  if (v324)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v324 + 32))(v324, this, "pressureFilteredNoTemperature");
  v325 = *(_QWORD *)(a1 + 2576);
  if (v325)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v325 + 32))(v325, this, "pressureGps");
  v326 = *(_QWORD *)(a1 + 2584);
  if (v326)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v326 + 32))(v326, this, "pressureOscarEmu");
  v327 = *(_QWORD *)(a1 + 2592);
  if (v327)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v327 + 32))(v327, this, "prox");
  v328 = *(_QWORD *)(a1 + 2600);
  if (v328)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v328 + 32))(v328, this, "proxBaselineEstimatorState");
  v329 = *(_QWORD *)(a1 + 2608);
  if (v329)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v329 + 32))(v329, this, "proxCalibration");
  v330 = *(_QWORD *)(a1 + 2616);
  if (v330)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v330 + 32))(v330, this, "proxPDP");
  v331 = *(_QWORD *)(a1 + 2624);
  if (v331)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v331 + 32))(v331, this, "ptsConsumedGNSS");
  v332 = *(_QWORD *)(a1 + 2632);
  if (v332)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v332 + 32))(v332, this, "ptsForwardPropagation");
  v333 = *(_QWORD *)(a1 + 2640);
  if (v333)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v333 + 32))(v333, this, "ptsMapMatchedRoute");
  v334 = *(_QWORD *)(a1 + 2648);
  if (v334)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v334 + 32))(v334, this, "ptsReconstructedRoute");
  v335 = *(_QWORD *)(a1 + 2656);
  if (v335)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v335 + 32))(v335, this, "rawAudio");
  v336 = *(_QWORD *)(a1 + 2664);
  if (v336)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v336 + 32))(v336, this, "relDMInSystemConfig");
  v337 = *(_QWORD *)(a1 + 2672);
  if (v337)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v337 + 32))(v337, this, "relativeDeviceMotionComplexTransition");
  v338 = *(_QWORD *)(a1 + 2680);
  if (v338)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v338 + 32))(v338, this, "relativeDeviceMotionCorrelatedMotion");
  v339 = *(_QWORD *)(a1 + 2688);
  if (v339)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v339 + 32))(v339, this, "relativeDeviceMotionInternal");
  v340 = *(_QWORD *)(a1 + 2696);
  if (v340)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v340 + 32))(v340, this, "relativeGravityConstraints");
  v341 = *(_QWORD *)(a1 + 2704);
  if (v341)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v341 + 32))(v341, this, "relativeGravityCorrection");
  v342 = *(_QWORD *)(a1 + 2712);
  if (v342)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v342 + 32))(v342, this, "rhythmicGnssOperatorStatus");
  v343 = *(_QWORD *)(a1 + 2720);
  if (v343)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v343 + 32))(v343, this, "rotationRate");
  v344 = *(_QWORD *)(a1 + 2728);
  if (v344)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v344 + 32))(v344, this, "runningArmSwingSignals");
  v345 = *(_QWORD *)(a1 + 2736);
  if (v345)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v345 + 32))(v345, this, "runningCentripetalAccelSignals");
  v346 = *(_QWORD *)(a1 + 2744);
  if (v346)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v346 + 32))(v346, this, "runningFormMetrics");
  v347 = *(_QWORD *)(a1 + 2752);
  if (v347)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v347 + 32))(v347, this, "runningPower");
  v348 = *(_QWORD *)(a1 + 2760);
  if (v348)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v348 + 32))(v348, this, "runningRotationAxis");
  v349 = *(_QWORD *)(a1 + 2768);
  if (v349)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v349 + 32))(v349, this, "runningSpeedKFResult");
  v350 = *(_QWORD *)(a1 + 2776);
  if (v350)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v350 + 32))(v350, this, "runningStrideLength");
  v351 = *(_QWORD *)(a1 + 2784);
  if (v351)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v351 + 32))(v351, this, "runningVerticalOscillation");
  v352 = *(_QWORD *)(a1 + 2792);
  if (v352)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v352 + 32))(v352, this, "runningVerticalOscillationGradientBoostedSignals");
  v353 = *(_QWORD *)(a1 + 2800);
  if (v353)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v353 + 32))(v353, this, "runningVerticalOscillationSignals");
  v354 = *(_QWORD *)(a1 + 2808);
  if (v354)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v354 + 32))(v354, this, "safetyCompanionStatus");
  v355 = *(_QWORD *)(a1 + 2816);
  if (v355)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v355 + 32))(v355, this, "safetyHertzSample");
  v356 = *(_QWORD *)(a1 + 2824);
  if (v356)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v356 + 32))(v356, this, "safetyRemoteSample");
  v357 = *(_QWORD *)(a1 + 2832);
  if (v357)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v357 + 32))(v357, this, "safetyTrustedAudioResult");
  v358 = *(_QWORD *)(a1 + 2840);
  if (v358)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v358 + 32))(v358, this, "sessionOverride");
  v359 = *(_QWORD *)(a1 + 2848);
  if (v359)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v359 + 32))(v359, this, "signalEnvironment");
  v360 = *(_QWORD *)(a1 + 2856);
  if (v360)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v360 + 32))(v360, this, "simActivityEvent");
  v361 = *(_QWORD *)(a1 + 2864);
  if (v361)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v361 + 32))(v361, this, "sitStandDetectorFeatures");
  v362 = *(_QWORD *)(a1 + 2872);
  if (v362)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v362 + 32))(v362, this, "sitStandDetectorPosteriorBufferStatsForSitToStand");
  v363 = *(_QWORD *)(a1 + 2880);
  if (v363)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v363 + 32))(v363, this, "sitStandDetectorPosteriorBufferStatsForStandToSit");
  v364 = *(_QWORD *)(a1 + 2888);
  if (v364)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v364 + 32))(v364, this, "sitStandDetectorTransitions");
  v365 = *(_QWORD *)(a1 + 2896);
  if (v365)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v365 + 32))(v365, this, "skeleton2D");
  v366 = *(_QWORD *)(a1 + 2904);
  if (v366)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v366 + 32))(v366, this, "skeleton3D");
  v367 = *(_QWORD *)(a1 + 2912);
  if (v367)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v367 + 32))(v367, this, "skeleton3DLifted");
  v368 = *(_QWORD *)(a1 + 2920);
  if (v368)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v368 + 32))(v368, this, "skeleton3DRetargeted");
  v369 = *(_QWORD *)(a1 + 2928);
  if (v369)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v369 + 32))(v369, this, "spatialEvent");
  v370 = *(_QWORD *)(a1 + 2936);
  if (v370)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v370 + 32))(v370, this, "spl");
  v371 = *(_QWORD *)(a1 + 2944);
  if (v371)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v371 + 32))(v371, this, "spuPlaybackExampleDeviceMotion");
  v372 = *(_QWORD *)(a1 + 2952);
  if (v372)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v372 + 32))(v372, this, "spuPlaybackExampleMotionStateUpdate");
  v373 = *(_QWORD *)(a1 + 2960);
  if (v373)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v373 + 32))(v373, this, "steadinessEvent");
  v374 = *(_QWORD *)(a1 + 2968);
  if (v374)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v374 + 32))(v374, this, "steadinessModelBalanceFeatures");
  v375 = *(_QWORD *)(a1 + 2976);
  if (v375)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v375 + 32))(v375, this, "steadinessModelContinuousWalkingFeatures");
  v376 = *(_QWORD *)(a1 + 2984);
  if (v376)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v376 + 32))(v376, this, "steadinessModelGaitBaselineFeatures");
  v377 = *(_QWORD *)(a1 + 2992);
  if (v377)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v377 + 32))(v377, this, "steadinessModelHarmonicFeatures");
  v378 = *(_QWORD *)(a1 + 3000);
  if (v378)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v378 + 32))(v378, this, "steadinessModelResult");
  v379 = *(_QWORD *)(a1 + 3008);
  if (v379)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v379 + 32))(v379, this, "steadinessModelTemporalDispersionFeatures");
  v380 = *(_QWORD *)(a1 + 3016);
  if (v380)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v380 + 32))(v380, this, "steadinessModelTemporalEntropyFeatures");
  v381 = *(_QWORD *)(a1 + 3024);
  if (v381)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v381 + 32))(v381, this, "stepCadenceToStrideLengthBin");
  v382 = *(_QWORD *)(a1 + 3032);
  if (v382)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v382 + 32))(v382, this, "stepCountEntry");
  v383 = *(_QWORD *)(a1 + 3040);
  if (v383)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v383 + 32))(v383, this, "stepCountEntryAddition");
  v384 = *(_QWORD *)(a1 + 3048);
  if (v384)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v384 + 32))(v384, this, "stepDistanceFusionResult");
  v385 = *(_QWORD *)(a1 + 3056);
  if (v385)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v385 + 32))(v385, this, "stepLikelihoodFeatures");
  v386 = *(_QWORD *)(a1 + 3064);
  if (v386)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v386 + 32))(v386, this, "streamingHeartRateData");
  v387 = *(_QWORD *)(a1 + 3072);
  if (v387)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v387 + 32))(v387, this, "streamingHighFrequencyHeartRateData");
  v388 = *(_QWORD *)(a1 + 3080);
  if (v388)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v388 + 32))(v388, this, "strideCalBin");
  v389 = *(_QWORD *)(a1 + 3088);
  if (v389)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v389 + 32))(v389, this, "strideCalEntry");
  v390 = *(_QWORD *)(a1 + 3096);
  if (v390)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v390 + 32))(v390, this, "subStats");
  v391 = *(_QWORD *)(a1 + 3104);
  if (v391)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v391 + 32))(v391, this, "swingDoTCandidate");
  v392 = *(_QWORD *)(a1 + 3112);
  if (v392)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v392 + 32))(v392, this, "tapAccept");
  v393 = *(_QWORD *)(a1 + 3120);
  if (v393)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v393 + 32))(v393, this, "tapDetect");
  v394 = *(_QWORD *)(a1 + 3128);
  if (v394)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v394 + 32))(v394, this, "tempestPoCAuxiliaryDeviceMotion");
  v395 = *(_QWORD *)(a1 + 3136);
  if (v395)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v395 + 32))(v395, this, "tempestPoCListenerOrientation");
  v396 = *(_QWORD *)(a1 + 3144);
  if (v396)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v396 + 32))(v396, this, "timestamp");
  v397 = *(_QWORD *)(a1 + 3152);
  if (v397)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v397 + 32))(v397, this, "touchOscarEmu");
  v398 = *(_QWORD *)(a1 + 3160);
  if (v398)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v398 + 32))(v398, this, "trackRunData");
  v399 = *(_QWORD *)(a1 + 3168);
  if (v399)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v399 + 32))(v399, this, "ultraFastAccel");
  v400 = *(_QWORD *)(a1 + 3176);
  if (v400)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v400 + 32))(v400, this, "userInteraction");
  v401 = *(_QWORD *)(a1 + 3184);
  if (v401)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v401 + 32))(v401, this, "userStudyEvent");
  v402 = *(_QWORD *)(a1 + 3192);
  if (v402)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v402 + 32))(v402, this, "uwbRange");
  v403 = *(_QWORD *)(a1 + 3200);
  if (v403)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v403 + 32))(v403, this, "vO2MaxModelInput");
  v404 = *(_QWORD *)(a1 + 3208);
  if (v404)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v404 + 32))(v404, this, "velocityEstimatorFusionState");
  v405 = *(_QWORD *)(a1 + 3216);
  if (v405)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v405 + 32))(v405, this, "vibrationEvent");
  v406 = *(_QWORD *)(a1 + 3224);
  if (v406)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v406 + 32))(v406, this, "viewObstructedMachineLearningDecision");
  v407 = *(_QWORD *)(a1 + 3232);
  if (v407)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v407 + 32))(v407, this, "viewObstructedMachineLearningFeatures");
  v408 = *(_QWORD *)(a1 + 3240);
  if (v408)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v408 + 32))(v408, this, "viewObstructedMachineLearningProbabilities");
  v409 = *(_QWORD *)(a1 + 3248);
  if (v409)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v409 + 32))(v409, this, "viewObstructedState");
  v410 = *(_QWORD *)(a1 + 3256);
  if (v410)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v410 + 32))(v410, this, "vioEstimation");
  v411 = *(_QWORD *)(a1 + 3264);
  if (v411)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v411 + 32))(v411, this, "vioPose");
  v412 = *(_QWORD *)(a1 + 3272);
  if (v412)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v412 + 32))(v412, this, "vioReplayPose");
  v413 = *(_QWORD *)(a1 + 3280);
  if (v413)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v413 + 32))(v413, this, "visionCompassBias");
  v414 = *(_QWORD *)(a1 + 3288);
  if (v414)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v414 + 32))(v414, this, "visualLocalization");
  v415 = *(_QWORD *)(a1 + 3296);
  if (v415)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v415 + 32))(v415, this, "visualLocalizationAttitudeConstraints");
  v416 = *(_QWORD *)(a1 + 3304);
  if (v416)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v416 + 32))(v416, this, "visualLocalizationAttitudeCorrection");
  v417 = *(_QWORD *)(a1 + 3312);
  if (v417)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v417 + 32))(v417, this, "visualStateMeasurement");
  v418 = *(_QWORD *)(a1 + 3320);
  if (v418)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v418 + 32))(v418, this, "vo2MaxInput");
  v419 = *(_QWORD *)(a1 + 3328);
  if (v419)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v419 + 32))(v419, this, "vo2MaxOutput");
  v420 = *(_QWORD *)(a1 + 3336);
  if (v420)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v420 + 32))(v420, this, "wakeGestureNotification");
  v421 = *(_QWORD *)(a1 + 3344);
  if (v421)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v421 + 32))(v421, this, "wakeGestureSample");
  v422 = *(_QWORD *)(a1 + 3352);
  if (v422)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v422 + 32))(v422, this, "walkingDetectionResult");
  v423 = *(_QWORD *)(a1 + 3360);
  if (v423)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v423 + 32))(v423, this, "walkingSteadinessClassification");
  v424 = *(_QWORD *)(a1 + 3368);
  if (v424)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v424 + 32))(v424, this, "watchActiveCalories");
  v425 = *(_QWORD *)(a1 + 3376);
  if (v425)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v425 + 32))(v425, this, "watchBasalCalories");
  v426 = *(_QWORD *)(a1 + 3384);
  if (v426)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v426 + 32))(v426, this, "watchEnclosureMaterial");
  v427 = *(_QWORD *)(a1 + 3392);
  if (v427)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v427 + 32))(v427, this, "watchHeartRateData");
  v428 = *(_QWORD *)(a1 + 3400);
  if (v428)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v428 + 32))(v428, this, "watchOnWristState");
  v429 = *(_QWORD *)(a1 + 3408);
  if (v429)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v429 + 32))(v429, this, "watchOrientationSettings");
  v430 = *(_QWORD *)(a1 + 3416);
  if (v430)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v430 + 32))(v430, this, "wifiScanResults");
  v431 = *(_QWORD *)(a1 + 3424);
  if (v431)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v431 + 32))(v431, this, "workoutActivity");
  v432 = *(_QWORD *)(a1 + 3432);
  if (v432)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v432 + 32))(v432, this, "workoutEvent");
  v433 = *(_QWORD *)(a1 + 3440);
  if (v433)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v433 + 32))(v433, this, "workoutRecorderALSData");
  v434 = *(_QWORD *)(a1 + 3448);
  if (v434)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v434 + 32))(v434, this, "workoutRecorderAccel");
  v435 = *(_QWORD *)(a1 + 3456);
  if (v435)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v435 + 32))(v435, this, "workoutRecorderAccel800");
  v436 = *(_QWORD *)(a1 + 3464);
  if (v436)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v436 + 32))(v436, this, "workoutRecorderAveragedALSData");
  v437 = *(_QWORD *)(a1 + 3472);
  if (v437)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v437 + 32))(v437, this, "workoutRecorderBodyMetrics");
  v438 = *(_QWORD *)(a1 + 3480);
  if (v438)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v438 + 32))(v438, this, "workoutRecorderCompassCalibration");
  v439 = *(_QWORD *)(a1 + 3488);
  if (v439)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v439 + 32))(v439, this, "workoutRecorderElevation");
  v440 = *(_QWORD *)(a1 + 3496);
  if (v440)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v440 + 32))(v440, this, "workoutRecorderFaceCovered");
  v441 = *(_QWORD *)(a1 + 3504);
  if (v441)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v441 + 32))(v441, this, "workoutRecorderFitnessMachineData");
  v442 = *(_QWORD *)(a1 + 3512);
  if (v442)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v442 + 32))(v442, this, "workoutRecorderHealthKitInfo");
  v443 = *(_QWORD *)(a1 + 3520);
  if (v443)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v443 + 32))(v443, this, "workoutRecorderHeartRate");
  v444 = *(_QWORD *)(a1 + 3528);
  if (v444)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v444 + 32))(v444, this, "workoutRecorderMagnetometer");
  v445 = *(_QWORD *)(a1 + 3536);
  if (v445)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v445 + 32))(v445, this, "workoutRecorderOdometer");
  v446 = *(_QWORD *)(a1 + 3544);
  if (v446)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v446 + 32))(v446, this, "workoutRecorderPressure");
  v447 = *(_QWORD *)(a1 + 3552);
  if (v447)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v447 + 32))(v447, this, "workoutRecorderRotationRate");
  v448 = *(_QWORD *)(a1 + 3560);
  if (v448)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v448 + 32))(v448, this, "workoutRecorderWatchOnWristStatus");
  v449 = *(_QWORD *)(a1 + 3568);
  if (v449)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v449 + 32))(v449, this, "workoutRecorderWatchOrientationSettings");
  v450 = *(_QWORD *)(a1 + 3576);
  if (v450)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v450 + 32))(v450, this, "workoutRecorderWifiScanResults");
  v451 = *(_QWORD *)(a1 + 3584);
  if (v451)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v451 + 32))(v451, this, "workoutRecorderWorkoutEvent");
  v452 = *(_QWORD *)(a1 + 3592);
  if (v452)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v452 + 32))(v452, this, "workoutRecorderWorkoutSessionPriors");
  v453 = *(_QWORD *)(a1 + 3600);
  if (v453)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v453 + 32))(v453, this, "workoutSessionPriors");
  v454 = *(_QWORD *)(a1 + 3608);
  if (v454)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v454 + 32))(v454, this, "zeroVelocityCorrection");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1015F93B8(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t result;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  int v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v17 = 0;
        if (v2 > v3)
          v3 = v2;
        while (1)
        {
          if (v3 == v2)
          {
            v11 = 0;
            *((_BYTE *)this + 24) = 1;
            goto LABEL_24;
          }
          v18 = v2 + 1;
          v19 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v18;
          v17 |= (unint64_t)(v19 & 0x7F) << v15;
          if ((v19 & 0x80) == 0)
            break;
          v15 += 7;
          v2 = v18;
          v14 = v16++ > 8;
          if (v14)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_24;
          }
        }
        v11 = *((_BYTE *)this + 24) ? 0 : v17;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
      }
LABEL_24:
      v20 = v11 & 7;
      v4 = *((unsigned __int8 *)this + 24);
      if (*((_BYTE *)this + 24) || v20 == 4)
        break;
      v22 = v11 >> 3;
      if ((int)(v11 >> 3) <= 2047)
      {
        v24 = (v22 - 1);
        if (v24 <= 0x1FF)
          __asm { BR              X9 }
        v25 = (v22 - 1001);
        if (v25 <= 0x34)
          __asm { BR              X9 }
      }
      else if ((int)v22 > 29999)
      {
        switch((_DWORD)v22)
        {
          case 0x7530:
            operator new();
          case 0x7531:
            operator new();
          case 0x7532:
            operator new();
        }
      }
      else
      {
        v23 = (v22 - 2048);
        if (v23 <= 0xBC)
          __asm { BR              X9 }
      }
      result = PB::Reader::skip(this, v22, v20, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_1016006DC(uint64_t result, PB::Writer *this)
{
  _QWORD *v3;
  const PB::Base *v4;
  const PB::Base *v5;
  const PB::Base *v6;
  const PB::Base *v7;
  const PB::Base *v8;
  const PB::Base *v9;
  const PB::Base *v10;
  const PB::Base *v11;
  const PB::Base *v12;
  const PB::Base *v13;
  const PB::Base *v14;
  const PB::Base *v15;
  const PB::Base *v16;
  const PB::Base *v17;
  const PB::Base *v18;
  const PB::Base *v19;
  const PB::Base *v20;
  const PB::Base *v21;
  const PB::Base *v22;
  const PB::Base *v23;
  const PB::Base *v24;
  const PB::Base *v25;
  const PB::Base *v26;
  const PB::Base *v27;
  const PB::Base *v28;
  const PB::Base *v29;
  const PB::Base *v30;
  const PB::Base *v31;
  const PB::Base *v32;
  const PB::Base *v33;
  const PB::Base *v34;
  const PB::Base *v35;
  const PB::Base *v36;
  const PB::Base *v37;
  const PB::Base *v38;
  const PB::Base *v39;
  const PB::Base *v40;
  const PB::Base *v41;
  const PB::Base *v42;
  const PB::Base *v43;
  const PB::Base *v44;
  const PB::Base *v45;
  const PB::Base *v46;
  const PB::Base *v47;
  const PB::Base *v48;
  const PB::Base *v49;
  const PB::Base *v50;
  const PB::Base *v51;
  const PB::Base *v52;
  const PB::Base *v53;
  const PB::Base *v54;
  const PB::Base *v55;
  const PB::Base *v56;
  const PB::Base *v57;
  const PB::Base *v58;
  const PB::Base *v59;
  const PB::Base *v60;
  const PB::Base *v61;
  const PB::Base *v62;
  const PB::Base *v63;
  const PB::Base *v64;
  const PB::Base *v65;
  const PB::Base *v66;
  const PB::Base *v67;
  const PB::Base *v68;
  const PB::Base *v69;
  const PB::Base *v70;
  const PB::Base *v71;
  const PB::Base *v72;
  const PB::Base *v73;
  const PB::Base *v74;
  const PB::Base *v75;
  const PB::Base *v76;
  const PB::Base *v77;
  const PB::Base *v78;
  const PB::Base *v79;
  const PB::Base *v80;
  const PB::Base *v81;
  const PB::Base *v82;
  const PB::Base *v83;
  const PB::Base *v84;
  const PB::Base *v85;
  const PB::Base *v86;
  const PB::Base *v87;
  const PB::Base *v88;
  const PB::Base *v89;
  const PB::Base *v90;
  const PB::Base *v91;
  const PB::Base *v92;
  const PB::Base *v93;
  const PB::Base *v94;
  const PB::Base *v95;
  const PB::Base *v96;
  const PB::Base *v97;
  const PB::Base *v98;
  const PB::Base *v99;
  const PB::Base *v100;
  const PB::Base *v101;
  const PB::Base *v102;
  const PB::Base *v103;
  const PB::Base *v104;
  const PB::Base *v105;
  const PB::Base *v106;
  const PB::Base *v107;
  const PB::Base *v108;
  const PB::Base *v109;
  const PB::Base *v110;
  const PB::Base *v111;
  const PB::Base *v112;
  const PB::Base *v113;
  const PB::Base *v114;
  const PB::Base *v115;
  const PB::Base *v116;
  const PB::Base *v117;
  const PB::Base *v118;
  const PB::Base *v119;
  const PB::Base *v120;
  const PB::Base *v121;
  const PB::Base *v122;
  const PB::Base *v123;
  const PB::Base *v124;
  const PB::Base *v125;
  const PB::Base *v126;
  const PB::Base *v127;
  const PB::Base *v128;
  const PB::Base *v129;
  const PB::Base *v130;
  const PB::Base *v131;
  const PB::Base *v132;
  const PB::Base *v133;
  const PB::Base *v134;
  const PB::Base *v135;
  const PB::Base *v136;
  const PB::Base *v137;
  const PB::Base *v138;
  const PB::Base *v139;
  const PB::Base *v140;
  const PB::Base *v141;
  const PB::Base *v142;
  const PB::Base *v143;
  const PB::Base *v144;
  const PB::Base *v145;
  const PB::Base *v146;
  const PB::Base *v147;
  const PB::Base *v148;
  const PB::Base *v149;
  const PB::Base *v150;
  const PB::Base *v151;
  const PB::Base *v152;
  const PB::Base *v153;
  const PB::Base *v154;
  const PB::Base *v155;
  const PB::Base *v156;
  const PB::Base *v157;
  const PB::Base *v158;
  const PB::Base *v159;
  const PB::Base *v160;
  const PB::Base *v161;
  const PB::Base *v162;
  const PB::Base *v163;
  const PB::Base *v164;
  const PB::Base *v165;
  const PB::Base *v166;
  const PB::Base *v167;
  const PB::Base *v168;
  const PB::Base *v169;
  const PB::Base *v170;
  const PB::Base *v171;
  const PB::Base *v172;
  const PB::Base *v173;
  const PB::Base *v174;
  const PB::Base *v175;
  const PB::Base *v176;
  const PB::Base *v177;
  const PB::Base *v178;
  const PB::Base *v179;
  const PB::Base *v180;
  const PB::Base *v181;
  const PB::Base *v182;
  const PB::Base *v183;
  const PB::Base *v184;
  const PB::Base *v185;
  const PB::Base *v186;
  const PB::Base *v187;
  const PB::Base *v188;
  const PB::Base *v189;
  const PB::Base *v190;
  const PB::Base *v191;
  const PB::Base *v192;
  const PB::Base *v193;
  const PB::Base *v194;
  const PB::Base *v195;
  const PB::Base *v196;
  const PB::Base *v197;
  const PB::Base *v198;
  const PB::Base *v199;
  const PB::Base *v200;
  const PB::Base *v201;
  const PB::Base *v202;
  const PB::Base *v203;
  const PB::Base *v204;
  const PB::Base *v205;
  const PB::Base *v206;
  const PB::Base *v207;
  const PB::Base *v208;
  const PB::Base *v209;
  const PB::Base *v210;
  const PB::Base *v211;
  const PB::Base *v212;
  const PB::Base *v213;
  const PB::Base *v214;
  const PB::Base *v215;
  const PB::Base *v216;
  const PB::Base *v217;
  const PB::Base *v218;
  const PB::Base *v219;
  const PB::Base *v220;
  const PB::Base *v221;
  const PB::Base *v222;
  const PB::Base *v223;
  const PB::Base *v224;
  const PB::Base *v225;
  const PB::Base *v226;
  const PB::Base *v227;
  const PB::Base *v228;
  const PB::Base *v229;
  const PB::Base *v230;
  const PB::Base *v231;
  const PB::Base *v232;
  const PB::Base *v233;
  const PB::Base *v234;
  const PB::Base *v235;
  const PB::Base *v236;
  const PB::Base *v237;
  const PB::Base *v238;
  const PB::Base *v239;
  const PB::Base *v240;
  const PB::Base *v241;
  const PB::Base *v242;
  const PB::Base *v243;
  const PB::Base *v244;
  const PB::Base *v245;
  const PB::Base *v246;
  const PB::Base *v247;
  const PB::Base *v248;
  const PB::Base *v249;
  const PB::Base *v250;
  const PB::Base *v251;
  const PB::Base *v252;
  const PB::Base *v253;
  const PB::Base *v254;
  const PB::Base *v255;
  const PB::Base *v256;
  const PB::Base *v257;
  const PB::Base *v258;
  const PB::Base *v259;
  const PB::Base *v260;
  const PB::Base *v261;
  const PB::Base *v262;
  const PB::Base *v263;
  const PB::Base *v264;
  const PB::Base *v265;
  const PB::Base *v266;
  const PB::Base *v267;
  const PB::Base *v268;
  const PB::Base *v269;
  const PB::Base *v270;
  const PB::Base *v271;
  const PB::Base *v272;
  const PB::Base *v273;
  const PB::Base *v274;
  const PB::Base *v275;
  const PB::Base *v276;
  const PB::Base *v277;
  const PB::Base *v278;
  const PB::Base *v279;
  const PB::Base *v280;
  const PB::Base *v281;
  const PB::Base *v282;
  const PB::Base *v283;
  const PB::Base *v284;
  const PB::Base *v285;
  const PB::Base *v286;
  const PB::Base *v287;
  const PB::Base *v288;
  const PB::Base *v289;
  const PB::Base *v290;
  const PB::Base *v291;
  const PB::Base *v292;
  const PB::Base *v293;
  const PB::Base *v294;
  const PB::Base *v295;
  const PB::Base *v296;
  const PB::Base *v297;
  const PB::Base *v298;
  const PB::Base *v299;
  const PB::Base *v300;
  const PB::Base *v301;
  const PB::Base *v302;
  const PB::Base *v303;
  const PB::Base *v304;
  const PB::Base *v305;
  const PB::Base *v306;
  const PB::Base *v307;
  const PB::Base *v308;
  const PB::Base *v309;
  const PB::Base *v310;
  const PB::Base *v311;
  const PB::Base *v312;
  const PB::Base *v313;
  const PB::Base *v314;
  const PB::Base *v315;
  const PB::Base *v316;
  const PB::Base *v317;
  const PB::Base *v318;
  const PB::Base *v319;
  const PB::Base *v320;
  const PB::Base *v321;
  const PB::Base *v322;
  const PB::Base *v323;
  const PB::Base *v324;
  const PB::Base *v325;
  const PB::Base *v326;
  const PB::Base *v327;
  const PB::Base *v328;
  const PB::Base *v329;
  const PB::Base *v330;
  const PB::Base *v331;
  const PB::Base *v332;
  const PB::Base *v333;
  const PB::Base *v334;
  const PB::Base *v335;
  const PB::Base *v336;
  const PB::Base *v337;
  const PB::Base *v338;
  const PB::Base *v339;
  const PB::Base *v340;
  const PB::Base *v341;
  const PB::Base *v342;
  const PB::Base *v343;
  const PB::Base *v344;
  const PB::Base *v345;
  const PB::Base *v346;
  const PB::Base *v347;
  const PB::Base *v348;
  const PB::Base *v349;
  const PB::Base *v350;
  const PB::Base *v351;
  const PB::Base *v352;
  const PB::Base *v353;
  const PB::Base *v354;
  const PB::Base *v355;
  const PB::Base *v356;
  const PB::Base *v357;
  const PB::Base *v358;
  const PB::Base *v359;
  const PB::Base *v360;
  const PB::Base *v361;
  const PB::Base *v362;
  const PB::Base *v363;
  const PB::Base *v364;
  const PB::Base *v365;
  const PB::Base *v366;
  const PB::Base *v367;
  const PB::Base *v368;
  const PB::Base *v369;
  const PB::Base *v370;
  const PB::Base *v371;
  const PB::Base *v372;
  const PB::Base *v373;
  const PB::Base *v374;
  const PB::Base *v375;
  const PB::Base *v376;
  const PB::Base *v377;
  const PB::Base *v378;
  const PB::Base *v379;
  const PB::Base *v380;
  const PB::Base *v381;
  const PB::Base *v382;
  const PB::Base *v383;
  const PB::Base *v384;
  const PB::Base *v385;
  const PB::Base *v386;
  const PB::Base *v387;
  const PB::Base *v388;
  const PB::Base *v389;
  const PB::Base *v390;
  const PB::Base *v391;
  const PB::Base *v392;
  const PB::Base *v393;
  const PB::Base *v394;
  const PB::Base *v395;
  const PB::Base *v396;
  const PB::Base *v397;
  const PB::Base *v398;
  const PB::Base *v399;
  const PB::Base *v400;
  const PB::Base *v401;
  const PB::Base *v402;
  const PB::Base *v403;
  const PB::Base *v404;
  const PB::Base *v405;
  const PB::Base *v406;
  const PB::Base *v407;
  const PB::Base *v408;
  const PB::Base *v409;
  const PB::Base *v410;
  const PB::Base *v411;
  const PB::Base *v412;
  const PB::Base *v413;
  const PB::Base *v414;
  const PB::Base *v415;
  const PB::Base *v416;
  const PB::Base *v417;
  const PB::Base *v418;
  const PB::Base *v419;
  const PB::Base *v420;
  const PB::Base *v421;
  const PB::Base *v422;
  const PB::Base *v423;
  const PB::Base *v424;
  const PB::Base *v425;
  const PB::Base *v426;
  const PB::Base *v427;
  const PB::Base *v428;
  const PB::Base *v429;
  const PB::Base *v430;
  const PB::Base *v431;
  const PB::Base *v432;
  const PB::Base *v433;
  const PB::Base *v434;
  const PB::Base *v435;
  const PB::Base *v436;
  const PB::Base *v437;
  const PB::Base *v438;
  const PB::Base *v439;
  const PB::Base *v440;
  const PB::Base *v441;
  const PB::Base *v442;
  const PB::Base *v443;
  const PB::Base *v444;
  const PB::Base *v445;
  const PB::Base *v446;
  const PB::Base *v447;
  const PB::Base *v448;
  const PB::Base *v449;
  const PB::Base *v450;
  const PB::Base *v451;
  const PB::Base *v452;
  const PB::Base *v453;

  v3 = (_QWORD *)result;
  if ((*(_BYTE *)(result + 3616) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 616), 1u);
  v4 = (const PB::Base *)v3[146];
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4, 2u);
  v5 = (const PB::Base *)v3[145];
  if (v5)
    result = PB::Writer::writeSubmessage(this, v5, 3u);
  v6 = (const PB::Base *)v3[142];
  if (v6)
    result = PB::Writer::writeSubmessage(this, v6, 4u);
  v7 = (const PB::Base *)v3[141];
  if (v7)
    result = PB::Writer::writeSubmessage(this, v7, 5u);
  v8 = (const PB::Base *)v3[85];
  if (v8)
    result = PB::Writer::writeSubmessage(this, v8, 6u);
  v9 = (const PB::Base *)v3[84];
  if (v9)
    result = PB::Writer::writeSubmessage(this, v9, 7u);
  v10 = (const PB::Base *)v3[91];
  if (v10)
    result = PB::Writer::writeSubmessage(this, v10, 8u);
  v11 = (const PB::Base *)v3[90];
  if (v11)
    result = PB::Writer::writeSubmessage(this, v11, 9u);
  v12 = (const PB::Base *)v3[180];
  if (v12)
    result = PB::Writer::writeSubmessage(this, v12, 0xAu);
  v13 = (const PB::Base *)v3[95];
  if (v13)
    result = PB::Writer::writeSubmessage(this, v13, 0xBu);
  v14 = (const PB::Base *)v3[11];
  if (v14)
    result = PB::Writer::writeSubmessage(this, v14, 0x10u);
  v15 = (const PB::Base *)v3[18];
  if (v15)
    result = PB::Writer::writeSubmessage(this, v15, 0x11u);
  v16 = (const PB::Base *)v3[27];
  if (v16)
    result = PB::Writer::writeSubmessage(this, v16, 0x12u);
  v17 = (const PB::Base *)v3[431];
  if (v17)
    result = PB::Writer::writeSubmessage(this, v17, 0x13u);
  v18 = (const PB::Base *)v3[434];
  if (v18)
    result = PB::Writer::writeSubmessage(this, v18, 0x14u);
  v19 = (const PB::Base *)v3[436];
  if (v19)
    result = PB::Writer::writeSubmessage(this, v19, 0x15u);
  v20 = (const PB::Base *)v3[440];
  if (v20)
    result = PB::Writer::writeSubmessage(this, v20, 0x16u);
  v21 = (const PB::Base *)v3[444];
  if (v21)
    result = PB::Writer::writeSubmessage(this, v21, 0x17u);
  v22 = (const PB::Base *)v3[442];
  if (v22)
    result = PB::Writer::writeSubmessage(this, v22, 0x18u);
  v23 = (const PB::Base *)v3[448];
  if (v23)
    result = PB::Writer::writeSubmessage(this, v23, 0x19u);
  v24 = (const PB::Base *)v3[415];
  if (v24)
    result = PB::Writer::writeSubmessage(this, v24, 0x1Au);
  v25 = (const PB::Base *)v3[68];
  if (v25)
    result = PB::Writer::writeSubmessage(this, v25, 0x1Bu);
  v26 = (const PB::Base *)v3[69];
  if (v26)
    result = PB::Writer::writeSubmessage(this, v26, 0x1Cu);
  v27 = (const PB::Base *)v3[70];
  if (v27)
    result = PB::Writer::writeSubmessage(this, v27, 0x1Du);
  v28 = (const PB::Base *)v3[67];
  if (v28)
    result = PB::Writer::writeSubmessage(this, v28, 0x1Eu);
  v29 = (const PB::Base *)v3[71];
  if (v29)
    result = PB::Writer::writeSubmessage(this, v29, 0x1Fu);
  v30 = (const PB::Base *)v3[439];
  if (v30)
    result = PB::Writer::writeSubmessage(this, v30, 0x20u);
  v31 = (const PB::Base *)v3[288];
  if (v31)
    result = PB::Writer::writeSubmessage(this, v31, 0x21u);
  v32 = (const PB::Base *)v3[340];
  if (v32)
    result = PB::Writer::writeSubmessage(this, v32, 0x22u);
  v33 = (const PB::Base *)v3[446];
  if (v33)
    result = PB::Writer::writeSubmessage(this, v33, 0x23u);
  v34 = (const PB::Base *)v3[425];
  if (v34)
    result = PB::Writer::writeSubmessage(this, v34, 0x24u);
  v35 = (const PB::Base *)v3[76];
  if (v35)
    result = PB::Writer::writeSubmessage(this, v35, 0x25u);
  v36 = (const PB::Base *)v3[427];
  if (v36)
    result = PB::Writer::writeSubmessage(this, v36, 0x26u);
  v37 = (const PB::Base *)v3[176];
  if (v37)
    result = PB::Writer::writeSubmessage(this, v37, 0x27u);
  v38 = (const PB::Base *)v3[174];
  if (v38)
    result = PB::Writer::writeSubmessage(this, v38, 0x28u);
  v39 = (const PB::Base *)v3[169];
  if (v39)
    result = PB::Writer::writeSubmessage(this, v39, 0x29u);
  v40 = (const PB::Base *)v3[28];
  if (v40)
    result = PB::Writer::writeSubmessage(this, v40, 0x2Au);
  v41 = (const PB::Base *)v3[29];
  if (v41)
    result = PB::Writer::writeSubmessage(this, v41, 0x2Bu);
  v42 = (const PB::Base *)v3[34];
  if (v42)
    result = PB::Writer::writeSubmessage(this, v42, 0x2Cu);
  v43 = (const PB::Base *)v3[114];
  if (v43)
    result = PB::Writer::writeSubmessage(this, v43, 0x2Du);
  v44 = (const PB::Base *)v3[447];
  if (v44)
    result = PB::Writer::writeSubmessage(this, v44, 0x2Eu);
  v45 = (const PB::Base *)v3[443];
  if (v45)
    result = PB::Writer::writeSubmessage(this, v45, 0x2Fu);
  v46 = (const PB::Base *)v3[168];
  if (v46)
    result = PB::Writer::writeSubmessage(this, v46, 0x30u);
  v47 = (const PB::Base *)v3[410];
  if (v47)
    result = PB::Writer::writeSubmessage(this, v47, 0x31u);
  v48 = (const PB::Base *)v3[44];
  if (v48)
    result = PB::Writer::writeSubmessage(this, v48, 0x32u);
  v49 = (const PB::Base *)v3[407];
  if (v49)
    result = PB::Writer::writeSubmessage(this, v49, 0x33u);
  v50 = (const PB::Base *)v3[235];
  if (v50)
    result = PB::Writer::writeSubmessage(this, v50, 0x34u);
  v51 = (const PB::Base *)v3[125];
  if (v51)
    result = PB::Writer::writeSubmessage(this, v51, 0x35u);
  v52 = (const PB::Base *)v3[10];
  if (v52)
    result = PB::Writer::writeSubmessage(this, v52, 0x36u);
  v53 = (const PB::Base *)v3[259];
  if (v53)
    result = PB::Writer::writeSubmessage(this, v53, 0x37u);
  v54 = (const PB::Base *)v3[379];
  if (v54)
    result = PB::Writer::writeSubmessage(this, v54, 0x38u);
  v55 = (const PB::Base *)v3[245];
  if (v55)
    result = PB::Writer::writeSubmessage(this, v55, 0x39u);
  v56 = (const PB::Base *)v3[89];
  if (v56)
    result = PB::Writer::writeSubmessage(this, v56, 0x3Au);
  v57 = (const PB::Base *)v3[408];
  if (v57)
    result = PB::Writer::writeSubmessage(this, v57, 0x3Bu);
  v58 = (const PB::Base *)v3[356];
  if (v58)
    result = PB::Writer::writeSubmessage(this, v58, 0x3Cu);
  v59 = (const PB::Base *)v3[409];
  if (v59)
    result = PB::Writer::writeSubmessage(this, v59, 0x3Du);
  v60 = (const PB::Base *)v3[414];
  if (v60)
    result = PB::Writer::writeSubmessage(this, v60, 0x3Eu);
  v61 = (const PB::Base *)v3[219];
  if (v61)
    result = PB::Writer::writeSubmessage(this, v61, 0x3Fu);
  v62 = (const PB::Base *)v3[194];
  if (v62)
    result = PB::Writer::writeSubmessage(this, v62, 0x40u);
  v63 = (const PB::Base *)v3[166];
  if (v63)
    result = PB::Writer::writeSubmessage(this, v63, 0x41u);
  v64 = (const PB::Base *)v3[215];
  if (v64)
    result = PB::Writer::writeSubmessage(this, v64, 0x42u);
  v65 = (const PB::Base *)v3[397];
  if (v65)
    result = PB::Writer::writeSubmessage(this, v65, 0x43u);
  v66 = (const PB::Base *)v3[210];
  if (v66)
    result = PB::Writer::writeSubmessage(this, v66, 0x44u);
  v67 = (const PB::Base *)v3[16];
  if (v67)
    result = PB::Writer::writeSubmessage(this, v67, 0x64u);
  v68 = (const PB::Base *)v3[398];
  if (v68)
    result = PB::Writer::writeSubmessage(this, v68, 0x65u);
  v69 = (const PB::Base *)v3[47];
  if (v69)
    result = PB::Writer::writeSubmessage(this, v69, 0x66u);
  v70 = (const PB::Base *)v3[391];
  if (v70)
    result = PB::Writer::writeSubmessage(this, v70, 0x67u);
  v71 = (const PB::Base *)v3[46];
  if (v71)
    result = PB::Writer::writeSubmessage(this, v71, 0x68u);
  v72 = (const PB::Base *)v3[392];
  if (v72)
    result = PB::Writer::writeSubmessage(this, v72, 0x69u);
  v73 = (const PB::Base *)v3[432];
  if (v73)
    result = PB::Writer::writeSubmessage(this, v73, 0x6Au);
  v74 = (const PB::Base *)v3[37];
  if (v74)
    result = PB::Writer::writeSubmessage(this, v74, 0x6Bu);
  v75 = (const PB::Base *)v3[430];
  if (v75)
    result = PB::Writer::writeSubmessage(this, v75, 0x6Cu);
  v76 = (const PB::Base *)v3[411];
  if (v76)
    result = PB::Writer::writeSubmessage(this, v76, 0x6Du);
  v77 = (const PB::Base *)v3[155];
  if (v77)
    result = PB::Writer::writeSubmessage(this, v77, 0x6Eu);
  v78 = (const PB::Base *)v3[367];
  if (v78)
    result = PB::Writer::writeSubmessage(this, v78, 0x6Fu);
  v79 = (const PB::Base *)v3[131];
  if (v79)
    result = PB::Writer::writeSubmessage(this, v79, 0x70u);
  v80 = (const PB::Base *)v3[109];
  if (v80)
    result = PB::Writer::writeSubmessage(this, v80, 0x71u);
  v81 = (const PB::Base *)v3[4];
  if (v81)
    result = PB::Writer::writeSubmessage(this, v81, 0x72u);
  v82 = (const PB::Base *)v3[253];
  if (v82)
    result = PB::Writer::writeSubmessage(this, v82, 0x73u);
  v83 = (const PB::Base *)v3[248];
  if (v83)
    result = PB::Writer::writeSubmessage(this, v83, 0x74u);
  v84 = (const PB::Base *)v3[62];
  if (v84)
    result = PB::Writer::writeSubmessage(this, v84, 0x75u);
  v85 = (const PB::Base *)v3[217];
  if (v85)
    result = PB::Writer::writeSubmessage(this, v85, 0x76u);
  v86 = (const PB::Base *)v3[333];
  if (v86)
    result = PB::Writer::writeSubmessage(this, v86, 0x77u);
  v87 = (const PB::Base *)v3[183];
  if (v87)
    result = PB::Writer::writeSubmessage(this, v87, 0x78u);
  v88 = (const PB::Base *)v3[88];
  if (v88)
    result = PB::Writer::writeSubmessage(this, v88, 0x79u);
  v89 = (const PB::Base *)v3[151];
  if (v89)
    result = PB::Writer::writeSubmessage(this, v89, 0x7Au);
  v90 = (const PB::Base *)v3[152];
  if (v90)
    result = PB::Writer::writeSubmessage(this, v90, 0x7Bu);
  v91 = (const PB::Base *)v3[150];
  if (v91)
    result = PB::Writer::writeSubmessage(this, v91, 0x7Cu);
  v92 = (const PB::Base *)v3[149];
  if (v92)
    result = PB::Writer::writeSubmessage(this, v92, 0x7Du);
  v93 = (const PB::Base *)v3[59];
  if (v93)
    result = PB::Writer::writeSubmessage(this, v93, 0x7Eu);
  v94 = (const PB::Base *)v3[132];
  if (v94)
    result = PB::Writer::writeSubmessage(this, v94, 0x7Fu);
  v95 = (const PB::Base *)v3[247];
  if (v95)
    result = PB::Writer::writeSubmessage(this, v95, 0x80u);
  v96 = (const PB::Base *)v3[236];
  if (v96)
    result = PB::Writer::writeSubmessage(this, v96, 0x81u);
  v97 = (const PB::Base *)v3[304];
  if (v97)
    result = PB::Writer::writeSubmessage(this, v97, 0x82u);
  v98 = (const PB::Base *)v3[305];
  if (v98)
    result = PB::Writer::writeSubmessage(this, v98, 0x83u);
  v99 = (const PB::Base *)v3[63];
  if (v99)
    result = PB::Writer::writeSubmessage(this, v99, 0x84u);
  v100 = (const PB::Base *)v3[184];
  if (v100)
    result = PB::Writer::writeSubmessage(this, v100, 0x85u);
  v101 = (const PB::Base *)v3[87];
  if (v101)
    result = PB::Writer::writeSubmessage(this, v101, 0x86u);
  v102 = (const PB::Base *)v3[318];
  if (v102)
    result = PB::Writer::writeSubmessage(this, v102, 0x87u);
  v103 = (const PB::Base *)v3[416];
  if (v103)
    result = PB::Writer::writeSubmessage(this, v103, 0x88u);
  v104 = (const PB::Base *)v3[238];
  if (v104)
    result = PB::Writer::writeSubmessage(this, v104, 0x8Bu);
  v105 = (const PB::Base *)v3[239];
  if (v105)
    result = PB::Writer::writeSubmessage(this, v105, 0x8Cu);
  v106 = (const PB::Base *)v3[317];
  if (v106)
    result = PB::Writer::writeSubmessage(this, v106, 0x8Du);
  v107 = (const PB::Base *)v3[441];
  if (v107)
    result = PB::Writer::writeSubmessage(this, v107, 0x8Eu);
  v108 = (const PB::Base *)v3[435];
  if (v108)
    result = PB::Writer::writeSubmessage(this, v108, 0x8Fu);
  v109 = (const PB::Base *)v3[332];
  if (v109)
    result = PB::Writer::writeSubmessage(this, v109, 0x90u);
  v110 = (const PB::Base *)v3[73];
  if (v110)
    result = PB::Writer::writeSubmessage(this, v110, 0x91u);
  v111 = (const PB::Base *)v3[60];
  if (v111)
    result = PB::Writer::writeSubmessage(this, v111, 0x94u);
  v112 = (const PB::Base *)v3[61];
  if (v112)
    result = PB::Writer::writeSubmessage(this, v112, 0x96u);
  v113 = (const PB::Base *)v3[266];
  if (v113)
    result = PB::Writer::writeSubmessage(this, v113, 0x97u);
  v114 = (const PB::Base *)v3[299];
  if (v114)
    result = PB::Writer::writeSubmessage(this, v114, 0x98u);
  v115 = (const PB::Base *)v3[300];
  if (v115)
    result = PB::Writer::writeSubmessage(this, v115, 0x99u);
  v116 = (const PB::Base *)v3[48];
  if (v116)
    result = PB::Writer::writeSubmessage(this, v116, 0x9Au);
  v117 = (const PB::Base *)v3[393];
  if (v117)
    result = PB::Writer::writeSubmessage(this, v117, 0x9Bu);
  v118 = (const PB::Base *)v3[43];
  if (v118)
    result = PB::Writer::writeSubmessage(this, v118, 0x9Cu);
  v119 = (const PB::Base *)v3[58];
  if (v119)
    result = PB::Writer::writeSubmessage(this, v119, 0x9Du);
  v120 = (const PB::Base *)v3[64];
  if (v120)
    result = PB::Writer::writeSubmessage(this, v120, 0x9Eu);
  v121 = (const PB::Base *)v3[420];
  if (v121)
    result = PB::Writer::writeSubmessage(this, v121, 0x9Fu);
  v122 = (const PB::Base *)v3[375];
  if (v122)
    result = PB::Writer::writeSubmessage(this, v122, 0xA0u);
  v123 = (const PB::Base *)v3[370];
  if (v123)
    result = PB::Writer::writeSubmessage(this, v123, 0xA1u);
  v124 = (const PB::Base *)v3[373];
  if (v124)
    result = PB::Writer::writeSubmessage(this, v124, 0xA2u);
  v125 = (const PB::Base *)v3[372];
  if (v125)
    result = PB::Writer::writeSubmessage(this, v125, 0xA3u);
  v126 = (const PB::Base *)v3[376];
  if (v126)
    result = PB::Writer::writeSubmessage(this, v126, 0xA4u);
  v127 = (const PB::Base *)v3[377];
  if (v127)
    result = PB::Writer::writeSubmessage(this, v127, 0xA5u);
  v128 = (const PB::Base *)v3[371];
  if (v128)
    result = PB::Writer::writeSubmessage(this, v128, 0xA6u);
  v129 = (const PB::Base *)v3[242];
  if (v129)
    result = PB::Writer::writeSubmessage(this, v129, 0xA7u);
  v130 = (const PB::Base *)v3[445];
  if (v130)
    result = PB::Writer::writeSubmessage(this, v130, 0xA8u);
  v131 = (const PB::Base *)v3[230];
  if (v131)
    result = PB::Writer::writeSubmessage(this, v131, 0xA9u);
  v132 = (const PB::Base *)v3[24];
  if (v132)
    result = PB::Writer::writeSubmessage(this, v132, 0xAAu);
  v133 = (const PB::Base *)v3[380];
  if (v133)
    result = PB::Writer::writeSubmessage(this, v133, 0xABu);
  v134 = (const PB::Base *)v3[381];
  if (v134)
    result = PB::Writer::writeSubmessage(this, v134, 0xACu);
  v135 = (const PB::Base *)v3[363];
  if (v135)
    result = PB::Writer::writeSubmessage(this, v135, 0xADu);
  v136 = (const PB::Base *)v3[92];
  if (v136)
    result = PB::Writer::writeSubmessage(this, v136, 0xAEu);
  v137 = (const PB::Base *)v3[111];
  if (v137)
    result = PB::Writer::writeSubmessage(this, v137, 0xAFu);
  v138 = (const PB::Base *)v3[57];
  if (v138)
    result = PB::Writer::writeSubmessage(this, v138, 0xB0u);
  v139 = (const PB::Base *)v3[234];
  if (v139)
    result = PB::Writer::writeSubmessage(this, v139, 0xB1u);
  v140 = (const PB::Base *)v3[56];
  if (v140)
    result = PB::Writer::writeSubmessage(this, v140, 0xB2u);
  v141 = (const PB::Base *)v3[308];
  if (v141)
    result = PB::Writer::writeSubmessage(this, v141, 0xB3u);
  v142 = (const PB::Base *)v3[130];
  if (v142)
    result = PB::Writer::writeSubmessage(this, v142, 0xB4u);
  v143 = (const PB::Base *)v3[98];
  if (v143)
    result = PB::Writer::writeSubmessage(this, v143, 0xB5u);
  v144 = (const PB::Base *)v3[1];
  if (v144)
    result = PB::Writer::writeSubmessage(this, v144, 0xB6u);
  v145 = (const PB::Base *)v3[2];
  if (v145)
    result = PB::Writer::writeSubmessage(this, v145, 0xB7u);
  v146 = (const PB::Base *)v3[40];
  if (v146)
    result = PB::Writer::writeSubmessage(this, v146, 0xB8u);
  v147 = (const PB::Base *)v3[231];
  if (v147)
    result = PB::Writer::writeSubmessage(this, v147, 0xB9u);
  v148 = (const PB::Base *)v3[406];
  if (v148)
    result = PB::Writer::writeSubmessage(this, v148, 0xBAu);
  v149 = (const PB::Base *)v3[343];
  if (v149)
    result = PB::Writer::writeSubmessage(this, v149, 0xBBu);
  v150 = (const PB::Base *)v3[450];
  if (v150)
    result = PB::Writer::writeSubmessage(this, v150, 0xBCu);
  v151 = (const PB::Base *)v3[449];
  if (v151)
    result = PB::Writer::writeSubmessage(this, v151, 0xBDu);
  v152 = (const PB::Base *)v3[45];
  if (v152)
    result = PB::Writer::writeSubmessage(this, v152, 0xBEu);
  v153 = (const PB::Base *)v3[281];
  if (v153)
    result = PB::Writer::writeSubmessage(this, v153, 0xBFu);
  v154 = (const PB::Base *)v3[303];
  if (v154)
    result = PB::Writer::writeSubmessage(this, v154, 0xC0u);
  v155 = (const PB::Base *)v3[229];
  if (v155)
    result = PB::Writer::writeSubmessage(this, v155, 0xC1u);
  v156 = (const PB::Base *)v3[232];
  if (v156)
    result = PB::Writer::writeSubmessage(this, v156, 0xC2u);
  v157 = (const PB::Base *)v3[344];
  if (v157)
    result = PB::Writer::writeSubmessage(this, v157, 0xC3u);
  v158 = (const PB::Base *)v3[51];
  if (v158)
    result = PB::Writer::writeSubmessage(this, v158, 0xC4u);
  v159 = (const PB::Base *)v3[52];
  if (v159)
    result = PB::Writer::writeSubmessage(this, v159, 0xC5u);
  v160 = (const PB::Base *)v3[250];
  if (v160)
    result = PB::Writer::writeSubmessage(this, v160, 0xC6u);
  v161 = (const PB::Base *)v3[269];
  if (v161)
    result = PB::Writer::writeSubmessage(this, v161, 0xC7u);
  v162 = (const PB::Base *)v3[9];
  if (v162)
    result = PB::Writer::writeSubmessage(this, v162, 0xC8u);
  v163 = (const PB::Base *)v3[104];
  if (v163)
    result = PB::Writer::writeSubmessage(this, v163, 0xC9u);
  v164 = (const PB::Base *)v3[282];
  if (v164)
    result = PB::Writer::writeSubmessage(this, v164, 0xCAu);
  v165 = (const PB::Base *)v3[136];
  if (v165)
    result = PB::Writer::writeSubmessage(this, v165, 0xCBu);
  v166 = (const PB::Base *)v3[137];
  if (v166)
    result = PB::Writer::writeSubmessage(this, v166, 0xCCu);
  v167 = (const PB::Base *)v3[135];
  if (v167)
    result = PB::Writer::writeSubmessage(this, v167, 0xCDu);
  v168 = (const PB::Base *)v3[112];
  if (v168)
    result = PB::Writer::writeSubmessage(this, v168, 0xCEu);
  v169 = (const PB::Base *)v3[433];
  if (v169)
    result = PB::Writer::writeSubmessage(this, v169, 0xCFu);
  v170 = (const PB::Base *)v3[386];
  if (v170)
    result = PB::Writer::writeSubmessage(this, v170, 0xD0u);
  v171 = (const PB::Base *)v3[346];
  if (v171)
    result = PB::Writer::writeSubmessage(this, v171, 0xD1u);
  v172 = (const PB::Base *)v3[327];
  if (v172)
    result = PB::Writer::writeSubmessage(this, v172, 0xD2u);
  v173 = (const PB::Base *)v3[224];
  if (v173)
    result = PB::Writer::writeSubmessage(this, v173, 0xD4u);
  v174 = (const PB::Base *)v3[225];
  if (v174)
    result = PB::Writer::writeSubmessage(this, v174, 0xD5u);
  v175 = (const PB::Base *)v3[38];
  if (v175)
    result = PB::Writer::writeSubmessage(this, v175, 0xD6u);
  v176 = (const PB::Base *)v3[223];
  if (v176)
    result = PB::Writer::writeSubmessage(this, v176, 0xD7u);
  v177 = (const PB::Base *)v3[417];
  if (v177)
    result = PB::Writer::writeSubmessage(this, v177, 0xD8u);
  v178 = (const PB::Base *)v3[325];
  if (v178)
    result = PB::Writer::writeSubmessage(this, v178, 0xD9u);
  v179 = (const PB::Base *)v3[54];
  if (v179)
    result = PB::Writer::writeSubmessage(this, v179, 0xDAu);
  v180 = (const PB::Base *)v3[339];
  if (v180)
    result = PB::Writer::writeSubmessage(this, v180, 0xDBu);
  v181 = (const PB::Base *)v3[226];
  if (v181)
    result = PB::Writer::writeSubmessage(this, v181, 0xDCu);
  v182 = (const PB::Base *)v3[222];
  if (v182)
    result = PB::Writer::writeSubmessage(this, v182, 0xDDu);
  v183 = (const PB::Base *)v3[50];
  if (v183)
    result = PB::Writer::writeSubmessage(this, v183, 0xDEu);
  v184 = (const PB::Base *)v3[55];
  if (v184)
    result = PB::Writer::writeSubmessage(this, v184, 0xDFu);
  v185 = (const PB::Base *)v3[165];
  if (v185)
    result = PB::Writer::writeSubmessage(this, v185, 0xE0u);
  v186 = (const PB::Base *)v3[362];
  if (v186)
    result = PB::Writer::writeSubmessage(this, v186, 0xE1u);
  v187 = (const PB::Base *)v3[365];
  if (v187)
    result = PB::Writer::writeSubmessage(this, v187, 0xE2u);
  v188 = (const PB::Base *)v3[364];
  if (v188)
    result = PB::Writer::writeSubmessage(this, v188, 0xE3u);
  v189 = (const PB::Base *)v3[129];
  if (v189)
    result = PB::Writer::writeSubmessage(this, v189, 0xE4u);
  v190 = (const PB::Base *)v3[424];
  if (v190)
    result = PB::Writer::writeSubmessage(this, v190, 0xE5u);
  v191 = (const PB::Base *)v3[115];
  if (v191)
    result = PB::Writer::writeSubmessage(this, v191, 0xE6u);
  v192 = (const PB::Base *)v3[421];
  if (v192)
    result = PB::Writer::writeSubmessage(this, v192, 0xE7u);
  v193 = (const PB::Base *)v3[422];
  if (v193)
    result = PB::Writer::writeSubmessage(this, v193, 0xE8u);
  v194 = (const PB::Base *)v3[395];
  if (v194)
    result = PB::Writer::writeSubmessage(this, v194, 0xE9u);
  v195 = (const PB::Base *)v3[139];
  if (v195)
    result = PB::Writer::writeSubmessage(this, v195, 0xEAu);
  v196 = (const PB::Base *)v3[140];
  if (v196)
    result = PB::Writer::writeSubmessage(this, v196, 0xEBu);
  v197 = (const PB::Base *)v3[243];
  if (v197)
    result = PB::Writer::writeSubmessage(this, v197, 0xECu);
  v198 = (const PB::Base *)v3[128];
  if (v198)
    result = PB::Writer::writeSubmessage(this, v198, 0xEDu);
  v199 = (const PB::Base *)v3[438];
  if (v199)
    result = PB::Writer::writeSubmessage(this, v199, 0xEEu);
  v200 = (const PB::Base *)v3[14];
  if (v200)
    result = PB::Writer::writeSubmessage(this, v200, 0xEFu);
  v201 = (const PB::Base *)v3[291];
  if (v201)
    result = PB::Writer::writeSubmessage(this, v201, 0xF0u);
  v202 = (const PB::Base *)v3[177];
  if (v202)
    result = PB::Writer::writeSubmessage(this, v202, 0xF1u);
  v203 = (const PB::Base *)v3[301];
  if (v203)
    result = PB::Writer::writeSubmessage(this, v203, 0xF2u);
  v204 = (const PB::Base *)v3[302];
  if (v204)
    result = PB::Writer::writeSubmessage(this, v204, 0xF3u);
  v205 = (const PB::Base *)v3[290];
  if (v205)
    result = PB::Writer::writeSubmessage(this, v205, 0xF4u);
  v206 = (const PB::Base *)v3[108];
  if (v206)
    result = PB::Writer::writeSubmessage(this, v206, 0xF5u);
  v207 = (const PB::Base *)v3[178];
  if (v207)
    result = PB::Writer::writeSubmessage(this, v207, 0xF6u);
  v208 = (const PB::Base *)v3[428];
  if (v208)
    result = PB::Writer::writeSubmessage(this, v208, 0xF7u);
  v209 = (const PB::Base *)v3[294];
  if (v209)
    result = PB::Writer::writeSubmessage(this, v209, 0xF8u);
  v210 = (const PB::Base *)v3[297];
  if (v210)
    result = PB::Writer::writeSubmessage(this, v210, 0xF9u);
  v211 = (const PB::Base *)v3[159];
  if (v211)
    result = PB::Writer::writeSubmessage(this, v211, 0xFAu);
  v212 = (const PB::Base *)v3[374];
  if (v212)
    result = PB::Writer::writeSubmessage(this, v212, 0xFBu);
  v213 = (const PB::Base *)v3[296];
  if (v213)
    result = PB::Writer::writeSubmessage(this, v213, 0xFCu);
  v214 = (const PB::Base *)v3[246];
  if (v214)
    result = PB::Writer::writeSubmessage(this, v214, 0xFDu);
  v215 = (const PB::Base *)v3[423];
  if (v215)
    result = PB::Writer::writeSubmessage(this, v215, 0xFEu);
  v216 = (const PB::Base *)v3[22];
  if (v216)
    result = PB::Writer::writeSubmessage(this, v216, 0xFFu);
  v217 = (const PB::Base *)v3[26];
  if (v217)
    result = PB::Writer::writeSubmessage(this, v217, 0x100u);
  v218 = (const PB::Base *)v3[254];
  if (v218)
    result = PB::Writer::writeSubmessage(this, v218, 0x101u);
  v219 = (const PB::Base *)v3[97];
  if (v219)
    result = PB::Writer::writeSubmessage(this, v219, 0x102u);
  v220 = (const PB::Base *)v3[306];
  if (v220)
    result = PB::Writer::writeSubmessage(this, v220, 0x103u);
  v221 = (const PB::Base *)v3[307];
  if (v221)
    result = PB::Writer::writeSubmessage(this, v221, 0x104u);
  v222 = (const PB::Base *)v3[167];
  if (v222)
    result = PB::Writer::writeSubmessage(this, v222, 0x105u);
  v223 = (const PB::Base *)v3[437];
  if (v223)
    result = PB::Writer::writeSubmessage(this, v223, 0x106u);
  v224 = (const PB::Base *)v3[384];
  if (v224)
    result = PB::Writer::writeSubmessage(this, v224, 0x107u);
  v225 = (const PB::Base *)v3[396];
  if (v225)
    result = PB::Writer::writeSubmessage(this, v225, 0x200u);
  v226 = (const PB::Base *)v3[3];
  if (v226)
    result = PB::Writer::writeSubmessage(this, v226, 0x3E9u);
  v227 = (const PB::Base *)v3[143];
  if (v227)
    result = PB::Writer::writeSubmessage(this, v227, 0x3EAu);
  v228 = (const PB::Base *)v3[240];
  if (v228)
    result = PB::Writer::writeSubmessage(this, v228, 0x3EBu);
  v229 = (const PB::Base *)v3[80];
  if (v229)
    result = PB::Writer::writeSubmessage(this, v229, 0x3ECu);
  v230 = (const PB::Base *)v3[93];
  if (v230)
    result = PB::Writer::writeSubmessage(this, v230, 0x3EDu);
  v231 = (const PB::Base *)v3[158];
  if (v231)
    result = PB::Writer::writeSubmessage(this, v231, 0x3EEu);
  v232 = (const PB::Base *)v3[7];
  if (v232)
    result = PB::Writer::writeSubmessage(this, v232, 0x3EFu);
  v233 = (const PB::Base *)v3[156];
  if (v233)
    result = PB::Writer::writeSubmessage(this, v233, 0x3F0u);
  v234 = (const PB::Base *)v3[5];
  if (v234)
    result = PB::Writer::writeSubmessage(this, v234, 0x3F1u);
  v235 = (const PB::Base *)v3[8];
  if (v235)
    result = PB::Writer::writeSubmessage(this, v235, 0x3F2u);
  v236 = (const PB::Base *)v3[81];
  if (v236)
    result = PB::Writer::writeSubmessage(this, v236, 0x3F3u);
  v237 = (const PB::Base *)v3[144];
  if (v237)
    result = PB::Writer::writeSubmessage(this, v237, 0x3F4u);
  v238 = (const PB::Base *)v3[316];
  if (v238)
    result = PB::Writer::writeSubmessage(this, v238, 0x3F5u);
  v239 = (const PB::Base *)v3[323];
  if (v239)
    result = PB::Writer::writeSubmessage(this, v239, 0x3F6u);
  v240 = (const PB::Base *)v3[322];
  if (v240)
    result = PB::Writer::writeSubmessage(this, v240, 0x3F7u);
  v241 = (const PB::Base *)v3[319];
  if (v241)
    result = PB::Writer::writeSubmessage(this, v241, 0x3F8u);
  v242 = (const PB::Base *)v3[148];
  if (v242)
    result = PB::Writer::writeSubmessage(this, v242, 0x3F9u);
  v243 = (const PB::Base *)v3[154];
  if (v243)
    result = PB::Writer::writeSubmessage(this, v243, 0x3FAu);
  v244 = (const PB::Base *)v3[324];
  if (v244)
    result = PB::Writer::writeSubmessage(this, v244, 0x3FBu);
  v245 = (const PB::Base *)v3[256];
  if (v245)
    result = PB::Writer::writeSubmessage(this, v245, 0x3FCu);
  v246 = (const PB::Base *)v3[153];
  if (v246)
    result = PB::Writer::writeSubmessage(this, v246, 0x3FDu);
  v247 = (const PB::Base *)v3[82];
  if (v247)
    result = PB::Writer::writeSubmessage(this, v247, 0x3FEu);
  v248 = (const PB::Base *)v3[157];
  if (v248)
    result = PB::Writer::writeSubmessage(this, v248, 0x3FFu);
  v249 = (const PB::Base *)v3[49];
  if (v249)
    result = PB::Writer::writeSubmessage(this, v249, 0x400u);
  v250 = (const PB::Base *)v3[394];
  if (v250)
    result = PB::Writer::writeSubmessage(this, v250, 0x401u);
  v251 = (const PB::Base *)v3[355];
  if (v251)
    result = PB::Writer::writeSubmessage(this, v251, 0x402u);
  v252 = (const PB::Base *)v3[252];
  if (v252)
    result = PB::Writer::writeSubmessage(this, v252, 0x403u);
  v253 = (const PB::Base *)v3[6];
  if (v253)
    result = PB::Writer::writeSubmessage(this, v253, 0x404u);
  v254 = (const PB::Base *)v3[233];
  if (v254)
    result = PB::Writer::writeSubmessage(this, v254, 0x405u);
  v255 = (const PB::Base *)v3[110];
  if (v255)
    result = PB::Writer::writeSubmessage(this, v255, 0x406u);
  v256 = (const PB::Base *)v3[263];
  if (v256)
    result = PB::Writer::writeSubmessage(this, v256, 0x407u);
  v257 = (const PB::Base *)v3[262];
  if (v257)
    result = PB::Writer::writeSubmessage(this, v257, 0x408u);
  v258 = (const PB::Base *)v3[66];
  if (v258)
    result = PB::Writer::writeSubmessage(this, v258, 0x409u);
  v259 = (const PB::Base *)v3[429];
  if (v259)
    result = PB::Writer::writeSubmessage(this, v259, 0x40Au);
  v260 = (const PB::Base *)v3[267];
  if (v260)
    result = PB::Writer::writeSubmessage(this, v260, 0x40Bu);
  v261 = (const PB::Base *)v3[383];
  if (v261)
    result = PB::Writer::writeSubmessage(this, v261, 0x40Cu);
  v262 = (const PB::Base *)v3[106];
  if (v262)
    result = PB::Writer::writeSubmessage(this, v262, 0x40Du);
  v263 = (const PB::Base *)v3[251];
  if (v263)
    result = PB::Writer::writeSubmessage(this, v263, 0x40Eu);
  v264 = (const PB::Base *)v3[258];
  if (v264)
    result = PB::Writer::writeSubmessage(this, v264, 0x40Fu);
  v265 = (const PB::Base *)v3[385];
  if (v265)
    result = PB::Writer::writeSubmessage(this, v265, 0x410u);
  v266 = (const PB::Base *)v3[75];
  if (v266)
    result = PB::Writer::writeSubmessage(this, v266, 0x411u);
  v267 = (const PB::Base *)v3[79];
  if (v267)
    result = PB::Writer::writeSubmessage(this, v267, 0x412u);
  v268 = (const PB::Base *)v3[264];
  if (v268)
    result = PB::Writer::writeSubmessage(this, v268, 0x413u);
  v269 = (const PB::Base *)v3[244];
  if (v269)
    result = PB::Writer::writeSubmessage(this, v269, 0x414u);
  v270 = (const PB::Base *)v3[126];
  if (v270)
    result = PB::Writer::writeSubmessage(this, v270, 0x415u);
  v271 = (const PB::Base *)v3[53];
  if (v271)
    result = PB::Writer::writeSubmessage(this, v271, 0x416u);
  v272 = (const PB::Base *)v3[402];
  if (v272)
    result = PB::Writer::writeSubmessage(this, v272, 0x417u);
  v273 = (const PB::Base *)v3[378];
  if (v273)
    result = PB::Writer::writeSubmessage(this, v273, 0x418u);
  v274 = (const PB::Base *)v3[426];
  if (v274)
    result = PB::Writer::writeSubmessage(this, v274, 0x419u);
  v275 = (const PB::Base *)v3[257];
  if (v275)
    result = PB::Writer::writeSubmessage(this, v275, 0x41Au);
  v276 = (const PB::Base *)v3[255];
  if (v276)
    result = PB::Writer::writeSubmessage(this, v276, 0x41Bu);
  v277 = (const PB::Base *)v3[265];
  if (v277)
    result = PB::Writer::writeSubmessage(this, v277, 0x41Cu);
  v278 = (const PB::Base *)v3[321];
  if (v278)
    result = PB::Writer::writeSubmessage(this, v278, 0x41Du);
  v279 = (const PB::Base *)v3[175];
  if (v279)
    result = PB::Writer::writeSubmessage(this, v279, 0x800u);
  v280 = (const PB::Base *)v3[78];
  if (v280)
    result = PB::Writer::writeSubmessage(this, v280, 0x801u);
  v281 = (const PB::Base *)v3[36];
  if (v281)
    result = PB::Writer::writeSubmessage(this, v281, 0x802u);
  v282 = (const PB::Base *)v3[173];
  if (v282)
    result = PB::Writer::writeSubmessage(this, v282, 0x803u);
  v283 = (const PB::Base *)v3[171];
  if (v283)
    result = PB::Writer::writeSubmessage(this, v283, 0x804u);
  v284 = (const PB::Base *)v3[172];
  if (v284)
    result = PB::Writer::writeSubmessage(this, v284, 0x805u);
  v285 = (const PB::Base *)v3[170];
  if (v285)
    result = PB::Writer::writeSubmessage(this, v285, 0x806u);
  v286 = (const PB::Base *)v3[15];
  if (v286)
    result = PB::Writer::writeSubmessage(this, v286, 0x807u);
  v287 = (const PB::Base *)v3[12];
  if (v287)
    result = PB::Writer::writeSubmessage(this, v287, 0x808u);
  v288 = (const PB::Base *)v3[30];
  if (v288)
    result = PB::Writer::writeSubmessage(this, v288, 0x809u);
  v289 = (const PB::Base *)v3[390];
  if (v289)
    result = PB::Writer::writeSubmessage(this, v289, 0x80Au);
  v290 = (const PB::Base *)v3[389];
  if (v290)
    result = PB::Writer::writeSubmessage(this, v290, 0x80Bu);
  v291 = (const PB::Base *)v3[105];
  if (v291)
    result = PB::Writer::writeSubmessage(this, v291, 0x80Cu);
  v292 = (const PB::Base *)v3[35];
  if (v292)
    result = PB::Writer::writeSubmessage(this, v292, 0x80Du);
  v293 = (const PB::Base *)v3[138];
  if (v293)
    result = PB::Writer::writeSubmessage(this, v293, 0x80Eu);
  v294 = (const PB::Base *)v3[336];
  if (v294)
    result = PB::Writer::writeSubmessage(this, v294, 0x80Fu);
  v295 = (const PB::Base *)v3[338];
  if (v295)
    result = PB::Writer::writeSubmessage(this, v295, 0x810u);
  v296 = (const PB::Base *)v3[337];
  if (v296)
    result = PB::Writer::writeSubmessage(this, v296, 0x811u);
  v297 = (const PB::Base *)v3[451];
  if (v297)
    result = PB::Writer::writeSubmessage(this, v297, 0x812u);
  v298 = (const PB::Base *)v3[41];
  if (v298)
    result = PB::Writer::writeSubmessage(this, v298, 0x813u);
  v299 = (const PB::Base *)v3[315];
  if (v299)
    result = PB::Writer::writeSubmessage(this, v299, 0x814u);
  v300 = (const PB::Base *)v3[261];
  if (v300)
    result = PB::Writer::writeSubmessage(this, v300, 0x815u);
  v301 = (const PB::Base *)v3[260];
  if (v301)
    result = PB::Writer::writeSubmessage(this, v301, 0x816u);
  v302 = (const PB::Base *)v3[65];
  if (v302)
    result = PB::Writer::writeSubmessage(this, v302, 0x817u);
  v303 = (const PB::Base *)v3[20];
  if (v303)
    result = PB::Writer::writeSubmessage(this, v303, 0x818u);
  v304 = (const PB::Base *)v3[21];
  if (v304)
    result = PB::Writer::writeSubmessage(this, v304, 0x819u);
  v305 = (const PB::Base *)v3[19];
  if (v305)
    result = PB::Writer::writeSubmessage(this, v305, 0x81Au);
  v306 = (const PB::Base *)v3[133];
  if (v306)
    result = PB::Writer::writeSubmessage(this, v306, 0x81Bu);
  v307 = (const PB::Base *)v3[134];
  if (v307)
    result = PB::Writer::writeSubmessage(this, v307, 0x81Cu);
  v308 = (const PB::Base *)v3[83];
  if (v308)
    result = PB::Writer::writeSubmessage(this, v308, 0x820u);
  v309 = (const PB::Base *)v3[413];
  if (v309)
    result = PB::Writer::writeSubmessage(this, v309, 0x829u);
  v310 = (const PB::Base *)v3[412];
  if (v310)
    result = PB::Writer::writeSubmessage(this, v310, 0x82Au);
  v311 = (const PB::Base *)v3[25];
  if (v311)
    result = PB::Writer::writeSubmessage(this, v311, 0x82Bu);
  v312 = (const PB::Base *)v3[119];
  if (v312)
    result = PB::Writer::writeSubmessage(this, v312, 0x832u);
  v313 = (const PB::Base *)v3[120];
  if (v313)
    result = PB::Writer::writeSubmessage(this, v313, 0x833u);
  v314 = (const PB::Base *)v3[121];
  if (v314)
    result = PB::Writer::writeSubmessage(this, v314, 0x834u);
  v315 = (const PB::Base *)v3[117];
  if (v315)
    result = PB::Writer::writeSubmessage(this, v315, 0x835u);
  v316 = (const PB::Base *)v3[124];
  if (v316)
    result = PB::Writer::writeSubmessage(this, v316, 0x836u);
  v317 = (const PB::Base *)v3[17];
  if (v317)
    result = PB::Writer::writeSubmessage(this, v317, 0x837u);
  v318 = (const PB::Base *)v3[335];
  if (v318)
    result = PB::Writer::writeSubmessage(this, v318, 0x838u);
  v319 = (const PB::Base *)v3[334];
  if (v319)
    result = PB::Writer::writeSubmessage(this, v319, 0x839u);
  v320 = (const PB::Base *)v3[94];
  if (v320)
    result = PB::Writer::writeSubmessage(this, v320, 0x83Au);
  v321 = (const PB::Base *)v3[118];
  if (v321)
    result = PB::Writer::writeSubmessage(this, v321, 0x83Bu);
  v322 = (const PB::Base *)v3[419];
  if (v322)
    result = PB::Writer::writeSubmessage(this, v322, 0x83Cu);
  v323 = (const PB::Base *)v3[23];
  if (v323)
    result = PB::Writer::writeSubmessage(this, v323, 0x83Du);
  v324 = (const PB::Base *)v3[122];
  if (v324)
    result = PB::Writer::writeSubmessage(this, v324, 0x83Eu);
  v325 = (const PB::Base *)v3[147];
  if (v325)
    result = PB::Writer::writeSubmessage(this, v325, 0x83Fu);
  v326 = (const PB::Base *)v3[382];
  if (v326)
    result = PB::Writer::writeSubmessage(this, v326, 0x840u);
  v327 = (const PB::Base *)v3[127];
  if (v327)
    result = PB::Writer::writeSubmessage(this, v327, 0x841u);
  v328 = (const PB::Base *)v3[33];
  if (v328)
    result = PB::Writer::writeSubmessage(this, v328, 0x842u);
  v329 = (const PB::Base *)v3[358];
  if (v329)
    result = PB::Writer::writeSubmessage(this, v329, 0x843u);
  v330 = (const PB::Base *)v3[361];
  if (v330)
    result = PB::Writer::writeSubmessage(this, v330, 0x844u);
  v331 = (const PB::Base *)v3[359];
  if (v331)
    result = PB::Writer::writeSubmessage(this, v331, 0x845u);
  v332 = (const PB::Base *)v3[360];
  if (v332)
    result = PB::Writer::writeSubmessage(this, v332, 0x846u);
  v333 = (const PB::Base *)v3[366];
  if (v333)
    result = PB::Writer::writeSubmessage(this, v333, 0x847u);
  v334 = (const PB::Base *)v3[123];
  if (v334)
    result = PB::Writer::writeSubmessage(this, v334, 0x848u);
  v335 = (const PB::Base *)v3[182];
  if (v335)
    result = PB::Writer::writeSubmessage(this, v335, 0x849u);
  v336 = (const PB::Base *)v3[320];
  if (v336)
    result = PB::Writer::writeSubmessage(this, v336, 0x84Au);
  v337 = (const PB::Base *)v3[249];
  if (v337)
    result = PB::Writer::writeSubmessage(this, v337, 0x84Bu);
  v338 = (const PB::Base *)v3[116];
  if (v338)
    result = PB::Writer::writeSubmessage(this, v338, 0x84Cu);
  v339 = (const PB::Base *)v3[228];
  if (v339)
    result = PB::Writer::writeSubmessage(this, v339, 0x84Du);
  v340 = (const PB::Base *)v3[102];
  if (v340)
    result = PB::Writer::writeSubmessage(this, v340, 0x84Eu);
  v341 = (const PB::Base *)v3[100];
  if (v341)
    result = PB::Writer::writeSubmessage(this, v341, 0x84Fu);
  v342 = (const PB::Base *)v3[101];
  if (v342)
    result = PB::Writer::writeSubmessage(this, v342, 0x850u);
  v343 = (const PB::Base *)v3[99];
  if (v343)
    result = PB::Writer::writeSubmessage(this, v343, 0x851u);
  v344 = (const PB::Base *)v3[268];
  if (v344)
    result = PB::Writer::writeSubmessage(this, v344, 0x852u);
  v345 = (const PB::Base *)v3[191];
  if (v345)
    result = PB::Writer::writeSubmessage(this, v345, 0x853u);
  v346 = (const PB::Base *)v3[192];
  if (v346)
    result = PB::Writer::writeSubmessage(this, v346, 0x854u);
  v347 = (const PB::Base *)v3[195];
  if (v347)
    result = PB::Writer::writeSubmessage(this, v347, 0x855u);
  v348 = (const PB::Base *)v3[206];
  if (v348)
    result = PB::Writer::writeSubmessage(this, v348, 0x856u);
  v349 = (const PB::Base *)v3[221];
  if (v349)
    result = PB::Writer::writeSubmessage(this, v349, 0x857u);
  v350 = (const PB::Base *)v3[220];
  if (v350)
    result = PB::Writer::writeSubmessage(this, v350, 0x858u);
  v351 = (const PB::Base *)v3[204];
  if (v351)
    result = PB::Writer::writeSubmessage(this, v351, 0x859u);
  v352 = (const PB::Base *)v3[164];
  if (v352)
    result = PB::Writer::writeSubmessage(this, v352, 0x85Au);
  v353 = (const PB::Base *)v3[163];
  if (v353)
    result = PB::Writer::writeSubmessage(this, v353, 0x85Bu);
  v354 = (const PB::Base *)v3[190];
  if (v354)
    result = PB::Writer::writeSubmessage(this, v354, 0x85Cu);
  v355 = (const PB::Base *)v3[193];
  if (v355)
    result = PB::Writer::writeSubmessage(this, v355, 0x85Du);
  v356 = (const PB::Base *)v3[207];
  if (v356)
    result = PB::Writer::writeSubmessage(this, v356, 0x85Eu);
  v357 = (const PB::Base *)v3[208];
  if (v357)
    result = PB::Writer::writeSubmessage(this, v357, 0x85Fu);
  v358 = (const PB::Base *)v3[212];
  if (v358)
    result = PB::Writer::writeSubmessage(this, v358, 0x860u);
  v359 = (const PB::Base *)v3[200];
  if (v359)
    result = PB::Writer::writeSubmessage(this, v359, 0x861u);
  v360 = (const PB::Base *)v3[198];
  if (v360)
    result = PB::Writer::writeSubmessage(this, v360, 0x862u);
  v361 = (const PB::Base *)v3[213];
  if (v361)
    result = PB::Writer::writeSubmessage(this, v361, 0x863u);
  v362 = (const PB::Base *)v3[199];
  if (v362)
    result = PB::Writer::writeSubmessage(this, v362, 0x864u);
  v363 = (const PB::Base *)v3[209];
  if (v363)
    result = PB::Writer::writeSubmessage(this, v363, 0x865u);
  v364 = (const PB::Base *)v3[96];
  if (v364)
    result = PB::Writer::writeSubmessage(this, v364, 0x866u);
  v365 = (const PB::Base *)v3[403];
  if (v365)
    result = PB::Writer::writeSubmessage(this, v365, 0x867u);
  v366 = (const PB::Base *)v3[162];
  if (v366)
    result = PB::Writer::writeSubmessage(this, v366, 0x868u);
  v367 = (const PB::Base *)v3[404];
  if (v367)
    result = PB::Writer::writeSubmessage(this, v367, 0x869u);
  v368 = (const PB::Base *)v3[405];
  if (v368)
    result = PB::Writer::writeSubmessage(this, v368, 0x86Au);
  v369 = (const PB::Base *)v3[341];
  if (v369)
    result = PB::Writer::writeSubmessage(this, v369, 0x86Bu);
  v370 = (const PB::Base *)v3[342];
  if (v370)
    result = PB::Writer::writeSubmessage(this, v370, 0x86Cu);
  v371 = (const PB::Base *)v3[345];
  if (v371)
    result = PB::Writer::writeSubmessage(this, v371, 0x86Du);
  v372 = (const PB::Base *)v3[350];
  if (v372)
    result = PB::Writer::writeSubmessage(this, v372, 0x86Eu);
  v373 = (const PB::Base *)v3[348];
  if (v373)
    result = PB::Writer::writeSubmessage(this, v373, 0x86Fu);
  v374 = (const PB::Base *)v3[214];
  if (v374)
    result = PB::Writer::writeSubmessage(this, v374, 0x870u);
  v375 = (const PB::Base *)v3[203];
  if (v375)
    result = PB::Writer::writeSubmessage(this, v375, 0x871u);
  v376 = (const PB::Base *)v3[347];
  if (v376)
    result = PB::Writer::writeSubmessage(this, v376, 0x872u);
  v377 = (const PB::Base *)v3[181];
  if (v377)
    result = PB::Writer::writeSubmessage(this, v377, 0x873u);
  v378 = (const PB::Base *)v3[197];
  if (v378)
    result = PB::Writer::writeSubmessage(this, v378, 0x874u);
  v379 = (const PB::Base *)v3[205];
  if (v379)
    result = PB::Writer::writeSubmessage(this, v379, 0x875u);
  v380 = (const PB::Base *)v3[160];
  if (v380)
    result = PB::Writer::writeSubmessage(this, v380, 0x876u);
  v381 = (const PB::Base *)v3[74];
  if (v381)
    result = PB::Writer::writeSubmessage(this, v381, 0x877u);
  v382 = (const PB::Base *)v3[292];
  if (v382)
    result = PB::Writer::writeSubmessage(this, v382, 0x878u);
  v383 = (const PB::Base *)v3[86];
  if (v383)
    result = PB::Writer::writeSubmessage(this, v383, 0x879u);
  v384 = (const PB::Base *)v3[107];
  if (v384)
    result = PB::Writer::writeSubmessage(this, v384, 0x87Au);
  v385 = (const PB::Base *)v3[400];
  if (v385)
    result = PB::Writer::writeSubmessage(this, v385, 0x87Bu);
  v386 = (const PB::Base *)v3[326];
  if (v386)
    result = PB::Writer::writeSubmessage(this, v386, 0x87Cu);
  v387 = (const PB::Base *)v3[216];
  if (v387)
    result = PB::Writer::writeSubmessage(this, v387, 0x87Du);
  v388 = (const PB::Base *)v3[418];
  if (v388)
    result = PB::Writer::writeSubmessage(this, v388, 0x87Eu);
  v389 = (const PB::Base *)v3[196];
  if (v389)
    result = PB::Writer::writeSubmessage(this, v389, 0x87Fu);
  v390 = (const PB::Base *)v3[349];
  if (v390)
    result = PB::Writer::writeSubmessage(this, v390, 0x880u);
  v391 = (const PB::Base *)v3[387];
  if (v391)
    result = PB::Writer::writeSubmessage(this, v391, 0x881u);
  v392 = (const PB::Base *)v3[289];
  if (v392)
    result = PB::Writer::writeSubmessage(this, v392, 0x882u);
  v393 = (const PB::Base *)v3[237];
  if (v393)
    result = PB::Writer::writeSubmessage(this, v393, 0x883u);
  v394 = (const PB::Base *)v3[283];
  if (v394)
    result = PB::Writer::writeSubmessage(this, v394, 0x884u);
  v395 = (const PB::Base *)v3[284];
  if (v395)
    result = PB::Writer::writeSubmessage(this, v395, 0x885u);
  v396 = (const PB::Base *)v3[285];
  if (v396)
    result = PB::Writer::writeSubmessage(this, v396, 0x886u);
  v397 = (const PB::Base *)v3[270];
  if (v397)
    result = PB::Writer::writeSubmessage(this, v397, 0x887u);
  v398 = (const PB::Base *)v3[287];
  if (v398)
    result = PB::Writer::writeSubmessage(this, v398, 0x888u);
  v399 = (const PB::Base *)v3[227];
  if (v399)
    result = PB::Writer::writeSubmessage(this, v399, 0x889u);
  v400 = (const PB::Base *)v3[401];
  if (v400)
    result = PB::Writer::writeSubmessage(this, v400, 0x88Au);
  v401 = (const PB::Base *)v3[279];
  if (v401)
    result = PB::Writer::writeSubmessage(this, v401, 0x88Bu);
  v402 = (const PB::Base *)v3[280];
  if (v402)
    result = PB::Writer::writeSubmessage(this, v402, 0x88Cu);
  v403 = (const PB::Base *)v3[399];
  if (v403)
    result = PB::Writer::writeSubmessage(this, v403, 0x88Du);
  v404 = (const PB::Base *)v3[388];
  if (v404)
    result = PB::Writer::writeSubmessage(this, v404, 0x88Eu);
  v405 = (const PB::Base *)v3[103];
  if (v405)
    result = PB::Writer::writeSubmessage(this, v405, 0x88Fu);
  v406 = (const PB::Base *)v3[218];
  if (v406)
    result = PB::Writer::writeSubmessage(this, v406, 0x890u);
  v407 = (const PB::Base *)v3[357];
  if (v407)
    result = PB::Writer::writeSubmessage(this, v407, 0x891u);
  v408 = (const PB::Base *)v3[278];
  if (v408)
    result = PB::Writer::writeSubmessage(this, v408, 0x892u);
  v409 = (const PB::Base *)v3[272];
  if (v409)
    result = PB::Writer::writeSubmessage(this, v409, 0x893u);
  v410 = (const PB::Base *)v3[271];
  if (v410)
    result = PB::Writer::writeSubmessage(this, v410, 0x894u);
  v411 = (const PB::Base *)v3[275];
  if (v411)
    result = PB::Writer::writeSubmessage(this, v411, 0x895u);
  v412 = (const PB::Base *)v3[13];
  if (v412)
    result = PB::Writer::writeSubmessage(this, v412, 0x896u);
  v413 = (const PB::Base *)v3[286];
  if (v413)
    result = PB::Writer::writeSubmessage(this, v413, 0x897u);
  v414 = (const PB::Base *)v3[309];
  if (v414)
    result = PB::Writer::writeSubmessage(this, v414, 0x898u);
  v415 = (const PB::Base *)v3[312];
  if (v415)
    result = PB::Writer::writeSubmessage(this, v415, 0x899u);
  v416 = (const PB::Base *)v3[211];
  if (v416)
    result = PB::Writer::writeSubmessage(this, v416, 0x89Au);
  v417 = (const PB::Base *)v3[313];
  if (v417)
    result = PB::Writer::writeSubmessage(this, v417, 0x89Bu);
  v418 = (const PB::Base *)v3[310];
  if (v418)
    result = PB::Writer::writeSubmessage(this, v418, 0x89Cu);
  v419 = (const PB::Base *)v3[277];
  if (v419)
    result = PB::Writer::writeSubmessage(this, v419, 0x89Du);
  v420 = (const PB::Base *)v3[72];
  if (v420)
    result = PB::Writer::writeSubmessage(this, v420, 0x89Eu);
  v421 = (const PB::Base *)v3[276];
  if (v421)
    result = PB::Writer::writeSubmessage(this, v421, 0x89Fu);
  v422 = (const PB::Base *)v3[293];
  if (v422)
    result = PB::Writer::writeSubmessage(this, v422, 0x8A0u);
  v423 = (const PB::Base *)v3[241];
  if (v423)
    result = PB::Writer::writeSubmessage(this, v423, 0x8A1u);
  v424 = (const PB::Base *)v3[188];
  if (v424)
    result = PB::Writer::writeSubmessage(this, v424, 0x8A2u);
  v425 = (const PB::Base *)v3[189];
  if (v425)
    result = PB::Writer::writeSubmessage(this, v425, 0x8A3u);
  v426 = (const PB::Base *)v3[311];
  if (v426)
    result = PB::Writer::writeSubmessage(this, v426, 0x8A4u);
  v427 = (const PB::Base *)v3[274];
  if (v427)
    result = PB::Writer::writeSubmessage(this, v427, 0x8A5u);
  v428 = (const PB::Base *)v3[273];
  if (v428)
    result = PB::Writer::writeSubmessage(this, v428, 0x8A6u);
  v429 = (const PB::Base *)v3[202];
  if (v429)
    result = PB::Writer::writeSubmessage(this, v429, 0x8A7u);
  v430 = (const PB::Base *)v3[201];
  if (v430)
    result = PB::Writer::writeSubmessage(this, v430, 0x8A8u);
  v431 = (const PB::Base *)v3[314];
  if (v431)
    result = PB::Writer::writeSubmessage(this, v431, 0x8A9u);
  v432 = (const PB::Base *)v3[39];
  if (v432)
    result = PB::Writer::writeSubmessage(this, v432, 0x8AAu);
  v433 = (const PB::Base *)v3[113];
  if (v433)
    result = PB::Writer::writeSubmessage(this, v433, 0x8ABu);
  v434 = (const PB::Base *)v3[295];
  if (v434)
    result = PB::Writer::writeSubmessage(this, v434, 0x8ACu);
  v435 = (const PB::Base *)v3[298];
  if (v435)
    result = PB::Writer::writeSubmessage(this, v435, 0x8ADu);
  v436 = (const PB::Base *)v3[32];
  if (v436)
    result = PB::Writer::writeSubmessage(this, v436, 0x8AEu);
  v437 = (const PB::Base *)v3[31];
  if (v437)
    result = PB::Writer::writeSubmessage(this, v437, 0x8AFu);
  v438 = (const PB::Base *)v3[352];
  if (v438)
    result = PB::Writer::writeSubmessage(this, v438, 0x8B0u);
  v439 = (const PB::Base *)v3[351];
  if (v439)
    result = PB::Writer::writeSubmessage(this, v439, 0x8B1u);
  v440 = (const PB::Base *)v3[328];
  if (v440)
    result = PB::Writer::writeSubmessage(this, v440, 0x8B2u);
  v441 = (const PB::Base *)v3[329];
  if (v441)
    result = PB::Writer::writeSubmessage(this, v441, 0x8B3u);
  v442 = (const PB::Base *)v3[331];
  if (v442)
    result = PB::Writer::writeSubmessage(this, v442, 0x8B4u);
  v443 = (const PB::Base *)v3[161];
  if (v443)
    result = PB::Writer::writeSubmessage(this, v443, 0x8B5u);
  v444 = (const PB::Base *)v3[330];
  if (v444)
    result = PB::Writer::writeSubmessage(this, v444, 0x8B6u);
  v445 = (const PB::Base *)v3[42];
  if (v445)
    result = PB::Writer::writeSubmessage(this, v445, 0x8B7u);
  v446 = (const PB::Base *)v3[185];
  if (v446)
    result = PB::Writer::writeSubmessage(this, v446, 0x8B8u);
  v447 = (const PB::Base *)v3[186];
  if (v447)
    result = PB::Writer::writeSubmessage(this, v447, 0x8B9u);
  v448 = (const PB::Base *)v3[187];
  if (v448)
    result = PB::Writer::writeSubmessage(this, v448, 0x8BAu);
  v449 = (const PB::Base *)v3[353];
  if (v449)
    result = PB::Writer::writeSubmessage(this, v449, 0x8BBu);
  v450 = (const PB::Base *)v3[354];
  if (v450)
    result = PB::Writer::writeSubmessage(this, v450, 0x8BCu);
  v451 = (const PB::Base *)v3[368];
  if (v451)
    result = PB::Writer::writeSubmessage(this, v451, 0x7530u);
  v452 = (const PB::Base *)v3[369];
  if (v452)
    result = PB::Writer::writeSubmessage(this, v452, 0x7531u);
  v453 = (const PB::Base *)v3[179];
  if (v453)
    return PB::Writer::writeSubmessage(this, v453, 0x7532u);
  return result;
}

uint64_t sub_101602A44(uint64_t result)
{
  if (!*(_QWORD *)(result + 88))
    operator new();
  return result;
}

uint64_t sub_101602AA8(uint64_t result)
{
  if (!*(_QWORD *)(result + 144))
    operator new();
  return result;
}

uint64_t sub_101602B0C(uint64_t result)
{
  if (!*(_QWORD *)(result + 216))
    operator new();
  return result;
}

uint64_t sub_101602B70(uint64_t result)
{
  if (!*(_QWORD *)(result + 3448))
    operator new();
  return result;
}

uint64_t sub_101602BD4(uint64_t result)
{
  if (!*(_QWORD *)(result + 3472))
    operator new();
  return result;
}

uint64_t sub_101602C38(uint64_t result)
{
  if (!*(_QWORD *)(result + 3488))
    operator new();
  return result;
}

uint64_t sub_101602C9C(uint64_t result)
{
  if (!*(_QWORD *)(result + 3520))
    operator new();
  return result;
}

uint64_t sub_101602D00(uint64_t result)
{
  if (!*(_QWORD *)(result + 3552))
    operator new();
  return result;
}

uint64_t sub_101602D64(uint64_t result)
{
  if (!*(_QWORD *)(result + 3536))
    operator new();
  return result;
}

uint64_t sub_101602DC8(uint64_t result)
{
  if (!*(_QWORD *)(result + 3584))
    operator new();
  return result;
}

uint64_t sub_101602E2C(uint64_t result)
{
  if (!*(_QWORD *)(result + 3568))
    operator new();
  return result;
}

uint64_t sub_101602E90(uint64_t result)
{
  if (!*(_QWORD *)(result + 3400))
    operator new();
  return result;
}

uint64_t sub_101602EF4(uint64_t result)
{
  if (!*(_QWORD *)(result + 608))
    operator new();
  return result;
}

uint64_t sub_101602F58(uint64_t result)
{
  if (!*(_QWORD *)(result + 3416))
    operator new();
  return result;
}

uint64_t sub_101602FBC(uint64_t result)
{
  if (!*(_QWORD *)(result + 272))
    operator new();
  return result;
}

uint64_t sub_101603020(uint64_t result)
{
  if (!*(_QWORD *)(result + 3576))
    operator new();
  return result;
}

uint64_t sub_101603084(uint64_t result)
{
  if (!*(_QWORD *)(result + 3544))
    operator new();
  return result;
}

uint64_t sub_1016030E8(uint64_t result)
{
  if (!*(_QWORD *)(result + 1000))
    operator new();
  return result;
}

uint64_t sub_10160314C(uint64_t result)
{
  if (!*(_QWORD *)(result + 2848))
    operator new();
  return result;
}

uint64_t sub_1016031B0(uint64_t result)
{
  if (!*(_QWORD *)(result + 1328))
    operator new();
  return result;
}

uint64_t sub_101603214(uint64_t result)
{
  if (!*(_QWORD *)(result + 3176))
    operator new();
  return result;
}

uint64_t sub_101603278(uint64_t result)
{
  if (!*(_QWORD *)(result + 3184))
    operator new();
  return result;
}

uint64_t sub_1016032DC(uint64_t result)
{
  if (!*(_QWORD *)(result + 368))
    operator new();
  return result;
}

uint64_t sub_101603340(uint64_t result)
{
  if (!*(_QWORD *)(result + 3456))
    operator new();
  return result;
}

uint64_t sub_1016033A4(uint64_t result)
{
  if (!*(_QWORD *)(result + 296))
    operator new();
  return result;
}

uint64_t sub_101603408(uint64_t result)
{
  if (!*(_QWORD *)(result + 3440))
    operator new();
  return result;
}

uint64_t sub_10160346C(uint64_t result)
{
  if (!*(_QWORD *)(result + 3288))
    operator new();
  return result;
}

uint64_t sub_1016034D0(uint64_t result)
{
  if (!*(_QWORD *)(result + 2936))
    operator new();
  return result;
}

uint64_t sub_101603534(uint64_t result)
{
  if (!*(_QWORD *)(result + 2024))
    operator new();
  return result;
}

uint64_t sub_101603598(uint64_t result)
{
  if (!*(_QWORD *)(result + 1200))
    operator new();
  return result;
}

uint64_t sub_1016035FC(uint64_t result)
{
  if (!*(_QWORD *)(result + 1192))
    operator new();
  return result;
}

uint64_t sub_101603660(uint64_t result)
{
  if (!*(_QWORD *)(result + 2544))
    operator new();
  return result;
}

uint64_t sub_1016036C4(uint64_t result)
{
  if (!*(_QWORD *)(result + 1904))
    operator new();
  return result;
}

uint64_t sub_101603728(uint64_t result)
{
  if (!*(_QWORD *)(result + 1912))
    operator new();
  return result;
}

uint64_t sub_10160378C(uint64_t result)
{
  if (!*(_QWORD *)(result + 3528))
    operator new();
  return result;
}

uint64_t sub_1016037F0(uint64_t result)
{
  if (!*(_QWORD *)(result + 3480))
    operator new();
  return result;
}

uint64_t sub_101603854(uint64_t result)
{
  if (!*(_QWORD *)(result + 384))
    operator new();
  return result;
}

uint64_t sub_1016038B8(uint64_t result)
{
  if (!*(_QWORD *)(result + 1936))
    operator new();
  return result;
}

uint64_t sub_10160391C(uint64_t result)
{
  if (!*(_QWORD *)(result + 3560))
    operator new();
  return result;
}

uint64_t sub_101603980(uint64_t result)
{
  if (!*(_QWORD *)(result + 192))
    operator new();
  return result;
}

uint64_t sub_1016039E4(uint64_t result)
{
  if (!*(_QWORD *)(result + 456))
    operator new();
  return result;
}

uint64_t sub_101603A48(uint64_t result)
{
  if (!*(_QWORD *)(result + 1872))
    operator new();
  return result;
}

uint64_t sub_101603AAC(uint64_t result)
{
  if (!*(_QWORD *)(result + 448))
    operator new();
  return result;
}

uint64_t sub_101603B10(uint64_t result)
{
  if (!*(_QWORD *)(result + 2464))
    operator new();
  return result;
}

uint64_t sub_101603B74(uint64_t result)
{
  if (!*(_QWORD *)(result + 1040))
    operator new();
  return result;
}

uint64_t sub_101603BD8(uint64_t result)
{
  if (!*(_QWORD *)(result + 784))
    operator new();
  return result;
}

uint64_t sub_101603C3C(uint64_t result)
{
  if (!*(_QWORD *)(result + 8))
    operator new();
  return result;
}

uint64_t sub_101603CA0(uint64_t result)
{
  if (!*(_QWORD *)(result + 16))
    operator new();
  return result;
}

uint64_t sub_101603D04(uint64_t result)
{
  if (!*(_QWORD *)(result + 3248))
    operator new();
  return result;
}

uint64_t sub_101603D68(uint64_t result)
{
  if (!*(_QWORD *)(result + 3592))
    operator new();
  return result;
}

uint64_t sub_101603DCC(uint64_t result)
{
  if (!*(_QWORD *)(result + 408))
    operator new();
  return result;
}

uint64_t sub_101603E30(uint64_t result)
{
  if (!*(_QWORD *)(result + 896))
    operator new();
  return result;
}

uint64_t sub_101603E94(uint64_t result)
{
  if (!*(_QWORD *)(result + 3464))
    operator new();
  return result;
}

uint64_t sub_101603EF8(uint64_t result)
{
  if (!*(_QWORD *)(result + 2616))
    operator new();
  return result;
}

uint64_t sub_101603F5C(uint64_t result)
{
  if (!*(_QWORD *)(result + 1800))
    operator new();
  return result;
}

uint64_t sub_101603FC0(uint64_t result)
{
  if (!*(_QWORD *)(result + 304))
    operator new();
  return result;
}

uint64_t sub_101604024(uint64_t result)
{
  if (!*(_QWORD *)(result + 1784))
    operator new();
  return result;
}

uint64_t sub_101604088(uint64_t result)
{
  if (!*(_QWORD *)(result + 3336))
    operator new();
  return result;
}

uint64_t sub_1016040EC(uint64_t result)
{
  if (!*(_QWORD *)(result + 2712))
    operator new();
  return result;
}

uint64_t sub_101604150(uint64_t result)
{
  if (!*(_QWORD *)(result + 1808))
    operator new();
  return result;
}

uint64_t sub_1016041B4(uint64_t result)
{
  if (!*(_QWORD *)(result + 1776))
    operator new();
  return result;
}

uint64_t sub_101604218(uint64_t result)
{
  if (!*(_QWORD *)(result + 400))
    operator new();
  return result;
}

uint64_t sub_10160427C(uint64_t result)
{
  if (!*(_QWORD *)(result + 440))
    operator new();
  return result;
}

uint64_t sub_1016042E0(uint64_t result)
{
  if (!*(_QWORD *)(result + 1112))
    operator new();
  return result;
}

uint64_t sub_101604344(uint64_t result)
{
  if (!*(_QWORD *)(result + 1120))
    operator new();
  return result;
}

uint64_t sub_1016043A8(uint64_t result)
{
  if (!*(_QWORD *)(result + 1944))
    operator new();
  return result;
}

uint64_t sub_10160440C(uint64_t result)
{
  if (!*(_QWORD *)(result + 1024))
    operator new();
  return result;
}

uint64_t sub_101604470(uint64_t result)
{
  if (!*(_QWORD *)(result + 3504))
    operator new();
  return result;
}

uint64_t sub_1016044D4(uint64_t result)
{
  if (!*(_QWORD *)(result + 2328))
    operator new();
  return result;
}

uint64_t sub_101604538(uint64_t result)
{
  if (!*(_QWORD *)(result + 1416))
    operator new();
  return result;
}

uint64_t sub_10160459C(uint64_t result)
{
  if (!*(_QWORD *)(result + 864))
    operator new();
  return result;
}

uint64_t sub_101604600(uint64_t result)
{
  if (!*(_QWORD *)(result + 1424))
    operator new();
  return result;
}

uint64_t sub_101604664(uint64_t result)
{
  if (!*(_QWORD *)(result + 3424))
    operator new();
  return result;
}

uint64_t sub_1016046C8(uint64_t result)
{
  if (!*(_QWORD *)(result + 1272))
    operator new();
  return result;
}

uint64_t sub_10160472C(uint64_t result)
{
  if (!*(_QWORD *)(result + 3384))
    operator new();
  return result;
}

uint64_t sub_101604790(uint64_t result)
{
  if (!*(_QWORD *)(result + 176))
    operator new();
  return result;
}

uint64_t sub_1016047F4(uint64_t result)
{
  if (!*(_QWORD *)(result + 208))
    operator new();
  return result;
}

uint64_t sub_101604858(uint64_t result)
{
  if (!*(_QWORD *)(result + 2032))
    operator new();
  return result;
}

uint64_t sub_1016048BC(uint64_t result)
{
  if (!*(_QWORD *)(result + 1336))
    operator new();
  return result;
}

uint64_t sub_101604920(uint64_t result)
{
  if (!*(_QWORD *)(result + 3496))
    operator new();
  return result;
}

uint64_t sub_101604984(uint64_t result)
{
  if (!*(_QWORD *)(result + 3072))
    operator new();
  return result;
}

uint64_t sub_1016049E8(uint64_t result)
{
  if (!*(_QWORD *)(result + 3168))
    operator new();
  return result;
}

uint64_t sub_101604A4C(uint64_t result)
{
  if (!*(_QWORD *)(result + 24))
    operator new();
  return result;
}

uint64_t sub_101604AB0(uint64_t result)
{
  if (!*(_QWORD *)(result + 64))
    operator new();
  return result;
}

uint64_t sub_101604B14(uint64_t result)
{
  if (!*(_QWORD *)(result + 1144))
    operator new();
  return result;
}

uint64_t sub_101604B78(uint64_t result)
{
  if (!*(_QWORD *)(result + 1256))
    operator new();
  return result;
}

uint64_t sub_101604BDC(uint64_t result)
{
  if (!*(_QWORD *)(result + 1264))
    operator new();
  return result;
}

uint64_t sub_101604C40(uint64_t result)
{
  if (!*(_QWORD *)(result + 1152))
    operator new();
  return result;
}

uint64_t sub_101604CA4(uint64_t result)
{
  if (!*(_QWORD *)(result + 1184))
    operator new();
  return result;
}

uint64_t sub_101604D08(uint64_t result)
{
  if (!*(_QWORD *)(result + 1232))
    operator new();
  return result;
}

uint64_t sub_101604D6C(uint64_t result)
{
  if (!*(_QWORD *)(result + 1920))
    operator new();
  return result;
}

uint64_t sub_101604DD0(uint64_t result)
{
  if (!*(_QWORD *)(result + 640))
    operator new();
  return result;
}

uint64_t sub_101604E34(uint64_t result)
{
  if (!*(_QWORD *)(result + 648))
    operator new();
  return result;
}

uint64_t sub_101604E98(uint64_t result)
{
  if (!*(_QWORD *)(result + 656))
    operator new();
  return result;
}

uint64_t sub_101604EFC(uint64_t result)
{
  if (!*(_QWORD *)(result + 2592))
    operator new();
  return result;
}

uint64_t sub_101604F60(uint64_t result)
{
  if (!*(_QWORD *)(result + 3152))
    operator new();
  return result;
}

uint64_t sub_101604FC4(uint64_t result)
{
  if (!*(_QWORD *)(result + 744))
    operator new();
  return result;
}

uint64_t sub_101605028(uint64_t result)
{
  if (!*(_QWORD *)(result + 2048))
    operator new();
  return result;
}

uint64_t sub_10160508C(uint64_t result)
{
  if (!*(_QWORD *)(result + 392))
    operator new();
  return result;
}

uint64_t sub_1016050F0(uint64_t result)
{
  if (!*(_QWORD *)(result + 2840))
    operator new();
  return result;
}

uint64_t sub_101605154(uint64_t result)
{
  if (!*(_QWORD *)(result + 1864))
    operator new();
  return result;
}

uint64_t sub_1016051B8(uint64_t result)
{
  if (!*(_QWORD *)(result + 2016))
    operator new();
  return result;
}

uint64_t sub_10160521C(uint64_t result)
{
  if (!*(_QWORD *)(result + 880))
    operator new();
  return result;
}

uint64_t sub_101605280(uint64_t result)
{
  if (!*(_QWORD *)(result + 2096))
    operator new();
  return result;
}

uint64_t sub_1016052E4(uint64_t result)
{
  if (!*(_QWORD *)(result + 528))
    operator new();
  return result;
}

uint64_t sub_101605348(uint64_t result)
{
  if (!*(_QWORD *)(result + 3432))
    operator new();
  return result;
}

uint64_t sub_1016053AC(uint64_t result)
{
  if (!*(_QWORD *)(result + 2136))
    operator new();
  return result;
}

uint64_t sub_101605410(uint64_t result)
{
  if (!*(_QWORD *)(result + 3064))
    operator new();
  return result;
}

uint64_t sub_101605474(uint64_t result)
{
  if (!*(_QWORD *)(result + 632))
    operator new();
  return result;
}

uint64_t sub_1016054D8(uint64_t result)
{
  if (!*(_QWORD *)(result + 2008))
    operator new();
  return result;
}

uint64_t sub_10160553C(uint64_t result)
{
  if (!*(_QWORD *)(result + 2064))
    operator new();
  return result;
}

uint64_t sub_1016055A0(uint64_t result)
{
  if (!*(_QWORD *)(result + 3080))
    operator new();
  return result;
}

uint64_t sub_101605604(uint64_t result)
{
  if (!*(_QWORD *)(result + 600))
    operator new();
  return result;
}

uint64_t sub_101605668(uint64_t result)
{
  if (!*(_QWORD *)(result + 1952))
    operator new();
  return result;
}

uint64_t sub_1016056CC(uint64_t result)
{
  if (!*(_QWORD *)(result + 424))
    operator new();
  return result;
}

uint64_t sub_101605730(uint64_t result)
{
  if (!*(_QWORD *)(result + 3216))
    operator new();
  return result;
}

uint64_t sub_101605794(uint64_t result)
{
  if (!*(_QWORD *)(result + 3024))
    operator new();
  return result;
}

uint64_t sub_1016057F8(uint64_t result)
{
  if (!*(_QWORD *)(result + 3408))
    operator new();
  return result;
}

uint64_t sub_10160585C(uint64_t result)
{
  if (!*(_QWORD *)(result + 2056))
    operator new();
  return result;
}

uint64_t sub_1016058C0(uint64_t result)
{
  if (!*(_QWORD *)(result + 2040))
    operator new();
  return result;
}

uint64_t sub_101605924(uint64_t result)
{
  if (!*(_QWORD *)(result + 2120))
    operator new();
  return result;
}

uint64_t sub_101605988(uint64_t result)
{
  if (!*(_QWORD *)(result + 96))
    operator new();
  return result;
}

uint64_t sub_1016059EC(uint64_t result)
{
  if (!*(_QWORD *)(result + 240))
    operator new();
  return result;
}

uint64_t sub_101605A50(uint64_t result)
{
  if (!*(_QWORD *)(result + 160))
    operator new();
  return result;
}

uint64_t sub_101605AB4(uint64_t result)
{
  if (!*(_QWORD *)(result + 200))
    operator new();
  return result;
}

uint64_t sub_101605B18(uint64_t result)
{
  if (!*(_QWORD *)(result + 136))
    operator new();
  return result;
}

uint64_t sub_101605B7C(uint64_t result)
{
  if (!*(_QWORD *)(result + 752))
    operator new();
  return result;
}

uint64_t sub_101605BE0(uint64_t result)
{
  if (!*(_QWORD *)(result + 2144))
    operator new();
  return result;
}

uint64_t sub_101605C44(uint64_t result)
{
  if (!*(_QWORD *)(result + 2232))
    operator new();
  return result;
}

uint64_t sub_101605CA8(uint64_t result)
{
  *(_QWORD *)result = &off_1021C1B38;
  *(_DWORD *)(result + 208) = 0;
  return result;
}

void sub_101605CC0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_101605CE4(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  double result;

  *(_QWORD *)a1 = &off_1021C1B38;
  *(_DWORD *)(a1 + 208) = 0;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x400) != 0)
  {
    result = *(double *)(a2 + 88);
    v3 = 1024;
    *(_DWORD *)(a1 + 208) = 1024;
    *(double *)(a1 + 88) = result;
    v2 = *(_DWORD *)(a2 + 208);
    if ((v2 & 0x10000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x10000) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 136);
    v3 |= 0x10000u;
    *(_DWORD *)(a1 + 208) = v3;
    *(double *)(a1 + 136) = result;
    v2 = *(_DWORD *)(a2 + 208);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 |= 1u;
    *(_DWORD *)(a1 + 208) = v3;
    *(double *)(a1 + 8) = result;
    v2 = *(_DWORD *)(a2 + 208);
    if ((v2 & 0x800000) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_32;
    }
  }
  else if ((v2 & 0x800000) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 192);
  v3 |= 0x800000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 192) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x800) == 0)
      goto LABEL_10;
    goto LABEL_33;
  }
LABEL_32:
  result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 56) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x800) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_11;
    goto LABEL_34;
  }
LABEL_33:
  result = *(double *)(a2 + 96);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 96) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_35;
  }
LABEL_34:
  result = *(double *)(a2 + 200);
  v3 |= 0x1000000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 200) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x20) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_36;
  }
LABEL_35:
  result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 48) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x100000) == 0)
      goto LABEL_14;
    goto LABEL_37;
  }
LABEL_36:
  result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 64) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x100000) == 0)
  {
LABEL_14:
    if ((v2 & 8) == 0)
      goto LABEL_15;
    goto LABEL_38;
  }
LABEL_37:
  result = *(double *)(a2 + 168);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 168) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 8) == 0)
  {
LABEL_15:
    if ((v2 & 0x200000) == 0)
      goto LABEL_16;
    goto LABEL_39;
  }
LABEL_38:
  result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 32) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x200000) == 0)
  {
LABEL_16:
    if ((v2 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_40;
  }
LABEL_39:
  result = *(double *)(a2 + 176);
  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 176) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x8000) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0)
      goto LABEL_18;
    goto LABEL_41;
  }
LABEL_40:
  result = *(double *)(a2 + 128);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 128) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 4) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_42;
  }
LABEL_41:
  result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 24) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x200) == 0)
      goto LABEL_20;
    goto LABEL_43;
  }
LABEL_42:
  result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 40) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x200) == 0)
  {
LABEL_20:
    if ((v2 & 0x2000) == 0)
      goto LABEL_21;
    goto LABEL_44;
  }
LABEL_43:
  result = *(double *)(a2 + 80);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 80) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x2000) == 0)
  {
LABEL_21:
    if ((v2 & 0x1000) == 0)
      goto LABEL_22;
    goto LABEL_45;
  }
LABEL_44:
  result = *(double *)(a2 + 112);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 112) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x1000) == 0)
  {
LABEL_22:
    if ((v2 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_46;
  }
LABEL_45:
  result = *(double *)(a2 + 104);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 104) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x4000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80000) == 0)
      goto LABEL_24;
    goto LABEL_47;
  }
LABEL_46:
  result = *(double *)(a2 + 120);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 120) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x80000) == 0)
  {
LABEL_24:
    if ((v2 & 0x400000) == 0)
      goto LABEL_25;
    goto LABEL_48;
  }
LABEL_47:
  result = *(double *)(a2 + 160);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 160) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x400000) == 0)
  {
LABEL_25:
    if ((v2 & 0x40000) == 0)
      goto LABEL_26;
    goto LABEL_49;
  }
LABEL_48:
  result = *(double *)(a2 + 184);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 184) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x40000) == 0)
  {
LABEL_26:
    if ((v2 & 0x20000) == 0)
      goto LABEL_27;
    goto LABEL_50;
  }
LABEL_49:
  result = *(double *)(a2 + 152);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 152) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x20000) == 0)
  {
LABEL_27:
    if ((v2 & 0x100) == 0)
      goto LABEL_28;
    goto LABEL_51;
  }
LABEL_50:
  result = *(double *)(a2 + 144);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 144) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x100) == 0)
  {
LABEL_28:
    if ((v2 & 2) == 0)
      return result;
LABEL_52:
    result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 208) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
LABEL_51:
  result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 72) = result;
  if ((*(_DWORD *)(a2 + 208) & 2) != 0)
    goto LABEL_52;
  return result;
}

uint64_t sub_101605FBC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "acceleration", *(double *)(a1 + 8));
    v5 = *(_DWORD *)(a1 + 208);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_30;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "centerOfMassAccelAmplitude", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "centerOfMassAccelMax", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "centripetalAccelMeanY", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "centripetalAccelMeanZ", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "height", *(double *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "position", *(double *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "rotationProjectedGravityAmplitude", *(double *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "rotationRateMean", *(double *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "rotationRateMeanX", *(double *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "strideLengthCadence", *(double *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "swingAccelAmplitudeY", *(double *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "swingAccelAmplitudeZ", *(double *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "swingAccelMaxY", *(double *)(a1 + 120));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "swingAccelMaxZ", *(double *)(a1 + 128));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 136));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "userAccelAmplitudeZ", *(double *)(a1 + 144));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "userAccelMaxX", *(double *)(a1 + 152));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "userAccelMaxY", *(double *)(a1 + 160));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "userAccelMean", *(double *)(a1 + 168));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "userAccelMeanY", *(double *)(a1 + 176));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0)
      goto LABEL_25;
LABEL_51:
    PB::TextFormatter::format(this, "velocity", *(double *)(a1 + 192));
    if ((*(_DWORD *)(a1 + 208) & 0x1000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_26;
  }
LABEL_50:
  PB::TextFormatter::format(this, "userAccelProjectedGravityAmplitudeCadence", *(double *)(a1 + 184));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x800000) != 0)
    goto LABEL_51;
LABEL_25:
  if ((v5 & 0x1000000) != 0)
LABEL_26:
    PB::TextFormatter::format(this, "weight", *(double *)(a1 + 200));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10160630C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 208) |= 0x400u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 2u:
          *(_DWORD *)(a1 + 208) |= 0x10000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 136) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 3u:
          *(_DWORD *)(a1 + 208) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 4u:
          *(_DWORD *)(a1 + 208) |= 0x800000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 192) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 5u:
          *(_DWORD *)(a1 + 208) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 6u:
          *(_DWORD *)(a1 + 208) |= 0x800u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 7u:
          *(_DWORD *)(a1 + 208) |= 0x1000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 200) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 8u:
          *(_DWORD *)(a1 + 208) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 9u:
          *(_DWORD *)(a1 + 208) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 0xAu:
          *(_DWORD *)(a1 + 208) |= 0x100000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 168) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 0xBu:
          *(_DWORD *)(a1 + 208) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 0xCu:
          *(_DWORD *)(a1 + 208) |= 0x200000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 176) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 0xDu:
          *(_DWORD *)(a1 + 208) |= 0x8000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 128) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 0xEu:
          *(_DWORD *)(a1 + 208) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 0xFu:
          *(_DWORD *)(a1 + 208) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 0x10u:
          *(_DWORD *)(a1 + 208) |= 0x200u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 0x11u:
          *(_DWORD *)(a1 + 208) |= 0x2000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 0x12u:
          *(_DWORD *)(a1 + 208) |= 0x1000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 0x13u:
          *(_DWORD *)(a1 + 208) |= 0x4000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 0x14u:
          *(_DWORD *)(a1 + 208) |= 0x80000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 160) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 0x15u:
          *(_DWORD *)(a1 + 208) |= 0x400000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 184) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 0x16u:
          *(_DWORD *)(a1 + 208) |= 0x40000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 152) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 0x17u:
          *(_DWORD *)(a1 + 208) |= 0x20000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 144) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 0x18u:
          *(_DWORD *)(a1 + 208) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 0x19u:
          *(_DWORD *)(a1 + 208) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_100:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_96:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101606A00(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 208);
  if ((v4 & 0x400) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 88), 1u);
    v4 = *(_DWORD *)(v3 + 208);
    if ((v4 & 0x10000) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_29;
    }
  }
  else if ((v4 & 0x10000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 136), 2u);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x800000) == 0)
      goto LABEL_5;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x800000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(double *)(v3 + 192), 4u);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(double *)(v3 + 56), 5u);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x800) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_8;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(double *)(v3 + 96), 6u);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(double *)(v3 + 200), 7u);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(double *)(v3 + 48), 8u);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x100000) == 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(double *)(v3 + 64), 9u);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x100000) == 0)
  {
LABEL_11:
    if ((v4 & 8) == 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(double *)(v3 + 168), 0xAu);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 8) == 0)
  {
LABEL_12:
    if ((v4 & 0x200000) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 0xBu);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x200000) == 0)
  {
LABEL_13:
    if ((v4 & 0x8000) == 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(double *)(v3 + 176), 0xCu);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x8000) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0)
      goto LABEL_15;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(double *)(v3 + 128), 0xDu);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 4) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 0xEu);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x200) == 0)
      goto LABEL_17;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 0xFu);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x200) == 0)
  {
LABEL_17:
    if ((v4 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(double *)(v3 + 80), 0x10u);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x2000) == 0)
  {
LABEL_18:
    if ((v4 & 0x1000) == 0)
      goto LABEL_19;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(double *)(v3 + 112), 0x11u);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x1000) == 0)
  {
LABEL_19:
    if ((v4 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(double *)(v3 + 104), 0x12u);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x4000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(double *)(v3 + 120), 0x13u);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x80000) == 0)
  {
LABEL_21:
    if ((v4 & 0x400000) == 0)
      goto LABEL_22;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(double *)(v3 + 160), 0x14u);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x400000) == 0)
  {
LABEL_22:
    if ((v4 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(double *)(v3 + 184), 0x15u);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x40000) == 0)
  {
LABEL_23:
    if ((v4 & 0x20000) == 0)
      goto LABEL_24;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(double *)(v3 + 152), 0x16u);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x20000) == 0)
  {
LABEL_24:
    if ((v4 & 0x100) == 0)
      goto LABEL_25;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(double *)(v3 + 144), 0x17u);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x100) == 0)
  {
LABEL_25:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16), 0x19u);
  }
LABEL_50:
  result = PB::Writer::write(this, *(double *)(v3 + 72), 0x18u);
  if ((*(_DWORD *)(v3 + 208) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16), 0x19u);
  return result;
}

_QWORD *sub_101606CE0(_QWORD *result)
{
  *result = off_1021C1B70;
  result[1] = 0;
  return result;
}

void sub_101606CF0(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C1B70;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_101606D30(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C1B70;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_101606D84(_QWORD *result, uint64_t a2)
{
  *result = off_1021C1B70;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_101606E00(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101606E50(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101607018(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

_QWORD *sub_101607034(_QWORD *result)
{
  *result = off_1021C1BA8;
  result[1] = 0;
  return result;
}

void sub_101607044(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C1BA8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_101607084(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C1BA8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_1016070D8(_QWORD *result, uint64_t a2)
{
  *result = off_1021C1BA8;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_101607154(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016071A4(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10160736C(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_101607388(uint64_t result)
{
  *(_QWORD *)result = &off_1021C1BE0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1016073A0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1016073C4(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_1021C1BE0;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_101607414(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "code", *(_DWORD *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10160747C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)this + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v27 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v28 = *(_QWORD *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_64;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)this + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v31) = 0;
LABEL_63:
          v3 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v3 = v27 + 1;
            *((_QWORD *)this + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v3;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_64:
        *(_DWORD *)(a1 + 16) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v21)
            {
              v25 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_60;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              v25 = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)this + 24))
            v25 = 0;
LABEL_59:
          v3 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v3 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v3;
            v14 = v24++ > 8;
            if (v14)
            {
              v25 = 0;
              break;
            }
          }
        }
LABEL_60:
        *(_QWORD *)(a1 + 8) = v25;
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1016077A4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  return result;
}

uint64_t sub_1016077FC(uint64_t result)
{
  *(_QWORD *)result = &off_1021C1C18;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_101607814(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101607838(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;

  *(_QWORD *)result = &off_1021C1C18;
  *(_DWORD *)(result + 24) = 0;
  v2 = *(_BYTE *)(a2 + 24);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 24) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 24);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 24) & 4) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(result + 24) = v3;
    *(_DWORD *)(result + 20) = v5;
    v2 = *(_BYTE *)(a2 + 24);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 24) = v3 | 2;
    *(_DWORD *)(result + 16) = v6;
  }
  return result;
}

uint64_t sub_1016078A8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 2) == 0)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 24) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "dramDurationMs", *(_DWORD *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "vehicularFlags", *(_DWORD *)(a1 + 20));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101607938(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  uint64_t result;
  char v40;
  unsigned int v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  unint64_t v50;
  char v51;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)this + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        v27 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v28 = *(_QWORD *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v44 = 0;
          v45 = 0;
          v31 = 0;
          if (v2 <= v27)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_80;
            }
            v46 = v27++;
            v47 = *(_BYTE *)(v28 + v46);
            *((_QWORD *)this + 1) = v27;
            v31 |= (unint64_t)(v47 & 0x7F) << v44;
            if ((v47 & 0x80) == 0)
              break;
            v44 += 7;
            v14 = v45++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_79;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v31) = 0;
LABEL_79:
          v3 = v46 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v3 = v27 + 1;
            *((_QWORD *)this + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v3;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_80:
        *(_DWORD *)(a1 + 16) = v31;
      }
      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 24) |= 4u;
        v33 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v34 = *(_QWORD *)this;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          v48 = 0;
          v49 = 0;
          v37 = 0;
          if (v2 <= v33)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v33)
            {
              LODWORD(v37) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_85;
            }
            v50 = v33++;
            v51 = *(_BYTE *)(v34 + v50);
            *((_QWORD *)this + 1) = v33;
            v37 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0)
              break;
            v48 += 7;
            v14 = v49++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              goto LABEL_84;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v37) = 0;
LABEL_84:
          v3 = v50 + 1;
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v37 = 0;
          while (1)
          {
            v3 = v33 + 1;
            *((_QWORD *)this + 1) = v33 + 1;
            v38 = *(_BYTE *)(v34 + v33);
            v37 |= (unint64_t)(v38 & 0x7F) << v35;
            if ((v38 & 0x80) == 0)
              break;
            v35 += 7;
            v33 = v3;
            v14 = v36++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              break;
            }
          }
        }
LABEL_85:
        *(_DWORD *)(a1 + 20) = v37;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v40 = 0;
          v41 = 0;
          v25 = 0;
          if (v2 <= v21)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v21)
            {
              v25 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_75;
            }
            v42 = v21++;
            v43 = *(_BYTE *)(v22 + v42);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v43 & 0x7F) << v40;
            if ((v43 & 0x80) == 0)
              break;
            v40 += 7;
            v14 = v41++ > 8;
            if (v14)
            {
              v25 = 0;
              goto LABEL_74;
            }
          }
          if (*((_BYTE *)this + 24))
            v25 = 0;
LABEL_74:
          v3 = v42 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v3 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v3;
            v14 = v24++ > 8;
            if (v14)
            {
              v25 = 0;
              break;
            }
          }
        }
LABEL_75:
        *(_QWORD *)(a1 + 8) = v25;
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101607D54(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 24);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return result;
      return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 3u);
    }
  }
  else if ((*(_BYTE *)(result + 24) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 2u);
  if ((*(_BYTE *)(v3 + 24) & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 3u);
  return result;
}

uint64_t sub_101607DCC(uint64_t result)
{
  *(_QWORD *)result = &off_1021C1C50;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_101607DE4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101607E08(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)result = &off_1021C1C50;
  *(_DWORD *)(result + 52) = 0;
  v2 = *(_BYTE *)(a2 + 52);
  if ((v2 & 0x20) != 0)
  {
    v4 = *(_DWORD *)(a2 + 44);
    v3 = 32;
    *(_BYTE *)(result + 52) = 32;
    *(_DWORD *)(result + 44) = v4;
    v2 = *(_BYTE *)(a2 + 52);
    if ((v2 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 52) & 0x40) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 48);
    v3 |= 0x40u;
    *(_BYTE *)(result + 52) = v3;
    *(_DWORD *)(result + 48) = v5;
    v2 = *(_BYTE *)(a2 + 52);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *(_DWORD *)(a2 + 40);
    v3 |= 0x10u;
    *(_BYTE *)(result + 52) = v3;
    *(_DWORD *)(result + 40) = v6;
    v2 = *(_BYTE *)(a2 + 52);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_BYTE *)(result + 52) = v3;
  *(_QWORD *)(result + 32) = v7;
  v2 = *(_BYTE *)(a2 + 52);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  v8 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(result + 52) = v3;
  *(_QWORD *)(result + 8) = v8;
  v2 = *(_BYTE *)(a2 + 52);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0)
      return result;
LABEL_16:
    v10 = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(result + 52) = v3 | 2;
    *(_QWORD *)(result + 16) = v10;
    return result;
  }
LABEL_15:
  v9 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_BYTE *)(result + 52) = v3;
  *(_QWORD *)(result + 24) = v9;
  if ((*(_BYTE *)(a2 + 52) & 2) != 0)
    goto LABEL_16;
  return result;
}

uint64_t sub_101607EE8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "createdAtTimestamp", *(_QWORD *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 52);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 52) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "epochNumber", *(_DWORD *)(a1 + 40));
  v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "epochTimestamp", *(_QWORD *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "lastRealTriggerTimestamp", *(_QWORD *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(this, "receivedAtTimestamp", *(_QWORD *)(a1 + 32));
    if ((*(_BYTE *)(a1 + 52) & 0x40) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(this, "mode", *(_DWORD *)(a1 + 44));
  v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 8) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x40) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "sessionNumber", *(_DWORD *)(a1 + 48));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101607FF8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  uint64_t result;
  char v64;
  unsigned int v65;
  unint64_t v66;
  char v67;
  char v68;
  unsigned int v69;
  unint64_t v70;
  char v71;
  char v72;
  unsigned int v73;
  unint64_t v74;
  char v75;
  char v76;
  unsigned int v77;
  unint64_t v78;
  char v79;
  char v80;
  unsigned int v81;
  unint64_t v82;
  char v83;
  char v84;
  unsigned int v85;
  unint64_t v86;
  char v87;
  char v88;
  unsigned int v89;
  unint64_t v90;
  char v91;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v3 > v2)
          v2 = v3;
        while (v2 != v3)
        {
          v17 = v3 + 1;
          v18 = *(_BYTE *)(v8 + v3);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v3 + 1;
          *((_QWORD *)this + 1) = v3 + 1;
          v13 = *(_BYTE *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v3 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          v20 = v11 >> 3;
          switch((v11 >> 3))
          {
            case 2u:
              *(_BYTE *)(a1 + 52) |= 0x20u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v64 = 0;
                v65 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_135;
                  }
                  v66 = v21++;
                  v67 = *(_BYTE *)(v22 + v66);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v67 & 0x7F) << v64;
                  if ((v67 & 0x80) == 0)
                    break;
                  v64 += 7;
                  v14 = v65++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
                    goto LABEL_134;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
LABEL_134:
                v3 = v66 + 1;
              }
              else
              {
                v23 = 0;
                v24 = 0;
                v25 = 0;
                do
                {
                  v3 = v21 + 1;
                  *((_QWORD *)this + 1) = v21 + 1;
                  v26 = *(_BYTE *)(v22 + v21);
                  v25 |= (unint64_t)(v26 & 0x7F) << v23;
                  if ((v26 & 0x80) == 0)
                    goto LABEL_135;
                  v23 += 7;
                  v21 = v3;
                  v14 = v24++ > 8;
                }
                while (!v14);
                LODWORD(v25) = 0;
              }
LABEL_135:
              *(_DWORD *)(a1 + 44) = v25;
              goto LABEL_166;
            case 3u:
              *(_BYTE *)(a1 + 52) |= 0x40u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v72 = 0;
                v73 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_145;
                  }
                  v74 = v33++;
                  v75 = *(_BYTE *)(v34 + v74);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v75 & 0x7F) << v72;
                  if ((v75 & 0x80) == 0)
                    break;
                  v72 += 7;
                  v14 = v73++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_144:
                    v3 = v74 + 1;
                    goto LABEL_145;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_144;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v3 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_145;
                v35 += 7;
                v33 = v3;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_145:
              *(_DWORD *)(a1 + 48) = v37;
              goto LABEL_166;
            case 4u:
              *(_BYTE *)(a1 + 52) |= 0x10u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v76 = 0;
                v77 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_150;
                  }
                  v78 = v39++;
                  v79 = *(_BYTE *)(v40 + v78);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v79 & 0x7F) << v76;
                  if ((v79 & 0x80) == 0)
                    break;
                  v76 += 7;
                  v14 = v77++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_149:
                    v3 = v78 + 1;
                    goto LABEL_150;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_149;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v3 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_150;
                v41 += 7;
                v39 = v3;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_150:
              *(_DWORD *)(a1 + 40) = v43;
              goto LABEL_166;
            case 5u:
              *(_BYTE *)(a1 + 52) |= 8u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v80 = 0;
                v81 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v45)
                  {
                    v49 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_155;
                  }
                  v82 = v45++;
                  v83 = *(_BYTE *)(v46 + v82);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v83 & 0x7F) << v80;
                  if ((v83 & 0x80) == 0)
                    break;
                  v80 += 7;
                  v14 = v81++ > 8;
                  if (v14)
                  {
                    v49 = 0;
LABEL_154:
                    v3 = v82 + 1;
                    goto LABEL_155;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v49 = 0;
                goto LABEL_154;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v3 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_155;
                v47 += 7;
                v45 = v3;
                v14 = v48++ > 8;
              }
              while (!v14);
              v49 = 0;
LABEL_155:
              *(_QWORD *)(a1 + 32) = v49;
              goto LABEL_166;
            case 6u:
              *(_BYTE *)(a1 + 52) |= 1u;
              v51 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v52 = *(_QWORD *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v84 = 0;
                v85 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v51)
                  {
                    v55 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_160;
                  }
                  v86 = v51++;
                  v87 = *(_BYTE *)(v52 + v86);
                  *((_QWORD *)this + 1) = v51;
                  v55 |= (unint64_t)(v87 & 0x7F) << v84;
                  if ((v87 & 0x80) == 0)
                    break;
                  v84 += 7;
                  v14 = v85++ > 8;
                  if (v14)
                  {
                    v55 = 0;
LABEL_159:
                    v3 = v86 + 1;
                    goto LABEL_160;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v55 = 0;
                goto LABEL_159;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v3 = v51 + 1;
                *((_QWORD *)this + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_160;
                v53 += 7;
                v51 = v3;
                v14 = v54++ > 8;
              }
              while (!v14);
              v55 = 0;
LABEL_160:
              *(_QWORD *)(a1 + 8) = v55;
              goto LABEL_166;
            default:
              if ((_DWORD)v20 == 100)
              {
                *(_BYTE *)(a1 + 52) |= 4u;
                v57 = *((_QWORD *)this + 1);
                v2 = *((_QWORD *)this + 2);
                v58 = *(_QWORD *)this;
                if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
                {
                  v88 = 0;
                  v89 = 0;
                  v61 = 0;
                  if (v2 <= v57)
                    v3 = *((_QWORD *)this + 1);
                  else
                    v3 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v3 == v57)
                    {
                      v61 = 0;
                      *((_BYTE *)this + 24) = 1;
                      goto LABEL_165;
                    }
                    v90 = v57++;
                    v91 = *(_BYTE *)(v58 + v90);
                    *((_QWORD *)this + 1) = v57;
                    v61 |= (unint64_t)(v91 & 0x7F) << v88;
                    if ((v91 & 0x80) == 0)
                      break;
                    v88 += 7;
                    v14 = v89++ > 8;
                    if (v14)
                    {
                      v61 = 0;
                      goto LABEL_164;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    v61 = 0;
LABEL_164:
                  v3 = v90 + 1;
                }
                else
                {
                  v59 = 0;
                  v60 = 0;
                  v61 = 0;
                  while (1)
                  {
                    v3 = v57 + 1;
                    *((_QWORD *)this + 1) = v57 + 1;
                    v62 = *(_BYTE *)(v58 + v57);
                    v61 |= (unint64_t)(v62 & 0x7F) << v59;
                    if ((v62 & 0x80) == 0)
                      break;
                    v59 += 7;
                    v57 = v3;
                    v14 = v60++ > 8;
                    if (v14)
                    {
                      v61 = 0;
                      break;
                    }
                  }
                }
LABEL_165:
                *(_QWORD *)(a1 + 24) = v61;
              }
              else if ((_DWORD)v20 == 101)
              {
                *(_BYTE *)(a1 + 52) |= 2u;
                v27 = *((_QWORD *)this + 1);
                v2 = *((_QWORD *)this + 2);
                v28 = *(_QWORD *)this;
                if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
                {
                  v68 = 0;
                  v69 = 0;
                  v31 = 0;
                  if (v2 <= v27)
                    v3 = *((_QWORD *)this + 1);
                  else
                    v3 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v3 == v27)
                    {
                      v31 = 0;
                      *((_BYTE *)this + 24) = 1;
                      goto LABEL_140;
                    }
                    v70 = v27++;
                    v71 = *(_BYTE *)(v28 + v70);
                    *((_QWORD *)this + 1) = v27;
                    v31 |= (unint64_t)(v71 & 0x7F) << v68;
                    if ((v71 & 0x80) == 0)
                      break;
                    v68 += 7;
                    v14 = v69++ > 8;
                    if (v14)
                    {
                      v31 = 0;
                      goto LABEL_139;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    v31 = 0;
LABEL_139:
                  v3 = v70 + 1;
                }
                else
                {
                  v29 = 0;
                  v30 = 0;
                  v31 = 0;
                  while (1)
                  {
                    v3 = v27 + 1;
                    *((_QWORD *)this + 1) = v27 + 1;
                    v32 = *(_BYTE *)(v28 + v27);
                    v31 |= (unint64_t)(v32 & 0x7F) << v29;
                    if ((v32 & 0x80) == 0)
                      break;
                    v29 += 7;
                    v27 = v3;
                    v14 = v30++ > 8;
                    if (v14)
                    {
                      v31 = 0;
                      break;
                    }
                  }
                }
LABEL_140:
                *(_QWORD *)(a1 + 16) = v31;
              }
              else
              {
                result = PB::Reader::skip(this, v20, v11 & 7, 0);
                if (!(_DWORD)result)
                  return result;
                v3 = *((_QWORD *)this + 1);
                v2 = *((_QWORD *)this + 2);
              }
LABEL_166:
              v4 = *((unsigned __int8 *)this + 24);
              if (v3 >= v2 || *((_BYTE *)this + 24))
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1016087E0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 52);
  if ((v4 & 0x20) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 44), 2u);
    v4 = *(_BYTE *)(v3 + 52);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(result + 52) & 0x40) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 3u);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 4u);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 32), 5u);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 8), 6u);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 16), 0x65u);
  }
LABEL_14:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 24), 0x64u);
  if ((*(_BYTE *)(v3 + 52) & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 16), 0x65u);
  return result;
}

_QWORD *sub_1016088C8(_QWORD *result)
{
  *result = &off_1021C1C88;
  *(_QWORD *)((char *)result + 188) = 0;
  return result;
}

void sub_1016088E0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101608904(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  char v38;
  char v39;
  int v40;

  *(_QWORD *)result = &off_1021C1C88;
  *(_QWORD *)(result + 188) = 0;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x100) != 0)
  {
    v4 = *(_QWORD *)(a2 + 72);
    v3 = 256;
    *(_QWORD *)(result + 188) = 256;
    *(_QWORD *)(result + 72) = v4;
    v2 = *(_QWORD *)(a2 + 188);
    if ((v2 & 0x40000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x40000) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 116);
    v3 |= 0x40000uLL;
    *(_QWORD *)(result + 188) = v3;
    *(_DWORD *)(result + 116) = v5;
    v2 = *(_QWORD *)(a2 + 188);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *(_QWORD *)(a2 + 32);
    v3 |= 8uLL;
    *(_QWORD *)(result + 188) = v3;
    *(_QWORD *)(result + 32) = v6;
    v2 = *(_QWORD *)(a2 + 188);
    if ((v2 & 0x2000) == 0)
    {
LABEL_8:
      if ((v2 & 0x200000) == 0)
        goto LABEL_9;
      goto LABEL_44;
    }
  }
  else if ((v2 & 0x2000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 96);
  v3 |= 0x2000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 96) = v7;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x200000) == 0)
  {
LABEL_9:
    if ((v2 & 0x20000) == 0)
      goto LABEL_10;
    goto LABEL_45;
  }
LABEL_44:
  v8 = *(_DWORD *)(a2 + 128);
  v3 |= 0x200000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 128) = v8;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x20000) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0)
      goto LABEL_11;
    goto LABEL_46;
  }
LABEL_45:
  v9 = *(_DWORD *)(a2 + 112);
  v3 |= 0x20000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 112) = v9;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_47;
  }
LABEL_46:
  v10 = *(_QWORD *)(a2 + 24);
  v3 |= 4uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_QWORD *)(result + 24) = v10;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x8000) == 0)
  {
LABEL_12:
    if ((v2 & 0x100000) == 0)
      goto LABEL_13;
    goto LABEL_48;
  }
LABEL_47:
  v11 = *(_DWORD *)(a2 + 104);
  v3 |= 0x8000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 104) = v11;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x100000) == 0)
  {
LABEL_13:
    if ((v2 & 0x80000) == 0)
      goto LABEL_14;
    goto LABEL_49;
  }
LABEL_48:
  v12 = *(_DWORD *)(a2 + 124);
  v3 |= 0x100000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 124) = v12;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x80000) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_50;
  }
LABEL_49:
  v13 = *(_DWORD *)(a2 + 120);
  v3 |= 0x80000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 120) = v13;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_51;
  }
LABEL_50:
  v14 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_QWORD *)(result + 40) = v14;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x4000) == 0)
  {
LABEL_16:
    if ((v2 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_52;
  }
LABEL_51:
  v15 = *(_DWORD *)(a2 + 100);
  v3 |= 0x4000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 100) = v15;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x10000) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_18;
    goto LABEL_53;
  }
LABEL_52:
  v16 = *(_DWORD *)(a2 + 108);
  v3 |= 0x10000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 108) = v16;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x40) == 0)
      goto LABEL_19;
    goto LABEL_54;
  }
LABEL_53:
  v17 = *(_DWORD *)(a2 + 152);
  v3 |= 0x8000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 152) = v17;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x40) == 0)
  {
LABEL_19:
    if ((v2 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_55;
  }
LABEL_54:
  v18 = *(_QWORD *)(a2 + 56);
  v3 |= 0x40uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_QWORD *)(result + 56) = v18;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x400000) == 0)
  {
LABEL_20:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_21;
    goto LABEL_56;
  }
LABEL_55:
  v19 = *(_DWORD *)(a2 + 132);
  v3 |= 0x400000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 132) = v19;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_21:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_22;
    goto LABEL_57;
  }
LABEL_56:
  v20 = *(_DWORD *)(a2 + 164);
  v3 |= 0x40000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 164) = v20;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x20) == 0)
      goto LABEL_23;
    goto LABEL_58;
  }
LABEL_57:
  v21 = *(_DWORD *)(a2 + 148);
  v3 |= 0x4000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 148) = v21;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x20) == 0)
  {
LABEL_23:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_24;
    goto LABEL_59;
  }
LABEL_58:
  v22 = *(_QWORD *)(a2 + 48);
  v3 |= 0x20uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_QWORD *)(result + 48) = v22;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_25;
    goto LABEL_60;
  }
LABEL_59:
  v23 = *(_DWORD *)(a2 + 140);
  v3 |= 0x1000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 140) = v23;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_26;
    goto LABEL_61;
  }
LABEL_60:
  v24 = *(_DWORD *)(a2 + 160);
  v3 |= 0x20000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 160) = v24;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x80) == 0)
      goto LABEL_27;
    goto LABEL_62;
  }
LABEL_61:
  v25 = *(_DWORD *)(a2 + 156);
  v3 |= 0x10000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 156) = v25;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x80) == 0)
  {
LABEL_27:
    if ((v2 & 0x800000) == 0)
      goto LABEL_28;
    goto LABEL_63;
  }
LABEL_62:
  v26 = *(_QWORD *)(a2 + 64);
  v3 |= 0x80uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_QWORD *)(result + 64) = v26;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x800000) == 0)
  {
LABEL_28:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_29;
    goto LABEL_64;
  }
LABEL_63:
  v27 = *(_DWORD *)(a2 + 136);
  v3 |= 0x800000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 136) = v27;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v2 & 0x400) == 0)
      goto LABEL_30;
    goto LABEL_65;
  }
LABEL_64:
  v28 = *(_DWORD *)(a2 + 144);
  v3 |= 0x2000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 144) = v28;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x400) == 0)
  {
LABEL_30:
    if ((v2 & 0x1000) == 0)
      goto LABEL_31;
    goto LABEL_66;
  }
LABEL_65:
  v29 = *(_DWORD *)(a2 + 84);
  v3 |= 0x400uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 84) = v29;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x1000) == 0)
  {
LABEL_31:
    if ((v2 & 0x800) == 0)
      goto LABEL_32;
    goto LABEL_67;
  }
LABEL_66:
  v30 = *(_DWORD *)(a2 + 92);
  v3 |= 0x1000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 92) = v30;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x800) == 0)
  {
LABEL_32:
    if ((v2 & 2) == 0)
      goto LABEL_33;
    goto LABEL_68;
  }
LABEL_67:
  v31 = *(_DWORD *)(a2 + 88);
  v3 |= 0x800uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 88) = v31;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 2) == 0)
  {
LABEL_33:
    if ((v2 & 1) == 0)
      goto LABEL_34;
    goto LABEL_69;
  }
LABEL_68:
  v32 = *(_QWORD *)(a2 + 16);
  v3 |= 2uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_QWORD *)(result + 16) = v32;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 1) == 0)
  {
LABEL_34:
    if ((v2 & 0x100000000) == 0)
      goto LABEL_35;
    goto LABEL_70;
  }
LABEL_69:
  v33 = *(_QWORD *)(a2 + 8);
  v3 |= 1uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_QWORD *)(result + 8) = v33;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_36;
    goto LABEL_71;
  }
LABEL_70:
  v34 = *(_DWORD *)(a2 + 172);
  v3 |= (unint64_t)&_mh_execute_header;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 172) = v34;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_36:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_37;
    goto LABEL_72;
  }
LABEL_71:
  v35 = *(_DWORD *)(a2 + 180);
  v3 |= 0x400000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 180) = v35;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_37:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_38;
    goto LABEL_73;
  }
LABEL_72:
  v36 = *(_DWORD *)(a2 + 176);
  v3 |= 0x200000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 176) = v36;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_38:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_39;
    goto LABEL_74;
  }
LABEL_73:
  v37 = *(_DWORD *)(a2 + 168);
  v3 |= 0x80000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 168) = v37;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_39:
    if ((v2 & 0x1000000000) == 0)
      goto LABEL_40;
    goto LABEL_75;
  }
LABEL_74:
  v38 = *(_BYTE *)(a2 + 184);
  v3 |= 0x800000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_BYTE *)(result + 184) = v38;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_40:
    if ((v2 & 0x200) == 0)
      return result;
LABEL_76:
    v40 = *(_DWORD *)(a2 + 80);
    *(_QWORD *)(result + 188) = v3 | 0x200;
    *(_DWORD *)(result + 80) = v40;
    return result;
  }
LABEL_75:
  v39 = *(_BYTE *)(a2 + 185);
  v3 |= 0x1000000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_BYTE *)(result + 185) = v39;
  if ((*(_QWORD *)(a2 + 188) & 0x200) != 0)
    goto LABEL_76;
  return result;
}

uint64_t sub_101608D2C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x200) != 0)
  {
    PB::TextFormatter::format(this, "dramDuration", *(_DWORD *)(a1 + 80));
    v5 = *(_QWORD *)(a1 + 188);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_42;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "epochMaxTimestamp", *(_QWORD *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "epochMinTimestamp", *(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x400) == 0)
  {
LABEL_5:
    if ((v5 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "maxRMS", *(float *)(a1 + 84));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x800) == 0)
  {
LABEL_6:
    if ((v5 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "numPointsInEpoch", *(_DWORD *)(a1 + 88));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x1000) == 0)
  {
LABEL_7:
    if ((v5 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "numShortAudio", *(_DWORD *)(a1 + 92));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x2000) == 0)
  {
LABEL_8:
    if ((v5 & 0x4000) == 0)
      goto LABEL_9;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "planarChaosAtMaxEnergy", *(float *)(a1 + 96));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x4000) == 0)
  {
LABEL_9:
    if ((v5 & 0x8000) == 0)
      goto LABEL_10;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "planarChaosAtMaxSaturation", *(float *)(a1 + 100));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x8000) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "planarEnergyAtMaxChaos", *(float *)(a1 + 104));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 0x20000) == 0)
      goto LABEL_12;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "planarEnergyAtMaxSaturation", *(float *)(a1 + 108));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x20000) == 0)
  {
LABEL_12:
    if ((v5 & 0x40000) == 0)
      goto LABEL_13;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "planarMaxChaos", *(float *)(a1 + 112));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x40000) == 0)
  {
LABEL_13:
    if ((v5 & 0x80000) == 0)
      goto LABEL_14;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "planarMaxEnergy", *(float *)(a1 + 116));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x80000) == 0)
  {
LABEL_14:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_15;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "planarMaxSaturation", *(float *)(a1 + 120));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x100000) == 0)
      goto LABEL_16;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "planarPassThru", *(_BYTE *)(a1 + 184));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x100000) == 0)
  {
LABEL_16:
    if ((v5 & 0x200000) == 0)
      goto LABEL_17;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "planarSaturationAtMaxChaos", *(float *)(a1 + 124));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x200000) == 0)
  {
LABEL_17:
    if ((v5 & 4) == 0)
      goto LABEL_18;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "planarSaturationAtMaxEnergy", *(float *)(a1 + 128));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 4) == 0)
  {
LABEL_18:
    if ((v5 & 8) == 0)
      goto LABEL_19;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "planarTimestampAtMaxChaos", *(_QWORD *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 8) == 0)
  {
LABEL_19:
    if ((v5 & 0x10) == 0)
      goto LABEL_20;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "planarTimestampAtMaxEnergy", *(_QWORD *)(a1 + 32));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x10) == 0)
  {
LABEL_20:
    if ((v5 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "planarTimestampAtMaxSaturation", *(_QWORD *)(a1 + 40));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x400000) == 0)
  {
LABEL_21:
    if ((v5 & 0x800000) == 0)
      goto LABEL_22;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "rolloverChaosAtMaxEnergy", *(float *)(a1 + 132));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x800000) == 0)
  {
LABEL_22:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_23;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "rolloverChaosAtMaxSaturation", *(float *)(a1 + 136));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_24;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "rolloverEnergyAtMaxChaos", *(float *)(a1 + 140));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_25;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "rolloverEnergyAtMaxSaturation", *(float *)(a1 + 144));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_26;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "rolloverMaxChaos", *(float *)(a1 + 148));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_27;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "rolloverMaxEnergy", *(float *)(a1 + 152));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_28;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "rolloverMaxSaturation", *(float *)(a1 + 156));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_29;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "rolloverPassThru", *(_BYTE *)(a1 + 185));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_30;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "rolloverSaturationAtMaxChaos", *(float *)(a1 + 160));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x20) == 0)
      goto LABEL_31;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "rolloverSaturationAtMaxEnergy", *(float *)(a1 + 164));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x20) == 0)
  {
LABEL_31:
    if ((v5 & 0x40) == 0)
      goto LABEL_32;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "rolloverTimestampAtMaxChaos", *(_QWORD *)(a1 + 48));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x40) == 0)
  {
LABEL_32:
    if ((v5 & 0x80) == 0)
      goto LABEL_33;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "rolloverTimestampAtMaxEnergy", *(_QWORD *)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x80) == 0)
  {
LABEL_33:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "rolloverTimestampAtMaxSaturation", *(_QWORD *)(a1 + 64));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_35;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "soundEnvelopeCount", *(float *)(a1 + 168));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_36;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "soundMaxMeanOverArmSession", *(float *)(a1 + 172));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_37;
LABEL_75:
    PB::TextFormatter::format(this, "soundMeanLast15s", *(float *)(a1 + 180));
    if ((*(_QWORD *)(a1 + 188) & 0x100) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_38;
  }
LABEL_74:
  PB::TextFormatter::format(this, "soundMeanCurrentWindow", *(float *)(a1 + 176));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x400000000) != 0)
    goto LABEL_75;
LABEL_37:
  if ((v5 & 0x100) != 0)
LABEL_38:
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 72));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016091FC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char v99;
  unsigned int v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  char v115;
  unsigned int v116;
  uint64_t v117;
  unint64_t v118;
  char v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  char v123;
  unsigned int v124;
  uint64_t v125;
  unint64_t v126;
  char v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  int v134;
  BOOL v135;
  unint64_t v136;
  unint64_t v137;
  int v138;
  BOOL v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  char v143;
  unsigned int v144;
  uint64_t v145;
  unint64_t v146;
  char v147;
  char v148;
  unsigned int v149;
  unint64_t v150;
  char v151;
  char v152;
  unsigned int v153;
  unint64_t v154;
  char v155;
  char v156;
  unsigned int v157;
  unint64_t v158;
  char v159;
  char v160;
  unsigned int v161;
  unint64_t v162;
  char v163;
  char v164;
  unsigned int v165;
  unint64_t v166;
  char v167;
  char v168;
  unsigned int v169;
  unint64_t v170;
  char v171;
  char v172;
  unsigned int v173;
  unint64_t v174;
  char v175;
  char v176;
  unsigned int v177;
  unint64_t v178;
  char v179;
  char v180;
  unsigned int v181;
  unint64_t v182;
  char v183;
  char v184;
  unsigned int v185;
  unint64_t v186;
  char v187;
  char v188;
  unsigned int v189;
  unint64_t v190;
  char v191;
  char v192;
  unsigned int v193;
  unint64_t v194;
  char v195;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_QWORD *)(a1 + 188) |= 0x100uLL;
          v20 = *((_QWORD *)this + 1);
          v21 = *((_QWORD *)this + 2);
          v22 = *(_QWORD *)this;
          if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
          {
            v148 = 0;
            v149 = 0;
            v25 = 0;
            if (v21 <= v20)
              v21 = *((_QWORD *)this + 1);
            do
            {
              if (v21 == v20)
              {
                v25 = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_279;
              }
              v150 = v20 + 1;
              v151 = *(_BYTE *)(v22 + v20);
              *((_QWORD *)this + 1) = v150;
              v25 |= (unint64_t)(v151 & 0x7F) << v148;
              if ((v151 & 0x80) == 0)
              {
                if (*((_BYTE *)this + 24))
                  v25 = 0;
                goto LABEL_279;
              }
              v148 += 7;
              v20 = v150;
              v14 = v149++ > 8;
            }
            while (!v14);
LABEL_187:
            v25 = 0;
          }
          else
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            while (1)
            {
              v26 = v20 + 1;
              *((_QWORD *)this + 1) = v20 + 1;
              v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0)
                break;
              v23 += 7;
              v20 = v26;
              v14 = v24++ > 8;
              if (v14)
                goto LABEL_187;
            }
          }
LABEL_279:
          *(_QWORD *)(a1 + 72) = v25;
          goto LABEL_271;
        case 2u:
          *(_QWORD *)(a1 + 188) |= 0x40000uLL;
          v29 = *((_QWORD *)this + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v29);
          goto LABEL_270;
        case 3u:
          *(_QWORD *)(a1 + 188) |= 8uLL;
          v30 = *((_QWORD *)this + 1);
          v31 = *((_QWORD *)this + 2);
          v32 = *(_QWORD *)this;
          if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
          {
            v33 = 0;
            v34 = 0;
            v35 = 0;
            do
            {
              v36 = v30 + 1;
              *((_QWORD *)this + 1) = v30 + 1;
              v37 = *(_BYTE *)(v32 + v30);
              v35 |= (unint64_t)(v37 & 0x7F) << v33;
              if ((v37 & 0x80) == 0)
                goto LABEL_283;
              v33 += 7;
              v30 = v36;
              v14 = v34++ > 8;
            }
            while (!v14);
LABEL_194:
            v35 = 0;
            goto LABEL_283;
          }
          v152 = 0;
          v153 = 0;
          v35 = 0;
          if (v31 <= v30)
            v31 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v31 == v30)
            {
              v35 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v154 = v30 + 1;
              v155 = *(_BYTE *)(v32 + v30);
              *((_QWORD *)this + 1) = v154;
              v35 |= (unint64_t)(v155 & 0x7F) << v152;
              if (v155 < 0)
              {
                v152 += 7;
                v30 = v154;
                v14 = v153++ > 8;
                if (v14)
                  goto LABEL_194;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v35 = 0;
            }
            break;
          }
LABEL_283:
          *(_QWORD *)(a1 + 32) = v35;
          goto LABEL_271;
        case 4u:
          *(_QWORD *)(a1 + 188) |= 0x2000uLL;
          v38 = *((_QWORD *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v38);
          goto LABEL_270;
        case 5u:
          *(_QWORD *)(a1 + 188) |= 0x200000uLL;
          v39 = *((_QWORD *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v39);
          goto LABEL_270;
        case 6u:
          *(_QWORD *)(a1 + 188) |= 0x20000uLL;
          v40 = *((_QWORD *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v40);
          goto LABEL_270;
        case 7u:
          *(_QWORD *)(a1 + 188) |= 4uLL;
          v41 = *((_QWORD *)this + 1);
          v42 = *((_QWORD *)this + 2);
          v43 = *(_QWORD *)this;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            v44 = 0;
            v45 = 0;
            v46 = 0;
            do
            {
              v47 = v41 + 1;
              *((_QWORD *)this + 1) = v41 + 1;
              v48 = *(_BYTE *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0)
                goto LABEL_287;
              v44 += 7;
              v41 = v47;
              v14 = v45++ > 8;
            }
            while (!v14);
LABEL_201:
            v46 = 0;
            goto LABEL_287;
          }
          v156 = 0;
          v157 = 0;
          v46 = 0;
          if (v42 <= v41)
            v42 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v42 == v41)
            {
              v46 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v158 = v41 + 1;
              v159 = *(_BYTE *)(v43 + v41);
              *((_QWORD *)this + 1) = v158;
              v46 |= (unint64_t)(v159 & 0x7F) << v156;
              if (v159 < 0)
              {
                v156 += 7;
                v41 = v158;
                v14 = v157++ > 8;
                if (v14)
                  goto LABEL_201;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v46 = 0;
            }
            break;
          }
LABEL_287:
          *(_QWORD *)(a1 + 24) = v46;
          goto LABEL_271;
        case 8u:
          *(_QWORD *)(a1 + 188) |= 0x8000uLL;
          v49 = *((_QWORD *)this + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v49);
          goto LABEL_270;
        case 9u:
          *(_QWORD *)(a1 + 188) |= 0x100000uLL;
          v50 = *((_QWORD *)this + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v50);
          goto LABEL_270;
        case 0xAu:
          *(_QWORD *)(a1 + 188) |= 0x80000uLL;
          v51 = *((_QWORD *)this + 1);
          if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v51);
          goto LABEL_270;
        case 0xBu:
          *(_QWORD *)(a1 + 188) |= 0x10uLL;
          v52 = *((_QWORD *)this + 1);
          v53 = *((_QWORD *)this + 2);
          v54 = *(_QWORD *)this;
          if (v52 <= 0xFFFFFFFFFFFFFFF5 && v52 + 10 <= v53)
          {
            v55 = 0;
            v56 = 0;
            v57 = 0;
            do
            {
              v58 = v52 + 1;
              *((_QWORD *)this + 1) = v52 + 1;
              v59 = *(_BYTE *)(v54 + v52);
              v57 |= (unint64_t)(v59 & 0x7F) << v55;
              if ((v59 & 0x80) == 0)
                goto LABEL_291;
              v55 += 7;
              v52 = v58;
              v14 = v56++ > 8;
            }
            while (!v14);
LABEL_208:
            v57 = 0;
            goto LABEL_291;
          }
          v160 = 0;
          v161 = 0;
          v57 = 0;
          if (v53 <= v52)
            v53 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v53 == v52)
            {
              v57 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v162 = v52 + 1;
              v163 = *(_BYTE *)(v54 + v52);
              *((_QWORD *)this + 1) = v162;
              v57 |= (unint64_t)(v163 & 0x7F) << v160;
              if (v163 < 0)
              {
                v160 += 7;
                v52 = v162;
                v14 = v161++ > 8;
                if (v14)
                  goto LABEL_208;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v57 = 0;
            }
            break;
          }
LABEL_291:
          *(_QWORD *)(a1 + 40) = v57;
          goto LABEL_271;
        case 0xCu:
          *(_QWORD *)(a1 + 188) |= 0x4000uLL;
          v60 = *((_QWORD *)this + 1);
          if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v60);
          goto LABEL_270;
        case 0xDu:
          *(_QWORD *)(a1 + 188) |= 0x10000uLL;
          v61 = *((_QWORD *)this + 1);
          if (v61 > 0xFFFFFFFFFFFFFFFBLL || v61 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v61);
          goto LABEL_270;
        case 0xEu:
          *(_QWORD *)(a1 + 188) |= 0x8000000uLL;
          v62 = *((_QWORD *)this + 1);
          if (v62 > 0xFFFFFFFFFFFFFFFBLL || v62 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(_QWORD *)this + v62);
          goto LABEL_270;
        case 0xFu:
          *(_QWORD *)(a1 + 188) |= 0x40uLL;
          v63 = *((_QWORD *)this + 1);
          v64 = *((_QWORD *)this + 2);
          v65 = *(_QWORD *)this;
          if (v63 <= 0xFFFFFFFFFFFFFFF5 && v63 + 10 <= v64)
          {
            v66 = 0;
            v67 = 0;
            v68 = 0;
            do
            {
              v69 = v63 + 1;
              *((_QWORD *)this + 1) = v63 + 1;
              v70 = *(_BYTE *)(v65 + v63);
              v68 |= (unint64_t)(v70 & 0x7F) << v66;
              if ((v70 & 0x80) == 0)
                goto LABEL_295;
              v66 += 7;
              v63 = v69;
              v14 = v67++ > 8;
            }
            while (!v14);
LABEL_215:
            v68 = 0;
            goto LABEL_295;
          }
          v164 = 0;
          v165 = 0;
          v68 = 0;
          if (v64 <= v63)
            v64 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v64 == v63)
            {
              v68 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v166 = v63 + 1;
              v167 = *(_BYTE *)(v65 + v63);
              *((_QWORD *)this + 1) = v166;
              v68 |= (unint64_t)(v167 & 0x7F) << v164;
              if (v167 < 0)
              {
                v164 += 7;
                v63 = v166;
                v14 = v165++ > 8;
                if (v14)
                  goto LABEL_215;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v68 = 0;
            }
            break;
          }
LABEL_295:
          *(_QWORD *)(a1 + 56) = v68;
          goto LABEL_271;
        case 0x10u:
          *(_QWORD *)(a1 + 188) |= 0x400000uLL;
          v71 = *((_QWORD *)this + 1);
          if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v71);
          goto LABEL_270;
        case 0x11u:
          *(_QWORD *)(a1 + 188) |= 0x40000000uLL;
          v72 = *((_QWORD *)this + 1);
          if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 164) = *(_DWORD *)(*(_QWORD *)this + v72);
          goto LABEL_270;
        case 0x12u:
          *(_QWORD *)(a1 + 188) |= 0x4000000uLL;
          v73 = *((_QWORD *)this + 1);
          if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(_QWORD *)this + v73);
          goto LABEL_270;
        case 0x13u:
          *(_QWORD *)(a1 + 188) |= 0x20uLL;
          v74 = *((_QWORD *)this + 1);
          v75 = *((_QWORD *)this + 2);
          v76 = *(_QWORD *)this;
          if (v74 <= 0xFFFFFFFFFFFFFFF5 && v74 + 10 <= v75)
          {
            v77 = 0;
            v78 = 0;
            v79 = 0;
            do
            {
              v80 = v74 + 1;
              *((_QWORD *)this + 1) = v74 + 1;
              v81 = *(_BYTE *)(v76 + v74);
              v79 |= (unint64_t)(v81 & 0x7F) << v77;
              if ((v81 & 0x80) == 0)
                goto LABEL_299;
              v77 += 7;
              v74 = v80;
              v14 = v78++ > 8;
            }
            while (!v14);
LABEL_222:
            v79 = 0;
            goto LABEL_299;
          }
          v168 = 0;
          v169 = 0;
          v79 = 0;
          if (v75 <= v74)
            v75 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v75 == v74)
            {
              v79 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v170 = v74 + 1;
              v171 = *(_BYTE *)(v76 + v74);
              *((_QWORD *)this + 1) = v170;
              v79 |= (unint64_t)(v171 & 0x7F) << v168;
              if (v171 < 0)
              {
                v168 += 7;
                v74 = v170;
                v14 = v169++ > 8;
                if (v14)
                  goto LABEL_222;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v79 = 0;
            }
            break;
          }
LABEL_299:
          *(_QWORD *)(a1 + 48) = v79;
          goto LABEL_271;
        case 0x14u:
          *(_QWORD *)(a1 + 188) |= 0x1000000uLL;
          v82 = *((_QWORD *)this + 1);
          if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v82);
          goto LABEL_270;
        case 0x15u:
          *(_QWORD *)(a1 + 188) |= 0x20000000uLL;
          v83 = *((_QWORD *)this + 1);
          if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 160) = *(_DWORD *)(*(_QWORD *)this + v83);
          goto LABEL_270;
        case 0x16u:
          *(_QWORD *)(a1 + 188) |= 0x10000000uLL;
          v84 = *((_QWORD *)this + 1);
          if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(_QWORD *)this + v84);
          goto LABEL_270;
        case 0x17u:
          *(_QWORD *)(a1 + 188) |= 0x80uLL;
          v85 = *((_QWORD *)this + 1);
          v86 = *((_QWORD *)this + 2);
          v87 = *(_QWORD *)this;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            v88 = 0;
            v89 = 0;
            v90 = 0;
            do
            {
              v91 = v85 + 1;
              *((_QWORD *)this + 1) = v85 + 1;
              v92 = *(_BYTE *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0)
                goto LABEL_303;
              v88 += 7;
              v85 = v91;
              v14 = v89++ > 8;
            }
            while (!v14);
LABEL_229:
            v90 = 0;
            goto LABEL_303;
          }
          v172 = 0;
          v173 = 0;
          v90 = 0;
          if (v86 <= v85)
            v86 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v86 == v85)
            {
              v90 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v174 = v85 + 1;
              v175 = *(_BYTE *)(v87 + v85);
              *((_QWORD *)this + 1) = v174;
              v90 |= (unint64_t)(v175 & 0x7F) << v172;
              if (v175 < 0)
              {
                v172 += 7;
                v85 = v174;
                v14 = v173++ > 8;
                if (v14)
                  goto LABEL_229;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v90 = 0;
            }
            break;
          }
LABEL_303:
          *(_QWORD *)(a1 + 64) = v90;
          goto LABEL_271;
        case 0x18u:
          *(_QWORD *)(a1 + 188) |= 0x800000uLL;
          v93 = *((_QWORD *)this + 1);
          if (v93 > 0xFFFFFFFFFFFFFFFBLL || v93 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v93);
          goto LABEL_270;
        case 0x19u:
          *(_QWORD *)(a1 + 188) |= 0x2000000uLL;
          v94 = *((_QWORD *)this + 1);
          if (v94 > 0xFFFFFFFFFFFFFFFBLL || v94 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v94);
          goto LABEL_270;
        case 0x1Au:
          *(_QWORD *)(a1 + 188) |= 0x400uLL;
          v95 = *((_QWORD *)this + 1);
          if (v95 > 0xFFFFFFFFFFFFFFFBLL || v95 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v95);
          goto LABEL_270;
        case 0x1Bu:
          *(_QWORD *)(a1 + 188) |= 0x1000uLL;
          v96 = *((_QWORD *)this + 1);
          v97 = *((_QWORD *)this + 2);
          v98 = *(_QWORD *)this;
          if (v96 <= 0xFFFFFFFFFFFFFFF5 && v96 + 10 <= v97)
          {
            v99 = 0;
            v100 = 0;
            v101 = 0;
            do
            {
              v102 = v96 + 1;
              *((_QWORD *)this + 1) = v96 + 1;
              v103 = *(_BYTE *)(v98 + v96);
              v101 |= (unint64_t)(v103 & 0x7F) << v99;
              if ((v103 & 0x80) == 0)
                goto LABEL_307;
              v99 += 7;
              v96 = v102;
              v14 = v100++ > 8;
            }
            while (!v14);
LABEL_236:
            LODWORD(v101) = 0;
            goto LABEL_307;
          }
          v176 = 0;
          v177 = 0;
          v101 = 0;
          if (v97 <= v96)
            v97 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v97 == v96)
            {
              LODWORD(v101) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v178 = v96 + 1;
              v179 = *(_BYTE *)(v98 + v96);
              *((_QWORD *)this + 1) = v178;
              v101 |= (unint64_t)(v179 & 0x7F) << v176;
              if (v179 < 0)
              {
                v176 += 7;
                v96 = v178;
                v14 = v177++ > 8;
                if (v14)
                  goto LABEL_236;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v101) = 0;
            }
            break;
          }
LABEL_307:
          *(_DWORD *)(a1 + 92) = v101;
          goto LABEL_271;
        case 0x1Cu:
          *(_QWORD *)(a1 + 188) |= 0x800uLL;
          v104 = *((_QWORD *)this + 1);
          v105 = *((_QWORD *)this + 2);
          v106 = *(_QWORD *)this;
          if (v104 <= 0xFFFFFFFFFFFFFFF5 && v104 + 10 <= v105)
          {
            v107 = 0;
            v108 = 0;
            v109 = 0;
            do
            {
              v110 = v104 + 1;
              *((_QWORD *)this + 1) = v104 + 1;
              v111 = *(_BYTE *)(v106 + v104);
              v109 |= (unint64_t)(v111 & 0x7F) << v107;
              if ((v111 & 0x80) == 0)
                goto LABEL_311;
              v107 += 7;
              v104 = v110;
              v14 = v108++ > 8;
            }
            while (!v14);
LABEL_243:
            LODWORD(v109) = 0;
            goto LABEL_311;
          }
          v180 = 0;
          v181 = 0;
          v109 = 0;
          if (v105 <= v104)
            v105 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v105 == v104)
            {
              LODWORD(v109) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v182 = v104 + 1;
              v183 = *(_BYTE *)(v106 + v104);
              *((_QWORD *)this + 1) = v182;
              v109 |= (unint64_t)(v183 & 0x7F) << v180;
              if (v183 < 0)
              {
                v180 += 7;
                v104 = v182;
                v14 = v181++ > 8;
                if (v14)
                  goto LABEL_243;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v109) = 0;
            }
            break;
          }
LABEL_311:
          *(_DWORD *)(a1 + 88) = v109;
          goto LABEL_271;
        case 0x1Du:
          *(_QWORD *)(a1 + 188) |= 2uLL;
          v112 = *((_QWORD *)this + 1);
          v113 = *((_QWORD *)this + 2);
          v114 = *(_QWORD *)this;
          if (v112 <= 0xFFFFFFFFFFFFFFF5 && v112 + 10 <= v113)
          {
            v115 = 0;
            v116 = 0;
            v117 = 0;
            do
            {
              v118 = v112 + 1;
              *((_QWORD *)this + 1) = v112 + 1;
              v119 = *(_BYTE *)(v114 + v112);
              v117 |= (unint64_t)(v119 & 0x7F) << v115;
              if ((v119 & 0x80) == 0)
                goto LABEL_315;
              v115 += 7;
              v112 = v118;
              v14 = v116++ > 8;
            }
            while (!v14);
LABEL_250:
            v117 = 0;
            goto LABEL_315;
          }
          v184 = 0;
          v185 = 0;
          v117 = 0;
          if (v113 <= v112)
            v113 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v113 == v112)
            {
              v117 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v186 = v112 + 1;
              v187 = *(_BYTE *)(v114 + v112);
              *((_QWORD *)this + 1) = v186;
              v117 |= (unint64_t)(v187 & 0x7F) << v184;
              if (v187 < 0)
              {
                v184 += 7;
                v112 = v186;
                v14 = v185++ > 8;
                if (v14)
                  goto LABEL_250;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v117 = 0;
            }
            break;
          }
LABEL_315:
          *(_QWORD *)(a1 + 16) = v117;
          goto LABEL_271;
        case 0x1Eu:
          *(_QWORD *)(a1 + 188) |= 1uLL;
          v120 = *((_QWORD *)this + 1);
          v121 = *((_QWORD *)this + 2);
          v122 = *(_QWORD *)this;
          if (v120 <= 0xFFFFFFFFFFFFFFF5 && v120 + 10 <= v121)
          {
            v123 = 0;
            v124 = 0;
            v125 = 0;
            do
            {
              v126 = v120 + 1;
              *((_QWORD *)this + 1) = v120 + 1;
              v127 = *(_BYTE *)(v122 + v120);
              v125 |= (unint64_t)(v127 & 0x7F) << v123;
              if ((v127 & 0x80) == 0)
                goto LABEL_319;
              v123 += 7;
              v120 = v126;
              v14 = v124++ > 8;
            }
            while (!v14);
LABEL_257:
            v125 = 0;
            goto LABEL_319;
          }
          v188 = 0;
          v189 = 0;
          v125 = 0;
          if (v121 <= v120)
            v121 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v121 == v120)
            {
              v125 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v190 = v120 + 1;
              v191 = *(_BYTE *)(v122 + v120);
              *((_QWORD *)this + 1) = v190;
              v125 |= (unint64_t)(v191 & 0x7F) << v188;
              if (v191 < 0)
              {
                v188 += 7;
                v120 = v190;
                v14 = v189++ > 8;
                if (v14)
                  goto LABEL_257;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v125 = 0;
            }
            break;
          }
LABEL_319:
          *(_QWORD *)(a1 + 8) = v125;
          goto LABEL_271;
        case 0x1Fu:
          *(_QWORD *)(a1 + 188) |= (unint64_t)&_mh_execute_header;
          v128 = *((_QWORD *)this + 1);
          if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 172) = *(_DWORD *)(*(_QWORD *)this + v128);
          goto LABEL_270;
        case 0x20u:
          *(_QWORD *)(a1 + 188) |= 0x400000000uLL;
          v129 = *((_QWORD *)this + 1);
          if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 180) = *(_DWORD *)(*(_QWORD *)this + v129);
          goto LABEL_270;
        case 0x21u:
          *(_QWORD *)(a1 + 188) |= 0x200000000uLL;
          v130 = *((_QWORD *)this + 1);
          if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(_QWORD *)this + v130);
          goto LABEL_270;
        case 0x22u:
          *(_QWORD *)(a1 + 188) |= 0x80000000uLL;
          v131 = *((_QWORD *)this + 1);
          if (v131 <= 0xFFFFFFFFFFFFFFFBLL && v131 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(_QWORD *)this + v131);
LABEL_270:
            *((_QWORD *)this + 1) += 4;
          }
          else
          {
LABEL_169:
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_271;
        case 0x23u:
          *(_QWORD *)(a1 + 188) |= 0x800000000uLL;
          v132 = *((_QWORD *)this + 1);
          if (v132 >= *((_QWORD *)this + 2))
          {
            v135 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v133 = v132 + 1;
            v134 = *(unsigned __int8 *)(*(_QWORD *)this + v132);
            *((_QWORD *)this + 1) = v133;
            v135 = v134 != 0;
          }
          *(_BYTE *)(a1 + 184) = v135;
          goto LABEL_271;
        case 0x24u:
          *(_QWORD *)(a1 + 188) |= 0x1000000000uLL;
          v136 = *((_QWORD *)this + 1);
          if (v136 >= *((_QWORD *)this + 2))
          {
            v139 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v137 = v136 + 1;
            v138 = *(unsigned __int8 *)(*(_QWORD *)this + v136);
            *((_QWORD *)this + 1) = v137;
            v139 = v138 != 0;
          }
          *(_BYTE *)(a1 + 185) = v139;
          goto LABEL_271;
        case 0x25u:
          *(_QWORD *)(a1 + 188) |= 0x200uLL;
          v140 = *((_QWORD *)this + 1);
          v141 = *((_QWORD *)this + 2);
          v142 = *(_QWORD *)this;
          if (v140 <= 0xFFFFFFFFFFFFFFF5 && v140 + 10 <= v141)
          {
            v143 = 0;
            v144 = 0;
            v145 = 0;
            do
            {
              v146 = v140 + 1;
              *((_QWORD *)this + 1) = v140 + 1;
              v147 = *(_BYTE *)(v142 + v140);
              v145 |= (unint64_t)(v147 & 0x7F) << v143;
              if ((v147 & 0x80) == 0)
                goto LABEL_323;
              v143 += 7;
              v140 = v146;
              v14 = v144++ > 8;
            }
            while (!v14);
LABEL_268:
            LODWORD(v145) = 0;
            goto LABEL_323;
          }
          v192 = 0;
          v193 = 0;
          v145 = 0;
          if (v141 <= v140)
            v141 = *((_QWORD *)this + 1);
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_271;
      }
      while (1)
      {
        if (v141 == v140)
        {
          LODWORD(v145) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_323;
        }
        v194 = v140 + 1;
        v195 = *(_BYTE *)(v142 + v140);
        *((_QWORD *)this + 1) = v194;
        v145 |= (unint64_t)(v195 & 0x7F) << v192;
        if ((v195 & 0x80) == 0)
          break;
        v192 += 7;
        v140 = v194;
        v14 = v193++ > 8;
        if (v14)
          goto LABEL_268;
      }
      if (*((_BYTE *)this + 24))
        LODWORD(v145) = 0;
LABEL_323:
      *(_DWORD *)(a1 + 80) = v145;
LABEL_271:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10160A3EC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  v4 = *(_QWORD *)(result + 188);
  if ((v4 & 0x100) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 72), 1u);
    v4 = *(_QWORD *)(v3 + 188);
    if ((v4 & 0x40000) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_41;
    }
  }
  else if ((v4 & 0x40000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 116), 2u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000) == 0)
      goto LABEL_5;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 32), 3u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x2000) == 0)
  {
LABEL_5:
    if ((v4 & 0x200000) == 0)
      goto LABEL_6;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 96), 4u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x200000) == 0)
  {
LABEL_6:
    if ((v4 & 0x20000) == 0)
      goto LABEL_7;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(float *)(v3 + 128), 5u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x20000) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0)
      goto LABEL_8;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(float *)(v3 + 112), 6u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 0x8000) == 0)
      goto LABEL_9;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 24), 7u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x8000) == 0)
  {
LABEL_9:
    if ((v4 & 0x100000) == 0)
      goto LABEL_10;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(float *)(v3 + 104), 8u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v4 & 0x80000) == 0)
      goto LABEL_11;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(float *)(v3 + 124), 9u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x80000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(float *)(v3 + 120), 0xAu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 0x4000) == 0)
      goto LABEL_13;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 40), 0xBu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x4000) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000) == 0)
      goto LABEL_14;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(float *)(v3 + 100), 0xCu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x10000) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_15;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(float *)(v3 + 108), 0xDu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40) == 0)
      goto LABEL_16;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(float *)(v3 + 152), 0xEu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x40) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000) == 0)
      goto LABEL_17;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 56), 0xFu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_18;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::write(this, *(float *)(v3 + 132), 0x10u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_19;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::write(this, *(float *)(v3 + 164), 0x11u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x20) == 0)
      goto LABEL_20;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::write(this, *(float *)(v3 + 148), 0x12u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x20) == 0)
  {
LABEL_20:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_21;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 48), 0x13u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_22;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::write(this, *(float *)(v3 + 140), 0x14u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_23;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(float *)(v3 + 160), 0x15u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::write(this, *(float *)(v3 + 156), 0x16u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x80) == 0)
  {
LABEL_24:
    if ((v4 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 64), 0x17u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x800000) == 0)
  {
LABEL_25:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_26;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::write(this, *(float *)(v3 + 136), 0x18u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x400) == 0)
      goto LABEL_27;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::write(this, *(float *)(v3 + 144), 0x19u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x400) == 0)
  {
LABEL_27:
    if ((v4 & 0x1000) == 0)
      goto LABEL_28;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::write(this, *(float *)(v3 + 84), 0x1Au);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x1000) == 0)
  {
LABEL_28:
    if ((v4 & 0x800) == 0)
      goto LABEL_29;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 92), 0x1Bu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x800) == 0)
  {
LABEL_29:
    if ((v4 & 2) == 0)
      goto LABEL_30;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 0x1Cu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 2) == 0)
  {
LABEL_30:
    if ((v4 & 1) == 0)
      goto LABEL_31;
    goto LABEL_68;
  }
LABEL_67:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 16), 0x1Du);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 1) == 0)
  {
LABEL_31:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_32;
    goto LABEL_69;
  }
LABEL_68:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 8), 0x1Eu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_33;
    goto LABEL_70;
  }
LABEL_69:
  result = PB::Writer::write(this, *(float *)(v3 + 172), 0x1Fu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_34;
    goto LABEL_71;
  }
LABEL_70:
  result = PB::Writer::write(this, *(float *)(v3 + 180), 0x20u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_34:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_72;
  }
LABEL_71:
  result = PB::Writer::write(this, *(float *)(v3 + 176), 0x21u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_36;
    goto LABEL_73;
  }
LABEL_72:
  result = PB::Writer::write(this, *(float *)(v3 + 168), 0x22u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_37;
    goto LABEL_74;
  }
LABEL_73:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 184), 0x23u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_37:
    if ((v4 & 0x200) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 0x25u);
  }
LABEL_74:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 185), 0x24u);
  if ((*(_QWORD *)(v3 + 188) & 0x200) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 0x25u);
  return result;
}

uint64_t sub_10160A81C(uint64_t result)
{
  *(_QWORD *)result = &off_1021C1CC0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_10160A834(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_10160A858(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  float result;

  *(_QWORD *)a1 = &off_1021C1CC0;
  *(_DWORD *)(a1 + 20) = 0;
  v2 = *(_BYTE *)(a2 + 20);
  if ((v2 & 2) != 0)
  {
    result = *(float *)(a2 + 12);
    v3 = 2;
    *(_BYTE *)(a1 + 20) = 2;
    *(float *)(a1 + 12) = result;
    v2 = *(_BYTE *)(a2 + 20);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
LABEL_5:
    result = *(float *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(a1 + 20) = v3;
    *(float *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 20);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    result = *(float *)(a2 + 16);
    *(_BYTE *)(a1 + 20) = v3 | 4;
    *(float *)(a1 + 16) = result;
  }
  return result;
}

uint64_t sub_10160A8C8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 20) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "elevationDeg", *(float *)(a1 + 12));
    if ((*(_BYTE *)(a1 + 20) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "azimuthDeg", *(float *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "l1Cn0", *(float *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10160A958(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 20) |= 4u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
          goto LABEL_32;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
      }
      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
          goto LABEL_32;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
      }
      else
      {
        if ((_DWORD)v20 != 1)
        {
          result = PB::Reader::skip(this, v20, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          goto LABEL_37;
        }
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
        {
LABEL_32:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_37;
        }
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(_QWORD *)this + v2);
      }
      v2 = *((_QWORD *)this + 1) + 4;
      *((_QWORD *)this + 1) = v2;
LABEL_37:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_10160AB70(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 12), 1u);
    v4 = *(_BYTE *)(v3 + 20);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return result;
      return PB::Writer::write(this, *(float *)(v3 + 16), 3u);
    }
  }
  else if ((*(_BYTE *)(result + 20) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 8), 2u);
  if ((*(_BYTE *)(v3 + 20) & 4) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 16), 3u);
  return result;
}

uint64_t sub_10160ABE8(uint64_t result)
{
  *(_QWORD *)result = &off_1021C1CF8;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_10160AC00(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10160AC24(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_1021C1CF8;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_10160AC74(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "sessionType", *(_DWORD *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10160ACDC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v25;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10160AF68(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  return result;
}

_QWORD *sub_10160AFC0(_QWORD *result)
{
  *result = &off_1021C1D30;
  result[1] = 0;
  return result;
}

void sub_10160AFD4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10160AFF8(uint64_t result, uint64_t a2)
{
  int v2;

  *(_QWORD *)result = &off_1021C1D30;
  *(_QWORD *)(result + 8) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_DWORD *)(result + 8) = v2;
  }
  return result;
}

uint64_t sub_10160B020(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10160B06C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)this + 1);
          else
            v2 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_42:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10160B2A0(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(result + 8), 1u);
  return result;
}

_QWORD *sub_10160B2C0(_QWORD *result)
{
  *result = &off_1021C1D68;
  result[2] = 0;
  return result;
}

void sub_10160B2D8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10160B2FC(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_1021C1D68;
  *(_QWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_10160B34C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10160B3B4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)this + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v27 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v28 = *(_QWORD *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_64;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)this + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v31) = 0;
LABEL_63:
          v3 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v3 = v27 + 1;
            *((_QWORD *)this + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v3;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_64:
        *(_DWORD *)(a1 + 16) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v21)
            {
              v25 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_60;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              v25 = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)this + 24))
            v25 = 0;
LABEL_59:
          v3 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v3 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v3;
            v14 = v24++ > 8;
            if (v14)
            {
              v25 = 0;
              break;
            }
          }
        }
LABEL_60:
        *(_QWORD *)(a1 + 8) = v25;
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10160B6DC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  return result;
}

uint64_t sub_10160B734(uint64_t result)
{
  *(_QWORD *)result = off_1021C1DA0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_10160B748(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C1DA0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_10160B788(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C1DA0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t sub_10160B7DC(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)result = off_1021C1DA0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    v2 = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(result + 24) = 1;
    *(_QWORD *)(result + 16) = v2;
  }
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_10160B898(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "motionState");
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10160B904(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
        operator new();
      if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v21 = *((_QWORD *)this + 1);
        v22 = *((_QWORD *)this + 2);
        v23 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          v30 = 0;
          v31 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v22 == v21)
            {
              v26 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }
            v32 = v21 + 1;
            v33 = *(_BYTE *)(v23 + v21);
            *((_QWORD *)this + 1) = v32;
            v26 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v21 = v32;
            v14 = v31++ > 8;
            if (v14)
            {
LABEL_39:
              v26 = 0;
              goto LABEL_43;
            }
          }
          if (*((_BYTE *)this + 24))
            v26 = 0;
        }
        else
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (1)
          {
            v27 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v28 = *(_BYTE *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0)
              break;
            v24 += 7;
            v21 = v27;
            v14 = v25++ > 8;
            if (v14)
              goto LABEL_39;
          }
        }
LABEL_43:
        *(_QWORD *)(a1 + 16) = v26;
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10160BBD0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = result;
  if ((*(_BYTE *)(result + 24) & 1) != 0)
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 16), 1u);
  v4 = *(const PB::Base **)(v3 + 8);
  if (v4)
    return PB::Writer::writeSubmessage(this, v4, 2u);
  return result;
}

void sub_10160BC28(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10160BC4C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10160BC98(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)this + 1);
          else
            v2 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_42:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10160BECC(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(result + 8), 1u);
  return result;
}

uint64_t sub_10160BEEC(uint64_t result)
{
  *(_QWORD *)result = &off_1021C1E10;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_10160BF04(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_10160BF28(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1021C1E10;
  *(_DWORD *)(a1 + 44) = 0;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 44) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 44) & 0x10) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(_BYTE *)(a1 + 44) = v3;
    *(_DWORD *)(a1 + 28) = v4;
    v2 = *(_BYTE *)(a2 + 44);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 44) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_BYTE *)(a1 + 44) = v3;
  *(_DWORD *)(a1 + 40) = v4;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_BYTE *)(a1 + 44) = v3;
  *(_DWORD *)(a1 + 24) = v4;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  LODWORD(v4) = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(a1 + 44) = v3;
  *(_DWORD *)(a1 + 20) = v4;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0)
      return *(float *)&v4;
    goto LABEL_18;
  }
LABEL_17:
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_BYTE *)(a1 + 44) = v3;
  *(_DWORD *)(a1 + 36) = v4;
  if ((*(_BYTE *)(a2 + 44) & 0x20) == 0)
    return *(float *)&v4;
LABEL_18:
  LODWORD(v4) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 44) = v3 | 0x20;
  *(_DWORD *)(a1 + 32) = v4;
  return *(float *)&v4;
}

uint64_t sub_10160C024(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "magnitudeRangeInertialVertical", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "maxAngleBetweenThighAndShinDeg", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "minAngleBetweenThighAndShinDeg", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "motionPlanarity", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "timeToReachMaxThighAndShinAngleThreshold", *(float *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
LABEL_16:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 44) & 0x80) == 0)
      return PB::TextFormatter::endObject(this);
LABEL_17:
    PB::TextFormatter::format(this, "vm", *(float *)(a1 + 40));
    return PB::TextFormatter::endObject(this);
  }
LABEL_15:
  PB::TextFormatter::format(this, "timeToReachMinThighAndShinAngleThreshold", *(float *)(a1 + 36));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) != 0)
    goto LABEL_16;
LABEL_8:
  if (v5 < 0)
    goto LABEL_17;
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10160C154(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 44) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_50;
        case 2u:
          *(_BYTE *)(a1 + 44) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_49;
        case 3u:
          *(_BYTE *)(a1 + 44) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_49;
        case 4u:
          *(_BYTE *)(a1 + 44) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_49;
        case 5u:
          *(_BYTE *)(a1 + 44) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_49;
        case 6u:
          *(_BYTE *)(a1 + 44) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_49;
        case 7u:
          *(_BYTE *)(a1 + 44) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_49;
        case 8u:
          *(_BYTE *)(a1 + 44) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
          {
LABEL_47:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_49:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_50:
            *((_QWORD *)this + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10160C498(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 44);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(result + 44) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 28), 2u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(float *)(v3 + 16), 3u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(float *)(v3 + 40), 4u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 24), 5u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(float *)(v3 + 20), 6u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 32), 8u);
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 36), 7u);
  if ((*(_BYTE *)(v3 + 44) & 0x20) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 32), 8u);
  return result;
}

uint64_t sub_10160C59C(uint64_t result)
{
  *(_QWORD *)result = &off_1021C1E48;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_10160C5B4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_10160C5D8(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1021C1E48;
  *(_DWORD *)(a1 + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 28) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 24) = v4;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    if ((*(_BYTE *)(a2 + 28) & 4) == 0)
      return *(float *)&v4;
  }
  else if ((v2 & 4) == 0)
  {
    return *(float *)&v4;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 28) = v3 | 4;
  *(_DWORD *)(a1 + 20) = v4;
  return *(float *)&v4;
}

uint64_t sub_10160C664(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "maxPosterior", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "minPosterior", *(float *)(a1 + 24));
      if ((*(_BYTE *)(a1 + 28) & 1) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "meanPosterior", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 1) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10160C714(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 28) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 28) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 28) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 28) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_37:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_38:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10160C978(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 20), 4u);
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 16), 3u);
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 20), 4u);
  return result;
}

uint64_t sub_10160CA0C(uint64_t result)
{
  *(_QWORD *)result = &off_1021C1E80;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_10160CA24(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_10160CA48(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1021C1E80;
  *(_DWORD *)(a1 + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 28) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 24) = v4;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    if ((*(_BYTE *)(a2 + 28) & 4) == 0)
      return *(float *)&v4;
  }
  else if ((v2 & 4) == 0)
  {
    return *(float *)&v4;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 28) = v3 | 4;
  *(_DWORD *)(a1 + 20) = v4;
  return *(float *)&v4;
}

uint64_t sub_10160CAD4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "maxPosterior", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "minPosterior", *(float *)(a1 + 24));
      if ((*(_BYTE *)(a1 + 28) & 1) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "meanPosterior", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 1) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10160CB84(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 28) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 28) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 28) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 28) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_37:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_38:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10160CDE8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 20), 4u);
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 16), 3u);
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 20), 4u);
  return result;
}

_QWORD *sub_10160CE7C(_QWORD *result)
{
  *result = &off_1021C1EB8;
  result[2] = 0;
  return result;
}

void sub_10160CE94(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10160CEB8(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_1021C1EB8;
  *(_QWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_10160CF08(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "transitionType", *(_DWORD *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10160CF70(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v25;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10160D1FC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  return result;
}

uint64_t sub_10160D254(uint64_t result)
{
  *(_QWORD *)result = off_1021C1EF0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_10160D270(void **a1)
{
  void **v2;

  *a1 = off_1021C1EF0;
  v2 = a1 + 2;
  sub_100724968(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_10160D2B8(void **a1)
{
  void **v2;

  *a1 = off_1021C1EF0;
  v2 = a1 + 2;
  sub_100724968(&v2);
  PB::Base::~Base((PB::Base *)a1);
  operator delete();
}

uint64_t sub_10160D314(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)result = off_1021C1EF0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 48) = 0;
  if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 24))
    sub_10160D3C0();
  v2 = *(_BYTE *)(a2 + 48);
  if ((v2 & 2) != 0)
  {
    v3 = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(result + 48) |= 2u;
    *(_QWORD *)(result + 40) = v3;
    v2 = *(_BYTE *)(a2 + 48);
  }
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 48) |= 1u;
    *(_QWORD *)(result + 8) = v4;
  }
  return result;
}

void sub_10160D3C0()
{
  operator new();
}

void sub_10160D4F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10160D514(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 8));
  v5 = *(uint64_t **)(a1 + 16);
  v6 = *(uint64_t **)(a1 + 24);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "joint");
  }
  if ((*(_BYTE *)(a1 + 48) & 2) != 0)
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10160D5C0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        break;
      if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 48) |= 2u;
        v22 = *((_QWORD *)this + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
          goto LABEL_30;
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v22);
LABEL_34:
        *((_QWORD *)this + 1) += 8;
        goto LABEL_35;
      }
      if ((_DWORD)v20 == 1)
        sub_10160D800();
      result = PB::Reader::skip(this, v20, v11 & 7, 0);
      if (!(_DWORD)result)
        return result;
LABEL_35:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    *(_BYTE *)(a1 + 48) |= 1u;
    v21 = *((_QWORD *)this + 1);
    if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)this + 2))
    {
LABEL_30:
      *((_BYTE *)this + 24) = 1;
      goto LABEL_35;
    }
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v21);
    goto LABEL_34;
  }
  return v4 == 0;
}

void sub_10160D800()
{
  operator new();
}

void sub_10160D940(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10160D95C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;
  char v7;

  v3 = result;
  v4 = *(const PB::Base ***)(result + 16);
  v5 = *(const PB::Base ***)(result + 24);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::writeSubmessage(this, v6, 1u);
  }
  v7 = *(_BYTE *)(v3 + 48);
  if ((v7 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 40), 2u);
    v7 = *(_BYTE *)(v3 + 48);
  }
  if ((v7 & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  return result;
}

void sub_10160D9E0(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_1021C1F28;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_10160DA20(PB::Base *a1)
{
  sub_10160D9E0(a1);
  operator delete();
}

uint64_t sub_10160DA44(uint64_t a1, uint64_t a2)
{
  char *v4;
  int v5;
  char v6;
  int v7;
  char v8;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (char *)(a1 + 8);
  *(_QWORD *)a1 = &off_1021C1F28;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
    v5 = *(_DWORD *)(a2 + 36);
    *(_BYTE *)(a1 + 44) = 2;
    *(_DWORD *)(a1 + 36) = v5;
  }
  if (a1 != a2)
    sub_1002A3054(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  v6 = *(_BYTE *)(a2 + 44);
  if ((v6 & 1) != 0)
  {
    v7 = *(_DWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 44) |= 1u;
    *(_DWORD *)(a1 + 32) = v7;
    v6 = *(_BYTE *)(a2 + 44);
  }
  if ((v6 & 4) != 0)
  {
    v8 = *(_BYTE *)(a2 + 40);
    *(_BYTE *)(a1 + 44) |= 4u;
    *(_BYTE *)(a1 + 40) = v8;
  }
  return a1;
}

uint64_t sub_10160DAF0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  float *v6;
  float *v7;
  float v8;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "confidence", *(float *)(a1 + 32));
    v5 = *(_BYTE *)(a1 + 44);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "joint", *(_DWORD *)(a1 + 36));
  v6 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "position", v8);
  }
  if ((*(_BYTE *)(a1 + 44) & 4) != 0)
    PB::TextFormatter::format(this, "visible", *(_BYTE *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_10160DBB0(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  _DWORD *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  BOOL v51;
  char v52;
  unsigned int v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  char *v57;
  _DWORD *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  int v66;
  unint64_t v67;
  _BYTE v70[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v4 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 44) |= 2u;
          v25 = *((_QWORD *)this + 1);
          v26 = *((_QWORD *)this + 2);
          v27 = *(_QWORD *)this;
          if (v25 <= 0xFFFFFFFFFFFFFFF5 && v25 + 10 <= v26)
          {
            v28 = 0;
            v29 = 0;
            v30 = 0;
            do
            {
              v31 = v25 + 1;
              *((_QWORD *)this + 1) = v25 + 1;
              v32 = *(_BYTE *)(v27 + v25);
              v30 |= (unint64_t)(v32 & 0x7F) << v28;
              if ((v32 & 0x80) == 0)
                goto LABEL_83;
              v28 += 7;
              v25 = v31;
              v18 = v29++ > 8;
            }
            while (!v18);
LABEL_67:
            LODWORD(v30) = 0;
            goto LABEL_83;
          }
          v52 = 0;
          v53 = 0;
          v30 = 0;
          if (v26 <= v25)
            v26 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v26 == v25)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v54 = v25 + 1;
              v55 = *(_BYTE *)(v27 + v25);
              *((_QWORD *)this + 1) = v54;
              v30 |= (unint64_t)(v55 & 0x7F) << v52;
              if (v55 < 0)
              {
                v52 += 7;
                v25 = v54;
                v18 = v53++ > 8;
                if (v18)
                  goto LABEL_67;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v30) = 0;
            }
            break;
          }
LABEL_83:
          *(_DWORD *)(a1 + 36) = v30;
          goto LABEL_97;
        case 2u:
          if ((_DWORD)v24 == 2)
          {
            if ((PB::Reader::placeMark(this, v70, v24, a4) & 1) != 0)
              return 0;
            v33 = *((_QWORD *)this + 1);
            v34 = *((_QWORD *)this + 2);
            while (v33 < v34 && !*((_BYTE *)this + 24))
            {
              v36 = *(char **)(a1 + 16);
              v35 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v36 >= v35)
              {
                v38 = (char *)*v10;
                v39 = (v36 - (_BYTE *)*v10) >> 2;
                v40 = v39 + 1;
                if ((unint64_t)(v39 + 1) >> 62)
                  goto LABEL_107;
                v41 = v35 - (_QWORD)v38;
                if (v41 >> 1 > v40)
                  v40 = v41 >> 1;
                if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
                  v42 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v42 = v40;
                if (v42)
                {
                  v43 = (char *)sub_100260634(v11, v42);
                  v38 = *(char **)(a1 + 8);
                  v36 = *(char **)(a1 + 16);
                }
                else
                {
                  v43 = 0;
                }
                v44 = &v43[4 * v39];
                *(_DWORD *)v44 = 0;
                v37 = v44 + 4;
                while (v36 != v38)
                {
                  v45 = *((_DWORD *)v36 - 1);
                  v36 -= 4;
                  *((_DWORD *)v44 - 1) = v45;
                  v44 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v44;
                *(_QWORD *)(a1 + 16) = v37;
                *(_QWORD *)(a1 + 24) = &v43[4 * v42];
                if (v38)
                  operator delete(v38);
              }
              else
              {
                *(_DWORD *)v36 = 0;
                v37 = v36 + 4;
              }
              *(_QWORD *)(a1 + 16) = v37;
              v46 = *((_QWORD *)this + 1);
              if (v46 > 0xFFFFFFFFFFFFFFFBLL || v46 + 4 > *((_QWORD *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v37 - 1) = *(_DWORD *)(*(_QWORD *)this + v46);
              v34 = *((_QWORD *)this + 2);
              v33 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v33;
            }
            PB::Reader::recallMark(this, v70);
          }
          else
          {
            v57 = *(char **)(a1 + 16);
            v56 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v57 >= v56)
            {
              v59 = (char *)*v10;
              v60 = (v57 - (_BYTE *)*v10) >> 2;
              v61 = v60 + 1;
              if ((unint64_t)(v60 + 1) >> 62)
LABEL_107:
                sub_100259694();
              v62 = v56 - (_QWORD)v59;
              if (v62 >> 1 > v61)
                v61 = v62 >> 1;
              if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
                v63 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v63 = v61;
              if (v63)
              {
                v64 = (char *)sub_100260634(v11, v63);
                v59 = *(char **)(a1 + 8);
                v57 = *(char **)(a1 + 16);
              }
              else
              {
                v64 = 0;
              }
              v65 = &v64[4 * v60];
              *(_DWORD *)v65 = 0;
              v58 = v65 + 4;
              while (v57 != v59)
              {
                v66 = *((_DWORD *)v57 - 1);
                v57 -= 4;
                *((_DWORD *)v65 - 1) = v66;
                v65 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v65;
              *(_QWORD *)(a1 + 16) = v58;
              *(_QWORD *)(a1 + 24) = &v64[4 * v63];
              if (v59)
                operator delete(v59);
            }
            else
            {
              *(_DWORD *)v57 = 0;
              v58 = v57 + 4;
            }
            *(_QWORD *)(a1 + 16) = v58;
            v67 = *((_QWORD *)this + 1);
            if (v67 <= 0xFFFFFFFFFFFFFFFBLL && v67 + 4 <= *((_QWORD *)this + 2))
            {
              *(v58 - 1) = *(_DWORD *)(*(_QWORD *)this + v67);
LABEL_96:
              *((_QWORD *)this + 1) += 4;
            }
            else
            {
LABEL_94:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_97:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0)
            return v6 == 0;
          break;
        case 3u:
          *(_BYTE *)(a1 + 44) |= 1u;
          v47 = *((_QWORD *)this + 1);
          if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((_QWORD *)this + 2))
            goto LABEL_94;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v47);
          goto LABEL_96;
        case 4u:
          *(_BYTE *)(a1 + 44) |= 4u;
          v48 = *((_QWORD *)this + 1);
          if (v48 >= *((_QWORD *)this + 2))
          {
            v51 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v49 = v48 + 1;
            v50 = *(unsigned __int8 *)(*(_QWORD *)this + v48);
            *((_QWORD *)this + 1) = v49;
            v51 = v50 != 0;
          }
          *(_BYTE *)(a1 + 40) = v51;
          goto LABEL_97;
        default:
          if ((PB::Reader::skip(this, v15 >> 3, v15 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_97;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v21 = v4 + 1;
      v22 = *(_BYTE *)(v12 + v4);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v4 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_10160E0A4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  char v7;

  v3 = result;
  if ((*(_BYTE *)(result + 44) & 2) != 0)
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 36), 1u);
  v4 = *(float **)(v3 + 8);
  v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6, 2u);
  }
  v7 = *(_BYTE *)(v3 + 44);
  if ((v7 & 1) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 32), 3u);
    v7 = *(_BYTE *)(v3 + 44);
  }
  if ((v7 & 4) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 40), 4u);
  return result;
}

_QWORD *sub_10160E140(_QWORD *result)
{
  *result = off_1021C1F60;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_10160E154(void **a1)
{
  void **v2;

  *a1 = off_1021C1F60;
  v2 = a1 + 1;
  sub_100724968(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_10160E19C(void **a1)
{
  void **v2;

  *a1 = off_1021C1F60;
  v2 = a1 + 1;
  sub_100724968(&v2);
  PB::Base::~Base((PB::Base *)a1);
  operator delete();
}

_QWORD *sub_10160E1F8(_QWORD *result, uint64_t a2)
{
  result[1] = 0;
  *result = off_1021C1F60;
  result[2] = 0;
  result[3] = 0;
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)(a2 + 16))
    sub_10160E25C();
  return result;
}

void sub_10160E25C()
{
  operator new();
}

void sub_10160E390(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10160E3B0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(uint64_t **)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "joint");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10160E41C(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        sub_10160E5BC();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

void sub_10160E5BC()
{
  operator new();
}

void sub_10160E704(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10160E720(uint64_t result, PB::Writer *this)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; result = PB::Writer::writeSubmessage(this, v5, 1u))
    v5 = *v2++;
  return result;
}

uint64_t sub_10160E768(uint64_t result)
{
  *(_QWORD *)result = off_1021C1F98;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_10160E784(void **a1)
{
  void **v2;

  *a1 = off_1021C1F98;
  v2 = a1 + 2;
  sub_100724968(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_10160E7CC(void **a1)
{
  void **v2;

  *a1 = off_1021C1F98;
  v2 = a1 + 2;
  sub_100724968(&v2);
  PB::Base::~Base((PB::Base *)a1);
  operator delete();
}

uint64_t sub_10160E828(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)result = off_1021C1F98;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 48) = 0;
  if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 24))
    sub_10160E8D4();
  v2 = *(_BYTE *)(a2 + 48);
  if ((v2 & 2) != 0)
  {
    v3 = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(result + 48) |= 2u;
    *(_QWORD *)(result + 40) = v3;
    v2 = *(_BYTE *)(a2 + 48);
  }
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 48) |= 1u;
    *(_QWORD *)(result + 8) = v4;
  }
  return result;
}

void sub_10160E8D4()
{
  operator new();
}

void sub_10160EA08(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10160EA28(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 8));
  v5 = *(uint64_t **)(a1 + 16);
  v6 = *(uint64_t **)(a1 + 24);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "joint");
  }
  if ((*(_BYTE *)(a1 + 48) & 2) != 0)
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10160EAD4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        break;
      if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 48) |= 2u;
        v22 = *((_QWORD *)this + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
          goto LABEL_30;
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v22);
LABEL_34:
        *((_QWORD *)this + 1) += 8;
        goto LABEL_35;
      }
      if ((_DWORD)v20 == 1)
        sub_10160ED14();
      result = PB::Reader::skip(this, v20, v11 & 7, 0);
      if (!(_DWORD)result)
        return result;
LABEL_35:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    *(_BYTE *)(a1 + 48) |= 1u;
    v21 = *((_QWORD *)this + 1);
    if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)this + 2))
    {
LABEL_30:
      *((_BYTE *)this + 24) = 1;
      goto LABEL_35;
    }
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v21);
    goto LABEL_34;
  }
  return v4 == 0;
}

void sub_10160ED14()
{
  operator new();
}

void sub_10160EE54(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10160EE70(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;
  char v7;

  v3 = result;
  v4 = *(const PB::Base ***)(result + 16);
  v5 = *(const PB::Base ***)(result + 24);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::writeSubmessage(this, v6, 1u);
  }
  v7 = *(_BYTE *)(v3 + 48);
  if ((v7 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 40), 2u);
    v7 = *(_BYTE *)(v3 + 48);
  }
  if ((v7 & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  return result;
}

void sub_10160EEF4(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_1021C1FD0;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_10160EF34(PB::Base *a1)
{
  sub_10160EEF4(a1);
  operator delete();
}

uint64_t sub_10160EF58(uint64_t a1, uint64_t a2)
{
  char *v3;
  int v4;

  *(_QWORD *)a1 = &off_1021C1FD0;
  *(_OWORD *)(a1 + 8) = 0u;
  v3 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  if ((*(_BYTE *)(a2 + 36) & 1) != 0)
  {
    v4 = *(_DWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 36) = 1;
    *(_DWORD *)(a1 + 32) = v4;
  }
  if (a1 != a2)
    sub_1002A3054(v3, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  return a1;
}

uint64_t sub_10160EFC8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
    PB::TextFormatter::format(this, "joint", *(_DWORD *)(a1 + 32));
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "position", v7);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_10160F048(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  _DWORD *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  int v46;
  unint64_t v47;
  char v48;
  unsigned int v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  char *v53;
  _DWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  int v62;
  unint64_t v63;
  _BYTE v66[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v4 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      v25 = v15 >> 3;
      if ((v15 >> 3) == 2)
      {
        if ((_DWORD)v24 == 2)
        {
          if ((PB::Reader::placeMark(this, v66, v24, a4) & 1) != 0)
            return 0;
          v34 = *((_QWORD *)this + 1);
          v35 = *((_QWORD *)this + 2);
          while (v34 < v35 && !*((_BYTE *)this + 24))
          {
            v37 = *(char **)(a1 + 16);
            v36 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v37 >= v36)
            {
              v39 = (char *)*v10;
              v40 = (v37 - (_BYTE *)*v10) >> 2;
              v41 = v40 + 1;
              if ((unint64_t)(v40 + 1) >> 62)
                goto LABEL_100;
              v42 = v36 - (_QWORD)v39;
              if (v42 >> 1 > v41)
                v41 = v42 >> 1;
              if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
                v43 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v43 = v41;
              if (v43)
              {
                v44 = (char *)sub_100260634(v11, v43);
                v39 = *(char **)(a1 + 8);
                v37 = *(char **)(a1 + 16);
              }
              else
              {
                v44 = 0;
              }
              v45 = &v44[4 * v40];
              *(_DWORD *)v45 = 0;
              v38 = v45 + 4;
              while (v37 != v39)
              {
                v46 = *((_DWORD *)v37 - 1);
                v37 -= 4;
                *((_DWORD *)v45 - 1) = v46;
                v45 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v45;
              *(_QWORD *)(a1 + 16) = v38;
              *(_QWORD *)(a1 + 24) = &v44[4 * v43];
              if (v39)
                operator delete(v39);
            }
            else
            {
              *(_DWORD *)v37 = 0;
              v38 = v37 + 4;
            }
            *(_QWORD *)(a1 + 16) = v38;
            v47 = *((_QWORD *)this + 1);
            if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((_QWORD *)this + 2))
            {
              *((_BYTE *)this + 24) = 1;
              break;
            }
            *(v38 - 1) = *(_DWORD *)(*(_QWORD *)this + v47);
            v35 = *((_QWORD *)this + 2);
            v34 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v34;
          }
          PB::Reader::recallMark(this, v66);
        }
        else
        {
          v53 = *(char **)(a1 + 16);
          v52 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v53 >= v52)
          {
            v55 = (char *)*v10;
            v56 = (v53 - (_BYTE *)*v10) >> 2;
            v57 = v56 + 1;
            if ((unint64_t)(v56 + 1) >> 62)
LABEL_100:
              sub_100259694();
            v58 = v52 - (_QWORD)v55;
            if (v58 >> 1 > v57)
              v57 = v58 >> 1;
            if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
              v59 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v59 = v57;
            if (v59)
            {
              v60 = (char *)sub_100260634(v11, v59);
              v55 = *(char **)(a1 + 8);
              v53 = *(char **)(a1 + 16);
            }
            else
            {
              v60 = 0;
            }
            v61 = &v60[4 * v56];
            *(_DWORD *)v61 = 0;
            v54 = v61 + 4;
            while (v53 != v55)
            {
              v62 = *((_DWORD *)v53 - 1);
              v53 -= 4;
              *((_DWORD *)v61 - 1) = v62;
              v61 -= 4;
            }
            *(_QWORD *)(a1 + 8) = v61;
            *(_QWORD *)(a1 + 16) = v54;
            *(_QWORD *)(a1 + 24) = &v60[4 * v59];
            if (v55)
              operator delete(v55);
          }
          else
          {
            *(_DWORD *)v53 = 0;
            v54 = v53 + 4;
          }
          *(_QWORD *)(a1 + 16) = v54;
          v63 = *((_QWORD *)this + 1);
          if (v63 <= 0xFFFFFFFFFFFFFFFBLL && v63 + 4 <= *((_QWORD *)this + 2))
          {
            *(v54 - 1) = *(_DWORD *)(*(_QWORD *)this + v63);
            *((_QWORD *)this + 1) += 4;
          }
          else
          {
            *((_BYTE *)this + 24) = 1;
          }
        }
      }
      else if ((_DWORD)v25 == 1)
      {
        *(_BYTE *)(a1 + 36) |= 1u;
        v26 = *((_QWORD *)this + 1);
        v27 = *((_QWORD *)this + 2);
        v28 = *(_QWORD *)this;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v27)
        {
          v48 = 0;
          v49 = 0;
          v31 = 0;
          if (v27 <= v26)
            v27 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v27 == v26)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_77;
            }
            v50 = v26 + 1;
            v51 = *(_BYTE *)(v28 + v26);
            *((_QWORD *)this + 1) = v50;
            v31 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0)
              break;
            v48 += 7;
            v26 = v50;
            v18 = v49++ > 8;
            if (v18)
            {
LABEL_63:
              LODWORD(v31) = 0;
              goto LABEL_77;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v31) = 0;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v32 = v26 + 1;
            *((_QWORD *)this + 1) = v26 + 1;
            v33 = *(_BYTE *)(v28 + v26);
            v31 |= (unint64_t)(v33 & 0x7F) << v29;
            if ((v33 & 0x80) == 0)
              break;
            v29 += 7;
            v26 = v32;
            v18 = v30++ > 8;
            if (v18)
              goto LABEL_63;
          }
        }
LABEL_77:
        *(_DWORD *)(a1 + 32) = v31;
      }
      else if ((PB::Reader::skip(this, v25, v15 & 7, 0) & 1) == 0)
      {
        return 0;
      }
      v4 = *((_QWORD *)this + 1);
      v5 = *((_QWORD *)this + 2);
      v6 = *((unsigned __int8 *)this + 24);
      if (v4 >= v5 || v6 != 0)
        return v6 == 0;
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v21 = v4 + 1;
      v22 = *(_BYTE *)(v12 + v4);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v4 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_10160F4A4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;

  v3 = result;
  if ((*(_BYTE *)(result + 36) & 1) != 0)
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 32), 1u);
  v5 = *(float **)(v3 + 8);
  v4 = *(float **)(v3 + 16);
  while (v5 != v4)
  {
    v6 = *v5++;
    result = PB::Writer::write(this, v6, 2u);
  }
  return result;
}

uint64_t sub_10160F504(uint64_t result)
{
  *(_QWORD *)result = off_1021C2008;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_10160F520(void **a1)
{
  void **v2;

  *a1 = off_1021C2008;
  v2 = a1 + 2;
  sub_100724968(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_10160F568(void **a1)
{
  void **v2;

  *a1 = off_1021C2008;
  v2 = a1 + 2;
  sub_100724968(&v2);
  PB::Base::~Base((PB::Base *)a1);
  operator delete();
}

uint64_t sub_10160F5C4(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)result = off_1021C2008;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 48) = 0;
  if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 24))
    sub_10160E25C();
  v2 = *(_BYTE *)(a2 + 48);
  if ((v2 & 2) != 0)
  {
    v3 = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(result + 48) |= 2u;
    *(_QWORD *)(result + 40) = v3;
    v2 = *(_BYTE *)(a2 + 48);
  }
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 48) |= 1u;
    *(_QWORD *)(result + 8) = v4;
  }
  return result;
}

uint64_t sub_10160F674(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 8));
  v5 = *(uint64_t **)(a1 + 16);
  v6 = *(uint64_t **)(a1 + 24);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "joint");
  }
  if ((*(_BYTE *)(a1 + 48) & 2) != 0)
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10160F720(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        break;
      if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 48) |= 2u;
        v22 = *((_QWORD *)this + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
          goto LABEL_30;
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v22);
LABEL_34:
        *((_QWORD *)this + 1) += 8;
        goto LABEL_35;
      }
      if ((_DWORD)v20 == 1)
        sub_10160E5BC();
      result = PB::Reader::skip(this, v20, v11 & 7, 0);
      if (!(_DWORD)result)
        return result;
LABEL_35:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    *(_BYTE *)(a1 + 48) |= 1u;
    v21 = *((_QWORD *)this + 1);
    if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)this + 2))
    {
LABEL_30:
      *((_BYTE *)this + 24) = 1;
      goto LABEL_35;
    }
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v21);
    goto LABEL_34;
  }
  return v4 == 0;
}

uint64_t sub_10160F960(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;
  char v7;

  v3 = result;
  v4 = *(const PB::Base ***)(result + 16);
  v5 = *(const PB::Base ***)(result + 24);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::writeSubmessage(this, v6, 1u);
  }
  v7 = *(_BYTE *)(v3 + 48);
  if ((v7 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 40), 2u);
    v7 = *(_BYTE *)(v3 + 48);
  }
  if ((v7 & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  return result;
}

void sub_10160F9E4(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1021C2040;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_10160FA34(PB::Base *a1)
{
  sub_10160F9E4(a1);
  operator delete();
}

uint64_t sub_10160FA58(uint64_t a1, uint64_t a2)
{
  char *v4;
  int v5;

  *(_QWORD *)a1 = &off_1021C2040;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  if ((*(_BYTE *)(a2 + 60) & 1) != 0)
  {
    v5 = *(_DWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 60) = 1;
    *(_DWORD *)(a1 + 56) = v5;
  }
  if (a1 != a2)
  {
    sub_1002A3054(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
    sub_1002A3054((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  }
  return a1;
}

uint64_t sub_10160FAE4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 60) & 1) != 0)
    PB::TextFormatter::format(this, "joint", *(_DWORD *)(a1 + 56));
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "position", v7);
  }
  v8 = *(float **)(a1 + 32);
  v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "quaternion", v10);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_10160FB98(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  BOOL v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  _DWORD *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  _DWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  int v62;
  unint64_t v63;
  char v64;
  unsigned int v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  char *v69;
  _DWORD *v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  int v86;
  char *v87;
  int v88;
  unint64_t v89;
  _BYTE v92[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 32);
    v11 = a1 + 48;
    v12 = (void **)(a1 + 8);
    v13 = a1 + 24;
    while (1)
    {
      v14 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
      {
        v21 = 0;
        v22 = 0;
        v17 = 0;
        if (v4 > v5)
          v5 = v4;
        while (v5 != v4)
        {
          v23 = v4 + 1;
          v24 = *(_BYTE *)(v14 + v4);
          *((_QWORD *)this + 1) = v23;
          v17 |= (unint64_t)(v24 & 0x7F) << v21;
          if ((v24 & 0x80) == 0)
            goto LABEL_21;
          v21 += 7;
          v4 = v23;
          if (v22++ >= 9)
          {
LABEL_20:
            v17 = 0;
            goto LABEL_21;
          }
        }
        v6 = 1;
        *((_BYTE *)this + 24) = 1;
        return v6 == 0;
      }
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v4 = v18;
        v20 = v16++ > 8;
        if (v20)
          goto LABEL_20;
      }
LABEL_21:
      v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      v27 = v17 >> 3;
      if ((v17 >> 3) == 3)
        break;
      if ((_DWORD)v27 == 2)
      {
        if ((_DWORD)v26 != 2)
        {
          v72 = *(char **)(a1 + 16);
          v71 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v72 >= v71)
          {
            v79 = (char *)*v12;
            v80 = (v72 - (_BYTE *)*v12) >> 2;
            v81 = v80 + 1;
            if ((unint64_t)(v80 + 1) >> 62)
LABEL_144:
              sub_100259694();
            v82 = v71 - (_QWORD)v79;
            if (v82 >> 1 > v81)
              v81 = v82 >> 1;
            if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL)
              v83 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v83 = v81;
            if (v83)
            {
              v84 = (char *)sub_100260634(v13, v83);
              v79 = *(char **)(a1 + 8);
              v72 = *(char **)(a1 + 16);
            }
            else
            {
              v84 = 0;
            }
            v87 = &v84[4 * v80];
            *(_DWORD *)v87 = 0;
            v70 = v87 + 4;
            while (v72 != v79)
            {
              v88 = *((_DWORD *)v72 - 1);
              v72 -= 4;
              *((_DWORD *)v87 - 1) = v88;
              v87 -= 4;
            }
            *(_QWORD *)(a1 + 8) = v87;
            *(_QWORD *)(a1 + 16) = v70;
            *(_QWORD *)(a1 + 24) = &v84[4 * v83];
            if (v79)
              operator delete(v79);
          }
          else
          {
            *(_DWORD *)v72 = 0;
            v70 = v72 + 4;
          }
          *(_QWORD *)(a1 + 16) = v70;
LABEL_129:
          v89 = *((_QWORD *)this + 1);
          if (v89 <= 0xFFFFFFFFFFFFFFFBLL && v89 + 4 <= *((_QWORD *)this + 2))
          {
            *(v70 - 1) = *(_DWORD *)(*(_QWORD *)this + v89);
            *((_QWORD *)this + 1) += 4;
          }
          else
          {
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_133;
        }
        if ((PB::Reader::placeMark(this, v92, v26, a4) & 1) != 0)
          return 0;
        v50 = *((_QWORD *)this + 1);
        v51 = *((_QWORD *)this + 2);
        while (v50 < v51 && !*((_BYTE *)this + 24))
        {
          v53 = *(char **)(a1 + 16);
          v52 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v53 >= v52)
          {
            v55 = (char *)*v12;
            v56 = (v53 - (_BYTE *)*v12) >> 2;
            v57 = v56 + 1;
            if ((unint64_t)(v56 + 1) >> 62)
              goto LABEL_144;
            v58 = v52 - (_QWORD)v55;
            if (v58 >> 1 > v57)
              v57 = v58 >> 1;
            if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
              v59 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v59 = v57;
            if (v59)
            {
              v60 = (char *)sub_100260634(v13, v59);
              v55 = *(char **)(a1 + 8);
              v53 = *(char **)(a1 + 16);
            }
            else
            {
              v60 = 0;
            }
            v61 = &v60[4 * v56];
            *(_DWORD *)v61 = 0;
            v54 = v61 + 4;
            while (v53 != v55)
            {
              v62 = *((_DWORD *)v53 - 1);
              v53 -= 4;
              *((_DWORD *)v61 - 1) = v62;
              v61 -= 4;
            }
            *(_QWORD *)(a1 + 8) = v61;
            *(_QWORD *)(a1 + 16) = v54;
            *(_QWORD *)(a1 + 24) = &v60[4 * v59];
            if (v55)
              operator delete(v55);
          }
          else
          {
            *(_DWORD *)v53 = 0;
            v54 = v53 + 4;
          }
          *(_QWORD *)(a1 + 16) = v54;
          v63 = *((_QWORD *)this + 1);
          if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(v54 - 1) = *(_DWORD *)(*(_QWORD *)this + v63);
          v51 = *((_QWORD *)this + 2);
          v50 = *((_QWORD *)this + 1) + 4;
          *((_QWORD *)this + 1) = v50;
        }
LABEL_94:
        PB::Reader::recallMark(this, v92);
        goto LABEL_133;
      }
      if ((_DWORD)v27 == 1)
      {
        *(_BYTE *)(a1 + 60) |= 1u;
        v28 = *((_QWORD *)this + 1);
        v29 = *((_QWORD *)this + 2);
        v30 = *(_QWORD *)this;
        if (v28 > 0xFFFFFFFFFFFFFFF5 || v28 + 10 > v29)
        {
          v64 = 0;
          v65 = 0;
          v33 = 0;
          if (v29 <= v28)
            v29 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v29 == v28)
            {
              LODWORD(v33) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_114;
            }
            v66 = v28 + 1;
            v67 = *(_BYTE *)(v30 + v28);
            *((_QWORD *)this + 1) = v66;
            v33 |= (unint64_t)(v67 & 0x7F) << v64;
            if ((v67 & 0x80) == 0)
              break;
            v64 += 7;
            v28 = v66;
            v20 = v65++ > 8;
            if (v20)
            {
LABEL_88:
              LODWORD(v33) = 0;
              goto LABEL_114;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v33) = 0;
        }
        else
        {
          v31 = 0;
          v32 = 0;
          v33 = 0;
          while (1)
          {
            v34 = v28 + 1;
            *((_QWORD *)this + 1) = v28 + 1;
            v35 = *(_BYTE *)(v30 + v28);
            v33 |= (unint64_t)(v35 & 0x7F) << v31;
            if ((v35 & 0x80) == 0)
              break;
            v31 += 7;
            v28 = v34;
            v20 = v32++ > 8;
            if (v20)
              goto LABEL_88;
          }
        }
LABEL_114:
        *(_DWORD *)(a1 + 56) = v33;
      }
      else if ((PB::Reader::skip(this, v27, v17 & 7, 0) & 1) == 0)
      {
        return 0;
      }
LABEL_133:
      v4 = *((_QWORD *)this + 1);
      v5 = *((_QWORD *)this + 2);
      v6 = *((unsigned __int8 *)this + 24);
      if (v4 >= v5 || v6 != 0)
        return v6 == 0;
    }
    if ((_DWORD)v26 != 2)
    {
      v69 = *(char **)(a1 + 40);
      v68 = *(_QWORD *)(a1 + 48);
      if ((unint64_t)v69 >= v68)
      {
        v73 = (char *)*v10;
        v74 = (v69 - (_BYTE *)*v10) >> 2;
        v75 = v74 + 1;
        if ((unint64_t)(v74 + 1) >> 62)
LABEL_143:
          sub_100259694();
        v76 = v68 - (_QWORD)v73;
        if (v76 >> 1 > v75)
          v75 = v76 >> 1;
        if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
          v77 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v77 = v75;
        if (v77)
        {
          v78 = (char *)sub_100260634(v11, v77);
          v73 = *(char **)(a1 + 32);
          v69 = *(char **)(a1 + 40);
        }
        else
        {
          v78 = 0;
        }
        v85 = &v78[4 * v74];
        *(_DWORD *)v85 = 0;
        v70 = v85 + 4;
        while (v69 != v73)
        {
          v86 = *((_DWORD *)v69 - 1);
          v69 -= 4;
          *((_DWORD *)v85 - 1) = v86;
          v85 -= 4;
        }
        *(_QWORD *)(a1 + 32) = v85;
        *(_QWORD *)(a1 + 40) = v70;
        *(_QWORD *)(a1 + 48) = &v78[4 * v77];
        if (v73)
          operator delete(v73);
      }
      else
      {
        *(_DWORD *)v69 = 0;
        v70 = v69 + 4;
      }
      *(_QWORD *)(a1 + 40) = v70;
      goto LABEL_129;
    }
    if ((PB::Reader::placeMark(this, v92, v26, a4) & 1) != 0)
      return 0;
    v36 = *((_QWORD *)this + 1);
    v37 = *((_QWORD *)this + 2);
    while (v36 < v37 && !*((_BYTE *)this + 24))
    {
      v39 = *(char **)(a1 + 40);
      v38 = *(_QWORD *)(a1 + 48);
      if ((unint64_t)v39 >= v38)
      {
        v41 = (char *)*v10;
        v42 = (v39 - (_BYTE *)*v10) >> 2;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 62)
          goto LABEL_143;
        v44 = v38 - (_QWORD)v41;
        if (v44 >> 1 > v43)
          v43 = v44 >> 1;
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
          v45 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v45 = v43;
        if (v45)
        {
          v46 = (char *)sub_100260634(v11, v45);
          v41 = *(char **)(a1 + 32);
          v39 = *(char **)(a1 + 40);
        }
        else
        {
          v46 = 0;
        }
        v47 = &v46[4 * v42];
        *(_DWORD *)v47 = 0;
        v40 = v47 + 4;
        while (v39 != v41)
        {
          v48 = *((_DWORD *)v39 - 1);
          v39 -= 4;
          *((_DWORD *)v47 - 1) = v48;
          v47 -= 4;
        }
        *(_QWORD *)(a1 + 32) = v47;
        *(_QWORD *)(a1 + 40) = v40;
        *(_QWORD *)(a1 + 48) = &v46[4 * v45];
        if (v41)
          operator delete(v41);
      }
      else
      {
        *(_DWORD *)v39 = 0;
        v40 = v39 + 4;
      }
      *(_QWORD *)(a1 + 40) = v40;
      v49 = *((_QWORD *)this + 1);
      if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)this + 2))
      {
LABEL_93:
        *((_BYTE *)this + 24) = 1;
        goto LABEL_94;
      }
      *(v40 - 1) = *(_DWORD *)(*(_QWORD *)this + v49);
      v37 = *((_QWORD *)this + 2);
      v36 = *((_QWORD *)this + 1) + 4;
      *((_QWORD *)this + 1) = v36;
    }
    goto LABEL_94;
  }
  return v6 == 0;
}

uint64_t sub_1016101B4(uint64_t result, PB::Writer *this)
{
  _QWORD *v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;

  v3 = (_QWORD *)result;
  if ((*(_BYTE *)(result + 60) & 1) != 0)
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 56), 1u);
  v4 = (float *)v3[1];
  v5 = (float *)v3[2];
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6, 2u);
  }
  v8 = (float *)v3[4];
  v7 = (float *)v3[5];
  while (v8 != v7)
  {
    v9 = *v8++;
    result = PB::Writer::write(this, v9, 3u);
  }
  return result;
}

uint64_t sub_101610234(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2078;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_10161024C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101610270(uint64_t result, uint64_t a2)
{
  char v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)result = &off_1021C2078;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    v3 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = 2;
    *(_DWORD *)(result + 16) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
LABEL_5:
    v4 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = v2;
    *(_QWORD *)(result + 8) = v4;
  }
  return result;
}

uint64_t sub_1016102C0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "rms", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101610328(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              v25 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              v25 = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            v25 = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              v25 = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_QWORD *)(a1 + 8) = v25;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
        {
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 4;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1016105B4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 16), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 8), 2u);
  return result;
}

_QWORD *sub_10161060C(_QWORD *result)
{
  *result = &off_1021C20B0;
  result[2] = 0;
  return result;
}

void sub_101610624(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_101610648(uint64_t a1, uint64_t a2)
{
  char v2;
  int v3;
  double result;

  *(_QWORD *)a1 = &off_1021C20B0;
  *(_QWORD *)(a1 + 16) = 0;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    v3 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 20) = 2;
    *(_DWORD *)(a1 + 16) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 20) = v2;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

uint64_t sub_101610698(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "event", *(_DWORD *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101610700(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v25;
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10161098C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 16), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  return result;
}

uint64_t sub_1016109E4(uint64_t result)
{
  *(_QWORD *)result = &off_1021C20E8;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void sub_1016109FC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_101610A20(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  double result;
  int v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;

  *(_QWORD *)a1 = &off_1021C20E8;
  *(_DWORD *)(a1 + 60) = 0;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 8) != 0)
  {
    result = *(double *)(a2 + 32);
    v3 = 8;
    *(_WORD *)(a1 + 60) = 8;
    *(double *)(a1 + 32) = result;
    v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 48);
    v3 |= 0x20u;
    *(_WORD *)(a1 + 60) = v3;
    *(_DWORD *)(a1 + 48) = v5;
    v2 = *(_WORD *)(a2 + 60);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    v6 = *(_BYTE *)(a2 + 55);
    v3 |= 0x200u;
    *(_WORD *)(a1 + 60) = v3;
    *(_BYTE *)(a1 + 55) = v6;
    v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_BYTE *)(a2 + 56);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 60) = v3;
  *(_BYTE *)(a1 + 56) = v7;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v8 = *(_BYTE *)(a2 + 52);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 60) = v3;
  *(_BYTE *)(a1 + 52) = v8;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  v9 = *(_BYTE *)(a2 + 53);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 60) = v3;
  *(_BYTE *)(a1 + 53) = v9;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  v10 = *(_BYTE *)(a2 + 54);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 60) = v3;
  *(_BYTE *)(a1 + 54) = v10;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 2) == 0)
  {
LABEL_12:
    if ((v2 & 1) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(a1 + 60) = v3;
  *(double *)(a1 + 16) = result;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 1) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(a1 + 60) = v3;
  *(double *)(a1 + 8) = result;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      return result;
LABEL_24:
    result = *(double *)(a2 + 40);
    *(_WORD *)(a1 + 60) = v3 | 0x10;
    *(double *)(a1 + 40) = result;
    return result;
  }
LABEL_23:
  result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(a1 + 60) = v3;
  *(double *)(a1 + 24) = result;
  if ((*(_WORD *)(a2 + 60) & 0x10) != 0)
    goto LABEL_24;
  return result;
}

uint64_t sub_101610B70(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "isBlockoutPeriodLow", *(_BYTE *)(a1 + 52));
    v5 = *(_WORD *)(a1 + 60);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "isBlockoutPeriodVeryLow", *(_BYTE *)(a1 + 53));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "isSampleRecent", *(_BYTE *)(a1 + 54));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "percentLow", *(double *)(a1 + 8));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "percentOK", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "percentVeryLow", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "totalValidDuration", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x20) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(this, "value", *(_DWORD *)(a1 + 48));
    if ((*(_WORD *)(a1 + 60) & 0x400) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(this, "userHasOnboarded", *(_BYTE *)(a1 + 55));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x20) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x400) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "writtenToHealthKit", *(_BYTE *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101610D00(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 60) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 2u:
              *(_WORD *)(a1 + 60) |= 0x20u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_79;
                  }
                  v39 = v21++;
                  v40 = *(_BYTE *)(v22 + v39);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_78:
                    v2 = v39 + 1;
                    goto LABEL_79;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_78;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_79;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_79:
              *(_DWORD *)(a1 + 48) = v25;
LABEL_80:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 3u:
              *(_WORD *)(a1 + 60) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 55) = v28;
              goto LABEL_80;
            case 4u:
              *(_WORD *)(a1 + 60) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 56) = v30;
              goto LABEL_80;
            case 5u:
              *(_WORD *)(a1 + 60) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v32 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v31 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v32 = v31 != 0;
              }
              *(_BYTE *)(a1 + 52) = v32;
              goto LABEL_80;
            case 6u:
              *(_WORD *)(a1 + 60) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 53) = v34;
              goto LABEL_80;
            case 7u:
              *(_WORD *)(a1 + 60) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v36 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v35 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v36 = v35 != 0;
              }
              *(_BYTE *)(a1 + 54) = v36;
              goto LABEL_80;
            case 8u:
              *(_WORD *)(a1 + 60) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 9u:
              *(_WORD *)(a1 + 60) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 0xAu:
              *(_WORD *)(a1 + 60) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 0xBu:
              *(_WORD *)(a1 + 60) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_74:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_55:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_80;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_80;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1016111D4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 60);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 2u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 55), 3u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 56), 4u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 52), 5u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 53), 6u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 54), 7u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 2) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 8u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 9u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 40), 0xBu);
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 0xAu);
  if ((*(_WORD *)(v3 + 60) & 0x10) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 40), 0xBu);
  return result;
}

uint64_t sub_10161132C(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2120;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_101611344(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_101611368(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_1021C2120;
  *(_DWORD *)(a1 + 40) = 0;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    v3 = 2;
    *(_BYTE *)(a1 + 40) = 2;
    *(double *)(a1 + 16) = result;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(a1 + 40) = v3;
    *(double *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 40);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      return result;
LABEL_10:
    result = *(double *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = v3 | 8;
    *(double *)(a1 + 32) = result;
    return result;
  }
  result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_BYTE *)(a1 + 40) = v3;
  *(double *)(a1 + 24) = result;
  if ((*(_BYTE *)(a2 + 40) & 8) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_1016113F4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "intermediateBoutsAsymmetryPercentageCv", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "intermediateBoutsDoubleSupportPercentageMedian", *(double *)(a1 + 24));
      if ((*(_BYTE *)(a1 + 40) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "intermediateBoutsAsymmetryPercentageMedian", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "intermediateBoutsDoubleSupportPercentageStd", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016114A4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 40) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_37:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101611700(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 32), 4u);
  }
LABEL_8:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 3u);
  if ((*(_BYTE *)(v3 + 40) & 8) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 32), 4u);
  return result;
}

uint64_t sub_101611794(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2158;
  *(_DWORD *)(result + 176) = 0;
  return result;
}

void sub_1016117AC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_1016117D0(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  double result;

  *(_QWORD *)a1 = &off_1021C2158;
  *(_DWORD *)(a1 + 176) = 0;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_DWORD *)(a1 + 176) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_DWORD *)(a2 + 176);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_DWORD *)(a1 + 176) = v3;
    *(double *)(a1 + 16) = result;
    v2 = *(_DWORD *)(a2 + 176);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    result = *(double *)(a2 + 24);
    v3 |= 4u;
    *(_DWORD *)(a1 + 176) = v3;
    *(double *)(a1 + 24) = result;
    v2 = *(_DWORD *)(a2 + 176);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0)
        goto LABEL_9;
      goto LABEL_28;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 88);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 88) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  result = *(double *)(a2 + 80);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 80) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 40) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 32) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 64) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 56) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x20) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 48) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x100) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  result = *(double *)(a2 + 96);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 96) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x100) == 0)
  {
LABEL_16:
    if ((v2 & 0x80000) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 72) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x80000) == 0)
  {
LABEL_17:
    if ((v2 & 0x100000) == 0)
      goto LABEL_18;
    goto LABEL_37;
  }
LABEL_36:
  result = *(double *)(a2 + 160);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 160) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x100000) == 0)
  {
LABEL_18:
    if ((v2 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_38;
  }
LABEL_37:
  result = *(double *)(a2 + 168);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 168) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x20000) == 0)
  {
LABEL_19:
    if ((v2 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_39;
  }
LABEL_38:
  result = *(double *)(a2 + 144);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 144) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x4000) == 0)
  {
LABEL_20:
    if ((v2 & 0x8000) == 0)
      goto LABEL_21;
    goto LABEL_40;
  }
LABEL_39:
  result = *(double *)(a2 + 120);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 120) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x8000) == 0)
  {
LABEL_21:
    if ((v2 & 0x40000) == 0)
      goto LABEL_22;
    goto LABEL_41;
  }
LABEL_40:
  result = *(double *)(a2 + 128);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 128) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x40000) == 0)
  {
LABEL_22:
    if ((v2 & 0x2000) == 0)
      goto LABEL_23;
    goto LABEL_42;
  }
LABEL_41:
  result = *(double *)(a2 + 152);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 152) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x2000) == 0)
  {
LABEL_23:
    if ((v2 & 0x10000) == 0)
      goto LABEL_24;
    goto LABEL_43;
  }
LABEL_42:
  result = *(double *)(a2 + 112);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 112) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x10000) == 0)
  {
LABEL_24:
    if ((v2 & 0x1000) == 0)
      return result;
LABEL_44:
    result = *(double *)(a2 + 104);
    *(_DWORD *)(a1 + 176) = v3 | 0x1000;
    *(double *)(a1 + 104) = result;
    return result;
  }
LABEL_43:
  result = *(double *)(a2 + 136);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 136) = result;
  if ((*(_DWORD *)(a2 + 176) & 0x1000) != 0)
    goto LABEL_44;
  return result;
}

uint64_t sub_101611A38(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "allBoutsBoutDurationSecCv", *(double *)(a1 + 8));
    v5 = *(_DWORD *)(a1 + 176);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "allBoutsBoutDurationSecMedian", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "allBoutsCycleTimeCv", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "intermediateBoutsCycleTimeCv", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "intermediateBoutsCycleTimeMedian", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "intermediateBoutsDoubleSupportPercentageMedian", *(double *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "intermediateBoutsStepLengthCv", *(double *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "intermediateBoutsStepLengthMedian", *(double *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "intermediateBoutsStepLengthMedianHeightnorm", *(double *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "intermediateBoutsWalkingSpeedCv", *(double *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "intermediateBoutsWalkingSpeedMedian", *(double *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "intermediateBoutsWalkingSpeedMedianSqrtheightnorm", *(double *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "longBoutsWalkingSpeedCountRatioLog", *(double *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "shortBoutsCycleTimeCv", *(double *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "shortBoutsCycleTimeMedian", *(double *)(a1 + 120));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "shortBoutsDoubleSupportPercentageMedian", *(double *)(a1 + 128));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "shortBoutsStepLengthCv", *(double *)(a1 + 136));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "shortBoutsStepLengthMedianHeightnorm", *(double *)(a1 + 144));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0)
      goto LABEL_21;
LABEL_43:
    PB::TextFormatter::format(this, "shortBoutsWalkingSpeedMedian", *(double *)(a1 + 160));
    if ((*(_DWORD *)(a1 + 176) & 0x100000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_22;
  }
LABEL_42:
  PB::TextFormatter::format(this, "shortBoutsWalkingSpeedCv", *(double *)(a1 + 152));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x80000) != 0)
    goto LABEL_43;
LABEL_21:
  if ((v5 & 0x100000) != 0)
LABEL_22:
    PB::TextFormatter::format(this, "shortBoutsWalkingSpeedMedianSqrtheightnorm", *(double *)(a1 + 168));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101611D08(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 176) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 2u:
          *(_DWORD *)(a1 + 176) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 3u:
          *(_DWORD *)(a1 + 176) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 4u:
          *(_DWORD *)(a1 + 176) |= 0x400u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 5u:
          *(_DWORD *)(a1 + 176) |= 0x200u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 6u:
          *(_DWORD *)(a1 + 176) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 7u:
          *(_DWORD *)(a1 + 176) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 8u:
          *(_DWORD *)(a1 + 176) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 9u:
          *(_DWORD *)(a1 + 176) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 0xAu:
          *(_DWORD *)(a1 + 176) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 0xBu:
          *(_DWORD *)(a1 + 176) |= 0x800u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 0xCu:
          *(_DWORD *)(a1 + 176) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 0xDu:
          *(_DWORD *)(a1 + 176) |= 0x80000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 160) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 0xEu:
          *(_DWORD *)(a1 + 176) |= 0x100000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 168) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 0xFu:
          *(_DWORD *)(a1 + 176) |= 0x20000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 144) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 0x10u:
          *(_DWORD *)(a1 + 176) |= 0x4000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 0x11u:
          *(_DWORD *)(a1 + 176) |= 0x8000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 128) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 0x12u:
          *(_DWORD *)(a1 + 176) |= 0x40000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 152) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 0x13u:
          *(_DWORD *)(a1 + 176) |= 0x2000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 0x14u:
          *(_DWORD *)(a1 + 176) |= 0x10000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 136) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 0x15u:
          *(_DWORD *)(a1 + 176) |= 0x1000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          {
LABEL_86:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_88:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10161231C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 176);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_DWORD *)(v3 + 176);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 3u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(double *)(v3 + 88), 4u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(double *)(v3 + 80), 5u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 6u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 7u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(double *)(v3 + 64), 8u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(double *)(v3 + 56), 9u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(double *)(v3 + 48), 0xAu);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(double *)(v3 + 96), 0xBu);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000) == 0)
      goto LABEL_14;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(double *)(v3 + 72), 0xCu);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80000) == 0)
  {
LABEL_14:
    if ((v4 & 0x100000) == 0)
      goto LABEL_15;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(double *)(v3 + 160), 0xDu);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0)
      goto LABEL_16;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(double *)(v3 + 168), 0xEu);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(double *)(v3 + 144), 0xFu);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x4000) == 0)
  {
LABEL_17:
    if ((v4 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(double *)(v3 + 120), 0x10u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x8000) == 0)
  {
LABEL_18:
    if ((v4 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(double *)(v3 + 128), 0x11u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000) == 0)
      goto LABEL_20;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(double *)(v3 + 152), 0x12u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x2000) == 0)
  {
LABEL_20:
    if ((v4 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(double *)(v3 + 112), 0x13u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x10000) == 0)
  {
LABEL_21:
    if ((v4 & 0x1000) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 104), 0x15u);
  }
LABEL_42:
  result = PB::Writer::write(this, *(double *)(v3 + 136), 0x14u);
  if ((*(_DWORD *)(v3 + 176) & 0x1000) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 104), 0x15u);
  return result;
}

uint64_t sub_10161258C(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2190;
  *(_DWORD *)(result + 88) = 0;
  return result;
}

void sub_1016125A4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_1016125C8(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  double result;

  *(_QWORD *)a1 = &off_1021C2190;
  *(_DWORD *)(a1 + 88) = 0;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_WORD *)(a1 + 88) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_WORD *)(a2 + 88);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(a1 + 88) = v3;
    *(double *)(a1 + 16) = result;
    v2 = *(_WORD *)(a2 + 88);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    result = *(double *)(a2 + 24);
    v3 |= 4u;
    *(_WORD *)(a1 + 88) = v3;
    *(double *)(a1 + 24) = result;
    v2 = *(_WORD *)(a2 + 88);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0)
        goto LABEL_9;
      goto LABEL_17;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 64) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  result = *(double *)(a2 + 80);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 80) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 72) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_20;
  }
LABEL_19:
  result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 32) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 56) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_22:
    result = *(double *)(a2 + 48);
    *(_WORD *)(a1 + 88) = v3 | 0x20;
    *(double *)(a1 + 48) = result;
    return result;
  }
LABEL_21:
  result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 40) = result;
  if ((*(_WORD *)(a2 + 88) & 0x20) != 0)
    goto LABEL_22;
  return result;
}

uint64_t sub_1016126FC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "asymmetryPercentageMedian", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 88);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "asymmetryPercentageStd", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "doubleSupportPercentageMedian", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "height", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "intermediateBoutsStepLengthQ95Heightnorm", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "intermediateBoutsWalkingSpeedQ95Sqrtheightnorm", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "modelOutputBalancePrior", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
LABEL_21:
    PB::TextFormatter::format(this, "stepLengthXWalkingSpeedMedian", *(double *)(a1 + 72));
    if ((*(_WORD *)(a1 + 88) & 0x200) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_11;
  }
LABEL_20:
  PB::TextFormatter::format(this, "stepLengthMedian", *(double *)(a1 + 64));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x100) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v5 & 0x200) != 0)
LABEL_11:
    PB::TextFormatter::format(this, "walkingSpeedMedian", *(double *)(a1 + 80));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10161286C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 88) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_53;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 2u:
          *(_WORD *)(a1 + 88) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_53;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 3u:
          *(_WORD *)(a1 + 88) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_53;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 4u:
          *(_WORD *)(a1 + 88) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_53;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 5u:
          *(_WORD *)(a1 + 88) |= 0x200u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_53;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 6u:
          *(_WORD *)(a1 + 88) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_53;
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 7u:
          *(_WORD *)(a1 + 88) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_53;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 8u:
          *(_WORD *)(a1 + 88) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_53;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 9u:
          *(_WORD *)(a1 + 88) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_53;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 0xAu:
          *(_WORD *)(a1 + 88) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_55:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_53:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101612C18(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 88);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 3u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(double *)(v3 + 64), 4u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 80), 5u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 72), 6u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 7u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(double *)(v3 + 56), 8u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 48), 0xAu);
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 9u);
  if ((*(_WORD *)(v3 + 88) & 0x20) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 48), 0xAu);
  return result;
}

uint64_t sub_101612D54(uint64_t result)
{
  *(_QWORD *)result = &off_1021C21C8;
  *(_DWORD *)(result + 248) = 0;
  return result;
}

void sub_101612D6C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_101612D90(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  double result;

  *(_QWORD *)a1 = &off_1021C21C8;
  *(_DWORD *)(a1 + 248) = 0;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_DWORD *)(a1 + 248) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_DWORD *)(a2 + 248);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_DWORD *)(a1 + 248) = v3;
    *(double *)(a1 + 16) = result;
    v2 = *(_DWORD *)(a2 + 248);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    result = *(double *)(a2 + 24);
    v3 |= 4u;
    *(_DWORD *)(a1 + 248) = v3;
    *(double *)(a1 + 24) = result;
    v2 = *(_DWORD *)(a2 + 248);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_37;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 32) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_38;
  }
LABEL_37:
  result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 40) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_39;
  }
LABEL_38:
  result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 48) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_40;
  }
LABEL_39:
  result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 56) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_41;
  }
LABEL_40:
  result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 64) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_42;
  }
LABEL_41:
  result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 72) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x200) == 0)
  {
LABEL_14:
    if ((v2 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_43;
  }
LABEL_42:
  result = *(double *)(a2 + 80);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 80) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x400) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_44;
  }
LABEL_43:
  result = *(double *)(a2 + 88);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 88) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_45;
  }
LABEL_44:
  result = *(double *)(a2 + 96);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 96) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x1000) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_46;
  }
LABEL_45:
  result = *(double *)(a2 + 104);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 104) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x2000) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_47;
  }
LABEL_46:
  result = *(double *)(a2 + 112);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 112) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x4000) == 0)
  {
LABEL_19:
    if ((v2 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_48;
  }
LABEL_47:
  result = *(double *)(a2 + 120);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 120) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x8000) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_49;
  }
LABEL_48:
  result = *(double *)(a2 + 128);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 128) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x10000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_50;
  }
LABEL_49:
  result = *(double *)(a2 + 136);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 136) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x20000) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_51;
  }
LABEL_50:
  result = *(double *)(a2 + 144);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 144) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x40000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80000) == 0)
      goto LABEL_24;
    goto LABEL_52;
  }
LABEL_51:
  result = *(double *)(a2 + 152);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 152) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x80000) == 0)
  {
LABEL_24:
    if ((v2 & 0x100000) == 0)
      goto LABEL_25;
    goto LABEL_53;
  }
LABEL_52:
  result = *(double *)(a2 + 160);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 160) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x100000) == 0)
  {
LABEL_25:
    if ((v2 & 0x200000) == 0)
      goto LABEL_26;
    goto LABEL_54;
  }
LABEL_53:
  result = *(double *)(a2 + 168);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 168) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x200000) == 0)
  {
LABEL_26:
    if ((v2 & 0x400000) == 0)
      goto LABEL_27;
    goto LABEL_55;
  }
LABEL_54:
  result = *(double *)(a2 + 176);
  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 176) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x400000) == 0)
  {
LABEL_27:
    if ((v2 & 0x800000) == 0)
      goto LABEL_28;
    goto LABEL_56;
  }
LABEL_55:
  result = *(double *)(a2 + 184);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 184) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x800000) == 0)
  {
LABEL_28:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_29;
    goto LABEL_57;
  }
LABEL_56:
  result = *(double *)(a2 + 192);
  v3 |= 0x800000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 192) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_29:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_30;
    goto LABEL_58;
  }
LABEL_57:
  result = *(double *)(a2 + 200);
  v3 |= 0x1000000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 200) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_31;
    goto LABEL_59;
  }
LABEL_58:
  result = *(double *)(a2 + 216);
  v3 |= 0x4000000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 216) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_31:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_32;
    goto LABEL_60;
  }
LABEL_59:
  result = *(double *)(a2 + 224);
  v3 |= 0x8000000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 224) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_33;
    goto LABEL_61;
  }
LABEL_60:
  result = *(double *)(a2 + 232);
  v3 |= 0x10000000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 232) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_33:
    if ((v2 & 0x2000000) == 0)
      return result;
LABEL_62:
    result = *(double *)(a2 + 208);
    *(_DWORD *)(a1 + 248) = v3 | 0x2000000;
    *(double *)(a1 + 208) = result;
    return result;
  }
LABEL_61:
  result = *(double *)(a2 + 240);
  v3 |= 0x20000000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 240) = result;
  if ((*(_DWORD *)(a2 + 248) & 0x2000000) != 0)
    goto LABEL_62;
  return result;
}

uint64_t sub_1016130F4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityApCv", *(double *)(a1 + 8));
    v5 = *(_DWORD *)(a1 + 248);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_35;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityApMean", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityApMedian", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityApQ5", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityApQ95", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityMlCv", *(double *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityMlMean", *(double *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityMlMedian", *(double *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityMlQ5", *(double *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityMlQ95", *(double *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityVtCv", *(double *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityVtMean", *(double *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityVtMedian", *(double *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityVtQ5", *(double *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityVtQ95", *(double *)(a1 + 120));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityApCv", *(double *)(a1 + 128));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityApMean", *(double *)(a1 + 136));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityApMedian", *(double *)(a1 + 144));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityApQ5", *(double *)(a1 + 152));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityApQ95", *(double *)(a1 + 160));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityMlCv", *(double *)(a1 + 168));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityMlMean", *(double *)(a1 + 176));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityMlMedian", *(double *)(a1 + 184));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityMlQ5", *(double *)(a1 + 192));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_27;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityMlQ95", *(double *)(a1 + 200));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityVtCv", *(double *)(a1 + 208));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_29;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityVtMean", *(double *)(a1 + 216));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_30;
LABEL_61:
    PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityVtQ5", *(double *)(a1 + 232));
    if ((*(_DWORD *)(a1 + 248) & 0x20000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_31;
  }
LABEL_60:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityVtMedian", *(double *)(a1 + 224));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x10000000) != 0)
    goto LABEL_61;
LABEL_30:
  if ((v5 & 0x20000000) != 0)
LABEL_31:
    PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityVtQ95", *(double *)(a1 + 240));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016134E4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 248) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 2u:
          *(_DWORD *)(a1 + 248) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 3u:
          *(_DWORD *)(a1 + 248) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 4u:
          *(_DWORD *)(a1 + 248) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 5u:
          *(_DWORD *)(a1 + 248) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 6u:
          *(_DWORD *)(a1 + 248) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 7u:
          *(_DWORD *)(a1 + 248) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 8u:
          *(_DWORD *)(a1 + 248) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 9u:
          *(_DWORD *)(a1 + 248) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0xAu:
          *(_DWORD *)(a1 + 248) |= 0x200u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0xBu:
          *(_DWORD *)(a1 + 248) |= 0x400u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0xCu:
          *(_DWORD *)(a1 + 248) |= 0x800u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0xDu:
          *(_DWORD *)(a1 + 248) |= 0x1000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0xEu:
          *(_DWORD *)(a1 + 248) |= 0x2000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0xFu:
          *(_DWORD *)(a1 + 248) |= 0x4000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0x10u:
          *(_DWORD *)(a1 + 248) |= 0x8000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 128) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0x11u:
          *(_DWORD *)(a1 + 248) |= 0x10000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 136) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0x12u:
          *(_DWORD *)(a1 + 248) |= 0x20000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 144) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0x13u:
          *(_DWORD *)(a1 + 248) |= 0x40000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 152) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0x14u:
          *(_DWORD *)(a1 + 248) |= 0x80000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 160) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0x15u:
          *(_DWORD *)(a1 + 248) |= 0x100000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 168) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0x16u:
          *(_DWORD *)(a1 + 248) |= 0x200000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 176) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0x17u:
          *(_DWORD *)(a1 + 248) |= 0x400000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 184) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0x18u:
          *(_DWORD *)(a1 + 248) |= 0x800000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 192) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0x19u:
          *(_DWORD *)(a1 + 248) |= 0x1000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 200) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0x1Au:
          *(_DWORD *)(a1 + 248) |= 0x4000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 216) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0x1Bu:
          *(_DWORD *)(a1 + 248) |= 0x8000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 224) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0x1Cu:
          *(_DWORD *)(a1 + 248) |= 0x10000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 232) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0x1Du:
          *(_DWORD *)(a1 + 248) |= 0x20000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 240) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0x1Eu:
          *(_DWORD *)(a1 + 248) |= 0x2000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          {
LABEL_113:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_QWORD *)(a1 + 208) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_115:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101613CF0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 248);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_DWORD *)(v3 + 248);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_34;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 3u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 4u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 5u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(double *)(v3 + 48), 6u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(double *)(v3 + 56), 7u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(double *)(v3 + 64), 8u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(double *)(v3 + 72), 9u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(double *)(v3 + 80), 0xAu);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x400) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(double *)(v3 + 88), 0xBu);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(double *)(v3 + 96), 0xCu);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(double *)(v3 + 104), 0xDu);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x2000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(double *)(v3 + 112), 0xEu);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(double *)(v3 + 120), 0xFu);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x8000) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(double *)(v3 + 128), 0x10u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x10000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(double *)(v3 + 136), 0x11u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(double *)(v3 + 144), 0x12u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x40000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(double *)(v3 + 152), 0x13u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x80000) == 0)
  {
LABEL_21:
    if ((v4 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(double *)(v3 + 160), 0x14u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x100000) == 0)
  {
LABEL_22:
    if ((v4 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(double *)(v3 + 168), 0x15u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x200000) == 0)
  {
LABEL_23:
    if ((v4 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::write(this, *(double *)(v3 + 176), 0x16u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x400000) == 0)
  {
LABEL_24:
    if ((v4 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::write(this, *(double *)(v3 + 184), 0x17u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x800000) == 0)
  {
LABEL_25:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::write(this, *(double *)(v3 + 192), 0x18u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_27;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::write(this, *(double *)(v3 + 200), 0x19u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_28;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(double *)(v3 + 216), 0x1Au);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_28:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_29;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::write(this, *(double *)(v3 + 224), 0x1Bu);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_30;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(double *)(v3 + 232), 0x1Cu);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x2000000) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 208), 0x1Eu);
  }
LABEL_60:
  result = PB::Writer::write(this, *(double *)(v3 + 240), 0x1Du);
  if ((*(_DWORD *)(v3 + 248) & 0x2000000) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 208), 0x1Eu);
  return result;
}

uint64_t sub_10161405C(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2200;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_101614074(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101614098(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  *(_QWORD *)result = &off_1021C2200;
  *(_DWORD *)(result + 52) = 0;
  v2 = *(_BYTE *)(a2 + 52);
  if ((v2 & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 24);
    v3 = 4;
    *(_BYTE *)(result + 52) = 4;
    *(_QWORD *)(result + 24) = v4;
    v2 = *(_BYTE *)(a2 + 52);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 52) & 2) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 52) = v3;
    *(_QWORD *)(result + 16) = v5;
    v2 = *(_BYTE *)(a2 + 52);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    v6 = *(_QWORD *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(result + 52) = v3;
    *(_QWORD *)(result + 8) = v6;
    v2 = *(_BYTE *)(a2 + 52);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 48);
  v3 |= 0x80u;
  *(_BYTE *)(result + 52) = v3;
  *(_DWORD *)(result + 48) = v7;
  v2 = *(_BYTE *)(a2 + 52);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  v8 = *(_DWORD *)(a2 + 36);
  v3 |= 0x10u;
  *(_BYTE *)(result + 52) = v3;
  *(_DWORD *)(result + 36) = v8;
  v2 = *(_BYTE *)(a2 + 52);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  v9 = *(_DWORD *)(a2 + 32);
  v3 |= 8u;
  *(_BYTE *)(result + 52) = v3;
  *(_DWORD *)(result + 32) = v9;
  v2 = *(_BYTE *)(a2 + 52);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_18:
    v11 = *(_DWORD *)(a2 + 40);
    *(_BYTE *)(result + 52) = v3 | 0x20;
    *(_DWORD *)(result + 40) = v11;
    return result;
  }
LABEL_17:
  v10 = *(_DWORD *)(a2 + 44);
  v3 |= 0x40u;
  *(_BYTE *)(result + 52) = v3;
  *(_DWORD *)(result + 44) = v10;
  if ((*(_BYTE *)(a2 + 52) & 0x20) != 0)
    goto LABEL_18;
  return result;
}

uint64_t sub_101614194(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "likelihoodNotOK", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 52);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 52) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "likelihoodOK", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "numDaysWithDataLast30Days", *(_DWORD *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "numDaysWithDataLast7Days", *(_DWORD *)(a1 + 36));
  v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "numValidBouts28Days", *(_DWORD *)(a1 + 40));
  v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 4) == 0)
      goto LABEL_8;
LABEL_16:
    PB::TextFormatter::format(this, "rawSteadiness", *(double *)(a1 + 24));
    if ((*(_BYTE *)(a1 + 52) & 0x80) == 0)
      return PB::TextFormatter::endObject(this);
LABEL_17:
    PB::TextFormatter::format(this, "rejectionStatus", *(_DWORD *)(a1 + 48));
    return PB::TextFormatter::endObject(this);
  }
LABEL_15:
  PB::TextFormatter::format(this, "numValidBouts7Days", *(_DWORD *)(a1 + 44));
  v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 4) != 0)
    goto LABEL_16;
LABEL_8:
  if (v5 < 0)
    goto LABEL_17;
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016142C4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 52) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_32;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 2u:
              *(_BYTE *)(a1 + 52) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_32;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 3u:
              *(_BYTE *)(a1 + 52) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_104:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_32:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_130;
            case 4u:
              *(_BYTE *)(a1 + 52) |= 0x80u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_109;
                  }
                  v53 = v21++;
                  v54 = *(_BYTE *)(v22 + v53);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_108:
                    v2 = v53 + 1;
                    goto LABEL_109;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_108;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_109;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_109:
              *(_DWORD *)(a1 + 48) = v25;
              goto LABEL_130;
            case 5u:
              *(_BYTE *)(a1 + 52) |= 0x10u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_114;
                  }
                  v57 = v27++;
                  v58 = *(_BYTE *)(v28 + v57);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_113:
                    v2 = v57 + 1;
                    goto LABEL_114;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_113;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_114;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_114:
              *(_DWORD *)(a1 + 36) = v31;
              goto LABEL_130;
            case 6u:
              *(_BYTE *)(a1 + 52) |= 8u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_119;
                  }
                  v61 = v33++;
                  v62 = *(_BYTE *)(v34 + v61);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_118:
                    v2 = v61 + 1;
                    goto LABEL_119;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_118;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_119;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_119:
              *(_DWORD *)(a1 + 32) = v37;
              goto LABEL_130;
            case 7u:
              *(_BYTE *)(a1 + 52) |= 0x40u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_124;
                  }
                  v65 = v39++;
                  v66 = *(_BYTE *)(v40 + v65);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_123:
                    v2 = v65 + 1;
                    goto LABEL_124;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_123;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_124;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_124:
              *(_DWORD *)(a1 + 44) = v43;
              goto LABEL_130;
            case 8u:
              *(_BYTE *)(a1 + 52) |= 0x20u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_129;
                  }
                  v69 = v45++;
                  v70 = *(_BYTE *)(v46 + v69);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_128:
                    v2 = v69 + 1;
                    goto LABEL_129;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_128;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_129;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_129:
              *(_DWORD *)(a1 + 40) = v49;
LABEL_130:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_130;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101614984(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 52);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    v4 = *(_BYTE *)(v3 + 52);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(result + 52) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 4u);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 5u);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 6u);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 8u);
  }
LABEL_16:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 44), 7u);
  if ((*(_BYTE *)(v3 + 52) & 0x20) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 8u);
  return result;
}

uint64_t sub_101614A88(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2238;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_101614AA0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_101614AC4(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_1021C2238;
  *(_DWORD *)(a1 + 40) = 0;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 8) != 0)
  {
    result = *(double *)(a2 + 32);
    v3 = 8;
    *(_BYTE *)(a1 + 40) = 8;
    *(double *)(a1 + 32) = result;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 40) = v3;
    *(double *)(a1 + 24) = result;
    v2 = *(_BYTE *)(a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 1) == 0)
      return result;
LABEL_10:
    result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 40) = v3 | 1;
    *(double *)(a1 + 8) = result;
    return result;
  }
  result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(a1 + 40) = v3;
  *(double *)(a1 + 16) = result;
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_101614B50(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "centroidSlopeHeightNormDoubleSupportPercentageCadence", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "l2DispersionHeightNormDoubleSupportPercentageCadence", *(double *)(a1 + 24));
      if ((*(_BYTE *)(a1 + 40) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "centroidSlopeHeightNormWalkingSpeedStepLength", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "l2DispersionHeightNormWalkingSpeedStepLength", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101614C00(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 40) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_37:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101614E5C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  }
LABEL_8:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  if ((*(_BYTE *)(v3 + 40) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  return result;
}

uint64_t sub_101614EF0(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2270;
  *(_DWORD *)(result + 216) = 0;
  return result;
}

void sub_101614F08(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_101614F2C(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  double result;

  *(_QWORD *)a1 = &off_1021C2270;
  *(_DWORD *)(a1 + 216) = 0;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x80000) != 0)
  {
    result = *(double *)(a2 + 160);
    v3 = 0x80000;
    *(_DWORD *)(a1 + 216) = 0x80000;
    *(double *)(a1 + 160) = result;
    v2 = *(_DWORD *)(a2 + 216);
    if ((v2 & 0x40000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x40000) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 152);
    v3 |= 0x40000u;
    *(_DWORD *)(a1 + 216) = v3;
    *(double *)(a1 + 152) = result;
    v2 = *(_DWORD *)(a2 + 216);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_DWORD *)(a1 + 216) = v3;
    *(double *)(a1 + 16) = result;
    v2 = *(_DWORD *)(a2 + 216);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000) == 0)
        goto LABEL_9;
      goto LABEL_33;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 8) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x100000) == 0)
  {
LABEL_9:
    if ((v2 & 0x400000) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  result = *(double *)(a2 + 168);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 168) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x400000) == 0)
  {
LABEL_10:
    if ((v2 & 0x200000) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  result = *(double *)(a2 + 184);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 184) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x200000) == 0)
  {
LABEL_11:
    if ((v2 & 0x800000) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  result = *(double *)(a2 + 176);
  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 176) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x800000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  result = *(double *)(a2 + 192);
  v3 |= 0x800000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 192) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  result = *(double *)(a2 + 208);
  v3 |= 0x2000000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 208) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_14:
    if ((v2 & 4) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  result = *(double *)(a2 + 200);
  v3 |= 0x1000000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 200) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 4) == 0)
  {
LABEL_15:
    if ((v2 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 24) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x10) == 0)
  {
LABEL_16:
    if ((v2 & 8) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 40) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 8) == 0)
  {
LABEL_17:
    if ((v2 & 0x20) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 32) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x20) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 48) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 0x40) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 64) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x40) == 0)
  {
LABEL_20:
    if ((v2 & 0x2000) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 56) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x2000) == 0)
  {
LABEL_21:
    if ((v2 & 0x200) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  result = *(double *)(a2 + 112);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 112) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x200) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0)
      goto LABEL_23;
    goto LABEL_47;
  }
LABEL_46:
  result = *(double *)(a2 + 80);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 80) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x400) == 0)
      goto LABEL_24;
    goto LABEL_48;
  }
LABEL_47:
  result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 72) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x400) == 0)
  {
LABEL_24:
    if ((v2 & 0x4000) == 0)
      goto LABEL_25;
    goto LABEL_49;
  }
LABEL_48:
  result = *(double *)(a2 + 88);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 88) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x4000) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000) == 0)
      goto LABEL_26;
    goto LABEL_50;
  }
LABEL_49:
  result = *(double *)(a2 + 120);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 120) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x20000) == 0)
      goto LABEL_27;
    goto LABEL_51;
  }
LABEL_50:
  result = *(double *)(a2 + 128);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 128) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x20000) == 0)
  {
LABEL_27:
    if ((v2 & 0x10000) == 0)
      goto LABEL_28;
    goto LABEL_52;
  }
LABEL_51:
  result = *(double *)(a2 + 144);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 144) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x10000) == 0)
  {
LABEL_28:
    if ((v2 & 0x800) == 0)
      goto LABEL_29;
    goto LABEL_53;
  }
LABEL_52:
  result = *(double *)(a2 + 136);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 136) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x800) == 0)
  {
LABEL_29:
    if ((v2 & 0x1000) == 0)
      return result;
LABEL_54:
    result = *(double *)(a2 + 104);
    *(_DWORD *)(a1 + 216) = v3 | 0x1000;
    *(double *)(a1 + 104) = result;
    return result;
  }
LABEL_53:
  result = *(double *)(a2 + 96);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 96) = result;
  if ((*(_DWORD *)(a2 + 216) & 0x1000) != 0)
    goto LABEL_54;
  return result;
}

uint64_t sub_101615220(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "allBoutsCycleTimeEntropy5thTo95th", *(double *)(a1 + 8));
    v5 = *(_DWORD *)(a1 + 216);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "allBoutsCycleTimeEntropyMean", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "allBoutsCycleTimePoincareSd1Mean", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "allBoutsCycleTimePoincareSd1P5", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "allBoutsCycleTimePoincareSd1P95", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "allBoutsCycleTimePoincareSd2Mean", *(double *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "allBoutsCycleTimePoincareSd2P5", *(double *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "allBoutsCycleTimePoincareSd2P95", *(double *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21CycleTimeEntropy5thTo95thLog", *(double *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21CycleTimeEntropyMeanLog", *(double *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21CycleTimeEntropyP5Log", *(double *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21CycleTimePoincareSd1P5Log", *(double *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21CycleTimePoincareSd2P5Log", *(double *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21StepLengthEntropyMeanLog", *(double *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21StepLengthPoincareSd1P5Log", *(double *)(a1 + 120));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21StepLengthPoincareSd1P95Log", *(double *)(a1 + 128));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21StepLengthPoincareSd2MeanLog", *(double *)(a1 + 136));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21StepLengthPoincareSd2P5Log", *(double *)(a1 + 144));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "allBoutsStepLengthEntropy5thTo95th", *(double *)(a1 + 152));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "allBoutsStepLengthEntropyMean", *(double *)(a1 + 160));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "allBoutsStepLengthPoincareSd1Mean", *(double *)(a1 + 168));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "allBoutsStepLengthPoincareSd1P5", *(double *)(a1 + 176));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "allBoutsStepLengthPoincareSd1P95", *(double *)(a1 + 184));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_26;
LABEL_53:
    PB::TextFormatter::format(this, "allBoutsStepLengthPoincareSd2P5", *(double *)(a1 + 200));
    if ((*(_DWORD *)(a1 + 216) & 0x2000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_27;
  }
LABEL_52:
  PB::TextFormatter::format(this, "allBoutsStepLengthPoincareSd2Mean", *(double *)(a1 + 192));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x1000000) != 0)
    goto LABEL_53;
LABEL_26:
  if ((v5 & 0x2000000) != 0)
LABEL_27:
    PB::TextFormatter::format(this, "allBoutsStepLengthPoincareSd2P95", *(double *)(a1 + 208));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101615590(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 216) |= 0x80000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 160) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 2u:
          *(_DWORD *)(a1 + 216) |= 0x40000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 152) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 3u:
          *(_DWORD *)(a1 + 216) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 4u:
          *(_DWORD *)(a1 + 216) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 5u:
          *(_DWORD *)(a1 + 216) |= 0x100000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 168) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 6u:
          *(_DWORD *)(a1 + 216) |= 0x400000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 184) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 7u:
          *(_DWORD *)(a1 + 216) |= 0x200000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 176) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 8u:
          *(_DWORD *)(a1 + 216) |= 0x800000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 192) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 9u:
          *(_DWORD *)(a1 + 216) |= 0x2000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 208) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0xAu:
          *(_DWORD *)(a1 + 216) |= 0x1000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 200) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0xBu:
          *(_DWORD *)(a1 + 216) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0xCu:
          *(_DWORD *)(a1 + 216) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0xDu:
          *(_DWORD *)(a1 + 216) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0xEu:
          *(_DWORD *)(a1 + 216) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0xFu:
          *(_DWORD *)(a1 + 216) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0x10u:
          *(_DWORD *)(a1 + 216) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0x11u:
          *(_DWORD *)(a1 + 216) |= 0x2000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0x12u:
          *(_DWORD *)(a1 + 216) |= 0x200u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0x13u:
          *(_DWORD *)(a1 + 216) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0x14u:
          *(_DWORD *)(a1 + 216) |= 0x400u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0x15u:
          *(_DWORD *)(a1 + 216) |= 0x4000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0x16u:
          *(_DWORD *)(a1 + 216) |= 0x8000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 128) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0x17u:
          *(_DWORD *)(a1 + 216) |= 0x20000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 144) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0x18u:
          *(_DWORD *)(a1 + 216) |= 0x10000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 136) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0x19u:
          *(_DWORD *)(a1 + 216) |= 0x800u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0x1Au:
          *(_DWORD *)(a1 + 216) |= 0x1000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          {
LABEL_101:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_103:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101615CBC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 216);
  if ((v4 & 0x80000) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 160), 1u);
    v4 = *(_DWORD *)(v3 + 216);
    if ((v4 & 0x40000) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_30;
    }
  }
  else if ((v4 & 0x40000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 152), 2u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x400000) == 0)
      goto LABEL_7;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(double *)(v3 + 168), 5u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x400000) == 0)
  {
LABEL_7:
    if ((v4 & 0x200000) == 0)
      goto LABEL_8;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(double *)(v3 + 184), 6u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x200000) == 0)
  {
LABEL_8:
    if ((v4 & 0x800000) == 0)
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(double *)(v3 + 176), 7u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x800000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(double *)(v3 + 192), 8u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(double *)(v3 + 208), 9u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0)
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(double *)(v3 + 200), 0xAu);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 0xBu);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x10) == 0)
  {
LABEL_13:
    if ((v4 & 8) == 0)
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 0xCu);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 8) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 0xDu);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(double *)(v3 + 48), 0xEu);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(double *)(v3 + 64), 0xFu);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x40) == 0)
  {
LABEL_17:
    if ((v4 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(double *)(v3 + 56), 0x10u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x2000) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(double *)(v3 + 112), 0x11u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(double *)(v3 + 80), 0x12u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x400) == 0)
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(double *)(v3 + 72), 0x13u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x400) == 0)
  {
LABEL_21:
    if ((v4 & 0x4000) == 0)
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(double *)(v3 + 88), 0x14u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x4000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(double *)(v3 + 120), 0x15u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x20000) == 0)
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(double *)(v3 + 128), 0x16u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x20000) == 0)
  {
LABEL_24:
    if ((v4 & 0x10000) == 0)
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(double *)(v3 + 144), 0x17u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x10000) == 0)
  {
LABEL_25:
    if ((v4 & 0x800) == 0)
      goto LABEL_26;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(double *)(v3 + 136), 0x18u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x800) == 0)
  {
LABEL_26:
    if ((v4 & 0x1000) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 104), 0x1Au);
  }
LABEL_52:
  result = PB::Writer::write(this, *(double *)(v3 + 96), 0x19u);
  if ((*(_DWORD *)(v3 + 216) & 0x1000) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 104), 0x1Au);
  return result;
}

uint64_t sub_101615FB8(uint64_t result)
{
  *(_QWORD *)result = &off_1021C22A8;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_101615FD0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_101615FF4(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  int v4;
  double result;
  int v6;

  *(_QWORD *)a1 = &off_1021C22A8;
  *(_DWORD *)(a1 + 40) = 0;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 8) != 0)
  {
    v4 = *(_DWORD *)(a2 + 32);
    v3 = 8;
    *(_BYTE *)(a1 + 40) = 8;
    *(_DWORD *)(a1 + 32) = v4;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(a1 + 40) = v3;
    *(double *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 40) = v3;
    *(double *)(a1 + 16) = result;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        return result;
LABEL_12:
      result = *(double *)(a2 + 24);
      *(_BYTE *)(a1 + 40) = v3 | 4;
      *(double *)(a1 + 24) = result;
      return result;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v6 = *(_DWORD *)(a2 + 36);
  v3 |= 0x10u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 36) = v6;
  if ((*(_BYTE *)(a2 + 40) & 4) != 0)
    goto LABEL_12;
  return result;
}

uint64_t sub_10161609C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "begin", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "bin", *(_DWORD *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 36));
    if ((*(_BYTE *)(a1 + 40) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "end", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 4) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "strideLength", *(double *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10161616C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 40) |= 8u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_67;
                  }
                  v35 = v20++;
                  v36 = *(_BYTE *)(v21 + v35);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_66;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v24) = 0;
LABEL_66:
                v2 = v35 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_67;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_67:
              *(_DWORD *)(a1 + 32) = v24;
              goto LABEL_73;
            case 2u:
              *(_BYTE *)(a1 + 40) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_46;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_62;
            case 3u:
              *(_BYTE *)(a1 + 40) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_46;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_62;
            case 4u:
              *(_BYTE *)(a1 + 40) |= 0x10u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_72;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_71:
                    v2 = v39 + 1;
                    goto LABEL_72;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_71;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_72;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_72:
              *(_DWORD *)(a1 + 36) = v31;
LABEL_73:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 5u:
              *(_BYTE *)(a1 + 40) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_62:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_46:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_73;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_73;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101616568(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 32), 1u);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 24), 5u);
  }
LABEL_10:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 4u);
  if ((*(_BYTE *)(v3 + 40) & 4) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 24), 5u);
  return result;
}

uint64_t sub_101616618(uint64_t result)
{
  *(_QWORD *)result = &off_1021C22E0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 152) = 0;
  return result;
}

void sub_101616634(PB::Base *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1021C22E0;
  v4 = *((_QWORD *)this + 9);
  v2 = (_QWORD *)((char *)this + 72);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_1006B3398((uint64_t)v2, v3);
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  PB::Base::~Base(this);
}

void sub_1016166A4(PB::Base *a1)
{
  sub_101616634(a1);
  operator delete();
}

uint64_t sub_1016166C8(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  char v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;

  *(_QWORD *)result = &off_1021C22E0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 152) = 0;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x80) != 0)
  {
    v4 = *(_QWORD *)(a2 + 88);
    v3 = 128;
    *(_DWORD *)(result + 152) = 128;
    *(_QWORD *)(result + 88) = v4;
    v2 = *(_DWORD *)(a2 + 152);
    if ((v2 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x40) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 80);
    v3 |= 0x40u;
    *(_DWORD *)(result + 152) = v3;
    *(_QWORD *)(result + 80) = v5;
    v2 = *(_DWORD *)(a2 + 152);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v7 = *(_QWORD *)(a2 + 48);
    v3 |= 0x10u;
    *(_DWORD *)(result + 152) = v3;
    *(_QWORD *)(result + 48) = v7;
    v2 = *(_DWORD *)(a2 + 152);
    if ((v2 & 0x100) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_21;
    }
  }
  else if ((v2 & 0x100) == 0)
  {
    goto LABEL_8;
  }
  v8 = *(_DWORD *)(a2 + 96);
  v3 |= 0x100u;
  *(_DWORD *)(result + 152) = v3;
  *(_DWORD *)(result + 96) = v8;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  v9 = *(_QWORD *)(a2 + 40);
  v3 |= 8u;
  *(_DWORD *)(result + 152) = v3;
  *(_QWORD *)(result + 40) = v9;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  v10 = *(_QWORD *)(a2 + 64);
  v3 |= 0x20u;
  *(_DWORD *)(result + 152) = v3;
  *(_QWORD *)(result + 64) = v10;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x4000) == 0)
  {
LABEL_11:
    if ((v2 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  v11 = *(_DWORD *)(a2 + 120);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 152) = v3;
  *(_DWORD *)(result + 120) = v11;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x8000) == 0)
  {
LABEL_12:
    if ((v2 & 4) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  v12 = *(_DWORD *)(a2 + 124);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 152) = v3;
  *(_DWORD *)(result + 124) = v12;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 4) == 0)
  {
LABEL_13:
    if ((v2 & 2) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  v13 = *(_QWORD *)(a2 + 32);
  v3 |= 4u;
  *(_DWORD *)(result + 152) = v3;
  *(_QWORD *)(result + 32) = v13;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 2) == 0)
  {
LABEL_14:
    if ((v2 & 1) == 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  v14 = *(_QWORD *)(a2 + 24);
  v3 |= 2u;
  *(_DWORD *)(result + 152) = v3;
  *(_QWORD *)(result + 24) = v14;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 1) == 0)
  {
LABEL_15:
    if ((v2 & 0x80000) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_27:
  v15 = *(_QWORD *)(a2 + 16);
  v3 |= 1u;
  *(_DWORD *)(result + 152) = v3;
  *(_QWORD *)(result + 16) = v15;
  if ((*(_DWORD *)(a2 + 152) & 0x80000) != 0)
  {
LABEL_16:
    v6 = *(_DWORD *)(a2 + 140);
    *(_DWORD *)(result + 152) = v3 | 0x80000;
    *(_DWORD *)(result + 140) = v6;
  }
LABEL_17:
  if (*(_QWORD *)(a2 + 72))
    operator new();
  v16 = *(_DWORD *)(a2 + 152);
  if ((v16 & 0x200000) != 0)
  {
    v17 = *(_BYTE *)(a2 + 148);
    *(_DWORD *)(result + 152) |= 0x200000u;
    *(_BYTE *)(result + 148) = v17;
    v16 = *(_DWORD *)(a2 + 152);
  }
  if ((v16 & 0x400000) != 0)
  {
    v18 = *(_BYTE *)(a2 + 149);
    *(_DWORD *)(result + 152) |= 0x400000u;
    *(_BYTE *)(result + 149) = v18;
  }
  if (*(_QWORD *)(a2 + 8))
    operator new();
  v19 = *(_DWORD *)(a2 + 152);
  if ((v19 & 0x40000) != 0)
  {
    v22 = *(_DWORD *)(a2 + 136);
    *(_DWORD *)(result + 152) |= 0x40000u;
    *(_DWORD *)(result + 136) = v22;
    v19 = *(_DWORD *)(a2 + 152);
    if ((v19 & 0x100000) == 0)
    {
LABEL_37:
      if ((v19 & 0x20000) == 0)
        goto LABEL_38;
      goto LABEL_51;
    }
  }
  else if ((v19 & 0x100000) == 0)
  {
    goto LABEL_37;
  }
  v23 = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(result + 152) |= 0x100000u;
  *(_DWORD *)(result + 144) = v23;
  v19 = *(_DWORD *)(a2 + 152);
  if ((v19 & 0x20000) == 0)
  {
LABEL_38:
    if ((v19 & 0x400) == 0)
      goto LABEL_39;
    goto LABEL_52;
  }
LABEL_51:
  v24 = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(result + 152) |= 0x20000u;
  *(_DWORD *)(result + 132) = v24;
  v19 = *(_DWORD *)(a2 + 152);
  if ((v19 & 0x400) == 0)
  {
LABEL_39:
    if ((v19 & 0x800) == 0)
      goto LABEL_40;
    goto LABEL_53;
  }
LABEL_52:
  v25 = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(result + 152) |= 0x400u;
  *(_DWORD *)(result + 104) = v25;
  v19 = *(_DWORD *)(a2 + 152);
  if ((v19 & 0x800) == 0)
  {
LABEL_40:
    if ((v19 & 0x2000) == 0)
      goto LABEL_41;
    goto LABEL_54;
  }
LABEL_53:
  v26 = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(result + 152) |= 0x800u;
  *(_DWORD *)(result + 108) = v26;
  v19 = *(_DWORD *)(a2 + 152);
  if ((v19 & 0x2000) == 0)
  {
LABEL_41:
    if ((v19 & 0x200) == 0)
      goto LABEL_42;
    goto LABEL_55;
  }
LABEL_54:
  v27 = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(result + 152) |= 0x2000u;
  *(_DWORD *)(result + 116) = v27;
  v19 = *(_DWORD *)(a2 + 152);
  if ((v19 & 0x200) == 0)
  {
LABEL_42:
    if ((v19 & 0x1000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_55:
  v28 = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(result + 152) |= 0x200u;
  *(_DWORD *)(result + 100) = v28;
  if ((*(_DWORD *)(a2 + 152) & 0x1000) != 0)
  {
LABEL_43:
    v20 = *(_DWORD *)(a2 + 112);
    *(_DWORD *)(result + 152) |= 0x1000u;
    *(_DWORD *)(result + 112) = v20;
  }
LABEL_44:
  if (*(_QWORD *)(a2 + 56))
    operator new();
  if ((*(_BYTE *)(a2 + 154) & 1) != 0)
  {
    v21 = *(_DWORD *)(a2 + 128);
    *(_DWORD *)(result + 152) |= 0x10000u;
    *(_DWORD *)(result + 128) = v21;
  }
  return result;
}

uint64_t sub_101616AAC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "accelerometerPace");
  v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 1) != 0)
  {
    PB::TextFormatter::format(this, "activeTime", *(double *)(a1 + 16));
    v6 = *(_DWORD *)(a1 + 152);
    if ((v6 & 0x100) == 0)
    {
LABEL_5:
      if ((v6 & 2) == 0)
        goto LABEL_6;
      goto LABEL_36;
    }
  }
  else if ((v6 & 0x100) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(this, "count", *(_DWORD *)(a1 + 96));
  v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 2) == 0)
  {
LABEL_6:
    if ((v6 & 4) == 0)
      goto LABEL_7;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "currentCadence", *(double *)(a1 + 24));
  v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 4) == 0)
  {
LABEL_7:
    if ((v6 & 8) == 0)
      goto LABEL_8;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "currentPace", *(double *)(a1 + 32));
  v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 8) == 0)
  {
LABEL_8:
    if ((v6 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "distance", *(double *)(a1 + 40));
  v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x200) == 0)
  {
LABEL_9:
    if ((v6 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "distanceSource", *(_DWORD *)(a1 + 100));
  v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x400) == 0)
  {
LABEL_10:
    if ((v6 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "elevationAscended", *(_DWORD *)(a1 + 104));
  v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x800) == 0)
  {
LABEL_11:
    if ((v6 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "elevationDescended", *(_DWORD *)(a1 + 108));
  v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x1000) == 0)
  {
LABEL_12:
    if ((v6 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "falseStepDetectorState", *(_DWORD *)(a1 + 112));
  v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x2000) == 0)
  {
LABEL_13:
    if ((v6 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "falseStepsSuppressed", *(_DWORD *)(a1 + 116));
  v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x10) == 0)
  {
LABEL_14:
    if ((v6 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "firstStepTime", *(double *)(a1 + 48));
  v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x4000) == 0)
  {
LABEL_15:
    if ((v6 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "floorsAscended", *(_DWORD *)(a1 + 120));
  v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x8000) == 0)
  {
LABEL_16:
    if ((v6 & 0x200000) == 0)
      goto LABEL_17;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "floorsDescended", *(_DWORD *)(a1 + 124));
  v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x200000) == 0)
  {
LABEL_17:
    if ((v6 & 0x400000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_47:
  PB::TextFormatter::format(this, "isOdometerDistance", *(_BYTE *)(a1 + 148));
  if ((*(_DWORD *)(a1 + 152) & 0x400000) != 0)
LABEL_18:
    PB::TextFormatter::format(this, "isOdometerPace", *(_BYTE *)(a1 + 149));
LABEL_19:
  v7 = *(_QWORD *)(a1 + 56);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "movementStats");
  v8 = *(_DWORD *)(a1 + 152);
  if ((v8 & 0x10000) != 0)
  {
    PB::TextFormatter::format(this, "paceSource", *(_DWORD *)(a1 + 128));
    v8 = *(_DWORD *)(a1 + 152);
    if ((v8 & 0x20000) == 0)
    {
LABEL_23:
      if ((v8 & 0x40000) == 0)
        goto LABEL_24;
      goto LABEL_51;
    }
  }
  else if ((v8 & 0x20000) == 0)
  {
    goto LABEL_23;
  }
  PB::TextFormatter::format(this, "pedometerArmConstrainedState", *(_DWORD *)(a1 + 132));
  v8 = *(_DWORD *)(a1 + 152);
  if ((v8 & 0x40000) == 0)
  {
LABEL_24:
    if ((v8 & 0x20) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "pushCount", *(_DWORD *)(a1 + 136));
  v8 = *(_DWORD *)(a1 + 152);
  if ((v8 & 0x20) == 0)
  {
LABEL_25:
    if ((v8 & 0x80000) == 0)
      goto LABEL_27;
    goto LABEL_26;
  }
LABEL_52:
  PB::TextFormatter::format(this, "rawDistance", *(double *)(a1 + 64));
  if ((*(_DWORD *)(a1 + 152) & 0x80000) != 0)
LABEL_26:
    PB::TextFormatter::format(this, "recordId", *(_DWORD *)(a1 + 140));
LABEL_27:
  if (*(_QWORD *)(a1 + 72))
    PB::TextFormatter::format(this, "sourceId");
  v9 = *(_DWORD *)(a1 + 152);
  if ((v9 & 0x40) == 0)
  {
    if ((v9 & 0x80) == 0)
      goto LABEL_31;
LABEL_55:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 88));
    if ((*(_DWORD *)(a1 + 152) & 0x100000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_32;
  }
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 80));
  v9 = *(_DWORD *)(a1 + 152);
  if ((v9 & 0x80) != 0)
    goto LABEL_55;
LABEL_31:
  if ((v9 & 0x100000) != 0)
LABEL_32:
    PB::TextFormatter::format(this, "workoutType", *(_DWORD *)(a1 + 144));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101616E14(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  BOOL v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  BOOL v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char v120;
  unsigned int v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char v128;
  unsigned int v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char v136;
  unsigned int v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  char v141;
  unsigned int v142;
  unint64_t v143;
  char v144;
  char v145;
  unsigned int v146;
  unint64_t v147;
  char v148;
  char v149;
  unsigned int v150;
  unint64_t v151;
  char v152;
  char v153;
  unsigned int v154;
  unint64_t v155;
  char v156;
  char v157;
  unsigned int v158;
  unint64_t v159;
  char v160;
  char v161;
  unsigned int v162;
  unint64_t v163;
  char v164;
  char v165;
  unsigned int v166;
  unint64_t v167;
  char v168;
  char v169;
  unsigned int v170;
  unint64_t v171;
  char v172;
  char v173;
  unsigned int v174;
  unint64_t v175;
  char v176;
  char v177;
  unsigned int v178;
  unint64_t v179;
  char v180;
  char v181;
  unsigned int v182;
  unint64_t v183;
  char v184;
  char v185;
  unsigned int v186;
  unint64_t v187;
  char v188;
  char v189;
  unsigned int v190;
  unint64_t v191;
  char v192;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 152) |= 0x80u;
          v20 = *((_QWORD *)this + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v20);
          goto LABEL_242;
        case 2u:
          *(_DWORD *)(a1 + 152) |= 0x40u;
          v22 = *((_QWORD *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v22);
          goto LABEL_242;
        case 3u:
          *(_DWORD *)(a1 + 152) |= 0x10u;
          v23 = *((_QWORD *)this + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v23);
          goto LABEL_242;
        case 4u:
          *(_DWORD *)(a1 + 152) |= 0x100u;
          v24 = *((_QWORD *)this + 1);
          v25 = *((_QWORD *)this + 2);
          v26 = *(_QWORD *)this;
          if (v24 <= 0xFFFFFFFFFFFFFFF5 && v24 + 10 <= v25)
          {
            v27 = 0;
            v28 = 0;
            v29 = 0;
            do
            {
              v30 = v24 + 1;
              *((_QWORD *)this + 1) = v24 + 1;
              v31 = *(_BYTE *)(v26 + v24);
              v29 |= (unint64_t)(v31 & 0x7F) << v27;
              if ((v31 & 0x80) == 0)
                goto LABEL_246;
              v27 += 7;
              v24 = v30;
              v14 = v28++ > 8;
            }
            while (!v14);
LABEL_152:
            LODWORD(v29) = 0;
            goto LABEL_246;
          }
          v141 = 0;
          v142 = 0;
          v29 = 0;
          if (v25 <= v24)
            v25 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v25 == v24)
            {
              LODWORD(v29) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v143 = v24 + 1;
              v144 = *(_BYTE *)(v26 + v24);
              *((_QWORD *)this + 1) = v143;
              v29 |= (unint64_t)(v144 & 0x7F) << v141;
              if (v144 < 0)
              {
                v141 += 7;
                v24 = v143;
                v14 = v142++ > 8;
                if (v14)
                  goto LABEL_152;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v29) = 0;
            }
            break;
          }
LABEL_246:
          *(_DWORD *)(a1 + 96) = v29;
          goto LABEL_295;
        case 5u:
          *(_DWORD *)(a1 + 152) |= 8u;
          v32 = *((_QWORD *)this + 1);
          if (v32 > 0xFFFFFFFFFFFFFFF7 || v32 + 8 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v32);
          goto LABEL_242;
        case 6u:
          *(_DWORD *)(a1 + 152) |= 0x20u;
          v33 = *((_QWORD *)this + 1);
          if (v33 > 0xFFFFFFFFFFFFFFF7 || v33 + 8 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v33);
          goto LABEL_242;
        case 7u:
          *(_DWORD *)(a1 + 152) |= 0x4000u;
          v34 = *((_QWORD *)this + 1);
          v35 = *((_QWORD *)this + 2);
          v36 = *(_QWORD *)this;
          if (v34 <= 0xFFFFFFFFFFFFFFF5 && v34 + 10 <= v35)
          {
            v37 = 0;
            v38 = 0;
            v39 = 0;
            do
            {
              v40 = v34 + 1;
              *((_QWORD *)this + 1) = v34 + 1;
              v41 = *(_BYTE *)(v36 + v34);
              v39 |= (unint64_t)(v41 & 0x7F) << v37;
              if ((v41 & 0x80) == 0)
                goto LABEL_250;
              v37 += 7;
              v34 = v40;
              v14 = v38++ > 8;
            }
            while (!v14);
LABEL_159:
            LODWORD(v39) = 0;
            goto LABEL_250;
          }
          v145 = 0;
          v146 = 0;
          v39 = 0;
          if (v35 <= v34)
            v35 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v35 == v34)
            {
              LODWORD(v39) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v147 = v34 + 1;
              v148 = *(_BYTE *)(v36 + v34);
              *((_QWORD *)this + 1) = v147;
              v39 |= (unint64_t)(v148 & 0x7F) << v145;
              if (v148 < 0)
              {
                v145 += 7;
                v34 = v147;
                v14 = v146++ > 8;
                if (v14)
                  goto LABEL_159;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v39) = 0;
            }
            break;
          }
LABEL_250:
          *(_DWORD *)(a1 + 120) = v39;
          goto LABEL_295;
        case 8u:
          *(_DWORD *)(a1 + 152) |= 0x8000u;
          v42 = *((_QWORD *)this + 1);
          v43 = *((_QWORD *)this + 2);
          v44 = *(_QWORD *)this;
          if (v42 <= 0xFFFFFFFFFFFFFFF5 && v42 + 10 <= v43)
          {
            v45 = 0;
            v46 = 0;
            v47 = 0;
            do
            {
              v48 = v42 + 1;
              *((_QWORD *)this + 1) = v42 + 1;
              v49 = *(_BYTE *)(v44 + v42);
              v47 |= (unint64_t)(v49 & 0x7F) << v45;
              if ((v49 & 0x80) == 0)
                goto LABEL_254;
              v45 += 7;
              v42 = v48;
              v14 = v46++ > 8;
            }
            while (!v14);
LABEL_166:
            LODWORD(v47) = 0;
            goto LABEL_254;
          }
          v149 = 0;
          v150 = 0;
          v47 = 0;
          if (v43 <= v42)
            v43 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v43 == v42)
            {
              LODWORD(v47) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v151 = v42 + 1;
              v152 = *(_BYTE *)(v44 + v42);
              *((_QWORD *)this + 1) = v151;
              v47 |= (unint64_t)(v152 & 0x7F) << v149;
              if (v152 < 0)
              {
                v149 += 7;
                v42 = v151;
                v14 = v150++ > 8;
                if (v14)
                  goto LABEL_166;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v47) = 0;
            }
            break;
          }
LABEL_254:
          *(_DWORD *)(a1 + 124) = v47;
          goto LABEL_295;
        case 9u:
          *(_DWORD *)(a1 + 152) |= 4u;
          v50 = *((_QWORD *)this + 1);
          if (v50 > 0xFFFFFFFFFFFFFFF7 || v50 + 8 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v50);
          goto LABEL_242;
        case 0xAu:
          *(_DWORD *)(a1 + 152) |= 2u;
          v51 = *((_QWORD *)this + 1);
          if (v51 > 0xFFFFFFFFFFFFFFF7 || v51 + 8 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v51);
          goto LABEL_242;
        case 0xBu:
          *(_DWORD *)(a1 + 152) |= 1u;
          v52 = *((_QWORD *)this + 1);
          if (v52 <= 0xFFFFFFFFFFFFFFF7 && v52 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v52);
LABEL_242:
            *((_QWORD *)this + 1) += 8;
          }
          else
          {
LABEL_68:
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_295;
        case 0xCu:
          *(_DWORD *)(a1 + 152) |= 0x80000u;
          v53 = *((_QWORD *)this + 1);
          v54 = *((_QWORD *)this + 2);
          v55 = *(_QWORD *)this;
          if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
          {
            v56 = 0;
            v57 = 0;
            v58 = 0;
            do
            {
              v59 = v53 + 1;
              *((_QWORD *)this + 1) = v53 + 1;
              v60 = *(_BYTE *)(v55 + v53);
              v58 |= (unint64_t)(v60 & 0x7F) << v56;
              if ((v60 & 0x80) == 0)
                goto LABEL_258;
              v56 += 7;
              v53 = v59;
              v14 = v57++ > 8;
            }
            while (!v14);
LABEL_173:
            LODWORD(v58) = 0;
            goto LABEL_258;
          }
          v153 = 0;
          v154 = 0;
          v58 = 0;
          if (v54 <= v53)
            v54 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v54 == v53)
            {
              LODWORD(v58) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v155 = v53 + 1;
              v156 = *(_BYTE *)(v55 + v53);
              *((_QWORD *)this + 1) = v155;
              v58 |= (unint64_t)(v156 & 0x7F) << v153;
              if (v156 < 0)
              {
                v153 += 7;
                v53 = v155;
                v14 = v154++ > 8;
                if (v14)
                  goto LABEL_173;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v58) = 0;
            }
            break;
          }
LABEL_258:
          *(_DWORD *)(a1 + 140) = v58;
          goto LABEL_295;
        case 0xDu:
          operator new();
        case 0xEu:
          *(_DWORD *)(a1 + 152) |= 0x200000u;
          v61 = *((_QWORD *)this + 1);
          if (v61 >= *((_QWORD *)this + 2))
          {
            v64 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v62 = v61 + 1;
            v63 = *(unsigned __int8 *)(*(_QWORD *)this + v61);
            *((_QWORD *)this + 1) = v62;
            v64 = v63 != 0;
          }
          *(_BYTE *)(a1 + 148) = v64;
          goto LABEL_295;
        case 0xFu:
          *(_DWORD *)(a1 + 152) |= 0x400000u;
          v65 = *((_QWORD *)this + 1);
          if (v65 >= *((_QWORD *)this + 2))
          {
            v68 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v66 = v65 + 1;
            v67 = *(unsigned __int8 *)(*(_QWORD *)this + v65);
            *((_QWORD *)this + 1) = v66;
            v68 = v67 != 0;
          }
          *(_BYTE *)(a1 + 149) = v68;
          goto LABEL_295;
        case 0x10u:
          operator new();
        case 0x11u:
          *(_DWORD *)(a1 + 152) |= 0x40000u;
          v69 = *((_QWORD *)this + 1);
          v70 = *((_QWORD *)this + 2);
          v71 = *(_QWORD *)this;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            v72 = 0;
            v73 = 0;
            v74 = 0;
            do
            {
              v75 = v69 + 1;
              *((_QWORD *)this + 1) = v69 + 1;
              v76 = *(_BYTE *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0)
                goto LABEL_262;
              v72 += 7;
              v69 = v75;
              v14 = v73++ > 8;
            }
            while (!v14);
LABEL_184:
            LODWORD(v74) = 0;
            goto LABEL_262;
          }
          v157 = 0;
          v158 = 0;
          v74 = 0;
          if (v70 <= v69)
            v70 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v159 = v69 + 1;
              v160 = *(_BYTE *)(v71 + v69);
              *((_QWORD *)this + 1) = v159;
              v74 |= (unint64_t)(v160 & 0x7F) << v157;
              if (v160 < 0)
              {
                v157 += 7;
                v69 = v159;
                v14 = v158++ > 8;
                if (v14)
                  goto LABEL_184;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v74) = 0;
            }
            break;
          }
LABEL_262:
          *(_DWORD *)(a1 + 136) = v74;
          goto LABEL_295;
        case 0x12u:
          *(_DWORD *)(a1 + 152) |= 0x100000u;
          v77 = *((_QWORD *)this + 1);
          v78 = *((_QWORD *)this + 2);
          v79 = *(_QWORD *)this;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            v80 = 0;
            v81 = 0;
            v82 = 0;
            do
            {
              v83 = v77 + 1;
              *((_QWORD *)this + 1) = v77 + 1;
              v84 = *(_BYTE *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0)
                goto LABEL_266;
              v80 += 7;
              v77 = v83;
              v14 = v81++ > 8;
            }
            while (!v14);
LABEL_191:
            LODWORD(v82) = 0;
            goto LABEL_266;
          }
          v161 = 0;
          v162 = 0;
          v82 = 0;
          if (v78 <= v77)
            v78 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v78 == v77)
            {
              LODWORD(v82) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v163 = v77 + 1;
              v164 = *(_BYTE *)(v79 + v77);
              *((_QWORD *)this + 1) = v163;
              v82 |= (unint64_t)(v164 & 0x7F) << v161;
              if (v164 < 0)
              {
                v161 += 7;
                v77 = v163;
                v14 = v162++ > 8;
                if (v14)
                  goto LABEL_191;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v82) = 0;
            }
            break;
          }
LABEL_266:
          *(_DWORD *)(a1 + 144) = v82;
          goto LABEL_295;
        case 0x13u:
          *(_DWORD *)(a1 + 152) |= 0x20000u;
          v85 = *((_QWORD *)this + 1);
          v86 = *((_QWORD *)this + 2);
          v87 = *(_QWORD *)this;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            v88 = 0;
            v89 = 0;
            v90 = 0;
            do
            {
              v91 = v85 + 1;
              *((_QWORD *)this + 1) = v85 + 1;
              v92 = *(_BYTE *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0)
                goto LABEL_270;
              v88 += 7;
              v85 = v91;
              v14 = v89++ > 8;
            }
            while (!v14);
LABEL_198:
            LODWORD(v90) = 0;
            goto LABEL_270;
          }
          v165 = 0;
          v166 = 0;
          v90 = 0;
          if (v86 <= v85)
            v86 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v86 == v85)
            {
              LODWORD(v90) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v167 = v85 + 1;
              v168 = *(_BYTE *)(v87 + v85);
              *((_QWORD *)this + 1) = v167;
              v90 |= (unint64_t)(v168 & 0x7F) << v165;
              if (v168 < 0)
              {
                v165 += 7;
                v85 = v167;
                v14 = v166++ > 8;
                if (v14)
                  goto LABEL_198;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v90) = 0;
            }
            break;
          }
LABEL_270:
          *(_DWORD *)(a1 + 132) = v90;
          goto LABEL_295;
        case 0x14u:
          *(_DWORD *)(a1 + 152) |= 0x400u;
          v93 = *((_QWORD *)this + 1);
          v94 = *((_QWORD *)this + 2);
          v95 = *(_QWORD *)this;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            v96 = 0;
            v97 = 0;
            v98 = 0;
            do
            {
              v99 = v93 + 1;
              *((_QWORD *)this + 1) = v93 + 1;
              v100 = *(_BYTE *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0)
                goto LABEL_274;
              v96 += 7;
              v93 = v99;
              v14 = v97++ > 8;
            }
            while (!v14);
LABEL_205:
            LODWORD(v98) = 0;
            goto LABEL_274;
          }
          v169 = 0;
          v170 = 0;
          v98 = 0;
          if (v94 <= v93)
            v94 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v94 == v93)
            {
              LODWORD(v98) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v171 = v93 + 1;
              v172 = *(_BYTE *)(v95 + v93);
              *((_QWORD *)this + 1) = v171;
              v98 |= (unint64_t)(v172 & 0x7F) << v169;
              if (v172 < 0)
              {
                v169 += 7;
                v93 = v171;
                v14 = v170++ > 8;
                if (v14)
                  goto LABEL_205;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v98) = 0;
            }
            break;
          }
LABEL_274:
          *(_DWORD *)(a1 + 104) = v98;
          goto LABEL_295;
        case 0x15u:
          *(_DWORD *)(a1 + 152) |= 0x800u;
          v101 = *((_QWORD *)this + 1);
          v102 = *((_QWORD *)this + 2);
          v103 = *(_QWORD *)this;
          if (v101 <= 0xFFFFFFFFFFFFFFF5 && v101 + 10 <= v102)
          {
            v104 = 0;
            v105 = 0;
            v106 = 0;
            do
            {
              v107 = v101 + 1;
              *((_QWORD *)this + 1) = v101 + 1;
              v108 = *(_BYTE *)(v103 + v101);
              v106 |= (unint64_t)(v108 & 0x7F) << v104;
              if ((v108 & 0x80) == 0)
                goto LABEL_278;
              v104 += 7;
              v101 = v107;
              v14 = v105++ > 8;
            }
            while (!v14);
LABEL_212:
            LODWORD(v106) = 0;
            goto LABEL_278;
          }
          v173 = 0;
          v174 = 0;
          v106 = 0;
          if (v102 <= v101)
            v102 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v102 == v101)
            {
              LODWORD(v106) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v175 = v101 + 1;
              v176 = *(_BYTE *)(v103 + v101);
              *((_QWORD *)this + 1) = v175;
              v106 |= (unint64_t)(v176 & 0x7F) << v173;
              if (v176 < 0)
              {
                v173 += 7;
                v101 = v175;
                v14 = v174++ > 8;
                if (v14)
                  goto LABEL_212;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v106) = 0;
            }
            break;
          }
LABEL_278:
          *(_DWORD *)(a1 + 108) = v106;
          goto LABEL_295;
        case 0x16u:
          *(_DWORD *)(a1 + 152) |= 0x2000u;
          v109 = *((_QWORD *)this + 1);
          v110 = *((_QWORD *)this + 2);
          v111 = *(_QWORD *)this;
          if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
          {
            v112 = 0;
            v113 = 0;
            v114 = 0;
            do
            {
              v115 = v109 + 1;
              *((_QWORD *)this + 1) = v109 + 1;
              v116 = *(_BYTE *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0)
                goto LABEL_282;
              v112 += 7;
              v109 = v115;
              v14 = v113++ > 8;
            }
            while (!v14);
LABEL_219:
            LODWORD(v114) = 0;
            goto LABEL_282;
          }
          v177 = 0;
          v178 = 0;
          v114 = 0;
          if (v110 <= v109)
            v110 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v179 = v109 + 1;
              v180 = *(_BYTE *)(v111 + v109);
              *((_QWORD *)this + 1) = v179;
              v114 |= (unint64_t)(v180 & 0x7F) << v177;
              if (v180 < 0)
              {
                v177 += 7;
                v109 = v179;
                v14 = v178++ > 8;
                if (v14)
                  goto LABEL_219;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v114) = 0;
            }
            break;
          }
LABEL_282:
          *(_DWORD *)(a1 + 116) = v114;
          goto LABEL_295;
        case 0x17u:
          *(_DWORD *)(a1 + 152) |= 0x200u;
          v117 = *((_QWORD *)this + 1);
          v118 = *((_QWORD *)this + 2);
          v119 = *(_QWORD *)this;
          if (v117 <= 0xFFFFFFFFFFFFFFF5 && v117 + 10 <= v118)
          {
            v120 = 0;
            v121 = 0;
            v122 = 0;
            do
            {
              v123 = v117 + 1;
              *((_QWORD *)this + 1) = v117 + 1;
              v124 = *(_BYTE *)(v119 + v117);
              v122 |= (unint64_t)(v124 & 0x7F) << v120;
              if ((v124 & 0x80) == 0)
                goto LABEL_286;
              v120 += 7;
              v117 = v123;
              v14 = v121++ > 8;
            }
            while (!v14);
LABEL_226:
            LODWORD(v122) = 0;
            goto LABEL_286;
          }
          v181 = 0;
          v182 = 0;
          v122 = 0;
          if (v118 <= v117)
            v118 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v118 == v117)
            {
              LODWORD(v122) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v183 = v117 + 1;
              v184 = *(_BYTE *)(v119 + v117);
              *((_QWORD *)this + 1) = v183;
              v122 |= (unint64_t)(v184 & 0x7F) << v181;
              if (v184 < 0)
              {
                v181 += 7;
                v117 = v183;
                v14 = v182++ > 8;
                if (v14)
                  goto LABEL_226;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v122) = 0;
            }
            break;
          }
LABEL_286:
          *(_DWORD *)(a1 + 100) = v122;
          goto LABEL_295;
        case 0x18u:
          *(_DWORD *)(a1 + 152) |= 0x1000u;
          v125 = *((_QWORD *)this + 1);
          v126 = *((_QWORD *)this + 2);
          v127 = *(_QWORD *)this;
          if (v125 <= 0xFFFFFFFFFFFFFFF5 && v125 + 10 <= v126)
          {
            v128 = 0;
            v129 = 0;
            v130 = 0;
            do
            {
              v131 = v125 + 1;
              *((_QWORD *)this + 1) = v125 + 1;
              v132 = *(_BYTE *)(v127 + v125);
              v130 |= (unint64_t)(v132 & 0x7F) << v128;
              if ((v132 & 0x80) == 0)
                goto LABEL_290;
              v128 += 7;
              v125 = v131;
              v14 = v129++ > 8;
            }
            while (!v14);
LABEL_233:
            LODWORD(v130) = 0;
            goto LABEL_290;
          }
          v185 = 0;
          v186 = 0;
          v130 = 0;
          if (v126 <= v125)
            v126 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v126 == v125)
            {
              LODWORD(v130) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v187 = v125 + 1;
              v188 = *(_BYTE *)(v127 + v125);
              *((_QWORD *)this + 1) = v187;
              v130 |= (unint64_t)(v188 & 0x7F) << v185;
              if (v188 < 0)
              {
                v185 += 7;
                v125 = v187;
                v14 = v186++ > 8;
                if (v14)
                  goto LABEL_233;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v130) = 0;
            }
            break;
          }
LABEL_290:
          *(_DWORD *)(a1 + 112) = v130;
          goto LABEL_295;
        case 0x19u:
          operator new();
        case 0x1Au:
          *(_DWORD *)(a1 + 152) |= 0x10000u;
          v133 = *((_QWORD *)this + 1);
          v134 = *((_QWORD *)this + 2);
          v135 = *(_QWORD *)this;
          if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
          {
            v136 = 0;
            v137 = 0;
            v138 = 0;
            do
            {
              v139 = v133 + 1;
              *((_QWORD *)this + 1) = v133 + 1;
              v140 = *(_BYTE *)(v135 + v133);
              v138 |= (unint64_t)(v140 & 0x7F) << v136;
              if ((v140 & 0x80) == 0)
                goto LABEL_294;
              v136 += 7;
              v133 = v139;
              v14 = v137++ > 8;
            }
            while (!v14);
LABEL_240:
            LODWORD(v138) = 0;
            goto LABEL_294;
          }
          v189 = 0;
          v190 = 0;
          v138 = 0;
          if (v134 <= v133)
            v134 = *((_QWORD *)this + 1);
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_295;
      }
      while (1)
      {
        if (v134 == v133)
        {
          LODWORD(v138) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_294;
        }
        v191 = v133 + 1;
        v192 = *(_BYTE *)(v135 + v133);
        *((_QWORD *)this + 1) = v191;
        v138 |= (unint64_t)(v192 & 0x7F) << v189;
        if ((v192 & 0x80) == 0)
          break;
        v189 += 7;
        v133 = v191;
        v14 = v190++ > 8;
        if (v14)
          goto LABEL_240;
      }
      if (*((_BYTE *)this + 24))
        LODWORD(v138) = 0;
LABEL_294:
      *(_DWORD *)(a1 + 128) = v138;
LABEL_295:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101617ED0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  const PB::Base *v7;
  int v8;
  const PB::Base *v9;

  v3 = result;
  v4 = *(_DWORD *)(result + 152);
  if ((v4 & 0x80) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 88), 1u);
    v4 = *(_DWORD *)(v3 + 152);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_37;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 80), 2u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x100) == 0)
      goto LABEL_5;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(double *)(v3 + 48), 3u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x100) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 96), 4u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 5u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0)
      goto LABEL_8;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(double *)(v3 + 64), 6u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x8000) == 0)
      goto LABEL_9;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 120), 7u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x8000) == 0)
  {
LABEL_9:
    if ((v4 & 4) == 0)
      goto LABEL_10;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 124), 8u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 4) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0)
      goto LABEL_11;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 9u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0)
      goto LABEL_12;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 0xAu);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 1) == 0)
  {
LABEL_12:
    if ((v4 & 0x80000) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_45:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 0xBu);
  if ((*(_DWORD *)(v3 + 152) & 0x80000) != 0)
LABEL_13:
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 140), 0xCu);
LABEL_14:
  v5 = *(_QWORD *)(v3 + 72);
  if (v5)
    result = PB::Writer::write(this, v5, 13);
  v6 = *(_DWORD *)(v3 + 152);
  if ((v6 & 0x200000) != 0)
  {
    result = PB::Writer::write(this, *(_BYTE *)(v3 + 148), 0xEu);
    v6 = *(_DWORD *)(v3 + 152);
  }
  if ((v6 & 0x400000) != 0)
    result = PB::Writer::write(this, *(_BYTE *)(v3 + 149), 0xFu);
  v7 = *(const PB::Base **)(v3 + 8);
  if (v7)
    result = PB::Writer::writeSubmessage(this, v7, 0x10u);
  v8 = *(_DWORD *)(v3 + 152);
  if ((v8 & 0x40000) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 136), 0x11u);
    v8 = *(_DWORD *)(v3 + 152);
    if ((v8 & 0x100000) == 0)
    {
LABEL_24:
      if ((v8 & 0x20000) == 0)
        goto LABEL_25;
      goto LABEL_49;
    }
  }
  else if ((v8 & 0x100000) == 0)
  {
    goto LABEL_24;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 144), 0x12u);
  v8 = *(_DWORD *)(v3 + 152);
  if ((v8 & 0x20000) == 0)
  {
LABEL_25:
    if ((v8 & 0x400) == 0)
      goto LABEL_26;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 132), 0x13u);
  v8 = *(_DWORD *)(v3 + 152);
  if ((v8 & 0x400) == 0)
  {
LABEL_26:
    if ((v8 & 0x800) == 0)
      goto LABEL_27;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 104), 0x14u);
  v8 = *(_DWORD *)(v3 + 152);
  if ((v8 & 0x800) == 0)
  {
LABEL_27:
    if ((v8 & 0x2000) == 0)
      goto LABEL_28;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 108), 0x15u);
  v8 = *(_DWORD *)(v3 + 152);
  if ((v8 & 0x2000) == 0)
  {
LABEL_28:
    if ((v8 & 0x200) == 0)
      goto LABEL_29;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 116), 0x16u);
  v8 = *(_DWORD *)(v3 + 152);
  if ((v8 & 0x200) == 0)
  {
LABEL_29:
    if ((v8 & 0x1000) == 0)
      goto LABEL_31;
    goto LABEL_30;
  }
LABEL_53:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 100), 0x17u);
  if ((*(_DWORD *)(v3 + 152) & 0x1000) != 0)
LABEL_30:
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 112), 0x18u);
LABEL_31:
  v9 = *(const PB::Base **)(v3 + 56);
  if (v9)
    result = PB::Writer::writeSubmessage(this, v9, 0x19u);
  if ((*(_BYTE *)(v3 + 154) & 1) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 128), 0x1Au);
  return result;
}

uint64_t sub_1016181AC(uint64_t result)
{
  if (!*(_QWORD *)(result + 8))
    operator new();
  return result;
}

uint64_t sub_101618210(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2318;
  *(_DWORD *)(result + 72) = 0;
  return result;
}

void sub_101618228(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10161824C(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;

  *(_QWORD *)result = &off_1021C2318;
  *(_DWORD *)(result + 72) = 0;
  v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x20) != 0)
  {
    v4 = *(_QWORD *)(a2 + 48);
    v3 = 32;
    *(_WORD *)(result + 72) = 32;
    *(_QWORD *)(result + 48) = v4;
    v2 = *(_WORD *)(a2 + 72);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 64);
    v3 |= 0x80u;
    *(_WORD *)(result + 72) = v3;
    *(_DWORD *)(result + 64) = v5;
    v2 = *(_WORD *)(a2 + 72);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *(_QWORD *)(a2 + 24);
    v3 |= 4u;
    *(_WORD *)(result + 72) = v3;
    *(_QWORD *)(result + 24) = v6;
    v2 = *(_WORD *)(a2 + 72);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 72) = v3;
  *(_QWORD *)(result + 32) = v7;
  v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v8 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 72) = v3;
  *(_QWORD *)(result + 40) = v8;
  v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 1) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  v9 = *(_BYTE *)(a2 + 69);
  v3 |= 0x200u;
  *(_WORD *)(result + 72) = v3;
  *(_BYTE *)(result + 69) = v9;
  v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 1) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  v10 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 72) = v3;
  *(_QWORD *)(result + 8) = v10;
  v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v11 = *(_QWORD *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(result + 72) = v3;
  *(_QWORD *)(result + 56) = v11;
  v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x400) == 0)
  {
LABEL_13:
    if ((v2 & 2) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  v12 = *(_BYTE *)(a2 + 70);
  v3 |= 0x400u;
  *(_WORD *)(result + 72) = v3;
  *(_BYTE *)(result + 70) = v12;
  v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 2) == 0)
  {
LABEL_14:
    if ((v2 & 0x100) == 0)
      return result;
LABEL_24:
    v14 = *(_BYTE *)(a2 + 68);
    *(_WORD *)(result + 72) = v3 | 0x100;
    *(_BYTE *)(result + 68) = v14;
    return result;
  }
LABEL_23:
  v13 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 72) = v3;
  *(_QWORD *)(result + 16) = v13;
  if ((*(_WORD *)(a2 + 72) & 0x100) != 0)
    goto LABEL_24;
  return result;
}

uint64_t sub_10161839C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "calibratedDistance", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 72);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "energyDeltaDistance", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "energyIsCalibrated", *(_BYTE *)(a1 + 68));
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "incrementalActiveTime", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "incrementalSteps", *(_DWORD *)(a1 + 64));
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "lastStepTime", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "odometerSpeed", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "rawPace", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(this, "stepCadenceDeltaDistance", *(double *)(a1 + 56));
    if ((*(_WORD *)(a1 + 72) & 0x400) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(this, "rawPaceDidJump", *(_BYTE *)(a1 + 69));
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x40) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x400) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "stepCadenceIsCalibrated", *(_BYTE *)(a1 + 70));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10161852C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 72) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_72;
            case 2u:
              *(_WORD *)(a1 + 72) |= 0x80u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_77;
                  }
                  v35 = v21++;
                  v36 = *(_BYTE *)(v22 + v35);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_76:
                    v2 = v35 + 1;
                    goto LABEL_77;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_76;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_77;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_77:
              *(_DWORD *)(a1 + 64) = v25;
LABEL_78:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 3u:
              *(_WORD *)(a1 + 72) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_72;
            case 4u:
              *(_WORD *)(a1 + 72) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_72;
            case 5u:
              *(_WORD *)(a1 + 72) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_72;
            case 6u:
              *(_WORD *)(a1 + 72) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 69) = v28;
              goto LABEL_78;
            case 7u:
              *(_WORD *)(a1 + 72) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_72;
            case 8u:
              *(_WORD *)(a1 + 72) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_72;
            case 9u:
              *(_WORD *)(a1 + 72) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 70) = v30;
              goto LABEL_78;
            case 0xAu:
              *(_WORD *)(a1 + 72) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_72:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_55:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_78;
            case 0xBu:
              *(_WORD *)(a1 + 72) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v32 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v31 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v32 = v31 != 0;
              }
              *(_BYTE *)(a1 + 68) = v32;
              goto LABEL_78;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_78;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1016189E8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 72);
  if ((v4 & 0x20) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 48), 1u);
    v4 = *(_WORD *)(v3 + 72);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 64), 2u);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 3u);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 4u);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 5u);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 1) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 69), 6u);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 1) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 7u);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 56), 8u);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x400) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 70), 9u);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 0x100) == 0)
      return result;
    return PB::Writer::write(this, *(_BYTE *)(v3 + 68), 0xBu);
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 0xAu);
  if ((*(_WORD *)(v3 + 72) & 0x100) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 68), 0xBu);
  return result;
}

uint64_t sub_101618B40(uint64_t result)
{
  *(_DWORD *)(result + 100) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_1021C2350;
  return result;
}

void sub_101618B58(PB::Base *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1021C2350;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

void sub_101618BB8(PB::Base *a1)
{
  sub_101618B58(a1);
  operator delete();
}

uint64_t sub_101618BDC(uint64_t result, uint64_t a2)
{
  __int16 v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;

  *(_QWORD *)result = &off_1021C2350;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 100) = 0;
  *(_QWORD *)(result + 16) = 0;
  if (*(_QWORD *)(a2 + 16))
    operator new();
  if (*(_QWORD *)(a2 + 8))
    operator new();
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 24);
    *(_WORD *)(result + 100) |= 1u;
    *(_QWORD *)(result + 24) = v4;
    v2 = *(_WORD *)(a2 + 100);
    if ((v2 & 2) == 0)
    {
LABEL_7:
      if ((v2 & 0x80) == 0)
        goto LABEL_8;
      goto LABEL_20;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_7;
  }
  v5 = *(_QWORD *)(a2 + 32);
  *(_WORD *)(result + 100) |= 2u;
  *(_QWORD *)(result + 32) = v5;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x80) == 0)
  {
LABEL_8:
    if ((v2 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  v6 = *(_QWORD *)(a2 + 80);
  *(_WORD *)(result + 100) |= 0x80u;
  *(_QWORD *)(result + 80) = v6;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  v7 = *(_QWORD *)(a2 + 64);
  *(_WORD *)(result + 100) |= 0x20u;
  *(_QWORD *)(result + 64) = v7;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  v8 = *(_QWORD *)(a2 + 72);
  *(_WORD *)(result + 100) |= 0x40u;
  *(_QWORD *)(result + 72) = v8;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  v9 = *(_QWORD *)(a2 + 40);
  *(_WORD *)(result + 100) |= 4u;
  *(_QWORD *)(result + 40) = v9;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  v10 = *(_QWORD *)(a2 + 48);
  *(_WORD *)(result + 100) |= 8u;
  *(_QWORD *)(result + 48) = v10;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  v11 = *(_QWORD *)(a2 + 56);
  *(_WORD *)(result + 100) |= 0x10u;
  *(_QWORD *)(result + 56) = v11;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  v12 = *(_BYTE *)(a2 + 96);
  *(_WORD *)(result + 100) |= 0x400u;
  *(_BYTE *)(result + 96) = v12;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x200) == 0)
  {
LABEL_15:
    if ((v2 & 0x100) == 0)
      return result;
    goto LABEL_16;
  }
LABEL_27:
  v13 = *(_DWORD *)(a2 + 92);
  *(_WORD *)(result + 100) |= 0x200u;
  *(_DWORD *)(result + 92) = v13;
  if ((*(_WORD *)(a2 + 100) & 0x100) == 0)
    return result;
LABEL_16:
  v3 = *(_DWORD *)(a2 + 88);
  *(_WORD *)(result + 100) |= 0x100u;
  *(_DWORD *)(result + 88) = v3;
  return result;
}

uint64_t sub_101618E14(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "addition");
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "fused");
  v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 0x400) != 0)
  {
    PB::TextFormatter::format(this, "isVehicular", *(_BYTE *)(a1 + 96));
    v7 = *(_WORD *)(a1 + 100);
    if ((v7 & 1) == 0)
    {
LABEL_7:
      if ((v7 & 0x100) == 0)
        goto LABEL_8;
      goto LABEL_20;
    }
  }
  else if ((v7 & 1) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(this, "odometerDeltaDistance", *(double *)(a1 + 24));
  v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 0x100) == 0)
  {
LABEL_8:
    if ((v7 & 2) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "odometerQuality", *(_DWORD *)(a1 + 88));
  v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 2) == 0)
  {
LABEL_9:
    if ((v7 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "odometerSmoothMeanPace", *(double *)(a1 + 32));
  v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 0x200) == 0)
  {
LABEL_10:
    if ((v7 & 4) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "pedometerDistanceSource", *(_DWORD *)(a1 + 92));
  v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 4) == 0)
  {
LABEL_11:
    if ((v7 & 8) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "speedStdDevOdometer", *(double *)(a1 + 40));
  v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 8) == 0)
  {
LABEL_12:
    if ((v7 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "speedStdDevPedometer", *(double *)(a1 + 48));
  v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 0x10) == 0)
  {
LABEL_13:
    if ((v7 & 0x20) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "speedStdDevResidualTolerance", *(double *)(a1 + 56));
  v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 0x20) == 0)
  {
LABEL_14:
    if ((v7 & 0x40) == 0)
      goto LABEL_15;
LABEL_27:
    PB::TextFormatter::format(this, "totalDistanceFused", *(double *)(a1 + 72));
    if ((*(_WORD *)(a1 + 100) & 0x80) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_16;
  }
LABEL_26:
  PB::TextFormatter::format(this, "totalDistanceCalibratedPedometer", *(double *)(a1 + 64));
  v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 0x40) != 0)
    goto LABEL_27;
LABEL_15:
  if ((v7 & 0x80) != 0)
LABEL_16:
    PB::TextFormatter::format(this, "totalDistanceOdometer", *(double *)(a1 + 80));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101618FE4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          operator new();
        case 3u:
          *(_WORD *)(a1 + 100) |= 1u;
          v21 = *((_QWORD *)this + 1);
          if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)this + 2))
            goto LABEL_49;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v21);
          goto LABEL_83;
        case 4u:
          *(_WORD *)(a1 + 100) |= 2u;
          v22 = *((_QWORD *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
            goto LABEL_49;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v22);
          goto LABEL_83;
        case 5u:
          *(_WORD *)(a1 + 100) |= 0x80u;
          v23 = *((_QWORD *)this + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)this + 2))
            goto LABEL_49;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v23);
          goto LABEL_83;
        case 6u:
          *(_WORD *)(a1 + 100) |= 0x20u;
          v24 = *((_QWORD *)this + 1);
          if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)this + 2))
            goto LABEL_49;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v24);
          goto LABEL_83;
        case 7u:
          *(_WORD *)(a1 + 100) |= 0x40u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_49;
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v25);
          goto LABEL_83;
        case 8u:
          *(_WORD *)(a1 + 100) |= 4u;
          v26 = *((_QWORD *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)this + 2))
            goto LABEL_49;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v26);
          goto LABEL_83;
        case 9u:
          *(_WORD *)(a1 + 100) |= 8u;
          v27 = *((_QWORD *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)this + 2))
            goto LABEL_49;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v27);
          goto LABEL_83;
        case 0xAu:
          *(_WORD *)(a1 + 100) |= 0x10u;
          v28 = *((_QWORD *)this + 1);
          if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v28);
LABEL_83:
            *((_QWORD *)this + 1) += 8;
          }
          else
          {
LABEL_49:
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_92;
        case 0xBu:
          *(_WORD *)(a1 + 100) |= 0x400u;
          v29 = *((_QWORD *)this + 1);
          if (v29 >= *((_QWORD *)this + 2))
          {
            v32 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v30 = v29 + 1;
            v31 = *(unsigned __int8 *)(*(_QWORD *)this + v29);
            *((_QWORD *)this + 1) = v30;
            v32 = v31 != 0;
          }
          *(_BYTE *)(a1 + 96) = v32;
          goto LABEL_92;
        case 0xCu:
          *(_WORD *)(a1 + 100) |= 0x200u;
          v33 = *((_QWORD *)this + 1);
          v34 = *((_QWORD *)this + 2);
          v35 = *(_QWORD *)this;
          if (v33 <= 0xFFFFFFFFFFFFFFF5 && v33 + 10 <= v34)
          {
            v36 = 0;
            v37 = 0;
            v38 = 0;
            do
            {
              v39 = v33 + 1;
              *((_QWORD *)this + 1) = v33 + 1;
              v40 = *(_BYTE *)(v35 + v33);
              v38 |= (unint64_t)(v40 & 0x7F) << v36;
              if ((v40 & 0x80) == 0)
                goto LABEL_87;
              v36 += 7;
              v33 = v39;
              v14 = v37++ > 8;
            }
            while (!v14);
LABEL_74:
            LODWORD(v38) = 0;
            goto LABEL_87;
          }
          v49 = 0;
          v50 = 0;
          v38 = 0;
          if (v34 <= v33)
            v34 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v34 == v33)
            {
              LODWORD(v38) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v51 = v33 + 1;
              v52 = *(_BYTE *)(v35 + v33);
              *((_QWORD *)this + 1) = v51;
              v38 |= (unint64_t)(v52 & 0x7F) << v49;
              if (v52 < 0)
              {
                v49 += 7;
                v33 = v51;
                v14 = v50++ > 8;
                if (v14)
                  goto LABEL_74;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v38) = 0;
            }
            break;
          }
LABEL_87:
          *(_DWORD *)(a1 + 92) = v38;
          goto LABEL_92;
        case 0xDu:
          *(_WORD *)(a1 + 100) |= 0x100u;
          v41 = *((_QWORD *)this + 1);
          v42 = *((_QWORD *)this + 2);
          v43 = *(_QWORD *)this;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            v44 = 0;
            v45 = 0;
            v46 = 0;
            do
            {
              v47 = v41 + 1;
              *((_QWORD *)this + 1) = v41 + 1;
              v48 = *(_BYTE *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0)
                goto LABEL_91;
              v44 += 7;
              v41 = v47;
              v14 = v45++ > 8;
            }
            while (!v14);
LABEL_81:
            LODWORD(v46) = 0;
            goto LABEL_91;
          }
          v53 = 0;
          v54 = 0;
          v46 = 0;
          if (v42 <= v41)
            v42 = *((_QWORD *)this + 1);
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_92;
      }
      while (1)
      {
        if (v42 == v41)
        {
          LODWORD(v46) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_91;
        }
        v55 = v41 + 1;
        v56 = *(_BYTE *)(v43 + v41);
        *((_QWORD *)this + 1) = v55;
        v46 |= (unint64_t)(v56 & 0x7F) << v53;
        if ((v56 & 0x80) == 0)
          break;
        v53 += 7;
        v41 = v55;
        v14 = v54++ > 8;
        if (v14)
          goto LABEL_81;
      }
      if (*((_BYTE *)this + 24))
        LODWORD(v46) = 0;
LABEL_91:
      *(_DWORD *)(a1 + 88) = v46;
LABEL_92:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10161961C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;
  __int16 v6;

  v3 = result;
  v4 = *(const PB::Base **)(result + 16);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4, 1u);
  v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
    result = PB::Writer::writeSubmessage(this, v5, 2u);
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 24), 3u);
    v6 = *(_WORD *)(v3 + 100);
    if ((v6 & 2) == 0)
    {
LABEL_7:
      if ((v6 & 0x80) == 0)
        goto LABEL_8;
      goto LABEL_19;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_7;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 32), 4u);
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x80) == 0)
  {
LABEL_8:
    if ((v6 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(double *)(v3 + 80), 5u);
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x20) == 0)
  {
LABEL_9:
    if ((v6 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 64), 6u);
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x40) == 0)
  {
LABEL_10:
    if ((v6 & 4) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 72), 7u);
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 4) == 0)
  {
LABEL_11:
    if ((v6 & 8) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 8u);
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 8) == 0)
  {
LABEL_12:
    if ((v6 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(double *)(v3 + 48), 9u);
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x10) == 0)
  {
LABEL_13:
    if ((v6 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(double *)(v3 + 56), 0xAu);
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x400) == 0)
  {
LABEL_14:
    if ((v6 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 96), 0xBu);
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x200) == 0)
  {
LABEL_15:
    if ((v6 & 0x100) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 0xDu);
  }
LABEL_26:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 92), 0xCu);
  if ((*(_WORD *)(v3 + 100) & 0x100) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 0xDu);
  return result;
}

uint64_t sub_10161979C(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2388;
  *(_DWORD *)(result + 96) = 0;
  return result;
}

void sub_1016197B4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_1016197D8(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  double result;

  *(_QWORD *)a1 = &off_1021C2388;
  *(_DWORD *)(a1 + 96) = 0;
  v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x40) != 0)
  {
    result = *(double *)(a2 + 56);
    v3 = 64;
    *(_WORD *)(a1 + 96) = 64;
    *(double *)(a1 + 56) = result;
    v2 = *(_WORD *)(a2 + 96);
    if ((v2 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_WORD *)(a2 + 96) & 0x400) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 88);
    v3 |= 0x400u;
    *(_WORD *)(a1 + 96) = v3;
    *(double *)(a1 + 88) = result;
    v2 = *(_WORD *)(a2 + 96);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    result = *(double *)(a2 + 48);
    v3 |= 0x20u;
    *(_WORD *)(a1 + 96) = v3;
    *(double *)(a1 + 48) = result;
    v2 = *(_WORD *)(a2 + 96);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 96) = v3;
  *(double *)(a1 + 32) = result;
  v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  result = *(double *)(a2 + 80);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 96) = v3;
  *(double *)(a1 + 80) = result;
  v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 96) = v3;
  *(double *)(a1 + 72) = result;
  v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 96) = v3;
  *(double *)(a1 + 40) = result;
  v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(a1 + 96) = v3;
  *(double *)(a1 + 24) = result;
  v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(a1 + 96) = v3;
  *(double *)(a1 + 16) = result;
  v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x80) == 0)
  {
LABEL_14:
    if ((v2 & 1) == 0)
      return result;
LABEL_24:
    result = *(double *)(a2 + 8);
    *(_WORD *)(a1 + 96) = v3 | 1;
    *(double *)(a1 + 8) = result;
    return result;
  }
LABEL_23:
  result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 96) = v3;
  *(double *)(a1 + 64) = result;
  if ((*(_WORD *)(a2 + 96) & 1) != 0)
    goto LABEL_24;
  return result;
}

uint64_t sub_101619928(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "bobbiness", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 96);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "bufferAvgSampleRateHz", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "concavityDeltaDeg", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "deltaInertialZVel", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "horizontalDisplacement", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "impulseDurationSec", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "likelihoodRatio", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "peakiness", *(double *)(a1 + 64));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(this, "thetaRollFaceDeg", *(double *)(a1 + 80));
    if ((*(_WORD *)(a1 + 96) & 0x400) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(this, "thetaPitchFaceDeg", *(double *)(a1 + 72));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x200) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x400) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "timeSinceLastStepSec", *(double *)(a1 + 88));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101619AB8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 96) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 2u:
          *(_WORD *)(a1 + 96) |= 0x400u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 3u:
          *(_WORD *)(a1 + 96) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 4u:
          *(_WORD *)(a1 + 96) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 5u:
          *(_WORD *)(a1 + 96) |= 0x200u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 6u:
          *(_WORD *)(a1 + 96) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 7u:
          *(_WORD *)(a1 + 96) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 8u:
          *(_WORD *)(a1 + 96) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 9u:
          *(_WORD *)(a1 + 96) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 0xAu:
          *(_WORD *)(a1 + 96) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 0xBu:
          *(_WORD *)(a1 + 96) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_58:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_54:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101619E9C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 96);
  if ((v4 & 0x40) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 56), 1u);
    v4 = *(_WORD *)(v3 + 96);
    if ((v4 & 0x400) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((*(_WORD *)(result + 96) & 0x400) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 88), 2u);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(double *)(v3 + 48), 3u);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 4u);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 80), 5u);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 72), 6u);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 7u);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 8u);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 9u);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 8), 0xBu);
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 64), 0xAu);
  if ((*(_WORD *)(v3 + 96) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8), 0xBu);
  return result;
}

_QWORD *sub_101619FF4(_QWORD *result)
{
  *result = off_1021C23C0;
  result[1] = 0;
  return result;
}

void sub_10161A004(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C23C0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_10161A044(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C23C0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_10161A098(_QWORD *result, uint64_t a2)
{
  *result = off_1021C23C0;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_10161A114(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10161A164(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10161A32C(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_10161A348(uint64_t result)
{
  if (!*(_QWORD *)(result + 8))
    operator new();
  return result;
}

_QWORD *sub_10161A3AC(_QWORD *result)
{
  *result = off_1021C23F8;
  result[1] = 0;
  return result;
}

void sub_10161A3BC(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C23F8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_10161A3FC(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C23F8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_10161A450(_QWORD *result, uint64_t a2)
{
  *result = off_1021C23F8;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_10161A4CC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10161A51C(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10161A6E4(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_10161A700(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2430;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_10161A718(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_10161A73C(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  int v4;
  double result;
  int v6;

  *(_QWORD *)a1 = &off_1021C2430;
  *(_DWORD *)(a1 + 40) = 0;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 8) != 0)
  {
    v4 = *(_DWORD *)(a2 + 32);
    v3 = 8;
    *(_BYTE *)(a1 + 40) = 8;
    *(_DWORD *)(a1 + 32) = v4;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(a1 + 40) = v3;
    *(double *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 40) = v3;
    *(double *)(a1 + 16) = result;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        return result;
LABEL_12:
      result = *(double *)(a2 + 24);
      *(_BYTE *)(a1 + 40) = v3 | 4;
      *(double *)(a1 + 24) = result;
      return result;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v6 = *(_DWORD *)(a2 + 36);
  v3 |= 0x10u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 36) = v6;
  if ((*(_BYTE *)(a2 + 40) & 4) != 0)
    goto LABEL_12;
  return result;
}

uint64_t sub_10161A7E4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "begin", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "bin", *(_DWORD *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "kValue", *(double *)(a1 + 24));
    if ((*(_BYTE *)(a1 + 40) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "end", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 4) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 36));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10161A8B4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 40) |= 8u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_67;
                  }
                  v35 = v20++;
                  v36 = *(_BYTE *)(v21 + v35);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_66;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v24) = 0;
LABEL_66:
                v2 = v35 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_67;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_67:
              *(_DWORD *)(a1 + 32) = v24;
              goto LABEL_73;
            case 2u:
              *(_BYTE *)(a1 + 40) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_46;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_62;
            case 3u:
              *(_BYTE *)(a1 + 40) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_46;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_62;
            case 4u:
              *(_BYTE *)(a1 + 40) |= 0x10u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_72;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_71:
                    v2 = v39 + 1;
                    goto LABEL_72;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_71;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_72;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_72:
              *(_DWORD *)(a1 + 36) = v31;
LABEL_73:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 5u:
              *(_BYTE *)(a1 + 40) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_62:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_46:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_73;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_73;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10161ACB0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 32), 1u);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 24), 5u);
  }
LABEL_10:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 4u);
  if ((*(_BYTE *)(v3 + 40) & 4) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 24), 5u);
  return result;
}

uint64_t sub_10161AD60(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2468;
  *(_DWORD *)(result + 92) = 0;
  return result;
}

void sub_10161AD78(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10161AD9C(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  *(_QWORD *)result = &off_1021C2468;
  *(_DWORD *)(result + 92) = 0;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x100) != 0)
  {
    v4 = *(_QWORD *)(a2 + 72);
    v3 = 256;
    *(_WORD *)(result + 92) = 256;
    *(_QWORD *)(result + 72) = v4;
    v2 = *(_WORD *)(a2 + 92);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(result + 92) = v3;
    *(_QWORD *)(result + 16) = v5;
    v2 = *(_WORD *)(a2 + 92);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *(_QWORD *)(a2 + 32);
    v3 |= 8u;
    *(_WORD *)(result + 92) = v3;
    *(_QWORD *)(result + 32) = v6;
    v2 = *(_WORD *)(a2 + 92);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 92) = v3;
  *(_QWORD *)(result + 40) = v7;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x800) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  v8 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 92) = v3;
  *(_QWORD *)(result + 8) = v8;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x800) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  v9 = *(_DWORD *)(a2 + 88);
  v3 |= 0x800u;
  *(_WORD *)(result + 92) = v3;
  *(_DWORD *)(result + 88) = v9;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  v10 = *(_DWORD *)(a2 + 84);
  v3 |= 0x400u;
  *(_WORD *)(result + 92) = v3;
  *(_DWORD *)(result + 84) = v10;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  v11 = *(_QWORD *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(result + 92) = v3;
  *(_QWORD *)(result + 64) = v11;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  v12 = *(_QWORD *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(result + 92) = v3;
  *(_QWORD *)(result + 48) = v12;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x40) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  v13 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 92) = v3;
  *(_QWORD *)(result + 24) = v13;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x40) == 0)
  {
LABEL_15:
    if ((v2 & 0x200) == 0)
      return result;
LABEL_26:
    v15 = *(_DWORD *)(a2 + 80);
    *(_WORD *)(result + 92) = v3 | 0x200;
    *(_DWORD *)(result + 80) = v15;
    return result;
  }
LABEL_25:
  v14 = *(_QWORD *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(result + 92) = v3;
  *(_QWORD *)(result + 56) = v14;
  if ((*(_WORD *)(a2 + 92) & 0x200) != 0)
    goto LABEL_26;
  return result;
}

uint64_t sub_10161AF08(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "distance", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 92);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "endTime", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "gpsSource", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "kvalue", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "kvalueTrack", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "percentGrade", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "runningFormStrideLength", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "runningFormStrideLengthMetrics", *(_DWORD *)(a1 + 80));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "session", *(_DWORD *)(a1 + 84));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0)
      goto LABEL_12;
LABEL_25:
    PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 72));
    if ((*(_WORD *)(a1 + 92) & 0x800) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(this, "speed", *(double *)(a1 + 64));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x100) != 0)
    goto LABEL_25;
LABEL_12:
  if ((v5 & 0x800) != 0)
LABEL_13:
    PB::TextFormatter::format(this, "steps", *(_DWORD *)(a1 + 88));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10161B0B8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 92) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 2u:
              *(_WORD *)(a1 + 92) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 3u:
              *(_WORD *)(a1 + 92) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 4u:
              *(_WORD *)(a1 + 92) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 5u:
              *(_WORD *)(a1 + 92) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 6u:
              *(_WORD *)(a1 + 92) |= 0x800u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_99;
                  }
                  v41 = v21++;
                  v42 = *(_BYTE *)(v22 + v41);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_98:
                    v2 = v41 + 1;
                    goto LABEL_99;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_98;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_99;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_99:
              *(_DWORD *)(a1 + 88) = v25;
              goto LABEL_110;
            case 7u:
              *(_WORD *)(a1 + 92) |= 0x400u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_104;
                  }
                  v45 = v27++;
                  v46 = *(_BYTE *)(v28 + v45);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_103:
                    v2 = v45 + 1;
                    goto LABEL_104;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_103;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_104;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_104:
              *(_DWORD *)(a1 + 84) = v31;
              goto LABEL_110;
            case 8u:
              *(_WORD *)(a1 + 92) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 9u:
              *(_WORD *)(a1 + 92) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0xAu:
              *(_WORD *)(a1 + 92) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0xBu:
              *(_WORD *)(a1 + 92) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_94:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_64:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_110;
            case 0xCu:
              *(_WORD *)(a1 + 92) |= 0x200u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_109;
                  }
                  v49 = v33++;
                  v50 = *(_BYTE *)(v34 + v49);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_108:
                    v2 = v49 + 1;
                    goto LABEL_109;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_108;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_109;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_109:
              *(_DWORD *)(a1 + 80) = v37;
LABEL_110:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_110;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10161B6F0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 92);
  if ((v4 & 0x100) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 72), 1u);
    v4 = *(_WORD *)(v3 + 92);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 3u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 4u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 5u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 6u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 84), 7u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 64), 8u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 48), 9u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 0xAu);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x40) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 0xCu);
  }
LABEL_24:
  result = PB::Writer::write(this, *(double *)(v3 + 56), 0xBu);
  if ((*(_WORD *)(v3 + 92) & 0x200) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 0xCu);
  return result;
}

uint64_t sub_10161B864(uint64_t result)
{
  *(_QWORD *)result = &off_1021C24A0;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

void sub_10161B87C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_10161B8A0(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  float result;
  char v7;
  int v8;
  int v9;

  *(_QWORD *)a1 = &off_1021C24A0;
  *(_DWORD *)(a1 + 56) = 0;
  v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_WORD *)(a1 + 56) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_WORD *)(a2 + 56);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 32);
    v3 |= 0x20u;
    *(_WORD *)(a1 + 56) = v3;
    *(_DWORD *)(a1 + 32) = v5;
    v2 = *(_WORD *)(a2 + 56);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    result = *(float *)(a2 + 20);
    v3 |= 4u;
    *(_WORD *)(a1 + 56) = v3;
    *(float *)(a1 + 20) = result;
    v2 = *(_WORD *)(a2 + 56);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  result = *(float *)(a2 + 28);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 56) = v3;
  *(float *)(a1 + 28) = result;
  v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  result = *(float *)(a2 + 24);
  v3 |= 8u;
  *(_WORD *)(a1 + 56) = v3;
  *(float *)(a1 + 24) = result;
  v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  result = *(float *)(a2 + 48);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 56) = v3;
  *(float *)(a1 + 48) = result;
  v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  result = *(float *)(a2 + 40);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 56) = v3;
  *(float *)(a1 + 40) = result;
  v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v7 = *(_BYTE *)(a2 + 52);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 56) = v3;
  *(_BYTE *)(a1 + 52) = v7;
  v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  v8 = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 16) = v8;
  v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x40) == 0)
      return result;
LABEL_24:
    result = *(float *)(a2 + 36);
    *(_WORD *)(a1 + 56) = v3 | 0x40;
    *(float *)(a1 + 36) = result;
    return result;
  }
LABEL_23:
  v9 = *(_DWORD *)(a2 + 44);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 44) = v9;
  if ((*(_WORD *)(a2 + 56) & 0x40) != 0)
    goto LABEL_24;
  return result;
}

uint64_t sub_10161B9F0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "classifierCall", *(_DWORD *)(a1 + 16));
    v5 = *(_WORD *)(a1 + 56);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "featureSlope", *(float *)(a1 + 20));
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "maxAccel", *(float *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "maxMinPressure", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "model", *(_DWORD *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "sCal", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "slopeNxCorr", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 1) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 1) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(this, "xCorr", *(float *)(a1 + 48));
    if ((*(_WORD *)(a1 + 56) & 0x400) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 8));
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x200) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x400) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "zoh", *(_BYTE *)(a1 + 52));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10161BB80(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 56) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_108;
                  }
                  v49 = v20++;
                  v50 = *(_BYTE *)(v21 + v49);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_107;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_107:
                v2 = v49 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_108;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_108:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_124;
            case 2u:
              *(_WORD *)(a1 + 56) |= 0x20u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_113;
                  }
                  v53 = v27++;
                  v54 = *(_BYTE *)(v28 + v53);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_112:
                    v2 = v53 + 1;
                    goto LABEL_113;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_112;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_113;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_113:
              *(_DWORD *)(a1 + 32) = v31;
              goto LABEL_124;
            case 3u:
              *(_WORD *)(a1 + 56) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_71;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 4u:
              *(_WORD *)(a1 + 56) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_71;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 5u:
              *(_WORD *)(a1 + 56) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_71;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 6u:
              *(_WORD *)(a1 + 56) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_71;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 7u:
              *(_WORD *)(a1 + 56) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_71;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 8u:
              *(_WORD *)(a1 + 56) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 52) = v34;
              goto LABEL_124;
            case 9u:
              *(_WORD *)(a1 + 56) |= 2u;
              v35 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v36 = *(_QWORD *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_118;
                  }
                  v57 = v35++;
                  v58 = *(_BYTE *)(v36 + v57);
                  *((_QWORD *)this + 1) = v35;
                  v39 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_117:
                    v2 = v57 + 1;
                    goto LABEL_118;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v39) = 0;
                goto LABEL_117;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)this + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_118;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_118:
              *(_DWORD *)(a1 + 16) = v39;
              goto LABEL_124;
            case 0xAu:
              *(_WORD *)(a1 + 56) |= 0x100u;
              v41 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v42 = *(_QWORD *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_123;
                  }
                  v61 = v41++;
                  v62 = *(_BYTE *)(v42 + v61);
                  *((_QWORD *)this + 1) = v41;
                  v45 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_122:
                    v2 = v61 + 1;
                    goto LABEL_123;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v45) = 0;
                goto LABEL_122;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)this + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_123;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_123:
              *(_DWORD *)(a1 + 44) = v45;
LABEL_124:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xBu:
              *(_WORD *)(a1 + 56) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_103:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_71:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_124;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_124;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10161C240(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 56);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 8), 1u);
    v4 = *(_WORD *)(v3 + 56);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 2u);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(float *)(v3 + 20), 3u);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 4u);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(float *)(v3 + 24), 5u);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(float *)(v3 + 48), 6u);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 40), 7u);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 52), 8u);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 9u);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 36), 0xBu);
  }
LABEL_22:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 44), 0xAu);
  if ((*(_WORD *)(v3 + 56) & 0x40) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 36), 0xBu);
  return result;
}

uint64_t sub_10161C398(uint64_t result)
{
  *(_QWORD *)result = &off_1021C24D8;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_10161C3B0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_10161C3D4(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_1021C24D8;
  *(_DWORD *)(a1 + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 8) != 0)
  {
    LODWORD(result) = *(_DWORD *)(a2 + 28);
    v3 = 8;
    *(_BYTE *)(a1 + 32) = 8;
    *(_DWORD *)(a1 + 28) = LODWORD(result);
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
  result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(a1 + 32) = v3;
  *(double *)(a1 + 8) = result;
  if ((*(_BYTE *)(a2 + 32) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_10161C460(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dirAngleRad", *(float *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "peakTimestamp", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "extremaVal", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "valleyTimestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10161C510(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_30;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_30:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_39;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_38;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_38:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_39:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10161C774(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 28), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  }
LABEL_8:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  return result;
}

uint64_t sub_10161C808(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2510;
  *(_DWORD *)(result + 36) = -1;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_10161C828(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10161C84C(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;

  *(_QWORD *)result = &off_1021C2510;
  *(_DWORD *)(result + 36) = -1;
  *(_DWORD *)(result + 44) = 0;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 2) != 0)
  {
    v4 = *(_QWORD *)(a2 + 16);
    v3 = 2;
    *(_BYTE *)(result + 44) = 2;
    *(_QWORD *)(result + 16) = v4;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 44) & 4) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(result + 44) = v3;
    *(_DWORD *)(result + 24) = v5;
    v2 = *(_BYTE *)(a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    v6 = *(_DWORD *)(a2 + 36);
    v3 |= 0x20u;
    *(_BYTE *)(result + 44) = v3;
    *(_DWORD *)(result + 36) = v6;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_BYTE *)(result + 44) = v3;
  *(_DWORD *)(result + 32) = v7;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  v8 = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(result + 44) = v3;
  *(_DWORD *)(result + 28) = v8;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      return result;
LABEL_16:
    v10 = *(_DWORD *)(a2 + 40);
    *(_BYTE *)(result + 44) = v3 | 0x40;
    *(_DWORD *)(result + 40) = v10;
    return result;
  }
LABEL_15:
  v9 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(result + 44) = v3;
  *(_QWORD *)(result + 8) = v9;
  if ((*(_BYTE *)(a2 + 44) & 0x40) != 0)
    goto LABEL_16;
  return result;
}

uint64_t sub_10161C934(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 44) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "peakHalfWidth", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "peakMagnitude", *(float *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "peakTime", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(this, "tapCounter", *(_DWORD *)(a1 + 40));
    if ((*(_BYTE *)(a1 + 44) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(this, "tapAcceptStatus", *(_DWORD *)(a1 + 36));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x40) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 2) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10161CA44(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 44) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_50;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_80;
            case 2u:
              *(_BYTE *)(a1 + 44) |= 4u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_86;
                  }
                  v41 = v21++;
                  v42 = *(_BYTE *)(v22 + v41);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_85:
                    v2 = v41 + 1;
                    goto LABEL_86;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_85;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_86;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_86:
              *(_DWORD *)(a1 + 24) = v25;
              goto LABEL_97;
            case 3u:
              *(_BYTE *)(a1 + 44) |= 0x20u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_91;
                  }
                  v45 = v27++;
                  v46 = *(_BYTE *)(v28 + v45);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_90:
                    v2 = v45 + 1;
                    goto LABEL_91;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_90;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_91;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_91:
              *(_DWORD *)(a1 + 36) = v31;
              goto LABEL_97;
            case 4u:
              *(_BYTE *)(a1 + 44) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_50;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_47;
            case 5u:
              *(_BYTE *)(a1 + 44) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_50;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_47:
              v2 = *((_QWORD *)this + 1) + 4;
              goto LABEL_81;
            case 6u:
              *(_BYTE *)(a1 + 44) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_80:
                v2 = *((_QWORD *)this + 1) + 8;
LABEL_81:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_50:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_97;
            case 7u:
              *(_BYTE *)(a1 + 44) |= 0x40u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_96;
                  }
                  v49 = v33++;
                  v50 = *(_BYTE *)(v34 + v49);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_95:
                    v2 = v49 + 1;
                    goto LABEL_96;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_95;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_96;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_96:
              *(_DWORD *)(a1 + 40) = v37;
LABEL_97:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_97;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10161CF6C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 44);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(result + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 3u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(float *)(v3 + 32), 4u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 5u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 7u);
  }
LABEL_14:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 6u);
  if ((*(_BYTE *)(v3 + 44) & 0x40) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 7u);
  return result;
}

double sub_10161D054(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021C2548;
  *(_DWORD *)(a1 + 28) = -2;
  result = NAN;
  *(_OWORD *)(a1 + 52) = xmmword_101CCA630;
  return result;
}

void sub_10161D07C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_10161D0A0(uint64_t a1, uint64_t a2)
{
  double result;
  __int16 v3;
  __int16 v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  *(_QWORD *)a1 = &off_1021C2548;
  *(_DWORD *)(a1 + 28) = -2;
  result = NAN;
  *(_OWORD *)(a1 + 52) = xmmword_101CCA630;
  v3 = *(_WORD *)(a2 + 64);
  if ((v3 & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    v4 = 2;
    *(_WORD *)(a1 + 64) = 2;
    *(double *)(a1 + 16) = result;
    v3 = *(_WORD *)(a2 + 64);
    if ((v3 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = 0;
  if ((v3 & 0x20) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 36);
    v4 |= 0x20u;
    *(_WORD *)(a1 + 64) = v4;
    *(_DWORD *)(a1 + 36) = v5;
    v3 = *(_WORD *)(a2 + 64);
  }
LABEL_6:
  if ((v3 & 0x400) != 0)
  {
    v6 = *(_DWORD *)(a2 + 56);
    v4 |= 0x400u;
    *(_WORD *)(a1 + 64) = v4;
    *(_DWORD *)(a1 + 56) = v6;
    v3 = *(_WORD *)(a2 + 64);
    if ((v3 & 4) == 0)
    {
LABEL_8:
      if ((v3 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
  }
  else if ((v3 & 4) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 24);
  v4 |= 4u;
  *(_WORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 24) = v7;
  v3 = *(_WORD *)(a2 + 64);
  if ((v3 & 0x10) == 0)
  {
LABEL_9:
    if ((v3 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  v8 = *(_DWORD *)(a2 + 32);
  v4 |= 0x10u;
  *(_WORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 32) = v8;
  v3 = *(_WORD *)(a2 + 64);
  if ((v3 & 0x200) == 0)
  {
LABEL_10:
    if ((v3 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  v9 = *(_DWORD *)(a2 + 52);
  v4 |= 0x200u;
  *(_WORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 52) = v9;
  v3 = *(_WORD *)(a2 + 64);
  if ((v3 & 0x800) == 0)
  {
LABEL_11:
    if ((v3 & 8) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  v10 = *(_DWORD *)(a2 + 60);
  v4 |= 0x800u;
  *(_WORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 60) = v10;
  v3 = *(_WORD *)(a2 + 64);
  if ((v3 & 8) == 0)
  {
LABEL_12:
    if ((v3 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  v11 = *(_DWORD *)(a2 + 28);
  v4 |= 8u;
  *(_WORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 28) = v11;
  v3 = *(_WORD *)(a2 + 64);
  if ((v3 & 0x100) == 0)
  {
LABEL_13:
    if ((v3 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  LODWORD(result) = *(_DWORD *)(a2 + 48);
  v4 |= 0x100u;
  *(_WORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 48) = LODWORD(result);
  v3 = *(_WORD *)(a2 + 64);
  if ((v3 & 0x80) == 0)
  {
LABEL_14:
    if ((v3 & 0x40) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  LODWORD(result) = *(_DWORD *)(a2 + 44);
  v4 |= 0x80u;
  *(_WORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 44) = LODWORD(result);
  v3 = *(_WORD *)(a2 + 64);
  if ((v3 & 0x40) == 0)
  {
LABEL_15:
    if ((v3 & 1) == 0)
      return result;
LABEL_26:
    result = *(double *)(a2 + 8);
    *(_WORD *)(a1 + 64) = v4 | 1;
    *(double *)(a1 + 8) = result;
    return result;
  }
LABEL_25:
  LODWORD(result) = *(_DWORD *)(a2 + 40);
  v4 |= 0x40u;
  *(_WORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 40) = LODWORD(result);
  if ((*(_WORD *)(a2 + 64) & 1) != 0)
    goto LABEL_26;
  return result;
}

uint64_t sub_10161D21C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "axis", *(_DWORD *)(a1 + 24));
    v5 = *(_WORD *)(a1 + 64);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "clippedPeakType", *(_DWORD *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "direction", *(_DWORD *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "peakHalfWidth", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "peakMagnitude", *(float *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "peakTime", *(double *)(a1 + 8));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "peakValue", *(float *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "strideDirection", *(_DWORD *)(a1 + 52));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0)
      goto LABEL_12;
LABEL_25:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
    if ((*(_WORD *)(a1 + 64) & 0x800) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(this, "tapDetectStatus", *(_DWORD *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 2) != 0)
    goto LABEL_25;
LABEL_12:
  if ((v5 & 0x800) != 0)
LABEL_13:
    PB::TextFormatter::format(this, "widthCalculationMethod", *(_DWORD *)(a1 + 60));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10161D3CC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  unint64_t v85;
  char v86;
  char v87;
  unsigned int v88;
  unint64_t v89;
  char v90;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 64) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_88;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_139;
            case 2u:
              *(_WORD *)(a1 + 64) |= 0x20u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_145;
                  }
                  v65 = v21++;
                  v66 = *(_BYTE *)(v22 + v65);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_144:
                    v2 = v65 + 1;
                    goto LABEL_145;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_144;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_145;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_145:
              *(_DWORD *)(a1 + 36) = v25;
              goto LABEL_176;
            case 3u:
              *(_WORD *)(a1 + 64) |= 0x400u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_150;
                  }
                  v69 = v27++;
                  v70 = *(_BYTE *)(v28 + v69);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_149:
                    v2 = v69 + 1;
                    goto LABEL_150;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_149;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_150;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_150:
              *(_DWORD *)(a1 + 56) = v31;
              goto LABEL_176;
            case 4u:
              *(_WORD *)(a1 + 64) |= 4u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_155;
                  }
                  v73 = v33++;
                  v74 = *(_BYTE *)(v34 + v73);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_154:
                    v2 = v73 + 1;
                    goto LABEL_155;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_154;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_155;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_155:
              *(_DWORD *)(a1 + 24) = v37;
              goto LABEL_176;
            case 5u:
              *(_WORD *)(a1 + 64) |= 0x10u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_160;
                  }
                  v77 = v39++;
                  v78 = *(_BYTE *)(v40 + v77);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_159:
                    v2 = v77 + 1;
                    goto LABEL_160;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_159;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_160;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_160:
              *(_DWORD *)(a1 + 32) = v43;
              goto LABEL_176;
            case 6u:
              *(_WORD *)(a1 + 64) |= 0x200u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v79 = 0;
                v80 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_165;
                  }
                  v81 = v45++;
                  v82 = *(_BYTE *)(v46 + v81);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0)
                    break;
                  v79 += 7;
                  v14 = v80++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_164:
                    v2 = v81 + 1;
                    goto LABEL_165;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_164;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_165;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_165:
              *(_DWORD *)(a1 + 52) = v49;
              goto LABEL_176;
            case 7u:
              *(_WORD *)(a1 + 64) |= 0x800u;
              v51 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v52 = *(_QWORD *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v83 = 0;
                v84 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_170;
                  }
                  v85 = v51++;
                  v86 = *(_BYTE *)(v52 + v85);
                  *((_QWORD *)this + 1) = v51;
                  v55 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0)
                    break;
                  v83 += 7;
                  v14 = v84++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_169:
                    v2 = v85 + 1;
                    goto LABEL_170;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v55) = 0;
                goto LABEL_169;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v2 = v51 + 1;
                *((_QWORD *)this + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_170;
                v53 += 7;
                v51 = v2;
                v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_170:
              *(_DWORD *)(a1 + 60) = v55;
              goto LABEL_176;
            case 8u:
              *(_WORD *)(a1 + 64) |= 8u;
              v57 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v58 = *(_QWORD *)this;
              if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
              {
                v87 = 0;
                v88 = 0;
                v61 = 0;
                if (v2 <= v57)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v57)
                  {
                    LODWORD(v61) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_175;
                  }
                  v89 = v57++;
                  v90 = *(_BYTE *)(v58 + v89);
                  *((_QWORD *)this + 1) = v57;
                  v61 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0)
                    break;
                  v87 += 7;
                  v14 = v88++ > 8;
                  if (v14)
                  {
                    LODWORD(v61) = 0;
LABEL_174:
                    v2 = v89 + 1;
                    goto LABEL_175;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v61) = 0;
                goto LABEL_174;
              }
              v59 = 0;
              v60 = 0;
              v61 = 0;
              do
              {
                v2 = v57 + 1;
                *((_QWORD *)this + 1) = v57 + 1;
                v62 = *(_BYTE *)(v58 + v57);
                v61 |= (unint64_t)(v62 & 0x7F) << v59;
                if ((v62 & 0x80) == 0)
                  goto LABEL_175;
                v59 += 7;
                v57 = v2;
                v14 = v60++ > 8;
              }
              while (!v14);
              LODWORD(v61) = 0;
LABEL_175:
              *(_DWORD *)(a1 + 28) = v61;
LABEL_176:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 9u:
              *(_WORD *)(a1 + 64) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_88;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_85;
            case 0xAu:
              *(_WORD *)(a1 + 64) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_88;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_85;
            case 0xBu:
              *(_WORD *)(a1 + 64) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_88;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_85:
              v2 = *((_QWORD *)this + 1) + 4;
              goto LABEL_140;
            case 0xCu:
              *(_WORD *)(a1 + 64) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_139:
                v2 = *((_QWORD *)this + 1) + 8;
LABEL_140:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_88:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_176;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_176;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10161DCDC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 64);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 2u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 3u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 4u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 5u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 52), 6u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 7u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 8u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 48), 9u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 44), 0xAu);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_12:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 8), 0xCu);
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 40), 0xBu);
  if ((*(_WORD *)(v3 + 64) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8), 0xCu);
  return result;
}

uint64_t sub_10161DE50(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2580;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_DWORD *)(result + 104) = 0;
  return result;
}

void sub_10161DE6C(PB::Base *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_1021C2580;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_10161DEC4(PB::Base *a1)
{
  sub_10161DE6C(a1);
  operator delete();
}

uint64_t sub_10161DEE8(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  uint64_t v5;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1021C2580;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  if (*(_QWORD *)(a2 + 80))
    operator new();
  if (a1 != a2)
    sub_1002A3054((char *)(a1 + 8), *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  v4 = *(_WORD *)(a2 + 104);
  if ((v4 & 0x80) != 0)
  {
    v7 = *(_DWORD *)(a2 + 92);
    *(_WORD *)(a1 + 104) |= 0x80u;
    *(_DWORD *)(a1 + 92) = v7;
    v4 = *(_WORD *)(a2 + 104);
    if ((v4 & 0x40) == 0)
    {
LABEL_7:
      if ((v4 & 0x100) == 0)
        goto LABEL_8;
      goto LABEL_19;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_7;
  }
  v8 = *(_DWORD *)(a2 + 88);
  *(_WORD *)(a1 + 104) |= 0x40u;
  *(_DWORD *)(a1 + 88) = v8;
  v4 = *(_WORD *)(a2 + 104);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  v9 = *(_DWORD *)(a2 + 96);
  *(_WORD *)(a1 + 104) |= 0x100u;
  *(_DWORD *)(a1 + 96) = v9;
  v4 = *(_WORD *)(a2 + 104);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  v10 = *(_DWORD *)(a2 + 100);
  *(_WORD *)(a1 + 104) |= 0x200u;
  *(_DWORD *)(a1 + 100) = v10;
  v4 = *(_WORD *)(a2 + 104);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  v11 = *(_QWORD *)(a2 + 40);
  *(_WORD *)(a1 + 104) |= 2u;
  *(_QWORD *)(a1 + 40) = v11;
  v4 = *(_WORD *)(a2 + 104);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  v12 = *(_QWORD *)(a2 + 48);
  *(_WORD *)(a1 + 104) |= 4u;
  *(_QWORD *)(a1 + 48) = v12;
  v4 = *(_WORD *)(a2 + 104);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  v13 = *(_QWORD *)(a2 + 64);
  *(_WORD *)(a1 + 104) |= 0x10u;
  *(_QWORD *)(a1 + 64) = v13;
  v4 = *(_WORD *)(a2 + 104);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0)
      goto LABEL_14;
LABEL_25:
    v15 = *(_QWORD *)(a2 + 32);
    *(_WORD *)(a1 + 104) |= 1u;
    *(_QWORD *)(a1 + 32) = v15;
    if ((*(_WORD *)(a2 + 104) & 8) == 0)
      return a1;
    goto LABEL_15;
  }
LABEL_24:
  v14 = *(_QWORD *)(a2 + 72);
  *(_WORD *)(a1 + 104) |= 0x20u;
  *(_QWORD *)(a1 + 72) = v14;
  v4 = *(_WORD *)(a2 + 104);
  if ((v4 & 1) != 0)
    goto LABEL_25;
LABEL_14:
  if ((v4 & 8) != 0)
  {
LABEL_15:
    v5 = *(_QWORD *)(a2 + 56);
    *(_WORD *)(a1 + 104) |= 8u;
    *(_QWORD *)(a1 + 56) = v5;
  }
  return a1;
}

uint64_t sub_10161E0DC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  __int16 v8;
  uint64_t v9;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_WORD *)(a1 + 104) & 1) != 0)
    PB::TextFormatter::format(this, "auxiliaryIosTimeUncertainty", *(double *)(a1 + 32));
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "filteredAcceleration", v7);
  }
  v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "quiescentMode", *(_DWORD *)(a1 + 88));
    v8 = *(_WORD *)(a1 + 104);
    if ((v8 & 0x80) == 0)
    {
LABEL_7:
      if ((v8 & 2) == 0)
        goto LABEL_8;
      goto LABEL_21;
    }
  }
  else if ((v8 & 0x80) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(this, "quiescentNoise", *(float *)(a1 + 92));
  v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 2) == 0)
  {
LABEL_8:
    if ((v8 & 4) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "sensorTimeBeforeAlignment", *(double *)(a1 + 40));
  v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 4) == 0)
  {
LABEL_9:
    if ((v8 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "sentCftime", *(double *)(a1 + 48));
  v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 0x100) == 0)
  {
LABEL_10:
    if ((v8 & 8) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "sequenceNumber", *(_DWORD *)(a1 + 96));
  v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 8) == 0)
  {
LABEL_11:
    if ((v8 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "sourceIosTimeUncertainty", *(double *)(a1 + 56));
  v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 0x10) == 0)
  {
LABEL_12:
    if ((v8 & 0x20) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_25:
  PB::TextFormatter::format(this, "sourceReceiveCftime", *(double *)(a1 + 64));
  if ((*(_WORD *)(a1 + 104) & 0x20) != 0)
LABEL_13:
    PB::TextFormatter::format(this, "sourceReceiveSensorTimestamp", *(double *)(a1 + 72));
LABEL_14:
  v9 = *(_QWORD *)(a1 + 80);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, this, "super");
  if ((*(_WORD *)(a1 + 104) & 0x200) != 0)
    PB::TextFormatter::format(this, "version", *(float *)(a1 + 100));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_10161E2A0(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  _DWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  _DWORD *v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  int v82;
  unint64_t v83;
  _BYTE v86[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v4 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          if ((_DWORD)v24 == 2)
          {
            if ((PB::Reader::placeMark(this, v86, v24, a4) & 1) != 0)
              return 0;
            v25 = *((_QWORD *)this + 1);
            v26 = *((_QWORD *)this + 2);
            while (v25 < v26 && !*((_BYTE *)this + 24))
            {
              v28 = *(char **)(a1 + 16);
              v27 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v28 >= v27)
              {
                v30 = (char *)*v10;
                v31 = (v28 - (_BYTE *)*v10) >> 2;
                v32 = v31 + 1;
                if ((unint64_t)(v31 + 1) >> 62)
                  goto LABEL_145;
                v33 = v27 - (_QWORD)v30;
                if (v33 >> 1 > v32)
                  v32 = v33 >> 1;
                if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
                  v34 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v34 = v32;
                if (v34)
                {
                  v35 = (char *)sub_100260634(v11, v34);
                  v30 = *(char **)(a1 + 8);
                  v28 = *(char **)(a1 + 16);
                }
                else
                {
                  v35 = 0;
                }
                v36 = &v35[4 * v31];
                *(_DWORD *)v36 = 0;
                v29 = v36 + 4;
                while (v28 != v30)
                {
                  v37 = *((_DWORD *)v28 - 1);
                  v28 -= 4;
                  *((_DWORD *)v36 - 1) = v37;
                  v36 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v36;
                *(_QWORD *)(a1 + 16) = v29;
                *(_QWORD *)(a1 + 24) = &v35[4 * v34];
                if (v30)
                  operator delete(v30);
              }
              else
              {
                *(_DWORD *)v28 = 0;
                v29 = v28 + 4;
              }
              *(_QWORD *)(a1 + 16) = v29;
              v38 = *((_QWORD *)this + 1);
              if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((_QWORD *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v29 - 1) = *(_DWORD *)(*(_QWORD *)this + v38);
              v26 = *((_QWORD *)this + 2);
              v25 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v25;
            }
            PB::Reader::recallMark(this, v86);
          }
          else
          {
            v65 = *(char **)(a1 + 16);
            v64 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v65 >= v64)
            {
              v75 = (char *)*v10;
              v76 = (v65 - (_BYTE *)*v10) >> 2;
              v77 = v76 + 1;
              if ((unint64_t)(v76 + 1) >> 62)
LABEL_145:
                sub_100259694();
              v78 = v64 - (_QWORD)v75;
              if (v78 >> 1 > v77)
                v77 = v78 >> 1;
              if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL)
                v79 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v79 = v77;
              if (v79)
              {
                v80 = (char *)sub_100260634(v11, v79);
                v75 = *(char **)(a1 + 8);
                v65 = *(char **)(a1 + 16);
              }
              else
              {
                v80 = 0;
              }
              v81 = &v80[4 * v76];
              *(_DWORD *)v81 = 0;
              v66 = v81 + 4;
              while (v65 != v75)
              {
                v82 = *((_DWORD *)v65 - 1);
                v65 -= 4;
                *((_DWORD *)v81 - 1) = v82;
                v81 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v81;
              *(_QWORD *)(a1 + 16) = v66;
              *(_QWORD *)(a1 + 24) = &v80[4 * v79];
              if (v75)
                operator delete(v75);
            }
            else
            {
              *(_DWORD *)v65 = 0;
              v66 = v65 + 4;
            }
            *(_QWORD *)(a1 + 16) = v66;
            v83 = *((_QWORD *)this + 1);
            if (v83 <= 0xFFFFFFFFFFFFFFFBLL && v83 + 4 <= *((_QWORD *)this + 2))
            {
              *(v66 - 1) = *(_DWORD *)(*(_QWORD *)this + v83);
LABEL_133:
              v63 = *((_QWORD *)this + 1) + 4;
LABEL_134:
              *((_QWORD *)this + 1) = v63;
            }
            else
            {
LABEL_131:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_135:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0)
            return v6 == 0;
          break;
        case 3u:
          *(_WORD *)(a1 + 104) |= 0x80u;
          v39 = *((_QWORD *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)this + 2))
            goto LABEL_131;
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v39);
          goto LABEL_133;
        case 4u:
          *(_WORD *)(a1 + 104) |= 0x40u;
          v40 = *((_QWORD *)this + 1);
          v41 = *((_QWORD *)this + 2);
          v42 = *(_QWORD *)this;
          if (v40 <= 0xFFFFFFFFFFFFFFF5 && v40 + 10 <= v41)
          {
            v43 = 0;
            v44 = 0;
            v45 = 0;
            do
            {
              v46 = v40 + 1;
              *((_QWORD *)this + 1) = v40 + 1;
              v47 = *(_BYTE *)(v42 + v40);
              v45 |= (unint64_t)(v47 & 0x7F) << v43;
              if ((v47 & 0x80) == 0)
                goto LABEL_118;
              v43 += 7;
              v40 = v46;
              v18 = v44++ > 8;
            }
            while (!v18);
LABEL_98:
            LODWORD(v45) = 0;
            goto LABEL_118;
          }
          v67 = 0;
          v68 = 0;
          v45 = 0;
          if (v41 <= v40)
            v41 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v41 == v40)
            {
              LODWORD(v45) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v69 = v40 + 1;
              v70 = *(_BYTE *)(v42 + v40);
              *((_QWORD *)this + 1) = v69;
              v45 |= (unint64_t)(v70 & 0x7F) << v67;
              if (v70 < 0)
              {
                v67 += 7;
                v40 = v69;
                v18 = v68++ > 8;
                if (v18)
                  goto LABEL_98;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v45) = 0;
            }
            break;
          }
LABEL_118:
          *(_DWORD *)(a1 + 88) = v45;
          goto LABEL_135;
        case 5u:
          *(_WORD *)(a1 + 104) |= 0x100u;
          v48 = *((_QWORD *)this + 1);
          v49 = *((_QWORD *)this + 2);
          v50 = *(_QWORD *)this;
          if (v48 <= 0xFFFFFFFFFFFFFFF5 && v48 + 10 <= v49)
          {
            v51 = 0;
            v52 = 0;
            v53 = 0;
            do
            {
              v54 = v48 + 1;
              *((_QWORD *)this + 1) = v48 + 1;
              v55 = *(_BYTE *)(v50 + v48);
              v53 |= (unint64_t)(v55 & 0x7F) << v51;
              if ((v55 & 0x80) == 0)
                goto LABEL_121;
              v51 += 7;
              v48 = v54;
              v18 = v52++ > 8;
            }
            while (!v18);
LABEL_105:
            LODWORD(v53) = 0;
            goto LABEL_121;
          }
          v71 = 0;
          v72 = 0;
          v53 = 0;
          if (v49 <= v48)
            v49 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v49 == v48)
            {
              LODWORD(v53) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v73 = v48 + 1;
              v74 = *(_BYTE *)(v50 + v48);
              *((_QWORD *)this + 1) = v73;
              v53 |= (unint64_t)(v74 & 0x7F) << v71;
              if (v74 < 0)
              {
                v71 += 7;
                v48 = v73;
                v18 = v72++ > 8;
                if (v18)
                  goto LABEL_105;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v53) = 0;
            }
            break;
          }
LABEL_121:
          *(_DWORD *)(a1 + 96) = v53;
          goto LABEL_135;
        case 6u:
          *(_WORD *)(a1 + 104) |= 0x200u;
          v56 = *((_QWORD *)this + 1);
          if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((_QWORD *)this + 2))
            goto LABEL_131;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v56);
          goto LABEL_133;
        case 7u:
          *(_WORD *)(a1 + 104) |= 2u;
          v57 = *((_QWORD *)this + 1);
          if (v57 > 0xFFFFFFFFFFFFFFF7 || v57 + 8 > *((_QWORD *)this + 2))
            goto LABEL_131;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v57);
          goto LABEL_89;
        case 8u:
          *(_WORD *)(a1 + 104) |= 4u;
          v58 = *((_QWORD *)this + 1);
          if (v58 > 0xFFFFFFFFFFFFFFF7 || v58 + 8 > *((_QWORD *)this + 2))
            goto LABEL_131;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v58);
          goto LABEL_89;
        case 9u:
          *(_WORD *)(a1 + 104) |= 0x10u;
          v59 = *((_QWORD *)this + 1);
          if (v59 > 0xFFFFFFFFFFFFFFF7 || v59 + 8 > *((_QWORD *)this + 2))
            goto LABEL_131;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v59);
          goto LABEL_89;
        case 0xAu:
          *(_WORD *)(a1 + 104) |= 0x20u;
          v60 = *((_QWORD *)this + 1);
          if (v60 > 0xFFFFFFFFFFFFFFF7 || v60 + 8 > *((_QWORD *)this + 2))
            goto LABEL_131;
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v60);
          goto LABEL_89;
        case 0xBu:
          *(_WORD *)(a1 + 104) |= 1u;
          v61 = *((_QWORD *)this + 1);
          if (v61 > 0xFFFFFFFFFFFFFFF7 || v61 + 8 > *((_QWORD *)this + 2))
            goto LABEL_131;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v61);
          goto LABEL_89;
        case 0xCu:
          *(_WORD *)(a1 + 104) |= 8u;
          v62 = *((_QWORD *)this + 1);
          if (v62 > 0xFFFFFFFFFFFFFFF7 || v62 + 8 > *((_QWORD *)this + 2))
            goto LABEL_131;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v62);
LABEL_89:
          v63 = *((_QWORD *)this + 1) + 8;
          goto LABEL_134;
        default:
          if ((PB::Reader::skip(this, v15 >> 3, v15 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_135;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v21 = v4 + 1;
      v22 = *(_BYTE *)(v12 + v4);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v4 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_10161EA2C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  float *v5;
  float *v6;
  float v7;
  __int16 v8;

  v3 = result;
  v4 = *(const PB::Base **)(result + 80);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4, 1u);
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7, 2u);
  }
  v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x80) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 92), 3u);
    v8 = *(_WORD *)(v3 + 104);
    if ((v8 & 0x40) == 0)
    {
LABEL_8:
      if ((v8 & 0x100) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
  }
  else if ((v8 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 4u);
  v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x100) == 0)
  {
LABEL_9:
    if ((v8 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 96), 5u);
  v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x200) == 0)
  {
LABEL_10:
    if ((v8 & 2) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(float *)(v3 + 100), 6u);
  v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 2) == 0)
  {
LABEL_11:
    if ((v8 & 4) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 7u);
  v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 4) == 0)
  {
LABEL_12:
    if ((v8 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 48), 8u);
  v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x10) == 0)
  {
LABEL_13:
    if ((v8 & 0x20) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(double *)(v3 + 64), 9u);
  v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x20) == 0)
  {
LABEL_14:
    if ((v8 & 1) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(double *)(v3 + 72), 0xAu);
  v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 1) == 0)
  {
LABEL_15:
    if ((v8 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 56), 0xCu);
  }
LABEL_25:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 0xBu);
  if ((*(_WORD *)(v3 + 104) & 8) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 56), 0xCu);
  return result;
}

uint64_t sub_10161EBA8(uint64_t result)
{
  *(_QWORD *)result = &off_1021C25B8;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 96) = 0;
  return result;
}

void sub_10161EBC0(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_1021C25B8;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_10161EC00(PB::Base *a1)
{
  sub_10161EBC0(a1);
  operator delete();
}

uint64_t sub_10161EC24(uint64_t a1, uint64_t a2)
{
  char *v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  int v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  int v13;
  char v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)a1 = &off_1021C25B8;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (char *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  v5 = *(_WORD *)(a2 + 96);
  if ((v5 & 0x10) != 0)
  {
    v7 = *(_QWORD *)(a2 + 64);
    v6 = 16;
    *(_WORD *)(a1 + 96) = 16;
    *(_QWORD *)(a1 + 64) = v7;
    v5 = *(_WORD *)(a2 + 96);
    if ((v5 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*(_WORD *)(a2 + 96) & 0x200) != 0)
  {
LABEL_5:
    v8 = *(_DWORD *)(a2 + 88);
    v6 |= 0x200u;
    *(_WORD *)(a1 + 96) = v6;
    *(_DWORD *)(a1 + 88) = v8;
    v5 = *(_WORD *)(a2 + 96);
  }
LABEL_6:
  if ((v5 & 0x80) == 0)
  {
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  v13 = *(_DWORD *)(a2 + 80);
  v6 |= 0x80u;
  *(_WORD *)(a1 + 96) = v6;
  *(_DWORD *)(a1 + 80) = v13;
  if ((*(_WORD *)(a2 + 96) & 0x100) != 0)
  {
LABEL_8:
    v9 = *(_DWORD *)(a2 + 84);
    *(_WORD *)(a1 + 96) = v6 | 0x100;
    *(_DWORD *)(a1 + 84) = v9;
  }
LABEL_9:
  if (a1 != a2)
    sub_1002A3054(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  v10 = *(_WORD *)(a2 + 96);
  if ((v10 & 0x400) != 0)
  {
    v14 = *(_BYTE *)(a2 + 92);
    *(_WORD *)(a1 + 96) |= 0x400u;
    *(_BYTE *)(a1 + 92) = v14;
    v10 = *(_WORD *)(a2 + 96);
    if ((v10 & 0x20) == 0)
    {
LABEL_13:
      if ((v10 & 0x40) == 0)
        goto LABEL_14;
      goto LABEL_24;
    }
  }
  else if ((v10 & 0x20) == 0)
  {
    goto LABEL_13;
  }
  v15 = *(_DWORD *)(a2 + 72);
  *(_WORD *)(a1 + 96) |= 0x20u;
  *(_DWORD *)(a1 + 72) = v15;
  v10 = *(_WORD *)(a2 + 96);
  if ((v10 & 0x40) == 0)
  {
LABEL_14:
    if ((v10 & 8) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  v16 = *(_DWORD *)(a2 + 76);
  *(_WORD *)(a1 + 96) |= 0x40u;
  *(_DWORD *)(a1 + 76) = v16;
  v10 = *(_WORD *)(a2 + 96);
  if ((v10 & 8) == 0)
  {
LABEL_15:
    if ((v10 & 1) == 0)
      goto LABEL_16;
    goto LABEL_26;
  }
LABEL_25:
  v17 = *(_QWORD *)(a2 + 56);
  *(_WORD *)(a1 + 96) |= 8u;
  *(_QWORD *)(a1 + 56) = v17;
  v10 = *(_WORD *)(a2 + 96);
  if ((v10 & 1) == 0)
  {
LABEL_16:
    if ((v10 & 4) == 0)
      goto LABEL_17;
LABEL_27:
    v19 = *(_QWORD *)(a2 + 48);
    *(_WORD *)(a1 + 96) |= 4u;
    *(_QWORD *)(a1 + 48) = v19;
    if ((*(_WORD *)(a2 + 96) & 2) == 0)
      return a1;
    goto LABEL_18;
  }
LABEL_26:
  v18 = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 96) |= 1u;
  *(_QWORD *)(a1 + 32) = v18;
  v10 = *(_WORD *)(a2 + 96);
  if ((v10 & 4) != 0)
    goto LABEL_27;
LABEL_17:
  if ((v10 & 2) != 0)
  {
LABEL_18:
    v11 = *(_QWORD *)(a2 + 40);
    *(_WORD *)(a1 + 96) |= 2u;
    *(_QWORD *)(a1 + 40) = v11;
  }
  return a1;
}

uint64_t sub_10161EDD4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;
  float *v6;
  float *v7;
  float v8;
  __int16 v9;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "angularVelocityConstraintRps", *(float *)(a1 + 72));
    v5 = *(_WORD *)(a1 + 96);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "consumedAuxTimestamp", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "dthetaNormRad", *(float *)(a1 + 76));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x400) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "inBTZ", *(_BYTE *)(a1 + 92));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "listenerPitch", *(float *)(a1 + 80));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x200) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "listenerRoll", *(float *)(a1 + 84));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x200) == 0)
  {
LABEL_8:
    if ((v5 & 2) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_23:
  PB::TextFormatter::format(this, "listenerYaw", *(float *)(a1 + 88));
  if ((*(_WORD *)(a1 + 96) & 2) != 0)
LABEL_9:
    PB::TextFormatter::format(this, "machAbsTimestamp", *(double *)(a1 + 40));
LABEL_10:
  v6 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "quaternion", v8);
  }
  v9 = *(_WORD *)(a1 + 96);
  if ((v9 & 4) == 0)
  {
    if ((v9 & 8) == 0)
      goto LABEL_14;
LABEL_26:
    PB::TextFormatter::format(this, "srcTimestamp", *(double *)(a1 + 56));
    if ((*(_WORD *)(a1 + 96) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_15;
  }
  PB::TextFormatter::format(this, "receivedAuxTimestamp", *(double *)(a1 + 48));
  v9 = *(_WORD *)(a1 + 96);
  if ((v9 & 8) != 0)
    goto LABEL_26;
LABEL_14:
  if ((v9 & 0x10) != 0)
LABEL_15:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 64));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_10161EFA0(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  _DWORD *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  BOOL v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  _DWORD *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  int v64;
  unint64_t v65;
  _BYTE v67[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v4 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 96) |= 0x10u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_104;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v25);
          goto LABEL_81;
        case 2u:
          *(_WORD *)(a1 + 96) |= 0x200u;
          v26 = *((_QWORD *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((_QWORD *)this + 2))
            goto LABEL_104;
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v26);
          goto LABEL_106;
        case 3u:
          *(_WORD *)(a1 + 96) |= 0x80u;
          v27 = *((_QWORD *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((_QWORD *)this + 2))
            goto LABEL_104;
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v27);
          goto LABEL_106;
        case 4u:
          *(_WORD *)(a1 + 96) |= 0x100u;
          v28 = *((_QWORD *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((_QWORD *)this + 2))
            goto LABEL_104;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v28);
          goto LABEL_106;
        case 5u:
          if ((_DWORD)v24 == 2)
          {
            if ((PB::Reader::placeMark(this, v67, v24, a4) & 1) != 0)
              return 0;
            v29 = *((_QWORD *)this + 1);
            v30 = *((_QWORD *)this + 2);
            while (v29 < v30 && !*((_BYTE *)this + 24))
            {
              v32 = *(char **)(a1 + 16);
              v31 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v32 >= v31)
              {
                v34 = (char *)*v10;
                v35 = (v32 - (_BYTE *)*v10) >> 2;
                v36 = v35 + 1;
                if ((unint64_t)(v35 + 1) >> 62)
                  goto LABEL_116;
                v37 = v31 - (_QWORD)v34;
                if (v37 >> 1 > v36)
                  v36 = v37 >> 1;
                if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
                  v38 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v38 = v36;
                if (v38)
                {
                  v39 = (char *)sub_100260634(v11, v38);
                  v34 = *(char **)(a1 + 8);
                  v32 = *(char **)(a1 + 16);
                }
                else
                {
                  v39 = 0;
                }
                v40 = &v39[4 * v35];
                *(_DWORD *)v40 = 0;
                v33 = v40 + 4;
                while (v32 != v34)
                {
                  v41 = *((_DWORD *)v32 - 1);
                  v32 -= 4;
                  *((_DWORD *)v40 - 1) = v41;
                  v40 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v40;
                *(_QWORD *)(a1 + 16) = v33;
                *(_QWORD *)(a1 + 24) = &v39[4 * v38];
                if (v34)
                  operator delete(v34);
              }
              else
              {
                *(_DWORD *)v32 = 0;
                v33 = v32 + 4;
              }
              *(_QWORD *)(a1 + 16) = v33;
              v42 = *((_QWORD *)this + 1);
              if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((_QWORD *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v33 - 1) = *(_DWORD *)(*(_QWORD *)this + v42);
              v30 = *((_QWORD *)this + 2);
              v29 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v29;
            }
            PB::Reader::recallMark(this, v67);
          }
          else
          {
            v55 = *(char **)(a1 + 16);
            v54 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v55 >= v54)
            {
              v57 = (char *)*v10;
              v58 = (v55 - (_BYTE *)*v10) >> 2;
              v59 = v58 + 1;
              if ((unint64_t)(v58 + 1) >> 62)
LABEL_116:
                sub_100259694();
              v60 = v54 - (_QWORD)v57;
              if (v60 >> 1 > v59)
                v59 = v60 >> 1;
              if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
                v61 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v61 = v59;
              if (v61)
              {
                v62 = (char *)sub_100260634(v11, v61);
                v57 = *(char **)(a1 + 8);
                v55 = *(char **)(a1 + 16);
              }
              else
              {
                v62 = 0;
              }
              v63 = &v62[4 * v58];
              *(_DWORD *)v63 = 0;
              v56 = v63 + 4;
              while (v55 != v57)
              {
                v64 = *((_DWORD *)v55 - 1);
                v55 -= 4;
                *((_DWORD *)v63 - 1) = v64;
                v63 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v63;
              *(_QWORD *)(a1 + 16) = v56;
              *(_QWORD *)(a1 + 24) = &v62[4 * v61];
              if (v57)
                operator delete(v57);
            }
            else
            {
              *(_DWORD *)v55 = 0;
              v56 = v55 + 4;
            }
            *(_QWORD *)(a1 + 16) = v56;
            v65 = *((_QWORD *)this + 1);
            if (v65 <= 0xFFFFFFFFFFFFFFFBLL && v65 + 4 <= *((_QWORD *)this + 2))
            {
              *(v56 - 1) = *(_DWORD *)(*(_QWORD *)this + v65);
LABEL_106:
              v53 = *((_QWORD *)this + 1) + 4;
LABEL_107:
              *((_QWORD *)this + 1) = v53;
            }
            else
            {
LABEL_104:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_108:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || *((_BYTE *)this + 24))
            return v6 == 0;
          break;
        case 6u:
          *(_WORD *)(a1 + 96) |= 0x400u;
          v43 = *((_QWORD *)this + 1);
          if (v43 >= *((_QWORD *)this + 2))
          {
            v46 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v44 = v43 + 1;
            v45 = *(unsigned __int8 *)(*(_QWORD *)this + v43);
            *((_QWORD *)this + 1) = v44;
            v46 = v45 != 0;
          }
          *(_BYTE *)(a1 + 92) = v46;
          goto LABEL_108;
        case 7u:
          *(_WORD *)(a1 + 96) |= 0x20u;
          v47 = *((_QWORD *)this + 1);
          if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((_QWORD *)this + 2))
            goto LABEL_104;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v47);
          goto LABEL_106;
        case 8u:
          *(_WORD *)(a1 + 96) |= 0x40u;
          v48 = *((_QWORD *)this + 1);
          if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((_QWORD *)this + 2))
            goto LABEL_104;
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v48);
          goto LABEL_106;
        case 9u:
          *(_WORD *)(a1 + 96) |= 8u;
          v49 = *((_QWORD *)this + 1);
          if (v49 > 0xFFFFFFFFFFFFFFF7 || v49 + 8 > *((_QWORD *)this + 2))
            goto LABEL_104;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v49);
          goto LABEL_81;
        case 0xAu:
          *(_WORD *)(a1 + 96) |= 1u;
          v50 = *((_QWORD *)this + 1);
          if (v50 > 0xFFFFFFFFFFFFFFF7 || v50 + 8 > *((_QWORD *)this + 2))
            goto LABEL_104;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v50);
          goto LABEL_81;
        case 0xBu:
          *(_WORD *)(a1 + 96) |= 4u;
          v51 = *((_QWORD *)this + 1);
          if (v51 > 0xFFFFFFFFFFFFFFF7 || v51 + 8 > *((_QWORD *)this + 2))
            goto LABEL_104;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v51);
          goto LABEL_81;
        case 0xCu:
          *(_WORD *)(a1 + 96) |= 2u;
          v52 = *((_QWORD *)this + 1);
          if (v52 > 0xFFFFFFFFFFFFFFF7 || v52 + 8 > *((_QWORD *)this + 2))
            goto LABEL_104;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v52);
LABEL_81:
          v53 = *((_QWORD *)this + 1) + 8;
          goto LABEL_107;
        default:
          if ((PB::Reader::skip(this, v15 >> 3, v15 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_108;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v21 = v4 + 1;
      v22 = *(_BYTE *)(v12 + v4);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v4 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_10161F5B0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;
  float *v5;
  float *v6;
  float v7;
  __int16 v8;

  v3 = result;
  v4 = *(_WORD *)(result + 96);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 64), 1u);
    v4 = *(_WORD *)(v3 + 96);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0)
        goto LABEL_4;
LABEL_19:
      result = PB::Writer::write(this, *(float *)(v3 + 80), 3u);
      if ((*(_WORD *)(v3 + 96) & 0x100) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((*(_WORD *)(result + 96) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 88), 2u);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x80) != 0)
    goto LABEL_19;
LABEL_4:
  if ((v4 & 0x100) != 0)
LABEL_5:
    result = PB::Writer::write(this, *(float *)(v3 + 84), 4u);
LABEL_6:
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7, 5u);
  }
  v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 0x400) != 0)
  {
    result = PB::Writer::write(this, *(_BYTE *)(v3 + 92), 6u);
    v8 = *(_WORD *)(v3 + 96);
    if ((v8 & 0x20) == 0)
    {
LABEL_11:
      if ((v8 & 0x40) == 0)
        goto LABEL_12;
      goto LABEL_23;
    }
  }
  else if ((v8 & 0x20) == 0)
  {
    goto LABEL_11;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 72), 7u);
  v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 0x40) == 0)
  {
LABEL_12:
    if ((v8 & 8) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 76), 8u);
  v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 8) == 0)
  {
LABEL_13:
    if ((v8 & 1) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(double *)(v3 + 56), 9u);
  v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 1) == 0)
  {
LABEL_14:
    if ((v8 & 4) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 0xAu);
  v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 4) == 0)
  {
LABEL_15:
    if ((v8 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 40), 0xCu);
  }
LABEL_26:
  result = PB::Writer::write(this, *(double *)(v3 + 48), 0xBu);
  if ((*(_WORD *)(v3 + 96) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 40), 0xCu);
  return result;
}

_QWORD *sub_10161F734(_QWORD *result)
{
  *result = &off_1021C25F0;
  result[2] = 0;
  return result;
}

void sub_10161F74C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10161F770(uint64_t result, uint64_t a2)
{
  char v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)result = &off_1021C25F0;
  *(_QWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    v3 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = 2;
    *(_DWORD *)(result + 16) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
LABEL_5:
    v4 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = v2;
    *(_QWORD *)(result + 8) = v4;
  }
  return result;
}

uint64_t sub_10161F7C0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "source", *(_DWORD *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10161F828(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)this + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v27 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v28 = *(_QWORD *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v27)
            {
              v31 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_64;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)this + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              v31 = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)this + 24))
            v31 = 0;
LABEL_63:
          v3 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v3 = v27 + 1;
            *((_QWORD *)this + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v3;
            v14 = v30++ > 8;
            if (v14)
            {
              v31 = 0;
              break;
            }
          }
        }
LABEL_64:
        *(_QWORD *)(a1 + 8) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_60;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_59:
          v3 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v3 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v3;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_60:
        *(_DWORD *)(a1 + 16) = v25;
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10161FB50(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 16), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 8), 2u);
  return result;
}

uint64_t sub_10161FBA8(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2628;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_10161FBC0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10161FBE4(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)result = &off_1021C2628;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_10161FC34(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "touchDetected", *(_BYTE *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10161FC9C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  int v21;
  BOOL v22;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 >= *((_QWORD *)this + 2))
        {
          v22 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v22 = v21 != 0;
        }
        *(_BYTE *)(a1 + 16) = v22;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10161FE80(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 16), 2u);
  return result;
}

uint64_t sub_10161FED8(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2660;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_10161FEF0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10161FF14(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  char v10;

  *(_QWORD *)result = &off_1021C2660;
  *(_DWORD *)(result + 40) = 0;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x10) != 0)
  {
    v4 = *(_DWORD *)(a2 + 28);
    v3 = 16;
    *(_BYTE *)(result + 40) = 16;
    *(_DWORD *)(result + 28) = v4;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(result + 40) = v3;
    *(_DWORD *)(result + 20) = v5;
    v2 = *(_BYTE *)(a2 + 40);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(result + 40) = v3;
    *(_DWORD *)(result + 24) = v6;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(result + 40) = v3;
  *(_DWORD *)(result + 16) = v7;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  v8 = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_BYTE *)(result + 40) = v3;
  *(_DWORD *)(result + 32) = v8;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      return result;
LABEL_16:
    v10 = *(_BYTE *)(a2 + 36);
    *(_BYTE *)(result + 40) = v3 | 0x40;
    *(_BYTE *)(result + 36) = v10;
    return result;
  }
LABEL_15:
  v9 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(result + 40) = v3;
  *(_QWORD *)(result + 8) = v9;
  if ((*(_BYTE *)(a2 + 40) & 0x40) != 0)
    goto LABEL_16;
  return result;
}

uint64_t sub_10161FFF4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "distanceToTrackMeters", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "estimatedLaneConfidence", *(_DWORD *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "estimatedLaneNumber", *(_DWORD *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "laneCount", *(_DWORD *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(this, "odometerHasBeenCorrected", *(_BYTE *)(a1 + 36));
    if ((*(_BYTE *)(a1 + 40) & 0x20) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(this, "laneNumber", *(_DWORD *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x40) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x20) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "trackProximity", *(_DWORD *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101620104(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  int v51;
  BOOL v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 40) |= 0x10u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_106;
                  }
                  v55 = v20++;
                  v56 = *(_BYTE *)(v21 + v55);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_105;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v24) = 0;
LABEL_105:
                v2 = v55 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_106;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_106:
              *(_DWORD *)(a1 + 28) = v24;
              goto LABEL_127;
            case 2u:
              *(_BYTE *)(a1 + 40) |= 4u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_111;
                  }
                  v59 = v27++;
                  v60 = *(_BYTE *)(v28 + v59);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_110:
                    v2 = v59 + 1;
                    goto LABEL_111;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_110;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_111;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_111:
              *(_DWORD *)(a1 + 20) = v31;
              goto LABEL_127;
            case 3u:
              *(_BYTE *)(a1 + 40) |= 8u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v61 = 0;
                v62 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_116;
                  }
                  v63 = v33++;
                  v64 = *(_BYTE *)(v34 + v63);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_115:
                    v2 = v63 + 1;
                    goto LABEL_116;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_115;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_116;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_116:
              *(_DWORD *)(a1 + 24) = v37;
              goto LABEL_127;
            case 4u:
              *(_BYTE *)(a1 + 40) |= 2u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v65 = 0;
                v66 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_121;
                  }
                  v67 = v39++;
                  v68 = *(_BYTE *)(v40 + v67);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0)
                    break;
                  v65 += 7;
                  v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_120:
                    v2 = v67 + 1;
                    goto LABEL_121;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_120;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_121;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_121:
              *(_DWORD *)(a1 + 16) = v43;
              goto LABEL_127;
            case 5u:
              *(_BYTE *)(a1 + 40) |= 0x20u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v69 = 0;
                v70 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_126;
                  }
                  v71 = v45++;
                  v72 = *(_BYTE *)(v46 + v71);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0)
                    break;
                  v69 += 7;
                  v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_125:
                    v2 = v71 + 1;
                    goto LABEL_126;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_125;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_126;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_126:
              *(_DWORD *)(a1 + 32) = v49;
LABEL_127:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 6u:
              *(_BYTE *)(a1 + 40) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_127;
            case 7u:
              *(_BYTE *)(a1 + 40) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v52 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v51 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v52 = v51 != 0;
              }
              *(_BYTE *)(a1 + 36) = v52;
              goto LABEL_127;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_127;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101620798(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 28), 1u);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 2u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 3u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 4u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 5u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      return result;
    return PB::Writer::write(this, *(_BYTE *)(v3 + 36), 7u);
  }
LABEL_14:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 6u);
  if ((*(_BYTE *)(v3 + 40) & 0x40) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 36), 7u);
  return result;
}

uint64_t sub_101620880(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2698;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

void sub_101620898(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_1016208BC(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_1021C2698;
  *(_DWORD *)(a1 + 56) = 0;
  v2 = *(_BYTE *)(a2 + 56);
  if ((v2 & 8) != 0)
  {
    result = *(double *)(a2 + 32);
    v3 = 8;
    *(_BYTE *)(a1 + 56) = 8;
    *(double *)(a1 + 32) = result;
    v2 = *(_BYTE *)(a2 + 56);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 56) & 4) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 56) = v3;
    *(double *)(a1 + 24) = result;
    v2 = *(_BYTE *)(a2 + 56);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    v5 = *(_QWORD *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(a1 + 56) = v3;
    *(_QWORD *)(a1 + 8) = v5;
    v2 = *(_BYTE *)(a2 + 56);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(a1 + 56) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  v2 = *(_BYTE *)(a2 + 56);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_14:
    result = *(double *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = v3 | 0x20;
    *(double *)(a1 + 48) = result;
    return result;
  }
LABEL_13:
  result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_BYTE *)(a1 + 56) = v3;
  *(double *)(a1 + 40) = result;
  if ((*(_BYTE *)(a2 + 56) & 0x20) != 0)
    goto LABEL_14;
  return result;
}

uint64_t sub_101620980(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "cycleIndex", *(_QWORD *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 56);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(a1 + 56) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "error", *(_QWORD *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(this, "machAbsoluteTimestamp", *(double *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(this, "range", *(double *)(a1 + 40));
    if ((*(_BYTE *)(a1 + 56) & 0x20) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(this, "machContinuousTimestamp", *(double *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 0x10) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x20) != 0)
LABEL_7:
    PB::TextFormatter::format(this, "rssi", *(double *)(a1 + 48));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101620A70(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 56) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_49;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_65;
            case 2u:
              *(_BYTE *)(a1 + 56) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_49;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_65;
            case 3u:
              *(_BYTE *)(a1 + 56) |= 1u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    v25 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_70;
                  }
                  v35 = v21++;
                  v36 = *(_BYTE *)(v22 + v35);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    v25 = 0;
LABEL_69:
                    v2 = v35 + 1;
                    goto LABEL_70;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v25 = 0;
                goto LABEL_69;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_70;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              v25 = 0;
LABEL_70:
              *(_QWORD *)(a1 + 8) = v25;
              goto LABEL_76;
            case 4u:
              *(_BYTE *)(a1 + 56) |= 2u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_75;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_74:
                    v2 = v39 + 1;
                    goto LABEL_75;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_74;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_75;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_75:
              *(_QWORD *)(a1 + 16) = v31;
LABEL_76:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 5u:
              *(_BYTE *)(a1 + 56) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_49;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_65;
            case 6u:
              *(_BYTE *)(a1 + 56) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_65:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_49:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_76;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_76;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101620EA4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 56);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    v4 = *(_BYTE *)(v3 + 56);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(result + 56) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 8), 3u);
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 16), 4u);
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 48), 6u);
  }
LABEL_12:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 5u);
  if ((*(_BYTE *)(v3 + 56) & 0x20) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 48), 6u);
  return result;
}

uint64_t sub_101620F70(uint64_t result)
{
  *(_QWORD *)result = off_1021C26D0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_101620F88(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1021C26D0;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_101620FCC(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1021C26D0;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t sub_101621024(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)result = off_1021C26D0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  if (*(_QWORD *)(a2 + 16))
    operator new();
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    v2 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 24) |= 1u;
    *(_QWORD *)(result + 8) = v2;
  }
  return result;
}

uint64_t sub_1016210C4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    PB::TextFormatter::format(this, "aopTimestamp", *(_QWORD *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101621130(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v21 = *((_QWORD *)this + 1);
        v22 = *((_QWORD *)this + 2);
        v23 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          v30 = 0;
          v31 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v22 == v21)
            {
              v26 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }
            v32 = v21 + 1;
            v33 = *(_BYTE *)(v23 + v21);
            *((_QWORD *)this + 1) = v32;
            v26 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v21 = v32;
            v14 = v31++ > 8;
            if (v14)
            {
LABEL_39:
              v26 = 0;
              goto LABEL_43;
            }
          }
          if (*((_BYTE *)this + 24))
            v26 = 0;
        }
        else
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (1)
          {
            v27 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v28 = *(_BYTE *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0)
              break;
            v24 += 7;
            v21 = v27;
            v14 = v25++ > 8;
            if (v14)
              goto LABEL_39;
          }
        }
LABEL_43:
        *(_QWORD *)(a1 + 8) = v26;
      }
      else
      {
        if ((_DWORD)v20 == 1)
          operator new();
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1016213E8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = result;
  v4 = *(const PB::Base **)(result + 16);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4, 1u);
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
    return PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 8), 2u);
  return result;
}

uint64_t sub_10162143C(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2708;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_101621450(PB::Base *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1021C2708;
  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_1006B3398((uint64_t)v2, v3);
  PB::Base::~Base(this);
}

void sub_101621490(PB::Base *a1)
{
  sub_101621450(a1);
  operator delete();
}

uint64_t sub_1016214B4(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)result = &off_1021C2708;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    v2 = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(result + 24) = 1;
    *(_QWORD *)(result + 16) = v2;
  }
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_10162157C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(_QWORD *)(a1 + 8))
    PB::TextFormatter::format(this, "event");
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016215E0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
        operator new();
      if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v21 = *((_QWORD *)this + 1);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v21);
          *((_QWORD *)this + 1) += 8;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1016217E4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  if ((*(_BYTE *)(result + 24) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 16), 1u);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4)
    return PB::Writer::write(this, v4, 2);
  return result;
}

double sub_101621838(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021C2740;
  *(_QWORD *)(a1 + 336) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  return result;
}

void sub_101621898(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  *(_QWORD *)this = &off_1021C2740;
  v2 = (void *)*((_QWORD *)this + 34);
  if (v2)
  {
    *((_QWORD *)this + 35) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 31);
  if (v3)
  {
    *((_QWORD *)this + 32) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 28);
  if (v4)
  {
    *((_QWORD *)this + 29) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 25);
  if (v5)
  {
    *((_QWORD *)this + 26) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 22);
  if (v6)
  {
    *((_QWORD *)this + 23) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 19);
  if (v7)
  {
    *((_QWORD *)this + 20) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 16);
  if (v8)
  {
    *((_QWORD *)this + 17) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 13);
  if (v9)
  {
    *((_QWORD *)this + 14) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 10);
  if (v10)
  {
    *((_QWORD *)this + 11) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 7);
  if (v11)
  {
    *((_QWORD *)this + 8) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 4);
  if (v12)
  {
    *((_QWORD *)this + 5) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 1);
  if (v13)
  {
    *((_QWORD *)this + 2) = v13;
    operator delete(v13);
  }
  PB::Base::~Base(this);
}

void sub_101621988(PB::Base *a1)
{
  sub_101621898(a1);
  operator delete();
}

uint64_t sub_1016219AC(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  int v17;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)a1 = &off_1021C2740;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = (char *)(a1 + 56);
  *(_OWORD *)(a1 + 104) = 0u;
  v6 = (char *)(a1 + 104);
  *(_OWORD *)(a1 + 152) = 0u;
  v7 = (char *)(a1 + 152);
  *(_OWORD *)(a1 + 200) = 0u;
  v8 = (char *)(a1 + 200);
  *(_OWORD *)(a1 + 248) = 0u;
  v9 = (char *)(a1 + 248);
  *(_QWORD *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  v10 = *(_BYTE *)(a2 + 340);
  if ((v10 & 0x40) != 0)
  {
    v12 = *(_DWORD *)(a2 + 336);
    v11 = 64;
    *(_BYTE *)(a1 + 340) = 64;
    *(_DWORD *)(a1 + 336) = v12;
    v10 = *(_BYTE *)(a2 + 340);
    if ((v10 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v11 = 0;
  if ((*(_BYTE *)(a2 + 340) & 4) != 0)
  {
LABEL_5:
    v13 = *(_QWORD *)(a2 + 312);
    v11 |= 4u;
    *(_BYTE *)(a1 + 340) = v11;
    *(_QWORD *)(a1 + 312) = v13;
    v10 = *(_BYTE *)(a2 + 340);
  }
LABEL_6:
  if ((v10 & 1) != 0)
  {
    v19 = *(_QWORD *)(a2 + 296);
    v11 |= 1u;
    *(_BYTE *)(a1 + 340) = v11;
    *(_QWORD *)(a1 + 296) = v19;
    v10 = *(_BYTE *)(a2 + 340);
    if ((v10 & 8) == 0)
    {
LABEL_8:
      if ((v10 & 2) == 0)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else if ((v10 & 8) == 0)
  {
    goto LABEL_8;
  }
  v20 = *(_QWORD *)(a2 + 320);
  v11 |= 8u;
  *(_BYTE *)(a1 + 340) = v11;
  *(_QWORD *)(a1 + 320) = v20;
  if ((*(_BYTE *)(a2 + 340) & 2) != 0)
  {
LABEL_9:
    v14 = *(_QWORD *)(a2 + 304);
    *(_BYTE *)(a1 + 340) = v11 | 2;
    *(_QWORD *)(a1 + 304) = v14;
  }
LABEL_10:
  if (a1 != a2)
  {
    sub_10034F2B0((char *)(a1 + 176), *(char **)(a2 + 176), *(_QWORD *)(a2 + 184), (uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 3);
    sub_10034F2B0(v6, *(char **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3);
    sub_10034F2B0((char *)(a1 + 272), *(char **)(a2 + 272), *(_QWORD *)(a2 + 280), (uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 3);
    sub_10034F2B0(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    sub_10034F2B0((char *)(a1 + 224), *(char **)(a2 + 224), *(_QWORD *)(a2 + 232), (uint64_t)(*(_QWORD *)(a2 + 232) - *(_QWORD *)(a2 + 224)) >> 3);
    sub_10034F2B0(v7, *(char **)(a2 + 152), *(_QWORD *)(a2 + 160), (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 3);
    sub_10034F2B0((char *)(a1 + 128), *(char **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 3);
    sub_10034F2B0(v9, *(char **)(a2 + 248), *(_QWORD *)(a2 + 256), (uint64_t)(*(_QWORD *)(a2 + 256) - *(_QWORD *)(a2 + 248)) >> 3);
    sub_10034F2B0((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
    sub_10034F2B0(v8, *(char **)(a2 + 200), *(_QWORD *)(a2 + 208), (uint64_t)(*(_QWORD *)(a2 + 208) - *(_QWORD *)(a2 + 200)) >> 3);
    sub_10034F2B0((char *)(a1 + 80), *(char **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
    sub_10034F2B0(v5, *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  }
  v15 = *(_BYTE *)(a2 + 340);
  if ((v15 & 0x20) != 0)
  {
    v16 = *(_DWORD *)(a2 + 332);
    *(_BYTE *)(a1 + 340) |= 0x20u;
    *(_DWORD *)(a1 + 332) = v16;
    v15 = *(_BYTE *)(a2 + 340);
  }
  if ((v15 & 0x10) != 0)
  {
    v17 = *(_DWORD *)(a2 + 328);
    *(_BYTE *)(a1 + 340) |= 0x10u;
    *(_DWORD *)(a1 + 328) = v17;
  }
  return a1;
}

uint64_t sub_101621C20(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  char v11;
  double *v12;
  double *v13;
  double v14;
  double *v15;
  double *v16;
  double v17;
  double *v18;
  double *v19;
  double v20;
  double *v21;
  double *v22;
  double v23;
  char v24;
  double *v25;
  double *v26;
  double v27;
  double *v28;
  double *v29;
  double v30;
  double *v31;
  double *v32;
  double v33;
  double *v34;
  double *v35;
  double v36;
  char v37;
  double *v38;
  double *v39;
  double v40;
  double *v41;
  double *v42;
  double v43;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "accelBias", v7);
  }
  v8 = *(double **)(a1 + 32);
  v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "accelBiasCov", v10);
  }
  v11 = *(_BYTE *)(a1 + 340);
  if ((v11 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "cameraImageResolutionHeight", *(float *)(a1 + 328));
    v11 = *(_BYTE *)(a1 + 340);
  }
  if ((v11 & 0x20) != 0)
    PB::TextFormatter::format(this, "cameraImageResolutionWidth", *(float *)(a1 + 332));
  v12 = *(double **)(a1 + 56);
  v13 = *(double **)(a1 + 64);
  while (v12 != v13)
  {
    v14 = *v12++;
    PB::TextFormatter::format(this, "cameraIntrinsics", v14);
  }
  v15 = *(double **)(a1 + 80);
  v16 = *(double **)(a1 + 88);
  while (v15 != v16)
  {
    v17 = *v15++;
    PB::TextFormatter::format(this, "cameraPose", v17);
  }
  v18 = *(double **)(a1 + 104);
  v19 = *(double **)(a1 + 112);
  while (v18 != v19)
  {
    v20 = *v18++;
    PB::TextFormatter::format(this, "gyroBias", v20);
  }
  v21 = *(double **)(a1 + 128);
  v22 = *(double **)(a1 + 136);
  while (v21 != v22)
  {
    v23 = *v21++;
    PB::TextFormatter::format(this, "gyroBiasCov", v23);
  }
  v24 = *(_BYTE *)(a1 + 340);
  if ((v24 & 1) != 0)
  {
    PB::TextFormatter::format(this, "machContinuousOriginTimestamp", *(double *)(a1 + 296));
    v24 = *(_BYTE *)(a1 + 340);
  }
  if ((v24 & 2) != 0)
    PB::TextFormatter::format(this, "machContinuousTimestamp", *(double *)(a1 + 304));
  v25 = *(double **)(a1 + 176);
  v26 = *(double **)(a1 + 184);
  while (v25 != v26)
  {
    v27 = *v25++;
    PB::TextFormatter::format(this, "orientation", v27);
  }
  v28 = *(double **)(a1 + 152);
  v29 = *(double **)(a1 + 160);
  while (v28 != v29)
  {
    v30 = *v28++;
    PB::TextFormatter::format(this, "orientationCov", v30);
  }
  if ((*(_BYTE *)(a1 + 340) & 4) != 0)
    PB::TextFormatter::format(this, "originTimestamp", *(double *)(a1 + 312));
  v31 = *(double **)(a1 + 224);
  v32 = *(double **)(a1 + 232);
  while (v31 != v32)
  {
    v33 = *v31++;
    PB::TextFormatter::format(this, "position", v33);
  }
  v34 = *(double **)(a1 + 200);
  v35 = *(double **)(a1 + 208);
  while (v34 != v35)
  {
    v36 = *v34++;
    PB::TextFormatter::format(this, "positionCov", v36);
  }
  v37 = *(_BYTE *)(a1 + 340);
  if ((v37 & 8) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 320));
    v37 = *(_BYTE *)(a1 + 340);
  }
  if ((v37 & 0x40) != 0)
    PB::TextFormatter::format(this, "trackingState", *(_DWORD *)(a1 + 336));
  v38 = *(double **)(a1 + 272);
  v39 = *(double **)(a1 + 280);
  while (v38 != v39)
  {
    v40 = *v38++;
    PB::TextFormatter::format(this, "velocity", v40);
  }
  v41 = *(double **)(a1 + 248);
  v42 = *(double **)(a1 + 256);
  while (v41 != v42)
  {
    v43 = *v41++;
    PB::TextFormatter::format(this, "velocityCov", v43);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_101621F34(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  void **v11;
  void **v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  BOOL v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  char v23;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  _QWORD *v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  _QWORD *v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  _QWORD *v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  _QWORD *v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  _QWORD *v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  _QWORD *v154;
  char *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  char *v167;
  _QWORD *v168;
  char *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  char *v181;
  _QWORD *v182;
  char *v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  char *v195;
  _QWORD *v196;
  char *v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  char v209;
  unsigned int v210;
  unint64_t v211;
  char v212;
  unint64_t v213;
  char *v214;
  _QWORD *v215;
  unint64_t v216;
  char *v217;
  unint64_t v218;
  char *v219;
  unint64_t v220;
  char *v221;
  unint64_t v222;
  char *v223;
  unint64_t v224;
  char *v225;
  unint64_t v226;
  char *v227;
  unint64_t v228;
  char *v229;
  unint64_t v230;
  char *v231;
  unint64_t v232;
  char *v233;
  unint64_t v234;
  char *v235;
  unint64_t v236;
  char *v237;
  char *v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  unint64_t v248;
  char *v249;
  char *v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  unint64_t v254;
  char *v255;
  char *v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  char *v261;
  char *v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  char *v267;
  char *v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  unint64_t v272;
  char *v273;
  char *v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  char *v279;
  char *v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  unint64_t v284;
  char *v285;
  char *v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t v290;
  char *v291;
  char *v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  unint64_t v296;
  char *v297;
  char *v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  unint64_t v302;
  char *v303;
  char *v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  char *v309;
  char *v310;
  uint64_t v311;
  char *v312;
  uint64_t v313;
  char *v314;
  uint64_t v315;
  char *v316;
  uint64_t v317;
  char *v318;
  uint64_t v319;
  char *v320;
  uint64_t v321;
  char *v322;
  uint64_t v323;
  char *v324;
  uint64_t v325;
  char *v326;
  uint64_t v327;
  char *v328;
  uint64_t v329;
  char *v330;
  uint64_t v331;
  char *v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  void **v349;
  void **v350;
  void **v351;
  void **v352;
  void **v353;
  void **v354;
  void **v355;
  void **v356;
  void **v357;
  _BYTE v358[24];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v357 = (void **)(a1 + 56);
    v348 = a1 + 72;
    v356 = (void **)(a1 + 80);
    v347 = a1 + 96;
    v355 = (void **)(a1 + 200);
    v354 = (void **)(a1 + 32);
    v345 = a1 + 48;
    v346 = a1 + 216;
    v344 = a1 + 264;
    v352 = (void **)(a1 + 128);
    v353 = (void **)(a1 + 248);
    v351 = (void **)(a1 + 152);
    v342 = a1 + 168;
    v343 = a1 + 144;
    v341 = a1 + 240;
    v349 = (void **)(a1 + 8);
    v350 = (void **)(a1 + 224);
    v10 = (void **)(a1 + 272);
    v339 = a1 + 288;
    v340 = a1 + 24;
    v11 = (void **)(a1 + 104);
    v12 = (void **)(a1 + 176);
    v337 = a1 + 192;
    v338 = a1 + 120;
    while (1)
    {
      v13 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      while (1)
      {
        v17 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v18 = *(_BYTE *)(v13 + v4);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0)
          break;
        v14 += 7;
        v4 = v17;
        v19 = v15++ > 8;
        if (v19)
          goto LABEL_20;
      }
LABEL_21:
      v25 = v16 & 7;
      if ((_DWORD)v25 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 340) |= 0x40u;
          v26 = *((_QWORD *)this + 1);
          v27 = *((_QWORD *)this + 2);
          v28 = *(_QWORD *)this;
          if (v26 <= 0xFFFFFFFFFFFFFFF5 && v26 + 10 <= v27)
          {
            v29 = 0;
            v30 = 0;
            v31 = 0;
            do
            {
              v32 = v26 + 1;
              *((_QWORD *)this + 1) = v26 + 1;
              v33 = *(_BYTE *)(v28 + v26);
              v31 |= (unint64_t)(v33 & 0x7F) << v29;
              if ((v33 & 0x80) == 0)
                goto LABEL_471;
              v29 += 7;
              v26 = v32;
              v19 = v30++ > 8;
            }
            while (!v19);
LABEL_347:
            LODWORD(v31) = 0;
            goto LABEL_471;
          }
          v209 = 0;
          v210 = 0;
          v31 = 0;
          if (v27 <= v26)
            v27 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v27 == v26)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v211 = v26 + 1;
              v212 = *(_BYTE *)(v28 + v26);
              *((_QWORD *)this + 1) = v211;
              v31 |= (unint64_t)(v212 & 0x7F) << v209;
              if (v212 < 0)
              {
                v209 += 7;
                v26 = v211;
                v19 = v210++ > 8;
                if (v19)
                  goto LABEL_347;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v31) = 0;
            }
            break;
          }
LABEL_471:
          *(_DWORD *)(a1 + 336) = v31;
          goto LABEL_562;
        case 2u:
          *(_BYTE *)(a1 + 340) |= 4u;
          v34 = *((_QWORD *)this + 1);
          if (v34 > 0xFFFFFFFFFFFFFFF7 || v34 + 8 > *((_QWORD *)this + 2))
            goto LABEL_558;
          *(_QWORD *)(a1 + 312) = *(_QWORD *)(*(_QWORD *)this + v34);
          goto LABEL_560;
        case 3u:
          *(_BYTE *)(a1 + 340) |= 1u;
          v35 = *((_QWORD *)this + 1);
          if (v35 > 0xFFFFFFFFFFFFFFF7 || v35 + 8 > *((_QWORD *)this + 2))
            goto LABEL_558;
          *(_QWORD *)(a1 + 296) = *(_QWORD *)(*(_QWORD *)this + v35);
          goto LABEL_560;
        case 4u:
          *(_BYTE *)(a1 + 340) |= 8u;
          v36 = *((_QWORD *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFF7 || v36 + 8 > *((_QWORD *)this + 2))
            goto LABEL_558;
          *(_QWORD *)(a1 + 320) = *(_QWORD *)(*(_QWORD *)this + v36);
          goto LABEL_560;
        case 5u:
          *(_BYTE *)(a1 + 340) |= 2u;
          v37 = *((_QWORD *)this + 1);
          if (v37 > 0xFFFFFFFFFFFFFFF7 || v37 + 8 > *((_QWORD *)this + 2))
            goto LABEL_558;
          *(_QWORD *)(a1 + 304) = *(_QWORD *)(*(_QWORD *)this + v37);
          goto LABEL_560;
        case 6u:
          if ((_DWORD)v25 != 2)
          {
            v214 = *(char **)(a1 + 184);
            v213 = *(_QWORD *)(a1 + 192);
            if ((unint64_t)v214 >= v213)
            {
              v238 = (char *)*v12;
              v239 = (v214 - (_BYTE *)*v12) >> 3;
              v240 = v239 + 1;
              if ((unint64_t)(v239 + 1) >> 61)
LABEL_572:
                sub_100259694();
              v241 = v213 - (_QWORD)v238;
              if (v241 >> 2 > v240)
                v240 = v241 >> 2;
              if ((unint64_t)v241 >= 0x7FFFFFFFFFFFFFF8)
                v242 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v242 = v240;
              if (v242)
              {
                v243 = (char *)sub_10025E6A0(v337, v242);
                v238 = *(char **)(a1 + 176);
                v214 = *(char **)(a1 + 184);
              }
              else
              {
                v243 = 0;
              }
              v310 = &v243[8 * v239];
              *(_QWORD *)v310 = 0;
              v215 = v310 + 8;
              while (v214 != v238)
              {
                v311 = *((_QWORD *)v214 - 1);
                v214 -= 8;
                *((_QWORD *)v310 - 1) = v311;
                v310 -= 8;
              }
              *(_QWORD *)(a1 + 176) = v310;
              *(_QWORD *)(a1 + 184) = v215;
              *(_QWORD *)(a1 + 192) = &v243[8 * v242];
              if (v238)
                operator delete(v238);
            }
            else
            {
              *(_QWORD *)v214 = 0;
              v215 = v214 + 8;
            }
            *(_QWORD *)(a1 + 184) = v215;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark(this, v358, v25, a4) & 1) != 0)
            return 0;
          v38 = *((_QWORD *)this + 1);
          v39 = *((_QWORD *)this + 2);
          while (v38 < v39 && !*((_BYTE *)this + 24))
          {
            v41 = *(char **)(a1 + 184);
            v40 = *(_QWORD *)(a1 + 192);
            if ((unint64_t)v41 >= v40)
            {
              v43 = (char *)*v12;
              v44 = (v41 - (_BYTE *)*v12) >> 3;
              v45 = v44 + 1;
              if ((unint64_t)(v44 + 1) >> 61)
                goto LABEL_572;
              v46 = v40 - (_QWORD)v43;
              if (v46 >> 2 > v45)
                v45 = v46 >> 2;
              if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
                v47 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v47 = v45;
              if (v47)
              {
                v48 = (char *)sub_10025E6A0(v337, v47);
                v43 = *(char **)(a1 + 176);
                v41 = *(char **)(a1 + 184);
              }
              else
              {
                v48 = 0;
              }
              v49 = &v48[8 * v44];
              *(_QWORD *)v49 = 0;
              v42 = v49 + 8;
              while (v41 != v43)
              {
                v50 = *((_QWORD *)v41 - 1);
                v41 -= 8;
                *((_QWORD *)v49 - 1) = v50;
                v49 -= 8;
              }
              *(_QWORD *)(a1 + 176) = v49;
              *(_QWORD *)(a1 + 184) = v42;
              *(_QWORD *)(a1 + 192) = &v48[8 * v47];
              if (v43)
                operator delete(v43);
            }
            else
            {
              *(_QWORD *)v41 = 0;
              v42 = v41 + 8;
            }
            *(_QWORD *)(a1 + 184) = v42;
            v51 = *((_QWORD *)this + 1);
            if (v51 > 0xFFFFFFFFFFFFFFF7 || v51 + 8 > *((_QWORD *)this + 2))
              goto LABEL_332;
            *(v42 - 1) = *(_QWORD *)(*(_QWORD *)this + v51);
            v39 = *((_QWORD *)this + 2);
            v38 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v38;
          }
          goto LABEL_333;
        case 7u:
          if ((_DWORD)v25 != 2)
          {
            v217 = *(char **)(a1 + 112);
            v216 = *(_QWORD *)(a1 + 120);
            if ((unint64_t)v217 >= v216)
            {
              v244 = (char *)*v11;
              v245 = (v217 - (_BYTE *)*v11) >> 3;
              v246 = v245 + 1;
              if ((unint64_t)(v245 + 1) >> 61)
LABEL_573:
                sub_100259694();
              v247 = v216 - (_QWORD)v244;
              if (v247 >> 2 > v246)
                v246 = v247 >> 2;
              if ((unint64_t)v247 >= 0x7FFFFFFFFFFFFFF8)
                v248 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v248 = v246;
              if (v248)
              {
                v249 = (char *)sub_10025E6A0(v338, v248);
                v244 = *(char **)(a1 + 104);
                v217 = *(char **)(a1 + 112);
              }
              else
              {
                v249 = 0;
              }
              v312 = &v249[8 * v245];
              *(_QWORD *)v312 = 0;
              v215 = v312 + 8;
              while (v217 != v244)
              {
                v313 = *((_QWORD *)v217 - 1);
                v217 -= 8;
                *((_QWORD *)v312 - 1) = v313;
                v312 -= 8;
              }
              *(_QWORD *)(a1 + 104) = v312;
              *(_QWORD *)(a1 + 112) = v215;
              *(_QWORD *)(a1 + 120) = &v249[8 * v248];
              if (v244)
                operator delete(v244);
            }
            else
            {
              *(_QWORD *)v217 = 0;
              v215 = v217 + 8;
            }
            *(_QWORD *)(a1 + 112) = v215;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark(this, v358, v25, a4) & 1) != 0)
            return 0;
          v52 = *((_QWORD *)this + 1);
          v53 = *((_QWORD *)this + 2);
          while (v52 < v53 && !*((_BYTE *)this + 24))
          {
            v55 = *(char **)(a1 + 112);
            v54 = *(_QWORD *)(a1 + 120);
            if ((unint64_t)v55 >= v54)
            {
              v57 = (char *)*v11;
              v58 = (v55 - (_BYTE *)*v11) >> 3;
              v59 = v58 + 1;
              if ((unint64_t)(v58 + 1) >> 61)
                goto LABEL_573;
              v60 = v54 - (_QWORD)v57;
              if (v60 >> 2 > v59)
                v59 = v60 >> 2;
              if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
                v61 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v61 = v59;
              if (v61)
              {
                v62 = (char *)sub_10025E6A0(v338, v61);
                v57 = *(char **)(a1 + 104);
                v55 = *(char **)(a1 + 112);
              }
              else
              {
                v62 = 0;
              }
              v63 = &v62[8 * v58];
              *(_QWORD *)v63 = 0;
              v56 = v63 + 8;
              while (v55 != v57)
              {
                v64 = *((_QWORD *)v55 - 1);
                v55 -= 8;
                *((_QWORD *)v63 - 1) = v64;
                v63 -= 8;
              }
              *(_QWORD *)(a1 + 104) = v63;
              *(_QWORD *)(a1 + 112) = v56;
              *(_QWORD *)(a1 + 120) = &v62[8 * v61];
              if (v57)
                operator delete(v57);
            }
            else
            {
              *(_QWORD *)v55 = 0;
              v56 = v55 + 8;
            }
            *(_QWORD *)(a1 + 112) = v56;
            v65 = *((_QWORD *)this + 1);
            if (v65 > 0xFFFFFFFFFFFFFFF7 || v65 + 8 > *((_QWORD *)this + 2))
              goto LABEL_332;
            *(v56 - 1) = *(_QWORD *)(*(_QWORD *)this + v65);
            v53 = *((_QWORD *)this + 2);
            v52 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v52;
          }
          goto LABEL_333;
        case 8u:
          if ((_DWORD)v25 != 2)
          {
            v219 = *(char **)(a1 + 280);
            v218 = *(_QWORD *)(a1 + 288);
            if ((unint64_t)v219 >= v218)
            {
              v250 = (char *)*v10;
              v251 = (v219 - (_BYTE *)*v10) >> 3;
              v252 = v251 + 1;
              if ((unint64_t)(v251 + 1) >> 61)
LABEL_574:
                sub_100259694();
              v253 = v218 - (_QWORD)v250;
              if (v253 >> 2 > v252)
                v252 = v253 >> 2;
              if ((unint64_t)v253 >= 0x7FFFFFFFFFFFFFF8)
                v254 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v254 = v252;
              if (v254)
              {
                v255 = (char *)sub_10025E6A0(v339, v254);
                v250 = *(char **)(a1 + 272);
                v219 = *(char **)(a1 + 280);
              }
              else
              {
                v255 = 0;
              }
              v314 = &v255[8 * v251];
              *(_QWORD *)v314 = 0;
              v215 = v314 + 8;
              while (v219 != v250)
              {
                v315 = *((_QWORD *)v219 - 1);
                v219 -= 8;
                *((_QWORD *)v314 - 1) = v315;
                v314 -= 8;
              }
              *(_QWORD *)(a1 + 272) = v314;
              *(_QWORD *)(a1 + 280) = v215;
              *(_QWORD *)(a1 + 288) = &v255[8 * v254];
              if (v250)
                operator delete(v250);
            }
            else
            {
              *(_QWORD *)v219 = 0;
              v215 = v219 + 8;
            }
            *(_QWORD *)(a1 + 280) = v215;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark(this, v358, v25, a4) & 1) != 0)
            return 0;
          v66 = *((_QWORD *)this + 1);
          v67 = *((_QWORD *)this + 2);
          while (v66 < v67 && !*((_BYTE *)this + 24))
          {
            v69 = *(char **)(a1 + 280);
            v68 = *(_QWORD *)(a1 + 288);
            if ((unint64_t)v69 >= v68)
            {
              v71 = (char *)*v10;
              v72 = (v69 - (_BYTE *)*v10) >> 3;
              v73 = v72 + 1;
              if ((unint64_t)(v72 + 1) >> 61)
                goto LABEL_574;
              v74 = v68 - (_QWORD)v71;
              if (v74 >> 2 > v73)
                v73 = v74 >> 2;
              if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
                v75 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v75 = v73;
              if (v75)
              {
                v76 = (char *)sub_10025E6A0(v339, v75);
                v71 = *(char **)(a1 + 272);
                v69 = *(char **)(a1 + 280);
              }
              else
              {
                v76 = 0;
              }
              v77 = &v76[8 * v72];
              *(_QWORD *)v77 = 0;
              v70 = v77 + 8;
              while (v69 != v71)
              {
                v78 = *((_QWORD *)v69 - 1);
                v69 -= 8;
                *((_QWORD *)v77 - 1) = v78;
                v77 -= 8;
              }
              *(_QWORD *)(a1 + 272) = v77;
              *(_QWORD *)(a1 + 280) = v70;
              *(_QWORD *)(a1 + 288) = &v76[8 * v75];
              if (v71)
                operator delete(v71);
            }
            else
            {
              *(_QWORD *)v69 = 0;
              v70 = v69 + 8;
            }
            *(_QWORD *)(a1 + 280) = v70;
            v79 = *((_QWORD *)this + 1);
            if (v79 > 0xFFFFFFFFFFFFFFF7 || v79 + 8 > *((_QWORD *)this + 2))
              goto LABEL_332;
            *(v70 - 1) = *(_QWORD *)(*(_QWORD *)this + v79);
            v67 = *((_QWORD *)this + 2);
            v66 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v66;
          }
          goto LABEL_333;
        case 9u:
          if ((_DWORD)v25 != 2)
          {
            v221 = *(char **)(a1 + 16);
            v220 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v221 >= v220)
            {
              v256 = (char *)*v349;
              v257 = (v221 - (_BYTE *)*v349) >> 3;
              v258 = v257 + 1;
              if ((unint64_t)(v257 + 1) >> 61)
LABEL_575:
                sub_100259694();
              v259 = v220 - (_QWORD)v256;
              if (v259 >> 2 > v258)
                v258 = v259 >> 2;
              if ((unint64_t)v259 >= 0x7FFFFFFFFFFFFFF8)
                v260 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v260 = v258;
              if (v260)
              {
                v261 = (char *)sub_10025E6A0(v340, v260);
                v256 = *(char **)(a1 + 8);
                v221 = *(char **)(a1 + 16);
              }
              else
              {
                v261 = 0;
              }
              v316 = &v261[8 * v257];
              *(_QWORD *)v316 = 0;
              v215 = v316 + 8;
              while (v221 != v256)
              {
                v317 = *((_QWORD *)v221 - 1);
                v221 -= 8;
                *((_QWORD *)v316 - 1) = v317;
                v316 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v316;
              *(_QWORD *)(a1 + 16) = v215;
              *(_QWORD *)(a1 + 24) = &v261[8 * v260];
              if (v256)
                operator delete(v256);
            }
            else
            {
              *(_QWORD *)v221 = 0;
              v215 = v221 + 8;
            }
            *(_QWORD *)(a1 + 16) = v215;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark(this, v358, v25, a4) & 1) != 0)
            return 0;
          v80 = *((_QWORD *)this + 1);
          v81 = *((_QWORD *)this + 2);
          while (v80 < v81 && !*((_BYTE *)this + 24))
          {
            v83 = *(char **)(a1 + 16);
            v82 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v83 >= v82)
            {
              v85 = (char *)*v349;
              v86 = (v83 - (_BYTE *)*v349) >> 3;
              v87 = v86 + 1;
              if ((unint64_t)(v86 + 1) >> 61)
                goto LABEL_575;
              v88 = v82 - (_QWORD)v85;
              if (v88 >> 2 > v87)
                v87 = v88 >> 2;
              if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8)
                v89 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v89 = v87;
              if (v89)
              {
                v90 = (char *)sub_10025E6A0(v340, v89);
                v85 = *(char **)(a1 + 8);
                v83 = *(char **)(a1 + 16);
              }
              else
              {
                v90 = 0;
              }
              v91 = &v90[8 * v86];
              *(_QWORD *)v91 = 0;
              v84 = v91 + 8;
              while (v83 != v85)
              {
                v92 = *((_QWORD *)v83 - 1);
                v83 -= 8;
                *((_QWORD *)v91 - 1) = v92;
                v91 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v91;
              *(_QWORD *)(a1 + 16) = v84;
              *(_QWORD *)(a1 + 24) = &v90[8 * v89];
              if (v85)
                operator delete(v85);
            }
            else
            {
              *(_QWORD *)v83 = 0;
              v84 = v83 + 8;
            }
            *(_QWORD *)(a1 + 16) = v84;
            v93 = *((_QWORD *)this + 1);
            if (v93 > 0xFFFFFFFFFFFFFFF7 || v93 + 8 > *((_QWORD *)this + 2))
              goto LABEL_332;
            *(v84 - 1) = *(_QWORD *)(*(_QWORD *)this + v93);
            v81 = *((_QWORD *)this + 2);
            v80 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v80;
          }
          goto LABEL_333;
        case 0xAu:
          if ((_DWORD)v25 != 2)
          {
            v223 = *(char **)(a1 + 232);
            v222 = *(_QWORD *)(a1 + 240);
            if ((unint64_t)v223 >= v222)
            {
              v262 = (char *)*v350;
              v263 = (v223 - (_BYTE *)*v350) >> 3;
              v264 = v263 + 1;
              if ((unint64_t)(v263 + 1) >> 61)
LABEL_576:
                sub_100259694();
              v265 = v222 - (_QWORD)v262;
              if (v265 >> 2 > v264)
                v264 = v265 >> 2;
              if ((unint64_t)v265 >= 0x7FFFFFFFFFFFFFF8)
                v266 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v266 = v264;
              if (v266)
              {
                v267 = (char *)sub_10025E6A0(v341, v266);
                v262 = *(char **)(a1 + 224);
                v223 = *(char **)(a1 + 232);
              }
              else
              {
                v267 = 0;
              }
              v318 = &v267[8 * v263];
              *(_QWORD *)v318 = 0;
              v215 = v318 + 8;
              while (v223 != v262)
              {
                v319 = *((_QWORD *)v223 - 1);
                v223 -= 8;
                *((_QWORD *)v318 - 1) = v319;
                v318 -= 8;
              }
              *(_QWORD *)(a1 + 224) = v318;
              *(_QWORD *)(a1 + 232) = v215;
              *(_QWORD *)(a1 + 240) = &v267[8 * v266];
              if (v262)
                operator delete(v262);
            }
            else
            {
              *(_QWORD *)v223 = 0;
              v215 = v223 + 8;
            }
            *(_QWORD *)(a1 + 232) = v215;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark(this, v358, v25, a4) & 1) != 0)
            return 0;
          v94 = *((_QWORD *)this + 1);
          v95 = *((_QWORD *)this + 2);
          while (v94 < v95 && !*((_BYTE *)this + 24))
          {
            v97 = *(char **)(a1 + 232);
            v96 = *(_QWORD *)(a1 + 240);
            if ((unint64_t)v97 >= v96)
            {
              v99 = (char *)*v350;
              v100 = (v97 - (_BYTE *)*v350) >> 3;
              v101 = v100 + 1;
              if ((unint64_t)(v100 + 1) >> 61)
                goto LABEL_576;
              v102 = v96 - (_QWORD)v99;
              if (v102 >> 2 > v101)
                v101 = v102 >> 2;
              if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8)
                v103 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v103 = v101;
              if (v103)
              {
                v104 = (char *)sub_10025E6A0(v341, v103);
                v99 = *(char **)(a1 + 224);
                v97 = *(char **)(a1 + 232);
              }
              else
              {
                v104 = 0;
              }
              v105 = &v104[8 * v100];
              *(_QWORD *)v105 = 0;
              v98 = v105 + 8;
              while (v97 != v99)
              {
                v106 = *((_QWORD *)v97 - 1);
                v97 -= 8;
                *((_QWORD *)v105 - 1) = v106;
                v105 -= 8;
              }
              *(_QWORD *)(a1 + 224) = v105;
              *(_QWORD *)(a1 + 232) = v98;
              *(_QWORD *)(a1 + 240) = &v104[8 * v103];
              if (v99)
                operator delete(v99);
            }
            else
            {
              *(_QWORD *)v97 = 0;
              v98 = v97 + 8;
            }
            *(_QWORD *)(a1 + 232) = v98;
            v107 = *((_QWORD *)this + 1);
            if (v107 > 0xFFFFFFFFFFFFFFF7 || v107 + 8 > *((_QWORD *)this + 2))
              goto LABEL_332;
            *(v98 - 1) = *(_QWORD *)(*(_QWORD *)this + v107);
            v95 = *((_QWORD *)this + 2);
            v94 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v94;
          }
          goto LABEL_333;
        case 0xBu:
          if ((_DWORD)v25 != 2)
          {
            v225 = *(char **)(a1 + 160);
            v224 = *(_QWORD *)(a1 + 168);
            if ((unint64_t)v225 >= v224)
            {
              v268 = (char *)*v351;
              v269 = (v225 - (_BYTE *)*v351) >> 3;
              v270 = v269 + 1;
              if ((unint64_t)(v269 + 1) >> 61)
LABEL_577:
                sub_100259694();
              v271 = v224 - (_QWORD)v268;
              if (v271 >> 2 > v270)
                v270 = v271 >> 2;
              if ((unint64_t)v271 >= 0x7FFFFFFFFFFFFFF8)
                v272 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v272 = v270;
              if (v272)
              {
                v273 = (char *)sub_10025E6A0(v342, v272);
                v268 = *(char **)(a1 + 152);
                v225 = *(char **)(a1 + 160);
              }
              else
              {
                v273 = 0;
              }
              v320 = &v273[8 * v269];
              *(_QWORD *)v320 = 0;
              v215 = v320 + 8;
              while (v225 != v268)
              {
                v321 = *((_QWORD *)v225 - 1);
                v225 -= 8;
                *((_QWORD *)v320 - 1) = v321;
                v320 -= 8;
              }
              *(_QWORD *)(a1 + 152) = v320;
              *(_QWORD *)(a1 + 160) = v215;
              *(_QWORD *)(a1 + 168) = &v273[8 * v272];
              if (v268)
                operator delete(v268);
            }
            else
            {
              *(_QWORD *)v225 = 0;
              v215 = v225 + 8;
            }
            *(_QWORD *)(a1 + 160) = v215;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark(this, v358, v25, a4) & 1) != 0)
            return 0;
          v108 = *((_QWORD *)this + 1);
          v109 = *((_QWORD *)this + 2);
          while (v108 < v109 && !*((_BYTE *)this + 24))
          {
            v111 = *(char **)(a1 + 160);
            v110 = *(_QWORD *)(a1 + 168);
            if ((unint64_t)v111 >= v110)
            {
              v113 = (char *)*v351;
              v114 = (v111 - (_BYTE *)*v351) >> 3;
              v115 = v114 + 1;
              if ((unint64_t)(v114 + 1) >> 61)
                goto LABEL_577;
              v116 = v110 - (_QWORD)v113;
              if (v116 >> 2 > v115)
                v115 = v116 >> 2;
              if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8)
                v117 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v117 = v115;
              if (v117)
              {
                v118 = (char *)sub_10025E6A0(v342, v117);
                v113 = *(char **)(a1 + 152);
                v111 = *(char **)(a1 + 160);
              }
              else
              {
                v118 = 0;
              }
              v119 = &v118[8 * v114];
              *(_QWORD *)v119 = 0;
              v112 = v119 + 8;
              while (v111 != v113)
              {
                v120 = *((_QWORD *)v111 - 1);
                v111 -= 8;
                *((_QWORD *)v119 - 1) = v120;
                v119 -= 8;
              }
              *(_QWORD *)(a1 + 152) = v119;
              *(_QWORD *)(a1 + 160) = v112;
              *(_QWORD *)(a1 + 168) = &v118[8 * v117];
              if (v113)
                operator delete(v113);
            }
            else
            {
              *(_QWORD *)v111 = 0;
              v112 = v111 + 8;
            }
            *(_QWORD *)(a1 + 160) = v112;
            v121 = *((_QWORD *)this + 1);
            if (v121 > 0xFFFFFFFFFFFFFFF7 || v121 + 8 > *((_QWORD *)this + 2))
              goto LABEL_332;
            *(v112 - 1) = *(_QWORD *)(*(_QWORD *)this + v121);
            v109 = *((_QWORD *)this + 2);
            v108 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v108;
          }
          goto LABEL_333;
        case 0xCu:
          if ((_DWORD)v25 != 2)
          {
            v227 = *(char **)(a1 + 136);
            v226 = *(_QWORD *)(a1 + 144);
            if ((unint64_t)v227 >= v226)
            {
              v274 = (char *)*v352;
              v275 = (v227 - (_BYTE *)*v352) >> 3;
              v276 = v275 + 1;
              if ((unint64_t)(v275 + 1) >> 61)
LABEL_578:
                sub_100259694();
              v277 = v226 - (_QWORD)v274;
              if (v277 >> 2 > v276)
                v276 = v277 >> 2;
              if ((unint64_t)v277 >= 0x7FFFFFFFFFFFFFF8)
                v278 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v278 = v276;
              if (v278)
              {
                v279 = (char *)sub_10025E6A0(v343, v278);
                v274 = *(char **)(a1 + 128);
                v227 = *(char **)(a1 + 136);
              }
              else
              {
                v279 = 0;
              }
              v322 = &v279[8 * v275];
              *(_QWORD *)v322 = 0;
              v215 = v322 + 8;
              while (v227 != v274)
              {
                v323 = *((_QWORD *)v227 - 1);
                v227 -= 8;
                *((_QWORD *)v322 - 1) = v323;
                v322 -= 8;
              }
              *(_QWORD *)(a1 + 128) = v322;
              *(_QWORD *)(a1 + 136) = v215;
              *(_QWORD *)(a1 + 144) = &v279[8 * v278];
              if (v274)
                operator delete(v274);
            }
            else
            {
              *(_QWORD *)v227 = 0;
              v215 = v227 + 8;
            }
            *(_QWORD *)(a1 + 136) = v215;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark(this, v358, v25, a4) & 1) != 0)
            return 0;
          v122 = *((_QWORD *)this + 1);
          v123 = *((_QWORD *)this + 2);
          while (v122 < v123 && !*((_BYTE *)this + 24))
          {
            v125 = *(char **)(a1 + 136);
            v124 = *(_QWORD *)(a1 + 144);
            if ((unint64_t)v125 >= v124)
            {
              v127 = (char *)*v352;
              v128 = (v125 - (_BYTE *)*v352) >> 3;
              v129 = v128 + 1;
              if ((unint64_t)(v128 + 1) >> 61)
                goto LABEL_578;
              v130 = v124 - (_QWORD)v127;
              if (v130 >> 2 > v129)
                v129 = v130 >> 2;
              if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFF8)
                v131 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v131 = v129;
              if (v131)
              {
                v132 = (char *)sub_10025E6A0(v343, v131);
                v127 = *(char **)(a1 + 128);
                v125 = *(char **)(a1 + 136);
              }
              else
              {
                v132 = 0;
              }
              v133 = &v132[8 * v128];
              *(_QWORD *)v133 = 0;
              v126 = v133 + 8;
              while (v125 != v127)
              {
                v134 = *((_QWORD *)v125 - 1);
                v125 -= 8;
                *((_QWORD *)v133 - 1) = v134;
                v133 -= 8;
              }
              *(_QWORD *)(a1 + 128) = v133;
              *(_QWORD *)(a1 + 136) = v126;
              *(_QWORD *)(a1 + 144) = &v132[8 * v131];
              if (v127)
                operator delete(v127);
            }
            else
            {
              *(_QWORD *)v125 = 0;
              v126 = v125 + 8;
            }
            *(_QWORD *)(a1 + 136) = v126;
            v135 = *((_QWORD *)this + 1);
            if (v135 > 0xFFFFFFFFFFFFFFF7 || v135 + 8 > *((_QWORD *)this + 2))
              goto LABEL_332;
            *(v126 - 1) = *(_QWORD *)(*(_QWORD *)this + v135);
            v123 = *((_QWORD *)this + 2);
            v122 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v122;
          }
          goto LABEL_333;
        case 0xDu:
          if ((_DWORD)v25 != 2)
          {
            v229 = *(char **)(a1 + 256);
            v228 = *(_QWORD *)(a1 + 264);
            if ((unint64_t)v229 >= v228)
            {
              v280 = (char *)*v353;
              v281 = (v229 - (_BYTE *)*v353) >> 3;
              v282 = v281 + 1;
              if ((unint64_t)(v281 + 1) >> 61)
LABEL_579:
                sub_100259694();
              v283 = v228 - (_QWORD)v280;
              if (v283 >> 2 > v282)
                v282 = v283 >> 2;
              if ((unint64_t)v283 >= 0x7FFFFFFFFFFFFFF8)
                v284 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v284 = v282;
              if (v284)
              {
                v285 = (char *)sub_10025E6A0(v344, v284);
                v280 = *(char **)(a1 + 248);
                v229 = *(char **)(a1 + 256);
              }
              else
              {
                v285 = 0;
              }
              v324 = &v285[8 * v281];
              *(_QWORD *)v324 = 0;
              v215 = v324 + 8;
              while (v229 != v280)
              {
                v325 = *((_QWORD *)v229 - 1);
                v229 -= 8;
                *((_QWORD *)v324 - 1) = v325;
                v324 -= 8;
              }
              *(_QWORD *)(a1 + 248) = v324;
              *(_QWORD *)(a1 + 256) = v215;
              *(_QWORD *)(a1 + 264) = &v285[8 * v284];
              if (v280)
                operator delete(v280);
            }
            else
            {
              *(_QWORD *)v229 = 0;
              v215 = v229 + 8;
            }
            *(_QWORD *)(a1 + 256) = v215;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark(this, v358, v25, a4) & 1) != 0)
            return 0;
          v136 = *((_QWORD *)this + 1);
          v137 = *((_QWORD *)this + 2);
          while (v136 < v137 && !*((_BYTE *)this + 24))
          {
            v139 = *(char **)(a1 + 256);
            v138 = *(_QWORD *)(a1 + 264);
            if ((unint64_t)v139 >= v138)
            {
              v141 = (char *)*v353;
              v142 = (v139 - (_BYTE *)*v353) >> 3;
              v143 = v142 + 1;
              if ((unint64_t)(v142 + 1) >> 61)
                goto LABEL_579;
              v144 = v138 - (_QWORD)v141;
              if (v144 >> 2 > v143)
                v143 = v144 >> 2;
              if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFF8)
                v145 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v145 = v143;
              if (v145)
              {
                v146 = (char *)sub_10025E6A0(v344, v145);
                v141 = *(char **)(a1 + 248);
                v139 = *(char **)(a1 + 256);
              }
              else
              {
                v146 = 0;
              }
              v147 = &v146[8 * v142];
              *(_QWORD *)v147 = 0;
              v140 = v147 + 8;
              while (v139 != v141)
              {
                v148 = *((_QWORD *)v139 - 1);
                v139 -= 8;
                *((_QWORD *)v147 - 1) = v148;
                v147 -= 8;
              }
              *(_QWORD *)(a1 + 248) = v147;
              *(_QWORD *)(a1 + 256) = v140;
              *(_QWORD *)(a1 + 264) = &v146[8 * v145];
              if (v141)
                operator delete(v141);
            }
            else
            {
              *(_QWORD *)v139 = 0;
              v140 = v139 + 8;
            }
            *(_QWORD *)(a1 + 256) = v140;
            v149 = *((_QWORD *)this + 1);
            if (v149 > 0xFFFFFFFFFFFFFFF7 || v149 + 8 > *((_QWORD *)this + 2))
              goto LABEL_332;
            *(v140 - 1) = *(_QWORD *)(*(_QWORD *)this + v149);
            v137 = *((_QWORD *)this + 2);
            v136 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v136;
          }
          goto LABEL_333;
        case 0xEu:
          if ((_DWORD)v25 != 2)
          {
            v231 = *(char **)(a1 + 40);
            v230 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v231 >= v230)
            {
              v286 = (char *)*v354;
              v287 = (v231 - (_BYTE *)*v354) >> 3;
              v288 = v287 + 1;
              if ((unint64_t)(v287 + 1) >> 61)
LABEL_580:
                sub_100259694();
              v289 = v230 - (_QWORD)v286;
              if (v289 >> 2 > v288)
                v288 = v289 >> 2;
              if ((unint64_t)v289 >= 0x7FFFFFFFFFFFFFF8)
                v290 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v290 = v288;
              if (v290)
              {
                v291 = (char *)sub_10025E6A0(v345, v290);
                v286 = *(char **)(a1 + 32);
                v231 = *(char **)(a1 + 40);
              }
              else
              {
                v291 = 0;
              }
              v326 = &v291[8 * v287];
              *(_QWORD *)v326 = 0;
              v215 = v326 + 8;
              while (v231 != v286)
              {
                v327 = *((_QWORD *)v231 - 1);
                v231 -= 8;
                *((_QWORD *)v326 - 1) = v327;
                v326 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v326;
              *(_QWORD *)(a1 + 40) = v215;
              *(_QWORD *)(a1 + 48) = &v291[8 * v290];
              if (v286)
                operator delete(v286);
            }
            else
            {
              *(_QWORD *)v231 = 0;
              v215 = v231 + 8;
            }
            *(_QWORD *)(a1 + 40) = v215;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark(this, v358, v25, a4) & 1) != 0)
            return 0;
          v150 = *((_QWORD *)this + 1);
          v151 = *((_QWORD *)this + 2);
          while (v150 < v151 && !*((_BYTE *)this + 24))
          {
            v153 = *(char **)(a1 + 40);
            v152 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v153 >= v152)
            {
              v155 = (char *)*v354;
              v156 = (v153 - (_BYTE *)*v354) >> 3;
              v157 = v156 + 1;
              if ((unint64_t)(v156 + 1) >> 61)
                goto LABEL_580;
              v158 = v152 - (_QWORD)v155;
              if (v158 >> 2 > v157)
                v157 = v158 >> 2;
              if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFF8)
                v159 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v159 = v157;
              if (v159)
              {
                v160 = (char *)sub_10025E6A0(v345, v159);
                v155 = *(char **)(a1 + 32);
                v153 = *(char **)(a1 + 40);
              }
              else
              {
                v160 = 0;
              }
              v161 = &v160[8 * v156];
              *(_QWORD *)v161 = 0;
              v154 = v161 + 8;
              while (v153 != v155)
              {
                v162 = *((_QWORD *)v153 - 1);
                v153 -= 8;
                *((_QWORD *)v161 - 1) = v162;
                v161 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v161;
              *(_QWORD *)(a1 + 40) = v154;
              *(_QWORD *)(a1 + 48) = &v160[8 * v159];
              if (v155)
                operator delete(v155);
            }
            else
            {
              *(_QWORD *)v153 = 0;
              v154 = v153 + 8;
            }
            *(_QWORD *)(a1 + 40) = v154;
            v163 = *((_QWORD *)this + 1);
            if (v163 > 0xFFFFFFFFFFFFFFF7 || v163 + 8 > *((_QWORD *)this + 2))
              goto LABEL_332;
            *(v154 - 1) = *(_QWORD *)(*(_QWORD *)this + v163);
            v151 = *((_QWORD *)this + 2);
            v150 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v150;
          }
          goto LABEL_333;
        case 0xFu:
          if ((_DWORD)v25 != 2)
          {
            v233 = *(char **)(a1 + 208);
            v232 = *(_QWORD *)(a1 + 216);
            if ((unint64_t)v233 >= v232)
            {
              v292 = (char *)*v355;
              v293 = (v233 - (_BYTE *)*v355) >> 3;
              v294 = v293 + 1;
              if ((unint64_t)(v293 + 1) >> 61)
LABEL_581:
                sub_100259694();
              v295 = v232 - (_QWORD)v292;
              if (v295 >> 2 > v294)
                v294 = v295 >> 2;
              if ((unint64_t)v295 >= 0x7FFFFFFFFFFFFFF8)
                v296 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v296 = v294;
              if (v296)
              {
                v297 = (char *)sub_10025E6A0(v346, v296);
                v292 = *(char **)(a1 + 200);
                v233 = *(char **)(a1 + 208);
              }
              else
              {
                v297 = 0;
              }
              v328 = &v297[8 * v293];
              *(_QWORD *)v328 = 0;
              v215 = v328 + 8;
              while (v233 != v292)
              {
                v329 = *((_QWORD *)v233 - 1);
                v233 -= 8;
                *((_QWORD *)v328 - 1) = v329;
                v328 -= 8;
              }
              *(_QWORD *)(a1 + 200) = v328;
              *(_QWORD *)(a1 + 208) = v215;
              *(_QWORD *)(a1 + 216) = &v297[8 * v296];
              if (v292)
                operator delete(v292);
            }
            else
            {
              *(_QWORD *)v233 = 0;
              v215 = v233 + 8;
            }
            *(_QWORD *)(a1 + 208) = v215;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark(this, v358, v25, a4) & 1) != 0)
            return 0;
          v164 = *((_QWORD *)this + 1);
          v165 = *((_QWORD *)this + 2);
          while (v164 < v165 && !*((_BYTE *)this + 24))
          {
            v167 = *(char **)(a1 + 208);
            v166 = *(_QWORD *)(a1 + 216);
            if ((unint64_t)v167 >= v166)
            {
              v169 = (char *)*v355;
              v170 = (v167 - (_BYTE *)*v355) >> 3;
              v171 = v170 + 1;
              if ((unint64_t)(v170 + 1) >> 61)
                goto LABEL_581;
              v172 = v166 - (_QWORD)v169;
              if (v172 >> 2 > v171)
                v171 = v172 >> 2;
              if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFF8)
                v173 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v173 = v171;
              if (v173)
              {
                v174 = (char *)sub_10025E6A0(v346, v173);
                v169 = *(char **)(a1 + 200);
                v167 = *(char **)(a1 + 208);
              }
              else
              {
                v174 = 0;
              }
              v175 = &v174[8 * v170];
              *(_QWORD *)v175 = 0;
              v168 = v175 + 8;
              while (v167 != v169)
              {
                v176 = *((_QWORD *)v167 - 1);
                v167 -= 8;
                *((_QWORD *)v175 - 1) = v176;
                v175 -= 8;
              }
              *(_QWORD *)(a1 + 200) = v175;
              *(_QWORD *)(a1 + 208) = v168;
              *(_QWORD *)(a1 + 216) = &v174[8 * v173];
              if (v169)
                operator delete(v169);
            }
            else
            {
              *(_QWORD *)v167 = 0;
              v168 = v167 + 8;
            }
            *(_QWORD *)(a1 + 208) = v168;
            v177 = *((_QWORD *)this + 1);
            if (v177 > 0xFFFFFFFFFFFFFFF7 || v177 + 8 > *((_QWORD *)this + 2))
              goto LABEL_332;
            *(v168 - 1) = *(_QWORD *)(*(_QWORD *)this + v177);
            v165 = *((_QWORD *)this + 2);
            v164 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v164;
          }
          goto LABEL_333;
        case 0x10u:
          if ((_DWORD)v25 != 2)
          {
            v235 = *(char **)(a1 + 88);
            v234 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v235 >= v234)
            {
              v298 = (char *)*v356;
              v299 = (v235 - (_BYTE *)*v356) >> 3;
              v300 = v299 + 1;
              if ((unint64_t)(v299 + 1) >> 61)
LABEL_582:
                sub_100259694();
              v301 = v234 - (_QWORD)v298;
              if (v301 >> 2 > v300)
                v300 = v301 >> 2;
              if ((unint64_t)v301 >= 0x7FFFFFFFFFFFFFF8)
                v302 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v302 = v300;
              if (v302)
              {
                v303 = (char *)sub_10025E6A0(v347, v302);
                v298 = *(char **)(a1 + 80);
                v235 = *(char **)(a1 + 88);
              }
              else
              {
                v303 = 0;
              }
              v330 = &v303[8 * v299];
              *(_QWORD *)v330 = 0;
              v215 = v330 + 8;
              while (v235 != v298)
              {
                v331 = *((_QWORD *)v235 - 1);
                v235 -= 8;
                *((_QWORD *)v330 - 1) = v331;
                v330 -= 8;
              }
              *(_QWORD *)(a1 + 80) = v330;
              *(_QWORD *)(a1 + 88) = v215;
              *(_QWORD *)(a1 + 96) = &v303[8 * v302];
              if (v298)
                operator delete(v298);
            }
            else
            {
              *(_QWORD *)v235 = 0;
              v215 = v235 + 8;
            }
            *(_QWORD *)(a1 + 88) = v215;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark(this, v358, v25, a4) & 1) != 0)
            return 0;
          v178 = *((_QWORD *)this + 1);
          v179 = *((_QWORD *)this + 2);
          while (v178 < v179 && !*((_BYTE *)this + 24))
          {
            v181 = *(char **)(a1 + 88);
            v180 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v181 >= v180)
            {
              v183 = (char *)*v356;
              v184 = (v181 - (_BYTE *)*v356) >> 3;
              v185 = v184 + 1;
              if ((unint64_t)(v184 + 1) >> 61)
                goto LABEL_582;
              v186 = v180 - (_QWORD)v183;
              if (v186 >> 2 > v185)
                v185 = v186 >> 2;
              if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFF8)
                v187 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v187 = v185;
              if (v187)
              {
                v188 = (char *)sub_10025E6A0(v347, v187);
                v183 = *(char **)(a1 + 80);
                v181 = *(char **)(a1 + 88);
              }
              else
              {
                v188 = 0;
              }
              v189 = &v188[8 * v184];
              *(_QWORD *)v189 = 0;
              v182 = v189 + 8;
              while (v181 != v183)
              {
                v190 = *((_QWORD *)v181 - 1);
                v181 -= 8;
                *((_QWORD *)v189 - 1) = v190;
                v189 -= 8;
              }
              *(_QWORD *)(a1 + 80) = v189;
              *(_QWORD *)(a1 + 88) = v182;
              *(_QWORD *)(a1 + 96) = &v188[8 * v187];
              if (v183)
                operator delete(v183);
            }
            else
            {
              *(_QWORD *)v181 = 0;
              v182 = v181 + 8;
            }
            *(_QWORD *)(a1 + 88) = v182;
            v191 = *((_QWORD *)this + 1);
            if (v191 > 0xFFFFFFFFFFFFFFF7 || v191 + 8 > *((_QWORD *)this + 2))
              goto LABEL_332;
            *(v182 - 1) = *(_QWORD *)(*(_QWORD *)this + v191);
            v179 = *((_QWORD *)this + 2);
            v178 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v178;
          }
          goto LABEL_333;
        case 0x11u:
          if ((_DWORD)v25 == 2)
          {
            if ((PB::Reader::placeMark(this, v358, v25, a4) & 1) != 0)
              return 0;
            v192 = *((_QWORD *)this + 1);
            v193 = *((_QWORD *)this + 2);
            while (v192 < v193 && !*((_BYTE *)this + 24))
            {
              v195 = *(char **)(a1 + 64);
              v194 = *(_QWORD *)(a1 + 72);
              if ((unint64_t)v195 >= v194)
              {
                v197 = (char *)*v357;
                v198 = (v195 - (_BYTE *)*v357) >> 3;
                v199 = v198 + 1;
                if ((unint64_t)(v198 + 1) >> 61)
                  goto LABEL_583;
                v200 = v194 - (_QWORD)v197;
                if (v200 >> 2 > v199)
                  v199 = v200 >> 2;
                if ((unint64_t)v200 >= 0x7FFFFFFFFFFFFFF8)
                  v201 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v201 = v199;
                if (v201)
                {
                  v202 = (char *)sub_10025E6A0(v348, v201);
                  v197 = *(char **)(a1 + 56);
                  v195 = *(char **)(a1 + 64);
                }
                else
                {
                  v202 = 0;
                }
                v203 = &v202[8 * v198];
                *(_QWORD *)v203 = 0;
                v196 = v203 + 8;
                while (v195 != v197)
                {
                  v204 = *((_QWORD *)v195 - 1);
                  v195 -= 8;
                  *((_QWORD *)v203 - 1) = v204;
                  v203 -= 8;
                }
                *(_QWORD *)(a1 + 56) = v203;
                *(_QWORD *)(a1 + 64) = v196;
                *(_QWORD *)(a1 + 72) = &v202[8 * v201];
                if (v197)
                  operator delete(v197);
              }
              else
              {
                *(_QWORD *)v195 = 0;
                v196 = v195 + 8;
              }
              *(_QWORD *)(a1 + 64) = v196;
              v205 = *((_QWORD *)this + 1);
              if (v205 > 0xFFFFFFFFFFFFFFF7 || v205 + 8 > *((_QWORD *)this + 2))
              {
LABEL_332:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v196 - 1) = *(_QWORD *)(*(_QWORD *)this + v205);
              v193 = *((_QWORD *)this + 2);
              v192 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v192;
            }
LABEL_333:
            PB::Reader::recallMark(this, v358);
          }
          else
          {
            v237 = *(char **)(a1 + 64);
            v236 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v237 >= v236)
            {
              v304 = (char *)*v357;
              v305 = (v237 - (_BYTE *)*v357) >> 3;
              v306 = v305 + 1;
              if ((unint64_t)(v305 + 1) >> 61)
LABEL_583:
                sub_100259694();
              v307 = v236 - (_QWORD)v304;
              if (v307 >> 2 > v306)
                v306 = v307 >> 2;
              if ((unint64_t)v307 >= 0x7FFFFFFFFFFFFFF8)
                v308 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v308 = v306;
              if (v308)
              {
                v309 = (char *)sub_10025E6A0(v348, v308);
                v304 = *(char **)(a1 + 56);
                v237 = *(char **)(a1 + 64);
              }
              else
              {
                v309 = 0;
              }
              v332 = &v309[8 * v305];
              *(_QWORD *)v332 = 0;
              v215 = v332 + 8;
              while (v237 != v304)
              {
                v333 = *((_QWORD *)v237 - 1);
                v237 -= 8;
                *((_QWORD *)v332 - 1) = v333;
                v332 -= 8;
              }
              *(_QWORD *)(a1 + 56) = v332;
              *(_QWORD *)(a1 + 64) = v215;
              *(_QWORD *)(a1 + 72) = &v309[8 * v308];
              if (v304)
                operator delete(v304);
            }
            else
            {
              *(_QWORD *)v237 = 0;
              v215 = v237 + 8;
            }
            *(_QWORD *)(a1 + 64) = v215;
LABEL_556:
            v334 = *((_QWORD *)this + 1);
            if (v334 <= 0xFFFFFFFFFFFFFFF7 && v334 + 8 <= *((_QWORD *)this + 2))
            {
              *(v215 - 1) = *(_QWORD *)(*(_QWORD *)this + v334);
LABEL_560:
              v208 = *((_QWORD *)this + 1) + 8;
LABEL_561:
              *((_QWORD *)this + 1) = v208;
            }
            else
            {
LABEL_558:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_562:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0)
            return v6 == 0;
          break;
        case 0x12u:
          *(_BYTE *)(a1 + 340) |= 0x20u;
          v206 = *((_QWORD *)this + 1);
          if (v206 > 0xFFFFFFFFFFFFFFFBLL || v206 + 4 > *((_QWORD *)this + 2))
            goto LABEL_558;
          *(_DWORD *)(a1 + 332) = *(_DWORD *)(*(_QWORD *)this + v206);
          goto LABEL_340;
        case 0x13u:
          *(_BYTE *)(a1 + 340) |= 0x10u;
          v207 = *((_QWORD *)this + 1);
          if (v207 > 0xFFFFFFFFFFFFFFFBLL || v207 + 4 > *((_QWORD *)this + 2))
            goto LABEL_558;
          *(_DWORD *)(a1 + 328) = *(_DWORD *)(*(_QWORD *)this + v207);
LABEL_340:
          v208 = *((_QWORD *)this + 1) + 4;
          goto LABEL_561;
        default:
          if ((PB::Reader::skip(this, v16 >> 3, v16 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_562;
      }
    }
    v20 = 0;
    v21 = 0;
    v16 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v22 = v4 + 1;
      v23 = *(_BYTE *)(v13 + v4);
      *((_QWORD *)this + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0)
        goto LABEL_21;
      v20 += 7;
      v4 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        v16 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_101623818(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  double *v11;
  double *v12;
  double v13;
  double *v14;
  double *v15;
  double v16;
  double *v17;
  double *v18;
  double v19;
  double *v20;
  double *v21;
  double v22;
  double *v23;
  double *v24;
  double v25;
  double *v26;
  double *v27;
  double v28;
  double *v29;
  double *v30;
  double v31;
  double *v32;
  double *v33;
  double v34;
  double *v35;
  double *v36;
  double v37;
  double *v38;
  double *v39;
  double v40;
  char v41;

  v3 = result;
  v4 = *(_BYTE *)(result + 340);
  if ((v4 & 0x40) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 336), 1u);
    v4 = *(_BYTE *)(v3 + 340);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_49;
    }
  }
  else if ((*(_BYTE *)(result + 340) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 312), 2u);
  v4 = *(_BYTE *)(v3 + 340);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
LABEL_50:
    result = PB::Writer::write(this, *(double *)(v3 + 320), 4u);
    if ((*(_BYTE *)(v3 + 340) & 2) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_49:
  result = PB::Writer::write(this, *(double *)(v3 + 296), 3u);
  v4 = *(_BYTE *)(v3 + 340);
  if ((v4 & 8) != 0)
    goto LABEL_50;
LABEL_5:
  if ((v4 & 2) != 0)
LABEL_6:
    result = PB::Writer::write(this, *(double *)(v3 + 304), 5u);
LABEL_7:
  v5 = *(double **)(v3 + 176);
  v6 = *(double **)(v3 + 184);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7, 6u);
  }
  v8 = *(double **)(v3 + 104);
  v9 = *(double **)(v3 + 112);
  while (v8 != v9)
  {
    v10 = *v8++;
    result = PB::Writer::write(this, v10, 7u);
  }
  v11 = *(double **)(v3 + 272);
  v12 = *(double **)(v3 + 280);
  while (v11 != v12)
  {
    v13 = *v11++;
    result = PB::Writer::write(this, v13, 8u);
  }
  v14 = *(double **)(v3 + 8);
  v15 = *(double **)(v3 + 16);
  while (v14 != v15)
  {
    v16 = *v14++;
    result = PB::Writer::write(this, v16, 9u);
  }
  v17 = *(double **)(v3 + 224);
  v18 = *(double **)(v3 + 232);
  while (v17 != v18)
  {
    v19 = *v17++;
    result = PB::Writer::write(this, v19, 0xAu);
  }
  v20 = *(double **)(v3 + 152);
  v21 = *(double **)(v3 + 160);
  while (v20 != v21)
  {
    v22 = *v20++;
    result = PB::Writer::write(this, v22, 0xBu);
  }
  v23 = *(double **)(v3 + 128);
  v24 = *(double **)(v3 + 136);
  while (v23 != v24)
  {
    v25 = *v23++;
    result = PB::Writer::write(this, v25, 0xCu);
  }
  v26 = *(double **)(v3 + 248);
  v27 = *(double **)(v3 + 256);
  while (v26 != v27)
  {
    v28 = *v26++;
    result = PB::Writer::write(this, v28, 0xDu);
  }
  v29 = *(double **)(v3 + 32);
  v30 = *(double **)(v3 + 40);
  while (v29 != v30)
  {
    v31 = *v29++;
    result = PB::Writer::write(this, v31, 0xEu);
  }
  v32 = *(double **)(v3 + 200);
  v33 = *(double **)(v3 + 208);
  while (v32 != v33)
  {
    v34 = *v32++;
    result = PB::Writer::write(this, v34, 0xFu);
  }
  v35 = *(double **)(v3 + 80);
  v36 = *(double **)(v3 + 88);
  while (v35 != v36)
  {
    v37 = *v35++;
    result = PB::Writer::write(this, v37, 0x10u);
  }
  v38 = *(double **)(v3 + 56);
  v39 = *(double **)(v3 + 64);
  while (v38 != v39)
  {
    v40 = *v38++;
    result = PB::Writer::write(this, v40, 0x11u);
  }
  v41 = *(_BYTE *)(v3 + 340);
  if ((v41 & 0x20) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 332), 0x12u);
    v41 = *(_BYTE *)(v3 + 340);
  }
  if ((v41 & 0x10) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 328), 0x13u);
  return result;
}

uint64_t sub_101623A88(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2778;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 112) = 0;
  return result;
}

void sub_101623AA0(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_1021C2778;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_101623AE0(PB::Base *a1)
{
  sub_101623AA0(a1);
  operator delete();
}

uint64_t sub_101623B04(uint64_t a1, uint64_t a2)
{
  char *v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)a1 = &off_1021C2778;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (char *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  v5 = *(_WORD *)(a2 + 112);
  if ((v5 & 1) != 0)
  {
    v7 = *(_QWORD *)(a2 + 32);
    v6 = 1;
    *(_WORD *)(a1 + 112) = 1;
    *(_QWORD *)(a1 + 32) = v7;
    v5 = *(_WORD *)(a2 + 112);
    if ((v5 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*(_WORD *)(a2 + 112) & 0x200) != 0)
  {
LABEL_5:
    v8 = *(_QWORD *)(a2 + 104);
    v6 |= 0x200u;
    *(_WORD *)(a1 + 112) = v6;
    *(_QWORD *)(a1 + 104) = v8;
    v5 = *(_WORD *)(a2 + 112);
  }
LABEL_6:
  if ((v5 & 2) != 0)
  {
    v9 = *(_QWORD *)(a2 + 40);
    *(_WORD *)(a1 + 112) = v6 | 2;
    *(_QWORD *)(a1 + 40) = v9;
  }
  if (a1 != a2)
    sub_10034F2B0(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  v10 = *(_WORD *)(a2 + 112);
  if ((v10 & 8) != 0)
  {
    v13 = *(_QWORD *)(a2 + 56);
    *(_WORD *)(a1 + 112) |= 8u;
    *(_QWORD *)(a1 + 56) = v13;
    v10 = *(_WORD *)(a2 + 112);
    if ((v10 & 0x10) == 0)
    {
LABEL_12:
      if ((v10 & 0x20) == 0)
        goto LABEL_13;
      goto LABEL_21;
    }
  }
  else if ((v10 & 0x10) == 0)
  {
    goto LABEL_12;
  }
  v14 = *(_QWORD *)(a2 + 64);
  *(_WORD *)(a1 + 112) |= 0x10u;
  *(_QWORD *)(a1 + 64) = v14;
  v10 = *(_WORD *)(a2 + 112);
  if ((v10 & 0x20) == 0)
  {
LABEL_13:
    if ((v10 & 4) == 0)
      goto LABEL_14;
    goto LABEL_22;
  }
LABEL_21:
  v15 = *(_QWORD *)(a2 + 72);
  *(_WORD *)(a1 + 112) |= 0x20u;
  *(_QWORD *)(a1 + 72) = v15;
  v10 = *(_WORD *)(a2 + 112);
  if ((v10 & 4) == 0)
  {
LABEL_14:
    if ((v10 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_23;
  }
LABEL_22:
  v16 = *(_QWORD *)(a2 + 48);
  *(_WORD *)(a1 + 112) |= 4u;
  *(_QWORD *)(a1 + 48) = v16;
  v10 = *(_WORD *)(a2 + 112);
  if ((v10 & 0x80) == 0)
  {
LABEL_15:
    if ((v10 & 0x100) == 0)
      goto LABEL_16;
LABEL_24:
    v18 = *(_QWORD *)(a2 + 96);
    *(_WORD *)(a1 + 112) |= 0x100u;
    *(_QWORD *)(a1 + 96) = v18;
    if ((*(_WORD *)(a2 + 112) & 0x40) == 0)
      return a1;
    goto LABEL_17;
  }
LABEL_23:
  v17 = *(_QWORD *)(a2 + 88);
  *(_WORD *)(a1 + 112) |= 0x80u;
  *(_QWORD *)(a1 + 88) = v17;
  v10 = *(_WORD *)(a2 + 112);
  if ((v10 & 0x100) != 0)
    goto LABEL_24;
LABEL_16:
  if ((v10 & 0x40) != 0)
  {
LABEL_17:
    v11 = *(_QWORD *)(a2 + 80);
    *(_WORD *)(a1 + 112) |= 0x40u;
    *(_QWORD *)(a1 + 80) = v11;
  }
  return a1;
}

uint64_t sub_101623C94(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;
  double *v6;
  double *v7;
  double v8;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 112);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "currentTimestamp", *(double *)(a1 + 32));
    v5 = *(_WORD *)(a1 + 112);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "latestInertialTimestamp", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 112);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "latestInertialTimestampMeta", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 112);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "positionX", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 112);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "positionY", *(double *)(a1 + 64));
  v5 = *(_WORD *)(a1 + 112);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "positionZ", *(double *)(a1 + 72));
  v5 = *(_WORD *)(a1 + 112);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "predictionComputeTimeMeta", *(double *)(a1 + 80));
  v5 = *(_WORD *)(a1 + 112);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_23:
  PB::TextFormatter::format(this, "predictionTimeMeta", *(double *)(a1 + 88));
  if ((*(_WORD *)(a1 + 112) & 0x100) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "propagationTimeMeta", *(double *)(a1 + 96));
LABEL_11:
  v6 = *(double **)(a1 + 8);
  v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "rotationMatrixElement", v8);
  }
  if ((*(_WORD *)(a1 + 112) & 0x200) != 0)
    PB::TextFormatter::format(this, "targetTimestamp", *(double *)(a1 + 104));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_101623E3C(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  _BYTE v62[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v4 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 112) |= 1u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_99;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v25);
          goto LABEL_101;
        case 2u:
          *(_WORD *)(a1 + 112) |= 0x200u;
          v26 = *((_QWORD *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)this + 2))
            goto LABEL_99;
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v26);
          goto LABEL_101;
        case 3u:
          *(_WORD *)(a1 + 112) |= 2u;
          v27 = *((_QWORD *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)this + 2))
            goto LABEL_99;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v27);
          goto LABEL_101;
        case 4u:
          if ((_DWORD)v24 == 2)
          {
            if ((PB::Reader::placeMark(this, v62, v24, a4) & 1) != 0)
              return 0;
            v28 = *((_QWORD *)this + 1);
            v29 = *((_QWORD *)this + 2);
            while (v28 < v29 && !*((_BYTE *)this + 24))
            {
              v31 = *(char **)(a1 + 16);
              v30 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v31 >= v30)
              {
                v33 = (char *)*v10;
                v34 = (v31 - (_BYTE *)*v10) >> 3;
                v35 = v34 + 1;
                if ((unint64_t)(v34 + 1) >> 61)
                  goto LABEL_110;
                v36 = v30 - (_QWORD)v33;
                if (v36 >> 2 > v35)
                  v35 = v36 >> 2;
                if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
                  v37 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v37 = v35;
                if (v37)
                {
                  v38 = (char *)sub_10025E6A0(v11, v37);
                  v33 = *(char **)(a1 + 8);
                  v31 = *(char **)(a1 + 16);
                }
                else
                {
                  v38 = 0;
                }
                v39 = &v38[8 * v34];
                *(_QWORD *)v39 = 0;
                v32 = v39 + 8;
                while (v31 != v33)
                {
                  v40 = *((_QWORD *)v31 - 1);
                  v31 -= 8;
                  *((_QWORD *)v39 - 1) = v40;
                  v39 -= 8;
                }
                *(_QWORD *)(a1 + 8) = v39;
                *(_QWORD *)(a1 + 16) = v32;
                *(_QWORD *)(a1 + 24) = &v38[8 * v37];
                if (v33)
                  operator delete(v33);
              }
              else
              {
                *(_QWORD *)v31 = 0;
                v32 = v31 + 8;
              }
              *(_QWORD *)(a1 + 16) = v32;
              v41 = *((_QWORD *)this + 1);
              if (v41 > 0xFFFFFFFFFFFFFFF7 || v41 + 8 > *((_QWORD *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v32 - 1) = *(_QWORD *)(*(_QWORD *)this + v41);
              v29 = *((_QWORD *)this + 2);
              v28 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v28;
            }
            PB::Reader::recallMark(this, v62);
          }
          else
          {
            v50 = *(char **)(a1 + 16);
            v49 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v50 >= v49)
            {
              v52 = (char *)*v10;
              v53 = (v50 - (_BYTE *)*v10) >> 3;
              v54 = v53 + 1;
              if ((unint64_t)(v53 + 1) >> 61)
LABEL_110:
                sub_100259694();
              v55 = v49 - (_QWORD)v52;
              if (v55 >> 2 > v54)
                v54 = v55 >> 2;
              if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
                v56 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v56 = v54;
              if (v56)
              {
                v57 = (char *)sub_10025E6A0(v11, v56);
                v52 = *(char **)(a1 + 8);
                v50 = *(char **)(a1 + 16);
              }
              else
              {
                v57 = 0;
              }
              v58 = &v57[8 * v53];
              *(_QWORD *)v58 = 0;
              v51 = v58 + 8;
              while (v50 != v52)
              {
                v59 = *((_QWORD *)v50 - 1);
                v50 -= 8;
                *((_QWORD *)v58 - 1) = v59;
                v58 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v58;
              *(_QWORD *)(a1 + 16) = v51;
              *(_QWORD *)(a1 + 24) = &v57[8 * v56];
              if (v52)
                operator delete(v52);
            }
            else
            {
              *(_QWORD *)v50 = 0;
              v51 = v50 + 8;
            }
            *(_QWORD *)(a1 + 16) = v51;
            v60 = *((_QWORD *)this + 1);
            if (v60 <= 0xFFFFFFFFFFFFFFF7 && v60 + 8 <= *((_QWORD *)this + 2))
            {
              *(v51 - 1) = *(_QWORD *)(*(_QWORD *)this + v60);
LABEL_101:
              *((_QWORD *)this + 1) += 8;
            }
            else
            {
LABEL_99:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_102:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || *((_BYTE *)this + 24))
            return v6 == 0;
          break;
        case 5u:
          *(_WORD *)(a1 + 112) |= 8u;
          v42 = *((_QWORD *)this + 1);
          if (v42 > 0xFFFFFFFFFFFFFFF7 || v42 + 8 > *((_QWORD *)this + 2))
            goto LABEL_99;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v42);
          goto LABEL_101;
        case 6u:
          *(_WORD *)(a1 + 112) |= 0x10u;
          v43 = *((_QWORD *)this + 1);
          if (v43 > 0xFFFFFFFFFFFFFFF7 || v43 + 8 > *((_QWORD *)this + 2))
            goto LABEL_99;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v43);
          goto LABEL_101;
        case 7u:
          *(_WORD *)(a1 + 112) |= 0x20u;
          v44 = *((_QWORD *)this + 1);
          if (v44 > 0xFFFFFFFFFFFFFFF7 || v44 + 8 > *((_QWORD *)this + 2))
            goto LABEL_99;
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v44);
          goto LABEL_101;
        case 8u:
          *(_WORD *)(a1 + 112) |= 4u;
          v45 = *((_QWORD *)this + 1);
          if (v45 > 0xFFFFFFFFFFFFFFF7 || v45 + 8 > *((_QWORD *)this + 2))
            goto LABEL_99;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v45);
          goto LABEL_101;
        case 9u:
          *(_WORD *)(a1 + 112) |= 0x80u;
          v46 = *((_QWORD *)this + 1);
          if (v46 > 0xFFFFFFFFFFFFFFF7 || v46 + 8 > *((_QWORD *)this + 2))
            goto LABEL_99;
          *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v46);
          goto LABEL_101;
        case 0xAu:
          *(_WORD *)(a1 + 112) |= 0x100u;
          v47 = *((_QWORD *)this + 1);
          if (v47 > 0xFFFFFFFFFFFFFFF7 || v47 + 8 > *((_QWORD *)this + 2))
            goto LABEL_99;
          *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v47);
          goto LABEL_101;
        case 0xBu:
          *(_WORD *)(a1 + 112) |= 0x40u;
          v48 = *((_QWORD *)this + 1);
          if (v48 > 0xFFFFFFFFFFFFFFF7 || v48 + 8 > *((_QWORD *)this + 2))
            goto LABEL_99;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v48);
          goto LABEL_101;
        default:
          if ((PB::Reader::skip(this, v15 >> 3, v15 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_102;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v21 = v4 + 1;
      v22 = *(_BYTE *)(v12 + v4);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v4 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_101624400(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;
  double *v5;
  double *v6;
  double v7;
  __int16 v8;

  v3 = result;
  v4 = *(_WORD *)(result + 112);
  if ((v4 & 1) == 0)
  {
    if ((*(_WORD *)(result + 112) & 0x200) == 0)
      goto LABEL_3;
LABEL_17:
    result = PB::Writer::write(this, *(double *)(v3 + 104), 2u);
    if ((*(_WORD *)(v3 + 112) & 2) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  result = PB::Writer::write(this, *(double *)(result + 32), 1u);
  v4 = *(_WORD *)(v3 + 112);
  if ((v4 & 0x200) != 0)
    goto LABEL_17;
LABEL_3:
  if ((v4 & 2) != 0)
LABEL_4:
    result = PB::Writer::write(this, *(double *)(v3 + 40), 3u);
LABEL_5:
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7, 4u);
  }
  v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 8) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 56), 5u);
    v8 = *(_WORD *)(v3 + 112);
    if ((v8 & 0x10) == 0)
    {
LABEL_10:
      if ((v8 & 0x20) == 0)
        goto LABEL_11;
      goto LABEL_21;
    }
  }
  else if ((v8 & 0x10) == 0)
  {
    goto LABEL_10;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 64), 6u);
  v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 0x20) == 0)
  {
LABEL_11:
    if ((v8 & 4) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 72), 7u);
  v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 4) == 0)
  {
LABEL_12:
    if ((v8 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 48), 8u);
  v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 0x80) == 0)
  {
LABEL_13:
    if ((v8 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(double *)(v3 + 88), 9u);
  v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 0x100) == 0)
  {
LABEL_14:
    if ((v8 & 0x40) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 80), 0xBu);
  }
LABEL_24:
  result = PB::Writer::write(this, *(double *)(v3 + 96), 0xAu);
  if ((*(_WORD *)(v3 + 112) & 0x40) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 80), 0xBu);
  return result;
}

double sub_101624568(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021C27B0;
  *(_DWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_10162458C(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1021C27B0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_1016245DC(PB::Base *a1)
{
  sub_10162458C(a1);
  operator delete();
}

uint64_t sub_101624600(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_1021C27B0;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if ((*(_BYTE *)(a2 + 64) & 1) != 0)
  {
    v5 = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 64) = 1;
    *(_QWORD *)(a1 + 56) = v5;
  }
  if (a1 != a2)
  {
    sub_10034F2B0(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    sub_10034F2B0((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
  }
  return a1;
}

uint64_t sub_101624690(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "so3", v7);
  }
  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  v8 = *(double **)(a1 + 32);
  v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "translation", v10);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_101624744(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  _QWORD *v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  _BYTE v80[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 32);
    v11 = a1 + 48;
    v12 = (void **)(a1 + 8);
    v13 = a1 + 24;
    while (1)
    {
      v14 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
      {
        v21 = 0;
        v22 = 0;
        v17 = 0;
        if (v4 > v5)
          v5 = v4;
        while (v5 != v4)
        {
          v23 = v4 + 1;
          v24 = *(_BYTE *)(v14 + v4);
          *((_QWORD *)this + 1) = v23;
          v17 |= (unint64_t)(v24 & 0x7F) << v21;
          if ((v24 & 0x80) == 0)
            goto LABEL_21;
          v21 += 7;
          v4 = v23;
          if (v22++ >= 9)
          {
LABEL_20:
            v17 = 0;
            goto LABEL_21;
          }
        }
        v6 = 1;
        *((_BYTE *)this + 24) = 1;
        return v6 == 0;
      }
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v4 = v18;
        if (v16++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      v27 = v17 >> 3;
      if ((v17 >> 3) == 3)
        break;
      if ((_DWORD)v27 == 2)
      {
        if ((_DWORD)v26 == 2)
        {
          if ((PB::Reader::placeMark(this, v80, v26, a4) & 1) != 0)
            return 0;
          v43 = *((_QWORD *)this + 1);
          v44 = *((_QWORD *)this + 2);
          while (v43 < v44 && !*((_BYTE *)this + 24))
          {
            v46 = *(char **)(a1 + 16);
            v45 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v46 >= v45)
            {
              v48 = (char *)*v12;
              v49 = (v46 - (_BYTE *)*v12) >> 3;
              v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 61)
                goto LABEL_128;
              v51 = v45 - (_QWORD)v48;
              if (v51 >> 2 > v50)
                v50 = v51 >> 2;
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
                v52 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v52 = v50;
              if (v52)
              {
                v53 = (char *)sub_10025E6A0(v13, v52);
                v48 = *(char **)(a1 + 8);
                v46 = *(char **)(a1 + 16);
              }
              else
              {
                v53 = 0;
              }
              v54 = &v53[8 * v49];
              *(_QWORD *)v54 = 0;
              v47 = v54 + 8;
              while (v46 != v48)
              {
                v55 = *((_QWORD *)v46 - 1);
                v46 -= 8;
                *((_QWORD *)v54 - 1) = v55;
                v54 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v54;
              *(_QWORD *)(a1 + 16) = v47;
              *(_QWORD *)(a1 + 24) = &v53[8 * v52];
              if (v48)
                operator delete(v48);
            }
            else
            {
              *(_QWORD *)v46 = 0;
              v47 = v46 + 8;
            }
            *(_QWORD *)(a1 + 16) = v47;
            v56 = *((_QWORD *)this + 1);
            if (v56 > 0xFFFFFFFFFFFFFFF7 || v56 + 8 > *((_QWORD *)this + 2))
              goto LABEL_82;
            *(v47 - 1) = *(_QWORD *)(*(_QWORD *)this + v56);
            v44 = *((_QWORD *)this + 2);
            v43 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v43;
          }
          goto LABEL_83;
        }
        v61 = *(char **)(a1 + 16);
        v60 = *(_QWORD *)(a1 + 24);
        if ((unint64_t)v61 >= v60)
        {
          v68 = (char *)*v12;
          v69 = (v61 - (_BYTE *)*v12) >> 3;
          v70 = v69 + 1;
          if ((unint64_t)(v69 + 1) >> 61)
LABEL_128:
            sub_100259694();
          v71 = v60 - (_QWORD)v68;
          if (v71 >> 2 > v70)
            v70 = v71 >> 2;
          if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
            v72 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v72 = v70;
          if (v72)
          {
            v73 = (char *)sub_10025E6A0(v13, v72);
            v68 = *(char **)(a1 + 8);
            v61 = *(char **)(a1 + 16);
          }
          else
          {
            v73 = 0;
          }
          v76 = &v73[8 * v69];
          *(_QWORD *)v76 = 0;
          v59 = v76 + 8;
          while (v61 != v68)
          {
            v77 = *((_QWORD *)v61 - 1);
            v61 -= 8;
            *((_QWORD *)v76 - 1) = v77;
            v76 -= 8;
          }
          *(_QWORD *)(a1 + 8) = v76;
          *(_QWORD *)(a1 + 16) = v59;
          *(_QWORD *)(a1 + 24) = &v73[8 * v72];
          if (v68)
            operator delete(v68);
        }
        else
        {
          *(_QWORD *)v61 = 0;
          v59 = v61 + 8;
        }
        *(_QWORD *)(a1 + 16) = v59;
LABEL_114:
        v78 = *((_QWORD *)this + 1);
        if (v78 > 0xFFFFFFFFFFFFFFF7 || v78 + 8 > *((_QWORD *)this + 2))
        {
LABEL_116:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_119;
        }
        *(v59 - 1) = *(_QWORD *)(*(_QWORD *)this + v78);
        goto LABEL_118;
      }
      if ((_DWORD)v27 == 1)
      {
        *(_BYTE *)(a1 + 64) |= 1u;
        v28 = *((_QWORD *)this + 1);
        if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((_QWORD *)this + 2))
          goto LABEL_116;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v28);
LABEL_118:
        *((_QWORD *)this + 1) += 8;
        goto LABEL_119;
      }
      if ((PB::Reader::skip(this, v27, v17 & 7, 0) & 1) == 0)
        return 0;
LABEL_119:
      v4 = *((_QWORD *)this + 1);
      v5 = *((_QWORD *)this + 2);
      v6 = *((unsigned __int8 *)this + 24);
      if (v4 >= v5 || *((_BYTE *)this + 24))
        return v6 == 0;
    }
    if ((_DWORD)v26 == 2)
    {
      if ((PB::Reader::placeMark(this, v80, v26, a4) & 1) != 0)
        return 0;
      v29 = *((_QWORD *)this + 1);
      v30 = *((_QWORD *)this + 2);
      while (v29 < v30 && !*((_BYTE *)this + 24))
      {
        v32 = *(char **)(a1 + 40);
        v31 = *(_QWORD *)(a1 + 48);
        if ((unint64_t)v32 >= v31)
        {
          v34 = (char *)*v10;
          v35 = (v32 - (_BYTE *)*v10) >> 3;
          v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 61)
            goto LABEL_127;
          v37 = v31 - (_QWORD)v34;
          if (v37 >> 2 > v36)
            v36 = v37 >> 2;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
            v38 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v38 = v36;
          if (v38)
          {
            v39 = (char *)sub_10025E6A0(v11, v38);
            v34 = *(char **)(a1 + 32);
            v32 = *(char **)(a1 + 40);
          }
          else
          {
            v39 = 0;
          }
          v40 = &v39[8 * v35];
          *(_QWORD *)v40 = 0;
          v33 = v40 + 8;
          while (v32 != v34)
          {
            v41 = *((_QWORD *)v32 - 1);
            v32 -= 8;
            *((_QWORD *)v40 - 1) = v41;
            v40 -= 8;
          }
          *(_QWORD *)(a1 + 32) = v40;
          *(_QWORD *)(a1 + 40) = v33;
          *(_QWORD *)(a1 + 48) = &v39[8 * v38];
          if (v34)
            operator delete(v34);
        }
        else
        {
          *(_QWORD *)v32 = 0;
          v33 = v32 + 8;
        }
        *(_QWORD *)(a1 + 40) = v33;
        v42 = *((_QWORD *)this + 1);
        if (v42 > 0xFFFFFFFFFFFFFFF7 || v42 + 8 > *((_QWORD *)this + 2))
        {
LABEL_82:
          *((_BYTE *)this + 24) = 1;
          break;
        }
        *(v33 - 1) = *(_QWORD *)(*(_QWORD *)this + v42);
        v30 = *((_QWORD *)this + 2);
        v29 = *((_QWORD *)this + 1) + 8;
        *((_QWORD *)this + 1) = v29;
      }
LABEL_83:
      PB::Reader::recallMark(this, v80);
      goto LABEL_119;
    }
    v58 = *(char **)(a1 + 40);
    v57 = *(_QWORD *)(a1 + 48);
    if ((unint64_t)v58 >= v57)
    {
      v62 = (char *)*v10;
      v63 = (v58 - (_BYTE *)*v10) >> 3;
      v64 = v63 + 1;
      if ((unint64_t)(v63 + 1) >> 61)
LABEL_127:
        sub_100259694();
      v65 = v57 - (_QWORD)v62;
      if (v65 >> 2 > v64)
        v64 = v65 >> 2;
      if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
        v66 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v66 = v64;
      if (v66)
      {
        v67 = (char *)sub_10025E6A0(v11, v66);
        v62 = *(char **)(a1 + 32);
        v58 = *(char **)(a1 + 40);
      }
      else
      {
        v67 = 0;
      }
      v74 = &v67[8 * v63];
      *(_QWORD *)v74 = 0;
      v59 = v74 + 8;
      while (v58 != v62)
      {
        v75 = *((_QWORD *)v58 - 1);
        v58 -= 8;
        *((_QWORD *)v74 - 1) = v75;
        v74 -= 8;
      }
      *(_QWORD *)(a1 + 32) = v74;
      *(_QWORD *)(a1 + 40) = v59;
      *(_QWORD *)(a1 + 48) = &v67[8 * v66];
      if (v62)
        operator delete(v62);
    }
    else
    {
      *(_QWORD *)v58 = 0;
      v59 = v58 + 8;
    }
    *(_QWORD *)(a1 + 40) = v59;
    goto LABEL_114;
  }
  return v6 == 0;
}

uint64_t sub_101624CB4(uint64_t result, PB::Writer *this)
{
  _QWORD *v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;

  v3 = (_QWORD *)result;
  if ((*(_BYTE *)(result + 64) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 56), 1u);
  v4 = (double *)v3[1];
  v5 = (double *)v3[2];
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6, 2u);
  }
  v8 = (double *)v3[4];
  v7 = (double *)v3[5];
  while (v8 != v7)
  {
    v9 = *v8++;
    result = PB::Writer::write(this, v9, 3u);
  }
  return result;
}

uint64_t sub_101624D34(uint64_t result)
{
  *(_QWORD *)result = &off_1021C27E8;
  *(_DWORD *)(result + 88) = 0;
  return result;
}

void sub_101624D4C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_101624D70(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  double result;
  int v5;
  int v6;
  char v7;
  char v8;
  int v9;
  char v10;

  *(_QWORD *)a1 = &off_1021C27E8;
  *(_DWORD *)(a1 + 88) = 0;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x80) != 0)
  {
    result = *(double *)(a2 + 64);
    v3 = 128;
    *(_WORD *)(a1 + 88) = 128;
    *(double *)(a1 + 64) = result;
    v2 = *(_WORD *)(a2 + 88);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 48);
    v3 |= 0x20u;
    *(_WORD *)(a1 + 88) = v3;
    *(double *)(a1 + 48) = result;
    v2 = *(_WORD *)(a2 + 88);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    v5 = *(_DWORD *)(a2 + 76);
    v3 |= 0x200u;
    *(_WORD *)(a1 + 88) = v3;
    *(_DWORD *)(a1 + 76) = v5;
    v2 = *(_WORD *)(a2 + 88);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_21;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 24) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 32) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 16) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  v6 = *(_DWORD *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 88) = v3;
  *(_DWORD *)(a1 + 72) = v6;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 8) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 0x800) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 56) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x800) == 0)
  {
LABEL_14:
    if ((v2 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  v7 = *(_BYTE *)(a2 + 84);
  v3 |= 0x800u;
  *(_WORD *)(a1 + 88) = v3;
  *(_BYTE *)(a1 + 84) = v7;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x1000) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_28;
  }
LABEL_27:
  v8 = *(_BYTE *)(a2 + 85);
  v3 |= 0x1000u;
  *(_WORD *)(a1 + 88) = v3;
  *(_BYTE *)(a1 + 85) = v8;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_29;
  }
LABEL_28:
  v9 = *(_DWORD *)(a2 + 80);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 88) = v3;
  *(_DWORD *)(a1 + 80) = v9;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x2000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10) == 0)
      return result;
LABEL_30:
    result = *(double *)(a2 + 40);
    *(_WORD *)(a1 + 88) = v3 | 0x10;
    *(double *)(a1 + 40) = result;
    return result;
  }
LABEL_29:
  v10 = *(_BYTE *)(a2 + 86);
  v3 |= 0x2000u;
  *(_WORD *)(a1 + 88) = v3;
  *(_BYTE *)(a1 + 86) = v10;
  if ((*(_WORD *)(a2 + 88) & 0x10) != 0)
    goto LABEL_30;
  return result;
}

uint64_t sub_101624F14(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "cadence", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 88);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "grade", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x800) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "gradeType", *(_DWORD *)(a1 + 72));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x800) == 0)
  {
LABEL_5:
    if ((v5 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "hasGps", *(_BYTE *)(a1 + 84));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x1000) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "hasStrideCal", *(_BYTE *)(a1 + 85));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "heartRate", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "heartRateConfidence", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "hrTime", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "isStroller", *(_BYTE *)(a1 + 86));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "metSource", *(_DWORD *)(a1 + 76));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x20) == 0)
  {
LABEL_12:
    if ((v5 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "mets", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x40) == 0)
  {
LABEL_13:
    if ((v5 & 0x80) == 0)
      goto LABEL_14;
LABEL_29:
    PB::TextFormatter::format(this, "startDate", *(double *)(a1 + 64));
    if ((*(_WORD *)(a1 + 88) & 0x400) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_15;
  }
LABEL_28:
  PB::TextFormatter::format(this, "pace", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x80) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v5 & 0x400) != 0)
LABEL_15:
    PB::TextFormatter::format(this, "workoutType", *(_DWORD *)(a1 + 80));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101625104(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  int v43;
  BOOL v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 88) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 2u:
              *(_WORD *)(a1 + 88) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 3u:
              *(_WORD *)(a1 + 88) |= 0x200u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_108;
                  }
                  v47 = v21++;
                  v48 = *(_BYTE *)(v22 + v47);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_107:
                    v2 = v47 + 1;
                    goto LABEL_108;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_107;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_108;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_108:
              *(_DWORD *)(a1 + 76) = v25;
              goto LABEL_119;
            case 4u:
              *(_WORD *)(a1 + 88) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 5u:
              *(_WORD *)(a1 + 88) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 6u:
              *(_WORD *)(a1 + 88) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 7u:
              *(_WORD *)(a1 + 88) |= 0x100u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_113;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_112:
                    v2 = v51 + 1;
                    goto LABEL_113;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_112;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_113;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_113:
              *(_DWORD *)(a1 + 72) = v31;
              goto LABEL_119;
            case 8u:
              *(_WORD *)(a1 + 88) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 9u:
              *(_WORD *)(a1 + 88) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 0xAu:
              *(_WORD *)(a1 + 88) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 84) = v34;
              goto LABEL_119;
            case 0xBu:
              *(_WORD *)(a1 + 88) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v36 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v35 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v36 = v35 != 0;
              }
              *(_BYTE *)(a1 + 85) = v36;
              goto LABEL_119;
            case 0xCu:
              *(_WORD *)(a1 + 88) |= 0x400u;
              v37 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v38 = *(_QWORD *)this;
              if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v41 = 0;
                if (v2 <= v37)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_118;
                  }
                  v55 = v37++;
                  v56 = *(_BYTE *)(v38 + v55);
                  *((_QWORD *)this + 1) = v37;
                  v41 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_117:
                    v2 = v55 + 1;
                    goto LABEL_118;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v41) = 0;
                goto LABEL_117;
              }
              v39 = 0;
              v40 = 0;
              v41 = 0;
              do
              {
                v2 = v37 + 1;
                *((_QWORD *)this + 1) = v37 + 1;
                v42 = *(_BYTE *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0)
                  goto LABEL_118;
                v39 += 7;
                v37 = v2;
                v14 = v40++ > 8;
              }
              while (!v14);
              LODWORD(v41) = 0;
LABEL_118:
              *(_DWORD *)(a1 + 80) = v41;
LABEL_119:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xDu:
              *(_WORD *)(a1 + 88) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v44 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v43 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v44 = v43 != 0;
              }
              *(_BYTE *)(a1 + 86) = v44;
              goto LABEL_119;
            case 0xEu:
              *(_WORD *)(a1 + 88) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_103:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_74:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_119;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_119;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1016257D0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 88);
  if ((v4 & 0x80) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 64), 1u);
    v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 48), 2u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 76), 3u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 4u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 5u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 6u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 72), 7u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 8u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(double *)(v3 + 56), 9u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x800) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 84), 0xAu);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 85), 0xBu);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 0xCu);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x2000) == 0)
  {
LABEL_14:
    if ((v4 & 0x10) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 40), 0xEu);
  }
LABEL_28:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 86), 0xDu);
  if ((*(_WORD *)(v3 + 88) & 0x10) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 40), 0xEu);
  return result;
}

uint64_t sub_10162597C(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2820;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_101625994(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_1016259B8(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_1021C2820;
  *(_DWORD *)(a1 + 40) = 0;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 4) != 0)
  {
    result = *(double *)(a2 + 24);
    v3 = 4;
    *(_BYTE *)(a1 + 40) = 4;
    *(double *)(a1 + 24) = result;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 40) = v3;
    *(double *)(a1 + 16) = result;
    v2 = *(_BYTE *)(a2 + 40);
  }
LABEL_6:
  if ((v2 & 1) == 0)
  {
    if ((v2 & 8) == 0)
      return result;
LABEL_10:
    result = *(double *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = v3 | 8;
    *(double *)(a1 + 32) = result;
    return result;
  }
  result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(a1 + 40) = v3;
  *(double *)(a1 + 8) = result;
  if ((*(_BYTE *)(a2 + 40) & 8) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_101625A44(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "hr", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "time", *(double *)(a1 + 24));
      if ((*(_BYTE *)(a1 + 40) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "hrTime", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "vo2", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101625AF4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 40) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_37:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101625D50(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 32), 4u);
  }
LABEL_8:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  if ((*(_BYTE *)(v3 + 40) & 8) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 32), 4u);
  return result;
}

uint64_t sub_101625DE4(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2858;
  *(_DWORD *)(result + 72) = 0;
  return result;
}

void sub_101625DFC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101625E20(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  *(_QWORD *)result = &off_1021C2858;
  *(_DWORD *)(result + 72) = 0;
  v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x20) != 0)
  {
    v4 = *(_QWORD *)(a2 + 48);
    v3 = 32;
    *(_WORD *)(result + 72) = 32;
    *(_QWORD *)(result + 48) = v4;
    v2 = *(_WORD *)(a2 + 72);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(result + 72) = v3;
    *(_QWORD *)(result + 16) = v5;
    v2 = *(_WORD *)(a2 + 72);
  }
LABEL_6:
  if ((v2 & 0x100) != 0)
  {
    v6 = *(_DWORD *)(a2 + 68);
    v3 |= 0x100u;
    *(_WORD *)(result + 72) = v3;
    *(_DWORD *)(result + 68) = v6;
    v2 = *(_WORD *)(a2 + 72);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 72) = v3;
  *(_QWORD *)(result + 8) = v7;
  v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v8 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 72) = v3;
  *(_QWORD *)(result + 32) = v8;
  v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  v9 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 72) = v3;
  *(_QWORD *)(result + 40) = v9;
  v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v10 = *(_QWORD *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(result + 72) = v3;
  *(_QWORD *)(result + 56) = v10;
  v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      return result;
LABEL_20:
    v12 = *(_DWORD *)(a2 + 64);
    *(_WORD *)(result + 72) = v3 | 0x80;
    *(_DWORD *)(result + 64) = v12;
    return result;
  }
LABEL_19:
  v11 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 72) = v3;
  *(_QWORD *)(result + 24) = v11;
  if ((*(_WORD *)(a2 + 72) & 0x80) != 0)
    goto LABEL_20;
  return result;
}

uint64_t sub_101625F38(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "durationInSeconds", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 72);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "estimatedVo2Max", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "filteredVo2Max", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "hrMax", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "hrMin", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "sessionType", *(_DWORD *)(a1 + 64));
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(this, "variance", *(double *)(a1 + 56));
    if ((*(_WORD *)(a1 + 72) & 0x100) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x40) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 0x100) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "workoutType", *(_DWORD *)(a1 + 68));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101626088(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 72) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 2u:
              *(_WORD *)(a1 + 72) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 3u:
              *(_WORD *)(a1 + 72) |= 0x100u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_79;
                  }
                  v35 = v21++;
                  v36 = *(_BYTE *)(v22 + v35);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_78:
                    v2 = v35 + 1;
                    goto LABEL_79;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_78;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_79;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_79:
              *(_DWORD *)(a1 + 68) = v25;
              goto LABEL_85;
            case 4u:
              *(_WORD *)(a1 + 72) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 5u:
              *(_WORD *)(a1 + 72) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 6u:
              *(_WORD *)(a1 + 72) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 7u:
              *(_WORD *)(a1 + 72) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 8u:
              *(_WORD *)(a1 + 72) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_74:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_51:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_85;
            case 9u:
              *(_WORD *)(a1 + 72) |= 0x80u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_84;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_83:
                    v2 = v39 + 1;
                    goto LABEL_84;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_83;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_84;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_84:
              *(_DWORD *)(a1 + 64) = v31;
LABEL_85:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_85;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101626564(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 72);
  if ((v4 & 0x20) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 48), 1u);
    v4 = *(_WORD *)(v3 + 72);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x100) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 68), 3u);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 5u);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 6u);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 56), 7u);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 64), 9u);
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 8u);
  if ((*(_WORD *)(v3 + 72) & 0x80) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 64), 9u);
  return result;
}

uint64_t sub_101626684(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2890;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_10162669C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1016266C0(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  int v9;

  *(_QWORD *)result = &off_1021C2890;
  *(_DWORD *)(result + 20) = 0;
  v2 = *(_BYTE *)(a2 + 20);
  if ((v2 & 0x10) != 0)
  {
    v4 = *(_BYTE *)(a2 + 15);
    v3 = 16;
    *(_BYTE *)(result + 20) = 16;
    *(_BYTE *)(result + 15) = v4;
    v2 = *(_BYTE *)(a2 + 20);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 20) & 8) != 0)
  {
LABEL_5:
    v5 = *(_BYTE *)(a2 + 14);
    v3 |= 8u;
    *(_BYTE *)(result + 20) = v3;
    *(_BYTE *)(result + 14) = v5;
    v2 = *(_BYTE *)(a2 + 20);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *(_BYTE *)(a2 + 12);
    v3 |= 2u;
    *(_BYTE *)(result + 20) = v3;
    *(_BYTE *)(result + 12) = v6;
    v2 = *(_BYTE *)(a2 + 20);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_BYTE *)(a2 + 16);
  v3 |= 0x20u;
  *(_BYTE *)(result + 20) = v3;
  *(_BYTE *)(result + 16) = v7;
  v2 = *(_BYTE *)(a2 + 20);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      return result;
LABEL_14:
    v9 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = v3 | 1;
    *(_DWORD *)(result + 8) = v9;
    return result;
  }
LABEL_13:
  v8 = *(_BYTE *)(a2 + 13);
  v3 |= 4u;
  *(_BYTE *)(result + 20) = v3;
  *(_BYTE *)(result + 13) = v8;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
    goto LABEL_14;
  return result;
}

uint64_t sub_101626784(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "basebandHint", *(_BYTE *)(a1 + 12));
    v5 = *(_BYTE *)(a1 + 20);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(a1 + 20) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "btHint", *(_BYTE *)(a1 + 13));
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(this, "gpsHint", *(_BYTE *)(a1 + 14));
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(this, "vehicularData", *(_DWORD *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 20) & 0x20) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(this, "motionHint", *(_BYTE *)(a1 + 15));
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x20) != 0)
LABEL_7:
    PB::TextFormatter::format(this, "wifiHint", *(_BYTE *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101626874(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v3 > v2)
          v2 = v3;
        while (v2 != v3)
        {
          v17 = v3 + 1;
          v18 = *(_BYTE *)(v8 + v3);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v3 + 1;
          *((_QWORD *)this + 1) = v3 + 1;
          v13 = *(_BYTE *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v3 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 20) |= 0x10u;
              v3 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              if (v3 >= v2)
              {
                v21 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v20 = *(unsigned __int8 *)(*(_QWORD *)this + v3++);
                *((_QWORD *)this + 1) = v3;
                v21 = v20 != 0;
              }
              *(_BYTE *)(a1 + 15) = v21;
              goto LABEL_64;
            case 2u:
              *(_BYTE *)(a1 + 20) |= 8u;
              v3 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              if (v3 >= v2)
              {
                v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v23 = *(unsigned __int8 *)(*(_QWORD *)this + v3++);
                *((_QWORD *)this + 1) = v3;
                v24 = v23 != 0;
              }
              *(_BYTE *)(a1 + 14) = v24;
              goto LABEL_64;
            case 3u:
              *(_BYTE *)(a1 + 20) |= 2u;
              v3 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              if (v3 >= v2)
              {
                v26 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v25 = *(unsigned __int8 *)(*(_QWORD *)this + v3++);
                *((_QWORD *)this + 1) = v3;
                v26 = v25 != 0;
              }
              *(_BYTE *)(a1 + 12) = v26;
              goto LABEL_64;
            case 4u:
              *(_BYTE *)(a1 + 20) |= 0x20u;
              v3 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              if (v3 >= v2)
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v3++);
                *((_QWORD *)this + 1) = v3;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 16) = v28;
              goto LABEL_64;
            case 5u:
              *(_BYTE *)(a1 + 20) |= 4u;
              v3 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              if (v3 >= v2)
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v3++);
                *((_QWORD *)this + 1) = v3;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 13) = v30;
              goto LABEL_64;
            case 6u:
              *(_BYTE *)(a1 + 20) |= 1u;
              v31 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v32 = *(_QWORD *)this;
              if (v31 > 0xFFFFFFFFFFFFFFF5 || v31 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v35 = 0;
                if (v2 <= v31)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_63;
                  }
                  v39 = v31++;
                  v40 = *(_BYTE *)(v32 + v39);
                  *((_QWORD *)this + 1) = v31;
                  v35 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_62:
                    v3 = v39 + 1;
                    goto LABEL_63;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v35) = 0;
                goto LABEL_62;
              }
              v33 = 0;
              v34 = 0;
              v35 = 0;
              do
              {
                v3 = v31 + 1;
                *((_QWORD *)this + 1) = v31 + 1;
                v36 = *(_BYTE *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0)
                  goto LABEL_63;
                v33 += 7;
                v31 = v3;
                v14 = v34++ > 8;
              }
              while (!v14);
              LODWORD(v35) = 0;
LABEL_63:
              *(_DWORD *)(a1 + 8) = v35;
LABEL_64:
              v4 = *((unsigned __int8 *)this + 24);
              if (v3 >= v2 || *((_BYTE *)this + 24))
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v3 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              goto LABEL_64;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101626C18(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::write(this, *(_BYTE *)(result + 15), 1u);
    v4 = *(_BYTE *)(v3 + 20);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(result + 20) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 14), 2u);
  v4 = *(_BYTE *)(v3 + 20);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 12), 3u);
  v4 = *(_BYTE *)(v3 + 20);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 16), 4u);
  v4 = *(_BYTE *)(v3 + 20);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 8), 6u);
  }
LABEL_12:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 13), 5u);
  if ((*(_BYTE *)(v3 + 20) & 1) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 8), 6u);
  return result;
}

uint64_t sub_101626CE4(uint64_t result)
{
  *(_QWORD *)result = &off_1021C28C8;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void sub_101626CFC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_101626D20(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  double result;
  int v5;
  int v6;
  int v7;

  *(_QWORD *)a1 = &off_1021C28C8;
  *(_DWORD *)(a1 + 60) = 0;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_WORD *)(a1 + 60) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_WORD *)(a2 + 60) & 0x100) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 48);
    v3 |= 0x100u;
    *(_WORD *)(a1 + 60) = v3;
    *(_DWORD *)(a1 + 48) = LODWORD(result);
    v2 = *(_WORD *)(a2 + 60);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    LODWORD(result) = *(_DWORD *)(a2 + 52);
    v3 |= 0x200u;
    *(_WORD *)(a1 + 60) = v3;
    *(_DWORD *)(a1 + 52) = LODWORD(result);
    v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 56);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 60) = v3;
  *(_DWORD *)(a1 + 56) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  LODWORD(result) = *(_DWORD *)(a2 + 36);
  v3 |= 0x20u;
  *(_WORD *)(a1 + 60) = v3;
  *(_DWORD *)(a1 + 36) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  LODWORD(result) = *(_DWORD *)(a2 + 40);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 60) = v3;
  *(_DWORD *)(a1 + 40) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  LODWORD(result) = *(_DWORD *)(a2 + 44);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 60) = v3;
  *(_DWORD *)(a1 + 44) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v5 = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(a1 + 60) = v3;
  *(_DWORD *)(a1 + 24) = v5;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  v6 = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_WORD *)(a1 + 60) = v3;
  *(_DWORD *)(a1 + 28) = v6;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0)
      return result;
LABEL_24:
    result = *(double *)(a2 + 16);
    *(_WORD *)(a1 + 60) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
LABEL_23:
  v7 = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 60) = v3;
  *(_DWORD *)(a1 + 32) = v7;
  if ((*(_WORD *)(a2 + 60) & 2) != 0)
    goto LABEL_24;
  return result;
}

uint64_t sub_101626E70(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "sourceX", *(_DWORD *)(a1 + 24));
    v5 = *(_WORD *)(a1 + 60);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "sourceY", *(_DWORD *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "sourceZ", *(_DWORD *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "velocityUncX", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "velocityUncY", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "velocityUncZ", *(float *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(this, "velocityY", *(float *)(a1 + 52));
    if ((*(_WORD *)(a1 + 60) & 0x400) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(this, "velocityX", *(float *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x200) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x400) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "velocityZ", *(float *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101627000(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 60) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 2u:
              *(_WORD *)(a1 + 60) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_45;
            case 3u:
              *(_WORD *)(a1 + 60) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_45;
            case 4u:
              *(_WORD *)(a1 + 60) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_45;
            case 5u:
              *(_WORD *)(a1 + 60) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_45;
            case 6u:
              *(_WORD *)(a1 + 60) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_45;
            case 7u:
              *(_WORD *)(a1 + 60) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_45:
              v2 = *((_QWORD *)this + 1) + 4;
              goto LABEL_93;
            case 8u:
              *(_WORD *)(a1 + 60) |= 4u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_98;
                  }
                  v41 = v21++;
                  v42 = *(_BYTE *)(v22 + v41);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_97:
                    v2 = v41 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_97;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_98;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 24) = v25;
              goto LABEL_109;
            case 9u:
              *(_WORD *)(a1 + 60) |= 8u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_103;
                  }
                  v45 = v27++;
                  v46 = *(_BYTE *)(v28 + v45);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_102:
                    v2 = v45 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_102;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_103;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_103:
              *(_DWORD *)(a1 + 28) = v31;
              goto LABEL_109;
            case 0xAu:
              *(_WORD *)(a1 + 60) |= 0x10u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_108;
                  }
                  v49 = v33++;
                  v50 = *(_BYTE *)(v34 + v49);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_107:
                    v2 = v49 + 1;
                    goto LABEL_108;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_107;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_108;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_108:
              *(_DWORD *)(a1 + 32) = v37;
LABEL_109:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xBu:
              *(_WORD *)(a1 + 60) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_92:
                v2 = *((_QWORD *)this + 1) + 8;
LABEL_93:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_69:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_109;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_109;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101627608(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 60);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((*(_WORD *)(result + 60) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 48), 2u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(float *)(v3 + 52), 3u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 56), 4u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(float *)(v3 + 36), 5u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(float *)(v3 + 40), 6u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 44), 7u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 8u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 9u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16), 0xBu);
  }
LABEL_22:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 0xAu);
  if ((*(_WORD *)(v3 + 60) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16), 0xBu);
  return result;
}

uint64_t sub_101627760(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2900;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_101627778(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10162779C(uint64_t result, uint64_t a2)
{
  char v2;

  *(_QWORD *)result = &off_1021C2900;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_BYTE *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_BYTE *)(result + 8) = v2;
  }
  return result;
}

uint64_t sub_1016277C8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "isDeviceVibrating", *(_BYTE *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101627814(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        if (v2 >= v3)
        {
          v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v21 = v20 != 0;
        }
        *(_BYTE *)(a1 + 8) = v21;
      }
      else
      {
        result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1016279A0(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::write(this, *(_BYTE *)(result + 8), 1u);
  return result;
}

uint64_t sub_1016279C0(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2938;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1016279D8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1016279FC(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)result = &off_1021C2938;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_101627A4C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "shouldSuppress", *(_BYTE *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101627AB4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  uint64_t result;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        if (v2 >= v3)
        {
          v28 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v28 = v27 != 0;
        }
        *(_BYTE *)(a1 + 16) = v28;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v21 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v3)
        {
          v30 = 0;
          v31 = 0;
          v25 = 0;
          if (v3 <= v21)
            v2 = *((_QWORD *)this + 1);
          else
            v2 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v2 == v21)
            {
              v25 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_48;
            }
            v32 = v21++;
            v33 = *(_BYTE *)(v22 + v32);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v14 = v31++ > 8;
            if (v14)
            {
              v25 = 0;
              goto LABEL_47;
            }
          }
          if (*((_BYTE *)this + 24))
            v25 = 0;
LABEL_47:
          v2 = v32 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              v25 = 0;
              break;
            }
          }
        }
LABEL_48:
        *(_QWORD *)(a1 + 8) = v25;
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101627D34(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 16), 2u);
  return result;
}

uint64_t sub_101627D8C(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2970;
  *(_DWORD *)(result + 116) = 0;
  return result;
}

void sub_101627DA4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_101627DC8(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  float result;

  *(_QWORD *)a1 = &off_1021C2970;
  *(_DWORD *)(a1 + 116) = 0;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_DWORD *)(a1 + 116) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_DWORD *)(a2 + 116);
    if ((v2 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x4000) != 0)
  {
LABEL_5:
    result = *(float *)(a2 + 68);
    v3 |= 0x4000u;
    *(_DWORD *)(a1 + 116) = v3;
    *(float *)(a1 + 68) = result;
    v2 = *(_DWORD *)(a2 + 116);
  }
LABEL_6:
  if ((v2 & 0x8000) != 0)
  {
    result = *(float *)(a2 + 72);
    v3 |= 0x8000u;
    *(_DWORD *)(a1 + 116) = v3;
    *(float *)(a1 + 72) = result;
    v2 = *(_DWORD *)(a2 + 116);
    if ((v2 & 0x10000) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0)
        goto LABEL_9;
      goto LABEL_33;
    }
  }
  else if ((v2 & 0x10000) == 0)
  {
    goto LABEL_8;
  }
  result = *(float *)(a2 + 76);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 76) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  result = *(float *)(a2 + 48);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 48) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x400) == 0)
  {
LABEL_10:
    if ((v2 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  result = *(float *)(a2 + 52);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 52) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x800) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  result = *(float *)(a2 + 56);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 56) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  result = *(float *)(a2 + 60);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 60) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  result = *(float *)(a2 + 64);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 64) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x40000) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  result = *(float *)(a2 + 112);
  v3 |= 0x2000000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 112) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x40000) == 0)
  {
LABEL_15:
    if ((v2 & 0x20000) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  result = *(float *)(a2 + 84);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 84) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x20000) == 0)
  {
LABEL_16:
    if ((v2 & 4) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  result = *(float *)(a2 + 80);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 80) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 4) == 0)
  {
LABEL_17:
    if ((v2 & 8) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  result = *(float *)(a2 + 20);
  v3 |= 4u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 20) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 8) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  result = *(float *)(a2 + 24);
  v3 |= 8u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 24) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x20) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  result = *(float *)(a2 + 28);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 28) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x20) == 0)
  {
LABEL_20:
    if ((v2 & 0x40) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  result = *(float *)(a2 + 32);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 32) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x40) == 0)
  {
LABEL_21:
    if ((v2 & 0x80) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  result = *(float *)(a2 + 36);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 36) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x80) == 0)
  {
LABEL_22:
    if ((v2 & 0x80000) == 0)
      goto LABEL_23;
    goto LABEL_47;
  }
LABEL_46:
  result = *(float *)(a2 + 40);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 40) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x80000) == 0)
  {
LABEL_23:
    if ((v2 & 0x100000) == 0)
      goto LABEL_24;
    goto LABEL_48;
  }
LABEL_47:
  result = *(float *)(a2 + 88);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 88) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x100000) == 0)
  {
LABEL_24:
    if ((v2 & 0x200000) == 0)
      goto LABEL_25;
    goto LABEL_49;
  }
LABEL_48:
  result = *(float *)(a2 + 92);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 92) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x200000) == 0)
  {
LABEL_25:
    if ((v2 & 0x400000) == 0)
      goto LABEL_26;
    goto LABEL_50;
  }
LABEL_49:
  result = *(float *)(a2 + 96);
  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 96) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x400000) == 0)
  {
LABEL_26:
    if ((v2 & 0x800000) == 0)
      goto LABEL_27;
    goto LABEL_51;
  }
LABEL_50:
  result = *(float *)(a2 + 100);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 100) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x800000) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_28;
    goto LABEL_52;
  }
LABEL_51:
  result = *(float *)(a2 + 104);
  v3 |= 0x800000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 104) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x100) == 0)
      goto LABEL_29;
    goto LABEL_53;
  }
LABEL_52:
  result = *(float *)(a2 + 108);
  v3 |= 0x1000000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 108) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x100) == 0)
  {
LABEL_29:
    if ((v2 & 2) == 0)
      return result;
LABEL_54:
    result = *(float *)(a2 + 16);
    *(_DWORD *)(a1 + 116) = v3 | 2;
    *(float *)(a1 + 16) = result;
    return result;
  }
LABEL_53:
  result = *(float *)(a2 + 44);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 44) = result;
  if ((*(_DWORD *)(a2 + 116) & 2) != 0)
    goto LABEL_54;
  return result;
}

uint64_t sub_1016280BC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "absMeanGravX", *(float *)(a1 + 16));
    v5 = *(_DWORD *)(a1 + 116);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "accelFFTBin1", *(float *)(a1 + 20));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "accelFFTBin2", *(float *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "accelFFTBin3", *(float *)(a1 + 28));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "accelFFTBin4", *(float *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "accelFFTBin5", *(float *)(a1 + 36));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "accelFFTBin6", *(float *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "accelFFTBinDotPressureFFTBin", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "fFTBin1", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "fFTBin2", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "fFTBin3", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "fFTBin4", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "fFTBin5", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "meanGravX", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "meanGravY", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "meanGravZ", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "medianLux", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "medianPocketProbability", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0)
      goto LABEL_21;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "pressureFFTBin1", *(float *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "pressureFFTBin2", *(float *)(a1 + 92));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0)
      goto LABEL_23;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "pressureFFTBin3", *(float *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "pressureFFTBin4", *(float *)(a1 + 100));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "pressureFFTBin5", *(float *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_26;
LABEL_53:
    PB::TextFormatter::format(this, "stdPressure", *(float *)(a1 + 112));
    if ((*(_DWORD *)(a1 + 116) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_27;
  }
LABEL_52:
  PB::TextFormatter::format(this, "pressureFFTBin6", *(float *)(a1 + 108));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x2000000) != 0)
    goto LABEL_53;
LABEL_26:
  if ((v5 & 1) != 0)
LABEL_27:
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10162842C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 116) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_124;
                  }
                  v29 = v20++;
                  v30 = *(_BYTE *)(v21 + v29);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_123;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_123:
                v2 = v29 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_124;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_124:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_115;
            case 2u:
              *(_DWORD *)(a1 + 116) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 3u:
              *(_DWORD *)(a1 + 116) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 4u:
              *(_DWORD *)(a1 + 116) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 5u:
              *(_DWORD *)(a1 + 116) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 6u:
              *(_DWORD *)(a1 + 116) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 7u:
              *(_DWORD *)(a1 + 116) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 8u:
              *(_DWORD *)(a1 + 116) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 9u:
              *(_DWORD *)(a1 + 116) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0xAu:
              *(_DWORD *)(a1 + 116) |= 0x2000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0xBu:
              *(_DWORD *)(a1 + 116) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0xCu:
              *(_DWORD *)(a1 + 116) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0xDu:
              *(_DWORD *)(a1 + 116) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0xEu:
              *(_DWORD *)(a1 + 116) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0xFu:
              *(_DWORD *)(a1 + 116) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0x10u:
              *(_DWORD *)(a1 + 116) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0x11u:
              *(_DWORD *)(a1 + 116) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0x12u:
              *(_DWORD *)(a1 + 116) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0x13u:
              *(_DWORD *)(a1 + 116) |= 0x80000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0x14u:
              *(_DWORD *)(a1 + 116) |= 0x100000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0x15u:
              *(_DWORD *)(a1 + 116) |= 0x200000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0x16u:
              *(_DWORD *)(a1 + 116) |= 0x400000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0x17u:
              *(_DWORD *)(a1 + 116) |= 0x800000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0x18u:
              *(_DWORD *)(a1 + 116) |= 0x1000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0x19u:
              *(_DWORD *)(a1 + 116) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0x1Au:
              *(_DWORD *)(a1 + 116) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_114:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_105:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_115;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
LABEL_115:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101628C10(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 116);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 8), 1u);
    v4 = *(_DWORD *)(v3 + 116);
    if ((v4 & 0x4000) == 0)
    {
LABEL_3:
      if ((v4 & 0x8000) == 0)
        goto LABEL_4;
      goto LABEL_30;
    }
  }
  else if ((v4 & 0x4000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 68), 2u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000) == 0)
      goto LABEL_5;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 72), 3u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10000) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 76), 4u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 48), 5u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 52), 6u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 56), 7u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 60), 8u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 64), 9u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 112), 0xAu);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40000) == 0)
  {
LABEL_12:
    if ((v4 & 0x20000) == 0)
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 84), 0xBu);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20000) == 0)
  {
LABEL_13:
    if ((v4 & 4) == 0)
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 80), 0xCu);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_14:
    if ((v4 & 8) == 0)
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 20), 0xDu);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(float *)(v3 + 24), 0xEu);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 0xFu);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_17:
    if ((v4 & 0x40) == 0)
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(float *)(v3 + 32), 0x10u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_18:
    if ((v4 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(float *)(v3 + 36), 0x11u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80) == 0)
  {
LABEL_19:
    if ((v4 & 0x80000) == 0)
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(float *)(v3 + 40), 0x12u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80000) == 0)
  {
LABEL_20:
    if ((v4 & 0x100000) == 0)
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(float *)(v3 + 88), 0x13u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100000) == 0)
  {
LABEL_21:
    if ((v4 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(float *)(v3 + 92), 0x14u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200000) == 0)
  {
LABEL_22:
    if ((v4 & 0x400000) == 0)
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(float *)(v3 + 96), 0x15u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400000) == 0)
  {
LABEL_23:
    if ((v4 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(float *)(v3 + 100), 0x16u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800000) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(float *)(v3 + 104), 0x17u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x100) == 0)
      goto LABEL_26;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(float *)(v3 + 108), 0x18u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_26:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 16), 0x1Au);
  }
LABEL_52:
  result = PB::Writer::write(this, *(float *)(v3 + 44), 0x19u);
  if ((*(_DWORD *)(v3 + 116) & 2) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 16), 0x1Au);
  return result;
}

uint64_t sub_101628F0C(uint64_t result)
{
  *(_QWORD *)result = &off_1021C29A8;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_101628F24(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

float sub_101628F48(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  float result;

  *(_QWORD *)a1 = &off_1021C29A8;
  *(_DWORD *)(a1 + 64) = 0;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_WORD *)(a1 + 64) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_WORD *)(a2 + 64);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    result = *(float *)(a2 + 20);
    v3 |= 4u;
    *(_WORD *)(a1 + 64) = v3;
    *(float *)(a1 + 20) = result;
    v2 = *(_WORD *)(a2 + 64);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    result = *(float *)(a2 + 28);
    v3 |= 0x10u;
    *(_WORD *)(a1 + 64) = v3;
    *(float *)(a1 + 28) = result;
    v2 = *(_WORD *)(a2 + 64);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_20;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  result = *(float *)(a2 + 32);
  v3 |= 0x20u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 32) = result;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = *(float *)(a2 + 36);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 36) = result;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x400) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = *(float *)(a2 + 52);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 52) = result;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x1000) == 0)
  {
LABEL_11:
    if ((v2 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  result = *(float *)(a2 + 60);
  v3 |= 0x1000u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 60) = result;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x200) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  result = *(float *)(a2 + 48);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 48) = result;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x800) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  result = *(float *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 16) = result;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x800) == 0)
  {
LABEL_14:
    if ((v2 & 0x100) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  result = *(float *)(a2 + 56);
  v3 |= 0x800u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 56) = result;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x100) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0)
      goto LABEL_16;
    goto LABEL_27;
  }
LABEL_26:
  result = *(float *)(a2 + 44);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 44) = result;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x80) == 0)
      return result;
LABEL_28:
    result = *(float *)(a2 + 40);
    *(_WORD *)(a1 + 64) = v3 | 0x80;
    *(float *)(a1 + 40) = result;
    return result;
  }
LABEL_27:
  result = *(float *)(a2 + 24);
  v3 |= 8u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 24) = result;
  if ((*(_WORD *)(a2 + 64) & 0x80) != 0)
    goto LABEL_28;
  return result;
}

uint64_t sub_1016290D0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "bagObstructed", *(float *)(a1 + 16));
    v5 = *(_WORD *)(a1 + 64);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "closeCoveredBagObstructed", *(float *)(a1 + 20));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "closeCoveredObstructed", *(float *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "closeCoveredPocketObstructed", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "inHandObstructed", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "looseCoveredBagObstructed", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "looseCoveredObstructed", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "looseCoveredPocketObstructed", *(float *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "obstructed", *(float *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "otherObstructed", *(float *)(a1 + 52));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0)
      goto LABEL_13;
LABEL_27:
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 8));
    if ((*(_WORD *)(a1 + 64) & 0x1000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_14;
  }
LABEL_26:
  PB::TextFormatter::format(this, "pocketObstructed", *(float *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 1) != 0)
    goto LABEL_27;
LABEL_13:
  if ((v5 & 0x1000) != 0)
LABEL_14:
    PB::TextFormatter::format(this, "visible", *(float *)(a1 + 60));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016292A0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 64) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_80;
                  }
                  v29 = v20++;
                  v30 = *(_BYTE *)(v21 + v29);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_79;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_79:
                v2 = v29 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_80;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_80:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_81;
            case 2u:
              *(_WORD *)(a1 + 64) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_75;
            case 3u:
              *(_WORD *)(a1 + 64) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_75;
            case 4u:
              *(_WORD *)(a1 + 64) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_75;
            case 5u:
              *(_WORD *)(a1 + 64) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_75;
            case 6u:
              *(_WORD *)(a1 + 64) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_75;
            case 7u:
              *(_WORD *)(a1 + 64) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_75;
            case 8u:
              *(_WORD *)(a1 + 64) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_75;
            case 9u:
              *(_WORD *)(a1 + 64) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_75;
            case 0xAu:
              *(_WORD *)(a1 + 64) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_75;
            case 0xBu:
              *(_WORD *)(a1 + 64) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_75;
            case 0xCu:
              *(_WORD *)(a1 + 64) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_75;
            case 0xDu:
              *(_WORD *)(a1 + 64) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_75:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_66:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_81;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
LABEL_81:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1016297A8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 64);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 8), 1u);
    v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 20), 2u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 3u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(float *)(v3 + 32), 4u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 36), 5u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(float *)(v3 + 52), 6u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(float *)(v3 + 60), 7u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 48), 8u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 16), 9u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x800) == 0)
  {
LABEL_11:
    if ((v4 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 56), 0xAu);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 44), 0xBu);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x80) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 40), 0xDu);
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 24), 0xCu);
  if ((*(_WORD *)(v3 + 64) & 0x80) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 40), 0xDu);
  return result;
}

uint64_t sub_101629938(uint64_t result)
{
  *(_QWORD *)result = &off_1021C29E0;
  *(_DWORD *)(result + 84) = 0;
  return result;
}

void sub_101629950(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101629974(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  char v22;

  *(_QWORD *)result = &off_1021C29E0;
  *(_DWORD *)(result + 84) = 0;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_DWORD *)(result + 84) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_DWORD *)(a2 + 84);
    if ((v2 & 0x20000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20000) != 0)
  {
LABEL_5:
    v5 = *(_BYTE *)(a2 + 80);
    v3 |= 0x20000u;
    *(_DWORD *)(result + 84) = v3;
    *(_BYTE *)(result + 80) = v5;
    v2 = *(_DWORD *)(a2 + 84);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_DWORD *)(result + 84) = v3;
    *(_DWORD *)(result + 20) = v6;
    v2 = *(_DWORD *)(a2 + 84);
    if ((v2 & 0x2000) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000) == 0)
        goto LABEL_9;
      goto LABEL_26;
    }
  }
  else if ((v2 & 0x2000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 64);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 64) = v7;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x1000) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  v8 = *(_DWORD *)(a2 + 60);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 60) = v8;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  v9 = *(_DWORD *)(a2 + 48);
  v3 |= 0x200u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 48) = v9;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x10000) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  v10 = *(_DWORD *)(a2 + 76);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 76) = v10;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  v11 = *(_DWORD *)(a2 + 52);
  v3 |= 0x400u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 52) = v11;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x800) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  v12 = *(_DWORD *)(a2 + 56);
  v3 |= 0x800u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 56) = v12;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  v13 = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 36) = v13;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x80) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  v14 = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 40) = v14;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x10) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  v15 = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 24) = v15;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x10) == 0)
  {
LABEL_17:
    if ((v2 & 0x20) == 0)
      goto LABEL_18;
    goto LABEL_35;
  }
LABEL_34:
  v16 = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 28) = v16;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x20) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_36;
  }
LABEL_35:
  v17 = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 32) = v17;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x4000) == 0)
  {
LABEL_19:
    if ((v2 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_37;
  }
LABEL_36:
  v18 = *(_DWORD *)(a2 + 68);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 68) = v18;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x8000) == 0)
  {
LABEL_20:
    if ((v2 & 0x100) == 0)
      goto LABEL_21;
    goto LABEL_38;
  }
LABEL_37:
  v19 = *(_DWORD *)(a2 + 72);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 72) = v19;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x100) == 0)
  {
LABEL_21:
    if ((v2 & 2) == 0)
      goto LABEL_22;
    goto LABEL_39;
  }
LABEL_38:
  v20 = *(_DWORD *)(a2 + 44);
  v3 |= 0x100u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 44) = v20;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 2) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000) == 0)
      return result;
LABEL_40:
    v22 = *(_BYTE *)(a2 + 81);
    *(_DWORD *)(result + 84) = v3 | 0x40000;
    *(_BYTE *)(result + 81) = v22;
    return result;
  }
LABEL_39:
  v21 = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 16) = v21;
  if ((*(_DWORD *)(a2 + 84) & 0x40000) != 0)
    goto LABEL_40;
  return result;
}

uint64_t sub_101629BA4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "currentEventTag", *(_DWORD *)(a1 + 16));
    v5 = *(_DWORD *)(a1 + 84);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "currentState", *(_DWORD *)(a1 + 20));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "filteredGravityX", *(float *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "filteredGravityY", *(float *)(a1 + 28));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "filteredGravityZ", *(float *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "gravityAngle", *(float *)(a1 + 36));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "gravityShift", *(float *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "isMovingFiltered", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "lux", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "luxBaseline", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "luxShift", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "motionType", *(_DWORD *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "orientation", *(_DWORD *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "pocketProbEnter", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "pocketProbExit", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "pocketProbability", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
LABEL_39:
    PB::TextFormatter::format(this, "sufficientMotion", *(_BYTE *)(a1 + 81));
    if ((*(_DWORD *)(a1 + 84) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_20;
  }
LABEL_38:
  PB::TextFormatter::format(this, "shouldSuppress", *(_BYTE *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x40000) != 0)
    goto LABEL_39;
LABEL_19:
  if ((v5 & 1) != 0)
LABEL_20:
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101629E34(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  int v53;
  BOOL v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 84) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_144;
                  }
                  v57 = v20++;
                  v58 = *(_BYTE *)(v21 + v57);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_143;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_143:
                v2 = v57 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_144;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_144:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_165;
            case 2u:
              *(_DWORD *)(a1 + 84) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 80) = v28;
              goto LABEL_165;
            case 3u:
              *(_DWORD *)(a1 + 84) |= 4u;
              v29 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v30 = *(_QWORD *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_149;
                  }
                  v61 = v29++;
                  v62 = *(_BYTE *)(v30 + v61);
                  *((_QWORD *)this + 1) = v29;
                  v33 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_148:
                    v2 = v61 + 1;
                    goto LABEL_149;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v33) = 0;
                goto LABEL_148;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v2 = v29 + 1;
                *((_QWORD *)this + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_149;
                v31 += 7;
                v29 = v2;
                v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_149:
              *(_DWORD *)(a1 + 20) = v33;
              goto LABEL_165;
            case 4u:
              *(_DWORD *)(a1 + 84) |= 0x2000u;
              v35 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v36 = *(_QWORD *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_154;
                  }
                  v65 = v35++;
                  v66 = *(_BYTE *)(v36 + v65);
                  *((_QWORD *)this + 1) = v35;
                  v39 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_153:
                    v2 = v65 + 1;
                    goto LABEL_154;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v39) = 0;
                goto LABEL_153;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)this + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_154;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_154:
              *(_DWORD *)(a1 + 64) = v39;
              goto LABEL_165;
            case 5u:
              *(_DWORD *)(a1 + 84) |= 0x1000u;
              v41 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v42 = *(_QWORD *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_159;
                  }
                  v69 = v41++;
                  v70 = *(_BYTE *)(v42 + v69);
                  *((_QWORD *)this + 1) = v41;
                  v45 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_158:
                    v2 = v69 + 1;
                    goto LABEL_159;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v45) = 0;
                goto LABEL_158;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)this + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_159;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_159:
              *(_DWORD *)(a1 + 60) = v45;
              goto LABEL_165;
            case 6u:
              *(_DWORD *)(a1 + 84) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_89;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_139;
            case 7u:
              *(_DWORD *)(a1 + 84) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_89;
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_139;
            case 8u:
              *(_DWORD *)(a1 + 84) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_89;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_139;
            case 9u:
              *(_DWORD *)(a1 + 84) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_89;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_139;
            case 0xAu:
              *(_DWORD *)(a1 + 84) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_89;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_139;
            case 0xBu:
              *(_DWORD *)(a1 + 84) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_89;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_139;
            case 0xCu:
              *(_DWORD *)(a1 + 84) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_89;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_139;
            case 0xDu:
              *(_DWORD *)(a1 + 84) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_89;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_139;
            case 0xEu:
              *(_DWORD *)(a1 + 84) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_89;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_139;
            case 0xFu:
              *(_DWORD *)(a1 + 84) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_89;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_139;
            case 0x10u:
              *(_DWORD *)(a1 + 84) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_89;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_139;
            case 0x11u:
              *(_DWORD *)(a1 + 84) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_139:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_89:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_165;
            case 0x12u:
              *(_DWORD *)(a1 + 84) |= 2u;
              v47 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v48 = *(_QWORD *)this;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v51 = 0;
                if (v2 <= v47)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v47)
                  {
                    LODWORD(v51) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_164;
                  }
                  v73 = v47++;
                  v74 = *(_BYTE *)(v48 + v73);
                  *((_QWORD *)this + 1) = v47;
                  v51 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v51) = 0;
LABEL_163:
                    v2 = v73 + 1;
                    goto LABEL_164;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v51) = 0;
                goto LABEL_163;
              }
              v49 = 0;
              v50 = 0;
              v51 = 0;
              do
              {
                v2 = v47 + 1;
                *((_QWORD *)this + 1) = v47 + 1;
                v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0)
                  goto LABEL_164;
                v49 += 7;
                v47 = v2;
                v14 = v50++ > 8;
              }
              while (!v14);
              LODWORD(v51) = 0;
LABEL_164:
              *(_DWORD *)(a1 + 16) = v51;
LABEL_165:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x13u:
              *(_DWORD *)(a1 + 84) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v54 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v53 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v54 = v53 != 0;
              }
              *(_BYTE *)(a1 + 81) = v54;
              goto LABEL_165;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_165;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10162A774(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 84);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 8), 1u);
    v4 = *(_DWORD *)(v3 + 84);
    if ((v4 & 0x20000) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 80), 2u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 3u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x2000) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 64), 4u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 5u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 48), 6u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(float *)(v3 + 76), 7u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x800) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(float *)(v3 + 52), 8u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x800) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(float *)(v3 + 56), 9u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 36), 0xAu);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 40), 0xBu);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 24), 0xCu);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x10) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 28), 0xDu);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 32), 0xEu);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 68), 0xFu);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x8000) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0)
      goto LABEL_18;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 72), 0x10u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 2) == 0)
      goto LABEL_19;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 44), 0x11u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 2) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000) == 0)
      return result;
    return PB::Writer::write(this, *(_BYTE *)(v3 + 81), 0x13u);
  }
LABEL_38:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 0x12u);
  if ((*(_DWORD *)(v3 + 84) & 0x40000) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 81), 0x13u);
  return result;
}

uint64_t sub_10162A9AC(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2A18;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 76) = 0;
  return result;
}

void sub_10162A9C4(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_1021C2A18;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_10162AA04(PB::Base *a1)
{
  sub_10162A9C4(a1);
  operator delete();
}

uint64_t sub_10162AA28(uint64_t a1, uint64_t a2)
{
  char *v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  int v11;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;

  *(_QWORD *)a1 = &off_1021C2A18;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (char *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 76) = 0;
  v5 = *(_WORD *)(a2 + 76);
  if ((v5 & 1) != 0)
  {
    v7 = *(_QWORD *)(a2 + 32);
    v6 = 1;
    *(_WORD *)(a1 + 76) = 1;
    *(_QWORD *)(a1 + 32) = v7;
    v5 = *(_WORD *)(a2 + 76);
    if ((v5 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((v5 & 2) != 0)
  {
LABEL_5:
    v8 = *(_QWORD *)(a2 + 40);
    v6 |= 2u;
    *(_WORD *)(a1 + 76) = v6;
    *(_QWORD *)(a1 + 40) = v8;
    v5 = *(_WORD *)(a2 + 76);
  }
LABEL_6:
  if ((v5 & 4) != 0)
  {
    v13 = *(_DWORD *)(a2 + 48);
    v6 |= 4u;
    *(_WORD *)(a1 + 76) = v6;
    *(_DWORD *)(a1 + 48) = v13;
    v5 = *(_WORD *)(a2 + 76);
    if ((v5 & 0x10) == 0)
    {
LABEL_8:
      if ((v5 & 8) == 0)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v14 = *(_DWORD *)(a2 + 56);
  v6 |= 0x10u;
  *(_WORD *)(a1 + 76) = v6;
  *(_DWORD *)(a1 + 56) = v14;
  if ((*(_WORD *)(a2 + 76) & 8) != 0)
  {
LABEL_9:
    v9 = *(_DWORD *)(a2 + 52);
    *(_WORD *)(a1 + 76) = v6 | 8;
    *(_DWORD *)(a1 + 52) = v9;
  }
LABEL_10:
  if (a1 != a2)
    sub_1002A3054(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  v10 = *(_WORD *)(a2 + 76);
  if ((v10 & 0x40) != 0)
  {
    v15 = *(_DWORD *)(a2 + 64);
    *(_WORD *)(a1 + 76) |= 0x40u;
    *(_DWORD *)(a1 + 64) = v15;
    v10 = *(_WORD *)(a2 + 76);
    if ((v10 & 0x80) == 0)
    {
LABEL_14:
      if ((v10 & 0x100) == 0)
        goto LABEL_15;
LABEL_23:
      v17 = *(_DWORD *)(a2 + 72);
      *(_WORD *)(a1 + 76) |= 0x100u;
      *(_DWORD *)(a1 + 72) = v17;
      if ((*(_WORD *)(a2 + 76) & 0x20) == 0)
        return a1;
      goto LABEL_16;
    }
  }
  else if ((v10 & 0x80) == 0)
  {
    goto LABEL_14;
  }
  v16 = *(_DWORD *)(a2 + 68);
  *(_WORD *)(a1 + 76) |= 0x80u;
  *(_DWORD *)(a1 + 68) = v16;
  v10 = *(_WORD *)(a2 + 76);
  if ((v10 & 0x100) != 0)
    goto LABEL_23;
LABEL_15:
  if ((v10 & 0x20) != 0)
  {
LABEL_16:
    v11 = *(_DWORD *)(a2 + 60);
    *(_WORD *)(a1 + 76) |= 0x20u;
    *(_DWORD *)(a1 + 60) = v11;
  }
  return a1;
}

uint64_t sub_10162AB94(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;
  float *v6;
  float *v7;
  float v8;
  __int16 v9;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "compassBias", *(float *)(a1 + 48));
    v5 = *(_WORD *)(a1 + 76);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "estimatedBiasUncertainty", *(float *)(a1 + 52));
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_17:
  PB::TextFormatter::format(this, "estimatedHeading", *(float *)(a1 + 56));
  if ((*(_WORD *)(a1 + 76) & 0x20) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "globalReferenceFrame", *(_DWORD *)(a1 + 60));
LABEL_6:
  v6 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "lslGlobalToDeviceFrameRotationMatrix", v8);
  }
  v9 = *(_WORD *)(a1 + 76);
  if ((v9 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "lslHeadingAccuracy", *(float *)(a1 + 64));
    v9 = *(_WORD *)(a1 + 76);
    if ((v9 & 0x80) == 0)
    {
LABEL_10:
      if ((v9 & 1) == 0)
        goto LABEL_11;
      goto LABEL_21;
    }
  }
  else if ((v9 & 0x80) == 0)
  {
    goto LABEL_10;
  }
  PB::TextFormatter::format(this, "lslHeadingConfidence", *(float *)(a1 + 68));
  v9 = *(_WORD *)(a1 + 76);
  if ((v9 & 1) == 0)
  {
LABEL_11:
    if ((v9 & 0x100) == 0)
      goto LABEL_12;
LABEL_22:
    PB::TextFormatter::format(this, "roadID", *(_DWORD *)(a1 + 72));
    if ((*(_WORD *)(a1 + 76) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_13;
  }
LABEL_21:
  PB::TextFormatter::format(this, "machContinuousTimestamp", *(double *)(a1 + 32));
  v9 = *(_WORD *)(a1 + 76);
  if ((v9 & 0x100) != 0)
    goto LABEL_22;
LABEL_12:
  if ((v9 & 2) != 0)
LABEL_13:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_10162AD20(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  _DWORD *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  char *v64;
  _DWORD *v65;
  char v66;
  unsigned int v67;
  unint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  unint64_t v72;
  char v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  int v81;
  unint64_t v82;
  _BYTE v85[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v4 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 76) |= 1u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_127;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v25);
          goto LABEL_31;
        case 2u:
          *(_WORD *)(a1 + 76) |= 2u;
          v26 = *((_QWORD *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)this + 2))
            goto LABEL_127;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v26);
LABEL_31:
          v27 = *((_QWORD *)this + 1) + 8;
          goto LABEL_130;
        case 3u:
          *(_WORD *)(a1 + 76) |= 4u;
          v28 = *((_QWORD *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((_QWORD *)this + 2))
            goto LABEL_127;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v28);
          goto LABEL_129;
        case 4u:
          *(_WORD *)(a1 + 76) |= 0x10u;
          v29 = *((_QWORD *)this + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((_QWORD *)this + 2))
            goto LABEL_127;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v29);
          goto LABEL_129;
        case 5u:
          *(_WORD *)(a1 + 76) |= 8u;
          v30 = *((_QWORD *)this + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((_QWORD *)this + 2))
            goto LABEL_127;
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v30);
          goto LABEL_129;
        case 6u:
          if ((_DWORD)v24 == 2)
          {
            if ((PB::Reader::placeMark(this, v85, v24, a4) & 1) != 0)
              return 0;
            v31 = *((_QWORD *)this + 1);
            v32 = *((_QWORD *)this + 2);
            while (v31 < v32 && !*((_BYTE *)this + 24))
            {
              v34 = *(char **)(a1 + 16);
              v33 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v34 >= v33)
              {
                v36 = (char *)*v10;
                v37 = (v34 - (_BYTE *)*v10) >> 2;
                v38 = v37 + 1;
                if ((unint64_t)(v37 + 1) >> 62)
                  goto LABEL_141;
                v39 = v33 - (_QWORD)v36;
                if (v39 >> 1 > v38)
                  v38 = v39 >> 1;
                if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
                  v40 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v40 = v38;
                if (v40)
                {
                  v41 = (char *)sub_100260634(v11, v40);
                  v36 = *(char **)(a1 + 8);
                  v34 = *(char **)(a1 + 16);
                }
                else
                {
                  v41 = 0;
                }
                v42 = &v41[4 * v37];
                *(_DWORD *)v42 = 0;
                v35 = v42 + 4;
                while (v34 != v36)
                {
                  v43 = *((_DWORD *)v34 - 1);
                  v34 -= 4;
                  *((_DWORD *)v42 - 1) = v43;
                  v42 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v42;
                *(_QWORD *)(a1 + 16) = v35;
                *(_QWORD *)(a1 + 24) = &v41[4 * v40];
                if (v36)
                  operator delete(v36);
              }
              else
              {
                *(_DWORD *)v34 = 0;
                v35 = v34 + 4;
              }
              *(_QWORD *)(a1 + 16) = v35;
              v44 = *((_QWORD *)this + 1);
              if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((_QWORD *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v35 - 1) = *(_DWORD *)(*(_QWORD *)this + v44);
              v32 = *((_QWORD *)this + 2);
              v31 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v31;
            }
            PB::Reader::recallMark(this, v85);
          }
          else
          {
            v64 = *(char **)(a1 + 16);
            v63 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v64 >= v63)
            {
              v74 = (char *)*v10;
              v75 = (v64 - (_BYTE *)*v10) >> 2;
              v76 = v75 + 1;
              if ((unint64_t)(v75 + 1) >> 62)
LABEL_141:
                sub_100259694();
              v77 = v63 - (_QWORD)v74;
              if (v77 >> 1 > v76)
                v76 = v77 >> 1;
              if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
                v78 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v78 = v76;
              if (v78)
              {
                v79 = (char *)sub_100260634(v11, v78);
                v74 = *(char **)(a1 + 8);
                v64 = *(char **)(a1 + 16);
              }
              else
              {
                v79 = 0;
              }
              v80 = &v79[4 * v75];
              *(_DWORD *)v80 = 0;
              v65 = v80 + 4;
              while (v64 != v74)
              {
                v81 = *((_DWORD *)v64 - 1);
                v64 -= 4;
                *((_DWORD *)v80 - 1) = v81;
                v80 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v80;
              *(_QWORD *)(a1 + 16) = v65;
              *(_QWORD *)(a1 + 24) = &v79[4 * v78];
              if (v74)
                operator delete(v74);
            }
            else
            {
              *(_DWORD *)v64 = 0;
              v65 = v64 + 4;
            }
            *(_QWORD *)(a1 + 16) = v65;
            v82 = *((_QWORD *)this + 1);
            if (v82 <= 0xFFFFFFFFFFFFFFFBLL && v82 + 4 <= *((_QWORD *)this + 2))
            {
              *(v65 - 1) = *(_DWORD *)(*(_QWORD *)this + v82);
LABEL_129:
              v27 = *((_QWORD *)this + 1) + 4;
LABEL_130:
              *((_QWORD *)this + 1) = v27;
            }
            else
            {
LABEL_127:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_131:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0)
            return v6 == 0;
          break;
        case 7u:
          *(_WORD *)(a1 + 76) |= 0x40u;
          v45 = *((_QWORD *)this + 1);
          if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((_QWORD *)this + 2))
            goto LABEL_127;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v45);
          goto LABEL_129;
        case 8u:
          *(_WORD *)(a1 + 76) |= 0x80u;
          v46 = *((_QWORD *)this + 1);
          if (v46 > 0xFFFFFFFFFFFFFFFBLL || v46 + 4 > *((_QWORD *)this + 2))
            goto LABEL_127;
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v46);
          goto LABEL_129;
        case 9u:
          *(_WORD *)(a1 + 76) |= 0x100u;
          v47 = *((_QWORD *)this + 1);
          v48 = *((_QWORD *)this + 2);
          v49 = *(_QWORD *)this;
          if (v47 <= 0xFFFFFFFFFFFFFFF5 && v47 + 10 <= v48)
          {
            v50 = 0;
            v51 = 0;
            v52 = 0;
            do
            {
              v53 = v47 + 1;
              *((_QWORD *)this + 1) = v47 + 1;
              v54 = *(_BYTE *)(v49 + v47);
              v52 |= (unint64_t)(v54 & 0x7F) << v50;
              if ((v54 & 0x80) == 0)
                goto LABEL_113;
              v50 += 7;
              v47 = v53;
              v18 = v51++ > 8;
            }
            while (!v18);
LABEL_93:
            LODWORD(v52) = 0;
            goto LABEL_113;
          }
          v66 = 0;
          v67 = 0;
          v52 = 0;
          if (v48 <= v47)
            v48 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v48 == v47)
            {
              LODWORD(v52) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v68 = v47 + 1;
              v69 = *(_BYTE *)(v49 + v47);
              *((_QWORD *)this + 1) = v68;
              v52 |= (unint64_t)(v69 & 0x7F) << v66;
              if (v69 < 0)
              {
                v66 += 7;
                v47 = v68;
                v18 = v67++ > 8;
                if (v18)
                  goto LABEL_93;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v52) = 0;
            }
            break;
          }
LABEL_113:
          *(_DWORD *)(a1 + 72) = v52;
          goto LABEL_131;
        case 0xAu:
          *(_WORD *)(a1 + 76) |= 0x20u;
          v55 = *((_QWORD *)this + 1);
          v56 = *((_QWORD *)this + 2);
          v57 = *(_QWORD *)this;
          if (v55 <= 0xFFFFFFFFFFFFFFF5 && v55 + 10 <= v56)
          {
            v58 = 0;
            v59 = 0;
            v60 = 0;
            do
            {
              v61 = v55 + 1;
              *((_QWORD *)this + 1) = v55 + 1;
              v62 = *(_BYTE *)(v57 + v55);
              v60 |= (unint64_t)(v62 & 0x7F) << v58;
              if ((v62 & 0x80) == 0)
                goto LABEL_116;
              v58 += 7;
              v55 = v61;
              v18 = v59++ > 8;
            }
            while (!v18);
LABEL_100:
            LODWORD(v60) = 0;
            goto LABEL_116;
          }
          v70 = 0;
          v71 = 0;
          v60 = 0;
          if (v56 <= v55)
            v56 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v56 == v55)
            {
              LODWORD(v60) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v72 = v55 + 1;
              v73 = *(_BYTE *)(v57 + v55);
              *((_QWORD *)this + 1) = v72;
              v60 |= (unint64_t)(v73 & 0x7F) << v70;
              if (v73 < 0)
              {
                v70 += 7;
                v55 = v72;
                v18 = v71++ > 8;
                if (v18)
                  goto LABEL_100;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v60) = 0;
            }
            break;
          }
LABEL_116:
          *(_DWORD *)(a1 + 60) = v60;
          goto LABEL_131;
        default:
          if ((PB::Reader::skip(this, v15 >> 3, v15 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_131;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v21 = v4 + 1;
      v22 = *(_BYTE *)(v12 + v4);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v4 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_10162B40C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;
  float *v5;
  float *v6;
  float v7;
  __int16 v8;

  v3 = result;
  v4 = *(_WORD *)(result + 76);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    v4 = *(_WORD *)(v3 + 76);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 40), 2u);
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
LABEL_18:
    result = PB::Writer::write(this, *(float *)(v3 + 56), 4u);
    if ((*(_WORD *)(v3 + 76) & 8) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_17:
  result = PB::Writer::write(this, *(float *)(v3 + 48), 3u);
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x10) != 0)
    goto LABEL_18;
LABEL_5:
  if ((v4 & 8) != 0)
LABEL_6:
    result = PB::Writer::write(this, *(float *)(v3 + 52), 5u);
LABEL_7:
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7, 6u);
  }
  v8 = *(_WORD *)(v3 + 76);
  if ((v8 & 0x40) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 64), 7u);
    v8 = *(_WORD *)(v3 + 76);
    if ((v8 & 0x80) == 0)
    {
LABEL_12:
      if ((v8 & 0x100) == 0)
        goto LABEL_13;
      goto LABEL_22;
    }
  }
  else if ((v8 & 0x80) == 0)
  {
    goto LABEL_12;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 68), 8u);
  v8 = *(_WORD *)(v3 + 76);
  if ((v8 & 0x100) == 0)
  {
LABEL_13:
    if ((v8 & 0x20) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 0xAu);
  }
LABEL_22:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 72), 9u);
  if ((*(_WORD *)(v3 + 76) & 0x20) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 0xAu);
  return result;
}

double sub_10162B558(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021C2A50;
  *(_DWORD *)(a1 + 100) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_10162B57C(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1021C2A50;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_10162B5CC(PB::Base *a1)
{
  sub_10162B57C(a1);
  operator delete();
}

uint64_t sub_10162B5F0(uint64_t a1, uint64_t a2)
{
  char *v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = &off_1021C2A50;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 100) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v5 = *(_BYTE *)(a2 + 100);
  if ((v5 & 0x10) != 0)
  {
    v7 = *(_QWORD *)(a2 + 88);
    v6 = 16;
    *(_BYTE *)(a1 + 100) = 16;
    *(_QWORD *)(a1 + 88) = v7;
    v5 = *(_BYTE *)(a2 + 100);
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*(_BYTE *)(a2 + 100) & 4) != 0)
  {
LABEL_5:
    v8 = *(_QWORD *)(a2 + 72);
    v6 |= 4u;
    *(_BYTE *)(a1 + 100) = v6;
    *(_QWORD *)(a1 + 72) = v8;
    v5 = *(_BYTE *)(a2 + 100);
  }
LABEL_6:
  if ((v5 & 8) != 0)
  {
    v12 = *(_QWORD *)(a2 + 80);
    v6 |= 8u;
    *(_BYTE *)(a1 + 100) = v6;
    *(_QWORD *)(a1 + 80) = v12;
    v5 = *(_BYTE *)(a2 + 100);
    if ((v5 & 1) == 0)
    {
LABEL_8:
      if ((v5 & 2) == 0)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_8;
  }
  v13 = *(_QWORD *)(a2 + 56);
  v6 |= 1u;
  *(_BYTE *)(a1 + 100) = v6;
  *(_QWORD *)(a1 + 56) = v13;
  if ((*(_BYTE *)(a2 + 100) & 2) != 0)
  {
LABEL_9:
    v9 = *(_QWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 100) = v6 | 2;
    *(_QWORD *)(a1 + 64) = v9;
  }
LABEL_10:
  if (a1 != a2)
  {
    sub_10034F2B0((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
    sub_1002A3054(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  }
  if ((*(_BYTE *)(a2 + 100) & 0x20) != 0)
  {
    v10 = *(_DWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 100) |= 0x20u;
    *(_DWORD *)(a1 + 96) = v10;
  }
  return a1;
}

uint64_t sub_10162B724(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  float *v6;
  float *v7;
  float v8;
  char v9;
  double *v10;
  double *v11;
  double v12;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 100);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "altitudeOfLocalizedPoseInEcefCoordinate", *(double *)(a1 + 56));
    v5 = *(_BYTE *)(a1 + 100);
  }
  if ((v5 & 0x20) != 0)
    PB::TextFormatter::format(this, "confidence", *(float *)(a1 + 96));
  v6 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "covariance", v8);
  }
  v9 = *(_BYTE *)(a1 + 100);
  if ((v9 & 2) != 0)
  {
    PB::TextFormatter::format(this, "horizontalAccuracyOfLocalizedPoseInEcefCoordinate", *(double *)(a1 + 64));
    v9 = *(_BYTE *)(a1 + 100);
    if ((v9 & 4) == 0)
    {
LABEL_9:
      if ((v9 & 8) == 0)
        goto LABEL_10;
      goto LABEL_17;
    }
  }
  else if ((*(_BYTE *)(a1 + 100) & 4) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(this, "latitudeOfLocalizedPoseInEcefCoordinate", *(double *)(a1 + 72));
  v9 = *(_BYTE *)(a1 + 100);
  if ((v9 & 8) == 0)
  {
LABEL_10:
    if ((v9 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_17:
  PB::TextFormatter::format(this, "longitudeOfLocalizedPoseInEcefCoordinate", *(double *)(a1 + 80));
  if ((*(_BYTE *)(a1 + 100) & 0x10) != 0)
LABEL_11:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 88));
LABEL_12:
  v10 = *(double **)(a1 + 32);
  v11 = *(double **)(a1 + 40);
  while (v10 != v11)
  {
    v12 = *v10++;
    PB::TextFormatter::format(this, "transformMatrixFromCameraToEcefCoordinate", v12);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_10162B874(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  _DWORD *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  _QWORD *v63;
  unint64_t v64;
  char *v65;
  _DWORD *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  int v84;
  unint64_t v85;
  _BYTE v87[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    v12 = (void **)(a1 + 32);
    v13 = a1 + 48;
    while (1)
    {
      v14 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v4 = v18;
        if (v16++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 100) |= 0x10u;
          v27 = *((_QWORD *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)this + 2))
            goto LABEL_131;
          *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v27);
          goto LABEL_122;
        case 2u:
          *(_BYTE *)(a1 + 100) |= 4u;
          v28 = *((_QWORD *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((_QWORD *)this + 2))
            goto LABEL_131;
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v28);
          goto LABEL_122;
        case 3u:
          *(_BYTE *)(a1 + 100) |= 8u;
          v29 = *((_QWORD *)this + 1);
          if (v29 > 0xFFFFFFFFFFFFFFF7 || v29 + 8 > *((_QWORD *)this + 2))
            goto LABEL_131;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v29);
          goto LABEL_122;
        case 4u:
          *(_BYTE *)(a1 + 100) |= 1u;
          v30 = *((_QWORD *)this + 1);
          if (v30 > 0xFFFFFFFFFFFFFFF7 || v30 + 8 > *((_QWORD *)this + 2))
            goto LABEL_131;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v30);
          goto LABEL_122;
        case 5u:
          *(_BYTE *)(a1 + 100) |= 2u;
          v31 = *((_QWORD *)this + 1);
          if (v31 > 0xFFFFFFFFFFFFFFF7 || v31 + 8 > *((_QWORD *)this + 2))
            goto LABEL_131;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v31);
          goto LABEL_122;
        case 6u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v87, v26, a4) & 1) != 0)
              return 0;
            v32 = *((_QWORD *)this + 1);
            v33 = *((_QWORD *)this + 2);
            while (v32 < v33 && !*((_BYTE *)this + 24))
            {
              v35 = *(char **)(a1 + 40);
              v34 = *(_QWORD *)(a1 + 48);
              if ((unint64_t)v35 >= v34)
              {
                v37 = (char *)*v12;
                v38 = (v35 - (_BYTE *)*v12) >> 3;
                v39 = v38 + 1;
                if ((unint64_t)(v38 + 1) >> 61)
                  goto LABEL_143;
                v40 = v34 - (_QWORD)v37;
                if (v40 >> 2 > v39)
                  v39 = v40 >> 2;
                if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
                  v41 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v41 = v39;
                if (v41)
                {
                  v42 = (char *)sub_10025E6A0(v13, v41);
                  v37 = *(char **)(a1 + 32);
                  v35 = *(char **)(a1 + 40);
                }
                else
                {
                  v42 = 0;
                }
                v43 = &v42[8 * v38];
                *(_QWORD *)v43 = 0;
                v36 = v43 + 8;
                while (v35 != v37)
                {
                  v44 = *((_QWORD *)v35 - 1);
                  v35 -= 8;
                  *((_QWORD *)v43 - 1) = v44;
                  v43 -= 8;
                }
                *(_QWORD *)(a1 + 32) = v43;
                *(_QWORD *)(a1 + 40) = v36;
                *(_QWORD *)(a1 + 48) = &v42[8 * v41];
                if (v37)
                  operator delete(v37);
              }
              else
              {
                *(_QWORD *)v35 = 0;
                v36 = v35 + 8;
              }
              *(_QWORD *)(a1 + 40) = v36;
              v45 = *((_QWORD *)this + 1);
              if (v45 > 0xFFFFFFFFFFFFFFF7 || v45 + 8 > *((_QWORD *)this + 2))
                goto LABEL_95;
              *(v36 - 1) = *(_QWORD *)(*(_QWORD *)this + v45);
              v33 = *((_QWORD *)this + 2);
              v32 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v32;
            }
            goto LABEL_96;
          }
          v62 = *(char **)(a1 + 40);
          v61 = *(_QWORD *)(a1 + 48);
          if ((unint64_t)v62 >= v61)
          {
            v67 = (char *)*v12;
            v68 = (v62 - (_BYTE *)*v12) >> 3;
            v69 = v68 + 1;
            if ((unint64_t)(v68 + 1) >> 61)
LABEL_143:
              sub_100259694();
            v70 = v61 - (_QWORD)v67;
            if (v70 >> 2 > v69)
              v69 = v70 >> 2;
            if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
              v71 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v71 = v69;
            if (v71)
            {
              v72 = (char *)sub_10025E6A0(v13, v71);
              v67 = *(char **)(a1 + 32);
              v62 = *(char **)(a1 + 40);
            }
            else
            {
              v72 = 0;
            }
            v79 = &v72[8 * v68];
            *(_QWORD *)v79 = 0;
            v63 = v79 + 8;
            while (v62 != v67)
            {
              v80 = *((_QWORD *)v62 - 1);
              v62 -= 8;
              *((_QWORD *)v79 - 1) = v80;
              v79 -= 8;
            }
            *(_QWORD *)(a1 + 32) = v79;
            *(_QWORD *)(a1 + 40) = v63;
            *(_QWORD *)(a1 + 48) = &v72[8 * v71];
            if (v67)
              operator delete(v67);
          }
          else
          {
            *(_QWORD *)v62 = 0;
            v63 = v62 + 8;
          }
          *(_QWORD *)(a1 + 40) = v63;
          v81 = *((_QWORD *)this + 1);
          if (v81 <= 0xFFFFFFFFFFFFFFF7 && v81 + 8 <= *((_QWORD *)this + 2))
          {
            *(v63 - 1) = *(_QWORD *)(*(_QWORD *)this + v81);
LABEL_122:
            v82 = *((_QWORD *)this + 1) + 8;
            goto LABEL_134;
          }
          goto LABEL_131;
        case 7u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v87, v26, a4) & 1) != 0)
              return 0;
            v46 = *((_QWORD *)this + 1);
            v47 = *((_QWORD *)this + 2);
            while (v46 < v47 && !*((_BYTE *)this + 24))
            {
              v49 = *(char **)(a1 + 16);
              v48 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v49 >= v48)
              {
                v51 = (char *)*v10;
                v52 = (v49 - (_BYTE *)*v10) >> 2;
                v53 = v52 + 1;
                if ((unint64_t)(v52 + 1) >> 62)
                  goto LABEL_144;
                v54 = v48 - (_QWORD)v51;
                if (v54 >> 1 > v53)
                  v53 = v54 >> 1;
                if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
                  v55 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v55 = v53;
                if (v55)
                {
                  v56 = (char *)sub_100260634(v11, v55);
                  v51 = *(char **)(a1 + 8);
                  v49 = *(char **)(a1 + 16);
                }
                else
                {
                  v56 = 0;
                }
                v57 = &v56[4 * v52];
                *(_DWORD *)v57 = 0;
                v50 = v57 + 4;
                while (v49 != v51)
                {
                  v58 = *((_DWORD *)v49 - 1);
                  v49 -= 4;
                  *((_DWORD *)v57 - 1) = v58;
                  v57 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v57;
                *(_QWORD *)(a1 + 16) = v50;
                *(_QWORD *)(a1 + 24) = &v56[4 * v55];
                if (v51)
                  operator delete(v51);
              }
              else
              {
                *(_DWORD *)v49 = 0;
                v50 = v49 + 4;
              }
              *(_QWORD *)(a1 + 16) = v50;
              v59 = *((_QWORD *)this + 1);
              if (v59 > 0xFFFFFFFFFFFFFFFBLL || v59 + 4 > *((_QWORD *)this + 2))
              {
LABEL_95:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v50 - 1) = *(_DWORD *)(*(_QWORD *)this + v59);
              v47 = *((_QWORD *)this + 2);
              v46 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v46;
            }
LABEL_96:
            PB::Reader::recallMark(this, v87);
          }
          else
          {
            v65 = *(char **)(a1 + 16);
            v64 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v65 >= v64)
            {
              v73 = (char *)*v10;
              v74 = (v65 - (_BYTE *)*v10) >> 2;
              v75 = v74 + 1;
              if ((unint64_t)(v74 + 1) >> 62)
LABEL_144:
                sub_100259694();
              v76 = v64 - (_QWORD)v73;
              if (v76 >> 1 > v75)
                v75 = v76 >> 1;
              if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
                v77 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v77 = v75;
              if (v77)
              {
                v78 = (char *)sub_100260634(v11, v77);
                v73 = *(char **)(a1 + 8);
                v65 = *(char **)(a1 + 16);
              }
              else
              {
                v78 = 0;
              }
              v83 = &v78[4 * v74];
              *(_DWORD *)v83 = 0;
              v66 = v83 + 4;
              while (v65 != v73)
              {
                v84 = *((_DWORD *)v65 - 1);
                v65 -= 4;
                *((_DWORD *)v83 - 1) = v84;
                v83 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v83;
              *(_QWORD *)(a1 + 16) = v66;
              *(_QWORD *)(a1 + 24) = &v78[4 * v77];
              if (v73)
                operator delete(v73);
            }
            else
            {
              *(_DWORD *)v65 = 0;
              v66 = v65 + 4;
            }
            *(_QWORD *)(a1 + 16) = v66;
            v85 = *((_QWORD *)this + 1);
            if (v85 <= 0xFFFFFFFFFFFFFFFBLL && v85 + 4 <= *((_QWORD *)this + 2))
            {
              *(v66 - 1) = *(_DWORD *)(*(_QWORD *)this + v85);
LABEL_133:
              v82 = *((_QWORD *)this + 1) + 4;
LABEL_134:
              *((_QWORD *)this + 1) = v82;
            }
            else
            {
LABEL_131:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_135:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || *((_BYTE *)this + 24))
            return v6 == 0;
          break;
        case 8u:
          *(_BYTE *)(a1 + 100) |= 0x20u;
          v60 = *((_QWORD *)this + 1);
          if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((_QWORD *)this + 2))
            goto LABEL_131;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v60);
          goto LABEL_133;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_135;
      }
    }
    v21 = 0;
    v22 = 0;
    v17 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v23 = v4 + 1;
      v24 = *(_BYTE *)(v14 + v4);
      *((_QWORD *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0)
        goto LABEL_21;
      v21 += 7;
      v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        v17 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_10162BF4C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  double *v5;
  double *v6;
  double v7;
  float *v8;
  float *v9;
  float v10;

  v3 = result;
  v4 = *(_BYTE *)(result + 100);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 88), 1u);
    v4 = *(_BYTE *)(v3 + 100);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((*(_BYTE *)(result + 100) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 72), 2u);
  v4 = *(_BYTE *)(v3 + 100);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
LABEL_18:
    result = PB::Writer::write(this, *(double *)(v3 + 56), 4u);
    if ((*(_BYTE *)(v3 + 100) & 2) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 80), 3u);
  v4 = *(_BYTE *)(v3 + 100);
  if ((v4 & 1) != 0)
    goto LABEL_18;
LABEL_5:
  if ((v4 & 2) != 0)
LABEL_6:
    result = PB::Writer::write(this, *(double *)(v3 + 64), 5u);
LABEL_7:
  v5 = *(double **)(v3 + 32);
  v6 = *(double **)(v3 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7, 6u);
  }
  v8 = *(float **)(v3 + 8);
  v9 = *(float **)(v3 + 16);
  while (v8 != v9)
  {
    v10 = *v8++;
    result = PB::Writer::write(this, v10, 7u);
  }
  if ((*(_BYTE *)(v3 + 100) & 0x20) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 96), 8u);
  return result;
}

uint64_t sub_10162C064(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2A88;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void sub_10162C07C(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_1021C2A88;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_10162C0BC(PB::Base *a1)
{
  sub_10162C07C(a1);
  operator delete();
}

uint64_t sub_10162C0E0(uint64_t a1, uint64_t a2)
{
  char *v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v12;

  *(_QWORD *)a1 = &off_1021C2A88;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (char *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  v5 = *(_BYTE *)(a2 + 60);
  if ((v5 & 2) != 0)
  {
    v7 = *(_QWORD *)(a2 + 40);
    v6 = 2;
    *(_BYTE *)(a1 + 60) = 2;
    *(_QWORD *)(a1 + 40) = v7;
    v5 = *(_BYTE *)(a2 + 60);
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*(_BYTE *)(a2 + 60) & 1) != 0)
  {
LABEL_5:
    v8 = *(_QWORD *)(a2 + 32);
    v6 |= 1u;
    *(_BYTE *)(a1 + 60) = v6;
    *(_QWORD *)(a1 + 32) = v8;
    v5 = *(_BYTE *)(a2 + 60);
  }
LABEL_6:
  if ((v5 & 0x10) == 0)
  {
    if ((v5 & 8) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  v12 = *(_DWORD *)(a2 + 56);
  v6 |= 0x10u;
  *(_BYTE *)(a1 + 60) = v6;
  *(_DWORD *)(a1 + 56) = v12;
  if ((*(_BYTE *)(a2 + 60) & 8) != 0)
  {
LABEL_8:
    v9 = *(_DWORD *)(a2 + 52);
    *(_BYTE *)(a1 + 60) = v6 | 8;
    *(_DWORD *)(a1 + 52) = v9;
  }
LABEL_9:
  if (a1 != a2)
    sub_1002A3054(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  if ((*(_BYTE *)(a2 + 60) & 4) != 0)
  {
    v10 = *(_DWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 60) |= 4u;
    *(_DWORD *)(a1 + 48) = v10;
  }
  return a1;
}

uint64_t sub_10162C1CC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  float *v6;
  float *v7;
  float v8;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 60);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "deltaHeading", *(float *)(a1 + 48));
    v5 = *(_BYTE *)(a1 + 60);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((*(_BYTE *)(a1 + 60) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "gravityZ", *(float *)(a1 + 52));
  v5 = *(_BYTE *)(a1 + 60);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_13:
  PB::TextFormatter::format(this, "lastStateTimestamp", *(double *)(a1 + 32));
  if ((*(_BYTE *)(a1 + 60) & 0x10) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "meanRotRate", *(float *)(a1 + 56));
LABEL_6:
  v6 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "quaternion", v8);
  }
  if ((*(_BYTE *)(a1 + 60) & 2) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_10162C2D4(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  _DWORD *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  _DWORD *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  int v55;
  unint64_t v56;
  _BYTE v58[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v4 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if ((_DWORD)v24 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 60) |= 2u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_85;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v25);
          goto LABEL_31;
        case 2u:
          *(_BYTE *)(a1 + 60) |= 1u;
          v26 = *((_QWORD *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)this + 2))
            goto LABEL_85;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v26);
LABEL_31:
          v27 = *((_QWORD *)this + 1) + 8;
          goto LABEL_88;
        case 3u:
          *(_BYTE *)(a1 + 60) |= 0x10u;
          v28 = *((_QWORD *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((_QWORD *)this + 2))
            goto LABEL_85;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v28);
          goto LABEL_87;
        case 4u:
          *(_BYTE *)(a1 + 60) |= 8u;
          v29 = *((_QWORD *)this + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((_QWORD *)this + 2))
            goto LABEL_85;
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v29);
          goto LABEL_87;
        case 5u:
          if ((_DWORD)v24 == 2)
          {
            if ((PB::Reader::placeMark(this, v58, v24, a4) & 1) != 0)
              return 0;
            v30 = *((_QWORD *)this + 1);
            v31 = *((_QWORD *)this + 2);
            while (v30 < v31 && !*((_BYTE *)this + 24))
            {
              v33 = *(char **)(a1 + 16);
              v32 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v33 >= v32)
              {
                v35 = (char *)*v10;
                v36 = (v33 - (_BYTE *)*v10) >> 2;
                v37 = v36 + 1;
                if ((unint64_t)(v36 + 1) >> 62)
                  goto LABEL_97;
                v38 = v32 - (_QWORD)v35;
                if (v38 >> 1 > v37)
                  v37 = v38 >> 1;
                if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
                  v39 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v39 = v37;
                if (v39)
                {
                  v40 = (char *)sub_100260634(v11, v39);
                  v35 = *(char **)(a1 + 8);
                  v33 = *(char **)(a1 + 16);
                }
                else
                {
                  v40 = 0;
                }
                v41 = &v40[4 * v36];
                *(_DWORD *)v41 = 0;
                v34 = v41 + 4;
                while (v33 != v35)
                {
                  v42 = *((_DWORD *)v33 - 1);
                  v33 -= 4;
                  *((_DWORD *)v41 - 1) = v42;
                  v41 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v41;
                *(_QWORD *)(a1 + 16) = v34;
                *(_QWORD *)(a1 + 24) = &v40[4 * v39];
                if (v35)
                  operator delete(v35);
              }
              else
              {
                *(_DWORD *)v33 = 0;
                v34 = v33 + 4;
              }
              *(_QWORD *)(a1 + 16) = v34;
              v43 = *((_QWORD *)this + 1);
              if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((_QWORD *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v34 - 1) = *(_DWORD *)(*(_QWORD *)this + v43);
              v31 = *((_QWORD *)this + 2);
              v30 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v30;
            }
            PB::Reader::recallMark(this, v58);
          }
          else
          {
            v46 = *(char **)(a1 + 16);
            v45 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v46 >= v45)
            {
              v48 = (char *)*v10;
              v49 = (v46 - (_BYTE *)*v10) >> 2;
              v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62)
LABEL_97:
                sub_100259694();
              v51 = v45 - (_QWORD)v48;
              if (v51 >> 1 > v50)
                v50 = v51 >> 1;
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
                v52 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v52 = v50;
              if (v52)
              {
                v53 = (char *)sub_100260634(v11, v52);
                v48 = *(char **)(a1 + 8);
                v46 = *(char **)(a1 + 16);
              }
              else
              {
                v53 = 0;
              }
              v54 = &v53[4 * v49];
              *(_DWORD *)v54 = 0;
              v47 = v54 + 4;
              while (v46 != v48)
              {
                v55 = *((_DWORD *)v46 - 1);
                v46 -= 4;
                *((_DWORD *)v54 - 1) = v55;
                v54 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v54;
              *(_QWORD *)(a1 + 16) = v47;
              *(_QWORD *)(a1 + 24) = &v53[4 * v52];
              if (v48)
                operator delete(v48);
            }
            else
            {
              *(_DWORD *)v46 = 0;
              v47 = v46 + 4;
            }
            *(_QWORD *)(a1 + 16) = v47;
            v56 = *((_QWORD *)this + 1);
            if (v56 <= 0xFFFFFFFFFFFFFFFBLL && v56 + 4 <= *((_QWORD *)this + 2))
            {
              *(v47 - 1) = *(_DWORD *)(*(_QWORD *)this + v56);
LABEL_87:
              v27 = *((_QWORD *)this + 1) + 4;
LABEL_88:
              *((_QWORD *)this + 1) = v27;
            }
            else
            {
LABEL_85:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_89:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || *((_BYTE *)this + 24))
            return v6 == 0;
          break;
        case 6u:
          *(_BYTE *)(a1 + 60) |= 4u;
          v44 = *((_QWORD *)this + 1);
          if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((_QWORD *)this + 2))
            goto LABEL_85;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v44);
          goto LABEL_87;
        default:
          if ((PB::Reader::skip(this, v15 >> 3, v15 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_89;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v21 = v4 + 1;
      v22 = *(_BYTE *)(v12 + v4);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v4 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_10162C788(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;

  v3 = result;
  v4 = *(_BYTE *)(result + 60);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 40), 1u);
    v4 = *(_BYTE *)(v3 + 60);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
LABEL_13:
      result = PB::Writer::write(this, *(float *)(v3 + 56), 3u);
      if ((*(_BYTE *)(v3 + 60) & 8) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(result + 60) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 32), 2u);
  v4 = *(_BYTE *)(v3 + 60);
  if ((v4 & 0x10) != 0)
    goto LABEL_13;
LABEL_4:
  if ((v4 & 8) != 0)
LABEL_5:
    result = PB::Writer::write(this, *(float *)(v3 + 52), 4u);
LABEL_6:
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7, 5u);
  }
  if ((*(_BYTE *)(v3 + 60) & 4) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 48), 6u);
  return result;
}

_QWORD *sub_10162C864(_QWORD *result)
{
  *result = off_1021C2AC0;
  result[1] = 0;
  return result;
}

void sub_10162C874(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C2AC0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_10162C8B4(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C2AC0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_10162C908(_QWORD *result, uint64_t a2)
{
  *result = off_1021C2AC0;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_10162C984(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "correction");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10162C9D4(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10162CB9C(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

double sub_10162CBB8(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021C2AF8;
  *(_DWORD *)(a1 + 96) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  return result;
}

void sub_10162CBE4(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1021C2AF8;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

void sub_10162CC44(PB::Base *a1)
{
  sub_10162CBE4(a1);
  operator delete();
}

uint64_t sub_10162CC68(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char v6;
  char v7;
  int v8;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = &off_1021C2AF8;
  *(_DWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  if ((*(_BYTE *)(a2 + 96) & 1) != 0)
  {
    v5 = *(_QWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 96) = 1;
    *(_QWORD *)(a1 + 80) = v5;
  }
  if (a1 != a2)
  {
    sub_10034F2B0(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    sub_10034F2B0((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
    sub_10034F2B0((char *)(a1 + 56), *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  }
  v6 = *(_BYTE *)(a2 + 96);
  if ((v6 & 4) != 0)
  {
    v7 = *(_BYTE *)(a2 + 92);
    *(_BYTE *)(a1 + 96) |= 4u;
    *(_BYTE *)(a1 + 92) = v7;
    v6 = *(_BYTE *)(a2 + 96);
  }
  if ((v6 & 2) != 0)
  {
    v8 = *(_DWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 96) |= 2u;
    *(_DWORD *)(a1 + 88) = v8;
  }
  return a1;
}

uint64_t sub_10162CD58(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;
  char v8;
  double *v9;
  double *v10;
  double v11;
  double *v12;
  double *v13;
  double v14;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "attitude", v7);
  }
  v8 = *(_BYTE *)(a1 + 96);
  if ((v8 & 4) != 0)
  {
    PB::TextFormatter::format(this, "isInitFinished", *(_BYTE *)(a1 + 92));
    v8 = *(_BYTE *)(a1 + 96);
    if ((v8 & 1) == 0)
    {
LABEL_5:
      if ((v8 & 2) == 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else if ((*(_BYTE *)(a1 + 96) & 1) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 80));
  if ((*(_BYTE *)(a1 + 96) & 2) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "trackingState", *(_DWORD *)(a1 + 88));
LABEL_7:
  v9 = *(double **)(a1 + 32);
  v10 = *(double **)(a1 + 40);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(this, "translation", v11);
  }
  v12 = *(double **)(a1 + 56);
  v13 = *(double **)(a1 + 64);
  while (v12 != v13)
  {
    v14 = *v12++;
    PB::TextFormatter::format(this, "velocity", v14);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_10162CE7C(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  void **v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  BOOL v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  BOOL v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  unint64_t v82;
  char *v83;
  _QWORD *v84;
  unint64_t v85;
  char *v86;
  unint64_t v87;
  char *v88;
  char v89;
  unsigned int v90;
  unint64_t v91;
  char v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v120;
  uint64_t v121;
  _BYTE v122[16];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v10 = (void **)(a1 + 56);
    v11 = (void **)(a1 + 32);
    v120 = a1 + 48;
    v121 = a1 + 72;
    v12 = (void **)(a1 + 8);
    v13 = a1 + 24;
    while (1)
    {
      v14 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v4 = v18;
        v20 = v16++ > 8;
        if (v20)
          goto LABEL_20;
      }
LABEL_21:
      v26 = v17 & 7;
      if ((_DWORD)v26 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 96) |= 1u;
          v27 = *((_QWORD *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)this + 2))
            goto LABEL_177;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v27);
          goto LABEL_179;
        case 2u:
          if ((_DWORD)v26 != 2)
          {
            v83 = *(char **)(a1 + 16);
            v82 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v83 >= v82)
            {
              v93 = (char *)*v12;
              v94 = (v83 - (_BYTE *)*v12) >> 3;
              v95 = v94 + 1;
              if ((unint64_t)(v94 + 1) >> 61)
LABEL_190:
                sub_100259694();
              v96 = v82 - (_QWORD)v93;
              if (v96 >> 2 > v95)
                v95 = v96 >> 2;
              if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8)
                v97 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v97 = v95;
              if (v97)
              {
                v98 = (char *)sub_10025E6A0(v13, v97);
                v93 = *(char **)(a1 + 8);
                v83 = *(char **)(a1 + 16);
              }
              else
              {
                v98 = 0;
              }
              v111 = &v98[8 * v94];
              *(_QWORD *)v111 = 0;
              v84 = v111 + 8;
              while (v83 != v93)
              {
                v112 = *((_QWORD *)v83 - 1);
                v83 -= 8;
                *((_QWORD *)v111 - 1) = v112;
                v111 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v111;
              *(_QWORD *)(a1 + 16) = v84;
              *(_QWORD *)(a1 + 24) = &v98[8 * v97];
              if (v93)
                operator delete(v93);
            }
            else
            {
              *(_QWORD *)v83 = 0;
              v84 = v83 + 8;
            }
            *(_QWORD *)(a1 + 16) = v84;
            goto LABEL_175;
          }
          if ((PB::Reader::placeMark(this, v122, v26, a4) & 1) != 0)
            return 0;
          v28 = *((_QWORD *)this + 1);
          v29 = *((_QWORD *)this + 2);
          while (v28 < v29 && !*((_BYTE *)this + 24))
          {
            v31 = *(char **)(a1 + 16);
            v30 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v31 >= v30)
            {
              v33 = (char *)*v12;
              v34 = (v31 - (_BYTE *)*v12) >> 3;
              v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 61)
                goto LABEL_190;
              v36 = v30 - (_QWORD)v33;
              if (v36 >> 2 > v35)
                v35 = v36 >> 2;
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
                v37 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v37 = v35;
              if (v37)
              {
                v38 = (char *)sub_10025E6A0(v13, v37);
                v33 = *(char **)(a1 + 8);
                v31 = *(char **)(a1 + 16);
              }
              else
              {
                v38 = 0;
              }
              v39 = &v38[8 * v34];
              *(_QWORD *)v39 = 0;
              v32 = v39 + 8;
              while (v31 != v33)
              {
                v40 = *((_QWORD *)v31 - 1);
                v31 -= 8;
                *((_QWORD *)v39 - 1) = v40;
                v39 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v39;
              *(_QWORD *)(a1 + 16) = v32;
              *(_QWORD *)(a1 + 24) = &v38[8 * v37];
              if (v33)
                operator delete(v33);
            }
            else
            {
              *(_QWORD *)v31 = 0;
              v32 = v31 + 8;
            }
            *(_QWORD *)(a1 + 16) = v32;
            v41 = *((_QWORD *)this + 1);
            if (v41 > 0xFFFFFFFFFFFFFFF7 || v41 + 8 > *((_QWORD *)this + 2))
              goto LABEL_124;
            *(v32 - 1) = *(_QWORD *)(*(_QWORD *)this + v41);
            v29 = *((_QWORD *)this + 2);
            v28 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v28;
          }
          goto LABEL_125;
        case 3u:
          if ((_DWORD)v26 != 2)
          {
            v86 = *(char **)(a1 + 40);
            v85 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v86 >= v85)
            {
              v99 = (char *)*v11;
              v100 = (v86 - (_BYTE *)*v11) >> 3;
              v101 = v100 + 1;
              if ((unint64_t)(v100 + 1) >> 61)
LABEL_191:
                sub_100259694();
              v102 = v85 - (_QWORD)v99;
              if (v102 >> 2 > v101)
                v101 = v102 >> 2;
              if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8)
                v103 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v103 = v101;
              if (v103)
              {
                v104 = (char *)sub_10025E6A0(v120, v103);
                v99 = *(char **)(a1 + 32);
                v86 = *(char **)(a1 + 40);
              }
              else
              {
                v104 = 0;
              }
              v113 = &v104[8 * v100];
              *(_QWORD *)v113 = 0;
              v84 = v113 + 8;
              while (v86 != v99)
              {
                v114 = *((_QWORD *)v86 - 1);
                v86 -= 8;
                *((_QWORD *)v113 - 1) = v114;
                v113 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v113;
              *(_QWORD *)(a1 + 40) = v84;
              *(_QWORD *)(a1 + 48) = &v104[8 * v103];
              if (v99)
                operator delete(v99);
            }
            else
            {
              *(_QWORD *)v86 = 0;
              v84 = v86 + 8;
            }
            *(_QWORD *)(a1 + 40) = v84;
            goto LABEL_175;
          }
          if ((PB::Reader::placeMark(this, v122, v26, a4) & 1) != 0)
            return 0;
          v42 = *((_QWORD *)this + 1);
          v43 = *((_QWORD *)this + 2);
          while (v42 < v43 && !*((_BYTE *)this + 24))
          {
            v45 = *(char **)(a1 + 40);
            v44 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v45 >= v44)
            {
              v47 = (char *)*v11;
              v48 = (v45 - (_BYTE *)*v11) >> 3;
              v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 61)
                goto LABEL_191;
              v50 = v44 - (_QWORD)v47;
              if (v50 >> 2 > v49)
                v49 = v50 >> 2;
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
                v51 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v51 = v49;
              if (v51)
              {
                v52 = (char *)sub_10025E6A0(v120, v51);
                v47 = *(char **)(a1 + 32);
                v45 = *(char **)(a1 + 40);
              }
              else
              {
                v52 = 0;
              }
              v53 = &v52[8 * v48];
              *(_QWORD *)v53 = 0;
              v46 = v53 + 8;
              while (v45 != v47)
              {
                v54 = *((_QWORD *)v45 - 1);
                v45 -= 8;
                *((_QWORD *)v53 - 1) = v54;
                v53 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v53;
              *(_QWORD *)(a1 + 40) = v46;
              *(_QWORD *)(a1 + 48) = &v52[8 * v51];
              if (v47)
                operator delete(v47);
            }
            else
            {
              *(_QWORD *)v45 = 0;
              v46 = v45 + 8;
            }
            *(_QWORD *)(a1 + 40) = v46;
            v55 = *((_QWORD *)this + 1);
            if (v55 > 0xFFFFFFFFFFFFFFF7 || v55 + 8 > *((_QWORD *)this + 2))
              goto LABEL_124;
            *(v46 - 1) = *(_QWORD *)(*(_QWORD *)this + v55);
            v43 = *((_QWORD *)this + 2);
            v42 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v42;
          }
          goto LABEL_125;
        case 4u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v122, v26, a4) & 1) != 0)
              return 0;
            v56 = *((_QWORD *)this + 1);
            v57 = *((_QWORD *)this + 2);
            while (v56 < v57 && !*((_BYTE *)this + 24))
            {
              v59 = *(char **)(a1 + 64);
              v58 = *(_QWORD *)(a1 + 72);
              if ((unint64_t)v59 >= v58)
              {
                v61 = (char *)*v10;
                v62 = (v59 - (_BYTE *)*v10) >> 3;
                v63 = v62 + 1;
                if ((unint64_t)(v62 + 1) >> 61)
                  goto LABEL_192;
                v64 = v58 - (_QWORD)v61;
                if (v64 >> 2 > v63)
                  v63 = v64 >> 2;
                if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
                  v65 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v65 = v63;
                if (v65)
                {
                  v66 = (char *)sub_10025E6A0(v121, v65);
                  v61 = *(char **)(a1 + 56);
                  v59 = *(char **)(a1 + 64);
                }
                else
                {
                  v66 = 0;
                }
                v67 = &v66[8 * v62];
                *(_QWORD *)v67 = 0;
                v60 = v67 + 8;
                while (v59 != v61)
                {
                  v68 = *((_QWORD *)v59 - 1);
                  v59 -= 8;
                  *((_QWORD *)v67 - 1) = v68;
                  v67 -= 8;
                }
                *(_QWORD *)(a1 + 56) = v67;
                *(_QWORD *)(a1 + 64) = v60;
                *(_QWORD *)(a1 + 72) = &v66[8 * v65];
                if (v61)
                  operator delete(v61);
              }
              else
              {
                *(_QWORD *)v59 = 0;
                v60 = v59 + 8;
              }
              *(_QWORD *)(a1 + 64) = v60;
              v69 = *((_QWORD *)this + 1);
              if (v69 > 0xFFFFFFFFFFFFFFF7 || v69 + 8 > *((_QWORD *)this + 2))
              {
LABEL_124:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v60 - 1) = *(_QWORD *)(*(_QWORD *)this + v69);
              v57 = *((_QWORD *)this + 2);
              v56 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v56;
            }
LABEL_125:
            PB::Reader::recallMark(this, v122);
          }
          else
          {
            v88 = *(char **)(a1 + 64);
            v87 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v88 >= v87)
            {
              v105 = (char *)*v10;
              v106 = (v88 - (_BYTE *)*v10) >> 3;
              v107 = v106 + 1;
              if ((unint64_t)(v106 + 1) >> 61)
LABEL_192:
                sub_100259694();
              v108 = v87 - (_QWORD)v105;
              if (v108 >> 2 > v107)
                v107 = v108 >> 2;
              if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF8)
                v109 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v109 = v107;
              if (v109)
              {
                v110 = (char *)sub_10025E6A0(v121, v109);
                v105 = *(char **)(a1 + 56);
                v88 = *(char **)(a1 + 64);
              }
              else
              {
                v110 = 0;
              }
              v115 = &v110[8 * v106];
              *(_QWORD *)v115 = 0;
              v84 = v115 + 8;
              while (v88 != v105)
              {
                v116 = *((_QWORD *)v88 - 1);
                v88 -= 8;
                *((_QWORD *)v115 - 1) = v116;
                v115 -= 8;
              }
              *(_QWORD *)(a1 + 56) = v115;
              *(_QWORD *)(a1 + 64) = v84;
              *(_QWORD *)(a1 + 72) = &v110[8 * v109];
              if (v105)
                operator delete(v105);
            }
            else
            {
              *(_QWORD *)v88 = 0;
              v84 = v88 + 8;
            }
            *(_QWORD *)(a1 + 64) = v84;
LABEL_175:
            v117 = *((_QWORD *)this + 1);
            if (v117 <= 0xFFFFFFFFFFFFFFF7 && v117 + 8 <= *((_QWORD *)this + 2))
            {
              *(v84 - 1) = *(_QWORD *)(*(_QWORD *)this + v117);
LABEL_179:
              *((_QWORD *)this + 1) += 8;
            }
            else
            {
LABEL_177:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_180:
          v4 = *((_QWORD *)this + 1);
          v5 = *((_QWORD *)this + 2);
          v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0)
            return v6 == 0;
          break;
        case 5u:
          *(_BYTE *)(a1 + 96) |= 4u;
          v70 = *((_QWORD *)this + 1);
          if (v70 >= *((_QWORD *)this + 2))
          {
            v73 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v71 = v70 + 1;
            v72 = *(unsigned __int8 *)(*(_QWORD *)this + v70);
            *((_QWORD *)this + 1) = v71;
            v73 = v72 != 0;
          }
          *(_BYTE *)(a1 + 92) = v73;
          goto LABEL_180;
        case 6u:
          *(_BYTE *)(a1 + 96) |= 2u;
          v74 = *((_QWORD *)this + 1);
          v75 = *((_QWORD *)this + 2);
          v76 = *(_QWORD *)this;
          if (v74 <= 0xFFFFFFFFFFFFFFF5 && v74 + 10 <= v75)
          {
            v77 = 0;
            v78 = 0;
            v79 = 0;
            do
            {
              v80 = v74 + 1;
              *((_QWORD *)this + 1) = v74 + 1;
              v81 = *(_BYTE *)(v76 + v74);
              v79 |= (unint64_t)(v81 & 0x7F) << v77;
              if ((v81 & 0x80) == 0)
                goto LABEL_153;
              v77 += 7;
              v74 = v80;
              v20 = v78++ > 8;
            }
            while (!v20);
LABEL_123:
            LODWORD(v79) = 0;
            goto LABEL_153;
          }
          v89 = 0;
          v90 = 0;
          v79 = 0;
          if (v75 <= v74)
            v75 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v75 == v74)
            {
              LODWORD(v79) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v91 = v74 + 1;
              v92 = *(_BYTE *)(v76 + v74);
              *((_QWORD *)this + 1) = v91;
              v79 |= (unint64_t)(v92 & 0x7F) << v89;
              if (v92 < 0)
              {
                v89 += 7;
                v74 = v91;
                v20 = v90++ > 8;
                if (v20)
                  goto LABEL_123;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v79) = 0;
            }
            break;
          }
LABEL_153:
          *(_DWORD *)(a1 + 88) = v79;
          goto LABEL_180;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0)
            return 0;
          goto LABEL_180;
      }
    }
    v21 = 0;
    v22 = 0;
    v17 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v23 = v4 + 1;
      v24 = *(_BYTE *)(v14 + v4);
      *((_QWORD *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0)
        goto LABEL_21;
      v21 += 7;
      v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        v17 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_10162D6E0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;
  double *v10;
  double *v11;
  double v12;
  char v13;

  v3 = result;
  if ((*(_BYTE *)(result + 96) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 80), 1u);
  v4 = *(double **)(v3 + 8);
  v5 = *(double **)(v3 + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6, 2u);
  }
  v7 = *(double **)(v3 + 32);
  v8 = *(double **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9, 3u);
  }
  v10 = *(double **)(v3 + 56);
  v11 = *(double **)(v3 + 64);
  while (v10 != v11)
  {
    v12 = *v10++;
    result = PB::Writer::write(this, v12, 4u);
  }
  v13 = *(_BYTE *)(v3 + 96);
  if ((v13 & 4) != 0)
  {
    result = PB::Writer::write(this, *(_BYTE *)(v3 + 92), 5u);
    v13 = *(_BYTE *)(v3 + 96);
  }
  if ((v13 & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 6u);
  return result;
}

uint64_t sub_10162D7BC(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2B30;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_10162D7D4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_10162D7F8(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;
  uint64_t v5;
  int v6;
  int v7;
  char v8;

  *(_QWORD *)a1 = &off_1021C2B30;
  *(_DWORD *)(a1 + 44) = 0;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    v3 = 2;
    *(_BYTE *)(a1 + 44) = 2;
    *(double *)(a1 + 16) = result;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 44) & 4) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 44) = v3;
    *(_QWORD *)(a1 + 24) = v5;
    v2 = *(_BYTE *)(a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *(_DWORD *)(a2 + 36);
    v3 |= 0x10u;
    *(_BYTE *)(a1 + 44) = v3;
    *(_DWORD *)(a1 + 36) = v6;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 32);
  v3 |= 8u;
  *(_BYTE *)(a1 + 44) = v3;
  *(_DWORD *)(a1 + 32) = v7;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      return result;
LABEL_14:
    result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 44) = v3 | 1;
    *(double *)(a1 + 8) = result;
    return result;
  }
LABEL_13:
  v8 = *(_BYTE *)(a2 + 40);
  v3 |= 0x20u;
  *(_BYTE *)(a1 + 44) = v3;
  *(_BYTE *)(a1 + 40) = v8;
  if ((*(_BYTE *)(a2 + 44) & 1) != 0)
    goto LABEL_14;
  return result;
}

uint64_t sub_10162D8BC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "gestureType", *(_DWORD *)(a1 + 32));
    v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(a1 + 44) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "hostPowerState", *(_BYTE *)(a1 + 40));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(this, "machContinuousTime", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 36));
    if ((*(_BYTE *)(a1 + 44) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(this, "receivedTime", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x10) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 4) != 0)
LABEL_7:
    PB::TextFormatter::format(this, "timestampPossible", *(_QWORD *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10162D9AC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  int v39;
  BOOL v40;
  char v41;
  unsigned int v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 44) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_52;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 2u:
              *(_BYTE *)(a1 + 44) |= 4u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v41 = 0;
                v42 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    v25 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_82;
                  }
                  v43 = v21++;
                  v44 = *(_BYTE *)(v22 + v43);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v44 & 0x7F) << v41;
                  if ((v44 & 0x80) == 0)
                    break;
                  v41 += 7;
                  v14 = v42++ > 8;
                  if (v14)
                  {
                    v25 = 0;
LABEL_81:
                    v2 = v43 + 1;
                    goto LABEL_82;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v25 = 0;
                goto LABEL_81;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_82;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              v25 = 0;
LABEL_82:
              *(_QWORD *)(a1 + 24) = v25;
              goto LABEL_93;
            case 3u:
              *(_BYTE *)(a1 + 44) |= 0x10u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_87;
                  }
                  v47 = v27++;
                  v48 = *(_BYTE *)(v28 + v47);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_86:
                    v2 = v47 + 1;
                    goto LABEL_87;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_86;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_87;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_87:
              *(_DWORD *)(a1 + 36) = v31;
              goto LABEL_93;
            case 4u:
              *(_BYTE *)(a1 + 44) |= 8u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_92;
                  }
                  v51 = v33++;
                  v52 = *(_BYTE *)(v34 + v51);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_91:
                    v2 = v51 + 1;
                    goto LABEL_92;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_91;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_92;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_92:
              *(_DWORD *)(a1 + 32) = v37;
LABEL_93:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 5u:
              *(_BYTE *)(a1 + 44) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v40 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v39 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v40 = v39 != 0;
              }
              *(_BYTE *)(a1 + 40) = v40;
              goto LABEL_93;
            case 6u:
              *(_BYTE *)(a1 + 44) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_77:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_52:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_93;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_93;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10162DEA0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 44);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(result + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 3u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 4u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 8), 6u);
  }
LABEL_12:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 40), 5u);
  if ((*(_BYTE *)(v3 + 44) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8), 6u);
  return result;
}

uint64_t sub_10162DF6C(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2B68;
  *(_DWORD *)(result + 84) = 0;
  return result;
}

void sub_10162DF84(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10162DFA8(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  *(_QWORD *)result = &off_1021C2B68;
  *(_DWORD *)(result + 84) = 0;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x10) != 0)
  {
    v4 = *(_QWORD *)(a2 + 40);
    v3 = 16;
    *(_DWORD *)(result + 84) = 16;
    *(_QWORD *)(result + 40) = v4;
    v2 = *(_DWORD *)(a2 + 84);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 48);
    v3 |= 0x20u;
    *(_DWORD *)(result + 84) = v3;
    *(_QWORD *)(result + 48) = v5;
    v2 = *(_DWORD *)(a2 + 84);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    v6 = *(_DWORD *)(a2 + 68);
    v3 |= 0x200u;
    *(_DWORD *)(result + 84) = v3;
    *(_DWORD *)(result + 68) = v6;
    v2 = *(_DWORD *)(a2 + 84);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0)
        goto LABEL_9;
      goto LABEL_25;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 72);
  v3 |= 0x400u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 72) = v7;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x10000) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  v8 = *(_BYTE *)(a2 + 76);
  v3 |= 0x800u;
  *(_DWORD *)(result + 84) = v3;
  *(_BYTE *)(result + 76) = v8;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x10000) == 0)
  {
LABEL_10:
    if ((v2 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  v9 = *(_BYTE *)(a2 + 81);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 84) = v3;
  *(_BYTE *)(result + 81) = v9;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x4000) == 0)
  {
LABEL_11:
    if ((v2 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  v10 = *(_BYTE *)(a2 + 79);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 84) = v3;
  *(_BYTE *)(result + 79) = v10;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x8000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  v11 = *(_BYTE *)(a2 + 80);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 84) = v3;
  *(_BYTE *)(result + 80) = v11;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x20000) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  v12 = *(_BYTE *)(a2 + 78);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 84) = v3;
  *(_BYTE *)(result + 78) = v12;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x20000) == 0)
  {
LABEL_14:
    if ((v2 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  v13 = *(_BYTE *)(a2 + 82);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 84) = v3;
  *(_BYTE *)(result + 82) = v13;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x1000) == 0)
  {
LABEL_15:
    if ((v2 & 2) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  v14 = *(_BYTE *)(a2 + 77);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 84) = v3;
  *(_BYTE *)(result + 77) = v14;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 2) == 0)
  {
LABEL_16:
    if ((v2 & 1) == 0)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_32:
  v15 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 84) = v3;
  *(_QWORD *)(result + 16) = v15;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 1) == 0)
  {
LABEL_17:
    if ((v2 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_34;
  }
LABEL_33:
  v16 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 84) = v3;
  *(_QWORD *)(result + 8) = v16;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x80) == 0)
  {
LABEL_18:
    if ((v2 & 8) == 0)
      goto LABEL_19;
    goto LABEL_35;
  }
LABEL_34:
  v17 = *(_DWORD *)(a2 + 60);
  v3 |= 0x80u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 60) = v17;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 8) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_36;
  }
LABEL_35:
  v18 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 84) = v3;
  *(_QWORD *)(result + 32) = v18;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 4) == 0)
      goto LABEL_21;
    goto LABEL_37;
  }
LABEL_36:
  v19 = *(_DWORD *)(a2 + 64);
  v3 |= 0x100u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 64) = v19;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 4) == 0)
  {
LABEL_21:
    if ((v2 & 0x40) == 0)
      return result;
LABEL_38:
    v21 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(result + 84) = v3 | 0x40;
    *(_DWORD *)(result + 56) = v21;
    return result;
  }
LABEL_37:
  v20 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(result + 84) = v3;
  *(_QWORD *)(result + 24) = v20;
  if ((*(_DWORD *)(a2 + 84) & 0x40) != 0)
    goto LABEL_38;
  return result;
}

uint64_t sub_10162E1BC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "detectionMode", *(_DWORD *)(a1 + 56));
    v5 = *(_DWORD *)(a1 + 84);
    if ((v5 & 0x800) == 0)
    {
LABEL_3:
      if ((v5 & 0x1000) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v5 & 0x800) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "detectorRunning", *(_BYTE *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x1000) == 0)
  {
LABEL_4:
    if ((v5 & 0x2000) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "enableStateDetected", *(_BYTE *)(a1 + 77));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x2000) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "fireAll", *(_BYTE *)(a1 + 78));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 0x4000) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "gestureDetectionDelay", *(double *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x4000) == 0)
  {
LABEL_7:
    if ((v5 & 0x8000) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "gyroInUse", *(_BYTE *)(a1 + 79));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x8000) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "hostAwake", *(_BYTE *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 2) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "hostWakeCount", *(_DWORD *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 2) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "hostWakeDelay", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 4) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "invertSensors", *(_BYTE *)(a1 + 81));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 4) == 0)
  {
LABEL_12:
    if ((v5 & 8) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "runningModeDuration", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 8) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "runningModeStartTime", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "runningSwitchCount", *(_DWORD *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x200) == 0)
  {
LABEL_15:
    if ((v5 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x10) == 0)
  {
LABEL_16:
    if ((v5 & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x20) == 0)
  {
LABEL_17:
    if ((v5 & 0x400) == 0)
      goto LABEL_18;
LABEL_37:
    PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 72));
    if ((*(_DWORD *)(a1 + 84) & 0x20000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_19;
  }
LABEL_36:
  PB::TextFormatter::format(this, "timestampPossible", *(double *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x400) != 0)
    goto LABEL_37;
LABEL_18:
  if ((v5 & 0x20000) != 0)
LABEL_19:
    PB::TextFormatter::format(this, "wakePending", *(_BYTE *)(a1 + 82));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10162E42C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  int v37;
  BOOL v38;
  int v39;
  BOOL v40;
  int v41;
  BOOL v42;
  int v43;
  BOOL v44;
  int v45;
  BOOL v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  unint64_t v79;
  char v80;
  char v81;
  unsigned int v82;
  unint64_t v83;
  char v84;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 84) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_141;
            case 2u:
              *(_DWORD *)(a1 + 84) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_141;
            case 3u:
              *(_DWORD *)(a1 + 84) |= 0x200u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v65 = 0;
                v66 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_146;
                  }
                  v67 = v21++;
                  v68 = *(_BYTE *)(v22 + v67);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0)
                    break;
                  v65 += 7;
                  v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_145:
                    v2 = v67 + 1;
                    goto LABEL_146;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_145;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_146;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_146:
              *(_DWORD *)(a1 + 68) = v25;
              goto LABEL_167;
            case 4u:
              *(_DWORD *)(a1 + 84) |= 0x400u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v69 = 0;
                v70 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_151;
                  }
                  v71 = v27++;
                  v72 = *(_BYTE *)(v28 + v71);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0)
                    break;
                  v69 += 7;
                  v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_150:
                    v2 = v71 + 1;
                    goto LABEL_151;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_150;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_151;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_151:
              *(_DWORD *)(a1 + 72) = v31;
              goto LABEL_167;
            case 5u:
              *(_DWORD *)(a1 + 84) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 76) = v34;
              goto LABEL_167;
            case 6u:
              *(_DWORD *)(a1 + 84) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v36 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v35 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v36 = v35 != 0;
              }
              *(_BYTE *)(a1 + 81) = v36;
              goto LABEL_167;
            case 7u:
              *(_DWORD *)(a1 + 84) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v38 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v37 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v38 = v37 != 0;
              }
              *(_BYTE *)(a1 + 79) = v38;
              goto LABEL_167;
            case 8u:
              *(_DWORD *)(a1 + 84) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v40 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v39 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v40 = v39 != 0;
              }
              *(_BYTE *)(a1 + 80) = v40;
              goto LABEL_167;
            case 9u:
              *(_DWORD *)(a1 + 84) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v42 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v41 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v42 = v41 != 0;
              }
              *(_BYTE *)(a1 + 78) = v42;
              goto LABEL_167;
            case 0xAu:
              *(_DWORD *)(a1 + 84) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v44 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v43 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v44 = v43 != 0;
              }
              *(_BYTE *)(a1 + 82) = v44;
              goto LABEL_167;
            case 0xBu:
              *(_DWORD *)(a1 + 84) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v46 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v45 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v46 = v45 != 0;
              }
              *(_BYTE *)(a1 + 77) = v46;
              goto LABEL_167;
            case 0xCu:
              *(_DWORD *)(a1 + 84) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_141;
            case 0xDu:
              *(_DWORD *)(a1 + 84) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_141;
            case 0xEu:
              *(_DWORD *)(a1 + 84) |= 0x80u;
              v47 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v48 = *(_QWORD *)this;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                v73 = 0;
                v74 = 0;
                v51 = 0;
                if (v2 <= v47)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v47)
                  {
                    LODWORD(v51) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_156;
                  }
                  v75 = v47++;
                  v76 = *(_BYTE *)(v48 + v75);
                  *((_QWORD *)this + 1) = v47;
                  v51 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0)
                    break;
                  v73 += 7;
                  v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v51) = 0;
LABEL_155:
                    v2 = v75 + 1;
                    goto LABEL_156;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v51) = 0;
                goto LABEL_155;
              }
              v49 = 0;
              v50 = 0;
              v51 = 0;
              do
              {
                v2 = v47 + 1;
                *((_QWORD *)this + 1) = v47 + 1;
                v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0)
                  goto LABEL_156;
                v49 += 7;
                v47 = v2;
                v14 = v50++ > 8;
              }
              while (!v14);
              LODWORD(v51) = 0;
LABEL_156:
              *(_DWORD *)(a1 + 60) = v51;
              goto LABEL_167;
            case 0xFu:
              *(_DWORD *)(a1 + 84) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_141;
            case 0x10u:
              *(_DWORD *)(a1 + 84) |= 0x100u;
              v53 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v54 = *(_QWORD *)this;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                v77 = 0;
                v78 = 0;
                v57 = 0;
                if (v2 <= v53)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v53)
                  {
                    LODWORD(v57) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_161;
                  }
                  v79 = v53++;
                  v80 = *(_BYTE *)(v54 + v79);
                  *((_QWORD *)this + 1) = v53;
                  v57 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0)
                    break;
                  v77 += 7;
                  v14 = v78++ > 8;
                  if (v14)
                  {
                    LODWORD(v57) = 0;
LABEL_160:
                    v2 = v79 + 1;
                    goto LABEL_161;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v57) = 0;
                goto LABEL_160;
              }
              v55 = 0;
              v56 = 0;
              v57 = 0;
              do
              {
                v2 = v53 + 1;
                *((_QWORD *)this + 1) = v53 + 1;
                v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0)
                  goto LABEL_161;
                v55 += 7;
                v53 = v2;
                v14 = v56++ > 8;
              }
              while (!v14);
              LODWORD(v57) = 0;
LABEL_161:
              *(_DWORD *)(a1 + 64) = v57;
              goto LABEL_167;
            case 0x11u:
              *(_DWORD *)(a1 + 84) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_141:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_83:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_167;
            case 0x12u:
              *(_DWORD *)(a1 + 84) |= 0x40u;
              v59 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v60 = *(_QWORD *)this;
              if (v59 > 0xFFFFFFFFFFFFFFF5 || v59 + 10 > v2)
              {
                v81 = 0;
                v82 = 0;
                v63 = 0;
                if (v2 <= v59)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v59)
                  {
                    LODWORD(v63) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_166;
                  }
                  v83 = v59++;
                  v84 = *(_BYTE *)(v60 + v83);
                  *((_QWORD *)this + 1) = v59;
                  v63 |= (unint64_t)(v84 & 0x7F) << v81;
                  if ((v84 & 0x80) == 0)
                    break;
                  v81 += 7;
                  v14 = v82++ > 8;
                  if (v14)
                  {
                    LODWORD(v63) = 0;
LABEL_165:
                    v2 = v83 + 1;
                    goto LABEL_166;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v63) = 0;
                goto LABEL_165;
              }
              v61 = 0;
              v62 = 0;
              v63 = 0;
              do
              {
                v2 = v59 + 1;
                *((_QWORD *)this + 1) = v59 + 1;
                v64 = *(_BYTE *)(v60 + v59);
                v63 |= (unint64_t)(v64 & 0x7F) << v61;
                if ((v64 & 0x80) == 0)
                  goto LABEL_166;
                v61 += 7;
                v59 = v2;
                v14 = v62++ > 8;
              }
              while (!v14);
              LODWORD(v63) = 0;
LABEL_166:
              *(_DWORD *)(a1 + 56) = v63;
LABEL_167:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_167;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10162ED70(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 84);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 40), 1u);
    v4 = *(_DWORD *)(v3 + 84);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 48), 2u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 68), 3u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 72), 4u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 76), 5u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 81), 6u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x8000) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 79), 7u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x8000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 80), 8u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 78), 9u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x20000) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 82), 0xAu);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 2) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 77), 0xBu);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 2) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 0xCu);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 0xDu);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 8) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 0xEu);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 8) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 0xFu);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 4) == 0)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 64), 0x10u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 4) == 0)
  {
LABEL_18:
    if ((v4 & 0x40) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 0x12u);
  }
LABEL_36:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 0x11u);
  if ((*(_DWORD *)(v3 + 84) & 0x40) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 0x12u);
  return result;
}

uint64_t sub_10162EF8C(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2BA0;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void sub_10162EFA4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10162EFC8(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  int v16;
  int v17;
  int v18;

  *(_QWORD *)result = &off_1021C2BA0;
  *(_DWORD *)(result + 60) = 0;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 8) != 0)
  {
    v4 = *(_DWORD *)(a2 + 24);
    v3 = 8;
    *(_WORD *)(result + 60) = 8;
    *(_DWORD *)(result + 24) = v4;
    v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(_WORD *)(result + 60) = v3;
    *(_DWORD *)(result + 28) = v5;
    v2 = *(_WORD *)(a2 + 60);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    v6 = *(_DWORD *)(a2 + 32);
    v3 |= 0x20u;
    *(_WORD *)(result + 60) = v3;
    *(_DWORD *)(result + 32) = v6;
    v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0)
        goto LABEL_9;
      goto LABEL_22;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 36) = v7;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  v8 = *(_DWORD *)(a2 + 48);
  v3 |= 0x200u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 48) = v8;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  v9 = *(_DWORD *)(a2 + 44);
  v3 |= 0x100u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 44) = v9;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  v10 = *(_DWORD *)(a2 + 52);
  v3 |= 0x400u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 52) = v10;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x4000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  v11 = *(_BYTE *)(a2 + 59);
  v3 |= 0x4000u;
  *(_WORD *)(result + 60) = v3;
  *(_BYTE *)(result + 59) = v11;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_27;
  }
LABEL_26:
  v12 = *(_BYTE *)(a2 + 58);
  v3 |= 0x2000u;
  *(_WORD *)(result + 60) = v3;
  *(_BYTE *)(result + 58) = v12;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 1) == 0)
      goto LABEL_15;
    goto LABEL_28;
  }
LABEL_27:
  v13 = *(_BYTE *)(a2 + 57);
  v3 |= 0x1000u;
  *(_WORD *)(result + 60) = v3;
  *(_BYTE *)(result + 57) = v13;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 1) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_29;
  }
LABEL_28:
  v14 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 60) = v3;
  *(_QWORD *)(result + 8) = v14;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 2) == 0)
      goto LABEL_17;
    goto LABEL_30;
  }
LABEL_29:
  v15 = *(_BYTE *)(a2 + 56);
  v3 |= 0x800u;
  *(_WORD *)(result + 60) = v3;
  *(_BYTE *)(result + 56) = v15;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 2) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0)
      goto LABEL_18;
    goto LABEL_31;
  }
LABEL_30:
  v16 = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 16) = v16;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 4) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0)
      return result;
LABEL_32:
    v18 = *(_DWORD *)(a2 + 40);
    *(_WORD *)(result + 60) = v3 | 0x80;
    *(_DWORD *)(result + 40) = v18;
    return result;
  }
LABEL_31:
  v17 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 20) = v17;
  if ((*(_WORD *)(a2 + 60) & 0x80) != 0)
    goto LABEL_32;
  return result;
}

uint64_t sub_10162F188(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "dataRate", *(float *)(a1 + 16));
    v5 = *(_WORD *)(a1 + 60);
    if ((v5 & 0x800) == 0)
    {
LABEL_3:
      if ((v5 & 0x1000) == 0)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  else if ((*(_WORD *)(a1 + 60) & 0x800) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "isInterpolated", *(_BYTE *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x1000) == 0)
  {
LABEL_4:
    if ((v5 & 0x2000) == 0)
      goto LABEL_5;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "isMissingSamples", *(_BYTE *)(a1 + 57));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x2000) == 0)
  {
LABEL_5:
    if ((v5 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "isWalkingFiltered", *(_BYTE *)(a1 + 58));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x4000) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "isWalkingRaw", *(_BYTE *)(a1 + 59));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "maxSampleDeltaInSecond", *(float *)(a1 + 20));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "pedEnergyPlane", *(float *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "pedEnergyZ", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "pedEnergyZByPlane", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "pedEnergyZPeak", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "reversedTimestampCounts", *(_DWORD *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "thetaPitchFaceDeg", *(float *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x200) == 0)
  {
LABEL_14:
    if ((v5 & 0x400) == 0)
      goto LABEL_15;
LABEL_31:
    PB::TextFormatter::format(this, "thetaYawFaceDeg", *(float *)(a1 + 52));
    if ((*(_WORD *)(a1 + 60) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_16;
  }
LABEL_30:
  PB::TextFormatter::format(this, "thetaRollFaceDeg", *(float *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x400) != 0)
    goto LABEL_31;
LABEL_15:
  if ((v5 & 1) != 0)
LABEL_16:
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10162F398(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 60) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_65;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_96;
            case 2u:
              *(_WORD *)(a1 + 60) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_65;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_96;
            case 3u:
              *(_WORD *)(a1 + 60) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_65;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_96;
            case 4u:
              *(_WORD *)(a1 + 60) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_65;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_96;
            case 5u:
              *(_WORD *)(a1 + 60) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_65;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_96;
            case 6u:
              *(_WORD *)(a1 + 60) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_65;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_96;
            case 7u:
              *(_WORD *)(a1 + 60) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_65;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_96;
            case 8u:
              *(_WORD *)(a1 + 60) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 59) = v22;
              goto LABEL_107;
            case 9u:
              *(_WORD *)(a1 + 60) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v23 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v24 = v23 != 0;
              }
              *(_BYTE *)(a1 + 58) = v24;
              goto LABEL_107;
            case 0xAu:
              *(_WORD *)(a1 + 60) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v26 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v25 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v26 = v25 != 0;
              }
              *(_BYTE *)(a1 + 57) = v26;
              goto LABEL_107;
            case 0xBu:
              *(_WORD *)(a1 + 60) |= 1u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v41 = 0;
                v42 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_101;
                  }
                  v43 = v27++;
                  v44 = *(_BYTE *)(v28 + v43);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v44 & 0x7F) << v41;
                  if ((v44 & 0x80) == 0)
                    break;
                  v41 += 7;
                  v14 = v42++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_100:
                    v2 = v43 + 1;
                    goto LABEL_101;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_100;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_101;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_101:
              *(_QWORD *)(a1 + 8) = v31;
              goto LABEL_107;
            case 0xCu:
              *(_WORD *)(a1 + 60) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 56) = v34;
              goto LABEL_107;
            case 0xDu:
              *(_WORD *)(a1 + 60) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_65;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_96;
            case 0xEu:
              *(_WORD *)(a1 + 60) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_96:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_65:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_107;
            case 0xFu:
              *(_WORD *)(a1 + 60) |= 0x80u;
              v35 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v36 = *(_QWORD *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_106;
                  }
                  v47 = v35++;
                  v48 = *(_BYTE *)(v36 + v47);
                  *((_QWORD *)this + 1) = v35;
                  v39 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_105:
                    v2 = v47 + 1;
                    goto LABEL_106;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v39) = 0;
                goto LABEL_105;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)this + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_106;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_106:
              *(_DWORD *)(a1 + 40) = v39;
LABEL_107:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_107;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10162F9F4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 60);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 24), 1u);
    v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 28), 2u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 32), 3u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(float *)(v3 + 36), 4u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(float *)(v3 + 48), 5u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 44), 6u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 52), 7u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x4000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 59), 8u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 58), 9u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 57), 0xAu);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 8), 0xBu);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 56), 0xCu);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(float *)(v3 + 16), 0xDu);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 0xFu);
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 20), 0xEu);
  if ((*(_WORD *)(v3 + 60) & 0x80) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 0xFu);
  return result;
}

double sub_10162FBBC(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1021C2BD8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 244) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  return result;
}

void sub_10162FBF0(PB::Base *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)this = &off_1021C2BD8;
  v2 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  PB::Base::~Base(this);
}

void sub_10162FD40(PB::Base *a1)
{
  sub_10162FBF0(a1);
  operator delete();
}

uint64_t sub_10162FD64(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  char v8;
  char v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  char v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;

  *(_QWORD *)result = &off_1021C2BD8;
  *(_QWORD *)(result + 64) = 0;
  *(_OWORD *)(result + 88) = 0u;
  *(_DWORD *)(result + 244) = 0;
  *(_OWORD *)(result + 104) = 0u;
  *(_OWORD *)(result + 120) = 0u;
  *(_OWORD *)(result + 136) = 0u;
  *(_OWORD *)(result + 152) = 0u;
  *(_QWORD *)(result + 168) = 0;
  v2 = *(_DWORD *)(a2 + 244);
  if ((v2 & 0x100) != 0)
  {
    v4 = *(_QWORD *)(a2 + 80);
    v3 = 256;
    *(_DWORD *)(result + 244) = 256;
    *(_QWORD *)(result + 80) = v4;
    v2 = *(_DWORD *)(a2 + 244);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 72);
    v3 |= 0x80u;
    *(_DWORD *)(result + 244) = v3;
    *(_QWORD *)(result + 72) = v5;
    v2 = *(_DWORD *)(a2 + 244);
  }
LABEL_6:
  if ((v2 & 0x10000) != 0)
  {
    v12 = *(_DWORD *)(a2 + 220);
    v3 |= 0x10000u;
    *(_DWORD *)(result + 244) = v3;
    *(_DWORD *)(result + 220) = v12;
    v2 = *(_DWORD *)(a2 + 244);
    if ((v2 & 0x8000) == 0)
    {
LABEL_8:
      if ((v2 & 0x40000) == 0)
        goto LABEL_9;
      goto LABEL_62;
    }
  }
  else if ((v2 & 0x8000) == 0)
  {
    goto LABEL_8;
  }
  v13 = *(_DWORD *)(a2 + 216);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 244) = v3;
  *(_DWORD *)(result + 216) = v13;
  v2 = *(_DWORD *)(a2 + 244);
  if ((v2 & 0x40000) == 0)
  {
LABEL_9:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_10;
    goto LABEL_63;
  }
LABEL_62:
  v14 = *(_DWORD *)(a2 + 228);
  v3 |= 0x40000u;
  *(_DWORD *)(result + 244) = v3;
  *(_DWORD *)(result + 228) = v14;
  v2 = *(_DWORD *)(a2 + 244);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_10:
    if ((v2 & 0x80000) == 0)
      goto LABEL_11;
    goto LABEL_64;
  }
LABEL_63:
  v15 = *(_BYTE *)(a2 + 241);
  v3 |= 0x2000000u;
  *(_DWORD *)(result + 244) = v3;
  *(_BYTE *)(result + 241) = v15;
  v2 = *(_DWORD *)(a2 + 244);
  if ((v2 & 0x80000) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_12;
    goto LABEL_65;
  }
LABEL_64:
  v16 = *(_DWORD *)(a2 + 232);
  v3 |= 0x80000u;
  *(_DWORD *)(result + 244) = v3;
  *(_DWORD *)(result + 232) = v16;
  v2 = *(_DWORD *)(a2 + 244);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_66;
  }
LABEL_65:
  v17 = *(_BYTE *)(a2 + 242);
  v3 |= 0x4000000u;
  *(_DWORD *)(result + 244) = v3;
  *(_BYTE *)(result + 242) = v17;
  v2 = *(_DWORD *)(a2 + 244);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x400000) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_66:
  v18 = *(_QWORD *)(a2 + 176);
  v3 |= 0x200u;
  *(_DWORD *)(result + 244) = v3;
  *(_QWORD *)(result + 176) = v18;
  if ((*(_DWORD *)(a2 + 244) & 0x400000) != 0)
  {
LABEL_14:
    v6 = *(_BYTE *)(a2 + 238);
    *(_DWORD *)(result + 244) = v3 | 0x400000;
    *(_BYTE *)(result + 238) = v6;
  }
LABEL_15:
  if (*(_QWORD *)(a2 + 64))
    operator new();
  v7 = *(_DWORD *)(a2 + 244);
  if ((v7 & 0x800) != 0)
  {
    v19 = *(_QWORD *)(a2 + 192);
    *(_DWORD *)(result + 244) |= 0x800u;
    *(_QWORD *)(result + 192) = v19;
    v7 = *(_DWORD *)(a2 + 244);
    if ((v7 & 0x800000) == 0)
    {
LABEL_19:
      if ((v7 & 0x400) == 0)
        goto LABEL_20;
      goto LABEL_70;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_19;
  }
  v20 = *(_BYTE *)(a2 + 239);
  *(_DWORD *)(result + 244) |= 0x800000u;
  *(_BYTE *)(result + 239) = v20;
  v7 = *(_DWORD *)(a2 + 244);
  if ((v7 & 0x400) == 0)
  {
LABEL_20:
    if ((v7 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_21;
  }
LABEL_70:
  v21 = *(_QWORD *)(a2 + 184);
  *(_DWORD *)(result + 244) |= 0x400u;
  *(_QWORD *)(result + 184) = v21;
  if ((*(_DWORD *)(a2 + 244) & 0x200000) != 0)
  {
LABEL_21:
    v8 = *(_BYTE *)(a2 + 237);
    *(_DWORD *)(result + 244) |= 0x200000u;
    *(_BYTE *)(result + 237) = v8;
  }
LABEL_22:
  if (*(_QWORD *)(a2 + 120))
    operator new();
  if (*(_QWORD *)(a2 + 112))
    operator new();
  if (*(_QWORD *)(a2 + 104))
    operator new();
  if (*(_QWORD *)(a2 + 96))
    operator new();
  if (*(_QWORD *)(a2 + 152))
    operator new();
  if (*(_QWORD *)(a2 + 144))
    operator new();
  if (*(_QWORD *)(a2 + 168))
    operator new();
  if (*(_QWORD *)(a2 + 160))
    operator new();
  if ((*(_BYTE *)(a2 + 246) & 0x10) != 0)
  {
    v9 = *(_BYTE *)(a2 + 236);
    *(_DWORD *)(result + 244) |= 0x100000u;
    *(_BYTE *)(result + 236) = v9;
  }
  if (*(_QWORD *)(a2 + 88))
    operator new();
  v10 = *(_DWORD *)(a2 + 244);
  if ((v10 & 1) != 0)
  {
    v22 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(result + 244) |= 1u;
    *(_QWORD *)(result + 8) = v22;
    v10 = *(_DWORD *)(a2 + 244);
    if ((v10 & 8) == 0)
    {
LABEL_44:
      if ((v10 & 0x20000) == 0)
        goto LABEL_45;
      goto LABEL_74;
    }
  }
  else if ((v10 & 8) == 0)
  {
    goto LABEL_44;
  }
  v23 = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(result + 244) |= 8u;
  *(_QWORD *)(result + 32) = v23;
  v10 = *(_DWORD *)(a2 + 244);
  if ((v10 & 0x20000) == 0)
  {
LABEL_45:
    if ((v10 & 0x1000000) == 0)
      goto LABEL_46;
    goto LABEL_75;
  }
LABEL_74:
  v24 = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(result + 244) |= 0x20000u;
  *(_DWORD *)(result + 224) = v24;
  v10 = *(_DWORD *)(a2 + 244);
  if ((v10 & 0x1000000) == 0)
  {
LABEL_46:
    if ((v10 & 0x1000) == 0)
      goto LABEL_47;
    goto LABEL_76;
  }
LABEL_75:
  v25 = *(_BYTE *)(a2 + 240);
  *(_DWORD *)(result + 244) |= 0x1000000u;
  *(_BYTE *)(result + 240) = v25;
  v10 = *(_DWORD *)(a2 + 244);
  if ((v10 & 0x1000) == 0)
  {
LABEL_47:
    if ((v10 & 0x40) == 0)
      goto LABEL_48;
    goto LABEL_77;
  }
LABEL_76:
  v26 = *(_QWORD *)(a2 + 200);
  *(_DWORD *)(result + 244) |= 0x1000u;
  *(_QWORD *)(result + 200) = v26;
  v10 = *(_DWORD *)(a2 + 244);
  if ((v10 & 0x40) == 0)
  {
LABEL_48:
    if ((v10 & 2) == 0)
      goto LABEL_49;
    goto LABEL_78;
  }
LABEL_77:
  v27 = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(result + 244) |= 0x40u;
  *(_QWORD *)(result + 56) = v27;
  v10 = *(_DWORD *)(a2 + 244);
  if ((v10 & 2) == 0)
  {
LABEL_49:
    if ((v10 & 0x10) == 0)
      goto LABEL_50;
    goto LABEL_79;
  }
LABEL_78:
  v28 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(result + 244) |= 2u;
  *(_QWORD *)(result + 16) = v28;
  v10 = *(_DWORD *)(a2 + 244);
  if ((v10 & 0x10) == 0)
  {
LABEL_50:
    if ((v10 & 0x4000) == 0)
      goto LABEL_51;
    goto LABEL_80;
  }
LABEL_79:
  v29 = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(result + 244) |= 0x10u;
  *(_QWORD *)(result + 40) = v29;
  v10 = *(_DWORD *)(a2 + 244);
  if ((v10 & 0x4000) == 0)
  {
LABEL_51:
    if ((v10 & 0x2000) == 0)
      goto LABEL_52;
    goto LABEL_81;
  }
LABEL_80:
  v30 = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(result + 244) |= 0x4000u;
  *(_DWORD *)(result + 212) = v30;
  v10 = *(_DWORD *)(a2 + 244);
  if ((v10 & 0x2000) == 0)
  {
LABEL_52:
    if ((v10 & 0x20) == 0)
      goto LABEL_53;
    goto LABEL_82;
  }
LABEL_81:
  v31 = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(result + 244) |= 0x2000u;
  *(_DWORD *)(result + 208) = v31;
  v10 = *(_DWORD *)(a2 + 244);
  if ((v10 & 0x20) == 0)
  {
LABEL_53:
    if ((v10 & 4) == 0)
      goto LABEL_55;
    goto LABEL_54;
  }
LABEL_82:
  v32 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(result + 244) |= 0x20u;
  *(_QWORD *)(result + 48) = v32;
  if ((*(_DWORD *)(a2 + 244) & 4) != 0)
  {
LABEL_54:
    v11 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(result + 244) |= 4u;
    *(_QWORD *)(result + 24) = v11;
  }
LABEL_55:
  if (*(_QWORD *)(a2 + 136))
    operator new();
  if (*(_QWORD *)(a2 + 128))
    operator new();
  return result;
}

uint64_t sub_101630434(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 0x100000) != 0)
  {
    PB::TextFormatter::format(this, "appliedBoutMetricCorrections", *(_BYTE *)(a1 + 236));
    v5 = *(_DWORD *)(a1 + 244);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_58;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dailyFlights30daysMax", *(double *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "dailyFlights30daysMean", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "dailySteps30DaysTotal", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "dailySteps30daysMax", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "dailySteps30daysMean", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "dailySteps7DaysTotal", *(double *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "dailySteps7daysMean", *(double *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "daysWithSteps30Days", *(_DWORD *)(a1 + 208));
  v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_65:
  PB::TextFormatter::format(this, "daysWithSteps7Days", *(_DWORD *)(a1 + 212));
  if ((*(_DWORD *)(a1 + 244) & 0x8000) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "errorStatus", *(_DWORD *)(a1 + 216));
LABEL_13:
  v6 = *(_QWORD *)(a1 + 64);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "eventResult");
  v7 = *(_DWORD *)(a1 + 244);
  if ((v7 & 0x200000) != 0)
  {
    PB::TextFormatter::format(this, "fusionSuccess", *(_BYTE *)(a1 + 237));
    v7 = *(_DWORD *)(a1 + 244);
    if ((v7 & 0x80) == 0)
    {
LABEL_17:
      if ((v7 & 0x100) == 0)
        goto LABEL_18;
      goto LABEL_69;
    }
  }
  else if ((v7 & 0x80) == 0)
  {
    goto LABEL_17;
  }
  PB::TextFormatter::format(this, "hkEndTime", *(double *)(a1 + 72));
  v7 = *(_DWORD *)(a1 + 244);
  if ((v7 & 0x100) == 0)
  {
LABEL_18:
    if ((v7 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_69:
  PB::TextFormatter::format(this, "hkStartTime", *(double *)(a1 + 80));
  if ((*(_DWORD *)(a1 + 244) & 0x400000) != 0)
LABEL_19:
    PB::TextFormatter::format(this, "isHistoricalCompute", *(_BYTE *)(a1 + 238));
LABEL_20:
  v8 = *(_QWORD *)(a1 + 88);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, this, "modelBalanceFeatures");
  v9 = *(_QWORD *)(a1 + 96);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, this, "modelContinuousWalkingFeatures");
  v10 = *(_QWORD *)(a1 + 104);
  if (v10)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, this, "modelContinuousWalkingResult");
  v11 = *(_QWORD *)(a1 + 112);
  if (v11)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, this, "modelGaitBaselineFeatures");
  v12 = *(_QWORD *)(a1 + 120);
  if (v12)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v12 + 32))(v12, this, "modelGaitBaselineResult");
  v13 = *(_QWORD *)(a1 + 128);
  if (v13)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v13 + 32))(v13, this, "modelHarmonicFeatures");
  v14 = *(_QWORD *)(a1 + 136);
  if (v14)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v14 + 32))(v14, this, "modelHarmonicResult");
  v15 = *(_QWORD *)(a1 + 144);
  if (v15)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v15 + 32))(v15, this, "modelTemporalDispersionFeatures");
  v16 = *(_QWORD *)(a1 + 152);
  if (v16)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v16 + 32))(v16, this, "modelTemporalDispersionResult");
  v17 = *(_QWORD *)(a1 + 160);
  if (v17)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v17 + 32))(v17, this, "modelTemporalEntropyFeatures");
  v18 = *(_QWORD *)(a1 + 168);
  if (v18)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v18 + 32))(v18, this, "modelTemporalEntropyResult");
  v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x200) != 0)
  {
    PB::TextFormatter::format(this, "nextClassificationTime", *(double *)(a1 + 176));
    v19 = *(_DWORD *)(a1 + 244);
    if ((v19 & 0x400) == 0)
    {
LABEL_44:
      if ((v19 & 0x10000) == 0)
        goto LABEL_45;
      goto LABEL_73;
    }
  }
  else if ((v19 & 0x400) == 0)
  {
    goto LABEL_44;
  }
  PB::TextFormatter::format(this, "rawSteadiness", *(double *)(a1 + 184));
  v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x10000) == 0)
  {
LABEL_45:
    if ((v19 & 0x800) == 0)
      goto LABEL_46;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "rejectionStatus", *(_DWORD *)(a1 + 220));
  v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x800) == 0)
  {
LABEL_46:
    if ((v19 & 0x800000) == 0)
      goto LABEL_47;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "steadinessScore", *(double *)(a1 + 192));
  v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x800000) == 0)
  {
LABEL_47:
    if ((v19 & 0x1000) == 0)
      goto LABEL_48;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(this, "steadinessScoreIsValid", *(_BYTE *)(a1 + 239));
  v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x1000) == 0)
  {
LABEL_48:
    if ((v19 & 0x20000) == 0)
      goto LABEL_49;
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(this, "unadjustedScore", *(double *)(a1 + 200));
  v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x20000) == 0)
  {
LABEL_49:
    if ((v19 & 0x40000) == 0)
      goto LABEL_50;
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(this, "userAge", *(float *)(a1 + 224));
  v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x40000) == 0)
  {
LABEL_50:
    if ((v19 & 0x1000000) == 0)
      goto LABEL_51;
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(this, "userHeight", *(float *)(a1 + 228));
  v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x1000000) == 0)
  {
LABEL_51:
    if ((v19 & 0x2000000) == 0)
      goto LABEL_52;
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(this, "userIsAgeSet", *(_BYTE *)(a1 + 240));
  v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x2000000) == 0)
  {
LABEL_52:
    if ((v19 & 0x4000000) == 0)
      goto LABEL_53;
LABEL_81:
    PB::TextFormatter::format(this, "userIsWeightSet", *(_BYTE *)(a1 + 242));
    if ((*(_DWORD *)(a1 + 244) & 0x80000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_54;
  }
LABEL_80:
  PB::TextFormatter::format(this, "userIsHeightSet", *(_BYTE *)(a1 + 241));
  v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x4000000) != 0)
    goto LABEL_81;
LABEL_53:
  if ((v19 & 0x80000) != 0)
LABEL_54:
    PB::TextFormatter::format(this, "userWeight", *(float *)(a1 + 232));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101630944(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  BOOL v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  BOOL v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  BOOL v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  BOOL v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  BOOL v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  BOOL v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char v91;
  unsigned int v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  unint64_t v96;
  unint64_t v97;
  char v98;
  unsigned int v99;
  unint64_t v100;
  char v101;
  char v102;
  unsigned int v103;
  unint64_t v104;
  char v105;
  char v106;
  unsigned int v107;
  unint64_t v108;
  char v109;
  char v110;
  unsigned int v111;
  unint64_t v112;
  char v113;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 244) |= 0x100u;
          v20 = *((_QWORD *)this + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)this + 2))
            goto LABEL_124;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v20);
          goto LABEL_170;
        case 2u:
          *(_DWORD *)(a1 + 244) |= 0x80u;
          v21 = *((_QWORD *)this + 1);
          if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)this + 2))
            goto LABEL_124;
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v21);
          goto LABEL_170;
        case 4u:
          *(_DWORD *)(a1 + 244) |= 0x10000u;
          v23 = *((_QWORD *)this + 1);
          v24 = *((_QWORD *)this + 2);
          v25 = *(_QWORD *)this;
          if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
          {
            v26 = 0;
            v27 = 0;
            v28 = 0;
            do
            {
              v29 = v23 + 1;
              *((_QWORD *)this + 1) = v23 + 1;
              v30 = *(_BYTE *)(v25 + v23);
              v28 |= (unint64_t)(v30 & 0x7F) << v26;
              if ((v30 & 0x80) == 0)
                goto LABEL_175;
              v26 += 7;
              v23 = v29;
              v14 = v27++ > 8;
            }
            while (!v14);
LABEL_133:
            LODWORD(v28) = 0;
            goto LABEL_175;
          }
          v98 = 0;
          v99 = 0;
          v28 = 0;
          if (v24 <= v23)
            v24 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v24 == v23)
            {
              LODWORD(v28) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v100 = v23 + 1;
              v101 = *(_BYTE *)(v25 + v23);
              *((_QWORD *)this + 1) = v100;
              v28 |= (unint64_t)(v101 & 0x7F) << v98;
              if (v101 < 0)
              {
                v98 += 7;
                v23 = v100;
                v14 = v99++ > 8;
                if (v14)
                  goto LABEL_133;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v28) = 0;
            }
            break;
          }
LABEL_175:
          *(_DWORD *)(a1 + 220) = v28;
          goto LABEL_188;
        case 5u:
          *(_DWORD *)(a1 + 244) |= 0x8000u;
          v31 = *((_QWORD *)this + 1);
          v32 = *((_QWORD *)this + 2);
          v33 = *(_QWORD *)this;
          if (v31 <= 0xFFFFFFFFFFFFFFF5 && v31 + 10 <= v32)
          {
            v34 = 0;
            v35 = 0;
            v36 = 0;
            do
            {
              v37 = v31 + 1;
              *((_QWORD *)this + 1) = v31 + 1;
              v38 = *(_BYTE *)(v33 + v31);
              v36 |= (unint64_t)(v38 & 0x7F) << v34;
              if ((v38 & 0x80) == 0)
                goto LABEL_179;
              v34 += 7;
              v31 = v37;
              v14 = v35++ > 8;
            }
            while (!v14);
LABEL_140:
            LODWORD(v36) = 0;
            goto LABEL_179;
          }
          v102 = 0;
          v103 = 0;
          v36 = 0;
          if (v32 <= v31)
            v32 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v32 == v31)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v104 = v31 + 1;
              v105 = *(_BYTE *)(v33 + v31);
              *((_QWORD *)this + 1) = v104;
              v36 |= (unint64_t)(v105 & 0x7F) << v102;
              if (v105 < 0)
              {
                v102 += 7;
                v31 = v104;
                v14 = v103++ > 8;
                if (v14)
                  goto LABEL_140;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v36) = 0;
            }
            break;
          }
LABEL_179:
          *(_DWORD *)(a1 + 216) = v36;
          goto LABEL_188;
        case 6u:
          *(_DWORD *)(a1 + 244) |= 0x40000u;
          v39 = *((_QWORD *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)this + 2))
            goto LABEL_124;
          *(_DWORD *)(a1 + 228) = *(_DWORD *)(*(_QWORD *)this + v39);
          goto LABEL_90;
        case 7u:
          *(_DWORD *)(a1 + 244) |= 0x2000000u;
          v40 = *((_QWORD *)this + 1);
          if (v40 >= *((_QWORD *)this + 2))
          {
            v43 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v41 = v40 + 1;
            v42 = *(unsigned __int8 *)(*(_QWORD *)this + v40);
            *((_QWORD *)this + 1) = v41;
            v43 = v42 != 0;
          }
          *(_BYTE *)(a1 + 241) = v43;
          goto LABEL_188;
        case 8u:
          *(_DWORD *)(a1 + 244) |= 0x80000u;
          v44 = *((_QWORD *)this + 1);
          if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((_QWORD *)this + 2))
            goto LABEL_124;
          *(_DWORD *)(a1 + 232) = *(_DWORD *)(*(_QWORD *)this + v44);
          goto LABEL_90;
        case 9u:
          *(_DWORD *)(a1 + 244) |= 0x4000000u;
          v45 = *((_QWORD *)this + 1);
          if (v45 >= *((_QWORD *)this + 2))
          {
            v48 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v46 = v45 + 1;
            v47 = *(unsigned __int8 *)(*(_QWORD *)this + v45);
            *((_QWORD *)this + 1) = v46;
            v48 = v47 != 0;
          }
          *(_BYTE *)(a1 + 242) = v48;
          goto LABEL_188;
        case 0xAu:
          *(_DWORD *)(a1 + 244) |= 0x200u;
          v49 = *((_QWORD *)this + 1);
          if (v49 > 0xFFFFFFFFFFFFFFF7 || v49 + 8 > *((_QWORD *)this + 2))
            goto LABEL_124;
          *(_QWORD *)(a1 + 176) = *(_QWORD *)(*(_QWORD *)this + v49);
          goto LABEL_170;
        case 0xBu:
          *(_DWORD *)(a1 + 244) |= 0x400000u;
          v50 = *((_QWORD *)this + 1);
          if (v50 >= *((_QWORD *)this + 2))
          {
            v53 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v51 = v50 + 1;
            v52 = *(unsigned __int8 *)(*(_QWORD *)this + v50);
            *((_QWORD *)this + 1) = v51;
            v53 = v52 != 0;
          }
          *(_BYTE *)(a1 + 238) = v53;
          goto LABEL_188;
        case 0xCu:
          operator new();
        case 0xDu:
          *(_DWORD *)(a1 + 244) |= 0x800u;
          v54 = *((_QWORD *)this + 1);
          if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((_QWORD *)this + 2))
            goto LABEL_124;
          *(_QWORD *)(a1 + 192) = *(_QWORD *)(*(_QWORD *)this + v54);
          goto LABEL_170;
        case 0xEu:
          *(_DWORD *)(a1 + 244) |= 0x800000u;
          v55 = *((_QWORD *)this + 1);
          if (v55 >= *((_QWORD *)this + 2))
          {
            v58 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v56 = v55 + 1;
            v57 = *(unsigned __int8 *)(*(_QWORD *)this + v55);
            *((_QWORD *)this + 1) = v56;
            v58 = v57 != 0;
          }
          *(_BYTE *)(a1 + 239) = v58;
          goto LABEL_188;
        case 0xFu:
          *(_DWORD *)(a1 + 244) |= 0x400u;
          v59 = *((_QWORD *)this + 1);
          if (v59 > 0xFFFFFFFFFFFFFFF7 || v59 + 8 > *((_QWORD *)this + 2))
            goto LABEL_124;
          *(_QWORD *)(a1 + 184) = *(_QWORD *)(*(_QWORD *)this + v59);
          goto LABEL_170;
        case 0x10u:
          *(_DWORD *)(a1 + 244) |= 0x200000u;
          v60 = *((_QWORD *)this + 1);
          if (v60 >= *((_QWORD *)this + 2))
          {
            v63 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v61 = v60 + 1;
            v62 = *(unsigned __int8 *)(*(_QWORD *)this + v60);
            *((_QWORD *)this + 1) = v61;
            v63 = v62 != 0;
          }
          *(_BYTE *)(a1 + 237) = v63;
          goto LABEL_188;
        case 0x11u:
          operator new();
        case 0x12u:
          operator new();
        case 0x13u:
          operator new();
        case 0x14u:
          operator new();
        case 0x15u:
          operator new();
        case 0x16u:
          operator new();
        case 0x17u:
          operator new();
        case 0x18u:
          operator new();
        case 0x19u:
          *(_DWORD *)(a1 + 244) |= 0x100000u;
          v64 = *((_QWORD *)this + 1);
          if (v64 >= *((_QWORD *)this + 2))
          {
            v67 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v65 = v64 + 1;
            v66 = *(unsigned __int8 *)(*(_QWORD *)this + v64);
            *((_QWORD *)this + 1) = v65;
            v67 = v66 != 0;
          }
          *(_BYTE *)(a1 + 236) = v67;
          goto LABEL_188;
        case 0x1Au:
          operator new();
        case 0x1Bu:
          *(_DWORD *)(a1 + 244) |= 1u;
          v68 = *((_QWORD *)this + 1);
          if (v68 > 0xFFFFFFFFFFFFFFF7 || v68 + 8 > *((_QWORD *)this + 2))
            goto LABEL_124;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v68);
          goto LABEL_170;
        case 0x1Cu:
          *(_DWORD *)(a1 + 244) |= 8u;
          v69 = *((_QWORD *)this + 1);
          if (v69 > 0xFFFFFFFFFFFFFFF7 || v69 + 8 > *((_QWORD *)this + 2))
            goto LABEL_124;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v69);
          goto LABEL_170;
        case 0x1Du:
          *(_DWORD *)(a1 + 244) |= 0x20000u;
          v70 = *((_QWORD *)this + 1);
          if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)this + 2))
            goto LABEL_124;
          *(_DWORD *)(a1 + 224) = *(_DWORD *)(*(_QWORD *)this + v70);
LABEL_90:
          v71 = *((_QWORD *)this + 1) + 4;
          goto LABEL_171;
        case 0x1Eu:
          *(_DWORD *)(a1 + 244) |= 0x1000000u;
          v72 = *((_QWORD *)this + 1);
          if (v72 >= *((_QWORD *)this + 2))
          {
            v75 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v73 = v72 + 1;
            v74 = *(unsigned __int8 *)(*(_QWORD *)this + v72);
            *((_QWORD *)this + 1) = v73;
            v75 = v74 != 0;
          }
          *(_BYTE *)(a1 + 240) = v75;
          goto LABEL_188;
        case 0x1Fu:
          *(_DWORD *)(a1 + 244) |= 0x1000u;
          v76 = *((_QWORD *)this + 1);
          if (v76 > 0xFFFFFFFFFFFFFFF7 || v76 + 8 > *((_QWORD *)this + 2))
            goto LABEL_124;
          *(_QWORD *)(a1 + 200) = *(_QWORD *)(*(_QWORD *)this + v76);
          goto LABEL_170;
        case 0x20u:
          *(_DWORD *)(a1 + 244) |= 0x40u;
          v77 = *((_QWORD *)this + 1);
          if (v77 > 0xFFFFFFFFFFFFFFF7 || v77 + 8 > *((_QWORD *)this + 2))
            goto LABEL_124;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v77);
          goto LABEL_170;
        case 0x21u:
          *(_DWORD *)(a1 + 244) |= 2u;
          v78 = *((_QWORD *)this + 1);
          if (v78 > 0xFFFFFFFFFFFFFFF7 || v78 + 8 > *((_QWORD *)this + 2))
            goto LABEL_124;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v78);
          goto LABEL_170;
        case 0x22u:
          *(_DWORD *)(a1 + 244) |= 0x10u;
          v79 = *((_QWORD *)this + 1);
          if (v79 > 0xFFFFFFFFFFFFFFF7 || v79 + 8 > *((_QWORD *)this + 2))
            goto LABEL_124;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v79);
          goto LABEL_170;
        case 0x23u:
          *(_DWORD *)(a1 + 244) |= 0x4000u;
          v80 = *((_QWORD *)this + 1);
          v81 = *((_QWORD *)this + 2);
          v82 = *(_QWORD *)this;
          if (v80 <= 0xFFFFFFFFFFFFFFF5 && v80 + 10 <= v81)
          {
            v83 = 0;
            v84 = 0;
            v85 = 0;
            do
            {
              v86 = v80 + 1;
              *((_QWORD *)this + 1) = v80 + 1;
              v87 = *(_BYTE *)(v82 + v80);
              v85 |= (unint64_t)(v87 & 0x7F) << v83;
              if ((v87 & 0x80) == 0)
                goto LABEL_183;
              v83 += 7;
              v80 = v86;
              v14 = v84++ > 8;
            }
            while (!v14);
LABEL_161:
            LODWORD(v85) = 0;
            goto LABEL_183;
          }
          v106 = 0;
          v107 = 0;
          v85 = 0;
          if (v81 <= v80)
            v81 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v81 == v80)
            {
              LODWORD(v85) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v108 = v80 + 1;
              v109 = *(_BYTE *)(v82 + v80);
              *((_QWORD *)this + 1) = v108;
              v85 |= (unint64_t)(v109 & 0x7F) << v106;
              if (v109 < 0)
              {
                v106 += 7;
                v80 = v108;
                v14 = v107++ > 8;
                if (v14)
                  goto LABEL_161;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v85) = 0;
            }
            break;
          }
LABEL_183:
          *(_DWORD *)(a1 + 212) = v85;
          goto LABEL_188;
        case 0x24u:
          *(_DWORD *)(a1 + 244) |= 0x2000u;
          v88 = *((_QWORD *)this + 1);
          v89 = *((_QWORD *)this + 2);
          v90 = *(_QWORD *)this;
          if (v88 <= 0xFFFFFFFFFFFFFFF5 && v88 + 10 <= v89)
          {
            v91 = 0;
            v92 = 0;
            v93 = 0;
            do
            {
              v94 = v88 + 1;
              *((_QWORD *)this + 1) = v88 + 1;
              v95 = *(_BYTE *)(v90 + v88);
              v93 |= (unint64_t)(v95 & 0x7F) << v91;
              if ((v95 & 0x80) == 0)
                goto LABEL_187;
              v91 += 7;
              v88 = v94;
              v14 = v92++ > 8;
            }
            while (!v14);
LABEL_168:
            LODWORD(v93) = 0;
            goto LABEL_187;
          }
          v110 = 0;
          v111 = 0;
          v93 = 0;
          if (v89 <= v88)
            v89 = *((_QWORD *)this + 1);
          break;
        case 0x25u:
          *(_DWORD *)(a1 + 244) |= 0x20u;
          v96 = *((_QWORD *)this + 1);
          if (v96 > 0xFFFFFFFFFFFFFFF7 || v96 + 8 > *((_QWORD *)this + 2))
            goto LABEL_124;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v96);
          goto LABEL_170;
        case 0x26u:
          *(_DWORD *)(a1 + 244) |= 4u;
          v97 = *((_QWORD *)this + 1);
          if (v97 <= 0xFFFFFFFFFFFFFFF7 && v97 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v97);
LABEL_170:
            v71 = *((_QWORD *)this + 1) + 8;
LABEL_171:
            *((_QWORD *)this + 1) = v71;
          }
          else
          {
LABEL_124:
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_188;
        case 0x27u:
          operator new();
        case 0x28u:
          operator new();
        default:
          result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_188;
      }
      while (1)
      {
        if (v89 == v88)
        {
          LODWORD(v93) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_187;
        }
        v112 = v88 + 1;
        v113 = *(_BYTE *)(v90 + v88);
        *((_QWORD *)this + 1) = v112;
        v93 |= (unint64_t)(v113 & 0x7F) << v110;
        if ((v113 & 0x80) == 0)
          break;
        v110 += 7;
        v88 = v112;
        v14 = v111++ > 8;
        if (v14)
          goto LABEL_168;
      }
      if (*((_BYTE *)this + 24))
        LODWORD(v93) = 0;
LABEL_187:
      *(_DWORD *)(a1 + 208) = v93;
LABEL_188:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1016317B0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;
  const PB::Base *v5;
  int v6;
  const PB::Base *v7;
  const PB::Base *v8;
  const PB::Base *v9;
  const PB::Base *v10;
  const PB::Base *v11;
  const PB::Base *v12;
  const PB::Base *v13;
  const PB::Base *v14;
  const PB::Base *v15;
  int v16;
  const PB::Base *v17;
  const PB::Base *v18;

  v3 = result;
  v4 = *(_DWORD *)(result + 244);
  if ((v4 & 0x100) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 80), 1u);
    v4 = *(_DWORD *)(v3 + 244);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x10000) == 0)
        goto LABEL_4;
      goto LABEL_58;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 72), 2u);
  v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x10000) == 0)
  {
LABEL_4:
    if ((v4 & 0x8000) == 0)
      goto LABEL_5;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 220), 4u);
  v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x8000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000) == 0)
      goto LABEL_6;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 216), 5u);
  v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x40000) == 0)
  {
LABEL_6:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_7;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::write(this, *(float *)(v3 + 228), 6u);
  v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x80000) == 0)
      goto LABEL_8;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 241), 7u);
  v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x80000) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_9;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::write(this, *(float *)(v3 + 232), 8u);
  v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 242), 9u);
  v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x400000) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_64:
  result = PB::Writer::write(this, *(double *)(v3 + 176), 0xAu);
  if ((*(_DWORD *)(v3 + 244) & 0x400000) != 0)
LABEL_11:
    result = PB::Writer::write(this, *(_BYTE *)(v3 + 238), 0xBu);
LABEL_12:
  v5 = *(const PB::Base **)(v3 + 64);
  if (v5)
    result = PB::Writer::writeSubmessage(this, v5, 0xCu);
  v6 = *(_DWORD *)(v3 + 244);
  if ((v6 & 0x800) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 192), 0xDu);
    v6 = *(_DWORD *)(v3 + 244);
    if ((v6 & 0x800000) == 0)
    {
LABEL_16:
      if ((v6 & 0x400) == 0)
        goto LABEL_17;
      goto LABEL_68;
    }
  }
  else if ((v6 & 0x800000) == 0)
  {
    goto LABEL_16;
  }
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 239), 0xEu);
  v6 = *(_DWORD *)(v3 + 244);
  if ((v6 & 0x400) == 0)
  {
LABEL_17:
    if ((v6 & 0x200000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_68:
  result = PB::Writer::write(this, *(double *)(v3 + 184), 0xFu);
  if ((*(_DWORD *)(v3 + 244) & 0x200000) != 0)
LABEL_18:
    result = PB::Writer::write(this, *(_BYTE *)(v3 + 237), 0x10u);
LABEL_19:
  v7 = *(const PB::Base **)(v3 + 120);
  if (v7)
    result = PB::Writer::writeSubmessage(this, v7, 0x11u);
  v8 = *(const PB::Base **)(v3 + 112);
  if (v8)
    result = PB::Writer::writeSubmessage(this, v8, 0x12u);
  v9 = *(const PB::Base **)(v3 + 104);
  if (v9)
    result = PB::Writer::writeSubmessage(this, v9, 0x13u);
  v10 = *(const PB::Base **)(v3 + 96);
  if (v10)
    result = PB::Writer::writeSubmessage(this, v10, 0x14u);
  v11 = *(const PB::Base **)(v3 + 152);
  if (v11)
    result = PB::Writer::writeSubmessage(this, v11, 0x15u);
  v12 = *(const PB::Base **)(v3 + 144);
  if (v12)
    result = PB::Writer::writeSubmessage(this, v12, 0x16u);
  v13 = *(const PB::Base **)(v3 + 168);
  if (v13)
    result = PB::Writer::writeSubmessage(this, v13, 0x17u);
  v14 = *(const PB::Base **)(v3 + 160);
  if (v14)
    result = PB::Writer::writeSubmessage(this, v14, 0x18u);
  if ((*(_BYTE *)(v3 + 246) & 0x10) != 0)
    result = PB::Writer::write(this, *(_BYTE *)(v3 + 236), 0x19u);
  v15 = *(const PB::Base **)(v3 + 88);
  if (v15)
    result = PB::Writer::writeSubmessage(this, v15, 0x1Au);
  v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 8), 0x1Bu);
    v16 = *(_DWORD *)(v3 + 244);
    if ((v16 & 8) == 0)
    {
LABEL_41:
      if ((v16 & 0x20000) == 0)
        goto LABEL_42;
      goto LABEL_72;
    }
  }
  else if ((v16 & 8) == 0)
  {
    goto LABEL_41;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 32), 0x1Cu);
  v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x20000) == 0)
  {
LABEL_42:
    if ((v16 & 0x1000000) == 0)
      goto LABEL_43;
    goto LABEL_73;
  }
LABEL_72:
  result = PB::Writer::write(this, *(float *)(v3 + 224), 0x1Du);
  v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x1000000) == 0)
  {
LABEL_43:
    if ((v16 & 0x1000) == 0)
      goto LABEL_44;
    goto LABEL_74;
  }
LABEL_73:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 240), 0x1Eu);
  v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x1000) == 0)
  {
LABEL_44:
    if ((v16 & 0x40) == 0)
      goto LABEL_45;
    goto LABEL_75;
  }
LABEL_74:
  result = PB::Writer::write(this, *(double *)(v3 + 200), 0x1Fu);
  v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x40) == 0)
  {
LABEL_45:
    if ((v16 & 2) == 0)
      goto LABEL_46;
    goto LABEL_76;
  }
LABEL_75:
  result = PB::Writer::write(this, *(double *)(v3 + 56), 0x20u);
  v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 2) == 0)
  {
LABEL_46:
    if ((v16 & 0x10) == 0)
      goto LABEL_47;
    goto LABEL_77;
  }
LABEL_76:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 0x21u);
  v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x10) == 0)
  {
LABEL_47:
    if ((v16 & 0x4000) == 0)
      goto LABEL_48;
    goto LABEL_78;
  }
LABEL_77:
  result = PB::Writer::write(this, *(double *)(v3 + 40), 0x22u);
  v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x4000) == 0)
  {
LABEL_48:
    if ((v16 & 0x2000) == 0)
      goto LABEL_49;
    goto LABEL_79;
  }
LABEL_78:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 212), 0x23u);
  v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x2000) == 0)
  {
LABEL_49:
    if ((v16 & 0x20) == 0)
      goto LABEL_50;
    goto LABEL_80;
  }
LABEL_79:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 208), 0x24u);
  v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x20) == 0)
  {
LABEL_50:
    if ((v16 & 4) == 0)
      goto LABEL_52;
    goto LABEL_51;
  }
LABEL_80:
  result = PB::Writer::write(this, *(double *)(v3 + 48), 0x25u);
  if ((*(_DWORD *)(v3 + 244) & 4) != 0)
LABEL_51:
    result = PB::Writer::write(this, *(double *)(v3 + 24), 0x26u);
LABEL_52:
  v17 = *(const PB::Base **)(v3 + 136);
  if (v17)
    result = PB::Writer::writeSubmessage(this, v17, 0x27u);
  v18 = *(const PB::Base **)(v3 + 128);
  if (v18)
    return PB::Writer::writeSubmessage(this, v18, 0x28u);
  return result;
}

uint64_t sub_101631BB8(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2C10;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_101631BD0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_101631BF4(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_1021C2C10;
  *(_DWORD *)(a1 + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 4) != 0)
  {
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 = 4;
    *(_BYTE *)(a1 + 28) = 4;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 28) = v3;
    *(double *)(a1 + 16) = result;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 28) = v3 | 1;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

uint64_t sub_101631C64(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "calories_kCal", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101631CF4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        break;
      if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 28) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          goto LABEL_32;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_36:
        v2 = *((_QWORD *)this + 1) + 8;
        goto LABEL_37;
      }
      if ((_DWORD)v20 != 1)
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        goto LABEL_38;
      }
      *(_BYTE *)(a1 + 28) |= 4u;
      v2 = *((_QWORD *)this + 1);
      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
      {
LABEL_32:
        *((_BYTE *)this + 24) = 1;
        goto LABEL_38;
      }
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
      v2 = *((_QWORD *)this + 1) + 4;
LABEL_37:
      *((_QWORD *)this + 1) = v2;
LABEL_38:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    *(_BYTE *)(a1 + 28) |= 1u;
    v2 = *((_QWORD *)this + 1);
    if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
      goto LABEL_32;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
    goto LABEL_36;
  }
  return v4 == 0;
}

uint64_t sub_101631F14(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 24), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        return result;
      return PB::Writer::write(this, *(double *)(v3 + 8), 3u);
    }
  }
  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  if ((*(_BYTE *)(v3 + 28) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  return result;
}

uint64_t sub_101631F8C(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2C48;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_101631FA4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

double sub_101631FC8(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_1021C2C48;
  *(_DWORD *)(a1 + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 4) != 0)
  {
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 = 4;
    *(_BYTE *)(a1 + 28) = 4;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 28) = v3;
    *(double *)(a1 + 16) = result;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 28) = v3 | 1;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

uint64_t sub_101632038(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "calories_kCal", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016320C8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        break;
      if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 28) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          goto LABEL_32;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_36:
        v2 = *((_QWORD *)this + 1) + 8;
        goto LABEL_37;
      }
      if ((_DWORD)v20 != 1)
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        goto LABEL_38;
      }
      *(_BYTE *)(a1 + 28) |= 4u;
      v2 = *((_QWORD *)this + 1);
      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
      {
LABEL_32:
        *((_BYTE *)this + 24) = 1;
        goto LABEL_38;
      }
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
      v2 = *((_QWORD *)this + 1) + 4;
LABEL_37:
      *((_QWORD *)this + 1) = v2;
LABEL_38:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    *(_BYTE *)(a1 + 28) |= 1u;
    v2 = *((_QWORD *)this + 1);
    if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
      goto LABEL_32;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
    goto LABEL_36;
  }
  return v4 == 0;
}

uint64_t sub_1016322E8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 24), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        return result;
      return PB::Writer::write(this, *(double *)(v3 + 8), 3u);
    }
  }
  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  if ((*(_BYTE *)(v3 + 28) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  return result;
}

uint64_t sub_101632360(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2C80;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_101632378(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10163239C(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)result = &off_1021C2C80;
  *(_DWORD *)(result + 24) = 0;
  if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    v3 = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(result + 24) = 2;
    *(_QWORD *)(result + 16) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 24) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
LABEL_5:
    v4 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 24) = v2;
    *(_QWORD *)(result + 8) = v4;
  }
  return result;
}

uint64_t sub_1016323EC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "enclosureMaterial", *(_QWORD *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 24);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101632454(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              v25 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              v25 = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            v25 = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              v25 = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_QWORD *)(a1 + 8) = v25;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1016326E0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 24);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    v4 = *(_BYTE *)(v3 + 24);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 8), 2u);
  return result;
}

uint64_t sub_101632738(uint64_t result)
{
  *(_QWORD *)result = off_1021C2CB8;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_101632750(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1021C2CB8;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_101632794(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1021C2CB8;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t sub_1016327EC(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)result = off_1021C2CB8;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    v3 = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(result + 32) = 2;
    *(_QWORD *)(result + 16) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 32) & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
LABEL_5:
    v4 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 32) = v2;
    *(_QWORD *)(result + 8) = v4;
  }
LABEL_6:
  if (*(_QWORD *)(a2 + 24))
    operator new();
  return result;
}

uint64_t sub_1016328AC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 32);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 16));
  v6 = *(_QWORD *)(a1 + 24);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101632934(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        operator new();
      if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 32) |= 1u;
        v22 = *((_QWORD *)this + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
          goto LABEL_30;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v22);
      }
      else
      {
        if ((_DWORD)v20 != 1)
        {
          result = PB::Reader::skip(this, v20, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_35;
        }
        *(_BYTE *)(a1 + 32) |= 2u;
        v21 = *((_QWORD *)this + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)this + 2))
        {
LABEL_30:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_35;
        }
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v21);
      }
      *((_QWORD *)this + 1) += 8;
LABEL_35:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_101632B94(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    v4 = *(_BYTE *)(v3 + 32);
  }
  if ((v4 & 1) != 0)
    result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  v5 = *(const PB::Base **)(v3 + 24);
  if (v5)
    return PB::Writer::writeSubmessage(this, v5, 3u);
  return result;
}

uint64_t sub_101632C00(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2CF0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_101632C18(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101632C3C(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;

  *(_QWORD *)result = &off_1021C2CF0;
  *(_DWORD *)(result + 40) = 0;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 40) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(result + 40) = v3;
    *(_DWORD *)(result + 24) = v5;
    v2 = *(_BYTE *)(a2 + 40);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *(_DWORD *)(a2 + 32);
    v3 |= 0x10u;
    *(_BYTE *)(result + 40) = v3;
    *(_DWORD *)(result + 32) = v6;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(result + 40) = v3;
  *(_DWORD *)(result + 28) = v7;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  v8 = *(_BYTE *)(a2 + 37);
  v3 |= 0x40u;
  *(_BYTE *)(result + 40) = v3;
  *(_BYTE *)(result + 37) = v8;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  v9 = *(_BYTE *)(a2 + 36);
  v3 |= 0x20u;
  *(_BYTE *)(result + 40) = v3;
  *(_BYTE *)(result + 36) = v9;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0)
      return result;
LABEL_18:
    v11 = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(result + 40) = v3 | 2;
    *(_QWORD *)(result + 16) = v11;
    return result;
  }
LABEL_17:
  v10 = *(_BYTE *)(a2 + 38);
  v3 |= 0x80u;
  *(_BYTE *)(result + 40) = v3;
  *(_BYTE *)(result + 38) = v10;
  if ((*(_BYTE *)(a2 + 40) & 2) != 0)
    goto LABEL_18;
  return result;
}

uint64_t sub_101632D38(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "date", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "isForcedOnWristEnabled", *(_BYTE *)(a1 + 36));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "isOnCharger", *(_BYTE *)(a1 + 37));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "isWristDetectionEnabled", *(_BYTE *)(a1 + 38));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "onWrist", *(_DWORD *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
LABEL_17:
    PB::TextFormatter::format(this, "onWristSensor", *(_DWORD *)(a1 + 32));
    if ((*(_BYTE *)(a1 + 40) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_9;
  }
LABEL_16:
  PB::TextFormatter::format(this, "onWristConfidence", *(_DWORD *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x10) != 0)
    goto LABEL_17;
LABEL_8:
  if ((v5 & 2) != 0)
LABEL_9:
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101632E68(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  int v39;
  BOOL v40;
  int v41;
  BOOL v42;
  int v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 40) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_116;
            case 2u:
              *(_BYTE *)(a1 + 40) |= 4u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_100;
                  }
                  v53 = v21++;
                  v54 = *(_BYTE *)(v22 + v53);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_99:
                    v2 = v53 + 1;
                    goto LABEL_100;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_99;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_100;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_100:
              *(_DWORD *)(a1 + 24) = v25;
              goto LABEL_116;
            case 3u:
              *(_BYTE *)(a1 + 40) |= 0x10u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_105;
                  }
                  v57 = v27++;
                  v58 = *(_BYTE *)(v28 + v57);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_104:
                    v2 = v57 + 1;
                    goto LABEL_105;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_104;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_105;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_105:
              *(_DWORD *)(a1 + 32) = v31;
              goto LABEL_116;
            case 4u:
              *(_BYTE *)(a1 + 40) |= 8u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_110;
                  }
                  v61 = v33++;
                  v62 = *(_BYTE *)(v34 + v61);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_109:
                    v2 = v61 + 1;
                    goto LABEL_110;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_109;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_110;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_110:
              *(_DWORD *)(a1 + 28) = v37;
              goto LABEL_116;
            case 5u:
              *(_BYTE *)(a1 + 40) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v40 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v39 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v40 = v39 != 0;
              }
              *(_BYTE *)(a1 + 37) = v40;
              goto LABEL_116;
            case 6u:
              *(_BYTE *)(a1 + 40) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v42 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v41 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v42 = v41 != 0;
              }
              *(_BYTE *)(a1 + 36) = v42;
              goto LABEL_116;
            case 7u:
              *(_BYTE *)(a1 + 40) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v44 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v43 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v44 = v43 != 0;
              }
              *(_BYTE *)(a1 + 38) = v44;
              goto LABEL_116;
            case 8u:
              *(_BYTE *)(a1 + 40) |= 2u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    v49 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_115;
                  }
                  v65 = v45++;
                  v66 = *(_BYTE *)(v46 + v65);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    v49 = 0;
LABEL_114:
                    v2 = v65 + 1;
                    goto LABEL_115;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v49 = 0;
                goto LABEL_114;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_115;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              v49 = 0;
LABEL_115:
              *(_QWORD *)(a1 + 16) = v49;
LABEL_116:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_116;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101633498(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 3u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 4u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 37), 5u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 36), 6u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 16), 8u);
  }
LABEL_16:
  result = PB::Writer::write(this, *(_BYTE *)(v3 + 38), 7u);
  if ((*(_BYTE *)(v3 + 40) & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 16), 8u);
  return result;
}

uint64_t sub_10163359C(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2D28;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_1016335B4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_1016335D8(uint64_t result, uint64_t a2)
{
  char v2;
  int v3;
  int v4;

  *(_QWORD *)result = &off_1021C2D28;
  *(_DWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 16) & 2) != 0)
  {
    v3 = *(_DWORD *)(a2 + 12);
    *(_BYTE *)(result + 16) = 2;
    *(_DWORD *)(result + 12) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 16) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 16) = v2;
    *(_DWORD *)(result + 8) = v4;
  }
  return result;
}

uint64_t sub_101633628(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "crown", *(_DWORD *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 16);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "wrist", *(_DWORD *)(a1 + 12));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101633690(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)this + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        v27 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v28 = *(_QWORD *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_64;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)this + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v31) = 0;
LABEL_63:
          v3 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v3 = v27 + 1;
            *((_QWORD *)this + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v3;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_64:
        *(_DWORD *)(a1 + 8) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 16) |= 2u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_60;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_59:
          v3 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v3 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v3;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_60:
        *(_DWORD *)(a1 + 12) = v25;
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1016339B8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 16);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 12), 1u);
    v4 = *(_BYTE *)(v3 + 16);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 8), 2u);
  return result;
}

void sub_101633A14(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101633A38(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)result = &off_1021C2D60;
  *(_DWORD *)(result + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 32) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 24) = v5;
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 8) == 0)
      return result;
LABEL_10:
    v7 = *(_BYTE *)(a2 + 28);
    *(_BYTE *)(result + 32) = v3 | 8;
    *(_BYTE *)(result + 28) = v7;
    return result;
  }
  v6 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(result + 32) = v3;
  *(_QWORD *)(result + 16) = v6;
  if ((*(_BYTE *)(a2 + 32) & 8) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_101633AC0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "entryId", *(_QWORD *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "rssi", *(_DWORD *)(a1 + 24));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "isMoving", *(_BYTE *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101633B70(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v35 = 0;
                v36 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_64;
                  }
                  v37 = v20++;
                  v38 = *(_BYTE *)(v21 + v37);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0)
                    break;
                  v35 += 7;
                  v14 = v36++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_63;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_63:
                v2 = v37 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_64;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_64:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_70;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_69;
                  }
                  v41 = v27++;
                  v42 = *(_BYTE *)(v28 + v41);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_68:
                    v2 = v41 + 1;
                    goto LABEL_69;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_68;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_69;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_69:
              *(_DWORD *)(a1 + 24) = -(v31 & 1) ^ ((int)v31 >> 1);
LABEL_70:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_70;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 28) = v34;
              goto LABEL_70;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_70;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101633F4C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeSInt(this, *(_DWORD *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(_BYTE *)(v3 + 28), 4u);
  }
LABEL_8:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  if ((*(_BYTE *)(v3 + 32) & 8) != 0)
    return PB::Writer::write(this, *(_BYTE *)(v3 + 28), 4u);
  return result;
}

_QWORD *sub_101633FE0(_QWORD *result)
{
  *result = off_1021C2D98;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_101633FF4(void **a1)
{
  void **v2;

  *a1 = off_1021C2D98;
  v2 = a1 + 1;
  sub_100724968(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_10163403C(void **a1)
{
  void **v2;

  *a1 = off_1021C2D98;
  v2 = a1 + 1;
  sub_100724968(&v2);
  PB::Base::~Base((PB::Base *)a1);
  operator delete();
}

_QWORD *sub_101634098(_QWORD *result, uint64_t a2)
{
  result[1] = 0;
  *result = off_1021C2D98;
  result[2] = 0;
  result[3] = 0;
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)(a2 + 16))
    sub_1016340FC();
  return result;
}

void sub_1016340FC()
{
  operator new();
}

void sub_101634230(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101634250(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(uint64_t **)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "entries");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016342BC(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        sub_10163445C();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

void sub_10163445C()
{
  operator new();
}

void sub_101634594(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1016345B0(uint64_t result, PB::Writer *this)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; result = PB::Writer::writeSubmessage(this, v5, 1u))
    v5 = *v2++;
  return result;
}

uint64_t sub_1016345F8(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2DD0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_101634610(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101634634(uint64_t result, uint64_t a2)
{
  char v2;
  int v3;
  int v4;

  *(_QWORD *)result = &off_1021C2DD0;
  *(_DWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 16) & 2) != 0)
  {
    v3 = *(_DWORD *)(a2 + 12);
    *(_BYTE *)(result + 16) = 2;
    *(_DWORD *)(result + 12) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 16) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 16) = v2;
    *(_DWORD *)(result + 8) = v4;
  }
  return result;
}

uint64_t sub_101634684(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "activityType", *(_DWORD *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 16);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "motionNotification", *(_DWORD *)(a1 + 12));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016346EC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)this + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        v27 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v28 = *(_QWORD *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_64;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)this + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v31) = 0;
LABEL_63:
          v3 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v3 = v27 + 1;
            *((_QWORD *)this + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v3;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_64:
        *(_DWORD *)(a1 + 8) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 16) |= 2u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_60;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_59:
          v3 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v3 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v3;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_60:
        *(_DWORD *)(a1 + 12) = v25;
      }
      else
      {
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101634A14(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 16);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 12), 1u);
    v4 = *(_BYTE *)(v3 + 16);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 8), 2u);
  return result;
}

uint64_t sub_101634A6C(uint64_t result)
{
  *(_QWORD *)result = &off_1021C2E08;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_101634A84(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101634AA8(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  *(_QWORD *)result = &off_1021C2E08;
  *(_DWORD *)(result + 64) = 0;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x200) != 0)
  {
    v4 = *(_DWORD *)(a2 + 60);
    v3 = 512;
    *(_WORD *)(result + 64) = 512;
    *(_DWORD *)(result + 60) = v4;
    v2 = *(_WORD *)(a2 + 64);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 40);
    v3 |= 0x10u;
    *(_WORD *)(result + 64) = v3;
    *(_DWORD *)(result + 40) = v5;
    v2 = *(_WORD *)(a2 + 64);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(result + 64) = v3;
    *(_QWORD *)(result + 16) = v6;
    v2 = *(_WORD *)(a2 + 64);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_17;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 64) = v3;
  *(_QWORD *)(result + 32) = v7;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  v8 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 64) = v3;
  *(_QWORD *)(result + 8) = v8;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  v9 = *(_DWORD *)(a2 + 52);
  v3 |= 0x80u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 52) = v9;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_20;
  }
LABEL_19:
  v10 = *(_DWORD *)(a2 + 56);
  v3 |= 0x100u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 56) = v10;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 4) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  v11 = *(_DWORD *)(a2 + 48);
  v3 |= 0x40u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 48) = v11;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 4) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_22:
    v13 = *(_DWORD *)(a2 + 44);
    *(_WORD *)(result + 64) = v3 | 0x20;
    *(_DWORD *)(result + 44) = v13;
    return result;
  }
LABEL_21:
  v12 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 64) = v3;
  *(_QWORD *)(result + 24) = v12;
  if ((*(_WORD *)(a2 + 64) & 0x20) != 0)
    goto LABEL_22;
  return result;
}

uint64_t sub_101634BDC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "endTime", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "eventTime", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "eventType", *(_DWORD *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "genericWorkoutLabel", *(_DWORD *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "poolLength", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "swimLocation", *(_DWORD *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
LABEL_21:
    PB::TextFormatter::format(this, "workoutMode", *(_DWORD *)(a1 + 56));
    if ((*(_WORD *)(a1 + 64) & 0x200) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_11;
  }
LABEL_20:
  PB::TextFormatter::format(this, "workoutLocationType", *(_DWORD *)(a1 + 52));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x100) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v5 & 0x200) != 0)
LABEL_11:
    PB::TextFormatter::format(this, "workoutType", *(_DWORD *)(a1 + 60));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101634D4C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  unint64_t v79;
  char v80;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 64) |= 0x200u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_126;
                  }
                  v59 = v20++;
                  v60 = *(_BYTE *)(v21 + v59);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_125;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v24) = 0;
LABEL_125:
                v2 = v59 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_126;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_126:
              *(_DWORD *)(a1 + 60) = v24;
              goto LABEL_152;
            case 2u:
              *(_WORD *)(a1 + 64) |= 0x10u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v61 = 0;
                v62 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_131;
                  }
                  v63 = v27++;
                  v64 = *(_BYTE *)(v28 + v63);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_130:
                    v2 = v63 + 1;
                    goto LABEL_131;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_130;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_131;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_131:
              *(_DWORD *)(a1 + 40) = v31;
              goto LABEL_152;
            case 3u:
              *(_WORD *)(a1 + 64) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_70;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_121;
            case 4u:
              *(_WORD *)(a1 + 64) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_70;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_121;
            case 5u:
              *(_WORD *)(a1 + 64) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_70;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_121;
            case 6u:
              *(_WORD *)(a1 + 64) |= 0x80u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v65 = 0;
                v66 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_136;
                  }
                  v67 = v33++;
                  v68 = *(_BYTE *)(v34 + v67);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0)
                    break;
                  v65 += 7;
                  v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_135:
                    v2 = v67 + 1;
                    goto LABEL_136;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_135;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_136;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_136:
              *(_DWORD *)(a1 + 52) = v37;
              goto LABEL_152;
            case 7u:
              *(_WORD *)(a1 + 64) |= 0x100u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v69 = 0;
                v70 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_141;
                  }
                  v71 = v39++;
                  v72 = *(_BYTE *)(v40 + v71);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0)
                    break;
                  v69 += 7;
                  v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_140:
                    v2 = v71 + 1;
                    goto LABEL_141;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_140;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_141;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_141:
              *(_DWORD *)(a1 + 56) = v43;
              goto LABEL_152;
            case 8u:
              *(_WORD *)(a1 + 64) |= 0x40u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v73 = 0;
                v74 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_146;
                  }
                  v75 = v45++;
                  v76 = *(_BYTE *)(v46 + v75);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0)
                    break;
                  v73 += 7;
                  v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_145:
                    v2 = v75 + 1;
                    goto LABEL_146;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_145;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_146;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_146:
              *(_DWORD *)(a1 + 48) = v49;
              goto LABEL_152;
            case 9u:
              *(_WORD *)(a1 + 64) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_121:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_70:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_152;
            case 0xAu:
              *(_WORD *)(a1 + 64) |= 0x20u;
              v51 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v52 = *(_QWORD *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v77 = 0;
                v78 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_151;
                  }
                  v79 = v51++;
                  v80 = *(_BYTE *)(v52 + v79);
                  *((_QWORD *)this + 1) = v51;
                  v55 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0)
                    break;
                  v77 += 7;
                  v14 = v78++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_150:
                    v2 = v79 + 1;
                    goto LABEL_151;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v55) = 0;
                goto LABEL_150;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v2 = v51 + 1;
                *((_QWORD *)this + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_151;
                v53 += 7;
                v51 = v2;
                v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_151:
              *(_DWORD *)(a1 + 44) = v55;
LABEL_152:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_152;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101635530(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 64);
  if ((v4 & 0x200) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 60), 1u);
    v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 2u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 4u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 5u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 52), 6u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 7u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 4) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 8u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 44), 0xAu);
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 9u);
  if ((*(_WORD *)(v3 + 64) & 0x20) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 44), 0xAu);
  return result;
}

void sub_101635670(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_101635694(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;

  *(_QWORD *)result = &off_1021C2E40;
  *(_DWORD *)(result + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 0x10) != 0)
  {
    v4 = *(_DWORD *)(a2 + 28);
    v3 = 16;
    *(_BYTE *)(result + 32) = 16;
    *(_DWORD *)(result + 28) = v4;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 24) = v5;
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 20) = v6;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        return result;
LABEL_12:
      v8 = *(_DWORD *)(a2 + 16);
      *(_BYTE *)(result + 32) = v3 | 2;
      *(_DWORD *)(result + 16) = v8;
      return result;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(result + 32) = v3;
  *(_QWORD *)(result + 8) = v7;
  if ((*(_BYTE *)(a2 + 32) & 2) != 0)
    goto LABEL_12;
  return result;
}

uint64_t sub_101635738(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "genericWorkoutLabel", *(_DWORD *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "poolLength", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "workoutLocationType", *(_DWORD *)(a1 + 24));
    if ((*(_BYTE *)(a1 + 32) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "swimLocation", *(_DWORD *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "workoutType", *(_DWORD *)(a1 + 28));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101635808(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 0x10u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_88;
                  }
                  v47 = v20++;
                  v48 = *(_BYTE *)(v21 + v47);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_87;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v24) = 0;
LABEL_87:
                v2 = v47 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_88;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_88:
              *(_DWORD *)(a1 + 28) = v24;
              goto LABEL_104;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 8u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_93;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    v2 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_92;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_93;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 24) = v31;
              goto LABEL_104;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_98;
                  }
                  v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    v2 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_97;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_98;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 20) = v37;
              goto LABEL_104;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_104;
            case 5u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_103;
                  }
                  v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    v2 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_102;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_103;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *(_DWORD *)(a1 + 16) = v43;
LABEL_104:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_104;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101635D6C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 28), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 3u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 5u);
  }
LABEL_10:
  result = PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 5u);
  return result;
}

_QWORD *sub_101635E1C(_QWORD *result)
{
  *result = off_1021C2E78;
  result[1] = 0;
  return result;
}

void sub_101635E2C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C2E78;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_101635E6C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C2E78;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_101635EC0(_QWORD *result, uint64_t a2)
{
  *result = off_1021C2E78;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_101635F3C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101635F8C(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101636154(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_101636170(uint64_t result)
{
  if (!*(_QWORD *)(result + 8))
    operator new();
  return result;
}

_QWORD *sub_1016361D4(_QWORD *result)
{
  *result = off_1021C2EB0;
  result[1] = 0;
  return result;
}

void sub_1016361E4(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C2EB0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_101636224(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C2EB0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_101636278(_QWORD *result, uint64_t a2)
{
  *result = off_1021C2EB0;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_1016362F4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101636344(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10163650C(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

_QWORD *sub_101636528(_QWORD *result)
{
  *result = off_1021C2EE8;
  result[1] = 0;
  return result;
}

void sub_101636538(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C2EE8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_101636578(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C2EE8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_1016365CC(_QWORD *result, uint64_t a2)
{
  *result = off_1021C2EE8;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_101636648(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101636698(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101636860(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

_QWORD *sub_10163687C(_QWORD *result)
{
  *result = off_1021C2F20;
  result[1] = 0;
  return result;
}

void sub_10163688C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C2F20;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_1016368CC(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C2F20;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_101636920(_QWORD *result, uint64_t a2)
{
  *result = off_1021C2F20;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_10163699C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016369EC(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101636BB4(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_101636BD0(uint64_t result)
{
  if (!*(_QWORD *)(result + 8))
    operator new();
  return result;
}

_QWORD *sub_101636C34(_QWORD *result)
{
  *result = off_1021C2F58;
  result[1] = 0;
  return result;
}

void sub_101636C44(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C2F58;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_101636C84(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C2F58;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_101636CD8(_QWORD *result, uint64_t a2)
{
  *result = off_1021C2F58;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_101636D54(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101636DA4(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101636F6C(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_101636F88(uint64_t result)
{
  if (!*(_QWORD *)(result + 8))
    operator new();
  return result;
}

_QWORD *sub_101636FEC(_QWORD *result)
{
  *result = off_1021C2F90;
  result[1] = 0;
  return result;
}

void sub_101636FFC(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C2F90;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_10163703C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C2F90;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_101637090(_QWORD *result, uint64_t a2)
{
  *result = off_1021C2F90;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_10163710C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10163715C(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101637324(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2, 1u);
  return result;
}

uint64_t sub_101637340(uint64_t result)
{
  if (!*(_QWORD *)(result + 8))
    operator new();
  return result;
}

_QWORD *sub_1016373A4(_QWORD *result)
{
  *result = off_1021C2FC8;
  result[1] = 0;
  return result;
}

void sub_1016373B4(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C2FC8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_1016373F4(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1021C2FC8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *sub_101637448(_QWORD *result, uint64_t a2)
{
  *result = off_1021C2FC8;
  result[1] = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  return result;
}

uint64_t sub_1016374C4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101637514(int a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

