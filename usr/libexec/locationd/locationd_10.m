void sub_1005FD920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  sub_100166004(&a45);
  _Unwind_Resume(a1);
}

void sub_1005FDA60(uint64_t a1, int32x4_t *a2, int *a3, void *a4, int a5)
{
  NSObject *v7;
  BOOL v8;
  int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  int v13;
  BOOL v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  __n128 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  NSObject *v31;
  void *v32;
  void **v33;
  void **v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  void **v38;
  void **v39;
  void **v40;
  uint64_t v41;
  double v42;
  char *v43;
  char *v44;
  int v45;
  void *v46[2];
  char v47;
  int v48;
  void *__p[2];
  char v50;
  void *v51[2];
  char v52;
  int v53;
  __n128 v54[2];
  void *v55;
  __int16 v56;
  void **v57;
  __int16 v58;
  void **v59;
  __int16 v60;
  void **v61;
  __int16 v62;
  int v63;
  __int16 v64;
  double v65;
  uint64_t v66;
  __int16 v67;
  int v68;
  uint64_t v69;
  int v70;
  uint8_t buf[4];
  int v72;
  __int16 v73;
  void *v74;
  __int16 v75;
  void **v76;
  __int16 v77;
  void **v78;
  __int16 v79;
  int v80;
  __int16 v81;
  double v82;

  if (!*(_QWORD *)(a1 + 16))
    return;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a2))) & 1) != 0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v7 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      if (a2->i32[0])
        v8 = a2->i32[1] == 0;
      else
        v8 = 1;
      v9 = !v8;
      if (*a3)
        v10 = a3[1] == 0;
      else
        v10 = 1;
      v11 = !v10;
      *(_DWORD *)buf = 67109376;
      v72 = v9;
      v73 = 1024;
      LODWORD(v74) = v11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,RoutineVisit,silo entry invalid,from_valid,%d,to_valid,%d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      if (a2->i32[0])
        v12 = a2->i32[1] == 0;
      else
        v12 = 1;
      v13 = !v12;
      if (*a3)
        v14 = a3[1] == 0;
      else
        v14 = 1;
      v15 = !v14;
      LODWORD(v66) = 67109376;
      HIDWORD(v66) = v13;
      v67 = 1024;
      v68 = v15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,recordMessage,RoutineVisit,silo entry invalid,from_valid,%d,to_valid,%d", &v66, 14);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const CLVisit *, const BOOL)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    return;
  }
  sub_100166054(&v66);
  v21 = (__n128 *)sub_100B303DC();
  sub_100B307F4(v21, v54);
  v53 = 4;
  sub_1005EFF80((uint64_t)&v66, (unsigned int *)&v53, a2, a3, (uint64_t *)v54);
  v70 |= 2u;
  v22 = v69;
  if (!v69)
    operator new();
  *(_DWORD *)(v69 + 492) |= 0x800u;
  v23 = *(_QWORD *)(v22 + 352);
  if (!v23)
    operator new();
  *(_DWORD *)(v23 + 184) |= 0x40000u;
  v24 = *(_QWORD *)(v23 + 144);
  if (!v24)
    operator new();
  *(_DWORD *)(v24 + 28) |= 1u;
  *(_DWORD *)(v24 + 8) = -1;
  if (!a5)
  {
    if (sub_10008D1F0(1u))
    {
      v25 = 1;
      goto LABEL_47;
    }
LABEL_72:
    __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 9086, "::CLP::LogEntry::PrivateData::RoutineVisitNotification_NotificationType_IsValid(value)");
  }
  if (!sub_10008D1F0(2u))
    goto LABEL_72;
  v25 = 2;
LABEL_47:
  v26 = *(_DWORD *)(v24 + 28);
  *(_DWORD *)(v24 + 12) = v25;
  *(_DWORD *)(v24 + 28) = v26 | 6;
  v27 = *(_QWORD *)(v24 + 16);
  if (!v27)
    operator new();
  *(_DWORD *)(v27 + 20) |= 1u;
  v28 = *(_QWORD *)(v27 + 8);
  if (!v28)
    operator new();
  sub_10137BE1C(a4, v28);
  v29 = sub_1005EF67C(a1, (uint64_t)&v66);
  if (*(_BYTE *)(a1 + 8))
  {
    v30 = v29;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v31 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      sub_10142E09C(&v53, &v55);
      if (SBYTE3(v59) >= 0)
        v32 = &v55;
      else
        v32 = v55;
      LODWORD(v46[0]) = a2->i32[0];
      sub_10142E364((int *)v46, v51);
      if (v52 >= 0)
        v33 = v51;
      else
        v33 = (void **)v51[0];
      v48 = *a3;
      v34 = __p;
      sub_10142E364(&v48, __p);
      if (v50 < 0)
        v34 = (void **)__p[0];
      v35 = sub_100B303DC();
      v36 = sub_100B309E0(v35);
      *(_DWORD *)buf = 67110402;
      v72 = v30;
      v73 = 2080;
      v74 = v32;
      v75 = 2080;
      v76 = v33;
      v77 = 2080;
      v78 = v34;
      v79 = 1024;
      v80 = a5;
      v81 = 2050;
      v82 = v36;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,RoutineVisit,success,%d,message_type,%s,from,%s,to,%s,isLOI,%d,propagation_us,%{public}.3f", buf, 0x36u);
      if (v50 < 0)
        operator delete(__p[0]);
      if (v52 < 0)
        operator delete(v51[0]);
      if (SBYTE3(v59) < 0)
        operator delete(v55);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v37 = qword_1022A0028;
      v38 = v51;
      sub_10142E09C(&v53, v51);
      if (v52 < 0)
        v38 = (void **)v51[0];
      v48 = a2->i32[0];
      v39 = __p;
      sub_10142E364(&v48, __p);
      if (v50 < 0)
        v39 = (void **)__p[0];
      v45 = *a3;
      v40 = v46;
      sub_10142E364(&v45, v46);
      if (v47 < 0)
        v40 = (void **)v46[0];
      v41 = sub_100B303DC();
      v42 = sub_100B309E0(v41);
      LODWORD(v55) = 67110402;
      HIDWORD(v55) = v30;
      v56 = 2080;
      v57 = v38;
      v58 = 2080;
      v59 = v39;
      v60 = 2080;
      v61 = v40;
      v62 = 1024;
      v63 = a5;
      v64 = 2050;
      v65 = v42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v37, 2, "#locctl,#rec,recordMessage,RoutineVisit,success,%d,message_type,%s,from,%s,to,%s,isLOI,%d,propagation_us,%{public}.3f", &v55, 54);
      v44 = v43;
      if (v47 < 0)
        operator delete(v46[0]);
      if (v50 < 0)
        operator delete(__p[0]);
      if (v52 < 0)
        operator delete(v51[0]);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const CLVisit *, const BOOL)", "%s\n", v44);
      if (v44 != (char *)buf)
        free(v44);
    }
  }
  sub_100166004(&v66);
}

void sub_1005FE190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_100166004(&a47);
  _Unwind_Resume(a1);
}

void sub_1005FE2C8(uint64_t a1, int32x4_t *a2, int *a3, void *a4)
{
  NSObject *v6;
  BOOL v7;
  int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  __n128 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  NSObject *v30;
  _BYTE *v31;
  void **v32;
  void **v33;
  uint64_t v34;
  double v35;
  NSObject *v36;
  id v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  void **v43;
  void **v44;
  void **v45;
  uint64_t v46;
  double v47;
  char *v48;
  char *v49;
  uint64_t v50;
  id v51;
  double v52;
  uint64_t v53;
  double v54;
  const char *v55;
  uint8_t *v56;
  uint64_t v57;
  int v58;
  void *v59[2];
  char v60;
  int v61;
  void *__p[2];
  char v63;
  void *v64[2];
  char v65;
  int v66;
  __n128 v67[2];
  _BYTE v68[38];
  __int16 v69;
  double v70;
  uint64_t v71;
  __int16 v72;
  int v73;
  uint64_t v74;
  int v75;
  uint8_t buf[4];
  _BYTE v77[34];
  __int16 v78;
  double v79;

  if (*(_QWORD *)(a1 + 16))
  {
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a2))) & 1) != 0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v6 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        if (a2->i32[0])
          v7 = a2->i32[1] == 0;
        else
          v7 = 1;
        v8 = !v7;
        if (*a3)
          v9 = a3[1] == 0;
        else
          v9 = 1;
        v10 = !v9;
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)v77 = v8;
        *(_WORD *)&v77[4] = 1024;
        *(_DWORD *)&v77[6] = v10;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,InertialOdometry,silo entry invalid,from_valid,%d,to_valid,%d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102147FA8);
        if (a2->i32[0])
          v11 = a2->i32[1] == 0;
        else
          v11 = 1;
        v12 = !v11;
        if (*a3)
          v13 = a3[1] == 0;
        else
          v13 = 1;
        v14 = !v13;
        LODWORD(v71) = 67109376;
        HIDWORD(v71) = v12;
        v72 = 1024;
        v73 = v14;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,recordMessage,InertialOdometry,silo entry invalid,from_valid,%d,to_valid,%d", &v71, 14);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const CMOdometry *)", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
    }
    else
    {
      sub_100166054(&v71);
      v19 = (__n128 *)sub_100B303DC();
      sub_100B307F4(v19, v67);
      v66 = 4;
      sub_1005EFF80((uint64_t)&v71, (unsigned int *)&v66, a2, a3, (uint64_t *)v67);
      v75 |= 2u;
      v20 = v74;
      if (!v74)
        operator new();
      *(_DWORD *)(v74 + 492) |= 0x800u;
      v21 = *(_QWORD *)(v20 + 352);
      if (!v21)
        operator new();
      *(_DWORD *)(v21 + 184) |= 0x80000u;
      v22 = *(_QWORD *)(v21 + 152);
      if (!v22)
        operator new();
      *(_DWORD *)(v22 + 28) |= 1u;
      *(_DWORD *)(v22 + 8) = -1;
      if (!sub_1002BC6D0(1u))
        __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 9206, "::CLP::LogEntry::PrivateData::InertialOdometryNotification_NotificationType_IsValid(value)");
      v23 = *(_DWORD *)(v22 + 28);
      *(_DWORD *)(v22 + 12) = 1;
      *(_DWORD *)(v22 + 28) = v23 | 6;
      v24 = *(int **)(v22 + 16);
      if (!v24)
        operator new();
      v25 = v24[5];
      v26 = v24[4];
      if ((int)v26 >= v25)
      {
        if (v25 == v24[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v24 + 2), v25 + 1);
          v25 = v24[5];
        }
        v24[5] = v25 + 1;
        sub_10060013C();
      }
      v27 = *((_QWORD *)v24 + 1);
      v24[4] = v26 + 1;
      sub_1013842E0(a4, *(_QWORD *)(v27 + 8 * v26));
      v28 = sub_1005EF67C(a1, (uint64_t)&v71);
      if (*(_BYTE *)(a1 + 8))
      {
        v29 = v28;
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102147FA8);
        v30 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          sub_10142E09C(&v66, v68);
          if (v68[23] >= 0)
            v31 = v68;
          else
            v31 = *(_BYTE **)v68;
          LODWORD(v59[0]) = a2->i32[0];
          sub_10142E364((int *)v59, v64);
          if (v65 >= 0)
            v32 = v64;
          else
            v32 = (void **)v64[0];
          v61 = *a3;
          v33 = __p;
          sub_10142E364(&v61, __p);
          if (v63 < 0)
            v33 = (void **)__p[0];
          v34 = sub_100B303DC();
          v35 = sub_100B309E0(v34);
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)v77 = v29;
          *(_WORD *)&v77[4] = 2080;
          *(_QWORD *)&v77[6] = v31;
          *(_WORD *)&v77[14] = 2080;
          *(_QWORD *)&v77[16] = v32;
          *(_WORD *)&v77[24] = 2080;
          *(_QWORD *)&v77[26] = v33;
          v78 = 2050;
          v79 = v35;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,InertialOdometry,success,%d,message_type,%s,from,%s,to,%s,propagation_us,%{public}.3f", buf, 0x30u);
          if (v63 < 0)
            operator delete(__p[0]);
          if (v65 < 0)
            operator delete(v64[0]);
          if ((v68[23] & 0x80000000) != 0)
            operator delete(*(void **)v68);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102147FA8);
          v42 = qword_1022A0028;
          sub_10142E09C(&v66, v64);
          if (v65 >= 0)
            v43 = v64;
          else
            v43 = (void **)v64[0];
          v61 = a2->i32[0];
          v44 = __p;
          sub_10142E364(&v61, __p);
          if (v63 < 0)
            v44 = (void **)__p[0];
          v58 = *a3;
          v45 = v59;
          sub_10142E364(&v58, v59);
          if (v60 < 0)
            v45 = (void **)v59[0];
          v46 = sub_100B303DC();
          v47 = sub_100B309E0(v46);
          *(_DWORD *)v68 = 67110146;
          *(_DWORD *)&v68[4] = v29;
          *(_WORD *)&v68[8] = 2080;
          *(_QWORD *)&v68[10] = v43;
          *(_WORD *)&v68[18] = 2080;
          *(_QWORD *)&v68[20] = v44;
          *(_WORD *)&v68[28] = 2080;
          *(_QWORD *)&v68[30] = v45;
          v69 = 2050;
          v70 = v47;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v42, 2, "#locctl,#rec,recordMessage,InertialOdometry,success,%d,message_type,%s,from,%s,to,%s,propagation_us,%{public}.3f", v68, 48);
          v49 = v48;
          if (v60 < 0)
            operator delete(v59[0]);
          if (v63 < 0)
            operator delete(__p[0]);
          if (v65 < 0)
            operator delete(v64[0]);
          sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const CMOdometry *)", "%s\n", v49);
          if (v49 != (char *)buf)
            free(v49);
        }
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102147FA8);
        v36 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v37 = objc_msgSend(a4, "description");
          v38 = sub_100B303DC();
          *(_DWORD *)v68 = 0;
          v39 = sub_100B30608(v38, v68);
          v40 = sub_100B303DC();
          v41 = sub_100B309E0(v40);
          *(_DWORD *)buf = 138543874;
          *(_QWORD *)v77 = v37;
          *(_WORD *)&v77[8] = 2050;
          *(double *)&v77[10] = v39;
          *(_WORD *)&v77[18] = 2050;
          *(double *)&v77[20] = v41;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "#locctl,#rec,#pbio CMOdometry, %{public}@, now, %{public}.3f, propagation_us, %{public}.3f", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102147FA8);
          v50 = qword_1022A0028;
          v51 = objc_msgSend(a4, "description");
          v52 = sub_1005FECEC();
          v53 = sub_100B303DC();
          v54 = sub_100B309E0(v53);
          *(_DWORD *)v68 = 138543874;
          *(_QWORD *)&v68[4] = v51;
          *(_WORD *)&v68[12] = 2050;
          *(double *)&v68[14] = v52;
          *(_WORD *)&v68[22] = 2050;
          *(double *)&v68[24] = v54;
          LODWORD(v57) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v50, 2, "#locctl,#rec,#pbio CMOdometry, %{public}@, now, %{public}.3f, propagation_us, %{public}.3f", v68, v57);
          v56 = (uint8_t *)v55;
          sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const CMOdometry *)", "%s\n", v55);
          if (v56 != buf)
            free(v56);
        }
      }
      sub_100166004(&v71);
    }
  }
}

void sub_1005FEBB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  sub_100166004(&a45);
  _Unwind_Resume(a1);
}

double sub_1005FECEC()
{
  uint64_t v0;
  int v2;

  v0 = sub_100B303DC();
  v2 = 0;
  return sub_100B30608(v0, &v2);
}

void sub_1005FED14(uint64_t a1, int32x4_t *a2, int *a3, int *a4)
{
  uint64_t v6;
  BOOL v7;
  int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  NSObject *v30;
  void *v31;
  void **v32;
  void **v33;
  int v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  void **v38;
  void **v39;
  void **v40;
  int v41;
  uint64_t v42;
  double v43;
  char *v44;
  char *v45;
  int v46;
  void *v47[2];
  char v48;
  int v49;
  void *__p[2];
  char v51;
  void *v52[2];
  char v53;
  int v54;
  __n128 v55[2];
  void *v56;
  __int16 v57;
  void **v58;
  __int16 v59;
  void **v60;
  __int16 v61;
  void **v62;
  __int16 v63;
  int v64;
  __int16 v65;
  double v66;
  uint64_t v67;
  __int16 v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t buf;
  __int16 v73;
  void *v74;
  __int16 v75;
  void **v76;
  __int16 v77;
  void **v78;
  __int16 v79;
  int v80;
  __int16 v81;
  double v82;

  if (*(_QWORD *)(a1 + 16))
  {
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a2))) & 1) != 0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v6 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        if (a2->i32[0])
          v7 = a2->i32[1] == 0;
        else
          v7 = 1;
        v8 = !v7;
        if (*a3)
          v9 = a3[1] == 0;
        else
          v9 = 1;
        v10 = !v9;
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v8;
        v73 = 1024;
        LODWORD(v74) = v10;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v6, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,MapRouteHintNotification,silo entry invalid,from_valid,%d,to_valid,%d", (uint8_t *)&buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102147FA8);
        if (a2->i32[0])
          v11 = a2->i32[1] == 0;
        else
          v11 = 1;
        v12 = !v11;
        if (*a3)
          v13 = a3[1] == 0;
        else
          v13 = 1;
        v14 = !v13;
        LODWORD(v67) = 67109376;
        HIDWORD(v67) = v12;
        v68 = 1024;
        v69 = v14;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,recordMessage,MapRouteHintNotification,silo entry invalid,from_valid,%d,to_valid,%d", &v67, 14);
        v16 = v15;
        sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const CLMapsRouteHintData &)", "%s\n", (const char *)v15);
        if (v16 != &buf)
          free(v16);
      }
    }
    else
    {
      sub_100166054(&v67);
      v19 = sub_100B303DC();
      sub_100B307F4((__n128 *)v19, v55);
      v54 = 4;
      sub_1005EFF80((uint64_t)&v67, (unsigned int *)&v54, a2, a3, (uint64_t *)v55);
      v71 |= 2u;
      v20 = v70;
      if (!v70)
        operator new();
      *(_DWORD *)(v70 + 492) |= 0x800u;
      v21 = *(_QWORD *)(v20 + 352);
      if (!v21)
        operator new();
      *(_DWORD *)(v21 + 184) |= 0x200000u;
      v22 = *(_QWORD *)(v21 + 168);
      if (!v22)
        operator new();
      *(_DWORD *)(v22 + 28) |= 1u;
      *(_DWORD *)(v22 + 8) = -1;
      if (!sub_1002BC6D0(1u))
        __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 9522, "::CLP::LogEntry::PrivateData::MapRouteHintNotification_NotificationType_IsValid(value)");
      v23 = *(_DWORD *)(v22 + 28);
      *(_DWORD *)(v22 + 12) = 1;
      *(_DWORD *)(v22 + 28) = v23 | 6;
      v24 = *(_QWORD *)(v22 + 16);
      if (!v24)
        operator new();
      *(_DWORD *)(v24 + 20) |= 1u;
      v25 = *(_QWORD *)(v24 + 8);
      if (!v25)
        operator new();
      v26 = sub_100B303DC();
      LODWORD(v56) = 0;
      buf = sub_100B30608(v26, &v56);
      v27 = sub_100B303DC();
      LODWORD(v52[0]) = 1;
      v56 = COERCE_VOID_(sub_100B30608(v27, v52));
      sub_1013775B0((uint64_t)a4, v25, &buf, (double *)&v56);
      v28 = sub_1005EF67C(a1, (uint64_t)&v67);
      if (*(_BYTE *)(a1 + 8))
      {
        v29 = v28;
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102147FA8);
        v30 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          sub_10142E09C(&v54, &v56);
          if (SBYTE3(v60) >= 0)
            v31 = &v56;
          else
            v31 = v56;
          LODWORD(v47[0]) = a2->i32[0];
          sub_10142E364((int *)v47, v52);
          if (v53 >= 0)
            v32 = v52;
          else
            v32 = (void **)v52[0];
          v49 = *a3;
          sub_10142E364(&v49, __p);
          if (v51 >= 0)
            v33 = __p;
          else
            v33 = (void **)__p[0];
          v34 = *a4;
          v35 = sub_100B303DC();
          v36 = sub_100B309E0(v35);
          LODWORD(buf) = 67110402;
          HIDWORD(buf) = v29;
          v73 = 2080;
          v74 = v31;
          v75 = 2080;
          v76 = v32;
          v77 = 2080;
          v78 = v33;
          v79 = 1024;
          v80 = v34;
          v81 = 2050;
          v82 = v36;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,MapRouteHintNotification,success,%d,message_type,%s,from,%s,to,%s,routeType,%d,propagation_us,%{public}.3f", (uint8_t *)&buf, 0x36u);
          if (v51 < 0)
            operator delete(__p[0]);
          if (v53 < 0)
            operator delete(v52[0]);
          if (SBYTE3(v60) < 0)
            operator delete(v56);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102147FA8);
          v37 = qword_1022A0028;
          v38 = v52;
          sub_10142E09C(&v54, v52);
          if (v53 < 0)
            v38 = (void **)v52[0];
          v49 = a2->i32[0];
          v39 = __p;
          sub_10142E364(&v49, __p);
          if (v51 < 0)
            v39 = (void **)__p[0];
          v46 = *a3;
          sub_10142E364(&v46, v47);
          if (v48 >= 0)
            v40 = v47;
          else
            v40 = (void **)v47[0];
          v41 = *a4;
          v42 = sub_100B303DC();
          v43 = sub_100B309E0(v42);
          LODWORD(v56) = 67110402;
          HIDWORD(v56) = v29;
          v57 = 2080;
          v58 = v38;
          v59 = 2080;
          v60 = v39;
          v61 = 2080;
          v62 = v40;
          v63 = 1024;
          v64 = v41;
          v65 = 2050;
          v66 = v43;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v37, 2, "#locctl,#rec,recordMessage,MapRouteHintNotification,success,%d,message_type,%s,from,%s,to,%s,routeType,%d,propagation_us,%{public}.3f", &v56, 54);
          v45 = v44;
          if (v48 < 0)
            operator delete(v47[0]);
          if (v51 < 0)
            operator delete(__p[0]);
          if (v53 < 0)
            operator delete(v52[0]);
          sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const CLMapsRouteHintData &)", "%s\n", v45);
          if (v45 != (char *)&buf)
            free(v45);
        }
      }
      sub_100166004(&v67);
    }
  }
}

void sub_1005FF468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_100166004(&a47);
  _Unwind_Resume(a1);
}

uint64_t sub_1005FF5A8(unsigned int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  int v5;
  char *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  result = *a1;
  if (result >= 5)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v3 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v4 = *a1;
      *(_DWORD *)buf = 67109120;
      v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#locctl,#rec,convertMessageTypeToProtobuf,type should never be max,%d", buf, 8u);
    }
    result = sub_1001BFF7C(115, 2);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v5 = *a1;
      v7[0] = 67109120;
      v7[1] = v5;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,convertMessageTypeToProtobuf,type should never be max,%d", v7);
      sub_100512490("Generic", 1, 0, 2, "static CLP::LogEntry::PrivateData::MessageType CLLocationControllerRecorder::convertMessageTypeToProtobuf(const CLLocationControllerRecorder_Types::MessageType &)", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
      return 0;
    }
  }
  return result;
}

void sub_1005FF768(_DWORD *a1, _DWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  NSObject *v6;
  char *v7;
  _WORD v8[8];
  uint8_t buf[4];

  if (a2)
  {
    *(_DWORD *)buf = *a1;
    v4 = sub_1005FF95C((unsigned int *)buf);
    if (!sub_100E8F82C(v4))
      sub_101901A80();
    a2[5] |= 1u;
    a2[2] = v4;
    *(_DWORD *)buf = a1[1];
    v5 = sub_1005FFB1C((unsigned int *)buf);
    if (!sub_10002A324(v5))
      sub_101901A58();
    a2[5] |= 2u;
    a2[3] = v5;
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v6 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#locctl,#rec,failed to set log entry silo", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v8[0] = 0;
      v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,failed to set log entry silo", v8, 2);
      sub_100512490("Generic", 1, 0, 2, "static void CLLocationControllerRecorder::setLocationControllerLogEntrySilo(const CLLocationControllerRecorder_Types::Silo &, CLP::LogEntry::PrivateData::Silo *)", "%s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
    }
  }
}

uint64_t sub_1005FF95C(unsigned int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  int v5;
  char *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  result = *a1;
  if (result >= 0x1B)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v3 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v4 = *a1;
      *(_DWORD *)buf = 67109120;
      v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#locctl,#rec,convertServiceTypeToProtobuf,type should never be max,%d", buf, 8u);
    }
    result = sub_1001BFF7C(115, 2);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v5 = *a1;
      v7[0] = 67109120;
      v7[1] = v5;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,convertServiceTypeToProtobuf,type should never be max,%d", v7);
      sub_100512490("Generic", 1, 0, 2, "static CLP::LogEntry::PrivateData::ServiceType CLLocationControllerRecorder::convertServiceTypeToProtobuf(const CLLocationControllerRecorder_Types::ServiceType &)", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1005FFB1C(unsigned int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  int v5;
  char *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  result = *a1;
  if (result >= 4)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v3 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v4 = *a1;
      *(_DWORD *)buf = 67109120;
      v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#locctl,#rec,convertSiloTypeToProtobuf,type should never be max,%d", buf, 8u);
    }
    result = sub_1001BFF7C(115, 2);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v5 = *a1;
      v7[0] = 67109120;
      v7[1] = v5;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,convertSiloTypeToProtobuf,type should never be max,%d", v7);
      sub_100512490("Generic", 1, 0, 2, "static CLP::LogEntry::PrivateData::Silo_Type CLLocationControllerRecorder::convertSiloTypeToProtobuf(const CLLocationControllerRecorder_Types::SiloType &)", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1005FFCDC(uint64_t result, int a2, char a3)
{
  *(_QWORD *)result = 0;
  *(_BYTE *)(result + 8) = a3;
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0xBFF0000000000000;
  if (a2)
    operator new();
  return result;
}

void sub_1005FFD50()
{
  operator delete();
}

void sub_1005FFDAC(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_1005FFDD8()
{
  operator new();
}

void sub_1005FFE14()
{
  operator delete();
}

uint64_t *sub_1005FFE38(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1005FFE8C(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1005FFE74(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1005FFE8C(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_1005FFF10(v5, v6, v4 + 7, v4 + 7);
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1005FFF10(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = sub_1005FFF94(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    sub_1000145B0(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_1005FFF94(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_10060013C()
{
  operator new();
}

void sub_100600178()
{
  operator delete();
}

void sub_10060019C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    v3 = a2[2];
    a2[2] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *a2;
    *a2 = 0;
    if (v4)
      sub_1004BAB48((uint64_t)a2, v4);
    operator delete();
  }
}

void sub_100600200()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101BB7980;
      v1[3] = unk_101BB7990;
      v1[4] = xmmword_101BB79A0;
      v1[0] = xmmword_101BB7960;
      v1[1] = unk_101BB7970;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_1006002D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

void sub_10060058C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;

  sub_1006005B8((uint64_t)&a12);
  *(_QWORD *)(v12 - 40) = &a9;
  sub_100356DFC((void ***)(v12 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_1006005B8(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  sub_100356DFC(&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100600A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  _Unwind_Resume(exception_object);
}

char *sub_100600CA0(char *__dst, __int128 *a2, uint64_t a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  *((_QWORD *)__dst + 3) = 0;
  *((_QWORD *)__dst + 4) = 0;
  *((_QWORD *)__dst + 5) = 0;
  *(_OWORD *)(__dst + 24) = *(_OWORD *)a3;
  *((_QWORD *)__dst + 5) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return __dst;
}

void sub_100600D10(id a1)
{
  qword_1022A0278 = (uint64_t)os_log_create("com.apple.locationd.Core", "PeopleDensity");
}

uint64_t sub_100600D3C(uint64_t a1)
{
  void *v2;

  sub_100600D74(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_100600D74(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_100600DB0((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_100600DB0(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  sub_100356DFC(&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_100600DF4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  sub_100600E94(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void sub_100600E94(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_100600D74(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

unsigned __int8 *sub_100600EE8(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  char *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[2];
  char v27;

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (char *)operator new(0x40uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v9;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  *((_QWORD *)v16 + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a3 + 24);
  *((_QWORD *)v16 + 7) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  v27 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_10012E444(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10)
          v24 %= v10;
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v7;
  sub_100601194((uint64_t)v26, 0);
  return i;
}

void sub_10060117C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100601194((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_100601194(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100600DB0((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t sub_1006011D8(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)sub_100357184(v7, v9);
  else
    v10 = 0;
  v11 = &v10[40 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[40 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(v11, *(void **)a2, *((_QWORD *)a2 + 1));
    v11 = v16;
  }
  else
  {
    v12 = *a2;
    *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v11 = v12;
  }
  *(_OWORD *)&v10[40 * v4 + 24] = *(__int128 *)((char *)a2 + 24);
  v16 = v11 + 40;
  sub_100601308(a1, v15);
  v13 = a1[1];
  sub_1003572E8((uint64_t)v15);
  return v13;
}

void sub_1006012F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1003572E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100601308(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10060137C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10060137C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 40);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 - 24);
      *(_OWORD *)(v7 - 40) = v8;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 - 16);
      v7 = *((_QWORD *)&v14 + 1) - 40;
      *((_QWORD *)&v14 + 1) -= 40;
      a3 -= 40;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_100601424((uint64_t)v11);
  return v9;
}

uint64_t sub_100601424(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1003572A4(a1);
  return a1;
}

void sub_100601458(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v8;

  *(_QWORD *)a1 = off_102147FF8;
  sub_10055D44C(a1 + 8, "CLFileUpdate", 1, 1);
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = a4;
  *(_QWORD *)(a1 + 48) = 0;
  v8 = objc_msgSend(objc_msgSend(a2, "silo"), "newTimer");
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 56) = v8;
  *(_DWORD *)(a1 + 64) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 72) = _Q1;
  *(_OWORD *)(a1 + 88) = _Q1;
  *(_OWORD *)(a1 + 104) = _Q1;
  *(_BYTE *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_WORD *)(a1 + 240) = 0;
  objc_msgSend(*(id *)(a1 + 24), "silo");
  objc_msgSend(*(id *)(a1 + 24), "silo");
  operator new();
}

void sub_1006017C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v1 + 232);
  *(_QWORD *)(v1 + 232) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(v1 + 224);
  *(_QWORD *)(v1 + 224) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (*(char *)(v1 + 223) < 0)
    operator delete(*(void **)(v1 + 200));
  if (*(char *)(v1 + 199) < 0)
    operator delete(*(void **)(v1 + 176));
  if (*(char *)(v1 + 175) < 0)
    operator delete(*(void **)(v1 + 152));
  if (*(char *)(v1 + 151) < 0)
    operator delete(*v3);
  v7 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_10055D4D0(v2);
  _Unwind_Resume(a1);
}

void sub_1006018A0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  os_activity_scope_state_s state;
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;

  CLProfilingIdentify("CLFileUpdate::onDownloaded");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 24), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102148040);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v9 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFileUpdate::onDownloaded", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102148040);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "activity";
      v16 = 2050;
      v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFileUpdate::onDownloaded\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v9 = 0;
  }
  sub_100603BE8(a3, v5, a2);
  if (v9)
    os_activity_scope_leave(&state);
}

void sub_100601A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100601A70(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  NSObject *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;
  uint64_t v10;
  NSObject *v11;
  _QWORD *v12;
  _QWORD *v13;
  NSObject *v14;
  _QWORD *v15;
  uint64_t result;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  _QWORD *v21;
  const char *v22;
  uint8_t *v23;
  int v24;
  _QWORD *v25;
  __int16 v26;
  _QWORD *v27;
  uint8_t buf[4];
  _QWORD *v29;
  __int16 v30;
  _QWORD *v31;

  v1 = *(_QWORD *)(a1 + 32);
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 8) + 16))(v1 + 8);
  sub_100197040();
  if (sub_100195F08() && *(_BYTE *)(v1 + 240) && *(_BYTE *)(v1 + 241)
    || objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(v1 + 24), "vendor"), "proxyForService:", CFSTR("CLDaemonStatus")), "syncgetReachability"))
  {
    v2 = (_QWORD *)(v1 + 152);
    v3 = (_QWORD *)(v1 + 152);
    if (*(char *)(v1 + 175) < 0)
      v3 = (_QWORD *)*v2;
    v4 = (_QWORD *)(v1 + 200);
    v5 = (_QWORD *)(v1 + 200);
    if (*(char *)(v1 + 223) < 0)
      v5 = (_QWORD *)*v4;
    if ((*(unsigned int (**)(_QWORD, _QWORD *, _QWORD *, uint64_t))(**(_QWORD **)(v1 + 48) + 16))(*(_QWORD *)(v1 + 48), v3, v5, v1 + 72))
    {
      if (qword_1022A0290 != -1)
        dispatch_once(&qword_1022A0290, &stru_102148060);
      v6 = qword_1022A0298;
      if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_DEFAULT))
      {
        v7 = (_QWORD *)(v1 + 152);
        if (*(char *)(v1 + 175) < 0)
          v7 = (_QWORD *)*v2;
        v8 = (_QWORD *)(v1 + 200);
        if (*(char *)(v1 + 223) < 0)
          v8 = (_QWORD *)*v4;
        *(_DWORD *)buf = 136446466;
        v29 = v7;
        v30 = 2082;
        v31 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLFU,downloading from %{public}s to %{public}s", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0290 != -1)
          dispatch_once(&qword_1022A0290, &stru_102148060);
        if (*(char *)(v1 + 175) < 0)
          v2 = (_QWORD *)*v2;
        if (*(char *)(v1 + 223) < 0)
          v4 = (_QWORD *)*v4;
        v24 = 136446466;
        v25 = v2;
        v26 = 2082;
        v27 = v4;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0298, 0, "CLFU,downloading from %{public}s to %{public}s", &v24, 22);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "CLFileUpdate::CLFileUpdate(id<CLIntersiloUniverse>, OnUpdated, void *)_block_invoke", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
      *(_BYTE *)(v1 + 120) = 1;
      v9 = 0;
      *(CFAbsoluteTime *)(v1 + 104) = CFAbsoluteTimeGetCurrent();
      v10 = 1;
    }
    else
    {
      if (qword_1022A0290 != -1)
        dispatch_once(&qword_1022A0290, &stru_102148060);
      v11 = qword_1022A0298;
      if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_DEFAULT))
      {
        v12 = (_QWORD *)(v1 + 152);
        if (*(char *)(v1 + 175) < 0)
          v12 = (_QWORD *)*v2;
        v13 = (_QWORD *)(v1 + 200);
        if (*(char *)(v1 + 223) < 0)
          v13 = (_QWORD *)*v4;
        *(_DWORD *)buf = 136446466;
        v29 = v12;
        v30 = 2082;
        v31 = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning,CLFU,could not download from %{public}s to %{public}s", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0290 != -1)
          dispatch_once(&qword_1022A0290, &stru_102148060);
        if (*(char *)(v1 + 175) < 0)
          v2 = (_QWORD *)*v2;
        if (*(char *)(v1 + 223) < 0)
          v4 = (_QWORD *)*v4;
        v24 = 136446466;
        v25 = v2;
        v26 = 2082;
        v27 = v4;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0298, 0, "#Warning,CLFU,could not download from %{public}s to %{public}s", &v24, 22);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 2, "CLFileUpdate::CLFileUpdate(id<CLIntersiloUniverse>, OnUpdated, void *)_block_invoke", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
      v9 = 0;
      v10 = 3;
    }
  }
  else
  {
    if (qword_1022A0290 != -1)
      dispatch_once(&qword_1022A0290, &stru_102148060);
    v14 = qword_1022A0298;
    if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_DEFAULT))
    {
      v15 = (_QWORD *)(v1 + 152);
      if (*(char *)(v1 + 175) < 0)
        v15 = (_QWORD *)*v15;
      *(_DWORD *)buf = 136446210;
      v29 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "CLFU,data reachability is not available - not downloading %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0290 != -1)
        dispatch_once(&qword_1022A0290, &stru_102148060);
      v21 = (_QWORD *)(v1 + 152);
      if (*(char *)(v1 + 175) < 0)
        v21 = (_QWORD *)*v21;
      v24 = 136446210;
      v25 = v21;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0298, 0, "CLFU,data reachability is not available - not downloading %{public}s", &v24, 12);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "CLFileUpdate::CLFileUpdate(id<CLIntersiloUniverse>, OnUpdated, void *)_block_invoke", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
    v10 = 0;
    v9 = 1;
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 8) + 24))(v1 + 8);
  if ((v9 & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v1 + 32))(v1, v10, *(_QWORD *)(v1 + 40));
  return result;
}

void sub_10060204C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100602088(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLFileUpdate::onStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 24), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102148040);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFileUpdate::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102148040);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFileUpdate::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100603734(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100602240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100602260(uint64_t a1, int *a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLFileUpdate::onCompanionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 24), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102148040);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFileUpdate::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102148040);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFileUpdate::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100602530(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100602418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10060243C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_102147FF8;
  sub_100605848(a1);

  v2 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  if (*(char *)(a1 + 199) < 0)
    operator delete(*(void **)(a1 + 176));
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_10055D4D0(a1 + 8);
  return a1;
}

void sub_10060250C(uint64_t a1)
{
  sub_10060243C(a1);
  operator delete();
}

uint64_t sub_100602530(uint64_t a1, uint64_t a2, int *a3, _BYTE *a4)
{
  uint64_t v7;
  NSObject *v8;
  int v9;
  NSObject *v10;
  int v11;
  _QWORD *v12;
  int v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  _QWORD *v18;
  const char *v19;
  uint8_t *v20;
  int v21;
  int v22;
  __int16 v23;
  _QWORD *v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  _QWORD *v28;

  v7 = a1 + 8;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 16))(a1 + 8);
  if (qword_1022A0290 != -1)
    dispatch_once(&qword_1022A0290, &stru_102148060);
  v8 = qword_1022A0298;
  if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_DEBUG))
  {
    v9 = *a3;
    *(_DWORD *)buf = 67109120;
    v26 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLFU,onCompanionNotification, notification, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0290 != -1)
      dispatch_once(&qword_1022A0290, &stru_102148060);
    v14 = *a3;
    v21 = 67109120;
    v22 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0298, 2, "CLFU,onCompanionNotification, notification, %d", &v21);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLFileUpdate::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  if (*a3 == 5)
  {
    sub_100197040();
    if (sub_100195F08())
    {
      *(_BYTE *)(a1 + 241) = *a4;
      if (qword_1022A0290 != -1)
        dispatch_once(&qword_1022A0290, &stru_102148060);
      v10 = qword_1022A0298;
      if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_DEBUG))
      {
        v11 = *(unsigned __int8 *)(a1 + 241);
        v12 = (_QWORD *)(a1 + 176);
        if (*(char *)(a1 + 199) < 0)
          v12 = (_QWORD *)*v12;
        *(_DWORD *)buf = 67240450;
        v26 = v11;
        v27 = 2082;
        v28 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLFU,fCompanionIsNearby,%{public}d,fDownloadDst,%{public}s", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0290 != -1)
          dispatch_once(&qword_1022A0290, &stru_102148060);
        v17 = *(unsigned __int8 *)(a1 + 241);
        v18 = (_QWORD *)(a1 + 176);
        if (*(char *)(a1 + 199) < 0)
          v18 = (_QWORD *)*v18;
        v21 = 67240450;
        v22 = v17;
        v23 = 2082;
        v24 = v18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0298, 2, "CLFU,fCompanionIsNearby,%{public}d,fDownloadDst,%{public}s", &v21, 18);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 2, "void CLFileUpdate::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
      if (*(_BYTE *)(a1 + 241))
        sub_100602904(a1);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
}

void sub_1006028D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100602904(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  const char *v4;
  NSObject *v5;
  int v6;
  const char *v7;
  const char *v8;
  double v9;
  double *v10;
  NSObject *v11;
  char *v12;
  NSObject *v13;
  const char *v14;
  double v15;
  double v16;
  double Current;
  double v18;
  double v19;
  NSObject *v20;
  const char *v21;
  const char *v22;
  char *v23;
  NSObject *v24;
  const char *v25;
  NSObject *v26;
  const char *v27;
  double v28;
  NSObject *v29;
  const char *v30;
  double v31;
  double v32;
  NSObject *v33;
  const char *v34;
  const char *v36;
  double v37;
  char *v38;
  uint64_t v39;
  int v40;
  const char *v41;
  const char *v42;
  double v43;
  char *v44;
  char *v45;
  const char *v46;
  const char *v47;
  double v48;
  char *v49;
  const char *v50;
  char *v51;
  uint64_t v52;
  double v53[3];
  __int16 v54;
  int v55;
  const char *v56;
  __int16 v57;
  double v58;
  __int16 v59;
  double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  double v64;
  uint8_t buf[4];
  const char *v66;
  __int16 v67;
  double v68;
  __int16 v69;
  double v70;
  __int16 v71;
  double v72;
  __int16 v73;
  double v74;

  v3 = (char *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)&v53[1] = a1 + 8;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 8);
  v54 = 256;
  if (v3[167] < 0)
  {
    if (*(_QWORD *)(a1 + 160))
    {
LABEL_3:
      if (!sub_1006037CC(a1))
        return (*(uint64_t (**)(char *))(*(_QWORD *)v3 + 24))(v3);
      v4 = v3 + 144;
      if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLDaemonStatus")), "syncgetReachability") == 2)
      {
        if (qword_1022A0290 != -1)
          dispatch_once(&qword_1022A0290, &stru_102148060);
        v5 = qword_1022A0298;
        if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_DEFAULT))
        {
          sub_100197040();
          v6 = sub_100195F08();
          v7 = "(WiFi)";
          if (v6)
            v7 = "(WiFi or companion nearby)";
          v8 = v3 + 144;
          if (*(char *)(a1 + 175) < 0)
            v8 = *(const char **)v4;
          v9 = *(double *)(a1 + 88);
          *(_DWORD *)buf = 136446722;
          v66 = v7;
          v67 = 2082;
          v68 = *(double *)&v8;
          v69 = 2050;
          v70 = v9;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLFU,we are now on large reachability %{public}s, scheduling a download for %{public}s (period %{public}.3f)", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0290 != -1)
            dispatch_once(&qword_1022A0290, &stru_102148060);
          v39 = qword_1022A0298;
          sub_100197040();
          v40 = sub_100195F08();
          v41 = "(WiFi)";
          if (v40)
            v41 = "(WiFi or companion nearby)";
          v42 = v3 + 144;
          if (*(char *)(a1 + 175) < 0)
            v42 = *(const char **)v4;
          v43 = *(double *)(a1 + 88);
          v55 = 136446722;
          v56 = v41;
          v57 = 2082;
          v58 = *(double *)&v42;
          v59 = 2050;
          v60 = v43;
          v44 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v39, 0, "CLFU,we are now on large reachability %{public}s, scheduling a download for %{public}s (period %{public}.3f)", &v55, 32);
          sub_100512490("Generic", 1, 0, 2, "void CLFileUpdate::scheduleDownload()", "%s\n", v44);
          if (v44 != (char *)buf)
            free(v44);
        }
        v10 = (double *)(a1 + 88);
      }
      else
      {
        if (qword_1022A0290 != -1)
          dispatch_once(&qword_1022A0290, &stru_102148060);
        v13 = qword_1022A0298;
        if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_DEFAULT))
        {
          v14 = v3 + 144;
          if (*(char *)(a1 + 175) < 0)
            v14 = *(const char **)v4;
          v15 = *(double *)(a1 + 80);
          *(_DWORD *)buf = 136446466;
          v66 = v14;
          v67 = 2050;
          v68 = v15;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "CLFU,we are now on short reachability (Cell), scheduling a download for %{public}s (period %{public}.3f)", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0290 != -1)
            dispatch_once(&qword_1022A0290, &stru_102148060);
          v36 = v3 + 144;
          if (*(char *)(a1 + 175) < 0)
            v36 = *(const char **)v4;
          v37 = *(double *)(a1 + 80);
          v55 = 136446466;
          v56 = v36;
          v57 = 2050;
          v58 = v37;
          v38 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0298, 0, "CLFU,we are now on short reachability (Cell), scheduling a download for %{public}s (period %{public}.3f)", &v55, 22);
          sub_100512490("Generic", 1, 0, 2, "void CLFileUpdate::scheduleDownload()", "%s\n", v38);
          if (v38 != (char *)buf)
            free(v38);
        }
        v10 = (double *)(a1 + 80);
      }
      v16 = *v10;
      v53[0] = -1.0;
      Current = CFAbsoluteTimeGetCurrent();
      v18 = -1.0;
      if (v16 <= 0.0)
        goto LABEL_73;
      if (sub_100603B30(a1, v53))
      {
        v19 = v53[0];
        if (v53[0] >= Current - v16)
        {
          if (qword_1022A0290 != -1)
            dispatch_once(&qword_1022A0290, &stru_102148060);
          v18 = v16 + v19;
          v26 = qword_1022A0298;
          if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_DEFAULT))
          {
            v27 = v3 + 144;
            if (*(char *)(a1 + 175) < 0)
              v27 = *(const char **)v4;
            *(_DWORD *)buf = 136447234;
            v66 = v27;
            v67 = 2050;
            v68 = v16;
            v69 = 2050;
            v70 = v53[0];
            v71 = 2050;
            v72 = v18;
            v73 = 2050;
            v74 = v18 - Current;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "CLFU,last %{public}s downloaded less than %{public}.3f seconds ago (%{public}.3f), scheduling download for %{public}.3f (%{public}.3f away)", buf, 0x34u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0290 != -1)
              dispatch_once(&qword_1022A0290, &stru_102148060);
            v50 = v3 + 144;
            if (*(char *)(a1 + 175) < 0)
              v50 = *(const char **)v4;
            v55 = 136447234;
            v56 = v50;
            v57 = 2050;
            v58 = v16;
            v59 = 2050;
            v60 = v53[0];
            v61 = 2050;
            v62 = v18;
            v63 = 2050;
            v64 = v18 - Current;
            LODWORD(v52) = 52;
            v51 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0298, 0, "CLFU,last %{public}s downloaded less than %{public}.3f seconds ago (%{public}.3f), scheduling download for %{public}.3f (%{public}.3f away)", &v55, v52);
            sub_100512490("Generic", 1, 0, 2, "void CLFileUpdate::scheduleDownload()", "%s\n", v51);
            if (v51 != (char *)buf)
              free(v51);
          }
          goto LABEL_63;
        }
        if (qword_1022A0290 != -1)
          dispatch_once(&qword_1022A0290, &stru_102148060);
        v20 = qword_1022A0298;
        if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_DEFAULT))
        {
          v21 = v3 + 144;
          if (*(char *)(a1 + 175) < 0)
            v21 = *(const char **)v4;
          *(_DWORD *)buf = 136446722;
          v66 = v21;
          v67 = 2050;
          v68 = v16;
          v69 = 2050;
          v70 = v53[0];
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "CLFU,last %{public}s downloaded over %{public}.3f seconds ago (%{public}.3f), starting a download now", buf, 0x20u);
        }
        if (!sub_1001BFF7C(115, 2))
        {
LABEL_55:
          v18 = Current;
LABEL_63:
          v28 = *(double *)(a1 + 96);
          if (v28 >= 0.0 && v28 < v18)
          {
            if (qword_1022A0290 != -1)
              dispatch_once(&qword_1022A0290, &stru_102148060);
            v29 = qword_1022A0298;
            if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_DEFAULT))
            {
              v30 = v3 + 144;
              if (*(char *)(a1 + 175) < 0)
                v30 = *(const char **)v4;
              v31 = *(double *)(a1 + 96);
              *(_DWORD *)buf = 136446722;
              v66 = v30;
              v67 = 2050;
              v68 = v31;
              v69 = 2050;
              v70 = v28 - v31;
              _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "CLFU,scheduled download %{public}s is after %{public}.3f deadline (%{public}.3f after) - overriding", buf, 0x20u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0290 != -1)
                dispatch_once(&qword_1022A0290, &stru_102148060);
              v47 = v3 + 144;
              if (*(char *)(a1 + 175) < 0)
                v47 = *(const char **)v4;
              v48 = *(double *)(a1 + 96);
              v55 = 136446722;
              v56 = v47;
              v57 = 2050;
              v58 = v48;
              v59 = 2050;
              v60 = v28 - v48;
              LODWORD(v52) = 32;
              v49 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0298, 0, "CLFU,scheduled download %{public}s is after %{public}.3f deadline (%{public}.3f after) - overriding", &v55, v52);
              sub_100512490("Generic", 1, 0, 2, "void CLFileUpdate::scheduleDownload()", "%s\n", v49);
              if (v49 != (char *)buf)
                free(v49);
            }
            v18 = v28;
          }
LABEL_73:
          v32 = *(double *)(a1 + 112);
          if (v32 > 0.0 && v32 > v18)
          {
            if (qword_1022A0290 != -1)
              dispatch_once(&qword_1022A0290, &stru_102148060);
            v33 = qword_1022A0298;
            if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_DEFAULT))
            {
              v34 = v3 + 144;
              if (*(char *)(a1 + 175) < 0)
                v34 = *(const char **)v4;
              *(_DWORD *)buf = 136446722;
              v66 = v34;
              v67 = 2050;
              v68 = v32;
              v69 = 2050;
              v70 = v32 - Current;
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "CLFU,Throttling download %{public}s due to retry delay, scheduling download for %{public}.3f (%{public}.3f away)", buf, 0x20u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0290 != -1)
                dispatch_once(&qword_1022A0290, &stru_102148060);
              if (*(char *)(a1 + 175) < 0)
                v4 = *(const char **)v4;
              v55 = 136446722;
              v56 = v4;
              v57 = 2050;
              v58 = v32;
              v59 = 2050;
              v60 = v32 - Current;
              LODWORD(v52) = 32;
              v45 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0298, 0, "CLFU,Throttling download %{public}s due to retry delay, scheduling download for %{public}.3f (%{public}.3f away)", &v55, v52);
              sub_100512490("Generic", 1, 0, 2, "void CLFileUpdate::scheduleDownload()", "%s\n", v45);
              if (v45 != (char *)buf)
                free(v45);
            }
            v18 = v32;
          }
          if (v18 > 0.0)
            objc_msgSend(*(id *)(a1 + 56), "setNextFireTime:", v18);
          return (*(uint64_t (**)(char *))(*(_QWORD *)v3 + 24))(v3);
        }
        bzero(buf, 0x65CuLL);
        if (qword_1022A0290 != -1)
          dispatch_once(&qword_1022A0290, &stru_102148060);
        v22 = v3 + 144;
        if (*(char *)(a1 + 175) < 0)
          v22 = *(const char **)v4;
        v55 = 136446722;
        v56 = v22;
        v57 = 2050;
        v58 = v16;
        v59 = 2050;
        v60 = v53[0];
        LODWORD(v52) = 32;
        v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0298, 0, "CLFU,last %{public}s downloaded over %{public}.3f seconds ago (%{public}.3f), starting a download now", &v55, v52);
        sub_100512490("Generic", 1, 0, 2, "void CLFileUpdate::scheduleDownload()", "%s\n", v23);
      }
      else
      {
        if (qword_1022A0290 != -1)
          dispatch_once(&qword_1022A0290, &stru_102148060);
        v24 = qword_1022A0298;
        if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_DEFAULT))
        {
          v25 = (const char *)(a1 + 176);
          if (*(char *)(a1 + 199) < 0)
            v25 = *(const char **)v25;
          *(_DWORD *)buf = 136446210;
          v66 = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "CLFU,cannot verify existence of %{public}s, attempting to re-download now", buf, 0xCu);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_55;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0290 != -1)
          dispatch_once(&qword_1022A0290, &stru_102148060);
        v46 = (const char *)(a1 + 176);
        if (*(char *)(a1 + 199) < 0)
          v46 = *(const char **)v46;
        v55 = 136446210;
        v56 = v46;
        LODWORD(v52) = 12;
        v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0298, 0, "CLFU,cannot verify existence of %{public}s, attempting to re-download now", &v55, v52);
        sub_100512490("Generic", 1, 0, 2, "void CLFileUpdate::scheduleDownload()", "%s\n", v23);
      }
      if (v23 != (char *)buf)
        free(v23);
      goto LABEL_55;
    }
  }
  else if (v3[167])
  {
    goto LABEL_3;
  }
  if (qword_1022A0290 != -1)
    dispatch_once(&qword_1022A0290, &stru_102148060);
  v11 = qword_1022A0298;
  if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "CLFU,no download source set - not downloading", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0290 != -1)
      dispatch_once(&qword_1022A0290, &stru_102148060);
    LOWORD(v55) = 0;
    v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0298, 0, "CLFU,no download source set - not downloading", &v55, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLFileUpdate::scheduleDownload()", "%s\n", v12);
    if (v12 != (char *)buf)
      free(v12);
  }
  return (*(uint64_t (**)(char *))(*(_QWORD *)v3 + 24))(v3);
}

void sub_1006036E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100603734(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a1 + 8;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 16))(a1 + 8);
  if (*a3 == 6 && *(_DWORD *)(a4 + 4) != 0)
    sub_100602904(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
}

void sub_1006037B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1006037CC(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _BOOL8 result;
  _QWORD *v5;
  char *v6;
  NSObject *v7;
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  int v11;
  _QWORD *v12;
  uint8_t buf[4];
  _QWORD *v14;

  if (!*(_BYTE *)(a1 + 120))
    return 1;
  if (vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 104)) > *(double *)(a1 + 72))
  {
    if (qword_1022A0290 != -1)
      dispatch_once(&qword_1022A0290, &stru_102148060);
    v7 = qword_1022A0298;
    if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_DEFAULT))
    {
      v8 = (_QWORD *)(a1 + 152);
      if (*(char *)(a1 + 175) < 0)
        v8 = (_QWORD *)*v8;
      *(_DWORD *)buf = 136446210;
      v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLFU,current download of %{public}s has timed out, canceling", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0290 != -1)
        dispatch_once(&qword_1022A0290, &stru_102148060);
      v9 = (_QWORD *)(a1 + 152);
      if (*(char *)(a1 + 175) < 0)
        v9 = (_QWORD *)*v9;
      v11 = 136446210;
      v12 = v9;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0298, 0, "CLFU,current download of %{public}s has timed out, canceling", &v11, 12);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLFileUpdate::checkForDownloadTimeout()", "%s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48));
    *(_BYTE *)(a1 + 120) = 0;
    return 1;
  }
  if (qword_1022A0290 != -1)
    dispatch_once(&qword_1022A0290, &stru_102148060);
  v2 = qword_1022A0298;
  if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_DEBUG))
  {
    v3 = (_QWORD *)(a1 + 152);
    if (*(char *)(a1 + 175) < 0)
      v3 = (_QWORD *)*v3;
    *(_DWORD *)buf = 136446210;
    v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLFU,download of %{public}s not yet timed out. Blocking current download request", buf, 0xCu);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0290 != -1)
      dispatch_once(&qword_1022A0290, &stru_102148060);
    v5 = (_QWORD *)(a1 + 152);
    if (*(char *)(a1 + 175) < 0)
      v5 = (_QWORD *)*v5;
    v11 = 136446210;
    v12 = v5;
    v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0298, 2, "CLFU,download of %{public}s not yet timed out. Blocking current download request", &v11, 12);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLFileUpdate::checkForDownloadTimeout()", "%s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
    return 0;
  }
  return result;
}

uint64_t sub_100603B30(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  double v10[3];
  __int16 v11;

  v5 = a1 + 8;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)&v10[1] = a1 + 8;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 8);
  v11 = 256;
  if (sub_100604AAC(a1, v10))
  {
    v6 = sub_1001FD94C();
    v7 = (const char *)(a1 + 128);
    if (*(char *)(a1 + 151) < 0)
      v7 = *(const char **)v7;
    v8 = sub_1001FD98C(v6, v7, a2);
  }
  else
  {
    v8 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  return v8;
}

void sub_100603BD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100603BE8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  _BYTE *v6;
  std::error_code *v7;
  const std::__fs::filesystem::path **v8;
  const std::__fs::filesystem::path *v9;
  const std::__fs::filesystem::path **v10;
  const std::__fs::filesystem::path *v11;
  int v12;
  int v13;
  NSObject *v14;
  const std::__fs::filesystem::path *v15;
  const std::__fs::filesystem::path *v16;
  uint64_t v17;
  NSObject *v18;
  _QWORD *v19;
  _QWORD *v20;
  unsigned int v21;
  double Current;
  double v23;
  double v24;
  NSObject *v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  NSObject *v29;
  int v30;
  _QWORD *v31;
  NSObject *v32;
  const std::__fs::filesystem::path *v33;
  NSObject *v34;
  const std::__fs::filesystem::path *v35;
  const std::__fs::filesystem::path *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  NSObject *v40;
  _QWORD *v41;
  NSObject *v42;
  const std::__fs::filesystem::path *v43;
  _QWORD *v45;
  _QWORD *v46;
  const char *v47;
  uint8_t *v48;
  const char *v49;
  uint8_t *v50;
  int v51;
  _QWORD *v52;
  const char *v53;
  uint8_t *v54;
  const std::__fs::filesystem::path *v55;
  const char *v56;
  uint8_t *v57;
  _QWORD *v58;
  const char *v59;
  uint8_t *v60;
  const char *v61;
  uint8_t *v62;
  const char *v63;
  uint8_t *v64;
  int v65;
  uint64_t v66;
  _QWORD *v67;
  const char *v68;
  uint8_t *v69;
  uint64_t v70;
  double v71[3];
  __int16 v72;
  int v73;
  _BYTE v74[34];
  uint8_t buf[4];
  _BYTE v76[34];

  v6 = (_BYTE *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)&v71[1] = a1 + 8;
  (*(void (**)(uint64_t))(v5 + 16))(a1 + 8);
  v72 = 256;
  v6[112] = 0;
  if (a3)
  {
    v8 = (const std::__fs::filesystem::path **)(a1 + 200);
    v9 = (const std::__fs::filesystem::path *)(a1 + 200);
    if (*(char *)(a1 + 223) < 0)
      v9 = *v8;
    v10 = (const std::__fs::filesystem::path **)(a1 + 176);
    v11 = (const std::__fs::filesystem::path *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0)
      v11 = *v10;
    rename(v9, v11, v7);
    if (v12)
    {
      v13 = *__error();
      if (qword_1022A0290 != -1)
        dispatch_once(&qword_1022A0290, &stru_102148060);
      v14 = qword_1022A0298;
      if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_ERROR))
      {
        v15 = (const std::__fs::filesystem::path *)(a1 + 200);
        if (*(char *)(a1 + 223) < 0)
          v15 = *v8;
        v16 = (const std::__fs::filesystem::path *)(a1 + 176);
        if (*(char *)(a1 + 199) < 0)
          v16 = *v10;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)v76 = v15;
        *(_WORD *)&v76[8] = 2082;
        *(_QWORD *)&v76[10] = v16;
        *(_WORD *)&v76[18] = 1026;
        *(_DWORD *)&v76[20] = v13;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLFU,could not rename %{public}s to %{public}s,%{public}d", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0290 != -1)
          dispatch_once(&qword_1022A0290, &stru_102148060);
        if (*(char *)(a1 + 223) < 0)
          v8 = (const std::__fs::filesystem::path **)*v8;
        if (*(char *)(a1 + 199) < 0)
          v10 = (const std::__fs::filesystem::path **)*v10;
        v73 = 136446722;
        *(_QWORD *)v74 = v8;
        *(_WORD *)&v74[8] = 2082;
        *(_QWORD *)&v74[10] = v10;
        *(_WORD *)&v74[18] = 1026;
        *(_DWORD *)&v74[20] = v13;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0298, 16, "CLFU,could not rename %{public}s to %{public}s,%{public}d", &v73, 28);
        v50 = (uint8_t *)v49;
        sub_100512490("Generic", 1, 0, 0, "void CLFileUpdate::onDownloaded(CLFileDownload *, BOOL)", "%s\n", v49);
        if (v50 != buf)
          free(v50);
      }
      v17 = 3;
    }
    else
    {
      if (qword_1022A0290 != -1)
        dispatch_once(&qword_1022A0290, &stru_102148060);
      v32 = qword_1022A0298;
      if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_DEFAULT))
      {
        v33 = (const std::__fs::filesystem::path *)(a1 + 176);
        if (*(char *)(a1 + 199) < 0)
          v33 = *v10;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)v76 = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "CLFU,download completed to %{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0290 != -1)
          dispatch_once(&qword_1022A0290, &stru_102148060);
        v55 = (const std::__fs::filesystem::path *)(a1 + 176);
        if (*(char *)(a1 + 199) < 0)
          v55 = *v10;
        v73 = 136446210;
        *(_QWORD *)v74 = v55;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0298, 0, "CLFU,download completed to %{public}s", &v73, 12);
        v57 = (uint8_t *)v56;
        sub_100512490("Generic", 1, 0, 2, "void CLFileUpdate::onDownloaded(CLFileDownload *, BOOL)", "%s\n", v56);
        if (v57 != buf)
          free(v57);
      }
      v71[0] = 0.0;
      if (sub_100604AAC(a1, v71))
      {
        if (qword_1022A0290 != -1)
          dispatch_once(&qword_1022A0290, &stru_102148060);
        v34 = qword_1022A0298;
        if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_DEBUG))
        {
          v35 = (const std::__fs::filesystem::path *)(a1 + 200);
          if (*(char *)(a1 + 223) < 0)
            v35 = *v8;
          v36 = (const std::__fs::filesystem::path *)(a1 + 176);
          if (*(char *)(a1 + 199) < 0)
            v36 = *v10;
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)v76 = v35;
          *(_WORD *)&v76[8] = 2082;
          *(_QWORD *)&v76[10] = v36;
          *(_WORD *)&v76[18] = 2050;
          *(double *)&v76[20] = v71[0];
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "CLFU,newly downloaded %{public}s file is now %{public}s (time %{public}.3f)", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0290 != -1)
            dispatch_once(&qword_1022A0290, &stru_102148060);
          if (*(char *)(a1 + 223) < 0)
            v8 = (const std::__fs::filesystem::path **)*v8;
          if (*(char *)(a1 + 199) < 0)
            v10 = (const std::__fs::filesystem::path **)*v10;
          v73 = 136446722;
          *(_QWORD *)v74 = v8;
          *(_WORD *)&v74[8] = 2082;
          *(_QWORD *)&v74[10] = v10;
          *(_WORD *)&v74[18] = 2050;
          *(double *)&v74[20] = v71[0];
          LODWORD(v70) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0298, 2, "CLFU,newly downloaded %{public}s file is now %{public}s (time %{public}.3f)", &v73, v70);
          v62 = (uint8_t *)v61;
          sub_100512490("Generic", 1, 0, 2, "void CLFileUpdate::onDownloaded(CLFileDownload *, BOOL)", "%s\n", v61);
          if (v62 != buf)
            free(v62);
        }
        v37 = sub_1001FD94C();
        v38 = (const char *)(a1 + 128);
        if (*(char *)(a1 + 151) < 0)
          v38 = *(const char **)v38;
        sub_10018A4CC(v37, v38, v71);
        v39 = sub_1001FD94C();
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 944))(v39);
      }
      else
      {
        if (qword_1022A0290 != -1)
          dispatch_once(&qword_1022A0290, &stru_102148060);
        v42 = qword_1022A0298;
        if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_DEFAULT))
        {
          v43 = (const std::__fs::filesystem::path *)(a1 + 176);
          if (*(char *)(a1 + 199) < 0)
            v43 = *v10;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)v76 = v43;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#Warning,CLFU, could not get modified time for %{public}s", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0290 != -1)
            dispatch_once(&qword_1022A0290, &stru_102148060);
          if (*(char *)(a1 + 199) < 0)
            v10 = (const std::__fs::filesystem::path **)*v10;
          v73 = 136446210;
          *(_QWORD *)v74 = v10;
          LODWORD(v70) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0298, 0, "#Warning,CLFU, could not get modified time for %{public}s", &v73, v70);
          v64 = (uint8_t *)v63;
          sub_100512490("Generic", 1, 0, 2, "void CLFileUpdate::onDownloaded(CLFileDownload *, BOOL)", "%s\n", v63);
          if (v64 != buf)
            free(v64);
        }
      }
      *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
      v17 = 2;
    }
    *(_QWORD *)(a1 + 112) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 64) = 0;
    sub_100602904(a1);
  }
  else
  {
    if (qword_1022A0290 != -1)
      dispatch_once(&qword_1022A0290, &stru_102148060);
    v18 = qword_1022A0298;
    if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_DEFAULT))
    {
      v19 = (_QWORD *)(a1 + 152);
      if (*(char *)(a1 + 175) < 0)
        v19 = (_QWORD *)*v19;
      v20 = (_QWORD *)(a1 + 200);
      if (*(char *)(a1 + 223) < 0)
        v20 = (_QWORD *)*v20;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)v76 = v19;
      *(_WORD *)&v76[8] = 2082;
      *(_QWORD *)&v76[10] = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning,CLFU, could not download from %{public}s to %{public}s", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0290 != -1)
        dispatch_once(&qword_1022A0290, &stru_102148060);
      v45 = (_QWORD *)(a1 + 152);
      if (*(char *)(a1 + 175) < 0)
        v45 = (_QWORD *)*v45;
      v46 = (_QWORD *)(a1 + 200);
      if (*(char *)(a1 + 223) < 0)
        v46 = (_QWORD *)*v46;
      v73 = 136446466;
      *(_QWORD *)v74 = v45;
      *(_WORD *)&v74[8] = 2082;
      *(_QWORD *)&v74[10] = v46;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0298, 0, "#Warning,CLFU, could not download from %{public}s to %{public}s", &v73, 22);
      v48 = (uint8_t *)v47;
      sub_100512490("Generic", 1, 0, 2, "void CLFileUpdate::onDownloaded(CLFileDownload *, BOOL)", "%s\n", v47);
      if (v48 != buf)
        free(v48);
    }
    v21 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLDaemonStatus")), "syncgetReachability");
    if (v21)
    {
      Current = CFAbsoluteTimeGetCurrent();
      v23 = sub_100517068(*(_DWORD *)(a1 + 64), 10, 4);
      if (v21 == 2)
      {
        v24 = *(double *)(a1 + 88);
        if (v24 > 0.0 && v23 > v24)
        {
          if (qword_1022A0290 != -1)
            dispatch_once(&qword_1022A0290, &stru_102148060);
          v25 = qword_1022A0298;
          if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_DEFAULT))
          {
            v26 = *(_DWORD *)(a1 + 64);
            v27 = *(_QWORD *)(a1 + 88);
            v28 = (_QWORD *)(a1 + 152);
            if (*(char *)(a1 + 175) < 0)
              v28 = (_QWORD *)*v28;
            *(_DWORD *)buf = 134349826;
            *(double *)v76 = v23;
            *(_WORD *)&v76[8] = 1026;
            *(_DWORD *)&v76[10] = v26;
            *(_WORD *)&v76[14] = 2050;
            *(_QWORD *)&v76[16] = v27;
            *(_WORD *)&v76[24] = 2082;
            *(_QWORD *)&v76[26] = v28;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "CLFU,delay %{public}.3f for retry count %{public}d exceeds current update period of %{public}.3f, setting delay to half the current update period for %{public}s", buf, 0x26u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0290 != -1)
              dispatch_once(&qword_1022A0290, &stru_102148060);
            v65 = *(_DWORD *)(a1 + 64);
            v66 = *(_QWORD *)(a1 + 88);
            v67 = (_QWORD *)(a1 + 152);
            if (*(char *)(a1 + 175) < 0)
              v67 = (_QWORD *)*v67;
            v73 = 134349826;
            *(double *)v74 = v23;
            *(_WORD *)&v74[8] = 1026;
            *(_DWORD *)&v74[10] = v65;
            *(_WORD *)&v74[14] = 2050;
            *(_QWORD *)&v74[16] = v66;
            *(_WORD *)&v74[24] = 2082;
            *(_QWORD *)&v74[26] = v67;
            LODWORD(v70) = 38;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0298, 0, "CLFU,delay %{public}.3f for retry count %{public}d exceeds current update period of %{public}.3f, setting delay to half the current update period for %{public}s", &v73, v70);
            v69 = (uint8_t *)v68;
            sub_100512490("Generic", 1, 0, 2, "void CLFileUpdate::onDownloaded(CLFileDownload *, BOOL)", "%s\n", v68);
            if (v69 != buf)
              free(v69);
          }
          v23 = *(double *)(a1 + 88) * 0.5;
        }
      }
      *(double *)(a1 + 112) = Current + v23;
      if (qword_1022A0290 != -1)
        dispatch_once(&qword_1022A0290, &stru_102148060);
      v29 = qword_1022A0298;
      if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_DEFAULT))
      {
        v30 = *(_DWORD *)(a1 + 64);
        v31 = (_QWORD *)(a1 + 152);
        if (*(char *)(a1 + 175) < 0)
          v31 = (_QWORD *)*v31;
        *(_DWORD *)buf = 67240706;
        *(_DWORD *)v76 = v30;
        *(_WORD *)&v76[4] = 2082;
        *(_QWORD *)&v76[6] = v31;
        *(_WORD *)&v76[14] = 2050;
        *(double *)&v76[16] = v23;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "CLFU,retry count %{public}d, will re-download for %{public}s after delay of %{public}.3f", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0290 != -1)
          dispatch_once(&qword_1022A0290, &stru_102148060);
        v51 = *(_DWORD *)(a1 + 64);
        v52 = (_QWORD *)(a1 + 152);
        if (*(char *)(a1 + 175) < 0)
          v52 = (_QWORD *)*v52;
        v73 = 67240706;
        *(_DWORD *)v74 = v51;
        *(_WORD *)&v74[4] = 2082;
        *(_QWORD *)&v74[6] = v52;
        *(_WORD *)&v74[14] = 2050;
        *(double *)&v74[16] = v23;
        LODWORD(v70) = 28;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0298, 0, "CLFU,retry count %{public}d, will re-download for %{public}s after delay of %{public}.3f", &v73, v70);
        v54 = (uint8_t *)v53;
        sub_100512490("Generic", 1, 0, 2, "void CLFileUpdate::onDownloaded(CLFileDownload *, BOOL)", "%s\n", v53);
        if (v54 != buf)
          free(v54);
      }
      ++*(_DWORD *)(a1 + 64);
      objc_msgSend(*(id *)(a1 + 56), "setNextFireTime:", *(double *)(a1 + 112));
    }
    else
    {
      if (qword_1022A0290 != -1)
        dispatch_once(&qword_1022A0290, &stru_102148060);
      v40 = qword_1022A0298;
      if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_DEFAULT))
      {
        v41 = (_QWORD *)(a1 + 152);
        if (*(char *)(a1 + 175) < 0)
          v41 = (_QWORD *)*v41;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)v76 = v41;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "CLFU,data reachability is not available - not retrying %{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0290 != -1)
          dispatch_once(&qword_1022A0290, &stru_102148060);
        v58 = (_QWORD *)(a1 + 152);
        if (*(char *)(a1 + 175) < 0)
          v58 = (_QWORD *)*v58;
        v73 = 136446210;
        *(_QWORD *)v74 = v58;
        LODWORD(v70) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0298, 0, "CLFU,data reachability is not available - not retrying %{public}s", &v73, v70);
        v60 = (uint8_t *)v59;
        sub_100512490("Generic", 1, 0, 2, "void CLFileUpdate::onDownloaded(CLFileDownload *, BOOL)", "%s\n", v59);
        if (v60 != buf)
          free(v60);
      }
    }
    v17 = 3;
  }
  (*(void (**)(_BYTE *))(*(_QWORD *)v6 + 24))(v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a1 + 32))(a1, v17, *(_QWORD *)(a1 + 40));
}

void sub_100604A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100604AAC(uint64_t a1, double *a2)
{
  uint64_t v4;
  char *v5;
  const char **v6;
  const char *v7;
  int v8;
  int v9;
  NSObject *v10;
  const char *v11;
  char *v12;
  stat v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  const char **v18;
  __int16 v19;
  int v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  int v24;

  v5 = (char *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  v15 = a1 + 8;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 8);
  v16 = 256;
  v6 = (const char **)(v5 + 168);
  v7 = v5 + 168;
  if (v5[191] < 0)
    v7 = *v6;
  v8 = stat(v7, &v14);
  if (v8)
  {
    v9 = *__error();
    if (qword_1022A0290 != -1)
      dispatch_once(&qword_1022A0290, &stru_102148060);
    v10 = qword_1022A0298;
    if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_ERROR))
    {
      v11 = v5 + 168;
      if (*(char *)(a1 + 199) < 0)
        v11 = *v6;
      *(_DWORD *)buf = 136446466;
      v22 = v11;
      v23 = 1026;
      v24 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "CLFU,destination stat failed,%{public}s,%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0290 != -1)
        dispatch_once(&qword_1022A0290, &stru_102148060);
      if (*(char *)(a1 + 199) < 0)
        v6 = (const char **)*v6;
      v17 = 136446466;
      v18 = v6;
      v19 = 1026;
      v20 = v9;
      v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0298, 16, "CLFU,destination stat failed,%{public}s,%{public}d", &v17, 18);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLFileUpdate::getFileModifiedTime(CFAbsoluteTime &)", "%s\n", v12);
      if (v12 != (char *)buf)
        free(v12);
    }
  }
  else
  {
    *a2 = sub_100110314(&v14.st_mtimespec.tv_sec);
  }
  (*(void (**)(char *))(*(_QWORD *)v5 + 24))(v5);
  return v8 == 0;
}

void sub_100604D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_10187E514((uint64_t)&a30);
  _Unwind_Resume(a1);
}

BOOL sub_100604D40(uint64_t a1, const std::string::value_type *a2, const std::string::value_type *a3, double *a4)
{
  unsigned __int8 *v8;
  int v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  uint64_t *v14;
  _BYTE **v15;
  double v16;
  NSObject *v17;
  _QWORD *v18;
  _BOOL4 v19;
  void **v20;
  size_t v21;
  uint8_t *v22;
  const void *v23;
  void **v24;
  _BYTE *v25;
  uid_t v26;
  gid_t v27;
  NSObject *v28;
  _BYTE *v29;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  int v34;
  _QWORD *v35;
  uint8_t buf[16];
  uint64_t v37;

  v8 = (unsigned __int8 *)(a1 + 8);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 16))(a1 + 8);
  v9 = v8[112];
  if (v8[112])
  {
    if (qword_1022A0290 != -1)
      dispatch_once(&qword_1022A0290, &stru_102148060);
    v10 = qword_1022A0298;
    if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_INFO))
    {
      v11 = (_QWORD *)(a1 + 152);
      if (*(char *)(a1 + 175) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#Warning,CLFU,%{public}s downloading in progress, cannot change update settings", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0290 != -1)
        dispatch_once(&qword_1022A0290, &stru_102148060);
      v12 = (_QWORD *)(a1 + 152);
      if (*(char *)(a1 + 175) < 0)
        v12 = (_QWORD *)*v12;
      v34 = 136446210;
      v35 = v12;
      v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0298, 1, "#Warning,CLFU,%{public}s downloading in progress, cannot change update settings", &v34, 12);
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLFileUpdate::setUpdateSource(const char *, const char *, const CFTimeInterval &)", "%s\n", v13);
LABEL_14:
      if (v13 != (char *)buf)
        free(v13);
    }
  }
  else
  {
    v14 = (uint64_t *)(a1 + 152);
    std::string::assign((std::string *)(a1 + 152), a2);
    v15 = (_BYTE **)(a1 + 176);
    std::string::assign((std::string *)(a1 + 176), a3);
    v16 = *a4;
    if (*a4 <= 0.0)
    {
      if (qword_1022A0290 != -1)
        dispatch_once(&qword_1022A0290, &stru_102148060);
      v17 = qword_1022A0298;
      if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_ERROR))
      {
        v18 = (_QWORD *)(a1 + 152);
        if (*(char *)(a1 + 175) < 0)
          v18 = (_QWORD *)*v14;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "CLFU,%{public}s download timeout must be greater than 0. Forcing to 30 seconds.", buf, 0xCu);
      }
      v19 = sub_1001BFF7C(115, 0);
      v16 = 30.0;
      if (v19)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0290 != -1)
          dispatch_once(&qword_1022A0290, &stru_102148060);
        v31 = (_QWORD *)(a1 + 152);
        if (*(char *)(a1 + 175) < 0)
          v31 = (_QWORD *)*v14;
        v34 = 136446210;
        v35 = v31;
        v32 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0298, 16, "CLFU,%{public}s download timeout must be greater than 0. Forcing to 30 seconds.", &v34, 12);
        sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLFileUpdate::setUpdateSource(const char *, const char *, const CFTimeInterval &)", "%s\n", v32);
        if (v32 != (char *)buf)
          free(v32);
        v16 = 30.0;
      }
    }
    *(double *)(a1 + 72) = v16;
    std::operator+<char>(buf, "FileUpdate.", a1 + 152);
    v20 = (void **)(a1 + 128);
    if (*(char *)(a1 + 151) < 0)
      operator delete(*v20);
    *(_OWORD *)v20 = *(_OWORD *)buf;
    *(_QWORD *)(a1 + 144) = v37;
    if (*(char *)(a1 + 199) >= 0)
      v21 = *(unsigned __int8 *)(a1 + 199);
    else
      v21 = *(_QWORD *)(a1 + 184);
    v22 = buf;
    sub_100259584((uint64_t)buf, v21 + 5);
    if (v37 < 0)
      v22 = *(uint8_t **)buf;
    if (v21)
    {
      if (*(char *)(a1 + 199) >= 0)
        v23 = (const void *)(a1 + 176);
      else
        v23 = *(const void **)(a1 + 176);
      memmove(v22, v23, v21);
    }
    strcpy((char *)&v22[v21], ".temp");
    v24 = (void **)(a1 + 200);
    if (*(char *)(a1 + 223) < 0)
      operator delete(*v24);
    *(_OWORD *)v24 = *(_OWORD *)buf;
    *(_QWORD *)(a1 + 216) = v37;
    v25 = (_BYTE *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0)
      v25 = *v15;
    v26 = getuid();
    v27 = getgid();
    if (!sub_100512E84(v25, v26, v27))
    {
      if (qword_1022A0290 != -1)
        dispatch_once(&qword_1022A0290, &stru_102148060);
      v28 = qword_1022A0298;
      if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_FAULT))
      {
        v29 = (_BYTE *)(a1 + 176);
        if (*(char *)(a1 + 199) < 0)
          v29 = *v15;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v29;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "CLFU,could not create path %{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0290 != -1)
          dispatch_once(&qword_1022A0290, &stru_102148060);
        if (*(char *)(a1 + 199) < 0)
          v15 = (_BYTE **)*v15;
        v34 = 136446210;
        v35 = v15;
        LODWORD(v33) = 12;
        v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0298, 17, "CLFU,could not create path %{public}s", &v34, v33);
        sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLFileUpdate::setUpdateSource(const char *, const char *, const CFTimeInterval &)", "%s\n", v13);
        goto LABEL_14;
      }
    }
  }
  (*(void (**)(unsigned __int8 *))(*(_QWORD *)v8 + 24))(v8);
  return v9 == 0;
}

void sub_100605354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10060538C(uint64_t a1, double *a2, double *a3)
{
  _QWORD *v6;
  double v7;
  double v8;
  NSObject *v10;
  _QWORD *v11;
  uint64_t v12;
  NSObject *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint8_t buf[4];
  _QWORD *v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;

  v6 = (_QWORD *)(a1 + 8);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 16))(a1 + 8);
  v7 = *a2;
  v6[9] = *(_QWORD *)a2;
  v8 = *a3;
  v6[10] = *(_QWORD *)a3;
  if (v7 > 0.0 && v7 < v8)
  {
    if (qword_1022A0290 != -1)
      dispatch_once(&qword_1022A0290, &stru_102148060);
    v10 = qword_1022A0298;
    if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(_QWORD **)(a1 + 80);
      v12 = *(_QWORD *)(a1 + 88);
      *(_DWORD *)buf = 134349312;
      v33 = v11;
      v34 = 2050;
      v35 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning,CLFU,update rate %{public}.3fs is shorter than WiFi update rate %{public}.3fs - overriding WiFi update rate", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0290 != -1)
        dispatch_once(&qword_1022A0290, &stru_102148060);
      v22 = *(_QWORD **)(a1 + 80);
      v23 = *(_QWORD *)(a1 + 88);
      v26 = 134349312;
      v27 = v22;
      v28 = 2050;
      v29 = v23;
      v24 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0298, 0, "#Warning,CLFU,update rate %{public}.3fs is shorter than WiFi update rate %{public}.3fs - overriding WiFi update rate", &v26, 22);
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLFileUpdate::setUpdateRate(const CFTimeInterval &, const CFTimeInterval &)", "%s\n", v24);
      if (v24 != (char *)buf)
        free(v24);
    }
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
  }
  if (qword_1022A0290 != -1)
    dispatch_once(&qword_1022A0290, &stru_102148060);
  v13 = qword_1022A0298;
  if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_INFO))
  {
    v14 = (_QWORD *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0)
      v14 = (_QWORD *)*v14;
    v15 = *(_QWORD *)(a1 + 80);
    v16 = *(_QWORD *)(a1 + 88);
    *(_DWORD *)buf = 136446722;
    v33 = v14;
    v34 = 2050;
    v35 = v15;
    v36 = 2050;
    v37 = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "CLFU,file %{public}s update rate set to %{public}.3fs, %{public}.3fs", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0290 != -1)
      dispatch_once(&qword_1022A0290, &stru_102148060);
    v18 = (_QWORD *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0)
      v18 = (_QWORD *)*v18;
    v19 = *(_QWORD *)(a1 + 80);
    v20 = *(_QWORD *)(a1 + 88);
    v26 = 136446722;
    v27 = v18;
    v28 = 2050;
    v29 = v19;
    v30 = 2050;
    v31 = v20;
    LODWORD(v25) = 32;
    v21 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0298, 1, "CLFU,file %{public}s update rate set to %{public}.3fs, %{public}.3fs", &v26, v25);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLFileUpdate::setUpdateRate(const CFTimeInterval &, const CFTimeInterval &)", "%s\n", v21);
    if (v21 != (char *)buf)
      free(v21);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 224) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8), 6, 0);
  sub_100602904(a1);
  (*(void (**)(_QWORD *))(*v6 + 24))(v6);
  return 1;
}

void sub_100605768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100605798(double *a1, double *a2)
{
  _QWORD *v4;
  void *v5;
  double v6;

  v4 = a1 + 1;
  (*(void (**)(_QWORD *))(*((_QWORD *)a1 + 1) + 16))((_QWORD *)a1 + 1);
  if (sub_1006037CC((uint64_t)a1))
  {
    a1[12] = *a2;
    v5 = (void *)*((_QWORD *)a1 + 7);
    objc_msgSend(v5, "nextFireTime");
    if (a1[12] < v6)
      v6 = a1[12];
    objc_msgSend(v5, "setNextFireTime:", v6);
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
}

void sub_100605830(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100605848(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v3;
  _QWORD *v4;
  NSObject *v5;
  _QWORD *v6;
  _QWORD *v13;
  const char *v14;
  uint8_t *v15;
  _QWORD *v16;
  const char *v17;
  uint8_t *v18;
  int v19;
  _QWORD *v20;
  uint8_t buf[4];
  _QWORD *v22;

  v2 = (_QWORD *)(a1 + 8);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 16))(a1 + 8);
  objc_msgSend(*(id *)(v2[27] + 16), "unregister:forNotification:", *(_QWORD *)(v2[27] + 8), 6);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 232) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8), 5);
  if (qword_1022A0290 != -1)
    dispatch_once(&qword_1022A0290, &stru_102148060);
  v3 = qword_1022A0298;
  if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_DEBUG))
  {
    v4 = (_QWORD *)(a1 + 152);
    if (*(char *)(a1 + 175) < 0)
      v4 = (_QWORD *)*v4;
    *(_DWORD *)buf = 136315138;
    v22 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CLFU,unregistered for kNotificationCompanionConnectionUpdate for %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0290 != -1)
      dispatch_once(&qword_1022A0290, &stru_102148060);
    v13 = (_QWORD *)(a1 + 152);
    if (*(char *)(a1 + 175) < 0)
      v13 = (_QWORD *)*v13;
    v19 = 136315138;
    v20 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0298, 2, "CLFU,unregistered for kNotificationCompanionConnectionUpdate for %s", (const char *)&v19);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLFileUpdate::cancelUpdate()", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  if (*(_BYTE *)(a1 + 120))
  {
    if (qword_1022A0290 != -1)
      dispatch_once(&qword_1022A0290, &stru_102148060);
    v5 = qword_1022A0298;
    if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_DEFAULT))
    {
      v6 = (_QWORD *)(a1 + 152);
      if (*(char *)(a1 + 175) < 0)
        v6 = (_QWORD *)*v6;
      *(_DWORD *)buf = 136446210;
      v22 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLFU,stopping download of %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0290 != -1)
        dispatch_once(&qword_1022A0290, &stru_102148060);
      v16 = (_QWORD *)(a1 + 152);
      if (*(char *)(a1 + 175) < 0)
        v16 = (_QWORD *)*v16;
      v19 = 136446210;
      v20 = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0298, 0, "CLFU,stopping download of %{public}s", &v19, 12);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLFileUpdate::cancelUpdate()", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48));
    *(_BYTE *)(a1 + 120) = 0;
  }
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 80) = _Q0;
  *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  objc_msgSend(*(id *)(a1 + 56), "setNextFireDelay:", 1.79769313e308);
  return (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2);
}

void sub_100605C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100605C38(uint64_t a1, unint64_t *a2)
{
  double *v4;
  __n128 v5;

  v4 = (double *)(a1 + 8);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 16))(a1 + 8);
  v5.n128_u64[0] = *a2;
  if (*(double *)a2 > v4[13])
    *(_QWORD *)(a1 + 112) = v5.n128_u64[0];
  return (*(uint64_t (**)(double *, __n128))(*(_QWORD *)v4 + 24))(v4, v5);
}

uint64_t sub_100605C9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = a1 + 8;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 16))(a1 + 8);
  if (*(char *)(v4 + 167) < 0)
  {
    sub_100115CE4((_BYTE *)a2, *(void **)(a1 + 152), *(_QWORD *)(a1 + 160));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(v4 + 144);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v4 + 160);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_100605D28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100605D40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = a1 + 8;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 16))(a1 + 8);
  if (*(char *)(v4 + 191) < 0)
  {
    sub_100115CE4((_BYTE *)a2, *(void **)(a1 + 176), *(_QWORD *)(a1 + 184));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(v4 + 168);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v4 + 184);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_100605DCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100605DE4(uint64_t a1, _QWORD *a2)
{
  id *v3;
  uint64_t v4;

  v3 = (id *)(a1 + 8);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 16))(a1 + 8);
  objc_msgSend(v3[6], "nextFireTime");
  *a2 = v4;
  (*((void (**)(id *))*v3 + 3))(v3);
  return 1;
}

void sub_100605E4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100605E60(uint64_t result, char a2)
{
  *(_BYTE *)(result + 240) = a2;
  return result;
}

void sub_100605E68(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100605E94(id a1)
{
  qword_1022A0298 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Network");
}

id sub_100606014(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_10060E24C(a1);
  else
    return 0;
}

void sub_100606060(uint64_t a1, _QWORD *a2)
{
  NSNumber *v4;
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  NSObject *v9;
  id v10;
  NSNumber *v11;
  __CFString **v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  id v20;
  _QWORD *v21;
  id v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  id v31;
  uint8_t buf[4];
  int v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  id v39;
  __int16 v40;
  uint64_t v41;

  v4 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2[1]);
  v5 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v31 = v5;
  objc_msgSend(v5, "setObject:forKeyedSubscript:", v4, CFSTR("CLMiLoConnectionReturnCode"));
  switch(a2[1])
  {
    case 1:
      v6 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", a2 + 40);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_1021480E0);
      v7 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
      {
        v8 = objc_msgSend(objc_msgSend(*(id *)(a1 + 72), "UUIDString"), "UTF8String");
        *(_DWORD *)buf = 68289794;
        v33 = 0;
        v34 = 2082;
        v35 = "";
        v36 = 2082;
        v37 = (uint64_t)v8;
        v38 = 2082;
        v39 = objc_msgSend(objc_msgSend(v6, "UUIDString"), "UTF8String");
        v40 = 2050;
        v41 = a1;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"MiLoConnectionSubscription, didCreateService\", \"connectionToken\":%{public, location:escape_only}s, \"serviceIdentifier\":%{public, location:escape_only}s, \"self\":\"%{public}p\"}", buf, 0x30u);
      }
      goto LABEL_34;
    case 2:
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_1021480E0);
      v9 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
      {
        v10 = objc_msgSend(objc_msgSend(*(id *)(a1 + 72), "UUIDString"), "UTF8String");
        *(_DWORD *)buf = 68289282;
        v33 = 0;
        v34 = 2082;
        v35 = "";
        v36 = 2082;
        v37 = (uint64_t)v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"MiLoConnectionSubscription, createServiceFailed\", \"connectionToken\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      objc_msgSend(v5, "setObject:forKeyedSubscript:", +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2[39]), CFSTR("CLMiLoConnectionErrorMessage"));
      goto LABEL_37;
    case 3:
      v11 = (NSNumber *)objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", a2 + 40);
      v12 = off_10218E988;
      goto LABEL_36;
    case 4:
      objc_msgSend(v5, "setObject:forKeyedSubscript:", objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", a2 + 40), CFSTR("CLMiLoConnectionServiceIdentifier"));
      goto LABEL_14;
    case 5:
      v13 = objc_alloc_init((Class)NSMutableArray);
      v14 = a2[43];
      if (a2[44] != v14)
      {
        v15 = a2[46];
        v16 = a2[47];
        v17 = (_QWORD *)(v14 + 8 * (v15 / 0x38));
        v18 = (_QWORD *)(*v17 + 72 * (v15 % 0x38));
        v19 = *(_QWORD *)(v14 + 8 * ((v16 + v15) / 0x38)) + 72 * ((v16 + v15) % 0x38);
        while (v18 != (_QWORD *)v19)
        {
          v20 = sub_100607BC0(v18);
          objc_msgSend(v13, "addObject:", v20);

          v18 += 9;
          if ((_QWORD *)((char *)v18 - *v17) == (_QWORD *)4032)
          {
            v21 = (_QWORD *)v17[1];
            ++v17;
            v18 = v21;
          }
        }
      }
      objc_msgSend(v5, "setObject:forKeyedSubscript:", v13, CFSTR("CLMiLoConnectionServiceDescriptors"));

      goto LABEL_37;
    case 6:
    case 0xCLL:
LABEL_14:
      v11 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2[39]);
      v12 = off_10218E980;
      goto LABEL_36;
    case 7:
      v22 = sub_100607CD0((uint64_t)(a2 + 2));
      objc_msgSend(v5, "setObject:forKeyedSubscript:", v22, CFSTR("CLMiLoConnectionServiceStatus"));

      goto LABEL_37;
    case 8:
      objc_msgSend(v5, "setObject:forKeyedSubscript:", +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2[39]), CFSTR("CLMiLoConnectionErrorMessage"));
      v6 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", a2 + 40);
      if (objc_msgSend(v6, "isEqual:", *(_QWORD *)(a1 + 80)))
      {
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_1021480E0);
        v23 = qword_1022A00F8;
        if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
        {
          v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
          *(_DWORD *)buf = 68289538;
          v33 = 0;
          v34 = 2082;
          v35 = "";
          v36 = 2082;
          v37 = v24;
          v38 = 2082;
          v39 = objc_msgSend(objc_msgSend(v6, "UUIDString"), "UTF8String");
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"connect to service failed, clear fConnectedServiceIdentifier\", \"class\":%{public, location:escape_only}s, \"ServiceId\":%{public, location:escape_only}s}", buf, 0x26u);
        }

        *(_QWORD *)(a1 + 80) = 0;
      }
      goto LABEL_34;
    case 9:
      objc_msgSend(v5, "setObject:forKeyedSubscript:", +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2[39]), CFSTR("CLMiLoConnectionErrorMessage"));
      v6 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", a2 + 40);
      if (!*(_QWORD *)(a1 + 80))
      {
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_1021480E0);
        v25 = qword_1022A00F8;
        if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
        {
          v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
          *(_DWORD *)buf = 68289538;
          v33 = 0;
          v34 = 2082;
          v35 = "";
          v36 = 2082;
          v37 = v26;
          v38 = 2082;
          v39 = objc_msgSend(objc_msgSend(v6, "UUIDString"), "UTF8String");
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"disconnect to service failed, restore fConnectedServiceIdentifier\", \"class\":%{public, location:escape_only}s, \"ServiceId\":%{public, location:escape_only}s}", buf, 0x26u);
        }
        *(_QWORD *)(a1 + 80) = objc_msgSend(v6, "copy");
      }
LABEL_34:
      objc_msgSend(v5, "setObject:forKeyedSubscript:", v6, CFSTR("CLMiLoConnectionServiceIdentifier"));
      goto LABEL_37;
    case 0xALL:
      objc_msgSend(v5, "setObject:forKeyedSubscript:", +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2[39]), CFSTR("CLMiLoConnectionErrorMessage"));
      v11 = (NSNumber *)objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", a2 + 48);
      v12 = off_10218E9A8;
LABEL_36:
      objc_msgSend(v5, "setObject:forKeyedSubscript:", v11, *v12);
      goto LABEL_37;
    case 0xDLL:
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_1021480E0);
      v27 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
      {
        v28 = a2[1];
        *(_DWORD *)buf = 68289282;
        v33 = 0;
        v34 = 2082;
        v35 = "";
        v36 = 1026;
        LODWORD(v37) = v28;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"onMiLoServiceEvent, unexpected event type\", \"miloServiceEventType data\":%{public}d}", buf, 0x18u);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_1021480E0);
      }
      v29 = qword_1022A00F8;
      if (os_signpost_enabled((os_log_t)qword_1022A00F8))
      {
        v30 = a2[1];
        *(_DWORD *)buf = 68289282;
        v33 = 0;
        v34 = 2082;
        v35 = "";
        v36 = 1026;
        LODWORD(v37) = v30;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v29, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "onMiLoServiceEvent, unexpected event type", "{\"msg%{public}.0s\":\"onMiLoServiceEvent, unexpected event type\", \"miloServiceEventType data\":%{public}d}", buf, 0x18u);
      }
      return;
    default:
LABEL_37:
      sub_100608144(a1, &v31);
      return;
  }
}

id sub_10060696C(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_10060E624(a1);
  else
    return 0;
}

void sub_1006069B8(uint64_t a1, _QWORD *a2)
{
  id v4;
  id v5;

  v5 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v4 = sub_1006081EC(a2);
  objc_msgSend(v5, "setObject:forKeyedSubscript:", v4, CFSTR("CLMiLoConnectionPredictionUpdate"));

  sub_100608828(a1, &v5);
}

id sub_100606B30(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_10060E9D0(a1);
  else
    return 0;
}

void sub_100606B7C(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021480E0);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    v5 = *a2;
    v8 = 68289282;
    v9 = 2082;
    v10 = "";
    v11 = 1026;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"onMiLoServiceDebugResponse\", \"Event Type\":%{public}d}", (uint8_t *)&v8, 0x18u);
  }
  v6 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v8 = (uint64_t)v6;
  v7 = sub_1006088D0((uint64_t)a2);
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v7, CFSTR("CLMiLoConnectionDebugEventResponse"));

  sub_100608A08(a1, &v8);
}

id sub_100606DB8(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_10060ED7C(a1);
  v6 = objc_opt_class(CLCppContainer, v4);
  if ((objc_opt_isKindOfClass(a1, v6) & 1) != 0)
    return sub_10060F104(a1);
  else
    return 0;
}

void sub_100606E30(uint64_t a1, _QWORD *a2)
{
  id v4;
  id v5;

  v5 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v4 = objc_msgSend(objc_alloc((Class)CLMiLoConnectionStatus), "initWithConnectionState:", *a2);
  objc_msgSend(v5, "setObject:forKeyedSubscript:", v4, CFSTR("CLMiLoConnectionStatusEvent"));

  sub_100608AB0(a1, &v5);
}

id sub_100606FC4(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_10060F524(a1);
  else
    return 0;
}

void sub_100607010(uint64_t a1, uint64_t a2)
{
  NSNumber *v3;
  id v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t *v14;
  id v15;
  id v17;

  v3 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)a2);
  v4 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v17 = v4;
  v5 = objc_alloc_init((Class)NSMutableArray);
  v6 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a2 + 64) != v6)
  {
    v7 = *(_QWORD *)(a2 + 80);
    v8 = (_QWORD *)(v6 + 8 * (v7 >> 9));
    v9 = (uint64_t *)(*v8 + 8 * (v7 & 0x1FF));
    v10 = *(_QWORD *)(v6 + (((*(_QWORD *)(a2 + 88) + v7) >> 6) & 0x3FFFFFFFFFFFFF8))
        + 8 * ((*(_QWORD *)(a2 + 88) + v7) & 0x1FF);
    while (v9 != (uint64_t *)v10)
    {
      v11 = objc_alloc((Class)CLMiLoFingerprintError);
      v12 = *v9++;
      v13 = objc_msgSend(v11, "initWithFingerprintErrorEnum:", v12);
      objc_msgSend(v5, "addObject:", v13);

      if ((uint64_t *)((char *)v9 - *v8) == (uint64_t *)4096)
      {
        v14 = (uint64_t *)v8[1];
        ++v8;
        v9 = v14;
      }
    }
  }
  v15 = objc_msgSend(objc_alloc((Class)CLMiLoFingerprintMetaInfo), "initWithNumWiFiAccessPoints:numBLESources:numUWBSources:requestIdentifier:errors:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a2 + 32)), +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a2 + 36)), +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a2 + 40)), objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", a2 + 16), v5);

  objc_msgSend(v4, "setObject:forKeyedSubscript:", v3, CFSTR("CLMiLoConnectionReturnCode"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v15, CFSTR("CLMiLoConnectionRecordingMetaInfo"));

  sub_100608144(a1, &v17);
}

id sub_1006072D4(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_10060F8D0(a1);
  else
    return 0;
}

void sub_100607320(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021480E0);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    v5 = *a2;
    v8 = 68289282;
    v9 = 2082;
    v10 = "";
    v11 = 1026;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"onMiLoGenericEventResponse\", \"Event Type\":%{public}d}", (uint8_t *)&v8, 0x18u);
  }
  v6 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v8 = (uint64_t)v6;
  v7 = sub_100608B58(a2);
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v7, CFSTR("CLMiLoConnectionGenericEventResponse"));

  sub_100608CDC(a1, &v8);
}

void sub_100607484(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  v5 = sub_1001B5A2C(a1, a2, a3, a4, a5);
  *(_QWORD *)v5 = off_102148090;
  *(_QWORD *)(v5 + 48) = 0;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_QWORD *)(v5 + 128) = 0;
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021480E0);
  v6 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Initialize CLMiLoConnectionSubscription", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_1021480E0);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "Initialize CLMiLoConnectionSubscription", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "CLMiLoConnectionSubscription::CLMiLoConnectionSubscription(Delegate *, id<CLIntersiloUniverse>, CLClientManagerAuthorizationContext *, CLClientKeyPath *)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  sub_100F29EE8();
}

void sub_10060774C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t v5;

  if (*(char *)(v1 + 135) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 111) < 0)
    operator delete(*v3);
  v5 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_10002FA68(v1);
  _Unwind_Resume(a1);
}

void sub_1006077A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  NSObject *v6;
  os_activity_scope_state_s state;
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  CLProfilingIdentify("CLMiLoConnectionSubscription::onMiLoServiceEventNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102148100);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v8 = 1;
    v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMiLoConnectionSubscription::onMiLoServiceEventNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102148100);
    v6 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = "activity";
      v15 = 2050;
      v16 = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMiLoConnectionSubscription::onMiLoServiceEventNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v8 = 0;
  }
  if (v8)
    os_activity_scope_leave(&state);
}

void sub_100607940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100607960(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  void *v7;
  NSString *v8;
  _QWORD *v9;
  uint64_t v10;
  _DWORD v12[2];
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  id v18;

  *(_QWORD *)a1 = off_102148090;
  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(_QWORD *)(a1 + 80))
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_1021480E0);
    v3 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
    {
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8);
      v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 80), "UUIDString"), "UTF8String");
      v12[0] = 68289538;
      v12[1] = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = v4 & 0x7FFFFFFFFFFFFFFFLL;
      v17 = 2082;
      v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"disconnect to a connected service in Dtor of\", \"class\":%{public, location:escape_only}s, \"serviceId\":%{public, location:escape_only}s}", (uint8_t *)v12, 0x26u);
    }
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    v7 = *(void **)(a1 + 64);
    v8 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6);
    v9 = (_QWORD *)(a1 + 112);
    if (*(char *)(a1 + 135) < 0)
      v9 = (_QWORD *)*v9;
    objc_msgSend(v7, "disconnectToServiceForClient:withServiceIdentifier:withConnectionToken:forUser:", v8, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 72), +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9));

    *(_QWORD *)(a1 + 80) = 0;
  }
  objc_msgSend(*(id *)(a1 + 64), "unregisterForMiloServiceEventUpdatesForClient:withToken:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 72));
  objc_msgSend(*(id *)(a1 + 64), "unregisterForMiloPredictionEventUpdates:", *(_QWORD *)(a1 + 56));

  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_msgSend(*(id *)(a1 + 56), "setValid:", 0);

  *(_QWORD *)(a1 + 56) = 0;
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  sub_10002FA68(a1);
  return a1;
}

void sub_100607B8C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_100607B9C(uint64_t a1)
{
  sub_100607960(a1);
  operator delete();
}

id sub_100607BC0(_QWORD *a1)
{
  id v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t *v11;
  id v12;
  id v13;

  v2 = objc_alloc_init((Class)NSMutableArray);
  v3 = a1[4];
  if (a1[5] != v3)
  {
    v4 = a1[7];
    v5 = (_QWORD *)(v3 + 8 * (v4 >> 9));
    v6 = (uint64_t *)(*v5 + 8 * (v4 & 0x1FF));
    v7 = *(_QWORD *)(v3 + (((a1[8] + v4) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[8] + v4) & 0x1FF);
    while (v6 != (uint64_t *)v7)
    {
      v8 = objc_alloc((Class)CLMiLoLocationType);
      v9 = *v6++;
      v10 = objc_msgSend(v8, "initWithLocationTypeEnum:", v9);
      objc_msgSend(v2, "addObject:", v10);

      if ((uint64_t *)((char *)v6 - *v5) == (uint64_t *)4096)
      {
        v11 = (uint64_t *)v5[1];
        ++v5;
        v6 = v11;
      }
    }
  }
  v12 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", a1);
  v13 = objc_msgSend(objc_alloc((Class)CLMiLoServiceDescriptor), "initWithServiceIdentifier:serviceType:locationTypes:", v12, a1[2], v2);

  return v13;
}

id sub_100607CD0(uint64_t a1)
{
  id v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t *v23;
  id v24;
  uint64_t *v25;
  uint64_t *v26;
  id v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  id v43;
  id v44;
  id v46;
  id v47;
  void *v48;
  void *v49;

  v2 = objc_alloc_init((Class)NSMutableArray);
  v3 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) != v3)
  {
    v4 = *(_QWORD *)(a1 + 112);
    v5 = (_QWORD *)(v3 + 8 * (v4 >> 9));
    v6 = (uint64_t *)(*v5 + 8 * (v4 & 0x1FF));
    v7 = *(_QWORD *)(v3 + (((*(_QWORD *)(a1 + 120) + v4) >> 6) & 0x3FFFFFFFFFFFFF8))
       + 8 * ((*(_QWORD *)(a1 + 120) + v4) & 0x1FF);
    while (v6 != (uint64_t *)v7)
    {
      v8 = objc_alloc((Class)CLMiLoLocationType);
      v9 = *v6++;
      v10 = objc_msgSend(v8, "initWithLocationTypeEnum:", v9);
      objc_msgSend(v2, "addObject:", v10);

      if ((uint64_t *)((char *)v6 - *v5) == (uint64_t *)4096)
      {
        v11 = (uint64_t *)v5[1];
        ++v5;
        v6 = v11;
      }
    }
  }
  v12 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", a1 + 56);
  v13 = objc_msgSend(objc_alloc((Class)CLMiLoServiceDescriptor), "initWithServiceIdentifier:serviceType:locationTypes:", v12, *(_QWORD *)(a1 + 72), v2);

  v14 = objc_alloc_init((Class)NSMutableArray);
  v15 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(a1 + 24) != v15)
  {
    v16 = *(_QWORD *)(a1 + 40);
    v17 = (_QWORD *)(v15 + 8 * (v16 >> 9));
    v18 = (uint64_t *)(*v17 + 8 * (v16 & 0x1FF));
    v19 = *(_QWORD *)(v15 + (((*(_QWORD *)(a1 + 48) + v16) >> 6) & 0x3FFFFFFFFFFFFF8))
        + 8 * ((*(_QWORD *)(a1 + 48) + v16) & 0x1FF);
    while (v18 != (uint64_t *)v19)
    {
      v20 = objc_alloc((Class)CLMiLoServiceSuspendReason);
      v21 = *v18++;
      v22 = objc_msgSend(v20, "initWithSuspendReasonEnum:", v21);
      objc_msgSend(v14, "addObject:", v22);

      if ((uint64_t *)((char *)v18 - *v17) == (uint64_t *)4096)
      {
        v23 = (uint64_t *)v17[1];
        ++v17;
        v18 = v23;
      }
    }
  }
  v24 = objc_alloc_init((Class)NSMutableArray);
  v25 = *(uint64_t **)(a1 + 184);
  v26 = *(uint64_t **)(a1 + 192);
  while (v25 != v26)
  {
    v27 = objc_alloc((Class)CLMiLoServiceQualityReason);
    v28 = *v25++;
    v29 = objc_msgSend(v27, "initWithQualityReasonEnum:", v28);
    objc_msgSend(v24, "addObject:", v29);

  }
  v30 = objc_msgSend(objc_alloc((Class)CLMiLoServiceQualityInfo), "initWithQuality:andReasons:", *(_QWORD *)(a1 + 176), v24);

  if (*(_BYTE *)(a1 + 144))
  {
    v31 = objc_alloc((Class)NSUUID);
    if (!*(_BYTE *)(a1 + 144))
      goto LABEL_27;
    v32 = objc_msgSend(v31, "initWithUUIDBytes:", a1 + 128);
  }
  else
  {
    v32 = 0;
  }
  v49 = v30;
  v48 = v32;
  if (*(_BYTE *)(a1 + 160))
  {
    v33 = objc_alloc((Class)CLMiLoLocationType);
    if (*(_BYTE *)(a1 + 160))
    {
      v46 = objc_msgSend(v33, "initWithLocationTypeEnum:", *(_QWORD *)(a1 + 152));
      goto LABEL_21;
    }
LABEL_27:
    sub_10028DF3C();
  }
  v46 = 0;
LABEL_21:
  v34 = objc_alloc((Class)NSError);
  v47 = objc_msgSend(v34, "initWithDomain:code:userInfo:", kCLErrorDomainPrivate, *(_QWORD *)(a1 + 168), 0);
  v35 = objc_alloc_init((Class)NSMutableArray);
  v36 = *(_QWORD *)(a1 + 216);
  if (*(_QWORD *)(a1 + 224) != v36)
  {
    v37 = *(_QWORD *)(a1 + 240);
    v38 = (_QWORD *)(v36 + 8 * (v37 >> 8));
    v39 = *v38 + 16 * v37;
    v40 = *(_QWORD *)(v36 + (((*(_QWORD *)(a1 + 248) + v37) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*(_BYTE *)(a1 + 248) + v37);
    while (v39 != v40)
    {
      v41 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", v39);
      objc_msgSend(v35, "addObject:", v41);

      v39 += 16;
      if (v39 - *v38 == 4096)
      {
        v42 = v38[1];
        ++v38;
        v39 = v42;
      }
    }
  }
  v43 = objc_msgSend(objc_alloc((Class)CLMiLoServiceMetaInfo), "initWithNumClustersLearnedInModel:numRecordingTriggersAtCurrentLOI:numInputValidFingerprints:numInputValidFingerprintsLabeled:numInputValidFingerprintsUnlabeled:numFingerprintsBeforePruning:numFingerprintsAfterPruning:numWiFiAccessPoints:numBLESources:numUWBSources:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 256)), +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 260)), +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 264)), +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:",
            *(unsigned int *)(a1 + 272)),
          +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 268)), +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 276)), +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 280)), +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 284)), +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 288)),
          +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 292)));
  v44 = objc_msgSend(objc_alloc((Class)CLMiLoServiceStatus), "initWithServiceState:suspendReasons:serviceDescriptor:currentLocationOfInterestUuid:currentLocationOfInterestType:error:serviceQualityInfo:places:metaInfo:", *(_QWORD *)a1, v14, v13, v48, v46, v47, v49, v35, v43);

  return v44;
}

void sub_100608144(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_10060FC7C(off_102148140, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1006081D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1006081EC(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  unint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  id v45;
  _QWORD *v46;
  id v47;
  id v48;
  id v50;
  _QWORD *v51;
  unint64_t v52;
  id v53;
  id v54;
  _QWORD *v55;
  id v56;

  v54 = objc_alloc_init((Class)NSMutableArray);
  v2 = a1[1];
  v51 = a1;
  if (a1[2] != v2)
  {
    v3 = a1[4];
    v4 = (_QWORD *)(v2 + 8 * (v3 / 0x49));
    v5 = (_QWORD *)(*v4 + 56 * (v3 % 0x49));
    v52 = *(_QWORD *)(v2 + 8 * ((a1[5] + v3) / 0x49)) + 56 * ((a1[5] + v3) % 0x49);
    while (v5 != (_QWORD *)v52)
    {
      v55 = v4;
      v6 = objc_alloc_init((Class)NSMutableArray);
      v7 = v5[1];
      if (v5[2] != v7)
      {
        v8 = v5[4];
        v9 = (_QWORD *)(v7 + 8 * (v8 >> 7));
        v10 = *v9 + 32 * (v8 & 0x7F);
        v11 = *(_QWORD *)(v7 + (((v5[5] + v8) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((v5[5] + v8) & 0x7F);
        while (v10 != v11)
        {
          v12 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", v10);
          v13 = objc_msgSend(objc_alloc((Class)CLMiLoPlace), "initWithPlaceIdentifier:score:confidence:placeMetadata:", v12, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v10 + 16)), *(_QWORD *)(v10 + 24), 0);

          objc_msgSend(v6, "addObject:", v13);
          v10 += 32;
          if (v10 - *v9 == 4096)
          {
            v14 = v9[1];
            ++v9;
            v10 = v14;
          }
        }
      }
      v15 = objc_msgSend(objc_alloc((Class)CLMiLoServicePlacePrediction), "initWithPlaces:serviceType:", v6, v5[6]);

      objc_msgSend(v54, "addObject:", v15);
      v5 += 7;
      v4 = v55;
      if ((_QWORD *)((char *)v5 - *v55) == (_QWORD *)4088)
      {
        v4 = v55 + 1;
        v5 = (_QWORD *)v55[1];
      }
    }
  }
  v16 = objc_alloc_init((Class)NSMutableArray);
  v17 = a1[13];
  if (a1[14] != v17)
  {
    v18 = a1[16];
    v19 = (_QWORD *)(v17 + 8 * (v18 / 0x66));
    v20 = *v19 + 40 * (v18 % 0x66);
    v21 = *(_QWORD *)(v17 + 8 * ((v51[17] + v18) / 0x66)) + 40 * ((v51[17] + v18) % 0x66);
    while (v20 != v21)
    {
      v22 = v20;
      if (*(char *)(v20 + 23) < 0)
        v22 = *(_QWORD *)v20;
      v23 = objc_msgSend(objc_alloc((Class)CLMiLoPredictionDeviceDistanceIndication), "initWithDeviceIdentifier:uwbRange:bleRSSI:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v22), +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v20 + 24)), +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v20 + 32)));
      objc_msgSend(v16, "addObject:", v23);

      v20 += 40;
      if (v20 - *v19 == 4080)
      {
        v24 = v19[1];
        ++v19;
        v20 = v24;
      }
    }
  }
  v56 = objc_msgSend(objc_alloc((Class)CLMiLoPredictionCloseDeviceList), "initWithCloseDeviceList:", v16);

  v25 = objc_alloc_init((Class)NSMutableArray);
  v26 = v51[7];
  if (v51[8] != v26)
  {
    v27 = v51[10];
    v28 = (_QWORD *)(v26 + 8 * (v27 >> 7));
    v29 = *v28 + 32 * (v27 & 0x7F);
    v30 = *(_QWORD *)(v26 + (((v51[11] + v27) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((v51[11] + v27) & 0x7F);
    while (v29 != v30)
    {
      v31 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", v29);
      v32 = objc_msgSend(objc_alloc((Class)CLMiLoPlace), "initWithPlaceIdentifier:score:confidence:placeMetadata:", v31, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v29 + 16)), *(_QWORD *)(v29 + 24), 0);

      objc_msgSend(v25, "addObject:", v32);
      v29 += 32;
      if (v29 - *v28 == 4096)
      {
        v33 = v28[1];
        ++v28;
        v29 = v33;
      }
    }
  }
  v53 = objc_msgSend(objc_alloc((Class)CLMiLoServicePredictionLocationSimilarityList), "initWithPlaces:", v25);

  v34 = objc_alloc((Class)NSError);
  v50 = objc_msgSend(v34, "initWithDomain:code:userInfo:", kCLErrorDomainPrivate, v51[18], 0);
  v35 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", v51 + 19);
  v36 = objc_alloc_init((Class)NSMutableArray);
  v37 = objc_alloc_init((Class)NSMutableArray);
  v38 = v51[23];
  if (v51[24] != v38)
  {
    v39 = v51[26];
    v40 = (_QWORD *)(v38 + 8 * (v39 >> 9));
    v41 = (_QWORD *)(*v40 + 8 * (v39 & 0x1FF));
    v42 = *(_QWORD *)(v38 + (((v51[27] + v39) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v51[27] + v39) & 0x1FF);
    while (v41 != (_QWORD *)v42)
    {
      v43 = objc_msgSend(objc_alloc((Class)CLMiLoPlaceConfidenceReason), "initWithConfidenceReasonEnum:", *v41);
      objc_msgSend(v36, "addObject:", v43);

      v44 = *v41;
      if (*v41 <= 7uLL && ((0xFBu >> v44) & 1) != 0)
      {
        v45 = objc_msgSend(objc_alloc((Class)CLMiLoFingerprintError), "initWithFingerprintErrorEnum:", qword_101BB7FA0[v44]);
        objc_msgSend(v37, "addObject:", v45);

      }
      if ((_QWORD *)((char *)++v41 - *v40) == (_QWORD *)4096)
      {
        v46 = (_QWORD *)v40[1];
        ++v40;
        v41 = v46;
      }
    }
  }
  v47 = objc_msgSend(objc_alloc((Class)CLMiLoFingerprintMetaInfo), "initWithNumWiFiAccessPoints:numBLESources:numUWBSources:requestIdentifier:errors:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v51 + 56)), +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v51 + 57)), +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v51 + 58)), v35, v37);

  v48 = objc_msgSend(objc_alloc((Class)CLMiLoPrediction), "initWithPlacePredictions:locationSimilarityList:closeDeviceList:error:requestIdentifier:predictionTime:confidence:placeConfidenceReasons:localizationFingerprintMetaInfo:", v54, v53, v56, v50, v35, +[NSDate date](NSDate, "date"), v51[21], v36, v47);
  return v48;
}

void sub_100608828(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_10060FC7C(off_102148148, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1006088BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1006088D0(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  NSString *v7;
  uint64_t v8;
  NSString *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;

  v2 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", a1 + 16);
  v3 = objc_alloc((Class)NSError);
  v4 = objc_msgSend(v3, "initWithDomain:code:userInfo:", kCLErrorDomainPrivate, *(_QWORD *)(a1 + 8), 0);
  if (*(_BYTE *)(a1 + 104))
  {
    v5 = objc_alloc((Class)CLMiLoExportDatabaseTableResult);
    if (*(char *)(a1 + 55) >= 0)
      v6 = a1 + 32;
    else
      v6 = *(_QWORD *)(a1 + 32);
    v7 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6);
    if (*(char *)(a1 + 79) >= 0)
      v8 = a1 + 56;
    else
      v8 = *(_QWORD *)(a1 + 56);
    v9 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8);
    v12 = *(_QWORD *)(a1 + 80);
    v11 = a1 + 80;
    v10 = v12;
    if (*(char *)(v11 + 23) >= 0)
      v13 = v11;
    else
      v13 = v10;
    v14 = objc_msgSend(v5, "initWithExportDir:fileName:sandboxExtensionTok:", v7, v9, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13));
  }
  else
  {
    v14 = 0;
  }
  v15 = objc_msgSend(objc_alloc((Class)CLMiLoDebugResponse), "initWithExportDatabaseTablesResult:requestIdentifier:error:", v14, v2, v4);

  return v15;
}

void sub_100608A08(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_10060FC7C(off_102148150, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100608A9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100608AB0(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_10060FC7C(off_102148158, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100608B44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100608B58(uint64_t *a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  _DWORD v14[2];
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  id v20;

  v2 = objc_alloc((Class)NSError);
  v3 = objc_msgSend(v2, "initWithDomain:code:userInfo:", kCLErrorDomainPrivate, a1[1], 0);
  v4 = objc_alloc((Class)CLMiLoGenericEventResponse);
  v5 = *a1;
  v6 = *((char *)a1 + 39);
  v9 = a1[2];
  v8 = a1 + 2;
  v7 = v9;
  if (v6 >= 0)
    v10 = (uint64_t)v8;
  else
    v10 = v7;
  v11 = objc_msgSend(v4, "initWithEventType:withDescription:withError:", v5, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10), v3);
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021480E0);
  v12 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    v14[0] = 68289538;
    v14[1] = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2050;
    v18 = objc_msgSend(v11, "eventType");
    v19 = 2082;
    v20 = objc_msgSend(objc_msgSend(v11, "genericEventDescription"), "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"created GenericEventResponse with\", \"EventType\":%{public}lu, \"Description\":%{public, location:escape_only}s}", (uint8_t *)v14, 0x26u);
  }

  return v11;
}

void sub_100608CDC(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_10060FC7C(&off_102148160, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100608D70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100608D84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t (***v39)();
  uint64_t v40;
  _QWORD *result;
  uint64_t v42;
  _QWORD v43[3];
  _QWORD *v44;
  _QWORD v45[3];
  _QWORD *v46;
  _QWORD v47[3];
  _QWORD *v48;
  _QWORD v49[3];
  _QWORD *v50;
  _QWORD v51[3];
  _QWORD *v52;
  _QWORD v53[3];
  _QWORD *v54;
  _QWORD v55[3];
  _QWORD *v56;
  _QWORD v57[3];
  _QWORD *v58;
  _QWORD v59[3];
  _QWORD *v60;
  _QWORD v61[3];
  _QWORD *v62;
  _QWORD v63[3];
  _QWORD *v64;
  _QWORD v65[3];
  _QWORD *v66;
  _QWORD v67[3];
  _QWORD *v68;
  _QWORD v69[3];
  _QWORD *v70;
  _QWORD v71[3];
  _QWORD *v72;
  _QWORD v73[3];
  _QWORD *v74;
  _QWORD v75[3];
  _QWORD *v76;
  uint64_t (**v77)();
  _QWORD v78[2];
  uint64_t (***v79)();
  _QWORD v80[3];
  _QWORD *v81;
  _QWORD v82[3];
  uint64_t v83;
  _QWORD v84[3];
  uint64_t v85;
  _QWORD v86[3];
  uint64_t v87;
  _QWORD v88[3];
  uint64_t v89;
  _QWORD v90[3];
  uint64_t v91;
  _QWORD v92[3];
  uint64_t v93;
  _QWORD v94[3];
  uint64_t v95;
  _QWORD v96[3];
  uint64_t v97;
  _QWORD v98[3];
  uint64_t v99;
  _QWORD v100[3];
  uint64_t v101;
  _QWORD v102[3];
  uint64_t v103;
  _QWORD v104[3];
  uint64_t v105;
  _QWORD v106[3];
  uint64_t v107;
  _QWORD v108[3];
  uint64_t v109;
  _QWORD v110[3];
  uint64_t v111;
  _QWORD v112[3];
  uint64_t v113;
  _QWORD v114[3];
  uint64_t v115;
  _QWORD v116[3];
  uint64_t v117;
  _QWORD v118[3];
  uint64_t v119;

  v80[0] = off_102148178;
  v80[1] = sub_100609AF8;
  v80[2] = 0;
  v81 = v80;
  sub_1015A2E04(v82, "kCLConnectionMessageMiLoServiceEvent");
  sub_10060E1E8((uint64_t)&v83, (uint64_t)v80);
  v77 = off_102148228;
  v78[0] = sub_100609C4C;
  v78[1] = 0;
  v79 = &v77;
  sub_1015A2E04(v84, "kCLConnectionMessageMiLoCreateService");
  sub_10060E1E8((uint64_t)&v85, (uint64_t)&v77);
  v75[0] = off_102148228;
  v75[1] = sub_10060A04C;
  v75[2] = 0;
  v76 = v75;
  sub_1015A2E04(v86, "kCLConnectionMessageMiLoDeleteService");
  sub_10060E1E8((uint64_t)&v87, (uint64_t)v75);
  v73[0] = off_102148228;
  v73[1] = sub_10060A2E8;
  v73[2] = 0;
  v74 = v73;
  sub_1015A2E04(v88, "kCLConnectionMessageMiLoQueryMyServices");
  sub_10060E1E8((uint64_t)&v89, (uint64_t)v73);
  v71[0] = off_102148228;
  v71[1] = sub_10060A4D0;
  v71[2] = 0;
  v72 = v71;
  sub_1015A2E04(v90, "kCLConnectionMessageMiLoConnectToService");
  sub_10060E1E8((uint64_t)&v91, (uint64_t)v71);
  v69[0] = off_102148228;
  v69[1] = sub_10060AAFC;
  v69[2] = 0;
  v70 = v69;
  sub_1015A2E04(v92, "kCLConnectionMessageMiLoDisconnectToService");
  sub_10060E1E8((uint64_t)&v93, (uint64_t)v69);
  v67[0] = off_102148228;
  v67[1] = sub_10060B5F4;
  v67[2] = 0;
  v68 = v67;
  sub_1015A2E04(v94, "kCLConnectionMessageMiLoSingleShotPrediction");
  sub_10060E1E8((uint64_t)&v95, (uint64_t)v67);
  v65[0] = off_102148228;
  v65[1] = sub_10060B890;
  v65[2] = 0;
  v66 = v65;
  sub_1015A2E04(v96, "kCLConnectionMessageRequestObservation");
  sub_10060E1E8((uint64_t)&v97, (uint64_t)v65);
  v63[0] = off_102148228;
  v63[1] = sub_10060BB48;
  v63[2] = 0;
  v64 = v63;
  sub_1015A2E04(v98, "kCLConnectionMessageLabelSignleObservation");
  sub_10060E1E8((uint64_t)&v99, (uint64_t)v63);
  v61[0] = off_102148228;
  v61[1] = sub_10060BE30;
  v61[2] = 0;
  v62 = v61;
  sub_1015A2E04(v100, "kCLConnectionMessageLabelObservationsBetweenDates");
  sub_10060E1E8((uint64_t)&v101, (uint64_t)v61);
  v59[0] = off_102148228;
  v59[1] = sub_10060C178;
  v59[2] = 0;
  v60 = v59;
  sub_1015A2E04(v102, "kCLConnectionMessageRemoveLabels");
  sub_10060E1E8((uint64_t)&v103, (uint64_t)v59);
  v57[0] = off_102148228;
  v57[1] = sub_10060C454;
  v57[2] = 0;
  v58 = v57;
  sub_1015A2E04(v104, "kCLConnectionMessageStartUpdatingMicroLocation");
  sub_10060E1E8((uint64_t)&v105, (uint64_t)v57);
  v55[0] = off_102148228;
  v55[1] = sub_10060C730;
  v55[2] = 0;
  v56 = v55;
  sub_1015A2E04(v106, "kCLConnectionMessageStopUpdatingMicroLocation");
  sub_10060E1E8((uint64_t)&v107, (uint64_t)v55);
  v53[0] = off_102148228;
  v53[1] = sub_10060C9DC;
  v53[2] = 0;
  v54 = v53;
  sub_1015A2E04(v108, "kCLConnectionMessageMiLoQueryConnectionStatus");
  sub_10060E1E8((uint64_t)&v109, (uint64_t)v53);
  v51[0] = off_102148228;
  v51[1] = sub_10060CB74;
  v51[2] = 0;
  v52 = v51;
  sub_1015A2E04(v110, "kCLConnectionMessageMiLoEnableMiLoAtCurrentLocation");
  sub_10060E1E8((uint64_t)&v111, (uint64_t)v51);
  v49[0] = off_102148228;
  v49[1] = sub_10060CDEC;
  v49[2] = 0;
  v50 = v49;
  sub_1015A2E04(v112, "kCLConnectionMessageRemoveCustomLOI");
  sub_10060E1E8((uint64_t)&v113, (uint64_t)v49);
  v47[0] = off_102148228;
  v47[1] = sub_10060D0A4;
  v47[2] = 0;
  v48 = v47;
  sub_1015A2E04(v114, "kCLConnectionMessageRequestModelLearning");
  sub_10060E1E8((uint64_t)&v115, (uint64_t)v47);
  v45[0] = off_102148228;
  v45[1] = sub_10060D5BC;
  v45[2] = 0;
  v46 = v45;
  sub_1015A2E04(v116, "kCLConnectionMessageRequestPurgeMiLoData");
  sub_10060E1E8((uint64_t)&v117, (uint64_t)v45);
  v43[0] = off_102148228;
  v43[1] = sub_10060DA9C;
  v43[2] = 0;
  v44 = v43;
  sub_1015A2E04(v118, "kCLConnectionMessageRequestMiLoExportDatabaseTables");
  sub_10060E1E8((uint64_t)&v119, (uint64_t)v43);
  sub_1006101E0(a1, (unsigned __int8 *)v82, 19);
  v2 = 133;
  do
  {
    v3 = (_QWORD *)v82[v2 - 1];
    if (&v80[v2] == v3)
    {
      v3 = &v80[v2];
      v4 = 4;
    }
    else
    {
      if (!v3)
        goto LABEL_7;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE((&v79)[v2]) < 0)
      operator delete((void *)v78[v2]);
    v2 -= 7;
  }
  while (v2 * 8);
  v5 = v44;
  if (v44 == v43)
  {
    v6 = 4;
    v5 = v43;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  else if (v44)
  {
    v6 = 5;
    goto LABEL_14;
  }
  v7 = v46;
  if (v46 == v45)
  {
    v8 = 4;
    v7 = v45;
LABEL_19:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  else if (v46)
  {
    v8 = 5;
    goto LABEL_19;
  }
  v9 = v48;
  if (v48 == v47)
  {
    v10 = 4;
    v9 = v47;
LABEL_24:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  else if (v48)
  {
    v10 = 5;
    goto LABEL_24;
  }
  v11 = v50;
  if (v50 == v49)
  {
    v12 = 4;
    v11 = v49;
LABEL_29:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  else if (v50)
  {
    v12 = 5;
    goto LABEL_29;
  }
  v13 = v52;
  if (v52 == v51)
  {
    v14 = 4;
    v13 = v51;
LABEL_34:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  else if (v52)
  {
    v14 = 5;
    goto LABEL_34;
  }
  v15 = v54;
  if (v54 == v53)
  {
    v16 = 4;
    v15 = v53;
LABEL_39:
    (*(void (**)(void))(*v15 + 8 * v16))();
  }
  else if (v54)
  {
    v16 = 5;
    goto LABEL_39;
  }
  v17 = v56;
  if (v56 == v55)
  {
    v18 = 4;
    v17 = v55;
LABEL_44:
    (*(void (**)(void))(*v17 + 8 * v18))();
  }
  else if (v56)
  {
    v18 = 5;
    goto LABEL_44;
  }
  v19 = v58;
  if (v58 == v57)
  {
    v20 = 4;
    v19 = v57;
LABEL_49:
    (*(void (**)(void))(*v19 + 8 * v20))();
  }
  else if (v58)
  {
    v20 = 5;
    goto LABEL_49;
  }
  v21 = v60;
  if (v60 == v59)
  {
    v22 = 4;
    v21 = v59;
LABEL_54:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
  else if (v60)
  {
    v22 = 5;
    goto LABEL_54;
  }
  v23 = v62;
  if (v62 == v61)
  {
    v24 = 4;
    v23 = v61;
LABEL_59:
    (*(void (**)(void))(*v23 + 8 * v24))();
  }
  else if (v62)
  {
    v24 = 5;
    goto LABEL_59;
  }
  v25 = v64;
  if (v64 == v63)
  {
    v26 = 4;
    v25 = v63;
LABEL_64:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
  else if (v64)
  {
    v26 = 5;
    goto LABEL_64;
  }
  v27 = v66;
  if (v66 == v65)
  {
    v28 = 4;
    v27 = v65;
LABEL_69:
    (*(void (**)(void))(*v27 + 8 * v28))();
  }
  else if (v66)
  {
    v28 = 5;
    goto LABEL_69;
  }
  v29 = v68;
  if (v68 == v67)
  {
    v30 = 4;
    v29 = v67;
LABEL_74:
    (*(void (**)(void))(*v29 + 8 * v30))();
  }
  else if (v68)
  {
    v30 = 5;
    goto LABEL_74;
  }
  v31 = v70;
  if (v70 == v69)
  {
    v32 = 4;
    v31 = v69;
LABEL_79:
    (*(void (**)(void))(*v31 + 8 * v32))();
  }
  else if (v70)
  {
    v32 = 5;
    goto LABEL_79;
  }
  v33 = v72;
  if (v72 == v71)
  {
    v34 = 4;
    v33 = v71;
LABEL_84:
    (*(void (**)(void))(*v33 + 8 * v34))();
  }
  else if (v72)
  {
    v34 = 5;
    goto LABEL_84;
  }
  v35 = v74;
  if (v74 == v73)
  {
    v36 = 4;
    v35 = v73;
LABEL_89:
    (*(void (**)(void))(*v35 + 8 * v36))();
  }
  else if (v74)
  {
    v36 = 5;
    goto LABEL_89;
  }
  v37 = v76;
  if (v76 == v75)
  {
    v38 = 4;
    v37 = v75;
LABEL_94:
    (*(void (**)(void))(*v37 + 8 * v38))();
  }
  else if (v76)
  {
    v38 = 5;
    goto LABEL_94;
  }
  v39 = v79;
  if (v79 == &v77)
  {
    v40 = 4;
    v39 = &v77;
LABEL_99:
    (*v39)[v40]();
  }
  else if (v79)
  {
    v40 = 5;
    goto LABEL_99;
  }
  result = v81;
  if (v81 == v80)
  {
    v42 = 4;
    result = v80;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v42))();
  }
  else if (v81)
  {
    v42 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v42))();
  }
  return result;
}

void sub_10060962C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, char *a20,char a21,uint64_t a22,uint64_t a23,char *a24,char a25,uint64_t a26,uint64_t a27,char *a28,char a29,uint64_t a30,uint64_t a31,char *a32,char a33,uint64_t a34,uint64_t a35,char *a36,char a37,uint64_t a38,uint64_t a39,char *a40,char a41,uint64_t a42,uint64_t a43,char *a44,char a45,uint64_t a46,uint64_t a47,char *a48,char a49,uint64_t a50,uint64_t a51,char *a52,char a53,uint64_t a54,uint64_t a55,char *a56,char a57,uint64_t a58,uint64_t a59,char *a60,char a61,uint64_t a62,uint64_t a63)
{
  char *a64;
  char a65;
  char *a68;
  char a69;
  char *a72;
  uint64_t i;
  uint64_t *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  unint64_t *v106;
  uint64_t v107;
  unint64_t *v108;
  uint64_t v109;
  unint64_t *v110;
  uint64_t v111;

  for (i = 1008; i != -56; i -= 56)
    sub_1004E21A4((uint64_t)&STACK[0x260] + i);
  v74 = a12;
  if (a12 == &a9)
  {
    v75 = 4;
    v74 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_8;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_8:
  v76 = a16;
  if (a16 == &a13)
  {
    v77 = 4;
    v76 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_13;
    v77 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v76 + 8 * v77))();
LABEL_13:
  v78 = a20;
  if (a20 == &a17)
  {
    v79 = 4;
    v78 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_18;
    v79 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v78 + 8 * v79))();
LABEL_18:
  v80 = a24;
  if (a24 == &a21)
  {
    v81 = 4;
    v80 = &a21;
  }
  else
  {
    if (!a24)
      goto LABEL_23;
    v81 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v80 + 8 * v81))();
LABEL_23:
  v82 = a28;
  if (a28 == &a25)
  {
    v83 = 4;
    v82 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_28;
    v83 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v82 + 8 * v83))();
LABEL_28:
  v84 = a32;
  if (a32 == &a29)
  {
    v85 = 4;
    v84 = &a29;
  }
  else
  {
    if (!a32)
      goto LABEL_33;
    v85 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v84 + 8 * v85))();
LABEL_33:
  v86 = a36;
  if (a36 == &a33)
  {
    v87 = 4;
    v86 = &a33;
  }
  else
  {
    if (!a36)
      goto LABEL_38;
    v87 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v86 + 8 * v87))();
LABEL_38:
  v88 = a40;
  if (a40 == &a37)
  {
    v89 = 4;
    v88 = &a37;
  }
  else
  {
    if (!a40)
      goto LABEL_43;
    v89 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v88 + 8 * v89))();
LABEL_43:
  v90 = a44;
  if (a44 == &a41)
  {
    v91 = 4;
    v90 = &a41;
  }
  else
  {
    if (!a44)
      goto LABEL_48;
    v91 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v90 + 8 * v91))();
LABEL_48:
  v92 = a48;
  if (a48 == &a45)
  {
    v93 = 4;
    v92 = &a45;
  }
  else
  {
    if (!a48)
      goto LABEL_53;
    v93 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v92 + 8 * v93))();
LABEL_53:
  v94 = a52;
  if (a52 == &a49)
  {
    v95 = 4;
    v94 = &a49;
  }
  else
  {
    if (!a52)
      goto LABEL_58;
    v95 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v94 + 8 * v95))();
LABEL_58:
  v96 = a56;
  if (a56 == &a53)
  {
    v97 = 4;
    v96 = &a53;
  }
  else
  {
    if (!a56)
      goto LABEL_63;
    v97 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v96 + 8 * v97))();
LABEL_63:
  v98 = a60;
  if (a60 == &a57)
  {
    v99 = 4;
    v98 = &a57;
  }
  else
  {
    if (!a60)
      goto LABEL_68;
    v99 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v98 + 8 * v99))();
LABEL_68:
  v100 = a64;
  if (a64 == &a61)
  {
    v101 = 4;
    v100 = &a61;
  }
  else
  {
    if (!a64)
      goto LABEL_73;
    v101 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v100 + 8 * v101))();
LABEL_73:
  v102 = a68;
  if (a68 == &a65)
  {
    v103 = 4;
    v102 = &a65;
  }
  else
  {
    if (!a68)
      goto LABEL_78;
    v103 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v102 + 8 * v103))();
LABEL_78:
  v104 = a72;
  if (a72 == &a69)
  {
    v105 = 4;
    v104 = &a69;
  }
  else
  {
    if (!a72)
      goto LABEL_83;
    v105 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v104 + 8 * v105))();
LABEL_83:
  v106 = (unint64_t *)STACK[0x218];
  if ((unint64_t *)STACK[0x218] == &STACK[0x200])
  {
    v107 = 4;
    v106 = &STACK[0x200];
  }
  else
  {
    if (!v106)
      goto LABEL_88;
    v107 = 5;
  }
  (*(void (**)(void))(*v106 + 8 * v107))();
LABEL_88:
  v108 = (unint64_t *)STACK[0x238];
  if ((unint64_t *)STACK[0x238] == &STACK[0x220])
  {
    v109 = 4;
    v108 = &STACK[0x220];
  }
  else
  {
    if (!v108)
      goto LABEL_93;
    v109 = 5;
  }
  (*(void (**)(void))(*v108 + 8 * v109))();
LABEL_93:
  v110 = (unint64_t *)STACK[0x258];
  if ((unint64_t *)STACK[0x258] == &STACK[0x240])
  {
    v111 = 4;
    v110 = &STACK[0x240];
  }
  else
  {
    if (!v110)
      goto LABEL_98;
    v111 = 5;
  }
  (*(void (**)(void))(*v110 + 8 * v111))();
LABEL_98:
  _Unwind_Resume(a1);
}

void sub_100609A4C()
{
  JUMPOUT(0x10060977CLL);
}

void sub_100609A58()
{
  JUMPOUT(0x1006097ACLL);
}

void sub_100609A64()
{
  JUMPOUT(0x1006097DCLL);
}

void sub_100609A70()
{
  JUMPOUT(0x10060980CLL);
}

void sub_100609A7C()
{
  JUMPOUT(0x10060983CLL);
}

void sub_100609A88()
{
  JUMPOUT(0x10060986CLL);
}

void sub_100609A94()
{
  JUMPOUT(0x10060989CLL);
}

void sub_100609AA0()
{
  JUMPOUT(0x1006098CCLL);
}

void sub_100609AAC()
{
  JUMPOUT(0x1006098FCLL);
}

void sub_100609AB8()
{
  JUMPOUT(0x10060992CLL);
}

void sub_100609AC4()
{
  JUMPOUT(0x10060995CLL);
}

void sub_100609AD0()
{
  JUMPOUT(0x10060998CLL);
}

void sub_100609ADC()
{
  JUMPOUT(0x1006099BCLL);
}

void sub_100609AE8()
{
  JUMPOUT(0x1006099ECLL);
}

uint64_t sub_100609AF8(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021480E0);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 1026;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"modifying subscription for kCLConnectionMessageMiLoServiceEvent and kCLConnectionMessageMiLoPredictionEventUpdate\", \"subscribe?\":%{public}hhd}", (uint8_t *)v6, 0x18u);
  }
  sub_1001A638C(a1);
  sub_1001A638C(a1);
  sub_1001A638C(a1);
  sub_1001A638C(a1);
  return sub_1001A638C(a1);
}

uint64_t sub_100609C4C(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSSet *v8;
  void *DictionaryOfClasses;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  _QWORD *v17;
  void *v18;
  NSString *v19;
  id v20;
  _QWORD *v21;
  CLConnectionMessage *v22;
  CLConnectionMessage *v24;
  CLConnectionMessage *v25;
  const __CFString *v26;
  _UNKNOWN **v27;
  _QWORD v28[2];
  _QWORD v29[2];
  _QWORD v30[2];
  _QWORD v31[2];
  uint8_t buf[8];
  __int16 v33;
  const char *v34;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021480E0);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    v33 = 2082;
    v34 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageMiLoCreateService received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  *(_QWORD *)buf = 0;
  if ((sub_10060DFAC(a1, (uint64_t *)buf) & 1) != 0)
  {
    v6 = objc_opt_class(NSNumber, v5);
    v8 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v6, objc_opt_class(NSData, v7), 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v8);
    v10 = DictionaryOfClasses;
    if (DictionaryOfClasses
      && objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionServiceTypeKey"))
      && objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionLocationTypesKey")))
    {
      v11 = objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionServiceTypeKey"));
      v12 = objc_msgSend(objc_alloc((Class)NSKeyedUnarchiver), "initForReadingFromData:error:", objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionLocationTypesKey")), 0);
      v14 = objc_opt_class(NSArray, v13);
      v16 = objc_msgSend(v12, "decodeObjectOfClasses:forKey:", +[NSSet setWithObjects:](NSSet, "setWithObjects:", v14, objc_opt_class(CLMiLoLocationType, v15), 0), NSKeyedArchiveRootObjectKey);
      objc_msgSend(v12, "finishDecoding");
      v17 = (_QWORD *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0)
        v17 = (_QWORD *)*v17;
      v18 = *(void **)(a1 + 64);
      v19 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v17);
      v20 = objc_msgSend(v11, "integerValue");
      v21 = (_QWORD *)(a1 + 112);
      if (*(char *)(a1 + 135) < 0)
        v21 = (_QWORD *)*v21;
      objc_msgSend(v18, "createServiceForClient:withServiceType:locationTypes:connectionToken:forUser:", v19, v20, v16, *(_QWORD *)(a1 + 72), +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v21));
      v22 = *a2;
      v26 = CFSTR("CLMiLoConnectionReturnCode");
      v27 = &off_10221B330;
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1);
      return CLConnectionMessage::sendReply(v22);
    }
    else
    {
      v25 = *a2;
      v28[0] = CFSTR("CLMiLoConnectionReturnCode");
      v28[1] = CFSTR("CLMiLoConnectionErrorMessage");
      v29[0] = &off_10221B300;
      v29[1] = &off_10221B318;
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v29, v28, 2);
      return CLConnectionMessage::sendReply(v25);
    }
  }
  else
  {
    v24 = *a2;
    v31[0] = &off_10221B300;
    v30[0] = CFSTR("CLMiLoConnectionReturnCode");
    v30[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v31[1] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)buf);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v31, v30, 2);
    return CLConnectionMessage::sendReply(v24);
  }
}

void sub_100609FE4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_10060A04C(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  uint64_t v5;
  NSSet *v6;
  void *DictionaryOfClasses;
  void *v8;
  id v9;
  _QWORD *v10;
  NSString *v11;
  _QWORD *v12;
  CLConnectionMessage *v13;
  _UNKNOWN ***v14;
  const __CFString **v15;
  uint64_t v16;
  const __CFString *v18;
  _UNKNOWN **v19;
  _QWORD v20[2];
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[2];
  uint8_t buf[8];
  __int16 v25;
  const char *v26;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021480E0);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    v25 = 2082;
    v26 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"kCLConnectionMessageMiLoDeleteService received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  *(_QWORD *)buf = 0;
  if ((sub_10060DFAC(a1, (uint64_t *)buf) & 1) == 0)
  {
    v13 = *a2;
    v23[0] = &off_10221B348;
    v22[0] = CFSTR("CLMiLoConnectionReturnCode");
    v22[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v23[1] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)buf);
    v14 = (_UNKNOWN ***)v23;
    v15 = (const __CFString **)v22;
LABEL_15:
    v16 = 2;
    goto LABEL_16;
  }
  v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, v5), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
  if (!DictionaryOfClasses
    || (v8 = DictionaryOfClasses,
        !objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionServiceIdentifier"))))
  {
    v13 = *a2;
    v20[0] = CFSTR("CLMiLoConnectionReturnCode");
    v20[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v21[0] = &off_10221B348;
    v21[1] = &off_10221B318;
    v14 = (_UNKNOWN ***)v21;
    v15 = (const __CFString **)v20;
    goto LABEL_15;
  }
  v9 = objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionServiceIdentifier"));
  v10 = (_QWORD *)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    v10 = (_QWORD *)*v10;
  v11 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10);
  v12 = (_QWORD *)(a1 + 112);
  if (*(char *)(a1 + 135) < 0)
    v12 = (_QWORD *)*v12;
  objc_msgSend(*(id *)(a1 + 64), "deleteServiceForClient:withServiceIdentifier:withConnectionToken:forUser:", v11, v9, *(_QWORD *)(a1 + 72), +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  v13 = *a2;
  v18 = CFSTR("CLMiLoConnectionReturnCode");
  v19 = &off_10221B330;
  v14 = &v19;
  v15 = &v18;
  v16 = 1;
LABEL_16:
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v14, v15, v16);
  return CLConnectionMessage::sendReply(v13);
}

uint64_t sub_10060A2E8(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  _QWORD *v5;
  NSString *v6;
  _QWORD *v7;
  uint64_t v8;
  _UNKNOWN ***v9;
  const __CFString **v10;
  uint64_t v11;
  const __CFString *v13;
  _UNKNOWN **v14;
  _QWORD v15[2];
  _QWORD v16[2];
  uint8_t buf[8];
  __int16 v18;
  const char *v19;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021480E0);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    v18 = 2082;
    v19 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"kCLConnectionMessageMiLoQueryMyServices received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  *(_QWORD *)buf = 0;
  if ((sub_10060DFAC(a1, (uint64_t *)buf) & 1) != 0)
  {
    v5 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v5 = (_QWORD *)*v5;
    v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5);
    v7 = (_QWORD *)(a1 + 112);
    if (*(char *)(a1 + 135) < 0)
      v7 = (_QWORD *)*v7;
    objc_msgSend(*(id *)(a1 + 64), "queryServicesForClient:withConnectionToken:forUser:", v6, *(_QWORD *)(a1 + 72), +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7));
    v8 = *a2;
    v13 = CFSTR("CLMiLoConnectionReturnCode");
    v14 = &off_10221B330;
    v9 = &v14;
    v10 = &v13;
    v11 = 1;
  }
  else
  {
    v8 = *a2;
    v16[0] = &off_10221B360;
    v15[0] = CFSTR("CLMiLoConnectionReturnCode");
    v15[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v16[1] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)buf);
    v9 = (_UNKNOWN ***)v16;
    v10 = (const __CFString **)v15;
    v11 = 2;
  }
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v9, v10, v11, v13, v14);
  return CLConnectionMessage::sendReply(v8);
}

void sub_10060A4D0(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  uint64_t v5;
  NSSet *v6;
  void *DictionaryOfClasses;
  void *v8;
  id v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  id v13;
  id v14;
  NSObject *v15;
  uint64_t v16;
  id v17;
  id v18;
  CLConnectionMessage *v19;
  _UNKNOWN ***v20;
  const __CFString **v21;
  uint64_t v22;
  CLConnectionMessage *v23;
  NSObject *v24;
  const char *v25;
  _QWORD *v26;
  NSString *v27;
  NSObject *v28;
  const char *v29;
  id v30;
  _QWORD *v31;
  uint64_t v32;
  const __CFString *v33;
  _UNKNOWN **v34;
  _QWORD v35[2];
  _QWORD v36[2];
  uint8_t buf[4];
  int v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  _BYTE v42[18];
  __int16 v43;
  id v44;
  _QWORD v45[2];
  _QWORD v46[2];
  _QWORD v47[2];
  _QWORD v48[2];

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021480E0);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    v38 = 0;
    v39 = 2082;
    v40 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"kCLConnectionMessageMiLoConnectToService received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  v32 = 0;
  if ((sub_10060DFAC(a1, &v32) & 1) == 0)
  {
    v19 = *a2;
    v48[0] = &off_10221B378;
    v47[0] = CFSTR("CLMiLoConnectionReturnCode");
    v47[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v48[1] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v32);
    v20 = (_UNKNOWN ***)v48;
    v21 = (const __CFString **)v47;
    goto LABEL_18;
  }
  v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, v5), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
  v8 = DictionaryOfClasses;
  if (DictionaryOfClasses
    && objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionServiceIdentifier")))
  {
    v9 = objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionServiceIdentifier"));
    v10 = v9;
    if (!*(_QWORD *)(a1 + 80))
    {
      *(_QWORD *)(a1 + 80) = objc_msgSend(v9, "copy");
      v26 = (_QWORD *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0)
        v26 = (_QWORD *)*v26;
      v27 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v26);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_1021480E0);
      v28 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
      {
        v29 = -[NSString UTF8String](v27, "UTF8String");
        v30 = objc_msgSend(objc_msgSend(v10, "UUIDString"), "UTF8String");
        *(_DWORD *)buf = 68289539;
        v38 = 0;
        v39 = 2082;
        v40 = "";
        v41 = 2081;
        *(_QWORD *)v42 = v29;
        *(_WORD *)&v42[8] = 2081;
        *(_QWORD *)&v42[10] = v30;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoConnectionSubscription::handleConnectToService, connecting to service\", \"clientId\":%{private, location:escape_only}s, \"serviceIdentifier\":%{private, location:escape_only}s}", buf, 0x26u);
      }
      v31 = (_QWORD *)(a1 + 112);
      if (*(char *)(a1 + 135) < 0)
        v31 = (_QWORD *)*v31;
      objc_msgSend(*(id *)(a1 + 64), "connectToServiceForClient:withServiceIdentifier:withConnectionToken:forUser:", v27, v10, *(_QWORD *)(a1 + 72), +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v31));
      v19 = *a2;
      v33 = CFSTR("CLMiLoConnectionReturnCode");
      v34 = &off_10221B330;
      v20 = &v34;
      v21 = &v33;
      v22 = 1;
      goto LABEL_19;
    }
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_1021480E0);
    v11 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
    {
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
      v13 = objc_msgSend(objc_msgSend(v10, "UUIDString"), "UTF8String");
      v14 = objc_msgSend(objc_msgSend(*(id *)(a1 + 80), "UUIDString"), "UTF8String");
      *(_DWORD *)buf = 68289794;
      v38 = 0;
      v39 = 2082;
      v40 = "";
      v41 = 2082;
      *(_QWORD *)v42 = v12;
      *(_WORD *)&v42[8] = 2082;
      *(_QWORD *)&v42[10] = v13;
      v43 = 2082;
      v44 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"connect to service failed, already has an active connection\", \"class\":%{public, location:escape_only}s, \"requestedServiceIdentifierToConnect\":%{public, location:escape_only}s, \"activeConnectionServiceIdentifier\":%{public, location:escape_only}s}", buf, 0x30u);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_1021480E0);
    }
    v15 = qword_1022A00F8;
    if (os_signpost_enabled((os_log_t)qword_1022A00F8))
    {
      v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
      v17 = objc_msgSend(objc_msgSend(v10, "UUIDString"), "UTF8String");
      v18 = objc_msgSend(objc_msgSend(*(id *)(a1 + 80), "UUIDString"), "UTF8String");
      *(_DWORD *)buf = 68289794;
      v38 = 0;
      v39 = 2082;
      v40 = "";
      v41 = 2082;
      *(_QWORD *)v42 = v16;
      *(_WORD *)&v42[8] = 2082;
      *(_QWORD *)&v42[10] = v17;
      v43 = 2082;
      v44 = v18;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "connect to service failed, already has an active connection", "{\"msg%{public}.0s\":\"connect to service failed, already has an active connection\", \"class\":%{public, location:escape_only}s, \"requestedServiceIdentifierToConnect\":%{public, location:escape_only}s, \"activeConnectionServiceIdentifier\":%{public, location:escape_only}s}", buf, 0x30u);
    }
    v19 = *a2;
    v35[0] = CFSTR("CLMiLoConnectionReturnCode");
    v35[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v36[0] = &off_10221B378;
    v36[1] = &off_10221B390;
    v20 = (_UNKNOWN ***)v36;
    v21 = (const __CFString **)v35;
LABEL_18:
    v22 = 2;
LABEL_19:
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v20, v21, v22);
    CLConnectionMessage::sendReply(v19);
    return;
  }
  v23 = *a2;
  v45[0] = CFSTR("CLMiLoConnectionReturnCode");
  v45[1] = CFSTR("CLMiLoConnectionErrorMessage");
  v46[0] = &off_10221B378;
  v46[1] = &off_10221B318;
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v46, v45, 2);
  CLConnectionMessage::sendReply(v23);
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021480E0);
  v24 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    if (objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionServiceIdentifier")))
      v25 = (const char *)objc_msgSend(objc_msgSend(objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionServiceIdentifier")), "UUIDString"), "UTF8String");
    else
      v25 = "";
    *(_DWORD *)buf = 68289538;
    v38 = 0;
    v39 = 2082;
    v40 = "";
    v41 = 1026;
    *(_DWORD *)v42 = v8 != 0;
    *(_WORD *)&v42[4] = 2082;
    *(_QWORD *)&v42[6] = v25;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"handleConnectToService, mesasge info missing\", \"hasDictionary\":%{public}hhd, \"serviceIdentifier\":%{public, location:escape_only}s}", buf, 0x22u);
  }
}

uint64_t sub_10060AAFC(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  uint64_t v5;
  NSSet *v6;
  void *DictionaryOfClasses;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  NSString *v13;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  CLConnectionMessage *v21;
  _UNKNOWN ***v22;
  const __CFString **v23;
  NSObject *v24;
  uint64_t v25;
  objc_class *v26;
  const char *v27;
  const char *v28;
  NSObject *v29;
  uint64_t v30;
  const char *v31;
  NSObject *v32;
  uint64_t v33;
  const char *v34;
  NSObject *v35;
  uint64_t v36;
  objc_class *v37;
  const char *v38;
  const char *v39;
  NSObject *v40;
  uint64_t v41;
  objc_class *v42;
  const char *v43;
  const char *v44;
  _QWORD *v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  objc_class *v49;
  const char *v50;
  const char *v51;
  NSObject *v53;
  uint64_t v54;
  const char *v55;
  id v56;
  NSObject *v57;
  uint64_t v58;
  const char *v59;
  id v60;
  uint64_t v61;
  const __CFString *v62;
  _UNKNOWN **v63;
  _QWORD v64[2];
  _QWORD v65[2];
  uint8_t buf[4];
  int v67;
  __int16 v68;
  const char *v69;
  __int16 v70;
  const char *v71;
  __int16 v72;
  const char *v73;
  __int16 v74;
  id v75;
  const __CFString *v76;
  _UNKNOWN **v77;
  _QWORD v78[2];
  _QWORD v79[2];
  _QWORD v80[2];
  _QWORD v81[2];
  _QWORD v82[2];
  _QWORD v83[2];
  _QWORD v84[2];
  _QWORD v85[2];

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021480E0);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    v67 = 0;
    v68 = 2082;
    v69 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"kCLConnectionMessageMiLoDisconnectToService received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  v61 = 0;
  if ((sub_10060DFAC(a1, &v61) & 1) == 0)
  {
    v21 = *a2;
    v85[0] = &off_10221B3A8;
    v84[0] = CFSTR("CLMiLoConnectionReturnCode");
    v84[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v85[1] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v61);
    v22 = (_UNKNOWN ***)v85;
    v23 = (const __CFString **)v84;
LABEL_56:
    v46 = 2;
    goto LABEL_57;
  }
  v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, v5), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
  if (!DictionaryOfClasses
    || (v8 = DictionaryOfClasses,
        !objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionServiceIdentifier"))))
  {
    v21 = *a2;
    v82[0] = CFSTR("CLMiLoConnectionReturnCode");
    v82[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v83[0] = &off_10221B3A8;
    v83[1] = &off_10221B318;
    v22 = (_UNKNOWN ***)v83;
    v23 = (const __CFString **)v82;
    goto LABEL_56;
  }
  v9 = objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionServiceIdentifier"));
  v11 = objc_opt_class(NSUUID, v10);
  if ((objc_opt_isKindOfClass(v9, v11) & 1) == 0)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_1021480E0);
    v24 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
    {
      v26 = (objc_class *)objc_opt_class(v9, v25);
      v27 = -[NSString UTF8String](NSStringFromClass(v26), "UTF8String");
      v28 = (objc_opt_respondsToSelector(*(_QWORD *)(a1 + 80), "UUIDString") & 1) != 0
          ? (const char *)objc_msgSend(objc_msgSend(*(id *)(a1 + 80), "UUIDString"), "UTF8String")
          : "not available";
      *(_DWORD *)buf = 68289538;
      v67 = 0;
      v68 = 2082;
      v69 = "";
      v70 = 2082;
      v71 = v27;
      v72 = 2082;
      v73 = v28;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"disconnect to service failed, requested service identifier to disconnect is not a NSUUID object\", \"class of requested service identifier to disconnect\":%{public, location:escape_only}s, \"connected service identifier\":%{public, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_1021480E0);
    }
    v47 = qword_1022A00F8;
    if (os_signpost_enabled((os_log_t)qword_1022A00F8))
    {
      v49 = (objc_class *)objc_opt_class(v9, v48);
      v50 = -[NSString UTF8String](NSStringFromClass(v49), "UTF8String");
      if ((objc_opt_respondsToSelector(*(_QWORD *)(a1 + 80), "UUIDString") & 1) != 0)
        v51 = (const char *)objc_msgSend(objc_msgSend(*(id *)(a1 + 80), "UUIDString"), "UTF8String");
      else
        v51 = "not available";
      *(_DWORD *)buf = 68289538;
      v67 = 0;
      v68 = 2082;
      v69 = "";
      v70 = 2082;
      v71 = v50;
      v72 = 2082;
      v73 = v51;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v47, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "disconnect to service failed, requested service identifier to disconnect is not a NSUUID object", "{\"msg%{public}.0s\":\"disconnect to service failed, requested service identifier to disconnect is not a NSUUID object\", \"class of requested service identifier to disconnect\":%{public, location:escape_only}s, \"connected service identifier\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    v21 = *a2;
    v80[0] = CFSTR("CLMiLoConnectionReturnCode");
    v80[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v81[0] = &off_10221B378;
    v81[1] = &off_10221B3C0;
    v22 = (_UNKNOWN ***)v81;
    v23 = (const __CFString **)v80;
    goto LABEL_56;
  }
  v12 = (_QWORD *)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    v12 = (_QWORD *)*v12;
  v13 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12);
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021480E0);
  v14 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    v16 = -[NSString UTF8String](v13, "UTF8String");
    v17 = (const char *)objc_msgSend(objc_msgSend(v9, "UUIDString"), "UTF8String");
    *(_DWORD *)buf = 68289539;
    v67 = 0;
    v68 = 2082;
    v69 = "";
    v70 = 2081;
    v71 = v16;
    v72 = 2081;
    v73 = v17;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoConnectionSubscription::handleDisconnectToService, disconnecting\", \"clientId\":%{private, location:escape_only}s, \"serviceIdentifier\":%{private, location:escape_only}s}", buf, 0x26u);
  }
  v18 = *(_QWORD *)(a1 + 80);
  if (!v18)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_1021480E0);
    v29 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
    {
      v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
      v31 = (const char *)objc_msgSend(objc_msgSend(v9, "UUIDString"), "UTF8String");
      *(_DWORD *)buf = 68289538;
      v67 = 0;
      v68 = 2082;
      v69 = "";
      v70 = 2082;
      v71 = (const char *)v30;
      v72 = 2082;
      v73 = v31;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"disconnect to service failed, doesn't have an active connection\", \"class\":%{public, location:escape_only}s, \"requested service identifier to disconnect\":%{public, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_1021480E0);
    }
    v32 = qword_1022A00F8;
    if (os_signpost_enabled((os_log_t)qword_1022A00F8))
    {
      v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
      v34 = (const char *)objc_msgSend(objc_msgSend(v9, "UUIDString"), "UTF8String");
      *(_DWORD *)buf = 68289538;
      v67 = 0;
      v68 = 2082;
      v69 = "";
      v70 = 2082;
      v71 = (const char *)v33;
      v72 = 2082;
      v73 = v34;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v32, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "disconnect to service failed, doesn't have an active connection", "{\"msg%{public}.0s\":\"disconnect to service failed, doesn't have an active connection\", \"class\":%{public, location:escape_only}s, \"requested service identifier to disconnect\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    v21 = *a2;
    v78[0] = CFSTR("CLMiLoConnectionReturnCode");
    v78[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v79[0] = &off_10221B378;
    v79[1] = &off_10221B3D8;
    v22 = (_UNKNOWN ***)v79;
    v23 = (const __CFString **)v78;
    goto LABEL_56;
  }
  v19 = objc_opt_class(NSUUID, v15);
  if ((objc_opt_isKindOfClass(v18, v19) & 1) == 0)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_1021480E0);
    v35 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
    {
      v37 = (objc_class *)objc_opt_class(*(_QWORD *)(a1 + 80), v36);
      v38 = -[NSString UTF8String](NSStringFromClass(v37), "UTF8String");
      v39 = (const char *)objc_msgSend(objc_msgSend(v9, "UUIDString"), "UTF8String");
      *(_DWORD *)buf = 68289538;
      v67 = 0;
      v68 = 2082;
      v69 = "";
      v70 = 2082;
      v71 = v38;
      v72 = 2082;
      v73 = v39;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"disconnect to service, connected service identifier is not a NSUUID object\", \"class of connected service identifier\":%{public, location:escape_only}s, \"requested service identifier to disconnect\":%{public, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_1021480E0);
    }
    v40 = qword_1022A00F8;
    if (os_signpost_enabled((os_log_t)qword_1022A00F8))
    {
      v42 = (objc_class *)objc_opt_class(*(_QWORD *)(a1 + 80), v41);
      v43 = -[NSString UTF8String](NSStringFromClass(v42), "UTF8String");
      v44 = (const char *)objc_msgSend(objc_msgSend(v9, "UUIDString"), "UTF8String");
      *(_DWORD *)buf = 68289538;
      v67 = 0;
      v68 = 2082;
      v69 = "";
      v70 = 2082;
      v71 = v43;
      v72 = 2082;
      v73 = v44;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v40, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "disconnect to service, connected service identifier is not a NSUUID object", "{\"msg%{public}.0s\":\"disconnect to service, connected service identifier is not a NSUUID object\", \"class of connected service identifier\":%{public, location:escape_only}s, \"requested service identifier to disconnect\":%{public, location:escape_only}s}", buf, 0x26u);
    }

    *(_QWORD *)(a1 + 80) = 0;
    v45 = (_QWORD *)(a1 + 112);
    if (*(char *)(a1 + 135) < 0)
      v45 = (_QWORD *)*v45;
    objc_msgSend(*(id *)(a1 + 64), "disconnectToServiceForClient:withServiceIdentifier:withConnectionToken:forUser:", v13, v9, *(_QWORD *)(a1 + 72), +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v45));
    v21 = *a2;
    v76 = CFSTR("CLMiLoConnectionReturnCode");
    v77 = &off_10221B330;
    v22 = &v77;
    v23 = &v76;
    goto LABEL_46;
  }
  if ((objc_msgSend(v9, "isEqual:", *(_QWORD *)(a1 + 80)) & 1) == 0)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_1021480E0);
    v53 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
    {
      v54 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
      v55 = (const char *)objc_msgSend(objc_msgSend(*(id *)(a1 + 80), "UUIDString"), "UTF8String");
      v56 = objc_msgSend(objc_msgSend(v9, "UUIDString"), "UTF8String");
      *(_DWORD *)buf = 68289794;
      v67 = 0;
      v68 = 2082;
      v69 = "";
      v70 = 2082;
      v71 = (const char *)v54;
      v72 = 2082;
      v73 = v55;
      v74 = 2082;
      v75 = v56;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"disconnect to service failed, disconnect a not connected service\", \"class\":%{public, location:escape_only}s, \"connected service identifier\":%{public, location:escape_only}s, \"requested service identifierToDisconnect\":%{public, location:escape_only}s}", buf, 0x30u);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_1021480E0);
    }
    v57 = qword_1022A00F8;
    if (os_signpost_enabled((os_log_t)qword_1022A00F8))
    {
      v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
      v59 = (const char *)objc_msgSend(objc_msgSend(*(id *)(a1 + 80), "UUIDString"), "UTF8String");
      v60 = objc_msgSend(objc_msgSend(v9, "UUIDString"), "UTF8String");
      *(_DWORD *)buf = 68289794;
      v67 = 0;
      v68 = 2082;
      v69 = "";
      v70 = 2082;
      v71 = (const char *)v58;
      v72 = 2082;
      v73 = v59;
      v74 = 2082;
      v75 = v60;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v57, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "disconnect to service failed, disconnect a not connected service", "{\"msg%{public}.0s\":\"disconnect to service failed, disconnect a not connected service\", \"class\":%{public, location:escape_only}s, \"connected service identifier\":%{public, location:escape_only}s, \"requested service identifierToDisconnect\":%{public, location:escape_only}s}", buf, 0x30u);
    }
    v21 = *a2;
    v64[0] = CFSTR("CLMiLoConnectionReturnCode");
    v64[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v65[0] = &off_10221B378;
    v65[1] = &off_10221B3C0;
    v22 = (_UNKNOWN ***)v65;
    v23 = (const __CFString **)v64;
    goto LABEL_56;
  }

  *(_QWORD *)(a1 + 80) = 0;
  v20 = (_QWORD *)(a1 + 112);
  if (*(char *)(a1 + 135) < 0)
    v20 = (_QWORD *)*v20;
  objc_msgSend(*(id *)(a1 + 64), "disconnectToServiceForClient:withServiceIdentifier:withConnectionToken:forUser:", v13, v9, *(_QWORD *)(a1 + 72), +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v20));
  v21 = *a2;
  v62 = CFSTR("CLMiLoConnectionReturnCode");
  v63 = &off_10221B330;
  v22 = &v63;
  v23 = &v62;
LABEL_46:
  v46 = 1;
LABEL_57:
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v23, v46);
  return CLConnectionMessage::sendReply(v21);
}

uint64_t sub_10060B5F4(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  uint64_t v5;
  NSSet *v6;
  void *DictionaryOfClasses;
  void *v8;
  id v9;
  id v10;
  _QWORD *v11;
  CLConnectionMessage *v12;
  _UNKNOWN ***v13;
  const __CFString **v14;
  uint64_t v15;
  const __CFString *v17;
  _UNKNOWN **v18;
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];
  _QWORD v22[2];
  uint8_t buf[8];
  __int16 v24;
  const char *v25;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021480E0);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    *(_QWORD *)buf = 68289026;
    v24 = 2082;
    v25 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"kCLConnectionMessageMiLoSingleShotPrediction received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  *(_QWORD *)buf = 0;
  if ((sub_10060DFAC(a1, (uint64_t *)buf) & 1) == 0)
  {
    v12 = *a2;
    v22[0] = &off_10221B3F0;
    v21[0] = CFSTR("CLMiLoConnectionReturnCode");
    v21[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v22[1] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)buf);
    v13 = (_UNKNOWN ***)v22;
    v14 = (const __CFString **)v21;
LABEL_14:
    v15 = 2;
    goto LABEL_15;
  }
  v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, v5), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
  if (!DictionaryOfClasses
    || (v8 = DictionaryOfClasses,
        !objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionServiceIdentifier")))
    || !objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionRequestIdentifier")))
  {
    v12 = *a2;
    v19[0] = CFSTR("CLMiLoConnectionReturnCode");
    v19[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v20[0] = &off_10221B3F0;
    v20[1] = &off_10221B3C0;
    v13 = (_UNKNOWN ***)v20;
    v14 = (const __CFString **)v19;
    goto LABEL_14;
  }
  v9 = objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionServiceIdentifier"));
  v10 = objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionRequestIdentifier"));
  v11 = (_QWORD *)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    v11 = (_QWORD *)*v11;
  objc_msgSend(*(id *)(a1 + 64), "requestSingleShotMiLoPredictionForClient:withServiceIdentifier:withRequestIdentifier:withConnectionToken:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11), v9, v10, *(_QWORD *)(a1 + 72));
  v12 = *a2;
  v17 = CFSTR("CLMiLoConnectionReturnCode");
  v18 = &off_10221B330;
  v13 = &v18;
  v14 = &v17;
  v15 = 1;
LABEL_15:
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v13, v14, v15);
  return CLConnectionMessage::sendReply(v12);
}

uint64_t sub_10060B890(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  uint64_t v5;
  NSSet *v6;
  void *DictionaryOfClasses;
  void *v8;
  id v9;
  id v10;
  id v11;
  _QWORD *v12;
  CLConnectionMessage *v13;
  _UNKNOWN ***v14;
  const __CFString **v15;
  uint64_t v16;
  const __CFString *v18;
  _UNKNOWN **v19;
  _QWORD v20[2];
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[2];
  uint8_t buf[8];
  __int16 v25;
  const char *v26;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021480E0);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    *(_QWORD *)buf = 68289026;
    v25 = 2082;
    v26 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"kCLConnectionMessageRequestObservation received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  *(_QWORD *)buf = 0;
  if ((sub_10060DFAC(a1, (uint64_t *)buf) & 1) == 0)
  {
    v13 = *a2;
    v23[0] = &off_10221B3F0;
    v22[0] = CFSTR("CLMiLoConnectionReturnCode");
    v22[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v23[1] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)buf);
    v14 = (_UNKNOWN ***)v23;
    v15 = (const __CFString **)v22;
LABEL_14:
    v16 = 2;
    goto LABEL_15;
  }
  v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, v5), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
  if (!DictionaryOfClasses
    || (v8 = DictionaryOfClasses,
        !objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionServiceIdentifier")))
    || !objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionRequestIdentifier")))
  {
    v13 = *a2;
    v20[0] = CFSTR("CLMiLoConnectionReturnCode");
    v20[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v21[0] = &off_10221B3F0;
    v21[1] = &off_10221B3C0;
    v14 = (_UNKNOWN ***)v21;
    v15 = (const __CFString **)v20;
    goto LABEL_14;
  }
  v9 = objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionServiceIdentifier"));
  v10 = objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionRequestIdentifier"));
  v11 = objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionPlaceLabelIdentifier"));
  v12 = (_QWORD *)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    v12 = (_QWORD *)*v12;
  objc_msgSend(*(id *)(a1 + 64), "requestObservationForClient:withServiceIdentifier:withRequestIdentifier:withPlaceIdentifier:withConnectionToken:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12), v9, v10, v11, *(_QWORD *)(a1 + 72));
  v13 = *a2;
  v18 = CFSTR("CLMiLoConnectionReturnCode");
  v19 = &off_10221B330;
  v14 = &v19;
  v15 = &v18;
  v16 = 1;
LABEL_15:
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v14, v15, v16);
  return CLConnectionMessage::sendReply(v13);
}

uint64_t sub_10060BB48(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  uint64_t v5;
  NSSet *v6;
  void *DictionaryOfClasses;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  _QWORD *v13;
  CLConnectionMessage *v14;
  _UNKNOWN ***v15;
  const __CFString **v16;
  uint64_t v17;
  const __CFString *v19;
  _UNKNOWN **v20;
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[2];
  _QWORD v24[2];
  uint8_t buf[8];
  __int16 v26;
  const char *v27;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021480E0);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    *(_QWORD *)buf = 68289026;
    v26 = 2082;
    v27 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"kCLConnectionMessageLabelSignleObservation received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  *(_QWORD *)buf = 0;
  if ((sub_10060DFAC(a1, (uint64_t *)buf) & 1) == 0)
  {
    v14 = *a2;
    v24[0] = &off_10221B3F0;
    v23[0] = CFSTR("CLMiLoConnectionReturnCode");
    v23[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v24[1] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)buf);
    v15 = (_UNKNOWN ***)v24;
    v16 = (const __CFString **)v23;
LABEL_15:
    v17 = 2;
    goto LABEL_16;
  }
  v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, v5), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
  if (!DictionaryOfClasses
    || (v8 = DictionaryOfClasses,
        !objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionServiceIdentifier")))
    || !objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionRequestIdentifier"))
    || !objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionPlaceLabelIdentifier")))
  {
    v14 = *a2;
    v21[0] = CFSTR("CLMiLoConnectionReturnCode");
    v21[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v22[0] = &off_10221B3F0;
    v22[1] = &off_10221B3C0;
    v15 = (_UNKNOWN ***)v22;
    v16 = (const __CFString **)v21;
    goto LABEL_15;
  }
  v9 = objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionServiceIdentifier"));
  v10 = objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionRequestIdentifier"));
  v11 = objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionPlaceLabelIdentifier"));
  v12 = objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionObservationIdentifier"));
  v13 = (_QWORD *)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    v13 = (_QWORD *)*v13;
  objc_msgSend(*(id *)(a1 + 64), "requestLabelSingleObservationForClient:withServiceIdentifier:withRequestIdentifier:withPlaceIdentifier:withObservationRequestIdentifier:withConnectionToken:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13), v9, v10, v11, v12, *(_QWORD *)(a1 + 72));
  v14 = *a2;
  v19 = CFSTR("CLMiLoConnectionReturnCode");
  v20 = &off_10221B330;
  v15 = &v20;
  v16 = &v19;
  v17 = 1;
LABEL_16:
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v15, v16, v17);
  return CLConnectionMessage::sendReply(v14);
}

uint64_t sub_10060BE30(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSSet *v8;
  void *DictionaryOfClasses;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  _QWORD *v16;
  CLConnectionMessage *v17;
  _UNKNOWN ***v18;
  const __CFString **v19;
  uint64_t v20;
  const __CFString *v22;
  _UNKNOWN **v23;
  _QWORD v24[2];
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[2];
  uint8_t buf[8];
  __int16 v29;
  const char *v30;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021480E0);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    v29 = 2082;
    v30 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"kCLConnectionMessageLabelObservationsBetweenDates received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  *(_QWORD *)buf = 0;
  if ((sub_10060DFAC(a1, (uint64_t *)buf) & 1) == 0)
  {
    v17 = *a2;
    v27[0] = &off_10221B3F0;
    v26[0] = CFSTR("CLMiLoConnectionReturnCode");
    v26[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v27[1] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)buf);
    v18 = (_UNKNOWN ***)v27;
    v19 = (const __CFString **)v26;
LABEL_17:
    v20 = 2;
    goto LABEL_18;
  }
  v6 = objc_opt_class(NSUUID, v5);
  v8 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v6, objc_opt_class(NSDate, v7), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v8);
  if (!DictionaryOfClasses
    || (v10 = DictionaryOfClasses,
        !objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionServiceIdentifier")))
    || !objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionRequestIdentifier"))
    || !objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionPlaceLabelIdentifier"))
    || !objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionObservationStartDate"))
    || !objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionObservationEndDate")))
  {
    v17 = *a2;
    v24[0] = CFSTR("CLMiLoConnectionReturnCode");
    v24[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v25[0] = &off_10221B3F0;
    v25[1] = &off_10221B3C0;
    v18 = (_UNKNOWN ***)v25;
    v19 = (const __CFString **)v24;
    goto LABEL_17;
  }
  v11 = objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionServiceIdentifier"));
  v12 = objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionRequestIdentifier"));
  v13 = objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionPlaceLabelIdentifier"));
  v14 = objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionObservationStartDate"));
  v15 = objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionObservationEndDate"));
  v16 = (_QWORD *)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    v16 = (_QWORD *)*v16;
  objc_msgSend(*(id *)(a1 + 64), "requestLabelObservationsForClient:withServiceIdentifier:withRequestIdentifier:withPlaceIdentifier:betweenStartDate:endDate:withConnectionToken:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16), v11, v12, v13, v14, v15, *(_QWORD *)(a1 + 72));
  v17 = *a2;
  v22 = CFSTR("CLMiLoConnectionReturnCode");
  v23 = &off_10221B330;
  v18 = &v23;
  v19 = &v22;
  v20 = 1;
LABEL_18:
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v18, v19, v20);
  return CLConnectionMessage::sendReply(v17);
}

uint64_t sub_10060C178(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSSet *v8;
  void *DictionaryOfClasses;
  void *v10;
  id v11;
  id v12;
  id v13;
  _QWORD *v14;
  CLConnectionMessage *v15;
  _UNKNOWN ***v16;
  const __CFString **v17;
  uint64_t v18;
  const __CFString *v20;
  _UNKNOWN **v21;
  _QWORD v22[2];
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[2];
  uint8_t buf[8];
  __int16 v27;
  const char *v28;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021480E0);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    *(_QWORD *)buf = 68289026;
    v27 = 2082;
    v28 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"kCLConnectionMessageRemoveLabels received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  *(_QWORD *)buf = 0;
  if ((sub_10060DFAC(a1, (uint64_t *)buf) & 1) == 0)
  {
    v15 = *a2;
    v25[0] = &off_10221B3F0;
    v24[0] = CFSTR("CLMiLoConnectionReturnCode");
    v24[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v25[1] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)buf);
    v16 = (_UNKNOWN ***)v25;
    v17 = (const __CFString **)v24;
LABEL_15:
    v18 = 2;
    goto LABEL_16;
  }
  v6 = objc_opt_class(NSUUID, v5);
  v8 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v6, objc_opt_class(NSArray, v7), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v8);
  if (!DictionaryOfClasses
    || (v10 = DictionaryOfClasses,
        !objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionServiceIdentifier")))
    || !objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionRequestIdentifier"))
    || !objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionLabelArray")))
  {
    v15 = *a2;
    v22[0] = CFSTR("CLMiLoConnectionReturnCode");
    v22[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v23[0] = &off_10221B3F0;
    v23[1] = &off_10221B3C0;
    v16 = (_UNKNOWN ***)v23;
    v17 = (const __CFString **)v22;
    goto LABEL_15;
  }
  v11 = objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionServiceIdentifier"));
  v12 = objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionRequestIdentifier"));
  v13 = objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionLabelArray"));
  v14 = (_QWORD *)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    v14 = (_QWORD *)*v14;
  objc_msgSend(*(id *)(a1 + 64), "requestRemoveLabelsForClient:withServiceIdentifier:withRequestIdentifier:withLabels:withConnectionToken:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14), v11, v12, v13, *(_QWORD *)(a1 + 72));
  v15 = *a2;
  v20 = CFSTR("CLMiLoConnectionReturnCode");
  v21 = &off_10221B330;
  v16 = &v21;
  v17 = &v20;
  v18 = 1;
LABEL_16:
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v16, v17, v18);
  return CLConnectionMessage::sendReply(v15);
}

uint64_t sub_10060C454(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSSet *v8;
  void *DictionaryOfClasses;
  void *v10;
  id v11;
  id v12;
  id v13;
  _QWORD *v14;
  CLConnectionMessage *v15;
  _UNKNOWN ***v16;
  const __CFString **v17;
  uint64_t v18;
  const __CFString *v20;
  _UNKNOWN **v21;
  _QWORD v22[2];
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[2];
  uint8_t buf[8];
  __int16 v27;
  const char *v28;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021480E0);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    *(_QWORD *)buf = 68289026;
    v27 = 2082;
    v28 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"kCLConnectionMessageStartUpdatingMicroLocation received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  *(_QWORD *)buf = 0;
  if ((sub_10060DFAC(a1, (uint64_t *)buf) & 1) == 0)
  {
    v15 = *a2;
    v25[0] = &off_10221B3F0;
    v24[0] = CFSTR("CLMiLoConnectionReturnCode");
    v24[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v25[1] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)buf);
    v16 = (_UNKNOWN ***)v25;
    v17 = (const __CFString **)v24;
LABEL_15:
    v18 = 2;
    goto LABEL_16;
  }
  v6 = objc_opt_class(NSUUID, v5);
  v8 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v6, objc_opt_class(CLMiLoUpdateConfiguration, v7), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v8);
  if (!DictionaryOfClasses
    || (v10 = DictionaryOfClasses,
        !objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionServiceIdentifier")))
    || !objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionRequestIdentifier"))
    || !objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionUpdateConfiguration")))
  {
    v15 = *a2;
    v22[0] = CFSTR("CLMiLoConnectionReturnCode");
    v22[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v23[0] = &off_10221B3F0;
    v23[1] = &off_10221B3C0;
    v16 = (_UNKNOWN ***)v23;
    v17 = (const __CFString **)v22;
    goto LABEL_15;
  }
  v11 = objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionServiceIdentifier"));
  v12 = objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionRequestIdentifier"));
  v13 = objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionUpdateConfiguration"));
  v14 = (_QWORD *)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    v14 = (_QWORD *)*v14;
  objc_msgSend(*(id *)(a1 + 64), "requestStartUpdatingMicroLocationForClient:withServiceIdentifier:withRequestIdentifier:withConfiguration:withConnectionToken:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14), v11, v12, v13, *(_QWORD *)(a1 + 72));
  v15 = *a2;
  v20 = CFSTR("CLMiLoConnectionReturnCode");
  v21 = &off_10221B330;
  v16 = &v21;
  v17 = &v20;
  v18 = 1;
LABEL_16:
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v16, v17, v18);
  return CLConnectionMessage::sendReply(v15);
}

uint64_t sub_10060C730(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSSet *v8;
  void *DictionaryOfClasses;
  void *v10;
  id v11;
  id v12;
  _QWORD *v13;
  CLConnectionMessage *v14;
  _UNKNOWN ***v15;
  const __CFString **v16;
  uint64_t v17;
  const __CFString *v19;
  _UNKNOWN **v20;
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[2];
  _QWORD v24[2];
  uint8_t buf[8];
  __int16 v26;
  const char *v27;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021480E0);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    *(_QWORD *)buf = 68289026;
    v26 = 2082;
    v27 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"kCLConnectionMessageStopUpdatingMicroLocation received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  *(_QWORD *)buf = 0;
  if ((sub_10060DFAC(a1, (uint64_t *)buf) & 1) == 0)
  {
    v14 = *a2;
    v24[0] = &off_10221B3F0;
    v23[0] = CFSTR("CLMiLoConnectionReturnCode");
    v23[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v24[1] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)buf);
    v15 = (_UNKNOWN ***)v24;
    v16 = (const __CFString **)v23;
LABEL_14:
    v17 = 2;
    goto LABEL_15;
  }
  v6 = objc_opt_class(NSUUID, v5);
  v8 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v6, objc_opt_class(CLMiLoUpdateConfiguration, v7), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v8);
  if (!DictionaryOfClasses
    || (v10 = DictionaryOfClasses,
        !objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionServiceIdentifier")))
    || !objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionRequestIdentifier")))
  {
    v14 = *a2;
    v21[0] = CFSTR("CLMiLoConnectionReturnCode");
    v21[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v22[0] = &off_10221B3F0;
    v22[1] = &off_10221B3C0;
    v15 = (_UNKNOWN ***)v22;
    v16 = (const __CFString **)v21;
    goto LABEL_14;
  }
  v11 = objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionServiceIdentifier"));
  v12 = objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionRequestIdentifier"));
  v13 = (_QWORD *)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    v13 = (_QWORD *)*v13;
  objc_msgSend(*(id *)(a1 + 64), "requestStopUpdatingMicroLocationForClient:withServiceIdentifier:withRequestIdentifier:withConnectionToken:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13), v11, v12, *(_QWORD *)(a1 + 72));
  v14 = *a2;
  v19 = CFSTR("CLMiLoConnectionReturnCode");
  v20 = &off_10221B330;
  v15 = &v20;
  v16 = &v19;
  v17 = 1;
LABEL_15:
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v15, v16, v17);
  return CLConnectionMessage::sendReply(v14);
}

uint64_t sub_10060C9DC(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  _UNKNOWN ***v6;
  const __CFString **v7;
  uint64_t v8;
  const __CFString *v10;
  _UNKNOWN **v11;
  _QWORD v12[2];
  _QWORD v13[2];
  uint8_t buf[8];
  __int16 v15;
  const char *v16;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021480E0);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    v15 = 2082;
    v16 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"kCLConnectionMessageMiLoQueryConnectionStatus received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  *(_QWORD *)buf = 0;
  if ((sub_10060DFAC(a1, (uint64_t *)buf) & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 64), "queryMiloConnectionStatus:", *(_QWORD *)(a1 + 72));
    v5 = *a2;
    v10 = CFSTR("CLMiLoConnectionReturnCode");
    v11 = &off_10221B330;
    v6 = &v11;
    v7 = &v10;
    v8 = 1;
  }
  else
  {
    v5 = *a2;
    v13[0] = &off_10221B408;
    v12[0] = CFSTR("CLMiLoConnectionReturnCode");
    v12[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v13[1] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)buf);
    v6 = (_UNKNOWN ***)v13;
    v7 = (const __CFString **)v12;
    v8 = 2;
  }
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v7, v8, v10, v11);
  return CLConnectionMessage::sendReply(v5);
}

uint64_t sub_10060CB74(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  uint64_t v5;
  NSSet *v6;
  void *DictionaryOfClasses;
  void *v8;
  CLConnectionMessage *v9;
  _UNKNOWN ***v10;
  const __CFString **v11;
  uint64_t v12;
  const __CFString *v14;
  _UNKNOWN **v15;
  _QWORD v16[2];
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[2];
  uint8_t buf[8];
  __int16 v21;
  const char *v22;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021480E0);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    *(_QWORD *)buf = 68289026;
    v21 = 2082;
    v22 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"kCLConnectionMessageMiLoEnableMiLoAtCurrentLocation received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  *(_QWORD *)buf = 0;
  if ((sub_10060DFAC(a1, (uint64_t *)buf) & 1) == 0)
  {
    v9 = *a2;
    v19[0] = &off_10221B3F0;
    v18[0] = CFSTR("CLMiLoConnectionReturnCode");
    v18[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v19[1] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)buf);
    v10 = (_UNKNOWN ***)v19;
    v11 = (const __CFString **)v18;
LABEL_12:
    v12 = 2;
    goto LABEL_13;
  }
  v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, v5), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
  if (!DictionaryOfClasses
    || (v8 = DictionaryOfClasses,
        !objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionServiceIdentifier")))
    || !objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionRequestIdentifier")))
  {
    v9 = *a2;
    v16[0] = CFSTR("CLMiLoConnectionReturnCode");
    v16[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v17[0] = &off_10221B3F0;
    v17[1] = &off_10221B3C0;
    v10 = (_UNKNOWN ***)v17;
    v11 = (const __CFString **)v16;
    goto LABEL_12;
  }
  objc_msgSend(*(id *)(a1 + 64), "enableMiLoAtCurrentLocationWithServiceIdentifier:withRequestIdentifier:connectionToken:", objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionServiceIdentifier")), objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionRequestIdentifier")), *(_QWORD *)(a1 + 72));
  v9 = *a2;
  v14 = CFSTR("CLMiLoConnectionReturnCode");
  v15 = &off_10221B330;
  v10 = &v15;
  v11 = &v14;
  v12 = 1;
LABEL_13:
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v10, v11, v12);
  return CLConnectionMessage::sendReply(v9);
}

uint64_t sub_10060CDEC(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSSet *v8;
  void *DictionaryOfClasses;
  void *v10;
  CLConnectionMessage *v11;
  _UNKNOWN ***v12;
  const __CFString **v13;
  uint64_t v14;
  const __CFString *v16;
  _UNKNOWN **v17;
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];
  uint8_t buf[8];
  __int16 v23;
  const char *v24;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021480E0);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    *(_QWORD *)buf = 68289026;
    v23 = 2082;
    v24 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"kCLConnectionMessageRemoveCustomLOI received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  *(_QWORD *)buf = 0;
  if ((sub_10060DFAC(a1, (uint64_t *)buf) & 1) == 0)
  {
    v11 = *a2;
    v21[0] = &off_10221B3F0;
    v20[0] = CFSTR("CLMiLoConnectionReturnCode");
    v20[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v21[1] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)buf);
    v12 = (_UNKNOWN ***)v21;
    v13 = (const __CFString **)v20;
LABEL_13:
    v14 = 2;
    goto LABEL_14;
  }
  v6 = objc_opt_class(NSUUID, v5);
  v8 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v6, objc_opt_class(NSString, v7), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v8);
  if (!DictionaryOfClasses
    || (v10 = DictionaryOfClasses,
        !objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionServiceIdentifier")))
    || !objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionRequestIdentifier"))
    || !objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionLOIIdentifier")))
  {
    v11 = *a2;
    v18[0] = CFSTR("CLMiLoConnectionReturnCode");
    v18[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v19[0] = &off_10221B3F0;
    v19[1] = &off_10221B3C0;
    v12 = (_UNKNOWN ***)v19;
    v13 = (const __CFString **)v18;
    goto LABEL_13;
  }
  objc_msgSend(*(id *)(a1 + 64), "requestRemoveCustomLoiWithServiceIdentifier:withRequestIdentifier:withLoiIdentifier:withConnectionToken:", objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionServiceIdentifier")), objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionRequestIdentifier")), objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionLOIIdentifier")), *(_QWORD *)(a1 + 72));
  v11 = *a2;
  v16 = CFSTR("CLMiLoConnectionReturnCode");
  v17 = &off_10221B330;
  v12 = &v17;
  v13 = &v16;
  v14 = 1;
LABEL_14:
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v12, v13, v14);
  return CLConnectionMessage::sendReply(v11);
}

uint64_t sub_10060D0A4(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  char v5;
  uint64_t v6;
  char v7;
  NSSet *v8;
  void *DictionaryOfClasses;
  void *v10;
  id v11;
  id v12;
  _QWORD *v13;
  CLConnectionMessage *v14;
  NSObject *v16;
  CLConnectionMessage *v17;
  NSObject *v18;
  CLConnectionMessage *v19;
  NSObject *v20;
  CLConnectionMessage *v21;
  uint64_t v22;
  const __CFString *v23;
  _UNKNOWN **v24;
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[2];
  _QWORD v28[2];
  uint8_t buf[8];
  __int16 v30;
  const char *v31;
  char v32;
  _QWORD v33[2];
  _QWORD v34[2];

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021480E0);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    v30 = 2082;
    v31 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageRequestModelLearning received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  v22 = 0;
  if ((sub_10060DFAC(a1, &v22) & 1) != 0)
  {
    sub_1015A2E04(buf, "com.apple.locationd.private_info");
    v5 = sub_1002255E0(a1);
    v7 = v5;
    if (v32 < 0)
    {
      operator delete(*(void **)buf);
      if ((v7 & 1) != 0)
        goto LABEL_8;
    }
    else if ((v5 & 1) != 0)
    {
LABEL_8:
      v8 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, v6), 0);
      DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v8);
      v10 = DictionaryOfClasses;
      if (DictionaryOfClasses
        && objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionServiceIdentifier"))
        && objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionRequestIdentifier")))
      {
        v11 = objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionServiceIdentifier"));
        v12 = objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionRequestIdentifier"));
        v13 = (_QWORD *)(a1 + 88);
        if (*(char *)(a1 + 111) < 0)
          v13 = (_QWORD *)*v13;
        objc_msgSend(*(id *)(a1 + 64), "requestMicroLocationLearningForClient:withServiceIdentifier:withRequestIdentifier:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13), v11, v12);
        v14 = *a2;
        v23 = CFSTR("CLMiLoConnectionReturnCode");
        v24 = &off_10221B330;
        +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v24, &v23, 1);
        return CLConnectionMessage::sendReply(v14);
      }
      else
      {
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_1021480E0);
        v18 = qword_1022A00F8;
        if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          v30 = 2082;
          v31 = "";
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"invalid data for kCLConnectionMessageRequestModelLearning\"}", buf, 0x12u);
        }
        v19 = *a2;
        v25[0] = CFSTR("CLMiLoConnectionReturnCode");
        v25[1] = CFSTR("CLMiLoConnectionErrorMessage");
        v26[0] = &off_10221B3F0;
        v26[1] = &off_10221B3C0;
        +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v26, v25, 2);
        return CLConnectionMessage::sendReply(v19);
      }
    }
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_1021480E0);
    v20 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      v30 = 2082;
      v31 = "";
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"not qualified for kCLConnectionMessageRequestModelLearning\"}", buf, 0x12u);
    }
    v21 = *a2;
    v27[0] = CFSTR("CLMiLoConnectionReturnCode");
    v27[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v28[0] = &off_10221B3F0;
    v28[1] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", 1);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v28, v27, 2);
    return CLConnectionMessage::sendReply(v21);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_1021480E0);
    v16 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      v30 = 2082;
      v31 = "";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"not qualified for MiLo connection\"}", buf, 0x12u);
    }
    v17 = *a2;
    v34[0] = &off_10221B3F0;
    v33[0] = CFSTR("CLMiLoConnectionReturnCode");
    v33[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v34[1] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v22);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v34, v33, 2);
    return CLConnectionMessage::sendReply(v17);
  }
}

void sub_10060D598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10060D5BC(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  char v5;
  uint64_t v6;
  char v7;
  NSSet *v8;
  void *DictionaryOfClasses;
  void *v10;
  id v11;
  _QWORD *v12;
  CLConnectionMessage *v13;
  NSObject *v15;
  CLConnectionMessage *v16;
  NSObject *v17;
  CLConnectionMessage *v18;
  NSObject *v19;
  CLConnectionMessage *v20;
  uint64_t v21;
  const __CFString *v22;
  _UNKNOWN **v23;
  _QWORD v24[2];
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[2];
  uint8_t buf[8];
  __int16 v29;
  const char *v30;
  char v31;
  _QWORD v32[2];
  _QWORD v33[2];

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021480E0);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    v29 = 2082;
    v30 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageRequestPurgeMiLoData received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  v21 = 0;
  if ((sub_10060DFAC(a1, &v21) & 1) != 0)
  {
    sub_1015A2E04(buf, "com.apple.locationd.milo_purge_data");
    v5 = sub_1002255E0(a1);
    v7 = v5;
    if (v31 < 0)
    {
      operator delete(*(void **)buf);
      if ((v7 & 1) != 0)
        goto LABEL_8;
    }
    else if ((v5 & 1) != 0)
    {
LABEL_8:
      v8 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, v6), 0);
      DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v8);
      v10 = DictionaryOfClasses;
      if (DictionaryOfClasses
        && objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionRequestIdentifier")))
      {
        v11 = objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionRequestIdentifier"));
        v12 = (_QWORD *)(a1 + 88);
        if (*(char *)(a1 + 111) < 0)
          v12 = (_QWORD *)*v12;
        objc_msgSend(*(id *)(a1 + 64), "requestPurgeAllMiLoDataFromClient:withRequestIdentifier:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12), v11);
        v13 = *a2;
        v22 = CFSTR("CLMiLoConnectionReturnCode");
        v23 = &off_10221B330;
        +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1);
        return CLConnectionMessage::sendReply(v13);
      }
      else
      {
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_1021480E0);
        v19 = qword_1022A00F8;
        if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          v29 = 2082;
          v30 = "";
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"invalid data for kCLConnectionMessageRequestPurgeMiLoData\"}", buf, 0x12u);
        }
        v20 = *a2;
        v24[0] = CFSTR("CLMiLoConnectionReturnCode");
        v24[1] = CFSTR("CLMiLoConnectionErrorMessage");
        v25[0] = &off_10221B3F0;
        v25[1] = &off_10221B3C0;
        +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v25, v24, 2);
        return CLConnectionMessage::sendReply(v20);
      }
    }
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_1021480E0);
    v17 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      v29 = 2082;
      v30 = "";
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"not qualified for kCLConnectionMessageRequestMiLoExportDatabaseTables\"}", buf, 0x12u);
    }
    v18 = *a2;
    v26[0] = CFSTR("CLMiLoConnectionReturnCode");
    v26[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v27[0] = &off_10221B3F0;
    v27[1] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", 1);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v27, v26, 2);
    return CLConnectionMessage::sendReply(v18);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_1021480E0);
    v15 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      v29 = 2082;
      v30 = "";
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"not qualified for kCLConnectionMessageRequestPurgeMiLoData\"}", buf, 0x12u);
    }
    v16 = *a2;
    v33[0] = &off_10221B3F0;
    v32[0] = CFSTR("CLMiLoConnectionReturnCode");
    v32[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v33[1] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v21);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v33, v32, 2);
    return CLConnectionMessage::sendReply(v16);
  }
}

void sub_10060DA78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10060DA9C(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  char v5;
  uint64_t v6;
  char v7;
  NSSet *v8;
  void *DictionaryOfClasses;
  void *v10;
  id v11;
  uint8_t *v12;
  CLConnectionMessage *v13;
  NSObject *v14;
  CLConnectionMessage *v15;
  NSObject *v16;
  CLConnectionMessage *v17;
  NSObject *v18;
  CLConnectionMessage *v19;
  uint64_t v20;
  const __CFString *v21;
  _UNKNOWN **v22;
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[2];
  _QWORD v26[2];
  uint8_t buf[8];
  __int128 v28;
  _QWORD v29[2];
  _QWORD v30[2];

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021480E0);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v28) = 2082;
    *(_QWORD *)((char *)&v28 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageRequestMiLoExportDatabaseTables received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  v20 = 0;
  if ((sub_10060DFAC(a1, &v20) & 1) != 0)
  {
    sub_1015A2E04(buf, "com.apple.locationd.microlocation.export-db");
    v5 = sub_1002255E0(a1);
    v7 = v5;
    if (SHIBYTE(v28) < 0)
    {
      operator delete(*(void **)buf);
      if ((v7 & 1) != 0)
        goto LABEL_8;
    }
    else if ((v5 & 1) != 0)
    {
LABEL_8:
      v8 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, v6), 0);
      DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v8);
      v10 = DictionaryOfClasses;
      if (DictionaryOfClasses
        && objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionRequestIdentifier")))
      {
        v11 = objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CLMiLoConnectionRequestIdentifier"));
        *(_QWORD *)buf = 0;
        v28 = 0uLL;
        sub_100FFB32C(a1);
        if (v28 >= 0)
          v12 = buf;
        else
          v12 = *(uint8_t **)buf;
        objc_msgSend(*(id *)(a1 + 64), "requestExportMiLoDatabaseTablesFromClient:withRequestIdentifier:connectionToken:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12), v11, *(_QWORD *)(a1 + 72));
        v13 = *a2;
        v21 = CFSTR("CLMiLoConnectionReturnCode");
        v22 = &off_10221B330;
        +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1);
        CLConnectionMessage::sendReply(v13);
        if (SHIBYTE(v28) < 0)
          operator delete(*(void **)buf);
      }
      else
      {
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_1021480E0);
        v18 = qword_1022A00F8;
        if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          LOWORD(v28) = 2082;
          *(_QWORD *)((char *)&v28 + 2) = "";
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"invalid data for kCLConnectionMessageRequestMiLoExportDatabaseTables\"}", buf, 0x12u);
        }
        v19 = *a2;
        v23[0] = CFSTR("CLMiLoConnectionReturnCode");
        v23[1] = CFSTR("CLMiLoConnectionErrorMessage");
        v24[0] = &off_10221B3F0;
        v24[1] = &off_10221B3C0;
        +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v24, v23, 2);
        CLConnectionMessage::sendReply(v19);
      }
      return;
    }
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_1021480E0);
    v16 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      LOWORD(v28) = 2082;
      *(_QWORD *)((char *)&v28 + 2) = "";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"not qualified for kCLConnectionMessageRequestMiLoExportDatabaseTables\"}", buf, 0x12u);
    }
    v17 = *a2;
    v25[0] = CFSTR("CLMiLoConnectionReturnCode");
    v25[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v26[0] = &off_10221B3F0;
    v26[1] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", 1);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v26, v25, 2);
    CLConnectionMessage::sendReply(v17);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_1021480E0);
    v14 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      LOWORD(v28) = 2082;
      *(_QWORD *)((char *)&v28 + 2) = "";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"not qualified for CLMiLoConnection\"}", buf, 0x12u);
    }
    v15 = *a2;
    v30[0] = &off_10221B3F0;
    v29[0] = CFSTR("CLMiLoConnectionReturnCode");
    v29[1] = CFSTR("CLMiLoConnectionErrorMessage");
    v30[1] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v20);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v30, v29, 2);
    CLConnectionMessage::sendReply(v15);
  }
}

void sub_10060DF80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10060DFAC(uint64_t a1, uint64_t *a2)
{
  char v4;
  char v5;
  uint64_t result;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  void *__p;
  __int16 v11;
  const char *v12;
  char v13;

  sub_1015A2E04(&__p, "com.apple.locationd.milo_connection");
  v4 = sub_1002255E0(a1);
  v5 = v4;
  if (v13 < 0)
  {
    operator delete(__p);
    if ((v5 & 1) != 0)
      goto LABEL_3;
LABEL_6:
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_1021480E0);
    v7 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      __p = (void *)68289026;
      v11 = 2082;
      v12 = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"SPI request, client is not entitled for CLMiLoConnection\"}", (uint8_t *)&__p, 0x12u);
    }
    v8 = 1;
    goto LABEL_16;
  }
  if ((v4 & 1) == 0)
    goto LABEL_6;
LABEL_3:
  if ((sub_100F262FC() & 1) != 0)
    return 1;
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021480E0);
  v9 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    __p = (void *)68289026;
    v11 = 2082;
    v12 = "";
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"SPI request, CLMiLoConnection is not available on this platform\"}", (uint8_t *)&__p, 0x12u);
  }
  v8 = 2;
LABEL_16:
  result = 0;
  *a2 = v8;
  return result;
}

void sub_10060E16C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10060E190(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_10060E1BC(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_10060E1E8(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

id sub_10060E24C(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148120);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BB7A69 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148120);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148120);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BB7A69 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148120);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMicroLocationNotifier_Type::MiLoServiceEvent, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_10060E5F8(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

id sub_10060E624(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148120);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BB7A9CLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148120);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148120);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BB7A9CLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148120);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMicroLocationNotifier_Type::MiLoPrediction, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_10060E9D0(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148120);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BB7ACDLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148120);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148120);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BB7ACDLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148120);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMicroLocationNotifier_Type::MiLoServiceDebugResponse, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_10060ED7C(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  id v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return sub_10060F4B0((uint64_t)&v8 + 7, a1);
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148120);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101BB7B08 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148120);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148120);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101BB7B08 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148120);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMicroLocationNotifier_Type::MiLoConnectionStatusEvent, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_10060F104(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148120);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BB7B08 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148120);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148120);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BB7B08 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148120);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMicroLocationNotifier_Type::MiLoConnectionStatusEvent, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_10060F4B0(uint64_t a1, void *a2)
{
  if (!objc_msgSend(a2, "cppObjectPtr")
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221B420))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)8)
      sub_101901BEC();
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }
  return objc_msgSend(a2, "cppObjectPtr");
}

id sub_10060F524(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148120);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BB7B44 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148120);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148120);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BB7B44 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148120);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMicroLocationNotifier_Type::MiLoRecordingMetaInfoEvent, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_10060F8D0(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148120);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BB7B81 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148120);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148120);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BB7B81 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148120);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMicroLocationNotifier_Type::MiLoGenericEventResponse, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

_QWORD *sub_10060FC7C@<X0>(char **a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_1004E6C04(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_10060FCC8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_10060FCDC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_102148178;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10060FD18(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102148178;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10060FD3C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  sub_10060FD8C(a1 + 8, a2, a3);
}

uint64_t sub_10060FD44(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10060FD80()
{
}

void sub_10060FD8C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_10060FE10(a1, a2, (CLConnectionMessage **)&v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_10060FDF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_1018FBC0C(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10060FE10(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  NSSet *v6;
  const __CFDictionary *DictionaryOfClasses;
  void (*v8)(_QWORD *, BOOL, uint8_t *);
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  NSObject *v12;
  BOOL v14;
  uint8_t v15[16];
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;

  v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1001C1D6C((int)v15, DictionaryOfClasses);
  v14 = 0;
  if ((sub_1001E4874((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))a1;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = (_QWORD *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0)
      v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))(*v10 + v8);
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021481E8);
    v11 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021481E8);
    }
    v12 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10011A5A8(v15);
}

void sub_10060FFF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_100610014(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_100610040(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_102148228;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10061007C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102148228;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1006100A0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1006100F0(a1 + 8, a2, a3);
}

uint64_t sub_1006100A8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1006100E4()
{
}

void sub_1006100F0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, uint64_t *);
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = *a3;
  v3 = (std::__shared_weak_count *)a3[1];
  v15 = v3;
  *a3 = 0;
  a3[1] = 0;
  v5 = *(void (**)(_QWORD *, uint64_t *))a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(void (**)(_QWORD *, uint64_t *))(*v7 + v5);
  v16 = v4;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v5(v7, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1006101C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1006101E0(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_100610258(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_100610244(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100610258(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_1006104D8(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_1006104C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_1006104D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_10061054C(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100610534(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_10061054C(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_1006105A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_100610664(id a1)
{
  qword_102302FD0 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CMHealthColdStorageWatchServiceSilo"));
}

void sub_100610718(id a1)
{
  sub_100197040();
  if (sub_100195F08())
    byte_102302FE0 = 1;
}

void sub_100610D50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100261F44((uint64_t)va);
  operator delete();
}

id sub_100610DBC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "onCompanionNotification:data:", a2, a3);
}

void sub_100610DCC()
{
  operator new();
}

void sub_100610F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a13);
  operator delete();
}

void sub_10061125C(void **a1, double a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int v22;
  double v23;
  uint8_t buf[4];
  double v25;

  if (a2 >= 0.0)
  {
    v9 = a1[2];
    v7 = (uint64_t)(a1 + 2);
    v8 = v9;
    v10 = *(_QWORD *)(v7 - 8);
    if (v10 >= (unint64_t)v9)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)*a1) >> 3);
      v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)*a1) >> 3);
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x555555555555555)
        v15 = 0xAAAAAAAAAAAAAAALL;
      else
        v15 = v13;
      if (v15)
        v16 = (char *)sub_1002596A8(v7, v15);
      else
        v16 = 0;
      v17 = &v16[24 * v12];
      v18 = &v16[24 * v15];
      *(double *)v17 = a2;
      *((_QWORD *)v17 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v17[16] = 0;
      v11 = v17 + 24;
      v20 = (char *)*a1;
      v19 = (char *)a1[1];
      if (v19 != *a1)
      {
        do
        {
          v21 = *(_OWORD *)(v19 - 24);
          *(v17 - 8) = *(v19 - 8);
          *(_OWORD *)(v17 - 24) = v21;
          v17 -= 24;
          v19 -= 24;
        }
        while (v19 != v20);
        v19 = (char *)*a1;
      }
      *a1 = v17;
      a1[1] = v11;
      a1[2] = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(double *)v10 = a2;
      *(_QWORD *)(v10 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(_BYTE *)(v10 + 16) = 0;
      v11 = (char *)(v10 + 24);
    }
    a1[1] = v11;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102148428);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      v25 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102148428);
      v22 = 134349056;
      v23 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Programmer error, this expiration rule with time %{public}fis not valid.", &v22, 12);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "void CLActivityAggregator<CLElevationGradeEntry, CLActivityDB::ClassBDataProtectionPolicy>::setExpirationRule(CFTimeInterval) [T = CLElevationGradeEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

uint64_t sub_100611510(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102148398);
  v2 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Aggregating ElevationGrade db records", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102148398);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "Aggregating ElevationGrade db records", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "-[CMHealthColdStorageWatchService setUpAggregationOnTimer]_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return sub_1006116B4(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 128));
}

uint64_t sub_1006116B4(uint64_t a1)
{
  NSObject *v2;
  double v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  double v7;
  int v8;
  uint64_t v9;
  double v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  double v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  double v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  int v32;
  _BYTE v33[10];
  int v34;
  uint8_t buf[4];
  _BYTE v36[10];
  int v37;

  if (!*(_BYTE *)(a1 + 40))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102148428);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = sub_100078B88();
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v3;
    *(_WORD *)&v36[8] = 1024;
    v37 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102148428);
    v16 = qword_1022A02D8;
    v17 = sub_100078B88();
    v18 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v17;
    *(_WORD *)&v33[8] = 1024;
    v34 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 2, "Aggregating records start %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLElevationGradeEntry, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLElevationGradeEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102148428);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v7 = sub_100078B88();
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v7;
    *(_WORD *)&v36[8] = 1024;
    v37 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102148428);
    v21 = qword_1022A02D8;
    v22 = sub_100078B88();
    v23 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v22;
    *(_WORD *)&v33[8] = 1024;
    v34 = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 2, "Aggregating records stop %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLElevationGradeEntry, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLElevationGradeEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = (double)*(int *)(v9 + 132);
  if ((double)(int)sub_1006141A4(v9, (double **)a1) * 1.2 < v10)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102148428);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(_DWORD *)(v12 + 132);
      v14 = sub_1006141A4(v12, (double **)a1);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v36 = v13;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102148428);
      v26 = qword_1022A02D8;
      v27 = *(_QWORD *)(a1 + 24);
      v28 = *(_DWORD *)(v27 + 132);
      v29 = sub_1006141A4(v27, (double **)a1);
      v32 = 67109376;
      *(_DWORD *)v33 = v28;
      *(_WORD *)&v33[4] = 1024;
      *(_DWORD *)&v33[6] = v29;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", &v32, 14);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLElevationGradeEntry, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLElevationGradeEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
  }
  return v5;
}

id sub_100611EE0(uint64_t a1, uint64_t a2)
{
  void *v2;
  _QWORD v4[4];
  __int128 v5;

  v2 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100611F60;
  v4[3] = &unk_102148308;
  v5 = *(_OWORD *)(a1 + 40);
  return sub_10061F764(518400.0, a2, 34, v2, 300, 0, 1, 1, 0, (uint64_t)v4);
}

id sub_100611F60(uint64_t a1, char a2, uint64_t a3)
{
  id v6;
  _QWORD v8[4];
  __int128 v9;
  uint64_t v10;
  char v11;

  v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100611FE4;
  v8[3] = &unk_1021482E0;
  v11 = a2;
  v9 = *(_OWORD *)(a1 + 32);
  v10 = a3;
  return objc_msgSend(v6, "async:", v8);
}

id sub_100611FE4(uint64_t a1)
{
  int v2;
  _DWORD *v3;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  uint64_t v11;
  uint8_t buf[4];
  uint64_t v13;

  v2 = *(unsigned __int8 *)(a1 + 56);
  v3 = *(_DWORD **)(a1 + 32);
  if (v2)
  {
    objc_msgSend(v3, "saveCurrentSyncProgress");
    return objc_msgSend(*(id *)(a1 + 32), "continueSync:", *(_QWORD *)(a1 + 40));
  }
  else
  {
    ++v3[42];
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102148378);
    v5 = qword_10229FFA8;
    if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_ERROR))
    {
      v6 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138412290;
      v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[WatchService] Transfer to phone failed with error, %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFA0 != -1)
        dispatch_once(&qword_10229FFA0, &stru_102148378);
      v7 = *(_QWORD *)(a1 + 48);
      v10 = 138412290;
      v11 = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 16, "[WatchService] Transfer to phone failed with error, %@", &v10, 12);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "-[CMHealthColdStorageWatchService sendCompanionData:activity:]_block_invoke", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    return objc_msgSend(*(id *)(a1 + 32), "setActivityAsDone:", *(_QWORD *)(a1 + 40));
  }
}

void sub_100612A78(uint64_t a1, _xpc_activity_s *a2)
{
  NSObject *v4;
  NSObject *v5;
  xpc_activity_state_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  xpc_activity_state_t v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  int v15;
  xpc_activity_state_t v16;
  uint8_t buf[4];
  xpc_activity_state_t state;

  if (qword_10229FFA0 != -1)
    dispatch_once(&qword_10229FFA0, &stru_102148378);
  v4 = qword_10229FFA8;
  if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134349056;
    state = xpc_activity_get_state(a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[WatchService] Sync timer fired (%{public}ld)", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102148378);
    v7 = qword_10229FFA8;
    v15 = 134349056;
    v16 = xpc_activity_get_state(a2);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 1, "[WatchService] Sync timer fired (%{public}ld)", &v15, 12);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "-[CMHealthColdStorageWatchService setupSyncActivity]_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 160) = os_transaction_create("CMHealthColdStorageWatchSyncActivity");
  objc_msgSend(*(id *)(a1 + 40), "onSyncActivity:", a2);
  if (xpc_activity_get_state(a2) == 2 && !xpc_activity_set_state(a2, 4))
  {
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102148378);
    v5 = qword_10229FFA8;
    if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_FAULT))
    {
      v6 = xpc_activity_get_state(a2);
      *(_DWORD *)buf = 134349056;
      state = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "[WatchService] Failed to mark activity as Continue. Current state is %{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFA0 != -1)
        dispatch_once(&qword_10229FFA0, &stru_102148378);
      v10 = qword_10229FFA8;
      v11 = xpc_activity_get_state(a2);
      v15 = 134349056;
      v16 = v11;
      LODWORD(v14) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 17, "[WatchService] Failed to mark activity as Continue. Current state is %{public}ld", &v15, v14);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "-[CMHealthColdStorageWatchService setupSyncActivity]_block_invoke", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
}

id sub_100613260(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "resetAnalytics");
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 144) = 0;
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 148) = 0;
  return objc_msgSend(*(id *)(a1 + 32), "continueSync:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_100613D80(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void sub_100613F30(id a1)
{
  qword_10229FFA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HealthColdStorage");
}

void sub_100613F5C(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_100613F88(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100613FB4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100261F44(a2 + 32);
    sub_100261F44(a2 + 16);
    sub_100261F44(a2);
    operator delete();
  }
}

uint64_t sub_100614000(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100261F44(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10061403C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100E6A8C4();
    operator delete();
  }
  return result;
}

_QWORD *sub_100614078@<X0>(unsigned __int8 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x180uLL);
  result = sub_1006140D0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1006140BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1006140D0(_QWORD *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1021483E8;
  sub_100E6A8C0(a1 + 3, *a2);
  return a1;
}

void sub_10061410C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100614120(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021483E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100614134(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021483E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100614168(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void sub_100614178(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_1006141A4(uint64_t a1, double **a2)
{
  double *v2;
  double *v3;
  double v4;
  double v5;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  _WORD v15[8];
  uint8_t buf[1640];

  v3 = *a2;
  v2 = a2[1];
  v4 = (*a2)[1];
  v5 = *(float *)(a1 + 136);
  if (v4 <= v5)
    v4 = *(float *)(a1 + 136);
  v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = *v3;
    do
    {
      v9 = *v6;
      v10 = v6[1];
      v6 += 3;
      v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5)
        v4 = *(float *)(a1 + 136);
      else
        v4 = v10;
      v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021483B8);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021483B8);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning No expiration rule was added so the number of records will be unbounded.", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "int CLActivityRecorderDb<CLElevationGradeEntry, CLActivityDB::ClassBDataProtectionPolicy>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLElevationGradeEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  return v7;
}

uint64_t sub_1006143A0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  char v32;
  char v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  NSObject *v37;
  int v38;
  int v39;
  uint64_t v40;
  double v41;
  __int128 v43[3];
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint8_t buf[8];
  _BYTE v51[10];
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  double v61;

  v10 = (std::__shared_weak_count *)a4[1];
  v48 = *a4;
  v49 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = (std::__shared_weak_count *)a5[1];
  v46 = *a5;
  v47 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (std::__shared_weak_count *)a6[1];
  v44 = *a6;
  v45 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v43[0] = xmmword_102302FF0;
  v43[1] = unk_102303000;
  v43[2] = xmmword_102303010;
  sub_100D04860(a1, a2, 8, &v48, &v46, &v44, a8, a7, v43);
  v19 = v45;
  if (v45)
  {
    v20 = (unint64_t *)&v45->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v47;
  if (v47)
  {
    v23 = (unint64_t *)&v47->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v49;
  if (v49)
  {
    v26 = (unint64_t *)&v49->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  *(_QWORD *)a1 = off_102148458;
  v28 = *a3;
  *(_QWORD *)(a1 + 352) = *a3;
  v29 = a3[1];
  *(_QWORD *)(a1 + 360) = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
    v28 = *(_QWORD *)(a1 + 352);
  }
  *(_DWORD *)(a1 + 368) = 10000;
  *(_WORD *)(a1 + 372) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, a1 + 368) & 1) == 0)
    *(_DWORD *)(a1 + 368) = 10000;
  sub_1001E4804(buf);
  v32 = sub_1001E4874(*(uint64_t *)buf, "StationaryLocationHarvest", (BOOL *)(a1 + 373));
  v33 = v32;
  v34 = *(std::__shared_weak_count **)v51;
  if (!*(_QWORD *)v51)
    goto LABEL_35;
  v35 = (unint64_t *)(*(_QWORD *)v51 + 8);
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (v36)
  {
LABEL_35:
    if ((v32 & 1) != 0)
      goto LABEL_37;
    goto LABEL_36;
  }
  ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
  std::__shared_weak_count::__release_weak(v34);
  if ((v33 & 1) == 0)
LABEL_36:
    *(_BYTE *)(a1 + 373) = 0;
LABEL_37:
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102148538);
  v37 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
  {
    v38 = *(_DWORD *)(a1 + 368);
    v39 = *(unsigned __int8 *)(a1 + 373);
    v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
    v41 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56))
        - *(double *)(a1 + 96);
    *(_DWORD *)buf = 68290307;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v51 = 2082;
    *(_QWORD *)&v51[2] = "";
    v52 = 2050;
    v53 = 8;
    v54 = 1025;
    v55 = v38;
    v56 = 1025;
    v57 = v39;
    v58 = 2049;
    v59 = v40;
    v60 = 2049;
    v61 = v41;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"construction\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"maxHarvestPointCount\":%{private}d, \"allowStationaryHarvest\":%{private}hhd, \"curHarvestPointCount\":%{private}lu, \"timeSinceLastUpload_s\":\"%{private}.09f\"}", buf, 0x3Cu);
  }
  return a1;
}

void sub_100614730(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100261F44(v2);
  sub_100429668(v1);
  _Unwind_Resume(a1);
}

id sub_100614788(uint64_t a1)
{
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 72), "requestArchivesForHarvester:", 8), "count");
}

id sub_1006147A4(uint64_t a1)
{
  double v2;
  double v3;

  v2 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
  v3 = v2 - (*(double (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  return _objc_msgSend(*(id *)(a1 + 72), "pruneSecondaryDataOlderThan:forHarvester:", 8, v3);
}

id sub_1006147F8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 72), "clearDataForHarvester:", 8);
}

uint64_t sub_100614804(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  NSObject *v6;
  void **v7;
  void *__p[2];
  char v10;
  _QWORD v11[2];
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  void **v19;

  sub_100119F3C(v11);
  v4 = a1 + 280;
  v5 = unk_102303000;
  *(_OWORD *)v4 = xmmword_102302FF0;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 25) = unk_102303009;
  if (sub_100006BB4(a2, "Pressure", v11))
    sub_1011E7A6C(v4, (uint64_t)v11);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102148538);
  v6 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
  {
    sub_1011E7898((double *)v4, __p);
    if (v10 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    *(_DWORD *)buf = 68289539;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2050;
    v17 = 8;
    v18 = 2081;
    v19 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"harvest-apply-rules\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"rules\":%{private, location:escape_only}s}", buf, 0x26u);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  return sub_10011A5A8(v11);
}

void sub_100614988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006149A8()
{
  return (sub_1001E4BF4() >> 4) & 1;
}

id sub_1006149C0(uint64_t a1)
{
  id v2;
  id result;
  id v4;
  uint64_t v5;
  void *v6;
  CLHUploadRequest *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v2 = objc_msgSend(*(id *)(a1 + 72), "requestArchivesForHarvester:", 8);
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        v7 = -[CLHUploadRequest initWithArchive:]([CLHUploadRequest alloc], "initWithArchive:", *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v6));
        -[CLHUploadRequest setEndpoint:](v7, "setEndpoint:", objc_msgSend(objc_msgSend(*(id *)(a1 + 80), "endpointSelector"), "pressureEndpoint"));
        objc_msgSend(*(id *)(a1 + 80), "submitRequest:", v7);

        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      v4 = result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_100614AF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 24))(v2, v3, 1);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, v5, 3);
  return 1;
}

uint64_t sub_100614B54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 32))(v2, v3, 1);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = sub_100201404(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, v5, 3);
}

void sub_100614BB0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v5;
  _BOOL4 v6;
  unint64_t v7;
  int v8;
  NSObject *v9;
  int v10;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;

  v5 = *a4;
  v6 = v5 < 0x39;
  v7 = 0x110000000000C20uLL >> v5;
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102148538);
  v8 = v6 & v7;
  v9 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v10 = *(unsigned __int8 *)(a1 + 372);
    v11[0] = 68289795;
    v11[1] = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2050;
    v15 = 8;
    v16 = 1025;
    v17 = v10;
    v18 = 1025;
    v19 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received motion state notif\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"oldIsDriving\":%{private}hhd, \"newIsDriving\":%{private}hhd}", (uint8_t *)v11, 0x28u);
  }
  *(_BYTE *)(a1 + 372) = v8;
}

uint64_t sub_100614CD8(_QWORD *a1)
{
  *a1 = off_102148458;
  sub_100261F44((uint64_t)(a1 + 44));
  return sub_100429668((uint64_t)a1);
}

void sub_100614D0C(_QWORD *a1)
{
  *a1 = off_102148458;
  sub_100261F44((uint64_t)(a1 + 44));
  sub_100429668((uint64_t)a1);
  operator delete();
}

void sub_100614D54(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_100614D80()
{
  return sub_1011E780C((uint64_t)&xmmword_102302FF0, 1, 2, 2, 1, 0.0, 43200.0, 43200.0);
}

void sub_100614E60(id a1)
{
  qword_102303020 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLGyroCalibrationDatabaseSilo"));
}

void sub_100614FE0(id a1)
{
  if (sub_10021C350())
    byte_102303030 = 1;
}

_QWORD *sub_100615314(uint64_t a1, void *a2)
{
  _QWORD *result;

  result = (_QWORD *)sub_100615340(a1, "CLGyroCalibrationDatabase", a2);
  *result = off_1021485A8;
  return result;
}

uint64_t sub_100615340(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_1021487B0;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_1006153C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006153E0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021487B0;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_10061545C@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_1006154D4(uint64_t result)
{
  *(_BYTE *)(result + 108) = 1;
  return result;
}

uint64_t sub_1006154E4()
{
  NSObject *v0;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_102148780);
  v0 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Warning: Not implemented.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_102148780);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "Warning: Not implemented.", v4, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGyroCalibrationDatabase::getGyroStats(CLMotionTypeRotationRate &, CLMotionTypeRotationRate &, CLMotionTypeRotationRate &, BOOL)", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
  return 0;
}

uint64_t sub_10061566C()
{
  NSObject *v0;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_102148780);
  v0 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Warning: Not implemented.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_102148780);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "Warning: Not implemented.", v4, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 2, "virtual int CLGyroCalibrationDatabase::getMaxDynamicTemperature()", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
  return 0x80000000;
}

uint64_t sub_1006157F4(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100615868;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102303048 != -1)
    dispatch_once(&qword_102303048, block);
  return byte_102303040;
}

id sub_100615868(uint64_t a1)
{
  id result;

  result = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "isServiceEnabled:", CFSTR("CLGyroCalibrationDatabase"));
  byte_102303040 = (char)result;
  return result;
}

void sub_100615894()
{
  operator new();
}

void sub_100615940(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_10061597C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_102148890;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_100615A54(uint64_t a1)
{
  sub_100615AD0(a1);
  operator delete();
}

void sub_100615A78(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100615AA4(id a1)
{
  off_10229FD58 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

uint64_t sub_100615AD0(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_102148890;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

double sub_100615B30(double *a1, double *a2, double *a3, double a4, double a5, double a6)
{
  __double2 v11;
  __double2 v12;
  double v13;
  double v14;
  double result;

  v11 = __sincos_stret(a4 * 0.0174532925);
  v12 = __sincos_stret(a5 * 0.0174532925);
  v13 = 6378137.0 / sqrt(v11.__sinval * -0.00669437999 * v11.__sinval + 1.0);
  v14 = v11.__cosval * (v13 + a6);
  *a1 = v12.__cosval * v14;
  *a2 = v12.__sinval * v14;
  result = v11.__sinval * (a6 + v13 * 0.99330562);
  *a3 = result;
  return result;
}

void sub_100615BEC(double *a1, long double *a2, double *a3, long double a4, long double a5, long double a6)
{
  double v9;
  double v10;
  double v11;
  double v12;
  unsigned int v13;
  double v14;
  double v15;
  __double2 v16;
  double v17;
  long double __y;

  v9 = sqrt(a5 * a5 + a4 * a4);
  *a2 = atan2(a5, a4) / 0.0174532925;
  v10 = v9 * 0.99330562;
  v11 = 0.0;
  v12 = 1.57079633;
  if (v9 * 0.99330562 != 0.0)
  {
    __y = a6;
    v13 = 0;
    v12 = 0.0;
    v14 = 0.0;
    do
    {
      v15 = v12;
      v12 = atan2(__y, v10);
      v16 = __sincos_stret(v12);
      v17 = 6378137.0 / sqrt(v16.__sinval * -0.00669437999 * v16.__sinval + 1.0);
      v11 = v9 / v16.__cosval - v17;
      if (vabdd_f64(v15, v12) >= 0.000001)
      {
        if (v13 > 8)
          goto LABEL_13;
      }
      else if (vabdd_f64(v14, v11) < 0.001 || v13 >= 9)
      {
        goto LABEL_13;
      }
      ++v13;
      v10 = v9 * (v17 / (v11 + v17) * -0.00669437999 + 1.0);
      v14 = v9 / v16.__cosval - v17;
    }
    while (v10 != 0.0);
    v12 = 1.57079633;
  }
LABEL_13:
  *a1 = v12 / 0.0174532925;
  *a3 = v11;
}

double sub_100615D5C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  double result;

  v3 = *a2;
  v2 = a2[1];
  *(_QWORD *)a1 = off_1021488D0;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 128) = 26;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 170) = 0u;
  return result;
}

uint64_t sub_100615DB8(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = off_1021488D0;
  sub_100261F44(a1 + 144);
  v4 = (void **)(a1 + 72);
  sub_10061720C(&v4);
  v4 = (void **)(a1 + 48);
  sub_10061720C(&v4);
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  sub_100261F44(a1 + 8);
  return a1;
}

void sub_100615E2C(uint64_t a1)
{
  sub_100615DB8(a1);
  operator delete();
}

uint64_t sub_100615E50(uint64_t a1)
{
  sub_100615E68(a1);
  return 1;
}

uint64_t sub_100615E68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 *v7;
  __int128 *v8;
  double *v9;
  double v10;
  uint64_t v11;
  double v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  char *v17;
  NSObject *v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  double v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  _BYTE v34[12];
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  _BYTE buf[32];
  __int128 v40;
  __int128 v41;
  __int128 v42;

  if (!*(_BYTE *)(a1 + 184))
  {
    v3 = *(_QWORD *)(a1 + 48);
    v2 = *(_QWORD *)(a1 + 56);
    if (v3 != v2)
    {
      v31 = 134218496;
      do
      {
        *(_OWORD *)buf = xmmword_101BB81F0;
        *(_OWORD *)&buf[16] = 0u;
        v40 = 0u;
        v41 = 0u;
        v42 = 0u;
        sub_1006172DC((uint64_t)buf, &v32);
        if (*((_QWORD *)&v41 + 1))
        {
          *(_QWORD *)&v42 = *((_QWORD *)&v41 + 1);
          operator delete(*((void **)&v41 + 1));
        }
        v4 = (std::__shared_weak_count *)v41;
        if ((_QWORD)v41)
        {
          v5 = (unint64_t *)(v41 + 8);
          do
            v6 = __ldaxr(v5);
          while (__stlxr(v6 - 1, v5));
          if (!v6)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
        *(_QWORD *)v34 = &buf[16];
        sub_1002A3684((void ***)v34);
        v8 = *(__int128 **)(v3 + 16);
        v7 = *(__int128 **)(v3 + 24);
        while (v8 != v7)
        {
          v9 = *(double **)v8;
          v10 = **(double **)v8;
          v11 = v32;
          if (v10 < *(double *)v32)
            *(double *)v32 = v10;
          v12 = v9[1];
          if (v12 > *(double *)(v11 + 8))
            *(double *)(v11 + 8) = v12;
          sub_10033F68C((char **)(v11 + 16), v8++);
        }
        if (*(_QWORD *)(v32 + 16) == *(_QWORD *)(v32 + 24))
        {
          if (qword_10229FF90 != -1)
            dispatch_once(&qword_10229FF90, &stru_102148900);
          v15 = qword_10229FF98;
          if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CLCyclingFTPCache, amalgamated query range is empty", buf, 2u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_35;
          bzero(buf, 0x65CuLL);
          if (qword_10229FF90 != -1)
            dispatch_once(&qword_10229FF90, &stru_102148900);
          *(_WORD *)v34 = 0;
          LODWORD(v30) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 2, "CLCyclingFTPCache, amalgamated query range is empty", v34, *(_QWORD *)&v30);
          v17 = (char *)v16;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLCyclingFTPCache::amalgamateQueryRangesForSessions()", "%s\n", v16);
        }
        else
        {
          v13 = *(_QWORD *)(a1 + 80);
          if (v13 >= *(_QWORD *)(a1 + 88))
          {
            v14 = sub_100617414((uint64_t *)(a1 + 72), v32);
          }
          else
          {
            sub_100617520(a1 + 88, *(_QWORD *)(a1 + 80), v32);
            v14 = v13 + 80;
            *(_QWORD *)(a1 + 80) = v13 + 80;
          }
          *(_QWORD *)(a1 + 80) = v14;
          if (qword_10229FF90 != -1)
            dispatch_once(&qword_10229FF90, &stru_102148900);
          v18 = qword_10229FF98;
          if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEBUG))
          {
            v19 = *(double *)v32;
            v20 = *(_QWORD *)(v32 + 8);
            v21 = (uint64_t)(*(_QWORD *)(v32 + 24) - *(_QWORD *)(v32 + 16)) >> 4;
            *(_DWORD *)buf = v31;
            *(double *)&buf[4] = v19;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v20;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = v21;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLCyclingFTPCache, amalgamated query range added from, %f, to, %f, number_dependents, %lu", buf, 0x20u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_35;
          bzero(buf, 0x65CuLL);
          if (qword_10229FF90 != -1)
            dispatch_once(&qword_10229FF90, &stru_102148900);
          v25 = *(double *)v32;
          v26 = *(_QWORD *)(v32 + 8);
          v27 = (uint64_t)(*(_QWORD *)(v32 + 24) - *(_QWORD *)(v32 + 16)) >> 4;
          *(_DWORD *)v34 = v31;
          *(double *)&v34[4] = v25;
          v35 = 2048;
          v36 = v26;
          v37 = 2048;
          v38 = v27;
          LODWORD(v30) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 2, "CLCyclingFTPCache, amalgamated query range added from, %f, to, %f, number_dependents, %lu", COERCE_DOUBLE(v34), v30, v31);
          v17 = (char *)v28;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLCyclingFTPCache::amalgamateQueryRangesForSessions()", "%s\n", v28);
        }
        if (v17 != buf)
          free(v17);
LABEL_35:
        v22 = v33;
        if (v33)
        {
          p_shared_owners = (unint64_t *)&v33->__shared_owners_;
          do
            v24 = __ldaxr(p_shared_owners);
          while (__stlxr(v24 - 1, p_shared_owners));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v3 += 80;
      }
      while (v3 != v2);
    }
    *(_BYTE *)(a1 + 184) = 1;
  }
  return 1;
}

void sub_100616318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100616358(uint64_t a1)
{
  int v1;
  double *v3;
  double *v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  const char *v24;
  char *v25;
  NSObject *v26;
  const char *v27;
  char *v28;
  double v30;
  uint64_t v31;
  uint64_t *v32;
  std::__shared_weak_count *v33;
  int v34;
  _BYTE v35[18];
  __int16 v36;
  double v37;
  _BYTE buf[24];
  double v39;
  __int128 v40;

  v1 = *(unsigned __int8 *)(a1 + 184);
  if (*(_BYTE *)(a1 + 184))
  {
    if (!*(_BYTE *)(a1 + 185))
    {
      HIDWORD(v30) = *(unsigned __int8 *)(a1 + 184);
      v3 = *(double **)(a1 + 72);
      v4 = *(double **)(a1 + 80);
      if (v3 != v4)
      {
        v31 = 134218496;
        do
        {
          v5 = *(_QWORD *)(a1 + 8);
          v6 = *v3;
          v7 = v3[1];
          *(_QWORD *)&buf[8] = 0;
          *(_QWORD *)&buf[16] = 0;
          *(_QWORD *)buf = &buf[8];
          v40 = xmmword_101B9B460;
          sub_100617820((uint64_t)&v34, (uint64_t *)&v40, 2);
          sub_1009F355C(v5, (uint64_t)buf, (uint64_t)&v34, &v32, v6, v7);
          sub_100008848((uint64_t)&v34, *(_QWORD **)&v35[4]);
          sub_100008848((uint64_t)buf, *(_QWORD **)&buf[8]);
          sub_100349198((_QWORD *)v3 + 5, (uint64_t *)&v32);
          v8 = (uint64_t *)*((_QWORD *)v3 + 2);
          v9 = (uint64_t *)*((_QWORD *)v3 + 3);
          while (v8 != v9)
          {
            v10 = *v8;
            v8 += 2;
            sub_100349198((_QWORD *)(v10 + 40), (uint64_t *)&v32);
          }
          if (qword_10229FF90 != -1)
            dispatch_once(&qword_10229FF90, &stru_102148900);
          v11 = qword_10229FF98;
          if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEBUG))
          {
            v13 = *v32;
            v12 = v32[1];
            v14 = sub_1009F1538(v32);
            v15 = sub_1009F1554(v32);
            *(_DWORD *)buf = v31;
            *(_QWORD *)&buf[4] = 0x2E8BA2E8BA2E8BA3 * ((v12 - v13) >> 3);
            *(_WORD *)&buf[12] = 2048;
            *(double *)&buf[14] = v14;
            *(_WORD *)&buf[22] = 2048;
            v39 = v15;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLCyclingFTPCache, queryRangesForRecords found nmbr_sessions, %zu, from, %f, to, %f", buf, 0x20u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FF90 != -1)
              dispatch_once(&qword_10229FF90, &stru_102148900);
            v19 = qword_10229FF98;
            v21 = *v32;
            v20 = v32[1];
            v22 = sub_1009F1538(v32);
            v23 = sub_1009F1554(v32);
            v34 = v31;
            *(_QWORD *)v35 = 0x2E8BA2E8BA2E8BA3 * ((v20 - v21) >> 3);
            *(_WORD *)&v35[8] = 2048;
            *(double *)&v35[10] = v22;
            v36 = 2048;
            v37 = v23;
            LODWORD(v30) = 32;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v19, 2, "CLCyclingFTPCache, queryRangesForRecords found nmbr_sessions, %zu, from, %f, to, %f", (size_t)&v34, v30, *(double *)&v31);
            v25 = (char *)v24;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLCyclingFTPCache::queryRangesForRecords()", "%s\n", v24);
            if (v25 != buf)
              free(v25);
          }
          v16 = v33;
          if (v33)
          {
            p_shared_owners = (unint64_t *)&v33->__shared_owners_;
            do
              v18 = __ldaxr(p_shared_owners);
            while (__stlxr(v18 - 1, p_shared_owners));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
          v3 += 10;
        }
        while (v3 != v4);
      }
      *(_BYTE *)(a1 + 185) = 1;
      v1 = HIDWORD(v30);
    }
  }
  else
  {
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_102148900);
    v26 = qword_10229FF98;
    if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "CLCyclingFTPCache, attempting to query cache records before preparing the query", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF90 != -1)
        dispatch_once(&qword_10229FF90, &stru_102148900);
      LOWORD(v34) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 2, "CLCyclingFTPCache, attempting to query cache records before preparing the query", &v34, 2);
      v28 = (char *)v27;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLCyclingFTPCache::queryRangesForRecords()", "%s\n", v27);
      if (v28 != buf)
        free(v28);
    }
  }
  return v1 != 0;
}

void sub_1006167FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10061684C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  char *v4;
  char *v5;
  int64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t j;
  uint64_t v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  __int16 v15[8];
  uint8_t buf[1640];

  v3 = *(_QWORD **)(a1 + 144);
  if (v3)
    v3[1] = *v3;
  v5 = *(char **)(a1 + 24);
  v4 = *(char **)(a1 + 32);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 32);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8)
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    *(_QWORD *)(a1 + 32) = &v5[v6];
  }
  *(_WORD *)(a1 + 184) = 0;
  v8 = *(_QWORD *)(a1 + 48);
  for (i = *(_QWORD *)(a1 + 56); i != v8; sub_100617290(a1 + 64, i))
    i -= 80;
  *(_QWORD *)(a1 + 56) = v8;
  v10 = *(_QWORD *)(a1 + 72);
  for (j = *(_QWORD *)(a1 + 80); j != v10; sub_100617290(a1 + 88, j))
    j -= 80;
  *(_QWORD *)(a1 + 80) = v10;
  if (qword_10229FF90 != -1)
    dispatch_once(&qword_10229FF90, &stru_102148900);
  v11 = qword_10229FF98;
  if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLCyclingFTPCache, release()", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_102148900);
    v15[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 2, "CLCyclingFTPCache, release()", v15, 2);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCyclingFTPCache::release(const CLCyclingFTPCacheIterator *)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  return 1;
}

uint64_t sub_100616AA0(uint64_t a1)
{
  void *v2;
  void **v4;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  sub_100261F44(a1 + 40);
  v4 = (void **)(a1 + 16);
  sub_1002A3684(&v4);
  return a1;
}

uint64_t sub_100616AF0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  v4 = (unsigned __int8 *)(a1 + 96);
  if (a1 + 96 != a2
    || *(double *)(a1 + 120) != *(double *)(a2 + 24)
    || *(double *)(a1 + 112) != *(double *)(a2 + 16)
    || *(_QWORD *)(a1 + 128) != *(_QWORD *)(a2 + 32))
  {
    sub_1009F3644(*(_QWORD *)(a1 + 8), a2);
    uuid_copy(v4, (const unsigned __int8 *)a2);
    v7 = *(_QWORD **)(a1 + 144);
    v6 = (_QWORD *)(a1 + 144);
    v5 = v7;
    *((_OWORD *)v6 - 2) = *(_OWORD *)(a2 + 16);
    *(v6 - 2) = *(_QWORD *)(a2 + 32);
    if (v7)
      v5[1] = *v5;
    sub_100349198(v6, (uint64_t *)(a2 + 48));
  }
  return 1;
}

void sub_100616BA0(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  void *__p[2];
  __int128 v55;
  __int128 v56;
  void **v57;

  *(double *)&v51 = a4;
  *((double *)&v51 + 1) = a5;
  v52 = 0u;
  v53 = 0u;
  *(_OWORD *)__p = 0u;
  v55 = 0u;
  sub_1006172DC((uint64_t)&v51, &v56);
  if (__p[1])
  {
    *(void **)&v55 = __p[1];
    operator delete(__p[1]);
  }
  v8 = (std::__shared_weak_count *)__p[0];
  if (__p[0])
  {
    v9 = (unint64_t *)((char *)__p[0] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v57 = (void **)&v52;
  sub_1002A3684(&v57);
  v11 = (_QWORD *)v56;
  v12 = *(_QWORD **)(v56 + 64);
  v13 = *(_QWORD *)(v56 + 72);
  if ((unint64_t)v12 >= v13)
  {
    v15 = (void **)(v56 + 56);
    v16 = *(_QWORD *)(v56 + 56);
    v17 = ((uint64_t)v12 - v16) >> 3;
    if ((unint64_t)(v17 + 1) >> 61)
      sub_100259694();
    v18 = v13 - v16;
    v19 = v18 >> 2;
    if (v18 >> 2 <= (unint64_t)(v17 + 1))
      v19 = v17 + 1;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    if (v20)
      v21 = (char *)sub_10025E6A0(v56 + 72, v20);
    else
      v21 = 0;
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = a2;
    v14 = v22 + 8;
    v25 = (char *)v11[7];
    v24 = (char *)v11[8];
    if (v24 != v25)
    {
      do
      {
        v26 = *((_QWORD *)v24 - 1);
        v24 -= 8;
        *((_QWORD *)v22 - 1) = v26;
        v22 -= 8;
      }
      while (v24 != v25);
      v24 = (char *)*v15;
    }
    v11[7] = v22;
    v11[8] = v14;
    v11[9] = v23;
    if (v24)
      operator delete(v24);
  }
  else
  {
    *v12 = a2;
    v14 = v12 + 1;
  }
  v11[8] = v14;
  v27 = a1[6];
  if (a1[7] == v27)
  {
    *(_OWORD *)__p = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v51 = 0u;
    sub_100616F48((char **)&v52, &v56);
    v28 = a1[7];
    if (v28 >= a1[8])
    {
      v29 = sub_100617414(a1 + 6, (uint64_t)&v51);
    }
    else
    {
      sub_100617520((uint64_t)(a1 + 8), a1[7], (uint64_t)&v51);
      v29 = v28 + 80;
      a1[7] = v28 + 80;
    }
    a1[7] = v29;
    if (__p[1])
    {
      *(void **)&v55 = __p[1];
      operator delete(__p[1]);
    }
    v30 = (std::__shared_weak_count *)__p[0];
    if (__p[0])
    {
      v31 = (unint64_t *)((char *)__p[0] + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v57 = (void **)&v52;
    sub_1002A3684(&v57);
  }
  else
  {
    sub_100616F48((char **)(v27 + 16), &v56);
  }
  *(_QWORD *)&v51 = a1;
  sub_100617AC8((uint64_t *)&v56, (uint64_t *)&v51, a3);
  v33 = a1[5];
  v34 = *a3;
  v35 = (_QWORD *)a1[4];
  if ((unint64_t)v35 >= v33)
  {
    v37 = a1[3];
    v38 = ((uint64_t)v35 - v37) >> 3;
    if ((unint64_t)(v38 + 1) >> 61)
      sub_100259694();
    v39 = v33 - v37;
    v40 = v39 >> 2;
    if (v39 >> 2 <= (unint64_t)(v38 + 1))
      v40 = v38 + 1;
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
      v41 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v41 = v40;
    if (v41)
      v42 = (char *)sub_10025E6A0((uint64_t)(a1 + 5), v41);
    else
      v42 = 0;
    v43 = &v42[8 * v38];
    v44 = &v42[8 * v41];
    *(_QWORD *)v43 = v34;
    v36 = v43 + 8;
    v46 = (char *)a1[3];
    v45 = (char *)a1[4];
    if (v45 != v46)
    {
      do
      {
        v47 = *((_QWORD *)v45 - 1);
        v45 -= 8;
        *((_QWORD *)v43 - 1) = v47;
        v43 -= 8;
      }
      while (v45 != v46);
      v45 = (char *)a1[3];
    }
    a1[3] = v43;
    a1[4] = v36;
    a1[5] = v44;
    if (v45)
      operator delete(v45);
  }
  else
  {
    *v35 = v34;
    v36 = v35 + 1;
  }
  a1[4] = v36;
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
  if (*((_QWORD *)&v56 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
}

void sub_100616EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v9 + 56) = v10;
  sub_100616AA0((uint64_t)&a9);
  sub_100261F44(v11 - 72);
  _Unwind_Resume(a1);
}

char *sub_100616F48(char **a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v29;
  int64x2_t v30;
  char *v31;
  uint64_t v32;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      sub_100259694();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v32 = v4;
    v16 = (char *)sub_10028E224(v4, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v30 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v31 = v27;
    v29 = v26.i64[0];
    sub_100014F20((uint64_t)&v29);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return v11 - 16;
}

uint64_t sub_10061708C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v20;

  sub_100615E68(a1);
  sub_100616358(a1);
  v3 = *(_QWORD **)(a1 + 72);
  v2 = *(_QWORD **)(a1 + 80);
  v20 = v2;
  v4 = 1;
  while (v3 != v2)
  {
    v5 = (uint64_t *)v3[5];
    v6 = *v5;
    v7 = v5[1];
    while (v6 != v7)
    {
      v8 = *(_QWORD **)(v6 + 48);
      if (v8 && *v8 == v8[1])
        sub_100616AF0(a1, v6);
      v9 = (uint64_t *)v3[2];
      v10 = (uint64_t *)v3[3];
      while (v9 != v10)
      {
        v11 = *v9;
        v12 = (std::__shared_weak_count *)v9[1];
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        v16 = *(_QWORD **)(v11 + 56);
        v15 = *(_QWORD **)(v11 + 64);
        while (v16 != v15)
        {
          v4 &= (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v16 + 64))(*v16, v6);
          ++v16;
        }
        if (v12)
        {
          v17 = (unint64_t *)&v12->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v9 += 2;
      }
      v6 += 88;
    }
    v3 += 10;
    v2 = v20;
  }
  return v4 & 1;
}

void sub_1006171C8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (v1)
    sub_101901F38(v1);
  _Unwind_Resume(exception_object);
}

void sub_1006171E0(id a1)
{
  qword_10229FF98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CyclingPower");
}

void sub_10061720C(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        sub_100617290((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100617290(uint64_t a1, uint64_t a2)
{
  void *v3;
  void **v4;

  v3 = *(void **)(a2 + 56);
  if (v3)
  {
    *(_QWORD *)(a2 + 64) = v3;
    operator delete(v3);
  }
  sub_100261F44(a2 + 40);
  v4 = (void **)(a2 + 16);
  sub_1002A3684(&v4);
}

void sub_1006172DC(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;

  v4 = (char *)operator new(0x68uLL);
  sub_100617334((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
}

void sub_100617320(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double sub_100617334(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = off_102148930;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a2 + 40) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_OWORD *)(a2 + 56) = 0u;
  return result;
}

void sub_1006173A4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102148930;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1006173B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102148930;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1006173EC(uint64_t a1)
{
  char v1;

  sub_100617290((uint64_t)&v1, a1 + 24);
}

uint64_t sub_100617414(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    sub_100259694();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_1002952D4((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[80 * v3];
  v13 = &v7[80 * v6];
  sub_100617520((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 80;
  sub_1006175D8(a1, &v10);
  v8 = a1[1];
  sub_1006177AC(&v10);
  return v8;
}

void sub_10061750C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1006177AC((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100617520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;

  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  sub_1004F6C18((char *)(a2 + 16), *(_QWORD **)(a3 + 16), *(_QWORD **)(a3 + 24), (uint64_t)(*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 4);
  v5 = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 48) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v8 = (_QWORD *)(a2 + 56);
  v8[2] = 0;
  return sub_10025EA00(v8, *(const void **)(a3 + 56), *(_QWORD *)(a3 + 64), (uint64_t)(*(_QWORD *)(a3 + 64) - *(_QWORD *)(a3 + 56)) >> 3);
}

void sub_1006175B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_100261F44(v2);
  sub_1002A3684((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006175D8(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10061764C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10061764C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  char v11;
  __int128 v12;
  __int128 v13;

  v7 = a7;
  *(_QWORD *)&v13 = a6;
  *((_QWORD *)&v13 + 1) = a7;
  v12 = v13;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  if (a3 == a5)
  {
    v8 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 80) = *(_OWORD *)(a3 - 80);
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 64) = 0;
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      *(_QWORD *)(v7 - 48) = *(_QWORD *)(a3 - 48);
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 = *((_QWORD *)&v13 + 1) - 80;
      *((_QWORD *)&v13 + 1) -= 80;
      a3 -= 80;
    }
    while (a3 != a5);
    v8 = v13;
  }
  v11 = 1;
  sub_100617728((uint64_t)v10);
  return v8;
}

uint64_t sub_100617728(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10061775C((uint64_t *)a1);
  return a1;
}

void sub_10061775C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_100617290(v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
}

void **sub_1006177AC(void **a1)
{
  sub_1006177DC(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_1006177DC(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 80;
    sub_100617290(v4, i - 80);
  }
}

uint64_t sub_100617820(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 8 * a3;
    do
    {
      sub_10061789C((uint64_t **)a1, v4, a2, a2);
      ++a2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_100617884(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10061789C(uint64_t **a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (uint64_t **)sub_100617920(a1, a2, &v11, &v10, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    sub_1000145B0(a1, v11, v8, v7);
  }
  return v7;
}

_QWORD *sub_100617920(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

_QWORD *sub_100617AC8@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x58uLL);
  result = sub_100617B28(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_100617B14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100617B28(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102148980;
  sub_100E497A0((uint64_t)(a1 + 3), a2, *a3);
  return a1;
}

void sub_100617B64(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100617B78(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102148980;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100617B8C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102148980;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100617BC0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

id sub_100617D44(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "refresh");
}

id sub_100617D4C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "refresh");
}

void sub_100617E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100617F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100617FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_100617FE0(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  int v3;

  v3 = 11;
  result = (_QWORD *)sub_10080E4E4(a1, &v3, qword_102303050, a2);
  *result = off_1021489D0;
  return result;
}

void sub_100618024(uint64_t a1)
{
  sub_100FA05F0(a1);
  operator delete();
}

uint64_t sub_100618048()
{
  return dword_1022A3678;
}

double sub_100618054()
{
  return 0.5;
}

double sub_10061805C()
{
  return 0.5;
}

uint64_t sub_100618064()
{
  return 4096;
}

uint64_t sub_10061806C()
{
  return 4096;
}

uint64_t sub_100618074(uint64_t a1, FILE *a2)
{
  NSObject *v4;
  std::string::size_type v5;
  uint64_t v6;
  NSObject *v7;
  std::string::size_type size;
  std::string *v9;
  std::string::size_type v10;
  NSData *v11;
  void *v12;
  id v13;
  TRANSITPbTransitMacTile *v14;
  unsigned __int8 v15;
  double v16;
  double v17;
  unsigned int v18;
  NSObject *v19;
  const char *v20;
  uint8_t *v21;
  NSObject *v22;
  std::string::size_type v23;
  std::string::size_type v24;
  const char *v25;
  NSObject *v26;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  double v31;
  NSObject *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  double Current;
  unint64_t v37;
  const char *v38;
  uint8_t *v39;
  std::string::size_type v40;
  const char *v41;
  uint8_t *v42;
  const char *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  double v48;
  unint64_t v49;
  const char *v50;
  uint8_t *v51;
  uint64_t v52;
  int v53;
  std::string v54;
  _BYTE v55[14];
  __int16 v56;
  unsigned int v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  unsigned int v63;
  __int16 v64;
  unint64_t v65;
  std::string::value_type __ptr[1040];
  uint8_t buf[4];
  _BYTE v68[10];
  __int16 v69;
  unsigned int v70;
  __int16 v71;
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  unsigned int v76;
  __int16 v77;
  unint64_t v78;

  if (!a2)
    sub_101901F8C(qword_1022A02D0 == -1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102148A98);
  v4 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TransitMac, Traversing transit mac tile", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102148A98);
    *(_WORD *)__ptr = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TransitMac, Traversing transit mac tile", __ptr, 2);
    v39 = (uint8_t *)v38;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLTransitMacTile::traverseTileFile(FILE *, const CLTileFile::TraverseDetails &)", "%s\n", v38);
    if (v39 != buf)
      free(v39);
  }
  memset(&v54, 0, sizeof(v54));
  do
  {
    v5 = fread(__ptr, 1uLL, 0x400uLL, a2);
    std::string::append(&v54, __ptr, v5);
  }
  while (v5 && !feof(a2) && !ferror(a2));
  if (ferror(a2))
  {
    v6 = 0;
    goto LABEL_60;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102148A98);
  v7 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v54.__r_.__value_.__l.__size_;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)v68 = size;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TransitMac, Transit mac tile size = %lu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102148A98);
    v40 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v40 = v54.__r_.__value_.__l.__size_;
    *(_DWORD *)v55 = 134217984;
    *(_QWORD *)&v55[4] = v40;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TransitMac, Transit mac tile size = %lu", v55);
    v42 = (uint8_t *)v41;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLTransitMacTile::traverseTileFile(FILE *, const CLTileFile::TraverseDetails &)", "%s\n", v41);
    if (v42 != buf)
      free(v42);
  }
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v54;
  else
    v9 = (std::string *)v54.__r_.__value_.__r.__words[0];
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  else
    v10 = v54.__r_.__value_.__l.__size_;
  v11 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v9, v10);
  v12 = objc_autoreleasePoolPush();
  v13 = objc_msgSend(objc_alloc((Class)PBDataReader), "initWithData:", v11);
  v14 = objc_opt_new(TRANSITPbTransitMacTile);
  v15 = -[TRANSITPbTransitMacTile readFrom:](v14, "readFrom:", v13);
  if (!v14)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102148A98);
    v19 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "TransitMac, failed to allocate transit mac tile", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_58;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102148A98);
    *(_WORD *)v55 = 0;
    LODWORD(v52) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "TransitMac, failed to allocate transit mac tile", v55, v52);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLTransitMacTile::traverseTileFile(FILE *, const CLTileFile::TraverseDetails &)", "%s\n", v20);
    goto LABEL_84;
  }
  if ((v15 & 1) == 0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102148A98);
    v22 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v23 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v23 = v54.__r_.__value_.__l.__size_;
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v68 = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "TransitMac, failed to decode transit mac tile protobuf, encrypted=%{public}lu", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_58;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102148A98);
    v24 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v24 = v54.__r_.__value_.__l.__size_;
    *(_DWORD *)v55 = 134349056;
    *(_QWORD *)&v55[4] = v24;
    LODWORD(v52) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "TransitMac, failed to decode transit mac tile protobuf, encrypted=%{public}lu", v55, v52);
    v21 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLTransitMacTile::traverseTileFile(FILE *, const CLTileFile::TraverseDetails &)", "%s\n", v25);
    goto LABEL_84;
  }
  if (-[TRANSITPbTransitMacTile hasVersion](v14, "hasVersion")
    && -[TRANSITPbTransitMacTile hasGenerationTimeSecs](v14, "hasGenerationTimeSecs")
    && -[TRANSITPbTransitMacTile macsCount](v14, "macsCount"))
  {
    -[TRANSITPbTransitMacTile generationTimeSecs](v14, "generationTimeSecs");
    v17 = v16;
    if (-[TRANSITPbTransitMacTile hasExpirationAgeSecs](v14, "hasExpirationAgeSecs"))
      v18 = -[TRANSITPbTransitMacTile expirationAgeSecs](v14, "expirationAgeSecs");
    else
      v18 = 31536000;
    v28 = -[TRANSITPbTransitMacTile version](v14, "version");
    v29 = -[TRANSITPbTransitMacTile tileX](v14, "tileX");
    v30 = -[TRANSITPbTransitMacTile tileY](v14, "tileY");
    v31 = v17 - kCFAbsoluteTimeIntervalSince1970;
    *(_DWORD *)(a1 + 184) = v28;
    *(_DWORD *)(a1 + 52) = v29;
    *(_DWORD *)(a1 + 56) = v30;
    *(_QWORD *)(a1 + 64) = -1;
    *(double *)(a1 + 176) = v17 - kCFAbsoluteTimeIntervalSince1970;
    *(_DWORD *)(a1 + 200) = v18;
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102148A98);
    v32 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v33 = -[TRANSITPbTransitMacTile version](v14, "version");
      v34 = -[TRANSITPbTransitMacTile tileX](v14, "tileX");
      v35 = -[TRANSITPbTransitMacTile tileY](v14, "tileY");
      Current = CFAbsoluteTimeGetCurrent();
      v37 = -[TRANSITPbTransitMacTile macsCount](v14, "macsCount");
      *(_DWORD *)buf = 67110656;
      *(_DWORD *)v68 = v33;
      *(_WORD *)&v68[4] = 1024;
      *(_DWORD *)&v68[6] = v34;
      v69 = 1024;
      v70 = v35;
      v71 = 2048;
      v72 = v31;
      v73 = 2048;
      v74 = Current - v31;
      v75 = 1024;
      v76 = v18;
      v77 = 2048;
      v78 = v37;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "TransitMac, ver,%d, x, %d, y, %d, generated, %.01lf, age, %.01f, ageThresh, %d, numOfMacs, %lu", buf, 0x38u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102148A98);
      v44 = qword_1022A02D8;
      v45 = -[TRANSITPbTransitMacTile version](v14, "version");
      v46 = -[TRANSITPbTransitMacTile tileX](v14, "tileX");
      v47 = -[TRANSITPbTransitMacTile tileY](v14, "tileY");
      v48 = CFAbsoluteTimeGetCurrent();
      v49 = -[TRANSITPbTransitMacTile macsCount](v14, "macsCount");
      *(_DWORD *)v55 = 67110656;
      *(_DWORD *)&v55[4] = v45;
      *(_WORD *)&v55[8] = 1024;
      *(_DWORD *)&v55[10] = v46;
      v56 = 1024;
      v57 = v47;
      v58 = 2048;
      v59 = v31;
      v60 = 2048;
      v61 = v48 - v31;
      v62 = 1024;
      v63 = v18;
      v64 = 2048;
      v65 = v49;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v44, 2, "TransitMac, ver,%d, x, %d, y, %d, generated, %.01lf, age, %.01f, ageThresh, %d, numOfMacs, %lu", v55, 56, v53, *(double *)&v54.__r_.__value_.__l.__data_, *(double *)&v54.__r_.__value_.__l.__size_, LODWORD(v54.__r_.__value_.__r.__words[2]), *(_QWORD *)v55);
      v51 = (uint8_t *)v50;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLTransitMacTile::traverseTileFile(FILE *, const CLTileFile::TraverseDetails &)", "%s\n", v50);
      if (v51 != buf)
        free(v51);
    }
    v6 = 1;
    goto LABEL_59;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102148A98);
  v26 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "TransitMac, failed to get fields in transit mac tile", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102148A98);
    *(_WORD *)v55 = 0;
    LODWORD(v52) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "TransitMac, failed to get fields in transit mac tile", v55, v52);
    v21 = (uint8_t *)v43;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLTransitMacTile::traverseTileFile(FILE *, const CLTileFile::TraverseDetails &)", "%s\n", v43);
LABEL_84:
    if (v21 != buf)
      free(v21);
  }
LABEL_58:
  v6 = 0;
LABEL_59:
  objc_autoreleasePoolPop(v12);
LABEL_60:
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  return v6;
}

void sub_100618AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100618B50(uint64_t a1, id **a2, char **a3)
{
  NSObject *v6;
  std::string *p_p;
  FILE *v8;
  std::string::size_type v9;
  NSObject *v10;
  std::string *v11;
  NSObject *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string::size_type size;
  id v17;
  TRANSITPbTransitMacTile *v18;
  NSMutableArray *v19;
  id v20;
  uint64_t v21;
  void *i;
  void *v23;
  id *v24;
  id *v25;
  id v26;
  id v27;
  id v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  NSObject *v40;
  std::string *v41;
  NSObject *v43;
  std::string *v44;
  const char *v45;
  uint8_t *v46;
  std::string *v47;
  const char *v48;
  uint8_t *v49;
  std::string *v50;
  const char *v51;
  uint8_t *v52;
  std::string *v53;
  const char *v54;
  uint8_t *v55;
  std::string *v56;
  const char *v57;
  uint8_t *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  std::string v63;
  std::string __p;
  _BYTE v65[128];
  int v66;
  std::string *v67;
  int __ptr;
  std::string *v69;
  uint8_t buf[4];
  std::string *v71;

  if (!a3)
    sub_1019020F8(qword_1022A02D0 == -1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102148A98);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "TransitMac, Searching transit mac tile", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102148A98);
    LOWORD(__ptr) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TransitMac, Searching transit mac tile", &__ptr, 2);
    v46 = (uint8_t *)v45;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTransitMacTile::extractTransitMacAddresses(std::vector<uint64_t> *, std::vector<CLTilesManager_Type::TransitMac> *)", "%s\n", v45);
    if (v46 != buf)
      free(v46);
  }
  a3[1] = *a3;
  sub_100BCCB44((int *)(a1 + 48), a1 + 8, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v8 = fopen((const char *)p_p, "rb");
  if (v8)
  {
    memset(&v63, 0, sizeof(v63));
    do
    {
      v9 = fread(&__ptr, 1uLL, 0x400uLL, v8);
      std::string::append(&v63, (const std::string::value_type *)&__ptr, v9);
    }
    while (v9 && !feof(v8) && !ferror(v8));
    if (ferror(v8))
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102148A98);
      v10 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v11 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315138;
        v71 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TransitMac, failed to read tile file, %s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102148A98);
        v47 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v66 = 136315138;
        v67 = v47;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TransitMac, failed to read tile file, %s", (const char *)&v66);
        v49 = (uint8_t *)v48;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLTransitMacTile::extractTransitMacAddresses(std::vector<uint64_t> *, std::vector<CLTilesManager_Type::TransitMac> *)", "%s\n", v48);
        if (v49 != buf)
          free(v49);
      }
      fclose(v8);
    }
    else
    {
      fclose(v8);
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &v63;
      else
        v15 = (std::string *)v63.__r_.__value_.__r.__words[0];
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v63.__r_.__value_.__r.__words[2]);
      else
        size = v63.__r_.__value_.__l.__size_;
      v17 = objc_msgSend(objc_alloc((Class)PBDataReader), "initWithData:", +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v15, size));
      v18 = objc_opt_new(TRANSITPbTransitMacTile);
      if (-[TRANSITPbTransitMacTile readFrom:](v18, "readFrom:", v17))
      {
        if (-[TRANSITPbTransitMacTile macsCount](v18, "macsCount"))
        {
          v61 = 0u;
          v62 = 0u;
          v59 = 0u;
          v60 = 0u;
          v19 = -[TRANSITPbTransitMacTile macs](v18, "macs");
          v20 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v19, "countByEnumeratingWithState:objects:count:", &v59, v65, 16);
          if (v20)
          {
            v21 = *(_QWORD *)v60;
            do
            {
              for (i = 0; i != v20; i = (char *)i + 1)
              {
                if (*(_QWORD *)v60 != v21)
                  objc_enumerationMutation(v19);
                v23 = *(void **)(*((_QWORD *)&v59 + 1) + 8 * (_QWORD)i);
                v24 = *a2;
                v25 = a2[1];
                v26 = objc_msgSend(v23, "mac");
                if (v24 != v25)
                {
                  while (*v24 != v26)
                  {
                    if (++v24 == v25)
                    {
                      v24 = v25;
                      break;
                    }
                  }
                }
                if (v24 != a2[1])
                {
                  v27 = objc_msgSend(v23, "mac");
                  v28 = v27;
                  v30 = a3[1];
                  v29 = (unint64_t)a3[2];
                  if ((unint64_t)v30 >= v29)
                  {
                    v32 = *a3;
                    v33 = (v30 - *a3) >> 3;
                    v34 = v33 + 1;
                    if ((unint64_t)(v33 + 1) >> 61)
                      sub_100259694();
                    v35 = v29 - (_QWORD)v32;
                    if (v35 >> 2 > v34)
                      v34 = v35 >> 2;
                    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
                      v36 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v36 = v34;
                    if (v36)
                    {
                      v37 = (char *)sub_10025E6A0((uint64_t)(a3 + 2), v36);
                      v32 = *a3;
                      v30 = a3[1];
                    }
                    else
                    {
                      v37 = 0;
                    }
                    v38 = &v37[8 * v33];
                    *(_QWORD *)v38 = v28;
                    v31 = v38 + 8;
                    while (v30 != v32)
                    {
                      v39 = *((_QWORD *)v30 - 1);
                      v30 -= 8;
                      *((_QWORD *)v38 - 1) = v39;
                      v38 -= 8;
                    }
                    *a3 = v38;
                    a3[1] = v31;
                    a3[2] = &v37[8 * v36];
                    if (v32)
                      operator delete(v32);
                  }
                  else
                  {
                    *(_QWORD *)v30 = v27;
                    v31 = v30 + 8;
                  }
                  a3[1] = v31;
                }
              }
              v20 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v19, "countByEnumeratingWithState:objects:count:", &v59, v65, 16);
            }
            while (v20);
          }
        }
        else
        {
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102148A98);
          v43 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
          {
            v44 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v44 = (std::string *)__p.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136315138;
            v71 = v44;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "TransitMac, empty tile??, %s", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A02D0 != -1)
              dispatch_once(&qword_1022A02D0, &stru_102148A98);
            v56 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v56 = (std::string *)__p.__r_.__value_.__r.__words[0];
            v66 = 136315138;
            v67 = v56;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TransitMac, empty tile??, %s", (const char *)&v66);
            v58 = (uint8_t *)v57;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLTransitMacTile::extractTransitMacAddresses(std::vector<uint64_t> *, std::vector<CLTilesManager_Type::TransitMac> *)", "%s\n", v57);
            if (v58 != buf)
              free(v58);
          }
        }
        v14 = 1;
        goto LABEL_78;
      }
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102148A98);
      v40 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v41 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315138;
        v71 = v41;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "TransitMac, failed to parse tile file, %s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102148A98);
        v53 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v53 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v66 = 136315138;
        v67 = v53;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TransitMac, failed to parse tile file, %s", (const char *)&v66);
        v55 = (uint8_t *)v54;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLTransitMacTile::extractTransitMacAddresses(std::vector<uint64_t> *, std::vector<CLTilesManager_Type::TransitMac> *)", "%s\n", v54);
        if (v55 != buf)
          free(v55);
      }
    }
    v14 = 0;
LABEL_78:
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    goto LABEL_80;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102148A98);
  v12 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v13 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v71 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "TransitMac, failed to open tile file, %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102148A98);
    v50 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v50 = (std::string *)__p.__r_.__value_.__r.__words[0];
    __ptr = 136315138;
    v69 = v50;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TransitMac, failed to open tile file, %s", (const char *)&__ptr);
    v52 = (uint8_t *)v51;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTransitMacTile::extractTransitMacAddresses(std::vector<uint64_t> *, std::vector<CLTilesManager_Type::TransitMac> *)", "%s\n", v51);
    if (v52 != buf)
      free(v52);
  }
  v14 = 0;
LABEL_80:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v14;
}

void sub_100619590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100619604@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v26;
  _QWORD v27[2];
  uint64_t v28;
  _QWORD v29[10];
  char v30;
  _QWORD v31[21];
  __int16 v32;

  v4 = *(_QWORD *)(a1 + 40);
  v31[19] = v4;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v32 = 256;
  sub_100263E50((uint64_t)v27);
  v5 = sub_100263F7C(&v28, (uint64_t)"CLTileFile(", 11);
  v6 = sub_100263F7C(v5, (uint64_t)"tileId=", 7);
  sub_100BCC240((unsigned int *)(a1 + 48), __p);
  if ((v26 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v26 & 0x80u) == 0)
    v8 = v26;
  else
    v8 = (uint64_t)__p[1];
  v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
  v10 = sub_100263F7C(v9, (uint64_t)", localFilename=", 16);
  v11 = *(char *)(a1 + 31);
  if (v11 >= 0)
    v12 = a1 + 8;
  else
    v12 = *(_QWORD *)(a1 + 8);
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a1 + 31);
  else
    v13 = *(_QWORD *)(a1 + 16);
  v14 = sub_100263F7C(v10, v12, v13);
  v15 = sub_100263F7C(v14, (uint64_t)", tempFilename=", 15);
  v18 = *(_QWORD *)(a1 + 208);
  v17 = a1 + 208;
  v16 = v18;
  v19 = *(char *)(v17 + 23);
  if (v19 >= 0)
    v20 = v17;
  else
    v20 = v16;
  if (v19 >= 0)
    v21 = *(unsigned __int8 *)(v17 + 23);
  else
    v21 = *(_QWORD *)(v17 + 8);
  v22 = sub_100263F7C(v15, v20, v21);
  sub_100263F7C(v22, (uint64_t)")", 1);
  if ((char)v26 < 0)
    operator delete(__p[0]);
  std::stringbuf::str(a2, v29);
  *(_QWORD *)((char *)v27
  v28 = v23;
  if (v30 < 0)
    operator delete((void *)v29[8]);
  std::streambuf::~streambuf(v29);
  std::ios::~ios(v31);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_1006197C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  sub_1018B38B4((uint64_t)&a16);
  sub_10187E514(v16 - 72);
  _Unwind_Resume(a1);
}

uint64_t sub_100619808()
{
  NSObject *v0;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102148A98);
  v0 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "This instance has no : TEST_testBinarySearch", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102148A98);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "This instance has no : TEST_testBinarySearch", v4, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLTileFile::TEST_testBinarySearch(const char *)", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
  return 0;
}

void sub_100619990(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

BOOL sub_1006199BC()
{
  return os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT);
}

BOOL sub_1006199D0()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 728), OS_LOG_TYPE_INFO);
}

BOOL sub_1006199E0()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 728));
}

void sub_1006199EC()
{
  operator new();
}

void sub_100619A3C()
{
  operator delete();
}

void sub_100619F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100619FA0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onScanTimer");
}

void sub_10061A14C(uint64_t a1, unsigned int *a2, __int16 *a3, void *a4)
{
  uint64_t v6;
  __int16 v7;
  _BYTE v8[8];
  void *__p;
  char v10;
  char v11;
  uint64_t v12;
  _QWORD v13[4];
  void **v14;

  v6 = *a2;
  v7 = *a3;
  sub_10031F08C(v8, (uint64_t)(a3 + 4));
  v12 = *((_QWORD *)a3 + 13);
  memset(v13, 0, 24);
  sub_10055A7B8(v13, *((_QWORD *)a3 + 14), *((_QWORD *)a3 + 15), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)a3 + 15) - *((_QWORD *)a3 + 14)) >> 3));
  v13[3] = *((_QWORD *)a3 + 17);
  objc_msgSend(a4, "onWifiServiceNotification:data:", v6, &v7);
  v14 = (void **)v13;
  sub_100279AA4(&v14);
  if (v11)
  {
    if (v10 < 0)
      operator delete(__p);
  }
}

void sub_10061A210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_1005B5FEC((uint64_t)&a10);
  _Unwind_Resume(a1);
}

id sub_10061A244(uint64_t a1, unsigned int *a2, _OWORD *a3, void *a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[10];

  v4 = *a2;
  v5 = a3[7];
  v11[6] = a3[6];
  v11[7] = v5;
  v6 = a3[9];
  v11[8] = a3[8];
  v11[9] = v6;
  v7 = a3[3];
  v11[2] = a3[2];
  v11[3] = v7;
  v8 = a3[5];
  v11[4] = a3[4];
  v11[5] = v8;
  v9 = a3[1];
  v11[0] = *a3;
  v11[1] = v9;
  return objc_msgSend(a4, "onMotionStateNotification:data:", v4, v11);
}

id sub_10061A2C4(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v4[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 24);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10061A31C;
  v4[3] = &unk_10212BB58;
  v4[4] = v1;
  return objc_msgSend(v2, "async:", v4);
}

id sub_10061A31C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "handleVehicularStateChanged");
}

void sub_10061AAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,char a41)
{
  if (a19 < 0)
    operator delete(__p);
  sub_10055A600((uint64_t)&a41);
  _Unwind_Resume(a1);
}

id sub_10061AB3C(uint64_t a1)
{
  id v2;
  _QWORD v4[5];
  char v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[2];
  __int128 __p;
  uint64_t v13;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3321888768;
  v4[2] = sub_10061DD74;
  v4[3] = &unk_102148B98;
  v4[4] = *(_QWORD *)a1;
  v5 = *(_BYTE *)(a1 + 8);
  if (*(char *)(a1 + 39) < 0)
  {
    sub_100115CE4(&v6, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    v6 = *(_OWORD *)(a1 + 16);
    v7 = *(_QWORD *)(a1 + 32);
  }
  v9 = *(_OWORD *)(a1 + 56);
  v10 = *(_OWORD *)(a1 + 72);
  v11[0] = *(_OWORD *)(a1 + 88);
  *(_OWORD *)((char *)v11 + 12) = *(_OWORD *)(a1 + 100);
  v8 = *(_OWORD *)(a1 + 40);
  if (*(char *)(a1 + 143) < 0)
  {
    sub_100115CE4(&__p, *(void **)(a1 + 120), *(_QWORD *)(a1 + 128));
  }
  else
  {
    __p = *(_OWORD *)(a1 + 120);
    v13 = *(_QWORD *)(a1 + 136);
  }
  v2 = objc_msgSend(v4, "copy");
  if (SHIBYTE(v13) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v7) < 0)
    operator delete((void *)v6);
  return v2;
}

void sub_10061AC5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_10061ACE8(uint64_t a1, uint64_t a2)
{
  _BYTE *result;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 36) = a2 == 2;
  result = *(_BYTE **)(a1 + 32);
  if (result[32])
    return objc_msgSend(result, "updateStatusBarLabel");
  return result;
}

id *sub_10061B7C4(id *result, int a2)
{
  id *v2;
  char v3;

  if (!a2)
    return result;
  v2 = result;
  v3 = *((_BYTE *)result + 136);
  if ((v3 & 1) != 0)
  {
    result = (id *)objc_msgSend(result[4], "submitFalseDetectionMetricsWithType:", 1);
    v3 = *((_BYTE *)v2 + 136);
    if ((v3 & 2) == 0)
    {
LABEL_4:
      if ((v3 & 4) == 0)
        goto LABEL_5;
LABEL_10:
      result = (id *)objc_msgSend(v2[4], "submitFalseDetectionMetricsWithType:", 4);
      v3 = *((_BYTE *)v2 + 136);
      if ((v3 & 8) == 0)
      {
LABEL_6:
        if ((v3 & 0x10) == 0)
          return result;
        return (id *)objc_msgSend(v2[4], "submitFalseDetectionMetricsWithType:", 16);
      }
      goto LABEL_11;
    }
  }
  else if (((_BYTE)result[17] & 2) == 0)
  {
    goto LABEL_4;
  }
  result = (id *)objc_msgSend(v2[4], "submitFalseDetectionMetricsWithType:", 2);
  v3 = *((_BYTE *)v2 + 136);
  if ((v3 & 4) != 0)
    goto LABEL_10;
LABEL_5:
  if ((v3 & 8) == 0)
    goto LABEL_6;
LABEL_11:
  result = (id *)objc_msgSend(v2[4], "submitFalseDetectionMetricsWithType:", 8);
  if (((_BYTE)v2[17] & 0x10) != 0)
    return (id *)objc_msgSend(v2[4], "submitFalseDetectionMetricsWithType:", 16);
  return result;
}

id sub_10061C3C0(uint64_t a1, char a2)
{
  uint64_t v2;
  void *v3;
  _QWORD v5[5];
  char v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10061C41C;
  v5[3] = &unk_102148B10;
  v6 = a2;
  v5[4] = v2;
  return objc_msgSend(v3, "async:", v5);
}

void sub_10061C41C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (qword_10229FCB0 != -1)
    dispatch_once(&qword_10229FCB0, &stru_102148B58);
  v2 = qword_10229FCB8;
  if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(unsigned __int8 *)(a1 + 40);
    *(_DWORD *)buf = 67109120;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "status bar assertion acquired, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_102148B58);
    v4 = *(unsigned __int8 *)(a1 + 40);
    v7[0] = 67109120;
    v7[1] = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 2, "status bar assertion acquired, %d", v7);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "-[CLLocationDerivedSpeedEstimator setStatusBarWithLabel:]_block_invoke", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if (!*(_BYTE *)(a1 + 40))
    objc_msgSend(*(id *)(a1 + 32), "clearStatusBarColorAndText");
}

id sub_10061C5DC(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v4[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 24);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10061C634;
  v4[3] = &unk_10212BB58;
  v4[4] = v1;
  return objc_msgSend(v2, "async:", v4);
}

id sub_10061C634(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FCB0 != -1)
    dispatch_once(&qword_10229FCB0, &stru_102148B58);
  v2 = qword_10229FCB8;
  if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "status bar assertion invalidated", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_102148B58);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 2, "status bar assertion invalidated", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "-[CLLocationDerivedSpeedEstimator setStatusBarWithLabel:]_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return objc_msgSend(*(id *)(a1 + 32), "clearStatusBarColorAndText");
}

id sub_10061CC80(uint64_t a1, void *a2)
{
  _QWORD v5[11];
  _QWORD v6[11];

  v6[0] = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%f"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 152), CFSTR("accelLatency"));
  v5[1] = CFSTR("gpsLatency");
  v6[1] = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%f"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 160));
  v5[2] = CFSTR("basebandLatency");
  v6[2] = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%f"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 168));
  v5[3] = CFSTR("wifiLatency");
  v6[3] = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%f"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 176));
  v5[4] = CFSTR("btLatency");
  v6[4] = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%f"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 184));
  v5[5] = CFSTR("exitFromNoHints");
  v6[5] = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%f"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 200));
  v5[6] = CFSTR("exitFromLastBTHint");
  v6[6] = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%f"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 208));
  v5[7] = CFSTR("BTHintFromLastMotionHintDuration");
  v6[7] = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%f"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 216));
  v5[8] = CFSTR("motionExitsWithBTCount");
  v6[8] = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), *(unsigned int *)(*(_QWORD *)(a1 + 32) + 136));
  v5[9] = CFSTR("sequentialVehicularIndex");
  v6[9] = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), *(unsigned int *)(*(_QWORD *)(a1 + 32) + 144));
  v5[10] = CFSTR("vehicularDuration");
  v6[10] = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%f"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 192));
  return objc_msgSend(a2, "writeData:", +[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 11), 0, 0));
}

void sub_10061DBD8(id a1)
{
  qword_10229FCB8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

uint64_t sub_10061DC04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_102303058 != -1)
    dispatch_once(&qword_102303058, &stru_102148B78);
  off_1022A3680 = (uint64_t (*)())dlsym((void *)qword_102303060, "OSAWriteLogForSubmission");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))off_1022A3680)(a1, a2, a3, a4, a5);
}

void sub_10061DC9C(id a1)
{
  qword_102303060 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CrashReporterSupport.framework/CrashReporterSupport", 2);
}

void sub_10061DCC4()
{
  operator new();
}

uint64_t sub_10061DD54(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

_BYTE *sub_10061DD74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v4;
  _BYTE *result;

  *(_QWORD *)a2 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(a1 + 40);
  v4 = (_BYTE *)(a2 + 16);
  if (*(char *)(a1 + 71) < 0)
  {
    sub_100115CE4(v4, *(void **)(a1 + 48), *(_QWORD *)(a1 + 56));
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)(a1 + 48);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 64);
  }
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 100) = *(_OWORD *)(a1 + 132);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 72);
  result = (_BYTE *)(a2 + 120);
  if (*(char *)(a1 + 175) < 0)
    return sub_100115CE4(result, *(void **)(a1 + 152), *(_QWORD *)(a1 + 160));
  *(_OWORD *)result = *(_OWORD *)(a1 + 152);
  *(_QWORD *)(a2 + 136) = *(_QWORD *)(a1 + 168);
  return result;
}

void sub_10061DE30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_10061DE4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE *result;
  __int128 v10;

  v4 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  if (*(char *)(a2 + 71) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 48), *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v5;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v6 = *(_OWORD *)(a2 + 88);
  v7 = *(_OWORD *)(a2 + 104);
  v8 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 132) = *(_OWORD *)(a2 + 132);
  *(_OWORD *)(a1 + 120) = v8;
  *(_OWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 88) = v6;
  result = (_BYTE *)(a1 + 152);
  if (*(char *)(a2 + 175) < 0)
    return sub_100115CE4(result, *(void **)(a2 + 152), *(_QWORD *)(a2 + 160));
  v10 = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_OWORD *)result = v10;
  return result;
}

void sub_10061DF08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_10061DF24(uint64_t a1)
{
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void sub_10061DF68()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_10061E004(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_10061E01C()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_10061E0A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

void sub_10061E164(id a1)
{
  qword_1023030A8 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLCompanionNotifierSilo"));
}

void sub_10061E1D8(CLCompanionNotifierAdapter *self, SEL a2)
{
  uint64_t v3;

  -[CLNotifierServiceAdapter setAdaptedNotifier:](self, "setAdaptedNotifier:", sub_10061E218((uint64_t)-[CLCompanionNotifierAdapter universe](self, "universe")));
  if (!-[CLNotifierServiceAdapter notifier](self, "notifier"))
  {
    v3 = sub_101902264();
    sub_10061E218(v3);
  }
}

uint64_t sub_10061E218(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10061E378;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_1023030B8 != -1)
    dispatch_once(&qword_1023030B8, block);
  return qword_102310A08;
}

void sub_10061E28C(CLCompanionNotifierAdapter *self, SEL a2)
{
  CLNotifierBase *v2;

  v2 = -[CLNotifierServiceAdapter notifier](self, "notifier");
  (*((void (**)(CLNotifierBase *))v2->var0 + 2))(v2);
}

void sub_10061E378()
{
  sub_100197040();
  if (sub_100195F08())
    operator new();
  operator new();
}

void sub_10061E3F4()
{
  operator delete();
}

void sub_10061E42C(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  v3 = sub_10061E724(a1, "CLCompanionNotifier", a2);
  *(_QWORD *)v3 = off_102148BF8;
  *(_WORD *)(v3 + 109) = 0;
  *(_BYTE *)(v3 + 111) = 0;
  *(_QWORD *)(v3 + 112) = 0x7FEFFFFFFFFFFFFFLL;
  v4 = (void *)(v3 + 112);
  v5 = objc_msgSend(*(id *)(v3 + 40), "newTimer");
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 120) = v5;
  *(_OWORD *)(a1 + 144) = 0u;
  v6 = sub_100127B9C();
  sub_100081C10(v6, &v11);
  sub_1001FD98C(v11, "CompanionStateSyncInterval", v4);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10061E7C0;
  v10[3] = &unk_10212ECA0;
  v10[4] = a1;
  objc_msgSend(*(id *)(a1 + 120), "setHandler:", v10);
  sub_100E35814();
}

void sub_10061E690(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(v1 + 144);
  *(_QWORD *)(v1 + 144) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(v1 + 136);
  *(_QWORD *)(v1 + 136) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *v2;
  *v2 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_10061ED88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10061E724(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_102148E68;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_10061E7A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10061E7C0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 216))(*(_QWORD *)(a1 + 32));
}

void sub_10061E7D0(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  id v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLCompanionNotifier::onDataProtectionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102148DD8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLCompanionNotifier::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102148DD8);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLCompanionNotifier::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  if (*a2 == 1)
  {
    *(_BYTE *)(a4 + 109) = *(_BYTE *)(a3 + 4);
    if (qword_102310A10)
      v9 = objc_msgSend((id)qword_102310A10, "isConnected");
    else
      v9 = 0;
    sub_10061EED4(a4, (uint64_t)v9);
  }
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10061E9B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10061E9D0(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLCompanionNotifier::onFitnessTrackingNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102148DD8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLCompanionNotifier::onFitnessTrackingNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102148DD8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLCompanionNotifier::onFitnessTrackingNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10061FCD4(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10061EB88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10061EBA8(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  id *v18;

  CLProfilingIdentify("CLCompanionNotifier::onMotionStateObserverNotification");
  objc_msgSend(objc_msgSend(a4[4], "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102148DD8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLCompanionNotifier::onMotionStateObserverNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102148DD8);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLCompanionNotifier::onMotionStateObserverNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  (*((void (**)(id *, uint64_t, uint64_t))*a4 + 29))(a4, a2, a3);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_10061ED68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10061ED88(uint64_t a1)
{
  *(_QWORD *)a1 = off_102148E68;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

CLCompanionTransport *sub_10061EDFC(uint64_t a1, uint64_t a2)
{
  CLCompanionTransport *result;
  _QWORD v4[5];
  _QWORD v5[5];

  result = -[CLCompanionTransport initWithSilo:iDSService:]([CLCompanionTransport alloc], "initWithSilo:iDSService:", *(_QWORD *)(a1 + 40), a2);
  qword_102310A10 = (uint64_t)result;
  if (result)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10061EEBC;
    v5[3] = &unk_102148CE8;
    v5[4] = a1;
    -[CLCompanionTransport setReceivedMessageHandler:](result, "setReceivedMessageHandler:", v5);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_10061EECC;
    v4[3] = &unk_102148D08;
    v4[4] = a1;
    return (CLCompanionTransport *)objc_msgSend((id)qword_102310A10, "setConnectionUpdateHandler:", v4);
  }
  return result;
}

uint64_t sub_10061EEBC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 224))(*(_QWORD *)(a1 + 32));
}

void sub_10061EECC(uint64_t a1, uint64_t a2)
{
  sub_10061EED4(*(_QWORD *)(a1 + 32), a2);
}

void sub_10061EED4(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v5;
  const char *v6;
  char v7;
  id v8;
  int v9;
  uint8_t v10;
  id v11;
  int v12;
  id v13;
  int v14;
  uint8_t v15;
  char v16;
  dispatch_queue_t *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  ALActivityLog *v22;
  uint64_t v23;
  void *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  const char *v35;
  uint8_t *v36;
  double v37;
  const char *v38;
  const char *v39;
  const char *v40;
  int v41;
  uint64_t v42;
  _BYTE v43[20];
  __int16 v44;
  id v45;
  __int16 v46;
  id v47;
  uint8_t buf[48];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;

  v3 = (void *)qword_102310A10;
  if (qword_102310A10)
  {
    if ((_DWORD)a2 && (v5 = objc_msgSend((id)qword_102310A10, "pairedDevice"), v3 = (void *)qword_102310A10, v5))
    {
      v6 = (const char *)objc_msgSend(objc_msgSend(objc_msgSend((id)qword_102310A10, "pairedDevice"), "modelIdentifier"), "UTF8String");
      v3 = (void *)qword_102310A10;
    }
    else
    {
      v6 = "Unknown";
    }
    v7 = *(_BYTE *)(a1 + 111);
    if (objc_msgSend(v3, "pairedDevice"))
    {
      v8 = objc_msgSend((id)qword_102310A10, "pairedDevice");
      if (v8)
      {
        objc_msgSend(v8, "operatingSystemVersion");
        v9 = *(_DWORD *)buf;
      }
      else
      {
        v9 = 0;
        memset(buf, 0, 24);
      }
    }
    else
    {
      v9 = 0;
    }
    v10 = v7 ^ 1;
    if (objc_msgSend((id)qword_102310A10, "pairedDevice"))
    {
      v11 = objc_msgSend((id)qword_102310A10, "pairedDevice");
      if (v11)
      {
        objc_msgSend(v11, "operatingSystemVersion");
        v12 = *(_DWORD *)v43;
      }
      else
      {
        v12 = 0;
        v42 = 0;
        *(_QWORD *)v43 = 0;
        *(_QWORD *)&v43[8] = 0;
      }
    }
    else
    {
      v12 = 0;
    }
    if (objc_msgSend((id)qword_102310A10, "pairedDevice"))
    {
      v13 = objc_msgSend((id)qword_102310A10, "pairedDevice");
      if (v13)
      {
        objc_msgSend(v13, "operatingSystemVersion");
        v14 = v41;
      }
      else
      {
        v14 = 0;
        v39 = 0;
        v40 = 0;
      }
    }
    else
    {
      v14 = 0;
    }
    v15 = sub_10061F50C(a1);
    LODWORD(v42) = 5;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v49 = 0u;
    memset(buf, 0, sizeof(buf));
    buf[0] = a2;
    (*(void (**)(uint64_t, uint64_t *, uint8_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v42, buf, 1, 0xFFFFFFFFLL, 0);
    LODWORD(v42) = 6;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v49 = 0u;
    memset(&buf[16], 0, 32);
    buf[0] = a2;
    buf[1] = v10;
    *(_WORD *)&buf[2] = 0;
    *(_DWORD *)&buf[4] = v9;
    *(_DWORD *)&buf[8] = v12;
    *(_DWORD *)&buf[12] = v14;
    buf[16] = v15;
    *(_WORD *)&buf[17] = 0;
    buf[19] = 0;
    (*(void (**)(uint64_t, uint64_t *, uint8_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v42, buf, 1, 0xFFFFFFFFLL, 0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 208))(a1, a2);
    v16 = objc_msgSend(objc_msgSend((id)qword_102310A10, "pairedDevice"), "deviceType") == (id)6;
    v17 = (dispatch_queue_t *)sub_10009EC60();
    sub_100EA57C8(v17, a2, v16);
    v18 = sub_10061F640();
    if (sub_10009ED0C())
    {
      v19 = sub_10009ED0C();
      sub_101349DFC(v19, a2, (uint64_t)v6, v18);
    }
    if (sub_100B45B9C())
    {
      v20 = sub_100B45B9C();
      sub_100B46040(v20, a2, v18);
    }
    v21 = objc_autoreleasePoolPush();
    v22 = objc_alloc_init(ALActivityLog);
    -[ALActivityLog setTimestamp:](v22, "setTimestamp:", CFAbsoluteTimeGetCurrent());
    -[ALActivityLog setIdsStatus:](v22, "setIdsStatus:", objc_alloc_init(ALCLIDSStatus));
    if ((objc_msgSend(*(id *)(a1 + 152), "isEqualToString:", objc_msgSend(objc_msgSend((id)qword_102310A10, "pairedDevice"), "uniqueIDOverride")) & 1) == 0)
    {

      *(_QWORD *)(a1 + 152) = 0;
      *(_QWORD *)(a1 + 152) = objc_msgSend(objc_msgSend(objc_msgSend((id)qword_102310A10, "pairedDevice"), "uniqueIDOverride"), "copy");
      -[ALCLIDSStatus setPairedModelId:](-[ALActivityLog idsStatus](v22, "idsStatus"), "setPairedModelId:", objc_msgSend(objc_msgSend((id)qword_102310A10, "pairedDevice"), "modelIdentifier"));
    }
    -[ALCLIDSStatus setConnectionStatus:](-[ALActivityLog idsStatus](v22, "idsStatus"), "setConnectionStatus:", a2);
    objc_msgSend(-[CLServiceVendor proxyForService:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "proxyForService:", CFSTR("CLActivityLogger")), "logData:", v22);
    if (objc_opt_class(IDSService, v23))
    {
      v24 = (void *)IDSCopyLocalDeviceUniqueID();
      if (qword_10229FEB0 != -1)
        dispatch_once(&qword_10229FEB0, &stru_102148DF8);
      v25 = qword_10229FEB8;
      if (os_log_type_enabled((os_log_t)qword_10229FEB8, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend((id)qword_102310A10, "pairedDeviceLastSeenTimestamp");
        v27 = v26;
        v28 = objc_msgSend(objc_msgSend(objc_msgSend((id)qword_102310A10, "pairedDevice"), "uniqueIDOverride"), "UTF8String");
        v29 = objc_msgSend(v24, "UTF8String");
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = a2;
        *(_WORD *)&buf[8] = 2048;
        *(_QWORD *)&buf[10] = v27;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = v6;
        *(_WORD *)&buf[28] = 2080;
        *(_QWORD *)&buf[30] = v28;
        *(_WORD *)&buf[38] = 2080;
        *(_QWORD *)&buf[40] = v29;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "IDS connection update,status,%d,prevDisconnection,%f,modelID,%s,uniqueIDOverride,%s,localDeviceID,%s", buf, 0x30u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FEB0 != -1)
          dispatch_once(&qword_10229FEB0, &stru_102148DF8);
        v30 = qword_10229FEB8;
        objc_msgSend((id)qword_102310A10, "pairedDeviceLastSeenTimestamp");
        v32 = v31;
        v33 = objc_msgSend(objc_msgSend(objc_msgSend((id)qword_102310A10, "pairedDevice"), "uniqueIDOverride"), "UTF8String");
        v34 = objc_msgSend(v24, "UTF8String");
        LODWORD(v42) = 67110146;
        HIDWORD(v42) = a2;
        *(_WORD *)v43 = 2048;
        *(_QWORD *)&v43[2] = v32;
        *(_WORD *)&v43[10] = 2080;
        *(_QWORD *)&v43[12] = v6;
        v44 = 2080;
        v45 = v33;
        v46 = 2080;
        v47 = v34;
        LODWORD(v37) = 48;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v30, 0, "IDS connection update,status,%d,prevDisconnection,%f,modelID,%s,uniqueIDOverride,%s,localDeviceID,%s", &v42, v37, v38, v39, v40);
        v36 = (uint8_t *)v35;
        sub_100512490("Generic", 1, 0, 2, "void CLCompanionNotifier::connectionUpdate(BOOL)", "%s\n", v35);
        if (v36 != buf)
          free(v36);
      }

    }
    objc_autoreleasePoolPop(v21);
  }
}

id sub_10061F468()
{
  id result;

  result = (id)qword_102310A10;
  if (qword_102310A10)
    return objc_msgSend((id)qword_102310A10, "isConnected");
  return result;
}

uint64_t sub_10061F47C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = off_102148BF8;
  if (qword_102310A10)

  v2 = a1[18];
  a1[18] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[17];
  a1[17] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[16];
  a1[16] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return sub_10061ED88((uint64_t)a1);
}

uint64_t sub_10061F50C(uint64_t a1)
{
  uint64_t result;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];

  if (*(_BYTE *)(a1 + 111))
    return 0;
  if (qword_102310A10)
  {
    if (objc_msgSend((id)qword_102310A10, "pairedDevice"))
    {
      v8 = 0u;
      v9 = 0u;
      v6 = 0u;
      v7 = 0u;
      v2 = objc_msgSend(&off_1022203D8, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
      if (v2)
      {
        v3 = v2;
        v4 = *(_QWORD *)v7;
LABEL_7:
        v5 = 0;
        while (1)
        {
          if (*(_QWORD *)v7 != v4)
            objc_enumerationMutation(&off_1022203D8);
          if ((objc_msgSend(objc_msgSend(objc_msgSend((id)qword_102310A10, "pairedDevice"), "modelIdentifier"), "hasPrefix:", *(_QWORD *)(*((_QWORD *)&v6 + 1) + 8 * v5)) & 1) != 0)return 0;
          if (v3 == (id)++v5)
          {
            v3 = objc_msgSend(&off_1022203D8, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
            result = 1;
            if (v3)
              goto LABEL_7;
            return result;
          }
        }
      }
    }
  }
  return 1;
}

uint64_t sub_10061F640()
{
  uint64_t result;
  id v1;
  uint64_t v2;
  void *i;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE v8[128];

  result = qword_102310A10;
  if (qword_102310A10)
  {
    result = (uint64_t)objc_msgSend((id)qword_102310A10, "pairedDevice");
    if (result)
    {
      v6 = 0u;
      v7 = 0u;
      v4 = 0u;
      v5 = 0u;
      result = (uint64_t)objc_msgSend(&off_1022203F0, "countByEnumeratingWithState:objects:count:", &v4, v8, 16);
      if (result)
      {
        v1 = (id)result;
        v2 = *(_QWORD *)v5;
        while (2)
        {
          for (i = 0; i != v1; i = (char *)i + 1)
          {
            if (*(_QWORD *)v5 != v2)
              objc_enumerationMutation(&off_1022203F0);
            if ((objc_msgSend(objc_msgSend(objc_msgSend((id)qword_102310A10, "pairedDevice"), "modelIdentifier"), "hasPrefix:", *(_QWORD *)(*((_QWORD *)&v4 + 1) + 8 * (_QWORD)i)) & 1) != 0)return 1;
          }
          v1 = objc_msgSend(&off_1022203F0, "countByEnumeratingWithState:objects:count:", &v4, v8, 16);
          result = 0;
          if (v1)
            continue;
          break;
        }
      }
    }
  }
  return result;
}

id sub_10061F764(double a1, uint64_t a2, int a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10)
{
  NSObject *v18;
  id result;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[12];
  double v27;
  int v28;
  double v29;
  __int16 v30;
  int v31;
  uint8_t buf[4];
  int v33;
  __int16 v34;
  id v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  double v45;
  __int16 v46;
  int v47;

  if (qword_10229FEB0 != -1)
    dispatch_once(&qword_10229FEB0, &stru_102148DF8);
  v18 = qword_10229FEB8;
  if (os_log_type_enabled((os_log_t)qword_10229FEB8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67110912;
    v33 = a3;
    v34 = 2048;
    v35 = objc_msgSend(a4, "length");
    v36 = 2048;
    v37 = a5;
    v38 = 1024;
    v39 = a6;
    v40 = 1024;
    v41 = a7;
    v42 = 1024;
    v43 = a8;
    v44 = 2048;
    v45 = a1;
    v46 = 1024;
    v47 = a9;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Sending message,type,%d,size,%lu,priority,%ld,fireAndForget,%d,encrypt,%d,bypassConnectionCheck,%d,timeout,%f,nonWaking,%d", buf, 0x3Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEB0 != -1)
      dispatch_once(&qword_10229FEB0, &stru_102148DF8);
    v20 = qword_10229FEB8;
    LODWORD(v25) = 67110912;
    HIDWORD(v25) = a3;
    *(_WORD *)v26 = 2048;
    *(_QWORD *)&v26[2] = objc_msgSend(a4, "length");
    *(_WORD *)&v26[10] = 2048;
    LOWORD(v27) = WORD1(a6);
    WORD1(v27) = 1024;
    HIDWORD(v27) = a7;
    LOWORD(v28) = 1024;
    HIWORD(v28) = a8;
    v29 = a1;
    v30 = 1024;
    v31 = a9;
    LODWORD(v24) = 62;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 1, "Sending message,type,%d,size,%lu,priority,%ld,fireAndForget,%d,encrypt,%d,bypassConnectionCheck,%d,timeout,%f,nonWaking,%d", &v25, v24, v25, *(_DWORD *)v26, *(_DWORD *)&v26[8], HIDWORD(a5), v27, v28);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "void CLCompanionNotifier::sendCompanionMessage(CLCompanionNotifier_Type::Type, NSData *, IDSMessagePriority, BOOL, BOOL, BOOL, CFTimeInterval, BOOL, CLCompanionTransportCompletionHandler) const", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  result = (id)qword_102310A10;
  if (qword_102310A10)
  {
    LOBYTE(v23) = a9;
    return objc_msgSend((id)qword_102310A10, "sendMessage:type:priority:fireAndForget:encrypt:bypassConnectionCheck:timeout:nonWaking:completionHandler:", a4, (unsigned __int16)a3, a5, a6, a7, a8, a1, v23, a10);
  }
  else if (a10)
  {
    return (id)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a10 + 16))(a10, 0, 0);
  }
  return result;
}

_QWORD *sub_10061FA28@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_10061FAA0(_DWORD *a1)
{
  int v1;

  v1 = *a1 - 2;
  if (v1 > 3)
    return 0xFFFFFFFFLL;
  else
    return dword_101BB8490[v1];
}

uint64_t sub_10061FAC8()
{
  return 1;
}

uint64_t sub_10061FAD0()
{
  return 1;
}

void sub_10061FAD8(uint64_t a1, int a2)
{
  double v3;
  NSObject *v4;
  double v5;
  double v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  double v10;
  uint8_t buf[4];
  double v12;

  v3 = 1.79769313e308;
  if (a2)
    v3 = 10.0;
  *(double *)(a1 + 112) = v3;
  objc_msgSend(*(id *)(a1 + 120), "setNextFireDelay:interval:", v3, v3);
  if (qword_10229FEB0 != -1)
    dispatch_once(&qword_10229FEB0, &stru_102148DF8);
  v4 = qword_10229FEB8;
  if (os_log_type_enabled((os_log_t)qword_10229FEB8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(double *)(a1 + 112);
    if (v5 == 1.79769313e308)
      v5 = 0.0;
    *(_DWORD *)buf = 134217984;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "timer interval,%f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEB0 != -1)
      dispatch_once(&qword_10229FEB0, &stru_102148DF8);
    v6 = *(double *)(a1 + 112);
    if (v6 == 1.79769313e308)
      v6 = 0.0;
    v9 = 134217984;
    v10 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEB8, 2, "timer interval,%f", COERCE_DOUBLE(&v9));
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLCompanionNotifier::setStateSyncTimer(BOOL)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

void sub_10061FCD4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  id v5;

  if (!*a3)
  {
    *(_BYTE *)(a1 + 110) = *(_BYTE *)(a4 + 3);
    *(_BYTE *)(a1 + 111) = *(_BYTE *)(a4 + 2);
  }
  if (qword_102310A10)
    v5 = objc_msgSend((id)qword_102310A10, "isConnected");
  else
    v5 = 0;
  sub_10061EED4(a1, (uint64_t)v5);
}

void sub_100620154(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v8;
  int v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;

  if (a3)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102148E38);
    v4 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v9 = 68289282;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2114;
      v14 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#CLCompanionNotifier IDS service failed to initialize\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102148E38);
    }
    v5 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v9 = 68289282;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2114;
      v14 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#CLCompanionNotifier IDS service failed to initialize", "{\"msg%{public}.0s\":\"#CLCompanionNotifier IDS service failed to initialize\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
    }
  }
  else
  {
    if (qword_1023030C0)
    {

      qword_1023030C0 = 0;
    }
    qword_1023030C0 = a2;
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102148E18);
    v8 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 68289026;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLCompanionNotifier IDS became available so resuming silo (CLCompanionTransport)\"}", (uint8_t *)&v9, 0x12u);
    }
    objc_msgSend(*(id *)(a1 + 32), "resume");
  }
}

_QWORD *sub_100620394(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *result;

  result = (_QWORD *)sub_1001B6AF4(a1, 0, a2, a3, a4, a5);
  *result = &off_102148D90;
  return result;
}

void sub_1006203CC()
{
  operator new();
}

void sub_10062047C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

BOOL sub_1006204B8(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102148DD8);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102148DD8);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::clientRegistered(int, const Notification_T &) [Notification_T = CLCompanionNotifier_Type::Notification, NotificationData_T = CLCompanionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLCompanionNotifier_Type::RegistrationInfo]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100620738(uint64_t a1, int *a2, _OWORD *a3)
{
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t **v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v18;
  __int128 v19;
  int *v20;

  v6 = (char *)operator new(0xD8uLL);
  v7 = a3[9];
  *(_OWORD *)(v6 + 152) = a3[8];
  *(_OWORD *)(v6 + 168) = v7;
  v8 = a3[11];
  *(_OWORD *)(v6 + 184) = a3[10];
  *(_OWORD *)(v6 + 200) = v8;
  v9 = a3[5];
  *(_OWORD *)(v6 + 88) = a3[4];
  *(_OWORD *)(v6 + 104) = v9;
  v10 = a3[7];
  *(_OWORD *)(v6 + 120) = a3[6];
  *(_OWORD *)(v6 + 136) = v10;
  v11 = a3[1];
  *(_OWORD *)(v6 + 24) = *a3;
  *(_OWORD *)(v6 + 40) = v11;
  v12 = a3[3];
  *(_OWORD *)(v6 + 56) = a3[2];
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_102148F48;
  *((_QWORD *)v6 + 1) = 0;
  *(_OWORD *)(v6 + 72) = v12;
  *(_QWORD *)&v19 = v6 + 24;
  *((_QWORD *)&v19 + 1) = v6;
  v18 = *a2;
  v20 = &v18;
  v13 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v18, (uint64_t)&unk_101B9EB60, &v20);
  sub_1002B7674((uint64_t)(v13 + 8), &v19);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return 1;
}

void sub_10062084C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100620860(uint64_t a1, signed __int32 *a2, _OWORD *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v36[20];
  __int16 v37;
  _QWORD *v38;
  __int16 v39;
  std::__shared_weak_count *v40;
  _QWORD **v41;
  _QWORD *v42[3];
  std::__shared_weak_count *v43;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102148DD8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v36 = 2082;
      *(_QWORD *)&v36[2] = "";
      *(_WORD *)&v36[10] = 2082;
      *(_QWORD *)&v36[12] = "activity";
      v37 = 2082;
      v38 = v10;
      v39 = 2050;
      v40 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v41 = v42;
      memset(v42, 0, sizeof(v42));
      v43 = 0;
      sub_100621A10((uint64_t)buf, a2, (uint64_t)&v41);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v40;
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v36, *(_QWORD **)&v36[8]);
      v21 = v43;
      if (v43)
      {
        v22 = (unint64_t *)&v43->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v41, v42[0]);
    }
    if (a4)
    {
      v24 = (char *)operator new(0xD8uLL);
      v25 = a3[9];
      *(_OWORD *)(v24 + 152) = a3[8];
      *(_OWORD *)(v24 + 168) = v25;
      v26 = a3[11];
      *(_OWORD *)(v24 + 184) = a3[10];
      *(_OWORD *)(v24 + 200) = v26;
      v27 = a3[5];
      *(_OWORD *)(v24 + 88) = a3[4];
      *(_OWORD *)(v24 + 104) = v27;
      v28 = a3[7];
      *(_OWORD *)(v24 + 120) = a3[6];
      *(_OWORD *)(v24 + 136) = v28;
      v29 = a3[1];
      *(_OWORD *)(v24 + 24) = *a3;
      *(_OWORD *)(v24 + 40) = v29;
      v30 = a3[3];
      *(_OWORD *)(v24 + 56) = a3[2];
      *((_QWORD *)v24 + 2) = 0;
      *(_QWORD *)v24 = off_102148F48;
      *((_QWORD *)v24 + 1) = 0;
      *(_OWORD *)(v24 + 72) = v30;
      *(_QWORD *)buf = v24 + 24;
      *(_QWORD *)v36 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v31 = *(std::__shared_weak_count **)v36;
      if (*(_QWORD *)v36)
      {
        v32 = (unint64_t *)(*(_QWORD *)v36 + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_100621584();
    os_activity_scope_leave(&state);
  }
}

void sub_100620EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100620F28(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102148DD8);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102148DD8);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::listClients() [Notification_T = CLCompanionNotifier_Type::Notification, NotificationData_T = CLCompanionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLCompanionNotifier_Type::RegistrationInfo]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102148DD8);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102148DD8);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::listClients() [Notification_T = CLCompanionNotifier_Type::Notification, NotificationData_T = CLCompanionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLCompanionNotifier_Type::RegistrationInfo]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_102148DD8);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102148DD8);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::listClients() [Notification_T = CLCompanionNotifier_Type::Notification, NotificationData_T = CLCompanionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLCompanionNotifier_Type::RegistrationInfo]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_1006214D4(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100621500(id a1)
{
  qword_10229FEB8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Transport");
}

void sub_10062152C(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100621558(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100621584()
{
  operator new();
}

void sub_10062163C(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        sub_1000B4FF8(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, uint64_t, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 8);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_1000B4ED0(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 32);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 8))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 32);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102148DD8);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 8);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102148DD8);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 8);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLCompanionNotifier_Type::Notification, NotificationData_T = CLCompanionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLCompanionNotifier_Type::RegistrationInfo]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

uint64_t sub_100621A10(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  *(_DWORD *)a1 = *a2;
  sub_100621A6C((uint64_t *)(a1 + 8), a3);
  v5 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a3 + 40);
  return a1;
}

uint64_t *sub_100621A6C(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100342484(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_100621AA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100621AC0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102148F48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100621AD4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102148F48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100621B10(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

void sub_100621B30(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
  {
    sub_100621EB8((uint64_t)&v7 + 7, a1);
    return;
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148F88);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BB845ELL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_102148F88);
      LODWORD(v8) = 134218498;
      HIDWORD(v8) = (_DWORD)v2;
      LODWORD(v7) = 32;
      v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, v7, v8);
LABEL_21:
      v6 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLCompanionNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148F88);
    v5 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BB845ELL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_102148F88);
      LODWORD(v8) = 134218498;
      HIDWORD(v8) = (_DWORD)v2;
      LODWORD(v7) = 32;
      v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, v7, v8);
      goto LABEL_21;
    }
  }
}

void sub_100621EB8(uint64_t a1, void *a2)
{
  void *v3;

  if (objc_msgSend(a2, "cppObjectPtr")
    || !objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221B468))
  {
    goto LABEL_5;
  }
  if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") == (id)192)
  {
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
LABEL_5:
    objc_msgSend(a2, "cppObjectPtr");
    return;
  }
  v3 = (void *)sub_10190254C();
  sub_100621F2C(v3);
}

void sub_100621F2C(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

id sub_100621F58(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  id v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return sub_10062268C((uint64_t)&v8 + 7, a1);
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148F88);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101C2AFC8 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148F88);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148F88);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101C2AFC8 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148F88);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLCompanionNotifier_Type::RegistrationInfo, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_1006222E0(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148F88);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C2AFC8 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148F88);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148F88);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C2AFC8 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148F88);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLCompanionNotifier_Type::RegistrationInfo, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_10062268C(uint64_t a1, void *a2)
{
  uint64_t v4;

  if (objc_msgSend(a2, "cppObjectPtr")
    || !objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221B468))
  {
    return objc_msgSend(a2, "cppObjectPtr");
  }
  if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") == (id)8)
  {
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
    return objc_msgSend(a2, "cppObjectPtr");
  }
  v4 = sub_10190254C();
  return (id)sub_100622700(v4);
}

uint64_t sub_100622700()
{
  sub_1015A2E04(qword_102303068, "Acc800Fp");
  dword_102303080 = 800;
  __cxa_atexit((void (*)(void *))sub_1005CB0EC, qword_102303068, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102303088, "DmFp");
  dword_1023030A0 = 200;
  return __cxa_atexit((void (*)(void *))sub_1005CB0EC, qword_102303088, (void *)&_mh_execute_header);
}

double sub_100622928(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 8;
  else
    v2 = 0;
  return sub_100623B40(v2, a2);
}

BOOL sub_100622938(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 8;
  else
    v2 = 0;
  return sub_10062384C(v2, a2);
}

double sub_100622948(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 8;
  else
    v2 = 0;
  return sub_1006238A0(v2, a2);
}

BOOL sub_100622958(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;

  if (a1)
    v2 = a1 - 8;
  else
    v2 = 0;
  if (*(_BYTE *)(a2 + 27))
    v3 = 2;
  else
    v3 = 3;
  if (v3 > *(unsigned __int16 *)(v2 + 34))
    return 0;
  if (*(_DWORD *)(a2 + 16) >= (signed int)v3 && *(_BYTE *)(a2 + 30))
    return 1;
  return *(_BYTE *)(a2 + 29) != 0;
}

double sub_1006229B4(uint64_t a1, double *a2)
{
  uint64_t v2;
  double result;

  v2 = a1 - 8;
  if (!a1)
    v2 = 0;
  *(_DWORD *)(v2 + 160) = 0;
  result = *a2;
  *(double *)(v2 + 168) = *a2;
  return result;
}

double sub_1006229D0(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 8) = &unk_102148FD0;
  *(_QWORD *)(a1 + 16) = 5;
  *(_WORD *)(a1 + 24) = 512;
  *(_QWORD *)a1 = off_102149058;
  *(_QWORD *)&result = 0x500000000;
  *(_QWORD *)(a1 + 32) = 0x500000000;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0x7FEFFFFFFFFFFFFFLL;
  return result;
}

uint64_t sub_100622A10(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  char v5;
  BOOL v6;
  NSObject *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 *v11;
  uint64_t v13;
  const char *v14;
  char *v15;
  __int128 v16;
  __int16 v17;
  _BYTE v18[23];
  uint8_t buf[32];
  uint64_t v20;
  _QWORD v21[19];
  __int16 v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _QWORD v27[6];
  char v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  double v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[25];
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  int v53;
  uint64_t v54;
  __int16 v55;
  __int128 v56;
  __int128 v57;
  char v58;
  _BYTE v59[11];
  int v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  unint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  char v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  unint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  int v110;
  unint64_t v111;
  __int16 v112;
  int v113;
  __int128 v114;
  double v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v4 = atomic_load((unsigned __int8 *)&qword_1023030E0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1023030E0))
  {
    *(_OWORD *)buf = xmmword_101BB84C0;
    sub_100546300(qword_1023030C8, buf, 4uLL);
    __cxa_atexit((void (*)(void *))sub_100546380, qword_1023030C8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1023030E0);
  }
  v22 = 0;
  *(_OWORD *)v21 = xmmword_101BB1ED0;
  memset(&v21[2], 0, 135);
  v23 = xmmword_101BB1ED0;
  v24 = 0;
  v25 = 0;
  v27[0] = 0;
  v26 = 0;
  *(_QWORD *)((char *)v27 + 5) = 0;
  *(_QWORD *)((char *)&v27[1] + 6) = 0;
  v28 = 0;
  memset(&v27[3], 0, 24);
  v29 = xmmword_101BB1ED0;
  v30 = 0;
  v31 = 0;
  v32 = -1.79769313e308;
  v43 = 0;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  memset(v42, 0, sizeof(v42));
  v44 = 0;
  v45 = 0;
  v46 = 0xFFEFFFFFFFFFFFFFLL;
  v47 = 0;
  v48 = 0;
  v54 = 0;
  v55 = 0;
  v60 = 0;
  v53 = 0;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v57 = 0u;
  v56 = 0u;
  v58 = 0;
  memset(v59, 0, sizeof(v59));
  v61 = 0xFFEFFFFFFFFFFFFFLL;
  v80 = 0u;
  v79 = 0u;
  v78 = 0u;
  v77 = 0u;
  v76 = 0u;
  v75 = 0u;
  v74 = 0u;
  v73 = 0u;
  v72 = 0u;
  v71 = 0u;
  v70 = 0u;
  v69 = 0u;
  v68 = 0u;
  v67 = 0u;
  v66 = 0u;
  v65 = 0u;
  v64 = 0u;
  v63 = 0u;
  v62 = 0u;
  v81 = 0;
  v82 = 0xFFEFFFFFFFFFFFFFLL;
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  v87 = 0xFFEFFFFFFFFFFFFFLL;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v91 = 0;
  v92 = 0xFFEFFFFFFFFFFFFFLL;
  v94 = 0;
  v93 = 0;
  v95 = 0x80000000800000;
  v97 = 0;
  v96 = 0;
  v98 = xmmword_101BB1EE0;
  v99 = 0x80000000800000;
  v100 = 0u;
  v101 = 0u;
  v102 = 0;
  v103 = 0xFFEFFFFFFFFFFFFFLL;
  v104 = 0u;
  v105 = 0u;
  v106 = 0u;
  v107 = 0u;
  v108 = 0u;
  v109 = 0u;
  v110 = 0;
  v111 = 0xFFEFFFFFFFFFFFFFLL;
  v112 = 0;
  v113 = 0;
  *(_QWORD *)&v114 = 0xFFEFFFFFFFFFFFFFLL;
  *((_QWORD *)&v114 + 1) = 7;
  v115 = -1.79769313e308;
  v116 = 0;
  v118 = 0;
  v117 = 0;
  v119 = 0;
  sub_1000D03AC((double *)a2, qword_1023030C8, (uint64_t)v21);
  *(_QWORD *)&v16 = 0;
  *((_QWORD *)&v16 + 1) = 7;
  v17 = 0;
  if (*(double *)&v114 == -1.79769313e308)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021490C8);
    v7 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(a2 + 296);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Cycling active state model failure to get cycling result, %f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021490C8);
      v13 = *(_QWORD *)(a2 + 296);
      *(_DWORD *)v18 = 134217984;
      *(_QWORD *)&v18[4] = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Cycling active state model failure to get cycling result, %f", COERCE_DOUBLE(v18));
      v15 = (char *)v14;
      sub_100512490("Generic", 1, 0, 2, "virtual CLWorkoutPredictor_Type::WorkoutActiveStateEvent CLOutdoorCyclingActiveStateModel::update(const CLWorkoutPredictorInputs &)", "%s\n", v14);
      if (v15 != (char *)buf)
        free(v15);
    }
  }
  else
  {
    v5 = 0;
    v16 = v114;
    v6 = v115 != -1.79769313e308;
    if (*(float *)&v118 <= 0.5)
      v6 = 0;
    LOBYTE(v17) = v6;
    if (v32 != -1.79769313e308 && v115 != -1.79769313e308)
    {
      v5 = 0;
      if (*(float *)&v118 > 0.5 && *(double *)&v35 >= 0.44704 && DWORD2(v16) == 5)
      {
        DWORD2(v16) = 6;
        v5 = 1;
      }
    }
    HIBYTE(v17) = v5;
  }
  if (!*(_WORD *)(a1 + 34))
    goto LABEL_21;
  v9 = *(unsigned __int16 *)(a1 + 34) + (unint64_t)*(unsigned __int16 *)(a1 + 32) - 1;
  v10 = *(unsigned int *)(a1 + 36);
  if (v9 < v10)
    v10 = 0;
  if (*(double *)&v16 > *(double *)(a1 + 32 + 24 * (v9 - v10) + 8))
LABEL_21:
    sub_10021C2E4((unsigned __int16 *)(a1 + 32), &v16);
  sub_100622FDC(a1, (uint64_t)v21, (_QWORD *)a2, (uint64_t)v18);
  v11 = (__int128 *)(a2 + 296);
  if (*(double *)&v114 != -1.79769313e308)
    v11 = &v16;
  *(_QWORD *)buf = *(_QWORD *)v11;
  *(_OWORD *)&buf[8] = *(_OWORD *)v18;
  *(_QWORD *)&buf[23] = *(_QWORD *)&v18[15];
  v20 = a2;
  sub_10023195C(a1 + 8, 1, (uint64_t)buf);
  return *(_QWORD *)(a1 + 160);
}

void sub_100622FBC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1023030E0);
  _Unwind_Resume(a1);
}

uint64_t sub_100622FDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  int v12;
  unsigned __int16 *v13;
  unsigned int v14;
  int v15;
  BOOL v17;
  int v18;
  _BOOL4 v20;
  int v21;
  int v22;
  unint64_t v23;
  BOOL v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t result;
  unsigned int v30;
  double v31;
  double v32;
  BOOL v34;
  unsigned int v37;
  BOOL v39;
  float v40;
  _BOOL4 v41;
  BOOL v43;
  uint64_t v46;
  int v48;

  v4 = a3;
  v5 = a2;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 15) = 0;
  if (*(_WORD *)(a1 + 34))
  {
    v6 = 0;
    v48 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v46 = a1;
    v13 = (unsigned __int16 *)(a1 + 32);
    do
    {
      v14 = *(_DWORD *)(sub_100623364(v13, v11) + 8);
      v15 = *(unsigned __int8 *)(sub_100623364(v13, v11) + 16);
      a1 = sub_100623364(v13, v11);
      v12 += *(unsigned __int8 *)(a1 + 17);
      v17 = v14 >= 2 && v14 != 14 && v14 - 9 >= 2;
      v18 = !v17;
      if (!v17)
        ++v8;
      *(_DWORD *)a4 = v12;
      *(_DWORD *)(a4 + 4) = v8;
      if (!v14)
        v18 = 0;
      v20 = v14 == 7 && v15 != 0;
      v21 = (v14 & 0xFFFFFFFD) == 4 || v20;
      v7 += v21;
      v22 = v48;
      if (!v15)
        v22 = v48 + 1;
      *(_DWORD *)(a4 + 8) = v7;
      *(_DWORD *)(a4 + 12) = v22;
      v48 = v22;
      v23 = *(unsigned __int16 *)(v46 + 34);
      if (v6 + v23 <= 2 && v14 == 11)
        *(_BYTE *)(a4 + 16) = 1;
      v9 += v18;
      v10 += v15;
      ++v11;
      --v6;
    }
    while (v11 < v23);
    if (v10)
    {
      v24 = 1;
      v4 = a3;
      v5 = a2;
      goto LABEL_41;
    }
    v4 = a3;
    v5 = a2;
  }
  else
  {
    v9 = 0;
  }
  v24 = *(double *)(v5 + 288) != -1.79769313e308 && *(double *)(v5 + 328) > 2.2352
     || *(double *)(v5 + 1344) != -1.79769313e308 && *(float *)(v5 + 1376) < 3.0;
LABEL_41:
  *(_BYTE *)(a4 + 22) = v24;
  v25 = *(double *)(v5 + 168) != -1.79769313e308;
  if (*(double *)(v5 + 192) < 0.100000001)
    v25 = 0;
  if (v9 >= 3)
    v25 = 0;
  *(_BYTE *)(a4 + 17) = v25;
  v26 = sub_100623560(a1, v5, v4);
  v28 = v27;
  result = sub_100F6323C(v4, v5);
  v30 = result;
  v31 = *(double *)(v5 + 288);
  if (v31 == -1.79769313e308)
  {
    v31 = -1.79769313e308;
  }
  else
  {
    result = 0;
    v32 = *(double *)(v5 + 328);
    if (SHIDWORD(v26) >= 4 && v32 < 0.44704)
    {
      result = sub_1002BC6D0(v30);
      v32 = *(double *)(v5 + 328);
      v31 = *(double *)(v5 + 288);
    }
    *(_BYTE *)(a4 + 18) = result;
    v34 = v32 >= 0.44704 && v28 > 3;
    *(_BYTE *)(a4 + 19) = v34;
  }
  if (*(double *)(v5 + 1344) != -1.79769313e308 && *(double *)(v5 + 1328) != -1.79769313e308 && v31 != -1.79769313e308)
  {
    result = 0;
    v37 = *(_DWORD *)(v5 + 1336);
    v39 = v37 - 9 > 1 && v37 != 14 && v37 > 1;
    v40 = *(float *)(v5 + 1364);
    if (!v39 && v40 <= 0.1)
    {
      result = 0;
      if (*(double *)(v5 + 328) == 0.0 && (int)v26 >= 3)
      {
        result = sub_1002BC6D0(v30);
        v37 = *(_DWORD *)(v5 + 1336);
        v40 = *(float *)(v5 + 1364);
      }
    }
    *(_BYTE *)(a4 + 20) = result;
    v41 = (v37 & 0xFFFFFFFD) == 4 || v40 > 0.5 && v37 == 7;
    v43 = 0;
    if (v41 && v40 > 0.1)
      v43 = *(double *)(v5 + 328) > 2.2352;
    *(_BYTE *)(a4 + 21) = v43;
  }
  return result;
}

uint64_t sub_100623350(uint64_t result)
{
  *(_DWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 160) = 0;
  *(_QWORD *)(result + 168) = 0x7FEFFFFFFFFFFFFFLL;
  return result;
}

uint64_t sub_100623364(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  unint64_t v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  unint64_t v17;
  __int16 v18;
  int v19;

  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021490E8);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v17 = a2;
      v18 = 1024;
      v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021490E8);
      v9 = *((_DWORD *)a1 + 1);
      v12 = 134218240;
      v13 = a2;
      v14 = 1024;
      v15 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", (size_t)&v12, 18);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "const T &CMQueue<CLOutdoorCyclingActiveStateModel::CycleStateResultForPauseResume>::operator[](const size_t) const [T = CLOutdoorCyclingActiveStateModel::CycleStateResultForPauseResume]", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[12 * (v4 - v5) + 4];
}

uint64_t sub_100623560(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  double Current;
  _QWORD *v5;
  double *v6;
  double *v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  _BYTE v12[24];
  double *v13;

  v10 = 0;
  v11 = 0;
  if (*(double *)(a2 + 288) != -1.79769313e308)
  {
    Current = CFAbsoluteTimeGetCurrent();
    v5 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 16))(*a3);
    v6 = (double *)operator new(0x20uLL);
    *(_QWORD *)v6 = off_102149118;
    v6[1] = Current + -5.0;
    v6[2] = Current;
    *((_QWORD *)v6 + 3) = &v10;
    v13 = v6;
    sub_100623698(v5, (uint64_t)v12);
    v7 = v13;
    if (v13 == (double *)v12)
    {
      v8 = 4;
      v7 = (double *)v12;
      goto LABEL_6;
    }
    if (v13)
    {
      v8 = 5;
LABEL_6:
      (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
    }
  }
  return v10;
}

void sub_100623660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100623698(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[24];
  _BYTE *v20;
  _BYTE v21[24];
  _BYTE *v22;

  v2 = result[7];
  if (!v2)
    return result;
  v3 = result[6];
  v4 = v3 + v2;
  v5 = ((v3 + v2) * (unsigned __int128)0x8618618618618619) >> 64;
  v6 = (v5 + ((unint64_t)(v4 - v5) >> 1)) >> 4;
  v7 = result[3];
  if (result[4] == v7)
  {
    v10 = 0;
    v15 = v7 + 8 * v6;
    v16 = 0;
    v17 = v15;
    v18 = 0;
    v9 = (_QWORD *)(v7 + 8 * (v3 / 0x15));
  }
  else
  {
    v8 = *(_QWORD *)(v7 + 8 * v6);
    v15 = v7 + 8 * v6;
    v16 = v8 + 192 * (v4 - 21 * v6);
    v17 = v15;
    v18 = v16;
    v9 = (_QWORD *)(v7 + 8 * (v3 / 0x15));
    v10 = *v9 + 192 * (v3 % 0x15);
  }
  v14[0] = v9;
  v14[1] = v10;
  v14[2] = v9;
  v14[3] = v10;
  sub_100270E34((uint64_t)v19, a2);
  sub_100623E78((uint64_t)&v15, (uint64_t)v14, (uint64_t)v19, (uint64_t)v21);
  v11 = v22;
  if (v22 == v21)
  {
    v12 = 4;
    v11 = v21;
    goto LABEL_9;
  }
  if (v22)
  {
    v12 = 5;
LABEL_9:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  result = v20;
  if (v20 == v19)
  {
    v13 = 4;
    result = v19;
  }
  else
  {
    if (!v20)
      return result;
    v13 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
}

void sub_100623808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v22;
  uint64_t v23;

  v22 = a21;
  if (a21 == &a18)
  {
    v23 = 4;
    v22 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL sub_10062384C(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a1 + 34) >= 3u
      && (*(int *)(a2 + 12) > 2 || *(_BYTE *)(a2 + 28) || *(_BYTE *)(a2 + 26))
      && *(int *)(a2 + 20) >= 1
      && !*(_BYTE *)(a2 + 24)
      && *(_BYTE *)(a2 + 25) == 0;
}

double sub_1006238A0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  void **v9;
  double result;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  std::string *v16;
  char *v17;
  char *v18;
  int v19;
  std::string v20;
  void *__p;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  std::string *v29;
  uint8_t buf[4];
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  void **v39;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_1021490C8);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int8 *)(a2 + 28);
    v6 = *(unsigned __int8 *)(a2 + 26);
    v7 = *(_DWORD *)(a2 + 8);
    v8 = *(_DWORD *)(a2 + 12);
    sub_100F633E4(*(_QWORD **)(a2 + 32), (std::string *)&__p);
    v9 = (v27 & 0x8000) == 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 67110146;
    v31 = v8;
    v32 = 1024;
    v33 = v5;
    v34 = 1024;
    v35 = v6;
    v36 = 1024;
    v37 = v7;
    v38 = 2080;
    v39 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLOutdoorCyclingActiveStateModel,pausing,nominalPauseStates,%d,fastPauseWithTier1Prob,%d,pauseHistGPSOverride,%d,countTier1Override,%d,%s", buf, 0x24u);
    if (SBYTE1(v27) < 0)
      operator delete(__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021490C8);
    v11 = qword_10229FE68;
    v12 = *(unsigned __int8 *)(a2 + 28);
    v13 = *(unsigned __int8 *)(a2 + 26);
    v14 = *(_DWORD *)(a2 + 8);
    v15 = *(_DWORD *)(a2 + 12);
    sub_100F633E4(*(_QWORD **)(a2 + 32), &v20);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v20;
    else
      v16 = (std::string *)v20.__r_.__value_.__r.__words[0];
    LODWORD(__p) = 67110146;
    HIDWORD(__p) = v15;
    v22 = 1024;
    v23 = v12;
    v24 = 1024;
    v25 = v13;
    v26 = 1024;
    v27 = v14;
    v28 = 2080;
    v29 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 0, "CLOutdoorCyclingActiveStateModel,pausing,nominalPauseStates,%d,fastPauseWithTier1Prob,%d,pauseHistGPSOverride,%d,countTier1Override,%d,%s", &__p, 36, v19, LODWORD(v20.__r_.__value_.__l.__data_), (const char *)v20.__r_.__value_.__l.__size_);
    v18 = v17;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 2, "void CLOutdoorCyclingActiveStateModel::doPause(const ETick *)", "%s\n", v18);
    if (v18 != (char *)buf)
      free(v18);
  }
  *(_DWORD *)(a1 + 160) = 1;
  result = *(double *)a2;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

double sub_100623B40(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  void **v9;
  double result;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  std::string *v16;
  char *v17;
  char *v18;
  int v19;
  std::string v20;
  void *__p;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  std::string *v29;
  uint8_t buf[4];
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  void **v39;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_1021490C8);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a2 + 16);
    v6 = *(unsigned __int8 *)(a2 + 29);
    v7 = *(unsigned __int8 *)(a2 + 27);
    v8 = *(_DWORD *)(a2 + 8);
    sub_100F633E4(*(_QWORD **)(a2 + 32), (std::string *)&__p);
    v9 = (v27 & 0x8000) == 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 67110146;
    v31 = v5;
    v32 = 1024;
    v33 = v6;
    v34 = 1024;
    v35 = v7;
    v36 = 1024;
    v37 = v8;
    v38 = 2080;
    v39 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLOutdoorCyclingActiveStateModel,resuming,nominalResumeStates,%d,fastResumeWithTier1Prob,%d,resumeHistGPSOverride,%d,countTier1Override,%d,%s", buf, 0x24u);
    if (SBYTE1(v27) < 0)
      operator delete(__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021490C8);
    v11 = qword_10229FE68;
    v12 = *(_DWORD *)(a2 + 16);
    v13 = *(unsigned __int8 *)(a2 + 29);
    v14 = *(unsigned __int8 *)(a2 + 27);
    v15 = *(_DWORD *)(a2 + 8);
    sub_100F633E4(*(_QWORD **)(a2 + 32), &v20);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v20;
    else
      v16 = (std::string *)v20.__r_.__value_.__r.__words[0];
    LODWORD(__p) = 67110146;
    HIDWORD(__p) = v12;
    v22 = 1024;
    v23 = v13;
    v24 = 1024;
    v25 = v14;
    v26 = 1024;
    v27 = v15;
    v28 = 2080;
    v29 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 0, "CLOutdoorCyclingActiveStateModel,resuming,nominalResumeStates,%d,fastResumeWithTier1Prob,%d,resumeHistGPSOverride,%d,countTier1Override,%d,%s", &__p, 36, v19, LODWORD(v20.__r_.__value_.__l.__data_), (const char *)v20.__r_.__value_.__l.__size_);
    v18 = v17;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 2, "void CLOutdoorCyclingActiveStateModel::doResume(const ETick *)", "%s\n", v18);
    if (v18 != (char *)buf)
      free(v18);
  }
  *(_DWORD *)(a1 + 160) = 2;
  result = *(double *)a2;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t sub_100623DE8()
{
  return 257;
}

_QWORD *sub_100623DF0(_QWORD *result)
{
  *result = off_102149058;
  return result;
}

void sub_100623E00(_QWORD *a1)
{
  *a1 = off_102149058;
  operator delete();
}

void sub_100623E20(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100623E4C(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100623E78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a1 + 24);
  if (v6 != *(_QWORD *)(a2 + 24))
  {
    v9 = *(_QWORD **)(a1 + 16);
    do
    {
      if (v6 == *v9)
        v6 = *(v9 - 1) + 4032;
      v10 = *(_QWORD *)(a3 + 24);
      if (!v10)
        sub_10025FD1C();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 48))(v10, v6 - 192);
      v9 = *(_QWORD **)(a1 + 16);
      v11 = *(_QWORD *)(a1 + 24);
      if (v11 == *v9)
      {
        *(_QWORD *)(a1 + 16) = v9 - 1;
        v11 = *--v9 + 4032;
      }
      v6 = v11 - 192;
      *(_QWORD *)(a1 + 24) = v6;
    }
    while (v6 != *(_QWORD *)(a2 + 24));
  }
  return sub_100623F2C(a4, a3);
}

uint64_t sub_100623F2C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100623F94()
{
  operator delete();
}

__n128 sub_100623FA8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_102149118;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_100623FE8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102149118;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100624010(uint64_t result, double *a2)
{
  double v2;
  double v3;
  double v4;

  v2 = *a2;
  if (*a2 >= *(double *)(result + 8))
  {
    v3 = *(double *)(result + 16);
    v4 = a2[5];
    if (v2 <= v3 && v4 == 0.0)
      ++**(_DWORD **)(result + 24);
    if (v2 <= v3)
    {
      if (v4 >= 0.0 && v4 < 0.44704)
        ++*(_DWORD *)(*(_QWORD *)(result + 24) + 4);
      if (a2[5] >= 0.44704)
        ++*(_DWORD *)(*(_QWORD *)(result + 24) + 8);
    }
  }
  return result;
}

uint64_t sub_10062409C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1006240D8()
{
}

void sub_1006240E4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 159, "handleSqlErrorCode_SQLITE_ERROR");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100624304()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 159, "handleSqlErrorCode_SQLITE_INTERNAL");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100624524()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 159, "handleSqlErrorCode_SQLITE_PERM");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100624744()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 159, "handleSqlErrorCode_SQLITE_ABORT");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100624964()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 159, "handleSqlErrorCode_SQLITE_BUSY");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100624B84()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 159, "handleSqlErrorCode_SQLITE_LOCKED");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100624DA4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 159, "handleSqlErrorCode_SQLITE_NOMEM");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100624FC4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 159, "handleSqlErrorCode_SQLITE_READONLY");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_1006251E4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 159, "handleSqlErrorCode_SQLITE_INTERRUPT");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100625404()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 159, "handleSqlErrorCode_SQLITE_IOERR");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100625624()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 159, "handleSqlErrorCode_SQLITE_CORRUPT");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100625844()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 159, "handleSqlErrorCode_SQLITE_NOTFOUND");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100625A64()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 159, "handleSqlErrorCode_SQLITE_FULL");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100625C84()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 159, "handleSqlErrorCode_SQLITE_CANTOPEN");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100625EA4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 159, "handleSqlErrorCode_SQLITE_PROTOCOL");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_1006260C4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 159, "handleSqlErrorCode_SQLITE_EMPTY");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_1006262E4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 159, "handleSqlErrorCode_SQLITE_SCHEMA");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100626504()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 159, "handleSqlErrorCode_SQLITE_TOOBIG");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100626724()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 159, "handleSqlErrorCode_SQLITE_CONSTRAINT");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100626944()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 159, "handleSqlErrorCode_SQLITE_MISMATCH");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100626B64()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 159, "handleSqlErrorCode_SQLITE_MISUSE");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100626D84()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 159, "handleSqlErrorCode_SQLITE_NOLFS");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100626FA4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 159, "handleSqlErrorCode_SQLITE_AUTH");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_1006271C4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 159, "handleSqlErrorCode_SQLITE_FORMAT");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_1006273E4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 159, "handleSqlErrorCode_SQLITE_RANGE");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100627604()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 159, "handleSqlErrorCode_SQLITE_NOTADB");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100627824()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 159, "handleSqlErrorCode_SQLITE_NOTICE");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100627A44()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 159, "handleSqlErrorCode_SQLITE_WARNING");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100627C64()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 159, "handleSqlErrorCode_SQLITE_ROW");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100627E84()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 159, "handleSqlErrorCode_SQLITE_DONE");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_1006280A4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_ERROR_MISSING_COLLSEQ");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_1006282C4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_ERROR_RETRY");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_1006284E4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_ERROR_SNAPSHOT");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100628704()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_IOERR_READ");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100628924()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_IOERR_SHORT_READ");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100628B44()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_IOERR_WRITE");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100628D64()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_IOERR_FSYNC");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100628F84()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_IOERR_DIR_FSYNC");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_1006291A4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_IOERR_TRUNCATE");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_1006293C4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_IOERR_FSTAT");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_1006295E4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_IOERR_UNLOCK");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100629804()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_IOERR_RDLOCK");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100629A24()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_IOERR_DELETE");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100629C44()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_IOERR_BLOCKED");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100629E64()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_IOERR_NOMEM");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062A084()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_IOERR_ACCESS");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062A2A4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_IOERR_CHECKRESERVEDLOCK");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062A4C4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_IOERR_LOCK");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062A6E4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_IOERR_CLOSE");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062A904()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_IOERR_DIR_CLOSE");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062AB24()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_IOERR_SHMOPEN");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062AD44()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_IOERR_SHMSIZE");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062AF64()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_IOERR_SHMLOCK");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062B184()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_IOERR_SHMMAP");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062B3A4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_IOERR_SEEK");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062B5C4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_IOERR_DELETE_NOENT");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062B7E4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_IOERR_MMAP");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062BA04()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_IOERR_GETTEMPPATH");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062BC24()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_IOERR_CONVPATH");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062BE44()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_IOERR_VNODE");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062C064()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_IOERR_AUTH");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062C284()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_IOERR_BEGIN_ATOMIC");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062C4A4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_IOERR_COMMIT_ATOMIC");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062C6C4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_IOERR_ROLLBACK_ATOMIC");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062C8E4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_LOCKED_SHAREDCACHE");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062CB04()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_LOCKED_VTAB");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062CD24()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_BUSY_RECOVERY");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062CF44()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_BUSY_SNAPSHOT");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062D164()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_CANTOPEN_NOTEMPDIR");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062D384()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_CANTOPEN_ISDIR");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062D5A4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_CANTOPEN_FULLPATH");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062D7C4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_CANTOPEN_CONVPATH");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062D9E4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_CANTOPEN_DIRTYWAL");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062DC04()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_CORRUPT_VTAB");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062DE24()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_CORRUPT_SEQUENCE");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062E044()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_READONLY_RECOVERY");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062E264()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_READONLY_CANTLOCK");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062E484()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_READONLY_ROLLBACK");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062E6A4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_READONLY_DBMOVED");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062E8C4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_READONLY_CANTINIT");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062EAE4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_READONLY_DIRECTORY");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062ED04()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_ABORT_ROLLBACK");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062EF24()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_CONSTRAINT_CHECK");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062F144()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_CONSTRAINT_COMMITHOOK");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062F364()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_CONSTRAINT_FOREIGNKEY");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062F584()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_CONSTRAINT_FUNCTION");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062F7A4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_CONSTRAINT_NOTNULL");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062F9C4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_CONSTRAINT_PRIMARYKEY");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062FBE4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_CONSTRAINT_TRIGGER");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_10062FE04()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_CONSTRAINT_UNIQUE");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100630024()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_CONSTRAINT_VTAB");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100630244()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_CONSTRAINT_ROWID");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100630464()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_NOTICE_RECOVER_WAL");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100630684()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_NOTICE_RECOVER_ROLLBACK");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_1006308A4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_WARNING_AUTOINDEX");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100630AC4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_AUTH_USER");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100630CE4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 160, "handleSqlErrorCode_SQLITE_OK_LOAD_PERMANENTLY");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100630F04()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0280 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v1 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v2 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteErrorHandlers.h", 161, "handleSqlErrorCode_UNDEFINED");
LABEL_11:
    dispatch_once(&qword_1022A0280, &stru_102149330);
  }
}

void sub_100631124(uint64_t a1, sqlite3_stmt *a2, int a3)
{
  int v6;
  int v7;
  NSObject *v8;
  const char *v9;
  _QWORD *v10;
  uint64_t v11;
  const char *v12;
  _QWORD *v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  _QWORD *v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  _QWORD *v31;

  v6 = sqlite3_stmt_status(a2, 1, a3);
  v7 = sqlite3_stmt_status(a2, 2, a3);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102149350);
  v8 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v9 = sqlite3_sql(a2);
    v10 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v10 = (_QWORD *)*v10;
    *(_DWORD *)buf = 136315906;
    v25 = v9;
    v26 = 1024;
    v27 = v6;
    v28 = 1024;
    v29 = v7;
    v30 = 2080;
    v31 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Query: %s, full table scans: %d, sorts: %d, File: %s", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102149350);
    v11 = qword_1022A02D8;
    v12 = sqlite3_sql(a2);
    v13 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v13 = (_QWORD *)*v13;
    v16 = 136315906;
    v17 = v12;
    v18 = 1024;
    v19 = v6;
    v20 = 1024;
    v21 = v7;
    v22 = 2080;
    v23 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 2, "Query: %s, full table scans: %d, sorts: %d, File: %s", (const char *)&v16, 34);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLSqliteDatabase::logStmtStatus(sqlite3_stmt *, BOOL)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
}

void sub_100631374(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  __int128 *v8;
  void **v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  int v13;
  NSObject *v14;
  NSObject *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type size;
  std::string *p_p;
  unsigned __int8 *v25;
  NSObject *v26;
  NSObject *v27;
  std::string *v28;
  void *v29;
  NSObject *v30;
  std::string *v31;
  uint64_t v32;
  NSObject *v33;
  NSObject *v34;
  __CFNotificationCenter *DarwinNotifyCenter;
  __CFNotificationCenter *LocalCenter;
  uint64_t v37;
  __int16 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  __int128 v53;
  _BYTE *v54;
  std::string __p;
  _BYTE buf[28];
  __int16 v57;
  _BYTE v58[14];
  const char *v59;
  int v60;
  __int16 v61;
  char v62;
  char v63;
  const char *v64;
  int v65;
  __int16 v66;
  char v67;
  char v68;
  uint64_t v69;
  int v70;
  __int16 v71;
  char v72;
  char v73;

  *(_DWORD *)(a1 + 120) = 0;
  memset(&__p, 0, sizeof(__p));
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v2 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    v3 = (_QWORD *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0)
      v3 = (_QWORD *)*v3;
    v4 = *(_DWORD *)(a1 + 48);
    v5 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = v3;
    v57 = 1026;
    *(_DWORD *)v58 = v4;
    *(_WORD *)&v58[4] = 1026;
    *(_DWORD *)&v58[6] = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"open\", \"path\":%{public, location:escape_only}s, \"protection\":%{public}d, \"persistence\":%{public}d}", buf, 0x28u);
  }
  if (*(char *)(a1 + 87) < 0)
    v6 = *(_QWORD *)(a1 + 72);
  else
    v6 = *(unsigned __int8 *)(a1 + 87);
  v7 = (uint64_t *)(a1 + 48);
  v8 = (__int128 *)(a1 + 64);
  v9 = (void **)(a1 + 96);
  if (!v6)
  {
    if (*(char *)(a1 + 119) < 0)
    {
      if (*(_QWORD *)(a1 + 104))
      {
LABEL_15:
        v12 = sub_10022D1EC();
        v42 = *v7;
        v43 = *(_WORD *)(a1 + 56);
        v11 = (void **)&v44;
        if (*(char *)(a1 + 87) < 0)
        {
          sub_100115CE4(&v44, *(void **)(a1 + 64), *(_QWORD *)(a1 + 72));
        }
        else
        {
          v44 = *v8;
          v45 = *(_QWORD *)(a1 + 80);
        }
        v46 = *(_QWORD *)(a1 + 88);
        v13 = sub_100E646D8(v12, &v42, (const void **)(a1 + 96), (uint64_t)&v53);
        v52 = v13;
        if (SHIBYTE(v45) < 0)
          goto LABEL_52;
        goto LABEL_19;
      }
    }
    else if (*(_BYTE *)(a1 + 119))
    {
      goto LABEL_15;
    }
    v19 = sub_10022D1EC();
    v37 = *v7;
    v38 = *(_WORD *)(a1 + 56);
    v11 = (void **)&v39;
    if (*(char *)(a1 + 87) < 0)
    {
      sub_100115CE4(&v39, *(void **)(a1 + 64), *(_QWORD *)(a1 + 72));
    }
    else
    {
      v39 = *v8;
      v40 = *(_QWORD *)(a1 + 80);
    }
    v41 = *(_QWORD *)(a1 + 88);
    v13 = sub_100E645E0(v19, (uint64_t)&v37, (uint64_t)&v53);
    v52 = v13;
    if (SHIBYTE(v40) < 0)
      goto LABEL_52;
LABEL_19:
    if (v13)
      goto LABEL_20;
    goto LABEL_53;
  }
  std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a1 + 64));
  v10 = sub_10022D1EC();
  v47 = *v7;
  v48 = *(_WORD *)(a1 + 56);
  v11 = (void **)&v49;
  if (*(char *)(a1 + 87) < 0)
  {
    sub_100115CE4(&v49, *(void **)(a1 + 64), *(_QWORD *)(a1 + 72));
  }
  else
  {
    v49 = *v8;
    v50 = *(_QWORD *)(a1 + 80);
  }
  v51 = *(_QWORD *)(a1 + 88);
  v13 = sub_100E646D8(v10, &v47, (const void **)(a1 + 64), (uint64_t)&v53);
  v52 = v13;
  if ((SHIBYTE(v50) & 0x80000000) == 0)
    goto LABEL_19;
LABEL_52:
  operator delete(*v11);
  if (v13)
  {
LABEL_20:
    if (*(char *)(a1 + 119) < 0)
    {
      if (!*(_QWORD *)(a1 + 104))
      {
LABEL_24:
        sub_100633AB4((gid_t *)(a1 + 48), (std::string *)buf);
        if (*(char *)(a1 + 119) < 0)
          operator delete(*v9);
        *(_OWORD *)v9 = *(_OWORD *)buf;
        *(_QWORD *)(a1 + 112) = *(_QWORD *)&buf[16];
      }
    }
    else if (!*(_BYTE *)(a1 + 119))
    {
      goto LABEL_24;
    }
    if (v13 == 23)
    {
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
      v14 = off_1022A0288;
      if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a1 + 119) < 0)
          v9 = (void **)*v9;
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = v9;
        v57 = 1040;
        *(_DWORD *)v58 = 4;
        *(_WORD *)&v58[4] = 2098;
        *(_QWORD *)&v58[6] = &v52;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Could not open database\", \"path\":%{public, location:escape_only}s, \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x2Cu);
      }
    }
    else
    {
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
      v15 = off_1022A0288;
      if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
      {
        v16 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
          v16 = *v9;
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = v16;
        v57 = 1040;
        *(_DWORD *)v58 = 4;
        *(_WORD *)&v58[4] = 2098;
        *(_QWORD *)&v58[6] = &v52;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not open database\", \"path\":%{public, location:escape_only}s, \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x2Cu);
        if (qword_1022A0280 != -1)
          dispatch_once(&qword_1022A0280, &stru_102149330);
      }
      v17 = off_1022A0288;
      if (os_signpost_enabled((os_log_t)off_1022A0288))
      {
        v18 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
          v18 = *v9;
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = v18;
        v57 = 1040;
        *(_DWORD *)v58 = 4;
        *(_WORD *)&v58[4] = 2098;
        *(_QWORD *)&v58[6] = &v52;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not open database", "{\"msg%{public}.0s\":\"Could not open database\", \"path\":%{public, location:escape_only}s, \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x2Cu);
      }
      sub_1006361F0(*(sqlite3 **)(a1 + 8), (a1 + 96), *(unsigned __int8 *)(a1 + 56), v52);
    }
    *(_QWORD *)(a1 + 8) = 0;
    goto LABEL_112;
  }
LABEL_53:
  *(_OWORD *)(a1 + 8) = v53;
  v20 = *(unsigned __int8 *)(a1 + 119);
  if (*(char *)(a1 + 119) < 0)
    v21 = *(_QWORD *)(a1 + 104);
  else
    v21 = *(unsigned __int8 *)(a1 + 119);
  if (!v21)
  {
    std::string::operator=((std::string *)(a1 + 96), &__p);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v26 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(a1 + 119) < 0)
        v9 = (void **)*v9;
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v9;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Returned database\", \"path\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    goto LABEL_99;
  }
  if ((v20 & 0x80u) == 0)
    v22 = *(unsigned __int8 *)(a1 + 119);
  else
    v22 = *(_QWORD *)(a1 + 104);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (v22 != size)
    goto LABEL_82;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((v20 & 0x80) != 0)
  {
    if (memcmp(*v9, p_p, *(_QWORD *)(a1 + 104)))
    {
LABEL_82:
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
      v27 = off_1022A0288;
      if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v28 = &__p;
        else
          v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v29 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
          v29 = *v9;
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = v28;
        v57 = 2082;
        *(_QWORD *)v58 = v29;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Requested filename\", \"expected\":%{public, location:escape_only}s, \"actual\":%{public, location:escape_only}s}", buf, 0x26u);
        if (qword_1022A0280 != -1)
          dispatch_once(&qword_1022A0280, &stru_102149330);
      }
      v30 = off_1022A0288;
      if (os_signpost_enabled((os_log_t)off_1022A0288))
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v31 = &__p;
        else
          v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (*(char *)(a1 + 119) < 0)
          v9 = (void **)*v9;
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = v31;
        v57 = 2082;
        *(_QWORD *)v58 = v9;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v30, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Requested filename", "{\"msg%{public}.0s\":\"Requested filename\", \"expected\":%{public, location:escape_only}s, \"actual\":%{public, location:escape_only}s}", buf, 0x26u);
      }
    }
  }
  else if (*(_BYTE *)(a1 + 119))
  {
    v25 = (unsigned __int8 *)(a1 + 96);
    while (*v25 == p_p->__r_.__value_.__s.__data_[0])
    {
      ++v25;
      p_p = (std::string *)((char *)p_p + 1);
      if (!--v20)
        goto LABEL_99;
    }
    goto LABEL_82;
  }
LABEL_99:
  if (!*(_BYTE *)(a1 + 56))
  {
    v32 = *(_QWORD *)(a1 + 16);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v32 + 16))(v32, p_p);
    if (!*v54)
    {
      *(_QWORD *)buf = "TableName";
      *(_DWORD *)&buf[8] = 3;
      *(_WORD *)&buf[12] = 1;
      buf[16] = 0;
      v58[10] = 0;
      v59 = "SoftwareVersion";
      v60 = 3;
      v61 = 0;
      v62 = 0;
      v63 = 0;
      v64 = "SerialNumber";
      v65 = 3;
      v66 = 0;
      v67 = 0;
      v68 = 0;
      v69 = 0;
      v70 = 5;
      v71 = 0;
      v72 = 0;
      v73 = 0;
      sub_1006322E8(a1, "TableInfo", (const char **)buf, 0, 1);
      *v54 = 1;
    }
    sub_1006331FC(a1);
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
  }
  if (!sub_100633908(a1, 1))
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v33 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unable to turn ON foreign keys check\"}", buf, 0x12u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v34 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v34, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unable to turn ON foreign keys check", "{\"msg%{public}.0s\":\"Unable to turn ON foreign keys check\"}", buf, 0x12u);
    }
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, (const void *)a1, (CFNotificationCallback)sub_100633A5C, CFSTR("com.apple.locationd.DumpDiagnostics"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, (const void *)a1, (CFNotificationCallback)sub_100633A5C, CFSTR("com.apple.locationd.DumpDiagnostics"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
LABEL_112:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_100631E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  sub_10187E514((uint64_t)&a9);
  if (a48 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100631E9C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = off_1021491B8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 24;
  *(_QWORD *)(a1 + 32) = a1 + 24;
  *(_QWORD *)(a1 + 40) = 0;
  v4 = *a2;
  *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 4);
  *(_QWORD *)(a1 + 48) = v4;
  if (*((char *)a2 + 39) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 64), (void *)a2[2], a2[3]);
  }
  else
  {
    v5 = *((_OWORD *)a2 + 1);
    *(_QWORD *)(a1 + 80) = a2[4];
    *(_OWORD *)(a1 + 64) = v5;
  }
  *(_QWORD *)(a1 + 88) = a2[5];
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  sub_100631374(a1);
  return a1;
}

void sub_100631F48(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1000F34E0(v1);
  _Unwind_Resume(a1);
}

int *sub_100631F88(int *a1)
{
  __CFNotificationCenter *DarwinNotifyCenter;
  __CFNotificationCenter *LocalCenter;
  uint64_t i;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t v8;

  *(_QWORD *)a1 = off_1021491B8;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(DarwinNotifyCenter, a1);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveEveryObserver(LocalCenter, a1);
  for (i = *((_QWORD *)a1 + 4); (int *)i != a1 + 6; i = v5)
  {
    v5 = *(_QWORD *)(i + 8);
    sub_10063207C((uint64_t)a1, *(sqlite3_stmt **)(i + 16));
  }
  if (*((_QWORD *)a1 + 1))
  {
    if (a1[30] >= 1)
    {
      do
      {
        sub_1000CDA5C(*((_QWORD *)a1 + 2));
        v6 = a1[30];
        v7 = __OFSUB__(v6--, 1);
        a1[30] = v6;
      }
      while (!((v6 < 0) ^ v7 | (v6 == 0)));
    }
    v8 = sub_10022D1EC();
    sub_100E64DD0(v8, *((sqlite3 **)a1 + 1));
    *((_QWORD *)a1 + 1) = 0;
  }
  if (*((_QWORD *)a1 + 2))
    *((_QWORD *)a1 + 2) = 0;

  if (*((char *)a1 + 119) < 0)
    operator delete(*((void **)a1 + 12));
  if (*((char *)a1 + 87) < 0)
    operator delete(*((void **)a1 + 8));
  sub_1000F34E0((_QWORD *)a1 + 3);
  return a1;
}

uint64_t sub_10063207C(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  sqlite3_stmt *v16;

  v4 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v5 = *(uint64_t **)(a1 + 32);
  if (v5 == (uint64_t *)(a1 + 24))
  {
LABEL_4:
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v7 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289282;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2050;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not find prepared statement\", \"statement\":\"%{public}p\"}", buf, 0x1Cu);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v8 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289282;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2050;
      v16 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not find prepared statement", "{\"msg%{public}.0s\":\"Could not find prepared statement\", \"statement\":\"%{public}p\"}", buf, 0x1Cu);
    }
  }
  else
  {
    while (1)
    {
      v6 = v5[1];
      if ((sqlite3_stmt *)v5[2] == a2)
        break;
      v5 = (uint64_t *)v5[1];
      if (v6 == a1 + 24)
        goto LABEL_4;
    }
    v9 = *v5;
    *(_QWORD *)(v9 + 8) = v6;
    *(_QWORD *)v5[1] = v9;
    --*(_QWORD *)(a1 + 40);
    operator delete(v5);
    sub_1000536D0(*(sqlite3 **)(a1 + 8), a2);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_100632298(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1006322C4(int *a1)
{
  sub_100631F88(a1);
  operator delete();
}

uint64_t sub_1006322E8(uint64_t a1, char *a2, const char **a3, const std::string::value_type **a4, char a5)
{
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  char *p_p;
  sqlite3_stmt *v12;
  char v13;
  const char **v14;
  const char *v15;
  const unsigned __int8 *v16;
  int v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const unsigned __int8 *v21;
  NSObject *v22;
  int v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  int v28;
  const unsigned __int8 *v29;
  const unsigned __int8 *v30;
  int v31;
  NSObject *v32;
  NSObject *v33;
  uint64_t v34;
  NSObject *v35;
  char *v36;
  uint64_t v37;
  const char **v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  _QWORD *v54;
  size_t v55;
  _QWORD *v56;
  char *v57;
  sqlite3_stmt *v58;
  int v59;
  char *v60;
  char *v61;
  char v62;
  int v63;
  BOOL v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  const unsigned __int8 *v69;
  const char *v70;
  const unsigned __int8 *v71;
  const char *v72;
  const unsigned __int8 *v73;
  int v74;
  void **v75;
  const unsigned __int8 *v76;
  void **v77;
  _BOOL4 v78;
  int v79;
  void **v80;
  const unsigned __int8 *v81;
  void **v82;
  NSObject *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const unsigned __int8 *v87;
  const unsigned __int8 *v88;
  const unsigned __int8 *v89;
  void **v90;
  const unsigned __int8 *v91;
  sqlite3_stmt *v92;
  int v93;
  void **v94;
  const unsigned __int8 *v95;
  void **v96;
  int v97;
  NSObject *v98;
  NSObject *v99;
  uint64_t v100;
  char v102;
  const std::string::value_type **v103;
  NSObject *v104;
  const unsigned __int8 *v105;
  uint64_t v106;
  uint64_t v108;
  const char **v110;
  uint64_t v111;
  void *v112[2];
  char v113;
  void *v114[2];
  char v115;
  void *v116;
  char *v117;
  char *v118;
  uint64_t v119;
  pthread_mutex_t *v120;
  __int16 v121;
  void *__p;
  _BYTE v123[20];
  __int16 v124;
  _BYTE v125[30];
  _BYTE v126[10];
  _BYTE v127[10];
  const unsigned __int8 *v128;
  __int16 v129;
  void **v130;
  __int16 v131;
  const unsigned __int8 *v132;
  __int16 v133;
  void **v134;
  __int16 v135;
  const unsigned __int8 *v136;
  uint8_t buf[8];
  __int16 v138;
  _BYTE v139[66];
  std::string v140;
  uint64_t v141;

  v119 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v119 + 16))(v119);
  v121 = 256;
  if (a3 && *a3)
  {
    sub_100263E50((uint64_t)buf);
    v8 = sub_100263F7C(&v139[6], (uint64_t)"PRAGMA table_info(", 18);
    v9 = strlen(a2);
    v10 = sub_100263F7C(v8, (uint64_t)a2, v9);
    LOBYTE(__p) = 41;
    sub_100263F7C(v10, (uint64_t)&__p, 1);
    std::stringbuf::str(&__p, &v139[14]);
    if (v123[15] >= 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    v12 = sub_1000CDB4C(a1, p_p);
    v102 = a5;
    v103 = a4;
    if ((v123[15] & 0x80000000) != 0)
      operator delete(__p);
    v111 = 0;
    v13 = 1;
    v110 = a3;
    while (sqlite3_step(v12) == 100)
    {
      v14 = &a3[6 * v111];
      v15 = *v14;
      if (!*v14)
        goto LABEL_38;
      v16 = sqlite3_column_text(v12, 1);
      if (strcmp(v15, (const char *)v16))
        goto LABEL_19;
      v17 = (int)a3[6 * v111 + 1];
      v18 = "INTEGER";
      if (v17 != 1)
      {
        v19 = 0;
        do
        {
          v20 = v19;
          v19 += 16;
        }
        while (v19 != 80 && *(_DWORD *)((char *)&unk_1021492C0 + v20 + 16) != v17);
        v18 = *(const char **)((char *)&unk_1021492C0 + v20 + 24);
      }
      v21 = sqlite3_column_text(v12, 2);
      if (strcmp(v18, (const char *)v21) || BYTE4(a3[6 * v111 + 1]) != sqlite3_column_int(v12, 5) > 0)
      {
LABEL_19:
        if (qword_1022A0280 != -1)
          dispatch_once(&qword_1022A0280, &stru_102149330);
        v22 = off_1022A0288;
        v13 = 0;
        if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
        {
          v23 = (int)a3[6 * v111 + 1];
          v24 = "INTEGER";
          if (v23 != 1)
          {
            v25 = 0;
            do
            {
              v26 = v25;
              v25 += 16;
            }
            while (v25 != 80 && *(_DWORD *)((char *)&unk_1021492C0 + v26 + 16) != v23);
            v24 = *(const char **)((char *)&unk_1021492C0 + v26 + 24);
          }
          v27 = *v14;
          v28 = BYTE4(v110[6 * v111 + 1]);
          v29 = sqlite3_column_text(v12, 1);
          v30 = sqlite3_column_text(v12, 2);
          v31 = sqlite3_column_int(v12, 5);
          __p = (void *)68291075;
          *(_WORD *)v123 = 2082;
          *(_QWORD *)&v123[2] = "";
          *(_WORD *)&v123[10] = 2081;
          *(_QWORD *)&v123[12] = a2;
          v124 = 1026;
          *(_DWORD *)v125 = v111;
          *(_WORD *)&v125[4] = 2082;
          *(_QWORD *)&v125[6] = v27;
          *(_WORD *)&v125[14] = 2082;
          *(_QWORD *)&v125[16] = v24;
          *(_WORD *)&v125[24] = 1026;
          *(_DWORD *)&v125[26] = v28;
          *(_WORD *)v126 = 2082;
          *(_QWORD *)&v126[2] = v29;
          *(_WORD *)v127 = 2082;
          *(_QWORD *)&v127[2] = v30;
          LOWORD(v128) = 1026;
          *(_DWORD *)((char *)&v128 + 2) = v31 > 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Existing table's column does not match expected\", \"table\":%{private, location:escape_only}s, \"index\":%{public}d, \"expected name\":%{public, location:escape_only}s, \"expected type\":%{public, location:escape_only}s, \"expected primary key\":%{public}hhd, \"actual name\":%{public, location:escape_only}s, \"actual type\":%{public, location:escape_only}s, \"actual primary key\":%{public}hhd}", (uint8_t *)&__p, 0x56u);
          v13 = 0;
          a3 = v110;
        }
      }
      ++v111;
    }
    if (!a3[6 * v111])
      goto LABEL_43;
LABEL_38:
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v35 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
    {
      __p = (void *)68289283;
      *(_WORD *)v123 = 2082;
      *(_QWORD *)&v123[2] = "";
      *(_WORD *)&v123[10] = 2081;
      *(_QWORD *)&v123[12] = a2;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Existing table's schema does not have the same number of columns as the requested schema\", \"table\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
    }
    v13 = 0;
LABEL_43:
    sub_1000536D0(*(sqlite3 **)(a1 + 8), v12);
    if ((v13 & 1) == 0)
      goto LABEL_131;
    v36 = 0;
    v116 = 0;
    v117 = 0;
    v118 = 0;
    v37 = v111;
    do
    {
      if (LOBYTE(a3[6 * v37 + 5]))
      {
        v38 = &a3[6 * v37];
        if (v36 >= v118)
        {
          v41 = (char *)v116;
          v42 = 0xAAAAAAAAAAAAAAABLL * ((v36 - (_BYTE *)v116) >> 4);
          v43 = v42 + 1;
          if (v42 + 1 > 0x555555555555555)
            sub_100259694();
          if (0x5555555555555556 * ((v118 - (_BYTE *)v116) >> 4) > v43)
            v43 = 0x5555555555555556 * ((v118 - (_BYTE *)v116) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((v118 - (_BYTE *)v116) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v44 = 0x555555555555555;
          else
            v44 = v43;
          if (v44)
          {
            v45 = (char *)sub_100313718((uint64_t)&v118, v44);
            v41 = (char *)v116;
            v36 = v117;
          }
          else
          {
            v45 = 0;
          }
          v46 = &v45[48 * v42];
          v47 = *(_OWORD *)v38;
          v48 = *((_OWORD *)v38 + 2);
          *((_OWORD *)v46 + 1) = *((_OWORD *)v38 + 1);
          *((_OWORD *)v46 + 2) = v48;
          *(_OWORD *)v46 = v47;
          if (v36 == v41)
          {
            v50 = &v45[48 * v42];
            a3 = v110;
          }
          else
          {
            v49 = &v45[48 * v42];
            a3 = v110;
            do
            {
              v50 = v49 - 48;
              v51 = *((_OWORD *)v36 - 3);
              v52 = *((_OWORD *)v36 - 1);
              *((_OWORD *)v49 - 2) = *((_OWORD *)v36 - 2);
              *((_OWORD *)v49 - 1) = v52;
              *((_OWORD *)v49 - 3) = v51;
              v36 -= 48;
              v49 -= 48;
            }
            while (v36 != v41);
          }
          v36 = v46 + 48;
          v116 = v50;
          v117 = v46 + 48;
          v118 = &v45[48 * v44];
          if (v41)
            operator delete(v41);
        }
        else
        {
          v39 = *(_OWORD *)v38;
          v40 = *((_OWORD *)v38 + 2);
          *((_OWORD *)v36 + 1) = *((_OWORD *)v38 + 1);
          *((_OWORD *)v36 + 2) = v40;
          *(_OWORD *)v36 = v39;
          v36 += 48;
          a3 = v110;
        }
        v117 = v36;
      }
    }
    while (v37-- > 0);
    __p = 0;
    *(_QWORD *)v123 = 0;
    *(_QWORD *)&v123[8] = 0;
    std::string::operator=(&v140, (const std::string *)&__p);
    sub_1004ADDC8((uint64_t)&v139[14]);
    if ((v123[15] & 0x80000000) != 0)
      operator delete(__p);
    v54 = sub_100263F7C(&v139[6], (uint64_t)"PRAGMA foreign_key_list(", 24);
    v55 = strlen(a2);
    v56 = sub_100263F7C(v54, (uint64_t)a2, v55);
    sub_100263F7C(v56, (uint64_t)")", 1);
    std::stringbuf::str(&__p, &v139[14]);
    if (v123[15] >= 0)
      v57 = (char *)&__p;
    else
      v57 = (char *)__p;
    v58 = sub_1000CDB4C(a1, v57);
    if ((v123[15] & 0x80000000) != 0)
      operator delete(__p);
    v59 = sqlite3_step(v58);
    v60 = (char *)v116;
    v61 = v117;
    if (v117 == v116 && v59 == 100)
    {
      v62 = 0;
      v63 = 0;
      v60 = v117;
      goto LABEL_121;
    }
    v63 = 0;
    v64 = v117 == v116 || v59 == 100;
    v65 = !v64;
    v62 = v65 ^ 1;
    if (!v64 || v59 != 100)
    {
LABEL_121:
      if (0xAAAAAAAAAAAAAAABLL * ((v61 - v60) >> 4) > v63 || v59 == 100)
      {
        if (qword_1022A0280 != -1)
          dispatch_once(&qword_1022A0280, &stru_102149330);
        v98 = off_1022A0288;
        v62 = 0;
        if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
        {
          __p = (void *)68289026;
          *(_WORD *)v123 = 2082;
          *(_QWORD *)&v123[2] = "";
          _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Actual table has more foreign key contraints than expected\"}", (uint8_t *)&__p, 0x12u);
          v62 = 0;
        }
      }
      sub_1000536D0(*(sqlite3 **)(a1 + 8), v58);
      if (v116)
      {
        v117 = (char *)v116;
        operator delete(v116);
      }
      if ((v62 & 1) != 0)
      {
        v34 = 0;
LABEL_138:
        if ((v102 & 1) == 0)
          sub_100637758(a1, a2);
        if (v103)
          sub_100638BD8(a1, a2, v103);
        *(_QWORD *)&v139[6] = v100;
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v140.__r_.__value_.__l.__data_);
        std::streambuf::~streambuf(&v139[14]);
        std::ios::~ios(&v141);
        goto LABEL_145;
      }
LABEL_131:
      if ((_DWORD)v111)
      {
        if (qword_1022A0280 != -1)
          dispatch_once(&qword_1022A0280, &stru_102149330);
        v99 = off_1022A0288;
        if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
        {
          __p = (void *)68289283;
          *(_WORD *)v123 = 2082;
          *(_QWORD *)&v123[2] = "";
          *(_WORD *)&v123[10] = 2081;
          *(_QWORD *)&v123[12] = a2;
          _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Table exists but does not have matching schema\", \"table\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
        }
        sub_100639A84(a1, a2);
      }
      sub_10063A0EC(a1, a2, a3);
      v34 = 1;
      goto LABEL_138;
    }
    v66 = 0;
    v67 = 1;
    v62 = 1;
    while (1)
    {
      v68 = *(const char **)&v60[v66];
      v69 = sqlite3_column_text(v58, 3);
      if (strcmp(v68, (const char *)v69))
        break;
      v70 = *(const char **)((char *)v116 + v66 + 16);
      v71 = sqlite3_column_text(v58, 2);
      if (strcmp(v70, (const char *)v71))
        break;
      v72 = *(const char **)((char *)v116 + v66 + 24);
      v73 = sqlite3_column_text(v58, 4);
      if (strcmp(v72, (const char *)v73))
        break;
      sub_1015A2E04(&__p, (&off_1021493B0)[*(int *)((char *)v116 + v66 + 36)]);
      v74 = v123[15];
      v75 = (void **)__p;
      v76 = sqlite3_column_text(v58, 5);
      if (v74 >= 0)
        v77 = &__p;
      else
        v77 = v75;
      if (!strcmp((const char *)v77, (const char *)v76))
      {
        sub_1015A2E04(v114, (&off_1021493B0)[*(int *)((char *)v116 + v66 + 32)]);
        v79 = v115;
        v80 = (void **)v114[0];
        v81 = sqlite3_column_text(v58, 6);
        if (v79 >= 0)
          v82 = v114;
        else
          v82 = v80;
        v78 = strcmp((const char *)v82, (const char *)v81) != 0;
        if (v115 < 0)
          operator delete(v114[0]);
      }
      else
      {
        v78 = 1;
      }
      if ((v123[15] & 0x80000000) != 0)
      {
        operator delete(__p);
        if (v78)
          break;
      }
      else if (v78)
      {
        break;
      }
LABEL_118:
      v59 = sqlite3_step(v58);
      v60 = (char *)v116;
      v61 = v117;
      v97 = v67 + 1;
      if (v67 != 0xAAAAAAAAAAAAAAABLL * ((v117 - (_BYTE *)v116) >> 4))
      {
        v66 += 48;
        ++v67;
        if (v59 == 100)
          continue;
      }
      v63 = v97 - 1;
      goto LABEL_121;
    }
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v83 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
    {
      v84 = *(_QWORD *)((char *)v116 + v66);
      v86 = *(_QWORD *)((char *)v116 + v66 + 16);
      v85 = *(_QWORD *)((char *)v116 + v66 + 24);
      v87 = sqlite3_column_text(v58, 3);
      v88 = sqlite3_column_text(v58, 2);
      v89 = sqlite3_column_text(v58, 4);
      v108 = v66;
      sub_1015A2E04(v114, (&off_1021493B0)[*(int *)((char *)v116 + v66 + 32)]);
      v105 = v89;
      v106 = v67;
      if (v115 >= 0)
        v90 = v114;
      else
        v90 = (void **)v114[0];
      v91 = sqlite3_column_text(v58, 6);
      v104 = v83;
      v92 = v58;
      sub_1015A2E04(v112, (&off_1021493B0)[*(int *)((char *)v116 + v108 + 36)]);
      v93 = v113;
      v94 = (void **)v112[0];
      v95 = sqlite3_column_text(v92, 5);
      LODWORD(__p) = 68291843;
      v96 = v112;
      if (v93 < 0)
        v96 = v94;
      HIDWORD(__p) = 0;
      *(_WORD *)v123 = 2082;
      *(_QWORD *)&v123[2] = "";
      *(_WORD *)&v123[10] = 2081;
      *(_QWORD *)&v123[12] = a2;
      v124 = 2082;
      *(_QWORD *)v125 = v84;
      *(_WORD *)&v125[8] = 2082;
      *(_QWORD *)&v125[10] = v86;
      *(_WORD *)&v125[18] = 2082;
      *(_QWORD *)&v125[20] = v85;
      *(_WORD *)&v125[28] = 2082;
      *(_QWORD *)v126 = v87;
      *(_WORD *)&v126[8] = 2082;
      *(_QWORD *)v127 = v88;
      *(_WORD *)&v127[8] = 2082;
      v128 = v105;
      v129 = 2082;
      v130 = v90;
      v131 = 2082;
      v132 = v91;
      v133 = 2082;
      v134 = v96;
      v135 = 2082;
      v136 = v95;
      _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#warning Existing table's foreign key constraint does not match expected\", \"table\":%{private, location:escape_only}s, \"ExpectedFromCol\":%{public, location:escape_only}s, \"ExpectedToTable\":%{public, location:escape_only}s, \"ExpectedToCol\":%{public, location:escape_only}s, \"ActualFromCol\":%{public, location:escape_only}s, \"ActualToTable\":%{public, location:escape_only}s, \"ActualToCol\":%{public, location:escape_only}s, \"ExpectedOnDelete\":%{public, location:escape_only}s, \"ActualOnDelete\":%{public, location:escape_only}s, \"ExpectedOnUpdate\":%{public, location:escape_only}s, \"ActualOnUpdate\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x80u);
      if (v113 < 0)
        operator delete(v112[0]);
      a3 = v110;
      v58 = v92;
      v66 = v108;
      if (v115 < 0)
        operator delete(v114[0]);
      v62 = 0;
      v67 = v106;
    }
    else
    {
      v62 = 0;
    }
    goto LABEL_118;
  }
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v32 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    v138 = 2082;
    *(_QWORD *)v139 = "";
    *(_WORD *)&v139[8] = 2081;
    *(_QWORD *)&v139[10] = a2;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Need at least one column in table\", \"table\":%{private, location:escape_only}s}", buf, 0x1Cu);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
  }
  v33 = off_1022A0288;
  if (os_signpost_enabled((os_log_t)off_1022A0288))
  {
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    v138 = 2082;
    *(_QWORD *)v139 = "";
    *(_WORD *)&v139[8] = 2081;
    *(_QWORD *)&v139[10] = a2;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v33, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Need at least one column in table", "{\"msg%{public}.0s\":\"Need at least one column in table\", \"table\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  v34 = 0;
LABEL_145:
  if ((_BYTE)v121)
    pthread_mutex_unlock(v120);
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 24))(v119);
  return v34;
}

void sub_100633100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a36 < 0)
    operator delete(__p);
  if (a48 < 0)
    operator delete(a43);
  if (a37)
    operator delete(a37);
  sub_1018B38B4((uint64_t)&a62);
  sub_10187E514((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void sub_1006331FC(uint64_t a1)
{
  sqlite3_stmt *v2;
  sqlite3_stmt *v3;
  const unsigned __int8 *v4;
  id v5;
  std::string *v6;
  NSObject *v7;
  NSObject *v8;
  _BYTE *v9;
  std::string *v10;
  NSUUID *v11;
  _QWORD *v12;
  std::string *v13;
  size_t v14;
  _QWORD *v15;
  char *v16;
  sqlite3_stmt *v17;
  sqlite3_stmt *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  void **v22;
  const char *v23;
  NSObject *v24;
  uint32_t v25;
  void **v26;
  std::string *v27;
  uint64_t v28;
  void *v29[2];
  uint64_t v30;
  std::string v31;
  _BYTE __p[28];
  __int16 v33;
  std::string *v34;
  uint8_t buf[8];
  __int16 v36;
  _BYTE v37[56];
  void *v38;
  char v39;
  uint64_t v40;
  const std::string::value_type *v41[2];
  const char *v42;
  int v43;
  __int16 v44;
  char v45;
  char v46;
  const char *v47;
  int v48;
  __int16 v49;
  char v50;
  char v51;
  uint64_t v52;
  int v53;
  __int16 v54;
  char v55;
  char v56;

  v42 = "id";
  v43 = 1;
  v44 = 1;
  v45 = 0;
  v46 = 0;
  v47 = "uuid";
  v48 = 3;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 5;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v41[0] = "uuid";
  v41[1] = 0;
  sub_100634364(a1, "DatabaseIdentifier", &v42, v41, 0);
  memset(&v31, 0, sizeof(v31));
  v2 = sub_1000CDB4C(a1, "SELECT * FROM DatabaseIdentifier;");
  v3 = v2;
  if (v2)
  {
    if (sqlite3_step(v2) == 100)
    {
      v4 = sqlite3_column_text(v3, 1);
      std::string::assign(&v31, (const std::string::value_type *)v4);
      v5 = objc_alloc((Class)NSString);
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v6 = &v31;
      else
        v6 = (std::string *)v31.__r_.__value_.__r.__words[0];
      *(_QWORD *)(a1 + 128) = objc_msgSend(v5, "initWithUTF8String:", v6);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
      v7 = off_1022A0288;
      if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a1 + 119) < 0)
        {
          sub_100115CE4(__p, *(void **)(a1 + 96), *(_QWORD *)(a1 + 104));
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)(a1 + 96);
          *(_QWORD *)&__p[16] = *(_QWORD *)(a1 + 112);
        }
        v9 = __p;
        if (__p[23] < 0)
          v9 = *(_BYTE **)__p;
        v10 = &v31;
        if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v10 = (std::string *)v31.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)&buf[4] = 0;
        v36 = 2082;
        *(_QWORD *)v37 = "";
        *(_WORD *)&v37[8] = 2082;
        *(_QWORD *)&v37[10] = v9;
        *(_WORD *)&v37[18] = 2081;
        *(_QWORD *)&v37[20] = v10;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"initUUID\", \"path\":%{public, location:escape_only}s, \"uuid\":%{private, location:escape_only}s}", buf, 0x26u);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
    }
    sub_1000536D0(*(sqlite3 **)(a1 + 8), v3);
    if (!*(_QWORD *)(a1 + 128))
    {
      v11 = +[NSUUID UUID](NSUUID, "UUID");
      std::string::assign(&v31, -[NSString UTF8String](-[NSUUID UUIDString](v11, "UUIDString"), "UTF8String"));
      sub_100263E50((uint64_t)buf);
      v12 = sub_100263F7C(&v37[6], (uint64_t)"INSERT INTO DatabaseIdentifier (uuid) VALUES (\"", 47);
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v31;
      else
        v13 = (std::string *)v31.__r_.__value_.__r.__words[0];
      v14 = strlen((const char *)v13);
      v15 = sub_100263F7C(v12, (uint64_t)v13, v14);
      sub_100263F7C(v15, (uint64_t)"\");", 3);
      std::stringbuf::str(__p, &v37[14]);
      if (__p[23] >= 0)
        v16 = __p;
      else
        v16 = *(char **)__p;
      v17 = sub_1000CDB4C(a1, v16);
      v18 = v17;
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        if (v18)
        {
LABEL_31:
          if (sqlite3_step(v18) == 101)
          {
            *(_QWORD *)(a1 + 128) = -[NSUUID UUIDString](v11, "UUIDString");
            if (qword_1022A0280 != -1)
              dispatch_once(&qword_1022A0280, &stru_102149330);
            v19 = off_1022A0288;
            if (!os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
              goto LABEL_59;
            if (*(char *)(a1 + 119) < 0)
            {
              sub_100115CE4(v29, *(void **)(a1 + 96), *(_QWORD *)(a1 + 104));
            }
            else
            {
              *(_OWORD *)v29 = *(_OWORD *)(a1 + 96);
              v30 = *(_QWORD *)(a1 + 112);
            }
            v26 = v29;
            if (v30 < 0)
              v26 = (void **)v29[0];
            v27 = &v31;
            if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v27 = (std::string *)v31.__r_.__value_.__r.__words[0];
            *(_QWORD *)__p = 68289539;
            *(_WORD *)&__p[8] = 2082;
            *(_QWORD *)&__p[10] = "";
            *(_WORD *)&__p[18] = 2082;
            *(_QWORD *)&__p[20] = v26;
            v33 = 2081;
            v34 = v27;
            v23 = "{\"msg%{public}.0s\":\"UUID initialized\", \"path\":%{public, location:escape_only}s, \"uuid\":%{priva"
                  "te, location:escape_only}s}";
            v24 = v19;
            v25 = 38;
          }
          else
          {
            if (qword_1022A0280 != -1)
              dispatch_once(&qword_1022A0280, &stru_102149330);
            v21 = off_1022A0288;
            if (!os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
              goto LABEL_59;
            if (*(char *)(a1 + 119) < 0)
            {
              sub_100115CE4(v29, *(void **)(a1 + 96), *(_QWORD *)(a1 + 104));
            }
            else
            {
              *(_OWORD *)v29 = *(_OWORD *)(a1 + 96);
              v30 = *(_QWORD *)(a1 + 112);
            }
            v22 = v29;
            if (v30 < 0)
              v22 = (void **)v29[0];
            *(_QWORD *)__p = 68289282;
            *(_WORD *)&__p[8] = 2082;
            *(_QWORD *)&__p[10] = "";
            *(_WORD *)&__p[18] = 2082;
            *(_QWORD *)&__p[20] = v22;
            v23 = "{\"msg%{public}.0s\":\"Failed to initialize DB UUID\", \"path\":%{public, location:escape_only}s}";
            v24 = v21;
            v25 = 28;
          }
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, v23, __p, v25);
          if (SHIBYTE(v30) < 0)
            operator delete(v29[0]);
LABEL_59:
          sub_1000536D0(*(sqlite3 **)(a1 + 8), v18);
LABEL_60:
          *(_QWORD *)&v37[6] = v28;
          if (v39 < 0)
            operator delete(v38);
          std::streambuf::~streambuf(&v37[14]);
          std::ios::~ios(&v40);
          goto LABEL_63;
        }
      }
      else if (v17)
      {
        goto LABEL_31;
      }
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
      v20 = off_1022A0288;
      if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)__p = 68289026;
        *(_WORD *)&__p[8] = 2082;
        *(_QWORD *)&__p[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Failed to create UUID insert statement\"}", __p, 0x12u);
      }
      goto LABEL_60;
    }
  }
  else
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v8 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      v36 = 2082;
      *(_QWORD *)v37 = "";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Failed to create UUID select statement\"}", buf, 0x12u);
    }
  }
LABEL_63:
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
}

void sub_1006338A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_1018B38B4((uint64_t)&a27);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_100633908(uint64_t a1, int a2)
{
  uint64_t v4;
  char *v5;
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  int v9;
  void *__p[2];
  unsigned __int8 v12;
  std::string v13;
  uint64_t v14;
  __int16 v15;

  v4 = *(_QWORD *)(a1 + 16);
  v14 = v4;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v15 = 256;
  sub_1015A2E04(&v13, "pragma foreign_keys = ");
  if (a2)
    v5 = "1";
  else
    v5 = "0";
  sub_1015A2E04(__p, v5);
  if ((v12 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v7 = v12;
  else
    v7 = (std::string::size_type)__p[1];
  std::string::append(&v13, (const std::string::value_type *)v6, v7);
  if ((char)v12 < 0)
    operator delete(__p[0]);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v13;
  else
    v8 = (std::string *)v13.__r_.__value_.__r.__words[0];
  v9 = sqlite3_exec(*(sqlite3 **)(a1 + 8), (const char *)v8, 0, 0, 0);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v9 == 0;
}

void sub_100633A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
    operator delete(__p);
  sub_10187E514((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_100633A5C(uint64_t a1, uint64_t a2)
{
  uint64_t i;

  sub_1000CE038(*(_QWORD *)(a2 + 16));
  for (i = *(_QWORD *)(a2 + 32); i != a2 + 24; i = *(_QWORD *)(i + 8))
    sub_100631124(a2, *(sqlite3_stmt **)(i + 16), 0);
  return sub_1000CDA5C(*(_QWORD *)(a2 + 16));
}

void sub_100633AB4(gid_t *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  NSObject *v5;
  gid_t v6;
  NSObject *v7;
  gid_t v8;
  char *v9;
  void **v10;
  uid_t v11;
  gid_t v12;
  NSObject *v13;
  void **v14;
  NSObject *v15;
  void **v16;
  const std::string::value_type *v17;
  std::string *v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  NSObject *v24;
  gid_t v25;
  NSObject *v26;
  gid_t v27;
  std::string *v28;
  std::string::size_type size;
  std::string *v30;
  __int128 v31;
  const std::string::value_type *v32;
  std::string::size_type v33;
  std::string *v34;
  void *v35;
  std::string::size_type v36;
  unsigned __int8 v37;
  std::string v38;
  std::string v39;
  std::string v40;
  void *__p[2];
  uint64_t v42;
  stat buf;

  __p[0] = 0;
  __p[1] = 0;
  v42 = 0;
  memset(&v40, 0, sizeof(v40));
  memset(&v39, 0, sizeof(v39));
  v4 = (int)*a1;
  if (v4 >= 4)
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v5 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      v6 = *a1;
      buf.st_dev = 68289282;
      *(_DWORD *)&buf.st_mode = 0;
      LOWORD(buf.st_ino) = 2082;
      *(__darwin_ino64_t *)((char *)&buf.st_ino + 2) = (__darwin_ino64_t)"";
      HIWORD(buf.st_uid) = 1026;
      buf.st_gid = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"unknown protection type\", \"protection\":%{public}d}", (uint8_t *)&buf, 0x18u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v7 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      v8 = *a1;
      buf.st_dev = 68289282;
      *(_DWORD *)&buf.st_mode = 0;
      LOWORD(buf.st_ino) = 2082;
      *(__darwin_ino64_t *)((char *)&buf.st_ino + 2) = (__darwin_ino64_t)"";
      HIWORD(buf.st_uid) = 1026;
      buf.st_gid = v8;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "unknown protection type", "{\"msg%{public}.0s\":\"unknown protection type\", \"protection\":%{public}d}", (uint8_t *)&buf, 0x18u);
    }
  }
  else
  {
    std::string::assign(&v40, *((const std::string::value_type **)&off_102149390 + v4));
  }
  if (*((_BYTE *)a1 + 8))
  {
    sub_100585420((std::string *)&buf);
  }
  else
  {
    v9 = (char *)sub_1001FD94C();
    sub_1000B7884(v9, (uint64_t)&buf);
  }
  if (SHIBYTE(v42) < 0)
    operator delete(__p[0]);
  *(_OWORD *)__p = *(_OWORD *)&buf.st_dev;
  v42 = *(_QWORD *)&buf.st_uid;
  if (a1[1] == 7)
  {
    sub_100584CC0(2, (std::string *)&buf);
    if (SHIBYTE(v42) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = *(_OWORD *)&buf.st_dev;
    v42 = *(_QWORD *)&buf.st_uid;
  }
  if (v42 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  v11 = getuid();
  v12 = getgid();
  if (!sub_100512E84(v10, v11, v12))
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v13 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      v14 = __p;
      if (v42 < 0)
        v14 = (void **)__p[0];
      buf.st_dev = 68289282;
      *(_DWORD *)&buf.st_mode = 0;
      LOWORD(buf.st_ino) = 2082;
      *(__darwin_ino64_t *)((char *)&buf.st_ino + 2) = (__darwin_ino64_t)"";
      HIWORD(buf.st_uid) = 2082;
      *(_QWORD *)&buf.st_gid = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"could not create path\", \"path\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v15 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      v16 = __p;
      if (v42 < 0)
        v16 = (void **)__p[0];
      buf.st_dev = 68289282;
      *(_DWORD *)&buf.st_mode = 0;
      LOWORD(buf.st_ino) = 2082;
      *(__darwin_ino64_t *)((char *)&buf.st_ino + 2) = (__darwin_ino64_t)"";
      HIWORD(buf.st_uid) = 2082;
      *(_QWORD *)&buf.st_gid = v16;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "could not create path", "{\"msg%{public}.0s\":\"could not create path\", \"path\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
    }
  }
  v17 = "file::memory:?cache=shared";
  v18 = &v39;
  switch(a1[1])
  {
    case 0u:
      goto LABEL_67;
    case 1u:
      if (*((_BYTE *)a1 + 8))
      {
        std::string::assign(&v39, "factory");
        sub_1003625F4((const void **)__p, (const void **)&v39.__r_.__value_.__l.__data_, (uint64_t)&buf);
        sub_1015A2E04(&v35, ".db");
        if ((v37 & 0x80u) == 0)
          v19 = (const std::string::value_type *)&v35;
        else
          v19 = (const std::string::value_type *)v35;
        if ((v37 & 0x80u) == 0)
          v20 = v37;
        else
          v20 = v36;
        v21 = std::string::append((std::string *)&buf, v19, v20);
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v38.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        if ((char)v37 < 0)
          operator delete(v35);
        if (SHIBYTE(buf.st_gid) < 0)
          operator delete(*(void **)&buf.st_dev);
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v23 = &v38;
        else
          v23 = (std::string *)v38.__r_.__value_.__r.__words[0];
        if (lstat((const char *)v23, &buf))
          std::string::assign(&v39, "factory_minimum");
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
      }
      else
      {
        std::string::assign(&v39, "cache");
      }
      if (*((_BYTE *)a1 + 8) || *a1)
        break;
      v17 = "_unencrypted";
      v18 = &v40;
      goto LABEL_67;
    case 2u:
      v17 = "consolidated";
      goto LABEL_66;
    case 3u:
      v17 = "lockCache";
      goto LABEL_66;
    case 4u:
      v17 = "gyroCal";
      goto LABEL_66;
    case 5u:
      v17 = "timezone";
      goto LABEL_66;
    case 6u:
      v17 = "sensorRecorder";
      goto LABEL_66;
    case 7u:
      v17 = "cold";
LABEL_66:
      v18 = &v39;
LABEL_67:
      std::string::assign(v18, v17);
      break;
    default:
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
      v24 = off_1022A0288;
      if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
      {
        v25 = a1[1];
        buf.st_dev = 68289282;
        *(_DWORD *)&buf.st_mode = 0;
        LOWORD(buf.st_ino) = 2082;
        *(__darwin_ino64_t *)((char *)&buf.st_ino + 2) = (__darwin_ino64_t)"";
        HIWORD(buf.st_uid) = 1026;
        buf.st_gid = v25;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"unknown persistence type\", \"persistence\":%{public}d}", (uint8_t *)&buf, 0x18u);
        if (qword_1022A0280 != -1)
          dispatch_once(&qword_1022A0280, &stru_102149330);
      }
      v26 = off_1022A0288;
      if (os_signpost_enabled((os_log_t)off_1022A0288))
      {
        v27 = a1[1];
        buf.st_dev = 68289282;
        *(_DWORD *)&buf.st_mode = 0;
        LOWORD(buf.st_ino) = 2082;
        *(__darwin_ino64_t *)((char *)&buf.st_ino + 2) = (__darwin_ino64_t)"";
        HIWORD(buf.st_uid) = 1026;
        buf.st_gid = v27;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v26, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "unknown persistence type", "{\"msg%{public}.0s\":\"unknown persistence type\", \"persistence\":%{public}d}", (uint8_t *)&buf, 0x18u);
      }
      break;
  }
  if (a1[1])
  {
    sub_1003625F4((const void **)__p, (const void **)&v39.__r_.__value_.__l.__data_, (uint64_t)&v38);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &v40;
    else
      v28 = (std::string *)v40.__r_.__value_.__r.__words[0];
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    else
      size = v40.__r_.__value_.__l.__size_;
    v30 = std::string::append(&v38, (const std::string::value_type *)v28, size);
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    *(_QWORD *)&buf.st_uid = *((_QWORD *)&v30->__r_.__value_.__l + 2);
    *(_OWORD *)&buf.st_dev = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    sub_1015A2E04(&v35, ".db");
    if ((v37 & 0x80u) == 0)
      v32 = (const std::string::value_type *)&v35;
    else
      v32 = (const std::string::value_type *)v35;
    if ((v37 & 0x80u) == 0)
      v33 = v37;
    else
      v33 = v36;
    v34 = std::string::append((std::string *)&buf, v32, v33);
    *a2 = *v34;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    if ((char)v37 < 0)
      operator delete(v35);
    if (SHIBYTE(buf.st_gid) < 0)
      operator delete(*(void **)&buf.st_dev);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
  }
  else
  {
    *a2 = v39;
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42) < 0)
    operator delete(__p[0]);
}

void sub_100634264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a15 < 0)
    operator delete(__p);
  if (a47 < 0)
    operator delete(a42);
  if (a28 < 0)
    operator delete(a23);
  if (a34 < 0)
    operator delete(a29);
  if (a40 < 0)
    operator delete(a35);
  _Unwind_Resume(exception_object);
}

void sub_10063434C(uint64_t a1, int a2)
{
  sub_1006361F0(*(sqlite3 **)(a1 + 8), (a1 + 96), *(unsigned __int8 *)(a1 + 56), a2);
}

uint64_t sub_100634364(uint64_t a1, char *a2, const char **a3, const std::string::value_type **a4, int a5)
{
  NSObject *v10;
  _DWORD v12[2];
  __int16 v13;
  const char *v14;
  __int16 v15;
  char *v16;
  __int16 v17;
  int v18;

  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v10 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 68289539;
    v12[1] = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2081;
    v16 = a2;
    v17 = 1026;
    v18 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"createTableIfNecessary\", \"table\":%{private, location:escape_only}s, \"specificToSerialNumber\":%{public}hhd}", (uint8_t *)v12, 0x22u);
  }
  return sub_1006382B4(a1, a2, a3, a4, a5);
}

char *sub_10063448C@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[119] < 0)
    return (char *)sub_100115CE4((_BYTE *)a2, *((void **)result + 12), *((_QWORD *)result + 13));
  *(_OWORD *)a2 = *((_OWORD *)result + 6);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 14);
  return result;
}

BOOL sub_1006344B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  char *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  int v11;
  NSObject *v12;
  _BOOL8 v13;
  NSObject *v14;
  NSObject *v15;
  void *__p[2];
  int64_t v18;
  void *__dst[2];
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  std::string v25;

  v4 = *(_QWORD *)(a1 + 16);
  v23 = v4;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v24 = 256;
  v5 = *(_QWORD *)(a2 + 16);
  v21 = v5;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  v22 = 256;
  if (*(char *)(a2 + 119) < 0)
  {
    sub_100115CE4(__dst, *(void **)(a2 + 96), *(_QWORD *)(a2 + 104));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(a2 + 96);
    v20 = *(_QWORD *)(a2 + 112);
  }
  std::operator+<char>(&v25, "ATTACH '", __dst);
  v6 = std::string::append(&v25, "' AS OTHER;");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v18 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (v18 >= 0)
    v8 = (char *)__p;
  else
    v8 = (char *)__p[0];
  v9 = sub_1000CDB4C(a1, v8);
  v10 = v9;
  if (v9)
  {
    v11 = sqlite3_step(v9);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v12 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
    {
      v25.__r_.__value_.__r.__words[0] = 68289282;
      LOWORD(v25.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&v25.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
      WORD1(v25.__r_.__value_.__r.__words[2]) = 1026;
      HIDWORD(v25.__r_.__value_.__r.__words[2]) = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"attachToDatabaseAsOther\", \"ret\":%{public}d}", (uint8_t *)&v25, 0x18u);
    }
    sub_1000536D0(*(sqlite3 **)(a1 + 8), v10);
    v13 = v11 == 101;
  }
  else
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v14 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_ERROR))
    {
      v25.__r_.__value_.__r.__words[0] = 68289026;
      LOWORD(v25.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&v25.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to create ATTACH statement\"}", (uint8_t *)&v25, 0x12u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v15 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      v25.__r_.__value_.__r.__words[0] = 68289026;
      LOWORD(v25.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&v25.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to create ATTACH statement", "{\"msg%{public}.0s\":\"Failed to create ATTACH statement\"}", (uint8_t *)&v25, 0x12u);
    }
    v13 = 0;
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v13;
}

void sub_10063480C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_10187E514((uint64_t)&a23);
  sub_10187E514((uint64_t)&a26);
  _Unwind_Resume(a1);
}

BOOL sub_10063488C(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  sqlite3_stmt *v4;
  sqlite3_stmt *v5;
  int v6;
  NSObject *v7;
  _BOOL8 v8;
  NSObject *v9;
  NSObject *v10;
  void *__p[2];
  char v13;
  uint64_t v14;
  __int16 v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;

  v2 = *(_QWORD *)(a1 + 16);
  v14 = v2;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v15 = 256;
  sub_1015A2E04(__p, "DETACH DATABASE 'OTHER';");
  if (v13 >= 0)
    v3 = (char *)__p;
  else
    v3 = (char *)__p[0];
  v4 = sub_1000CDB4C(a1, v3);
  v5 = v4;
  if (v4)
  {
    v6 = sqlite3_step(v4);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v7 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 1026;
      v21 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"detachFromOther\", \"ret\":%{public}d}", buf, 0x18u);
    }
    sub_1000536D0(*(sqlite3 **)(a1 + 8), v5);
    v8 = v6 == 101;
  }
  else
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v9 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to create DETACH statement\"}", buf, 0x12u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v10 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to create DETACH statement", "{\"msg%{public}.0s\":\"Failed to create DETACH statement\"}", buf, 0x12u);
    }
    v8 = 0;
  }
  if (v13 < 0)
    operator delete(__p[0]);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v8;
}

void sub_100634B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL sub_100634B78(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, char *a5, double a6)
{
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  const char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  const char *v24;
  const char *v25;
  _BOOL4 v26;
  const char *v27;
  _BOOL4 v28;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  const std::string::value_type *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  int v47;
  const std::string::value_type *v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  void **v54;
  std::string::size_type v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  void *v59;
  char v60;
  void *v61;
  NSObject *v62;
  const char *v63;
  NSObject *v64;
  std::string *v65;
  __int128 v66;
  int v67;
  const std::string::value_type *v68;
  std::string::size_type v69;
  std::string *v70;
  __int128 v71;
  std::string *v72;
  void *v73;
  char v74;
  std::string *v75;
  __int128 v76;
  int v77;
  const std::string::value_type *v78;
  std::string::size_type v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  __int128 v83;
  std::string *v84;
  std::string::size_type size;
  std::string *v86;
  __int128 v87;
  std::string *v88;
  void *v89;
  char v90;
  char *v91;
  sqlite3_stmt *v92;
  sqlite3_stmt *v93;
  int v94;
  int v95;
  BOOL v96;
  NSObject *v97;
  NSObject *v98;
  NSObject *v99;
  int v101;
  _BOOL8 v102;
  uint64_t v104;
  void *v106[2];
  unsigned __int8 v107;
  std::string v108;
  std::string v109;
  std::string v110;
  std::string v111;
  std::string v112;
  std::string v113;
  BOOL v114[8];
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  pthread_mutex_t *v118;
  __int16 v119;
  uint64_t v120;
  pthread_mutex_t *v121;
  __int16 v122;
  std::string v123;
  _QWORD v124[2];
  std::string v125;
  void *__p[4];
  _BYTE buf[28];
  __int16 v128;
  _BOOL4 v129;
  __int16 v130;
  _BOOL4 v131;

  v120 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v120 + 16))(v120);
  v122 = 256;
  v117 = *(_QWORD *)(a2 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v117 + 16))(v117);
  v119 = 256;
  v115 = a1;
  v116 = a2;
  v10 = sub_1006344B8(a1, a2);
  v114[0] = v10;
  if (!v10)
    goto LABEL_155;
  v11 = a4[1];
  v12 = *a3;
  if (*a4 == v11)
  {
    v13 = a3[1];
  }
  else
  {
    v13 = a3[1];
    if (v11 - *a4 != v13 - v12)
    {
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
      v14 = off_1022A0288;
      if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
      {
        v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[1] - *a4) >> 3);
        v16 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3);
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v15;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Invalid input parameters, number of columnList (%{public}zu) and tableNames (%{public}zu) differ.", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0280 != -1)
          dispatch_once(&qword_1022A0280, &stru_102149330);
        v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[1] - *a4) >> 3);
        v18 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3);
        LODWORD(__p[0]) = 134349312;
        *(void **)((char *)__p + 4) = (void *)v17;
        WORD2(__p[1]) = 2050;
        *(void **)((char *)&__p[1] + 6) = (void *)v18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_1022A0288, 17, "Invalid input parameters, number of columnList (%{public}zu) and tableNames (%{public}zu) differ.", __p, 22);
        v20 = (char *)v19;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLSqliteDatabase::copyTablesFromOtherDatabase(CLSqliteDatabase &, const std::vector<std::string> &, const std::vector<std::string> &, const char *, CFAbsoluteTime)", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
      goto LABEL_155;
    }
  }
  if (v12 == v13)
  {
LABEL_155:
    sub_10028E010((uint64_t)v114);
    v102 = 1;
LABEL_156:
    if ((_BYTE)v119)
      pthread_mutex_unlock(v118);
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v117 + 24))(v117);
    goto LABEL_159;
  }
  v104 = v13;
  v21 = 0;
  v22 = 0;
  LOBYTE(v23) = 1;
  do
  {
    v24 = (const char *)(v12 + v21);
    v25 = (const char *)(v12 + v21);
    if (*(char *)(v12 + v21 + 23) < 0)
      v25 = *(const char **)v24;
    v26 = sub_10063A57C(a1, v25);
    v27 = (const char *)(v12 + v21);
    if (v24[23] < 0)
      v27 = *(const char **)v24;
    v28 = sub_10063A57C(a2, v27);
    if (v26 && v28)
    {
      memset(__p, 0, 24);
      if (a5)
      {
        if (*a4 == a4[1])
        {
          std::operator+<char>(&v111, "INSERT INTO ", v12 + v21);
          v75 = std::string::append(&v111, " SELECT * FROM OTHER.");
          v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
          v125.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v76;
          v75->__r_.__value_.__l.__size_ = 0;
          v75->__r_.__value_.__r.__words[2] = 0;
          v75->__r_.__value_.__r.__words[0] = 0;
          v77 = v24[23];
          if (v77 >= 0)
            v78 = (const std::string::value_type *)(v12 + v21);
          else
            v78 = *(const std::string::value_type **)(v12 + v21);
          if (v77 >= 0)
            v79 = *((unsigned __int8 *)v24 + 23);
          else
            v79 = *(_QWORD *)(v12 + v21 + 8);
          v80 = std::string::append(&v125, v78, v79);
          v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
          v112.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v81;
          v80->__r_.__value_.__l.__size_ = 0;
          v80->__r_.__value_.__r.__words[2] = 0;
          v80->__r_.__value_.__r.__words[0] = 0;
          v82 = std::string::append(&v112, " WHERE ");
          v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
          v113.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v83;
          v82->__r_.__value_.__l.__size_ = 0;
          v82->__r_.__value_.__r.__words[2] = 0;
          v82->__r_.__value_.__r.__words[0] = 0;
          sub_1015A2E04(&v110, a5);
          if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v84 = &v110;
          else
            v84 = (std::string *)v110.__r_.__value_.__r.__words[0];
          if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v110.__r_.__value_.__r.__words[2]);
          else
            size = v110.__r_.__value_.__l.__size_;
          v86 = std::string::append(&v113, (const std::string::value_type *)v84, size);
          v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
          *(_QWORD *)&buf[16] = *((_QWORD *)&v86->__r_.__value_.__l + 2);
          *(_OWORD *)buf = v87;
          v86->__r_.__value_.__l.__size_ = 0;
          v86->__r_.__value_.__r.__words[2] = 0;
          v86->__r_.__value_.__r.__words[0] = 0;
          v88 = std::string::append((std::string *)buf, " > ?;");
          v89 = (void *)v88->__r_.__value_.__r.__words[0];
          v123.__r_.__value_.__r.__words[0] = v88->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v123.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v88->__r_.__value_.__r.__words[1] + 7);
          v90 = HIBYTE(v88->__r_.__value_.__r.__words[2]);
          v88->__r_.__value_.__l.__size_ = 0;
          v88->__r_.__value_.__r.__words[2] = 0;
          v88->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          __p[0] = v89;
          __p[1] = v123.__r_.__value_.__l.__data_;
          *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v123.__r_.__value_.__r.__words + 7);
          HIBYTE(__p[2]) = v90;
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v110.__r_.__value_.__l.__data_);
          if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v113.__r_.__value_.__l.__data_);
          if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v112.__r_.__value_.__l.__data_);
          if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v125.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_124;
          v61 = (void *)v111.__r_.__value_.__r.__words[0];
        }
        else
        {
          std::operator+<char>(&v108, "INSERT INTO ", v12 + v21);
          v29 = std::string::append(&v108, " (");
          v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
          v109.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v30;
          v29->__r_.__value_.__l.__size_ = 0;
          v29->__r_.__value_.__r.__words[2] = 0;
          v29->__r_.__value_.__r.__words[0] = 0;
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[1] - *a4) >> 3) <= v22)
            sub_1002EAEB0();
          v31 = *a4 + v21;
          v32 = *(char *)(v31 + 23);
          if (v32 >= 0)
            v33 = (const std::string::value_type *)(*a4 + v21);
          else
            v33 = *(const std::string::value_type **)v31;
          if (v32 >= 0)
            v34 = *(unsigned __int8 *)(v31 + 23);
          else
            v34 = *(_QWORD *)(v31 + 8);
          v35 = std::string::append(&v109, v33, v34);
          v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
          v123.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v36;
          v35->__r_.__value_.__l.__size_ = 0;
          v35->__r_.__value_.__r.__words[2] = 0;
          v35->__r_.__value_.__r.__words[0] = 0;
          v37 = std::string::append(&v123, ") SELECT ");
          v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
          v110.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v38;
          v37->__r_.__value_.__l.__size_ = 0;
          v37->__r_.__value_.__r.__words[2] = 0;
          v37->__r_.__value_.__r.__words[0] = 0;
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[1] - *a4) >> 3) <= v22)
            sub_1002EAEB0();
          v39 = *a4 + v21;
          v40 = *(char *)(v39 + 23);
          if (v40 >= 0)
            v41 = (const std::string::value_type *)(*a4 + v21);
          else
            v41 = *(const std::string::value_type **)v39;
          if (v40 >= 0)
            v42 = *(unsigned __int8 *)(v39 + 23);
          else
            v42 = *(_QWORD *)(v39 + 8);
          v43 = std::string::append(&v110, v41, v42);
          v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
          v111.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v44;
          v43->__r_.__value_.__l.__size_ = 0;
          v43->__r_.__value_.__r.__words[2] = 0;
          v43->__r_.__value_.__r.__words[0] = 0;
          v45 = std::string::append(&v111, " FROM OTHER.");
          v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
          v125.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v46;
          v45->__r_.__value_.__l.__size_ = 0;
          v45->__r_.__value_.__r.__words[2] = 0;
          v45->__r_.__value_.__r.__words[0] = 0;
          v47 = v24[23];
          if (v47 >= 0)
            v48 = (const std::string::value_type *)(v12 + v21);
          else
            v48 = *(const std::string::value_type **)(v12 + v21);
          if (v47 >= 0)
            v49 = *((unsigned __int8 *)v24 + 23);
          else
            v49 = *(_QWORD *)(v12 + v21 + 8);
          v50 = std::string::append(&v125, v48, v49);
          v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
          v112.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v51;
          v50->__r_.__value_.__l.__size_ = 0;
          v50->__r_.__value_.__r.__words[2] = 0;
          v50->__r_.__value_.__r.__words[0] = 0;
          v52 = std::string::append(&v112, " WHERE ");
          v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
          v113.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v53;
          v52->__r_.__value_.__l.__size_ = 0;
          v52->__r_.__value_.__r.__words[2] = 0;
          v52->__r_.__value_.__r.__words[0] = 0;
          sub_1015A2E04(v106, a5);
          if ((v107 & 0x80u) == 0)
            v54 = v106;
          else
            v54 = (void **)v106[0];
          if ((v107 & 0x80u) == 0)
            v55 = v107;
          else
            v55 = (std::string::size_type)v106[1];
          v56 = std::string::append(&v113, (const std::string::value_type *)v54, v55);
          v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
          *(_QWORD *)&buf[16] = *((_QWORD *)&v56->__r_.__value_.__l + 2);
          *(_OWORD *)buf = v57;
          v56->__r_.__value_.__l.__size_ = 0;
          v56->__r_.__value_.__r.__words[2] = 0;
          v56->__r_.__value_.__r.__words[0] = 0;
          v58 = std::string::append((std::string *)buf, " > ?;");
          v59 = (void *)v58->__r_.__value_.__r.__words[0];
          v124[0] = v58->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v124 + 7) = *(std::string::size_type *)((char *)&v58->__r_.__value_.__r.__words[1] + 7);
          v60 = HIBYTE(v58->__r_.__value_.__r.__words[2]);
          v58->__r_.__value_.__l.__size_ = 0;
          v58->__r_.__value_.__r.__words[2] = 0;
          v58->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          __p[0] = v59;
          __p[1] = (void *)v124[0];
          *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v124 + 7);
          HIBYTE(__p[2]) = v60;
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          if ((char)v107 < 0)
            operator delete(v106[0]);
          if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v113.__r_.__value_.__l.__data_);
          if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v112.__r_.__value_.__l.__data_);
          if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v125.__r_.__value_.__l.__data_);
          if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v111.__r_.__value_.__l.__data_);
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v110.__r_.__value_.__l.__data_);
          if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v123.__r_.__value_.__l.__data_);
          if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v109.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v108.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_124;
          v61 = (void *)v108.__r_.__value_.__r.__words[0];
        }
      }
      else
      {
        std::operator+<char>(&v112, "INSERT INTO ", v12 + v21);
        v65 = std::string::append(&v112, " SELECT * FROM OTHER.");
        v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
        v113.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v66;
        v65->__r_.__value_.__l.__size_ = 0;
        v65->__r_.__value_.__r.__words[2] = 0;
        v65->__r_.__value_.__r.__words[0] = 0;
        v67 = v24[23];
        if (v67 >= 0)
          v68 = (const std::string::value_type *)(v12 + v21);
        else
          v68 = *(const std::string::value_type **)(v12 + v21);
        if (v67 >= 0)
          v69 = *((unsigned __int8 *)v24 + 23);
        else
          v69 = *(_QWORD *)(v12 + v21 + 8);
        v70 = std::string::append(&v113, v68, v69);
        v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
        *(_QWORD *)&buf[16] = *((_QWORD *)&v70->__r_.__value_.__l + 2);
        *(_OWORD *)buf = v71;
        v70->__r_.__value_.__l.__size_ = 0;
        v70->__r_.__value_.__r.__words[2] = 0;
        v70->__r_.__value_.__r.__words[0] = 0;
        v72 = std::string::append((std::string *)buf, ";");
        v73 = (void *)v72->__r_.__value_.__r.__words[0];
        v125.__r_.__value_.__r.__words[0] = v72->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v125.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v72->__r_.__value_.__r.__words[1] + 7);
        v74 = HIBYTE(v72->__r_.__value_.__r.__words[2]);
        v72->__r_.__value_.__l.__size_ = 0;
        v72->__r_.__value_.__r.__words[2] = 0;
        v72->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        __p[0] = v73;
        __p[1] = v125.__r_.__value_.__l.__data_;
        *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v125.__r_.__value_.__r.__words + 7);
        HIBYTE(__p[2]) = v74;
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v113.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v112.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_124;
        v61 = (void *)v112.__r_.__value_.__r.__words[0];
      }
      operator delete(v61);
LABEL_124:
      if (SHIBYTE(__p[2]) >= 0)
        v91 = (char *)__p;
      else
        v91 = (char *)__p[0];
      v92 = sub_1000CDB4C(a1, v91);
      v93 = v92;
      if (v92)
      {
        if (a5)
          sub_1000890C4(v92, 1, a6);
        v94 = sqlite3_step(v93);
        v95 = v94;
        if ((_BYTE)v23)
          v96 = v94 == 101;
        else
          v96 = 0;
        v23 = v96;
        if (qword_1022A0280 != -1)
          dispatch_once(&qword_1022A0280, &stru_102149330);
        v97 = off_1022A0288;
        if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
        {
          if (v24[23] < 0)
            v24 = *(const char **)v24;
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v24;
          v128 = 1026;
          v129 = v95;
          _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"copyTablesFromOtherDatabase, insert\", \"tableName\":%{public, location:escape_only}s, \"ret\":%{public}d}", buf, 0x22u);
        }
        sub_1000536D0(*(sqlite3 **)(a1 + 8), v93);
      }
      else
      {
        if (qword_1022A0280 != -1)
          dispatch_once(&qword_1022A0280, &stru_102149330);
        v98 = off_1022A0288;
        if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to create INSERT statement\"}", buf, 0x12u);
          if (qword_1022A0280 != -1)
            dispatch_once(&qword_1022A0280, &stru_102149330);
        }
        v99 = off_1022A0288;
        if (os_signpost_enabled((os_log_t)off_1022A0288))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v99, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to create INSERT statement", "{\"msg%{public}.0s\":\"Failed to create INSERT statement\"}", buf, 0x12u);
        }
        v23 = 0;
      }
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      goto LABEL_153;
    }
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v62 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_ERROR))
    {
      v63 = (const char *)(v12 + v21);
      if (v24[23] < 0)
        v63 = *(const char **)v24;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v63;
      v128 = 1026;
      v129 = v26;
      v130 = 1026;
      v131 = v28;
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"table is missing\", \"TableName\":%{public, location:escape_only}s, \"ExistsInThisDB\":%{public}hhd, \"ExistsInOtherDB\":%{public}hhd}", buf, 0x28u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v64 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      if (v24[23] < 0)
        v24 = *(const char **)v24;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v24;
      v128 = 1026;
      v129 = v26;
      v130 = 1026;
      v131 = v28;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v64, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "table is missing", "{\"msg%{public}.0s\":\"table is missing\", \"TableName\":%{public, location:escape_only}s, \"ExistsInThisDB\":%{public}hhd, \"ExistsInOtherDB\":%{public}hhd}", buf, 0x28u);
      v23 = 0;
    }
    else
    {
      v23 = 0;
    }
LABEL_153:
    ++v22;
    v21 += 24;
  }
  while (v12 + v21 != v104);
  v101 = HIBYTE(v119);
  v102 = v23 != 0;
  sub_10028E010((uint64_t)v114);
  if (v101)
    goto LABEL_156;
LABEL_159:
  if (HIBYTE(v122))
  {
    if ((_BYTE)v122)
      pthread_mutex_unlock(v121);
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v120 + 24))(v120);
  }
  return v102;
}

void sub_1006358F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,char a54)
{
  sub_10028E010((uint64_t)&a48);
  sub_10187E514((uint64_t)&a51);
  sub_10187E514((uint64_t)&a54);
  _Unwind_Resume(a1);
}

void sub_100635B40(uint64_t a1, uint64_t a2, int a3, sqlite3_stmt *a4)
{
  NSObject *v6;
  int v7;
  const char *v8;
  NSObject *v9;
  int v10;
  const char *v11;
  NSObject *v12;
  int v13;
  const char *v14;
  int v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int *v27;
  __int16 v28;
  const char *v29;

  v15 = a3;
  if (a3 <= 0x1Au && ((1 << a3) & 0x4004C00) != 0)
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v6 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      v7 = *__error();
      v8 = a4 ? sqlite3_sql(a4) : 0;
      *(_DWORD *)buf = 68290307;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = a2;
      v22 = 1026;
      v23 = v7;
      v24 = 1040;
      v25 = 4;
      v26 = 2098;
      v27 = &v15;
      v28 = 2081;
      v29 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"displaySqlResult\", \"function\":%{public, location:escape_only}s, \"errno\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x3Cu);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v12 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      v13 = *__error();
      if (a4)
        v14 = sqlite3_sql(a4);
      else
        v14 = 0;
      *(_DWORD *)buf = 68290307;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = a2;
      v22 = 1026;
      v23 = v13;
      v24 = 1040;
      v25 = 4;
      v26 = 2098;
      v27 = &v15;
      v28 = 2081;
      v29 = v14;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "displaySqlResult", "{\"msg%{public}.0s\":\"displaySqlResult\", \"function\":%{public, location:escape_only}s, \"errno\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x3Cu);
    }
  }
  else
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v9 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *__error();
      if (a4)
        v11 = sqlite3_sql(a4);
      else
        v11 = 0;
      *(_DWORD *)buf = 68290307;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = a2;
      v22 = 1026;
      v23 = v10;
      v24 = 1040;
      v25 = 4;
      v26 = 2098;
      v27 = &v15;
      v28 = 2081;
      v29 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning displaySqlResult\", \"function\":%{public, location:escape_only}s, \"errno\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x3Cu);
    }
  }
}

BOOL sub_100635E80(uint64_t a1, char *a2)
{
  uint64_t v2;
  int v3;
  void *v4;
  _QWORD *v5;
  char *v6;
  void *v7;
  _QWORD *v8;
  char *v9;
  _QWORD v13[2];
  unsigned __int8 v14;

  sub_100635F70(a1, "table", a2, v13);
  v2 = v14;
  v3 = (char)v14;
  v4 = (void *)v13[0];
  if ((v14 & 0x80u) == 0)
  {
    v5 = v13;
  }
  else
  {
    v2 = v13[1];
    v5 = (_QWORD *)v13[0];
  }
  v6 = (char *)v5 + v2;
  if (v2 >= 13)
  {
    v7 = v5;
    do
    {
      v8 = memchr(v7, 65, v2 - 12);
      if (!v8)
        break;
      v9 = (char *)v8;
      if (*v8 == 0x52434E494F545541 && *(_QWORD *)((char *)v8 + 5) == 0x544E454D4552434ELL)
        goto LABEL_13;
      v7 = (char *)v8 + 1;
      v2 = v6 - (v9 + 1);
    }
    while (v2 > 12);
  }
  v9 = v6;
LABEL_13:
  if (v3 < 0)
    operator delete(v4);
  return v9 != v6 && v9 - (char *)v5 != -1;
}

uint64_t sub_100635F70@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  sqlite3_stmt *v16;
  sqlite3_stmt *v17;
  const unsigned __int8 *v18;
  char *v19;
  uint64_t v20;
  void *__p[2];
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  _QWORD v26[10];
  char v27;
  _QWORD v28[21];
  __int16 v29;

  v8 = *(_QWORD *)(a1 + 16);
  v28[19] = v8;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  v29 = 256;
  sub_100263E50((uint64_t)v24);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v9 = sub_100263F7C(&v25, (uint64_t)"SELECT sql FROM ", 16);
  v10 = sub_100263F7C(v9, (uint64_t)"sqlite_master", 13);
  v11 = sub_100263F7C(v10, (uint64_t)" WHERE ", 7);
  v12 = sub_100263F7C(v11, (uint64_t)"Type", 4);
  v13 = sub_100263F7C(v12, (uint64_t)"=? AND ", 7);
  v14 = sub_100263F7C(v13, (uint64_t)"Name", 4);
  sub_100263F7C(v14, (uint64_t)"=?", 2);
  std::stringbuf::str(__p, v26);
  if (v23 >= 0)
    v15 = (char *)__p;
  else
    v15 = (char *)__p[0];
  v16 = sub_1000CDB4C(a1, v15);
  v17 = v16;
  if (SHIBYTE(v23) < 0)
  {
    operator delete(__p[0]);
    if (!v17)
      goto LABEL_16;
  }
  else if (!v16)
  {
    goto LABEL_16;
  }
  if (sub_1000C9E20(v17, 1, a2) && sub_1000C9E20(v17, 2, a3) && sqlite3_step(v17) == 100)
  {
    v18 = sqlite3_column_text(v17, 0);
    if (v18)
      v19 = (char *)v18;
    else
      v19 = "";
    sub_1015A2E04(__p, v19);
    *(_OWORD *)a4 = *(_OWORD *)__p;
    a4[2] = v23;
  }
  sub_1000536D0(*(sqlite3 **)(a1 + 8), v17);
LABEL_16:
  *(_QWORD *)((char *)v24
  v25 = v20;
  if (v27 < 0)
    operator delete((void *)v26[8]);
  std::streambuf::~streambuf(v26);
  std::ios::~ios(v28);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
}

void sub_100636194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  sub_1018B38B4((uint64_t)&a16);
  sub_10187E514(v16 - 88);
  _Unwind_Resume(a1);
}

void sub_1006361F0(sqlite3 *a1, NSObject *a2, int a3, int a4)
{
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  NSObject v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  const char *isa;
  NSObject *v14;
  NSObject *v15;
  int v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  _QWORD v25[3];

  v17 = a4;
  if (a4 == 26 || a4 == 11)
  {
    if (!a3)
    {
      if (qword_1022A0280 != -1)
        goto LABEL_44;
      while (1)
      {
        v10 = off_1022A0288;
        if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
        {
          v11 = SHIBYTE(a2[2].isa) >= 0 ? (const char *)a2 : (const char *)a2->isa;
          *(_DWORD *)buf = 68289794;
          v19 = 0;
          v20 = 2082;
          v21 = "";
          v22 = 2082;
          v23 = v11;
          v24 = 1040;
          LODWORD(v25[0]) = 4;
          WORD2(v25[0]) = 2098;
          *(_QWORD *)((char *)v25 + 6) = &v17;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"database error; deleting and exiting\", \"path\":%{public, location:escape_only}s, \""
            "rc\":%{public, location:SqliteResult}.*P}",
            buf,
            0x2Cu);
          if (qword_1022A0280 != -1)
            dispatch_once(&qword_1022A0280, &stru_102149330);
        }
        v12 = off_1022A0288;
        if (os_signpost_enabled((os_log_t)off_1022A0288))
        {
          if (SHIBYTE(a2[2].isa) >= 0)
            isa = (const char *)a2;
          else
            isa = (const char *)a2->isa;
          *(_DWORD *)buf = 68289794;
          v19 = 0;
          v20 = 2082;
          v21 = "";
          v22 = 2082;
          v23 = isa;
          v24 = 1040;
          LODWORD(v25[0]) = 4;
          WORD2(v25[0]) = 2098;
          *(_QWORD *)((char *)v25 + 6) = &v17;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "database error; deleting and exiting",
            "{\"msg%{public}.0s\":\"database error; deleting and exiting\", \"path\":%{public, location:escape_only}s, \""
            "rc\":%{public, location:SqliteResult}.*P}",
            buf,
            0x2Cu);
        }
        sub_100636760(a1, (uint64_t)a2);
        if (qword_1022A0280 != -1)
          dispatch_once(&qword_1022A0280, &stru_102149330);
        v14 = off_1022A0288;
        if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 68289539;
          v19 = 0;
          v20 = 2082;
          v21 = "";
          v22 = 2082;
          v23 = "assert";
          v24 = 2081;
          v25[0] = "0";
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to resolve corrupted database\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
          if (qword_1022A0280 != -1)
            dispatch_once(&qword_1022A0280, &stru_102149330);
        }
        v15 = off_1022A0288;
        if (os_signpost_enabled((os_log_t)off_1022A0288))
        {
          *(_DWORD *)buf = 68289539;
          v19 = 0;
          v20 = 2082;
          v21 = "";
          v22 = 2082;
          v23 = "assert";
          v24 = 2081;
          v25[0] = "0";
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to resolve corrupted database", "{\"msg%{public}.0s\":\"Killing locationd to resolve corrupted database\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
          if (qword_1022A0280 != -1)
            dispatch_once(&qword_1022A0280, &stru_102149330);
        }
        a2 = off_1022A0288;
        if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 68289539;
          v19 = 0;
          v20 = 2082;
          v21 = "";
          v22 = 2082;
          v23 = "assert";
          v24 = 2081;
          v25[0] = "0";
          _os_log_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to resolve corrupted database\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        }
        abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteDatabase.mm", 603, "handleSqlError");
LABEL_44:
        dispatch_once(&qword_1022A0280, &stru_102149330);
      }
    }
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v6 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      v7 = SHIBYTE(a2[2].isa) >= 0 ? (const char *)a2 : (const char *)a2->isa;
      *(_DWORD *)buf = 68289794;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      v22 = 2082;
      v23 = v7;
      v24 = 1040;
      LODWORD(v25[0]) = 4;
      WORD2(v25[0]) = 2098;
      *(_QWORD *)((char *)v25 + 6) = &v17;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"handleSqlError on read-only db\", \"path\":%{public, location:escape_only}s, \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x2Cu);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v8 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      if (SHIBYTE(a2[2].isa) >= 0)
        v9.isa = (Class)a2;
      else
        v9.isa = a2->isa;
      *(_DWORD *)buf = 68289794;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      v22 = 2082;
      v23 = (const char *)v9.isa;
      v24 = 1040;
      LODWORD(v25[0]) = 4;
      WORD2(v25[0]) = 2098;
      *(_QWORD *)((char *)v25 + 6) = &v17;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "handleSqlError on read-only db", "{\"msg%{public}.0s\":\"handleSqlError on read-only db\", \"path\":%{public, location:escape_only}s, \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x2Cu);
    }
  }
}

void sub_100636760(sqlite3 *a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  void **v7;
  NSObject *v8;
  void **v9;
  std::error_code *v10;
  const std::__fs::filesystem::path *v11;
  NSObject *v12;
  void **v13;
  int v14;
  int *v15;
  char *v16;
  NSObject *v17;
  void **v18;
  int v19;
  int *v20;
  char *v21;
  size_t v22;
  void **v23;
  std::error_code *v24;
  const void *v25;
  const std::__fs::filesystem::path *v26;
  NSObject *v27;
  void **v28;
  int v29;
  int *v30;
  char *v31;
  NSObject *v32;
  void **v33;
  int v34;
  int *v35;
  char *v36;
  size_t v37;
  void **v38;
  std::error_code *v39;
  const void *v40;
  const std::__fs::filesystem::path *v41;
  NSObject *v42;
  void **v43;
  int v44;
  int *v45;
  char *v46;
  NSObject *v47;
  void **v48;
  int v49;
  int *v50;
  char *v51;
  size_t v52;
  void **v53;
  std::error_code *v54;
  const void *v55;
  const std::__fs::filesystem::path *v56;
  NSObject *v57;
  void **v58;
  int v59;
  int *v60;
  char *v61;
  NSObject *v62;
  void **v63;
  int v64;
  int *v65;
  char *v66;
  void *__p[2];
  char v68;
  void *v69[2];
  char v70;
  void *v71[2];
  char v72;
  uint8_t buf[4];
  int v74;
  __int16 v75;
  const char *v76;
  __int16 v77;
  void **v78;
  __int16 v79;
  int v80;
  __int16 v81;
  char *v82;

  if (a1 && &_CPSqliteDatabaseDelete)
  {
    if ((CPSqliteDatabaseDelete(a1) & 1) != 0)
      return;
  }
  else if (!a1)
  {
    goto LABEL_13;
  }
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v4 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 68289026;
    v74 = 0;
    v75 = 2082;
    v76 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not delete the database with CPSqliteDatabaseDelete()\"}", buf, 0x12u);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
  }
  v5 = off_1022A0288;
  if (!os_signpost_enabled((os_log_t)off_1022A0288))
    goto LABEL_15;
  *(_DWORD *)buf = 68289026;
  v74 = 0;
  v75 = 2082;
  v76 = "";
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not delete the database with CPSqliteDatabaseDelete()", "{\"msg%{public}.0s\":\"Could not delete the database with CPSqliteDatabaseDelete()\"}", buf, 0x12u);
LABEL_13:
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
LABEL_15:
  v6 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
  {
    v7 = *(char *)(a2 + 23) >= 0 ? (void **)a2 : *(void ***)a2;
    *(_DWORD *)buf = 68289282;
    v74 = 0;
    v75 = 2082;
    v76 = "";
    v77 = 2082;
    v78 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Falling back to file deletion\", \"path\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
  }
  v8 = off_1022A0288;
  if (os_signpost_enabled((os_log_t)off_1022A0288))
  {
    if (*(char *)(a2 + 23) >= 0)
      v9 = (void **)a2;
    else
      v9 = *(void ***)a2;
    *(_DWORD *)buf = 68289282;
    v74 = 0;
    v75 = 2082;
    v76 = "";
    v77 = 2082;
    v78 = v9;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Falling back to file deletion", "{\"msg%{public}.0s\":\"Falling back to file deletion\", \"path\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  sqlite3_close(a1);
  if (*(char *)(a2 + 23) >= 0)
    v11 = (const std::__fs::filesystem::path *)a2;
  else
    v11 = *(const std::__fs::filesystem::path **)a2;
  if (remove(v11, v10))
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v12 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      v13 = *(char *)(a2 + 23) >= 0 ? (void **)a2 : *(void ***)a2;
      v14 = *__error();
      v15 = __error();
      v16 = strerror(*v15);
      *(_DWORD *)buf = 68289794;
      v74 = 0;
      v75 = 2082;
      v76 = "";
      v77 = 2082;
      v78 = v13;
      v79 = 1026;
      v80 = v14;
      v81 = 2082;
      v82 = v16;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"could not remove file\", \"path\":%{public, location:escape_only}s, \"errno\":%{public}d, \"error\":%{public, location:escape_only}s}", buf, 0x2Cu);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v17 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      if (*(char *)(a2 + 23) >= 0)
        v18 = (void **)a2;
      else
        v18 = *(void ***)a2;
      v19 = *__error();
      v20 = __error();
      v21 = strerror(*v20);
      *(_DWORD *)buf = 68289794;
      v74 = 0;
      v75 = 2082;
      v76 = "";
      v77 = 2082;
      v78 = v18;
      v79 = 1026;
      v80 = v19;
      v81 = 2082;
      v82 = v21;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "could not remove file", "{\"msg%{public}.0s\":\"could not remove file\", \"path\":%{public, location:escape_only}s, \"errno\":%{public}d, \"error\":%{public, location:escape_only}s}", buf, 0x2Cu);
    }
  }
  if (*(char *)(a2 + 23) >= 0)
    v22 = *(unsigned __int8 *)(a2 + 23);
  else
    v22 = *(_QWORD *)(a2 + 8);
  v23 = v71;
  sub_100259584((uint64_t)v71, v22 + 8);
  if (v72 < 0)
    v23 = (void **)v71[0];
  if (v22)
  {
    if (*(char *)(a2 + 23) >= 0)
      v25 = (const void *)a2;
    else
      v25 = *(const void **)a2;
    memmove(v23, v25, v22);
  }
  strcpy((char *)v23 + v22, "-journal");
  if (v72 >= 0)
    v26 = (const std::__fs::filesystem::path *)v71;
  else
    v26 = (const std::__fs::filesystem::path *)v71[0];
  if (remove(v26, v24))
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v27 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      v28 = v72 >= 0 ? v71 : (void **)v71[0];
      v29 = *__error();
      v30 = __error();
      v31 = strerror(*v30);
      *(_DWORD *)buf = 68289794;
      v74 = 0;
      v75 = 2082;
      v76 = "";
      v77 = 2082;
      v78 = v28;
      v79 = 1026;
      v80 = v29;
      v81 = 2082;
      v82 = v31;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"could not remove file\", \"path\":%{public, location:escape_only}s, \"errno\":%{public}d, \"error\":%{public, location:escape_only}s}", buf, 0x2Cu);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v32 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      if (v72 >= 0)
        v33 = v71;
      else
        v33 = (void **)v71[0];
      v34 = *__error();
      v35 = __error();
      v36 = strerror(*v35);
      *(_DWORD *)buf = 68289794;
      v74 = 0;
      v75 = 2082;
      v76 = "";
      v77 = 2082;
      v78 = v33;
      v79 = 1026;
      v80 = v34;
      v81 = 2082;
      v82 = v36;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v32, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "could not remove file", "{\"msg%{public}.0s\":\"could not remove file\", \"path\":%{public, location:escape_only}s, \"errno\":%{public}d, \"error\":%{public, location:escape_only}s}", buf, 0x2Cu);
    }
  }
  if (*(char *)(a2 + 23) >= 0)
    v37 = *(unsigned __int8 *)(a2 + 23);
  else
    v37 = *(_QWORD *)(a2 + 8);
  v38 = v69;
  sub_100259584((uint64_t)v69, v37 + 4);
  if (v70 < 0)
    v38 = (void **)v69[0];
  if (v37)
  {
    if (*(char *)(a2 + 23) >= 0)
      v40 = (const void *)a2;
    else
      v40 = *(const void **)a2;
    memmove(v38, v40, v37);
  }
  strcpy((char *)v38 + v37, "-wal");
  if (v70 >= 0)
    v41 = (const std::__fs::filesystem::path *)v69;
  else
    v41 = (const std::__fs::filesystem::path *)v69[0];
  if (remove(v41, v39))
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v42 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      v43 = v70 >= 0 ? v69 : (void **)v69[0];
      v44 = *__error();
      v45 = __error();
      v46 = strerror(*v45);
      *(_DWORD *)buf = 68289794;
      v74 = 0;
      v75 = 2082;
      v76 = "";
      v77 = 2082;
      v78 = v43;
      v79 = 1026;
      v80 = v44;
      v81 = 2082;
      v82 = v46;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"could not remove file\", \"path\":%{public, location:escape_only}s, \"errno\":%{public}d, \"error\":%{public, location:escape_only}s}", buf, 0x2Cu);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v47 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      if (v70 >= 0)
        v48 = v69;
      else
        v48 = (void **)v69[0];
      v49 = *__error();
      v50 = __error();
      v51 = strerror(*v50);
      *(_DWORD *)buf = 68289794;
      v74 = 0;
      v75 = 2082;
      v76 = "";
      v77 = 2082;
      v78 = v48;
      v79 = 1026;
      v80 = v49;
      v81 = 2082;
      v82 = v51;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v47, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "could not remove file", "{\"msg%{public}.0s\":\"could not remove file\", \"path\":%{public, location:escape_only}s, \"errno\":%{public}d, \"error\":%{public, location:escape_only}s}", buf, 0x2Cu);
    }
  }
  if (*(char *)(a2 + 23) >= 0)
    v52 = *(unsigned __int8 *)(a2 + 23);
  else
    v52 = *(_QWORD *)(a2 + 8);
  v53 = __p;
  sub_100259584((uint64_t)__p, v52 + 4);
  if (v68 < 0)
    v53 = (void **)__p[0];
  if (v52)
  {
    if (*(char *)(a2 + 23) >= 0)
      v55 = (const void *)a2;
    else
      v55 = *(const void **)a2;
    memmove(v53, v55, v52);
  }
  strcpy((char *)v53 + v52, "-shm");
  if (v68 >= 0)
    v56 = (const std::__fs::filesystem::path *)__p;
  else
    v56 = (const std::__fs::filesystem::path *)__p[0];
  if (remove(v56, v54))
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v57 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      v58 = v68 >= 0 ? __p : (void **)__p[0];
      v59 = *__error();
      v60 = __error();
      v61 = strerror(*v60);
      *(_DWORD *)buf = 68289794;
      v74 = 0;
      v75 = 2082;
      v76 = "";
      v77 = 2082;
      v78 = v58;
      v79 = 1026;
      v80 = v59;
      v81 = 2082;
      v82 = v61;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"could not remove file\", \"path\":%{public, location:escape_only}s, \"errno\":%{public}d, \"error\":%{public, location:escape_only}s}", buf, 0x2Cu);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v62 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      if (v68 >= 0)
        v63 = __p;
      else
        v63 = (void **)__p[0];
      v64 = *__error();
      v65 = __error();
      v66 = strerror(*v65);
      *(_DWORD *)buf = 68289794;
      v74 = 0;
      v75 = 2082;
      v76 = "";
      v77 = 2082;
      v78 = v63;
      v79 = 1026;
      v80 = v64;
      v81 = 2082;
      v82 = v66;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v62, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "could not remove file", "{\"msg%{public}.0s\":\"could not remove file\", \"path\":%{public, location:escape_only}s, \"errno\":%{public}d, \"error\":%{public, location:escape_only}s}", buf, 0x2Cu);
    }
  }
  if (v68 < 0)
    operator delete(__p[0]);
  if (v70 < 0)
    operator delete(v69[0]);
  if (v72 < 0)
    operator delete(v71[0]);
}

void sub_100637280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

sqlite3 *sub_1006372E8(uint64_t a1)
{
  sqlite3 *result;

  result = *(sqlite3 **)(a1 + 8);
  if (result)
  {
    result = (sqlite3 *)sqlite3_extended_errcode(result);
    if ((_DWORD)result)
    {
      if ((int)result > 538)
      {
        if ((int)result > 2569)
        {
          if ((int)result <= 5129)
          {
            if ((int)result <= 3593)
            {
              if ((int)result <= 2825)
              {
                if ((_DWORD)result == 2570)
                  sub_100629A24();
                if ((_DWORD)result == 2579)
                  sub_100630244();
              }
              else
              {
                switch((_DWORD)result)
                {
                  case 0xB0A:
                    sub_100629C44();
                  case 0xC0A:
                    sub_100629E64();
                  case 0xD0A:
                    sub_10062A084();
                }
              }
            }
            else if ((int)result > 4361)
            {
              switch((_DWORD)result)
              {
                case 0x110A:
                  sub_10062A904();
                case 0x120A:
                  sub_10062AB24();
                case 0x130A:
                  sub_10062AD44();
              }
            }
            else
            {
              switch((_DWORD)result)
              {
                case 0xE0A:
                  sub_10062A2A4();
                case 0xF0A:
                  sub_10062A4C4();
                case 0x100A:
                  sub_10062A6E4();
              }
            }
          }
          else if ((int)result > 6665)
          {
            if ((int)result > 7433)
            {
              switch((_DWORD)result)
              {
                case 0x1D0A:
                  sub_10062C284();
                case 0x1E0A:
                  sub_10062C4A4();
                case 0x1F0A:
                  sub_10062C6C4();
              }
            }
            else
            {
              switch((_DWORD)result)
              {
                case 0x1A0A:
                  sub_10062BC24();
                case 0x1B0A:
                  sub_10062BE44();
                case 0x1C0A:
                  sub_10062C064();
              }
            }
          }
          else if ((int)result > 5897)
          {
            switch((_DWORD)result)
            {
              case 0x170A:
                sub_10062B5C4();
              case 0x180A:
                sub_10062B7E4();
              case 0x190A:
                sub_10062BA04();
            }
          }
          else
          {
            switch((_DWORD)result)
            {
              case 0x140A:
                sub_10062AF64();
              case 0x150A:
                sub_10062B184();
              case 0x160A:
                sub_10062B3A4();
            }
          }
        }
        else if ((int)result <= 1289)
        {
          if ((int)result <= 786)
          {
            if ((int)result <= 775)
            {
              if ((_DWORD)result == 539)
                sub_100630684();
              if ((_DWORD)result == 769)
                sub_1006284E4();
            }
            else
            {
              switch((_DWORD)result)
              {
                case 0x308:
                  sub_10062E484();
                case 0x30A:
                  sub_100628B44();
                case 0x30E:
                  sub_10062D5A4();
              }
            }
          }
          else if ((int)result > 1037)
          {
            switch((_DWORD)result)
            {
              case 0x40E:
                sub_10062D7C4();
              case 0x413:
                sub_10062F584();
              case 0x508:
                sub_10062E8C4();
            }
          }
          else
          {
            switch((_DWORD)result)
            {
              case 0x313:
                sub_10062F364();
              case 0x408:
                sub_10062E6A4();
              case 0x40A:
                sub_100628D64();
            }
          }
        }
        else if ((int)result > 1801)
        {
          if ((int)result > 2066)
          {
            switch((_DWORD)result)
            {
              case 0x813:
                sub_10062FE04();
              case 0x90A:
                sub_100629804();
              case 0x913:
                sub_100630024();
            }
          }
          else
          {
            switch((_DWORD)result)
            {
              case 0x70A:
                sub_1006293C4();
              case 0x713:
                sub_10062FBE4();
              case 0x80A:
                sub_1006295E4();
            }
          }
        }
        else if ((int)result > 1543)
        {
          switch((_DWORD)result)
          {
            case 0x608:
              sub_10062EAE4();
            case 0x60A:
              sub_1006291A4();
            case 0x613:
              sub_10062F9C4();
          }
        }
        else
        {
          switch((_DWORD)result)
          {
            case 0x50A:
              sub_100628F84();
            case 0x50E:
              sub_10062D9E4();
            case 0x513:
              sub_10062F7A4();
          }
        }
      }
      else if ((int)result > 100)
      {
        switch((int)result)
        {
          case 256:
            sub_100630CE4();
          case 257:
            sub_1006280A4();
          case 258:
          case 259:
          case 260:
          case 263:
          case 265:
          case 268:
          case 269:
          case 271:
          case 272:
          case 273:
          case 274:
          case 276:
          case 277:
          case 278:
          case 280:
          case 281:
          case 282:
            break;
          case 261:
            sub_10062CD24();
          case 262:
            sub_10062C8E4();
          case 264:
            sub_10062E044();
          case 266:
            sub_100628704();
          case 267:
            sub_10062DC04();
          case 270:
            sub_10062D164();
          case 275:
            sub_10062EF24();
          case 279:
            sub_100630AC4();
          case 283:
            sub_100630464();
          case 284:
            sub_1006308A4();
          default:
            switch((int)result)
            {
              case 513:
                sub_1006282C4();
              case 514:
              case 515:
              case 519:
              case 521:
              case 524:
              case 525:
              case 527:
              case 528:
              case 529:
              case 530:
                goto LABEL_169;
              case 516:
                sub_10062ED04();
              case 517:
                sub_10062CF44();
              case 518:
                sub_10062CB04();
              case 520:
                sub_10062E264();
              case 522:
                sub_100628924();
              case 523:
                sub_10062DE24();
              case 526:
                sub_10062D384();
              case 531:
                sub_10062F144();
              default:
                if ((_DWORD)result == 101)
                  sub_100627E84();
                return result;
            }
        }
      }
      else
      {
        switch((int)result)
        {
          case 1:
            sub_1006240E4();
          case 2:
            sub_100624304();
          case 3:
            sub_100624524();
          case 4:
            sub_100624744();
          case 5:
            sub_100624964();
          case 6:
            sub_100624B84();
          case 7:
            sub_100624DA4();
          case 8:
            sub_100624FC4();
          case 9:
            sub_1006251E4();
          case 10:
            sub_100625404();
          case 11:
            sub_100625624();
          case 12:
            sub_100625844();
          case 13:
            sub_100625A64();
          case 14:
            sub_100625C84();
          case 15:
            sub_100625EA4();
          case 16:
            sub_1006260C4();
          case 17:
            sub_1006262E4();
          case 18:
            sub_100626504();
          case 19:
            sub_100626724();
          case 20:
            sub_100626944();
          case 21:
            sub_100626B64();
          case 22:
            sub_100626D84();
          case 23:
            sub_100626FA4();
          case 24:
            sub_1006271C4();
          case 25:
            sub_1006273E4();
          case 26:
            sub_100627604();
          case 27:
            sub_100627824();
          case 28:
            sub_100627A44();
          default:
            if ((_DWORD)result == 100)
              sub_100627C64();
            return result;
        }
      }
LABEL_169:
      sub_100630F04();
    }
  }
  return result;
}

uint64_t sub_100637758(uint64_t result, const char *a2)
{
  uint64_t v3;

  if (*(_BYTE *)(result + 57))
  {
    v3 = result;
    sub_100637798(result, a2);
    return sub_100637AE4(v3, a2);
  }
  return result;
}

uint64_t sub_100637798(uint64_t a1, const char *a2)
{
  uint64_t v4;
  size_t v5;
  _QWORD *v6;
  std::string *p_p;
  size_t v8;
  _QWORD *v9;
  std::string *v10;
  size_t v11;
  _QWORD *v12;
  char *v13;
  BOOL v14;
  std::string *v15;
  uint64_t v16;
  void *v18[2];
  char v19;
  std::string __p;
  _QWORD v21[2];
  uint64_t v22;
  _QWORD v23[8];
  std::string v24;
  _QWORD v25[21];
  __int16 v26;

  v4 = *(_QWORD *)(a1 + 16);
  v25[19] = v4;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v26 = 256;
  sub_100263E50((uint64_t)v21);
  v5 = strlen(a2);
  v6 = sub_100263F7C(&v22, (uint64_t)a2, v5);
  sub_100263F7C(v6, (uint64_t)"IncrementRowCount", 17);
  std::stringbuf::str(&__p, v23);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  sub_100639748(a1, (char *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  memset(&__p, 0, sizeof(__p));
  std::string::operator=(&v24, &__p);
  sub_1004ADDC8((uint64_t)v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v8 = strlen(a2);
  v9 = sub_100263F7C(&v22, (uint64_t)a2, v8);
  sub_100263F7C(v9, (uint64_t)"DecrementRowCount", 17);
  std::stringbuf::str(&__p, v23);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &__p;
  else
    v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
  sub_100639748(a1, (char *)v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  memset(&__p, 0, sizeof(__p));
  std::string::operator=(&v24, &__p);
  sub_1004ADDC8((uint64_t)v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v11 = strlen(a2);
  v12 = sub_100263F7C(&v22, (uint64_t)a2, v11);
  sub_100263F7C(v12, (uint64_t)"Counts", 6);
  std::stringbuf::str(v18, v23);
  if (v19 >= 0)
    v13 = (char *)v18;
  else
    v13 = (char *)v18[0];
  sub_100635F70(a1, "table", v13, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v14 = __p.__r_.__value_.__l.__size_ == 0;
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v14 = SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 0;
  }
  if (v19 < 0)
  {
    operator delete(v18[0]);
    if (v14)
      goto LABEL_30;
  }
  else if (v14)
  {
    goto LABEL_30;
  }
  std::stringbuf::str(&__p, v23);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &__p;
  else
    v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
  sub_100639A84(a1, (char *)v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_30:
  *(_QWORD *)((char *)v21
  v22 = v16;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  std::streambuf::~streambuf(v23);
  std::ios::~ios(v25);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_100637A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  uint64_t v21;

  if (a20 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a21);
  sub_10187E514(v21 - 88);
  _Unwind_Resume(a1);
}

uint64_t sub_100637AE4(uint64_t a1, const char *a2)
{
  uint64_t v4;
  size_t v5;
  _QWORD *v6;
  const char *v7;
  _QWORD *v8;
  size_t v9;
  char *v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  const char *v17;
  NSObject *v18;
  _QWORD *v19;
  size_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  sqlite3_stmt *v26;
  sqlite3_stmt *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  NSObject *v31;
  uint64_t v32;
  _QWORD v34[2];
  uint64_t v35;
  _QWORD v36[8];
  std::string __p;
  _QWORD v38[21];
  __int16 v39;
  _BYTE __str[28];
  const char *v41;
  int v42;
  __int16 v43;
  char v44;
  char v45;
  uint64_t v46;
  int v47;
  __int16 v48;
  char v49;
  char v50;

  v4 = *(_QWORD *)(a1 + 16);
  v38[19] = v4;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v39 = 256;
  v41 = "Count";
  v42 = 1;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 5;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  sub_100263E50((uint64_t)v34);
  v5 = strlen(a2);
  v6 = sub_100263F7C(&v35, (uint64_t)a2, v5);
  sub_100263F7C(v6, (uint64_t)"Counts", 6);
  std::stringbuf::str(__str, v36);
  if (__str[23] >= 0)
    v7 = __str;
  else
    v7 = *(const char **)__str;
  sub_10063A0EC(a1, v7, &v41);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  memset(__str, 0, 24);
  std::string::operator=(&__p, (const std::string *)__str);
  sub_1004ADDC8((uint64_t)v36);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  v8 = sub_100263F7C(&v35, (uint64_t)"SELECT COUNT(*) FROM ", 21);
  v9 = strlen(a2);
  sub_100263F7C(v8, (uint64_t)a2, v9);
  std::stringbuf::str(__str, v36);
  if (__str[23] >= 0)
    v10 = __str;
  else
    v10 = *(char **)__str;
  v11 = sub_1000CDB4C(a1, v10);
  v12 = v11;
  if ((__str[23] & 0x80000000) == 0)
  {
    if (v11)
      goto LABEL_13;
LABEL_16:
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v14 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_QWORD *)__str = 68289283;
      *(_WORD *)&__str[8] = 2082;
      *(_QWORD *)&__str[10] = "";
      *(_WORD *)&__str[18] = 2081;
      *(_QWORD *)&__str[20] = a2;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't create select count statement\", \"table\":%{private, location:escape_only}s}", __str, 0x1Cu);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v15 = off_1022A0288;
    if (!os_signpost_enabled((os_log_t)off_1022A0288))
      goto LABEL_31;
    *(_QWORD *)__str = 68289283;
    *(_WORD *)&__str[8] = 2082;
    *(_QWORD *)&__str[10] = "";
    *(_WORD *)&__str[18] = 2081;
    *(_QWORD *)&__str[20] = a2;
    v16 = "Couldn't create select count statement";
    v17 = "{\"msg%{public}.0s\":\"Couldn't create select count statement\", \"table\":%{private, location:escape_only}s}";
    goto LABEL_30;
  }
  operator delete(*(void **)__str);
  if (!v12)
    goto LABEL_16;
LABEL_13:
  if (sqlite3_step(v12) == 100)
  {
    v13 = sqlite3_column_int(v12, 0);
    goto LABEL_32;
  }
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v18 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
  {
    *(_QWORD *)__str = 68289283;
    *(_WORD *)&__str[8] = 2082;
    *(_QWORD *)&__str[10] = "";
    *(_WORD *)&__str[18] = 2081;
    *(_QWORD *)&__str[20] = a2;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get row count for\", \"table\":%{private, location:escape_only}s}", __str, 0x1Cu);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
  }
  v15 = off_1022A0288;
  if (os_signpost_enabled((os_log_t)off_1022A0288))
  {
    *(_QWORD *)__str = 68289283;
    *(_WORD *)&__str[8] = 2082;
    *(_QWORD *)&__str[10] = "";
    *(_WORD *)&__str[18] = 2081;
    *(_QWORD *)&__str[20] = a2;
    v16 = "Couldn't get row count for";
    v17 = "{\"msg%{public}.0s\":\"Couldn't get row count for\", \"table\":%{private, location:escape_only}s}";
LABEL_30:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v16, v17, __str, 0x1Cu);
  }
LABEL_31:
  v13 = 0;
LABEL_32:
  sub_1000536D0(*(sqlite3 **)(a1 + 8), v12);
  memset(__str, 0, 24);
  std::string::operator=(&__p, (const std::string *)__str);
  sub_1004ADDC8((uint64_t)v36);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  v19 = sub_100263F7C(&v35, (uint64_t)"INSERT INTO ", 12);
  v20 = strlen(a2);
  v21 = sub_100263F7C(v19, (uint64_t)a2, v20);
  v22 = sub_100263F7C(v21, (uint64_t)"Counts", 6);
  v23 = sub_100263F7C(v22, (uint64_t)" VALUES (", 9);
  v24 = (_QWORD *)std::ostream::operator<<(v23, v13);
  sub_100263F7C(v24, (uint64_t)")", 1);
  std::stringbuf::str(__str, v36);
  if (__str[23] >= 0)
    v25 = __str;
  else
    v25 = *(char **)__str;
  v26 = sub_1000CDB4C(a1, v25);
  v27 = v26;
  if ((__str[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__str);
    if (v27)
      goto LABEL_39;
  }
  else if (v26)
  {
LABEL_39:
    sub_10023C9B0(a1, v27);
    sub_1000536D0(*(sqlite3 **)(a1 + 8), v27);
    std::stringbuf::str(__str, v36);
    sub_100639C70(a1, a2, v28, 1);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    std::stringbuf::str(__str, v36);
    sub_100639C70(a1, a2, v29, 0);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    goto LABEL_51;
  }
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v30 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
  {
    *(_QWORD *)__str = 68289026;
    *(_WORD *)&__str[8] = 2082;
    *(_QWORD *)&__str[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't prepare row count insertion statement\"}", __str, 0x12u);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
  }
  v31 = off_1022A0288;
  if (os_signpost_enabled((os_log_t)off_1022A0288))
  {
    *(_QWORD *)__str = 68289026;
    *(_WORD *)&__str[8] = 2082;
    *(_QWORD *)&__str[10] = "";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v31, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't prepare row count insertion statement", "{\"msg%{public}.0s\":\"Couldn't prepare row count insertion statement\"}", __str, 0x12u);
  }
LABEL_51:
  *(_QWORD *)((char *)v34
  v35 = v32;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::streambuf::~streambuf(v36);
  std::ios::~ios(v38);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_100638234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  uint64_t v44;

  if (*(char *)(v44 - 217) < 0)
    operator delete(*(void **)(v44 - 240));
  sub_1018B38B4((uint64_t)&a9);
  sub_10187E514((uint64_t)&a44);
  _Unwind_Resume(a1);
}

uint64_t sub_1006382B4(uint64_t a1, char *a2, const char **a3, const std::string::value_type **a4, int a5)
{
  _BOOL4 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  unsigned __int8 *p_p;
  void **v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  size_t v23;
  uint64_t v24;
  int v25;
  uint8_t *v26;
  uint64_t v27;
  void **p_s1;
  int v29;
  int v30;
  int v31;
  int v32;
  BOOL v34;
  _BOOL4 v35;
  NSObject *v36;
  size_t v37;
  NSObject *v38;
  char *v39;
  NSObject *v40;
  char *v41;
  NSObject *v43;
  char *v44;
  void *v45;
  NSObject *v46;
  uint64_t v47;
  void *v48;
  size_t v49;
  unsigned __int8 v50;
  void *__p;
  uint64_t v52;
  uint64_t v53;
  void *__s1;
  size_t __n;
  uint64_t v56;
  uint64_t v57;
  __int16 v58;
  uint8_t buf[8];
  _BYTE v60[10];
  __int16 v61;
  char *v62;
  __int16 v63;
  char *v64;
  __int16 v65;
  void *v66;

  if (!a2)
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v18 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v60 = 2082;
      *(_QWORD *)&v60[2] = "";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Must provide a table name\"}", buf, 0x12u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v19 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v60 = 2082;
      *(_QWORD *)&v60[2] = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Must provide a table name", "{\"msg%{public}.0s\":\"Must provide a table name\"}", buf, 0x12u);
    }
    return 0;
  }
  if (*(_BYTE *)(a1 + 56))
    return 0;
  v57 = *(_QWORD *)(a1 + 16);
  v47 = v57;
  (*(void (**)(void))(*(_QWORD *)v57 + 16))();
  v58 = 256;
  __s1 = 0;
  __n = 0;
  v56 = 0;
  __p = 0;
  v52 = 0;
  v53 = 0;
  v10 = sub_10063C97C(a1, a2, (uint64_t)&__s1, (uint64_t)&__p);
  v11 = sub_10063A57C(a1, a2);
  v12 = v11;
  if (!v11 && v10)
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v21 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v60 = 2082;
      *(_QWORD *)&v60[2] = "";
      v61 = 2081;
      v62 = a2;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Table does not exist but its metadata does\", \"table\":%{private, location:escape_only}s}", buf, 0x1Cu);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v22 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v60 = 2082;
      *(_QWORD *)&v60[2] = "";
      v61 = 2081;
      v62 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v22, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Table does not exist but its metadata does", "{\"msg%{public}.0s\":\"Table does not exist but its metadata does\", \"table\":%{private, location:escape_only}s}", buf, 0x1Cu);
    }
    sub_10063DA50(a1, a2);
    goto LABEL_37;
  }
  if (!a5)
    goto LABEL_38;
  if (!v10)
  {
    if (!v11)
    {
      v10 = 0;
      goto LABEL_38;
    }
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v36 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v60 = 2082;
      *(_QWORD *)&v60[2] = "";
      v61 = 2081;
      v62 = a2;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Table was created by an unknown device (table info missing). Deleting\", \"table\":%{private, location:escape_only}s}", buf, 0x1Cu);
    }
    sub_100639A84(a1, a2);
LABEL_37:
    v10 = 0;
    v12 = 0;
    goto LABEL_38;
  }
  sub_100197040();
  sub_10075ACDC((uint64_t)&v48);
  v13 = v50;
  if ((v50 & 0x80u) == 0)
    v14 = v50;
  else
    v14 = v49;
  v15 = HIBYTE(v53);
  if (v53 < 0)
    v15 = v52;
  if (v14 != v15)
    goto LABEL_98;
  if (v53 >= 0)
    p_p = (unsigned __int8 *)&__p;
  else
    p_p = (unsigned __int8 *)__p;
  if ((v50 & 0x80) != 0)
  {
    if (!memcmp(v48, p_p, v49))
      goto LABEL_107;
LABEL_98:
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v43 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
    {
      v44 = (char *)&v48;
      if ((v50 & 0x80u) != 0)
        v44 = (char *)v48;
      v45 = &__p;
      if (v53 < 0)
        v45 = __p;
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v60 = 2082;
      *(_QWORD *)&v60[2] = "";
      v61 = 2081;
      v62 = a2;
      v63 = 2081;
      v64 = v44;
      v65 = 2081;
      v66 = v45;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Table was created by a different device (serial numbers do not match). Deleting\", \"table\":%{private, location:escape_only}s, \"expected\":%{private, location:escape_only}s, \"actual\":%{private, location:escape_only}s}", buf, 0x30u);
    }
    sub_100639A84(a1, a2);
    v10 = 0;
    v12 = 0;
    goto LABEL_112;
  }
  if (v50)
  {
    v17 = &v48;
    while (*(unsigned __int8 *)v17 == *p_p)
    {
      v17 = (void **)((char *)v17 + 1);
      ++p_p;
      if (!--v13)
        goto LABEL_107;
    }
    goto LABEL_98;
  }
LABEL_107:
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v46 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v60 = 2082;
    *(_QWORD *)&v60[2] = "";
    v61 = 2081;
    v62 = a2;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Table was created by this device (serial numbers match). Keeping\", \"table\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  v10 = 1;
LABEL_112:
  if ((char)v50 < 0)
    operator delete(v48);
LABEL_38:
  sub_100197040();
  sub_10075AA9C((uint64_t)buf);
  if (v56 >= 0)
    v23 = HIBYTE(v56);
  else
    v23 = __n;
  v24 = BYTE3(v62);
  v25 = SBYTE3(v62);
  if (SBYTE3(v62) < 0)
    v24 = *(_QWORD *)v60;
  if (v23 != v24)
  {
    v35 = 0;
    if ((SBYTE3(v62) & 0x80000000) == 0)
      goto LABEL_60;
    goto LABEL_69;
  }
  if (SBYTE3(v62) >= 0)
    v26 = buf;
  else
    v26 = *(uint8_t **)buf;
  if (v56 < 0)
  {
    v35 = memcmp(__s1, v26, __n) == 0;
    goto LABEL_59;
  }
  if (HIBYTE(v56))
  {
    v27 = HIBYTE(v56) - 1;
    p_s1 = &__s1;
    do
    {
      v30 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      v29 = v30;
      v32 = *v26++;
      v31 = v32;
      v34 = v27-- != 0;
      v35 = v29 == v31;
    }
    while (v29 == v31 && v34);
LABEL_59:
    if ((v25 & 0x80000000) == 0)
      goto LABEL_60;
    goto LABEL_69;
  }
  v35 = 1;
  if ((SBYTE3(v62) & 0x80000000) == 0)
  {
LABEL_60:
    if (!v35)
      goto LABEL_81;
    goto LABEL_70;
  }
LABEL_69:
  operator delete(*(void **)buf);
  if (!v35)
    goto LABEL_81;
LABEL_70:
  v37 = HIBYTE(v56);
  if (v56 < 0)
    v37 = __n;
  if (v37 && v10 && v12)
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v38 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
    {
      v39 = (char *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v39 = *(char **)v39;
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v60 = 2082;
      *(_QWORD *)&v60[2] = "";
      v61 = 2082;
      v62 = v39;
      v63 = 2081;
      v64 = a2;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"The CL version has not changed since CLSqliteDatabase::createTableIfNecessary() was last invoked for this pair, so not creating table\", \"path\":%{public, location:escape_only}s, \"table\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    goto LABEL_89;
  }
LABEL_81:
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v40 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    v41 = (char *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v41 = *(char **)v41;
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v60 = 2082;
    *(_QWORD *)&v60[2] = "";
    v61 = 2082;
    v62 = v41;
    v63 = 2081;
    v64 = a2;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"The CL version has changed since CLSqliteDatabase::createTableIfNecessary() was last invoked for this pair. Checking schema\", \"path\":%{public, location:escape_only}s, \"table\":%{private, location:escape_only}s}", buf, 0x26u);
  }
  sub_10063D3BC(a1, a2);
  if (!sub_1006322E8(a1, a2, a3, a4, 0))
  {
LABEL_89:
    v20 = 0;
    goto LABEL_90;
  }
  sub_10063D3BC(a1, a2);
  v20 = 1;
LABEL_90:
  if (SHIBYTE(v53) < 0)
    operator delete(__p);
  if (SHIBYTE(v56) < 0)
    operator delete(__s1);
  (*(void (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47);
  return v20;
}

void sub_100638B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (a28 < 0)
    operator delete(a23);
  sub_10187E514((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_100638BD8(uint64_t a1, const char *a2, const std::string::value_type **a3)
{
  uint64_t v6;
  size_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint8_t *v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;
  _QWORD *v15;
  std::string *v16;
  std::string::size_type size;
  _QWORD *v18;
  char *v19;
  size_t v20;
  int v21;
  uint8_t *v22;
  size_t v23;
  const void *v24;
  size_t v25;
  uint8_t *v26;
  size_t v27;
  _BOOL4 v28;
  _BOOL4 v29;
  NSObject *v30;
  void **v31;
  NSObject *v32;
  void **v33;
  uint8_t *v34;
  NSObject *v35;
  int v36;
  void **v37;
  int v38;
  void **v39;
  void **v40;
  void **v41;
  void **v42;
  uint8_t *v43;
  char *v44;
  sqlite3_stmt *v45;
  sqlite3_stmt *v46;
  NSObject *v47;
  std::string *v48;
  uint64_t v49;
  std::string::size_type v50;
  std::string::size_type v51;
  void *v53[2];
  char v54;
  void *__p[2];
  char v56;
  void *v57;
  size_t v58;
  unsigned __int8 v59;
  std::string v60;
  _QWORD v61[10];
  char v62;
  uint64_t v63;
  _QWORD v64[2];
  std::string::size_type v65;
  _QWORD v66[10];
  char v67;
  uint64_t v68;
  std::string v69;
  uint64_t v70;
  __int16 v71;
  uint8_t buf[8];
  _BYTE v73[10];
  __int16 v74;
  void *v75;
  __int16 v76;
  std::string *v77;
  __int16 v78;
  void **v79;

  v6 = *(_QWORD *)(a1 + 16);
  v70 = v6;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v71 = 256;
  if (!a3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  memset(&v69, 0, sizeof(v69));
  sub_100263E50((uint64_t)v64);
  v7 = strlen(a2);
  v8 = sub_100263F7C(&v65, (uint64_t)a2, v7);
  sub_100263F7C(v8, (uint64_t)"Index", 5);
  sub_100639430(a3, &v60);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  v69 = v60;
  sub_100263E50((uint64_t)&v60);
  v9 = sub_100263F7C(&v60.__r_.__value_.__r.__words[2], (uint64_t)"CREATE INDEX ", 13);
  std::stringbuf::str(buf, v66);
  if (SBYTE3(v75) >= 0)
    v10 = buf;
  else
    v10 = *(uint8_t **)buf;
  if (SBYTE3(v75) >= 0)
    v11 = BYTE3(v75);
  else
    v11 = *(_QWORD *)v73;
  sub_100263F7C(v9, (uint64_t)v10, v11);
  if (SBYTE3(v75) < 0)
    operator delete(*(void **)buf);
  v12 = sub_100263F7C(&v60.__r_.__value_.__r.__words[2], (uint64_t)" ON ", 4);
  v13 = strlen(a2);
  v14 = sub_100263F7C(v12, (uint64_t)a2, v13);
  v15 = sub_100263F7C(v14, (uint64_t)" (", 2);
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v69;
  else
    v16 = (std::string *)v69.__r_.__value_.__r.__words[0];
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  else
    size = v69.__r_.__value_.__l.__size_;
  v18 = sub_100263F7C(v15, (uint64_t)v16, size);
  sub_100263F7C(v18, (uint64_t)")", 1);
  std::stringbuf::str(buf, v66);
  if (SBYTE3(v75) >= 0)
    v19 = (char *)buf;
  else
    v19 = *(char **)buf;
  sub_100635F70(a1, "index", v19, &v57);
  if (SBYTE3(v75) < 0)
    operator delete(*(void **)buf);
  v20 = v59;
  if ((v59 & 0x80u) != 0)
    v20 = v58;
  if (v20)
  {
    std::stringbuf::str(buf, v61);
    v21 = SBYTE3(v75);
    v22 = *(uint8_t **)buf;
    if ((v59 & 0x80u) == 0)
      v23 = v59;
    else
      v23 = v58;
    if ((v59 & 0x80u) == 0)
      v24 = &v57;
    else
      v24 = v57;
    if (SBYTE3(v75) >= 0)
      v25 = BYTE3(v75);
    else
      v25 = *(_QWORD *)v73;
    if (SBYTE3(v75) >= 0)
      v26 = buf;
    else
      v26 = *(uint8_t **)buf;
    if (v25 >= v23)
      v27 = v23;
    else
      v27 = v25;
    v28 = memcmp(v24, v26, v27) == 0;
    v29 = v25 == v23 && v28;
    if (v21 < 0)
      operator delete(v22);
    if (v29)
    {
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
      v30 = off_1022A0288;
      if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
      {
        std::stringbuf::str(__p, v66);
        v31 = v56 >= 0 ? __p : (void **)__p[0];
        *(_QWORD *)buf = 68289283;
        *(_WORD *)v73 = 2082;
        *(_QWORD *)&v73[2] = "";
        v74 = 2081;
        v75 = v31;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Index already exists; not re-creating\", \"index\":%{private, location:escape_only}s}",
          buf,
          0x1Cu);
        if (v56 < 0)
          operator delete(__p[0]);
      }
      goto LABEL_95;
    }
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v35 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str(__p, v66);
      v36 = v56;
      v37 = (void **)__p[0];
      v38 = (char)v59;
      v39 = (void **)v57;
      std::stringbuf::str(v53, v61);
      v40 = &v57;
      if (v38 < 0)
        v40 = v39;
      v41 = __p;
      if (v36 < 0)
        v41 = v37;
      *(_DWORD *)buf = 68289795;
      v42 = v53;
      if (v54 < 0)
        v42 = (void **)v53[0];
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v73 = 2082;
      *(_QWORD *)&v73[2] = "";
      v74 = 2081;
      v75 = v41;
      v76 = 2081;
      v77 = (std::string *)v40;
      v78 = 2081;
      v79 = v42;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Index already exists but is different; dropping\", \"index\":%{private, location:escape_o"
        "nly}s, \"actual\":%{private, location:escape_only}s, \"expected\":%{private, location:escape_only}s}",
        buf,
        0x30u);
      if (v54 < 0)
        operator delete(v53[0]);
      if (v56 < 0)
        operator delete(__p[0]);
    }
    std::stringbuf::str(buf, v66);
    if (SBYTE3(v75) >= 0)
      v43 = buf;
    else
      v43 = *(uint8_t **)buf;
    sub_1006394C8(a1, (const char *)v43);
    if (SBYTE3(v75) < 0)
    {
      v34 = *(uint8_t **)buf;
      goto LABEL_81;
    }
  }
  else
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v32 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str(__p, v66);
      v33 = v56 >= 0 ? __p : (void **)__p[0];
      *(_QWORD *)buf = 68289283;
      *(_WORD *)v73 = 2082;
      *(_QWORD *)&v73[2] = "";
      v74 = 2081;
      v75 = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Index does not exist; creating\", \"index\":%{private, location:escape_only}s}",
        buf,
        0x1Cu);
      if (v56 < 0)
      {
        v34 = (uint8_t *)__p[0];
LABEL_81:
        operator delete(v34);
      }
    }
  }
  std::stringbuf::str(buf, v61);
  if (SBYTE3(v75) >= 0)
    v44 = (char *)buf;
  else
    v44 = *(char **)buf;
  v45 = sub_1000CDB4C(a1, v44);
  v46 = v45;
  if (SBYTE3(v75) < 0)
  {
    operator delete(*(void **)buf);
    if (v46)
      goto LABEL_87;
LABEL_89:
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v47 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
    {
      v48 = &v69;
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v48 = (std::string *)v69.__r_.__value_.__r.__words[0];
      *(_QWORD *)buf = 68289539;
      *(_WORD *)v73 = 2082;
      *(_QWORD *)&v73[2] = "";
      v74 = 2081;
      v75 = (void *)a2;
      v76 = 2082;
      v77 = v48;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Couldn't create index statement\", \"table\":%{private, location:escape_only}s, \"columns\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    goto LABEL_95;
  }
  if (!v45)
    goto LABEL_89;
LABEL_87:
  sub_10023C9B0(a1, v46);
  sub_1000536D0(*(sqlite3 **)(a1 + 8), v46);
LABEL_95:
  if ((char)v59 < 0)
    operator delete(v57);
  *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words
                                        - 24)) = v50;
  v60.__r_.__value_.__r.__words[2] = v51;
  if (v62 < 0)
    operator delete((void *)v61[8]);
  std::streambuf::~streambuf(v61);
  std::ios::~ios(&v63);
  v64[0] = v49;
  *(_QWORD *)((char *)v64 + *(_QWORD *)(v49 - 24)) = v50;
  v65 = v51;
  if (v67 < 0)
    operator delete((void *)v66[8]);
  std::streambuf::~streambuf(v66);
  std::ios::~ios(&v68);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
}

void sub_100639354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;

  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  sub_1018B38B4((uint64_t)&a25);
  sub_1018B38B4((uint64_t)&a60);
  if (*(char *)(v60 - 185) < 0)
    operator delete(*(void **)(v60 - 208));
  sub_10187E514(v60 - 184);
  _Unwind_Resume(a1);
}

std::string *sub_100639430@<X0>(const std::string::value_type **a1@<X0>, std::string *a2@<X8>)
{
  std::string *result;
  const std::string::value_type *v5;
  uint64_t v6;
  const std::string::value_type **v7;

  result = (std::string *)sub_1015A2E04(a2, "");
  if (a1)
  {
    v5 = *a1;
    if (*a1)
    {
      v6 = 0;
      do
      {
        if (v6)
        {
          std::string::append(a2, ", ");
          v5 = a1[v6];
        }
        result = std::string::append(a2, v5);
        v7 = &a1[v6++];
        v5 = v7[1];
      }
      while (v5);
    }
  }
  return result;
}

void sub_1006394AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006394C8(uint64_t a1, const char *a2)
{
  uint64_t v4;
  _QWORD *v5;
  size_t v6;
  char *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  NSObject *v10;
  uint64_t v11;
  _QWORD v13[2];
  uint64_t v14;
  _QWORD v15[10];
  char v16;
  _QWORD v17[21];
  __int16 v18;
  uint8_t buf[8];
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;

  v4 = *(_QWORD *)(a1 + 16);
  v17[19] = v4;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v18 = 256;
  sub_100263E50((uint64_t)v13);
  v5 = sub_100263F7C(&v14, (uint64_t)"DROP INDEX ", 11);
  v6 = strlen(a2);
  sub_100263F7C(v5, (uint64_t)a2, v6);
  std::stringbuf::str(buf, v15);
  if (SBYTE3(v23) >= 0)
    v7 = (char *)buf;
  else
    v7 = *(char **)buf;
  v8 = sub_1000CDB4C(a1, v7);
  v9 = v8;
  if (SBYTE3(v23) < 0)
  {
    operator delete(*(void **)buf);
    if (v9)
      goto LABEL_6;
  }
  else if (v8)
  {
LABEL_6:
    sub_10023C9B0(a1, v9);
    sub_1000536D0(*(sqlite3 **)(a1 + 8), v9);
    goto LABEL_12;
  }
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v10 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)buf = 68289283;
    v20 = 2082;
    v21 = "";
    v22 = 2081;
    v23 = a2;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Couldn't create drop index statement\", \"index\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
LABEL_12:
  *(_QWORD *)((char *)v13
  v14 = v11;
  if (v16 < 0)
    operator delete((void *)v15[8]);
  std::streambuf::~streambuf(v15);
  std::ios::~ios(v17);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_1006396F4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100639748(uint64_t a1, char *a2)
{
  uint64_t v4;
  _QWORD *v5;
  size_t v6;
  char *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  NSObject *v15;
  uint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  _QWORD v20[10];
  char v21;
  _QWORD v22[21];
  __int16 v23;
  uint8_t buf[8];
  _BYTE v25[10];
  __int16 v26;
  char *v27;

  v4 = *(_QWORD *)(a1 + 16);
  v22[19] = v4;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v23 = 256;
  sub_100263E50((uint64_t)v18);
  v5 = sub_100263F7C(&v19, (uint64_t)"DROP TRIGGER ", 13);
  v6 = strlen(a2);
  sub_100263F7C(v5, (uint64_t)a2, v6);
  sub_100635F70(a1, "trigger", a2, buf);
  if (SBYTE3(v27) < 0)
  {
    v10 = *(_QWORD *)v25;
    operator delete(*(void **)buf);
    if (v10)
    {
LABEL_3:
      std::stringbuf::str(buf, v20);
      if (SBYTE3(v27) >= 0)
        v7 = (char *)buf;
      else
        v7 = *(char **)buf;
      v8 = sub_1000CDB4C(a1, v7);
      v9 = v8;
      if (SBYTE3(v27) < 0)
      {
        operator delete(*(void **)buf);
        if (v9)
          goto LABEL_8;
      }
      else if (v8)
      {
LABEL_8:
        sub_10023C9B0(a1, v9);
        sub_1000536D0(*(sqlite3 **)(a1 + 8), v9);
        goto LABEL_20;
      }
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
      v15 = off_1022A0288;
      if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)buf = 68289282;
        *(_WORD *)v25 = 2082;
        *(_QWORD *)&v25[2] = "";
        v26 = 2082;
        v27 = a2;
        v12 = "{\"msg%{public}.0s\":\"#warning Couldn't create drop trigger statement\", \"trigger\":%{public, location:escape_only}s}";
        v13 = v15;
        v14 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_19;
      }
      goto LABEL_20;
    }
  }
  else if (BYTE3(v27))
  {
    goto LABEL_3;
  }
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v11 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    *(_QWORD *)buf = 68289282;
    *(_WORD *)v25 = 2082;
    *(_QWORD *)&v25[2] = "";
    v26 = 2082;
    v27 = a2;
    v12 = "{\"msg%{public}.0s\":\"Trigger does not exist\", \"trigger\":%{public, location:escape_only}s}";
    v13 = v11;
    v14 = OS_LOG_TYPE_DEBUG;
LABEL_19:
    _os_log_impl((void *)&_mh_execute_header, v13, v14, v12, buf, 0x1Cu);
  }
LABEL_20:
  *(_QWORD *)((char *)v18
  v19 = v16;
  if (v21 < 0)
    operator delete((void *)v20[8]);
  std::streambuf::~streambuf(v20);
  std::ios::~ios(v22);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_100639A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if (*(char *)(v9 - 73) < 0)
    operator delete(*(void **)(v9 - 96));
  sub_1018B38B4((uint64_t)&a9);
  sub_10187E514(v9 - 120);
  _Unwind_Resume(a1);
}

uint64_t sub_100639A84(uint64_t a1, char *a2)
{
  uint64_t v4;
  NSObject *v5;
  char *v6;
  sqlite3_stmt *v7;
  uint64_t v8;
  uint8_t buf[8];
  __int16 v11;
  const char *v12;
  __int16 v13;
  char *v14;

  v4 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v5 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2081;
    v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Dropping table\", \"table\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  sub_10063DA50(a1, a2);
  sub_1015A2E04(buf, "DROP TABLE IF EXISTS ");
  std::string::append((std::string *)buf, a2);
  if (SBYTE3(v14) >= 0)
    v6 = (char *)buf;
  else
    v6 = *(char **)buf;
  v7 = sub_1000CDB4C(a1, v6);
  sub_10023C9B0(a1, v7);
  sub_1000536D0(*(sqlite3 **)(a1 + 8), v7);
  if (*(uint64_t *)(a1 + 88) <= 0)
    v8 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v8 = *(_QWORD *)(a1 + 88);
  sub_100053048(a1, v8);
  if (SBYTE3(v14) < 0)
    operator delete(*(void **)buf);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_100639C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100639C70(uint64_t a1, const char *a2, uint64_t a3, int a4)
{
  uint64_t v7;
  const char *v8;
  const char *v9;
  const char *v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  size_t v17;
  _QWORD *v18;
  _QWORD *v19;
  size_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  sqlite3_stmt *v29;
  sqlite3_stmt *v30;
  NSObject *v31;
  NSObject *v32;
  uint64_t v33;
  _QWORD v35[2];
  uint64_t v36;
  _QWORD v37[10];
  char v38;
  _QWORD v39[21];
  __int16 v40;
  uint8_t buf[8];
  __int16 v42;
  const char *v43;
  __int16 v44;
  const char *v45;

  v7 = *(_QWORD *)(a1 + 16);
  v39[19] = v7;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  v40 = 256;
  sub_100263E50((uint64_t)v35);
  if (a4)
    v8 = "Increment";
  else
    v8 = "Decrement";
  if (a4)
    v9 = "INSERT";
  else
    v9 = "DELETE";
  if (a4)
    v10 = "+";
  else
    v10 = "-";
  sub_100263F7C(&v36, (uint64_t)"CREATE TRIGGER IF NOT EXISTS ", 29);
  v11 = strlen(a2);
  v12 = sub_100263F7C(&v36, (uint64_t)a2, v11);
  v13 = sub_100263F7C(v12, (uint64_t)v8, 9);
  sub_100263F7C(v13, (uint64_t)"RowCount", 8);
  v14 = sub_100263F7C(&v36, (uint64_t)" AFTER ", 7);
  v15 = sub_100263F7C(v14, (uint64_t)v9, 6);
  v16 = sub_100263F7C(v15, (uint64_t)" ON ", 4);
  v17 = strlen(a2);
  v18 = sub_100263F7C(v16, (uint64_t)a2, v17);
  sub_100263F7C(v18, (uint64_t)" FOR EACH ROW BEGIN", 19);
  v19 = sub_100263F7C(&v36, (uint64_t)" UPDATE ", 8);
  v20 = strlen(a2);
  v21 = sub_100263F7C(v19, (uint64_t)a2, v20);
  v22 = sub_100263F7C(v21, (uint64_t)"Counts", 6);
  v23 = sub_100263F7C(v22, (uint64_t)" SET ", 5);
  v24 = sub_100263F7C(v23, (uint64_t)"Count", 5);
  v25 = sub_100263F7C(v24, (uint64_t)"=", 1);
  v26 = sub_100263F7C(v25, (uint64_t)"Count", 5);
  v27 = sub_100263F7C(v26, (uint64_t)v10, 1);
  sub_100263F7C(v27, (uint64_t)"1 WHERE rowid=1; END", 20);
  std::stringbuf::str(buf, v37);
  if (SBYTE3(v45) >= 0)
    v28 = (char *)buf;
  else
    v28 = *(char **)buf;
  v29 = sub_1000CDB4C(a1, v28);
  v30 = v29;
  if (SBYTE3(v45) < 0)
  {
    operator delete(*(void **)buf);
    if (v30)
      goto LABEL_15;
  }
  else if (v29)
  {
LABEL_15:
    sub_10023C9B0(a1, v30);
    sub_1000536D0(*(sqlite3 **)(a1 + 8), v30);
    goto LABEL_24;
  }
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v31 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
  {
    *(_QWORD *)buf = 68289283;
    v42 = 2082;
    v43 = "";
    v44 = 2081;
    v45 = a2;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't create add count trigger statement\", \"table\":%{private, location:escape_only}s}", buf, 0x1Cu);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
  }
  v32 = off_1022A0288;
  if (os_signpost_enabled((os_log_t)off_1022A0288))
  {
    *(_QWORD *)buf = 68289283;
    v42 = 2082;
    v43 = "";
    v44 = 2081;
    v45 = a2;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v32, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't create add count trigger statement", "{\"msg%{public}.0s\":\"Couldn't create add count trigger statement\", \"table\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
LABEL_24:
  *(_QWORD *)((char *)v35
  v36 = v33;
  if (v38 < 0)
    operator delete((void *)v37[8]);
  std::streambuf::~streambuf(v37);
  std::ios::~ios(v39);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
}

void sub_10063A098(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10063A0EC(uint64_t a1, const char *a2, const char **a3)
{
  uint64_t v6;
  NSObject *v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  void *p_p;
  uint64_t v15;
  const char *v16;
  size_t v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  void **v21;
  char *v22;
  sqlite3_stmt *v23;
  sqlite3_stmt *v24;
  uint64_t v25;
  void *v27[2];
  char v28;
  uint64_t v29;
  __int16 v30;
  void *__p;
  _BYTE v32[10];
  __int16 v33;
  void **v34;
  uint8_t buf[8];
  __int16 v36;
  _BYTE v37[66];
  void *v38;
  char v39;
  uint64_t v40;

  v6 = *(_QWORD *)(a1 + 16);
  v29 = v6;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v30 = 256;
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v7 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    v36 = 2082;
    *(_QWORD *)v37 = "";
    *(_WORD *)&v37[8] = 2081;
    *(_QWORD *)&v37[10] = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Creating table\", \"table\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  if (a3 && *a3)
  {
    v8 = 0;
    v9 = (uint64_t *)(a3 + 6);
    do
    {
      v8 += *((unsigned __int8 *)v9 - 36);
      v10 = *v9;
      v9 += 6;
    }
    while (v10);
    sub_100263E50((uint64_t)buf);
    v11 = sub_100263F7C(&v37[6], (uint64_t)"CREATE TABLE ", 13);
    v12 = strlen(a2);
    v13 = sub_100263F7C(v11, (uint64_t)a2, v12);
    sub_100263F7C(v13, (uint64_t)" (", 2);
    sub_10063C1D4(a3, 1, v8 < 2, (uint64_t)&__p);
    if (SBYTE3(v34) >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (SBYTE3(v34) >= 0)
      v15 = BYTE3(v34);
    else
      v15 = *(_QWORD *)v32;
    sub_100263F7C(&v37[6], (uint64_t)p_p, v15);
    if (SBYTE3(v34) < 0)
      operator delete(__p);
    if (v8 >= 2)
    {
      v16 = (const char *)&__p;
      sub_10063B840((uint64_t)a3, &__p);
      if (SBYTE3(v34) < 0)
        v16 = (const char *)__p;
      v17 = strlen(v16);
      sub_100263F7C(&v37[6], (uint64_t)v16, v17);
      if (SBYTE3(v34) < 0)
        operator delete(__p);
    }
    sub_10063C4F0(a1, (uint64_t)a3, &__p);
    if (SBYTE3(v34) >= 0)
      v18 = &__p;
    else
      v18 = __p;
    if (SBYTE3(v34) >= 0)
      v19 = BYTE3(v34);
    else
      v19 = *(_QWORD *)v32;
    sub_100263F7C(&v37[6], (uint64_t)v18, v19);
    if (SBYTE3(v34) < 0)
      operator delete(__p);
    sub_100263F7C(&v37[6], (uint64_t)")", 1);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v20 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str(v27, &v37[14]);
      v21 = v28 >= 0 ? v27 : (void **)v27[0];
      __p = (void *)68289282;
      *(_WORD *)v32 = 2082;
      *(_QWORD *)&v32[2] = "";
      v33 = 2082;
      v34 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Schema statement created\", \"schema\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
      if (v28 < 0)
        operator delete(v27[0]);
    }
    std::stringbuf::str(&__p, &v37[14]);
    if (SBYTE3(v34) >= 0)
      v22 = (char *)&__p;
    else
      v22 = (char *)__p;
    v23 = sub_1000CDB4C(a1, v22);
    v24 = v23;
    if (SBYTE3(v34) < 0)
    {
      operator delete(__p);
      if (!v24)
      {
LABEL_46:
        *(_QWORD *)&v37[6] = v25;
        if (v39 < 0)
          operator delete(v38);
        std::streambuf::~streambuf(&v37[14]);
        std::ios::~ios(&v40);
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
      }
    }
    else if (!v23)
    {
      goto LABEL_46;
    }
    sqlite3_step(v24);
    sub_1000536D0(*(sqlite3 **)(a1 + 8), v24);
    goto LABEL_46;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
}

void sub_10063A50C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  sub_1018B38B4((uint64_t)&a22);
  sub_10187E514((uint64_t)&a12);
  _Unwind_Resume(a1);
}

BOOL sub_10063A57C(uint64_t a1, const char *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  size_t v8;
  _QWORD *v9;
  char *v10;
  sqlite3_stmt *v11;
  int v12;
  uint64_t v13;
  void *__p[2];
  char v16;
  _QWORD v17[2];
  uint64_t v18;
  _QWORD v19[10];
  char v20;
  _QWORD v21[21];
  __int16 v22;

  v4 = *(_QWORD *)(a1 + 16);
  v21[19] = v4;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v22 = 256;
  sub_100263E50((uint64_t)v17);
  v5 = sub_100263F7C(&v18, (uint64_t)"SELECT name FROM ", 17);
  v6 = sub_100263F7C(v5, (uint64_t)"sqlite_master", 13);
  v7 = sub_100263F7C(v6, (uint64_t)" WHERE name='", 13);
  v8 = strlen(a2);
  v9 = sub_100263F7C(v7, (uint64_t)a2, v8);
  sub_100263F7C(v9, (uint64_t)"';", 2);
  std::stringbuf::str(__p, v19);
  if (v16 >= 0)
    v10 = (char *)__p;
  else
    v10 = (char *)__p[0];
  v11 = sub_1000CDB4C(a1, v10);
  if (v16 < 0)
    operator delete(__p[0]);
  v12 = sqlite3_step(v11);
  sub_1000536D0(*(sqlite3 **)(a1 + 8), v11);
  *(_QWORD *)((char *)v17
  v18 = v13;
  if (v20 < 0)
    operator delete((void *)v19[8]);
  std::streambuf::~streambuf(v19);
  std::ios::~ios(v21);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v12 == 100;
}

void sub_10063A714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (a15 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a16);
  sub_10187E514(v16 - 72);
  _Unwind_Resume(a1);
}

uint64_t sub_10063A758(uint64_t a1, const char *a2, uint64_t *a3)
{
  uint64_t v6;
  NSObject *v7;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;

  v6 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  if (sub_10063A57C(a1, a2))
    sub_10063A8D4(a1, a2, *a3, (uint64_t)a3);
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v7 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2082;
    v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Table doesn't exist in database\", \"table\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  return 0;
}

void sub_10063A8B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_10063A8D4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  char *p_p;
  void *__p;
  char v13;
  uint8_t buf[8];
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;

  *(_QWORD *)a4 = "";
  *(_DWORD *)(a4 + 8) = 5;
  *(_WORD *)(a4 + 12) = 0;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 40) = 0;
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v7 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&buf[4] = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2081;
    v18 = a2;
    v19 = 2082;
    v20 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"getColumnInfo\", \"table\":%{private, location:escape_only}s, \"name\":%{public, location:escape_only}s}", buf, 0x26u);
  }
  sub_100263E50((uint64_t)buf);
  v8 = sub_100263F7C((const char **)((char *)&v16 + 6), (uint64_t)"PRAGMA table_info(", 18);
  v9 = strlen(a2);
  v10 = sub_100263F7C(v8, (uint64_t)a2, v9);
  LOBYTE(__p) = 41;
  sub_100263F7C(v10, (uint64_t)&__p, 1);
  std::stringbuf::str(&__p, (char *)&v18 + 4);
  if (v13 >= 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p;
  sub_1000CDA68(a1, p_p);
}

void sub_10063AD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a24);
  _Unwind_Resume(a1);
}

const char *sub_10063AD84(int a1)
{
  uint64_t v2;
  uint64_t v3;

  if (a1 == 1)
    return "INTEGER";
  v2 = 0;
  do
  {
    v3 = v2;
    v2 += 16;
  }
  while (v2 != 80 && *(_DWORD *)((char *)&unk_1021492C0 + v3 + 16) != a1);
  return *(const char **)((char *)&unk_1021492C0 + v3 + 24);
}

uint64_t sub_10063ADD0(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v5;
  NSObject *v6;
  size_t v7;
  _QWORD *v8;
  _QWORD *v9;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  const char **v24;
  _QWORD *v25;
  const char *v26;
  size_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  size_t v34;
  std::string *v35;
  std::string::size_type v36;
  _QWORD *v37;
  std::string *v38;
  sqlite3_stmt *v39;
  _QWORD *v40;
  std::string *v41;
  std::string::size_type v42;
  _QWORD *v43;
  _QWORD *v44;
  size_t v45;
  uint64_t v46;
  _QWORD *v47;
  size_t v48;
  uint64_t v49;
  _QWORD *v50;
  size_t v51;
  std::string *v52;
  sqlite3_stmt *v53;
  _QWORD *v54;
  size_t v55;
  std::string *v56;
  sqlite3_stmt *v57;
  _QWORD *v58;
  size_t v59;
  _QWORD *v60;
  _QWORD *v61;
  size_t v62;
  _QWORD *v63;
  size_t v64;
  uint64_t v65;
  _QWORD *v66;
  std::string *v67;
  std::string::size_type v68;
  std::string *v69;
  sqlite3_stmt *v70;
  _QWORD *v71;
  std::string *v72;
  std::string::size_type v73;
  std::string *v74;
  sqlite3_stmt *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  std::string __p;
  _QWORD v83[2];
  uint64_t v84;
  _QWORD v85[8];
  std::string v86;
  _QWORD v87[21];
  __int16 v88;
  char v89;
  uint8_t buf[8];
  __int16 v91;
  _BYTE v92[66];
  void *v93;
  char v94;
  uint64_t v95;

  v5 = *(_QWORD *)(a1 + 16);
  v87[19] = v5;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  v88 = 256;
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v6 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    v91 = 2082;
    *(_QWORD *)v92 = "";
    *(_WORD *)&v92[8] = 2081;
    *(_QWORD *)&v92[10] = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Re-recreating table to fix primary key\", \"table\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  if (a3)
  {
    if (*(_QWORD *)a3)
    {
      sub_100263E50((uint64_t)buf);
      v7 = strlen(a2);
      v8 = sub_100263F7C(&v92[6], (uint64_t)a2, v7);
      sub_100263F7C(v8, (uint64_t)"_tmp", 4);
      v80 = v5;
      sub_100263E50((uint64_t)v83);
      v9 = sub_100263F7C(&v84, (uint64_t)"CREATE TEMPORARY TABLE ", 23);
      std::stringbuf::str(&__p, &v92[14]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v12 = sub_100263F7C(v9, (uint64_t)p_p, size);
      v13 = sub_100263F7C(v12, (uint64_t)" (", 2);
      v14 = strlen(*(const char **)a3);
      v15 = sub_100263F7C(v13, *(_QWORD *)a3, v14);
      v89 = 32;
      v16 = sub_100263F7C(v15, (uint64_t)&v89, 1);
      v17 = *(_DWORD *)(a3 + 8);
      if (v17 == 1)
      {
        v18 = "INTEGER";
      }
      else
      {
        v19 = 0;
        do
        {
          v20 = v19;
          v19 += 16;
        }
        while (v19 != 80 && *(_DWORD *)((char *)&unk_1021492C0 + v20 + 16) != v17);
        v18 = *(const char **)((char *)&unk_1021492C0 + v20 + 24);
      }
      v21 = strlen(v18);
      sub_100263F7C(v16, (uint64_t)v18, v21);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v22 = a3 + 48;
      if (*(_QWORD *)(a3 + 48))
      {
        v23 = 1;
        v24 = (const char **)(a3 + 48);
        do
        {
          v25 = sub_100263F7C(&v84, (uint64_t)", ", 2);
          v26 = *v24;
          v27 = strlen(v26);
          v28 = sub_100263F7C(v25, (uint64_t)v26, v27);
          __p.__r_.__value_.__s.__data_[0] = 32;
          v29 = sub_100263F7C(v28, (uint64_t)&__p, 1);
          v30 = *(_DWORD *)(a3 + 48 * v23 + 8);
          v31 = "INTEGER";
          if (v30 != 1)
          {
            v32 = 0;
            do
            {
              v33 = v32;
              v32 += 16;
            }
            while (v32 != 80 && *(_DWORD *)((char *)&unk_1021492C0 + v33 + 16) != v30);
            v31 = *(const char **)((char *)&unk_1021492C0 + v33 + 24);
          }
          v34 = strlen(v31);
          sub_100263F7C(v29, (uint64_t)v31, v34);
          ++v23;
          v24 = (const char **)(a3 + 48 * v23);
        }
        while (*v24);
      }
      sub_10063B840(a3, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &__p;
      else
        v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v36 = __p.__r_.__value_.__l.__size_;
      v37 = sub_100263F7C(&v84, (uint64_t)v35, v36);
      v89 = 41;
      sub_100263F7C(v37, (uint64_t)&v89, 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      std::stringbuf::str(&__p, v85);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = &__p;
      else
        v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v39 = sub_1000CDB4C(a1, (char *)v38);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_10023C9B0(a1, v39);
      sub_1000536D0(*(sqlite3 **)(a1 + 8), v39);
      memset(&__p, 0, sizeof(__p));
      std::string::operator=(&v86, &__p);
      sub_1004ADDC8((uint64_t)v85);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v40 = sub_100263F7C(&v84, (uint64_t)"INSERT INTO ", 12);
      std::stringbuf::str(&__p, &v92[14]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = &__p;
      else
        v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v42 = __p.__r_.__value_.__l.__size_;
      v43 = sub_100263F7C(v40, (uint64_t)v41, v42);
      v44 = sub_100263F7C(v43, (uint64_t)" SELECT ", 8);
      v45 = strlen(*(const char **)a3);
      sub_100263F7C(v44, *(_QWORD *)a3, v45);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (*(_QWORD *)v22)
      {
        v46 = a3 + 48;
        do
        {
          v47 = sub_100263F7C(&v84, (uint64_t)", ", 2);
          v48 = strlen(*(const char **)v46);
          sub_100263F7C(v47, *(_QWORD *)v46, v48);
          v49 = *(_QWORD *)(v46 + 48);
          v46 += 48;
        }
        while (v49);
      }
      v50 = sub_100263F7C(&v84, (uint64_t)" FROM ", 6);
      v51 = strlen(a2);
      sub_100263F7C(v50, (uint64_t)a2, v51);
      std::stringbuf::str(&__p, v85);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v52 = &__p;
      else
        v52 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v53 = sub_1000CDB4C(a1, (char *)v52);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_10023C9B0(a1, v53);
      sub_1000536D0(*(sqlite3 **)(a1 + 8), v53);
      memset(&__p, 0, sizeof(__p));
      std::string::operator=(&v86, &__p);
      sub_1004ADDC8((uint64_t)v85);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v54 = sub_100263F7C(&v84, (uint64_t)"DROP TABLE ", 11);
      v55 = strlen(a2);
      sub_100263F7C(v54, (uint64_t)a2, v55);
      std::stringbuf::str(&__p, v85);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v56 = &__p;
      else
        v56 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v57 = sub_1000CDB4C(a1, (char *)v56);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_10023C9B0(a1, v57);
      sub_1000536D0(*(sqlite3 **)(a1 + 8), v57);
      sub_10063A0EC(a1, a2, (const char **)a3);
      memset(&__p, 0, sizeof(__p));
      std::string::operator=(&v86, &__p);
      sub_1004ADDC8((uint64_t)v85);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v58 = sub_100263F7C(&v84, (uint64_t)"INSERT INTO ", 12);
      v59 = strlen(a2);
      v60 = sub_100263F7C(v58, (uint64_t)a2, v59);
      v61 = sub_100263F7C(v60, (uint64_t)" SELECT ", 8);
      v62 = strlen(*(const char **)a3);
      sub_100263F7C(v61, *(_QWORD *)a3, v62);
      if (*(_QWORD *)v22)
      {
        do
        {
          v63 = sub_100263F7C(&v84, (uint64_t)", ", 2);
          v64 = strlen(*(const char **)v22);
          sub_100263F7C(v63, *(_QWORD *)v22, v64);
          v65 = *(_QWORD *)(v22 + 48);
          v22 += 48;
        }
        while (v65);
      }
      v66 = sub_100263F7C(&v84, (uint64_t)" FROM ", 6);
      std::stringbuf::str(&__p, &v92[14]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v67 = &__p;
      else
        v67 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v68 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v68 = __p.__r_.__value_.__l.__size_;
      sub_100263F7C(v66, (uint64_t)v67, v68);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      std::stringbuf::str(&__p, v85);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v69 = &__p;
      else
        v69 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v70 = sub_1000CDB4C(a1, (char *)v69);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_10023C9B0(a1, v70);
      sub_1000536D0(*(sqlite3 **)(a1 + 8), v70);
      memset(&__p, 0, sizeof(__p));
      std::string::operator=(&v86, &__p);
      sub_1004ADDC8((uint64_t)v85);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v71 = sub_100263F7C(&v84, (uint64_t)"DROP TABLE ", 11);
      std::stringbuf::str(&__p, &v92[14]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v72 = &__p;
      else
        v72 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v73 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v73 = __p.__r_.__value_.__l.__size_;
      sub_100263F7C(v71, (uint64_t)v72, v73);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      std::stringbuf::str(&__p, v85);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v74 = &__p;
      else
        v74 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v75 = sub_1000CDB4C(a1, (char *)v74);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_10023C9B0(a1, v75);
      sub_1000536D0(*(sqlite3 **)(a1 + 8), v75);
      *(_QWORD *)((char *)v83
                            - 24)) = v77;
      v84 = v78;
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v86.__r_.__value_.__l.__data_);
      std::streambuf::~streambuf(v85);
      std::ios::~ios(v87);
      *(_QWORD *)buf = v76;
      *(_QWORD *)&buf[*(_QWORD *)(v76 - 24)] = v77;
      *(_QWORD *)&v92[6] = v78;
      if (v94 < 0)
        operator delete(v93);
      std::streambuf::~streambuf(&v92[14]);
      std::ios::~ios(&v95);
      a3 = 1;
      v5 = v80;
    }
    else
    {
      a3 = 0;
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  return a3;
}

void sub_10063B778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  if (a20 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a21);
  sub_1018B38B4((uint64_t)&a60);
  sub_10187E514((uint64_t)&a56);
  _Unwind_Resume(a1);
}

uint64_t sub_10063B840@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;
  _QWORD *v8;
  const char *v9;
  size_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;
  char v21;

  v2 = result;
  if (!*(_BYTE *)(result + 12))
  {
    v6 = 1;
    v5 = result;
    while (*(_QWORD *)v5)
    {
      v7 = *(unsigned __int8 *)(v5 + 60);
      ++v6;
      v5 += 48;
      if (v7)
      {
        v4 = v6;
        goto LABEL_7;
      }
    }
    goto LABEL_15;
  }
  v4 = 1;
  v5 = result;
LABEL_7:
  if (!*(_QWORD *)v5)
  {
LABEL_15:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return result;
  }
  sub_100263E50((uint64_t)v16);
  v8 = sub_100263F7C(&v17, (uint64_t)", PRIMARY KEY (", 15);
  v9 = *(const char **)v5;
  v10 = strlen(v9);
  sub_100263F7C(v8, (uint64_t)v9, v10);
  v11 = v2 + 48 * v4;
  if (*(_QWORD *)v11)
  {
    do
    {
      if (*(_BYTE *)(v11 + 12))
      {
        v12 = sub_100263F7C(&v17, (uint64_t)", ", 2);
        v13 = strlen(*(const char **)v11);
        sub_100263F7C(v12, *(_QWORD *)v11, v13);
      }
      v14 = *(_QWORD *)(v11 + 48);
      v11 += 48;
    }
    while (v14);
  }
  v21 = 41;
  sub_100263F7C(&v17, (uint64_t)&v21, 1);
  std::stringbuf::str(a2, v18);
  *(_QWORD *)((char *)v16
  v17 = v15;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf(v18);
  return std::ios::~ios(&v20);
}

void sub_10063B9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1018B38B4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_10063BA08(uint64_t a1, const char *a2)
{
  uint64_t *v2;
  sqlite3 *v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  NSObject *v10;
  int v12;
  sqlite3 *ppDb[3];
  __int16 v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  _QWORD v20[2];

  v5 = *(sqlite3 **)(a1 + 16);
  ppDb[1] = v5;
  (*(void (**)(sqlite3 *))(*(_QWORD *)v5 + 16))(v5);
  v14 = 256;
  if (!a2)
  {
    sub_101902834();
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteDatabase.mm", 1171, "backupToFile");
    __break(1u);
LABEL_21:
    dispatch_once(&qword_1022A0280, &stru_102149330);
LABEL_4:
    v6 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289283;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 2081;
      v20[0] = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unable to open\", \"path\":%{private, location:escape_only}s}", buf, 0x1Cu);
      if (v2[80] != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v7 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289283;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 2081;
      v20[0] = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unable to open", "{\"msg%{public}.0s\":\"Unable to open\", \"path\":%{private, location:escape_only}s}", buf, 0x1Cu);
    }
    v8 = 1;
    goto LABEL_19;
  }
  ppDb[0] = 0;
  if (sqlite3_open(a2, ppDb))
  {
    v2 = &qword_1022A0000;
    if (qword_1022A0280 == -1)
      goto LABEL_4;
    goto LABEL_21;
  }
  v12 = sqlite3_file_control(ppDb[0], 0, 102, *(void **)(a1 + 8));
  if (v12)
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v9 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289538;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 1040;
      LODWORD(v20[0]) = 4;
      WORD2(v20[0]) = 2098;
      *(_QWORD *)((char *)v20 + 6) = &v12;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Did not successfully finish backup\", \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x22u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v10 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289538;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 1040;
      LODWORD(v20[0]) = 4;
      WORD2(v20[0]) = 2098;
      *(_QWORD *)((char *)v20 + 6) = &v12;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Did not successfully finish backup", "{\"msg%{public}.0s\":\"Did not successfully finish backup\", \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x22u);
    }
  }
  sqlite3_close(ppDb[0]);
  v8 = v12;
LABEL_19:
  (*(void (**)(sqlite3 *))(*(_QWORD *)v5 + 24))(v5);
  return v8 == 0;
}

void sub_10063BDA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10063BDD0(uint64_t a1, const char *a2, const char *a3, const char *a4, sqlite3_int64 a5, int a6, uint64_t a7)
{
  sqlite3_blob *v14;
  NSObject *v15;
  int v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  unsigned int v23;
  sqlite3_blob *ppBlob[3];
  __int16 v25;
  uint8_t buf[8];
  __int16 v27;
  const char *v28;
  __int16 v29;
  _BYTE v30[18];
  __int16 v31;
  sqlite3_int64 v32;

  v14 = *(sqlite3_blob **)(a1 + 16);
  ppBlob[1] = v14;
  (*(void (**)(sqlite3_blob *))(*(_QWORD *)v14 + 16))(v14);
  v25 = 256;
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v15 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)&buf[4] = 0;
    v27 = 2082;
    v28 = "";
    v29 = 2081;
    *(_QWORD *)v30 = a3;
    *(_WORD *)&v30[8] = 2081;
    *(_QWORD *)&v30[10] = a4;
    v31 = 2049;
    v32 = a5;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Opening a blob for read\", \"tableName\":%{private, location:escape_only}s, \"colname\":%{private, location:escape_only}s, \"row\":%{private}llu}", buf, 0x30u);
  }
  ppBlob[0] = 0;
  v16 = sqlite3_blob_open(*(sqlite3 **)(a1 + 8), a2, a3, a4, a5, a6 ^ 1, ppBlob);
  v23 = v16;
  if (v16)
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v17 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      v27 = 2082;
      v28 = "";
      v29 = 1040;
      *(_DWORD *)v30 = 4;
      *(_WORD *)&v30[4] = 2098;
      *(_QWORD *)&v30[6] = &v23;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"failed to open blob\", \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x22u);
      v16 = v23;
    }
    sub_1006361F0(*(sqlite3 **)(a1 + 8), (a1 + 96), *(unsigned __int8 *)(a1 + 56), v16);
    sqlite3_blob_close(ppBlob[0]);
    v18 = v23;
  }
  else
  {
    *(sqlite3_blob **)buf = ppBlob[0];
    v19 = *(_QWORD *)(a7 + 24);
    if (!v19)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v19 + 48))(v19, buf);
    v18 = sqlite3_blob_close(ppBlob[0]);
    if ((_DWORD)v18)
    {
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
      v20 = off_1022A0288;
      if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        v27 = 2082;
        v28 = "";
        v29 = 1026;
        *(_DWORD *)v30 = v18;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"error when closing blob\", \"code\":%{public}d}", buf, 0x18u);
        if (qword_1022A0280 != -1)
          dispatch_once(&qword_1022A0280, &stru_102149330);
      }
      v21 = off_1022A0288;
      if (os_signpost_enabled((os_log_t)off_1022A0288))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        v27 = 2082;
        v28 = "";
        v29 = 1026;
        *(_DWORD *)v30 = v18;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "error when closing blob", "{\"msg%{public}.0s\":\"error when closing blob\", \"code\":%{public}d}", buf, 0x18u);
      }
      sub_1006361F0(*(sqlite3 **)(a1 + 8), (a1 + 96), *(unsigned __int8 *)(a1 + 56), v18);
    }
  }
  (*(void (**)(sqlite3_blob *))(*(_QWORD *)v14 + 24))(v14);
  return v18;
}

void sub_10063C1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10063C1D4(const char **a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  const char *v7;
  uint64_t v8;
  int v9;
  const char **v10;
  size_t v11;
  size_t v12;
  std::string *v13;
  const void *v14;
  char *v15;
  size_t v16;
  std::string *v17;
  const void *v18;
  int v19;
  const std::string::value_type *v20;
  uint64_t v21;
  uint64_t v22;
  std::string *v23;
  std::string::size_type v24;
  char v25;
  std::string v27;
  _QWORD v28[2];

  sub_1015A2E04((_QWORD *)a4, "");
  v7 = *a1;
  if (*a1)
  {
    v8 = 0;
    v9 = 0;
    v10 = a1;
    do
    {
      if (v8)
      {
        std::string::append((std::string *)a4, ", ");
        v7 = *v10;
      }
      if (*(char *)(a4 + 23) >= 0)
        v11 = *(unsigned __int8 *)(a4 + 23);
      else
        v11 = *(_QWORD *)(a4 + 8);
      v12 = strlen(v7);
      sub_100259584((uint64_t)&v27, v11 + v12);
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v27;
      else
        v13 = (std::string *)v27.__r_.__value_.__r.__words[0];
      if (v11)
      {
        if (*(char *)(a4 + 23) >= 0)
          v14 = (const void *)a4;
        else
          v14 = *(const void **)a4;
        memmove(v13, v14, v11);
      }
      v15 = (char *)v13 + v11;
      if (v12)
        memmove(v15, v7, v12);
      v15[v12] = 0;
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      *(std::string *)a4 = v27;
      if (a2)
      {
        if (*(char *)(a4 + 23) >= 0)
          v16 = *(unsigned __int8 *)(a4 + 23);
        else
          v16 = *(_QWORD *)(a4 + 8);
        sub_100259584((uint64_t)&v27, v16 + 1);
        if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v17 = &v27;
        else
          v17 = (std::string *)v27.__r_.__value_.__r.__words[0];
        if (v16)
        {
          if (*(char *)(a4 + 23) >= 0)
            v18 = (const void *)a4;
          else
            v18 = *(const void **)a4;
          memmove(v17, v18, v16);
        }
        *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + v16) = 32;
        v19 = (int)a1[6 * v8 + 1];
        v20 = "INTEGER";
        if (v19 != 1)
        {
          v21 = 0;
          do
          {
            v22 = v21;
            v21 += 16;
          }
          while (v21 != 80 && *(_DWORD *)((char *)&unk_1021492C0 + v22 + 16) != v19);
          v20 = *(const std::string::value_type **)((char *)&unk_1021492C0 + v22 + 24);
        }
        v23 = std::string::append(&v27, v20);
        v24 = v23->__r_.__value_.__r.__words[0];
        v28[0] = v23->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v28 + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
        v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        if (*(char *)(a4 + 23) < 0)
          operator delete(*(void **)a4);
        *(_QWORD *)a4 = v24;
        *(_QWORD *)(a4 + 8) = v28[0];
        *(_QWORD *)(a4 + 15) = *(_QWORD *)((char *)v28 + 7);
        *(_BYTE *)(a4 + 23) = v25;
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v27.__r_.__value_.__l.__data_);
      }
      if (((a3 ^ 1 | v9) & 1) == 0)
      {
        if (BYTE4(a1[6 * v8 + 1]))
        {
          std::string::append((std::string *)a4, " PRIMARY KEY");
          if (BYTE5(a1[6 * v8 + 1]))
            std::string::append((std::string *)a4, " AUTOINCREMENT");
          v9 = 1;
        }
        else
        {
          v9 = 0;
        }
      }
      ++v8;
      v10 = &a1[6 * v8];
      v7 = *v10;
    }
    while (*v10);
  }
}

void sub_10063C4B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10063C4F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  size_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint8_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  uint64_t v29;
  _QWORD *v31;
  _QWORD v32[2];
  uint64_t v33;
  _QWORD v34[10];
  char v35;
  uint64_t v36;
  uint8_t buf[8];
  _BYTE v38[10];
  unsigned __int8 v39;

  sub_100263E50((uint64_t)v32);
  if (a2)
  {
    v31 = a3;
    if (*(_QWORD *)a2)
    {
      do
      {
        if (*(_BYTE *)(a2 + 40))
        {
          if (!sub_10064037C(a1, a2))
          {
            if (qword_1022A0280 != -1)
              dispatch_once(&qword_1022A0280, &stru_102149330);
            a3 = v31;
            v27 = off_1022A0288;
            if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
            {
              *(_QWORD *)buf = 68289026;
              *(_WORD *)v38 = 2082;
              *(_QWORD *)&v38[2] = "";
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Foreign key reference and index check failed\"}", buf, 0x12u);
              if (qword_1022A0280 != -1)
                dispatch_once(&qword_1022A0280, &stru_102149330);
            }
            v28 = off_1022A0288;
            if (os_signpost_enabled((os_log_t)off_1022A0288))
            {
              *(_QWORD *)buf = 68289026;
              *(_WORD *)v38 = 2082;
              *(_QWORD *)&v38[2] = "";
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v28, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Foreign key reference and index check failed", "{\"msg%{public}.0s\":\"Foreign key reference and index check failed\"}", buf, 0x12u);
            }
            goto LABEL_34;
          }
          v7 = *(const char **)(a2 + 16);
          v6 = *(const char **)(a2 + 24);
          v8 = *(int *)(a2 + 32);
          v9 = *(int *)(a2 + 36);
          v10 = sub_100263F7C(&v33, (uint64_t)", FOREIGN KEY(", 14);
          v11 = strlen(*(const char **)a2);
          v12 = sub_100263F7C(v10, *(_QWORD *)a2, v11);
          v13 = sub_100263F7C(v12, (uint64_t)") REFERENCES ", 13);
          v14 = strlen(v7);
          v15 = sub_100263F7C(v13, (uint64_t)v7, v14);
          v16 = sub_100263F7C(v15, (uint64_t)"(", 1);
          v17 = strlen(v6);
          v18 = sub_100263F7C(v16, (uint64_t)v6, v17);
          sub_100263F7C(v18, (uint64_t)")", 1);
          v19 = sub_100263F7C(&v33, (uint64_t)" ON DELETE ", 11);
          sub_1015A2E04(buf, (&off_1021493B0)[v8]);
          if ((v39 & 0x80u) == 0)
            v20 = buf;
          else
            v20 = *(uint8_t **)buf;
          if ((v39 & 0x80u) == 0)
            v21 = v39;
          else
            v21 = *(_QWORD *)v38;
          sub_100263F7C(v19, (uint64_t)v20, v21);
          if ((char)v39 < 0)
            operator delete(*(void **)buf);
          v22 = sub_100263F7C(&v33, (uint64_t)" ON UPDATE ", 11);
          sub_1015A2E04(buf, (&off_1021493B0)[v9]);
          if ((v39 & 0x80u) == 0)
            v23 = buf;
          else
            v23 = *(uint8_t **)buf;
          if ((v39 & 0x80u) == 0)
            v24 = v39;
          else
            v24 = *(_QWORD *)v38;
          sub_100263F7C(v22, (uint64_t)v23, v24);
          if ((char)v39 < 0)
            operator delete(*(void **)buf);
        }
        v25 = *(_QWORD *)(a2 + 48);
        a2 += 48;
      }
      while (v25);
    }
    std::stringbuf::str(v31, v34);
  }
  else
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v26 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
    {
      *(_QWORD *)buf = 68289026;
      *(_WORD *)v38 = 2082;
      *(_QWORD *)&v38[2] = "";
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"getForeignKeyDefinitionString: NULL column definition\"}", buf, 0x12u);
    }
LABEL_34:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  *(_QWORD *)((char *)v32
  v33 = v29;
  if (v35 < 0)
    operator delete((void *)v34[8]);
  std::streambuf::~streambuf(v34);
  return std::ios::~ios(&v36);
}

void sub_10063C934(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10063C97C(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  sqlite3_stmt *v9;
  int v10;
  char *v11;
  char *v12;
  NSObject *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  int v18;
  uint64_t v19;
  __int16 v20;
  _BYTE buf[28];
  __int16 v22;
  _QWORD *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int *v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  void *v31;

  v8 = *(_QWORD *)(a1 + 16);
  v19 = v8;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  v20 = 256;
  v9 = sub_10063CC1C(a1, (uint64_t)off_1021491C8, "TableInfo", "TableName");
  sub_1000C9E20(v9, 1, a2);
  v10 = sqlite3_step(v9);
  v18 = v10;
  if (v10 == 100)
  {
    v11 = (char *)sqlite3_column_text(v9, 0);
    sub_1015A2E04(buf, v11);
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(_OWORD *)a3 = *(_OWORD *)buf;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)&buf[16];
    v12 = (char *)sqlite3_column_text(v9, 1);
    sub_1015A2E04(buf, v12);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(_OWORD *)a4 = *(_OWORD *)buf;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)&buf[16];
  }
  sub_1000536D0(*(sqlite3 **)(a1 + 8), v9);
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v13 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    v14 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v14 = (_QWORD *)*v14;
    if (*(char *)(a3 + 23) >= 0)
      v15 = (void *)a3;
    else
      v15 = *(void **)a3;
    if (*(char *)(a4 + 23) >= 0)
      v16 = (void *)a4;
    else
      v16 = *(void **)a4;
    *(_DWORD *)buf = 68290563;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2081;
    *(_QWORD *)&buf[20] = a2;
    v22 = 2082;
    v23 = v14;
    v24 = 1040;
    v25 = 4;
    v26 = 2098;
    v27 = &v18;
    v28 = 2082;
    v29 = v15;
    v30 = 2081;
    v31 = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"version and serial number\", \"table\":%{private, location:escape_only}s, \"path\":%{public, location:escape_only}s, \"rc\":%{public, location:SqliteResult}.*P, \"version\":%{public, location:escape_only}s, \"serial number\":%{private, location:escape_only}s}", buf, 0x4Au);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  return v10 == 100;
}

void sub_10063CBE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

sqlite3_stmt *sub_10063CC1C(uint64_t a1, uint64_t a2, const char *a3, const char *a4)
{
  uint64_t v8;
  _QWORD *v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  size_t v19;
  _QWORD *v20;
  char *v21;
  sqlite3_stmt *v22;
  uint64_t v23;
  NSObject *v24;
  const char *v25;
  NSObject *v26;
  const char *v27;
  void *__p[2];
  char v30;
  uint64_t v31;
  __int16 v32;
  uint8_t buf[8];
  __int16 v34;
  _BYTE v35[28];
  __int16 v36;
  const char *v37;
  void *v38;
  char v39;
  uint64_t v40;

  v8 = *(_QWORD *)(a1 + 16);
  v31 = v8;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  v32 = 256;
  if (a3 && a4 && *(_QWORD *)a2)
  {
    sub_100263E50((uint64_t)buf);
    v9 = sub_100263F7C(&v35[6], (uint64_t)"SELECT ", 7);
    v10 = strlen(*(const char **)a2);
    sub_100263F7C(v9, *(_QWORD *)a2, v10);
    if (*(_QWORD *)(a2 + 8))
    {
      v11 = (_QWORD *)(a2 + 16);
      do
      {
        v12 = sub_100263F7C(&v35[6], (uint64_t)", ", 2);
        v13 = strlen((const char *)*(v11 - 1));
        sub_100263F7C(v12, *(v11 - 1), v13);
      }
      while (*v11++);
    }
    v15 = sub_100263F7C(&v35[6], (uint64_t)" FROM ", 6);
    v16 = strlen(a3);
    v17 = sub_100263F7C(v15, (uint64_t)a3, v16);
    v18 = sub_100263F7C(v17, (uint64_t)" WHERE ", 7);
    v19 = strlen(a4);
    v20 = sub_100263F7C(v18, (uint64_t)a4, v19);
    sub_100263F7C(v20, (uint64_t)"=?", 2);
    std::stringbuf::str(__p, &v35[14]);
    if (v30 >= 0)
      v21 = (char *)__p;
    else
      v21 = (char *)__p[0];
    v22 = sub_1000CDB4C(a1, v21);
    if (v30 < 0)
      operator delete(__p[0]);
    *(_QWORD *)&v35[6] = v23;
    if (v39 < 0)
      operator delete(v38);
    std::streambuf::~streambuf(&v35[14]);
    std::ios::~ios(&v40);
  }
  else
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v24 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      v25 = *(const char **)a2;
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&buf[4] = 0;
      v34 = 2082;
      *(_QWORD *)v35 = "";
      *(_WORD *)&v35[8] = 2081;
      *(_QWORD *)&v35[10] = a3;
      *(_WORD *)&v35[18] = 2082;
      *(_QWORD *)&v35[20] = v25;
      v36 = 2082;
      v37 = a4;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid parameters\", \"table\":%{private, location:escape_only}s, \"columnNames[0]\":%{public, location:escape_only}s, \"key\":%{public, location:escape_only}s}", buf, 0x30u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v26 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      v27 = *(const char **)a2;
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&buf[4] = 0;
      v34 = 2082;
      *(_QWORD *)v35 = "";
      *(_WORD *)&v35[8] = 2081;
      *(_QWORD *)&v35[10] = a3;
      *(_WORD *)&v35[18] = 2082;
      *(_QWORD *)&v35[20] = v27;
      v36 = 2082;
      v37 = a4;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v26, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid parameters", "{\"msg%{public}.0s\":\"Invalid parameters\", \"table\":%{private, location:escape_only}s, \"columnNames[0]\":%{public, location:escape_only}s, \"key\":%{public, location:escape_only}s}", buf, 0x30u);
    }
    v22 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  return v22;
}

void sub_10063CFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a18);
  sub_10187E514((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10063D030(uint64_t a1, char *a2, uint64_t a3)
{
  char *v4;
  uint64_t v5;
  void *__p[2];
  uint64_t v8;
  void *v9[2];
  uint64_t v10;

  v9[0] = 0;
  v9[1] = 0;
  v10 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v8 = 0;
  if (sub_10063C97C(a1, a2, (uint64_t)v9, (uint64_t)__p))
  {
    if (v10 >= 0)
      v4 = (char *)v9;
    else
      v4 = (char *)v9[0];
    v5 = sub_10063D0EC(v4, a3) >> 31;
  }
  else
  {
    v5 = 1;
  }
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[0]);
  return v5;
}

void sub_10063D0C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10063D0EC(char *__s, uint64_t a2)
{
  unsigned int v3;
  void (__cdecl **v4)(std::basic_stringstream<char> *__hidden);
  void (__cdecl **v5)(std::basic_stringstream<char> *__hidden);
  void (__cdecl **v6)(std::basic_stringstream<char> *__hidden);
  int v8;
  std::string v9;
  std::string __p;
  _QWORD v11[10];
  char v12;
  uint64_t v13;
  void (__cdecl **v14[3])(std::basic_stringstream<char> *__hidden);
  _QWORD v15[10];
  char v16;
  uint64_t v17;

  sub_1015A2E04(&__p, __s);
  sub_100512D24(v14, &__p, 24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_1015A2E04(&v9, (char *)a2);
  sub_100512D24((void (__cdecl ***)(std::basic_stringstream<char> *__hidden))&__p, &v9, 24);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  while (!*(_DWORD *)((char *)&v15[1] + (unint64_t)*(v14[0] - 3))
       || !*(_DWORD *)((char *)&v11[1] + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)))
  {
    LODWORD(v9.__r_.__value_.__l.__data_) = 0;
    std::istream::operator>>(v14, &v9);
    std::istream::get(v14);
    v8 = 0;
    std::istream::operator>>(&__p, &v8);
    std::istream::get(&__p);
    if (v8 < SLODWORD(v9.__r_.__value_.__l.__data_))
      v3 = 1;
    else
      v3 = a2;
    if (SLODWORD(v9.__r_.__value_.__l.__data_) < v8)
      a2 = 0xFFFFFFFFLL;
    else
      a2 = v3;
    if (v8 != LODWORD(v9.__r_.__value_.__l.__data_))
      goto LABEL_16;
  }
  a2 = 0;
LABEL_16:
  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                                        - 24)) = (std::string::size_type)v6;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v5;
  if (v12 < 0)
    operator delete((void *)v11[8]);
  std::streambuf::~streambuf(v11);
  std::ios::~ios(&v13);
  v14[0] = v4;
  *(void (__cdecl ***)(std::basic_stringstream<char> *__hidden))((char *)v14 + (_QWORD)*(v4 - 3)) = v6;
  v14[2] = v5;
  if (v16 < 0)
    operator delete((void *)v15[8]);
  std::streambuf::~streambuf(v15);
  std::ios::~ios(&v17);
  return a2;
}

void sub_10063D2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a54);
  _Unwind_Resume(a1);
}

uint64_t sub_10063D314(uint64_t a1, char *a2)
{
  sqlite3_stmt *v4;
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v4 = sub_1000CDB4C(a1, a2);
  sub_10063E610(a1, (uint64_t)v4);
  sub_100E81598(&v7, a1, (uint64_t)v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  return v7;
}

void sub_10063D3A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10063D3BC(uint64_t a1, char *a2)
{
  uint64_t v4;
  sqlite3_stmt *v5;
  char *v6;
  char *v7;
  NSObject *v8;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;
  uint64_t v14;
  __int16 v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  char *v21;

  v4 = *(_QWORD *)(a1 + 16);
  v14 = v4;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v15 = 256;
  sub_100197040();
  sub_10075AA9C((uint64_t)v12);
  sub_100197040();
  sub_10075ACDC((uint64_t)__p);
  v5 = sub_10063D5EC(a1, "TableInfo", (const char **)off_1021491E0, 1);
  sub_1000C9E20(v5, 1, a2);
  if (v13 >= 0)
    v6 = (char *)v12;
  else
    v6 = (char *)v12[0];
  sub_1000C9E20(v5, 2, v6);
  if (v11 >= 0)
    v7 = (char *)__p;
  else
    v7 = (char *)__p[0];
  sub_1000C9E20(v5, 3, v7);
  sub_10023C9B0(a1, v5);
  sub_1000536D0(*(sqlite3 **)(a1 + 8), v5);
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v8 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289283;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2081;
    v21 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Created row in TableInfo\", \"table\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  if (v11 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_10063D598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

sqlite3_stmt *sub_10063D5EC(uint64_t a1, const char *a2, const char **a3, int a4)
{
  uint64_t v8;
  _QWORD *v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  size_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  int v18;
  NSObject *v19;
  const char *v20;
  NSObject *v21;
  const char *v22;
  sqlite3_stmt *v23;
  int v24;
  char *v25;
  uint64_t v26;
  void *__p[2];
  char v29;
  uint64_t v30;
  __int16 v31;
  uint8_t buf[8];
  __int16 v33;
  _BYTE v34[56];
  void *v35;
  char v36;
  uint64_t v37;

  v8 = *(_QWORD *)(a1 + 16);
  v30 = v8;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  v31 = 256;
  if (a2 && *a3)
  {
    sub_100263E50((uint64_t)buf);
    sub_100263F7C(&v34[6], (uint64_t)"INSERT ", 7);
    if (a4)
      sub_100263F7C(&v34[6], (uint64_t)"OR REPLACE ", 11);
    v9 = sub_100263F7C(&v34[6], (uint64_t)"INTO ", 5);
    v10 = strlen(a2);
    v11 = sub_100263F7C(v9, (uint64_t)a2, v10);
    v12 = sub_100263F7C(v11, (uint64_t)" (", 2);
    v13 = strlen(*a3);
    sub_100263F7C(v12, (uint64_t)*a3, v13);
    if (a3[1])
    {
      v14 = 0;
      do
      {
        v15 = sub_100263F7C(&v34[6], (uint64_t)", ", 2);
        v16 = strlen(a3[v14 + 1]);
        sub_100263F7C(v15, (uint64_t)a3[v14 + 1], v16);
      }
      while (a3[v14++ + 2]);
      v18 = v14 + 1;
    }
    else
    {
      v18 = 1;
    }
    sub_100263F7C(&v34[6], (uint64_t)") VALUES (?", 11);
    if (v18 >= 2)
    {
      v24 = v18 + 1;
      do
      {
        sub_100263F7C(&v34[6], (uint64_t)", ?", 3);
        --v24;
      }
      while (v24 > 2);
    }
    LOBYTE(__p[0]) = 41;
    sub_100263F7C(&v34[6], (uint64_t)__p, 1);
    std::stringbuf::str(__p, &v34[14]);
    if (v29 >= 0)
      v25 = (char *)__p;
    else
      v25 = (char *)__p[0];
    v23 = sub_1000CDB4C(a1, v25);
    if (v29 < 0)
      operator delete(__p[0]);
    *(_QWORD *)&v34[6] = v26;
    if (v36 < 0)
      operator delete(v35);
    std::streambuf::~streambuf(&v34[14]);
    std::ios::~ios(&v37);
  }
  else
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v19 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      v20 = *a3;
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v33 = 2082;
      *(_QWORD *)v34 = "";
      *(_WORD *)&v34[8] = 2081;
      *(_QWORD *)&v34[10] = a2;
      *(_WORD *)&v34[18] = 2082;
      *(_QWORD *)&v34[20] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid parameters\", \"table\":%{private, location:escape_only}s, \"columnNames[0]\":%{public, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v21 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      v22 = *a3;
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v33 = 2082;
      *(_QWORD *)v34 = "";
      *(_WORD *)&v34[8] = 2081;
      *(_QWORD *)&v34[10] = a2;
      *(_WORD *)&v34[18] = 2082;
      *(_QWORD *)&v34[20] = v22;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid parameters", "{\"msg%{public}.0s\":\"Invalid parameters\", \"table\":%{private, location:escape_only}s, \"columnNames[0]\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    v23 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  return v23;
}

void sub_10063D9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a18);
  sub_10187E514((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10063DA50(uint64_t a1, char *a2)
{
  sqlite3_stmt *v4;
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v4 = sub_10063DB08(a1, "TableInfo", "TableName");
  sub_1000C9E20(v4, 1, a2);
  sub_10023C9B0(a1, v4);
  sub_1000536D0(*(sqlite3 **)(a1 + 8), v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
}

void sub_10063DAF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

sqlite3_stmt *sub_10063DB08(uint64_t a1, const char *a2, const char *a3)
{
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  char *v13;
  sqlite3_stmt *v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  void *__p[2];
  char v20;
  uint64_t v21;
  __int16 v22;
  uint8_t buf[8];
  __int16 v24;
  _BYTE v25[56];
  void *v26;
  char v27;
  uint64_t v28;

  v6 = *(_QWORD *)(a1 + 16);
  v21 = v6;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v22 = 256;
  if (a2 && a3)
  {
    sub_100263E50((uint64_t)buf);
    v7 = sub_100263F7C(&v25[6], (uint64_t)"DELETE FROM ", 12);
    v8 = strlen(a2);
    v9 = sub_100263F7C(v7, (uint64_t)a2, v8);
    v10 = sub_100263F7C(v9, (uint64_t)" WHERE ", 7);
    v11 = strlen(a3);
    v12 = sub_100263F7C(v10, (uint64_t)a3, v11);
    sub_100263F7C(v12, (uint64_t)"=?", 2);
    std::stringbuf::str(__p, &v25[14]);
    if (v20 >= 0)
      v13 = (char *)__p;
    else
      v13 = (char *)__p[0];
    v14 = sub_1000CDB4C(a1, v13);
    if (v20 < 0)
      operator delete(__p[0]);
    *(_QWORD *)&v25[6] = v15;
    if (v27 < 0)
      operator delete(v26);
    std::streambuf::~streambuf(&v25[14]);
    std::ios::~ios(&v28);
  }
  else
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v16 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v24 = 2082;
      *(_QWORD *)v25 = "";
      *(_WORD *)&v25[8] = 2081;
      *(_QWORD *)&v25[10] = a2;
      *(_WORD *)&v25[18] = 2082;
      *(_QWORD *)&v25[20] = a3;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid parameters\", \"table\":%{private, location:escape_only}s, \"key\":%{public, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v17 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v24 = 2082;
      *(_QWORD *)v25 = "";
      *(_WORD *)&v25[8] = 2081;
      *(_QWORD *)&v25[10] = a2;
      *(_WORD *)&v25[18] = 2082;
      *(_QWORD *)&v25[20] = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid parameters", "{\"msg%{public}.0s\":\"Invalid parameters\", \"table\":%{private, location:escape_only}s, \"key\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    v14 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  return v14;
}

void sub_10063DE10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a18);
  sub_10187E514((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10063DE60(uint64_t a1, char *a2)
{
  uint64_t v4;
  sqlite3_stmt *v5;
  char *v6;
  void *__p[2];
  char v9;
  uint64_t v10;
  __int16 v11;

  v4 = *(_QWORD *)(a1 + 16);
  v10 = v4;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v11 = 256;
  v5 = sub_10063DF84(a1, "TableInfo", (const char **)&off_102149200, "TableName");
  sub_100197040();
  sub_10075AA9C((uint64_t)__p);
  if (v9 >= 0)
    v6 = (char *)__p;
  else
    v6 = (char *)__p[0];
  sub_1000C9E20(v5, 1, v6);
  sub_1000C9E20(v5, 2, a2);
  sub_10023C9B0(a1, v5);
  sub_1000536D0(*(sqlite3 **)(a1 + 8), v5);
  if (v9 < 0)
    operator delete(__p[0]);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_10063DF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_10187E514((uint64_t)&a15);
  _Unwind_Resume(a1);
}

sqlite3_stmt *sub_10063DF84(uint64_t a1, const char *a2, const char **a3, const char *a4)
{
  uint64_t v8;
  _QWORD *v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  size_t v17;
  _QWORD *v18;
  _QWORD *v20;
  size_t v21;
  _QWORD *v22;
  char *v23;
  sqlite3_stmt *v24;
  uint64_t v25;
  NSObject *v26;
  const char *v27;
  NSObject *v28;
  const char *v29;
  void *__p[2];
  char v32;
  uint64_t v33;
  __int16 v34;
  uint8_t buf[8];
  __int16 v36;
  _BYTE v37[28];
  __int16 v38;
  const char *v39;
  void *v40;
  char v41;
  uint64_t v42;

  v8 = *(_QWORD *)(a1 + 16);
  v33 = v8;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  v34 = 256;
  if (a2 && a4 && *a3)
  {
    sub_100263E50((uint64_t)buf);
    v9 = sub_100263F7C(&v37[6], (uint64_t)"UPDATE ", 7);
    v10 = strlen(a2);
    v11 = sub_100263F7C(v9, (uint64_t)a2, v10);
    v12 = sub_100263F7C(v11, (uint64_t)" SET ", 5);
    v13 = strlen(*a3);
    v14 = sub_100263F7C(v12, (uint64_t)*a3, v13);
    sub_100263F7C(v14, (uint64_t)"=?", 2);
    if (a3[1])
    {
      v15 = a3 + 2;
      do
      {
        v16 = sub_100263F7C(&v37[6], (uint64_t)", ", 2);
        v17 = strlen((const char *)*(v15 - 1));
        v18 = sub_100263F7C(v16, *(v15 - 1), v17);
        sub_100263F7C(v18, (uint64_t)"=?", 2);
      }
      while (*v15++);
    }
    v20 = sub_100263F7C(&v37[6], (uint64_t)"WHERE ", 6);
    v21 = strlen(a4);
    v22 = sub_100263F7C(v20, (uint64_t)a4, v21);
    sub_100263F7C(v22, (uint64_t)"=?", 2);
    std::stringbuf::str(__p, &v37[14]);
    if (v32 >= 0)
      v23 = (char *)__p;
    else
      v23 = (char *)__p[0];
    v24 = sub_1000CDB4C(a1, v23);
    if (v32 < 0)
      operator delete(__p[0]);
    *(_QWORD *)&v37[6] = v25;
    if (v41 < 0)
      operator delete(v40);
    std::streambuf::~streambuf(&v37[14]);
    std::ios::~ios(&v42);
  }
  else
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v26 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      v27 = *a3;
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&buf[4] = 0;
      v36 = 2082;
      *(_QWORD *)v37 = "";
      *(_WORD *)&v37[8] = 2081;
      *(_QWORD *)&v37[10] = a2;
      *(_WORD *)&v37[18] = 2082;
      *(_QWORD *)&v37[20] = v27;
      v38 = 2082;
      v39 = a4;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid parameters\", \"table\":%{private, location:escape_only}s, \"columnNames[0]\":%{public, location:escape_only}s, \"key\":%{public, location:escape_only}s}", buf, 0x30u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v28 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      v29 = *a3;
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&buf[4] = 0;
      v36 = 2082;
      *(_QWORD *)v37 = "";
      *(_WORD *)&v37[8] = 2081;
      *(_QWORD *)&v37[10] = a2;
      *(_WORD *)&v37[18] = 2082;
      *(_QWORD *)&v37[20] = v29;
      v38 = 2082;
      v39 = a4;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v28, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid parameters", "{\"msg%{public}.0s\":\"Invalid parameters\", \"table\":%{private, location:escape_only}s, \"columnNames[0]\":%{public, location:escape_only}s, \"key\":%{public, location:escape_only}s}", buf, 0x30u);
    }
    v24 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  return v24;
}

void sub_10063E364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a18);
  sub_10187E514((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10063E3C0(uint64_t a1, char **a2)
{
  unsigned int v4;
  char **v5;
  NSObject *v6;
  char *v7;
  char *v8;
  sqlite3_stmt *v9;
  uint64_t v10;
  uint64_t v12;
  uint8_t buf[8];
  __int16 v14;
  const char *v15;
  __int16 v16;
  char *v17;

  v12 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  sub_10001E638(a1);
  if (*a2)
  {
    v4 = 1;
    v5 = a2;
    do
    {
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
      v6 = off_1022A0288;
      if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *v5;
        *(_DWORD *)buf = 68289283;
        *(_DWORD *)&buf[4] = 0;
        v14 = 2082;
        v15 = "";
        v16 = 2081;
        v17 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Dropping table\", \"table\":%{private, location:escape_only}s}", buf, 0x1Cu);
      }
      sub_10063DA50(a1, *v5);
      sub_1015A2E04(buf, "DROP TABLE IF EXISTS ");
      std::string::append((std::string *)buf, *v5);
      if (SBYTE3(v17) >= 0)
        v8 = (char *)buf;
      else
        v8 = *(char **)buf;
      v9 = sub_1000CDB4C(a1, v8);
      sub_10023C9B0(a1, v9);
      sub_1000536D0(*(sqlite3 **)(a1 + 8), v9);
      if (SBYTE3(v17) < 0)
        operator delete(*(void **)buf);
      v5 = &a2[v4++];
    }
    while (*v5);
  }
  sub_10001E99C(a1);
  if (*(uint64_t *)(a1 + 88) <= 0)
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v10 = *(_QWORD *)(a1 + 88);
  sub_100053048(a1, v10);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
}

void sub_10063E5C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10063E610(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  if ((result & 1) != 0)
  {
    if (a2)
    {
      result = (uint64_t)operator new(0x18uLL);
      v6 = *(_QWORD *)(a1 + 24);
      v5 = (uint64_t *)(a1 + 24);
      *(_QWORD *)(result + 8) = v5;
      *(_QWORD *)(result + 16) = a2;
      *(_QWORD *)result = v6;
      *(_QWORD *)(v6 + 8) = result;
      *v5 = result;
      ++v5[2];
    }
  }
  else
  {
    v7 = sub_10190299C();
    return sub_10063E674(v7);
  }
  return result;
}

uint64_t sub_10063E674(uint64_t a1, const char *a2, const char **a3, int a4)
{
  sqlite3_stmt *v8;
  uint64_t v10;
  uint64_t v11;

  v10 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  v8 = sub_10063D5EC(a1, a2, a3, a4);
  sub_10063E610(a1, (uint64_t)v8);
  sub_100E81598(&v11, a1, (uint64_t)v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  return v11;
}

void sub_10063E720(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10063E734(uint64_t a1, const char *a2, const char **a3, int a4)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
  sub_10063D5EC(a1, a2, a3, a4);
  operator new();
}

void sub_10063E7F0()
{
  operator delete();
}

uint64_t sub_10063E828(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  int v4;
  unsigned int v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  _QWORD *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  unsigned int *v18;

  v6 = sqlite3_exec(*(sqlite3 **)(a1 + 8), "ROLLBACK TRANSACTION", 0, 0, 0);
  --*(_DWORD *)(a1 + 120);
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v2 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    v3 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v3 = (_QWORD *)*v3;
    v4 = *(_DWORD *)(a1 + 120);
    *(_DWORD *)buf = 68290050;
    v8 = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2082;
    v12 = v3;
    v13 = 1026;
    v14 = v4;
    v15 = 1040;
    v16 = 4;
    v17 = 2098;
    v18 = &v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"rollbackTransaction\", \"path\":%{public, location:escape_only}s, \"count\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x32u);
  }
  if (*(_DWORD *)(a1 + 120))
    sub_101902B18();
  sub_1000CDA5C(*(_QWORD *)(a1 + 16));
  return v6;
}

void sub_10063E98C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100D74E50(*(sqlite3 **)(a1 + 8), a2);
}

uint64_t sub_10063E994(uint64_t a1, uint64_t a2, sqlite3_stmt *a3)
{
  return sub_10063207C(a1, a3);
}

sqlite3_int64 sub_10063E99C(uint64_t a1)
{
  sqlite3_int64 insert_rowid;
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 8));
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return insert_rowid;
}

void sub_10063EA04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10063EA18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = a1;
  v3 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  LODWORD(v1) = sqlite3_changes(*(sqlite3 **)(v1 + 8));
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  return (int)v1;
}

void sub_10063EA80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10063EA94(uint64_t a1)
{
  _BOOL8 v2;
  uint64_t v4;

  if (!*(_QWORD *)(a1 + 8))
    return 0;
  v4 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v2 = sub_10063EB20(*(sqlite3_stmt **)(a1 + 8));
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v2;
}

void sub_10063EB0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10063EB20(sqlite3_stmt *a1)
{
  _BOOL4 v2;
  sqlite3_int64 v3;
  _BOOL4 v4;
  sqlite3_int64 v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  _BOOL8 v10;
  int v11;
  NSObject *v12;
  const char *v13;
  _BOOL4 v14;
  sqlite3_int64 v15;
  _BOOL4 v16;
  sqlite3_int64 v17;
  int v19;
  _QWORD v20[8];
  _QWORD v21[7];
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  sqlite3_int64 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  sqlite3_int64 v33;
  sqlite3_int64 v34;
  id v35[2];
  uint64_t buf;
  _BYTE v37[10];
  __int16 v38;
  const char *v39;
  __int16 v40;
  _BYTE v41[18];

  sub_100131938(v35, (uint64_t)"com.apple.locationd.CLSqliteDatabase.vacuum", 0);
  v30 = 0;
  v31 = &v30;
  v32 = 0x2020000000;
  v33 = 0;
  v34 = 0;
  v2 = sub_100053664(a1, "pragma page_count;", &v34);
  v3 = v34;
  if (!v2)
    v3 = -1;
  v33 = v3;
  v26 = 0;
  v27 = &v26;
  v28 = 0x2020000000;
  v29 = 0;
  v4 = sub_100053664(a1, "pragma freelist_count;", &v34);
  v5 = v34;
  if (!v4)
    v5 = -1;
  v29 = v5;
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102149370);
  v6 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = (const char *)v31[3];
    v8 = v27[3];
    v9 = sqlite3_db_filename(a1, "main");
    buf = 68289794;
    *(_WORD *)v37 = 2082;
    *(_QWORD *)&v37[2] = "";
    v38 = 2050;
    v39 = v7;
    v40 = 2050;
    *(_QWORD *)v41 = v8;
    *(_WORD *)&v41[8] = 2082;
    *(_QWORD *)&v41[10] = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"start vacuum\", \"page_count\":%{public}lld, \"freelist_count\":%{public}lld, \"path\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x30u);
  }
  v22 = 0;
  v23 = &v22;
  v24 = 0x2020000000;
  v25 = 0;
  if (sub_10063EF9C(a1))
  {
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_10063F014;
    v21[3] = &unk_102149218;
    v21[4] = &v30;
    v21[5] = &v26;
    v21[6] = a1;
    buf = mach_absolute_time();
    *(_QWORD *)v37 = v21;
    v10 = sub_10063F180(a1, 0);
  }
  else
  {
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_10063F428;
    v20[3] = &unk_102149240;
    v20[4] = &v22;
    v20[5] = &v30;
    v20[6] = &v26;
    v20[7] = a1;
    buf = mach_absolute_time();
    *(_QWORD *)v37 = v20;
    v11 = sqlite3_exec(a1, "VACUUM", 0, 0, 0);
    *((_DWORD *)v23 + 6) = v11;
    v10 = v11 == 0;
  }
  sub_100134E40(&buf);
  v19 = sqlite3_wal_checkpoint_v2(a1, 0, 3, 0, 0);
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v12 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
  {
    v13 = sqlite3_db_filename(a1, "main");
    buf = 68289794;
    *(_WORD *)v37 = 2082;
    *(_QWORD *)&v37[2] = "";
    v38 = 2082;
    v39 = v13;
    v40 = 1040;
    *(_DWORD *)v41 = 4;
    *(_WORD *)&v41[4] = 2098;
    *(_QWORD *)&v41[6] = &v19;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"wal_checkpoint\", \"path\":%{public, location:escape_only}s, \"rc\":%{public, location:SqliteResult}.*P}", (uint8_t *)&buf, 0x2Cu);
  }
  v14 = sub_100053664(a1, "pragma page_count;", &v34);
  v15 = v34;
  if (!v14)
    v15 = -1;
  v31[3] = v15;
  v16 = sub_100053664(a1, "pragma freelist_count;", &v34);
  v17 = v34;
  if (!v16)
    v17 = -1;
  v27[3] = v17;
  _Block_object_dispose(&v22, 8);
  _Block_object_dispose(&v26, 8);
  _Block_object_dispose(&v30, 8);
  sub_100131740(v35);
  return v10;
}

void sub_10063EF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 184), 8);
  sub_100131740((id *)(v30 - 144));
  _Unwind_Resume(a1);
}

BOOL sub_10063EF9C(sqlite3_stmt *a1)
{
  sqlite3_stmt *v2;
  sqlite3_stmt *v3;
  _BOOL8 v4;

  v2 = sub_1000CDD24(a1, "pragma auto_vacuum;");
  if (!v2)
    return 0;
  v3 = v2;
  v4 = sqlite3_step(v2) == 100 && sqlite3_column_int(v3, 0) == 2;
  sub_1000536D0(a1, v3);
  return v4;
}

void sub_10063F014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  double v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  const char *v27;

  v6 = sub_100127828(a3 - a2);
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v7 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v10 = sqlite3_db_filename(*(sqlite3 **)(a1 + 48), "main");
    v11[0] = 68290818;
    v11[1] = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2082;
    v15 = "elapsed";
    v16 = 2050;
    v17 = a2;
    v18 = 2050;
    v19 = a3;
    v20 = 2050;
    v21 = v6;
    v22 = 2050;
    v23 = v8;
    v24 = 2050;
    v25 = v9;
    v26 = 2082;
    v27 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"incremental_vacuum\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"page_count\":%{public}lld, \"freelist_count\":%{public}lld, \"path\":%{public, location:escape_only}s}", (uint8_t *)v11, 0x58u);
  }
}

BOOL sub_10063F180(sqlite3 *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint8_t *v6;
  int v7;
  NSObject *v8;
  uint64_t v9;
  _QWORD v11[6];
  uint64_t v12[2];
  void *__p;
  char v14;
  _QWORD v15[2];
  uint64_t v16;
  _QWORD v17[10];
  char v18;
  uint64_t v19;
  uint8_t buf[8];
  __int16 v21;
  const char *v22;
  __int16 v23;
  int v24;

  sub_100263E50((uint64_t)v15);
  v4 = sub_100263F7C(&v16, (uint64_t)"pragma incremental_vacuum(", 26);
  v5 = (_QWORD *)std::ostream::operator<<(v4, a2);
  sub_100263F7C(v5, (uint64_t)");", 2);
  std::stringbuf::str(&__p, v17);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10063F644;
  v11[3] = &unk_102149260;
  v11[4] = a2;
  v11[5] = a1;
  v12[0] = mach_absolute_time();
  v12[1] = (uint64_t)v11;
  std::stringbuf::str(buf, v17);
  if (v24 >= 0)
    v6 = buf;
  else
    v6 = *(uint8_t **)buf;
  v7 = sqlite3_exec(a1, (const char *)v6, 0, 0, 0);
  if (SHIBYTE(v24) < 0)
    operator delete(*(void **)buf);
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v8 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)buf = 68289282;
    v21 = 2082;
    v22 = "";
    v23 = 1026;
    v24 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"incrementalVacuum\", \"result\":%{public}d}", buf, 0x18u);
  }
  sub_100134E40(v12);
  if (v14 < 0)
    operator delete(__p);
  *(_QWORD *)((char *)v15
  v16 = v9;
  if (v18 < 0)
    operator delete((void *)v17[8]);
  std::streambuf::~streambuf(v17);
  std::ios::~ios(&v19);
  return v7 == 0;
}

void sub_10063F3C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  uint64_t v23;

  if (*(char *)(v23 - 57) < 0)
    operator delete(*(void **)(v23 - 80));
  sub_100134E40(&a15);
  if (a22 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_10063F428(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  double v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  sqlite3 *v10;
  uint64_t v11;
  _DWORD v12[2];
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  double v22;
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  const char *v32;

  v6 = sub_100127828(a3 - a2);
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v7 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(a1[4] + 8) + 24;
    v9 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
    v10 = (sqlite3 *)a1[7];
    v11 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
    v12[0] = 68291330;
    v12[1] = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2082;
    v16 = "elapsed";
    v17 = 2050;
    v18 = a2;
    v19 = 2050;
    v20 = a3;
    v21 = 2050;
    v22 = v6;
    v23 = 1040;
    v24 = 4;
    v25 = 2098;
    v26 = v8;
    v27 = 2050;
    v28 = v9;
    v29 = 2050;
    v30 = v11;
    v31 = 2082;
    v32 = sqlite3_db_filename(v10, "main");
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"vacuum\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"rc\":%{public, location:SqliteResult}.*P, \"page_count\":%{public}lld, \"freelist_count\":%{public}lld, \"path\":%{public, location:escape_only}s}", (uint8_t *)v12, 0x68u);
  }
}

BOOL sub_10063F5B8(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v4 = sub_10063F180(*(sqlite3 **)(a1 + 8), a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  return v4;
}

void sub_10063F630(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10063F644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  double v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  const char *v24;

  v6 = sub_100127828(a3 - a2);
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v7 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(a1 + 32);
    v9 = sqlite3_db_filename(*(sqlite3 **)(a1 + 40), "main");
    v10[0] = 68290562;
    v10[1] = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2082;
    v14 = "elapsed";
    v15 = 2050;
    v16 = a2;
    v17 = 2050;
    v18 = a3;
    v19 = 2050;
    v20 = v6;
    v21 = 2050;
    v22 = v8;
    v23 = 2082;
    v24 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"incrementalVacuum\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"pages\":%{public}lld, \"path\":%{public, location:escape_only}s}", (uint8_t *)v10, 0x4Eu);
  }
}

BOOL sub_10063F794(sqlite3 *a1, _DWORD *a2, int a3)
{
  const char *v6;
  int v7;
  NSObject *v8;
  _BOOL8 v9;
  int v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  int v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  int v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int *v28;

  if (a3)
    v6 = "pragma auto_vacuum = 2;";
  else
    v6 = "pragma auto_vacuum = 0;";
  v7 = sqlite3_exec(a1, v6, 0, 0, 0);
  v18 = v7;
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v8 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289794;
    v20 = 0;
    v21 = 2082;
    v22 = "";
    v23 = 1026;
    v24 = a3;
    v25 = 1040;
    v26 = 4;
    v27 = 2098;
    v28 = &v18;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"setIncrementalVacuumEnabled\", \"enabled\":%{public}hhd, \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x28u);
    v7 = v18;
  }
  v9 = v7 == 0;
  if (a3)
    v10 = 2;
  else
    v10 = 0;
  v11 = sub_1000CDD24(a1, "pragma auto_vacuum;");
  if (v11)
  {
    v12 = v11;
    if (sqlite3_step(v11) == 100)
    {
      v13 = sqlite3_column_int(v12, 0);
      sub_1000536D0(a1, v12);
      if (v13 == v10)
        return v9;
      goto LABEL_17;
    }
    sub_1000536D0(a1, v12);
  }
  v9 = 0;
  v13 = -1;
LABEL_17:
  v14 = 0;
  while (dword_101BB86EC[v14] != *a2 || dword_101BB86EC[v14 + 1] != a2[1])
  {
    v14 += 2;
    if (v14 == 6)
    {
      v15 = 1;
      goto LABEL_23;
    }
  }
  v15 = 0;
LABEL_23:
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v16 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289794;
    v20 = 0;
    v21 = 2082;
    v22 = "";
    v23 = 1026;
    v24 = v13;
    v25 = 1026;
    v26 = v10;
    v27 = 1026;
    LODWORD(v28) = v15;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Actual auto-vacuum state does not match desired state\", \"actual\":%{public}d, \"expected\":%{public}d, \"vacuumNow\":%{public}hhd}", buf, 0x24u);
  }
  if (v15)
    sub_10063EB20(a1);
  return v9;
}

BOOL sub_10063FA54(uint64_t a1)
{
  char *v2;
  NSObject *v3;
  NSObject *v4;
  sqlite3_int64 v5;
  sqlite3_int64 v7;
  void *__p[2];
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;

  sub_1015A2E04(__p, "pragma foreign_keys");
  v7 = 0;
  if (v9 >= 0)
    v2 = (char *)__p;
  else
    v2 = (char *)__p[0];
  if (!sub_100053664(*(sqlite3_stmt **)(a1 + 8), v2, &v7))
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v3 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#warning unable to read pragma foreign_keys\"}", buf, 0x12u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v4 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      *(_DWORD *)buf = 68289026;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#warning unable to read pragma foreign_keys", "{\"msg%{public}.0s\":\"#warning unable to read pragma foreign_keys\"}", buf, 0x12u);
    }
  }
  v5 = v7;
  if (v9 < 0)
    operator delete(__p[0]);
  return v5 == 1;
}

void sub_10063FC18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_10063FC3C(sqlite3_stmt *a1, int a2, void *a3)
{
  int v6;
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  int v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int *v23;
  __int16 v24;
  const char *v25;

  v6 = sqlite3_bind_blob(a1, a2, objc_msgSend(a3, "bytes"), (int)objc_msgSend(a3, "length"), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  v11 = v6;
  if (v6)
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v7 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68290307;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2113;
      v17 = a3;
      v18 = 1026;
      v19 = a2;
      v20 = 1040;
      v21 = 4;
      v22 = 2098;
      v23 = &v11;
      v24 = 2081;
      v25 = sqlite3_sql(a1);
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not bind\", \"value\":%{private, location:escape_only}@, \"index\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x3Cu);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v8 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      v9 = sqlite3_sql(a1);
      *(_DWORD *)buf = 68290307;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2113;
      v17 = a3;
      v18 = 1026;
      v19 = a2;
      v20 = 1040;
      v21 = 4;
      v22 = 2098;
      v23 = &v11;
      v24 = 2081;
      v25 = v9;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not bind", "{\"msg%{public}.0s\":\"Could not bind\", \"value\":%{private, location:escape_only}@, \"index\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x3Cu);
    }
  }
  return v6 == 0;
}

BOOL sub_10063FE98(sqlite3_stmt *a1, int a2, const void *a3, int a4)
{
  int v7;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  int v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const void *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int *v24;
  __int16 v25;
  const char *v26;

  v7 = sqlite3_bind_blob(a1, a2, a3, a4, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  v12 = v7;
  if (v7)
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v8 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68290307;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2081;
      v18 = a3;
      v19 = 1026;
      v20 = a2;
      v21 = 1040;
      v22 = 4;
      v23 = 2098;
      v24 = &v12;
      v25 = 2081;
      v26 = sqlite3_sql(a1);
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not bind\", \"value\":%{private, location:escape_only}s, \"index\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x3Cu);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v9 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      v10 = sqlite3_sql(a1);
      *(_DWORD *)buf = 68290307;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2081;
      v18 = a3;
      v19 = 1026;
      v20 = a2;
      v21 = 1040;
      v22 = 4;
      v23 = 2098;
      v24 = &v12;
      v25 = 2081;
      v26 = v10;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not bind", "{\"msg%{public}.0s\":\"Could not bind\", \"value\":%{private, location:escape_only}s, \"index\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x3Cu);
    }
  }
  return v7 == 0;
}

BOOL sub_1006400C8(sqlite3_stmt *a1, int a2, int a3)
{
  int v5;
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  int v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int *v20;
  __int16 v21;
  const char *v22;

  v5 = sqlite3_bind_zeroblob(a1, a2, a3);
  v10 = v5;
  if (v5)
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v6 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68290051;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 1026;
      v16 = a2;
      v17 = 1040;
      v18 = 4;
      v19 = 2098;
      v20 = &v10;
      v21 = 2081;
      v22 = sqlite3_sql(a1);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not bind\", \"index\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x32u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v7 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      v8 = sqlite3_sql(a1);
      *(_DWORD *)buf = 68290051;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 1026;
      v16 = a2;
      v17 = 1040;
      v18 = 4;
      v19 = 2098;
      v20 = &v10;
      v21 = 2081;
      v22 = v8;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not bind", "{\"msg%{public}.0s\":\"Could not bind\", \"index\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x32u);
    }
  }
  return v5 == 0;
}

uint64_t sub_1006402D8(const char *a1)
{
  uint64_t v2;

  if (!strcmp(a1, "INTEGER"))
    return 1;
  if (!strcmp(a1, "FLOAT"))
    return 2;
  if (!strcmp(a1, "BLOB"))
    return 4;
  v2 = 5;
  if (strcmp(a1, "NULL"))
  {
    if (!strcmp(a1, "TEXT"))
      return 3;
    else
      return 5;
  }
  return v2;
}

uint64_t sub_10064037C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  char *v11;
  sqlite3_stmt *v12;
  int v13;
  const unsigned __int8 *v14;
  int v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const unsigned __int8 *v19;
  NSObject *v20;
  _QWORD *v21;
  size_t v22;
  _QWORD *v23;
  char *v24;
  sqlite3_stmt *v25;
  const unsigned __int8 *v26;
  NSObject *v27;
  unsigned int v28;
  NSObject *v29;
  uint64_t v30;
  _QWORD v32[2];
  uint64_t v33;
  _QWORD v34[8];
  std::string __p;
  _QWORD v36[21];
  __int16 v37;
  uint8_t buf[8];
  _BYTE v39[22];
  const char *v40;

  v4 = *(_QWORD *)(a1 + 16);
  v36[19] = v4;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v37 = 256;
  if (!*(_QWORD *)a2)
    goto LABEL_37;
  v5 = 0;
  if (!*(_BYTE *)(a2 + 40))
    goto LABEL_49;
  v6 = *(const char **)(a2 + 24);
  if (!v6)
    goto LABEL_49;
  v7 = *(const char **)(a2 + 16);
  if (!v7)
  {
LABEL_37:
    v5 = 0;
    goto LABEL_49;
  }
  sub_100263E50((uint64_t)v32);
  v8 = sub_100263F7C(&v33, (uint64_t)"PRAGMA table_info(", 18);
  v9 = strlen(v7);
  v10 = sub_100263F7C(v8, (uint64_t)v7, v9);
  sub_100263F7C(v10, (uint64_t)")", 1);
  std::stringbuf::str(buf, v34);
  if (v39[15] >= 0)
    v11 = (char *)buf;
  else
    v11 = *(char **)buf;
  v12 = sub_1000CDB4C(a1, v11);
  if ((v39[15] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  while (1)
  {
    v13 = sqlite3_step(v12);
    if (v13 != 100)
      break;
    v14 = sqlite3_column_text(v12, 1);
    if (!strcmp(v6, (const char *)v14))
    {
      v15 = *(_DWORD *)(a2 + 8);
      v16 = "INTEGER";
      if (v15 != 1)
      {
        v17 = 0;
        do
        {
          v18 = v17;
          v17 += 16;
        }
        while (v17 != 80 && *(_DWORD *)((char *)&unk_1021492C0 + v18 + 16) != v15);
        v16 = *(const char **)((char *)&unk_1021492C0 + v18 + 24);
      }
      v19 = sqlite3_column_text(v12, 2);
      if (!strcmp(v16, (const char *)v19))
      {
        if (qword_1022A0280 != -1)
          dispatch_once(&qword_1022A0280, &stru_102149330);
        v20 = off_1022A0288;
        if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
        {
          *(_QWORD *)buf = 68289538;
          *(_WORD *)v39 = 2082;
          *(_QWORD *)&v39[2] = "";
          *(_WORD *)&v39[10] = 2082;
          *(_QWORD *)&v39[12] = v7;
          *(_WORD *)&v39[20] = 2082;
          v40 = v6;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Foreign key references are valid\", \"FK_Table\":%{public, location:escape_only}s, \"FK_Col\":%{public, location:escape_only}s}", buf, 0x26u);
        }
        break;
      }
    }
  }
  sub_1000536D0(*(sqlite3 **)(a1 + 8), v12);
  *(_QWORD *)buf = 0;
  *(_QWORD *)v39 = 0;
  *(_QWORD *)&v39[8] = 0;
  std::string::operator=(&__p, (const std::string *)buf);
  sub_1004ADDC8((uint64_t)v34);
  if ((v39[15] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v21 = sub_100263F7C(&v33, (uint64_t)"SELECT indexInfo.name FROM pragma_index_list('", 46);
  v22 = strlen(v7);
  v23 = sub_100263F7C(v21, (uint64_t)v7, v22);
  sub_100263F7C(v23, (uint64_t)"') AS indexList, pragma_index_info(indexList.name) AS indexInfo", 63);
  std::stringbuf::str(buf, v34);
  if (v39[15] >= 0)
    v24 = (char *)buf;
  else
    v24 = *(char **)buf;
  v25 = sub_1000CDB4C(a1, v24);
  if ((v39[15] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (v13 == 100)
  {
    while (sqlite3_step(v25) == 100)
    {
      v26 = sqlite3_column_text(v25, 0);
      if (!strcmp(v6, (const char *)v26))
      {
        if (qword_1022A0280 != -1)
          dispatch_once(&qword_1022A0280, &stru_102149330);
        v27 = off_1022A0288;
        if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
        {
          *(_QWORD *)buf = 68289538;
          *(_WORD *)v39 = 2082;
          *(_QWORD *)&v39[2] = "";
          *(_WORD *)&v39[10] = 2082;
          *(_QWORD *)&v39[12] = v7;
          *(_WORD *)&v39[20] = 2082;
          v40 = v6;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Index exist\", \"FK_Table\":%{public, location:escape_only}s, \"FK_Col\":%{public, location:escape_only}s}", buf, 0x26u);
        }
        v28 = 1;
        goto LABEL_39;
      }
    }
  }
  v28 = 0;
LABEL_39:
  sub_1000536D0(*(sqlite3 **)(a1 + 8), v25);
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v29 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v39 = 2082;
    *(_QWORD *)&v39[2] = "";
    *(_WORD *)&v39[10] = 1026;
    *(_DWORD *)&v39[12] = v13 == 100;
    *(_WORD *)&v39[16] = 1026;
    *(_DWORD *)&v39[18] = v28;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"ForeignKey reference\", \"isReferenceValid\":%{public}hhd, \"isIndexed\":%{public}hhd}", buf, 0x1Eu);
  }
  *(_QWORD *)((char *)v32
  if (v13 == 100)
    v5 = v28;
  else
    v5 = 0;
  v33 = v30;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::streambuf::~streambuf(v34);
  std::ios::~ios(v36);
LABEL_49:
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v5;
}

void sub_1006408C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  if (*(char *)(v3 - 121) < 0)
    operator delete(*(void **)(v3 - 144));
  sub_1018B38B4((uint64_t)va);
  sub_10187E514(v3 - 168);
  _Unwind_Resume(a1);
}

void sub_100640928(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  const char *v4;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (*(_QWORD *)(a1 + 8))
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16)) & 1) != 0)
    {
      v4 = sqlite3_errmsg(*(sqlite3 **)(a1 + 8));
      std::string::assign(a2, v4);
    }
    else
    {
      sub_101902C94();
      abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteDatabase.mm", 2373, "getCurrentErrorMessage");
      __break(1u);
    }
  }
  else
  {
    std::string::assign(a2, "No database");
  }
}

void sub_1006409CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1006409E8(uint64_t a1, const char *a2, uint64_t *a3, _QWORD *a4)
{
  NSObject *v7;
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  char *p_p;
  void *__p;
  char v13;
  uint8_t buf[8];
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;

  sub_100259648(a3);
  a4[1] = *a4;
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v7 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2081;
    v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"getColumnInfo\", \"table\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  sub_100263E50((uint64_t)buf);
  v8 = sub_100263F7C((const char **)((char *)&v16 + 6), (uint64_t)"PRAGMA table_info(", 18);
  v9 = strlen(a2);
  v10 = sub_100263F7C(v8, (uint64_t)a2, v9);
  LOBYTE(__p) = 41;
  sub_100263F7C(v10, (uint64_t)&__p, 1);
  std::stringbuf::str(&__p, (char *)&v18 + 4);
  if (v13 >= 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p;
  sub_1000CDA68(a1, p_p);
}

void sub_100640F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a20 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_100640F84(uint64_t a1, const char *a2, uint64_t *a3)
{
  NSObject *v3;
  _QWORD *v4;
  size_t v5;
  _QWORD *v6;
  char *p_p;
  void *__p;
  char v11;
  uint8_t buf[8];
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;

  sub_100259648(a3);
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v3 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2081;
    v16 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"getTableIndexColumns\", \"table\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  sub_100263E50((uint64_t)buf);
  v4 = sub_100263F7C((const char **)((char *)&v14 + 6), (uint64_t)"PRAGMA index_list(", 18);
  v5 = strlen(a2);
  v6 = sub_100263F7C(v4, (uint64_t)a2, v5);
  LOBYTE(__p) = 41;
  sub_100263F7C(v6, (uint64_t)&__p, 1);
  std::stringbuf::str(&__p, (char *)&v16 + 4);
  if (v11 >= 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p;
  sub_1000CDA68(a1, p_p);
}

void sub_100641420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (a29 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a63);
  _Unwind_Resume(a1);
}

uint64_t sub_1006414DC(const char *a1, int a2, int a3)
{
  char *v5;
  int v6;
  const char *v7;
  const unsigned __int8 *v8;
  void **v9;
  int v10;
  const unsigned __int8 *v11;
  BOOL v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  const char *v17;
  int v18;
  void *__p[2];
  char v20;
  sqlite3 *ppDb;
  sqlite3_stmt *ppStmt;
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int *v30;
  __int16 v31;
  const unsigned __int8 *v32;

  ppDb = 0;
  if (a3)
    v5 = "pragma quick_check;";
  else
    v5 = "pragma integrity_check;";
  sub_1015A2E04(__p, v5);
  if ((a2 - 1) >= 3)
    v6 = 4325378;
  else
    v6 = ((a2 - 1) << 20) + 1179650;
  if (a1[23] >= 0)
    v7 = a1;
  else
    v7 = *(const char **)a1;
  v18 = sqlite3_open_v2(v7, &ppDb, v6, 0);
  if (v18)
  {
    v8 = 0;
  }
  else
  {
    ppStmt = 0;
    v17 = 0;
    if (v20 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    v10 = strlen((const char *)v9);
    v18 = sqlite3_prepare_v2(ppDb, (const char *)v9, v10, &ppStmt, &v17);
    if (v18 || (v18 = sqlite3_step(ppStmt), v18 != 100))
    {
      v12 = 0;
      v8 = 0;
    }
    else
    {
      v11 = sqlite3_column_text(ppStmt, 0);
      v8 = v11;
      if (v11)
        v12 = strcmp((const char *)v11, "ok") == 0;
      else
        v12 = 0;
    }
    sqlite3_finalize(ppStmt);
    if (v12)
    {
      v13 = 1;
      goto LABEL_29;
    }
  }
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v14 = off_1022A0288;
  v13 = 0;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
  {
    if (a1[23] >= 0)
      v15 = a1;
    else
      v15 = *(const char **)a1;
    ppStmt = (sqlite3_stmt *)68290050;
    v23 = 2082;
    v24 = "";
    v25 = 2082;
    v26 = v15;
    v27 = 1040;
    v28 = 4;
    v29 = 2098;
    v30 = &v18;
    v31 = 2082;
    v32 = v8;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning integrity check failed\", \"path\":%{public, location:escape_only}s, \"rc\":%{public, location:SqliteResult}.*P, \"integrtiy_result\":%{public, location:escape_only}s}", (uint8_t *)&ppStmt, 0x36u);
    v13 = 0;
  }
LABEL_29:
  sqlite3_close(ppDb);
  if (v20 < 0)
    operator delete(__p[0]);
  return v13;
}

void sub_100641740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100641768(id a1)
{
  off_1022A0288 = os_log_create("com.apple.locationd.Utility", "Database");
}

void sub_100641794(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1006417C0(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_1006417EC(uint64_t *a1, char **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1002596A8(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[24 * v4];
  v15 = v14;
  v16 = &v10[24 * v9];
  sub_1015A2E04(v14, *a2);
  v15 = v14 + 24;
  sub_100074D44(a1, &v13);
  v11 = a1[1];
  sub_100074DB8((uint64_t)&v13);
  return v11;
}

void sub_1006418DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100074DB8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1006418F0()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 648));
}

void sub_10064280C(id a1, void *a2)
{
  sub_100642814((id *)a2);
}

uint64_t sub_100642814(id *a1)
{
  int v3;
  unsigned __int8 v4[24];

  objc_msgSend(a1[14], "setAirplaneMode:", objc_msgSend(a1[26], "airplaneMode"));
  v4[0] = objc_msgSend(a1[14], "airplaneMode");
  v3 = 8;
  return (*((uint64_t (**)(id *, int *, unsigned __int8 *, uint64_t, uint64_t, _QWORD))*a1 + 19))(a1, &v3, v4, 1, 0xFFFFFFFFLL, 0);
}

void sub_10064290C(id a1)
{
  qword_1023030E8 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLDaemonStatusSilo"));
}

uint64_t sub_1006429C0(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100642F2C;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_1023030F8 != -1)
    dispatch_once(&qword_1023030F8, block);
  return qword_102310A18;
}

uint64_t sub_100642B80(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021495E8);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Notifying clients that CLClientManager has completed its migration steps.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021495E8);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "Notifying clients that CLClientManager has completed its migration steps.", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonStatus::migrationPerformed()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  *(_DWORD *)buf = 9;
  return (*(uint64_t (**)(uint64_t, uint8_t *, _QWORD, uint64_t))(*(_QWORD *)a1 + 144))(a1, buf, 0, 0xFFFFFFFFLL);
}

uint64_t sub_100642D48(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102149628);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "MetricHeartbeat, notify", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102149628);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "MetricHeartbeat, notify", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonStatus::notifyMetricHeartbeat()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  *(_DWORD *)buf = 16;
  return (*(uint64_t (**)(uint64_t, uint8_t *, _QWORD, uint64_t))(*(_QWORD *)a1 + 144))(a1, buf, 0, 0xFFFFFFFFLL);
}

void sub_100642F2C()
{
  operator new();
}

void sub_100642F74()
{
  operator delete();
}

uint64_t sub_100642F98(uint64_t a1, void *a2)
{
  id v3;
  io_connect_t v4;
  IONotificationPort *RunLoopSource;
  CFRunLoopSourceRef v6;
  __CFRunLoop *v7;
  const __SCNetworkReachability *v8;
  const __SCNetworkReachability *v9;
  __CFRunLoop *v10;
  int v11;
  const __SCDynamicStore *v12;
  const __CFArray *v13;
  __CFRunLoop *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  __CFNotificationCenter *DarwinNotifyCenter;
  __CFNotificationCenter *v19;
  __CFNotificationCenter *v20;
  const __CFString *v21;
  __CFNotificationCenter *v22;
  id v23;
  uint64_t v24;
  xpc_object_t v25;
  id v26;
  NSObject *v27;
  const char *v28;
  char *v29;
  NSObject *v30;
  const char *v31;
  NSObject *v32;
  const char *v34;
  char *v35;
  const char *v36;
  char *v37;
  const char *v38;
  char *v39;
  const char *v40;
  _QWORD handler[5];
  SCDynamicStoreContext v42;
  SCNetworkReachabilityFlags flags;
  SCNetworkReachabilityContext context;
  int v45;
  const char *v46;
  _BYTE buf[1632];
  sockaddr address;

  *(_QWORD *)sub_100643CBC(a1, "CLDaemonStatus", a2) = off_102149448;
  v3 = -[CLDaemonStatusStateTracker initInSilo:withIdentifier:]([CLDaemonStatusStateTracker alloc], "initInSilo:withIdentifier:", *(_QWORD *)(a1 + 40), a1);
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 112) = v3;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = a1 + 224;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  objc_msgSend(v3, "setThermalLevel:", 0xFFFFFFFFLL);
  v4 = IORegisterForSystemPower((void *)a1, (IONotificationPortRef *)(a1 + 128), (IOServiceInterestCallback)sub_100643D58, (io_object_t *)(a1 + 120));
  *(_DWORD *)(a1 + 124) = v4;
  if (v4)
  {
    RunLoopSource = IONotificationPortCreate(kIOMainPortDefault);
    *(_QWORD *)(a1 + 144) = RunLoopSource;
    if (RunLoopSource)
      RunLoopSource = IONotificationPortGetRunLoopSource(RunLoopSource);
    *(_QWORD *)(a1 + 152) = RunLoopSource;
    v6 = IONotificationPortGetRunLoopSource(*(IONotificationPortRef *)(a1 + 128));
    *(_QWORD *)(a1 + 136) = v6;
    if (v6)
    {
      v7 = (__CFRunLoop *)sub_100193530();
      CFRunLoopAddSource(v7, *(CFRunLoopSourceRef *)(a1 + 136), kCFRunLoopDefaultMode);
    }
  }
  address = (sockaddr)xmmword_101BB8870;
  v8 = SCNetworkReachabilityCreateWithAddress(kCFAllocatorDefault, &address);
  *(_QWORD *)(a1 + 160) = v8;
  if (!v8)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021495E8);
    v27 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "could not create network reachability", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return a1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021495E8);
    LOWORD(context.version) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 17, "could not create network reachability", &context, 2);
    v29 = (char *)v28;
    sub_100512490("Generic", 1, 0, 0, "CLDaemonStatus::CLDaemonStatus(id<CLIntersiloUniverse>)", "%s\n", v28);
LABEL_70:
    if (v29 != buf)
      free(v29);
    return a1;
  }
  context.version = 0;
  context.info = (void *)a1;
  memset(&context.retain, 0, 24);
  if (!SCNetworkReachabilitySetCallback(v8, (SCNetworkReachabilityCallBack)sub_100643F70, &context))
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021495E8);
    v30 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "could not set client callback for network reachability", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return a1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021495E8);
    LOWORD(v42.version) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 17, "could not set client callback for network reachability", &v42, 2);
    v29 = (char *)v31;
    sub_100512490("Generic", 1, 0, 0, "CLDaemonStatus::CLDaemonStatus(id<CLIntersiloUniverse>)", "%s\n", v31);
    goto LABEL_70;
  }
  v9 = *(const __SCNetworkReachability **)(a1 + 160);
  v10 = (__CFRunLoop *)sub_100193530();
  if (SCNetworkReachabilityScheduleWithRunLoop(v9, v10, kCFRunLoopCommonModes))
  {
    flags = 0;
    if (SCNetworkReachabilityGetFlags(*(SCNetworkReachabilityRef *)(a1 + 160), &flags))
    {
      if ((flags & 0x40000) != 0)
        v11 = 1;
      else
        v11 = 2;
      sub_10064417C(a1, v11 & ((int)(flags << 30) >> 31));
      *(_QWORD *)buf = 0;
      *(_WORD *)&buf[8] = 0;
      *(_DWORD *)&buf[4] = objc_msgSend(*(id *)(a1 + 112), "reachability");
      *(_WORD *)&buf[8] = 0;
      LODWORD(v42.version) = 6;
      (*(void (**)(uint64_t, SCDynamicStoreContext *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v42, buf, 1, 0xFFFFFFFFLL, 0);
    }
    v42.version = 0;
    v42.info = (void *)a1;
    memset(&v42.retain, 0, 24);
    v12 = SCDynamicStoreCreate(kCFAllocatorDefault, CFSTR("com.apple.locationd"), (SCDynamicStoreCallBack)sub_1006441DC, &v42);
    *(_QWORD *)(a1 + 168) = v12;
    *(_QWORD *)(a1 + 176) = SCDynamicStoreCreateRunLoopSource(kCFAllocatorDefault, v12, 0);
    sub_1006443E8((SCDynamicStoreRef *)a1);
    v13 = CFArrayCreate(kCFAllocatorDefault, (const void **)&off_102149518, 1, &kCFTypeArrayCallBacks);
    SCDynamicStoreSetNotificationKeys(*(SCDynamicStoreRef *)(a1 + 168), v13, 0);
    v14 = (__CFRunLoop *)sub_100193530();
    CFRunLoopAddSource(v14, *(CFRunLoopSourceRef *)(a1 + 176), kCFRunLoopDefaultMode);
    CFRelease(v13);
    if (notify_register_check("com.apple.springboard.hasBlankedScreen", (int *)(a1 + 288)))
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021495E8);
      v15 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "com.apple.springboard.hasBlankedScreen";
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Could not register for notification %s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021495E8);
        v45 = 136315138;
        v46 = "com.apple.springboard.hasBlankedScreen";
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 17, "Could not register for notification %s", (const char *)&v45);
        v35 = (char *)v34;
        sub_100512490("Generic", 1, 0, 0, "CLDaemonStatus::CLDaemonStatus(id<CLIntersiloUniverse>)", "%s\n", v34);
        if (v35 != buf)
          free(v35);
      }
    }
    if (notify_register_check("com.apple.springboard.lockstate", (int *)(a1 + 292)))
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021495E8);
      v16 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "com.apple.springboard.lockstate";
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Could not register for notification %s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021495E8);
        v45 = 136315138;
        v46 = "com.apple.springboard.lockstate";
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 17, "Could not register for notification %s", (const char *)&v45);
        v37 = (char *)v36;
        sub_100512490("Generic", 1, 0, 0, "CLDaemonStatus::CLDaemonStatus(id<CLIntersiloUniverse>)", "%s\n", v36);
        if (v37 != buf)
          free(v37);
      }
    }
    if (notify_register_check("com.apple.system.lowpowermode", (int *)(a1 + 296)))
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021495E8);
      v17 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "com.apple.system.lowpowermode";
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Could not register for notification %s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021495E8);
        v45 = 136315138;
        v46 = "com.apple.system.lowpowermode";
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 17, "Could not register for notification %s", (const char *)&v45);
        v39 = (char *)v38;
        sub_100512490("Generic", 1, 0, 0, "CLDaemonStatus::CLDaemonStatus(id<CLIntersiloUniverse>)", "%s\n", v38);
        if (v39 != buf)
          free(v39);
      }
    }
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(DarwinNotifyCenter, (const void *)a1, (CFNotificationCallback)sub_1006447B4, CFSTR("com.apple.springboard.hasBlankedScreen"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    v19 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(v19, (const void *)a1, (CFNotificationCallback)sub_1006449D4, CFSTR("com.apple.springboard.lockstate"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    v20 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(v20, (const void *)a1, (CFNotificationCallback)sub_100644BF4, CFSTR("com.apple.system.lowpowermode"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    v21 = CFStringCreateWithCStringNoCopy(0, kOSThermalNotificationName, 0x8000100u, kCFAllocatorNull);
    v22 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(v22, (const void *)a1, (CFNotificationCallback)sub_100644E14, v21, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    CFNotificationCenterGetDarwinNotifyCenter();
    sub_100645034((int *)a1);
    CFNotificationCenterGetDarwinNotifyCenter();
    sub_100645348((int *)a1);
    CFNotificationCenterGetDarwinNotifyCenter();
    sub_10064565C(a1);
    CFNotificationCenterGetDarwinNotifyCenter();
    sub_100645844((id *)a1);
    CFRelease(v21);
    v23 = objc_alloc_init((Class)NSAutoreleasePool);
    *(_QWORD *)(a1 + 208) = objc_alloc_init((Class)RadiosPreferences);
    objc_msgSend(*(id *)(a1 + 208), "setDelegate:", objc_alloc_init(CLDaemonStatusInternal));
    objc_msgSend(*(id *)(a1 + 112), "setAirplaneMode:", objc_msgSend(*(id *)(a1 + 208), "airplaneMode"));
    objc_msgSend(v23, "drain");
    sub_1006458BC((_QWORD *)a1);
    sub_100645D7C(a1, v24, 2);
    sub_100645DEC((_BYTE *)a1);
    v25 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v25, XPC_ACTIVITY_INTERVAL, 14400);
    xpc_dictionary_set_int64(v25, XPC_ACTIVITY_GRACE_PERIOD, 1800);
    xpc_dictionary_set_string(v25, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v25, XPC_ACTIVITY_ALLOW_BATTERY, 1);
    v26 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLDaemonStatus"));
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_100645FF8;
    handler[3] = &unk_102144B48;
    handler[4] = v26;
    xpc_activity_register("com.apple.locationd.MetricHeartbeat", v25, handler);
    xpc_release(v25);
    return a1;
  }
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021495E8);
  v32 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "could not schedule network reachability on run loop", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021495E8);
    LOWORD(v42.version) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 17, "could not schedule network reachability on run loop", &v42, 2);
    v29 = (char *)v40;
    sub_100512490("Generic", 1, 0, 0, "CLDaemonStatus::CLDaemonStatus(id<CLIntersiloUniverse>)", "%s\n", v40);
    goto LABEL_70;
  }
  return a1;
}

void sub_100643C50(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD **v3;

  sub_100008848(v2, *v3);
  sub_1006461E0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100643CBC(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_102149658;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100643D3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_100643D58(uint64_t a1, int a2, int a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  id v10;
  _QWORD v11[6];
  int v12;
  int v13;
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLDaemonStatus::onPowerNotification");
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021495C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonStatus::onPowerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021495C8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a1;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonStatus::onPowerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v10 = objc_msgSend(*(id *)(a1 + 32), "silo");
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1006492D4;
  v11[3] = &unk_102143548;
  v12 = a2;
  v13 = a3;
  v11[4] = a1;
  v11[5] = a4;
  objc_msgSend(v10, "sync:", v11);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_100643F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100643F70(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  id v8;
  _QWORD v9[6];
  int v10;
  os_activity_scope_state_s state;
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;

  CLProfilingIdentify("CLDaemonStatus::onNetworkReachabilityNotification");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021495C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v12 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonStatus::onNetworkReachabilityNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021495C8);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = "activity";
      v19 = 2050;
      v20 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonStatus::onNetworkReachabilityNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v12 = 0;
  }
  v8 = objc_msgSend(*(id *)(a3 + 32), "silo");
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100649310;
  v9[3] = &unk_102149608;
  v9[4] = a3;
  v9[5] = a1;
  v10 = a2;
  objc_msgSend(v8, "sync:", v9);
  if (v12)
    os_activity_scope_leave(&state);
}

void sub_10064415C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

id sub_10064417C(uint64_t a1, uint64_t a2)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 112), "reachability");
  if ((_DWORD)result != (_DWORD)a2)
  {
    objc_msgSend(*(id *)(a1 + 112), "setReachability:", a2);
    return _objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLNetworkLocationProvider")), "setCurrentReachability:", a2);
  }
  return result;
}

void sub_1006441DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  id v8;
  _QWORD v9[7];
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLDaemonStatus::onDynamicStore");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021495C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonStatus::onDynamicStore", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021495C8);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonStatus::onDynamicStore\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  v8 = objc_msgSend(*(id *)(a3 + 32), "silo");
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100649320;
  v9[3] = &unk_102143548;
  v9[4] = a3;
  v9[5] = a1;
  v9[6] = a2;
  objc_msgSend(v8, "sync:", v9);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1006443C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1006443E8(SCDynamicStoreRef *a1)
{
  const __CFDictionary *v2;
  const __CFDictionary *v3;
  const __CFDictionary *Value;
  const __CFDictionary *v5;
  const __CFNumber *v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  NSObject *v10;
  char *v11;
  _QWORD v12[2];
  uint8_t valuePtr[1640];

  v2 = (const __CFDictionary *)SCDynamicStoreCopyValue(a1[21], CFSTR("com.apple.MobileInternetSharing"));
  if (v2)
  {
    v3 = v2;
    Value = (const __CFDictionary *)CFDictionaryGetValue(v2, CFSTR("Hosts"));
    if (Value)
    {
      v5 = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("Type"));
      if (v5)
      {
        v6 = (const __CFNumber *)CFDictionaryGetValue(v5, CFSTR("AirPort"));
        if (v6)
        {
          valuePtr[0] = 0;
          if (CFNumberGetValue(v6, kCFNumberIntType, valuePtr))
          {
            LODWORD(v12[0]) = 12;
            (*((void (**)(SCDynamicStoreRef *, _QWORD *, uint8_t *, uint64_t, uint64_t, _QWORD))*a1 + 19))(a1, v12, valuePtr, 1, 0xFFFFFFFFLL, 0);
          }
LABEL_28:
          CFRelease(v3);
          return;
        }
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021495E8);
        v10 = qword_1022A02A8;
        if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)valuePtr = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "cannot get kMISPropHostsTypeAirPort", valuePtr, 2u);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_28;
        bzero(valuePtr, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021495E8);
        LOWORD(v12[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, valuePtr, 1628, &_mh_execute_header, qword_1022A02A8, 17, "cannot get kMISPropHostsTypeAirPort", v12, 2, v12[0]);
      }
      else
      {
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021495E8);
        v9 = qword_1022A02A8;
        if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)valuePtr = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "cannot get kMISPropHostsCurrentByType", valuePtr, 2u);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_28;
        bzero(valuePtr, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021495E8);
        LOWORD(v12[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, valuePtr, 1628, &_mh_execute_header, qword_1022A02A8, 17, "cannot get kMISPropHostsCurrentByType", v12, 2, v12[0]);
      }
    }
    else
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021495E8);
      v7 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)valuePtr = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "cannot get kMISPropHosts", valuePtr, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_28;
      bzero(valuePtr, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021495E8);
      LOWORD(v12[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, valuePtr, 1628, &_mh_execute_header, qword_1022A02A8, 17, "cannot get kMISPropHosts", v12, 2, v12[0]);
    }
    v11 = (char *)v8;
    sub_100512490("Generic", 1, 0, 0, "void CLDaemonStatus::onDynamicStore(SCDynamicStoreRef, CFArrayRef)", "%s\n", v8);
    if (v11 != (char *)valuePtr)
      free(v11);
    goto LABEL_28;
  }
}

void sub_1006447B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  id v12;
  _QWORD v13[9];
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLDaemonStatus::onDisplayNotification");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021495C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonStatus::onDisplayNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021495C8);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonStatus::onDisplayNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v12 = objc_msgSend(*(id *)(a2 + 32), "silo");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100649328;
  v13[3] = &unk_1021382B0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  objc_msgSend(v12, "sync:", v13);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_1006449B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1006449D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  id v12;
  _QWORD v13[9];
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLDaemonStatus::onLockNotification");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021495C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonStatus::onLockNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021495C8);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonStatus::onLockNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v12 = objc_msgSend(*(id *)(a2 + 32), "silo");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100649330;
  v13[3] = &unk_1021382B0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  objc_msgSend(v12, "sync:", v13);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_100644BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100644BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  id v12;
  _QWORD v13[9];
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLDaemonStatus::onBatterySaverModeNotification");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021495C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonStatus::onBatterySaverModeNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021495C8);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonStatus::onBatterySaverModeNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v12 = objc_msgSend(*(id *)(a2 + 32), "silo");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100649338;
  v13[3] = &unk_1021382B0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  objc_msgSend(v12, "sync:", v13);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_100644DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100644E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  id v12;
  _QWORD v13[9];
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLDaemonStatus::onThermalNotification");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021495C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonStatus::onThermalNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021495C8);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonStatus::onThermalNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v12 = objc_msgSend(*(id *)(a2 + 32), "silo");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100649340;
  v13[3] = &unk_1021382B0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  objc_msgSend(v12, "sync:", v13);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_100645014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100645034(int *a1)
{
  NSObject *v2;
  double v3;
  uint8_t *v4;
  uint8_t *v5;
  NSObject *v6;
  double v7;
  uint8_t *v8;
  unsigned __int8 v9[24];
  uint64_t state64;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  state64 = 0;
  if (notify_get_state(a1[72], &state64))
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021495E8);
    v2 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Could not get state for com.apple.springboard.hasBlankedScreen", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021495E8);
      *(_WORD *)v9 = 0;
      v3 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 17, "Could not get state for com.apple.springboard.hasBlankedScreen", v9, 2);
      v5 = v4;
      sub_100512490("Generic", 1, 0, 0, "void CLDaemonStatus::onDisplayNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v3);
LABEL_19:
      if (v5 != buf)
        free(v5);
    }
  }
  else
  {
    v9[0] = state64 == 0;
    *(_DWORD *)buf = 10;
    (*(void (**)(int *, uint8_t *, unsigned __int8 *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, v9, 1, 0xFFFFFFFFLL, 0);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021495E8);
    v6 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v13 = v9[0];
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "display is %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021495E8);
      v11[0] = 67109120;
      v11[1] = v9[0];
      v7 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "display is %d", v11);
      v5 = v8;
      sub_100512490("Generic", 1, 0, 2, "void CLDaemonStatus::onDisplayNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v7);
      goto LABEL_19;
    }
  }
}

void sub_100645348(int *a1)
{
  NSObject *v2;
  double v3;
  uint8_t *v4;
  uint8_t *v5;
  NSObject *v6;
  double v7;
  uint8_t *v8;
  unsigned __int8 v9[24];
  uint64_t state64;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  state64 = 0;
  if (notify_get_state(a1[73], &state64))
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021495E8);
    v2 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Could not get state for com.apple.springboard.lockstate", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021495E8);
      *(_WORD *)v9 = 0;
      v3 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 17, "Could not get state for com.apple.springboard.lockstate", v9, 2);
      v5 = v4;
      sub_100512490("Generic", 1, 0, 0, "void CLDaemonStatus::onLockNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v3);
LABEL_19:
      if (v5 != buf)
        free(v5);
    }
  }
  else
  {
    v9[0] = state64 != 0;
    *(_DWORD *)buf = 11;
    (*(void (**)(int *, uint8_t *, unsigned __int8 *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, v9, 1, 0xFFFFFFFFLL, 0);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021495E8);
    v6 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v13 = v9[0];
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "lock screen is %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021495E8);
      v11[0] = 67109120;
      v11[1] = v9[0];
      v7 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "lock screen is %d", v11);
      v5 = v8;
      sub_100512490("Generic", 1, 0, 2, "void CLDaemonStatus::onLockNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v7);
      goto LABEL_19;
    }
  }
}

void sub_10064565C(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  int v5;
  uint64_t state64;
  uint8_t buf[1640];

  state64 = 0;
  if (notify_get_state(*(_DWORD *)(a1 + 296), &state64))
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021495E8);
    v2 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Could not get state for com.apple.system.lowpowermode", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021495E8);
      LOWORD(v5) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 17, "Could not get state for com.apple.system.lowpowermode", &v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 0, "void CLDaemonStatus::onBatterySaverModeNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 112), "setBatterySaverModeEnabled:", state64 != 0);
    buf[0] = objc_msgSend(*(id *)(a1 + 112), "batterySaverModeEnabled");
    v5 = 15;
    (*(void (**)(uint64_t, int *, uint8_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v5, buf, 1, 0xFFFFFFFFLL, 0);
  }
}

id sub_100645844(id *a1)
{
  id result;
  int v3;
  _DWORD v4[6];

  v4[0] = OSThermalNotificationCurrentLevel();
  result = objc_msgSend(a1[14], "thermalLevel");
  if ((_DWORD)result != v4[0])
  {
    v3 = 13;
    (*((void (**)(id *, int *, _DWORD *, uint64_t, uint64_t, _QWORD))*a1 + 19))(a1, &v3, v4, 1, 0xFFFFFFFFLL, 0);
    return objc_msgSend(a1[14], "setThermalLevel:", v4[0]);
  }
  return result;
}

void sub_1006458BC(_QWORD *a1)
{
  NSObject *v2;
  const __SCPreferences *v3;
  const __SCPreferences *v4;
  __CFRunLoop *v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  uint8_t *v12;
  uint64_t v13;
  _QWORD v14[2];
  SCPreferencesContext context;
  uint8_t buf[1640];

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021495E8);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "registering for restricted mode notification", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021495E8);
    LOWORD(context.version) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "registering for restricted mode notification", &context, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonStatus::registerForRestrictedPowerModeNotifications()", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v3 = SCPreferencesCreate(kCFAllocatorDefault, CFSTR("com.apple.registerForAirplaneModeNotifications"), CFSTR("com.apple.radios.plist"));
  a1[38] = v3;
  if (v3)
  {
    context.version = 0;
    memset(&context.retain, 0, 24);
    context.info = a1;
    if (SCPreferencesSetCallback(v3, (SCPreferencesCallBack)sub_100647D9C, &context))
    {
      v4 = (const __SCPreferences *)a1[38];
      v5 = (__CFRunLoop *)sub_100193530();
      if (!SCPreferencesScheduleWithRunLoop(v4, v5, kCFRunLoopDefaultMode))
      {
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021495E8);
        v6 = qword_1022A02A8;
        if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Failed to schedule SCPreferences notification", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_1021495E8);
          LOWORD(v14[0]) = 0;
          LODWORD(v13) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 17, "Failed to schedule SCPreferences notification", v14, v13, v14[0]);
LABEL_38:
          v12 = (uint8_t *)v7;
          sub_100512490("Generic", 1, 0, 0, "void CLDaemonStatus::registerForRestrictedPowerModeNotifications()", "%s\n", v7);
          if (v12 != buf)
            free(v12);
        }
      }
    }
    else
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021495E8);
      v9 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Failed to set SCPreferences callback", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021495E8);
        LOWORD(v14[0]) = 0;
        LODWORD(v13) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 17, "Failed to set SCPreferences callback", v14, v13, v14[0]);
        goto LABEL_38;
      }
    }
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021495E8);
    v8 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Failed to create SCPreferences", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021495E8);
      LOWORD(context.version) = 0;
      LODWORD(v13) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 17, "Failed to create SCPreferences", &context, v13, v14[0]);
      goto LABEL_38;
    }
  }
}

uint64_t sub_100645D7C(uint64_t result, uint64_t a2, char a3)
{
  id *v3;
  int v4;
  unsigned __int8 v5[24];

  if ((a3 & 2) != 0)
  {
    v3 = (id *)result;
    objc_msgSend(*(id *)(result + 112), "setRestrictedMode:", sub_100647D30(result));
    v5[0] = objc_msgSend(v3[14], "restrictedMode");
    v4 = 14;
    return (*((uint64_t (**)(id *, int *, unsigned __int8 *, uint64_t, uint64_t, _QWORD))*v3 + 19))(v3, &v4, v5, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

uint64_t sub_100645DEC(_BYTE *a1)
{
  uint64_t v2;
  BOOL v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v8;
  uint8_t *v9;
  _WORD v10[7];
  BOOL v11;
  uint8_t buf[1640];

  v11 = 0;
  v2 = sub_1001FD94C();
  if (sub_1001E4874(v2, off_1022A3758, &v11))
    v3 = !v11;
  else
    v3 = 0;
  if (v3)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021495E8);
    v4 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "locationd was started after an unclean shutdown", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021495E8);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "locationd was started after an unclean shutdown", v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "void CLDaemonStatus::isStartFromUncleanShutdown()", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    a1[312] = 1;
    *(_DWORD *)buf = 17;
    (*(void (**)(_BYTE *, uint8_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, buf, 1, 0xFFFFFFFFLL);
  }
  v5 = sub_1001FD94C();
  buf[0] = 0;
  sub_10011B47C(v5, off_1022A3758, buf);
  v6 = sub_1001FD94C();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 944))(v6);
}

id sub_100645FF8(uint64_t a1, xpc_activity_t activity)
{
  id result;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  xpc_activity_state_t v10;
  uint8_t buf[4];
  xpc_activity_state_t state;

  result = (id)xpc_activity_get_state(activity);
  if (result == (id)2)
  {
    if (!xpc_activity_set_state(activity, 5))
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102149628);
      v5 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 134349056;
        state = xpc_activity_get_state(activity);
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "failed to set MetricHeartbeat activity as DONE.  current state is %{public}ld", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102149628);
        v6 = qword_1022A0048;
        v9 = 134349056;
        v10 = xpc_activity_get_state(activity);
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 17, "failed to set MetricHeartbeat activity as DONE.  current state is %{public}ld", &v9, 12);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 0, "CLDaemonStatus::CLDaemonStatus(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
    }
    return objc_msgSend(*(id *)(a1 + 32), "triggerMetricHeartbeatNotification");
  }
  return result;
}

uint64_t sub_1006461E0(uint64_t a1)
{
  *(_QWORD *)a1 = off_102149658;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_100646254(uint64_t a1)
{
  __CFRunLoop *v2;
  IONotificationPort *v3;
  __CFRunLoop *v4;
  IONotificationPort *v5;
  io_connect_t v6;
  const __SCNetworkReachability *v7;
  __CFRunLoop *v8;
  __CFRunLoop *v9;
  const void *v10;
  void *v11;
  id v12;
  __CFNotificationCenter *DarwinNotifyCenter;

  *(_QWORD *)a1 = off_102149448;
  objc_msgSend(*(id *)(a1 + 264), "invalidate");

  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 240) = 0;

  *(_QWORD *)(a1 + 256) = 0;
  if (*(_QWORD *)(a1 + 152))
  {
    v2 = (__CFRunLoop *)sub_100193530();
    CFRunLoopRemoveSource(v2, *(CFRunLoopSourceRef *)(a1 + 152), kCFRunLoopDefaultMode);
    CFRunLoopSourceInvalidate(*(CFRunLoopSourceRef *)(a1 + 152));
    CFRelease(*(CFTypeRef *)(a1 + 152));
  }
  v3 = *(IONotificationPort **)(a1 + 144);
  if (v3)
    IONotificationPortDestroy(v3);
  if (*(_QWORD *)(a1 + 136))
  {
    v4 = (__CFRunLoop *)sub_100193530();
    CFRunLoopRemoveSource(v4, *(CFRunLoopSourceRef *)(a1 + 136), kCFRunLoopDefaultMode);
    CFRunLoopSourceInvalidate(*(CFRunLoopSourceRef *)(a1 + 136));
    CFRelease(*(CFTypeRef *)(a1 + 136));
  }
  if (*(_DWORD *)(a1 + 120))
    IODeregisterForSystemPower((io_object_t *)(a1 + 120));
  v5 = *(IONotificationPort **)(a1 + 128);
  if (v5)
  {
    IONotificationPortDestroy(v5);
    *(_QWORD *)(a1 + 128) = 0;
  }
  v6 = *(_DWORD *)(a1 + 124);
  if (v6)
    IOServiceClose(v6);
  v7 = *(const __SCNetworkReachability **)(a1 + 160);
  if (v7)
  {
    v8 = (__CFRunLoop *)sub_100193530();
    if (SCNetworkReachabilityUnscheduleFromRunLoop(v7, v8, kCFRunLoopCommonModes))
    {
      CFRelease(*(CFTypeRef *)(a1 + 160));
      *(_QWORD *)(a1 + 160) = 0;
    }
  }
  if (*(_QWORD *)(a1 + 176))
  {
    v9 = (__CFRunLoop *)sub_100193530();
    CFRunLoopRemoveSource(v9, *(CFRunLoopSourceRef *)(a1 + 176), kCFRunLoopDefaultMode);
    CFRunLoopSourceInvalidate(*(CFRunLoopSourceRef *)(a1 + 176));
    CFRelease(*(CFTypeRef *)(a1 + 176));
  }
  v10 = *(const void **)(a1 + 168);
  if (v10)
    CFRelease(v10);
  v11 = *(void **)(a1 + 208);
  if (v11)
  {
    v12 = objc_msgSend(v11, "delegate");
    objc_msgSend(*(id *)(a1 + 208), "setDelegate:", 0);

  }
  sub_10064640C(a1);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(DarwinNotifyCenter, (const void *)a1);
  sub_1006465F0(a1);

  *(_QWORD *)(a1 + 112) = 0;
  sub_100008848(a1 + 216, *(_QWORD **)(a1 + 224));
  return sub_1006461E0(a1);
}

void sub_10064640C(uint64_t a1)
{
  NSObject *v2;
  io_object_t v3;
  IONotificationPort *v4;
  CFRunLoopSourceRef RunLoopSource;
  __CFRunLoopSource *v6;
  __CFRunLoop *v7;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 184))
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021495E8);
    v2 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "unregistering for battery status changed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021495E8);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "unregistering for battery status changed", v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLDaemonStatus::unregisterForBatteryStatusChanges()", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    v3 = *(_DWORD *)(a1 + 200);
    if (v3)
    {
      IOObjectRelease(v3);
      *(_DWORD *)(a1 + 200) = 0;
    }
    v4 = *(IONotificationPort **)(a1 + 192);
    if (v4)
    {
      RunLoopSource = IONotificationPortGetRunLoopSource(v4);
      if (RunLoopSource)
      {
        v6 = RunLoopSource;
        v7 = (__CFRunLoop *)sub_100193530();
        CFRunLoopRemoveSource(v7, v6, kCFRunLoopDefaultMode);
      }
      IONotificationPortDestroy(*(IONotificationPortRef *)(a1 + 192));
      *(_QWORD *)(a1 + 192) = 0;
    }
    *(_BYTE *)(a1 + 184) = 0;
  }
}

void sub_1006465F0(uint64_t a1)
{
  const __SCPreferences *v1;
  __CFRunLoop *v3;

  v1 = *(const __SCPreferences **)(a1 + 304);
  if (v1)
  {
    v3 = (__CFRunLoop *)sub_100193530();
    SCPreferencesUnscheduleFromRunLoop(v1, v3, kCFRunLoopDefaultMode);
    CFRelease(*(CFTypeRef *)(a1 + 304));
    *(_QWORD *)(a1 + 304) = 0;
  }
}

void sub_100646640(uint64_t a1)
{
  sub_100646254(a1);
  operator delete();
}

_QWORD *sub_100646664@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_1006466DC(_BYTE *a1, int *a2)
{
  int v2;
  void (*v3)(void);

  v2 = *a2;
  if (*a2 > 17)
  {
    if (v2 == 19)
    {
      v3 = *(void (**)(void))(*(_QWORD *)a1 + 144);
      goto LABEL_11;
    }
    if (v2 == 18)
    {
      v3 = *(void (**)(void))(*(_QWORD *)a1 + 144);
      goto LABEL_11;
    }
  }
  else if (v2 == 7)
  {
    sub_100646788((uint64_t)a1);
  }
  else if (v2 == 17 && a1[312])
  {
    v3 = *(void (**)(void))(*(_QWORD *)a1 + 144);
LABEL_11:
    v3();
  }
  return 1;
}

void sub_100646788(uint64_t a1)
{
  NSObject *v2;
  IONotificationPort *v3;
  CFRunLoopSourceRef RunLoopSource;
  __CFRunLoopSource *v5;
  __CFRunLoop *v6;
  IONotificationPort *v7;
  const __CFDictionary *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  _WORD v14[8];
  uint8_t buf[4];

  if (!*(_BYTE *)(a1 + 184))
  {
    if (sub_10075749C())
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021495E8);
      v2 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "registering for battery status changed", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021495E8);
        v14[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "registering for battery status changed", v14, 2);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "void CLDaemonStatus::registerForBatteryStatusChanges()", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
      *(_DWORD *)buf = 0;
      v3 = IONotificationPortCreate(kIOMainPortDefault);
      *(_QWORD *)(a1 + 192) = v3;
      if (v3)
      {
        RunLoopSource = IONotificationPortGetRunLoopSource(v3);
        if (RunLoopSource)
        {
          v5 = RunLoopSource;
          v6 = (__CFRunLoop *)sub_100193530();
          CFRunLoopAddSource(v6, v5, kCFRunLoopDefaultMode);
          v7 = *(IONotificationPort **)(a1 + 192);
          v8 = IOServiceMatching("IOPMPowerSource");
          if (!IOServiceAddMatchingNotification(v7, "IOServiceFirstMatch", v8, (IOServiceMatchingCallback)sub_100647B28, (void *)a1, (io_iterator_t *)buf))sub_100647A90(a1, *(io_iterator_t *)buf);
          IOObjectRelease(*(io_object_t *)buf);
        }
        else
        {
          IONotificationPortDestroy(*(IONotificationPortRef *)(a1 + 192));
          *(_QWORD *)(a1 + 192) = 0;
        }
      }
      *(_BYTE *)(a1 + 184) = 1;
    }
    else
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021495E8);
      v9 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Attempting to register for battery status changes on a battery-less device, no-op", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021495E8);
        v14[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 1, "Attempting to register for battery status changes on a battery-less device, no-op", v14, 2);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 2, "void CLDaemonStatus::registerForBatteryStatusChanges()", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
    }
  }
}

uint64_t sub_100646AF0(uint64_t a1, _DWORD *a2)
{
  void (*v2)(void);

  if (*a2 == 19)
  {
    v2 = *(void (**)(void))(*(_QWORD *)a1 + 144);
    goto LABEL_5;
  }
  if (*a2 == 18)
  {
    v2 = *(void (**)(void))(*(_QWORD *)a1 + 144);
LABEL_5:
    v2();
  }
  return 1;
}

void sub_100646B5C(uint64_t a1, uint64_t a2, unsigned int a3, intptr_t a4)
{
  NSObject *v7;
  uint64_t v8;
  unint64_t v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  NSObject *v13;
  NSObject *v14;
  CLOSTransaction *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  id v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  const char *v27;
  uint8_t *v28;
  const char *v29;
  uint8_t *v30;
  const char *v31;
  uint8_t *v32;
  const char *v33;
  uint8_t *v34;
  const char *v35;
  uint8_t *v36;
  const char *v37;
  uint8_t *v38;
  uint64_t v39;
  _QWORD v40[5];
  _WORD v41[8];
  uint8_t buf[4];
  int v43;
  __int16 v44;
  const char *v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021495E8);
  v7 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(a1 + 232);
    *(_DWORD *)buf = 68289538;
    v43 = 0;
    v44 = 2082;
    v45 = "";
    v46 = 2050;
    v47 = a3;
    v48 = 2050;
    v49 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"received IOKit notification\", \"sleepNotification\":%{public, location:IOMessage}lld, \"keepAliveClientCount\":%{public}lu}", buf, 0x26u);
  }
  HIDWORD(v9) = a3;
  LODWORD(v9) = a3 + 536870288;
  switch((v9 >> 4))
  {
    case 0u:
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021495E8);
      v10 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "system can sleep request", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021495E8);
        v41[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "system can sleep request", v41, 2);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 2, "void CLDaemonStatus::onPowerNotification(io_service_t, natural_t, void *)", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
      goto LABEL_35;
    case 1u:
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021495E8);
      v13 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "system entering sleep", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021495E8);
        v41[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "system entering sleep", v41, 2);
        v26 = (uint8_t *)v25;
        sub_100512490("Generic", 1, 0, 2, "void CLDaemonStatus::onPowerNotification(io_service_t, natural_t, void *)", "%s\n", v25);
        if (v26 != buf)
          free(v26);
      }
      *(_DWORD *)buf = 2;
      (*(void (**)(uint64_t, uint8_t *, _QWORD, uint64_t))(*(_QWORD *)a1 + 144))(a1, buf, 0, 0xFFFFFFFFLL);
      *(_BYTE *)(a1 + 248) = 1;
      if (*(_QWORD *)(a1 + 264))
      {
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021495E8);
        v14 = qword_1022A02A8;
        if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Sleep transaction grace timer still pending on will sleep", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_1021495E8);
          v41[0] = 0;
          LODWORD(v39) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "Sleep transaction grace timer still pending on will sleep", v41, v39);
          v32 = (uint8_t *)v31;
          sub_100512490("Generic", 1, 0, 2, "void CLDaemonStatus::onPowerNotification(io_service_t, natural_t, void *)", "%s\n", v31);
          if (v32 != buf)
            free(v32);
        }
        objc_msgSend(*(id *)(a1 + 264), "invalidate");

        *(_QWORD *)(a1 + 264) = 0;
      }
      v15 = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "CLDaemonStatus.sleeping");
      if (*(_QWORD *)(a1 + 256))
      {
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021495E8);
        v16 = qword_1022A02A8;
        if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Already holding sleep state transaction on will sleep", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_1021495E8);
          v41[0] = 0;
          LODWORD(v39) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "Already holding sleep state transaction on will sleep", v41, v39);
          v34 = (uint8_t *)v33;
          sub_100512490("Generic", 1, 0, 2, "void CLDaemonStatus::onPowerNotification(io_service_t, natural_t, void *)", "%s\n", v33);
          if (v34 != buf)
            free(v34);
        }

      }
      *(_QWORD *)(a1 + 256) = v15;
      *(_QWORD *)(a1 + 272) = a4;
      if (!*(_QWORD *)(a1 + 232))
LABEL_35:
        IOAllowPowerChange(*(_DWORD *)(a1 + 124), a4);
      return;
    case 2u:
      goto LABEL_53;
    case 9u:
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021495E8);
      v17 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "system has powered on", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021495E8);
        v41[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "system has powered on", v41, 2);
        v28 = (uint8_t *)v27;
        sub_100512490("Generic", 1, 0, 2, "void CLDaemonStatus::onPowerNotification(io_service_t, natural_t, void *)", "%s\n", v27);
        if (v28 != buf)
          free(v28);
      }
      if (!*(_QWORD *)(a1 + 256))
      {
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021495E8);
        v18 = qword_1022A02A8;
        if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#warning No sleep state tranaction on has powered on", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_1021495E8);
          v41[0] = 0;
          LODWORD(v39) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "#warning No sleep state tranaction on has powered on", v41, v39);
          v36 = (uint8_t *)v35;
          sub_100512490("Generic", 1, 0, 2, "void CLDaemonStatus::onPowerNotification(io_service_t, natural_t, void *)", "%s\n", v35);
          if (v36 != buf)
            free(v36);
        }
      }
      v19 = objc_msgSend(*(id *)(a1 + 40), "newTimer");
      *(_QWORD *)(a1 + 264) = v19;
      v40[0] = _NSConcreteStackBlock;
      v40[1] = 3221225472;
      v40[2] = sub_10064787C;
      v40[3] = &unk_10212ECA0;
      v40[4] = a1;
      objc_msgSend(v19, "setHandler:", v40);
      objc_msgSend(*(id *)(a1 + 264), "setNextFireDelay:", 5.0);
      return;
    case 0xBu:
      *(CFAbsoluteTime *)(a1 + 280) = CFAbsoluteTimeGetCurrent();
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021495E8);
      v20 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "system will power on", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021495E8);
        v41[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "system will power on", v41, 2);
        v30 = (uint8_t *)v29;
        sub_100512490("Generic", 1, 0, 2, "void CLDaemonStatus::onPowerNotification(io_service_t, natural_t, void *)", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
LABEL_53:
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021495E8);
      v21 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "system exiting sleep", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021495E8);
        v41[0] = 0;
        LODWORD(v39) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "system exiting sleep", v41, v39);
        v24 = (uint8_t *)v23;
        sub_100512490("Generic", 1, 0, 2, "void CLDaemonStatus::onPowerNotification(io_service_t, natural_t, void *)", "%s\n", v23);
        if (v24 != buf)
          free(v24);
      }
      *(_DWORD *)buf = 3;
      (*(void (**)(uint64_t, uint8_t *, _QWORD, uint64_t))(*(_QWORD *)a1 + 144))(a1, buf, 0, 0xFFFFFFFFLL);
      *(_BYTE *)(a1 + 248) = 0;
      if (a3 == -536870256)
      {
        if (!*(_QWORD *)(a1 + 256))
        {
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_1021495E8);
          v22 = qword_1022A02A8;
          if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#warning No sleep state tranaction on will not sleep", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A02A0 != -1)
              dispatch_once(&qword_1022A02A0, &stru_1021495E8);
            v41[0] = 0;
            LODWORD(v39) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "#warning No sleep state tranaction on will not sleep", v41, v39);
            v38 = (uint8_t *)v37;
            sub_100512490("Generic", 1, 0, 2, "void CLDaemonStatus::onPowerNotification(io_service_t, natural_t, void *)", "%s\n", v37);
            if (v38 != buf)
              free(v38);
          }
        }

        *(_QWORD *)(a1 + 256) = 0;
      }
      break;
    default:
      return;
  }
}

void sub_10064787C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);

  *(_QWORD *)(v1 + 256) = 0;
}

void sub_1006478A4(uint64_t a1, uint64_t a2, int a3)
{
  double v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  NSObject *v13;
  _DWORD v14[2];
  char v15;
  BOOL v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  __int16 v27;
  double v28;

  v5 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 280);
  v6 = objc_msgSend(*(id *)(a1 + 112), "reachability");
  v7 = v6;
  v8 = a3 << 30;
  if ((a3 & 0x40000) != 0)
    v9 = 1;
  else
    v9 = 2;
  v10 = v9 & (v8 >> 31);
  v14[0] = v6;
  v14[1] = v9 & (v8 >> 31);
  v11 = *(unsigned __int8 *)(a1 + 248);
  v15 = *(_BYTE *)(a1 + 248);
  v12 = v5 >= 0.0;
  if (v5 >= 3.0)
    v12 = 0;
  v16 = v12;
  sub_10064417C(a1, v10);
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021495E8);
  v13 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68290050;
    v19 = 2082;
    v18 = 0;
    v20 = "";
    v21 = 1026;
    v22 = v11;
    v23 = 2050;
    v24 = v10;
    v25 = 1026;
    v26 = a3;
    v27 = 2050;
    v28 = v5;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"reachability information\", \"aboutToSleep\":%{public}hhd, \"reachability\":%{public, location:CLDaemonStatus_Type::Reachability}lld, \"reachabilityFlags\":%{public}d, \"timeSinceWake_s\":\"%{public}.09f\"}", buf, 0x32u);
  }
  if (v7 != (_DWORD)v10)
  {
    *(_DWORD *)buf = 6;
    (*(void (**)(uint64_t, uint8_t *, _DWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, v14, 1, 0xFFFFFFFFLL, 0);
  }
}

uint64_t sub_100647A50(int a1)
{
  BOOL v2;
  uint64_t result;

  v2 = sub_10016AE80();
  if (a1 == 4 && v2)
    return 1;
  LODWORD(result) = sub_100761B14();
  if (a1 == 3)
    return result;
  else
    return 0;
}

uint64_t sub_100647A90(uint64_t a1, io_iterator_t iterator)
{
  uint64_t result;
  io_registry_entry_t v5;

  result = IOIteratorNext(iterator);
  if ((_DWORD)result)
  {
    v5 = result;
    do
    {
      if (!IOServiceAddInterestNotification(*(IONotificationPortRef *)(a1 + 192), v5, "IOGeneralInterest", (IOServiceInterestCallback)sub_10002FAB0, (void *)a1, (io_object_t *)(a1 + 200)))sub_100063264((_QWORD *)a1, v5);
      IOObjectRelease(v5);
      result = IOIteratorNext(iterator);
      v5 = result;
    }
    while ((_DWORD)result);
  }
  return result;
}

void sub_100647B28(uint64_t a1, int a2)
{
  NSObject *v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  int v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLDaemonStatus::onMatchedBatteries");
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021495C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonStatus::onMatchedBatteries", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021495C8);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a1;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonStatus::onMatchedBatteries\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  v6 = objc_msgSend(*(id *)(a1 + 32), "silo");
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100649374;
  v7[3] = &unk_10213D6C0;
  v7[4] = a1;
  v8 = a2;
  objc_msgSend(v6, "sync:", v7);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_100647D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

const __SCPreferences *sub_100647D30(uint64_t a1)
{
  const __SCPreferences *result;
  const __CFBoolean *v3;
  CFTypeID v4;

  result = *(const __SCPreferences **)(a1 + 304);
  if (result)
  {
    SCPreferencesSynchronize(result);
    result = (const __SCPreferences *)SCPreferencesGetValue(*(SCPreferencesRef *)(a1 + 304), CFSTR("LowPowerMode"));
    if (result)
    {
      v3 = result;
      v4 = CFGetTypeID(result);
      if (v4 == CFBooleanGetTypeID())
        return (const __SCPreferences *)(CFBooleanGetValue(v3) != 0);
      else
        return 0;
    }
  }
  return result;
}

void sub_100647D9C(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  id v8;
  _QWORD v9[6];
  int v10;
  os_activity_scope_state_s state;
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;

  CLProfilingIdentify("CLDaemonStatus::onRestrictedPowerMode");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021495C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v12 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonStatus::onRestrictedPowerMode", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021495C8);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = "activity";
      v19 = 2050;
      v20 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonStatus::onRestrictedPowerMode\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v12 = 0;
  }
  v8 = objc_msgSend(*(id *)(a3 + 32), "silo");
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100649384;
  v9[3] = &unk_102149608;
  v9[4] = a3;
  v9[5] = a1;
  v10 = a2;
  objc_msgSend(v8, "sync:", v9);
  if (v12)
    os_activity_scope_leave(&state);
}

void sub_100647F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100647FA8()
{
  operator new();
}

void sub_100648054(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_100648090()
{
  operator new();
}

void sub_100648140(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_10064817C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = &off_1021497A8;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

BOOL sub_100648250(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021495C8);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021495C8);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLDaemonStatus_Type::Notification, NotificationData_T = CLDaemonStatus_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1006484D0(uint64_t a1, int *a2, uint64_t a3)
{
  char *v6;
  uint64_t **v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int v12;
  __int128 v13;
  int *v14;

  v6 = (char *)operator new(0x30uLL);
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_102149738;
  *((_QWORD *)v6 + 1) = 0;
  *(_OWORD *)(v6 + 24) = *(_OWORD *)a3;
  *((_QWORD *)v6 + 5) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)&v13 = v6 + 24;
  *((_QWORD *)&v13 + 1) = v6;
  v12 = *a2;
  v14 = &v12;
  v7 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v12, (uint64_t)&unk_101B9EB60, &v14);
  sub_1002B7674((uint64_t)(v7 + 8), &v13);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return 1;
}

void sub_1006485AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006485C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE v5[24];

  v5[0] = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_1006485F8(uint64_t a1, signed __int32 *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v30[20];
  __int16 v31;
  _QWORD *v32;
  __int16 v33;
  std::__shared_weak_count *v34;
  _QWORD **v35;
  _QWORD *v36[3];
  std::__shared_weak_count *v37;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021495C8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v30 = 2082;
      *(_QWORD *)&v30[2] = "";
      *(_WORD *)&v30[10] = 2082;
      *(_QWORD *)&v30[12] = "activity";
      v31 = 2082;
      v32 = v10;
      v33 = 2050;
      v34 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v35 = v36;
      memset(v36, 0, sizeof(v36));
      v37 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v35);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v30, *(_QWORD **)&v30[8]);
      v21 = v37;
      if (v37)
      {
        v22 = (unint64_t *)&v37->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v35, v36[0]);
    }
    if (a4)
    {
      v24 = (char *)operator new(0x30uLL);
      *((_QWORD *)v24 + 1) = 0;
      *((_QWORD *)v24 + 2) = 0;
      *(_QWORD *)v24 = off_102149738;
      *(_OWORD *)(v24 + 24) = *(_OWORD *)a3;
      *((_QWORD *)v24 + 5) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)buf = v24 + 24;
      *(_QWORD *)v30 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v25 = *(std::__shared_weak_count **)v30;
      if (*(_QWORD *)v30)
      {
        v26 = (unint64_t *)(*(_QWORD *)v30 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_100649394();
    os_activity_scope_leave(&state);
  }
}

void sub_100648C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100648C84(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021495C8);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021495C8);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::listClients() [Notification_T = CLDaemonStatus_Type::Notification, NotificationData_T = CLDaemonStatus_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021495C8);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021495C8);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::listClients() [Notification_T = CLDaemonStatus_Type::Notification, NotificationData_T = CLDaemonStatus_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_1021495C8);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021495C8);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::listClients() [Notification_T = CLDaemonStatus_Type::Notification, NotificationData_T = CLDaemonStatus_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

id sub_100649230(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_10064994C(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_10064927C(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_1006492A8(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1006492D4(uint64_t a1, uint64_t a2)
{
  sub_100646B5C(*(_QWORD *)(a1 + 32), a2, *(_DWORD *)(a1 + 52), *(_QWORD *)(a1 + 40));
}

void sub_1006492E4(id a1)
{
  qword_1022A02A8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

void sub_100649310(uint64_t a1, uint64_t a2)
{
  sub_1006478A4(*(_QWORD *)(a1 + 32), a2, *(_DWORD *)(a1 + 48));
}

void sub_100649320(uint64_t a1)
{
  sub_1006443E8(*(SCDynamicStoreRef **)(a1 + 32));
}

void sub_100649328(uint64_t a1)
{
  sub_100645034(*(int **)(a1 + 32));
}

void sub_100649330(uint64_t a1)
{
  sub_100645348(*(int **)(a1 + 32));
}

void sub_100649338(uint64_t a1)
{
  sub_10064565C(*(_QWORD *)(a1 + 32));
}

id sub_100649340(uint64_t a1)
{
  return sub_100645844(*(id **)(a1 + 32));
}

void sub_100649348(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_100649374(uint64_t a1)
{
  return sub_100647A90(*(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 40));
}

uint64_t sub_100649384(uint64_t a1, uint64_t a2)
{
  return sub_100645D7C(*(_QWORD *)(a1 + 32), a2, *(_DWORD *)(a1 + 48));
}

void sub_100649394()
{
  operator new();
}

void sub_10064942C(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_10064994C(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_100649800(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021495C8);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021495C8);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLDaemonStatus_Type::Notification, NotificationData_T = CLDaemonStatus_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_100649800(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_10064994C(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

void sub_1006498DC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102149738;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1006498F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102149738;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10064992C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

id sub_10064994C(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_100649998(a1);
  else
    return 0;
}

id sub_100649998(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102149778);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BB8844 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102149778);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102149778);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BB8844 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102149778);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLDaemonStatus_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_100649D44(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_100649D70(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = (uint64_t *)(a1 + 8);
  do
  {
    v5 = v2[4];
    v6 = v5 < v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (!v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4])
    return 0;
  sub_10008A9F0((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

void sub_100649DE8()
{
  operator new();
}

uint64_t sub_100649E80(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

double sub_100649EA0(_OWORD *a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 28) = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

_DWORD *sub_100649EB0(_DWORD *result, int a2)
{
  ++*result;
  result[5] += a2;
  return result;
}

uint64_t sub_100649ECC(unsigned int *a1)
{
  uint64_t result;
  double v3;
  double v4;
  unsigned int v5;
  double v6;
  double v7;
  unsigned int v8;
  unsigned int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  unsigned int v14;
  double v15;
  double v16;
  double v17;
  double v18;
  _OWORD v19[3];
  _QWORD v20[20];
  _QWORD v21[20];

  memset(v19, 0, 44);
  result = sub_10064A294(a1, v19);
  if ((result & 1) == 0)
  {
    v5 = a1[10];
    v6 = 0.0;
    v7 = 0.0;
    if (v5)
    {
      LODWORD(v3) = *a1;
      v3 = (double)*(unint64_t *)&v3;
      v4 = (double)v5;
      v7 = v3 / (double)v5;
    }
    v8 = a1[4];
    v9 = a1[1];
    if (v8)
    {
      v3 = (double)v9;
      v4 = (double)v8;
      v6 = (double)v9 / (double)v8;
    }
    v10 = 0.0;
    v11 = 0.0;
    v12 = 0.0;
    if (v9)
    {
      LODWORD(v3) = a1[2];
      LODWORD(v4) = a1[3];
      v11 = (double)*(unint64_t *)&v3 / (double)v9;
      v3 = (double)*(unint64_t *)&v4;
      v12 = (double)*(unint64_t *)&v4 / (double)v9;
    }
    if (v8)
    {
      LODWORD(v3) = a1[5];
      v3 = (double)*(unint64_t *)&v3;
      v4 = (double)v8;
      v10 = v3 / (double)v8;
    }
    if (v5)
    {
      LODWORD(v3) = a1[6];
      v4 = (double)v5;
      v13 = (double)*(unint64_t *)&v3 / (double)v5;
      v14 = a1[7];
      v3 = (double)v14;
      v15 = (double)v14 / v4;
      if (v14)
      {
LABEL_12:
        LODWORD(v3) = a1[8];
        LODWORD(v4) = a1[9];
        v16 = (double)*(unint64_t *)&v3 / (double)v14;
        v17 = (double)*(unint64_t *)&v4 / (double)v14;
LABEL_15:
        v18 = v17;
        v20[0] = CFSTR("alsRequestResponseCount");
        v21[0] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *a1);
        v20[1] = CFSTR("alsRequestResponseScanBufferFractionUpperBound");
        v21[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v7);
        v20[2] = CFSTR("apLocationFoundCount");
        v21[2] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1[1]);
        v20[3] = CFSTR("apLocationFoundFraction");
        v21[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v6);
        v20[4] = CFSTR("apLocationFoundInAlsCacheCount");
        v21[4] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1[2]);
        v20[5] = CFSTR("apLocationFoundInAlsCacheFraction");
        v21[5] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v11);
        v20[6] = CFSTR("apLocationFoundInTilesCount");
        v21[6] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1[3]);
        v20[7] = CFSTR("apLocationFoundInTilesFraction");
        v21[7] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v12);
        v20[8] = CFSTR("apLocationLookupCount");
        v21[8] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1[4]);
        v20[9] = CFSTR("apLocationsInAlsRequestResponseCount");
        v21[9] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1[5]);
        v20[10] = CFSTR("apLocationsInAlsRequestResponseFractionUpperBound");
        v21[10] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v10);
        v20[11] = CFSTR("emptyScanBufferLookupCount");
        v21[11] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1[6]);
        v20[12] = CFSTR("emptyScanBufferLookupFraction");
        v21[12] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v13);
        v20[13] = CFSTR("scanBufferFoundApLocationCount");
        v21[13] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1[7]);
        v20[14] = CFSTR("scanBufferFoundApLocationFraction");
        v21[14] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v15);
        v20[15] = CFSTR("scanBufferFoundApLocationInAlsCacheCount");
        v21[15] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1[8]);
        v20[16] = CFSTR("scanBufferFoundApLocationInAlsCacheFraction");
        v21[16] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v16);
        v20[17] = CFSTR("scanBufferFoundApLocationInTilesCount");
        v21[17] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1[9]);
        v20[18] = CFSTR("scanBufferFoundApLocationInTilesFraction");
        v21[18] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v18);
        v20[19] = CFSTR("scanBufferLookupCount");
        v21[19] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1[10]);
        result = AnalyticsSendEvent(CFSTR("com.apple.locationd.WifiScanApLocationLookups"), +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v21, v20, 20));
        *(_OWORD *)(a1 + 7) = 0u;
        *(_OWORD *)a1 = 0u;
        *((_OWORD *)a1 + 1) = 0u;
        return result;
      }
    }
    else
    {
      v14 = a1[7];
      v13 = 0.0;
      v15 = 0.0;
      if (v14)
        goto LABEL_12;
    }
    v16 = 0.0;
    v17 = 0.0;
    goto LABEL_15;
  }
  return result;
}

BOOL sub_10064A294(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2
      && a1[1] == a2[1]
      && a1[2] == a2[2]
      && a1[3] == a2[3]
      && a1[4] == a2[4]
      && a1[5] == a2[5]
      && a1[6] == a2[6]
      && a1[7] == a2[7]
      && a1[8] == a2[8]
      && a1[9] == a2[9]
      && a1[10] == a2[10];
}

void sub_10064A350(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_10064A7FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_10064AD18(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_10064AD28(int *a1)
{
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  double v10;
  int v11;
  double v12;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  double v21;
  int v22;
  double v23;
  const char *v24;
  uint8_t *v25;
  _QWORD v26[5];
  _DWORD v27[2];
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  double v41;
  __int16 v42;
  int v43;
  __int16 v44;
  double v45;
  uint8_t buf[4];
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  double v61;
  __int16 v62;
  int v63;
  __int16 v64;
  double v65;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021497E0);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v3 = *a1;
    v4 = a1[1];
    v5 = a1[2];
    v6 = a1[3];
    v7 = a1[4];
    v8 = a1[5];
    v9 = a1[6];
    v10 = (double)a1[7] * 0.0009765625;
    v11 = a1[8];
    v12 = (double)a1[9] * 0.0009765625;
    *(_DWORD *)buf = 67242496;
    v47 = v3;
    v48 = 1026;
    v49 = v4;
    v50 = 1026;
    v51 = v5;
    v52 = 1026;
    v53 = v6;
    v54 = 1026;
    v55 = v7;
    v56 = 1026;
    v57 = v8;
    v58 = 1026;
    v59 = v9;
    v60 = 2050;
    v61 = v10;
    v62 = 1026;
    v63 = v11;
    v64 = 2050;
    v65 = v12;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "UclpMetric, celltileusage, attempts, %{public}d, als, %{public}d, tiles, %{public}d, unknown, %{public}d, alsreq, %{public}d, alscells, %{public}d, nCurrent, %{public}d, kbCurrent, %{public}.1f, nNeighbor, %{public}d, kbNeighbor, %{public}.01f", buf, 0x46u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021497E0);
    v14 = *a1;
    v15 = a1[1];
    v16 = a1[2];
    v17 = a1[3];
    v18 = a1[4];
    v19 = a1[5];
    v20 = a1[6];
    v21 = (double)a1[7] * 0.0009765625;
    v22 = a1[8];
    v23 = (double)a1[9] * 0.0009765625;
    v27[0] = 67242496;
    v27[1] = v14;
    v28 = 1026;
    v29 = v15;
    v30 = 1026;
    v31 = v16;
    v32 = 1026;
    v33 = v17;
    v34 = 1026;
    v35 = v18;
    v36 = 1026;
    v37 = v19;
    v38 = 1026;
    v39 = v20;
    v40 = 2050;
    v41 = v21;
    v42 = 1026;
    v43 = v22;
    v44 = 2050;
    v45 = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "UclpMetric, celltileusage, attempts, %{public}d, als, %{public}d, tiles, %{public}d, unknown, %{public}d, alsreq, %{public}d, alscells, %{public}d, nCurrent, %{public}d, kbCurrent, %{public}.1f, nNeighbor, %{public}d, kbNeighbor, %{public}.01f", v27, 70);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "void CLCellLocationMetrics::sendMetrics()", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_10064B00C;
  v26[3] = &unk_102131FE8;
  v26[4] = a1;
  return AnalyticsSendEventLazy(CFSTR("com.apple.clx.cellloc.celltileusage"), v26);
}

NSDictionary *sub_10064B00C(uint64_t a1)
{
  unsigned int *v1;
  unsigned int v2;
  int v3;
  unsigned int v4;
  BOOL v5;
  signed int v6;
  int v7;
  unsigned int v8;
  signed int v9;
  int v10;
  unsigned int v11;
  signed int v12;
  int v13;
  unsigned int v14;
  signed int v15;
  int v16;
  unsigned int v17;
  signed int v18;
  int v19;
  unsigned int v20;
  signed int v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  signed int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  _QWORD v36[10];
  _QWORD v37[10];

  v1 = *(unsigned int **)(a1 + 32);
  v36[0] = CFSTR("attempts");
  v2 = *v1;
  v3 = 1;
  if ((int)*v1 >= 101)
  {
    v4 = *v1;
    do
    {
      v2 = v4 / 0xA;
      v3 *= 10;
      v5 = v4 > 0x3F1;
      v4 /= 0xAu;
    }
    while (v5);
  }
  v37[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v3 * v2);
  v36[1] = CFSTR("als");
  v6 = v1[1];
  v7 = 1;
  if (v6 >= 101)
  {
    v8 = v1[1];
    do
    {
      v6 = v8 / 0xA;
      v7 *= 10;
      v5 = v8 > 0x3F1;
      v8 /= 0xAu;
    }
    while (v5);
  }
  v37[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (v7 * v6));
  v36[2] = CFSTR("tiles");
  v9 = v1[2];
  v10 = 1;
  if (v9 >= 101)
  {
    v11 = v1[2];
    do
    {
      v9 = v11 / 0xA;
      v10 *= 10;
      v5 = v11 > 0x3F1;
      v11 /= 0xAu;
    }
    while (v5);
  }
  v37[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (v10 * v9));
  v36[3] = CFSTR("unknown");
  v12 = v1[3];
  v13 = 1;
  if (v12 >= 101)
  {
    v14 = v1[3];
    do
    {
      v12 = v14 / 0xA;
      v13 *= 10;
      v5 = v14 > 0x3F1;
      v14 /= 0xAu;
    }
    while (v5);
  }
  v37[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (v13 * v12));
  v36[4] = CFSTR("alsrequests");
  v15 = v1[4];
  v16 = 1;
  if (v15 >= 101)
  {
    v17 = v1[4];
    do
    {
      v15 = v17 / 0xA;
      v16 *= 10;
      v5 = v17 > 0x3F1;
      v17 /= 0xAu;
    }
    while (v5);
  }
  v37[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (v16 * v15));
  v36[5] = CFSTR("alsreturned");
  v18 = v1[5];
  v19 = 1;
  if (v18 >= 101)
  {
    v20 = v1[5];
    do
    {
      v18 = v20 / 0xA;
      v19 *= 10;
      v5 = v20 > 0x3F1;
      v20 /= 0xAu;
    }
    while (v5);
  }
  v37[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (v19 * v18));
  v36[6] = CFSTR("numdownloadcurrent");
  v21 = v1[6];
  v22 = 1;
  if (v21 >= 101)
  {
    v23 = v1[6];
    do
    {
      v21 = v23 / 0xA;
      v22 *= 10;
      v5 = v23 > 0x3F1;
      v23 /= 0xAu;
    }
    while (v5);
  }
  v37[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (v22 * v21));
  v36[7] = CFSTR("kbcurrent");
  v24 = v1[7];
  v25 = v24 / 1024;
  if (v24 <= 103423)
  {
    v26 = 1;
  }
  else
  {
    v26 = 1;
    v27 = v25;
    do
    {
      v25 = v27 / 0xA;
      v26 *= 10;
      v5 = v27 > 0x3F1;
      v27 /= 0xAu;
    }
    while (v5);
  }
  v37[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v26 * v25);
  v36[8] = CFSTR("numdownloadneighbor");
  v28 = v1[8];
  v29 = 1;
  if (v28 >= 101)
  {
    v30 = v1[8];
    do
    {
      v28 = v30 / 0xA;
      v29 *= 10;
      v5 = v30 > 0x3F1;
      v30 /= 0xAu;
    }
    while (v5);
  }
  v37[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (v29 * v28));
  v36[9] = CFSTR("kbneighbor");
  v31 = v1[9];
  v32 = v31 / 1024;
  if (v31 <= 103423)
  {
    v33 = 1;
  }
  else
  {
    v33 = 1;
    v34 = v32;
    do
    {
      v32 = v34 / 0xA;
      v33 *= 10;
      v5 = v34 > 0x3F1;
      v34 /= 0xAu;
    }
    while (v5);
  }
  v37[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v33 * v32);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v37, v36, 10);
}

void sub_10064B400(uint64_t a1, int a2)
{
  int v3;
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[2];
  __int16 v12;
  int v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  int v17;

  v3 = *(_DWORD *)(a1 + 20) + a2;
  ++*(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 20) = v3;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021497E0);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)buf = 67240448;
    v15 = v5;
    v16 = 1026;
    v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "@Celltileusage, als, %{public}d, cells, %{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021497E0);
    v7 = *(_DWORD *)(a1 + 16);
    v8 = *(_DWORD *)(a1 + 20);
    v11[0] = 67240448;
    v11[1] = v7;
    v12 = 1026;
    v13 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "@Celltileusage, als, %{public}d, cells, %{public}d", v11, 14);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLCellLocationMetrics::alsReply(int, CFAbsoluteTime)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
}

void sub_10064B5D8(_DWORD *a1, int a2, int a3)
{
  _DWORD *v6;
  NSObject *v7;
  int v8;
  int v9;
  double v10;
  double v11;
  int v12;
  int v13;
  double v14;
  double v15;
  const char *v16;
  uint8_t *v17;
  _DWORD v18[2];
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  double v24;
  __int16 v25;
  int v26;
  __int16 v27;
  double v28;
  uint8_t buf[4];
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  double v36;
  __int16 v37;
  int v38;
  __int16 v39;
  double v40;

  if (a2)
  {
    ++a1[6];
    v6 = a1 + 7;
  }
  else
  {
    ++a1[8];
    v6 = a1 + 9;
  }
  *v6 += a3;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021497E0);
  v7 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    v8 = a1[6];
    v9 = a1[8];
    v10 = (double)(int)a1[7] * 0.0009765625;
    v11 = (double)(int)a1[9] * 0.0009765625;
    *(_DWORD *)buf = 67241472;
    v30 = a2;
    v31 = 1026;
    v32 = a3;
    v33 = 1026;
    v34 = v8;
    v35 = 2050;
    v36 = v10;
    v37 = 1026;
    v38 = v9;
    v39 = 2050;
    v40 = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "@Celltileusage, download, isCurrent, %{public}d, size, %{public}d, nCurrent, %{public}d, kbCurrent, %{public}.1f, nNeighbor, %{public}d, kbNeighbor, %{public}.01f", buf, 0x2Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021497E0);
    v12 = a1[6];
    v13 = a1[8];
    v14 = (double)(int)a1[7] * 0.0009765625;
    v15 = (double)(int)a1[9] * 0.0009765625;
    v18[0] = 67241472;
    v18[1] = a2;
    v19 = 1026;
    v20 = a3;
    v21 = 1026;
    v22 = v12;
    v23 = 2050;
    v24 = v14;
    v25 = 1026;
    v26 = v13;
    v27 = 2050;
    v28 = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "@Celltileusage, download, isCurrent, %{public}d, size, %{public}d, nCurrent, %{public}d, kbCurrent, %{public}.1f, nNeighbor, %{public}d, kbNeighbor, %{public}.01f", v18, 46);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLCellLocationMetrics::tileDownloaded(BOOL, int, CFAbsoluteTime)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
}

void sub_10064B864(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_10064B890(uint64_t a1@<X8>)
{
  _BYTE *v2;
  int v3;
  void *__p[2];
  uint64_t v5;

  sub_1015A2E04(__p, "");
  *(_QWORD *)a1 = 0x100000003;
  *(_WORD *)(a1 + 8) = 0;
  v2 = (_BYTE *)(a1 + 16);
  if (SHIBYTE(v5) < 0)
  {
    sub_100115CE4(v2, __p[0], (unint64_t)__p[1]);
    v3 = SHIBYTE(v5);
    *(_QWORD *)(a1 + 40) = 0;
    if (v3 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)v2 = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = 0;
  }
}

void sub_10064B914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10064B930(uint64_t a1)
{
  _BYTE v3[16];
  void *__p;
  char v5;

  sub_10064B890((uint64_t)v3);
  sub_10064B9AC(a1, (uint64_t)v3, (const char **)&off_102149800);
  if (v5 < 0)
    operator delete(__p);
  return a1;
}

void sub_10064B984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10064B9A0(uint64_t a1, uint64_t a2)
{
  return sub_10064B9AC(a1, a2, (const char **)&off_102149800);
}

uint64_t sub_10064B9AC(uint64_t a1, uint64_t a2, const char **a3)
{
  uint64_t v5;
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  v5 = sub_100631F84(a1, a2);
  if (sub_1000CC4F4(v5))
  {
    sub_100634364(a1, "Status", a3, 0, 0);
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102149890);
    v6 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Fence: No access to state DB", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102149890);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Fence: No access to state DB", v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "CLFenceMonitorDatabase::CLFenceMonitorDatabase(const CLSqliteDatabase::SqliteProperties &, const CLSqliteDatabase::ColumnInfo *)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  return a1;
}

void sub_10064BB70(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1006322C0(v1);
  _Unwind_Resume(a1);
}

void sub_10064BB8C(uint64_t a1)
{
  _QWORD *v2;
  char *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  void *__p[2];
  char v8;
  uint8_t buf[16];
  uint64_t v10;
  _QWORD v11[8];

  if (sub_1000CC4F4(a1))
  {
    sub_100263E50((uint64_t)buf);
    v2 = sub_100263F7C(&v10, (uint64_t)"DELETE FROM ", 12);
    sub_100263F7C(v2, (uint64_t)"Status", 6);
    std::stringbuf::str(__p, v11);
    if (v8 >= 0)
      v3 = (char *)__p;
    else
      v3 = (char *)__p[0];
    sub_1000CDA68(a1, v3);
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102149890);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Fence: state No access to DB", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102149890);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Fence: state No access to DB", __p, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 0, "void CLFenceMonitorDatabase::clearLocationData()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
}

void sub_10064BE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_10064BE8C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  NSObject *v6;
  const char *v7;
  char *v8;
  NSObject *v9;
  unint64_t v10;
  NSObject *v11;
  _BYTE *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  const char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  char *v25;
  _BYTE __p[12];
  __int16 v27;
  unsigned int v28;
  __int16 v29;
  void *v30;
  void *v31;
  char v32;
  _BYTE buf[12];
  __int16 v34;
  unsigned int v35;
  __int16 v36;
  _BYTE *v37;

  if (sub_1000CC4F4(a1))
  {
    if (a3 < 2)
    {
      v10 = sub_100C3C3BC(a2);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102149890);
      v11 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        sub_100C3B9BC(a2, __p);
        v12 = SBYTE3(v30) >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 134284035;
        *(_QWORD *)&buf[4] = v10;
        v34 = 1025;
        v35 = a3;
        v36 = 2081;
        v37 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Fence: state store, %{private}lld, %{private}d, %{private}s", buf, 0x1Cu);
        if (SBYTE3(v30) < 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102149890);
        v22 = qword_1022A0068;
        sub_100C3B9BC(a2, &v31);
        if (v32 >= 0)
          v23 = &v31;
        else
          v23 = v31;
        *(_DWORD *)__p = 134284035;
        *(_QWORD *)&__p[4] = v10;
        v27 = 1025;
        v28 = a3;
        v29 = 2081;
        v30 = v23;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 2, "Fence: state store, %{private}lld, %{private}d, %{private}s", __p, 28);
        v25 = v24;
        if (v32 < 0)
          operator delete(v31);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceMonitorDatabase::storeFenceState(const CLFenceManager_Type::Fence &, CLFenceManager_Type::FenceStatus)", "%s\n", v25);
        if (v25 != buf)
          free(v25);
      }
      sub_100263E50((uint64_t)__p);
      v13 = sub_100263F7C((unsigned int *)((char *)&v28 + 2), (uint64_t)"INSERT OR REPLACE INTO ", 23);
      v14 = sub_100263F7C(v13, (uint64_t)"Status", 6);
      v15 = sub_100263F7C(v14, (uint64_t)" (", 2);
      v16 = sub_100263F7C(v15, (uint64_t)"Key", 3);
      v17 = sub_100263F7C(v16, (uint64_t)", ", 2);
      v18 = sub_100263F7C(v17, (uint64_t)"State", 5);
      sub_100263F7C(v18, (uint64_t)") VALUES (?, ?)", 15);
      std::stringbuf::str(buf, (char *)&v30 + 4);
      if (SBYTE3(v37) >= 0)
        v19 = buf;
      else
        v19 = *(char **)buf;
      sub_1000CDA68(a1, v19);
    }
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102149890);
    v6 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Fence: state Invalid for DB", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102149890);
      *(_WORD *)__p = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Fence: state Invalid for DB", __p, 2);
      v8 = (char *)v7;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLFenceMonitorDatabase::storeFenceState(const CLFenceManager_Type::Fence &, CLFenceManager_Type::FenceStatus)", "%s\n", v7);
LABEL_33:
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102149890);
    v9 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Fence: state No access to DB", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102149890);
      *(_WORD *)__p = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Fence: state No access to DB", __p, 2);
      v8 = (char *)v21;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLFenceMonitorDatabase::storeFenceState(const CLFenceManager_Type::Fence &, CLFenceManager_Type::FenceStatus)", "%s\n", v21);
      goto LABEL_33;
    }
  }
  return 0;
}

void sub_10064C694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v56;

  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  sub_1018B38B4((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_10064C6EC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  NSObject *v5;
  void **v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char *p_p;
  NSObject *v12;
  const char *v14;
  void **v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  _BYTE buf[12];
  __int16 v21;
  void **v22;
  char v23;
  _QWORD v24[8];
  _DWORD v25[3];
  __int16 v26;
  _BYTE *v27;
  void *__p;
  char v29;

  if (sub_1000CC4F4(a1))
  {
    v4 = sub_100C3C3BC(a2);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102149890);
    v5 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      sub_100C3B9BC(a2, &__p);
      v6 = v29 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 134283779;
      *(_QWORD *)&buf[4] = v4;
      v21 = 2081;
      v22 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Fence: state remove, %{private}lld, %{private}s", buf, 0x16u);
      if (v29 < 0)
        operator delete(__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102149890);
      v16 = qword_1022A0068;
      sub_100C3B9BC(a2, buf);
      if (v23 >= 0)
        v17 = buf;
      else
        v17 = *(_BYTE **)buf;
      v25[0] = 134283779;
      *(_QWORD *)&v25[1] = v4;
      v26 = 2081;
      v27 = v17;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v16, 2, "Fence: state remove, %{private}lld, %{private}s", v25, 22);
      v19 = v18;
      if (v23 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceMonitorDatabase::removeFenceState(const CLFenceManager_Type::Fence &)", "%s\n", v19);
      if (v19 != (char *)&__p)
        free(v19);
    }
    sub_100263E50((uint64_t)buf);
    v7 = sub_100263F7C((void ***)((char *)&v22 + 2), (uint64_t)"DELETE FROM ", 12);
    v8 = sub_100263F7C(v7, (uint64_t)"Status", 6);
    v9 = sub_100263F7C(v8, (uint64_t)" WHERE ", 7);
    v10 = sub_100263F7C(v9, (uint64_t)"Key", 3);
    sub_100263F7C(v10, (uint64_t)"=?", 2);
    std::stringbuf::str(&__p, v24);
    if (v29 >= 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    sub_1000CDA68(a1, p_p);
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102149890);
  v12 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Fence: state No access to DB", (uint8_t *)&__p, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102149890);
    *(_WORD *)buf = 0;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0068, 17, "Fence: state No access to DB", buf, 2);
    v15 = (void **)v14;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLFenceMonitorDatabase::removeFenceState(const CLFenceManager_Type::Fence &)", "%s\n", v14);
    if (v15 != &__p)
      free(v15);
  }
  return 0;
}

void sub_10064CD80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v56;

  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  sub_1018B38B4((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_10064CDD8@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  uint64_t v11;
  _QWORD v12[10];
  char v13;
  uint64_t v14;

  sub_100263E50((uint64_t)v10);
  v4 = *a1;
  v5 = a1[1];
  if (*a1 != v5)
  {
    v6 = 0;
    do
    {
      v7 = sub_100C3C3BC(v4);
      if ((v6 & 1) != 0)
        sub_100263F7C(&v11, (uint64_t)", ", 2);
      std::ostream::operator<<(&v11, v7);
      v4 += 248;
      v6 = 1;
    }
    while (v4 != v5);
  }
  std::stringbuf::str(a2, v12);
  *(_QWORD *)((char *)v10
  v11 = v8;
  if (v13 < 0)
    operator delete((void *)v12[8]);
  std::streambuf::~streambuf(v12);
  return std::ios::~ios(&v14);
}

void sub_10064CEF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10064CF08(uint64_t a1, uint64_t *a2)
{
  _BOOL8 v4;
  NSObject *v5;
  unint64_t v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  const std::string::value_type *p_buf;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  char *v21;
  NSObject *v22;
  unint64_t v24;
  const char *v25;
  char *v26;
  const char *v27;
  char *v28;
  std::string::value_type v29[8];
  char v30;
  void *v31[2];
  char v32;
  std::string::value_type __s[8];
  char v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  void *__p[2];
  int64_t v42;
  __int128 buf;
  unsigned __int8 v44;

  v4 = sub_1000CC4F4(a1);
  if (v4)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102149890);
    v5 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v6 = 0xEF7BDEF7BDEF7BDFLL * ((a2[1] - *a2) >> 3);
      LODWORD(buf) = 134349056;
      *(_QWORD *)((char *)&buf + 4) = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Fence: state scrub, remaining, %{public}lu", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102149890);
      v24 = 0xEF7BDEF7BDEF7BDFLL * ((a2[1] - *a2) >> 3);
      LODWORD(__p[0]) = 134349056;
      *(void **)((char *)__p + 4) = (void *)v24;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: state scrub, remaining, %{public}lu", __p, 12);
      v26 = (char *)v25;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceMonitorDatabase::scrubFenceStates(const std::vector<CLFenceManager_Type::Fence> &)", "%s\n", v25);
      if (v26 != (char *)&buf)
        free(v26);
    }
    sub_10064CDD8(a2, &buf);
    *((_BYTE *)&v35.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&v35, "DELETE FROM ");
    v7 = std::string::append(&v35, "Status");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v34 = 7;
    strcpy(__s, " WHERE ");
    v9 = std::string::append(&v36, __s, 7uLL);
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = std::string::append(&v37, "Key");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v32 = 9;
    strcpy((char *)v31, " NOT IN (");
    v13 = std::string::append(&v38, (const std::string::value_type *)v31, 9uLL);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if ((v44 & 0x80u) == 0)
      p_buf = (const std::string::value_type *)&buf;
    else
      p_buf = (const std::string::value_type *)buf;
    if ((v44 & 0x80u) == 0)
      v16 = v44;
    else
      v16 = *((_QWORD *)&buf + 1);
    v17 = std::string::append(&v39, p_buf, v16);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v30 = 1;
    strcpy(v29, ")");
    v19 = std::string::append(&v40, v29, 1uLL);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v42 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (v30 < 0)
      operator delete(*(void **)v29);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (v32 < 0)
      operator delete(v31[0]);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (v34 < 0)
      operator delete(*(void **)__s);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (v42 >= 0)
      v21 = (char *)__p;
    else
      v21 = (char *)__p[0];
    sub_1000CDA68(a1, v21);
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102149890);
  v22 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "Fence: state can't scrub DB", (uint8_t *)&buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102149890);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Fence: state can't scrub DB", __p, 2);
    v28 = (char *)v27;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLFenceMonitorDatabase::scrubFenceStates(const std::vector<CLFenceManager_Type::Fence> &)", "%s\n", v27);
    if (v28 != (char *)&buf)
      free(v28);
  }
  return v4;
}

void sub_10064D4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a48 < 0)
    operator delete(__p);
  if (a55 < 0)
    operator delete(a50);
  _Unwind_Resume(a1);
}

uint64_t sub_10064D5E4(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  char *v16;
  NSObject *v17;
  const char *v19;
  std::string *v20;
  std::string::value_type v21[8];
  char v22;
  std::string::value_type v23[8];
  char v24;
  std::string::value_type __s[8];
  char v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  void *__p[2];
  int64_t v32;
  std::string v33;
  std::string v34;

  if (sub_1000CC4F4(a1))
  {
    sub_100C3C3BC(a2);
    *((_BYTE *)&v27.__r_.__value_.__s + 23) = 7;
    strcpy((char *)&v27, "SELECT ");
    v4 = std::string::append(&v27, "State");
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    v26 = 6;
    strcpy(__s, " FROM ");
    v6 = std::string::append(&v28, __s, 6uLL);
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v8 = std::string::append(&v29, "Status");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v24 = 7;
    strcpy(v23, " WHERE ");
    v10 = std::string::append(&v30, v23, 7uLL);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v33, "Key");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v22 = 2;
    strcpy(v21, "=?");
    v14 = std::string::append(&v34, v21, 2uLL);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v32 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (v22 < 0)
      operator delete(*(void **)v21);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (v24 < 0)
      operator delete(*(void **)v23);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (v26 < 0)
      operator delete(*(void **)__s);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    if (v32 >= 0)
      v16 = (char *)__p;
    else
      v16 = (char *)__p[0];
    sub_1000CDA68(a1, v16);
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102149890);
  v17 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
  {
    LOWORD(v34.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Fence: state No access to DB", (uint8_t *)&v34, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(&v34, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102149890);
    LOWORD(v33.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, &v34, 1628, &_mh_execute_header, qword_1022A0068, 17, "Fence: state No access to DB", &v33, 2);
    v20 = (std::string *)v19;
    sub_100512490("Generic", 1, 0, 0, "CLFenceManager_Type::FenceStatus CLFenceMonitorDatabase::getFenceState(const CLFenceManager_Type::Fence &)", "%s\n", v19);
    if (v20 != &v34)
      free(v20);
  }
  return 0xFFFFFFFFLL;
}

void sub_10064E1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  if (a40 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_10064E2C8(id a1)
{
  qword_1022A0068 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

double sub_10064E2F4(double a1, float a2, float a3, float a4)
{
  return (fmax(fmin(a1, 2.16666675), 1.16666663) * 0.266799986 + 0.510867)
       * 0.414999992
       * a2
       * ((float)(a3 / (float)(a2 * a2)) * -0.003134 + 1.06246 + a4 * 0.003425 + (float)(a4 * a4) * -0.00004952);
}

double sub_10064E380(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, float a5, float a6, float a7)
{
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  int v14;
  double v15;
  double v16;
  double v17;
  int v18;
  int v19;
  double v20;
  double v21;
  NSObject *v22;
  int v23;
  double v24;
  int v25;
  double v26;
  const char *v27;
  uint8_t *v28;
  double v29;
  double v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  double v36;
  double v37;
  double v38;
  int v39;
  int v40;
  double v41;
  double v42;
  NSObject *v43;
  int v44;
  double v45;
  int v46;
  double v47;
  const char *v48;
  uint8_t *v49;
  double v50;
  double v51;
  _QWORD *v52;
  double *v53;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  NSObject *v65;
  double v66;
  const char *v67;
  uint8_t *v68;
  double v69;
  double v70;
  NSObject *v71;
  int v72;
  int v73;
  int v74;
  const char *v76;
  uint8_t *v77;
  const char *v78;
  uint8_t *v79;
  const char *v80;
  uint8_t *v81;
  double v82;
  double v84;
  double v86;
  int v89;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  int v97;
  _BYTE v98[14];
  __int16 v99;
  double v100;
  __int16 v101;
  double v102;
  uint8_t buf[4];
  _BYTE v104[14];
  __int16 v105;
  double v106;
  __int16 v107;
  double v108;

  v8 = a7;
  v9 = a6;
  v10 = a5;
  v12 = *a1;
  v11 = a1[1];
  v13 = (double *)&unk_101BB8000;
  if (*a1 == v11)
  {
    v31 = a4;
    v14 = 0;
    v29 = 0.0;
    v30 = 0.0;
  }
  else
  {
    v14 = 0;
    v95 = a5;
    v92 = (float)(a6 / (float)(a5 * a5)) * -0.003134 + 1.06246 + a7 * 0.003425 + (float)(a7 * a7) * -0.00004952;
    v15 = 0.0;
    v16 = 0.0;
    do
    {
      v17 = *(double *)(v12 + 8);
      if (v17 < 2.33333325)
      {
        v18 = *(_DWORD *)(v12 + 16);
        if (v18 <= 1)
          v18 = 1;
        v19 = v18 - 1;
        if (v18 != 1)
        {
          v20 = *(double *)(v12 + 24);
          if (qword_10229FEA0 != -1)
            dispatch_once(&qword_10229FEA0, &stru_1021498D0);
          v21 = v92 * ((fmax(fmin(v17, 2.16666675), 1.16666663) * 0.266799986 + 0.510867) * 0.414999992 * v95);
          v22 = qword_10229FEA8;
          if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEBUG))
          {
            v23 = *(_DWORD *)(v12 + 16);
            v24 = *(double *)(v12 + 24);
            *(_DWORD *)buf = 134284289;
            *(double *)v104 = v17;
            *(_WORD *)&v104[8] = 1025;
            *(_DWORD *)&v104[10] = v23;
            v105 = 2049;
            v106 = v24;
            v107 = 2049;
            v108 = v21;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Type,WatchCals,binCadenceCenter,%{private}.2f,binState,%{private}d,binValue,%{private}.3f,predictedStrideLength,%{private}.3f", buf, 0x26u);
          }
          v15 = v15 + (double)v19 * (v20 - v21);
          v14 = (int)((double)v14 + (double)v19);
          v16 = v16 + (double)v19 * v17;
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FEA0 != -1)
              dispatch_once(&qword_10229FEA0, &stru_1021498D0);
            v25 = *(_DWORD *)(v12 + 16);
            v26 = *(double *)(v12 + 24);
            v97 = 134284289;
            *(double *)v98 = v17;
            *(_WORD *)&v98[8] = 1025;
            *(_DWORD *)&v98[10] = v25;
            v99 = 2049;
            v100 = v26;
            v101 = 2049;
            v102 = v21;
            LODWORD(v82) = 38;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 2, "Type,WatchCals,binCadenceCenter,%{private}.2f,binState,%{private}d,binValue,%{private}.3f,predictedStrideLength,%{private}.3f", &v97, *(_QWORD *)&v82);
            v28 = (uint8_t *)v27;
            sub_100512490("Generic", 1, 0, 2, "double CLPredictedWalkDistanceUtils::calcCadenceStrideLengthOffset(const std::vector<P6MWDStrideCal> &, float, float, float, const std::vector<P6MWDStrideCal> &, const std::vector<WalkingSpeedStrideCal> &, StrideCalInfo &)", "%s\n", v27);
            if (v28 != buf)
              free(v28);
          }
        }
      }
      v12 += 32;
    }
    while (v12 != v11);
    if (v14 <= 0)
    {
      v29 = 0.0;
      v30 = 0.0;
    }
    else
    {
      v29 = v15 / (double)v14;
      v30 = v16 / (double)v14;
    }
    v31 = a4;
    v8 = a7;
    v10 = a5;
    v9 = a6;
    v13 = (double *)&unk_101BB8000;
  }
  *(_DWORD *)v31 = v14;
  *(double *)(v31 + 16) = v29;
  *(double *)(v31 + 48) = v30;
  if (qword_10229FEA0 != -1)
    dispatch_once(&qword_10229FEA0, &stru_1021498D0);
  v32 = qword_10229FEA8;
  if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)v104 = v14;
    *(_WORD *)&v104[4] = 2048;
    *(double *)&v104[6] = v29;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "numCalsWatch,%d,offsetWatch,%.3f", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_1021498D0);
    v97 = 67109376;
    *(_DWORD *)v98 = v14;
    *(_WORD *)&v98[4] = 2048;
    *(double *)&v98[6] = v29;
    LODWORD(v82) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 1, "numCalsWatch,%d,offsetWatch,%.3f", &v97, v82);
    v77 = (uint8_t *)v76;
    sub_100512490("Generic", 1, 0, 2, "double CLPredictedWalkDistanceUtils::calcCadenceStrideLengthOffset(const std::vector<P6MWDStrideCal> &, float, float, float, const std::vector<P6MWDStrideCal> &, const std::vector<WalkingSpeedStrideCal> &, StrideCalInfo &)", "%s\n", v76);
    if (v77 != buf)
      free(v77);
    v13 = (double *)&unk_101BB8000;
  }
  v33 = *a2;
  v34 = a2[1];
  v86 = v29;
  v35 = 0;
  if (*a2 == v34)
  {
    v50 = 0.0;
    v51 = 0.0;
    v52 = (_QWORD *)&unk_101BAF000;
    v53 = (double *)&unk_101BB8000;
  }
  else
  {
    v96 = v10;
    v93 = (float)(v9 / (float)(v10 * v10)) * -0.003134 + 1.06246 + v8 * 0.003425 + (float)(v8 * v8) * v13[282];
    v36 = 0.0;
    v37 = 0.0;
    do
    {
      v38 = *(double *)(v33 + 8);
      if (v38 < 2.33333325)
      {
        v39 = *(_DWORD *)(v33 + 16);
        if (v39 <= 1)
          v39 = 1;
        v40 = v39 - 1;
        if (v39 != 1)
        {
          v41 = *(double *)(v33 + 24);
          if (qword_10229FEA0 != -1)
            dispatch_once(&qword_10229FEA0, &stru_1021498D0);
          v42 = v93 * ((fmax(fmin(v38, 2.16666675), 1.16666663) * 0.266799986 + 0.510867) * 0.414999992 * v96);
          v43 = qword_10229FEA8;
          if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEBUG))
          {
            v44 = *(_DWORD *)(v33 + 16);
            v45 = *(double *)(v33 + 24);
            *(_DWORD *)buf = 134284289;
            *(double *)v104 = v38;
            *(_WORD *)&v104[8] = 1025;
            *(_DWORD *)&v104[10] = v44;
            v105 = 2049;
            v106 = v45;
            v107 = 2049;
            v108 = v42;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "Type,PhoneCals,binCadenceCenter,%{private}.2f,binState,%{private}d,binValue,%{private}.3f,predictedStrideLength,%{private}.3f", buf, 0x26u);
          }
          v37 = v37 + (double)v40 * (v41 - v42);
          v35 = (int)((double)v35 + (double)v40);
          v36 = v36 + (double)v40 * v38;
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FEA0 != -1)
              dispatch_once(&qword_10229FEA0, &stru_1021498D0);
            v46 = *(_DWORD *)(v33 + 16);
            v47 = *(double *)(v33 + 24);
            v97 = 134284289;
            *(double *)v98 = v38;
            *(_WORD *)&v98[8] = 1025;
            *(_DWORD *)&v98[10] = v46;
            v99 = 2049;
            v100 = v47;
            v101 = 2049;
            v102 = v42;
            LODWORD(v82) = 38;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 2, "Type,PhoneCals,binCadenceCenter,%{private}.2f,binState,%{private}d,binValue,%{private}.3f,predictedStrideLength,%{private}.3f", &v97, *(_QWORD *)&v82);
            v49 = (uint8_t *)v48;
            sub_100512490("Generic", 1, 0, 2, "double CLPredictedWalkDistanceUtils::calcCadenceStrideLengthOffset(const std::vector<P6MWDStrideCal> &, float, float, float, const std::vector<P6MWDStrideCal> &, const std::vector<WalkingSpeedStrideCal> &, StrideCalInfo &)", "%s\n", v48);
            if (v49 != buf)
              free(v49);
          }
        }
      }
      v33 += 32;
    }
    while (v33 != v34);
    v31 = a4;
    if (v35 <= 0)
    {
      v50 = 0.0;
      v51 = 0.0;
    }
    else
    {
      v50 = v37 / (double)v35;
      v51 = v36 / (double)v35;
    }
    v29 = v86;
    v52 = &unk_101BAF000;
    v8 = a7;
    v53 = (double *)&unk_101BB8000;
    v10 = a5;
    v9 = a6;
  }
  *(_DWORD *)(v31 + 4) = v35;
  *(double *)(v31 + 24) = v50;
  *(double *)(v31 + 56) = v51;
  if (qword_10229FEA0 != -1)
    dispatch_once(&qword_10229FEA0, &stru_1021498D0);
  v54 = qword_10229FEA8;
  if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)v104 = v35;
    *(_WORD *)&v104[4] = 2048;
    *(double *)&v104[6] = v50;
    _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_INFO, "numCalsPhone,%d,offsetPhone,%.3f", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_1021498D0);
    v97 = 67109376;
    *(_DWORD *)v98 = v35;
    *(_WORD *)&v98[4] = 2048;
    *(double *)&v98[6] = v50;
    LODWORD(v82) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 1, "numCalsPhone,%d,offsetPhone,%.3f", &v97, v82);
    v79 = (uint8_t *)v78;
    sub_100512490("Generic", 1, 0, 2, "double CLPredictedWalkDistanceUtils::calcCadenceStrideLengthOffset(const std::vector<P6MWDStrideCal> &, float, float, float, const std::vector<P6MWDStrideCal> &, const std::vector<WalkingSpeedStrideCal> &, StrideCalInfo &)", "%s\n", v78);
    if (v79 != buf)
      free(v79);
  }
  v56 = *a3;
  v55 = a3[1];
  if (*a3 == v55)
  {
    v57 = 0;
    *(_DWORD *)(v31 + 8) = 0;
    *(_QWORD *)(v31 + 32) = 0;
    v69 = 0.0;
    v70 = 0.0;
  }
  else
  {
    v84 = v50;
    v57 = 0;
    v94 = (float)(v9 / (float)(v10 * v10)) * -0.003134 + 1.06246 + v8 * 0.003425 + (float)(v8 * v8) * -0.00004952;
    v58 = 0.0;
    v91 = v53[275];
    v89 = v52[417];
    v59 = 0.0;
    v60 = 0.0;
    do
    {
      v61 = *(double *)(v56 + 24);
      if (v61 < 2.33333325)
      {
        v62 = *(double *)(v56 + 32);
        if (qword_10229FEA0 != -1)
          dispatch_once(&qword_10229FEA0, &stru_1021498D0);
        v63 = v94 * ((fmax(fmin(v61, 2.16666675), v91) * 0.266799986 + 0.510867) * 0.414999992 * v10);
        v64 = v62 / v61;
        v65 = qword_10229FEA8;
        if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = v89;
          *(double *)v104 = v61;
          *(_WORD *)&v104[8] = 1025;
          *(_DWORD *)&v104[10] = 2;
          v105 = 2049;
          v106 = v64;
          v107 = 2049;
          v108 = v63;
          _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "Type,WalkingSpeed,binCadenceCenter,%{private}.2f,binState,%{private}d,binValue,%{private}.3f,predictedStrideLength,%{private}.3f", buf, 0x26u);
        }
        v66 = 1.0 / ((v64 - v63) / 0.07 * ((v64 - v63) / 0.07) + 1.0);
        v60 = v60 + v66 * (v64 - v63);
        v59 = v59 + v66;
        ++v57;
        v58 = v58 + v61;
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FEA0 != -1)
            dispatch_once(&qword_10229FEA0, &stru_1021498D0);
          v97 = v89;
          *(double *)v98 = v61;
          *(_WORD *)&v98[8] = 1025;
          *(_DWORD *)&v98[10] = 2;
          v99 = 2049;
          v100 = v64;
          v101 = 2049;
          v102 = v63;
          LODWORD(v82) = 38;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 2, "Type,WalkingSpeed,binCadenceCenter,%{private}.2f,binState,%{private}d,binValue,%{private}.3f,predictedStrideLength,%{private}.3f", &v97, *(_QWORD *)&v82);
          v68 = (uint8_t *)v67;
          sub_100512490("Generic", 1, 0, 2, "double CLPredictedWalkDistanceUtils::calcCadenceStrideLengthOffset(const std::vector<P6MWDStrideCal> &, float, float, float, const std::vector<P6MWDStrideCal> &, const std::vector<WalkingSpeedStrideCal> &, StrideCalInfo &)", "%s\n", v67);
          if (v68 != buf)
            free(v68);
        }
      }
      v56 += 48;
    }
    while (v56 != v55);
    if (v57 <= 0)
      v69 = 0.0;
    else
      v69 = v60 / v59;
    v31 = a4;
    *(_DWORD *)(a4 + 8) = v57;
    *(double *)(a4 + 32) = v69;
    v70 = v58 / (double)v57;
    if (v57 <= 0)
      v70 = 0.0;
    v29 = v86;
    v50 = v84;
  }
  *(double *)(v31 + 64) = v70;
  if (qword_10229FEA0 != -1)
    dispatch_once(&qword_10229FEA0, &stru_1021498D0);
  v71 = qword_10229FEA8;
  if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)v104 = v57;
    *(_WORD *)&v104[4] = 2048;
    *(double *)&v104[6] = v69;
    _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_INFO, "numCalsWalkingSpeed,%d,offsetWalkingSpeed,%.3f", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_1021498D0);
    v97 = 67109376;
    *(_DWORD *)v98 = v57;
    *(_WORD *)&v98[4] = 2048;
    *(double *)&v98[6] = v69;
    LODWORD(v82) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 1, "numCalsWalkingSpeed,%d,offsetWalkingSpeed,%.3f", &v97, v82);
    v81 = (uint8_t *)v80;
    sub_100512490("Generic", 1, 0, 2, "double CLPredictedWalkDistanceUtils::calcCadenceStrideLengthOffset(const std::vector<P6MWDStrideCal> &, float, float, float, const std::vector<P6MWDStrideCal> &, const std::vector<WalkingSpeedStrideCal> &, StrideCalInfo &)", "%s\n", v80);
    if (v81 != buf)
      free(v81);
  }
  if (v14 >= 40)
    v72 = 0;
  else
    v72 = 40 - v14;
  if (v72 >= v35)
    v72 = v35;
  v73 = (40 - v14 - v72) & ~((40 - v14 - v72) >> 31);
  if (v73 >= v57)
    v73 = v57;
  v74 = v72 + v14 + v73;
  *(_DWORD *)(v31 + 40) = v74;
  if (v74 <= 13)
    v74 = 13;
  return (v50 * (double)v72 + v29 * (double)v14 + v69 * (double)v73) / (double)v74;
}

uint64_t sub_10064F208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  double v8;
  int v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  double v16;
  double v17;
  NSObject *v18;
  uint64_t v19;
  double v20;
  float v21;
  float v22;
  NSObject *v23;
  uint64_t v24;
  double v25;
  double v26;
  int v27;
  int v28;
  double v29;
  uint64_t v30;
  double v31;
  const char *v32;
  uint8_t *v33;
  uint64_t v34;
  double v35;
  double v36;
  int v37;
  int v38;
  double v39;
  const char *v40;
  uint8_t *v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  double v47;
  double v48;
  NSObject *v49;
  uint64_t v51;
  double v52;
  int v53;
  const char *v54;
  uint8_t *v55;
  const char *v56;
  uint8_t *v57;
  double v58;
  double v59;
  int v60;
  unsigned int v61;
  __int128 v62;
  uint64_t v63;
  _QWORD v64[6];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  __int16 v70;
  double v71;
  __int16 v72;
  _BYTE v73[30];
  _BYTE v74[10];
  uint8_t buf[4];
  uint64_t v76;
  __int16 v77;
  double v78;
  __int16 v79;
  _BYTE v80[30];
  _BYTE v81[10];

  v65 = 0;
  v66 = 0;
  v67 = 0;
  v5 = (*(uint64_t (**)(uint64_t, uint64_t *, double, double))(*(_QWORD *)a2 + 24))(a2, &v65, *(double *)(a1 + 8), *(double *)(a1 + 16));
  if (qword_10229FEA0 != -1)
    dispatch_once(&qword_10229FEA0, &stru_1021498D0);
  v6 = qword_10229FEA8;
  if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_INFO))
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(double *)(a1 + 16);
    v9 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)buf = 134284289;
    v76 = v7;
    v77 = 2049;
    v78 = v8;
    v79 = 1025;
    *(_DWORD *)v80 = v9;
    *(_WORD *)&v80[4] = 2049;
    *(_QWORD *)&v80[6] = 0xAAAAAAAAAAAAAAABLL * ((v66 - v65) >> 5);
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Looking for metrics during bout,startTime,%{private}f,endTime,%{private}f,steps,%{private}u,metrics,%{private}lu", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_1021498D0);
    v51 = *(_QWORD *)(a1 + 8);
    v52 = *(double *)(a1 + 16);
    v53 = *(_DWORD *)(a1 + 24);
    v68 = 134284289;
    v69 = v51;
    v70 = 2049;
    v71 = v52;
    v72 = 1025;
    *(_DWORD *)v73 = v53;
    *(_WORD *)&v73[4] = 2049;
    *(_QWORD *)&v73[6] = 0xAAAAAAAAAAAAAAABLL * ((v66 - v65) >> 5);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 1, "Looking for metrics during bout,startTime,%{private}f,endTime,%{private}f,steps,%{private}u,metrics,%{private}lu", &v68, 38);
    v55 = (uint8_t *)v54;
    sub_100512490("Generic", 1, 0, 2, "CMError CLPredictedWalkDistanceUtils::calculateWalkingSpeedStridecals(const CLPredictedWalkDistanceBoutEntry &, CLMobility::GaitMetricsDelegate *, WalkingStrideCalReportingDelegate *)", "%s\n", v54);
    if (v55 != buf)
      free(v55);
  }
  v13 = v65;
  v12 = v66;
  if (v66 != v65)
  {
    v59 = *(double *)&a3;
    v61 = v5;
    v14 = 0;
    LODWORD(v10) = *(_DWORD *)(a1 + 24);
    v15 = 0.0;
    v63 = 134218240;
    *(_QWORD *)&v11 = 134219520;
    v62 = v11;
    v16 = (double)v10 / *(double *)(a1 + 40);
    v17 = 0.0;
    do
    {
      if (qword_10229FEA0 != -1)
        dispatch_once(&qword_10229FEA0, &stru_1021498D0);
      v18 = qword_10229FEA8;
      if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEBUG))
      {
        v19 = *(_QWORD *)(v13 + 8);
        v20 = *(float *)(v13 + 24);
        *(_DWORD *)buf = v63;
        v76 = v19;
        v77 = 2048;
        v78 = v20;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "startTime,%.3f,walkingSpeed,%.3f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FEA0 != -1)
          dispatch_once(&qword_10229FEA0, &stru_1021498D0);
        v30 = *(_QWORD *)(v13 + 8);
        v31 = *(float *)(v13 + 24);
        v68 = v63;
        v69 = v30;
        v70 = 2048;
        v71 = v31;
        LODWORD(v58) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 2, "startTime,%.3f,walkingSpeed,%.3f", COERCE_DOUBLE(&v68), v58);
        v33 = (uint8_t *)v32;
        sub_100512490("Generic", 1, 0, 2, "CMError CLPredictedWalkDistanceUtils::calculateWalkingSpeedStridecals(const CLPredictedWalkDistanceBoutEntry &, CLMobility::GaitMetricsDelegate *, WalkingStrideCalReportingDelegate *)", "%s\n", v32);
        if (v33 != buf)
          free(v33);
      }
      v21 = *(float *)(v13 + 24);
      v22 = *(float *)(v13 + 48);
      if (qword_10229FEA0 != -1)
        dispatch_once(&qword_10229FEA0, &stru_1021498D0);
      v23 = qword_10229FEA8;
      if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEBUG))
      {
        v24 = *(_QWORD *)(v13 + 8);
        v25 = *(float *)(v13 + 24);
        v26 = *(float *)(v13 + 32);
        v27 = *(_DWORD *)(a1 + 24);
        v28 = *(_DWORD *)(a1 + 48);
        v29 = *(float *)(v13 + 48);
        *(_DWORD *)buf = v62;
        v76 = v24;
        v77 = 2048;
        v78 = v25;
        v79 = 2048;
        *(double *)v80 = v26;
        *(_WORD *)&v80[8] = 1024;
        *(_DWORD *)&v80[10] = v27;
        *(_WORD *)&v80[14] = 2048;
        *(double *)&v80[16] = v16;
        *(_WORD *)&v80[24] = 1024;
        *(_DWORD *)&v80[26] = v28;
        *(_WORD *)v81 = 2048;
        *(double *)&v81[2] = v29;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "startTime,%.3f,walkingSpeed,%.4f,stepLength,%.4f,segmentSteps,%d,segmentCadence,%.4f,segmentEpochCadenceSD,%d,cycleTime,%.3f", buf, 0x40u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FEA0 != -1)
          dispatch_once(&qword_10229FEA0, &stru_1021498D0);
        v34 = *(_QWORD *)(v13 + 8);
        v35 = *(float *)(v13 + 24);
        v36 = *(float *)(v13 + 32);
        v37 = *(_DWORD *)(a1 + 24);
        v38 = *(_DWORD *)(a1 + 48);
        v39 = *(float *)(v13 + 48);
        v68 = v62;
        v69 = v34;
        v70 = 2048;
        v71 = v35;
        v72 = 2048;
        *(double *)v73 = v36;
        *(_WORD *)&v73[8] = 1024;
        *(_DWORD *)&v73[10] = v37;
        *(_WORD *)&v73[14] = 2048;
        *(double *)&v73[16] = v16;
        *(_WORD *)&v73[24] = 1024;
        *(_DWORD *)&v73[26] = v38;
        *(_WORD *)v74 = 2048;
        *(double *)&v74[2] = v39;
        LODWORD(v58) = 64;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 2, "startTime,%.3f,walkingSpeed,%.4f,stepLength,%.4f,segmentSteps,%d,segmentCadence,%.4f,segmentEpochCadenceSD,%d,cycleTime,%.3f", COERCE_DOUBLE(&v68), v58, v59, v60, *(double *)&v62, DWORD2(v62), *(double *)&v63);
        v41 = (uint8_t *)v40;
        sub_100512490("Generic", 1, 0, 2, "CMError CLPredictedWalkDistanceUtils::calculateWalkingSpeedStridecals(const CLPredictedWalkDistanceBoutEntry &, CLMobility::GaitMetricsDelegate *, WalkingStrideCalReportingDelegate *)", "%s\n", v40);
        if (v41 != buf)
          free(v41);
      }
      v17 = v17 + v21;
      v15 = v15 + v22;
      v13 += 96;
      ++v14;
    }
    while (v13 != v12);
    v42 = v15 / (double)v14;
    v43 = (double)v14 / (*(double *)(a1 + 40) / v42);
    v5 = v61;
    if (v43 <= 0.6)
      goto LABEL_37;
    v44 = 2.0 / v42;
    if (vabdd_f64(2.0 / v42, v16) / ((v16 + 2.0 / v42) * 0.5) >= 0.1)
      goto LABEL_37;
    v46 = *(_QWORD *)(a1 + 8);
    v45 = *(double *)(a1 + 16);
    v64[0] = v46;
    *(double *)&v64[1] = v45;
    *(double *)&v64[2] = v16;
    *(double *)&v64[3] = 2.0 / v42;
    v47 = v17 / (double)v14;
    *(double *)&v64[4] = v47;
    *(double *)&v64[5] = v43;
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_1021498D0);
    v48 = v59;
    v49 = qword_10229FEA8;
    if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134350336;
      v76 = v46;
      v77 = 2050;
      v78 = v45;
      v79 = 2050;
      *(double *)v80 = v16;
      *(_WORD *)&v80[8] = 2050;
      *(double *)&v80[10] = v44;
      *(_WORD *)&v80[18] = 2050;
      *(double *)&v80[20] = v47;
      *(_WORD *)&v80[28] = 2050;
      *(double *)v81 = v43;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "Writing walkingSpeedCal,startTime,%{public}.3f,endTime,%{public}.3f,cadenceWatch,%{public}.3f,cadenceGaitCycle,%{public}.3f,meanWalkingSpeed,%{public}.3f,gaitCycleYield,%{public}.3f", buf, 0x3Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEA0 != -1)
        dispatch_once(&qword_10229FEA0, &stru_1021498D0);
      v68 = 134350336;
      v69 = v46;
      v70 = 2050;
      v71 = v45;
      v72 = 2050;
      *(double *)v73 = v16;
      *(_WORD *)&v73[8] = 2050;
      *(double *)&v73[10] = v44;
      *(_WORD *)&v73[18] = 2050;
      *(double *)&v73[20] = v47;
      *(_WORD *)&v73[28] = 2050;
      *(double *)v74 = v43;
      LODWORD(v58) = 62;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 1, "Writing walkingSpeedCal,startTime,%{public}.3f,endTime,%{public}.3f,cadenceWatch,%{public}.3f,cadenceGaitCycle,%{public}.3f,meanWalkingSpeed,%{public}.3f,gaitCycleYield,%{public}.3f", &v68, *(_QWORD *)&v58);
      v57 = (uint8_t *)v56;
      sub_100512490("Generic", 1, 0, 2, "CMError CLPredictedWalkDistanceUtils::calculateWalkingSpeedStridecals(const CLPredictedWalkDistanceBoutEntry &, CLMobility::GaitMetricsDelegate *, WalkingStrideCalReportingDelegate *)", "%s\n", v56);
      if (v57 != buf)
        free(v57);
      v5 = v61;
      v48 = v59;
      if (v59 == 0.0)
        goto LABEL_37;
    }
    else if (v59 == 0.0)
    {
LABEL_37:
      v13 = v65;
      goto LABEL_38;
    }
    (*(void (**)(double, _QWORD *))(**(_QWORD **)&v48 + 16))(COERCE_DOUBLE(*(_QWORD *)&v48), v64);
    goto LABEL_37;
  }
LABEL_38:
  if (v13)
  {
    v66 = v13;
    operator delete((void *)v13);
  }
  return v5;
}

void sub_10064FA84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10064FAB8(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int32x2_t *a6@<X5>, uint64_t a7@<X8>)
{
  int v16;
  int v17;
  float v18;
  float v19;

  *(_QWORD *)a7 = 0xBFF0000000000000;
  __asm { FMOV            V0.4S, #-1.0 }
  *(_OWORD *)(a7 + 64) = _Q0;
  *(_QWORD *)(a7 + 80) = -1082130432;
  *(_OWORD *)(a7 + 88) = _Q0;
  *(_DWORD *)(a7 + 104) = -1082130432;
  *(_DWORD *)(a7 + 8) = *(_DWORD *)(a1 + 16);
  *(_QWORD *)(a7 + 12) = *(_QWORD *)(a1 + 80);
  *(_DWORD *)(a7 + 20) = *(_DWORD *)(a1 + 88);
  *(float *)&_Q0 = *(double *)(a1 + 24);
  *(_DWORD *)(a7 + 36) = _Q0;
  *(float *)&_Q0 = *(double *)(a1 + 56);
  *(_DWORD *)(a7 + 24) = _Q0;
  *(float32x2_t *)(a7 + 28) = vcvt_f32_f64(*(float64x2_t *)(a1 + 32));
  *(_DWORD *)(a7 + 40) = a6->i32[1];
  *(_DWORD *)(a7 + 44) = a6[2].i32[1];
  *(int32x2_t *)(a7 + 48) = vrev64_s32(a6[1]);
  v16 = a2[2];
  *(_DWORD *)(a7 + 56) = *a2;
  *(_DWORD *)(a7 + 60) = v16;
  sub_10064FBD4((float *)a7, a3);
  v17 = *(_DWORD *)(a1 + 120);
  *(_DWORD *)(a7 + 80) = 0;
  *(_DWORD *)(a7 + 84) = v17;
  *(int32x2_t *)(a7 + 88) = vrev64_s32((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a1 + 128)));
  v18 = *(double *)(a4 + 16);
  if (*(int *)a4 <= 0)
    v18 = 0.0;
  *(float *)(a7 + 96) = (float)*(int *)(a1 + 92);
  *(float *)(a7 + 100) = v18;
  v19 = *(double *)(a5 + 16);
  if (*(int *)a5 <= 0)
    v19 = 0.0;
  *(float *)(a7 + 104) = v19;
}

void sub_10064FBD4(float *a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v4;
  double *v7;
  int v8;
  double v9;
  float v10;
  double v11;
  double v12;
  int v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  double *v24;
  double *v25;
  double v26;
  float v27;
  float v28;
  float v29;
  void *__p;
  double *v31;
  double *v32;

  v3 = *a2;
  v2 = a2[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (v2 - *a2);
  if (v4 >= 2)
  {
    a1[18] = (float)v4 / 13.0;
    __p = 0;
    v31 = 0;
    v32 = 0;
    if (v3 == v2)
    {
      v26 = 0.0;
      v10 = 0.0;
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v9 = 0.0;
      v10 = 0.0;
      v11 = 0.0;
      v12 = 0.0;
      do
      {
        v13 = v8;
        v14 = *((double *)v3 + 2);
        ++v8;
        v15 = 0.0;
        v16 = v14;
        if (v13)
        {
          v16 = v9 + (v14 - v9) / (double)v8;
          v12 = v11 + (v14 - v9) * (v14 - v16);
          v15 = v12;
        }
        v17 = *(double *)v3;
        if (v7 >= v32)
        {
          v18 = (double *)__p;
          v19 = ((char *)v7 - (_BYTE *)__p) >> 4;
          v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 60)
            sub_100259694();
          v21 = (char *)v32 - (_BYTE *)__p;
          if (((char *)v32 - (_BYTE *)__p) >> 3 > v20)
            v20 = v21 >> 3;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
            v22 = 0xFFFFFFFFFFFFFFFLL;
          else
            v22 = v20;
          if (v22)
          {
            v23 = (char *)sub_10028E224((uint64_t)&v32, v22);
            v18 = (double *)__p;
            v7 = v31;
          }
          else
          {
            v23 = 0;
          }
          v24 = (double *)&v23[16 * v19];
          *v24 = v17;
          v24[1] = v14;
          v25 = v24;
          if (v7 != v18)
          {
            do
            {
              *((_OWORD *)v25 - 1) = *((_OWORD *)v7 - 1);
              v25 -= 2;
              v7 -= 2;
            }
            while (v7 != v18);
            v18 = (double *)__p;
          }
          v7 = v24 + 2;
          __p = v25;
          v31 = v24 + 2;
          v32 = (double *)&v23[16 * v22];
          if (v18)
            operator delete(v18);
        }
        else
        {
          *v7 = v17;
          v7[1] = v14;
          v7 += 2;
        }
        v31 = v7;
        if (v3 != *a2)
          v10 = vabdd_f64(*((double *)v3 + 2), *((double *)v3 - 1)) + v10;
        v3 += 3;
        v9 = v16;
        v11 = v15;
      }
      while (v3 != a2[1]);
      if (v13)
        v26 = v12 / (double)v13;
      else
        v26 = 0.0;
    }
    v27 = sqrt(v26);
    a1[16] = v27;
    v28 = sub_1011A2AA0((double **)&__p, 0) * 86400.0;
    a1[19] = v28;
    v29 = (*((double *)a2[1] - 1) - *((double *)*a2 + 2)) / v10;
    a1[17] = v29;
    if (__p)
    {
      v31 = (double *)__p;
      operator delete(__p);
    }
  }
}

void sub_10064FE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10064FE6C(id a1)
{
  qword_10229FEA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PredictedWalkDistance");
}

BOOL sub_10064FE98(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  double *v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v11;
  double *v12;
  double *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  double *v19;
  uint64_t v20;
  double *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  float *v30;
  uint64_t v31;
  float v32;
  double *v33;
  double *v34;
  double *v35;
  double v36;
  double *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  double *v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  double v47;
  double v49;
  double *v51;
  double *v53;
  void *v54;
  double *v55;
  double *v56;
  void *v57;
  char *v58;
  char *v59;
  void *__p;
  double *v61;
  double *v62;
  void *v63;
  double *v64;
  uint64_t v65;

  v63 = 0;
  v64 = 0;
  v65 = 0;
  sub_100650340(*(double *)(a2 + 56), a1, a3, (uint64_t)&v63);
  v53 = (double *)v63;
  v51 = v64;
  if (v63 != v64)
  {
    v5 = *(double *)(a2 + 56) + 120.0;
    v6 = *(double *)(a2 + 64) - *(double *)(a2 + 72);
    do
    {
      __p = 0;
      v61 = 0;
      v62 = 0;
      v57 = 0;
      v58 = 0;
      v59 = 0;
      v8 = *a3;
      v7 = a3[1];
      while (v8 != v7)
      {
        v9 = *(double *)(v8 + 8);
        if (v9 > *v53 && v9 < v5)
        {
          v11 = v9 - *v53;
          v12 = v61;
          if (v61 >= v62)
          {
            v4 = (double *)__p;
            v14 = ((char *)v61 - (_BYTE *)__p) >> 3;
            v15 = v14 + 1;
            if ((unint64_t)(v14 + 1) >> 61)
              sub_100259694();
            v16 = (char *)v62 - (_BYTE *)__p;
            if (((char *)v62 - (_BYTE *)__p) >> 2 > v15)
              v15 = v16 >> 2;
            if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
              v17 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v17 = v15;
            if (v17)
            {
              v18 = (char *)sub_10025E6A0((uint64_t)&v62, v17);
              v4 = (double *)__p;
              v12 = v61;
            }
            else
            {
              v18 = 0;
            }
            v19 = (double *)&v18[8 * v14];
            *v19 = v11;
            v13 = v19 + 1;
            while (v12 != v4)
            {
              v20 = *((_QWORD *)v12-- - 1);
              *((_QWORD *)v19-- - 1) = v20;
            }
            __p = v19;
            v61 = v13;
            v62 = (double *)&v18[8 * v17];
            if (v4)
              operator delete(v4);
          }
          else
          {
            *v61 = v11;
            v13 = v12 + 1;
          }
          v61 = v13;
          v21 = (double *)v58;
          if (v58 >= v59)
          {
            v4 = (double *)v57;
            v23 = (v58 - (_BYTE *)v57) >> 3;
            v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 61)
              sub_100259694();
            v25 = v59 - (_BYTE *)v57;
            if ((v59 - (_BYTE *)v57) >> 2 > v24)
              v24 = v25 >> 2;
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
              v26 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v26 = v24;
            if (v26)
            {
              v27 = (char *)sub_10025E6A0((uint64_t)&v59, v26);
              v4 = (double *)v57;
              v21 = (double *)v58;
            }
            else
            {
              v27 = 0;
            }
            v28 = &v27[8 * v23];
            *(_QWORD *)v28 = *(_QWORD *)(v8 + 16);
            v22 = v28 + 8;
            while (v21 != v4)
            {
              v29 = *((_QWORD *)v21-- - 1);
              *((_QWORD *)v28 - 1) = v29;
              v28 -= 8;
            }
            v57 = v28;
            v58 = v22;
            v59 = &v27[8 * v26];
            if (v4)
              operator delete(v4);
          }
          else
          {
            *(_QWORD *)v58 = *(_QWORD *)(v8 + 16);
            v22 = (char *)(v21 + 1);
          }
          v58 = v22;
        }
        v8 += 32;
      }
      v30 = (float *)qword_102303100;
      v31 = qword_102303108;
      while (v30 != (float *)v31)
      {
        v32 = *v30;
        v54 = 0;
        v55 = 0;
        v56 = 0;
        v33 = (double *)__p;
        v34 = v61;
        if (__p != v61)
        {
          v35 = 0;
          do
          {
            v36 = *(double *)(a2 + 72) + v6 * exp(*v33 * (float)-v32);
            if (v35 >= v56)
            {
              v4 = (double *)v54;
              v38 = ((char *)v35 - (_BYTE *)v54) >> 3;
              v39 = v38 + 1;
              if ((unint64_t)(v38 + 1) >> 61)
                sub_100259694();
              v40 = (char *)v56 - (_BYTE *)v54;
              if (((char *)v56 - (_BYTE *)v54) >> 2 > v39)
                v39 = v40 >> 2;
              if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
                v41 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v41 = v39;
              if (v41)
              {
                v42 = (char *)sub_10025E6A0((uint64_t)&v56, v41);
                v4 = (double *)v54;
                v35 = v55;
              }
              else
              {
                v42 = 0;
              }
              v43 = (double *)&v42[8 * v38];
              *v43 = v36;
              v37 = v43 + 1;
              while (v35 != v4)
              {
                v44 = *((_QWORD *)v35-- - 1);
                *((_QWORD *)v43-- - 1) = v44;
              }
              v54 = v43;
              v55 = v37;
              v56 = (double *)&v42[8 * v41];
              if (v4)
                operator delete(v4);
            }
            else
            {
              *v35 = v36;
              v37 = v35 + 1;
            }
            v55 = v37;
            ++v33;
            v35 = v37;
          }
          while (v33 != v34);
        }
        v46 = sub_10065047C((uint64_t)v4, (uint64_t *)&v57, &v54);
        if (v46 != -1.0)
        {
          v47 = *(double *)(a2 + 88);
          if (v47 == -1.0 || v46 < v47)
          {
            *(double *)(a2 + 80) = v32;
            *(double *)(a2 + 88) = v46;
            *(double *)(a2 + 104) = *v53;
            *(double *)(a2 + 96) = sub_1006504F8(v45, (uint64_t *)&v57, &v54);
          }
        }
        v4 = (double *)v54;
        if (v54)
        {
          v55 = (double *)v54;
          operator delete(v54);
        }
        ++v30;
      }
      if (v57)
      {
        v58 = (char *)v57;
        operator delete(v57);
      }
      v4 = (double *)__p;
      if (__p)
      {
        v61 = (double *)__p;
        operator delete(__p);
      }
      ++v53;
    }
    while (v53 != v51);
  }
  v49 = *(double *)(a2 + 80);
  if (v49 == 0.0)
    *(_DWORD *)a2 = 17;
  if (v63)
  {
    v64 = (double *)v63;
    operator delete(v63);
  }
  return v49 != 0.0;
}

void sub_1006502D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100650340(double a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  unint64_t v13;
  double *v14;
  double *v15;
  double *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  double *v22;
  uint64_t v23;

  v4 = *a3;
  v5 = a3[1];
  if (*a3 != v5)
  {
    v7 = a1 + -10.0;
    v8 = a1 + 25.0;
    v9 = a4 + 16;
    do
    {
      while (1)
      {
        v10 = *(double *)(v4 + 8);
        if (v10 > v7 && v10 < v8)
          break;
        v4 += 32;
        if (v10 > v8 || v4 == v5)
          return;
      }
      v14 = *(double **)(a4 + 8);
      v13 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v14 >= v13)
      {
        v16 = *(double **)a4;
        v17 = ((uint64_t)v14 - *(_QWORD *)a4) >> 3;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61)
          sub_100259694();
        v19 = v13 - (_QWORD)v16;
        if (v19 >> 2 > v18)
          v18 = v19 >> 2;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)sub_10025E6A0(v9, v20);
          v16 = *(double **)a4;
          v14 = *(double **)(a4 + 8);
          v10 = *(double *)(v4 + 8);
        }
        else
        {
          v21 = 0;
        }
        v22 = (double *)&v21[8 * v17];
        *v22 = v10;
        v15 = v22 + 1;
        while (v14 != v16)
        {
          v23 = *((_QWORD *)v14-- - 1);
          *((_QWORD *)v22-- - 1) = v23;
        }
        *(_QWORD *)a4 = v22;
        *(_QWORD *)(a4 + 8) = v15;
        *(_QWORD *)(a4 + 16) = &v21[8 * v20];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v14 = v10;
        v15 = v14 + 1;
      }
      *(_QWORD *)(a4 + 8) = v15;
      v4 += 32;
    }
    while (v4 != v5);
  }
}

double sub_10065047C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;

  v3 = *a2;
  v4 = a2[1];
  result = -1.0;
  if (*a2 != v4)
  {
    v6 = (v4 - v3) >> 3;
    if (v6 == (uint64_t)(a3[1] - *a3) >> 3)
    {
      v7 = 0;
      v8 = (double)(unint64_t)v6;
      v9 = 0.0;
      do
      {
        if (v6 == v7)
          sub_1002EAEB0();
        v9 = v9
           + (*(double *)(v3 + 8 * v7) - *(double *)(*a3 + 8 * v7))
           * (*(double *)(v3 + 8 * v7) - *(double *)(*a3 + 8 * v7));
        ++v7;
      }
      while ((double)(int)v7 < v8);
      return v9 / v8;
    }
  }
  return result;
}

double sub_1006504F8(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  double result;
  uint64_t v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  unint64_t v16;
  double v17;

  v3 = *a2;
  v4 = a2[1];
  result = -1.0;
  if (*a2 != v4)
  {
    v6 = (v4 - v3) >> 3;
    if (v6 == (uint64_t)(a3[1] - *a3) >> 3)
    {
      v7 = 0;
      v8 = 0.0;
      v9 = 0.0;
      v10 = 0.0;
      v11 = 0.0;
      do
      {
        if (v6 == v7)
          sub_1002EAEB0();
        v12 = *(double *)(v3 + 8 * v7);
        v13 = v12 - *(double *)(*a3 + 8 * v7);
        v14 = v13 - v11;
        v11 = v11 + (v13 - v11) / (double)++v7;
        v10 = v10 + v14 * (v13 - v11);
        v15 = v12 - v9;
        v9 = v9 + (v12 - v9) / (double)v7;
        v8 = v8 + v15 * (v12 - v9);
      }
      while ((double)(int)v7 < (double)(unint64_t)v6);
      v16 = v7 - 1;
      if (v7 != 1)
      {
        v17 = v8 / (double)v16;
        if (v17 != 0.0)
          return 1.0 - v10 / (double)v16 / v17;
      }
    }
  }
  return result;
}

uint64_t sub_1006505C8()
{
  uint64_t v0;

  qword_102303100 = 0;
  qword_102303108 = 0;
  qword_102303110 = 0;
  qword_102303100 = (uint64_t)operator new(0x190uLL);
  v0 = qword_102303100 + 400;
  qword_102303110 = qword_102303100 + 400;
  memcpy((void *)qword_102303100, &unk_101BB88E8, 0x190uLL);
  qword_102303108 = v0;
  return __cxa_atexit((void (*)(void *))sub_10041C534, &qword_102303100, (void *)&_mh_execute_header);
}

void sub_10065062C(uint64_t a1@<X8>)
{
  _BYTE *v2;
  int v3;
  void *__p[2];
  uint64_t v5;

  sub_1015A2E04(__p, "");
  *(_QWORD *)a1 = &_mh_execute_header;
  *(_WORD *)(a1 + 8) = 0;
  v2 = (_BYTE *)(a1 + 16);
  if (SHIBYTE(v5) < 0)
  {
    sub_100115CE4(v2, __p[0], (unint64_t)__p[1]);
    v3 = SHIBYTE(v5);
    *(_QWORD *)(a1 + 40) = 0;
    if (v3 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)v2 = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = 0;
  }
}

void sub_1006506B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006506CC(uint64_t a1)
{
  _BYTE v3[16];
  void *__p;
  char v5;

  sub_10065062C((uint64_t)v3);
  sub_10065073C(a1, (uint64_t)v3, (const char **)&off_1021498F0);
  if (v5 < 0)
    operator delete(__p);
  return a1;
}

void sub_100650720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10065073C(uint64_t a1, uint64_t a2, const char **a3)
{
  uint64_t v5;
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  int v10;
  const char *v11;
  uint8_t buf[4];
  const char *v13;

  v5 = sub_100631F84(a1, a2);
  if (sub_1000CC4F4(v5))
  {
    sub_100634364(a1, off_1022A3888, a3, 0, 0);
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021499B0);
    v6 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v13 = "CLFenceCentroidDatabase";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "%s, No access to DB", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021499B0);
      v10 = 136315138;
      v11 = "CLFenceCentroidDatabase";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "%s, No access to DB", (const char *)&v10);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "CLFenceCentroidDatabase::CLFenceCentroidDatabase(const CLSqliteDatabase::SqliteProperties &, const CLSqliteDatabase::ColumnInfo *)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  return a1;
}

void sub_100650928(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1006322C0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100650940(uint64_t a1, int a2, double a3, double a4)
{
  NSObject *v8;
  _QWORD *v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  char *v18;
  NSObject *v19;
  const char *v21;
  char *v22;
  const char *v23;
  char *v24;
  _DWORD v25[3];
  __int16 v26;
  int v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;
  _BYTE buf[12];
  __int16 v33;
  int v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;

  if (sub_1000CC4F4(a1))
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021499B0);
    v8 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315907;
      *(_QWORD *)&buf[4] = "storeFenceCentroid";
      v33 = 1025;
      v34 = a2;
      v35 = 2049;
      v36 = a3;
      v37 = 2049;
      v38 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s, foreignKey, %{private}d, coordinate, <%{private}f, %{private}f>", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021499B0);
      v25[0] = 136315907;
      *(_QWORD *)&v25[1] = "storeFenceCentroid";
      v26 = 1025;
      v27 = a2;
      v28 = 2049;
      v29 = a3;
      v30 = 2049;
      v31 = a4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "%s, foreignKey, %{private}d, coordinate, <%{private}f, %{private}f>", v25, 38);
      v22 = (char *)v21;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceCentroidDatabase::storeFenceCentroid(const CLClientLocationCoordinate, const int)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    sub_100263E50((uint64_t)v25);
    v9 = sub_100263F7C((int *)((char *)&v27 + 2), (uint64_t)"INSERT OR REPLACE INTO ", 23);
    v10 = strlen(off_1022A3888);
    v11 = sub_100263F7C(v9, (uint64_t)off_1022A3888, v10);
    v12 = sub_100263F7C(v11, (uint64_t)" (", 2);
    v13 = sub_100263F7C(v12, (uint64_t)"ForeignKey", 10);
    v14 = sub_100263F7C(v13, (uint64_t)", ", 2);
    v15 = sub_100263F7C(v14, (uint64_t)"Latitude", 8);
    v16 = sub_100263F7C(v15, (uint64_t)", ", 2);
    v17 = sub_100263F7C(v16, (uint64_t)"Longitude", 9);
    sub_100263F7C(v17, (uint64_t)") VALUES (?, ?, ?)", 18);
    std::stringbuf::str(buf, (char *)&v29 + 4);
    if ((SBYTE3(v36) & 0x80u) == 0)
      v18 = buf;
    else
      v18 = *(char **)buf;
    sub_1000CDA68(a1, v18);
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021499B0);
  v19 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "storeFenceCentroid";
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "%s, No access to DB", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021499B0);
    v25[0] = 136315138;
    *(_QWORD *)&v25[1] = "storeFenceCentroid";
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "%s, No access to DB", (const char *)v25);
    v24 = (char *)v23;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLFenceCentroidDatabase::storeFenceCentroid(const CLClientLocationCoordinate, const int)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  return 0;
}

void sub_100650FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  sub_1018B38B4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10065103C(uint64_t a1, int a2)
{
  NSObject *v4;
  NSObject *v5;
  _QWORD *v6;
  size_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  NSObject *v12;
  const char *v14;
  char *v15;
  const char *v16;
  char *v17;
  const char *v18;
  char *v19;
  uint64_t v20;
  _DWORD v21[3];
  __int16 v22;
  int v23;
  _QWORD v24[8];
  _BYTE buf[12];
  __int16 v26;
  int v27;
  char v28;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021499B0);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67174657;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: Removing vertices, key, %{private}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021499B0);
    v21[0] = 67174657;
    v21[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: Removing vertices, key, %{private}d", v21, 8);
    v15 = (char *)v14;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceCentroidDatabase::removeFenceCentroid(const int)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  if (sub_1000CC4F4(a1))
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021499B0);
    v5 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315395;
      *(_QWORD *)&buf[4] = "removeFenceCentroid";
      v26 = 1025;
      v27 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s, foreignKey, %{private}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021499B0);
      v21[0] = 136315395;
      *(_QWORD *)&v21[1] = "removeFenceCentroid";
      v22 = 1025;
      v23 = a2;
      LODWORD(v20) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "%s, foreignKey, %{private}d", v21, v20);
      v17 = (char *)v16;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceCentroidDatabase::removeFenceCentroid(const int)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    sub_100263E50((uint64_t)v21);
    v6 = sub_100263F7C((int *)((char *)&v23 + 2), (uint64_t)"DELETE FROM ", 12);
    v7 = strlen(off_1022A3888);
    v8 = sub_100263F7C(v6, (uint64_t)off_1022A3888, v7);
    v9 = sub_100263F7C(v8, (uint64_t)" WHERE ", 7);
    v10 = sub_100263F7C(v9, (uint64_t)"ForeignKey", 10);
    sub_100263F7C(v10, (uint64_t)"=?", 2);
    std::stringbuf::str(buf, v24);
    if (v28 >= 0)
      v11 = buf;
    else
      v11 = *(char **)buf;
    sub_1000CDA68(a1, v11);
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021499B0);
  v12 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "removeFenceCentroid";
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "%s, No access to DB", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021499B0);
    v21[0] = 136315138;
    *(_QWORD *)&v21[1] = "removeFenceCentroid";
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "%s, No access to DB", (const char *)v21);
    v19 = (char *)v18;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLFenceCentroidDatabase::removeFenceCentroid(const int)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  return 0;
}

void sub_100651784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  sub_1018B38B4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1006517DC@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  uint64_t v11;
  _QWORD v12[10];
  char v13;
  uint64_t v14;

  sub_100263E50((uint64_t)v10);
  v4 = *a1;
  v5 = a1[1];
  if (*a1 != v5)
  {
    v6 = 0;
    do
    {
      v7 = *(int *)(v4 + 184);
      if ((v6 & 1) != 0)
        sub_100263F7C(&v11, (uint64_t)", ", 2);
      std::ostream::operator<<(&v11, v7);
      v4 += 248;
      v6 = 1;
    }
    while (v4 != v5);
  }
  std::stringbuf::str(a2, v12);
  *(_QWORD *)((char *)v10
  v11 = v8;
  if (v13 < 0)
    operator delete((void *)v12[8]);
  std::streambuf::~streambuf(v12);
  return std::ios::~ios(&v14);
}

void sub_1006518E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1006518FC(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  NSObject *v17;
  char *v18;
  char *v19;
  _DWORD v20[3];
  __int16 v21;
  int v22;
  _QWORD v23[8];
  _BYTE buf[12];
  __int16 v25;
  int v26;
  char v27;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021499B0);
  v6 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315395;
    *(_QWORD *)&buf[4] = "getFenceCentroid";
    v25 = 1025;
    v26 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%s, Attempting to fetch centroid for key %{private}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021499B0);
    v20[0] = 136315395;
    *(_QWORD *)&v20[1] = "getFenceCentroid";
    v21 = 1025;
    v22 = a2;
    v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "%s, Attempting to fetch centroid for key %{private}d", v20, 18);
    sub_100512490("Generic", 1, 0, 2, "CLDaemonLocation CLFenceCentroidDatabase::getFenceCentroid(const int)", "%s\n", v18);
    if (v18 != buf)
      free(v18);
  }
  if (sub_1000CC4F4(a1))
  {
    sub_100263E50((uint64_t)v20);
    v7 = sub_100263F7C((int *)((char *)&v22 + 2), (uint64_t)"SELECT ", 7);
    v8 = sub_100263F7C(v7, (uint64_t)"Latitude", 8);
    v9 = sub_100263F7C(v8, (uint64_t)", ", 2);
    v10 = sub_100263F7C(v9, (uint64_t)"Longitude", 9);
    v11 = sub_100263F7C(v10, (uint64_t)" FROM ", 6);
    v12 = strlen(off_1022A3888);
    v13 = sub_100263F7C(v11, (uint64_t)off_1022A3888, v12);
    v14 = sub_100263F7C(v13, (uint64_t)" WHERE ", 7);
    v15 = sub_100263F7C(v14, (uint64_t)"ForeignKey", 10);
    sub_100263F7C(v15, (uint64_t)"=?", 2);
    std::stringbuf::str(buf, v23);
    if (v27 >= 0)
      v16 = buf;
    else
      v16 = *(char **)buf;
    sub_1000CDA68(a1, v16);
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021499B0);
  v17 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "getFenceCentroid";
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "%s, No access to DB", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021499B0);
    v20[0] = 136315138;
    *(_QWORD *)&v20[1] = "getFenceCentroid";
    v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "%s, No access to DB", (const char *)v20);
    sub_100512490("Generic", 1, 0, 0, "CLDaemonLocation CLFenceCentroidDatabase::getFenceCentroid(const int)", "%s\n", v19);
    if (v19 != buf)
      free(v19);
  }
  *(_QWORD *)(a3 + 4) = 0;
  *(_QWORD *)(a3 + 12) = 0;
  *(_OWORD *)(a3 + 100) = *(__int128 *)((char *)&xmmword_101C174D8 + 4);
  *(_OWORD *)(a3 + 116) = *(__int128 *)((char *)&xmmword_101C174E8 + 4);
  *(_OWORD *)(a3 + 132) = *(__int128 *)((char *)&xmmword_101C174F8 + 4);
  *(_OWORD *)(a3 + 36) = *(__int128 *)((char *)&xmmword_101C17498 + 4);
  *(_OWORD *)(a3 + 52) = *(__int128 *)((char *)&xmmword_101C174A8 + 4);
  *(_OWORD *)(a3 + 68) = *(__int128 *)((char *)&xmmword_101C174B8 + 4);
  *(_DWORD *)a3 = 0xFFFF;
  *(_QWORD *)(a3 + 148) = 0;
  *(_OWORD *)(a3 + 84) = *(__int128 *)((char *)&xmmword_101C174C8 + 4);
  *(_OWORD *)(a3 + 20) = *(__int128 *)((char *)&xmmword_101C17488 + 4);
}

void sub_100652498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  sub_1018B38B4((uint64_t)&a35);
  _Unwind_Resume(a1);
}

BOOL sub_100652500(uint64_t a1, uint64_t *a2)
{
  _BOOL8 v4;
  NSObject *v5;
  unint64_t v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  char *v21;
  NSObject *v22;
  unint64_t v24;
  const char *v25;
  char *v26;
  const char *v27;
  char *v28;
  std::string::value_type v29[8];
  char v30;
  void *v31[2];
  char v32;
  std::string::value_type __s[8];
  char v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  _BYTE __p[24];
  _BYTE buf[22];
  unsigned __int8 v43;

  v4 = sub_1000CC4F4(a1);
  if (v4)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021499B0);
    v5 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v6 = 0xEF7BDEF7BDEF7BDFLL * ((a2[1] - *a2) >> 3);
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "scrubFenceCentroids";
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s, scrubbing centroids, number of valid foreign keys, %{public}lu", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021499B0);
      v24 = 0xEF7BDEF7BDEF7BDFLL * ((a2[1] - *a2) >> 3);
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = "scrubFenceCentroids";
      *(_WORD *)&__p[12] = 2050;
      *(_QWORD *)&__p[14] = v24;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "%s, scrubbing centroids, number of valid foreign keys, %{public}lu", __p, 22);
      v26 = (char *)v25;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceCentroidDatabase::scrubFenceCentroids(const std::vector<CLFenceManager_Type::Fence>)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    sub_1006517DC(a2, buf);
    *((_BYTE *)&v35.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&v35, "DELETE FROM ");
    v7 = std::string::append(&v35, off_1022A3888);
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v34 = 7;
    strcpy(__s, " WHERE ");
    v9 = std::string::append(&v36, __s, 7uLL);
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = std::string::append(&v37, "ForeignKey");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v32 = 9;
    strcpy((char *)v31, " NOT IN (");
    v13 = std::string::append(&v38, (const std::string::value_type *)v31, 9uLL);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if ((v43 & 0x80u) == 0)
      v15 = buf;
    else
      v15 = *(const std::string::value_type **)buf;
    if ((v43 & 0x80u) == 0)
      v16 = v43;
    else
      v16 = *(_QWORD *)&buf[8];
    v17 = std::string::append(&v39, v15, v16);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v30 = 1;
    strcpy(v29, ")");
    v19 = std::string::append(&v40, v29, 1uLL);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = *((_QWORD *)&v19->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (v30 < 0)
      operator delete(*(void **)v29);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (v32 < 0)
      operator delete(v31[0]);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (v34 < 0)
      operator delete(*(void **)__s);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (__p[23] >= 0)
      v21 = __p;
    else
      v21 = *(char **)__p;
    sub_1000CDA68(a1, v21);
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021499B0);
  v22 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "scrubFenceCentroids";
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "%s, can't scrub fence centroids, invalid database", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021499B0);
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = "scrubFenceCentroids";
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "%s, can't scrub fence centroids, invalid database", __p);
    v28 = (char *)v27;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLFenceCentroidDatabase::scrubFenceCentroids(const std::vector<CLFenceManager_Type::Fence>)", "%s\n", v27);
    if (v28 != buf)
      free(v28);
  }
  return v4;
}

void sub_100652B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a48 < 0)
    operator delete(__p);
  if (a55 < 0)
    operator delete(a50);
  _Unwind_Resume(a1);
}

void sub_100652C2C(id a1)
{
  qword_1022A0068 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

uint64_t sub_100652C58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, uint64_t a11, uint64_t a12)
{
  _OWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  double v57;
  float v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  __int128 v89;
  int v90;
  _OWORD v92[2];
  _OWORD v93[2];
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  int v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  int v101;

  *(_QWORD *)a1 = 0x403E000000000000;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  *(_QWORD *)(a1 + 40) = a6;
  *(_QWORD *)(a1 + 48) = a7;
  *(_QWORD *)(a1 + 56) = a8;
  *(_OWORD *)(a1 + 64) = a9;
  *(_OWORD *)(a1 + 80) = a10;
  v13 = (_OWORD *)(a1 + 1352);
  *(_QWORD *)(a1 + 96) = a11;
  *(_QWORD *)(a1 + 104) = a12;
  bzero((void *)(a1 + 112), 0x4D8uLL);
  *v13 = xmmword_101BB8B10;
  *(_OWORD *)(a1 + 1368) = unk_101BB8B20;
  *(_OWORD *)(a1 + 1384) = xmmword_101BB8B30;
  *(_OWORD *)(a1 + 1396) = *(__int128 *)((char *)&xmmword_101BB8B30 + 12);
  *(_QWORD *)(a1 + 1416) = 0;
  v101 = 0;
  v14 = sub_100127B9C();
  sub_100081C10(v14, &v99);
  v15 = sub_100526804(v99, "NatalimetryUserInfoAge", (float *)&v101);
  v16 = v15;
  v17 = v100;
  if (v100)
  {
    p_shared_owners = (unint64_t *)&v100->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      if (!v16)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  if (v15)
  {
LABEL_6:
    v20 = v101;
    *(_BYTE *)(a1 + 1408) = 1;
    *(_DWORD *)(a1 + 1372) = v20;
  }
LABEL_7:
  v98 = 0;
  v21 = sub_100127B9C();
  sub_100081C10(v21, &v99);
  v22 = sub_100526804(v99, "NatalimetryUserInfoHeightM", (float *)&v98);
  v23 = v22;
  v24 = v100;
  if (v100)
  {
    v25 = (unint64_t *)&v100->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
      if (!v23)
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  if (v22)
  {
LABEL_12:
    v27 = v98;
    *(_BYTE *)(a1 + 1409) = 1;
    *(_DWORD *)(a1 + 1360) = v27;
  }
LABEL_13:
  v97 = 0;
  v28 = sub_100127B9C();
  sub_100081C10(v28, &v99);
  v29 = sub_100526804(v99, "NatalimetryUserInfoWeightKG", (float *)&v97);
  v30 = v29;
  v31 = v100;
  if (v100)
  {
    v32 = (unint64_t *)&v100->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
      if (!v30)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  if (v29)
  {
LABEL_18:
    v34 = v97;
    *(_BYTE *)(a1 + 1410) = 1;
    *(_DWORD *)(a1 + 1364) = v34;
  }
LABEL_19:
  v96 = 0;
  v35 = sub_100127B9C();
  sub_100081C10(v35, &v99);
  v36 = sub_1001E4B84(v99, "NatalimetryUserInfoGender", &v96);
  v37 = v36;
  v38 = v100;
  if (!v100)
    goto LABEL_23;
  v39 = (unint64_t *)&v100->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
    if (!v37)
      goto LABEL_33;
  }
  else
  {
LABEL_23:
    if (!v36)
      goto LABEL_33;
  }
  if (v96 <= 1)
    *(_DWORD *)v13 = v96;
LABEL_33:
  v95 = 0;
  v41 = sub_100127B9C();
  sub_100081C10(v41, &v99);
  v42 = sub_1001E4B84(v99, "NatalimetryUserInfoBiologicalSex", &v95);
  v43 = v42;
  v44 = v100;
  if (v100)
  {
    v45 = (unint64_t *)&v100->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
      if (!v43)
        goto LABEL_39;
      goto LABEL_38;
    }
  }
  if (v42)
LABEL_38:
    *(_DWORD *)(a1 + 1356) = sub_100653354(v95);
LABEL_39:
  v47 = sub_100127B9C();
  sub_100081C10(v47, &v99);
  sub_100526804(v99, "NatalimetryUserInfoHrmin", (float *)(a1 + 1376));
  v48 = v100;
  if (v100)
  {
    v49 = (unint64_t *)&v100->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  *(_DWORD *)(a1 + 1384) = *(_DWORD *)(a1 + 1376);
  v51 = sub_100127B9C();
  sub_100081C10(v51, &v99);
  v52 = sub_100526804(v99, "NatalimetryUserInfoHrmax", (float *)(a1 + 1380));
  v53 = v52;
  v54 = v100;
  if (!v100)
    goto LABEL_48;
  v55 = (unint64_t *)&v100->__shared_owners_;
  do
    v56 = __ldaxr(v55);
  while (__stlxr(v56 - 1, v55));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
    if ((v53 & 1) != 0)
      goto LABEL_52;
  }
  else
  {
LABEL_48:
    if ((v52 & 1) != 0)
      goto LABEL_52;
  }
  v57 = *(float *)(a1 + 1372) * -0.699999988 + 208.0;
  if (*(_BYTE *)(a1 + 1400))
    v57 = v57 + -44.0;
  v58 = v57;
  *(float *)(a1 + 1380) = v58;
LABEL_52:
  v59 = sub_100127B9C();
  sub_100081C10(v59, &v99);
  sub_100526804(v99, "NatalimetryUserInfoPal", (float *)(a1 + 1388));
  v60 = v100;
  if (v100)
  {
    v61 = (unint64_t *)&v100->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = sub_100127B9C();
  sub_100081C10(v63, &v99);
  v64 = sub_100526804(v99, "NatalimetryUserInfoRunVo2max", (float *)(a1 + 1396));
  v65 = v64;
  v66 = v100;
  if (v100)
  {
    v67 = (unint64_t *)&v100->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
      if ((v65 & 1) != 0)
        goto LABEL_63;
      goto LABEL_62;
    }
  }
  if ((v64 & 1) == 0)
LABEL_62:
    *(_DWORD *)(a1 + 1396) = 1088421888;
LABEL_63:
  v94 = 0;
  v69 = sub_100127B9C();
  sub_100081C10(v69, &v99);
  v70 = sub_1001E4B84(v99, "NatalimetryUserCondition", &v94);
  v71 = v70;
  v72 = v100;
  if (!v100)
    goto LABEL_67;
  v73 = (unint64_t *)&v100->__shared_owners_;
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v74 - 1, v73));
  if (!v74)
  {
    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
    std::__shared_weak_count::__release_weak(v72);
    if (!v71)
      goto LABEL_77;
  }
  else
  {
LABEL_67:
    if (!v70)
      goto LABEL_77;
  }
  if (v94 <= 6)
    *(_DWORD *)(a1 + 1392) = v94;
LABEL_77:
  v75 = sub_100127B9C();
  sub_100081C10(v75, &v99);
  sub_1001E4874(v99, "NatalimetryUserInfoBetaBlockerUse", (BOOL *)(a1 + 1400));
  v76 = v100;
  if (v100)
  {
    v77 = (unint64_t *)&v100->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = sub_100127B9C();
  sub_100081C10(v79, &v99);
  sub_100526804(v99, "NatalimetryAdaptiveExericseMinuteThreshold", (float *)(a1 + 1404));
  v80 = v100;
  if (v100)
  {
    v81 = (unint64_t *)&v100->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = sub_100127B9C();
  sub_100081C10(v83, &v99);
  v84 = sub_100526804(v99, "NatalimetryUserInfoVo2max", (float *)(a1 + 1368));
  v85 = v84;
  v86 = v100;
  if (v100)
  {
    v87 = (unint64_t *)&v100->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
      if ((v85 & 1) != 0)
        return a1;
      goto LABEL_92;
    }
  }
  if ((v84 & 1) == 0)
  {
LABEL_92:
    v89 = *(_OWORD *)(a1 + 1368);
    v92[0] = *v13;
    v92[1] = v89;
    v93[0] = *(_OWORD *)(a1 + 1384);
    *(_OWORD *)((char *)v93 + 12) = *(_OWORD *)(a1 + 1396);
    sub_100653518((uint64_t)v92);
    *(_DWORD *)(a1 + 1368) = v90;
  }
  return a1;
}

void sub_100653310(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1 - 72);
  _Unwind_Resume(a1);
}

uint64_t sub_100653354(uint64_t result)
{
  int v1;
  NSObject *v2;
  _BOOL4 v3;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  v1 = result;
  if (result >= 4)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021499D0);
    v2 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67174657;
      v8 = v1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Unsupported CLHKBiologicalSex value: %{private}d", buf, 8u);
    }
    v3 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v3)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021499D0);
      v6[0] = 67174657;
      v6[1] = v1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "Unsupported CLHKBiologicalSex value: %{private}d", v6, 8);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "static CLHKBiologicalSex CLNatalieModelInput::intToBiologicalSex(int)", "%s\n", v4);
      if (v5 != buf)
        free(v5);
      return 0;
    }
  }
  return result;
}

void sub_100653518(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  float v5;
  double v6;
  float v7;
  float v8;
  float v9;
  NSObject *v10;
  int v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  double v15;
  int v16;
  double v17;
  __int16 v18;
  double v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  double v25;
  uint8_t buf[4];
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  __int16 v34;
  double v35;

  v2 = *(float *)(a1 + 36);
  v3 = *(float *)(a1 + 20);
  v4 = (float)(*(float *)(a1 + 12) / (float)(*(float *)(a1 + 8) * *(float *)(a1 + 8)));
  v5 = (v2 * 1.921 + 56.363 + v3 * -0.381 + v4 * -0.754 + (double)(1 - *(_DWORD *)a1) * 10.987) / 3.5;
  v6 = v3 * -0.039 + 14.889 + v4 * -0.151 + (double)*(int *)a1 * -3.1391 + v2 * 0.429;
  v7 = v6;
  if (v5 >= v7)
    v8 = v5;
  else
    v8 = v6;
  if (*(_BYTE *)(a1 + 48))
    v9 = v8 * 0.65;
  else
    v9 = v8;
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021499D0);
  v10 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(unsigned __int8 *)(a1 + 48);
    *(_DWORD *)buf = 134219008;
    v27 = v5;
    v28 = 2048;
    v29 = v7;
    v30 = 2048;
    v31 = 0x401C000000000000;
    v32 = 1024;
    v33 = v11;
    v34 = 2048;
    v35 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Derived Vo2max, %.1f, Revised Vo2max, %.1f, Minimum Vo2max, %.1f, Beta Blocker Use, %d, Beta Blocker Vo2max, %.1f", buf, 0x30u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021499D0);
    v12 = *(unsigned __int8 *)(a1 + 48);
    v16 = 134219008;
    v17 = v5;
    v18 = 2048;
    v19 = v7;
    v20 = 2048;
    v21 = 0x401C000000000000;
    v22 = 1024;
    v23 = v12;
    v24 = 2048;
    v25 = v9;
    LODWORD(v15) = 48;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "Derived Vo2max, %.1f, Revised Vo2max, %.1f, Minimum Vo2max, %.1f, Beta Blocker Use, %d, Beta Blocker Vo2max, %.1f", COERCE_DOUBLE(&v16), v15);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "static float CLNatalieModelInput::computeDerivedVo2max(const CLBodyMetrics)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
}

uint64_t sub_100653828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, uint64_t a11, uint64_t a12)
{
  return sub_100652C58(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_10065384C(uint64_t a1)
{
  sub_100653874(*(_QWORD **)(a1 + 16));
  return sub_100653A54(*(_QWORD **)(a1 + 24));
}

uint64_t sub_100653874(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021499D0);
  v2 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[1];
    *(_DWORD *)buf = 136315138;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Disabling the %s buffer", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021499D0);
    v5 = a1[1];
    v8 = 136315138;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "Disabling the %s buffer", (const char *)&v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLNatalieInput<CLOdometerEntry>::disableSource() [Data_T = CLOdometerEntry]", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  result = (*(uint64_t (**)(_QWORD *))(*a1 + 72))(a1);
  if (!*((_BYTE *)a1 + 121))
  {
    *((_BYTE *)a1 + 80) = 0;
    a1[11] = 0;
  }
  return result;
}

uint64_t sub_100653A54(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021499D0);
  v2 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[1];
    *(_DWORD *)buf = 136315138;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Disabling the %s buffer", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021499D0);
    v5 = a1[1];
    v8 = 136315138;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "Disabling the %s buffer", (const char *)&v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLNatalieInput<CLElevationChangeEntry>::disableSource()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  result = (*(uint64_t (**)(_QWORD *))(*a1 + 72))(a1);
  if (!*((_BYTE *)a1 + 121))
  {
    *((_BYTE *)a1 + 80) = 0;
    a1[11] = 0;
  }
  return result;
}

uint64_t sub_100653C34(uint64_t a1)
{
  sub_100653C5C(*(_QWORD **)(a1 + 16));
  return sub_100653E1C(*(_QWORD **)(a1 + 24));
}

uint64_t sub_100653C5C(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021499D0);
  v2 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[1];
    *(_DWORD *)buf = 136315138;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Enabling the spectators for %s buffer", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021499D0);
    v5 = a1[1];
    v8 = 136315138;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "Enabling the spectators for %s buffer", (const char *)&v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLNatalieInput<CLOdometerEntry>::enableSource() [Data_T = CLOdometerEntry]", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
}

uint64_t sub_100653E1C(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021499D0);
  v2 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[1];
    *(_DWORD *)buf = 136315138;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Enabling the spectators for %s buffer", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021499D0);
    v5 = a1[1];
    v8 = 136315138;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "Enabling the spectators for %s buffer", (const char *)&v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLNatalieInput<CLElevationChangeEntry>::enableSource()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
}

float sub_100653FDC(float *a1, double a2)
{
  float result;
  float v4;

  result = -1.0;
  if (a1[344] + -10.0 > a2)
  {
    v4 = a1[346];
    if (vabdd_f64(a2, v4) < 0.001)
      return (float)((float)(a1[345] * 2.6232) / v4) + 3.9865;
  }
  return result;
}

void sub_10065403C(uint64_t a1)
{
  __int128 v2;
  float v3;
  float v4;
  float v5;
  NSObject *v6;
  float v7;
  const char *v8;
  uint8_t *v9;
  _OWORD v10[2];
  _OWORD v11[2];
  int v12;
  double v13;
  uint8_t buf[4];
  double v15;

  v2 = *(_OWORD *)(a1 + 16);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v2;
  v11[0] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)((char *)v11 + 12) = *(_OWORD *)(a1 + 44);
  sub_100653518((uint64_t)v10);
  v3 = *(float *)(a1 + 28) * 15.3;
  v5 = v4 * 3.5;
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021499D0);
  v6 = qword_10229FC98;
  v7 = v3 / v5;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Estimated HRmin, %.1f ", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021499D0);
    v12 = 134217984;
    v13 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "Estimated HRmin, %.1f ", COERCE_DOUBLE(&v12));
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "static float CLNatalieModelInput::estimateHRmin(const CLBodyMetrics &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
}

void sub_100654238(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  NSObject *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  double v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  int v32;
  double v33;
  __int16 v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  double v40;
  const char *v41;
  uint8_t *v42;
  double v43;
  double v44;
  _BYTE v45[32];
  _BYTE v46[12];
  double v47;
  int v48;
  int v49;
  _BYTE v50[10];
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  double v56;
  uint8_t buf[4];
  int v58;
  __int16 v59;
  double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  double v64;
  __int16 v65;
  double v66;
  __int16 v67;
  double v68;
  __int16 v69;
  double v70;
  __int16 v71;
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  int v76;
  __int16 v77;
  double v78;
  __int16 v79;
  int v80;
  __int16 v81;
  int v82;
  __int16 v83;
  int v84;
  __int16 v85;
  int v86;
  __int16 v87;
  int v88;
  __int16 v89;
  double v90;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  *(_OWORD *)(a1 + 1396) = *(__int128 *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 1368) = v4;
  *(_OWORD *)(a1 + 1384) = v5;
  *(_OWORD *)(a1 + 1352) = v3;
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021499D0);
  v6 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v7 = *((float *)a2 + 2);
    v8 = *((float *)a2 + 3);
    v9 = *((float *)a2 + 4);
    v10 = *((float *)a2 + 5);
    v11 = *((float *)a2 + 6);
    v12 = *((float *)a2 + 7);
    v13 = *((float *)a2 + 8);
    v14 = *((float *)a2 + 9);
    v15 = *((_DWORD *)a2 + 10);
    v16 = *((float *)a2 + 11);
    v17 = *((unsigned __int8 *)a2 + 48);
    v18 = *(_DWORD *)a2;
    v19 = *((_DWORD *)a2 + 1);
    v20 = *((unsigned __int8 *)a2 + 56);
    v21 = *((unsigned __int8 *)a2 + 57);
    v22 = *((unsigned __int8 *)a2 + 58);
    v23 = *((float *)a2 + 13);
    *(_DWORD *)buf = 67113216;
    v58 = v18;
    v59 = 2048;
    v60 = v7;
    v61 = 2048;
    v62 = v8;
    v63 = 2048;
    v64 = v9;
    v65 = 2048;
    v66 = v10;
    v67 = 2048;
    v68 = v11;
    v69 = 2048;
    v70 = v12;
    v71 = 2048;
    v72 = v13;
    v73 = 2048;
    v74 = v14;
    v75 = 1024;
    v76 = v15;
    v77 = 2048;
    v78 = v16;
    v79 = 1024;
    v80 = v17;
    v81 = 1024;
    v82 = v19;
    v83 = 1024;
    v84 = v20;
    v85 = 1024;
    v86 = v21;
    v87 = 1024;
    v88 = v22;
    v89 = 2048;
    v90 = v23;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "ModelInput,gender,%d,height,%f,weight,%f,vo2max,%f,age,%f,hrmin,%f,hrmax,%f,hronset,%f,pal,%f,condition,%d,runVo2max,%f,betaBlockerUse,%d,biologicalSex,%d,isAgeSet,%d,isHeightSet,%d,isWeightSet,%d,adaptiveEMThresh,%f", buf, 0x90u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021499D0);
    v24 = *((float *)a2 + 2);
    v25 = *((float *)a2 + 3);
    v26 = *((float *)a2 + 4);
    v27 = *((float *)a2 + 5);
    v28 = *((float *)a2 + 6);
    v29 = *((float *)a2 + 7);
    v30 = *((float *)a2 + 8);
    v31 = *((float *)a2 + 9);
    v32 = *((_DWORD *)a2 + 10);
    v33 = *((float *)a2 + 11);
    v34 = *((unsigned __int8 *)a2 + 48);
    v35 = *(_DWORD *)a2;
    v36 = *((_DWORD *)a2 + 1);
    v37 = *((unsigned __int8 *)a2 + 56);
    v38 = *((unsigned __int8 *)a2 + 57);
    v39 = *((unsigned __int8 *)a2 + 58);
    v40 = *((float *)a2 + 13);
    LODWORD(v44) = 67113216;
    HIDWORD(v44) = v35;
    *(_WORD *)v45 = 2048;
    *(double *)&v45[2] = v24;
    *(_WORD *)&v45[10] = 2048;
    *(double *)&v45[12] = v25;
    *(_WORD *)&v45[20] = 2048;
    *(double *)&v45[22] = v26;
    *(_WORD *)&v45[30] = 2048;
    *(_WORD *)v46 = 2048;
    *(double *)&v46[2] = v28;
    *(_WORD *)&v46[10] = 2048;
    LODWORD(v47) = HIDWORD(v29);
    WORD2(v47) = 2048;
    HIWORD(v47) = LOWORD(v30);
    LOWORD(v48) = 1024;
    HIWORD(v48) = v32;
    LOWORD(v49) = 1024;
    HIWORD(v49) = v34;
    *(_DWORD *)v50 = v36;
    *(_WORD *)&v50[4] = 1024;
    *(_DWORD *)&v50[6] = v37;
    v51 = 1024;
    v52 = v38;
    v53 = 1024;
    v54 = v39;
    v55 = 2048;
    v56 = v40;
    LODWORD(v43) = 144;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "ModelInput,gender,%d,height,%f,weight,%f,vo2max,%f,age,%f,hrmin,%f,hrmax,%f,hronset,%f,pal,%f,condition,%d,runVo2max,%f,betaBlockerUse,%d,biologicalSex,%d,isAgeSet,%d,isHeightSet,%d,isWeightSet,%d,adaptiveEMThresh,%f", &v44, v43, v44, *(double *)v45, *(double *)&v45[8], *(double *)&v45[16], *(double *)&v45[24], v27, *(double *)v46, *(_DWORD *)&v46[8],
      v47,
      *(_QWORD *)&v30 >> 16,
      LODWORD(v31),
      v48,
      LODWORD(v33),
      v49,
      *(double *)v50);
    v42 = (uint8_t *)v41;
    sub_100512490("Generic", 1, 0, 2, "void CLNatalieModelInput::updateBodyMetrics(const CLBodyMetrics &)", "%s\n", v41);
    if (v42 != buf)
      free(v42);
  }
}

void sub_1006545C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3 != 19)
  {
    if (v3 == 1)
      goto LABEL_6;
    if (v3)
      return;
  }
  if (*(_QWORD *)(a2 + 224) == 1)
  {
    *(_QWORD *)a1 = 0x4050400000000000;
    sub_100654670(*(double **)(a1 + 8), 65.0, 65.0);
    sub_100654888(*(double **)(a1 + 40), 150.0, 150.0);
    return;
  }
LABEL_6:
  sub_100654888(*(double **)(a1 + 40), 10.0, 0.1);
  sub_100654670(*(double **)(a1 + 8), 35.0, 8.0);
  *(_QWORD *)a1 = 0x403E000000000000;
}

void sub_100654670(double *a1, double a2, double a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  double v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  double v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  double v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  double v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  double v35;

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021499D0);
  v6 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *((_QWORD *)a1 + 12);
    v8 = *((_QWORD *)a1 + 1);
    v9 = *((_QWORD *)a1 + 2);
    *(_DWORD *)buf = 136316162;
    v27 = v8;
    v28 = 2048;
    v29 = v7;
    v30 = 2048;
    v31 = a2;
    v32 = 2048;
    v33 = v9;
    v34 = 2048;
    v35 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Input, %s, changing behavior timeout(before), %.3f, timeout(after), %.3f, threshold(before), %.3f, threshold(after), %.3f", buf, 0x34u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021499D0);
    v10 = *((_QWORD *)a1 + 12);
    v11 = *((_QWORD *)a1 + 1);
    v12 = *((_QWORD *)a1 + 2);
    v16 = 136316162;
    v17 = v11;
    v18 = 2048;
    v19 = v10;
    v20 = 2048;
    v21 = a2;
    v22 = 2048;
    v23 = v12;
    v24 = 2048;
    v25 = a3;
    LODWORD(v15) = 52;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "#Warning Input, %s, changing behavior timeout(before), %.3f, timeout(after), %.3f, threshold(before), %.3f, threshold(after), %.3f", (const char *)&v16, v15);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLNatalieInput<CLCatherineData>::modifyTimeouts(CFTimeInterval, CFTimeInterval) [Data_T = CLCatherineData]", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  a1[12] = a2;
  a1[2] = a3;
}

void sub_100654888(double *a1, double a2, double a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  double v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  double v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  double v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  double v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  double v35;

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021499D0);
  v6 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *((_QWORD *)a1 + 12);
    v8 = *((_QWORD *)a1 + 1);
    v9 = *((_QWORD *)a1 + 2);
    *(_DWORD *)buf = 136316162;
    v27 = v8;
    v28 = 2048;
    v29 = v7;
    v30 = 2048;
    v31 = a2;
    v32 = 2048;
    v33 = v9;
    v34 = 2048;
    v35 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Input, %s, changing behavior timeout(before), %.3f, timeout(after), %.3f, threshold(before), %.3f, threshold(after), %.3f", buf, 0x34u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021499D0);
    v10 = *((_QWORD *)a1 + 12);
    v11 = *((_QWORD *)a1 + 1);
    v12 = *((_QWORD *)a1 + 2);
    v16 = 136316162;
    v17 = v11;
    v18 = 2048;
    v19 = v10;
    v20 = 2048;
    v21 = a2;
    v22 = 2048;
    v23 = v12;
    v24 = 2048;
    v25 = a3;
    LODWORD(v15) = 52;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "#Warning Input, %s, changing behavior timeout(before), %.3f, timeout(after), %.3f, threshold(before), %.3f, threshold(after), %.3f", (const char *)&v16, v15);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLNatalieInput<CLStepCountEntry>::modifyTimeouts(CFTimeInterval, CFTimeInterval) [Data_T = CLStepCountEntry]", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  a1[12] = a2;
  a1[2] = a3;
}

void sub_100654AA0(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100654ACC(uint64_t a1, const void *a2, int a3)
{
  void *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  char *v12[2];
  __int128 v13;
  char *v14[2];
  char *v15[2];
  char *v16[2];
  char *v17[2];
  char *v18[2];

  bzero((void *)a1, 0x658uLL);
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)v18 = 0u;
  *(_OWORD *)v15 = 0u;
  *(_OWORD *)v16 = 0u;
  v13 = 0u;
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)v12 = 0u;
  v6 = malloc_type_malloc(a3 + 1, 0x210E367BuLL);
  memcpy(v6, a2, a3);
  *((_BYTE *)v6 + a3) = 0;
  if (sub_100656F14((uint64_t)v12, 14, (char *)v6) == 14)
  {
    if (sub_100657218((int *)a1, v12[0]))
      *(_QWORD *)(a1 + 96) |= 1uLL;
    if (sub_1006572D8(a1 + 16, v12[1], (_BYTE *)v13))
      *(_QWORD *)(a1 + 96) |= 2uLL;
    if (sub_1006572D8(a1 + 40, *((char **)&v13 + 1), v14[0]))
      *(_QWORD *)(a1 + 96) |= 4uLL;
    if (v14[1])
    {
      v7 = *v14[1];
      if ((v7 - 48) <= 9)
        v7 = atoi(v14[1]);
      *(_DWORD *)(a1 + 64) = v7;
      *(_QWORD *)(a1 + 96) |= 8uLL;
    }
    if (v15[0])
    {
      v8 = *v15[0];
      if ((v8 - 48) <= 9)
        v8 = atoi(v15[0]);
      *(_DWORD *)(a1 + 68) = v8;
      *(_QWORD *)(a1 + 96) |= 0x10uLL;
    }
    if (v15[1])
    {
      *(_DWORD *)(a1 + 72) = (int)(atof(v15[1]) * 10.0);
      *(_QWORD *)(a1 + 96) |= 0x20uLL;
    }
    if (v16[0])
    {
      *(_DWORD *)(a1 + 76) = (int)(atof(v16[0]) * 10.0);
      *(_QWORD *)(a1 + 96) |= 0x40uLL;
    }
    if (v17[0])
    {
      *(_DWORD *)(a1 + 80) = (int)(atof(v17[0]) * 10.0);
      *(_QWORD *)(a1 + 96) |= 0x80uLL;
    }
    if (v18[0])
    {
      *(_DWORD *)(a1 + 84) = (int)(atof(v18[0]) * 10.0);
      *(_QWORD *)(a1 + 96) |= 0x100uLL;
    }
    if (v18[1])
    {
      v9 = *v18[1];
      if ((v9 - 48) <= 9)
        v9 = atoi(v18[1]);
      v10 = 0;
      *(_DWORD *)(a1 + 88) = v9;
      *(_QWORD *)(a1 + 96) |= 0x200uLL;
    }
    else
    {
      v10 = 0;
    }
  }
  else
  {
    v10 = 8;
  }
  free(v6);
  return v10;
}

uint64_t sub_100654D2C(int *a1, const void *a2, int a3)
{
  void *v6;
  int v7;
  int v8;
  uint64_t i;
  const char *v10;
  int v11;
  char *v13[2];
  _OWORD v14[6];
  char *v15[2];
  char *v16[2];

  bzero(a1, 0x658uLL);
  *(_OWORD *)v15 = 0u;
  *(_OWORD *)v16 = 0u;
  memset(v14, 0, sizeof(v14));
  *(_OWORD *)v13 = 0u;
  v6 = malloc_type_malloc(a3 + 1, 0x21098E2uLL);
  memcpy(v6, a2, a3);
  *((_BYTE *)v6 + a3) = 0;
  if (sub_100656F14((uint64_t)v13, 18, (char *)v6) == 18)
  {
    if (v13[0])
    {
      v7 = *v13[0];
      if ((v7 - 48) <= 9)
        v7 = atoi(v13[0]);
      *a1 = v7;
      *((_QWORD *)a1 + 9) |= 1uLL;
    }
    if (v13[1])
    {
      v8 = *v13[1];
      if ((v8 - 48) <= 9)
        v8 = atoi(v13[1]);
      a1[1] = v8;
      *((_QWORD *)a1 + 9) |= 2uLL;
    }
    for (i = 0; i != 12; ++i)
    {
      v10 = (const char *)*((_QWORD *)v14 + i);
      if (v10)
      {
        v11 = *v10;
        if ((v11 - 48) <= 9)
          v11 = atoi(v10);
        a1[i + 2] = v11;
        *((_QWORD *)a1 + 9) |= (4 << i);
      }
    }
    if (v15[0])
    {
      a1[14] = (int)(atof(v15[0]) * 10.0);
      *((_QWORD *)a1 + 9) |= 0x4000uLL;
    }
    if (v15[1])
    {
      a1[15] = (int)(atof(v15[1]) * 10.0);
      *((_QWORD *)a1 + 9) |= 0x8000uLL;
    }
    if (v16[0])
    {
      a1[16] = (int)(atof(v16[0]) * 10.0);
      *((_QWORD *)a1 + 9) |= 0x10000uLL;
    }
    free(v6);
    return 1;
  }
  else
  {
    free(v6);
    return 8;
  }
}

uint64_t sub_100654F3C(int *a1, const void *a2, int a3)
{
  void *v6;
  int v7;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  char *v17[2];
  char *v18[2];
  __int128 v19;
  _OWORD v20[6];
  uint64_t v21;

  bzero(a1, 0x658uLL);
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  *(_OWORD *)v18 = 0u;
  v19 = 0u;
  *(_OWORD *)v17 = 0u;
  v6 = malloc_type_malloc(a3 + 1, 0xE6BD8924uLL);
  memcpy(v6, a2, a3);
  *((_BYTE *)v6 + a3) = 0;
  v7 = sub_100656F14((uint64_t)v17, 19, (char *)v6);
  if (v7 > 2)
  {
    v9 = v7;
    if (v17[0])
    {
      v10 = *v17[0];
      if ((v10 - 48) <= 9)
        v10 = atoi(v17[0]);
      *a1 = v10;
      *((_QWORD *)a1 + 10) |= 1uLL;
    }
    if (v17[1])
    {
      v11 = *v17[1];
      if ((v11 - 48) <= 9)
        v11 = atoi(v17[1]);
      a1[1] = v11;
      *((_QWORD *)a1 + 10) |= 2uLL;
    }
    if (v18[0])
    {
      v12 = *v18[0];
      if ((v12 - 48) <= 9)
        v12 = atoi(v18[0]);
      a1[2] = v12;
      *((_QWORD *)a1 + 10) |= 4uLL;
    }
    if (v9 >= 7)
    {
      v13 = 0;
      v14 = 0;
      v15 = a1 + 3;
      do
      {
        if ((uint64_t)v14 >= a1[2])
          break;
        sub_1006573E4(v15, v18[v13 * 2 + 1], *(const char **)&v20[v13 - 1], *((const char **)&v19 + v13 * 2 + 1), *(const char **)&v20[v13]);
        *((_QWORD *)a1 + 10) |= (8 << v14);
        if (v13 * 2 + 11 > (unint64_t)v9)
          break;
        v13 += 2;
        v15 += 4;
      }
      while (v14++ < 3);
    }
    free(v6);
    return 2;
  }
  else
  {
    free(v6);
    return 8;
  }
}

uint64_t sub_100655134(uint64_t a1, const void *a2, int a3)
{
  void *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  uint8_t *v16;
  _WORD v18[8];
  uint8_t buf[1632];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  bzero((void *)a1, 0x658uLL);
  v26 = 0;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v6 = malloc_type_malloc(a3 + 1, 0xD3D3C496uLL);
  memcpy(v6, a2, a3);
  *((_BYTE *)v6 + a3) = 0;
  v7 = sub_100656F14((uint64_t)&v20, 13, (char *)v6);
  if (v7 > 0xD || (v8 = v7, ((1 << v7) & 0x3400) == 0))
  {
    v16 = (uint8_t *)v6;
    goto LABEL_44;
  }
  if (sub_100657218((int *)a1, (char *)v20))
    *(_QWORD *)(a1 + 96) |= 1uLL;
  if (*((_QWORD *)&v20 + 1))
  {
    v9 = (char)**((_BYTE **)&v20 + 1);
    if ((v9 - 48) <= 9)
      v9 = atoi(*((const char **)&v20 + 1));
    *(_DWORD *)(a1 + 12) = v9;
    *(_QWORD *)(a1 + 96) |= 2uLL;
  }
  if (sub_1006572D8(a1 + 16, (char *)v21, *((_BYTE **)&v21 + 1)))
    *(_QWORD *)(a1 + 96) |= 4uLL;
  if (sub_1006572D8(a1 + 40, (char *)v22, *((_BYTE **)&v22 + 1)))
    *(_QWORD *)(a1 + 96) |= 8uLL;
  if ((_QWORD)v23)
  {
    *(_DWORD *)(a1 + 64) = (int)(atof((const char *)v23) * 10.0);
    *(_QWORD *)(a1 + 96) |= 0x10uLL;
  }
  if (*((_QWORD *)&v23 + 1))
  {
    *(_DWORD *)(a1 + 68) = (int)(atof(*((const char **)&v23 + 1)) * 10.0);
    *(_QWORD *)(a1 + 96) |= 0x20uLL;
  }
  if ((_QWORD)v24)
  {
    v10 = atoi((const char *)v24);
    *(_DWORD *)(a1 + 72) = v10 / 10000;
    *(_DWORD *)(a1 + 76) = v10 / 100 % 100;
    *(_DWORD *)(a1 + 80) = v10 % 100;
    *(_QWORD *)(a1 + 96) |= 0x40uLL;
  }
  if (v8 >= 0xB)
  {
    if (*((_QWORD *)&v24 + 1))
    {
      *(_DWORD *)(a1 + 84) = (int)(atof(*((const char **)&v24 + 1)) * 10.0);
      *(_QWORD *)(a1 + 96) |= 0x80uLL;
    }
    if (v8 >= 0xC)
    {
      if ((_QWORD)v25)
      {
        v11 = *(char *)v25;
        if ((v11 - 48) <= 9)
          v11 = atoi((const char *)v25);
        *(_DWORD *)(a1 + 88) = v11;
        *(_QWORD *)(a1 + 96) |= 0x100uLL;
      }
      if (v8 >= 0xD && *((_QWORD *)&v25 + 1))
      {
        v12 = (char)**((_BYTE **)&v25 + 1);
        if ((v12 - 48) <= 9)
          v12 = atoi(*((const char **)&v25 + 1));
        *(_DWORD *)(a1 + 92) = v12;
        *(_QWORD *)(a1 + 96) |= 0x200uLL;
      }
    }
  }
  free(v6);
  if ((double)*(int *)(a1 + 64) / 10.0 * 0.514444444 <= 600.0)
    return 3;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102149AD0);
  v13 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "invalid GPRMC,speed above max", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102149AD0);
    v18[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "invalid GPRMC,speed above max", v18, 2);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "CLNmeaSentenceType CLNmeaParserParseRMC(CLNmeaData *, const char *, int)", "%s\n", v14);
    if (v15 != buf)
    {
      v16 = v15;
LABEL_44:
      free(v16);
    }
  }
  return 8;
}

uint64_t sub_100655564(CFAbsoluteTime *a1, const void *a2, int a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  NSObject *v15;
  int v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  double v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t buf[4];
  int v35;
  __int16 v36;
  int v37;
  char *v38[2];
  char *v39[2];
  char *v40[2];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;

  v6 = malloc_type_malloc(a3 + 1, 0xB309996BuLL);
  if (v6)
  {
    v7 = v6;
    v8 = 8;
    if (!a1 || !a2)
      goto LABEL_76;
    v69 = 0u;
    v68 = 0u;
    v67 = 0u;
    v66 = 0u;
    v65 = 0u;
    v64 = 0u;
    v63 = 0u;
    v62 = 0u;
    v61 = 0u;
    v60 = 0u;
    v59 = 0u;
    v58 = 0u;
    v57 = 0u;
    v56 = 0u;
    v55 = 0u;
    v54 = 0u;
    v53 = 0u;
    v52 = 0u;
    v51 = 0u;
    v50 = 0u;
    v49 = 0u;
    v48 = 0u;
    v47 = 0u;
    v46 = 0u;
    v45 = 0u;
    v44 = 0u;
    v43 = 0u;
    v42 = 0u;
    v41 = 0u;
    *(_OWORD *)v40 = 0u;
    *(_OWORD *)v39 = 0u;
    *(_OWORD *)v38 = 0u;
    bzero(a1, 0x658uLL);
    memcpy(v7, a2, a3);
    *((_BYTE *)v7 + a3) = 0;
    if ((int)sub_100656F14((uint64_t)v38, 107, (char *)v7) > 5)
    {
      if (v38[0])
      {
        a1[3] = atof(v38[0]);
        *a1 = CFAbsoluteTimeGetCurrent();
        a1[1] = sub_1001FCBB4();
        a1[2] = sub_100078B88();
        if (v38[1])
        {
          v11 = *v38[1];
          if ((v11 - 48) <= 9)
            v11 = atoi(v38[1]);
          *((_DWORD *)a1 + 8) = v11;
          if (v39[0])
          {
            v12 = *v39[0];
            if ((v12 - 48) <= 9)
              v12 = atoi(v39[0]);
            *((_DWORD *)a1 + 9) = v12;
            if (v39[1])
            {
              v13 = *v39[1];
              if ((v13 - 48) <= 9)
                v13 = atoi(v39[1]);
              *((_DWORD *)a1 + 10) = v13;
            }
            if (v40[0])
            {
              v14 = *v40[0];
              if (v14 - 48 <= 9)
                v14 = atoi(v40[0]);
              *((_DWORD *)a1 + 11) = v14;
              if (v14)
              {
                if (v14 <= 0x32)
                {
                  v23 = 0;
                  v24 = 2 * v14;
                  v8 = 4;
                  while (1)
                  {
                    v25 = v40[v23 + 1];
                    if (!v25)
                      break;
                    a1[6] = atof(v25);
                    v26 = v38[((_DWORD)v23 + 6) & 0xFFFFFFFE];
                    if (!v26)
                    {
                      if (qword_1022A02D0 != -1)
                        dispatch_once(&qword_1022A02D0, &stru_102149B10);
                      v29 = qword_1022A02D8;
                      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "STARK,PASCD,unexpected empty sample field", buf, 2u);
                      }
                      if (sub_1001BFF7C(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1022A02D0 != -1)
                          dispatch_once(&qword_1022A02D0, &stru_102149B10);
                        LOWORD(v32) = 0;
                        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "STARK,PASCD,unexpected empty sample field", &v32, 2, v32, v33);
                        goto LABEL_111;
                      }
                      goto LABEL_75;
                    }
                    v27 = atof(v26);
                    a1[56] = v27;
                    if (v27 > 600.0)
                    {
                      if (qword_1022A02D0 != -1)
                        dispatch_once(&qword_1022A02D0, &stru_102149B10);
                      v30 = qword_1022A02D8;
                      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "STARK,PASCD,invalid speed,above max", buf, 2u);
                      }
                      if (sub_1001BFF7C(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1022A02D0 != -1)
                          dispatch_once(&qword_1022A02D0, &stru_102149B10);
                        LOWORD(v32) = 0;
                        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "STARK,PASCD,invalid speed,above max", &v32, 2, v32, v33);
                        goto LABEL_111;
                      }
                      goto LABEL_75;
                    }
                    v23 += 2;
                    ++a1;
                    if (v24 == v23)
                      goto LABEL_76;
                  }
                  if (qword_1022A02D0 != -1)
                    dispatch_once(&qword_1022A02D0, &stru_102149B10);
                  v28 = qword_1022A02D8;
                  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "STARK,PASCD,unexpected empty timeOffset field", buf, 2u);
                  }
                  if (sub_1001BFF7C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A02D0 != -1)
                      dispatch_once(&qword_1022A02D0, &stru_102149B10);
                    LOWORD(v32) = 0;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "STARK,PASCD,unexpected empty timeOffset field", &v32, 2, v32, v33);
                    goto LABEL_111;
                  }
                  goto LABEL_75;
                }
                if (qword_1022A02D0 != -1)
                  dispatch_once(&qword_1022A02D0, &stru_102149B10);
                v15 = qword_1022A02D8;
                if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
                {
                  v16 = *((_DWORD *)a1 + 11);
                  *(_DWORD *)buf = 67109376;
                  v35 = v16;
                  v36 = 1024;
                  v37 = 50;
                  _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning STARK,PASCD,invalid sampleCount,%d,max,%d", buf, 0xEu);
                }
                if (!sub_1001BFF7C(115, 2))
                {
LABEL_75:
                  v8 = 8;
LABEL_76:
                  free(v7);
                  return v8;
                }
                bzero(buf, 0x65CuLL);
                if (qword_1022A02D0 != -1)
                  dispatch_once(&qword_1022A02D0, &stru_102149B10);
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning STARK,PASCD,invalid sampleCount,%d,max,%d", &v32);
              }
              else
              {
                if (qword_1022A02D0 != -1)
                  dispatch_once(&qword_1022A02D0, &stru_102149B10);
                v21 = qword_1022A02D8;
                if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "STARK,PASCD,sampleCount==0", buf, 2u);
                }
                if (!sub_1001BFF7C(115, 2))
                  goto LABEL_75;
                bzero(buf, 0x65CuLL);
                if (qword_1022A02D0 != -1)
                  dispatch_once(&qword_1022A02D0, &stru_102149B10);
                LOWORD(v32) = 0;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "STARK,PASCD,sampleCount==0", &v32, 2, v32, v33);
              }
            }
            else
            {
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_102149B10);
              v20 = qword_1022A02D8;
              if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "STARK,PASCD,invalid sampleCount", buf, 2u);
              }
              if (!sub_1001BFF7C(115, 2))
                goto LABEL_75;
              bzero(buf, 0x65CuLL);
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_102149B10);
              LOWORD(v32) = 0;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "STARK,PASCD,invalid sampleCount", &v32, 2, v32, v33);
            }
          }
          else
          {
            if (qword_1022A02D0 != -1)
              dispatch_once(&qword_1022A02D0, &stru_102149B10);
            v19 = qword_1022A02D8;
            if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "STARK,PASCD,invalid transmissionState", buf, 2u);
            }
            if (!sub_1001BFF7C(115, 2))
              goto LABEL_75;
            bzero(buf, 0x65CuLL);
            if (qword_1022A02D0 != -1)
              dispatch_once(&qword_1022A02D0, &stru_102149B10);
            LOWORD(v32) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "STARK,PASCD,invalid transmissionState", &v32, 2, v32, v33);
          }
        }
        else
        {
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102149B10);
          v18 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "STARK,PASCD,invalid sensorType", buf, 2u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_75;
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102149B10);
          LOWORD(v32) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "STARK,PASCD,invalid sensorType", &v32, 2, v32, v33);
        }
      }
      else
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102149B10);
        v17 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "STARK,PASCD,invalid timestamp", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_75;
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102149B10);
        LOWORD(v32) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "STARK,PASCD,invalid timestamp", &v32, 2, v32, v33);
      }
    }
    else
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102149B10);
      v9 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "STARK,PASCD,invalid fields", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_75;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102149B10);
      LOWORD(v32) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "STARK,PASCD,invalid fields", &v32, 2, v32, v33);
    }
LABEL_111:
    v31 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "CLNmeaSentenceType CLNmeaParserParseSCD(CLNmeaData *, const char *, int)", "%s\n", v10);
    if (v31 != buf)
      free(v31);
    goto LABEL_75;
  }
  return 8;
}

uint64_t sub_1006560F8(double *a1, const void *a2, int a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  int v11;
  NSObject *v12;
  int v13;
  NSObject *v14;
  NSObject *v15;
  const char **v17;
  double *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  int v24;
  uint64_t v25;
  int v26;
  const char *v27;
  NSObject *v28;
  NSObject *v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t buf[4];
  int v34;
  __int16 v35;
  int v36;
  char *v37[2];
  _OWORD v38[102];

  v6 = malloc_type_malloc(a3 + 1, 0x185ABB37uLL);
  if (v6)
  {
    v7 = v6;
    v8 = 8;
    if (!a1 || !a2)
      goto LABEL_41;
    memset(v38, 0, 496);
    *(_OWORD *)v37 = 0u;
    bzero(a1, 0x658uLL);
    memcpy(v7, a2, a3);
    *((_BYTE *)v7 + a3) = 0;
    if ((int)sub_100656F14((uint64_t)v37, 205, (char *)v7) > 2)
    {
      if (v37[0])
      {
        *a1 = atof(v37[0]);
        if (v37[1])
        {
          v11 = *v37[1];
          if ((v11 - 48) <= 9)
            v11 = atoi(v37[1]);
          *((_DWORD *)a1 + 2) = v11;
          if (*((_DWORD *)a1 + 11) <= 0x32u)
          {
            if (v11 < 1)
            {
              v8 = 5;
              goto LABEL_41;
            }
            v17 = (const char **)v38 + 1;
            v18 = a1 + 6;
            v19 = 0x500000000;
            v20 = 0x400000000;
            v21 = v11;
            while (1)
            {
              v22 = *(v17 - 1);
              if (!v22)
                break;
              *(v18 - 3) = atof(v22);
              v23 = *v17;
              if (*v17)
              {
                *(v18 - 2) = atof(*v17);
                v24 = 1;
              }
              else
              {
                v24 = 0;
              }
              *((_DWORD *)a1 + 3) = v24;
              v25 = *(uint64_t *)((char *)v37 + (v20 >> 29));
              if (v25)
              {
                *(v18 - 1) = atof(*(char **)((char *)v37 + (v20 >> 29)));
                v26 = 1;
              }
              else
              {
                v26 = 0;
              }
              *((_DWORD *)a1 + 4) = v26;
              v27 = *(char **)((char *)v37 + (v19 >> 29));
              if (v27)
              {
                *v18 = atof(v27);
                *((_DWORD *)a1 + 5) = 1;
              }
              else
              {
                *((_DWORD *)a1 + 5) = 0;
                if (!((unint64_t)v23 | v25))
                {
                  if (qword_1022A02D0 != -1)
                    dispatch_once(&qword_1022A02D0, &stru_102149B10);
                  v29 = qword_1022A02D8;
                  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "STARK,PAGCD,invalid sample set, all empty", buf, 2u);
                  }
                  if (sub_1001BFF7C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A02D0 != -1)
                      dispatch_once(&qword_1022A02D0, &stru_102149B10);
                    LOWORD(v31) = 0;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "STARK,PAGCD,invalid sample set, all empty", &v31, 2, v31, v32);
                    goto LABEL_77;
                  }
                  goto LABEL_40;
                }
              }
              v19 += 0x400000000;
              v20 += 0x400000000;
              v17 += 4;
              v18 += 4;
              v8 = 5;
              if (!--v21)
                goto LABEL_41;
            }
            if (qword_1022A02D0 != -1)
              dispatch_once(&qword_1022A02D0, &stru_102149B10);
            v28 = qword_1022A02D8;
            if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "STARK,PAGCD,invalid sample time offset", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_102149B10);
              LOWORD(v31) = 0;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "STARK,PAGCD,invalid sample time offset", &v31, 2, v31, v32);
              goto LABEL_77;
            }
LABEL_40:
            v8 = 8;
LABEL_41:
            free(v7);
            return v8;
          }
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102149B10);
          v12 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
          {
            v13 = *((_DWORD *)a1 + 11);
            *(_DWORD *)buf = 67109376;
            v34 = v13;
            v35 = 1024;
            v36 = 50;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "STARK,PAGCD,invalid sampleCount,%d,max,%d", buf, 0xEu);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_40;
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102149B10);
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "STARK,PAGCD,invalid sampleCount,%d,max,%d", &v31);
        }
        else
        {
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102149B10);
          v15 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "STARK,PAGCD,invalid sampleCount", buf, 2u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_40;
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102149B10);
          LOWORD(v31) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "STARK,PAGCD,invalid sampleCount", &v31, 2, v31, v32);
        }
      }
      else
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102149B10);
        v14 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "STARK,PAGCD,invalid timestamp", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_40;
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102149B10);
        LOWORD(v31) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "STARK,PAGCD,invalid timestamp", &v31, 2, v31, v32);
      }
    }
    else
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102149B10);
      v9 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "STARK,PAGCD,invalid fields", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_40;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102149B10);
      LOWORD(v31) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "STARK,PAGCD,invalid fields", &v31, 2, v31, v32);
    }
LABEL_77:
    v30 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "CLNmeaSentenceType CLNmeaParserParseGCD(CLNmeaData *, const char *, int)", "%s\n", v10);
    if (v30 != buf)
      free(v30);
    goto LABEL_40;
  }
  return 8;
}

uint64_t sub_100656914(CFAbsoluteTime *a1, const void *a2, int a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  int v11;
  NSObject *v12;
  NSObject *v13;
  uint8_t *v15;
  _QWORD v16[2];
  uint8_t buf[1632];
  const char *v18;
  const char *v19;
  uint64_t v20;

  v6 = malloc_type_malloc(a3 + 1, 0xB5CE28FCuLL);
  if (v6)
  {
    v7 = v6;
    v8 = 8;
    if (!a1 || !a2)
      goto LABEL_34;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    bzero(a1, 0x658uLL);
    memcpy(v7, a2, a3);
    *((_BYTE *)v7 + a3) = 0;
    if ((int)sub_100656F14((uint64_t)&v18, 3, (char *)v7) > 2)
    {
      if (v18)
      {
        a1[1] = atof(v18);
        if (v19)
        {
          v11 = *v19;
          if ((v11 - 48) <= 9)
            v11 = atoi(v19);
          if (v11 == 84)
          {
            *a1 = CFAbsoluteTimeGetCurrent();
            v8 = 7;
LABEL_34:
            free(v7);
            return v8;
          }
        }
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102149B10);
        v12 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "STARK,GPHDT,invalid degrees true indication", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
        {
LABEL_33:
          v8 = 8;
          goto LABEL_34;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102149B10);
        LOWORD(v16[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "STARK,GPHDT,invalid degrees true indication", v16, 2, v16[0]);
      }
      else
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102149B10);
        v13 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "STARK,GPHDT,invalid heading", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_33;
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102149B10);
        LOWORD(v16[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "STARK,GPHDT,invalid heading", v16, 2, v16[0]);
      }
    }
    else
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102149B10);
      v9 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "STARK,GPHDT,invalid fields", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_33;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102149B10);
      LOWORD(v16[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "STARK,GPHDT,invalid fields", v16, 2, v16[0]);
    }
    v15 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "CLNmeaSentenceType CLNmeaParserParseHDT(CLNmeaData *, const char *, int)", "%s\n", v10);
    if (v15 != buf)
      free(v15);
    goto LABEL_33;
  }
  return 8;
}

uint64_t sub_100656D1C(uint64_t a1, int a2)
{
  char v2;
  char *v3;
  uint64_t v4;
  char v5;

  if (a2 < 5)
  {
    return 0;
  }
  else
  {
    v2 = 0;
    v3 = (char *)(a1 + 1);
    v4 = (a2 - 3) - 1;
    do
    {
      v5 = *v3++;
      v2 ^= v5;
      --v4;
    }
    while (v4);
  }
  return v2;
}

BOOL sub_100656D54(uint64_t a1, int a2)
{
  unsigned int v4;
  uint64_t v5;
  char *v6;
  char v7;
  char __s1[3];

  if (a2 < 5)
  {
    v4 = 0;
  }
  else
  {
    LOBYTE(v4) = 0;
    v5 = (a2 - 3) - 1;
    v6 = (char *)(a1 + 1);
    do
    {
      v7 = *v6++;
      LOBYTE(v4) = v7 ^ v4;
      --v5;
    }
    while (v5);
    v4 = v4;
  }
  __sprintf_chk(__s1, 0, 3uLL, "%X%X", v4 >> 4, v4 & 0xF);
  return strncmp(__s1, (const char *)(a1 + a2 - 2), 2uLL) == 0;
}

unint64_t sub_100656DF0(unint64_t *a1, unint64_t *a2, char *__s, int a4)
{
  uint64_t v7;
  unint64_t result;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  char *v13;

  v7 = a4;
  result = (unint64_t)memchr(__s, 36, a4);
  *a1 = result;
  if (result)
  {
    v9 = &__s[v7];
    result = (unint64_t)memchr((void *)(result + 1), 42, (size_t)&v9[~result]);
    *a2 = result;
    if (result)
    {
      v10 = result + 2;
      if (result + 2 >= (unint64_t)v9)
      {
        return 0;
      }
      else
      {
        *a2 = v10;
        v11 = *a1;
        v12 = (void *)(*a1 + 1);
        while ((unint64_t)v12 < v10)
        {
          v13 = (char *)memchr(v12, 36, v10 - (_QWORD)v12 + 1);
          if (!v13)
            break;
          LODWORD(v11) = (_DWORD)v13;
          *a1 = (unint64_t)v13;
          v12 = v13 + 1;
          v10 = *a2;
        }
        return (v10 - v11 + 1);
      }
    }
  }
  return result;
}

BOOL sub_100656EB4(const char *a1)
{
  return strlen(a1) == 3 && __tolower(*a1) == 110 && __tolower(a1[1]) == 97 && __tolower(a1[2]) == 110;
}

uint64_t sub_100656F14(uint64_t a1, int a2, char *__str)
{
  char *v6;
  int v7;
  int v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  char *v22;
  NSObject *v23;
  const char *v25;
  uint8_t *v26;
  const char *v27;
  int v28;
  _DWORD v29[2];
  __int16 v30;
  char *v31;
  uint8_t buf[4];
  int v33;
  __int16 v34;
  char *v35;

  v6 = strtok(__str, ",*");
  if (!v6)
    return 0;
  v7 = (int)v6;
  v8 = strlen(v6);
  v9 = strtok(0, ",*");
  v10 = 0;
  if (v9)
  {
    v11 = (a2 - 1);
    if (a2 >= 1)
    {
      v12 = v9;
      LODWORD(v10) = 0;
      v13 = v7 + v8;
      v28 = a2 - 2;
      while (1)
      {
        v14 = ~v13 + (_DWORD)v12;
        v15 = v14 >= 1 && (int)v10 < (int)v11;
        if (v15)
        {
          v16 = (_DWORD)v12 - v13;
          v17 = (v16 - 2);
          if ((v28 - v10) >= v17)
            v18 = (v16 - 2);
          else
            v18 = (v28 - v10);
          bzero((void *)(a1 + 8 * (int)v10), 8 * v18 + 8);
          v19 = (int)v10 + 1;
          v20 = v11 - 1 - (int)v10;
          if (v20 >= v17)
            LODWORD(v20) = v17;
          LODWORD(v10) = v10 + v20 + 1;
          do
          {
            if (v14 < 2)
              break;
            --v14;
            v15 = v19++ < v11;
          }
          while (v15);
        }
        *(_QWORD *)(a1 + 8 * (int)v10) = v12;
        if (sub_100656EB4(v12))
          break;
        v10 = (v10 + 1);
        v21 = strlen(v12);
        v22 = strtok(0, ",*");
        if (v22)
        {
          v13 = (_DWORD)v12 + v21;
          v12 = v22;
          if ((int)v10 < a2)
            continue;
        }
        return v10;
      }
      if (qword_1022A0110 != -1)
        dispatch_once(&qword_1022A0110, &stru_102149A90);
      v23 = qword_1022A0118;
      if (os_log_type_enabled((os_log_t)qword_1022A0118, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109378;
        v33 = 0;
        v34 = 2080;
        v35 = __str;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "Field,%d,received with NAN, rejecting, %s", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0110 != -1)
          dispatch_once(&qword_1022A0110, &stru_102149A90);
        v29[0] = 67109378;
        v29[1] = 0;
        v30 = 2080;
        v31 = __str;
        LODWORD(v27) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0118, 2, "Field,%d,received with NAN, rejecting, %s", v29, v27);
        v26 = (uint8_t *)v25;
        sub_100512490("Generic", 1, 0, 2, "int CLNmeaParserGetFields(char **, int, char *, int)", "%s\n", v25);
        if (v26 != buf)
          free(v26);
      }
      return 0;
    }
  }
  return v10;
}

uint64_t sub_100657218(int *a1, char *a2)
{
  uint64_t result;
  double v4;
  int v5;

  result = 0;
  if (a1 && a2)
  {
    if (*a2)
    {
      v4 = atof(a2);
      v5 = (int)(floor(v4) + 0.5);
      *a1 = v5 / 10000;
      a1[1] = v5 / 100 % 100;
      *(float *)&v4 = v4 - (double)v5 + (float)(v5 % 100);
      a1[2] = LODWORD(v4);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1006572D8(uint64_t a1, char *a2, _BYTE *a3)
{
  uint64_t result;
  double v6;
  int v7;

  result = 0;
  if (a1 && a2 && a3)
  {
    if (*a2 && *a3)
    {
      v6 = atof(a2);
      result = 0;
      *(_DWORD *)a1 = (int)v6 / 100;
      *(_DWORD *)(a1 + 4) = (int)v6 % 100;
      *(double *)(a1 + 8) = (v6 - (double)(int)v6) * 60.0;
      v7 = (char)*a3;
      if ((v7 - 69) <= 0x12 && ((1 << (v7 - 69)) & 0x44201) != 0)
      {
        *(_DWORD *)(a1 + 16) = v7;
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

double sub_10065739C(uint64_t a1)
{
  double v1;

  v1 = *(double *)(a1 + 8) + (double)(3600 * *(_DWORD *)a1 + 60 * *(_DWORD *)(a1 + 4));
  if ((*(_DWORD *)(a1 + 16) | 4) == 0x57)
    v1 = 0.0 - v1;
  return v1 / 3600.0;
}

uint64_t sub_1006573E4(int *a1, char *a2, const char *a3, const char *a4, const char *a5)
{
  int v9;
  int v10;
  int v11;
  int v12;

  if (a2)
    v9 = atoi(a2);
  else
    v9 = -1;
  *a1 = v9;
  if (a3)
    v10 = atoi(a3);
  else
    v10 = -1;
  a1[1] = v10;
  if (a4)
    v11 = atoi(a4);
  else
    v11 = -1;
  a1[2] = v11;
  if (a5)
    v12 = atoi(a5);
  else
    v12 = -1;
  a1[3] = v12;
  return 1;
}

uint64_t sub_100657478(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(a1 + 96) & a2;
}

uint64_t sub_100657484(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v6;
  const char *v7;
  size_t v8;

  v6 = 0;
  v7 = "$GPGGA";
  while (1)
  {
    v8 = strlen(v7);
    if (!strncmp(v7, a2, v8))
      break;
    v7 = (&off_1021499F0)[v6 + 2];
    v6 += 2;
    if (v6 == 14)
      return 8;
  }
  return ((uint64_t (*)(uint64_t, const char *, uint64_t))(&off_1021499F0)[v6 + 1])(a1, a2, a3);
}

void sub_100657528(id a1)
{
  qword_1022A0118 = (uint64_t)os_log_create("com.apple.locationd.Position", "NMEA");
}

void sub_100657554(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100657580(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

id sub_1006575AC(void *a1, uint64_t a2)
{
  id result;
  std::string v5;
  std::string v6;
  std::string v7;
  std::string v8;
  std::string v9;
  std::string v10;
  std::string __str;

  sub_100657848(a2);
  if (objc_msgSend(a1, "manufacturer"))
  {
    sub_1015A2E04(&__str, (char *)objc_msgSend(objc_msgSend(a1, "manufacturer"), "UTF8String"));
    std::string::operator=((std::string *)a2, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (objc_msgSend(a1, "name"))
  {
    sub_1015A2E04(&v10, (char *)objc_msgSend(objc_msgSend(a1, "name"), "UTF8String"));
    std::string::operator=((std::string *)(a2 + 24), &v10);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (objc_msgSend(a1, "modelNumber"))
  {
    sub_1015A2E04(&v9, (char *)objc_msgSend(objc_msgSend(a1, "modelNumber"), "UTF8String"));
    std::string::operator=((std::string *)(a2 + 48), &v9);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (objc_msgSend(a1, "serialNumber"))
  {
    sub_1015A2E04(&v8, (char *)objc_msgSend(objc_msgSend(a1, "serialNumber"), "UTF8String"));
    std::string::operator=((std::string *)(a2 + 72), &v8);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (objc_msgSend(a1, "firmwareRevision"))
  {
    sub_1015A2E04(&v7, (char *)objc_msgSend(objc_msgSend(a1, "firmwareRevision"), "UTF8String"));
    std::string::operator=((std::string *)(a2 + 96), &v7);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (objc_msgSend(a1, "hardwareRevision"))
  {
    sub_1015A2E04(&v6, (char *)objc_msgSend(objc_msgSend(a1, "hardwareRevision"), "UTF8String"));
    std::string::operator=((std::string *)(a2 + 120), &v6);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (objc_msgSend(a1, "ppid"))
  {
    sub_1015A2E04(&v5, (char *)objc_msgSend(objc_msgSend(a1, "ppid"), "UTF8String"));
    std::string::operator=((std::string *)(a2 + 144), &v5);
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v5.__r_.__value_.__l.__data_);
  }
  *(_WORD *)(a2 + 168) = 256;
  result = objc_msgSend(a1, "supportsCarPlay");
  *(_BYTE *)(a2 + 170) = (_BYTE)result;
  return result;
}

void sub_1006577B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_100657848(uint64_t a1)
{
  void *v1[2];
  void *v2[2];
  __int128 v3;
  void *v4[2];
  void *v5[2];
  __int128 v6;
  void *v7[2];
  void *v8[2];
  __int128 v9;
  void *__p[2];
  __int128 v11;

  *(_OWORD *)__p = 0u;
  v11 = 0u;
  *(_OWORD *)v8 = 0u;
  v9 = 0u;
  v6 = 0u;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)v2 = 0u;
  v3 = 0u;
  *(_OWORD *)v1 = 0u;
  *(_WORD *)((char *)&v11 + 9) = 257;
  sub_10065C560(a1, (__int128 *)v1);
  if (SBYTE7(v11) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[1]);
  if (SHIBYTE(v8[0]) < 0)
    operator delete(v7[0]);
  if (SHIBYTE(v6) < 0)
    operator delete(v5[1]);
  if (SHIBYTE(v5[0]) < 0)
    operator delete(v4[0]);
  if (SHIBYTE(v3) < 0)
    operator delete(v2[1]);
  if (SHIBYTE(v2[0]) < 0)
    operator delete(v1[0]);
}

void sub_100657D64(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void (*v4)(uint64_t, void **);
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  void (*v10)(uint64_t, void **);
  uint64_t v11;
  NSArray *v12;
  NSObject *v13;
  _BYTE *v14;
  int v15;
  void **v16;
  NSUInteger v17;
  void **v18;
  NSObject *v19;
  int v20;
  void **v21;
  int v22;
  void **v23;
  int v24;
  void **v25;
  unsigned int v26;
  void **v27;
  void **v28;
  void **v29;
  void **v30;
  void **v31;
  void **v32;
  id v33;
  uint64_t v34;
  void *i;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, void **, uint64_t);
  uint64_t v40;
  void **v41;
  int v42;
  void **v43;
  NSUInteger v44;
  void **v45;
  char *v46;
  char *v47;
  void **v48;
  int v49;
  void **v50;
  int v51;
  void **v52;
  int v53;
  void **v54;
  unsigned int v55;
  void **v56;
  void **v57;
  void **v58;
  void **v59;
  void **v60;
  void **v61;
  const char *v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  void **v66;
  int v67;
  int v68;
  void **v69;
  void **v70;
  int v71;
  int v72;
  void **v73;
  void **v74;
  int v75;
  int v76;
  uint64_t v77;
  void *__dst[2];
  char v79;
  void *v80;
  char v81;
  void *v82;
  char v83;
  void *v84;
  char v85;
  void *v86;
  char v87;
  void *v88;
  char v89;
  void *__p;
  char v91;
  void *v92[2];
  char v93;
  void *v94;
  char v95;
  void *v96;
  char v97;
  void *v98;
  char v99;
  void *v100;
  char v101;
  void *v102;
  char v103;
  void *v104;
  char v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  void *v110[2];
  char v111;
  void *v112[2];
  char v113;
  void *v114[2];
  char v115;
  void *v116;
  char v117;
  void *v118;
  char v119;
  void *v120;
  char v121;
  void *v122;
  char v123;
  void *v124;
  char v125;
  void *v126;
  char v127;
  void *v128[2];
  void *v129[2];
  __int128 v130;
  void *v131[2];
  void *v132[2];
  __int128 v133;
  void *v134[2];
  void *v135[2];
  __int128 v136;
  _BYTE v137[25];
  __int16 v138;
  _BYTE v139[128];
  _BYTE v140[12];
  __int16 v141;
  void **v142;
  __int16 v143;
  void **v144;
  __int16 v145;
  void **v146;
  __int16 v147;
  void **v148;
  __int16 v149;
  void **v150;
  __int16 v151;
  unsigned int v152;
  uint8_t buf[64];
  void *v154[2];
  __int128 v155;
  void *v156[2];
  void *v157[2];
  __int128 v158;
  _BYTE v159[25];
  __int16 v160;

  v2 = *(void **)(a1 + 32);
  if (v2 == *(void **)(*(_QWORD *)(a1 + 40) + 8))
  {
    v136 = 0uLL;
    memset(v137, 0, sizeof(v137));
    *(_OWORD *)v134 = 0uLL;
    *(_OWORD *)v135 = 0uLL;
    *(_OWORD *)v132 = 0uLL;
    v133 = 0uLL;
    v130 = 0uLL;
    *(_OWORD *)v131 = 0uLL;
    *(_OWORD *)v128 = 0uLL;
    *(_OWORD *)v129 = 0uLL;
    v138 = 257;
    sub_1006575AC(v2, (uint64_t)v128);
    v9 = *(_QWORD *)(a1 + 40);
    v10 = *(void (**)(uint64_t, void **))(v9 + 32);
    v11 = *(_QWORD *)(v9 + 16);
    sub_10065C70C((char *)v114, (__int128 *)v128);
    v10(v11, v114);
    if (v127 < 0)
      operator delete(v126);
    if (v125 < 0)
      operator delete(v124);
    if (v123 < 0)
      operator delete(v122);
    if (v121 < 0)
      operator delete(v120);
    if (v119 < 0)
      operator delete(v118);
    if (v117 < 0)
      operator delete(v116);
    if (v115 < 0)
      operator delete(v114[0]);

    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) = 0;
    v12 = -[EAAccessoryManager connectedAccessories](+[EAAccessoryManager sharedAccessoryManager](EAAccessoryManager, "sharedAccessoryManager"), "connectedAccessories");
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102149B70);
    v13 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v14 = v140;
      sub_1001A486C((const __CFString *)objc_msgSend(*(id *)(a1 + 32), "manufacturer"), (uint64_t)v140);
      if (v143 < 0)
        v14 = *(_BYTE **)v140;
      sub_1001A486C((const __CFString *)objc_msgSend(*(id *)(a1 + 32), "modelNumber"), (uint64_t)v112);
      v15 = v113;
      v16 = (void **)v112[0];
      v17 = -[NSArray count](v12, "count");
      v18 = v112;
      *(_DWORD *)buf = 136315650;
      if (v15 < 0)
        v18 = v16;
      *(_QWORD *)&buf[4] = v14;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v18;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v17;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "@ClxAccessory, state, 0, model, %s, %s, count, %lu", buf, 0x20u);
      if (v113 < 0)
        operator delete(v112[0]);
      if (SHIBYTE(v143) < 0)
        operator delete(*(void **)v140);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102149B70);
      v40 = qword_1022A0048;
      v41 = v112;
      sub_1001A486C((const __CFString *)objc_msgSend(*(id *)(a1 + 32), "manufacturer"), (uint64_t)v112);
      if (v113 < 0)
        v41 = (void **)v112[0];
      sub_1001A486C((const __CFString *)objc_msgSend(*(id *)(a1 + 32), "modelNumber"), (uint64_t)v110);
      v42 = v111;
      v43 = (void **)v110[0];
      v44 = -[NSArray count](v12, "count");
      v45 = v110;
      *(_DWORD *)v140 = 136315650;
      if (v42 < 0)
        v45 = v43;
      *(_QWORD *)&v140[4] = v41;
      v141 = 2080;
      v142 = v45;
      v143 = 2048;
      v144 = (void **)v44;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v40, 0, "@ClxAccessory, state, 0, model, %s, %s, count, %lu", v140, 32, v65);
      v47 = v46;
      if (v111 < 0)
        operator delete(v110[0]);
      if (v113 < 0)
        operator delete(v112[0]);
      sub_100512490("Generic", 1, 0, 2, "-[CLAccessoryObserver accessoryDidDisconnect:]_block_invoke", "%s\n", v47);
      if (v47 != (char *)buf)
        free(v47);
    }
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_102149B50);
    v19 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEFAULT))
    {
      v76 = SHIBYTE(v129[0]);
      v74 = (void **)v128[0];
      v72 = SHIBYTE(v132[0]);
      v70 = (void **)v131[0];
      v68 = SHIBYTE(v130);
      v66 = (void **)v129[1];
      v20 = SHIBYTE(v133);
      v21 = (void **)v132[1];
      v22 = SHIBYTE(v135[0]);
      v23 = (void **)v134[0];
      v24 = SHIBYTE(v136);
      v25 = (void **)v135[1];
      v26 = -[NSArray count](v12, "count");
      v27 = v128;
      v28 = v131;
      v29 = &v129[1];
      v30 = &v132[1];
      v31 = v134;
      v32 = &v135[1];
      if (v24 < 0)
        v32 = v25;
      *(_DWORD *)buf = 136382211;
      if (v22 < 0)
        v31 = v23;
      if (v20 < 0)
        v30 = v21;
      if (v68 < 0)
        v29 = v66;
      if (v72 < 0)
        v28 = v70;
      if (v76 < 0)
        v27 = v74;
      *(_QWORD *)&buf[4] = v27;
      *(_WORD *)&buf[12] = 2081;
      *(_QWORD *)&buf[14] = v28;
      *(_WORD *)&buf[22] = 2081;
      *(_QWORD *)&buf[24] = v29;
      *(_WORD *)&buf[32] = 2081;
      *(_QWORD *)&buf[34] = v30;
      *(_WORD *)&buf[42] = 2081;
      *(_QWORD *)&buf[44] = v31;
      *(_WORD *)&buf[52] = 2081;
      *(_QWORD *)&buf[54] = v32;
      *(_WORD *)&buf[62] = 1025;
      LODWORD(v154[0]) = v26;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "AccessoryObserver,Accessory disconnected,%{private}s,model,%{private}s,name,%{private}s,serial,%{private}s,fw,%{private}s,hw,%{private}s,connected,%{private}d", buf, 0x44u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_102149B50);
      v77 = qword_1022A0008;
      v75 = SHIBYTE(v129[0]);
      v73 = (void **)v128[0];
      v71 = SHIBYTE(v132[0]);
      v69 = (void **)v131[0];
      v67 = SHIBYTE(v130);
      v48 = (void **)v129[1];
      v49 = SHIBYTE(v133);
      v50 = (void **)v132[1];
      v51 = SHIBYTE(v135[0]);
      v52 = (void **)v134[0];
      v53 = SHIBYTE(v136);
      v54 = (void **)v135[1];
      v55 = -[NSArray count](v12, "count");
      v56 = v128;
      v57 = v131;
      v58 = &v129[1];
      v59 = &v132[1];
      v60 = v134;
      v61 = &v135[1];
      if (v53 < 0)
        v61 = v54;
      *(_DWORD *)v140 = 136382211;
      if (v51 < 0)
        v60 = v52;
      if (v49 < 0)
        v59 = v50;
      if (v67 < 0)
        v58 = v48;
      if (v71 < 0)
        v57 = v69;
      if (v75 < 0)
        v56 = v73;
      *(_QWORD *)&v140[4] = v56;
      v141 = 2081;
      v142 = v57;
      v143 = 2081;
      v144 = v58;
      v145 = 2081;
      v146 = v59;
      v147 = 2081;
      v148 = v60;
      v149 = 2081;
      v150 = v61;
      v151 = 1025;
      v152 = v55;
      LODWORD(v64) = 68;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v77, 0, "AccessoryObserver,Accessory disconnected,%{private}s,model,%{private}s,name,%{private}s,serial,%{private}s,fw,%{private}s,hw,%{private}s,connected,%{private}d", COERCE_DOUBLE(136382211), v140, v64);
      v63 = (uint8_t *)v62;
      sub_100512490("Generic", 1, 0, 2, "-[CLAccessoryObserver accessoryDidDisconnect:]_block_invoke", "%s\n", v62);
      if (v63 != buf)
        free(v63);
    }
    v108 = 0u;
    v109 = 0u;
    v106 = 0u;
    v107 = 0u;
    v33 = -[NSArray countByEnumeratingWithState:objects:count:](v12, "countByEnumeratingWithState:objects:count:", &v106, v139, 16);
    if (v33)
    {
      v34 = *(_QWORD *)v107;
      do
      {
        for (i = 0; i != v33; i = (char *)i + 1)
        {
          if (*(_QWORD *)v107 != v34)
            objc_enumerationMutation(v12);
          v36 = *(void **)(*((_QWORD *)&v106 + 1) + 8 * (_QWORD)i);
          if (objc_msgSend(*(id *)(a1 + 40), "setupAccessory:withListenerCall:", v36, 1))
          {
            memset(v159, 0, sizeof(v159));
            v158 = 0u;
            *(_OWORD *)v157 = 0u;
            *(_OWORD *)v156 = 0u;
            v155 = 0u;
            *(_OWORD *)v154 = 0u;
            memset(buf, 0, sizeof(buf));
            v160 = 257;
            sub_1006575AC(v36, (uint64_t)buf);
            v37 = *(_QWORD *)(a1 + 40);
            v38 = *(_QWORD *)(v37 + 16);
            v39 = *(void (**)(uint64_t, void **, uint64_t))(v37 + 24);
            sub_10065C70C((char *)v92, (__int128 *)buf);
            v39(v38, v92, 1);
            if (v105 < 0)
              operator delete(v104);
            if (v103 < 0)
              operator delete(v102);
            if (v101 < 0)
              operator delete(v100);
            if (v99 < 0)
              operator delete(v98);
            if (v97 < 0)
              operator delete(v96);
            if (v95 < 0)
              operator delete(v94);
            if (v93 < 0)
              operator delete(v92[0]);
            if ((v159[23] & 0x80000000) != 0)
              operator delete(*(void **)v159);
            if (SHIBYTE(v158) < 0)
              operator delete(v157[1]);
            if (SHIBYTE(v157[0]) < 0)
              operator delete(v156[0]);
            if (SHIBYTE(v155) < 0)
              operator delete(v154[1]);
            if (SHIBYTE(v154[0]) < 0)
              operator delete(*(void **)&buf[48]);
            if ((char)buf[47] < 0)
              operator delete(*(void **)&buf[24]);
            if ((char)buf[23] < 0)
              operator delete(*(void **)buf);
          }
        }
        v33 = -[NSArray countByEnumeratingWithState:objects:count:](v12, "countByEnumeratingWithState:objects:count:", &v106, v139, 16);
      }
      while (v33);
    }
  }
  else
  {
    v136 = 0uLL;
    memset(v137, 0, sizeof(v137));
    *(_OWORD *)v134 = 0uLL;
    *(_OWORD *)v135 = 0uLL;
    *(_OWORD *)v132 = 0uLL;
    v133 = 0uLL;
    v130 = 0uLL;
    *(_OWORD *)v131 = 0uLL;
    *(_OWORD *)v128 = 0uLL;
    *(_OWORD *)v129 = 0uLL;
    v138 = 257;
    sub_1006575AC(v2, (uint64_t)v128);
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(void (**)(uint64_t, void **))(v3 + 32);
    v5 = *(_QWORD *)(v3 + 16);
    sub_10065C70C((char *)__dst, (__int128 *)v128);
    v4(v5, __dst);
    if (v91 < 0)
      operator delete(__p);
    if (v89 < 0)
      operator delete(v88);
    if (v87 < 0)
      operator delete(v86);
    if (v85 < 0)
      operator delete(v84);
    if (v83 < 0)
      operator delete(v82);
    if (v81 < 0)
      operator delete(v80);
    if (v79 < 0)
      operator delete(__dst[0]);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_102149B50);
    v6 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "AccessoryObserver,unknown accessory disconnceted", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_102149B50);
      *(_WORD *)v140 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "AccessoryObserver,unknown accessory disconnceted", v140, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "-[CLAccessoryObserver accessoryDidDisconnect:]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  if ((v137[23] & 0x80000000) != 0)
    operator delete(*(void **)v137);
  if (SHIBYTE(v136) < 0)
    operator delete(v135[1]);
  if (SHIBYTE(v135[0]) < 0)
    operator delete(v134[0]);
  if (SHIBYTE(v133) < 0)
    operator delete(v132[1]);
  if (SHIBYTE(v132[0]) < 0)
    operator delete(v131[0]);
  if (SHIBYTE(v130) < 0)
    operator delete(v129[1]);
  if (SHIBYTE(v129[0]) < 0)
    operator delete(v128[0]);
}

void sub_100658888(_Unwind_Exception *a1)
{
  sub_10065C930((uint64_t)&STACK[0x2C0]);
  _Unwind_Resume(a1);
}

void sub_10065A540(_Unwind_Exception *a1)
{
  sub_10065C930((uint64_t)&STACK[0x2F0]);
  _Unwind_Resume(a1);
}

void sub_10065A628(uint64_t *a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  int v24;
  int v25;
  const char *v26;
  uint8_t *v27;
  int v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t *v31;
  __int16 v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD *v35;
  __int16 v36;
  _QWORD *v37;
  __int16 v38;
  _QWORD *v39;
  __int16 v40;
  _QWORD *v41;
  __int16 v42;
  _QWORD *v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  uint8_t buf[4];
  uint64_t *v51;
  __int16 v52;
  uint64_t *v53;
  __int16 v54;
  _QWORD *v55;
  __int16 v56;
  _QWORD *v57;
  __int16 v58;
  _QWORD *v59;
  __int16 v60;
  _QWORD *v61;
  __int16 v62;
  _QWORD *v63;
  __int16 v64;
  _QWORD *v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;

  if (qword_1022A0000 != -1)
    dispatch_once(&qword_1022A0000, &stru_102149B50);
  v4 = qword_1022A0008;
  if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a2;
    if (*((char *)a2 + 23) < 0)
      v5 = (uint64_t *)*a2;
    v6 = a1;
    if (*((char *)a1 + 23) < 0)
      v6 = (uint64_t *)*a1;
    v7 = a1 + 3;
    if (*((char *)a1 + 47) < 0)
      v7 = (_QWORD *)*v7;
    v8 = a1 + 6;
    if (*((char *)a1 + 71) < 0)
      v8 = (_QWORD *)*v8;
    v9 = a1 + 9;
    if (*((char *)a1 + 95) < 0)
      v9 = (_QWORD *)*v9;
    v10 = a1 + 12;
    if (*((char *)a1 + 119) < 0)
      v10 = (_QWORD *)*v10;
    v11 = a1 + 15;
    if (*((char *)a1 + 143) < 0)
      v11 = (_QWORD *)*v11;
    v12 = a1 + 18;
    if (*((char *)a1 + 167) < 0)
      v12 = (_QWORD *)*v12;
    v13 = *((unsigned __int8 *)a1 + 168);
    v14 = *((unsigned __int8 *)a1 + 170);
    v15 = *((unsigned __int8 *)a1 + 169);
    *(_DWORD *)buf = 136317699;
    v51 = v5;
    v52 = 2081;
    v53 = v6;
    v54 = 2081;
    v55 = v7;
    v56 = 2081;
    v57 = v8;
    v58 = 2081;
    v59 = v9;
    v60 = 2081;
    v61 = v10;
    v62 = 2081;
    v63 = v11;
    v64 = 2081;
    v65 = v12;
    v66 = 1026;
    v67 = v13;
    v68 = 1026;
    v69 = v14;
    v70 = 1026;
    v71 = v15;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s,manufacturer,%{private}s,name,%{private}s,model,%{private}s,serial,%{private}s,fw,%{private}s,hw,%{private}s,ppid,%{private}s,onDenyList,%{public}d,supportsCarPlay,%{public}d,supportsLocation,%{public}d", buf, 0x64u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_102149B50);
    if (*((char *)a2 + 23) < 0)
      a2 = (uint64_t *)*a2;
    v16 = a1;
    if (*((char *)a1 + 23) < 0)
      v16 = (uint64_t *)*a1;
    v17 = a1 + 3;
    if (*((char *)a1 + 47) < 0)
      v17 = (_QWORD *)*v17;
    v18 = a1 + 6;
    if (*((char *)a1 + 71) < 0)
      v18 = (_QWORD *)*v18;
    v19 = a1 + 9;
    if (*((char *)a1 + 95) < 0)
      v19 = (_QWORD *)*v19;
    v20 = a1 + 12;
    if (*((char *)a1 + 119) < 0)
      v20 = (_QWORD *)*v20;
    v21 = a1 + 15;
    if (*((char *)a1 + 143) < 0)
      v21 = (_QWORD *)*v21;
    v22 = a1 + 18;
    if (*((char *)a1 + 167) < 0)
      v22 = (_QWORD *)*v22;
    v23 = *((unsigned __int8 *)a1 + 168);
    v24 = *((unsigned __int8 *)a1 + 170);
    v25 = *((unsigned __int8 *)a1 + 169);
    v28 = 136317699;
    v29 = a2;
    v30 = 2081;
    v31 = v16;
    v32 = 2081;
    v33 = v17;
    v34 = 2081;
    v35 = v18;
    v36 = 2081;
    v37 = v19;
    v38 = 2081;
    v39 = v20;
    v40 = 2081;
    v41 = v21;
    v42 = 2081;
    v43 = v22;
    v44 = 1026;
    v45 = v23;
    v46 = 1026;
    v47 = v24;
    v48 = 1026;
    v49 = v25;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 0, "%s,manufacturer,%{private}s,name,%{private}s,model,%{private}s,serial,%{private}s,fw,%{private}s,hw,%{private}s,ppid,%{private}s,onDenyList,%{public}d,supportsCarPlay,%{public}d,supportsLocation,%{public}d", &v28, 100);
    v27 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 2, "void CLAccessoryUtils::CLAccessoryInfo::log(std::string) const", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
}

void sub_10065AEC8(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, void **, uint64_t);
  void *v7[2];
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *__p;
  char v20;
  void *v21[2];
  void *v22[2];
  __int128 v23;
  void *v24[2];
  void *v25[2];
  __int128 v26;
  void *v27[2];
  void *v28[2];
  __int128 v29;
  _BYTE v30[25];
  __int16 v31;

  v2 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "userInfo"), "objectForKey:", EAAccessoryKey);
  v3 = v2;
  if (objc_msgSend(*(id *)(a1 + 40), "setupAccessory:withListenerCall:", v2, 1))
  {
    v29 = 0u;
    memset(v30, 0, sizeof(v30));
    *(_OWORD *)v27 = 0u;
    *(_OWORD *)v28 = 0u;
    *(_OWORD *)v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    *(_OWORD *)v24 = 0u;
    *(_OWORD *)v21 = 0u;
    *(_OWORD *)v22 = 0u;
    v31 = 257;
    sub_1006575AC(v2, (uint64_t)v21);
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(v4 + 16);
    v6 = *(void (**)(uint64_t, void **, uint64_t))(v4 + 24);
    sub_10065C70C((char *)v7, (__int128 *)v21);
    v6(v5, v7, 1);
    if (v20 < 0)
      operator delete(__p);
    if (v18 < 0)
      operator delete(v17);
    if (v16 < 0)
      operator delete(v15);
    if (v14 < 0)
      operator delete(v13);
    if (v12 < 0)
      operator delete(v11);
    if (v10 < 0)
      operator delete(v9);
    if (v8 < 0)
      operator delete(v7[0]);
    if ((v30[23] & 0x80000000) != 0)
      operator delete(*(void **)v30);
    if (SHIBYTE(v29) < 0)
      operator delete(v28[1]);
    if (SHIBYTE(v28[0]) < 0)
      operator delete(v27[0]);
    if (SHIBYTE(v26) < 0)
      operator delete(v25[1]);
    if (SHIBYTE(v25[0]) < 0)
      operator delete(v24[0]);
    if (SHIBYTE(v23) < 0)
      operator delete(v22[1]);
    if (SHIBYTE(v22[0]) < 0)
      operator delete(v21[0]);
  }

}

void sub_10065B064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_10065C930((uint64_t)&a9);
  sub_10065C930((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_10065B098(id a1)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (qword_1022A0000 != -1)
    dispatch_once(&qword_1022A0000, &stru_102149B50);
  v1 = qword_1022A0008;
  if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "accessory disconnected, no action taken", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_102149B50);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "accessory disconnected, no action taken", v4, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 2, "-[CLAccessoryObserver accessoryDisconnected:]_block_invoke", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
}

void sub_10065B274(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  _QWORD v11[2];
  uint8_t buf[1632];

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  if (v2)
  {
    v11[0] = 0;
    if (objc_msgSend(v2, "accessoryHasNMEASentencesAvailable"))
    {
      do
      {
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "getNMEASentence:", v11);
        if (v11[0])
        {
          (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
        }
        else
        {
          if (qword_1022A0000 != -1)
            dispatch_once(&qword_1022A0000, &stru_102149B50);
          v3 = qword_1022A0008;
          if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "nmea data is null", buf, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0000 != -1)
              dispatch_once(&qword_1022A0000, &stru_102149B50);
            v10[0] = 0;
            LODWORD(v9) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 17, "nmea data is null", v10, v9);
            v5 = (uint8_t *)v4;
            sub_100512490("Generic", 1, 0, 0, "-[CLAccessoryObserver nmeaReceived:]_block_invoke", "%s\n", v4);
            if (v5 != buf)
              free(v5);
          }
        }
      }
      while ((objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "accessoryHasNMEASentencesAvailable") & 1) != 0);
    }
  }
  else
  {
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_102149B50);
    v6 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "no location accessory available", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_102149B50);
      LOWORD(v11[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "no location accessory available", v11, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "-[CLAccessoryObserver nmeaReceived:]_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
}

uint64_t sub_10065B600(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 32) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
}

uint64_t sub_10065B668(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 32) + 56))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
}

void sub_10065B6D0(uint64_t a1)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if ((objc_msgSend(*(id *)(a1 + 32), "setupEphemeris") & 1) == 0)
  {
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_102149B50);
    v1 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "could not get ephemeris url", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_102149B50);
      v4[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 17, "could not get ephemeris url", v4, 2);
      v3 = (uint8_t *)v2;
      sub_100512490("Generic", 1, 0, 0, "-[CLAccessoryObserver ephemerisURLRequested:]_block_invoke", "%s\n", v2);
      if (v3 != buf)
        free(v3);
    }
  }
}

void sub_10065B8B8(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  double v5;
  double v6;
  id v7;
  double v8;
  double v9;
  NSObject *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  double v15;
  NSObject *v16;
  double v17;
  uint8_t *v18;
  uint8_t *v19;
  NSObject *v20;
  NSObject *v21;
  double v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;
  uint8_t buf[4];
  uint64_t v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;

  v2 = objc_msgSend(*(id *)(a1 + 32), "userInfo");
  if (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8))
  {
    v3 = v2;
    v4 = objc_msgSend(v2, "objectForKey:", EATimeSyncInfoOffsetEstimate);
    if (v4)
    {
      objc_msgSend(v4, "doubleValue");
      v6 = v5;
      v7 = objc_msgSend(v3, "objectForKey:", EATimeSyncInfoOffsetUncertainty);
      if (v7)
      {
        objc_msgSend(v7, "doubleValue");
        if (qword_1022A0000 != -1)
        {
          v22 = v8;
          dispatch_once(&qword_1022A0000, &stru_102149B50);
          v8 = v22;
        }
        v9 = v6 / 1000.0;
        v10 = qword_1022A0008;
        v11 = v8 / 1000.0;
        if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
        {
          v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          *(_DWORD *)buf = 134218496;
          v30 = v12;
          v31 = 2048;
          v32 = v9;
          v33 = 2048;
          v34 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "STARK,fAccessory,%p,timeSyncOffset,%.6lf,timeSyncUnc,%.6lf", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0000 != -1)
            dispatch_once(&qword_1022A0000, &stru_102149B50);
          v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          v23 = 134218496;
          v24 = v13;
          v25 = 2048;
          v26 = v9;
          v27 = 2048;
          v28 = v11;
          v15 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "STARK,fAccessory,%p,timeSyncOffset,%.6lf,timeSyncUnc,%.6lf", &v23);
LABEL_37:
          v19 = v14;
          sub_100512490("Generic", 1, 0, 2, "-[CLAccessoryObserver onStarkTimeSyncNotification:]_block_invoke", "%s\n", v15);
LABEL_38:
          if (v19 != buf)
            free(v19);
        }
      }
      else
      {
        if (qword_1022A0000 != -1)
          dispatch_once(&qword_1022A0000, &stru_102149B50);
        v21 = qword_1022A0008;
        if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#Warning STARK,unexpected,time sync unc is NULL", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0000 != -1)
            dispatch_once(&qword_1022A0000, &stru_102149B50);
          LOWORD(v23) = 0;
          v15 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 0, "#Warning STARK,unexpected,time sync unc is NULL", &v23, 2);
          goto LABEL_37;
        }
      }
    }
    else
    {
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_102149B50);
      v20 = qword_1022A0008;
      if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning STARK,unexpected,time sync estimate is NULL", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0000 != -1)
          dispatch_once(&qword_1022A0000, &stru_102149B50);
        LOWORD(v23) = 0;
        v15 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 0, "#Warning STARK,unexpected,time sync estimate is NULL", &v23, 2);
        goto LABEL_37;
      }
    }
  }
  else
  {
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_102149B50);
    v16 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "STARK,unexpected,fAccessory is NULL", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_102149B50);
      LOWORD(v23) = 0;
      v17 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 17, "STARK,unexpected,fAccessory is NULL", &v23, 2);
      v19 = v18;
      sub_100512490("Generic", 1, 0, 0, "-[CLAccessoryObserver onStarkTimeSyncNotification:]_block_invoke", "%s\n", v17);
      goto LABEL_38;
    }
  }
}

uint64_t sub_10065C560(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  void **v7;
  __int128 v8;
  void **v9;
  __int128 v10;
  void **v11;
  __int128 v12;
  void **v13;
  __int128 v14;
  void **v15;
  __int128 v16;
  __int16 v17;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  v7 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*v7);
  v8 = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)v7 = v8;
  *((_BYTE *)a2 + 71) = 0;
  *((_BYTE *)a2 + 48) = 0;
  v9 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*v9);
  v10 = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_OWORD *)v9 = v10;
  *((_BYTE *)a2 + 95) = 0;
  *((_BYTE *)a2 + 72) = 0;
  v11 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v11);
  v12 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)v11 = v12;
  *((_BYTE *)a2 + 119) = 0;
  *((_BYTE *)a2 + 96) = 0;
  v13 = (void **)(a1 + 120);
  if (*(char *)(a1 + 143) < 0)
    operator delete(*v13);
  v14 = *(__int128 *)((char *)a2 + 120);
  *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
  *(_OWORD *)v13 = v14;
  *((_BYTE *)a2 + 143) = 0;
  *((_BYTE *)a2 + 120) = 0;
  v15 = (void **)(a1 + 144);
  if (*(char *)(a1 + 167) < 0)
    operator delete(*v15);
  v16 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)v15 = v16;
  *((_BYTE *)a2 + 167) = 0;
  *((_BYTE *)a2 + 144) = 0;
  v17 = *((_WORD *)a2 + 84);
  *(_BYTE *)(a1 + 170) = *((_BYTE *)a2 + 170);
  *(_WORD *)(a1 + 168) = v17;
  return a1;
}

void sub_10065C6E0(id a1)
{
  qword_1022A0008 = (uint64_t)os_log_create("com.apple.locationd.Position", "GpsAccessory");
}

char *sub_10065C70C(char *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE *v10;
  __int128 v11;
  __int16 v12;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_100115CE4(__dst + 24, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_100115CE4(__dst + 48, *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = a2[3];
    *((_QWORD *)__dst + 8) = *((_QWORD *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_100115CE4(__dst + 72, *((void **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v7 = *(__int128 *)((char *)a2 + 72);
    *((_QWORD *)__dst + 11) = *((_QWORD *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    sub_100115CE4(__dst + 96, *((void **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v8 = a2[6];
    *((_QWORD *)__dst + 14) = *((_QWORD *)a2 + 14);
    *((_OWORD *)__dst + 6) = v8;
  }
  if (*((char *)a2 + 143) < 0)
  {
    sub_100115CE4(__dst + 120, *((void **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    v9 = *(__int128 *)((char *)a2 + 120);
    *((_QWORD *)__dst + 17) = *((_QWORD *)a2 + 17);
    *(_OWORD *)(__dst + 120) = v9;
  }
  v10 = __dst + 144;
  if (*((char *)a2 + 167) < 0)
  {
    sub_100115CE4(v10, *((void **)a2 + 18), *((_QWORD *)a2 + 19));
  }
  else
  {
    v11 = a2[9];
    *((_QWORD *)__dst + 20) = *((_QWORD *)a2 + 20);
    *(_OWORD *)v10 = v11;
  }
  v12 = *((_WORD *)a2 + 84);
  __dst[170] = *((_BYTE *)a2 + 170);
  *((_WORD *)__dst + 84) = v12;
  return __dst;
}

void sub_10065C89C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;

  if (*(char *)(v1 + 143) < 0)
    operator delete(*v6);
  if (*(char *)(v1 + 119) < 0)
    operator delete(*v5);
  if (*(char *)(v1 + 95) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10065C930(uint64_t a1)
{
  if (*(char *)(a1 + 167) < 0)
    operator delete(*(void **)(a1 + 144));
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_10065C9C0(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_10065C9EC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_10065C9EC(a1, *a2);
    sub_10065C9EC(a1, a2[1]);
    sub_10065CA34((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_10065CA34(uint64_t a1)
{
  sub_10065C930(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_10065CA84()
{
  sub_1015A2E04(qword_102303118, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102303118, (void *)&_mh_execute_header);
}

void sub_10065CE08(id a1)
{
  qword_102303130 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLBackgroundInertialOdometryServiceSilo"));
}

void sub_10065D1FC()
{
  operator delete();
}

id sub_10065D228(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "onBackgroundBatchData:", a1 + 8);
}

uint64_t sub_10065DE5C(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 32))
    return 0;
  else
    return a2;
}

void sub_10065E24C(id a1)
{
  qword_10229FF88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "InertialOdometry");
}

uint64_t *sub_10065E278(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    operator delete();
  }
  return result;
}

uint64_t sub_10065E2D4()
{
  uint64_t result;

  if (qword_102310A20)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310A20 + 8))(qword_102310A20);
  if (qword_102310A28)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310A28 + 8))(qword_102310A28);
  if (qword_102310A30)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310A30 + 8))(qword_102310A30);
  if (qword_102310A38)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310A38 + 8))(qword_102310A38);
  if (qword_102310A40)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310A40 + 8))(qword_102310A40);
  if (qword_102310A48)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310A48 + 8))(qword_102310A48);
  if (qword_102310A50)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102310A50 + 8))(qword_102310A50);
  result = qword_102310A58;
  if (qword_102310A58)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_102310A58 + 8))(qword_102310A58);
  return result;
}

void sub_10065E3A8(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_102303140 & 1) == 0)
  {
    byte_102303140 = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRayTracingTilesAvailability.pb.cc", a4);
    operator new();
  }
}

_QWORD *sub_10065E660(_QWORD *result)
{
  result[1] = 0;
  result[2] = 0;
  *result = &off_102149C90;
  return result;
}

void sub_10065E674(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRayTracingTilesAvailability.pb.cc", 219);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    v5 = *(_QWORD *)(a1 + 8);
    if (!v5)
      operator new();
    v6 = *(_QWORD *)(a2 + 8);
    if (!v6)
      v6 = *(_QWORD *)(qword_102310A20 + 8);
    sub_10065EBAC(v5, v6);
  }
}

void sub_10065E750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10065E768(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_102149C90;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102310A20 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_10065E7BC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_10065E768(a1);
  operator delete();
}

uint64_t sub_10065E7E0(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_102310A20;
  if (!qword_102310A20)
  {
    sub_10065E3A8(0, a2, a3, a4);
    return qword_102310A20;
  }
  return result;
}

void sub_10065E80C()
{
  operator new();
}

uint64_t sub_10065E844(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    result = *(_QWORD *)(result + 8);
    if (result)
      result = sub_10065E878(result);
  }
  *(_DWORD *)(v1 + 20) = 0;
  return result;
}

uint64_t sub_10065E878(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = result;
  LOBYTE(v2) = *(_BYTE *)(result + 52);
  if ((_BYTE)v2)
  {
    if ((*(_BYTE *)(result + 52) & 1) != 0)
    {
      v3 = *(_QWORD *)(result + 8);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 20))
          *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 20) = 0;
        v2 = *(_DWORD *)(result + 52);
      }
    }
    if ((v2 & 2) != 0)
    {
      result = *(_QWORD *)(result + 16);
      if (result)
        result = sub_10065F7BC(result);
    }
  }
  if (*(int *)(v1 + 32) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8 * v4);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      ++v4;
    }
    while (v4 < *(int *)(v1 + 32));
  }
  *(_DWORD *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 52) = 0;
  return result;
}

uint64_t sub_10065E908(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t result;
  unsigned int v17;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 10)
        break;
      *(_DWORD *)(a1 + 20) |= 1u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v17 = 0;
      v8 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17))return 0;
      }
      else
      {
        v17 = *v8;
        *((_QWORD *)this + 1) = v8 + 1;
      }
      v9 = *((_DWORD *)this + 14);
      v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10)
        return 0;
      v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      if (!sub_1006615E0(v7, this, v12) || !*((_BYTE *)this + 36))
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      v13 = *((_DWORD *)this + 14);
      v14 = __OFSUB__(v13, 1);
      v15 = v13 - 1;
      if (v15 < 0 == v14)
        *((_DWORD *)this + 14) = v15;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t sub_10065EAC8(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;

  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    v5 = *(_QWORD *)(result + 8);
    if (!v5)
      v5 = *(_QWORD *)(qword_102310A20 + 8);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return result;
}

uint64_t sub_10065EAF4(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  unsigned int v6;
  int v7;
  int v8;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (!v4)
      v4 = *(_QWORD *)(qword_102310A20 + 8);
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100661AE4(v4, a2);
    v7 = (int)v5;
    if (v5 >= 0x80)
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, v6);
    else
      v8 = 1;
    result = (v7 + v8 + 1);
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_10065EB60(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_10065E674(a1, (uint64_t)lpsrc);
}

void sub_10065EBAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _BYTE v16[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v16, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRayTracingTilesAvailability.pb.cc", 1894);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v15, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v16);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 24), *(_DWORD *)(a2 + 32) + *(_DWORD *)(a1 + 32));
  if (*(int *)(a2 + 32) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * v5);
      v7 = *(_DWORD *)(a1 + 36);
      v8 = *(int *)(a1 + 32);
      if ((int)v8 >= v7)
      {
        if (v7 == *(_DWORD *)(a1 + 40))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 24), v7 + 1);
          v7 = *(_DWORD *)(a1 + 36);
        }
        *(_DWORD *)(a1 + 36) = v7 + 1;
        operator new();
      }
      v9 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 32) = v8 + 1;
      sub_100660B64(*(_QWORD *)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *(int *)(a2 + 32));
  }
  LOBYTE(v10) = *(_BYTE *)(a2 + 52);
  if ((_BYTE)v10)
  {
    if ((*(_BYTE *)(a2 + 52) & 1) != 0)
    {
      *(_DWORD *)(a1 + 52) |= 1u;
      v11 = *(_DWORD **)(a1 + 8);
      if (!v11)
        operator new();
      v12 = *(_QWORD *)(a2 + 8);
      if (!v12)
        v12 = *(_QWORD *)(qword_102310A58 + 8);
      sub_10065F0AC(v11, v12);
      v10 = *(_DWORD *)(a2 + 52);
    }
    if ((v10 & 2) != 0)
    {
      *(_DWORD *)(a1 + 52) |= 2u;
      v13 = *(_QWORD *)(a1 + 16);
      if (!v13)
        operator new();
      v14 = *(_QWORD *)(a2 + 16);
      if (!v14)
        v14 = *(_QWORD *)(qword_102310A58 + 16);
      sub_10065F530(v13, v14);
    }
  }
}

void sub_10065EDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10065EDE0()
{
  return 1;
}

_QWORD *sub_10065EDE8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RayTracingTilesAvailability.LogEntry");
}

double sub_10065EDF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  char v6;
  _BYTE v7[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v7, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRayTracingTilesAvailability.pb.cc", 384);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v6, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    *(_DWORD *)(a1 + 20) |= 1u;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

void sub_10065EE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10065EE98(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102149D08;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10065EEA8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102149D08;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_10065EED8()
{
  operator new();
}

uint64_t sub_10065EF10(uint64_t result)
{
  if (*(_BYTE *)(result + 20))
    *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_10065EF24(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  uint64_t result;
  unint64_t v8;

  do
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 9)
        break;
      v8 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v8) & 1) == 0)
        return 0;
      *(_QWORD *)(a1 + 8) = v8;
      *(_DWORD *)(a1 + 20) |= 1u;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0);
  return 0;
}

uint64_t sub_10065F014(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  if ((*(_BYTE *)(result + 20) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
  return result;
}

uint64_t sub_10065F02C(uint64_t a1)
{
  uint64_t v1;

  v1 = ((int)(*(_DWORD *)(a1 + 20) << 31) >> 31) & 9;
  *(_DWORD *)(a1 + 16) = v1;
  return v1;
}

double sub_10065F048(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_10065EDF8(a1, (uint64_t)lpsrc);
}

uint64_t sub_10065F094()
{
  return 1;
}

_QWORD *sub_10065F09C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RayTracingTilesAvailability.AvailabilityFileTimestamp");
}

void sub_10065F0AC(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  char v8;
  _BYTE v9[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRayTracingTilesAvailability.pb.cc", 582);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 20);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      a1[5] |= 1u;
      a1[2] = v6;
      v5 = *(_DWORD *)(a2 + 20);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      a1[5] |= 2u;
      a1[3] = v7;
    }
  }
}

void sub_10065F154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10065F16C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102149D80;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10065F17C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102149D80;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_10065F1AC()
{
  operator new();
}

uint64_t sub_10065F1E4(uint64_t result)
{
  if (*(_BYTE *)(result + 20))
    *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_10065F1F8(unsigned int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  unint64_t v10;
  char *v11;
  char *v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  uint64_t result;

  v5 = a1 + 2;
  v6 = a1 + 3;
  while (1)
  {
    while (1)
    {
      v7 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v7 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v9 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_16;
      v12 = (char *)*((_QWORD *)this + 1);
      v10 = *((_QWORD *)this + 2);
      if ((unint64_t)v12 >= v10 || *v12 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
        if (!(_DWORD)result)
          return result;
        v13 = (_BYTE *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
      }
      else
      {
        *v5 = *v12;
        v13 = v12 + 1;
        *((_QWORD *)this + 1) = v13;
      }
      a1[5] |= 1u;
      if ((unint64_t)v13 < v10 && *v13 == 16)
      {
        v11 = v13 + 1;
        *((_QWORD *)this + 1) = v11;
LABEL_24:
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!(_DWORD)result)
            return result;
          v14 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          *v6 = *v11;
          v14 = (unsigned __int8 *)(v11 + 1);
          *((_QWORD *)this + 1) = v14;
        }
        a1[5] |= 2u;
        if (v14 == (unsigned __int8 *)v10
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v9 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v11 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_24;
      }
    }
    else
    {
      v9 = TagFallback & 7;
    }
LABEL_16:
    if (v9 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_10065F394(uint64_t result, unsigned int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 20);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), a2, a4);
  return result;
}

uint64_t sub_10065F3EC(uint64_t a1, unsigned int a2)
{
  char v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;

  v3 = *(_BYTE *)(a1 + 20);
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
      if (v5 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*(_DWORD *)(a1 + 20) & 2) == 0)
          goto LABEL_14;
      }
      else
      {
        v4 = 2;
        if ((v3 & 2) == 0)
          goto LABEL_14;
      }
    }
    else
    {
      v4 = 0;
      if ((*(_BYTE *)(a1 + 20) & 2) == 0)
        goto LABEL_14;
    }
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
    if (v6 >= 0x80)
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    else
      v7 = 2;
    v4 = (v7 + v4);
  }
  else
  {
    v4 = 0;
  }
LABEL_14:
  *(_DWORD *)(a1 + 16) = v4;
  return v4;
}

void sub_10065F478(_DWORD *a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_10065F0AC(a1, (uint64_t)lpsrc);
}

uint64_t sub_10065F4C4()
{
  return 1;
}

_QWORD *sub_10065F4CC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RayTracingTilesAvailability.AvailabilityFileCommonHeader");
}

uint64_t sub_10065F4DC(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_102149DF8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  sub_10065F530(a1, a2);
  return a1;
}

void sub_10065F51C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void sub_10065F530(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  char v15;
  _BYTE v16[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v16, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRayTracingTilesAvailability.pb.cc", 978);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v15, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v16);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 48);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 48) & 1) != 0)
    {
      *(_DWORD *)(a1 + 48) |= 1u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v8 = *(_QWORD *)(a2 + 8);
      if (!v8)
        v8 = *(_QWORD *)(qword_102310A38 + 8);
      sub_10065EDF8(v7, v8);
      v5 = *(_DWORD *)(a2 + 48);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_20;
      }
    }
    else if ((*(_BYTE *)(a2 + 48) & 2) == 0)
    {
      goto LABEL_6;
    }
    v9 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 48) |= 2u;
    *(_DWORD *)(a1 + 16) = v9;
    v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        goto LABEL_8;
      goto LABEL_21;
    }
LABEL_20:
    v10 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 48) |= 4u;
    *(_DWORD *)(a1 + 20) = v10;
    v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_22;
    }
LABEL_21:
    v11 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 48) |= 8u;
    *(_DWORD *)(a1 + 24) = v11;
    v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0)
        goto LABEL_10;
      goto LABEL_23;
    }
LABEL_22:
    v12 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a1 + 48) |= 0x10u;
    *(_DWORD *)(a1 + 28) = v12;
    v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 0x20) == 0)
    {
LABEL_10:
      if ((v5 & 0x40) == 0)
        goto LABEL_11;
      goto LABEL_24;
    }
LABEL_23:
    v13 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 48) |= 0x20u;
    *(_DWORD *)(a1 + 32) = v13;
    v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0)
        return;
      goto LABEL_12;
    }
LABEL_24:
    v14 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 48) |= 0x40u;
    *(_DWORD *)(a1 + 36) = v14;
    if ((*(_DWORD *)(a2 + 48) & 0x80) == 0)
      return;
LABEL_12:
    v6 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 48) |= 0x80u;
    *(_DWORD *)(a1 + 40) = v6;
  }
}

void sub_10065F6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10065F700(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_102149DF8;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102310A38 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_10065F754(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_10065F700(a1);
  operator delete();
}

void sub_10065F778()
{
  operator new();
}

uint64_t sub_10065F7BC(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 48))
  {
    if ((*(_BYTE *)(result + 48) & 1) != 0)
    {
      v1 = *(_QWORD *)(result + 8);
      if (v1)
      {
        if (*(_BYTE *)(v1 + 20))
          *(_QWORD *)(v1 + 8) = 0;
        *(_DWORD *)(v1 + 20) = 0;
      }
    }
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 32) = 0;
  }
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t sub_10065F7F4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  char *v12;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  BOOL v36;
  int v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t result;
  _BYTE *v41;
  _BYTE *v42;
  _BYTE *v43;
  _BYTE *v44;
  _BYTE *v45;
  unsigned __int8 *v46;
  unsigned int *v47;
  unsigned int v48;

  v5 = (unsigned int *)(a1 + 16);
  v6 = (unsigned int *)(a1 + 20);
  v7 = (unsigned int *)(a1 + 24);
  v8 = (unsigned int *)(a1 + 28);
  v9 = (unsigned int *)(a1 + 32);
  v10 = (unsigned int *)(a1 + 36);
  v11 = (unsigned int *)(a1 + 40);
  while (2)
  {
    v12 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v12 >= *((_QWORD *)this + 2) || *v12 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v12;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v12 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v14 = TagFallback & 7;
        if (v14 != 2)
          goto LABEL_28;
        v47 = v11;
        v15 = v10;
        v16 = v9;
        v17 = v8;
        v18 = v7;
        v19 = v6;
        *(_DWORD *)(a1 + 48) |= 1u;
        v20 = *(_QWORD *)(a1 + 8);
        if (!v20)
          operator new();
        v21 = v5;
        v48 = 0;
        v22 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v22 >= *((_QWORD *)this + 2) || *v22 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v48))return 0;
        }
        else
        {
          v48 = *v22;
          *((_QWORD *)this + 1) = v22 + 1;
        }
        v31 = *((_DWORD *)this + 14);
        v32 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v31 + 1;
        if (v31 >= v32)
          return 0;
        v33 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v48);
        if (!sub_10065EF24(v20, this, v34) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v33);
        v35 = *((_DWORD *)this + 14);
        v36 = __OFSUB__(v35, 1);
        v37 = v35 - 1;
        if (v37 < 0 == v36)
          *((_DWORD *)this + 14) = v37;
        v38 = (_BYTE *)*((_QWORD *)this + 1);
        v23 = *((_QWORD *)this + 2);
        v5 = v21;
        v6 = v19;
        v7 = v18;
        v8 = v17;
        v9 = v16;
        v10 = v15;
        v11 = v47;
        if ((unint64_t)v38 >= v23 || *v38 != 16)
          continue;
        v24 = v38 + 1;
        *((_QWORD *)this + 1) = v24;
        goto LABEL_41;
      case 2u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v24 = (char *)*((_QWORD *)this + 1);
        v23 = *((_QWORD *)this + 2);
LABEL_41:
        if ((unint64_t)v24 >= v23 || *v24 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v39 = (_BYTE *)*((_QWORD *)this + 1);
          v23 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v24;
          v39 = v24 + 1;
          *((_QWORD *)this + 1) = v39;
        }
        *(_DWORD *)(a1 + 48) |= 2u;
        if ((unint64_t)v39 >= v23 || *v39 != 24)
          continue;
        v25 = v39 + 1;
        *((_QWORD *)this + 1) = v25;
LABEL_49:
        if ((unint64_t)v25 >= v23 || *v25 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!(_DWORD)result)
            return result;
          v41 = (_BYTE *)*((_QWORD *)this + 1);
          v23 = *((_QWORD *)this + 2);
        }
        else
        {
          *v6 = *v25;
          v41 = v25 + 1;
          *((_QWORD *)this + 1) = v41;
        }
        *(_DWORD *)(a1 + 48) |= 4u;
        if ((unint64_t)v41 >= v23 || *v41 != 32)
          continue;
        v26 = v41 + 1;
        *((_QWORD *)this + 1) = v26;
LABEL_57:
        if ((unint64_t)v26 >= v23 || *v26 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
          if (!(_DWORD)result)
            return result;
          v42 = (_BYTE *)*((_QWORD *)this + 1);
          v23 = *((_QWORD *)this + 2);
        }
        else
        {
          *v7 = *v26;
          v42 = v26 + 1;
          *((_QWORD *)this + 1) = v42;
        }
        *(_DWORD *)(a1 + 48) |= 8u;
        if ((unint64_t)v42 >= v23 || *v42 != 40)
          continue;
        v27 = v42 + 1;
        *((_QWORD *)this + 1) = v27;
LABEL_65:
        if ((unint64_t)v27 >= v23 || *v27 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v8);
          if (!(_DWORD)result)
            return result;
          v43 = (_BYTE *)*((_QWORD *)this + 1);
          v23 = *((_QWORD *)this + 2);
        }
        else
        {
          *v8 = *v27;
          v43 = v27 + 1;
          *((_QWORD *)this + 1) = v43;
        }
        *(_DWORD *)(a1 + 48) |= 0x10u;
        if ((unint64_t)v43 >= v23 || *v43 != 48)
          continue;
        v28 = v43 + 1;
        *((_QWORD *)this + 1) = v28;
LABEL_73:
        if ((unint64_t)v28 >= v23 || *v28 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v9);
          if (!(_DWORD)result)
            return result;
          v44 = (_BYTE *)*((_QWORD *)this + 1);
          v23 = *((_QWORD *)this + 2);
        }
        else
        {
          *v9 = *v28;
          v44 = v28 + 1;
          *((_QWORD *)this + 1) = v44;
        }
        *(_DWORD *)(a1 + 48) |= 0x20u;
        if ((unint64_t)v44 >= v23 || *v44 != 56)
          continue;
        v29 = v44 + 1;
        *((_QWORD *)this + 1) = v29;
LABEL_81:
        if ((unint64_t)v29 >= v23 || *v29 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v10);
          if (!(_DWORD)result)
            return result;
          v45 = (_BYTE *)*((_QWORD *)this + 1);
          v23 = *((_QWORD *)this + 2);
        }
        else
        {
          *v10 = *v29;
          v45 = v29 + 1;
          *((_QWORD *)this + 1) = v45;
        }
        *(_DWORD *)(a1 + 48) |= 0x40u;
        if ((unint64_t)v45 >= v23 || *v45 != 64)
          continue;
        v30 = v45 + 1;
        *((_QWORD *)this + 1) = v30;
LABEL_89:
        if ((unint64_t)v30 >= v23 || *v30 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v11);
          if (!(_DWORD)result)
            return result;
          v46 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v23 = *((_QWORD *)this + 2);
        }
        else
        {
          *v11 = *v30;
          v46 = (unsigned __int8 *)(v30 + 1);
          *((_QWORD *)this + 1) = v46;
        }
        *(_DWORD *)(a1 + 48) |= 0x80u;
        if (v46 != (unsigned __int8 *)v23 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        break;
      case 3u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v25 = (char *)*((_QWORD *)this + 1);
        v23 = *((_QWORD *)this + 2);
        goto LABEL_49;
      case 4u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v26 = (char *)*((_QWORD *)this + 1);
        v23 = *((_QWORD *)this + 2);
        goto LABEL_57;
      case 5u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v27 = (char *)*((_QWORD *)this + 1);
        v23 = *((_QWORD *)this + 2);
        goto LABEL_65;
      case 6u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v28 = (char *)*((_QWORD *)this + 1);
        v23 = *((_QWORD *)this + 2);
        goto LABEL_73;
      case 7u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v29 = (char *)*((_QWORD *)this + 1);
        v23 = *((_QWORD *)this + 2);
        goto LABEL_81;
      case 8u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v30 = (char *)*((_QWORD *)this + 1);
        v23 = *((_QWORD *)this + 2);
        goto LABEL_89;
      default:
        v14 = TagFallback & 7;
LABEL_28:
        if (v14 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_10065FD54(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int *v5;
  int v6;
  uint64_t v7;

  v5 = (int *)result;
  v6 = *(_DWORD *)(result + 48);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102310A38 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = v5[12];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[4], a2, a4);
  v6 = v5[12];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[5], a2, a4);
  v6 = v5[12];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[6], a2, a4);
  v6 = v5[12];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v5[7], a2, a4);
  v6 = v5[12];
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v5[8], a2, a4);
  v6 = v5[12];
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v5[10], a2, a4);
  }
LABEL_18:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v5[9], a2, a4);
  if ((v5[12] & 0x80) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v5[10], a2, a4);
  return result;
}

uint64_t sub_10065FE68(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v17;
  int v18;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v19;
  int v20;

  LOBYTE(v3) = *(_BYTE *)(a1 + 48);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_44;
  }
  if ((*(_BYTE *)(a1 + 48) & 1) == 0)
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 48) & 2) == 0)
      goto LABEL_13;
    goto LABEL_9;
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    v5 = *(_QWORD *)(qword_102310A38 + 8);
  v6 = ((int)(*(_DWORD *)(v5 + 20) << 31) >> 31) & 9;
  *(_DWORD *)(v5 + 16) = v6;
  v4 = v6 | 2u;
  v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 2) != 0)
  {
LABEL_9:
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if (v7 >= 0x80)
    {
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2) + 1;
      v3 = *(_DWORD *)(a1 + 48);
    }
    else
    {
      v8 = 2;
    }
    v4 = (v8 + v4);
  }
LABEL_13:
  if ((v3 & 4) != 0)
  {
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
      v3 = *(_DWORD *)(a1 + 48);
    }
    else
    {
      v10 = 2;
    }
    v4 = (v10 + v4);
    if ((v3 & 8) == 0)
    {
LABEL_15:
      if ((v3 & 0x10) == 0)
        goto LABEL_16;
      goto LABEL_28;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_15;
  }
  v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if (v11 >= 0x80)
  {
    v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
    v3 = *(_DWORD *)(a1 + 48);
  }
  else
  {
    v12 = 2;
  }
  v4 = (v12 + v4);
  if ((v3 & 0x10) == 0)
  {
LABEL_16:
    if ((v3 & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_32;
  }
LABEL_28:
  v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
  if (v13 >= 0x80)
  {
    v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    v3 = *(_DWORD *)(a1 + 48);
  }
  else
  {
    v14 = 2;
  }
  v4 = (v14 + v4);
  if ((v3 & 0x20) == 0)
  {
LABEL_17:
    if ((v3 & 0x40) == 0)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_32:
  v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
  if (v15 >= 0x80)
  {
    v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    v3 = *(_DWORD *)(a1 + 48);
  }
  else
  {
    v16 = 2;
  }
  v4 = (v16 + v4);
  if ((v3 & 0x40) == 0)
  {
LABEL_18:
    if ((v3 & 0x80) == 0)
      goto LABEL_44;
    goto LABEL_40;
  }
LABEL_36:
  v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
  if (v17 >= 0x80)
  {
    v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
    v3 = *(_DWORD *)(a1 + 48);
  }
  else
  {
    v18 = 2;
  }
  v4 = (v18 + v4);
  if ((v3 & 0x80) != 0)
  {
LABEL_40:
    v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
    if (v19 >= 0x80)
      v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2) + 1;
    else
      v20 = 2;
    v4 = (v20 + v4);
  }
LABEL_44:
  *(_DWORD *)(a1 + 44) = v4;
  return v4;
}

void sub_100660008(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_10065F530(a1, (uint64_t)lpsrc);
}

uint64_t sub_100660054()
{
  return 1;
}

_QWORD *sub_10066005C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RayTracingTilesAvailability.RayTracingTilesAvailabilityHeader");
}

double sub_10066006C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRayTracingTilesAvailability.pb.cc", 1200);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(double *)(a1 + 8) = result;
      v6 = *(_DWORD *)(a2 + 28);
    }
    if ((v6 & 2) != 0)
    {
      result = *(double *)(a2 + 16);
      *(_DWORD *)(a1 + 28) |= 2u;
      *(double *)(a1 + 16) = result;
    }
  }
  return result;
}

void sub_100660114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10066012C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102149E70;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10066013C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102149E70;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_10066016C()
{
  operator new();
}

uint64_t sub_1006601A4(uint64_t result)
{
  if (*(_BYTE *)(result + 28))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_1006601B8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  _BYTE *v8;
  uint64_t result;
  unint64_t v10;

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_21;
        v10 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v10) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 8) = v10;
        *(_DWORD *)(a1 + 28) |= 1u;
        v8 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 < *((_QWORD *)this + 2) && *v8 == 17)
        {
          *((_QWORD *)this + 1) = v8 + 1;
          goto LABEL_15;
        }
      }
      if (TagFallback >> 3 != 2)
      {
        v7 = TagFallback & 7;
        goto LABEL_21;
      }
      v7 = TagFallback & 7;
      if (v7 == 1)
        break;
LABEL_21:
      if (v7 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_15:
    v10 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v10) & 1) == 0)
      return 0;
    *(_QWORD *)(a1 + 16) = v10;
    *(_DWORD *)(a1 + 28) |= 2u;
  }
  while (*((_QWORD *)this + 1) != *((_QWORD *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  result = 1;
  *((_BYTE *)this + 36) = 1;
  return result;
}

uint64_t sub_10066031C(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  int v5;

  v4 = result;
  v5 = *(_DWORD *)(result + 28);
  if ((v5 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    v5 = *(_DWORD *)(v4 + 28);
  }
  if ((v5 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v4 + 16), a3);
  return result;
}

uint64_t sub_100660374(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(a1 + 28);
  if (*(_BYTE *)(a1 + 28))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0)
      v1 = v2 + 9;
    else
      v1 = v2;
  }
  *(_DWORD *)(a1 + 24) = v1;
  return v1;
}

double sub_1006603A0(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_10066006C(a1, (uint64_t)lpsrc);
}

uint64_t sub_1006603EC()
{
  return 1;
}

_QWORD *sub_1006603F4@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RayTracingTilesAvailability.LatLonGeodetic");
}

double sub_100660404(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRayTracingTilesAvailability.pb.cc", 1418);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 1u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v8 = *(_QWORD *)(a2 + 8);
      if (!v8)
        v8 = *(_QWORD *)(qword_102310A48 + 8);
      result = sub_10066006C(v7, v8);
      v6 = *(_DWORD *)(a2 + 28);
    }
    if ((v6 & 2) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 2u;
      v9 = *(_QWORD *)(a1 + 16);
      if (!v9)
        operator new();
      v10 = *(_QWORD *)(a2 + 16);
      if (!v10)
        v10 = *(_QWORD *)(qword_102310A48 + 16);
      return sub_10066006C(v9, v10);
    }
  }
  return result;
}

void sub_100660534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10066054C(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if ((_QWORD *)qword_102310A48 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    result = (_QWORD *)v1[2];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_1006605A8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102149EE8;
  sub_10066054C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1006605D8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102149EE8;
  sub_10066054C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_10066061C()
{
  operator new();
}

uint64_t sub_100660654(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  LOBYTE(v1) = *(_BYTE *)(result + 28);
  if ((_BYTE)v1)
  {
    if ((*(_BYTE *)(result + 28) & 1) != 0)
    {
      v2 = *(_QWORD *)(result + 8);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 28))
        {
          *(_QWORD *)(v2 + 8) = 0;
          *(_QWORD *)(v2 + 16) = 0;
        }
        *(_DWORD *)(v2 + 28) = 0;
        v1 = *(_DWORD *)(result + 28);
      }
    }
    if ((v1 & 2) != 0)
    {
      v3 = *(_QWORD *)(result + 16);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 28))
        {
          *(_QWORD *)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 16) = 0;
        }
        *(_DWORD *)(v3 + 28) = 0;
      }
    }
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_1006606A0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  uint64_t v8;
  char *v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  char *v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t result;
  unsigned int v27;
  unsigned int v28;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_17;
        *(_DWORD *)(a1 + 28) |= 1u;
        v8 = *(_QWORD *)(a1 + 8);
        if (!v8)
          operator new();
        v27 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27))return 0;
        }
        else
        {
          v27 = *v9;
          *((_QWORD *)this + 1) = v9 + 1;
        }
        v10 = *((_DWORD *)this + 14);
        v11 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v10 + 1;
        if (v10 >= v11)
          return 0;
        v12 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v27);
        if (!sub_1006601B8(v8, this, v13) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v12);
        v14 = *((_DWORD *)this + 14);
        v15 = __OFSUB__(v14, 1);
        v16 = v14 - 1;
        if (v16 < 0 == v15)
          *((_DWORD *)this + 14) = v16;
        v17 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v17 < *((_QWORD *)this + 2) && *v17 == 18)
        {
          *((_QWORD *)this + 1) = v17 + 1;
          goto LABEL_29;
        }
      }
      if (TagFallback >> 3 != 2)
        break;
      v7 = TagFallback & 7;
      if (v7 != 2)
        goto LABEL_17;
LABEL_29:
      *(_DWORD *)(a1 + 28) |= 2u;
      v18 = *(_QWORD *)(a1 + 16);
      if (!v18)
        operator new();
      v28 = 0;
      v19 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v19 >= *((_QWORD *)this + 2) || *v19 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28))return 0;
      }
      else
      {
        v28 = *v19;
        *((_QWORD *)this + 1) = v19 + 1;
      }
      v20 = *((_DWORD *)this + 14);
      v21 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v20 + 1;
      if (v20 >= v21)
        return 0;
      v22 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
      if (!sub_1006601B8(v18, this, v23) || !*((_BYTE *)this + 36))
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v22);
      v24 = *((_DWORD *)this + 14);
      v15 = __OFSUB__(v24, 1);
      v25 = v24 - 1;
      if (v25 < 0 == v15)
        *((_DWORD *)this + 14) = v25;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    v7 = TagFallback & 7;
LABEL_17:
    if (v7 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_10066096C(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      return result;
    goto LABEL_7;
  }
  v7 = *(_QWORD *)(result + 8);
  if (!v7)
    v7 = *(_QWORD *)(qword_102310A48 + 8);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 28) & 2) != 0)
  {
LABEL_7:
    v8 = *(_QWORD *)(v5 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_102310A48 + 16);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  }
  return result;
}

uint64_t sub_1006609E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;

  if (!*(_BYTE *)(a1 + 28))
  {
    v1 = 0;
    goto LABEL_20;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) == 0)
  {
    v1 = 0;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      goto LABEL_20;
    goto LABEL_13;
  }
  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    v2 = *(_QWORD *)(qword_102310A48 + 8);
  v3 = *(unsigned __int8 *)(v2 + 28);
  if (*(_BYTE *)(v2 + 28))
  {
    if ((v3 & 2) != 0)
      v3 = ((v3 << 31 >> 31) & 9) + 9;
    else
      v3 = (v3 << 31 >> 31) & 9;
  }
  *(_DWORD *)(v2 + 24) = v3;
  v1 = (v3 + 2);
  if ((*(_DWORD *)(a1 + 28) & 2) != 0)
  {
LABEL_13:
    v4 = *(_QWORD *)(a1 + 16);
    if (!v4)
      v4 = *(_QWORD *)(qword_102310A48 + 16);
    v5 = *(unsigned __int8 *)(v4 + 28);
    if (*(_BYTE *)(v4 + 28))
    {
      if ((v5 & 2) != 0)
        v5 = ((v5 << 31 >> 31) & 9) + 9;
      else
        v5 = (v5 << 31 >> 31) & 9;
    }
    *(_DWORD *)(v4 + 24) = v5;
    v1 = (v1 + v5 + 2);
  }
LABEL_20:
  *(_DWORD *)(a1 + 24) = v1;
  return v1;
}

double sub_100660A98(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100660404(a1, (uint64_t)lpsrc);
}

uint64_t sub_100660AE4()
{
  return 1;
}

_QWORD *sub_100660AEC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RayTracingTilesAvailability.BoundingBox");
}

uint64_t sub_100660AFC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &off_102149F60;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_100660B64(a1, a2);
  return a1;
}

void sub_100660B34(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  if (*((_QWORD *)v1 + 2))
    operator delete[]();
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

double sub_100660B64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRayTracingTilesAvailability.pb.cc", 1647);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  v6 = *(_DWORD *)(a2 + 24);
  if (v6)
  {
    sub_1002E60A0(a1 + 16, *(_DWORD *)(a1 + 24) + v6);
    memcpy((void *)(*(_QWORD *)(a1 + 16) + 8 * *(int *)(a1 + 24)), *(const void **)(a2 + 16), 8 * *(int *)(a2 + 24));
    *(_DWORD *)(a1 + 24) += *(_DWORD *)(a2 + 24);
  }
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    *(_DWORD *)(a1 + 40) |= 1u;
    v7 = *(_QWORD *)(a1 + 8);
    if (!v7)
      operator new();
    v8 = *(_QWORD *)(a2 + 8);
    if (!v8)
      v8 = *(_QWORD *)(qword_102310A50 + 8);
    return sub_100660404(v7, v8);
  }
  return result;
}

void sub_100660C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100660C90(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_102149F60;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102310A50 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  if (*((_QWORD *)this + 2))
    operator delete[]();
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100660D00(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100660C90(a1);
  operator delete();
}

void sub_100660D24()
{
  operator new();
}

uint64_t sub_100660D60(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if ((*(_BYTE *)(result + 40) & 1) != 0)
  {
    result = *(_QWORD *)(result + 8);
    if (result)
      result = sub_100660654(result);
  }
  *(_DWORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 40) = 0;
  return result;
}

uint64_t sub_100660D98(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  uint64_t v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  _BYTE *v21;
  unsigned int v22;
  int v23;
  char *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28[2];
  unsigned int v29;

  v5 = a1 + 16;
  while (1)
  {
    while (1)
    {
      v6 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v6 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v8 = TagFallback & 7;
      if (v8 != 2)
        goto LABEL_19;
      *(_DWORD *)(a1 + 40) |= 1u;
      v11 = *(_QWORD *)(a1 + 8);
      if (!v11)
        operator new();
      v28[0] = 0;
      v12 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v12 >= *((_QWORD *)this + 2) || *v12 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, (unsigned int *)v28))return 0;
      }
      else
      {
        v28[0] = *v12;
        *((_QWORD *)this + 1) = v12 + 1;
      }
      v14 = *((_DWORD *)this + 14);
      v15 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v14 + 1;
      if (v14 >= v15)
        return 0;
      v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28[0]);
      if (!sub_1006606A0(v11, this, v17) || !*((_BYTE *)this + 36))
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
      v18 = *((_DWORD *)this + 14);
      v19 = __OFSUB__(v18, 1);
      v20 = v18 - 1;
      if (v20 < 0 == v19)
        *((_DWORD *)this + 14) = v20;
      v21 = (_BYTE *)*((_QWORD *)this + 1);
      v10 = *((_QWORD *)this + 2);
      if ((unint64_t)v21 < v10 && *v21 == 18)
      {
        v9 = v21 + 1;
        *((_QWORD *)this + 1) = v9;
LABEL_33:
        v29 = 0;
        if ((unint64_t)v9 >= v10 || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v29))return 0;
          v22 = v29;
        }
        else
        {
          v22 = *v9;
          v29 = v22;
          *((_QWORD *)this + 1) = v9 + 1;
        }
        v23 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v22);
        while ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) >= 1)
        {
          *(_QWORD *)v28 = 0;
          v24 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v24 >= *((_QWORD *)this + 2) || *v24 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, (unint64_t *)v28))return 0;
          }
          else
          {
            *(_QWORD *)v28 = *v24;
            *((_QWORD *)this + 1) = v24 + 1;
          }
          v25 = *(_DWORD *)(a1 + 24);
          if (v25 == *(_DWORD *)(a1 + 28))
          {
            sub_1002E60A0(v5, v25 + 1);
            v25 = *(_DWORD *)(a1 + 24);
          }
          v26 = *(_QWORD *)v28;
          v27 = *(_QWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 24) = v25 + 1;
          *(_QWORD *)(v27 + 8 * v25) = v26;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v23);
LABEL_48:
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v8 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        result = sub_100661090(1, 0x12u, this, v5);
        if (!(_DWORD)result)
          return result;
        goto LABEL_48;
      }
      if (v8 == 2)
      {
        v9 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_33;
      }
    }
    else
    {
      v8 = TagFallback & 7;
    }
LABEL_19:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_100661090(int a1, unsigned int a2, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, uint64_t a4)
{
  char *v7;
  uint64_t result;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  unsigned __int8 *v16;
  char *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  _BYTE v24[48];

  v22 = 0;
  v7 = (char *)*((_QWORD *)this + 1);
  if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
  {
    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, &v22);
    if (!(_DWORD)result)
      return result;
  }
  else
  {
    v22 = *v7;
    *((_QWORD *)this + 1) = v7 + 1;
  }
  v9 = *(_DWORD *)(a4 + 8);
  v10 = *(_DWORD *)(a4 + 12);
  if (v9 == v10)
  {
    sub_1002E60A0(a4, v9 + 1);
    v9 = *(_DWORD *)(a4 + 8);
    v10 = *(_DWORD *)(a4 + 12);
  }
  v11 = v22;
  v12 = *(_QWORD *)a4;
  v13 = v9 + 1;
  *(_DWORD *)(a4 + 8) = v9 + 1;
  *(_QWORD *)(v12 + 8 * v9) = v11;
  if (v10 - (v9 + 1) >= 1)
  {
    v14 = v10 - v9;
    do
    {
      if (a2 > 0x7F)
      {
        if (a2 >> 14)
          return 1;
        v18 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        if ((int)v15 - (int)v18 < 2 || (a2 & 0x7F | 0x80) != *v18 || v18[1] != (a2 >> 7))
          return 1;
        v17 = (char *)(v18 + 2);
      }
      else
      {
        v16 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        if ((unint64_t)v16 >= v15 || *v16 != a2)
          return 1;
        v17 = (char *)(v16 + 1);
      }
      *((_QWORD *)this + 1) = v17;
      if ((unint64_t)v17 >= v15 || *v17 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, &v22);
        if (!(_DWORD)result)
          return result;
        v13 = *(_DWORD *)(a4 + 8);
      }
      else
      {
        v22 = *v17;
        *((_QWORD *)this + 1) = v17 + 1;
      }
      if (v13 >= *(_DWORD *)(a4 + 12))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v24, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
        v19 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (size()) < (Capacity()): ");
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v23, v19);
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v24);
        v13 = *(_DWORD *)(a4 + 8);
      }
      v20 = v22;
      v21 = *(_QWORD *)a4;
      *(_DWORD *)(a4 + 8) = v13 + 1;
      *(_QWORD *)(v21 + 8 * v13) = v20;
      --v14;
      ++v13;
    }
    while (v14 > 1);
  }
  return 1;
}

void sub_100661270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100661288(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = result;
  if ((*(_BYTE *)(result + 40) & 1) != 0)
  {
    v6 = *(_QWORD *)(result + 8);
    if (!v6)
      v6 = *(_QWORD *)(qword_102310A50 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
  }
  if (*(int *)(v5 + 24) >= 1)
  {
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2, 0x12u);
    result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2, *(_DWORD *)(v5 + 32));
    if (*(int *)(v5 + 24) >= 1)
    {
      v7 = 0;
      do
        result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64(a2, *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * v7++));
      while (v7 < *(int *)(v5 + 24));
    }
  }
  return result;
}

uint64_t sub_10066132C(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  uint64_t v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  uint64_t result;

  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (!v4)
      v4 = *(_QWORD *)(qword_102310A50 + 8);
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1006609E8(v4);
    v6 = (int)v5;
    if (v5 >= 0x80)
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
    else
      v7 = 1;
    v3 = v6 + v7 + 1;
  }
  else
  {
    v3 = 0;
  }
  if (*(int *)(a1 + 24) < 1)
  {
    LODWORD(v9) = 0;
  }
  else
  {
    v8 = 0;
    LODWORD(v9) = 0;
    do
      v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(*(_QWORD *)(a1 + 16) + 8 * v8++), a2)+ v9);
    while (v8 < *(int *)(a1 + 24));
    if ((int)v9 > 0)
    {
      if (v9 >= 0x80)
        v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
      else
        v10 = 2;
      v3 += v10;
    }
  }
  result = (v3 + (_DWORD)v9);
  *(_DWORD *)(a1 + 32) = (_DWORD)v9;
  *(_DWORD *)(a1 + 36) = result;
  return result;
}

double sub_100661408(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100660B64(a1, (uint64_t)lpsrc);
}

uint64_t sub_100661454()
{
  return 1;
}

_QWORD *sub_10066145C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RayTracingTilesAvailability.RegionSpecificAvailableTiles");
}

uint64_t sub_10066146C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_102149FD8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  sub_10065EBAC(a1, a2);
  return a1;
}

void sub_1006614B0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_10010C59C(v1 + 3);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)v1);
  _Unwind_Resume(a1);
}

void sub_1006614D4(uint64_t *a1)
{
  uint64_t *v2;

  *a1 = (uint64_t)off_102149FD8;
  v2 = a1 + 3;
  sub_100661514(a1);
  sub_10010C59C(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

_QWORD *sub_100661514(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if ((_QWORD *)qword_102310A58 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    result = (_QWORD *)v1[2];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_100661574(uint64_t *a1)
{
  sub_1006614D4(a1);
  operator delete();
}

void sub_100661598()
{
  operator new();
}

uint64_t sub_1006615E0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v8;
  int v9;
  unsigned int *v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  _BYTE *v19;
  uint64_t v20;
  char *v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  _BYTE *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  _BYTE *v40;
  uint64_t result;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;

  v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 24);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v6 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((_QWORD *)this + 1) = v6 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v8 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v9 = TagFallback & 7;
          if (v9 != 2)
            goto LABEL_21;
          *(_DWORD *)(a1 + 52) |= 1u;
          v10 = *(unsigned int **)(a1 + 8);
          if (!v10)
            operator new();
          v42 = 0;
          v11 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v11 >= *((_QWORD *)this + 2) || *v11 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v42))return 0;
          }
          else
          {
            v42 = *v11;
            *((_QWORD *)this + 1) = v11 + 1;
          }
          v12 = *((_DWORD *)this + 14);
          v13 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v12 + 1;
          if (v12 >= v13)
            return 0;
          v14 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v42);
          if (!sub_10065F1F8(v10, this, v15) || !*((_BYTE *)this + 36))
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v14);
          v16 = *((_DWORD *)this + 14);
          v17 = __OFSUB__(v16, 1);
          v18 = v16 - 1;
          if (v18 < 0 == v17)
            *((_DWORD *)this + 14) = v18;
          v19 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v19 < *((_QWORD *)this + 2) && *v19 == 18)
          {
            *((_QWORD *)this + 1) = v19 + 1;
            goto LABEL_33;
          }
        }
        if (v8 != 2)
          break;
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_21;
LABEL_33:
        *(_DWORD *)(a1 + 52) |= 2u;
        v20 = *(_QWORD *)(a1 + 16);
        if (!v20)
          operator new();
        v43 = 0;
        v21 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v21 >= *((_QWORD *)this + 2) || *v21 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v43))return 0;
        }
        else
        {
          v43 = *v21;
          *((_QWORD *)this + 1) = v21 + 1;
        }
        v22 = *((_DWORD *)this + 14);
        v23 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v22 + 1;
        if (v22 >= v23)
          return 0;
        v24 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v43);
        if (!sub_10065F7F4(v20, this, v25) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v24);
        v26 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v26, 1);
        v27 = v26 - 1;
        if (v27 < 0 == v17)
          *((_DWORD *)this + 14) = v27;
        v28 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v28 < *((_QWORD *)this + 2) && *v28 == 26)
          goto LABEL_46;
      }
      if (v8 != 3)
        break;
      v9 = TagFallback & 7;
      if (v9 != 2)
        goto LABEL_21;
      while (1)
      {
        v29 = *(_DWORD *)(a1 + 36);
        v30 = *(int *)(a1 + 32);
        if ((int)v30 >= v29)
        {
          if (v29 == *(_DWORD *)(a1 + 40))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v29 + 1);
            v29 = *(_DWORD *)(a1 + 36);
          }
          *(_DWORD *)(a1 + 36) = v29 + 1;
          operator new();
        }
        v31 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 32) = v30 + 1;
        v32 = *(_QWORD *)(v31 + 8 * v30);
        v44 = 0;
        v33 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v33 >= *((_QWORD *)this + 2) || *v33 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v44))return 0;
        }
        else
        {
          v44 = *v33;
          *((_QWORD *)this + 1) = v33 + 1;
        }
        v34 = *((_DWORD *)this + 14);
        v35 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v34 + 1;
        if (v34 >= v35)
          return 0;
        v36 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v44);
        if (!sub_100660D98(v32, this, v37) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v36);
        v38 = *((_DWORD *)this + 14);
        v17 = __OFSUB__(v38, 1);
        v39 = v38 - 1;
        if (v39 < 0 == v17)
          *((_DWORD *)this + 14) = v39;
        v28 = (_BYTE *)*((_QWORD *)this + 1);
        v40 = (_BYTE *)*((_QWORD *)this + 2);
        if (v28 >= v40 || *v28 != 26)
          break;
LABEL_46:
        *((_QWORD *)this + 1) = v28 + 1;
      }
      if (v28 == v40 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    v9 = TagFallback & 7;
LABEL_21:
    if (v9 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_100661A38(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = result;
  v6 = *(_DWORD *)(result + 52);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102310A58 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 52);
  }
  if ((v6 & 2) != 0)
  {
    v8 = *(_QWORD *)(v5 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_102310A58 + 16);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  }
  if (*(int *)(v5 + 32) >= 1)
  {
    v9 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v9++), a2, a4);
    while (v9 < *(int *)(v5 + 32));
  }
  return result;
}

uint64_t sub_100661AE4(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  uint64_t v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;
  int v17;

  if (!*(_BYTE *)(a1 + 52))
  {
    v3 = 0;
    goto LABEL_18;
  }
  if ((*(_BYTE *)(a1 + 52) & 1) == 0)
  {
    v3 = 0;
    if ((*(_BYTE *)(a1 + 52) & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    v4 = *(_QWORD *)(qword_102310A58 + 8);
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10065F3EC(v4, a2);
  v6 = (int)v5;
  if (v5 >= 0x80)
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
  else
    v7 = 1;
  v3 = v6 + v7 + 1;
  if ((*(_DWORD *)(a1 + 52) & 2) != 0)
  {
LABEL_12:
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      v8 = *(_QWORD *)(qword_102310A58 + 16);
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10065FE68(v8, a2);
    v10 = (int)v9;
    if (v9 >= 0x80)
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
    else
      v11 = 1;
    v3 += v10 + v11 + 1;
  }
LABEL_18:
  v12 = *(_DWORD *)(a1 + 32);
  v13 = (v12 + v3);
  if (v12 >= 1)
  {
    v14 = 0;
    do
    {
      v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10066132C(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v14), a2);
      v16 = (int)v15;
      if (v15 >= 0x80)
        v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2);
      else
        v17 = 1;
      v13 = (v16 + v13 + v17);
      ++v14;
    }
    while (v14 < *(int *)(a1 + 32));
  }
  *(_DWORD *)(a1 + 48) = v13;
  return v13;
}

void sub_100661C08(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_10065EBAC(a1, (uint64_t)lpsrc);
}

uint64_t sub_100661C54()
{
  return 1;
}

_QWORD *sub_100661C5C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.RayTracingTilesAvailability.RayTracingTilesAvailabilityData");
}

uint64_t sub_100661C70()
{
  uint64_t result;

  result = sub_1000A42B0();
  if ((_DWORD)result)
    operator new();
  return result;
}

void sub_100661CD8()
{
  operator delete();
}

uint64_t sub_100661CFC()
{
  if (qword_102303148 != -1)
    dispatch_once(&qword_102303148, &stru_10214A100);
  return qword_102310A60;
}

void sub_100661D44(_QWORD *a1)
{
  sub_101221A60(a1);
  operator delete();
}

double sub_100661D68(uint64_t a1, int a2, double *a3)
{
  NSObject *v4;
  double v5;
  const char *v6;
  uint8_t *v7;
  double v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  int v15;
  double v16;
  uint8_t buf[4];
  double v18;

  if (a2)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_10214A188);
    v4 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v18) = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "[AccessoryHeartRate] Unrecognized update interval notification %{public}d", buf, 8u);
    }
    v5 = 0.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_10214A188);
      v15 = 67240192;
      LODWORD(v16) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 17, "[AccessoryHeartRate] Unrecognized update interval notification %{public}d", &v15, 8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccessoryHeartRate::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    sub_101221BDC(a1);
    v10 = *a3;
    if (*a3 > 0.0)
      *(_BYTE *)(a1 + 30) = 0;
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_10214A188);
    v5 = fmax(v10, 1.0);
    v11 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349056;
      v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "[AccessoryHeartRate] Setting update interval to %{public}f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_10214A188);
      v15 = 134349056;
      v16 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 1, "[AccessoryHeartRate] Setting update interval to %{public}f", &v15, 12);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryHeartRate::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    sub_10006B4E0(*(_QWORD *)(a1 + 32), v5);
  }
  return v5;
}

void sub_10066209C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DataValue;
  uint64_t IntegerValue;
  int v8;
  unint64_t TimeStamp;
  double v10;
  int v11;
  uint64_t v18;
  int v19;
  NSObject *v20;
  NSObject *v22;
  const char *v23;
  NSObject *v24;
  const char *v26;
  uint8_t *v27;
  uint8_t *v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  __int16 v35;
  _BYTE v36[14];
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  double v40;
  __int16 v41;
  int v42;
  __int16 v43;
  uint64_t v44;
  uint8_t buf[4];
  int v46;
  __int16 v47;
  _BYTE v48[14];
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  double v52;
  __int16 v53;
  int v54;
  __int16 v55;
  uint64_t v56;

  DataValue = IOHIDEventGetDataValue(a4, 65540);
  IntegerValue = IOHIDEventGetIntegerValue(a4, 65539);
  if (!DataValue)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_10214A188);
    v22 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "[AccessoryHeartRate] Invalid payload", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_10214A188);
    LOWORD(v33) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[AccessoryHeartRate] Invalid payload", &v33, 2);
LABEL_30:
    v28 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLAccessoryHeartRate::onEventData(void *, void *, IOHIDEventRef)", "%s\n", v23);
    if (v28 != buf)
      free(v28);
    return;
  }
  v8 = IntegerValue;
  if (IntegerValue == 16)
  {
    TimeStamp = IOHIDEventGetTimeStamp(a4);
    v10 = sub_100127828(TimeStamp);
    v29 = v10;
    v11 = *(unsigned __int8 *)(DataValue + 13);
    LODWORD(v30) = v11;
    _H9 = *(_WORD *)(DataValue + 14);
    __asm { FCVT            S0, H9 }
    HIDWORD(v30) = _S0;
    v18 = *(_QWORD *)(DataValue + 5);
    v31 = v18;
    v19 = *(_DWORD *)(DataValue + 1);
    LODWORD(v32) = v19;
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_10214A188);
    v20 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEBUG))
    {
      __asm { FCVT            D1, H9 }
      *(_DWORD *)buf = 67241731;
      v46 = v19;
      v47 = 1025;
      *(_DWORD *)v48 = v11;
      *(_WORD *)&v48[4] = 2050;
      *(_QWORD *)&v48[6] = _D1;
      v49 = 2050;
      v50 = v18;
      v51 = 2050;
      v52 = v10;
      v53 = 1040;
      v54 = 16;
      v55 = 2097;
      v56 = DataValue;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "[AccessoryHeartRate] seq,%{public}d,heartrate,%{private}u,confidence,%{public}10.10f,sensorTime,%{public}llu,timestamp,%{public}20.20f,payload,{%{private}.*P}", buf, 0x3Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_10214A188);
      __asm { FCVT            D0, H9 }
      v33 = 67241731;
      v34 = v19;
      v35 = 1025;
      *(_DWORD *)v36 = v11;
      *(_WORD *)&v36[4] = 2050;
      *(_QWORD *)&v36[6] = _D0;
      v37 = 2050;
      v38 = v18;
      v39 = 2050;
      v40 = v10;
      v41 = 1040;
      v42 = 16;
      v43 = 2097;
      v44 = DataValue;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 2, "[AccessoryHeartRate] seq,%{public}d,heartrate,%{private}u,confidence,%{public}10.10f,sensorTime,%{public}llu,timestamp,%{public}20.20f,payload,{%{private}.*P}", &v33, 60, *(_QWORD *)&v29, v30, v31, v32);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLAccessoryHeartRate::onEventData(void *, void *, IOHIDEventRef)", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
    sub_10012AC18(a1, 0, (uint64_t)&v29, 32);
    return;
  }
  if (qword_10229FD80 != -1)
    dispatch_once(&qword_10229FD80, &stru_10214A188);
  v24 = qword_10229FD88;
  if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68157955;
    v46 = v8;
    v47 = 2097;
    *(_QWORD *)v48 = DataValue;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "[AccessoryHeartRate] Invalid payload: %{private}.*P", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_10214A188);
    v33 = 68157955;
    v34 = v8;
    v35 = 2097;
    *(_QWORD *)v36 = DataValue;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[AccessoryHeartRate] Invalid payload: %{private}.*P", &v33, 18);
    goto LABEL_30;
  }
}

void sub_1006625B4(id a1)
{
  qword_10229FD88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

uint64_t sub_1006625E0(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return sub_10055D4D0(a1);
}

void sub_100663394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1006633F4(uint64_t a1, int a2, int a3, uint64_t a4)
{
  void *v5;
  uint64_t v7;
  _QWORD v8[6];
  int v9;
  int v10;

  v5 = *(void **)(a1 + 160);
  if (v5)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10066D780;
    v8[3] = &unk_10214A338;
    v9 = a2;
    v10 = a3;
    v8[4] = a4;
    v8[5] = a1;
    return objc_msgSend(v5, "async:", v8);
  }
  else
  {
    v7 = sub_101903250();
    return (id)sub_100663458(v7);
  }
}

id sub_100663458(uint64_t a1)
{
  uint64_t *v2;
  NSObject *v3;
  id v4;
  id result;
  uint64_t v6;
  unsigned int v7;
  id v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  char *v28;
  char *v29;
  _DWORD *v30;
  int v31;
  double v32;
  NSObject *v33;
  void **v34;
  uint64_t v35;
  id v36;
  id v37;
  void (*v38)(uint64_t, unsigned int *, id, id, _QWORD);
  unsigned int v39;
  NSObject *v40;
  int v41;
  uint8_t *v42;
  uint8_t *v43;
  void *p_p;
  uint64_t v45;
  id v46;
  id v47;
  void (*v48)(uint64_t, unsigned int *, int *, id, id, _QWORD);
  uint64_t v49;
  int v50;
  void **v51;
  void **v52;
  void **v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint8_t *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  id v61;
  const char *v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  void *v66[2];
  char v67;
  int v68;
  double v69;
  double v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  unsigned int v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  unint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  void *v86;
  char v87;
  uint8_t v88[8];
  __int16 v89;
  void **v90;
  __int16 v91;
  void **v92;
  void *__p;
  __int16 v94;
  uint8_t *v95;
  char v96;
  unsigned int v97;
  _BYTE v98[12];
  char *v99;
  _DWORD *v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  void *v108;
  char v109;
  _BYTE buf[18];
  __int16 v111;
  void *v112;

  v2 = &qword_1022A0000;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10214A310);
  v3 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "count");
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "AlsCell, cdma, rx, %{public}lu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214A310);
    v60 = qword_1022A0048;
    v61 = objc_msgSend(*(id *)(a1 + 32), "count");
    v97 = 134349056;
    *(_QWORD *)v98 = v61;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v60, 2, "AlsCell, cdma, rx, %{public}lu", &v97, 12);
    v63 = (char *)v62;
    sub_100512490("Generic", 1, 0, 2, "-[ALSLocationDelegate requester:didReceiveResponse:forRequest:]_block_invoke", "%s\n", v62);
    if (v63 != buf)
      free(v63);
  }
  result = objc_msgSend(*(id *)(a1 + 32), "count");
  if (result)
  {
    v6 = 0;
    v7 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    v65 = _Q0;
    do
    {
      v13 = objc_msgSend(*(id *)(a1 + 32), "objectAtIndex:", v6);
      sub_1001C4198((uint64_t)&v97);
      if (objc_msgSend(v13, "hasSid"))
        v14 = objc_msgSend(v13, "sid");
      else
        v14 = -1;
      v101 = v14;
      if (objc_msgSend(v13, "hasNid"))
        v15 = objc_msgSend(v13, "nid");
      else
        v15 = -1;
      v102 = v15;
      if (objc_msgSend(v13, "hasMcc"))
        v16 = objc_msgSend(v13, "mcc");
      else
        v16 = -1;
      v97 = v16;
      if (objc_msgSend(v13, "hasBsid"))
        v17 = objc_msgSend(v13, "bsid");
      else
        v17 = -1;
      v104 = v17;
      if (objc_msgSend(v13, "hasZoneid"))
        v18 = objc_msgSend(v13, "zoneid");
      else
        v18 = -1;
      v103 = v18;
      if (objc_msgSend(v13, "hasBandclass"))
        v19 = objc_msgSend(v13, "bandclass");
      else
        v19 = -1;
      v105 = v19;
      if (objc_msgSend(v13, "hasChannel"))
        v20 = objc_msgSend(v13, "channel");
      else
        v20 = -1;
      v106 = v20;
      if (objc_msgSend(v13, "hasPnoffset"))
        v21 = objc_msgSend(v13, "pnoffset");
      else
        v21 = -1;
      v107 = v21;
      v22 = *(_QWORD *)&v98[4];
      v99 = *(char **)&v98[4];
      if (v97 != -1)
      {
        if (*(_QWORD *)&v98[4] >= (unint64_t)v100)
        {
          v24 = ((uint64_t)v100 - *(_QWORD *)&v98[4]) >> 1;
          if (v24 <= 1)
            v24 = 1;
          if ((unint64_t)v100 - *(_QWORD *)&v98[4] >= 0x7FFFFFFFFFFFFFFCLL)
            v25 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v25 = v24;
          v27 = sub_100260634((uint64_t)&v100, v25);
          v28 = *(char **)&v98[4];
          v29 = v99;
          *v27 = v97;
          v23 = (char *)(v27 + 1);
          v30 = v27;
          while (v29 != v28)
          {
            v31 = *((_DWORD *)v29 - 1);
            v29 -= 4;
            *--v30 = v31;
          }
          *(_QWORD *)&v98[4] = v30;
          v99 = (char *)(v27 + 1);
          v100 = &v27[v26];
          if (v28)
            operator delete(v28);
        }
        else
        {
          **(_DWORD **)&v98[4] = v97;
          v23 = (char *)(v22 + 4);
        }
        v99 = v23;
      }
      sub_1005A3550(&v97, &v86);
      v68 = 0xFFFF;
      v69 = 0.0;
      v70 = 0.0;
      v71 = xmmword_101BAFC90;
      v72 = v65;
      v73 = v65;
      v74 = v65;
      v75 = 0;
      v76 = 0xBFF0000000000000;
      v77 = 0;
      v78 = 0;
      v79 = 0;
      v80 = 0xBFF0000000000000;
      v81 = 0x7FFFFFFF;
      v83 = 0;
      v84 = 0;
      v82 = 0;
      v85 = 0;
      if ((objc_msgSend(objc_msgSend(v13, "location"), "accuracy") & 0x80000000) != 0)
      {
        if (v2[8] != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A310);
        v33 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          sub_100663EE0((uint64_t)&v97, buf);
          v34 = (void **)buf;
          if (SBYTE3(v112) < 0)
            v34 = *(void ***)buf;
          *(_DWORD *)v88 = 67240451;
          *(_DWORD *)&v88[4] = v7;
          v89 = 2081;
          v90 = v34;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "AlsCell, cdma, %{public}d, unknown, %{private}s", v88, 0x12u);
          if (SBYTE3(v112) < 0)
            operator delete(*(void **)buf);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (v2[8] != -1)
            dispatch_once(&qword_1022A0040, &stru_10214A310);
          v56 = qword_1022A0048;
          sub_100663EE0((uint64_t)&v97, v88);
          v57 = v88;
          if (SBYTE3(v92) < 0)
            v57 = *(uint8_t **)v88;
          LODWORD(__p) = 67240451;
          HIDWORD(__p) = v7;
          v94 = 2081;
          v95 = v57;
          LODWORD(v64) = 18;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v56, 0, "AlsCell, cdma, %{public}d, unknown, %{private}s", &__p, v64);
          v59 = v58;
          if (SBYTE3(v92) < 0)
            operator delete(*(void **)v88);
          sub_100512490("Generic", 1, 0, 2, "-[ALSLocationDelegate requester:didReceiveResponse:forRequest:]_block_invoke", "%s\n", v59);
          if (v59 != buf)
            free(v59);
        }
        v35 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
        v36 = objc_msgSend(*(id *)(a1 + 48), "type");
        v37 = objc_msgSend(*(id *)(a1 + 48), "tag");
        v38 = *(void (**)(uint64_t, unsigned int *, id, id, _QWORD))(v35 + 256);
        if (v38)
          v38(v35, &v97, v36, v37, *(_QWORD *)(v35 + 152));
      }
      else
      {
        if ((int)objc_msgSend(objc_msgSend(v13, "location"), "accuracy") < 1000000)
          v32 = (double)(int)objc_msgSend(objc_msgSend(v13, "location"), "accuracy");
        else
          v32 = (double)(int)objc_msgSend(objc_msgSend(v13, "location"), "accuracy") / 1000000.0;
        *(double *)&v71 = v32;
        *((_QWORD *)&v74 + 1) = *(_QWORD *)(a1 + 56);
        v69 = (double)(uint64_t)objc_msgSend(objc_msgSend(v13, "location"), "latitude") / 100000000.0;
        v70 = (double)(uint64_t)objc_msgSend(objc_msgSend(v13, "location"), "longitude") / 100000000.0;
        HIDWORD(v82) = 1;
        if (objc_msgSend(objc_msgSend(v13, "location"), "hasAltitude")
          && objc_msgSend(objc_msgSend(v13, "location"), "hasVerticalAccuracy"))
        {
          *((double *)&v71 + 1) = (double)(int)objc_msgSend(objc_msgSend(v13, "location"), "altitude");
          *(double *)&v72 = (double)(int)objc_msgSend(objc_msgSend(v13, "location"), "verticalAccuracy");
        }
        if (objc_msgSend(objc_msgSend(v13, "location"), "hasConfidence"))
          v39 = objc_msgSend(objc_msgSend(v13, "location"), "confidence");
        else
          v39 = 70;
        v75 = v39;
        if (v2[8] != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A310);
        v40 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          sub_100663EE0((uint64_t)&v97, v88);
          v41 = SBYTE3(v92);
          v42 = *(uint8_t **)v88;
          sub_100B61B98((uint64_t)&v68, &__p);
          v43 = v88;
          if (v41 < 0)
            v43 = v42;
          p_p = &__p;
          if (v96 < 0)
            p_p = __p;
          *(_DWORD *)buf = 67240707;
          *(_DWORD *)&buf[4] = v7;
          *(_WORD *)&buf[8] = 2081;
          *(_QWORD *)&buf[10] = v43;
          v111 = 2081;
          v112 = p_p;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "AlsCell, cdma, %{public}d, valid, %{private}s, location, %{private}s", buf, 0x1Cu);
          if (v96 < 0)
            operator delete(__p);
          v2 = &qword_1022A0000;
          if (SBYTE3(v92) < 0)
            operator delete(*(void **)v88);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (v2[8] != -1)
            dispatch_once(&qword_1022A0040, &stru_10214A310);
          v49 = qword_1022A0048;
          sub_100663EE0((uint64_t)&v97, &__p);
          v50 = v96;
          v51 = (void **)__p;
          sub_100B61B98((uint64_t)&v68, v66);
          v52 = &__p;
          if (v50 < 0)
            v52 = v51;
          v53 = v66;
          if (v67 < 0)
            v53 = (void **)v66[0];
          *(_DWORD *)v88 = 67240707;
          *(_DWORD *)&v88[4] = v7;
          v89 = 2081;
          v90 = v52;
          v91 = 2081;
          v92 = v53;
          LODWORD(v64) = 28;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v49, 2, "AlsCell, cdma, %{public}d, valid, %{private}s, location, %{private}s", v88, v64);
          v55 = v54;
          if (v67 < 0)
            operator delete(v66[0]);
          v2 = &qword_1022A0000;
          if (v96 < 0)
            operator delete(__p);
          sub_100512490("Generic", 1, 0, 2, "-[ALSLocationDelegate requester:didReceiveResponse:forRequest:]_block_invoke", "%s\n", v55);
          if (v55 != buf)
            free(v55);
        }
        v45 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
        v46 = objc_msgSend(*(id *)(a1 + 48), "type");
        v47 = objc_msgSend(*(id *)(a1 + 48), "tag");
        v48 = *(void (**)(uint64_t, unsigned int *, int *, id, id, _QWORD))(v45 + 248);
        if (v48)
          v48(v45, &v97, &v68, v46, v47, *(_QWORD *)(v45 + 152));
      }
      if (v87 < 0)
        operator delete(v86);
      if (v109 < 0)
        operator delete(v108);
      if (*(_QWORD *)&v98[4])
      {
        v99 = *(char **)&v98[4];
        operator delete(*(void **)&v98[4]);
      }
      result = objc_msgSend(*(id *)(a1 + 32), "count");
      v6 = ++v7;
    }
    while ((unint64_t)result > v7);
  }
  return result;
}

void sub_100663E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  if (a49 < 0)
    operator delete(__p);
  sub_100664030((uint64_t)&a58);
  _Unwind_Resume(a1);
}

uint64_t sub_100663EE0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned int *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v14[2];
  uint64_t v15;
  _QWORD v16[10];
  char v17;
  uint64_t v18;

  sub_100263E50((uint64_t)v14);
  v4 = *(unsigned int **)(a1 + 8);
  if (*(unsigned int **)(a1 + 16) == v4)
    v5 = 0xFFFFFFFFLL;
  else
    v5 = *v4;
  v6 = (_QWORD *)std::ostream::operator<<(&v15, v5);
  v7 = sub_100263F7C(v6, (uint64_t)".", 1);
  v8 = (_QWORD *)std::ostream::operator<<(v7, *(unsigned int *)(a1 + 32));
  v9 = sub_100263F7C(v8, (uint64_t)".", 1);
  v10 = (_QWORD *)std::ostream::operator<<(v9, *(unsigned int *)(a1 + 36));
  v11 = sub_100263F7C(v10, (uint64_t)".", 1);
  std::ostream::operator<<(v11, *(unsigned int *)(a1 + 44));
  std::stringbuf::str(a2, v16);
  *(_QWORD *)((char *)v14
  v15 = v12;
  if (v17 < 0)
    operator delete((void *)v16[8]);
  std::streambuf::~streambuf(v16);
  return std::ios::~ios(&v18);
}

void sub_100663FF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100664008(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);

  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(result + 256);
  if (v4)
    return v4(result, a2, a3, a4, *(_QWORD *)(result + 152));
  return result;
}

uint64_t sub_10066401C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(result + 248);
  if (v5)
    return v5(result, a2, a3, a4, a5, *(_QWORD *)(result + 152));
  return result;
}

uint64_t sub_100664030(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 263) < 0)
    operator delete(*(void **)(a1 + 240));
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

id sub_100664070(uint64_t a1)
{
  NSObject *v2;
  id v3;
  id result;
  unint64_t v5;
  unsigned int v11;
  id v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  _BOOL4 v16;
  int v17;
  double v18;
  unsigned int v19;
  NSObject *v20;
  void **v21;
  uint64_t v22;
  id v23;
  id v24;
  void (*v25)(uint64_t, uint64_t *, id, id, _QWORD);
  NSObject *v26;
  int v27;
  uint8_t *v28;
  uint8_t *v29;
  void *p_p;
  uint64_t v31;
  id v32;
  id v33;
  void (*v34)(uint64_t, uint64_t *, int *, id, id, _QWORD);
  unsigned int v35;
  int v36;
  void **v37;
  void **v38;
  void **v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint8_t *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  id v47;
  const char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  void *v53[2];
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  __int128 v64;
  uint8_t v65[8];
  __int16 v66;
  void **v67;
  __int16 v68;
  void **v69;
  void *__p;
  __int16 v71;
  uint8_t *v72;
  char v73;
  int v74;
  double v75;
  double v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  unsigned int v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  _BYTE buf[18];
  __int16 v93;
  void *v94;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10214A310);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v3 = objc_msgSend(*(id *)(a1 + 32), "count");
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "AlsCell, lte, rx, %{public}lu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214A310);
    v46 = qword_1022A0048;
    v47 = objc_msgSend(*(id *)(a1 + 32), "count");
    v74 = 134349056;
    v75 = *(double *)&v47;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v46, 2, "AlsCell, lte, rx, %{public}lu", &v74, 12);
    v49 = (char *)v48;
    sub_100512490("Generic", 1, 0, 2, "-[ALSLocationDelegate requester:didReceiveResponse:forRequest:]_block_invoke", "%s\n", v48);
    if (v49 != buf)
      free(v49);
  }
  result = objc_msgSend(*(id *)(a1 + 32), "count");
  if (result)
  {
    v5 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    v52 = _Q0;
    v11 = 1;
    do
    {
      v12 = objc_msgSend(*(id *)(a1 + 32), "objectAtIndex:", v5);
      v56 = -1;
      v57 = -1;
      v55 = -1;
      v58 = -1;
      v59 = 0;
      v60 = 0;
      v61 = -1;
      v62 = -1;
      v63 = -1;
      v64 = xmmword_101BB6FC0;
      LODWORD(v55) = objc_msgSend(v12, "mcc");
      HIDWORD(v55) = objc_msgSend(v12, "mnc");
      LODWORD(v56) = objc_msgSend(v12, "tacID");
      HIDWORD(v56) = objc_msgSend(v12, "cellID");
      if (objc_msgSend(v12, "hasUarfcn"))
        v13 = objc_msgSend(v12, "uarfcn");
      else
        v13 = -1;
      LODWORD(v57) = v13;
      if (objc_msgSend(v12, "hasPid"))
        v14 = objc_msgSend(v12, "pid");
      else
        v14 = -1;
      HIDWORD(v57) = v14;
      v75 = 0.0;
      v76 = 0.0;
      v77 = xmmword_101BAFC90;
      v78 = v52;
      v79 = v52;
      v80 = v52;
      v74 = 0xFFFF;
      v81 = 0;
      v82 = 0xBFF0000000000000;
      v83 = 0;
      v84 = 0;
      v85 = 0;
      v86 = 0xBFF0000000000000;
      v87 = 0x7FFFFFFF;
      v89 = 0;
      v90 = 0;
      v88 = 0;
      v91 = 0;
      v15 = v11 - 1;
      if ((objc_msgSend(objc_msgSend(v12, "location"), "accuracy") & 0x80000000) != 0)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A310);
        v20 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          sub_1001C35D0((unsigned int *)&v55, buf);
          v21 = (void **)buf;
          if (SBYTE3(v94) < 0)
            v21 = *(void ***)buf;
          *(_DWORD *)v65 = 67240451;
          *(_DWORD *)&v65[4] = v11 - 1;
          v66 = 2081;
          v67 = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "AlsCell, lte, %{public}d, unknown, %{private}s", v65, 0x12u);
          if (SBYTE3(v94) < 0)
            operator delete(*(void **)buf);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10214A310);
          v42 = qword_1022A0048;
          sub_1001C35D0((unsigned int *)&v55, v65);
          v43 = v65;
          if (SBYTE3(v69) < 0)
            v43 = *(uint8_t **)v65;
          LODWORD(__p) = 67240451;
          HIDWORD(__p) = v11 - 1;
          v71 = 2081;
          v72 = v43;
          LODWORD(v50) = 18;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v42, 0, "AlsCell, lte, %{public}d, unknown, %{private}s", &__p, v50);
          v45 = v44;
          if (SBYTE3(v69) < 0)
            operator delete(*(void **)v65);
          sub_100512490("Generic", 1, 0, 2, "-[ALSLocationDelegate requester:didReceiveResponse:forRequest:]_block_invoke", "%s\n", v45);
          if (v45 != buf)
            free(v45);
        }
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
        v23 = objc_msgSend(*(id *)(a1 + 48), "type");
        v24 = objc_msgSend(*(id *)(a1 + 48), "tag");
        v25 = *(void (**)(uint64_t, uint64_t *, id, id, _QWORD))(v22 + 272);
        if (v25)
          v25(v22, &v55, v23, v24, *(_QWORD *)(v22 + 152));
      }
      else
      {
        v16 = (int)objc_msgSend(objc_msgSend(v12, "location"), "accuracy") > 999999;
        v17 = objc_msgSend(objc_msgSend(v12, "location"), "accuracy");
        v18 = (double)v17;
        if (v16)
          v18 = (double)v17 / 1000000.0;
        *(double *)&v77 = v18;
        *((_QWORD *)&v80 + 1) = *(_QWORD *)(a1 + 56);
        v75 = (double)(uint64_t)objc_msgSend(objc_msgSend(v12, "location"), "latitude") / 100000000.0;
        v76 = (double)(uint64_t)objc_msgSend(objc_msgSend(v12, "location"), "longitude") / 100000000.0;
        HIDWORD(v88) = 1;
        if (objc_msgSend(objc_msgSend(v12, "location"), "hasAltitude")
          && objc_msgSend(objc_msgSend(v12, "location"), "hasVerticalAccuracy"))
        {
          *((double *)&v77 + 1) = (double)(int)objc_msgSend(objc_msgSend(v12, "location"), "altitude");
          *(double *)&v78 = (double)(int)objc_msgSend(objc_msgSend(v12, "location"), "verticalAccuracy");
        }
        if (objc_msgSend(objc_msgSend(v12, "location"), "hasConfidence"))
          v19 = objc_msgSend(objc_msgSend(v12, "location"), "confidence");
        else
          v19 = 70;
        v81 = v19;
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A310);
        v26 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          sub_1001C35D0((unsigned int *)&v55, v65);
          v27 = SBYTE3(v69);
          v28 = *(uint8_t **)v65;
          sub_100B61B98((uint64_t)&v74, &__p);
          v29 = v65;
          if (v27 < 0)
            v29 = v28;
          p_p = &__p;
          if (v73 < 0)
            p_p = __p;
          *(_DWORD *)buf = 67240707;
          v15 = v11 - 1;
          *(_DWORD *)&buf[4] = v11 - 1;
          *(_WORD *)&buf[8] = 2081;
          *(_QWORD *)&buf[10] = v29;
          v93 = 2081;
          v94 = p_p;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "AlsCell, lte, %{public}d, valid, %{private}s, location, %{private}s", buf, 0x1Cu);
          if (v73 < 0)
            operator delete(__p);
          if (SBYTE3(v69) < 0)
            operator delete(*(void **)v65);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10214A310);
          v51 = qword_1022A0048;
          sub_1001C35D0((unsigned int *)&v55, &__p);
          v35 = v15;
          v36 = v73;
          v37 = (void **)__p;
          sub_100B61B98((uint64_t)&v74, v53);
          v38 = &__p;
          if (v36 < 0)
            v38 = v37;
          v39 = v53;
          if (v54 < 0)
            v39 = (void **)v53[0];
          *(_DWORD *)v65 = 67240707;
          *(_DWORD *)&v65[4] = v35;
          v66 = 2081;
          v67 = v38;
          v68 = 2081;
          v69 = v39;
          LODWORD(v50) = 28;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v51, 2, "AlsCell, lte, %{public}d, valid, %{private}s, location, %{private}s", v65, v50);
          v41 = v40;
          if (v54 < 0)
            operator delete(v53[0]);
          if (v73 < 0)
            operator delete(__p);
          sub_100512490("Generic", 1, 0, 2, "-[ALSLocationDelegate requester:didReceiveResponse:forRequest:]_block_invoke", "%s\n", v41);
          if (v41 != buf)
            free(v41);
        }
        v31 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
        v32 = objc_msgSend(*(id *)(a1 + 48), "type");
        v33 = objc_msgSend(*(id *)(a1 + 48), "tag");
        v34 = *(void (**)(uint64_t, uint64_t *, int *, id, id, _QWORD))(v31 + 264);
        if (v34)
          v34(v31, &v55, &v74, v32, v33, *(_QWORD *)(v31 + 152));
      }
      result = objc_msgSend(*(id *)(a1 + 32), "count");
      v5 = v11++;
    }
    while ((unint64_t)result > v5);
  }
  return result;
}

void sub_100664990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a53 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006649C8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);

  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(result + 272);
  if (v4)
    return v4(result, a2, a3, a4, *(_QWORD *)(result + 152));
  return result;
}

uint64_t sub_1006649DC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(result + 264);
  if (v5)
    return v5(result, a2, a3, a4, a5, *(_QWORD *)(result + 152));
  return result;
}

id sub_1006649F0(uint64_t a1)
{
  NSObject *v2;
  id v3;
  id result;
  unint64_t v5;
  unsigned int v11;
  id v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  _BOOL4 v19;
  int v20;
  double v21;
  unsigned int v22;
  NSObject *v23;
  void **v24;
  uint64_t v25;
  id v26;
  id v27;
  void (*v28)(uint64_t, uint64_t *, id, id, _QWORD);
  NSObject *v29;
  int v30;
  uint8_t *v31;
  uint8_t *v32;
  void *p_p;
  uint64_t v34;
  id v35;
  id v36;
  void (*v37)(uint64_t, uint64_t *, int *, id, id, _QWORD);
  unsigned int v38;
  int v39;
  void **v40;
  void **v41;
  void **v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint8_t *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  id v50;
  const char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  void *v56[2];
  char v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int v69;
  uint8_t v70[8];
  __int16 v71;
  void **v72;
  __int16 v73;
  void **v74;
  void *__p;
  __int16 v76;
  uint8_t *v77;
  char v78;
  int v79;
  double v80;
  double v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  unsigned int v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  unint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  _BYTE buf[18];
  __int16 v98;
  void *v99;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10214A310);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v3 = objc_msgSend(*(id *)(a1 + 32), "count");
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "AlsCell, nr, rx, %{public}lu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214A310);
    v49 = qword_1022A0048;
    v50 = objc_msgSend(*(id *)(a1 + 32), "count");
    v79 = 134349056;
    v80 = *(double *)&v50;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v49, 2, "AlsCell, nr, rx, %{public}lu", &v79, 12);
    v52 = (char *)v51;
    sub_100512490("Generic", 1, 0, 2, "-[ALSLocationDelegate requester:didReceiveResponse:forRequest:]_block_invoke", "%s\n", v51);
    if (v52 != buf)
      free(v52);
  }
  result = objc_msgSend(*(id *)(a1 + 32), "count");
  if (result)
  {
    v5 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    v55 = _Q0;
    v11 = 1;
    do
    {
      v12 = objc_msgSend(*(id *)(a1 + 32), "objectAtIndex:", v5);
      v58 = -1;
      v59 = -1;
      v60 = -1;
      v61 = -1;
      v62 = -1;
      v63 = 0;
      v64 = 0;
      v65 = -1;
      v66 = -1;
      v67 = -1;
      v68 = 0xFFFFFFFF00000000;
      v69 = -1;
      if (objc_msgSend(v12, "hasMcc"))
        v13 = objc_msgSend(v12, "mcc");
      else
        v13 = -1;
      LODWORD(v58) = v13;
      if (objc_msgSend(v12, "hasMnc"))
        v14 = objc_msgSend(v12, "mnc");
      else
        v14 = -1;
      HIDWORD(v58) = v14;
      if (objc_msgSend(v12, "hasTacID"))
        v15 = objc_msgSend(v12, "tacID");
      else
        v15 = -1;
      v59 = v15;
      if (objc_msgSend(v12, "hasCellID"))
        v16 = (uint64_t)objc_msgSend(v12, "cellID");
      else
        v16 = -1;
      v60 = v16;
      if (objc_msgSend(v12, "hasNrarfcn"))
        v17 = objc_msgSend(v12, "nrarfcn");
      else
        v17 = -1;
      LODWORD(v61) = v17;
      v80 = 0.0;
      v81 = 0.0;
      v82 = xmmword_101BAFC90;
      v83 = v55;
      v84 = v55;
      v85 = v55;
      v79 = 0xFFFF;
      v86 = 0;
      v87 = 0xBFF0000000000000;
      v88 = 0;
      v89 = 0;
      v90 = 0;
      v91 = 0xBFF0000000000000;
      v92 = 0x7FFFFFFF;
      v94 = 0;
      v95 = 0;
      v93 = 0;
      v96 = 0;
      v18 = v11 - 1;
      if ((objc_msgSend(objc_msgSend(v12, "location"), "accuracy") & 0x80000000) != 0)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A310);
        v23 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          sub_10066537C((unsigned int *)&v58, buf);
          v24 = (void **)buf;
          if (SBYTE3(v99) < 0)
            v24 = *(void ***)buf;
          *(_DWORD *)v70 = 67240451;
          *(_DWORD *)&v70[4] = v11 - 1;
          v71 = 2081;
          v72 = v24;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "AlsCell, nr, %{public}d, unknown, %{private}s", v70, 0x12u);
          if (SBYTE3(v99) < 0)
            operator delete(*(void **)buf);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10214A310);
          v45 = qword_1022A0048;
          sub_10066537C((unsigned int *)&v58, v70);
          v46 = v70;
          if (SBYTE3(v74) < 0)
            v46 = *(uint8_t **)v70;
          LODWORD(__p) = 67240451;
          HIDWORD(__p) = v11 - 1;
          v76 = 2081;
          v77 = v46;
          LODWORD(v53) = 18;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v45, 0, "AlsCell, nr, %{public}d, unknown, %{private}s", &__p, v53);
          v48 = v47;
          if (SBYTE3(v74) < 0)
            operator delete(*(void **)v70);
          sub_100512490("Generic", 1, 0, 2, "-[ALSLocationDelegate requester:didReceiveResponse:forRequest:]_block_invoke", "%s\n", v48);
          if (v48 != buf)
            free(v48);
        }
        v25 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
        v26 = objc_msgSend(*(id *)(a1 + 48), "type");
        v27 = objc_msgSend(*(id *)(a1 + 48), "tag");
        v28 = *(void (**)(uint64_t, uint64_t *, id, id, _QWORD))(v25 + 288);
        if (v28)
          v28(v25, &v58, v26, v27, *(_QWORD *)(v25 + 152));
      }
      else
      {
        v19 = (int)objc_msgSend(objc_msgSend(v12, "location"), "accuracy") > 999999;
        v20 = objc_msgSend(objc_msgSend(v12, "location"), "accuracy");
        v21 = (double)v20;
        if (v19)
          v21 = (double)v20 / 1000000.0;
        *(double *)&v82 = v21;
        *((_QWORD *)&v85 + 1) = *(_QWORD *)(a1 + 56);
        v80 = (double)(uint64_t)objc_msgSend(objc_msgSend(v12, "location"), "latitude") / 100000000.0;
        v81 = (double)(uint64_t)objc_msgSend(objc_msgSend(v12, "location"), "longitude") / 100000000.0;
        HIDWORD(v93) = 1;
        if (objc_msgSend(objc_msgSend(v12, "location"), "hasAltitude")
          && objc_msgSend(objc_msgSend(v12, "location"), "hasVerticalAccuracy"))
        {
          *((double *)&v82 + 1) = (double)(int)objc_msgSend(objc_msgSend(v12, "location"), "altitude");
          *(double *)&v83 = (double)(int)objc_msgSend(objc_msgSend(v12, "location"), "verticalAccuracy");
        }
        if (objc_msgSend(objc_msgSend(v12, "location"), "hasConfidence"))
          v22 = objc_msgSend(objc_msgSend(v12, "location"), "confidence");
        else
          v22 = 70;
        v86 = v22;
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A310);
        v29 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          sub_10066537C((unsigned int *)&v58, v70);
          v30 = SBYTE3(v74);
          v31 = *(uint8_t **)v70;
          sub_100B61B98((uint64_t)&v79, &__p);
          v32 = v70;
          if (v30 < 0)
            v32 = v31;
          p_p = &__p;
          if (v78 < 0)
            p_p = __p;
          *(_DWORD *)buf = 67240707;
          v18 = v11 - 1;
          *(_DWORD *)&buf[4] = v11 - 1;
          *(_WORD *)&buf[8] = 2081;
          *(_QWORD *)&buf[10] = v32;
          v98 = 2081;
          v99 = p_p;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "AlsCell, nr, %{public}d, valid, %{private}s, location, %{private}s", buf, 0x1Cu);
          if (v78 < 0)
            operator delete(__p);
          if (SBYTE3(v74) < 0)
            operator delete(*(void **)v70);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10214A310);
          v54 = qword_1022A0048;
          sub_10066537C((unsigned int *)&v58, &__p);
          v38 = v18;
          v39 = v78;
          v40 = (void **)__p;
          sub_100B61B98((uint64_t)&v79, v56);
          v41 = &__p;
          if (v39 < 0)
            v41 = v40;
          v42 = v56;
          if (v57 < 0)
            v42 = (void **)v56[0];
          *(_DWORD *)v70 = 67240707;
          *(_DWORD *)&v70[4] = v38;
          v71 = 2081;
          v72 = v41;
          v73 = 2081;
          v74 = v42;
          LODWORD(v53) = 28;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v54, 2, "AlsCell, nr, %{public}d, valid, %{private}s, location, %{private}s", v70, v53);
          v44 = v43;
          if (v57 < 0)
            operator delete(v56[0]);
          if (v78 < 0)
            operator delete(__p);
          sub_100512490("Generic", 1, 0, 2, "-[ALSLocationDelegate requester:didReceiveResponse:forRequest:]_block_invoke", "%s\n", v44);
          if (v44 != buf)
            free(v44);
        }
        v34 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
        v35 = objc_msgSend(*(id *)(a1 + 48), "type");
        v36 = objc_msgSend(*(id *)(a1 + 48), "tag");
        v37 = *(void (**)(uint64_t, uint64_t *, int *, id, id, _QWORD))(v34 + 280);
        if (v37)
          v37(v34, &v58, &v79, v35, v36, *(_QWORD *)(v34 + 152));
      }
      result = objc_msgSend(*(id *)(a1 + 32), "count");
      v5 = v11++;
    }
    while ((unint64_t)result > v5);
  }
  return result;
}

void sub_100665344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a51 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10066537C@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;
  _QWORD v14[10];
  char v15;
  uint64_t v16;

  sub_100263E50((uint64_t)v12);
  v4 = (_QWORD *)std::ostream::operator<<(&v13, *a1);
  v5 = sub_100263F7C(v4, (uint64_t)".", 1);
  v6 = (_QWORD *)std::ostream::operator<<(v5, a1[1]);
  v7 = sub_100263F7C(v6, (uint64_t)".", 1);
  v8 = (_QWORD *)std::ostream::operator<<(v7, a1[2]);
  v9 = sub_100263F7C(v8, (uint64_t)".", 1);
  std::ostream::operator<<(v9, *((_QWORD *)a1 + 2));
  std::stringbuf::str(a2, v14);
  *(_QWORD *)((char *)v12
  v13 = v10;
  if (v15 < 0)
    operator delete((void *)v14[8]);
  std::streambuf::~streambuf(v14);
  return std::ios::~ios(&v16);
}

void sub_10066547C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100665490(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);

  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(result + 288);
  if (v4)
    return v4(result, a2, a3, a4, *(_QWORD *)(result + 152));
  return result;
}

uint64_t sub_1006654A4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(result + 280);
  if (v5)
    return v5(result, a2, a3, a4, a5, *(_QWORD *)(result + 152));
  return result;
}

void sub_100665858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_100665FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_100666024(uint64_t a1, int a2, int a3)
{
  void *v4;
  uint64_t v6;
  _QWORD v7[5];
  int v8;
  int v9;

  v4 = *(void **)(a1 + 160);
  if (v4)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10066D844;
    v7[3] = &unk_102143528;
    v7[4] = a1;
    v8 = a2;
    v9 = a3;
    return objc_msgSend(v4, "async:", v7);
  }
  else
  {
    v6 = sub_1019033B8();
    return (id)sub_100666088(v6);
  }
}

void sub_100666088(uint64_t a1, int a2, int a3)
{
  void *v4;
  ALSLocationDelegate *v5;
  SEL v6;
  id v7;
  _QWORD v8[5];
  int v9;
  int v10;

  v4 = *(void **)(a1 + 160);
  if (v4)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10066D864;
    v8[3] = &unk_102143528;
    v8[4] = a1;
    v9 = a2;
    v10 = a3;
    objc_msgSend(v4, "async:", v8);
  }
  else
  {
    v5 = (ALSLocationDelegate *)sub_101903520();
    -[ALSLocationDelegate finished:](v5, v6, v7);
  }
}

void sub_1006662F8(uint64_t a1, int a2, int a3)
{
  void *v4;
  ALSLocationDelegate *v5;
  SEL v6;
  id v7;
  int v8;
  int v9;
  double v10;
  _QWORD v11[5];
  int v12;
  int v13;
  _NSRange v14;

  v4 = *(void **)(a1 + 160);
  if (v4)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10066D8B0;
    v11[3] = &unk_102143528;
    v11[4] = a1;
    v12 = a2;
    v13 = a3;
    objc_msgSend(v4, "async:", v11);
  }
  else
  {
    v5 = (ALSLocationDelegate *)sub_101903688();
    -[ALSLocationDelegate processCells:inRange:timeReceived:requestType:tag:](v5, v6, v7, v14, v10, v8, v9);
  }
}

_QWORD *sub_100666588(_QWORD *result)
{
  unint64_t v1;
  _QWORD *v2;
  id v8;
  __int128 v9;
  unsigned int v10;
  unsigned int v11;
  _BOOL4 v12;
  int v13;
  double v14;
  unsigned int v15;
  NSObject *v16;
  _BYTE *v17;
  uint64_t (*v18)(_QWORD *, __int128 *, _QWORD, _QWORD, _QWORD);
  NSObject *v19;
  int v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t (*v24)(_QWORD *, __int128 *, int *, _QWORD, _QWORD, _QWORD);
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  void **v28;
  char *v29;
  char *v30;
  uint64_t v31;
  _BYTE *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  void *v38[2];
  char v39;
  int v40;
  double v41;
  double v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  __int128 v58;
  __int128 v59;
  _BYTE buf[12];
  __int16 v61;
  _BYTE *v62;
  __int16 v63;
  void **v64;
  _BYTE v65[12];
  __int16 v66;
  _BYTE *v67;
  char v68;
  _BYTE __p[12];
  __int16 v70;
  _BYTE *v71;
  __int16 v72;
  _BYTE *v73;

  v1 = result[6];
  if (v1 < result[7] + v1)
  {
    v2 = result;
    __asm { FMOV            V0.2D, #-1.0 }
    v37 = _Q0;
    do
    {
      v8 = objc_msgSend((id)v2[4], "objectAtIndex:", v1);
      *(_QWORD *)&v9 = -1;
      *((_QWORD *)&v9 + 1) = -1;
      v59 = v9;
      v58 = v9;
      LODWORD(v58) = objc_msgSend(v8, "mcc");
      DWORD1(v58) = objc_msgSend(v8, "mnc");
      DWORD2(v58) = objc_msgSend(v8, "lacID");
      HIDWORD(v58) = objc_msgSend(v8, "cellID");
      if (objc_msgSend(v8, "hasArfcn"))
        v10 = objc_msgSend(v8, "arfcn");
      else
        v10 = -1;
      LODWORD(v59) = v10;
      if (objc_msgSend(v8, "hasPsc"))
        v11 = objc_msgSend(v8, "psc");
      else
        v11 = -1;
      DWORD1(v59) = v11;
      v40 = 0xFFFF;
      v41 = 0.0;
      v42 = 0.0;
      v43 = xmmword_101BAFC90;
      v44 = v37;
      v45 = v37;
      v46 = v37;
      v47 = 0;
      v48 = 0xBFF0000000000000;
      v49 = 0;
      v50 = 0;
      v51 = 0;
      v52 = 0xBFF0000000000000;
      v53 = 0x7FFFFFFF;
      v55 = 0;
      v56 = 0;
      v54 = 0;
      v57 = 0;
      if ((objc_msgSend(objc_msgSend(v8, "location"), "accuracy") & 0x80000000) != 0)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A310);
        v16 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          sub_1001C35D0((unsigned int *)&v58, __p);
          v17 = __p;
          if (v72 < 0)
            v17 = *(_BYTE **)__p;
          *(_DWORD *)buf = 134349315;
          *(_QWORD *)&buf[4] = v1;
          v61 = 2081;
          v62 = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "AlsCell, gsm, %{public}lu, unknown, %{private}s", buf, 0x16u);
          if (SHIBYTE(v72) < 0)
            operator delete(*(void **)__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10214A310);
          v31 = qword_1022A0048;
          sub_1001C35D0((unsigned int *)&v58, buf);
          v32 = buf;
          if (v63 < 0)
            v32 = *(_BYTE **)buf;
          *(_DWORD *)v65 = 134349315;
          *(_QWORD *)&v65[4] = v1;
          v66 = 2081;
          v67 = v32;
          LODWORD(v35) = 22;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v31, 0, "AlsCell, gsm, %{public}lu, unknown, %{private}s", v65, v35);
          v34 = v33;
          if (SHIBYTE(v63) < 0)
            operator delete(*(void **)buf);
          sub_100512490("Generic", 1, 0, 2, "-[ALSLocationDelegate processCells:inRange:timeReceived:requestType:tag:]_block_invoke", "%s\n", v34);
          if (v34 != __p)
            free(v34);
        }
        result = *(_QWORD **)(v2[5] + 16);
        v18 = (uint64_t (*)(_QWORD *, __int128 *, _QWORD, _QWORD, _QWORD))result[23];
        if (v18)
          result = (_QWORD *)v18(result, &v58, *((unsigned int *)v2 + 18), *((unsigned int *)v2 + 19), result[19]);
      }
      else
      {
        v12 = (int)objc_msgSend(objc_msgSend(v8, "location"), "accuracy") > 999999;
        v13 = objc_msgSend(objc_msgSend(v8, "location"), "accuracy");
        v14 = (double)v13;
        if (v12)
          v14 = (double)v13 / 1000000.0;
        *(double *)&v43 = v14;
        *((_QWORD *)&v46 + 1) = v2[8];
        v41 = (double)(uint64_t)objc_msgSend(objc_msgSend(v8, "location"), "latitude") / 100000000.0;
        v42 = (double)(uint64_t)objc_msgSend(objc_msgSend(v8, "location"), "longitude") / 100000000.0;
        HIDWORD(v54) = 1;
        if (objc_msgSend(objc_msgSend(v8, "location"), "hasAltitude")
          && objc_msgSend(objc_msgSend(v8, "location"), "hasVerticalAccuracy"))
        {
          *((double *)&v43 + 1) = (double)(int)objc_msgSend(objc_msgSend(v8, "location"), "altitude");
          *(double *)&v44 = (double)(int)objc_msgSend(objc_msgSend(v8, "location"), "verticalAccuracy");
        }
        if (objc_msgSend(objc_msgSend(v8, "location"), "hasConfidence"))
          v15 = objc_msgSend(objc_msgSend(v8, "location"), "confidence");
        else
          v15 = 70;
        v47 = v15;
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A310);
        v19 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          sub_1001C35D0((unsigned int *)&v58, buf);
          v20 = SHIBYTE(v63);
          v21 = *(_BYTE **)buf;
          sub_100B61B98((uint64_t)&v40, v65);
          v22 = buf;
          if (v20 < 0)
            v22 = v21;
          v23 = v65;
          if (v68 < 0)
            v23 = *(_BYTE **)v65;
          *(_DWORD *)__p = 134349571;
          *(_QWORD *)&__p[4] = v1;
          v70 = 2081;
          v71 = v22;
          v72 = 2081;
          v73 = v23;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "AlsCell, gsm, %{public}lu, valid, %{private}s, location, %{private}s", __p, 0x20u);
          if (v68 < 0)
            operator delete(*(void **)v65);
          if (SHIBYTE(v63) < 0)
            operator delete(*(void **)buf);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10214A310);
          v25 = qword_1022A0048;
          sub_1001C35D0((unsigned int *)&v58, v65);
          v36 = v25;
          LODWORD(v25) = v68;
          v26 = *(_BYTE **)v65;
          sub_100B61B98((uint64_t)&v40, v38);
          v27 = v65;
          if ((int)v25 < 0)
            v27 = v26;
          v28 = v38;
          if (v39 < 0)
            v28 = (void **)v38[0];
          *(_DWORD *)buf = 134349571;
          *(_QWORD *)&buf[4] = v1;
          v61 = 2081;
          v62 = v27;
          v63 = 2081;
          v64 = v28;
          LODWORD(v35) = 32;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v36, 2, "AlsCell, gsm, %{public}lu, valid, %{private}s, location, %{private}s", buf, v35);
          v30 = v29;
          if (v39 < 0)
            operator delete(v38[0]);
          if (v68 < 0)
            operator delete(*(void **)v65);
          sub_100512490("Generic", 1, 0, 2, "-[ALSLocationDelegate processCells:inRange:timeReceived:requestType:tag:]_block_invoke", "%s\n", v30);
          if (v30 != __p)
            free(v30);
        }
        result = *(_QWORD **)(v2[5] + 16);
        v24 = (uint64_t (*)(_QWORD *, __int128 *, int *, _QWORD, _QWORD, _QWORD))result[22];
        if (v24)
          result = (_QWORD *)v24(result, &v58, &v40, *((unsigned int *)v2 + 18), *((unsigned int *)v2 + 19), result[19]);
      }
      ++v1;
    }
    while (v1 < v2[7] + v2[6]);
  }
  return result;
}

void sub_100666C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a61 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100666CC8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);

  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(result + 184);
  if (v4)
    return v4(result, a2, a3, a4, *(_QWORD *)(result + 152));
  return result;
}

uint64_t sub_100666CDC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(result + 176);
  if (v5)
    return v5(result, a2, a3, a4, a5, *(_QWORD *)(result + 152));
  return result;
}

_QWORD *sub_100666F1C(_QWORD *result)
{
  unint64_t v1;
  _QWORD *v2;
  id v8;
  __int128 v9;
  unsigned int v10;
  unsigned int v11;
  _BOOL4 v12;
  int v13;
  double v14;
  unsigned int v15;
  NSObject *v16;
  _BYTE *v17;
  uint64_t (*v18)(_QWORD *, __int128 *, _QWORD, _QWORD, _QWORD);
  NSObject *v19;
  int v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t (*v24)(_QWORD *, __int128 *, int *, _QWORD, _QWORD, _QWORD);
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  void **v28;
  char *v29;
  char *v30;
  uint64_t v31;
  _BYTE *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  void *v38[2];
  char v39;
  int v40;
  double v41;
  double v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  __int128 v58;
  __int128 v59;
  _BYTE buf[12];
  __int16 v61;
  _BYTE *v62;
  __int16 v63;
  void **v64;
  _BYTE v65[12];
  __int16 v66;
  _BYTE *v67;
  char v68;
  _BYTE __p[12];
  __int16 v70;
  _BYTE *v71;
  __int16 v72;
  _BYTE *v73;

  v1 = result[6];
  if (v1 < result[7] + v1)
  {
    v2 = result;
    __asm { FMOV            V0.2D, #-1.0 }
    v37 = _Q0;
    do
    {
      v8 = objc_msgSend((id)v2[4], "objectAtIndex:", v1);
      *(_QWORD *)&v9 = -1;
      *((_QWORD *)&v9 + 1) = -1;
      v59 = v9;
      v58 = v9;
      LODWORD(v58) = objc_msgSend(v8, "mcc");
      DWORD1(v58) = objc_msgSend(v8, "mnc");
      DWORD2(v58) = objc_msgSend(v8, "lacID");
      HIDWORD(v58) = objc_msgSend(v8, "cellID");
      if (objc_msgSend(v8, "hasArfcn"))
        v10 = objc_msgSend(v8, "arfcn");
      else
        v10 = -1;
      LODWORD(v59) = v10;
      if (objc_msgSend(v8, "hasPsc"))
        v11 = objc_msgSend(v8, "psc");
      else
        v11 = -1;
      DWORD1(v59) = v11;
      v40 = 0xFFFF;
      v41 = 0.0;
      v42 = 0.0;
      v43 = xmmword_101BAFC90;
      v44 = v37;
      v45 = v37;
      v46 = v37;
      v47 = 0;
      v48 = 0xBFF0000000000000;
      v49 = 0;
      v50 = 0;
      v51 = 0;
      v52 = 0xBFF0000000000000;
      v53 = 0x7FFFFFFF;
      v55 = 0;
      v56 = 0;
      v54 = 0;
      v57 = 0;
      if ((objc_msgSend(objc_msgSend(v8, "location"), "accuracy") & 0x80000000) != 0)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A310);
        v16 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          sub_1001C35D0((unsigned int *)&v58, __p);
          v17 = __p;
          if (v72 < 0)
            v17 = *(_BYTE **)__p;
          *(_DWORD *)buf = 134349315;
          *(_QWORD *)&buf[4] = v1;
          v61 = 2081;
          v62 = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "AlsCell, scdma, %{public}lu, unknown, %{private}s", buf, 0x16u);
          if (SHIBYTE(v72) < 0)
            operator delete(*(void **)__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10214A310);
          v31 = qword_1022A0048;
          sub_1001C35D0((unsigned int *)&v58, buf);
          v32 = buf;
          if (v63 < 0)
            v32 = *(_BYTE **)buf;
          *(_DWORD *)v65 = 134349315;
          *(_QWORD *)&v65[4] = v1;
          v66 = 2081;
          v67 = v32;
          LODWORD(v35) = 22;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v31, 0, "AlsCell, scdma, %{public}lu, unknown, %{private}s", v65, v35);
          v34 = v33;
          if (SHIBYTE(v63) < 0)
            operator delete(*(void **)buf);
          sub_100512490("Generic", 1, 0, 2, "-[ALSLocationDelegate processScdmaCells:inRange:timeReceived:requestType:tag:]_block_invoke", "%s\n", v34);
          if (v34 != __p)
            free(v34);
        }
        result = *(_QWORD **)(v2[5] + 16);
        v18 = (uint64_t (*)(_QWORD *, __int128 *, _QWORD, _QWORD, _QWORD))result[25];
        if (v18)
          result = (_QWORD *)v18(result, &v58, *((unsigned int *)v2 + 18), *((unsigned int *)v2 + 19), result[19]);
      }
      else
      {
        v12 = (int)objc_msgSend(objc_msgSend(v8, "location"), "accuracy") > 999999;
        v13 = objc_msgSend(objc_msgSend(v8, "location"), "accuracy");
        v14 = (double)v13;
        if (v12)
          v14 = (double)v13 / 1000000.0;
        *(double *)&v43 = v14;
        *((_QWORD *)&v46 + 1) = v2[8];
        v41 = (double)(uint64_t)objc_msgSend(objc_msgSend(v8, "location"), "latitude") / 100000000.0;
        v42 = (double)(uint64_t)objc_msgSend(objc_msgSend(v8, "location"), "longitude") / 100000000.0;
        HIDWORD(v54) = 1;
        if (objc_msgSend(objc_msgSend(v8, "location"), "hasAltitude")
          && objc_msgSend(objc_msgSend(v8, "location"), "hasVerticalAccuracy"))
        {
          *((double *)&v43 + 1) = (double)(int)objc_msgSend(objc_msgSend(v8, "location"), "altitude");
          *(double *)&v44 = (double)(int)objc_msgSend(objc_msgSend(v8, "location"), "verticalAccuracy");
        }
        if (objc_msgSend(objc_msgSend(v8, "location"), "hasConfidence"))
          v15 = objc_msgSend(objc_msgSend(v8, "location"), "confidence");
        else
          v15 = 70;
        v47 = v15;
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A310);
        v19 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          sub_1001C35D0((unsigned int *)&v58, buf);
          v20 = SHIBYTE(v63);
          v21 = *(_BYTE **)buf;
          sub_100B61B98((uint64_t)&v40, v65);
          v22 = buf;
          if (v20 < 0)
            v22 = v21;
          v23 = v65;
          if (v68 < 0)
            v23 = *(_BYTE **)v65;
          *(_DWORD *)__p = 134349571;
          *(_QWORD *)&__p[4] = v1;
          v70 = 2081;
          v71 = v22;
          v72 = 2081;
          v73 = v23;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "AlsCell, scdma, %{public}lu, valid, %{private}s, location, %{private}s", __p, 0x20u);
          if (v68 < 0)
            operator delete(*(void **)v65);
          if (SHIBYTE(v63) < 0)
            operator delete(*(void **)buf);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10214A310);
          v25 = qword_1022A0048;
          sub_1001C35D0((unsigned int *)&v58, v65);
          v36 = v25;
          LODWORD(v25) = v68;
          v26 = *(_BYTE **)v65;
          sub_100B61B98((uint64_t)&v40, v38);
          v27 = v65;
          if ((int)v25 < 0)
            v27 = v26;
          v28 = v38;
          if (v39 < 0)
            v28 = (void **)v38[0];
          *(_DWORD *)buf = 134349571;
          *(_QWORD *)&buf[4] = v1;
          v61 = 2081;
          v62 = v27;
          v63 = 2081;
          v64 = v28;
          LODWORD(v35) = 32;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v36, 2, "AlsCell, scdma, %{public}lu, valid, %{private}s, location, %{private}s", buf, v35);
          v30 = v29;
          if (v39 < 0)
            operator delete(v38[0]);
          if (v68 < 0)
            operator delete(*(void **)v65);
          sub_100512490("Generic", 1, 0, 2, "-[ALSLocationDelegate processScdmaCells:inRange:timeReceived:requestType:tag:]_block_invoke", "%s\n", v30);
          if (v30 != __p)
            free(v30);
        }
        result = *(_QWORD **)(v2[5] + 16);
        v24 = (uint64_t (*)(_QWORD *, __int128 *, int *, _QWORD, _QWORD, _QWORD))result[24];
        if (v24)
          result = (_QWORD *)v24(result, &v58, &v40, *((unsigned int *)v2 + 18), *((unsigned int *)v2 + 19), result[19]);
      }
      ++v1;
    }
    while (v1 < v2[7] + v2[6]);
  }
  return result;
}

void sub_100667624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a61 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10066765C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);

  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(result + 200);
  if (v4)
    return v4(result, a2, a3, a4, *(_QWORD *)(result + 152));
  return result;
}

uint64_t sub_100667670(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(result + 192);
  if (v5)
    return v5(result, a2, a3, a4, a5, *(_QWORD *)(result + 152));
  return result;
}

void sub_10066869C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,uint64_t a45,void *a46)
{
  if (__p)
    operator delete(__p);
  if (a46)
    operator delete(a46);
  _Unwind_Resume(a1);
}

void sub_10066878C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  void *v11;
  _QWORD v12[5];
  void *v13;
  void *v14;
  uint64_t v15;
  void *__p;
  void *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  void *v22;
  _BYTE *v23;
  uint64_t v24;
  void *v25;
  _BYTE *v26;
  uint64_t v27;

  v25 = 0;
  v26 = 0;
  v27 = 0;
  sub_10055CCF0(&v25, *(const void **)a2, *(_QWORD *)(a2 + 8), 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  v22 = 0;
  v23 = 0;
  v24 = 0;
  sub_10055CCF0(&v22, *(const void **)a3, *(_QWORD *)(a3 + 8), 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v11 = *(void **)(a1 + 160);
  if (v11)
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3321888768;
    v12[2] = sub_10066D8D0;
    v12[3] = &unk_10214A3B8;
    v12[4] = a1;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    sub_10055CCF0(&v13, v25, (uint64_t)v26, 0xD37A6F4DE9BD37A7 * ((v26 - (_BYTE *)v25) >> 3));
    __p = 0;
    v17 = 0;
    v18 = 0;
    sub_10055CCF0(&__p, v22, (uint64_t)v23, 0xD37A6F4DE9BD37A7 * ((v23 - (_BYTE *)v22) >> 3));
    v19 = a4;
    v20 = a5;
    v21 = a6;
    objc_msgSend(v11, "async:", v12);
    if (__p)
    {
      v17 = __p;
      operator delete(__p);
    }
    if (v13)
    {
      v14 = v13;
      operator delete(v13);
    }
    if (v22)
    {
      v23 = v22;
      operator delete(v22);
    }
    if (v25)
    {
      v26 = v25;
      operator delete(v25);
    }
  }
  else
  {
    sub_1019037F0();
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Network/CLNetworkLocationRequester.h", 377, "onWifiLocationSeriesComplete");
    __break(1u);
  }
}

void sub_100668930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  uint64_t v21;
  void *v23;
  void *v24;

  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  v23 = *(void **)(v21 - 96);
  if (v23)
  {
    *(_QWORD *)(v21 - 88) = v23;
    operator delete(v23);
  }
  v24 = *(void **)(v21 - 72);
  if (v24)
  {
    *(_QWORD *)(v21 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10066899C(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t *a4)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  std::string *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char v17;
  char v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  char v22;
  char v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  char v27;
  char v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  NSObject *v32;
  std::string *v33;
  int v34;
  int v35;
  _BOOL4 v36;
  _BOOL4 v37;
  std::string *v39;
  int v40;
  int v41;
  _BOOL4 v42;
  _BOOL4 v43;
  const char *v44;
  char *v45;
  int v46;
  std::string *v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  _BOOL4 v53;
  __int16 v54;
  _BOOL4 v55;
  _BYTE buf[18];
  __int16 v57;
  int v58;
  __int16 v59;
  _BOOL4 v60;
  __int16 v61;
  _BOOL4 v62;

  *(_QWORD *)a1 = off_10214A3F8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = *a2;
  v6 = a2[1];
  v7 = a2[2];
  v8 = a2[3];
  *(_OWORD *)(a1 + 216) = a2[4];
  *(_OWORD *)(a1 + 200) = v8;
  *(_OWORD *)(a1 + 184) = v7;
  *(_OWORD *)(a1 + 168) = v6;
  v9 = a2[5];
  v10 = a2[6];
  v11 = a2[8];
  *(_OWORD *)(a1 + 264) = a2[7];
  *(_OWORD *)(a1 + 280) = v11;
  *(_OWORD *)(a1 + 248) = v10;
  *(_OWORD *)(a1 + 232) = v9;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = a3;
  *(_QWORD *)a1 = off_10214A208;
  *(_QWORD *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 320) = 10;
  v12 = (std::string *)(a1 + 352);
  *(_DWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  sub_1015A2E04((_QWORD *)(a1 + 352), off_1022A3950);
  *(_BYTE *)(a1 + 376) = 0;
  v13 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 384) = v13;
  sub_100A97424(a1 + 392);
  *(_DWORD *)(a1 + 472) = 0;
  objc_msgSend(*(id *)(a1 + 304), "silo");
  *(_QWORD *)(a1 + 312) = -[ALSLocationDelegate initWithRequester:]([ALSLocationDelegate alloc], "initWithRequester:", a1);
  sub_1001E4804(buf);
  *(_BYTE *)(a1 + 376) = sub_1000BCB64(*(uint64_t *)buf, "AppleLocationServer", v12);
  v14 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v15 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  sub_1001E4804(buf);
  v17 = sub_1001E4B84(*(uint64_t *)buf, "AppleLocationServerTimeout", (_DWORD *)(a1 + 320));
  v18 = v17;
  v19 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v20 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      if ((v18 & 1) != 0)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  if ((v17 & 1) == 0)
LABEL_11:
    *(_DWORD *)(a1 + 320) = 10;
LABEL_12:
  sub_1001E4804(buf);
  v22 = sub_1005268D0(*(uint64_t *)buf, "AppleLocationServerRequestLog", (CFTypeRef *)(a1 + 328));
  v23 = v22;
  v24 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v25 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
      if ((v23 & 1) != 0)
        goto LABEL_18;
      goto LABEL_17;
    }
  }
  if ((v22 & 1) == 0)
LABEL_17:
    *(_QWORD *)(a1 + 328) = 0;
LABEL_18:
  sub_1001E4804(buf);
  v27 = sub_1005268D0(*(uint64_t *)buf, "AppleLocationServerResponseLog", (CFTypeRef *)(a1 + 336));
  v28 = v27;
  v29 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_22;
  v30 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (v31)
  {
LABEL_22:
    if ((v27 & 1) != 0)
      goto LABEL_24;
    goto LABEL_23;
  }
  ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
  std::__shared_weak_count::__release_weak(v29);
  if ((v28 & 1) == 0)
LABEL_23:
    *(_QWORD *)(a1 + 336) = 0;
LABEL_24:
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10214A310);
  v32 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v33 = v12;
    if (*(char *)(a1 + 375) < 0)
      v33 = (std::string *)v12->__r_.__value_.__r.__words[0];
    v34 = *(unsigned __int8 *)(a1 + 376);
    v35 = *(_DWORD *)(a1 + 320);
    v36 = *(_QWORD *)(a1 + 328) != 0;
    v37 = *(_QWORD *)(a1 + 336) != 0;
    *(_DWORD *)buf = 136381699;
    *(_QWORD *)&buf[4] = v33;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v34;
    v57 = 1026;
    v58 = v35;
    v59 = 1026;
    v60 = v36;
    v61 = 1026;
    v62 = v37;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "AlsInit, server, %{private}s, override, %{public}d, timeout, %{public}d, log request/response, %{public}d, %{public}d", buf, 0x24u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214A310);
    v39 = v12;
    if (*(char *)(a1 + 375) < 0)
      v39 = (std::string *)v12->__r_.__value_.__r.__words[0];
    v40 = *(unsigned __int8 *)(a1 + 376);
    v41 = *(_DWORD *)(a1 + 320);
    v42 = *(_QWORD *)(a1 + 328) != 0;
    v43 = *(_QWORD *)(a1 + 336) != 0;
    v46 = 136381699;
    v47 = v39;
    v48 = 1026;
    v49 = v40;
    v50 = 1026;
    v51 = v41;
    v52 = 1026;
    v53 = v42;
    v54 = 1026;
    v55 = v43;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "AlsInit, server, %{private}s, override, %{public}d, timeout, %{public}d, log request/response, %{public}d, %{public}d", &v46, 36);
    v45 = (char *)v44;
    sub_100512490("Generic", 1, 0, 2, "CLNetworkLocationRequesterALS::CLNetworkLocationRequesterALS(const Listener &, id<CLIntersiloUniverse>, std::unique_ptr<CLINetworkLocationRequesterALSExternal>)", "%s\n", v44);
    if (v45 != buf)
      free(v45);
  }
  return a1;
}

void sub_100668E8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t v5;

  sub_100A97428(v3);
  v5 = *(_QWORD *)(v1 + 384);
  *(_QWORD *)(v1 + 384) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(v1 + 375) < 0)
    operator delete(*v2);
  sub_100668F10(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100668F10(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void **v8;

  *(_QWORD *)a1 = off_10214A3F8;
  v2 = *(void **)(a1 + 128);
  if (v2)
  {
    *(_QWORD *)(a1 + 136) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 104);
  if (v3)
  {
    *(_QWORD *)(a1 + 112) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(_QWORD *)(a1 + 88) = v4;
    operator delete(v4);
  }
  v8 = (void **)(a1 + 56);
  sub_10066DCEC(&v8);
  v5 = *(void **)(a1 + 32);
  if (v5)
  {
    *(_QWORD *)(a1 + 40) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 8);
  if (v6)
  {
    *(_QWORD *)(a1 + 16) = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_100668FA8()
{
  sub_10142E9C8();
}

void sub_100669018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10066903C(uint64_t a1)
{
  const void *v2;
  const void *v3;
  uint64_t v4;
  void *__p[2];
  char v7;

  *(_QWORD *)a1 = off_10214A208;

  v2 = *(const void **)(a1 + 328);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 336);
  if (v3)
    CFRelease(v3);
  sub_1015A2E04(__p, "final");
  sub_100CDC4CC((uint64_t)&qword_102303150, (uint64_t *)__p, *(_DWORD *)(a1 + 472));
  if (v7 < 0)
    operator delete(__p[0]);
  sub_100A97428(a1 + 392);
  v4 = *(_QWORD *)(a1 + 384);
  *(_QWORD *)(a1 + 384) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  return sub_100668F10(a1);
}

void sub_100669100(uint64_t a1)
{
  sub_10066903C(a1);
  operator delete();
}

uint64_t sub_100669124(uint64_t a1, uint64_t a2, int a3)
{
  ALSNearbyRequest *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  NSString *v17;
  id v18;
  _QWORD *v19;
  NSString *v20;
  CLALSRequester *v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  NSObject *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  int v35;
  int v36;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  const char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  int v53;
  int v54;
  const char *v55;
  char *v56;
  double v57;
  int v58;
  NSString *v59;
  int v60;
  _BYTE v62[16];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  int v67;
  _BYTE v68[24];
  __int16 v69;
  _BYTE v70[14];
  __int16 v71;
  int v72;
  __int16 v73;
  id v74;
  uint8_t v75[128];
  _BYTE buf[28];
  __int16 v77;
  _BYTE v78[14];
  __int16 v79;
  int v80;
  __int16 v81;
  id v82;

  v5 = sub_1013DDFC8();
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214A398);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(_QWORD *)(a2 + 4);
    v8 = *(_QWORD *)(a2 + 12);
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = v7;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v8;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)&buf[24] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "query: queryLocation, location, %14.8lf, %14.8lf, timeout, %d", buf, 0x1Cu);
  }
  v60 = a3;
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214A398);
    v38 = *(_QWORD *)(a2 + 4);
    v39 = *(_QWORD *)(a2 + 12);
    v67 = 134218496;
    *(_QWORD *)v68 = v38;
    *(_WORD *)&v68[8] = 2048;
    *(_QWORD *)&v68[10] = v39;
    *(_WORD *)&v68[18] = 1024;
    *(_DWORD *)&v68[20] = a3;
    LODWORD(v57) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "query: queryLocation, location, %14.8lf, %14.8lf, timeout, %d", COERCE_DOUBLE(&v67), v57, v58);
    v41 = (char *)v40;
    sub_100512490("Generic", 1, 0, 2, "virtual int CLNetworkLocationRequesterALS::queryLocation(const CLDaemonLocation &, int)", "%s\n", v40);
    if (v41 != buf)
      free(v41);
  }
  -[ALSNearbyRequest setLatitude:](v5, "setLatitude:", (uint64_t)(*(double *)(a2 + 4) * 100000000.0));
  -[ALSNearbyRequest setLongitude:](v5, "setLongitude:", (uint64_t)(*(double *)(a2 + 12) * 100000000.0));
  -[ALSNearbyRequest setNeedCellsTowers:](v5, "setNeedCellsTowers:", 0);
  -[ALSNearbyRequest setNumberOfSurroundingWifis:](v5, "setNumberOfSurroundingWifis:", 0xFFFFFFFFLL);
  v9 = +[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration");
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v10 = objc_msgSend(objc_msgSend(v9, "defaultForKey:defaultValue:", CFSTR("CLAppleLocationServiceNearbyRequestWifiBands"), +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", qword_102310A70)), "componentsSeparatedByString:", CFSTR(","));
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v63, v75, 16);
  if (v11)
  {
    v12 = *(_QWORD *)v64;
    do
    {
      for (i = 0; i != v11; i = (char *)i + 1)
      {
        if (*(_QWORD *)v64 != v12)
          objc_enumerationMutation(v10);
        v14 = *(void **)(*((_QWORD *)&v63 + 1) + 8 * (_QWORD)i);
        if ((objc_msgSend(v14, "isEqualToString:", CFSTR("k2dot4GHZ")) & 1) != 0)
        {
          v15 = 1;
        }
        else if (objc_msgSend(v14, "isEqualToString:", CFSTR("k5GHZ")))
        {
          v15 = 2;
        }
        else
        {
          v15 = 1;
        }
        -[ALSNearbyRequest addWifiBands:](v5, "addWifiBands:", v15);
      }
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v63, v75, 16);
    }
    while (v11);
  }
  -[ALSNearbyRequest setWifiAltitudeScale:](v5, "setWifiAltitudeScale:", 2);
  if (*(_BYTE *)(a1 + 376))
  {
    v16 = (_QWORD *)(a1 + 352);
    if (*(char *)(a1 + 375) < 0)
      v16 = (_QWORD *)*v16;
    v17 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16);
  }
  else
  {
    v18 = +[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration");
    v19 = (_QWORD *)(a1 + 352);
    if (*(char *)(a1 + 375) < 0)
      v19 = (_QWORD *)*v19;
    v17 = (NSString *)objc_msgSend(v18, "defaultForKey:defaultValue:", CFSTR("CLAppleLocationServer"), +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v19));
  }
  v20 = v17;
  v21 = -[CLALSRequester initWithURL:delegate:queue:]([CLALSRequester alloc], "initWithURL:delegate:queue:", +[NSURL URLWithString:](NSURL, "URLWithString:", v17), *(_QWORD *)(a1 + 312), objc_msgSend(objc_msgSend(*(id *)(a1 + 304), "silo"), "operationQueue"));
  v22 = *(unsigned int *)(a1 + 344);
  *(_DWORD *)(a1 + 344) = v22 + 1;
  -[CLALSRequester setTag:](v21, "setTag:", v22);
  -[CLALSRequester setType:](v21, "setType:", 1);
  -[CLALSRequester setTimestamp:](v21, "setTimestamp:", CFAbsoluteTimeGetCurrent());
  -[CLALSRequester setTimeoutSeconds:](v21, "setTimeoutSeconds:", (double)*(int *)(a1 + 320));
  sub_100119F3C(v62);
  v59 = v20;
  sub_1005285B4((uint64_t)v62, "Connection", "close");
  -[CLALSRequester setHttpRequestHeaders:](v21, "setHttpRequestHeaders:", sub_10011A5AC((uint64_t)v62));
  -[CLALSRequester addRequest:](v21, "addRequest:", v5);
  if (*(_QWORD *)(a1 + 328))
    -[CLALSRequester setLogRequestToFile:](v21, "setLogRequestToFile:");
  if (*(_QWORD *)(a1 + 336))
    -[CLALSRequester setLogResponseToFile:](v21, "setLogResponseToFile:");
  if ((v60 & 0x80000000) == 0)
    -[CLALSRequester setTimeoutSeconds:](v21, "setTimeoutSeconds:", (double)v60);
  v23 = *(_DWORD *)(a1 + 472);
  (*(void (**)(uint64_t *))(qword_102303150 + 16))(&qword_102303150);
  ++dword_102303180;
  (*(void (**)(uint64_t *))(qword_102303150 + 24))(&qword_102303150);
  v24 = -[CLALSRequester uploadPayloadSize](v21, "uploadPayloadSize");
  (*(void (**)(uint64_t *))(qword_102303150 + 16))(&qword_102303150);
  dword_102303178 += v24;
  (*(void (**)(uint64_t *))(qword_102303150 + 24))(&qword_102303150);
  sub_1015A2E04(buf, "queryLocation");
  sub_100CDC4CC((uint64_t)&qword_102303150, (uint64_t *)buf, v23);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214A398);
  v25 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v26 = *(_QWORD *)(a2 + 4);
    v27 = *(_QWORD *)(a2 + 12);
    v28 = -[CLALSRequester uploadPayloadSize](v21, "uploadPayloadSize");
    v29 = sub_100669BB0(v5);
    *(_DWORD *)buf = 67110658;
    *(_DWORD *)&buf[4] = v22;
    *(_WORD *)&buf[8] = 2048;
    *(_QWORD *)&buf[10] = v26;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = v27;
    v77 = 1024;
    *(_DWORD *)v78 = v60;
    *(_WORD *)&v78[4] = 2048;
    *(_QWORD *)&v78[6] = v28;
    v79 = 1024;
    v80 = v23;
    v81 = 2114;
    v82 = v29;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "query: queryLocation, tag, %d, location, %14.8lf, %14.8lf, timeout, %d, payload, %lu, reachability, %d, bands, %{public}@", buf, 0x3Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214A398);
    v42 = qword_1022A02D8;
    v43 = *(_QWORD *)(a2 + 4);
    v44 = *(_QWORD *)(a2 + 12);
    v45 = -[CLALSRequester uploadPayloadSize](v21, "uploadPayloadSize");
    v46 = sub_100669BB0(v5);
    v67 = 67110658;
    *(_DWORD *)v68 = v22;
    *(_WORD *)&v68[4] = 2048;
    *(_QWORD *)&v68[6] = v43;
    *(_WORD *)&v68[14] = 2048;
    *(_QWORD *)&v68[16] = v44;
    v69 = 1024;
    *(_DWORD *)v70 = v60;
    *(_WORD *)&v70[4] = 2048;
    *(_QWORD *)&v70[6] = v45;
    v71 = 1024;
    v72 = v23;
    v73 = 2114;
    v74 = v46;
    LODWORD(v57) = 60;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v42, 2, "query: queryLocation, tag, %d, location, %14.8lf, %14.8lf, timeout, %d, payload, %lu, reachability, %d, bands, %{public}@", &v67, *(_QWORD *)&v57);
    v48 = (char *)v47;
    sub_100512490("Generic", 1, 0, 2, "virtual int CLNetworkLocationRequesterALS::queryLocation(const CLDaemonLocation &, int)", "%s\n", v47);
    if (v48 != buf)
      free(v48);
  }
  -[CLALSRequester setNwActivityDomain:](v21, "setNwActivityDomain:", 24);
  -[CLALSRequester setNwActivityLabel:](v21, "setNwActivityLabel:", 2);
  -[CLALSRequester start](v21, "start");
  objc_msgSend(*(id *)(a1 + 312), "addRequesterWithOutstandingRequest:", v21);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10214A310);
  v30 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v31 = v23;
    v32 = *(_QWORD *)(a2 + 4);
    v33 = *(_QWORD *)(a2 + 12);
    v34 = -[NSString UTF8String](v59, "UTF8String");
    v35 = *(unsigned __int8 *)(a1 + 376);
    sub_100197040();
    v36 = sub_100195F08();
    *(_DWORD *)buf = 67241731;
    *(_DWORD *)&buf[4] = v22;
    *(_WORD *)&buf[8] = 2049;
    *(_QWORD *)&buf[10] = v32;
    *(_WORD *)&buf[18] = 2049;
    *(_QWORD *)&buf[20] = v33;
    v77 = 2081;
    *(_QWORD *)v78 = v34;
    *(_WORD *)&v78[8] = 1026;
    *(_DWORD *)&v78[10] = v35;
    v79 = 1026;
    v23 = v31;
    v80 = v31;
    v81 = 1026;
    LODWORD(v82) = v36;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "@AlsFlow, request, tag, %{public}d, location, %{private}0.2lf, %{private}0.2lf, server, %{private}s, override, %{public}d, reach, %{public}d, watch, %{public}d", buf, 0x38u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214A310);
    v49 = qword_1022A0048;
    v50 = *(_QWORD *)(a2 + 4);
    v51 = *(_QWORD *)(a2 + 12);
    v52 = -[NSString UTF8String](v59, "UTF8String");
    v53 = *(unsigned __int8 *)(a1 + 376);
    sub_100197040();
    v54 = sub_100195F08();
    v67 = 67241731;
    *(_DWORD *)v68 = v22;
    *(_WORD *)&v68[4] = 2049;
    *(_QWORD *)&v68[6] = v50;
    *(_WORD *)&v68[14] = 2049;
    *(_QWORD *)&v68[16] = v51;
    v69 = 2081;
    *(_QWORD *)v70 = v52;
    *(_WORD *)&v70[8] = 1026;
    *(_DWORD *)&v70[10] = v53;
    v71 = 1026;
    v72 = v23;
    v73 = 1026;
    LODWORD(v74) = v54;
    LODWORD(v57) = 56;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v49, 0, "@AlsFlow, request, tag, %{public}d, location, %{private}0.2lf, %{private}0.2lf, server, %{private}s, override, %{public}d, reach, %{public}d, watch, %{public}d", &v67, *(_QWORD *)&v57);
    v56 = (char *)v55;
    sub_100512490("Generic", 1, 0, 2, "virtual int CLNetworkLocationRequesterALS::queryLocation(const CLDaemonLocation &, int)", "%s\n", v55);
    if (v56 != buf)
      free(v56);
  }
  AnalyticsSendEventLazy(CFSTR("com.apple.locationd.AlsRequest"), &stru_10214A2C8);

  sub_10011A5A8(v62);
  return v22;
}

void sub_100669B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  sub_10011A5A8(&a15);
  _Unwind_Resume(a1);
}

id sub_100669BB0(void *a1)
{
  id v2;
  unint64_t v3;

  v2 = +[NSMutableArray array](NSMutableArray, "array");
  if (objc_msgSend(a1, "wifiBandsCount"))
  {
    v3 = 0;
    do
      objc_msgSend(v2, "addObject:", -[NSNumber stringValue](+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)objc_msgSend(a1, "wifiBands") + v3++)), "stringValue"));
    while (v3 < (unint64_t)objc_msgSend(a1, "wifiBandsCount"));
  }
  return objc_msgSend(v2, "componentsJoinedByString:", CFSTR(", "));
}

NSDictionary *__cdecl sub_100669C3C(id a1)
{
  return (NSDictionary *)&off_10221FBD8;
}

uint64_t sub_100669C48(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, _QWORD *a5, _QWORD *a6, uint64_t *a7, int *a8, int a9)
{
  ALSLocationRequest *v11;
  NSObject *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  NSString *v16;
  id v17;
  _QWORD *v18;
  NSString *v19;
  CLALSRequester *v20;
  int v21;
  unsigned int v22;
  NSObject *v23;
  const char *v24;
  int v25;
  int v26;
  unsigned int v27;
  NSObject *v28;
  unint64_t v29;
  signed int v30;
  id v31;
  NSObject *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v42;
  const char *v43;
  int v44;
  int v45;
  const char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  const char *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  const char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  signed int v68;
  id v69;
  const char *v70;
  char *v71;
  uint64_t v72;
  unsigned int v73;
  _QWORD v74[5];
  _BYTE v75[16];
  int v76;
  _BYTE v77[26];
  unint64_t v78;
  __int16 v79;
  unint64_t v80;
  __int16 v81;
  uint64_t v82;
  _BYTE buf[30];
  unint64_t v84;
  __int16 v85;
  unint64_t v86;
  __int16 v87;
  uint64_t v88;

  v11 = sub_10066A7F4(a1, a2, a3, a4, a5, a6, a7, a8);
  if (a7[1] != *a7)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214A310);
    v12 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v13 = -[ALSLocationRequest wirelessAPsCount](v11, "wirelessAPsCount");
      v14 = (a7[1] - *a7) >> 3;
      *(_DWORD *)buf = 134349824;
      *(_QWORD *)&buf[4] = v13;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v14;
      *(_WORD *)&buf[22] = 1026;
      *(_DWORD *)&buf[24] = -[ALSLocationRequest numberOfSurroundingWifis](v11, "numberOfSurroundingWifis");
      *(_WORD *)&buf[28] = 1026;
      LODWORD(v84) = 1000;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "AlsWifi, tx, %{public}lu, %{public}lu, surronding, %{public}d, max, %{public}d", buf, 0x22u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214A310);
      v59 = qword_1022A0048;
      v60 = -[ALSLocationRequest wirelessAPsCount](v11, "wirelessAPsCount");
      v63 = a7;
      v61 = *a7;
      v62 = v63[1];
      v76 = 134349824;
      *(_QWORD *)v77 = v60;
      *(_WORD *)&v77[8] = 2050;
      *(_QWORD *)&v77[10] = (v62 - v61) >> 3;
      *(_WORD *)&v77[18] = 1026;
      *(_DWORD *)&v77[20] = -[ALSLocationRequest numberOfSurroundingWifis](v11, "numberOfSurroundingWifis");
      *(_WORD *)&v77[24] = 1026;
      LODWORD(v78) = 1000;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v59, 0, "AlsWifi, tx, %{public}lu, %{public}lu, surronding, %{public}d, max, %{public}d", &v76, 34);
      v65 = (char *)v64;
      sub_100512490("Generic", 1, 0, 2, "virtual int CLNetworkLocationRequesterALS::unifiedQuery(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &, int)", "%s\n", v64);
      if (v65 != buf)
        free(v65);
    }
  }
  if (*(_BYTE *)(a1 + 376))
  {
    v15 = (_QWORD *)(a1 + 352);
    if (*(char *)(a1 + 375) < 0)
      v15 = (_QWORD *)*v15;
    v16 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15);
  }
  else
  {
    v17 = +[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration");
    v18 = (_QWORD *)(a1 + 352);
    if (*(char *)(a1 + 375) < 0)
      v18 = (_QWORD *)*v18;
    v16 = (NSString *)objc_msgSend(v17, "defaultForKey:defaultValue:", CFSTR("CLAppleLocationServer"), +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v18));
  }
  v19 = v16;
  v20 = -[CLALSRequester initWithURL:delegate:queue:]([CLALSRequester alloc], "initWithURL:delegate:queue:", +[NSURL URLWithString:](NSURL, "URLWithString:", v16), *(_QWORD *)(a1 + 312), objc_msgSend(objc_msgSend(*(id *)(a1 + 304), "silo"), "operationQueue"));
  v21 = *(_DWORD *)(a1 + 472);
  v22 = *(_DWORD *)(a1 + 344);
  *(_DWORD *)(a1 + 344) = v22 + 1;
  v73 = v22;
  -[CLALSRequester setTag:](v20, "setTag:");
  -[CLALSRequester setType:](v20, "setType:", 0);
  -[CLALSRequester setTimestamp:](v20, "setTimestamp:", CFAbsoluteTimeGetCurrent());
  -[CLALSRequester setTimeoutSeconds:](v20, "setTimeoutSeconds:", (double)*(int *)(a1 + 320));
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10214A310);
  v23 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v24 = -[NSString UTF8String](v19, "UTF8String");
    v25 = *(unsigned __int8 *)(a1 + 376);
    sub_100197040();
    v26 = sub_100195F08();
    *(_DWORD *)buf = 136381699;
    *(_QWORD *)&buf[4] = v24;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v73;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v25;
    *(_WORD *)&buf[24] = 1026;
    *(_DWORD *)&buf[26] = v21;
    LOWORD(v84) = 1026;
    *(_DWORD *)((char *)&v84 + 2) = v26;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "@AlsFlow, server, %{private}s, tag, %{public}d, override, %{public}d, reach, %{public}d, watch, %{public}d", buf, 0x24u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214A310);
    v42 = qword_1022A0048;
    v43 = -[NSString UTF8String](v19, "UTF8String");
    v44 = *(unsigned __int8 *)(a1 + 376);
    sub_100197040();
    v45 = sub_100195F08();
    v76 = 136381699;
    *(_QWORD *)v77 = v43;
    *(_WORD *)&v77[8] = 1026;
    *(_DWORD *)&v77[10] = v73;
    *(_WORD *)&v77[14] = 1026;
    *(_DWORD *)&v77[16] = v44;
    *(_WORD *)&v77[20] = 1026;
    *(_DWORD *)&v77[22] = v21;
    LOWORD(v78) = 1026;
    *(_DWORD *)((char *)&v78 + 2) = v45;
    LODWORD(v72) = 36;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v42, 0, "@AlsFlow, server, %{private}s, tag, %{public}d, override, %{public}d, reach, %{public}d, watch, %{public}d", &v76, v72);
    v47 = (char *)v46;
    sub_100512490("Generic", 1, 0, 2, "virtual int CLNetworkLocationRequesterALS::unifiedQuery(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &, int)", "%s\n", v46);
    if (v47 != buf)
      free(v47);
  }
  sub_100119F3C(v75);
  sub_1005285B4((uint64_t)v75, "Connection", "close");
  -[CLALSRequester setHttpRequestHeaders:](v20, "setHttpRequestHeaders:", sub_10011A5AC((uint64_t)v75));
  -[CLALSRequester addRequest:](v20, "addRequest:", v11);
  if (*(_QWORD *)(a1 + 328))
    -[CLALSRequester setLogRequestToFile:](v20, "setLogRequestToFile:");
  if (*(_QWORD *)(a1 + 336))
    -[CLALSRequester setLogResponseToFile:](v20, "setLogResponseToFile:");
  if ((a9 & 0x80000000) == 0)
    -[CLALSRequester setTimeoutSeconds:](v20, "setTimeoutSeconds:", (double)a9);
  -[CLALSRequester setNwActivityDomain:](v20, "setNwActivityDomain:", 24);
  -[CLALSRequester setNwActivityLabel:](v20, "setNwActivityLabel:", 1);
  -[CLALSRequester start](v20, "start");
  objc_msgSend(*(id *)(a1 + 312), "addRequesterWithOutstandingRequest:", v20);
  (*(void (**)(uint64_t *))(qword_102303150 + 16))(&qword_102303150);
  ++dword_102303180;
  (*(void (**)(uint64_t *))(qword_102303150 + 24))(&qword_102303150);
  v27 = -[CLALSRequester uploadPayloadSize](v20, "uploadPayloadSize");
  (*(void (**)(uint64_t *))(qword_102303150 + 16))(&qword_102303150);
  dword_102303178 += v27;
  (*(void (**)(uint64_t *))(qword_102303150 + 24))(&qword_102303150);
  sub_1015A2E04(buf, "unifiedQuery");
  sub_100CDC4CC((uint64_t)&qword_102303150, (uint64_t *)buf, v21);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (-[ALSLocationRequest wirelessAPsCount](v11, "wirelessAPsCount"))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214A310);
    v28 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v29 = -[ALSLocationRequest wirelessAPsCount](v11, "wirelessAPsCount");
      v30 = -[ALSLocationRequest numberOfSurroundingWifis](v11, "numberOfSurroundingWifis");
      v31 = sub_10066CF98(v11);
      *(_DWORD *)buf = 67240962;
      *(_DWORD *)&buf[4] = v73;
      *(_WORD *)&buf[8] = 2050;
      *(_QWORD *)&buf[10] = v29;
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = v30;
      *(_WORD *)&buf[28] = 2114;
      v84 = (unint64_t)v31;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "@AlsFlow, request, tag, %{public}d, wifi, %{public}lu, surrounding, %{public}lu, bands, %{public}@", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214A310);
      v66 = qword_1022A0048;
      v67 = -[ALSLocationRequest wirelessAPsCount](v11, "wirelessAPsCount");
      v68 = -[ALSLocationRequest numberOfSurroundingWifis](v11, "numberOfSurroundingWifis");
      v69 = sub_10066CF98(v11);
      v76 = 67240962;
      *(_DWORD *)v77 = v73;
      *(_WORD *)&v77[4] = 2050;
      *(_QWORD *)&v77[6] = v67;
      *(_WORD *)&v77[14] = 2050;
      *(_QWORD *)&v77[16] = v68;
      *(_WORD *)&v77[24] = 2114;
      v78 = (unint64_t)v69;
      LODWORD(v72) = 38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v66, 0, "@AlsFlow, request, tag, %{public}d, wifi, %{public}lu, surrounding, %{public}lu, bands, %{public}@", &v76, v72);
      v71 = (char *)v70;
      sub_100512490("Generic", 1, 0, 2, "virtual int CLNetworkLocationRequesterALS::unifiedQuery(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &, int)", "%s\n", v70);
      if (v71 != buf)
        free(v71);
    }
  }
  if (-[ALSLocationRequest cellTowersCount](v11, "cellTowersCount")
    || -[ALSLocationRequest lteCellTowersCount](v11, "lteCellTowersCount")
    || -[ALSLocationRequest cdmaCellTowersCount](v11, "cdmaCellTowersCount")
    || -[ALSLocationRequest nr5GCellTowersCount](v11, "nr5GCellTowersCount"))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214A310);
    v32 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v33 = -[ALSLocationRequest cellTowersCount](v11, "cellTowersCount");
      v34 = -[ALSLocationRequest lteCellTowersCount](v11, "lteCellTowersCount");
      v35 = -[ALSLocationRequest cdmaCellTowersCount](v11, "cdmaCellTowersCount");
      v36 = -[ALSLocationRequest nr5GCellTowersCount](v11, "nr5GCellTowersCount");
      v37 = -[ALSLocationRequest numberOfSurroundingCells](v11, "numberOfSurroundingCells");
      v38 = -[ALSLocationRequest numberOfSurroundingCdmaCells](v11, "numberOfSurroundingCdmaCells");
      v39 = -[ALSLocationRequest numberOfSurroundingLteCells](v11, "numberOfSurroundingLteCells");
      v40 = -[ALSLocationRequest numberOfSurroundingNr5GCells](v11, "numberOfSurroundingNr5GCells");
      *(_DWORD *)buf = 67241472;
      *(_DWORD *)&buf[4] = v73;
      *(_WORD *)&buf[8] = 2050;
      *(_QWORD *)&buf[10] = v33;
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = v34;
      *(_WORD *)&buf[28] = 2050;
      v84 = v35;
      v85 = 2050;
      v86 = v36;
      v87 = 2050;
      v88 = (int)(v38 + v37 + v39 + v40);
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "@AlsFlow, request, tag, %{public}d, cell, gsm, %{public}lu, lte, %{public}lu, cdma, %{public}lu, nr, %{public}lu, surrounding, %{public}lu", buf, 0x3Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214A310);
      v48 = qword_1022A0048;
      v49 = -[ALSLocationRequest cellTowersCount](v11, "cellTowersCount");
      v50 = -[ALSLocationRequest lteCellTowersCount](v11, "lteCellTowersCount");
      v51 = -[ALSLocationRequest cdmaCellTowersCount](v11, "cdmaCellTowersCount");
      v52 = -[ALSLocationRequest nr5GCellTowersCount](v11, "nr5GCellTowersCount");
      v53 = -[ALSLocationRequest numberOfSurroundingCells](v11, "numberOfSurroundingCells");
      v54 = -[ALSLocationRequest numberOfSurroundingCdmaCells](v11, "numberOfSurroundingCdmaCells");
      v55 = -[ALSLocationRequest numberOfSurroundingLteCells](v11, "numberOfSurroundingLteCells");
      v56 = -[ALSLocationRequest numberOfSurroundingNr5GCells](v11, "numberOfSurroundingNr5GCells");
      v76 = 67241472;
      *(_DWORD *)v77 = v73;
      *(_WORD *)&v77[4] = 2050;
      *(_QWORD *)&v77[6] = v49;
      *(_WORD *)&v77[14] = 2050;
      *(_QWORD *)&v77[16] = v50;
      *(_WORD *)&v77[24] = 2050;
      v78 = v51;
      v79 = 2050;
      v80 = v52;
      v81 = 2050;
      v82 = (int)(v54 + v53 + v55 + v56);
      LODWORD(v72) = 58;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v48, 0, "@AlsFlow, request, tag, %{public}d, cell, gsm, %{public}lu, lte, %{public}lu, cdma, %{public}lu, nr, %{public}lu, surrounding, %{public}lu", &v76, v72);
      v58 = (char *)v57;
      sub_100512490("Generic", 1, 0, 2, "virtual int CLNetworkLocationRequesterALS::unifiedQuery(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &, int)", "%s\n", v57);
      if (v58 != buf)
        free(v58);
    }
  }
  v74[0] = _NSConcreteStackBlock;
  v74[1] = 3221225472;
  v74[2] = sub_10066D024;
  v74[3] = &unk_102132010;
  v74[4] = v11;
  AnalyticsSendEventLazy(CFSTR("com.apple.locationd.AlsRequest"), v74);

  sub_10011A5A8(v75);
  return v73;
}

void sub_10066A790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  sub_10011A5A8(&a17);
  _Unwind_Resume(a1);
}

ALSLocationRequest *sub_10066A7F4(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, _QWORD *a5, _QWORD *a6, uint64_t *a7, int *a8)
{
  NSObject *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  ALSCdmaCellTower *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int *v25;
  _QWORD *v26;
  unsigned int *v27;
  _QWORD *v28;
  NSObject *v29;
  unsigned int v30;
  unint64_t v31;
  ALSCdmaCellTower *v32;
  NSObject *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  const char *v37;
  std::string *v38;
  NSObject *v39;
  std::string *p_buf;
  uint64_t v41;
  std::string *v42;
  std::string *v43;
  std::string *v44;
  NSObject *v45;
  unsigned int v46;
  NSObject *v47;
  std::string *v48;
  uint64_t v49;
  std::string *v50;
  std::string *v51;
  std::string *v52;
  unsigned int v53;
  const char *v54;
  std::string *v55;
  uint64_t v56;
  unsigned int v57;
  const char *v58;
  std::string *v59;
  unint64_t v60;
  unsigned int v61;
  ALSCellTower *v62;
  NSObject *v63;
  std::string *v64;
  NSObject *v65;
  std::string *v66;
  uint64_t v67;
  std::string *v68;
  std::string *v69;
  std::string *v70;
  uint64_t v71;
  std::string *v72;
  std::string *v73;
  std::string *v74;
  unint64_t v75;
  unsigned int v76;
  ALSScdmaCellTower *v77;
  NSObject *v78;
  std::string *v79;
  NSObject *v80;
  std::string *v81;
  uint64_t v82;
  std::string *v83;
  std::string *v84;
  std::string *v85;
  uint64_t v86;
  std::string *v87;
  std::string *v88;
  std::string *v89;
  uint64_t v90;
  unsigned int v91;
  ALSLteCellTower *v92;
  NSObject *v93;
  std::string *v94;
  NSObject *v95;
  std::string *v96;
  BOOL v97;
  uint64_t v98;
  std::string *v99;
  std::string *v100;
  std::string *v101;
  uint64_t v102;
  std::string *v103;
  std::string *v104;
  std::string *v105;
  uint64_t v106;
  unsigned int v107;
  ALSNr5GCellTower *v108;
  NSObject *v109;
  std::string *v110;
  NSObject *v111;
  std::string *v112;
  uint64_t v113;
  std::string *v114;
  std::string *v115;
  std::string *v116;
  uint64_t v117;
  std::string *v118;
  std::string *v119;
  std::string *v120;
  uint64_t v121;
  unint64_t v122;
  unsigned int v123;
  ALSWirelessAP *v124;
  uint64_t v125;
  _QWORD *v126;
  NSObject *v127;
  std::string *v128;
  std::string *v129;
  CFStringRef v130;
  NSObject *v131;
  std::string *v132;
  uint64_t v133;
  std::string *v134;
  std::string *v135;
  std::string *v136;
  uint64_t v137;
  std::string *v138;
  std::string *v139;
  std::string *v140;
  int v141;
  unsigned int *v142;
  int v143;
  _DWORD *v144;
  uint64_t v145;
  _DWORD *v146;
  void *v147;
  std::string::size_type size;
  unsigned int *v149;
  unsigned int v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  const char *v162;
  std::string *v163;
  uint64_t v164;
  uint64_t *v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD *v171;
  _QWORD *v172;
  ALSLocationRequest *v173;
  std::string v174;
  _BYTE v175[18];
  std::string v176;
  uint64_t v177;
  __int16 v178;
  uint64_t v179;
  __int16 v180;
  unint64_t v181;
  __int16 v182;
  int v183;
  std::string buf;
  uint64_t v185;
  __int16 v186;
  uint64_t v187;
  __int16 v188;
  unint64_t v189;
  __int16 v190;
  int v191;

  v173 = sub_1013DDE5C();
  v168 = a4;
  v171 = a3;
  v172 = a2;
  v169 = a6;
  v170 = a5;
  if (0x84BDA12F684BDA13 * ((a4[1] - *a4) >> 4)
     + ((uint64_t)(a2[1] - *a2) >> 5)
     + ((uint64_t)(a3[1] - *a3) >> 5)
     + 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a5[1] - *a5) >> 3) != 0x5555555555555555 * ((uint64_t)(a6[1] - *a6) >> 5))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214A310);
    v13 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 0x84BDA12F684BDA13 * ((a4[1] - *a4) >> 4);
      v15 = (uint64_t)(a2[1] - *a2) >> 5;
      v16 = (uint64_t)(a3[1] - *a3) >> 5;
      v17 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v170[1] - *v170) >> 3);
      v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a6[1] - *a6) >> 5);
      LODWORD(buf.__r_.__value_.__l.__data_) = 134350336;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v14;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v15;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
      v185 = v16;
      v186 = 2050;
      v187 = v17;
      v188 = 2050;
      v189 = v18;
      v190 = 1026;
      v191 = 100;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "AlsCell, query, cdma, %{public}lu, gsm, %{public}lu, scdma, %{public}lu, lte, %{public}lu, nr, %{public}lu, max, %{public}d", (uint8_t *)&buf, 0x3Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214A310);
      v157 = 0x84BDA12F684BDA13 * ((a4[1] - *a4) >> 4);
      v158 = (uint64_t)(a2[1] - *a2) >> 5;
      v159 = (uint64_t)(a3[1] - *a3) >> 5;
      v160 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v170[1] - *v170) >> 3);
      v161 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a6[1] - *a6) >> 5);
      LODWORD(v176.__r_.__value_.__l.__data_) = 134350336;
      *(std::string::size_type *)((char *)v176.__r_.__value_.__r.__words + 4) = v157;
      WORD2(v176.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&v176.__r_.__value_.__r.__words[1] + 6) = v158;
      HIWORD(v176.__r_.__value_.__r.__words[2]) = 2050;
      v177 = v159;
      v178 = 2050;
      v179 = v160;
      v180 = 2050;
      v181 = v161;
      v182 = 1026;
      v183 = 100;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "AlsCell, query, cdma, %{public}lu, gsm, %{public}lu, scdma, %{public}lu, lte, %{public}lu, nr, %{public}lu, max, %{public}d", &v176, 58);
      v163 = (std::string *)v162;
      sub_100512490("Generic", 1, 0, 2, "ALSLocationRequest *CLNetworkLocationRequesterALS::createUnifiedQueryRequest(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", v162);
      if (v163 != &buf)
        free(v163);
    }
  }
  if (a4[1] != *a4)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      if (v20 > 0x63)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A310);
        v39 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          sub_10066D264((unsigned int *)(*v168 + 432 * v19), &buf);
          p_buf = &buf;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(v176.__r_.__value_.__l.__data_) = 67240451;
          HIDWORD(v176.__r_.__value_.__r.__words[0]) = v20;
          LOWORD(v176.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v176.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)p_buf;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "AlsCell, cdma, dropping, %{public}u, key, %{private}s, #CloneMe", (uint8_t *)&v176, 0x12u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10214A310);
          v41 = qword_1022A0048;
          sub_10066D264((unsigned int *)(*v168 + 432 * v19), &v176);
          v42 = &v176;
          if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v42 = (std::string *)v176.__r_.__value_.__r.__words[0];
          *(_DWORD *)v175 = 67240451;
          *(_DWORD *)&v175[4] = v20;
          *(_WORD *)&v175[8] = 2081;
          *(_QWORD *)&v175[10] = v42;
          LODWORD(v164) = 18;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v41, 0, "AlsCell, cdma, dropping, %{public}u, key, %{private}s, #CloneMe", v175, v164);
          v44 = v43;
          if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v176.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "ALSLocationRequest *CLNetworkLocationRequesterALS::createUnifiedQueryRequest(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", (const char *)v44);
          if (v44 != &buf)
            free(v44);
        }
      }
      else
      {
        v21 = objc_alloc_init(ALSCdmaCellTower);
        v22 = *v168;
        v23 = (unsigned int *)(*v168 + 432 * v19);
        -[ALSCdmaCellTower setSid:](v21, "setSid:", v23[8]);
        -[ALSCdmaCellTower setNid:](v21, "setNid:", *(unsigned int *)(v22 + 432 * v19 + 36));
        -[ALSCdmaCellTower setBsid:](v21, "setBsid:", *(unsigned int *)(v22 + 432 * v19 + 44));
        -[ALSCdmaCellTower setZoneid:](v21, "setZoneid:", *(unsigned int *)(v22 + 432 * v19 + 40));
        -[ALSCdmaCellTower setBandclass:](v21, "setBandclass:", *(unsigned int *)(v22 + 432 * v19 + 48));
        -[ALSCdmaCellTower setChannel:](v21, "setChannel:", *(unsigned int *)(v22 + 432 * v19 + 52));
        -[ALSCdmaCellTower setPnoffset:](v21, "setPnoffset:", *(unsigned int *)(v22 + 432 * v19 + 56));
        v24 = v22 + 432 * v19;
        v27 = *(unsigned int **)(v24 + 8);
        v26 = (_QWORD *)(v24 + 8);
        v25 = v27;
        v28 = v26 + 1;
        if ((unsigned int *)v26[1] == v27)
        {
          if (qword_1022A0290 != -1)
            dispatch_once(&qword_1022A0290, &stru_10214A378);
          v29 = qword_1022A0298;
          if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_DEFAULT))
          {
            v30 = *v23;
            LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
            HIDWORD(buf.__r_.__value_.__r.__words[0]) = v30;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#Warning query: don't have derivedMcc - using %d", (uint8_t *)&buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1022A0290 != -1)
              dispatch_once(&qword_1022A0290, &stru_10214A378);
            v53 = *v23;
            LODWORD(v176.__r_.__value_.__l.__data_) = 67109120;
            HIDWORD(v176.__r_.__value_.__r.__words[0]) = v53;
            _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0298, 0, "#Warning query: don't have derivedMcc - using %d", &v176);
            v55 = (std::string *)v54;
            sub_100512490("Generic", 1, 0, 2, "ALSLocationRequest *CLNetworkLocationRequesterALS::createUnifiedQueryRequest(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", v54);
            if (v55 != &buf)
              free(v55);
          }
          v25 = v23;
        }
        -[ALSCdmaCellTower setMcc:](v21, "setMcc:", *v25);
        if (*v26 == *v28)
        {
          if (qword_1022A0290 != -1)
            dispatch_once(&qword_1022A0290, &stru_10214A378);
          v45 = qword_1022A0298;
          if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_DEBUG))
          {
            v46 = -[ALSCdmaCellTower mcc](v21, "mcc");
            LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
            HIDWORD(buf.__r_.__value_.__r.__words[0]) = v46;
            _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "query: Adding single derivedMcc %d", (uint8_t *)&buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1022A0290 != -1)
              dispatch_once(&qword_1022A0290, &stru_10214A378);
            v56 = qword_1022A0298;
            v57 = -[ALSCdmaCellTower mcc](v21, "mcc");
            LODWORD(v176.__r_.__value_.__l.__data_) = 67109120;
            HIDWORD(v176.__r_.__value_.__r.__words[0]) = v57;
            _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v56, 2, "query: Adding single derivedMcc %d", &v176);
            v59 = (std::string *)v58;
            sub_100512490("Generic", 1, 0, 2, "ALSLocationRequest *CLNetworkLocationRequesterALS::createUnifiedQueryRequest(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", v58);
            if (v59 != &buf)
              free(v59);
          }
          -[ALSLocationRequest addCdmaCellTower:](v173, "addCdmaCellTower:", v21);
        }
        else
        {
          v31 = 0;
          do
          {
            v32 = objc_alloc_init(ALSCdmaCellTower);
            -[ALSCdmaCellTower setSid:](v32, "setSid:", -[ALSCdmaCellTower sid](v21, "sid"));
            -[ALSCdmaCellTower setNid:](v32, "setNid:", -[ALSCdmaCellTower nid](v21, "nid"));
            -[ALSCdmaCellTower setBsid:](v32, "setBsid:", -[ALSCdmaCellTower bsid](v21, "bsid"));
            -[ALSCdmaCellTower setZoneid:](v32, "setZoneid:", -[ALSCdmaCellTower zoneid](v21, "zoneid"));
            -[ALSCdmaCellTower setBandclass:](v32, "setBandclass:", -[ALSCdmaCellTower bandclass](v21, "bandclass"));
            -[ALSCdmaCellTower setChannel:](v32, "setChannel:", -[ALSCdmaCellTower channel](v21, "channel"));
            -[ALSCdmaCellTower setPnoffset:](v32, "setPnoffset:", -[ALSCdmaCellTower pnoffset](v21, "pnoffset"));
            -[ALSCdmaCellTower setMcc:](v32, "setMcc:", *(unsigned int *)(*v26 + 4 * v31));
            if (qword_1022A0290 != -1)
              dispatch_once(&qword_1022A0290, &stru_10214A378);
            v33 = qword_1022A0298;
            if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_DEBUG))
            {
              v34 = -[ALSCdmaCellTower mcc](v32, "mcc");
              LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
              HIDWORD(buf.__r_.__value_.__r.__words[0]) = v34;
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "query: Adding multi derivedMcc %d", (uint8_t *)&buf, 8u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(&buf, 0x65CuLL);
              if (qword_1022A0290 != -1)
                dispatch_once(&qword_1022A0290, &stru_10214A378);
              v35 = qword_1022A0298;
              v36 = -[ALSCdmaCellTower mcc](v32, "mcc");
              LODWORD(v176.__r_.__value_.__l.__data_) = 67109120;
              HIDWORD(v176.__r_.__value_.__r.__words[0]) = v36;
              _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v35, 2, "query: Adding multi derivedMcc %d", &v176);
              v38 = (std::string *)v37;
              sub_100512490("Generic", 1, 0, 2, "ALSLocationRequest *CLNetworkLocationRequesterALS::createUnifiedQueryRequest(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", v37);
              if (v38 != &buf)
                free(v38);
            }
            -[ALSLocationRequest addCdmaCellTower:](v173, "addCdmaCellTower:", v32);

            ++v31;
          }
          while (v31 < (uint64_t)(*v28 - *v26) >> 2);
        }
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A310);
        v47 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          sub_10066D264((unsigned int *)(*v168 + 432 * v19), &buf);
          v48 = &buf;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v48 = (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(v176.__r_.__value_.__l.__data_) = 67240451;
          HIDWORD(v176.__r_.__value_.__r.__words[0]) = v20;
          LOWORD(v176.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v176.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v48;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "AlsCell, cdma, query, %{public}d, key, %{private}s", (uint8_t *)&v176, 0x12u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10214A310);
          v49 = qword_1022A0048;
          sub_10066D264((unsigned int *)(*v168 + 432 * v19), &v176);
          v50 = &v176;
          if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v50 = (std::string *)v176.__r_.__value_.__r.__words[0];
          *(_DWORD *)v175 = 67240451;
          *(_DWORD *)&v175[4] = v20;
          *(_WORD *)&v175[8] = 2081;
          *(_QWORD *)&v175[10] = v50;
          LODWORD(v164) = 18;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v49, 2, "AlsCell, cdma, query, %{public}d, key, %{private}s", v175, v164);
          v52 = v51;
          if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v176.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "ALSLocationRequest *CLNetworkLocationRequesterALS::createUnifiedQueryRequest(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", (const char *)v52);
          if (v52 != &buf)
            free(v52);
        }

      }
      v19 = ++v20;
    }
    while (0x84BDA12F684BDA13 * ((v168[1] - *v168) >> 4) > v20);
  }
  if (v172[1] != *v172)
  {
    v60 = 0;
    v61 = 1;
    do
    {
      if (v61 - 1 > 0x63)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A310);
        v65 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          sub_10066D618((_DWORD *)(*v172 + 32 * v60), &buf);
          v66 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &buf
              : (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(v176.__r_.__value_.__l.__data_) = 67240451;
          HIDWORD(v176.__r_.__value_.__r.__words[0]) = v61 - 1;
          LOWORD(v176.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v176.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v66;
          _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "AlsCell, gsm, dropping, %{public}u, key, %{private}s, #CloneMe", (uint8_t *)&v176, 0x12u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10214A310);
          v67 = qword_1022A0048;
          sub_10066D618((_DWORD *)(*v172 + 32 * v60), &v176);
          v68 = &v176;
          if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v68 = (std::string *)v176.__r_.__value_.__r.__words[0];
          *(_DWORD *)v175 = 67240451;
          *(_DWORD *)&v175[4] = v61 - 1;
          *(_WORD *)&v175[8] = 2081;
          *(_QWORD *)&v175[10] = v68;
          LODWORD(v164) = 18;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v67, 0, "AlsCell, gsm, dropping, %{public}u, key, %{private}s, #CloneMe", v175, v164);
          v70 = v69;
          if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v176.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "ALSLocationRequest *CLNetworkLocationRequesterALS::createUnifiedQueryRequest(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", (const char *)v70);
          if (v70 != &buf)
            free(v70);
        }
      }
      else
      {
        v62 = objc_alloc_init(ALSCellTower);
        -[ALSCellTower setMcc:](v62, "setMcc:", *(unsigned int *)(*v172 + 32 * v60));
        -[ALSCellTower setMnc:](v62, "setMnc:", *(unsigned int *)(*v172 + 32 * v60 + 4));
        -[ALSCellTower setLacID:](v62, "setLacID:", *(unsigned int *)(*v172 + 32 * v60 + 8));
        -[ALSCellTower setCellID:](v62, "setCellID:", *(unsigned int *)(*v172 + 32 * v60 + 12));
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A310);
        v63 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          sub_10066D618((_DWORD *)(*v172 + 32 * v60), &buf);
          v64 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &buf
              : (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(v176.__r_.__value_.__l.__data_) = 67240451;
          HIDWORD(v176.__r_.__value_.__r.__words[0]) = v61 - 1;
          LOWORD(v176.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v176.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v64;
          _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "AlsCell, gsm, query, %{public}d, key, %{private}s", (uint8_t *)&v176, 0x12u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10214A310);
          v71 = qword_1022A0048;
          sub_10066D618((_DWORD *)(*v172 + 32 * v60), &v176);
          v72 = &v176;
          if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v72 = (std::string *)v176.__r_.__value_.__r.__words[0];
          *(_DWORD *)v175 = 67240451;
          *(_DWORD *)&v175[4] = v61 - 1;
          *(_WORD *)&v175[8] = 2081;
          *(_QWORD *)&v175[10] = v72;
          LODWORD(v164) = 18;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v71, 2, "AlsCell, gsm, query, %{public}d, key, %{private}s", v175, v164);
          v74 = v73;
          if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v176.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "ALSLocationRequest *CLNetworkLocationRequesterALS::createUnifiedQueryRequest(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", (const char *)v74);
          if (v74 != &buf)
            free(v74);
        }
        -[ALSLocationRequest addCellTower:](v173, "addCellTower:", v62);

      }
      v60 = v61++;
    }
    while (v60 < (uint64_t)(v172[1] - *v172) >> 5);
  }
  if (v171[1] != *v171)
  {
    v75 = 0;
    v76 = 1;
    do
    {
      if (v76 - 1 > 0x63)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A310);
        v80 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          sub_10066D618((_DWORD *)(*v171 + 32 * v75), &buf);
          v81 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &buf
              : (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(v176.__r_.__value_.__l.__data_) = 67240451;
          HIDWORD(v176.__r_.__value_.__r.__words[0]) = v76 - 1;
          LOWORD(v176.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v176.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v81;
          _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "AlsCell. scdma, dropping, %{public}u, key, %{private}s, #CloneMe", (uint8_t *)&v176, 0x12u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10214A310);
          v82 = qword_1022A0048;
          sub_10066D618((_DWORD *)(*v171 + 32 * v75), &v176);
          v83 = &v176;
          if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v83 = (std::string *)v176.__r_.__value_.__r.__words[0];
          *(_DWORD *)v175 = 67240451;
          *(_DWORD *)&v175[4] = v76 - 1;
          *(_WORD *)&v175[8] = 2081;
          *(_QWORD *)&v175[10] = v83;
          LODWORD(v164) = 18;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v82, 0, "AlsCell. scdma, dropping, %{public}u, key, %{private}s, #CloneMe", v175, v164);
          v85 = v84;
          if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v176.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "ALSLocationRequest *CLNetworkLocationRequesterALS::createUnifiedQueryRequest(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", (const char *)v85);
          if (v85 != &buf)
            free(v85);
        }
      }
      else
      {
        v77 = objc_alloc_init(ALSScdmaCellTower);
        -[ALSScdmaCellTower setMcc:](v77, "setMcc:", *(unsigned int *)(*v171 + 32 * v75));
        -[ALSScdmaCellTower setMnc:](v77, "setMnc:", *(unsigned int *)(*v171 + 32 * v75 + 4));
        -[ALSScdmaCellTower setLacID:](v77, "setLacID:", *(unsigned int *)(*v171 + 32 * v75 + 8));
        -[ALSScdmaCellTower setCellID:](v77, "setCellID:", *(unsigned int *)(*v171 + 32 * v75 + 12));
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A310);
        v78 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          sub_10066D618((_DWORD *)(*v171 + 32 * v75), &buf);
          v79 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &buf
              : (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(v176.__r_.__value_.__l.__data_) = 67240451;
          HIDWORD(v176.__r_.__value_.__r.__words[0]) = v76 - 1;
          LOWORD(v176.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v176.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v79;
          _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEBUG, "AlsCell, scdma, query, %{public}d, key, %{private}s", (uint8_t *)&v176, 0x12u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10214A310);
          v86 = qword_1022A0048;
          sub_10066D618((_DWORD *)(*v171 + 32 * v75), &v176);
          v87 = &v176;
          if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v87 = (std::string *)v176.__r_.__value_.__r.__words[0];
          *(_DWORD *)v175 = 67240451;
          *(_DWORD *)&v175[4] = v76 - 1;
          *(_WORD *)&v175[8] = 2081;
          *(_QWORD *)&v175[10] = v87;
          LODWORD(v164) = 18;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v86, 2, "AlsCell, scdma, query, %{public}d, key, %{private}s", v175, v164);
          v89 = v88;
          if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v176.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "ALSLocationRequest *CLNetworkLocationRequesterALS::createUnifiedQueryRequest(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", (const char *)v89);
          if (v89 != &buf)
            free(v89);
        }
        -[ALSLocationRequest addScdmaCellTower:](v173, "addScdmaCellTower:", v77);

      }
      v75 = v76++;
    }
    while (v75 < (uint64_t)(v171[1] - *v171) >> 5);
  }
  if (v170[1] != *v170)
  {
    v90 = 0;
    v91 = 1;
    do
    {
      if (v91 - 1 > 0x63)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A310);
        v95 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          sub_10009643C((unsigned int *)(*v170 + 88 * v90), &buf);
          v96 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &buf
              : (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(v176.__r_.__value_.__l.__data_) = 67240451;
          HIDWORD(v176.__r_.__value_.__r.__words[0]) = v91 - 1;
          LOWORD(v176.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v176.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v96;
          _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "AlsCell. lte, dropping, %{public}u, key, %{private}s, #CloneMe", (uint8_t *)&v176, 0x12u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10214A310);
          v98 = qword_1022A0048;
          sub_10009643C((unsigned int *)(*v170 + 88 * v90), &v176);
          v99 = &v176;
          if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v99 = (std::string *)v176.__r_.__value_.__r.__words[0];
          *(_DWORD *)v175 = 67240451;
          *(_DWORD *)&v175[4] = v91 - 1;
          *(_WORD *)&v175[8] = 2081;
          *(_QWORD *)&v175[10] = v99;
          LODWORD(v164) = 18;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v98, 0, "AlsCell. lte, dropping, %{public}u, key, %{private}s, #CloneMe", v175, v164);
          v101 = v100;
          if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v176.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "ALSLocationRequest *CLNetworkLocationRequesterALS::createUnifiedQueryRequest(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", (const char *)v101);
          if (v101 != &buf)
            free(v101);
        }
      }
      else
      {
        v92 = objc_alloc_init(ALSLteCellTower);
        -[ALSLteCellTower setMcc:](v92, "setMcc:", *(unsigned int *)(*v170 + 88 * v90));
        -[ALSLteCellTower setMnc:](v92, "setMnc:", *(unsigned int *)(*v170 + 88 * v90 + 4));
        -[ALSLteCellTower setTacID:](v92, "setTacID:", *(unsigned int *)(*v170 + 88 * v90 + 8));
        -[ALSLteCellTower setCellID:](v92, "setCellID:", *(unsigned int *)(*v170 + 88 * v90 + 12));
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A310);
        v93 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          sub_1001C35D0((unsigned int *)(*v170 + 88 * v90), &buf);
          v94 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &buf
              : (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(v176.__r_.__value_.__l.__data_) = 67240451;
          HIDWORD(v176.__r_.__value_.__r.__words[0]) = v91 - 1;
          LOWORD(v176.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v176.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v94;
          _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEBUG, "AlsCell, lte, query, %{public}d, key, %{private}s", (uint8_t *)&v176, 0x12u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10214A310);
          v102 = qword_1022A0048;
          sub_1001C35D0((unsigned int *)(*v170 + 88 * v90), &v176);
          v103 = &v176;
          if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v103 = (std::string *)v176.__r_.__value_.__r.__words[0];
          *(_DWORD *)v175 = 67240451;
          *(_DWORD *)&v175[4] = v91 - 1;
          *(_WORD *)&v175[8] = 2081;
          *(_QWORD *)&v175[10] = v103;
          LODWORD(v164) = 18;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v102, 2, "AlsCell, lte, query, %{public}d, key, %{private}s", v175, v164);
          v105 = v104;
          if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v176.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "ALSLocationRequest *CLNetworkLocationRequesterALS::createUnifiedQueryRequest(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", (const char *)v105);
          if (v105 != &buf)
            free(v105);
        }
        -[ALSLocationRequest addLteCellTower:](v173, "addLteCellTower:", v92);

      }
      v90 = v91;
      v97 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v170[1] - *v170) >> 3) > (unint64_t)v91++;
    }
    while (v97);
  }
  if (v169[1] != *v169)
  {
    v106 = 0;
    v107 = 1;
    do
    {
      if (v107 - 1 > 0x63)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A310);
        v111 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          sub_1005A2548((unsigned int *)(*v169 + 96 * v106), &buf);
          v112 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? &buf
               : (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(v176.__r_.__value_.__l.__data_) = 67240451;
          HIDWORD(v176.__r_.__value_.__r.__words[0]) = v107 - 1;
          LOWORD(v176.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v176.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v112;
          _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEFAULT, "AlsCell. nr, dropping, %{public}u, key, %{private}s, #CloneMe", (uint8_t *)&v176, 0x12u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10214A310);
          v113 = qword_1022A0048;
          sub_1005A2548((unsigned int *)(*v169 + 96 * v106), &v176);
          v114 = &v176;
          if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v114 = (std::string *)v176.__r_.__value_.__r.__words[0];
          *(_DWORD *)v175 = 67240451;
          *(_DWORD *)&v175[4] = v107 - 1;
          *(_WORD *)&v175[8] = 2081;
          *(_QWORD *)&v175[10] = v114;
          LODWORD(v164) = 18;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v113, 0, "AlsCell. nr, dropping, %{public}u, key, %{private}s, #CloneMe", v175, v164);
          v116 = v115;
          if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v176.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "ALSLocationRequest *CLNetworkLocationRequesterALS::createUnifiedQueryRequest(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", (const char *)v116);
          if (v116 != &buf)
            free(v116);
        }
      }
      else
      {
        v108 = objc_alloc_init(ALSNr5GCellTower);
        -[ALSNr5GCellTower setMcc:](v108, "setMcc:", *(unsigned int *)(*v169 + 96 * v106));
        -[ALSNr5GCellTower setMnc:](v108, "setMnc:", *(unsigned int *)(*v169 + 96 * v106 + 4));
        -[ALSNr5GCellTower setTacID:](v108, "setTacID:", *(unsigned int *)(*v169 + 96 * v106 + 8));
        -[ALSNr5GCellTower setCellID:](v108, "setCellID:", *(_QWORD *)(*v169 + 96 * v106 + 16));
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A310);
        v109 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          sub_10066537C((unsigned int *)(*v169 + 96 * v106), &buf);
          v110 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? &buf
               : (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(v176.__r_.__value_.__l.__data_) = 67240451;
          HIDWORD(v176.__r_.__value_.__r.__words[0]) = v107 - 1;
          LOWORD(v176.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v176.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v110;
          _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEBUG, "AlsCell, nr, query, %{public}d, key, %{private}s", (uint8_t *)&v176, 0x12u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10214A310);
          v117 = qword_1022A0048;
          sub_10066537C((unsigned int *)(*v169 + 96 * v106), &v176);
          v118 = &v176;
          if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v118 = (std::string *)v176.__r_.__value_.__r.__words[0];
          *(_DWORD *)v175 = 67240451;
          *(_DWORD *)&v175[4] = v107 - 1;
          *(_WORD *)&v175[8] = 2081;
          *(_QWORD *)&v175[10] = v118;
          LODWORD(v164) = 18;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v117, 2, "AlsCell, nr, query, %{public}d, key, %{private}s", v175, v164);
          v120 = v119;
          if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v176.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "ALSLocationRequest *CLNetworkLocationRequesterALS::createUnifiedQueryRequest(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", (const char *)v120);
          if (v120 != &buf)
            free(v120);
        }
        -[ALSLocationRequest addNr5GCellTower:](v173, "addNr5GCellTower:", v108);

      }
      v106 = v107;
      v97 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v169[1] - *v169) >> 5) > v107++;
    }
    while (v97);
  }
  sub_100197040();
  if ((sub_1001B796C() & 1) != 0)
    v121 = *(unsigned int *)(a1 + 296);
  else
    v121 = 0;
  -[ALSLocationRequest setNumberOfSurroundingCells:](v173, "setNumberOfSurroundingCells:", v121);
  if (a7[1] != *a7)
  {
    v122 = 0;
    v123 = 1;
    do
    {
      if (v123 - 1 > 0x3E7)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A310);
        v131 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          sub_1000C2254((_QWORD *)(*a7 + 8 * v122), &buf);
          v132 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? &buf
               : (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(v176.__r_.__value_.__l.__data_) = 136380931;
          *(std::string::size_type *)((char *)v176.__r_.__value_.__r.__words + 4) = (std::string::size_type)v132;
          WORD2(v176.__r_.__value_.__r.__words[1]) = 1026;
          *(_DWORD *)((char *)&v176.__r_.__value_.__r.__words[1] + 6) = v123 - 1;
          _os_log_impl((void *)&_mh_execute_header, v131, OS_LOG_TYPE_DEFAULT, "AlsWifi, dropping, %{private}s, %{public}u, #CloneMe", (uint8_t *)&v176, 0x12u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10214A310);
          v137 = qword_1022A0048;
          sub_1000C2254((_QWORD *)(*a7 + 8 * v122), &v176);
          v138 = &v176;
          if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v138 = (std::string *)v176.__r_.__value_.__r.__words[0];
          *(_DWORD *)v175 = 136380931;
          *(_QWORD *)&v175[4] = v138;
          *(_WORD *)&v175[12] = 1026;
          *(_DWORD *)&v175[14] = v123 - 1;
          LODWORD(v164) = 18;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v137, 0, "AlsWifi, dropping, %{private}s, %{public}u, #CloneMe", v175, v164);
          v140 = v139;
          if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v176.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "ALSLocationRequest *CLNetworkLocationRequesterALS::createUnifiedQueryRequest(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", (const char *)v140);
          if (v140 != &buf)
            free(v140);
        }
      }
      else
      {
        v124 = objc_alloc_init(ALSWirelessAP);
        v125 = *a7;
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A310);
        v126 = (_QWORD *)(v125 + 8 * v122);
        v127 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          sub_1000C2254(v126, &buf);
          v128 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? &buf
               : (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(v176.__r_.__value_.__l.__data_) = 136380931;
          *(std::string::size_type *)((char *)v176.__r_.__value_.__r.__words + 4) = (std::string::size_type)v128;
          WORD2(v176.__r_.__value_.__r.__words[1]) = 1026;
          *(_DWORD *)((char *)&v176.__r_.__value_.__r.__words[1] + 6) = v123 - 1;
          _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_DEBUG, "AlsWifi, query, %{private}s, %{public}d", (uint8_t *)&v176, 0x12u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10214A310);
          v133 = qword_1022A0048;
          sub_1000C2254(v126, &v176);
          v134 = &v176;
          if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v134 = (std::string *)v176.__r_.__value_.__r.__words[0];
          *(_DWORD *)v175 = 136380931;
          *(_QWORD *)&v175[4] = v134;
          *(_WORD *)&v175[12] = 1026;
          *(_DWORD *)&v175[14] = v123 - 1;
          LODWORD(v164) = 18;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v133, 2, "AlsWifi, query, %{private}s, %{public}d", v175, v164);
          v136 = v135;
          if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v176.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "ALSLocationRequest *CLNetworkLocationRequesterALS::createUnifiedQueryRequest(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", (const char *)v136);
          if (v136 != &buf)
            free(v136);
        }
        sub_1000C2150(v126, &buf);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v129 = &buf;
        else
          v129 = (std::string *)buf.__r_.__value_.__r.__words[0];
        v130 = sub_1001A48D8((char *)v129);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        -[ALSWirelessAP setMacID:](v124, "setMacID:", v130);
        CFRelease(v130);
        -[ALSLocationRequest addWirelessAP:](v173, "addWirelessAP:", v124);

      }
      v122 = v123++;
    }
    while (v122 < (a7[1] - *a7) >> 3);
  }
  v141 = *a8;
  memset(&buf, 0, sizeof(buf));
  if (v141 == 3)
  {
    v144 = operator new(4uLL);
    *v144 = 1;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v144;
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v144 + 1);
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v144 + 1);
    v146 = sub_100260634((uint64_t)&buf.__r_.__value_.__r.__words[2], 2uLL);
    size = buf.__r_.__value_.__l.__size_;
    v147 = (void *)buf.__r_.__value_.__r.__words[0];
    v146[1] = 2;
    v142 = v146 + 1;
    v149 = v146 + 2;
    while ((void *)size != v147)
    {
      v150 = *(_DWORD *)(size - 4);
      size -= 4;
      *--v142 = v150;
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v142;
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v146 + 2);
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)&v146[v145];
    if (v147)
    {
      operator delete(v147);
      v142 = (unsigned int *)buf.__r_.__value_.__r.__words[0];
    }
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)v149;
    if (v142 == v149)
      goto LABEL_301;
  }
  else
  {
    if (v141 == 2)
    {
      v142 = (unsigned int *)operator new(4uLL);
      v143 = 2;
    }
    else
    {
      if (v141 != 1)
        goto LABEL_302;
      v142 = (unsigned int *)operator new(4uLL);
      v143 = 1;
    }
    *v142 = v143;
    v149 = v142 + 1;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v142;
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v142 + 1);
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v142 + 1);
  }
  do
    -[ALSLocationRequest addSurroundingWifiBands:](v173, "addSurroundingWifiBands:", *v142++);
  while (v142 != v149);
  v149 = (unsigned int *)buf.__r_.__value_.__r.__words[0];
  if (buf.__r_.__value_.__r.__words[0])
  {
LABEL_301:
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)v149;
    operator delete(v149);
  }
LABEL_302:
  -[ALSLocationRequest setWifiAltitudeScale:](v173, "setWifiAltitudeScale:", 2);
  sub_100197040();
  if ((sub_1001B796C() & 2) != 0)
    v151 = *(unsigned int *)(a1 + 300);
  else
    v151 = 0;
  -[ALSLocationRequest setNumberOfSurroundingWifis:](v173, "setNumberOfSurroundingWifis:", v151);
  if (-[ALSLocationRequest wirelessAPsCount](v173, "wirelessAPsCount"))
    sub_100A98264((_QWORD *)(a1 + 392), -[ALSLocationRequest wirelessAPsCount](v173, "wirelessAPsCount"), -[ALSLocationRequest numberOfSurroundingWifis](v173, "numberOfSurroundingWifis"));
  if (-[ALSLocationRequest cellTowersCount](v173, "cellTowersCount")
    || -[ALSLocationRequest lteCellTowersCount](v173, "lteCellTowersCount")
    || -[ALSLocationRequest cdmaCellTowersCount](v173, "cdmaCellTowersCount")
    || -[ALSLocationRequest nr5GCellTowersCount](v173, "nr5GCellTowersCount"))
  {
    *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf.__r_.__value_.__l.__size_;
    v152 = -[ALSLocationRequest cellTowersCount](v173, "cellTowersCount");
    sub_100A9837C(&v176);
    *(_QWORD *)v175 = &v176;
    *((_QWORD *)sub_100318A40((uint64_t **)&buf, (const void **)&v176.__r_.__value_.__l.__data_, (uint64_t)&unk_101B9EB60, (_OWORD **)v175)+ 7) = v152;
    if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v176.__r_.__value_.__l.__data_);
    v153 = -[ALSLocationRequest cdmaCellTowersCount](v173, "cdmaCellTowersCount");
    sub_100A9838C(&v176);
    *(_QWORD *)v175 = &v176;
    *((_QWORD *)sub_100318A40((uint64_t **)&buf, (const void **)&v176.__r_.__value_.__l.__data_, (uint64_t)&unk_101B9EB60, (_OWORD **)v175)+ 7) = v153;
    if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v176.__r_.__value_.__l.__data_);
    v154 = -[ALSLocationRequest lteCellTowersCount](v173, "lteCellTowersCount");
    sub_100A9839C(&v176);
    *(_QWORD *)v175 = &v176;
    *((_QWORD *)sub_100318A40((uint64_t **)&buf, (const void **)&v176.__r_.__value_.__l.__data_, (uint64_t)&unk_101B9EB60, (_OWORD **)v175)+ 7) = v154;
    if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v176.__r_.__value_.__l.__data_);
    v155 = -[ALSLocationRequest nr5GCellTowersCount](v173, "nr5GCellTowersCount");
    sub_100A983AC(&v176);
    *(_QWORD *)v175 = &v176;
    *((_QWORD *)sub_100318A40((uint64_t **)&buf, (const void **)&v176.__r_.__value_.__l.__data_, (uint64_t)&unk_101B9EB60, (_OWORD **)v175)+ 7) = v155;
    if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v176.__r_.__value_.__l.__data_);
    v174 = buf;
    if (buf.__r_.__value_.__r.__words[2])
    {
      *(_QWORD *)(buf.__r_.__value_.__l.__size_ + 16) = &v174.__r_.__value_.__l.__size_;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf.__r_.__value_.__l.__size_;
      *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
    }
    else
    {
      v174.__r_.__value_.__r.__words[0] = (std::string::size_type)&v174.__r_.__value_.__l.__size_;
    }
    sub_100A97E60(a1 + 392, &v174, -[ALSLocationRequest numberOfSurroundingWifis](v173, "numberOfSurroundingWifis"));
    sub_100090AE4((uint64_t)&v174, (char *)v174.__r_.__value_.__l.__size_);
    sub_100090AE4((uint64_t)&buf, (char *)buf.__r_.__value_.__l.__size_);
  }
  return v173;
}

void sub_10066CF00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_10066CF98(void *a1)
{
  id v2;
  unint64_t v3;

  v2 = +[NSMutableArray array](NSMutableArray, "array");
  if (objc_msgSend(a1, "surroundingWifiBandsCount"))
  {
    v3 = 0;
    do
      objc_msgSend(v2, "addObject:", -[NSNumber stringValue](+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)objc_msgSend(a1, "surroundingWifiBands") + v3++)), "stringValue"));
    while (v3 < (unint64_t)objc_msgSend(a1, "surroundingWifiBandsCount"));
  }
  return objc_msgSend(v2, "componentsJoinedByString:", CFSTR(", "));
}

NSDictionary *sub_10066D024(uint64_t a1)
{
  _QWORD v3[12];
  _QWORD v4[12];

  v3[0] = CFSTR("cdmaRequestCount");
  v4[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 32), "cdmaCellTowersCount") != 0);
  v3[1] = CFSTR("cdmaTowerCount");
  v4[1] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 32), "cdmaCellTowersCount"));
  v3[2] = CFSTR("cellRequestCount");
  v4[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 32), "cellTowersCount") != 0);
  v3[3] = CFSTR("cellTowerCount");
  v4[3] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 32), "cellTowersCount"));
  v4[4] = &off_10221B4C8;
  v3[4] = CFSTR("locationCount");
  v3[5] = CFSTR("lteRequestCount");
  v4[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 32), "lteCellTowersCount") != 0);
  v3[6] = CFSTR("lteTowerCount");
  v4[6] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 32), "lteCellTowersCount"));
  v3[7] = CFSTR("nr5gRequestCount");
  v4[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 32), "nr5GCellTowersCount") != 0);
  v3[8] = CFSTR("nr5gTowerCount");
  v4[8] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 32), "nr5GCellTowersCount"));
  v4[9] = &off_10221B4E0;
  v3[9] = CFSTR("totalRequestCount");
  v3[10] = CFSTR("wifiAPCount");
  v4[10] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 32), "wirelessAPsCount"));
  v3[11] = CFSTR("wifiRequestCount");
  v4[11] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 32), "wirelessAPsCount") != 0);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 12);
}

uint64_t sub_10066D25C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 472) = a2;
  return result;
}

uint64_t sub_10066D264@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  unsigned int *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void *__p[2];
  char v59;
  _QWORD v60[2];
  uint64_t v61;
  _QWORD v62[10];
  char v63;
  uint64_t v64;

  sub_100263E50((uint64_t)v60);
  v4 = sub_100263F7C(&v61, (uint64_t)"Band Class ", 11);
  v5 = (_QWORD *)std::ostream::operator<<(v4, a1[12]);
  v6 = sub_100263F7C(v5, (uint64_t)", ", 2);
  v7 = sub_100263F7C(v6, (uint64_t)"BSID ", 5);
  v8 = (_QWORD *)std::ostream::operator<<(v7, a1[11]);
  v9 = sub_100263F7C(v8, (uint64_t)", ", 2);
  v10 = sub_100263F7C(v9, (uint64_t)"RAT ", 4);
  v11 = (_QWORD *)std::ostream::operator<<(v10, a1[56]);
  v12 = sub_100263F7C(v11, (uint64_t)", ", 2);
  v13 = sub_100263F7C(v12, (uint64_t)"CellType ", 9);
  v14 = (_QWORD *)std::ostream::operator<<(v13, a1[57]);
  v15 = sub_100263F7C(v14, (uint64_t)", ", 2);
  v16 = sub_100263F7C(v15, (uint64_t)"Channel ", 8);
  v17 = (_QWORD *)std::ostream::operator<<(v16, a1[13]);
  v18 = sub_100263F7C(v17, (uint64_t)", ", 2);
  v19 = sub_100263F7C(v18, (uint64_t)"MCC ", 4);
  v20 = (_QWORD *)std::ostream::operator<<(v19, *a1);
  v21 = sub_100263F7C(v20, (uint64_t)", ", 2);
  v22 = sub_100263F7C(v21, (uint64_t)"MNC ", 4);
  v23 = (_QWORD *)std::ostream::operator<<(v22, a1[58]);
  v24 = sub_100263F7C(v23, (uint64_t)", ", 2);
  v25 = sub_100263F7C(v24, (uint64_t)"NID ", 4);
  v26 = (_QWORD *)std::ostream::operator<<(v25, a1[9]);
  v27 = sub_100263F7C(v26, (uint64_t)", ", 2);
  v28 = sub_100263F7C(v27, (uint64_t)"PN offset ", 10);
  v29 = (_QWORD *)std::ostream::operator<<(v28, a1[14]);
  v30 = sub_100263F7C(v29, (uint64_t)", ", 2);
  v31 = sub_100263F7C(v30, (uint64_t)"SID ", 4);
  v32 = (_QWORD *)std::ostream::operator<<(v31, a1[8]);
  v33 = sub_100263F7C(v32, (uint64_t)", ", 2);
  v34 = sub_100263F7C(v33, (uint64_t)"Zone ID ", 8);
  v35 = (_QWORD *)std::ostream::operator<<(v34, a1[10]);
  v36 = sub_100263F7C(v35, (uint64_t)", ", 2);
  v37 = sub_100263F7C(v36, (uint64_t)"Sector ID ", 10);
  v38 = *((char *)a1 + 263);
  if (v38 >= 0)
    v39 = (uint64_t)(a1 + 60);
  else
    v39 = *((_QWORD *)a1 + 30);
  if (v38 >= 0)
    v40 = *((unsigned __int8 *)a1 + 263);
  else
    v40 = *((_QWORD *)a1 + 31);
  v41 = sub_100263F7C(v37, v39, v40);
  v42 = sub_100263F7C(v41, (uint64_t)", ", 2);
  v43 = sub_100263F7C(v42, (uint64_t)"ltmOffset ", 10);
  v44 = (_QWORD *)std::ostream::operator<<(v43, a1[105]);
  v45 = sub_100263F7C(v44, (uint64_t)", ", 2);
  v46 = sub_100263F7C(v45, (uint64_t)"dayLightSaving ", 15);
  v47 = (_QWORD *)std::ostream::operator<<(v46, a1[106]);
  v48 = sub_100263F7C(v47, (uint64_t)", ", 2);
  v49 = sub_100263F7C(v48, (uint64_t)"derivedMccNum ", 14);
  v50 = (_QWORD *)std::ostream::operator<<(v49, (uint64_t)(*((_QWORD *)a1 + 2) - *((_QWORD *)a1 + 1)) >> 2);
  v51 = sub_100263F7C(v50, (uint64_t)", ", 2);
  v52 = sub_100263F7C(v51, (uint64_t)"derivedMCC ", 11);
  v53 = (unsigned int *)*((_QWORD *)a1 + 1);
  if (*((unsigned int **)a1 + 2) == v53)
    v54 = 0xFFFFFFFFLL;
  else
    v54 = *v53;
  std::ostream::operator<<(v52, v54);
  std::stringbuf::str(__p, v62);
  if (v59 >= 0)
    v55 = (char *)__p;
  else
    v55 = (char *)__p[0];
  sub_1015A2E04(a2, v55);
  if (v59 < 0)
    operator delete(__p[0]);
  *(_QWORD *)((char *)v60
  v61 = v56;
  if (v63 < 0)
    operator delete((void *)v62[8]);
  std::streambuf::~streambuf(v62);
  return std::ios::~ios(&v64);
}

void sub_10066D5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

_QWORD *sub_10066D618@<X0>(_DWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  char __str[64];

  snprintf(__str, 0x40uLL, "%03d,%03d,0x%x,0x%x", *a1, a1[1], a1[2], a1[3]);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_10066D698(uint64_t a1)
{
  return sub_100A9746C((_QWORD *)(a1 + 392));
}

void sub_10066D6A0(uint64_t a1)
{
  sub_100A97460((uint64_t **)(a1 + 392));
}

uint64_t sub_10066D6A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))(*(_QWORD *)a1 + 24))(a1, a2, a1 + 32, a1 + 56, a1 + 80, a1 + 104, a3, a4, a5);
}

void sub_10066D6EC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  void *v6;
  void *v7;
  _QWORD v8[7];
  int v9;
  int v10;

  v6 = *(void **)(a1 + 160);
  if (v6)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10066DDB4;
    v8[3] = &unk_1021461C0;
    v8[4] = a1;
    v8[5] = a2;
    v8[6] = a3;
    v9 = a4;
    v10 = a5;
    objc_msgSend(v6, "async:", v8);
  }
  else
  {
    v7 = (void *)sub_101903978();
    sub_10066D754(v7);
  }
}

void sub_10066D754(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_10066D780(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t result;
  uint64_t (*v5)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(v2 + 168);
  if (v3)
    v3(*(_QWORD *)(a1 + 40), 1, *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52), *(_QWORD *)(v2 + 152));
  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v5 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(v2 + 168);
  if (v5)
    return v5(v2, 0, *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52), *(_QWORD *)(v2 + 152));
  return result;
}

void sub_10066D7EC(id a1)
{
  qword_1022A02A8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

void sub_10066D818(id a1)
{
  qword_1022A0298 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Network");
}

uint64_t sub_10066D844(uint64_t a1)
{
  uint64_t result;
  uint64_t (*v3)(uint64_t, _QWORD, _QWORD, _QWORD);

  result = *(_QWORD *)(a1 + 32);
  v3 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(result + 224);
  if (v3)
    return v3(result, *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44), *(_QWORD *)(result + 152));
  return result;
}

uint64_t sub_10066D864(uint64_t a1)
{
  uint64_t result;
  uint64_t (*v3)(uint64_t, _QWORD, _QWORD, _QWORD);

  result = *(_QWORD *)(a1 + 32);
  v3 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(result + 232);
  if (v3)
    return v3(result, *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44), *(_QWORD *)(result + 152));
  return result;
}

void sub_10066D884(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_10066D8B0(uint64_t a1)
{
  uint64_t result;
  uint64_t (*v3)(uint64_t, _QWORD, _QWORD, _QWORD);

  result = *(_QWORD *)(a1 + 32);
  v3 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(result + 240);
  if (v3)
    return v3(result, *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44), *(_QWORD *)(result + 152));
  return result;
}

uint64_t sub_10066D8D0(uint64_t a1)
{
  uint64_t result;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);

  result = *(_QWORD *)(a1 + 32);
  v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(result + 208);
  if (v3)
    return v3(result, a1 + 40, a1 + 64, *(unsigned int *)(a1 + 88), *(unsigned int *)(a1 + 92), *(unsigned int *)(a1 + 96), *(_QWORD *)(result + 152));
  return result;
}

_QWORD *sub_10066D8FC(_QWORD *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  sub_10055CCF0(a1 + 5, *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  a1[8] = 0;
  a1[9] = 0;
  a1[10] = 0;
  return sub_10055CCF0(a1 + 8, *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 3));
}

void sub_10066D97C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_10066D998(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
}

uint64_t sub_10066D9DC()
{
  NSObject *v0;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214A398);
  v0 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Unimplemented CDMA NetworkLocationRequester", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214A398);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Unimplemented CDMA NetworkLocationRequester", v4, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 0, "virtual int CLNetworkLocationRequester::unifiedQuery(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &, int)", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
  return 0;
}

uint64_t sub_10066DB64()
{
  NSObject *v0;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214A398);
  v0 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "nearby data query not supported", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214A398);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "nearby data query not supported", v4, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 0, "virtual int CLNetworkLocationRequester::queryLocation(const CLDaemonLocation &, int)", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
  return 0xFFFFFFFFLL;
}

void sub_10066DCEC(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 432;
        sub_10066DD70((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10066DD70(uint64_t a1, uint64_t a2)
{
  void *v3;

  if (*(char *)(a2 + 263) < 0)
    operator delete(*(void **)(a2 + 240));
  v3 = *(void **)(a2 + 8);
  if (v3)
  {
    *(_QWORD *)(a2 + 16) = v3;
    operator delete(v3);
  }
}

uint64_t sub_10066DDB4(uint64_t a1)
{
  uint64_t result;
  uint64_t (*v3)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  result = *(_QWORD *)(a1 + 32);
  v3 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(result + 216);
  if (v3)
    return v3(result, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60), *(_QWORD *)(result + 152));
  return result;
}

uint64_t sub_10066DDD8()
{
  qword_102310A68 = (uint64_t)objc_msgSend(CFSTR("k2dot4GHZ"), "UTF8String");
  qword_102310A70 = (uint64_t)objc_msgSend(CFSTR("k2dot4GHZ"), "UTF8String");
  sub_100CDC4C8(&qword_102303150, "ALS");
  return __cxa_atexit((void (*)(void *))sub_1006625E0, &qword_102303150, (void *)&_mh_execute_header);
}

double sub_10066DE44(uint64_t *a1, double a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  double *v28;
  NSObject *v29;
  double *v30;
  double v31;
  double v32;
  NSObject *v33;
  NSObject *v34;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  NSObject *v42;
  double v43;
  uint64_t *v44;
  double v45;
  int v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  double *__p;
  char *v54;
  char *v55;
  int v56;
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  double v63;
  uint8_t buf[4];
  double v65;
  __int16 v66;
  double v67;
  __int16 v68;
  double v69;
  __int16 v70;
  double v71;

  if (*a1 == a1[1])
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214A4B8);
    v34 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, calculate uncertainty, empty accessPointWithWeights", buf, 2u);
    }
    v32 = -1.0;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214A4B8);
      LOWORD(v56) = 0;
      v49 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, calculate uncertainty, empty accessPointWithWeights", &v56, 2);
      sub_100512490("Generic", 1, 0, 2, "static double CLLocationCalculator::calculateWifiVerticalAccuracy(const std::vector<CLWifiAccessPoint> &, double)", "%s\n", v49);
      if (v49 != (char *)buf)
        free(v49);
    }
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214A4B8);
    v4 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v5 = -1431655765 * ((unint64_t)(a1[1] - *a1) >> 5);
      *(_DWORD *)buf = 67174657;
      LODWORD(v65) = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, calculate uncertainty, num accessPointWithWeights, %{private}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214A4B8);
      v46 = -1431655765 * ((unint64_t)(a1[1] - *a1) >> 5);
      v56 = 67174657;
      LODWORD(v57) = v46;
      v47 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, calculate uncertainty, num accessPointWithWeights, %{private}d", &v56, 8);
      sub_100512490("Generic", 1, 0, 2, "static double CLLocationCalculator::calculateWifiVerticalAccuracy(const std::vector<CLWifiAccessPoint> &, double)", "%s\n", v47);
      if (v47 != (char *)buf)
        free(v47);
    }
    __p = 0;
    v54 = 0;
    v55 = 0;
    v6 = *a1;
    v7 = a1[1];
    if (*a1 == v7)
      goto LABEL_38;
    v8 = 0;
    do
    {
      if (*(float *)(v6 + 84) > 0.0)
      {
        if (v8 >= v55)
        {
          v13 = __p;
          v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (char *)__p) >> 5);
          v15 = v14 + 1;
          if (v14 + 1 > 0x2AAAAAAAAAAAAAALL)
            sub_100259694();
          if (0x5555555555555556 * ((v55 - (char *)__p) >> 5) > v15)
            v15 = 0x5555555555555556 * ((v55 - (char *)__p) >> 5);
          if (0xAAAAAAAAAAAAAAABLL * ((v55 - (char *)__p) >> 5) >= 0x155555555555555)
            v16 = 0x2AAAAAAAAAAAAAALL;
          else
            v16 = v15;
          if (v16)
          {
            v17 = (char *)sub_10067257C((uint64_t)&v55, v16);
            v13 = __p;
            v8 = v54;
          }
          else
          {
            v17 = 0;
          }
          v18 = &v17[96 * v14];
          v19 = *(_OWORD *)(v6 + 16);
          *(_OWORD *)v18 = *(_OWORD *)v6;
          *((_OWORD *)v18 + 1) = v19;
          v20 = *(_OWORD *)(v6 + 32);
          v21 = *(_OWORD *)(v6 + 48);
          v22 = *(_OWORD *)(v6 + 80);
          *((_OWORD *)v18 + 4) = *(_OWORD *)(v6 + 64);
          *((_OWORD *)v18 + 5) = v22;
          *((_OWORD *)v18 + 2) = v20;
          *((_OWORD *)v18 + 3) = v21;
          if (v8 == (char *)v13)
          {
            v28 = (double *)&v17[96 * v14];
          }
          else
          {
            v23 = &v17[96 * v14];
            do
            {
              v24 = *((_OWORD *)v8 - 5);
              *((_OWORD *)v23 - 6) = *((_OWORD *)v8 - 6);
              *((_OWORD *)v23 - 5) = v24;
              v25 = *((_OWORD *)v8 - 4);
              v26 = *((_OWORD *)v8 - 3);
              v27 = *((_OWORD *)v8 - 2);
              v28 = (double *)(v23 - 96);
              *(_OWORD *)(v23 - 23) = *(_OWORD *)(v8 - 23);
              *((_OWORD *)v23 - 3) = v26;
              *((_OWORD *)v23 - 2) = v27;
              *((_OWORD *)v23 - 4) = v25;
              v8 -= 96;
              v23 -= 96;
            }
            while (v8 != (char *)v13);
          }
          v8 = v18 + 96;
          __p = v28;
          v55 = &v17[96 * v16];
          if (v13)
            operator delete(v13);
        }
        else
        {
          v9 = *(_OWORD *)(v6 + 16);
          *(_OWORD *)v8 = *(_OWORD *)v6;
          *((_OWORD *)v8 + 1) = v9;
          v10 = *(_OWORD *)(v6 + 32);
          v11 = *(_OWORD *)(v6 + 48);
          v12 = *(_OWORD *)(v6 + 80);
          *((_OWORD *)v8 + 4) = *(_OWORD *)(v6 + 64);
          *((_OWORD *)v8 + 5) = v12;
          *((_OWORD *)v8 + 2) = v10;
          *((_OWORD *)v8 + 3) = v11;
          v8 += 96;
        }
        v54 = v8;
      }
      v6 += 96;
    }
    while (v6 != v7);
    if (__p == (double *)v8)
    {
LABEL_38:
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214A4B8);
      v33 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, calculate uncertainty, accessPointsWithValidWeights is empty", buf, 2u);
      }
      v32 = -1.0;
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A4B8);
        LOWORD(v56) = 0;
        LODWORD(v52) = 2;
        v48 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, calculate uncertainty, accessPointsWithValidWeights is empty", &v56, v52);
        sub_100512490("Generic", 1, 0, 2, "static double CLLocationCalculator::calculateWifiVerticalAccuracy(const std::vector<CLWifiAccessPoint> &, double)", "%s\n", v48);
        if (v48 != (char *)buf)
          free(v48);
      }
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214A4B8);
      v29 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67174657;
        LODWORD(v65) = -1431655765 * ((unint64_t)(v54 - (char *)__p) >> 5);
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, calculate uncertainty, num accessPointsWithValidWeights, %{private}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A4B8);
        v56 = 67174657;
        LODWORD(v57) = -1431655765 * ((unint64_t)(v54 - (char *)__p) >> 5);
        LODWORD(v52) = 8;
        v50 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, calculate uncertainty, num accessPointsWithValidWeights, %{private}d", &v56, v52);
        sub_100512490("Generic", 1, 0, 2, "static double CLLocationCalculator::calculateWifiVerticalAccuracy(const std::vector<CLWifiAccessPoint> &, double)", "%s\n", v50);
        if (v50 != (char *)buf)
          free(v50);
      }
      v30 = __p;
      if (v54 - (char *)__p == 96)
      {
        v31 = __p[5];
        v32 = v31 * *((double *)sub_10012A448() + 32);
      }
      else
      {
        if (__p == (double *)v54)
        {
          v38 = 0.0;
          v37 = 0.0;
          v36 = 0.0;
        }
        else
        {
          v36 = 0.0;
          v37 = 0.0;
          v38 = 0.0;
          do
          {
            v39 = *((float *)v30 + 21);
            v38 = v38 + v39;
            v37 = v37 + v39 * v39;
            v36 = v36 + v39 * ((v30[2] - a2) * (v30[2] - a2));
            v30 += 12;
          }
          while (v30 != (double *)v54);
        }
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A4B8);
        v40 = v37 / v38;
        v41 = v38 - v37 / v38;
        v42 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134284289;
          v65 = v38;
          v66 = 2049;
          v67 = v37;
          v68 = 2049;
          v69 = v36;
          v70 = 2049;
          v71 = v38 - v40;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, calculate uncertainty, dSumWeightV, %{private}.2f, dSumWeightVSquare, %{private}.2f, dSumWeightedDeviation, %{private}.2f, altVarianceDivisor, %{private}.2f", buf, 0x2Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10214A4B8);
          v56 = 134284289;
          v57 = v38;
          v58 = 2049;
          v59 = v37;
          v60 = 2049;
          v61 = v36;
          v62 = 2049;
          v63 = v38 - v40;
          LODWORD(v52) = 42;
          v51 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, calculate uncertainty, dSumWeightV, %{private}.2f, dSumWeightVSquare, %{private}.2f, dSumWeightedDeviation, %{private}.2f, altVarianceDivisor, %{private}.2f", &v56, v52);
          sub_100512490("Generic", 1, 0, 2, "static double CLLocationCalculator::calculateWifiVerticalAccuracy(const std::vector<CLWifiAccessPoint> &, double)", "%s\n", v51);
          if (v51 != (char *)buf)
            free(v51);
        }
        v32 = -1.0;
        if (v38 > 0.0 && v41 > 0.0)
        {
          v43 = *((double *)sub_10012A448() + 32);
          v44 = sub_10012A448();
          v45 = sqrt(v36 / v41) * v43;
          if (v45 >= *((double *)v44 + 27))
            v32 = v45;
          else
            v32 = *((double *)v44 + 27);
        }
      }
    }
    if (__p)
      operator delete(__p);
  }
  return v32;
}

void sub_10066E7E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_10066E828(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  double *v6;
  unint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  double *v17;
  char *v18;
  double *v19;
  double v20;
  unint64_t v21;
  uint64_t v22;
  double *v23;
  double v24;
  double *v25;
  NSObject *v26;
  double v27;
  NSObject *v29;
  NSObject *v30;
  char *v31;
  char *v32;
  char *v33;
  const char *v34;
  double *__p;
  double *v36;
  char *v37;
  int v38;
  const char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  const char *v43;
  uint8_t buf[4];
  const char *v45;
  __int16 v46;
  int v47;
  __int16 v48;
  const char *v49;

  v4 = *a1;
  v5 = a1[1];
  if (v5 - *a1 != a2[1] - *a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214A4D8);
    v29 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315650;
      v45 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLLocationCalculator.mm";
      v46 = 1024;
      v47 = 482;
      v48 = 2080;
      v49 = "values.size() == weights.size()";
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214A4D8);
      v38 = 136315650;
      v39 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLLocationCalculator.mm";
      v40 = 1024;
      v41 = 482;
      v42 = 2080;
      v43 = "values.size() == weights.size()";
      v32 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assert Failed, %s, %d, %s", (const char *)&v38, 28, v34);
      sub_100512490("Generic", 1, 0, 0, "static double CLLocationCalculator::findWeightedMedian(const std::vector<double> &, const std::vector<double> &)", "%s\n", v32);
      if (v32 != (char *)buf)
        free(v32);
    }
    sub_100512450();
    v4 = *a1;
    v5 = a1[1];
  }
  if (v5 == v4)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214A4D8);
    v30 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315650;
      v45 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLLocationCalculator.mm";
      v46 = 1024;
      v47 = 483;
      v48 = 2080;
      v49 = "values.size() > 0";
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214A4D8);
      v38 = 136315650;
      v39 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLLocationCalculator.mm";
      v40 = 1024;
      v41 = 483;
      v42 = 2080;
      v43 = "values.size() > 0";
      v33 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assert Failed, %s, %d, %s", (const char *)&v38, 28, v34);
      sub_100512490("Generic", 1, 0, 0, "static double CLLocationCalculator::findWeightedMedian(const std::vector<double> &, const std::vector<double> &)", "%s\n", v33);
      if (v33 != (char *)buf)
        free(v33);
    }
    sub_100512450();
    v4 = *a1;
    v5 = a1[1];
  }
  __p = 0;
  v36 = 0;
  v37 = 0;
  if (v5 == v4)
  {
    v6 = 0;
    v19 = 0;
    v20 = 0.0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = *a2;
    v9 = 0.0;
    do
    {
      v10 = *(_QWORD *)(v4 + 8 * v7);
      v11 = *(_QWORD *)(v8 + 8 * v7);
      if (v6 >= (double *)v37)
      {
        v12 = ((char *)v6 - (char *)__p) >> 4;
        if ((unint64_t)(v12 + 1) >> 60)
          sub_100259694();
        v13 = (v37 - (char *)__p) >> 3;
        if (v13 <= v12 + 1)
          v13 = v12 + 1;
        if ((unint64_t)(v37 - (char *)__p) >= 0x7FFFFFFFFFFFFFF0)
          v14 = 0xFFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v15 = (char *)sub_10028E224((uint64_t)&v37, v14);
        else
          v15 = 0;
        v16 = &v15[16 * v12];
        *(_QWORD *)v16 = v10;
        *((_QWORD *)v16 + 1) = v11;
        v17 = v36;
        v18 = v16;
        if (v36 != __p)
        {
          do
          {
            *((_OWORD *)v18 - 1) = *((_OWORD *)v17 - 1);
            v18 -= 16;
            v17 -= 2;
          }
          while (v17 != __p);
          v17 = __p;
        }
        v6 = (double *)(v16 + 16);
        __p = (double *)v18;
        v37 = &v15[16 * v14];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_QWORD *)v6 = v10;
        *((_QWORD *)v6 + 1) = v11;
        v6 += 2;
      }
      v36 = v6;
      v8 = *a2;
      v9 = v9 + *(double *)(*a2 + 8 * v7++);
      v4 = *a1;
    }
    while (v7 < (a1[1] - *a1) >> 3);
    v19 = __p;
    v20 = v9 * 0.5;
  }
  v21 = 126 - 2 * __clz(((char *)v6 - (char *)v19) >> 4);
  if (v6 == v19)
    v22 = 0;
  else
    v22 = v21;
  sub_1006725C0(v19, v6, (uint64_t)buf, v22, 1);
  v23 = __p;
  if (__p == v36)
  {
LABEL_31:
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214A4D8);
    v26 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315650;
      v45 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLLocationCalculator.mm";
      v46 = 1024;
      v47 = 503;
      v48 = 2080;
      v49 = "false";
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214A4D8);
      v38 = 136315650;
      v39 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLLocationCalculator.mm";
      v40 = 1024;
      v41 = 503;
      v42 = 2080;
      v43 = "false";
      v31 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assert Failed, %s, %d, %s", (const char *)&v38, 28, v34);
      sub_100512490("Generic", 1, 0, 0, "static double CLLocationCalculator::findWeightedMedian(const std::vector<double> &, const std::vector<double> &)", "%s\n", v31);
      if (v31 != (char *)buf)
        free(v31);
    }
    sub_100512450();
    v23 = __p;
    v27 = 1.79769313e308;
    if (!__p)
      return v27;
LABEL_37:
    operator delete(v23);
    return v27;
  }
  v24 = 0.0;
  v25 = __p;
  while (1)
  {
    v24 = v24 + v25[1];
    if (v24 >= v20)
      break;
    v25 += 2;
    if (v25 == v36)
      goto LABEL_31;
  }
  v27 = *v25;
  if (__p)
    goto LABEL_37;
  return v27;
}

void sub_10066EF74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10066EFA8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  double v18;
  double *v19;
  double *v20;
  double *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  double *v27;
  uint64_t v28;
  double *v29;
  double *v30;
  double *v31;
  double *v32;
  double v33;
  double v34;
  double *v35;
  double *v36;
  double *v37;
  double v38;
  double v39;
  double v40;
  double *v41;
  double v42;
  double v43;
  double v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  double *v65;
  unint64_t v66;
  double *v67;
  _DWORD *v68;
  double v69;
  double v70;
  unsigned int v71;
  double *v72;
  double v73;
  NSObject *v74;
  double v76;
  double v77;
  double *v78;
  double *v79;
  double v80;
  double *v81;
  double v82;
  double v83;
  double v84;
  NSObject *v85;
  uint64_t v86;
  uint64_t v87;
  double *v88;
  double *v89;
  double v90;
  double *v91;
  double v92;
  double v93;
  uint64_t v94;
  double *v95;
  double **v96;
  double *v97;
  double *v98;
  double *v99;
  BOOL v100;
  double *v101;
  double v102;
  double *v103;
  double v104;
  double v105;
  uint64_t *v106;
  uint64_t *v107;
  char *v108;
  unint64_t v109;
  unint64_t v110;
  _OWORD *v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  char *v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  char *v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  char *v131;
  char *v132;
  void *v133;
  void *v134;
  char *v135;
  _QWORD *v136;
  void *v137;
  double *v138;
  uint64_t v139[3];
  void *v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char v145[8];
  _QWORD *v146;
  int v147;
  void *v148;
  double *v149;
  double *v150;
  char *v151;
  uint64_t *v152;
  unint64_t v153;
  void *v154;
  char *v155;
  char *v156;
  void *v157[4];
  _BYTE __p[24];
  double v159;

  v154 = 0;
  v155 = 0;
  v156 = 0;
  v151 = 0;
  v152 = 0;
  v153 = 0;
  v148 = 0;
  v149 = 0;
  v150 = 0;
  v2 = *a1;
  v3 = a1[1];
  if (*a1 == v3)
  {
    v30 = 0;
    v29 = 0;
  }
  else
  {
    do
    {
      v4 = v155;
      if (v155 >= v156)
      {
        v6 = (char *)v154;
        v7 = (v155 - (_BYTE *)v154) >> 3;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 61)
          sub_100259694();
        v9 = v156 - (_BYTE *)v154;
        if ((v156 - (_BYTE *)v154) >> 2 > v8)
          v8 = v9 >> 2;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
          v10 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        if (v10)
        {
          v11 = (char *)sub_10025E6A0((uint64_t)&v156, v10);
          v6 = (char *)v154;
          v4 = v155;
        }
        else
        {
          v11 = 0;
        }
        v12 = &v11[8 * v7];
        *(_QWORD *)v12 = *(_QWORD *)(v2 + 16);
        v5 = v12 + 8;
        while (v4 != v6)
        {
          v13 = *((_QWORD *)v4 - 1);
          v4 -= 8;
          *((_QWORD *)v12 - 1) = v13;
          v12 -= 8;
        }
        v154 = v12;
        v155 = v5;
        v156 = &v11[8 * v10];
        if (v6)
          operator delete(v6);
      }
      else
      {
        *(_QWORD *)v155 = *(_QWORD *)(v2 + 16);
        v5 = v4 + 8;
      }
      v155 = v5;
      v14 = *(_QWORD *)(v2 + 16);
      v15 = operator new(8uLL);
      *(_QWORD *)__p = v15;
      *v15 = v14;
      *(_QWORD *)&__p[8] = v15 + 1;
      *(_QWORD *)&__p[16] = v15 + 1;
      v16 = v152;
      if ((unint64_t)v152 >= v153)
      {
        v17 = sub_10025E6D4((uint64_t *)&v151, (uint64_t)__p);
      }
      else
      {
        *v152 = 0;
        v16[1] = 0;
        v16[2] = 0;
        sub_10025EA00(v16, *(const void **)__p, *(uint64_t *)&__p[8], (uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 3);
        v17 = (uint64_t)(v16 + 3);
      }
      v152 = (uint64_t *)v17;
      v18 = *(float *)(v2 + 84);
      v19 = v149;
      if (v149 >= v150)
      {
        v21 = (double *)v148;
        v22 = ((char *)v149 - (_BYTE *)v148) >> 3;
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 61)
          sub_100259694();
        v24 = (char *)v150 - (_BYTE *)v148;
        if (((char *)v150 - (_BYTE *)v148) >> 2 > v23)
          v23 = v24 >> 2;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
          v25 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25)
        {
          v26 = (char *)sub_10025E6A0((uint64_t)&v150, v25);
          v21 = (double *)v148;
          v19 = v149;
        }
        else
        {
          v26 = 0;
        }
        v27 = (double *)&v26[8 * v22];
        *v27 = v18;
        v20 = v27 + 1;
        while (v19 != v21)
        {
          v28 = *((_QWORD *)v19-- - 1);
          *((_QWORD *)v27-- - 1) = v28;
        }
        v148 = v27;
        v149 = v20;
        v150 = (double *)&v26[8 * v25];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *v149 = v18;
        v20 = v19 + 1;
      }
      v149 = v20;
      if (*(_QWORD *)__p)
      {
        *(_QWORD *)&__p[8] = *(_QWORD *)__p;
        operator delete(*(void **)__p);
      }
      v2 += 96;
    }
    while (v2 != v3);
    v29 = (double *)v154;
    v30 = (double *)v155;
  }
  sub_1006736D4((uint64_t)v145, v29, v30);
  v31 = (double *)v154;
  v32 = (double *)((char *)v154 + 8);
  v33 = *(double *)v154;
  if (v154 != v155 && v32 != (double *)v155)
  {
    v34 = *(double *)v154;
    v35 = (double *)((char *)v154 + 8);
    v36 = (double *)v154;
    v37 = (double *)((char *)v154 + 8);
    do
    {
      v38 = *v37++;
      v39 = v38;
      if (v34 < v38)
      {
        v34 = v39;
        v36 = v35;
      }
      v35 = v37;
    }
    while (v37 != (double *)v155);
    v40 = *v36;
    v41 = (double *)((char *)v154 + 8);
    do
    {
      v42 = *v41++;
      v43 = v42;
      if (v42 < v33)
      {
        v33 = v43;
        v31 = v32;
      }
      v32 = v41;
    }
    while (v41 != (double *)v155);
    v33 = v40;
  }
  v44 = *v31;
  if (v33 - v44 >= *((double *)sub_10012A448() + 25))
    v45 = *((_DWORD *)sub_10012A448() + 44);
  else
    v45 = 2;
  v46 = (unint64_t)(v155 - (_BYTE *)v154) >> 3;
  if (v147 < v45)
    v45 = v147;
  if (v45 >= (int)v46)
    v47 = (v46 - 1);
  else
    v47 = v45;
  if ((int)v47 < 2)
  {
    v48 = 0;
    goto LABEL_105;
  }
  v136 = a1;
  sub_100673974(&v143, v47);
  v49 = v143;
  v50 = v144;
  if (v143 != v144)
  {
    v51 = 0;
    v52 = (0xAAAAAAAAAAAAAAABLL * (((char *)v152 - v151) >> 3) - 1) / v47;
    do
    {
      v53 = *(_QWORD **)&v151[24 * (++v51 * v52)];
      v54 = *(_QWORD *)(v49 + 16);
      v55 = *(_QWORD **)(v49 + 8);
      if ((unint64_t)v55 >= v54)
      {
        v57 = *(_QWORD **)v49;
        v58 = ((uint64_t)v55 - *(_QWORD *)v49) >> 3;
        v59 = v58 + 1;
        if ((unint64_t)(v58 + 1) >> 61)
          sub_100259694();
        v60 = v54 - (_QWORD)v57;
        if (v60 >> 2 > v59)
          v59 = v60 >> 2;
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
          v61 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v61 = v59;
        if (v61)
        {
          v62 = (char *)sub_10025E6A0(v49 + 16, v61);
          v57 = *(_QWORD **)v49;
          v55 = *(_QWORD **)(v49 + 8);
        }
        else
        {
          v62 = 0;
        }
        v63 = &v62[8 * v58];
        *(_QWORD *)v63 = *v53;
        v56 = v63 + 8;
        while (v55 != v57)
        {
          v64 = *--v55;
          *((_QWORD *)v63 - 1) = v64;
          v63 -= 8;
        }
        *(_QWORD *)v49 = v63;
        *(_QWORD *)(v49 + 8) = v56;
        *(_QWORD *)(v49 + 16) = &v62[8 * v61];
        if (v57)
          operator delete(v57);
      }
      else
      {
        *v55 = *v53;
        v56 = v55 + 1;
      }
      *(_QWORD *)(v49 + 8) = v56;
      v49 += 24;
    }
    while (v49 != v50);
  }
  v140 = 0;
  v141 = 0;
  v142 = 0;
  memset(v139, 0, sizeof(v139));
  if (!sub_10025FFDC((uint64_t)__p, (uint64_t)&v143, (uint64_t **)&v151, &v148, v47, v139, (uint64_t)&v140))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214A4B8);
    v74 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, MultiModal, detection failed", __p, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214A4B8);
      LOWORD(v157[0]) = 0;
      v132 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, MultiModal, detection failed", v157, 2);
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLLocationCalculator::detectMultiModalDistribution(const std::vector<CLWifiAccessPoint> &)", "%s\n", v132);
      if (v132 != __p)
        free(v132);
    }
    v48 = 0;
    goto LABEL_102;
  }
  *(_QWORD *)__p = 0;
  sub_10025E5E0(&v137, v47, __p);
  v65 = (double *)v137;
  if (v152 != (uint64_t *)v151)
  {
    v66 = ((char *)v152 - v151) / 24;
    v67 = (double *)v148;
    v68 = v140;
    if (v66 <= 1)
      v66 = 1;
    do
    {
      v69 = *v67++;
      v70 = v69;
      LODWORD(v69) = *v68++;
      v65[LODWORD(v69)] = v70 + v65[LODWORD(v69)];
      --v66;
    }
    while (v66);
  }
  if (v65 == v138)
    goto LABEL_93;
  v71 = 0;
  v72 = v65;
  do
  {
    v73 = *v72++;
    if (v73 != 0.0)
      ++v71;
  }
  while (v72 != v138);
  if (v71 < 2)
    goto LABEL_93;
  if (v71 != 2)
  {
    if (v65 == v138)
    {
      v89 = v65;
    }
    else
    {
      v88 = v65 + 1;
      v89 = v65;
      if (v65 + 1 != v138)
      {
        v90 = *v65;
        v89 = v65;
        v91 = v65 + 1;
        do
        {
          v92 = *v91++;
          v93 = v92;
          if (v90 < v92)
          {
            v90 = v93;
            v89 = v88;
          }
          v88 = v91;
        }
        while (v91 != v138);
      }
    }
    v157[0] = 0;
    sub_10025E5E0(__p, v47, v157);
    v94 = 0;
    v95 = *(double **)__p;
    v96 = (double **)v139[0];
    v97 = *(double **)(v139[0] + 24 * (int)((unint64_t)((char *)v89 - (char *)v65) >> 3));
    do
    {
      v98 = *v96;
      v96 += 3;
      v95[v94++] = vabdd_f64(*v98, *v97);
    }
    while (v47 != v94);
    v99 = v95 + 1;
    v100 = v95 == *(double **)&__p[8] || v99 == *(double **)&__p[8];
    v101 = v95;
    if (!v100)
    {
      v102 = *v95;
      v101 = v95;
      v103 = v95 + 1;
      do
      {
        v104 = *v103++;
        v105 = v104;
        if (v102 < v104)
        {
          v102 = v105;
          v101 = v99;
        }
        v99 = v103;
      }
      while (v103 != *(double **)&__p[8]);
    }
    memset(v157, 0, 24);
    v107 = (uint64_t *)v151;
    v106 = v152;
    if (v152 != (uint64_t *)v151)
    {
      v108 = 0;
      v109 = 0;
      v110 = (unint64_t)((char *)v101 - (char *)v95) >> 3;
      do
      {
        if (*((_DWORD *)v140 + v109) != (_DWORD)v110)
        {
          v111 = (_OWORD *)(*v136 + 96 * v109);
          if (v108 >= v157[2])
          {
            v116 = (char *)v157[0];
            v117 = 0xAAAAAAAAAAAAAAABLL * ((v108 - (char *)v157[0]) >> 5);
            v118 = v117 + 1;
            if (v117 + 1 > 0x2AAAAAAAAAAAAAALL)
              sub_100259694();
            if (0x5555555555555556 * (((char *)v157[2] - (char *)v157[0]) >> 5) > v118)
              v118 = 0x5555555555555556 * (((char *)v157[2] - (char *)v157[0]) >> 5);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v157[2] - (char *)v157[0]) >> 5) >= 0x155555555555555)
              v119 = 0x2AAAAAAAAAAAAAALL;
            else
              v119 = v118;
            if (v119)
            {
              v120 = (char *)sub_10067257C((uint64_t)&v157[2], v119);
              v116 = (char *)v157[0];
              v108 = (char *)v157[1];
            }
            else
            {
              v120 = 0;
            }
            v121 = &v120[96 * v117];
            v122 = v111[1];
            *(_OWORD *)v121 = *v111;
            *((_OWORD *)v121 + 1) = v122;
            v123 = v111[2];
            v124 = v111[3];
            v125 = v111[5];
            *((_OWORD *)v121 + 4) = v111[4];
            *((_OWORD *)v121 + 5) = v125;
            *((_OWORD *)v121 + 2) = v123;
            *((_OWORD *)v121 + 3) = v124;
            if (v108 == v116)
            {
              v131 = &v120[96 * v117];
            }
            else
            {
              v126 = &v120[96 * v117];
              do
              {
                v127 = *((_OWORD *)v108 - 5);
                *((_OWORD *)v126 - 6) = *((_OWORD *)v108 - 6);
                *((_OWORD *)v126 - 5) = v127;
                v128 = *((_OWORD *)v108 - 4);
                v129 = *((_OWORD *)v108 - 3);
                v130 = *((_OWORD *)v108 - 2);
                v131 = v126 - 96;
                *(_OWORD *)(v126 - 23) = *(_OWORD *)(v108 - 23);
                *((_OWORD *)v126 - 3) = v129;
                *((_OWORD *)v126 - 2) = v130;
                *((_OWORD *)v126 - 4) = v128;
                v108 -= 96;
                v126 -= 96;
              }
              while (v108 != v116);
            }
            v108 = v121 + 96;
            v157[0] = v131;
            v157[1] = v121 + 96;
            v157[2] = &v120[96 * v119];
            if (v116)
              operator delete(v116);
          }
          else
          {
            v112 = v111[1];
            *(_OWORD *)v108 = *v111;
            *((_OWORD *)v108 + 1) = v112;
            v113 = v111[2];
            v114 = v111[3];
            v115 = v111[5];
            *((_OWORD *)v108 + 4) = v111[4];
            *((_OWORD *)v108 + 5) = v115;
            *((_OWORD *)v108 + 2) = v113;
            *((_OWORD *)v108 + 3) = v114;
            v108 += 96;
          }
          v157[1] = v108;
          v107 = (uint64_t *)v151;
          v106 = v152;
        }
        ++v109;
      }
      while (0xAAAAAAAAAAAAAAABLL * (v106 - v107) > v109);
    }
    v48 = sub_10066EFA8(v157);
    if (v157[0])
    {
      v157[1] = v157[0];
      operator delete(v157[0]);
    }
    if (*(_QWORD *)__p)
    {
      *(_QWORD *)&__p[8] = *(_QWORD *)__p;
      operator delete(*(void **)__p);
    }
    goto LABEL_94;
  }
  if (vabdd_f64(**(double **)v139[0], **(double **)(v139[0] + 24)) < *((double *)sub_10012A448() + 23))
  {
    v76 = *(double *)v137;
    v77 = *((double *)v137 + 1);
    if (v76 + v77 >= *((double *)sub_10012A448() + 24))
      goto LABEL_93;
  }
  v78 = (double *)v137;
  if (v137 != v138)
  {
    v79 = (double *)((char *)v137 + 8);
    if ((char *)v137 + 8 != (char *)v138)
    {
      v80 = *(double *)v137;
      v81 = (double *)((char *)v137 + 8);
      do
      {
        v82 = *v81++;
        v83 = v82;
        if (v80 < v82)
        {
          v80 = v83;
          v78 = v79;
        }
        v79 = v81;
      }
      while (v81 != v138);
    }
  }
  v84 = *v78;
  if (v84 >= *((double *)sub_10012A448() + 24))
  {
LABEL_93:
    v48 = 0;
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214A4B8);
    v85 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v86 = **(_QWORD **)v139[0];
      v87 = **(_QWORD **)(v139[0] + 24);
      *(_DWORD *)__p = 134349568;
      *(_QWORD *)&__p[4] = v86;
      *(_WORD *)&__p[12] = 2050;
      *(_QWORD *)&__p[14] = v87;
      *(_WORD *)&__p[22] = 2050;
      v159 = v84;
      _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, MultiModal, detected, max cluster centers, %{public}0.3f, %{public}0.3f, max weight, %{public}0.3f", __p, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214A4B8);
      v133 = **(void ***)v139[0];
      v134 = **(void ***)(v139[0] + 24);
      LODWORD(v157[0]) = 134349568;
      *(void **)((char *)v157 + 4) = v133;
      WORD2(v157[1]) = 2050;
      *(void **)((char *)&v157[1] + 6) = v134;
      HIWORD(v157[2]) = 2050;
      v157[3] = *(void **)&v84;
      v135 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, MultiModal, detected, max cluster centers, %{public}0.3f, %{public}0.3f, max weight, %{public}0.3f", v157, 32);
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLLocationCalculator::detectMultiModalDistribution(const std::vector<CLWifiAccessPoint> &)", "%s\n", v135);
      if (v135 != __p)
        free(v135);
    }
    v48 = 1;
  }
LABEL_94:
  if (v137)
  {
    v138 = (double *)v137;
    operator delete(v137);
  }
LABEL_102:
  *(_QWORD *)__p = v139;
  sub_10025E1F0((void ***)__p);
  if (v140)
  {
    v141 = v140;
    operator delete(v140);
  }
  *(_QWORD *)__p = &v143;
  sub_10025E1F0((void ***)__p);
LABEL_105:
  sub_100008848((uint64_t)v145, v146);
  if (v148)
  {
    v149 = (double *)v148;
    operator delete(v148);
  }
  *(_QWORD *)__p = &v151;
  sub_10025E1F0((void ***)__p);
  if (v154)
  {
    v155 = (char *)v154;
    operator delete(v154);
  }
  return v48;
}

void sub_10066FBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,_QWORD *a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,char *a41,uint64_t a42)
{
  if (__p)
    operator delete(__p);
  a41 = &a16;
  sub_10025E1F0((void ***)&a41);
  if (a19)
  {
    a20 = (uint64_t)a19;
    operator delete(a19);
  }
  a41 = &a22;
  sub_10025E1F0((void ***)&a41);
  sub_100008848((uint64_t)&a25, a26);
  if (a28)
  {
    a29 = (uint64_t)a28;
    operator delete(a28);
  }
  a41 = &a31;
  sub_10025E1F0((void ***)&a41);
  if (a34)
  {
    a35 = (uint64_t)a34;
    operator delete(a34);
  }
  _Unwind_Resume(a1);
}

void sub_10066FCD0(uint64_t *a1, void **a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  NSObject *v29;
  float *v30;
  float *v31;
  double v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  double v43;
  double *v44;
  double *v45;
  double *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  double *v52;
  uint64_t v53;
  NSObject *v54;
  char *v55;
  double v56;
  double *v57;
  double *v58;
  double v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  double *v72;
  double *v73;
  double *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  double *v80;
  uint64_t v81;
  double v82;
  unint64_t v83;
  double v84;
  uint64_t v85;
  double v86;
  double v87;
  double v88;
  char *v89;
  int v90;
  double v91;
  _OWORD *v92;
  _OWORD *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  unint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  _OWORD *v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  char *v115;
  char *v116;
  _OWORD *v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  char *v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  NSObject *v131;
  int v132;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  char *v137;
  unint64_t v138;
  char *v139;
  void *v140;
  double *v141;
  double *v142;
  void *v143;
  double *v144;
  double *v145;
  void *v146;
  char *v147;
  char *v148;
  void *__p;
  char *v150;
  char *v151;
  int v152;
  double v153;
  __int16 v154;
  double v155;
  __int16 v156;
  double v157;
  __int16 v158;
  double v159;
  _BYTE buf[32];
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10214A4B8);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v5 = -1431655765 * ((unint64_t)(a1[1] - *a1) >> 5);
    *(_DWORD *)buf = 67174657;
    *(_DWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, reject outlier, num input accessPointWithWeights, %{private}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214A4B8);
    v132 = -1431655765 * ((unint64_t)(a1[1] - *a1) >> 5);
    v152 = 67174657;
    LODWORD(v153) = v132;
    v133 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, reject outlier, num input accessPointWithWeights, %{private}d", &v152, 8);
    sub_100512490("Generic", 1, 0, 2, "static void CLLocationCalculator::rejectOutlierAltitudes(const std::vector<CLWifiAccessPoint> &, std::vector<CLWifiAccessPoint> &)", "%s\n", v133);
    if (v133 != buf)
      free(v133);
  }
  __p = 0;
  v150 = 0;
  v151 = 0;
  v6 = *a1;
  v7 = a1[1];
  if (*a1 == v7)
    goto LABEL_71;
  v8 = 0;
  do
  {
    if (*(float *)(v6 + 84) > 0.0)
    {
      if (v8 >= v151)
      {
        v13 = (char *)__p;
        v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)__p) >> 5);
        v15 = v14 + 1;
        if (v14 + 1 > 0x2AAAAAAAAAAAAAALL)
          sub_100259694();
        if (0x5555555555555556 * ((v151 - (_BYTE *)__p) >> 5) > v15)
          v15 = 0x5555555555555556 * ((v151 - (_BYTE *)__p) >> 5);
        if (0xAAAAAAAAAAAAAAABLL * ((v151 - (_BYTE *)__p) >> 5) >= 0x155555555555555)
          v16 = 0x2AAAAAAAAAAAAAALL;
        else
          v16 = v15;
        if (v16)
        {
          v17 = (char *)sub_10067257C((uint64_t)&v151, v16);
          v13 = (char *)__p;
          v8 = v150;
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[96 * v14];
        v19 = *(_OWORD *)(v6 + 16);
        *(_OWORD *)v18 = *(_OWORD *)v6;
        *((_OWORD *)v18 + 1) = v19;
        v20 = *(_OWORD *)(v6 + 32);
        v21 = *(_OWORD *)(v6 + 48);
        v22 = *(_OWORD *)(v6 + 80);
        *((_OWORD *)v18 + 4) = *(_OWORD *)(v6 + 64);
        *((_OWORD *)v18 + 5) = v22;
        *((_OWORD *)v18 + 2) = v20;
        *((_OWORD *)v18 + 3) = v21;
        if (v8 == v13)
        {
          v28 = &v17[96 * v14];
        }
        else
        {
          v23 = &v17[96 * v14];
          do
          {
            v24 = *((_OWORD *)v8 - 5);
            *((_OWORD *)v23 - 6) = *((_OWORD *)v8 - 6);
            *((_OWORD *)v23 - 5) = v24;
            v25 = *((_OWORD *)v8 - 4);
            v26 = *((_OWORD *)v8 - 3);
            v27 = *((_OWORD *)v8 - 2);
            v28 = v23 - 96;
            *(_OWORD *)(v23 - 23) = *(_OWORD *)(v8 - 23);
            *((_OWORD *)v23 - 3) = v26;
            *((_OWORD *)v23 - 2) = v27;
            *((_OWORD *)v23 - 4) = v25;
            v8 -= 96;
            v23 -= 96;
          }
          while (v8 != v13);
        }
        v8 = v18 + 96;
        __p = v28;
        v150 = v18 + 96;
        v151 = &v17[96 * v16];
        if (v13)
          operator delete(v13);
      }
      else
      {
        v9 = *(_OWORD *)(v6 + 16);
        *(_OWORD *)v8 = *(_OWORD *)v6;
        *((_OWORD *)v8 + 1) = v9;
        v10 = *(_OWORD *)(v6 + 32);
        v11 = *(_OWORD *)(v6 + 48);
        v12 = *(_OWORD *)(v6 + 80);
        *((_OWORD *)v8 + 4) = *(_OWORD *)(v6 + 64);
        *((_OWORD *)v8 + 5) = v12;
        *((_OWORD *)v8 + 2) = v10;
        *((_OWORD *)v8 + 3) = v11;
        v8 += 96;
      }
      v150 = v8;
    }
    v6 += 96;
  }
  while (v6 != v7);
  if (__p == v8)
  {
LABEL_71:
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214A4B8);
    v54 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, reject outlier, accessPointsWithValidWeights is empty", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214A4B8);
      LOWORD(v152) = 0;
      LODWORD(v136) = 2;
      v55 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, reject outlier, accessPointsWithValidWeights is empty", &v152, v136);
      sub_100512490("Generic", 1, 0, 2, "static void CLLocationCalculator::rejectOutlierAltitudes(const std::vector<CLWifiAccessPoint> &, std::vector<CLWifiAccessPoint> &)", "%s\n", v55);
      if (v55 != buf)
        free(v55);
    }
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214A4B8);
    v29 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67174657;
      *(_DWORD *)&buf[4] = -1431655765 * ((unint64_t)(v150 - (_BYTE *)__p) >> 5);
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, reject outlier, num accessPointsWithValidWeights, %{private}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214A4B8);
      v152 = 67174657;
      LODWORD(v153) = -1431655765 * ((unint64_t)(v150 - (_BYTE *)__p) >> 5);
      LODWORD(v136) = 8;
      v134 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, reject outlier, num accessPointsWithValidWeights, %{private}d", &v152, v136);
      sub_100512490("Generic", 1, 0, 2, "static void CLLocationCalculator::rejectOutlierAltitudes(const std::vector<CLWifiAccessPoint> &, std::vector<CLWifiAccessPoint> &)", "%s\n", v134);
      if (v134 != buf)
        free(v134);
    }
    v146 = 0;
    v147 = 0;
    v148 = 0;
    v143 = 0;
    v144 = 0;
    v145 = 0;
    v30 = (float *)__p;
    v31 = (float *)v150;
    if (__p == v150)
    {
      v32 = 0.0;
    }
    else
    {
      v32 = 0.0;
      do
      {
        v33 = v147;
        if (v147 >= v148)
        {
          v35 = (char *)v146;
          v36 = (v147 - (_BYTE *)v146) >> 3;
          v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 61)
            sub_100259694();
          v38 = v148 - (_BYTE *)v146;
          if ((v148 - (_BYTE *)v146) >> 2 > v37)
            v37 = v38 >> 2;
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
            v39 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v39 = v37;
          if (v39)
          {
            v40 = (char *)sub_10025E6A0((uint64_t)&v148, v39);
            v35 = (char *)v146;
            v33 = v147;
          }
          else
          {
            v40 = 0;
          }
          v41 = &v40[8 * v36];
          *(_QWORD *)v41 = *((_QWORD *)v30 + 2);
          v34 = v41 + 8;
          while (v33 != v35)
          {
            v42 = *((_QWORD *)v33 - 1);
            v33 -= 8;
            *((_QWORD *)v41 - 1) = v42;
            v41 -= 8;
          }
          v146 = v41;
          v147 = v34;
          v148 = &v40[8 * v39];
          if (v35)
            operator delete(v35);
        }
        else
        {
          *(_QWORD *)v147 = *((_QWORD *)v30 + 2);
          v34 = v33 + 8;
        }
        v147 = v34;
        v43 = v30[21];
        v44 = v144;
        if (v144 >= v145)
        {
          v46 = (double *)v143;
          v47 = ((char *)v144 - (_BYTE *)v143) >> 3;
          v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 61)
            sub_100259694();
          v49 = (char *)v145 - (_BYTE *)v143;
          if (((char *)v145 - (_BYTE *)v143) >> 2 > v48)
            v48 = v49 >> 2;
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
            v50 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v50 = v48;
          if (v50)
          {
            v51 = (char *)sub_10025E6A0((uint64_t)&v145, v50);
            v46 = (double *)v143;
            v44 = v144;
          }
          else
          {
            v51 = 0;
          }
          v52 = (double *)&v51[8 * v47];
          *v52 = v43;
          v45 = v52 + 1;
          while (v44 != v46)
          {
            v53 = *((_QWORD *)v44-- - 1);
            *((_QWORD *)v52-- - 1) = v53;
          }
          v143 = v52;
          v144 = v45;
          v145 = (double *)&v51[8 * v50];
          if (v46)
            operator delete(v46);
        }
        else
        {
          *v144 = v43;
          v45 = v44 + 1;
        }
        v144 = v45;
        v32 = v32 + v30[21];
        v30 += 24;
      }
      while (v30 != v31);
    }
    v56 = sub_10066E828((uint64_t *)&v146, (uint64_t *)&v143);
    v140 = 0;
    v141 = 0;
    v142 = 0;
    v137 = 0;
    v138 = 0;
    v139 = 0;
    v57 = (double *)__p;
    v58 = (double *)v150;
    if (__p != v150)
    {
      do
      {
        v59 = vabdd_f64(v57[2], v56);
        v161 = *((_OWORD *)v57 + 2);
        v162 = *((_OWORD *)v57 + 3);
        v163 = *((_OWORD *)v57 + 4);
        v164 = *((_OWORD *)v57 + 5);
        *(_OWORD *)buf = *(_OWORD *)v57;
        *(_OWORD *)&buf[16] = *((_OWORD *)v57 + 1);
        if (v138 >= (unint64_t)v139)
        {
          v61 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v138 - (_QWORD)v137) >> 3) + 1;
          if (v61 > 0x276276276276276)
            sub_100259694();
          if (0x9D89D89D89D89D8ALL * ((v139 - v137) >> 3) > v61)
            v61 = 0x9D89D89D89D89D8ALL * ((v139 - v137) >> 3);
          if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v139 - v137) >> 3)) >= 0x13B13B13B13B13BLL)
            v62 = 0x276276276276276;
          else
            v62 = v61;
          if (v62)
            v63 = (char *)sub_100673A14((uint64_t)&v139, v62);
          else
            v63 = 0;
          v64 = &v63[8 * ((uint64_t)(v138 - (_QWORD)v137) >> 3)];
          *(double *)v64 = v59;
          *(_OWORD *)(v64 + 8) = *(_OWORD *)buf;
          *(_OWORD *)(v64 + 40) = v161;
          *(_OWORD *)(v64 + 56) = v162;
          *(_OWORD *)(v64 + 72) = v163;
          *(_OWORD *)(v64 + 88) = v164;
          *(_OWORD *)(v64 + 24) = *(_OWORD *)&buf[16];
          v65 = (char *)v138;
          v66 = v64;
          if ((char *)v138 != v137)
          {
            do
            {
              v67 = *(_OWORD *)(v65 - 104);
              v68 = *(_OWORD *)(v65 - 88);
              *(_OWORD *)(v66 - 72) = *(_OWORD *)(v65 - 72);
              *(_OWORD *)(v66 - 88) = v68;
              *(_OWORD *)(v66 - 104) = v67;
              v69 = *(_OWORD *)(v65 - 56);
              v70 = *(_OWORD *)(v65 - 40);
              v71 = *(_OWORD *)(v65 - 24);
              *((_QWORD *)v66 - 1) = *((_QWORD *)v65 - 1);
              *(_OWORD *)(v66 - 24) = v71;
              *(_OWORD *)(v66 - 40) = v70;
              *(_OWORD *)(v66 - 56) = v69;
              v66 -= 104;
              v65 -= 104;
            }
            while (v65 != v137);
            v65 = v137;
          }
          v60 = (unint64_t)(v64 + 104);
          v137 = v66;
          v139 = &v63[104 * v62];
          if (v65)
            operator delete(v65);
        }
        else
        {
          *(double *)v138 = v59;
          *(_OWORD *)(v138 + 40) = v161;
          *(_OWORD *)(v138 + 56) = v162;
          *(_OWORD *)(v138 + 72) = v163;
          *(_OWORD *)(v138 + 88) = v164;
          *(_OWORD *)(v138 + 8) = *(_OWORD *)buf;
          *(_OWORD *)(v138 + 24) = *(_OWORD *)&buf[16];
          v60 = v138 + 104;
        }
        v138 = v60;
        v72 = v141;
        if (v141 >= v142)
        {
          v74 = (double *)v140;
          v75 = ((char *)v141 - (_BYTE *)v140) >> 3;
          v76 = v75 + 1;
          if ((unint64_t)(v75 + 1) >> 61)
            sub_100259694();
          v77 = (char *)v142 - (_BYTE *)v140;
          if (((char *)v142 - (_BYTE *)v140) >> 2 > v76)
            v76 = v77 >> 2;
          if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
            v78 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v78 = v76;
          if (v78)
          {
            v79 = (char *)sub_10025E6A0((uint64_t)&v142, v78);
            v74 = (double *)v140;
            v72 = v141;
          }
          else
          {
            v79 = 0;
          }
          v80 = (double *)&v79[8 * v75];
          *v80 = v59;
          v73 = v80 + 1;
          while (v72 != v74)
          {
            v81 = *((_QWORD *)v72-- - 1);
            *((_QWORD *)v80-- - 1) = v81;
          }
          v140 = v80;
          v141 = v73;
          v142 = (double *)&v79[8 * v78];
          if (v74)
            operator delete(v74);
        }
        else
        {
          *v141 = v59;
          v73 = v72 + 1;
        }
        v141 = v73;
        v57 += 12;
      }
      while (v57 != v58);
    }
    v82 = sub_10066E828((uint64_t *)&v140, (uint64_t *)&v143);
    v83 = 126 - 2 * __clz(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v138 - (_QWORD)v137) >> 3));
    v84 = v82 + v82;
    if ((char *)v138 == v137)
      v85 = 0;
    else
      v85 = v83;
    if (v84 >= 5.0)
      v86 = v84;
    else
      v86 = 5.0;
    sub_100673A5C((uint64_t)v137, v138, v85, 1);
    v87 = (double)(0xAAAAAAAAAAAAAAABLL * ((v150 - (_BYTE *)__p) >> 5)) * 0.5;
    v88 = v32 * 0.5;
    v89 = v137;
    if (v137 != (char *)v138)
    {
      v90 = 0;
      v91 = 0.0;
      while (1)
      {
        v92 = v89 + 8;
        if (vabdd_f64(*((double *)v89 + 3), v56) <= v86)
          break;
        if (v87 <= (double)v90 || v91 >= v88)
        {
          v94 = a2[1];
          v95 = (unint64_t)a2[2];
          if ((unint64_t)v94 >= v95)
          {
            v96 = 0xAAAAAAAAAAAAAAABLL * (((char *)v94 - (_BYTE *)*a2) >> 5);
            v97 = v96 + 1;
            if (v96 + 1 > 0x2AAAAAAAAAAAAAALL)
              goto LABEL_193;
            v98 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v95 - (_QWORD)*a2) >> 5);
            if (2 * v98 > v97)
              v97 = 2 * v98;
            if (v98 >= 0x155555555555555)
              v99 = 0x2AAAAAAAAAAAAAALL;
            else
              v99 = v97;
            if (v99)
              v100 = (char *)sub_10067257C((uint64_t)(a2 + 2), v99);
            else
              v100 = 0;
            v110 = &v100[96 * v96];
            v122 = *(_OWORD *)(v89 + 24);
            *(_OWORD *)v110 = *v92;
            *((_OWORD *)v110 + 1) = v122;
            v123 = *(_OWORD *)(v89 + 40);
            v124 = *(_OWORD *)(v89 + 56);
            v125 = *(_OWORD *)(v89 + 88);
            *((_OWORD *)v110 + 4) = *(_OWORD *)(v89 + 72);
            *((_OWORD *)v110 + 5) = v125;
            *((_OWORD *)v110 + 2) = v123;
            *((_OWORD *)v110 + 3) = v124;
            v126 = (char *)*a2;
            v115 = (char *)a2[1];
            v117 = v110;
            if (v115 != *a2)
            {
              do
              {
                v127 = *((_OWORD *)v115 - 5);
                *(v117 - 6) = *((_OWORD *)v115 - 6);
                *(v117 - 5) = v127;
                v128 = *((_OWORD *)v115 - 4);
                v129 = *((_OWORD *)v115 - 3);
                v130 = *((_OWORD *)v115 - 2);
                *(_OWORD *)((char *)v117 - 23) = *(_OWORD *)(v115 - 23);
                *(v117 - 3) = v129;
                *(v117 - 2) = v130;
                *(v117 - 4) = v128;
                v117 -= 6;
                v115 -= 96;
              }
              while (v115 != v126);
              goto LABEL_155;
            }
            goto LABEL_156;
          }
LABEL_138:
          v102 = *(_OWORD *)(v89 + 24);
          *v94 = *v92;
          v94[1] = v102;
          v103 = *(_OWORD *)(v89 + 40);
          v104 = *(_OWORD *)(v89 + 56);
          v105 = *(_OWORD *)(v89 + 88);
          v94[4] = *(_OWORD *)(v89 + 72);
          v94[5] = v105;
          v94[2] = v103;
          v94[3] = v104;
          v106 = v94 + 6;
          goto LABEL_158;
        }
        ++v90;
        v91 = v91 + *((float *)v89 + 23);
LABEL_159:
        v89 += 104;
        if (v89 == (char *)v138)
          goto LABEL_160;
      }
      v94 = a2[1];
      v101 = (unint64_t)a2[2];
      if ((unint64_t)v94 < v101)
        goto LABEL_138;
      v107 = 0xAAAAAAAAAAAAAAABLL * (((char *)v94 - (_BYTE *)*a2) >> 5);
      v108 = v107 + 1;
      if (v107 + 1 > 0x2AAAAAAAAAAAAAALL)
LABEL_193:
        sub_100259694();
      v109 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - (_QWORD)*a2) >> 5);
      if (2 * v109 > v108)
        v108 = 2 * v109;
      if (v109 >= 0x155555555555555)
        v99 = 0x2AAAAAAAAAAAAAALL;
      else
        v99 = v108;
      if (v99)
        v100 = (char *)sub_10067257C((uint64_t)(a2 + 2), v99);
      else
        v100 = 0;
      v110 = &v100[96 * v107];
      v111 = *(_OWORD *)(v89 + 24);
      *(_OWORD *)v110 = *v92;
      *((_OWORD *)v110 + 1) = v111;
      v112 = *(_OWORD *)(v89 + 40);
      v113 = *(_OWORD *)(v89 + 56);
      v114 = *(_OWORD *)(v89 + 88);
      *((_OWORD *)v110 + 4) = *(_OWORD *)(v89 + 72);
      *((_OWORD *)v110 + 5) = v114;
      *((_OWORD *)v110 + 2) = v112;
      *((_OWORD *)v110 + 3) = v113;
      v116 = (char *)*a2;
      v115 = (char *)a2[1];
      v117 = v110;
      if (v115 != *a2)
      {
        do
        {
          v118 = *((_OWORD *)v115 - 5);
          *(v117 - 6) = *((_OWORD *)v115 - 6);
          *(v117 - 5) = v118;
          v119 = *((_OWORD *)v115 - 4);
          v120 = *((_OWORD *)v115 - 3);
          v121 = *((_OWORD *)v115 - 2);
          *(_OWORD *)((char *)v117 - 23) = *(_OWORD *)(v115 - 23);
          *(v117 - 3) = v120;
          *(v117 - 2) = v121;
          *(v117 - 4) = v119;
          v117 -= 6;
          v115 -= 96;
        }
        while (v115 != v116);
LABEL_155:
        v115 = (char *)*a2;
      }
LABEL_156:
      v106 = v110 + 96;
      *a2 = v117;
      a2[1] = v110 + 96;
      a2[2] = &v100[96 * v99];
      if (v115)
        operator delete(v115);
LABEL_158:
      a2[1] = v106;
      goto LABEL_159;
    }
LABEL_160:
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214A4B8);
    v131 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134284289;
      *(double *)&buf[4] = v56;
      *(_WORD *)&buf[12] = 2049;
      *(double *)&buf[14] = v86;
      *(_WORD *)&buf[22] = 2049;
      *(double *)&buf[24] = v87;
      LOWORD(v161) = 2049;
      *(double *)((char *)&v161 + 2) = v88;
      _os_log_impl((void *)&_mh_execute_header, v131, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, reject outlier, medianAltitude, %{private}.2f, maxDeviationFromMedian, %{private}.2f, maxNumApsToReject, %{private}.1f, maxWeightsToReject, %{private}.2f", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214A4B8);
      v152 = 134284289;
      v153 = v56;
      v154 = 2049;
      v155 = v86;
      v156 = 2049;
      v157 = v87;
      v158 = 2049;
      v159 = v88;
      LODWORD(v136) = 42;
      v135 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, reject outlier, medianAltitude, %{private}.2f, maxDeviationFromMedian, %{private}.2f, maxNumApsToReject, %{private}.1f, maxWeightsToReject, %{private}.2f", &v152, v136);
      sub_100512490("Generic", 1, 0, 2, "static void CLLocationCalculator::rejectOutlierAltitudes(const std::vector<CLWifiAccessPoint> &, std::vector<CLWifiAccessPoint> &)", "%s\n", v135);
      if (v135 != buf)
        free(v135);
    }
    if (v137)
      operator delete(v137);
    if (v140)
    {
      v141 = (double *)v140;
      operator delete(v140);
    }
    if (v143)
    {
      v144 = (double *)v143;
      operator delete(v143);
    }
    if (v146)
    {
      v147 = (char *)v146;
      operator delete(v146);
    }
  }
  if (__p)
  {
    v150 = (char *)__p;
    operator delete(__p);
  }
}

void sub_100670C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  if (a21)
    operator delete(a21);
  if (a24)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void sub_100670CD0(uint64_t **a1@<X0>, _BYTE *a2@<X1>, int a3@<W2>, char **a4@<X8>)
{
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  std::string *v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  uint64_t v38;
  std::string v39;
  std::string __p;
  int v41;
  char **v42;
  char *v43[2];

  v43[0] = 0;
  v43[1] = 0;
  v42 = v43;
  v8 = *a1;
  v9 = a1[1];
  while (v8 != v9)
  {
    v38 = *v8;
    sub_1000C2254(&v38, &v39);
    v10 = *((_DWORD *)v8 + 18);
    __p = v39;
    memset(&v39, 0, sizeof(v39));
    v41 = v10;
    sub_100675078((uint64_t **)&v42, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    v8 += 12;
  }
  sub_100670FEC((const void ***)&v42, a2, a3, (uint64_t)&__p);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v11 = *a1;
  v12 = a1[1];
  if (*a1 != v12)
  {
    do
    {
      v38 = *v11;
      sub_1000C2254(&v38, &v39);
      v13 = (std::string *)sub_10019C4C0((uint64_t)&__p, (const void **)&v39.__r_.__value_.__l.__data_);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      if (&__p.__r_.__value_.__r.__words[1] != (std::string::size_type *)v13)
      {
        v15 = a4[1];
        v14 = (unint64_t)a4[2];
        if ((unint64_t)v15 >= v14)
        {
          v21 = *a4;
          v22 = 0xAAAAAAAAAAAAAAABLL * ((v15 - *a4) >> 5);
          v23 = v22 + 1;
          if (v22 + 1 > 0x2AAAAAAAAAAAAAALL)
            sub_100259694();
          v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (_QWORD)v21) >> 5);
          if (2 * v24 > v23)
            v23 = 2 * v24;
          if (v24 >= 0x155555555555555)
            v25 = 0x2AAAAAAAAAAAAAALL;
          else
            v25 = v23;
          if (v25)
          {
            v26 = (char *)sub_10067257C((uint64_t)(a4 + 2), v25);
            v21 = *a4;
            v15 = a4[1];
          }
          else
          {
            v26 = 0;
          }
          v27 = &v26[96 * v22];
          v28 = *((_OWORD *)v11 + 1);
          *(_OWORD *)v27 = *(_OWORD *)v11;
          *((_OWORD *)v27 + 1) = v28;
          v29 = *((_OWORD *)v11 + 2);
          v30 = *((_OWORD *)v11 + 3);
          v31 = *((_OWORD *)v11 + 5);
          *((_OWORD *)v27 + 4) = *((_OWORD *)v11 + 4);
          *((_OWORD *)v27 + 5) = v31;
          *((_OWORD *)v27 + 2) = v29;
          *((_OWORD *)v27 + 3) = v30;
          if (v15 == v21)
          {
            v37 = &v26[96 * v22];
          }
          else
          {
            v32 = &v26[96 * v22];
            do
            {
              v33 = *((_OWORD *)v15 - 5);
              *((_OWORD *)v32 - 6) = *((_OWORD *)v15 - 6);
              *((_OWORD *)v32 - 5) = v33;
              v34 = *((_OWORD *)v15 - 4);
              v35 = *((_OWORD *)v15 - 3);
              v36 = *((_OWORD *)v15 - 1);
              v37 = v32 - 96;
              *((_OWORD *)v32 - 2) = *((_OWORD *)v15 - 2);
              *((_OWORD *)v32 - 1) = v36;
              *((_OWORD *)v32 - 4) = v34;
              *((_OWORD *)v32 - 3) = v35;
              v15 -= 96;
              v32 -= 96;
            }
            while (v15 != v21);
          }
          v20 = v27 + 96;
          *a4 = v37;
          a4[1] = v27 + 96;
          a4[2] = &v26[96 * v25];
          if (v21)
            operator delete(v21);
        }
        else
        {
          v16 = *((_OWORD *)v11 + 1);
          *(_OWORD *)v15 = *(_OWORD *)v11;
          *((_OWORD *)v15 + 1) = v16;
          v17 = *((_OWORD *)v11 + 2);
          v18 = *((_OWORD *)v11 + 3);
          v19 = *((_OWORD *)v11 + 5);
          *((_OWORD *)v15 + 4) = *((_OWORD *)v11 + 4);
          *((_OWORD *)v15 + 5) = v19;
          *((_OWORD *)v15 + 2) = v17;
          *((_OWORD *)v15 + 3) = v18;
          v20 = v15 + 96;
        }
        a4[1] = v20;
      }
      v11 += 12;
    }
    while (v11 != v12);
  }
  sub_100090AE4((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
  sub_100090AE4((uint64_t)&v42, v43[0]);
}

void sub_100670F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,char *a25)
{
  sub_100090AE4((uint64_t)&a24, a25);
  _Unwind_Resume(a1);
}

void sub_100670FEC(const void ***a1@<X0>, _BYTE *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  const void ***v5;
  const void **v6;
  const void **v9;
  const void ***v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t *v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t *v17;
  char *v18;
  NSObject *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  int v29;
  int v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  char *v38;
  uint64_t *v39;
  char *v40;
  uint64_t v41;
  void *__p[2];
  uint64_t v43;
  int v44;
  uint8_t buf[16];
  uint64_t v46;
  int v47;

  v40 = 0;
  v41 = 0;
  v39 = (uint64_t *)&v40;
  v5 = a1 + 1;
  v6 = *a1;
  if (*a1 == (const void **)(a1 + 1))
    goto LABEL_22;
  do
  {
    if (((_DWORD)v6[7] & 0x80000000) != 0)
      sub_100675078(&v39, v6 + 4, (uint64_t)(v6 + 4));
    v9 = (const void **)v6[1];
    if (v9)
    {
      do
      {
        v10 = (const void ***)v9;
        v9 = (const void **)*v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        v10 = (const void ***)v6[2];
        v11 = *v10 == v6;
        v6 = (const void **)v10;
      }
      while (!v11);
    }
    v6 = (const void **)v10;
  }
  while (v10 != v5);
  if (!v41)
  {
LABEL_22:
    v18 = v40;
    *(_QWORD *)(a4 + 8) = v40;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = a4 + 8;
    goto LABEL_84;
  }
  *(_QWORD *)(a4 + 8) = 0;
  v12 = (uint64_t *)(a4 + 8);
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = a4 + 8;
  v13 = v39;
  if (v39 == (uint64_t *)&v40)
  {
    v17 = (unint64_t *)(a4 + 16);
  }
  else
  {
    do
    {
      v14 = *((_DWORD *)v13 + 14);
      if (*((double *)sub_10012A448() + 33) <= (double)v14)
        sub_100675078((uint64_t **)a4, (const void **)v13 + 4, (uint64_t)(v13 + 4));
      v15 = (uint64_t *)v13[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (uint64_t *)v13[2];
          v11 = *v16 == (_QWORD)v13;
          v13 = v16;
        }
        while (!v11);
      }
      v13 = v16;
    }
    while (v16 != (uint64_t *)&v40);
    v17 = (unint64_t *)(a4 + 16);
    if (*(_QWORD *)(a4 + 16))
      goto LABEL_37;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10214A4B8);
  v19 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, all aps filtered out due to weak rssi, add them back to yield a fix", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214A4B8);
    LOWORD(__p[0]) = 0;
    v38 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, all aps filtered out due to weak rssi, add them back to yield a fix", __p, 2);
    sub_100512490("Generic", 1, 0, 2, "static std::map<std::string, int> CLLocationCalculator::filterWifiApsBasedOnRssiCriteria(const std::map<std::string, int> &, BOOL &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v38);
    if (v38 != (char *)buf)
      free(v38);
  }
  v20 = v39;
  if (v39 != (uint64_t *)&v40)
  {
    do
    {
      sub_100675078((uint64_t **)a4, (const void **)v20 + 4, (uint64_t)(v20 + 4));
      v21 = (uint64_t *)v20[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (uint64_t *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (uint64_t *)v20[2];
          v11 = *v22 == (_QWORD)v20;
          v20 = v22;
        }
        while (!v11);
      }
      v20 = v22;
    }
    while (v22 != (uint64_t *)&v40);
  }
  *a2 = 1;
LABEL_37:
  while (1)
  {
    v23 = *v17;
    if (v23 <= (int)sub_10067158C(a3))
      break;
    v24 = *(uint64_t **)a4;
    v25 = (uint64_t *)(a4 + 8);
    v26 = (uint64_t *)(a4 + 8);
    if (*(uint64_t **)a4 != v12)
    {
      v25 = *(uint64_t **)a4;
      while (1)
      {
        v27 = (uint64_t *)v24[1];
        v28 = v24;
        if (v27)
        {
          do
          {
            v24 = v27;
            v27 = (uint64_t *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            v24 = (uint64_t *)v28[2];
            v11 = *v24 == (_QWORD)v28;
            v28 = v24;
          }
          while (!v11);
        }
        if (v24 == v12)
          break;
        if (*((char *)v25 + 55) < 0)
        {
          sub_100115CE4(buf, (void *)v25[4], v25[5]);
        }
        else
        {
          *(_OWORD *)buf = *((_OWORD *)v25 + 2);
          v46 = v25[6];
        }
        v29 = *((_DWORD *)v25 + 14);
        v47 = v29;
        if (*((char *)v24 + 55) < 0)
        {
          sub_100115CE4(__p, (void *)v24[4], v24[5]);
          v29 = v47;
        }
        else
        {
          *(_OWORD *)__p = *((_OWORD *)v24 + 2);
          v43 = v24[6];
        }
        v30 = *((_DWORD *)v24 + 14);
        v44 = v30;
        if (SHIBYTE(v43) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v46) < 0)
          operator delete(*(void **)buf);
        if (v29 < v30)
          v25 = v24;
      }
      v26 = *(uint64_t **)a4;
      if (*(uint64_t **)a4 == v12)
      {
        v26 = (uint64_t *)(a4 + 8);
      }
      else
      {
        v31 = *(uint64_t **)a4;
        while (1)
        {
          v32 = (uint64_t *)v31[1];
          v33 = v31;
          if (v32)
          {
            do
            {
              v31 = v32;
              v32 = (uint64_t *)*v32;
            }
            while (v32);
          }
          else
          {
            do
            {
              v31 = (uint64_t *)v33[2];
              v11 = *v31 == (_QWORD)v33;
              v33 = v31;
            }
            while (!v11);
          }
          if (v31 == v12)
            break;
          if (*((char *)v31 + 55) < 0)
          {
            sub_100115CE4(buf, (void *)v31[4], v31[5]);
          }
          else
          {
            *(_OWORD *)buf = *((_OWORD *)v31 + 2);
            v46 = v31[6];
          }
          v34 = *((_DWORD *)v31 + 14);
          v47 = v34;
          if (*((char *)v26 + 55) < 0)
          {
            sub_100115CE4(__p, (void *)v26[4], v26[5]);
            v34 = v47;
          }
          else
          {
            *(_OWORD *)__p = *((_OWORD *)v26 + 2);
            v43 = v26[6];
          }
          v35 = *((_DWORD *)v26 + 14);
          v44 = v35;
          if (SHIBYTE(v43) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v46) < 0)
            operator delete(*(void **)buf);
          if (v34 < v35)
            v26 = v31;
        }
      }
    }
    v36 = *((_DWORD *)v25 + 14);
    v37 = *((_DWORD *)v26 + 14);
    if (v36 - v37 <= *((_DWORD *)sub_10012A448() + 72))
      break;
    sub_100675198((uint64_t **)a4, (uint64_t)v26);
  }
  v18 = v40;
LABEL_84:
  sub_100090AE4((uint64_t)&v39, v18);
}

void sub_100671528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  sub_100090AE4(v24, *(char **)(v24 + 8));
  sub_100090AE4((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10067158C(int a1)
{
  uint64_t v2;
  NSObject *v3;
  char *v4;
  NSObject *v5;
  char *v7;
  int v8;
  int v9;
  __int16 v10;
  int v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  int v15;

  v2 = *((unsigned int *)sub_10012A448() + 58);
  switch(a1)
  {
    case 0:
      v2 = *((unsigned int *)sub_10012A448() + 58);
      break;
    case 1:
      v2 = *((unsigned int *)sub_10012A448() + 60);
      break;
    case 2:
      v2 = *((unsigned int *)sub_10012A448() + 61);
      break;
    case 3:
      v2 = *((unsigned int *)sub_10012A448() + 62);
      break;
    case 4:
      v2 = *((unsigned int *)sub_10012A448() + 63);
      break;
    case 6:
      v2 = *((unsigned int *)sub_10012A448() + 59);
      break;
    default:
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214A4B8);
      v3 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v13 = a1;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled signal environment type: %d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A4B8);
        v8 = 67109120;
        v9 = a1;
        v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "Received unhandled signal environment type: %d", &v8);
        sub_100512490("Generic", 1, 0, 0, "static int CLLocationCalculator::getSufficientZaxisInputApThreshold(const CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v4);
        if (v4 != (char *)buf)
          free(v4);
      }
      break;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10214A4B8);
  v5 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    v13 = a1;
    v14 = 1024;
    v15 = v2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, signal environment, %d, sufficient ap threshold, %d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214A4B8);
    v8 = 67109376;
    v9 = a1;
    v10 = 1024;
    v11 = v2;
    v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, signal environment, %d, sufficient ap threshold, %d", &v8, 14);
    sub_100512490("Generic", 1, 0, 2, "static int CLLocationCalculator::getSufficientZaxisInputApThreshold(const CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
  }
  return v2;
}

void sub_100671924(uint64_t *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  NSObject *v29;
  unint64_t v30;
  double *v31;
  _QWORD *v32;
  double v33;
  unint64_t v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _OWORD *v40;
  _OWORD *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  char *v57;
  NSObject *v58;
  _OWORD *v59;
  _OWORD *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _OWORD *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  char *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  char *v80;
  NSObject *v81;
  unint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  void *__p[2];
  char *v89;
  int v90;
  unint64_t v91;
  __int16 v92;
  unint64_t v93;
  uint8_t buf[4];
  unint64_t v95;
  __int16 v96;
  unint64_t v97;

  *(_OWORD *)__p = 0uLL;
  v89 = 0;
  v5 = *a1;
  v6 = a1[1];
  if (*a1 != v6)
  {
    v7 = 0;
    do
    {
      if (*(double *)(v5 + 40) > 0.0 && (*(_QWORD *)(v5 + 40) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        if (v7 >= v89)
        {
          v13 = (char *)__p[0];
          v14 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (char *)__p[0]) >> 5);
          v15 = v14 + 1;
          if (v14 + 1 > 0x2AAAAAAAAAAAAAALL)
            sub_100259694();
          if (0x5555555555555556 * ((v89 - (char *)__p[0]) >> 5) > v15)
            v15 = 0x5555555555555556 * ((v89 - (char *)__p[0]) >> 5);
          if (0xAAAAAAAAAAAAAAABLL * ((v89 - (char *)__p[0]) >> 5) >= 0x155555555555555)
            v16 = 0x2AAAAAAAAAAAAAALL;
          else
            v16 = v15;
          if (v16)
          {
            v17 = (char *)sub_10067257C((uint64_t)&v89, v16);
            v7 = (char *)__p[1];
            v13 = (char *)__p[0];
          }
          else
          {
            v17 = 0;
          }
          v18 = &v17[96 * v14];
          v19 = *(_OWORD *)(v5 + 16);
          *(_OWORD *)v18 = *(_OWORD *)v5;
          *((_OWORD *)v18 + 1) = v19;
          v20 = *(_OWORD *)(v5 + 32);
          v21 = *(_OWORD *)(v5 + 48);
          v22 = *(_OWORD *)(v5 + 80);
          *((_OWORD *)v18 + 4) = *(_OWORD *)(v5 + 64);
          *((_OWORD *)v18 + 5) = v22;
          *((_OWORD *)v18 + 2) = v20;
          *((_OWORD *)v18 + 3) = v21;
          if (v7 == v13)
          {
            v28 = &v17[96 * v14];
          }
          else
          {
            v23 = &v17[96 * v14];
            do
            {
              v24 = *((_OWORD *)v7 - 5);
              *((_OWORD *)v23 - 6) = *((_OWORD *)v7 - 6);
              *((_OWORD *)v23 - 5) = v24;
              v25 = *((_OWORD *)v7 - 4);
              v26 = *((_OWORD *)v7 - 3);
              v27 = *((_OWORD *)v7 - 1);
              v28 = v23 - 96;
              *((_OWORD *)v23 - 2) = *((_OWORD *)v7 - 2);
              *((_OWORD *)v23 - 1) = v27;
              *((_OWORD *)v23 - 4) = v25;
              *((_OWORD *)v23 - 3) = v26;
              v7 -= 96;
              v23 -= 96;
            }
            while (v7 != v13);
          }
          v7 = v18 + 96;
          __p[0] = v28;
          v89 = &v17[96 * v16];
          if (v13)
            operator delete(v13);
        }
        else
        {
          v9 = *(_OWORD *)(v5 + 16);
          *(_OWORD *)v7 = *(_OWORD *)v5;
          *((_OWORD *)v7 + 1) = v9;
          v10 = *(_OWORD *)(v5 + 32);
          v11 = *(_OWORD *)(v5 + 48);
          v12 = *(_OWORD *)(v5 + 80);
          *((_OWORD *)v7 + 4) = *(_OWORD *)(v5 + 64);
          *((_OWORD *)v7 + 5) = v12;
          *((_OWORD *)v7 + 2) = v10;
          *((_OWORD *)v7 + 3) = v11;
          v7 += 96;
        }
        __p[1] = v7;
      }
      v5 += 96;
    }
    while (v5 != v6);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10214A4B8);
  v29 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v30 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
    *(_DWORD *)buf = 134218240;
    v95 = v30;
    v96 = 2048;
    v97 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 5);
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, num input aps, %lu, num valid unc aps, %lu", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214A4B8);
    v82 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
    v90 = 134218240;
    v91 = v82;
    v92 = 2048;
    v93 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 5);
    v83 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, num input aps, %lu, num valid unc aps, %lu", &v90, 22);
    sub_100512490("Generic", 1, 0, 2, "static std::vector<CLWifiAPLocation> CLLocationCalculator::filterWifiApsBasedOnVerticalUncCriteria(const std::vector<CLWifiAPLocation> &, BOOL &)", "%s\n", v83);
    if (v83 != (char *)buf)
      free(v83);
  }
  v31 = (double *)__p[0];
  if (__p[0] == __p[1])
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214A4B8);
    v81 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, validUncApCollection is empty", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214A4B8);
      LOWORD(v90) = 0;
      LODWORD(v86) = 2;
      v84 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, validUncApCollection is empty", &v90, v86);
      sub_100512490("Generic", 1, 0, 2, "static std::vector<CLWifiAPLocation> CLLocationCalculator::filterWifiApsBasedOnVerticalUncCriteria(const std::vector<CLWifiAPLocation> &, BOOL &)", "%s\n", v84);
      if (v84 != (char *)buf)
        free(v84);
    }
    *a2 = 1;
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 16) = v89;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v32 = (_QWORD *)(a3 + 16);
    do
    {
      v33 = v31[5];
      if (v33 < *((double *)sub_10012A448() + 34))
      {
        v35 = *(_OWORD **)(a3 + 8);
        v34 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v35 >= v34)
        {
          v41 = *(_OWORD **)a3;
          v42 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v35 - *(_QWORD *)a3) >> 5);
          v43 = v42 + 1;
          if (v42 + 1 > 0x2AAAAAAAAAAAAAALL)
            sub_100259694();
          v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - (_QWORD)v41) >> 5);
          if (2 * v44 > v43)
            v43 = 2 * v44;
          if (v44 >= 0x155555555555555)
            v45 = 0x2AAAAAAAAAAAAAALL;
          else
            v45 = v43;
          if (v45)
          {
            v46 = (char *)sub_10067257C(a3 + 16, v45);
            v41 = *(_OWORD **)a3;
            v35 = *(_OWORD **)(a3 + 8);
          }
          else
          {
            v46 = 0;
          }
          v47 = &v46[96 * v42];
          v48 = *((_OWORD *)v31 + 1);
          *(_OWORD *)v47 = *(_OWORD *)v31;
          *((_OWORD *)v47 + 1) = v48;
          v49 = *((_OWORD *)v31 + 2);
          v50 = *((_OWORD *)v31 + 3);
          v51 = *((_OWORD *)v31 + 5);
          *((_OWORD *)v47 + 4) = *((_OWORD *)v31 + 4);
          *((_OWORD *)v47 + 5) = v51;
          *((_OWORD *)v47 + 2) = v49;
          *((_OWORD *)v47 + 3) = v50;
          if (v35 == v41)
          {
            v57 = &v46[96 * v42];
          }
          else
          {
            v52 = &v46[96 * v42];
            do
            {
              v53 = *(v35 - 5);
              *((_OWORD *)v52 - 6) = *(v35 - 6);
              *((_OWORD *)v52 - 5) = v53;
              v54 = *(v35 - 4);
              v55 = *(v35 - 3);
              v56 = *(v35 - 1);
              v57 = v52 - 96;
              *((_OWORD *)v52 - 2) = *(v35 - 2);
              *((_OWORD *)v52 - 1) = v56;
              *((_OWORD *)v52 - 4) = v54;
              *((_OWORD *)v52 - 3) = v55;
              v35 -= 6;
              v52 -= 96;
            }
            while (v35 != v41);
          }
          v40 = v47 + 96;
          *(_QWORD *)a3 = v57;
          *(_QWORD *)(a3 + 8) = v47 + 96;
          *(_QWORD *)(a3 + 16) = &v46[96 * v45];
          if (v41)
            operator delete(v41);
        }
        else
        {
          v36 = *((_OWORD *)v31 + 1);
          *v35 = *(_OWORD *)v31;
          v35[1] = v36;
          v37 = *((_OWORD *)v31 + 2);
          v38 = *((_OWORD *)v31 + 3);
          v39 = *((_OWORD *)v31 + 5);
          v35[4] = *((_OWORD *)v31 + 4);
          v35[5] = v39;
          v35[2] = v37;
          v35[3] = v38;
          v40 = v35 + 6;
        }
        *(_QWORD *)(a3 + 8) = v40;
      }
      v31 += 12;
    }
    while (v31 != __p[1]);
    if (*(_QWORD *)a3 == *(_QWORD *)(a3 + 8))
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214A4B8);
      v58 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, all aps were non-slam, add them back to yield a fix", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A4B8);
        LOWORD(v90) = 0;
        LODWORD(v86) = 2;
        v85 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, all aps were non-slam, add them back to yield a fix", &v90, v86);
        sub_100512490("Generic", 1, 0, 2, "static std::vector<CLWifiAPLocation> CLLocationCalculator::filterWifiApsBasedOnVerticalUncCriteria(const std::vector<CLWifiAPLocation> &, BOOL &)", "%s\n", v85);
        if (v85 != (char *)buf)
          free(v85);
      }
      v59 = __p[0];
      if (__p[0] != __p[1])
      {
        v60 = *(_OWORD **)(a3 + 8);
        do
        {
          if ((unint64_t)v60 >= *v32)
          {
            v65 = *(_OWORD **)a3;
            v66 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v60 - *(_QWORD *)a3) >> 5);
            v67 = v66 + 1;
            if (v66 + 1 > 0x2AAAAAAAAAAAAAALL)
              sub_100259694();
            if (0x5555555555555556 * ((uint64_t)(*v32 - (_QWORD)v65) >> 5) > v67)
              v67 = 0x5555555555555556 * ((uint64_t)(*v32 - (_QWORD)v65) >> 5);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v32 - (_QWORD)v65) >> 5) >= 0x155555555555555)
              v68 = 0x2AAAAAAAAAAAAAALL;
            else
              v68 = v67;
            if (v68)
            {
              v69 = (char *)sub_10067257C(a3 + 16, v68);
              v65 = *(_OWORD **)a3;
              v60 = *(_OWORD **)(a3 + 8);
            }
            else
            {
              v69 = 0;
            }
            v70 = &v69[96 * v66];
            v71 = v59[1];
            *(_OWORD *)v70 = *v59;
            *((_OWORD *)v70 + 1) = v71;
            v72 = v59[2];
            v73 = v59[3];
            v74 = v59[5];
            *((_OWORD *)v70 + 4) = v59[4];
            *((_OWORD *)v70 + 5) = v74;
            *((_OWORD *)v70 + 2) = v72;
            *((_OWORD *)v70 + 3) = v73;
            if (v60 == v65)
            {
              v80 = &v69[96 * v66];
            }
            else
            {
              v75 = &v69[96 * v66];
              do
              {
                v76 = *(v60 - 5);
                *((_OWORD *)v75 - 6) = *(v60 - 6);
                *((_OWORD *)v75 - 5) = v76;
                v77 = *(v60 - 4);
                v78 = *(v60 - 3);
                v79 = *(v60 - 1);
                v80 = v75 - 96;
                *((_OWORD *)v75 - 2) = *(v60 - 2);
                *((_OWORD *)v75 - 1) = v79;
                *((_OWORD *)v75 - 4) = v77;
                *((_OWORD *)v75 - 3) = v78;
                v60 -= 6;
                v75 -= 96;
              }
              while (v60 != v65);
            }
            v60 = v70 + 96;
            *(_QWORD *)a3 = v80;
            *(_QWORD *)(a3 + 8) = v70 + 96;
            *(_QWORD *)(a3 + 16) = &v69[96 * v68];
            if (v65)
              operator delete(v65);
          }
          else
          {
            v61 = v59[1];
            *v60 = *v59;
            v60[1] = v61;
            v62 = v59[2];
            v63 = v59[3];
            v64 = v59[5];
            v60[4] = v59[4];
            v60[5] = v64;
            v60[2] = v62;
            v60[3] = v63;
            v60 += 6;
          }
          *(_QWORD *)(a3 + 8) = v60;
          v59 += 6;
        }
        while (v59 != __p[1]);
      }
      *a2 = 1;
    }
    if (__p[0])
      operator delete(__p[0]);
  }
}

void sub_1006721F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  uint64_t v14;
  void *v16;

  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10067224C(uint64_t ***a1, const void ***a2, int *a3, int *a4, double *a5, long double *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  const void **v13;
  const void **v14;
  const void **v15;
  const void ***v16;
  BOOL v17;
  int v18;
  int v19;
  double v20;
  double v21;
  uint64_t *v22;
  double v23;
  char **v24;
  char *v25;
  unint64_t v26;
  const void **v27;
  const void *v28[2];
  char **v29;
  char *v30[2];
  char v31;
  std::string __p;

  v30[0] = 0;
  v30[1] = 0;
  v29 = v30;
  v11 = *a1;
  v12 = a1[1];
  while (v11 != v12)
  {
    v27 = (const void **)*v11;
    sub_1000C2254(&v27, &__p);
    sub_1006751D8((uint64_t **)&v29, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v11 += 12;
  }
  v28[0] = 0;
  v28[1] = 0;
  v27 = v28;
  v13 = *a2;
  v14 = v28;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      sub_10019C3A8((uint64_t **)&v27, v13 + 4, (uint64_t)(v13 + 4));
      v15 = (const void **)v13[1];
      if (v15)
      {
        do
        {
          v16 = (const void ***)v15;
          v15 = (const void **)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (const void ***)v13[2];
          v17 = *v16 == v13;
          v13 = (const void **)v16;
        }
        while (!v17);
      }
      v13 = (const void **)v16;
    }
    while (v16 != a2 + 1);
    v14 = v27;
  }
  v25 = 0;
  v26 = 0;
  v24 = &v25;
  sub_100675268(v29, v30, v14, v28, (uint64_t)&v24, (uint64_t)&v25, (uint64_t)&v31, (uint64_t)&__p);
  *a5 = 1.0 - (double)v26 / (double)(unint64_t)a2[2];
  v18 = *a4;
  v19 = *a3;
  v20 = *((double *)sub_10012A448() + 37);
  v21 = *a5;
  v22 = sub_10012A448();
  v23 = exp((double)(v18 - v19) / v20);
  *a6 = v23 * exp(v21 * *((double *)v22 + 38));
  sub_100090AE4((uint64_t)&v24, v25);
  sub_100090AE4((uint64_t)&v27, (char *)v28[0]);
  sub_100090AE4((uint64_t)&v29, v30[0]);
}

void sub_100672424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, char a12, char *a13, uint64_t a14, char a15, char *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_100090AE4((uint64_t)&a9, a10);
  sub_100090AE4((uint64_t)&a12, a13);
  sub_100090AE4((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

void sub_100672480(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_1006724AC(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

NSDictionary *sub_1006724D8(uint64_t a1)
{
  NSNumber *v2;
  _QWORD v4[2];
  _QWORD v5[2];

  v4[0] = CFSTR("apReachOverlapPercentage");
  v2 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)*(double *)(a1 + 32));
  v4[1] = CFSTR("numOfAps");
  v5[0] = v2;
  v5[1] = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(_QWORD *)(a1 + 40));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 2);
}

void *sub_10067257C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    sub_10025955C();
  return operator new(96 * a2);
}

void sub_1006725C0(double *a1, double *a2, uint64_t a3, uint64_t a4, char a5)
{
  double *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  double *v15;
  __int128 v16;
  double v17;
  double *v18;
  char v19;
  BOOL v20;
  double v21;
  double v22;
  uint64_t v23;

double *sub_100672934(double *result, double *a2)
{
  double *v2;
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  double *v9;
  uint64_t v10;
  double v11;
  double v12;
  double *v13;

  if (result == a2)
    return result;
  v2 = result + 2;
  if (result + 2 == a2)
    return result;
  v3 = 0;
  v4 = result;
  do
  {
    v5 = v4;
    v4 = v2;
    v6 = v5[2];
    v7 = *v5;
    if (v6 >= *v5)
    {
      if (v7 < v6)
        goto LABEL_19;
      v8 = v5[3];
      if (v8 >= v5[1])
        goto LABEL_19;
    }
    else
    {
      v8 = v5[3];
    }
    v5[2] = v7;
    v2[1] = v5[1];
    v9 = result;
    if (v5 == result)
      goto LABEL_18;
    v10 = v3;
    while (1)
    {
      v11 = *(double *)((char *)result + v10 - 16);
      if (v6 >= v11)
        break;
      v12 = *(double *)((char *)result + v10 - 8);
LABEL_12:
      v5 -= 2;
      v13 = (double *)((char *)result + v10);
      *v13 = v11;
      v13[1] = v12;
      v10 -= 16;
      if (!v10)
      {
        v9 = result;
        goto LABEL_18;
      }
    }
    if (v11 >= v6)
    {
      v9 = (double *)((char *)result + v10);
      v12 = *(double *)((char *)result + v10 - 8);
      if (v8 >= v12)
        goto LABEL_18;
      goto LABEL_12;
    }
    v9 = v5;
LABEL_18:
    *v9 = v6;
    v9[1] = v8;
LABEL_19:
    v2 = v4 + 2;
    v3 += 16;
  }
  while (v4 + 2 != a2);
  return result;
}

double *sub_100672A0C(double *result, double *a2)
{
  double *v2;
  double *i;
  double *v4;
  double v5;
  double v6;
  double v7;
  double *j;
  double v9;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      for (i = result + 1; ; i += 2)
      {
        v4 = result;
        result = v2;
        v5 = v4[2];
        v6 = *v4;
        if (v5 < *v4)
          break;
        if (v6 >= v5)
        {
          v7 = v4[3];
          if (v7 < v4[1])
            goto LABEL_6;
        }
LABEL_14:
        v2 = result + 2;
        if (result + 2 == a2)
          return result;
      }
      v7 = v4[3];
LABEL_6:
      for (j = i; ; j -= 2)
      {
        v9 = *j;
        j[1] = v6;
        j[2] = v9;
        v6 = *(j - 3);
        if (v5 >= v6 && (v6 < v5 || v7 >= *(j - 2)))
          break;
      }
      *(j - 1) = v5;
      *j = v7;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t sub_100672AA8(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  uint64_t *v6;
  double *v7;
  uint64_t v8;
  double v9;
  double *v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;

  v3 = *a2;
  v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || a2[1] >= a1[1]))
  {
    v9 = *a3;
    if (*a3 >= v3 && (v3 < v9 || a3[1] >= a2[1]))
      return 0;
    *a2 = v9;
    *a3 = v3;
    v10 = a2 + 1;
    v11 = *((_QWORD *)a2 + 1);
    a2[1] = a3[1];
    *((_QWORD *)a3 + 1) = v11;
    v12 = *a2;
    v13 = *a1;
    if (*a2 >= *a1 && (v13 < v12 || *v10 >= a1[1]))
      return 1;
    *a1 = v12;
    v6 = (uint64_t *)(a1 + 1);
    *a2 = v13;
    v8 = 2;
  }
  else
  {
    v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
    {
      *a1 = v5;
      v6 = (uint64_t *)(a1 + 1);
      *a3 = v4;
      v7 = a3 + 1;
      v8 = 1;
    }
    else
    {
      *a1 = v3;
      *a2 = v4;
      v14 = a1[1];
      a1[1] = a2[1];
      a2[1] = v14;
      v15 = *a3;
      v16 = *a2;
      if (*a3 >= *a2 && (v16 < v15 || a3[1] >= v14))
        return 1;
      *a2 = v15;
      *a3 = v16;
      v7 = a3 + 1;
      v8 = 2;
      v6 = (uint64_t *)(a2 + 1);
    }
    v10 = v7;
  }
  v17 = *v6;
  *v6 = *(_QWORD *)v10;
  *(_QWORD *)v10 = v17;
  return v8;
}

double *sub_100672BFC(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double *i;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(a2 - 2);
  if (*a1 >= v4 && (v4 < v2 || v3 >= *(a2 - 1)))
  {
    for (i = a1 + 2; i < a2 && v2 >= *i && (*i < v2 || v3 >= i[1]); i += 2)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v6 = i[2];
      i += 2;
      v7 = v6;
    }
    while (v2 >= v6 && (v7 < v2 || v3 >= i[1]));
  }
  if (i < a2)
  {
    for (a2 -= 2; v2 < v4 || v4 >= v2 && v3 < a2[1]; a2 -= 2)
    {
      v8 = *(a2 - 2);
      v4 = v8;
    }
  }
  if (i < a2)
  {
    v9 = *i;
    v10 = *a2;
    do
    {
      *i = v10;
      *a2 = v9;
      v11 = *((_QWORD *)i + 1);
      i[1] = a2[1];
      *((_QWORD *)a2 + 1) = v11;
      do
      {
        v12 = i[2];
        i += 2;
        v9 = v12;
      }
      while (v2 >= v12 && (v9 < v2 || v3 >= i[1]));
      do
      {
        do
        {
          v13 = *(a2 - 2);
          a2 -= 2;
          v10 = v13;
        }
        while (v2 < v13);
      }
      while (v10 >= v2 && v3 < a2[1]);
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    a1[1] = *(i - 1);
  }
  *(i - 2) = v2;
  *(i - 1) = v3;
  return i;
}

unint64_t sub_100672D40(double *a1, double *a2)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  unint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v12;
  unint64_t v13;
  double *v14;
  uint64_t v15;
  double v16;
  double v17;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  while (1)
  {
    v5 = a1[v2 + 2];
    if (v5 >= v3 && (v3 < v5 || a1[v2 + 3] >= v4))
      break;
    v2 += 2;
  }
  v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 8)
  {
    do
    {
      v7 = *(a2 - 2);
      a2 -= 2;
      v8 = v7;
    }
    while (v7 >= v3 && (v3 < v8 || a2[1] >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < (unint64_t)a2)
    {
      do
      {
        v9 = *(a2 - 2);
        a2 -= 2;
        v10 = v9;
        if (v9 < v3)
          break;
        if (v3 < v10)
          goto LABEL_19;
      }
      while (a2[1] >= v4 && v6 < (unint64_t)a2);
    }
  }
  if (v6 >= (unint64_t)a2)
  {
    v13 = (unint64_t)&a1[v2 + 2];
  }
  else
  {
    v12 = *a2;
    v13 = (unint64_t)&a1[v2 + 2];
    v14 = a2;
    do
    {
      *(double *)v13 = v12;
      *v14 = v5;
      v15 = *(_QWORD *)(v13 + 8);
      *(double *)(v13 + 8) = v14[1];
      *((_QWORD *)v14 + 1) = v15;
      do
      {
        do
        {
          v16 = *(double *)(v13 + 16);
          v13 += 16;
          v5 = v16;
        }
        while (v16 < v3);
      }
      while (v3 >= v5 && *(double *)(v13 + 8) < v4);
      do
      {
        v17 = *(v14 - 2);
        v14 -= 2;
        v12 = v17;
      }
      while (v17 >= v3 && (v3 < v12 || v14[1] >= v4));
    }
    while (v13 < (unint64_t)v14);
  }
  if ((double *)(v13 - 16) != a1)
  {
    *a1 = *(double *)(v13 - 16);
    a1[1] = *(double *)(v13 - 8);
  }
  *(double *)(v13 - 16) = v3;
  *(double *)(v13 - 8) = v4;
  return v13 - 16;
}

BOOL sub_100672E84(uint64_t a1, double *a2)
{
  uint64_t v4;
  _BOOL8 result;
  double v6;
  double v7;
  uint64_t v8;
  double *v9;
  double *v10;
  uint64_t v11;
  int v12;
  double v13;
  double v14;
  double v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *(double *)a1;
      if (v6 < *(double *)a1 || v7 >= v6 && *(a2 - 1) < *(double *)(a1 + 8))
      {
        *(double *)a1 = v6;
        *(a2 - 2) = v7;
        v8 = *(_QWORD *)(a1 + 8);
        *(double *)(a1 + 8) = *(a2 - 1);
        *((_QWORD *)a2 - 1) = v8;
      }
      return result;
    case 3:
      sub_100672AA8((double *)a1, (double *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      sub_100673084((double *)a1, a1 + 16, a1 + 32, (uint64_t)(a2 - 2));
      return 1;
    case 5:
      sub_100673184((double *)a1, a1 + 16, a1 + 32, a1 + 48, (uint64_t)(a2 - 2));
      return 1;
    default:
      v9 = (double *)(a1 + 32);
      sub_100672AA8((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32));
      v10 = (double *)(a1 + 48);
      if ((double *)(a1 + 48) == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  do
  {
    v13 = *v10;
    v14 = *v9;
    if (*v10 >= *v9)
    {
      if (v14 < v13)
        goto LABEL_23;
      v15 = v10[1];
      if (v15 >= v9[1])
        goto LABEL_23;
    }
    else
    {
      v15 = v10[1];
    }
    *v10 = v14;
    v10[1] = v9[1];
    v16 = (double *)a1;
    if (v9 == (double *)a1)
      goto LABEL_22;
    v17 = v11;
    while (1)
    {
      v18 = a1 + v17;
      v19 = *(double *)(a1 + v17 + 16);
      if (v13 < v19)
      {
        v20 = *(double *)(v18 + 24);
        goto LABEL_18;
      }
      if (v19 < v13)
      {
        v16 = v9;
        goto LABEL_22;
      }
      v20 = *(double *)(a1 + v17 + 24);
      if (v15 >= v20)
        break;
LABEL_18:
      v9 -= 2;
      *(double *)(v18 + 32) = v19;
      *(double *)(a1 + v17 + 40) = v20;
      v17 -= 16;
      if (v17 == -32)
      {
        v16 = (double *)a1;
        goto LABEL_22;
      }
    }
    v16 = (double *)(a1 + v17 + 32);
LABEL_22:
    *v16 = v13;
    v16[1] = v15;
    if (++v12 == 8)
      return v10 + 2 == a2;
LABEL_23:
    v9 = v10;
    v11 += 16;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

double sub_100673084(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;
  double v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  double v13;

  sub_100672AA8(a1, (double *)a2, (double *)a3);
  result = *(double *)a4;
  v9 = *(double *)a3;
  if (*(double *)a4 < *(double *)a3 || v9 >= result && *(double *)(a4 + 8) < *(double *)(a3 + 8))
  {
    *(double *)a3 = result;
    *(double *)a4 = v9;
    v10 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v10;
    result = *(double *)a3;
    v11 = *(double *)a2;
    if (*(double *)a3 < *(double *)a2 || v11 >= result && *(double *)(a3 + 8) < *(double *)(a2 + 8))
    {
      *(double *)a2 = result;
      *(double *)a3 = v11;
      v12 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v12;
      result = *(double *)a2;
      v13 = *a1;
      if (*(double *)a2 < *a1 || v13 >= result && *(double *)(a2 + 8) < a1[1])
      {
        *a1 = result;
        *(double *)a2 = v13;
        result = a1[1];
        a1[1] = *(double *)(a2 + 8);
        *(double *)(a2 + 8) = result;
      }
    }
  }
  return result;
}

double sub_100673184(double *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result;
  double v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;

  sub_100673084(a1, a2, a3, a4);
  result = *(double *)a5;
  v11 = *(double *)a4;
  if (*(double *)a5 < *(double *)a4 || v11 >= result && *(double *)(a5 + 8) < *(double *)(a4 + 8))
  {
    *(double *)a4 = result;
    *(double *)a5 = v11;
    v12 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = *(_QWORD *)(a5 + 8);
    *(_QWORD *)(a5 + 8) = v12;
    result = *(double *)a4;
    v13 = *(double *)a3;
    if (*(double *)a4 < *(double *)a3 || v13 >= result && *(double *)(a4 + 8) < *(double *)(a3 + 8))
    {
      *(double *)a3 = result;
      *(double *)a4 = v13;
      v14 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(a4 + 8) = v14;
      result = *(double *)a3;
      v15 = *(double *)a2;
      if (*(double *)a3 < *(double *)a2 || v15 >= result && *(double *)(a3 + 8) < *(double *)(a2 + 8))
      {
        *(double *)a2 = result;
        *(double *)a3 = v15;
        v16 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
        *(_QWORD *)(a3 + 8) = v16;
        result = *(double *)a2;
        v17 = *a1;
        if (*(double *)a2 < *a1 || v17 >= result && *(double *)(a2 + 8) < a1[1])
        {
          *a1 = result;
          *(double *)a2 = v17;
          result = a1[1];
          a1[1] = *(double *)(a2 + 8);
          *(double *)(a2 + 8) = result;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1006732D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  uint64_t v20;
  double v21;
  double *v22;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (double *)(a1 + 16 * v10);
      do
      {
        sub_100673458(a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *(double *)v14;
        v16 = *(double *)a1;
        if (*(double *)v14 < *(double *)a1 || v16 >= v15 && *(double *)(v14 + 8) < *(double *)(a1 + 8))
        {
          *(double *)v14 = v16;
          *(double *)a1 = v15;
          v17 = *(_QWORD *)(v14 + 8);
          *(_QWORD *)(v14 + 8) = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v17;
          sub_100673458(a1, a4, v9, (double *)a1);
        }
        v14 += 16;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v18 = (unint64_t)v8 >> 4;
      v19 = (double *)(a2 - 16);
      do
      {
        v21 = *(double *)a1;
        v20 = *(_QWORD *)(a1 + 8);
        sub_10067359C((double *)a1, a4, v18);
        if (v19 == v22)
        {
          *v22 = v21;
          *((_QWORD *)v22 + 1) = v20;
        }
        else
        {
          *v22 = *v19;
          v22[1] = v19[1];
          *v19 = v21;
          *((_QWORD *)v19 + 1) = v20;
          sub_10067362C(a1, (uint64_t)(v22 + 2), a4, ((uint64_t)v22 - a1 + 16) >> 4);
        }
        v19 -= 2;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_100673458(uint64_t result, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (double *)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && v8[1] < v8[3])
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v11 = *v8;
      v12 = *a4;
      if (*v8 >= *a4)
      {
        if (v12 >= v11)
        {
          v13 = a4[1];
          if (v8[1] < v13)
            return result;
        }
        else
        {
          v13 = a4[1];
        }
        *a4 = v11;
        a4[1] = v8[1];
        if (v5 >= v7)
        {
          while (1)
          {
            v15 = 2 * v7;
            v7 = (2 * v7) | 1;
            v14 = (double *)(result + 16 * v7);
            v16 = v15 + 2;
            if (v16 < a3)
            {
              v17 = v14[2];
              if (*v14 < v17 || v17 >= *v14 && v14[1] < v14[3])
              {
                v14 += 2;
                v7 = v16;
              }
            }
            v18 = *v14;
            if (*v14 < v12 || v12 >= v18 && v14[1] < v13)
              break;
            *v8 = v18;
            v8[1] = v14[1];
            v8 = v14;
            if (v5 < v7)
              goto LABEL_23;
          }
        }
        v14 = v8;
LABEL_23:
        *v14 = v12;
        v14[1] = v13;
      }
    }
  }
  return result;
}

double sub_10067359C(double *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double result;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = a1;
    a1 += 2 * v3 + 2;
    v7 = 2 * v3;
    v3 = (2 * v3) | 1;
    v8 = v7 + 2;
    if (v8 < a3)
    {
      v9 = a1[2];
      if (*a1 < v9 || v9 >= *a1 && a1[1] < a1[3])
      {
        a1 += 2;
        v3 = v8;
      }
    }
    *v6 = *a1;
    result = a1[1];
    v6[1] = result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t sub_10067362C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  double *v10;
  unint64_t v11;
  double v12;
  double v13;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (double *)(result + 16 * (v4 >> 1));
    v7 = *v6;
    v8 = *(double *)(a2 - 16);
    if (*v6 >= v8)
    {
      if (v8 < v7)
        return result;
      v9 = *(double *)(a2 - 8);
      if (v6[1] >= v9)
        return result;
    }
    else
    {
      v9 = *(double *)(a2 - 8);
    }
    *(double *)(a2 - 16) = v7;
    *(double *)(a2 - 8) = v6[1];
    if (v4 >= 2)
    {
      while (1)
      {
        v11 = v5 - 1;
        v5 = (v5 - 1) >> 1;
        v10 = (double *)(result + 16 * v5);
        v12 = *v10;
        if (*v10 >= v8)
        {
          if (v8 < v12)
            break;
          v13 = v10[1];
          if (v13 >= v9)
            break;
        }
        else
        {
          v13 = v10[1];
        }
        *v6 = v12;
        v6[1] = v13;
        v6 = (double *)(result + 16 * v5);
        if (v11 <= 1)
          goto LABEL_13;
      }
    }
    v10 = v6;
LABEL_13:
    *v10 = v8;
    v10[1] = v9;
  }
  return result;
}

uint64_t sub_1006736D4(uint64_t a1, double *a2, double *a3)
{
  double *v4;
  double *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (double *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_100673754((uint64_t **)a1, v4, v6, (uint64_t *)v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_10067373C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100673754(uint64_t **a1, double *a2, double *a3, uint64_t *a4)
{
  double *v6;
  uint64_t *v7;
  uint64_t **v8;
  double v10;
  double *v11;

  v6 = sub_1006737D8(a1, a2, &v11, &v10, a3);
  v7 = *(uint64_t **)v6;
  if (!*(_QWORD *)v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    sub_1000145B0(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

double *sub_1006737D8(_QWORD *a1, double *a2, double **a3, double *a4, double *a5)
{
  double *v5;
  double v6;
  double v7;
  uint64_t *v8;
  uint64_t *v9;
  double *v10;
  uint64_t v11;
  double *v12;
  double *v13;
  BOOL v14;
  double v15;
  double *v16;
  double *v17;
  double v18;
  double *v19;
  double *v20;
  double v21;

  v5 = (double *)(a1 + 1);
  if (a1 + 1 == (_QWORD *)a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *(uint64_t **)a2;
    if ((double *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = *(uint64_t **)a2;
      do
      {
        v10 = (double *)v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (double *)*((_QWORD *)v13 + 2);
        v14 = *(_QWORD *)v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = *(double **)v5;
    if (*(_QWORD *)v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = *(double **)v16;
          v5 = v17;
          if (!*(_QWORD *)v17)
            goto LABEL_43;
        }
        if (v18 >= v15)
          break;
        v5 = v16 + 1;
        v16 = (double *)*((_QWORD *)v16 + 1);
      }
      while (v16);
      goto LABEL_43;
    }
LABEL_42:
    v17 = (double *)(a1 + 1);
LABEL_43:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *(_QWORD *)a4 = a2;
    return a4;
  }
  v11 = *((_QWORD *)a2 + 1);
  if (v11)
  {
    v12 = (double *)*((_QWORD *)a2 + 1);
    do
    {
      a4 = v12;
      v12 = *(double **)v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (double *)*((_QWORD *)v19 + 2);
      v14 = *(_QWORD *)a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = *(double **)v5;
    if (*(_QWORD *)v5)
    {
      do
      {
        while (1)
        {
          v17 = v20;
          v21 = v20[4];
          if (v6 >= v21)
            break;
          v20 = *(double **)v20;
          v5 = v17;
          if (!*(_QWORD *)v17)
            goto LABEL_43;
        }
        if (v21 >= v6)
          break;
        v5 = v20 + 1;
        v20 = (double *)*((_QWORD *)v20 + 1);
      }
      while (v20);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

_QWORD *sub_100673974(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100259C18(a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_100673A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_10025E1F0(&a9);
  _Unwind_Resume(a1);
}

void *sub_100673A14(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277)
    sub_10025955C();
  return operator new(104 * a2);
}

void sub_100673A5C(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  unint64_t v21;
  double *v22;
  double v23;
  double v24;
  double v25;
  double *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  BOOL v37;
  double v38;
  unint64_t v39;
  unint64_t v40;
  double v41;
  double v42;
  double v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  double v48;
  double v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  double v54;
  double v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  double v60;
  double v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  double v66;
  double v67;
  __int128 v68;
  __int128 v69;
  double v70;
  __int128 v71;
  __int128 v72;
  double v73;
  BOOL v74;
  __int128 v75;
  __int128 v76;
  unint64_t v77;
  BOOL v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  double v83;
  uint64_t v84;
  double v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  double *v89;
  int64_t v90;
  int64_t v91;
  int64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  double v96;
  double v97;
  unint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  int64_t v105;
  uint64_t v106;
  double v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  int64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 *v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  double v124;
  double v125;
  unint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  _OWORD *v135;
  uint64_t v136;
  double v137;
  _OWORD *v138;
  double v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  _BYTE v154[25];
  _BYTE v155[25];
  _BYTE v156[25];
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  _BYTE v205[32];
  _BYTE v206[32];
  _BYTE v207[32];
  _BYTE v208[32];
  _BYTE v209[32];
  _BYTE v210[32];
  _BYTE v211[32];
  _BYTE v212[32];
  _BYTE v213[25];
  _BYTE v214[25];
  _BYTE v215[25];
  _BYTE v216[25];

__n128 sub_1006747F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  double v4;
  double v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  double v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[32];
  _BYTE v42[32];
  _BYTE v43[32];
  _BYTE v44[32];

  result.n128_u64[0] = *(_QWORD *)a2;
  v4 = *(double *)a1;
  v5 = *(double *)a3;
  if (*(double *)a2 <= *(double *)a1)
  {
    if (v5 > result.n128_f64[0])
    {
      *(double *)a2 = v5;
      *(_QWORD *)a3 = result.n128_u64[0];
      v33 = *(_OWORD *)(a2 + 40);
      v37 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)v41 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)&v41[16] = *(_OWORD *)(a2 + 88);
      v25 = *(_OWORD *)(a2 + 8);
      v29 = *(_OWORD *)(a2 + 24);
      v7 = *(_OWORD *)(a3 + 24);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a2 + 24) = v7;
      v8 = *(_OWORD *)(a3 + 56);
      v9 = *(_OWORD *)(a3 + 72);
      v10 = *(_OWORD *)(a3 + 81);
      *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
      *(_OWORD *)(a2 + 81) = v10;
      *(_OWORD *)(a2 + 72) = v9;
      *(_OWORD *)(a2 + 56) = v8;
      *(_OWORD *)(a3 + 40) = v33;
      *(_OWORD *)(a3 + 56) = v37;
      *(_OWORD *)(a3 + 72) = *(_OWORD *)v41;
      *(_OWORD *)(a3 + 81) = *(_OWORD *)&v41[9];
      result.n128_u64[1] = *((_QWORD *)&v25 + 1);
      *(_OWORD *)(a3 + 8) = v25;
      *(_OWORD *)(a3 + 24) = v29;
      result.n128_u64[0] = *(_QWORD *)a2;
      v11 = *(double *)a1;
      if (*(double *)a2 > *(double *)a1)
      {
        *(_QWORD *)a1 = result.n128_u64[0];
        *(double *)a2 = v11;
        v34 = *(_OWORD *)(a1 + 40);
        v38 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)v42 = *(_OWORD *)(a1 + 72);
        *(_OWORD *)&v42[16] = *(_OWORD *)(a1 + 88);
        v26 = *(__n128 *)(a1 + 8);
        v30 = *(_OWORD *)(a1 + 24);
        v12 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(_OWORD *)(a1 + 24) = v12;
        v14 = *(_OWORD *)(a2 + 56);
        v13 = *(_OWORD *)(a2 + 72);
        v15 = *(_OWORD *)(a2 + 81);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 81) = v15;
        *(_OWORD *)(a1 + 72) = v13;
        *(_OWORD *)(a1 + 56) = v14;
        *(_OWORD *)(a2 + 72) = *(_OWORD *)v42;
        *(_OWORD *)(a2 + 81) = *(_OWORD *)&v42[9];
        *(_OWORD *)(a2 + 40) = v34;
        *(_OWORD *)(a2 + 56) = v38;
        result = v26;
        *(__n128 *)(a2 + 8) = v26;
        *(_OWORD *)(a2 + 24) = v30;
      }
    }
  }
  else
  {
    v6 = (_OWORD *)(a1 + 8);
    if (v5 <= result.n128_f64[0])
    {
      *(_QWORD *)a1 = result.n128_u64[0];
      *(double *)a2 = v4;
      v35 = *(_OWORD *)(a1 + 40);
      v39 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)v43 = *(_OWORD *)(a1 + 72);
      *(_OWORD *)&v43[16] = *(_OWORD *)(a1 + 88);
      v27 = *(__n128 *)v6;
      v31 = *(_OWORD *)(a1 + 24);
      v16 = *(_OWORD *)(a2 + 24);
      *v6 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = v16;
      v17 = *(_OWORD *)(a2 + 56);
      v18 = *(_OWORD *)(a2 + 72);
      v19 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
      *(_OWORD *)(a1 + 56) = v17;
      *(_OWORD *)(a1 + 72) = v18;
      *(_OWORD *)(a1 + 40) = v19;
      *(_OWORD *)(a2 + 40) = v35;
      *(_OWORD *)(a2 + 56) = v39;
      *(_OWORD *)(a2 + 72) = *(_OWORD *)v43;
      *(_OWORD *)(a2 + 81) = *(_OWORD *)&v43[9];
      result.n128_u64[1] = v27.n128_u64[1];
      *(__n128 *)(a2 + 8) = v27;
      *(_OWORD *)(a2 + 24) = v31;
      result.n128_u64[0] = *(_QWORD *)a3;
      v20 = *(_QWORD *)a2;
      if (*(double *)a3 <= *(double *)a2)
        return result;
      v6 = (_OWORD *)(a2 + 8);
      *(_QWORD *)a2 = result.n128_u64[0];
      *(_QWORD *)a3 = v20;
    }
    else
    {
      *(double *)a1 = v5;
      *(double *)a3 = v4;
    }
    v36 = v6[2];
    v40 = v6[3];
    *(_OWORD *)v44 = v6[4];
    *(_OWORD *)&v44[16] = v6[5];
    v28 = *(__n128 *)v6;
    v32 = v6[1];
    v21 = *(_OWORD *)(a3 + 24);
    *v6 = *(_OWORD *)(a3 + 8);
    v6[1] = v21;
    v22 = *(_OWORD *)(a3 + 56);
    v23 = *(_OWORD *)(a3 + 72);
    v24 = *(_OWORD *)(a3 + 40);
    *(_OWORD *)((char *)v6 + 73) = *(_OWORD *)(a3 + 81);
    v6[3] = v22;
    v6[4] = v23;
    v6[2] = v24;
    *(_OWORD *)(a3 + 40) = v36;
    *(_OWORD *)(a3 + 56) = v40;
    *(_OWORD *)(a3 + 72) = *(_OWORD *)v44;
    *(_OWORD *)(a3 + 81) = *(_OWORD *)&v44[9];
    result = v28;
    *(__n128 *)(a3 + 8) = v28;
    *(_OWORD *)(a3 + 24) = v32;
  }
  return result;
}

BOOL sub_100674A3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  double v6;
  double v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  double v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  double *v25;
  double v26;
  double v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  double v32;
  double v33;
  __int128 v34;
  __int128 v35;
  double v36;
  __int128 v37;
  __int128 v38;
  double v39;
  BOOL v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _BYTE v67[32];
  _BYTE v68[25];
  _BYTE v69[32];
  _BYTE v70[32];
  _BYTE v71[32];
  _BYTE v72[32];

  v4 = 0x4EC4EC4EC4EC4EC5 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(double *)(a2 - 104);
      v7 = *(double *)a1;
      if (v6 > *(double *)a1)
      {
        *(double *)a1 = v6;
        *(double *)(a2 - 104) = v7;
        v55 = *(_OWORD *)(a1 + 40);
        v61 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)v67 = *(_OWORD *)(a1 + 72);
        *(_OWORD *)&v67[16] = *(_OWORD *)(a1 + 88);
        v43 = *(_OWORD *)(a1 + 8);
        v49 = *(_OWORD *)(a1 + 24);
        v8 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 24) = v8;
        v10 = *(_OWORD *)(a2 - 48);
        v9 = *(_OWORD *)(a2 - 32);
        v11 = *(_OWORD *)(a2 - 23);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 - 64);
        *(_OWORD *)(a1 + 81) = v11;
        *(_OWORD *)(a1 + 72) = v9;
        *(_OWORD *)(a1 + 56) = v10;
        *(_OWORD *)(a2 - 64) = v55;
        *(_OWORD *)(a2 - 48) = v61;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v67;
        *(_OWORD *)(a2 - 23) = *(_OWORD *)&v67[9];
        *(_OWORD *)(a2 - 96) = v43;
        *(_OWORD *)(a2 - 80) = v49;
      }
      return result;
    case 3:
      sub_1006747F8(a1, a1 + 104, a2 - 104);
      return 1;
    case 4:
      sub_100674E98(a1, a1 + 104, a1 + 208, a2 - 104);
      return 1;
    case 5:
      sub_100674E98(a1, a1 + 104, a1 + 208, a1 + 312);
      v26 = *(double *)(a2 - 104);
      v27 = *(double *)(a1 + 312);
      if (v26 <= v27)
        return 1;
      *(double *)(a1 + 312) = v26;
      *(double *)(a2 - 104) = v27;
      v57 = *(_OWORD *)(a1 + 352);
      v63 = *(_OWORD *)(a1 + 368);
      *(_OWORD *)v69 = *(_OWORD *)(a1 + 384);
      *(_OWORD *)&v69[16] = *(_OWORD *)(a1 + 400);
      v45 = *(_OWORD *)(a1 + 320);
      v51 = *(_OWORD *)(a1 + 336);
      v28 = *(_OWORD *)(a2 - 80);
      *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 - 96);
      *(_OWORD *)(a1 + 336) = v28;
      v30 = *(_OWORD *)(a2 - 48);
      v29 = *(_OWORD *)(a2 - 32);
      v31 = *(_OWORD *)(a2 - 64);
      *(_OWORD *)(a1 + 393) = *(_OWORD *)(a2 - 23);
      *(_OWORD *)(a1 + 368) = v30;
      *(_OWORD *)(a1 + 384) = v29;
      *(_OWORD *)(a1 + 352) = v31;
      *(_OWORD *)(a2 - 64) = v57;
      *(_OWORD *)(a2 - 48) = v63;
      *(_OWORD *)(a2 - 32) = *(_OWORD *)v69;
      *(_OWORD *)(a2 - 23) = *(_OWORD *)&v69[9];
      *(_OWORD *)(a2 - 96) = v45;
      *(_OWORD *)(a2 - 80) = v51;
      v32 = *(double *)(a1 + 312);
      v33 = *(double *)(a1 + 208);
      if (v32 <= v33)
        return 1;
      *(double *)(a1 + 208) = v32;
      *(double *)(a1 + 312) = v33;
      v58 = *(_OWORD *)(a1 + 248);
      v64 = *(_OWORD *)(a1 + 264);
      *(_OWORD *)v70 = *(_OWORD *)(a1 + 280);
      *(_OWORD *)&v70[16] = *(_OWORD *)(a1 + 296);
      v46 = *(_OWORD *)(a1 + 216);
      v52 = *(_OWORD *)(a1 + 232);
      v34 = *(_OWORD *)(a1 + 368);
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a1 + 352);
      *(_OWORD *)(a1 + 264) = v34;
      *(_OWORD *)(a1 + 280) = *(_OWORD *)(a1 + 384);
      *(_OWORD *)(a1 + 289) = *(_OWORD *)(a1 + 393);
      v35 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a1 + 320);
      *(_OWORD *)(a1 + 232) = v35;
      *(_OWORD *)(a1 + 320) = v46;
      *(_OWORD *)(a1 + 336) = v52;
      *(_OWORD *)(a1 + 393) = *(_OWORD *)&v70[9];
      *(_OWORD *)(a1 + 368) = v64;
      *(_OWORD *)(a1 + 384) = *(_OWORD *)v70;
      *(_OWORD *)(a1 + 352) = v58;
      v36 = *(double *)(a1 + 104);
      if (v32 <= v36)
        return 1;
      *(double *)(a1 + 208) = v36;
      v59 = *(_OWORD *)(a1 + 144);
      v65 = *(_OWORD *)(a1 + 160);
      *(_OWORD *)v71 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a1 + 192);
      v47 = *(_OWORD *)(a1 + 112);
      v53 = *(_OWORD *)(a1 + 128);
      v37 = *(_OWORD *)(a1 + 264);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a1 + 248);
      *(_OWORD *)(a1 + 160) = v37;
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a1 + 280);
      *(_OWORD *)(a1 + 185) = *(_OWORD *)(a1 + 289);
      v38 = *(_OWORD *)(a1 + 232);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 216);
      *(_OWORD *)(a1 + 128) = v38;
      *(_OWORD *)(a1 + 216) = v47;
      *(_OWORD *)(a1 + 232) = v53;
      *(_OWORD *)(a1 + 289) = *(_OWORD *)&v71[9];
      *(_OWORD *)(a1 + 264) = v65;
      *(_OWORD *)(a1 + 280) = *(_OWORD *)v71;
      *(_OWORD *)(a1 + 248) = v59;
      v39 = *(double *)a1;
      v40 = v32 <= *(double *)a1;
      *(double *)(a1 + 104) = v32;
      if (v40)
        return 1;
      *(double *)a1 = v32;
      *(double *)(a1 + 104) = v39;
      v60 = *(_OWORD *)(a1 + 40);
      v66 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)v72 = *(_OWORD *)(a1 + 72);
      *(_OWORD *)&v72[16] = *(_OWORD *)(a1 + 88);
      v48 = *(_OWORD *)(a1 + 8);
      v54 = *(_OWORD *)(a1 + 24);
      v41 = *(_OWORD *)(a1 + 160);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 144);
      *(_OWORD *)(a1 + 56) = v41;
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a1 + 176);
      *(_OWORD *)(a1 + 81) = *(_OWORD *)(a1 + 185);
      v42 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(a1 + 24) = v42;
      *(_OWORD *)(a1 + 112) = v48;
      *(_OWORD *)(a1 + 128) = v54;
      *(_OWORD *)(a1 + 185) = *(_OWORD *)&v72[9];
      result = 1;
      *(_OWORD *)(a1 + 160) = v66;
      *(_OWORD *)(a1 + 176) = *(_OWORD *)v72;
      *(_OWORD *)(a1 + 144) = v60;
      return result;
    default:
      v12 = (double *)(a1 + 208);
      sub_1006747F8(a1, a1 + 104, a1 + 208);
      v13 = a1 + 312;
      if (a1 + 312 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v16 = *(double *)v13;
    if (*(double *)v13 > *v12)
    {
      v44 = *(_OWORD *)(v13 + 8);
      v50 = *(_OWORD *)(v13 + 24);
      *(_OWORD *)&v68[9] = *(_OWORD *)(v13 + 81);
      v62 = *(_OWORD *)(v13 + 56);
      *(_OWORD *)v68 = *(_OWORD *)(v13 + 72);
      v56 = *(_OWORD *)(v13 + 40);
      v17 = v14;
      v18 = *v12;
      while (1)
      {
        v19 = a1 + v17;
        *(double *)(v19 + 312) = v18;
        v20 = (_OWORD *)(a1 + v17 + 216);
        v21 = *(_OWORD *)(a1 + v17 + 248);
        v22 = *(_OWORD *)(a1 + v17 + 232);
        *(_OWORD *)(v19 + 320) = *v20;
        *(_OWORD *)(v19 + 336) = v22;
        v23 = *(_OWORD *)(a1 + v17 + 264);
        v24 = *(_OWORD *)(a1 + v17 + 280);
        *(_OWORD *)(v19 + 352) = v21;
        *(_OWORD *)(v19 + 368) = v23;
        *(_OWORD *)(v19 + 384) = v24;
        *(_OWORD *)(a1 + v17 + 393) = *(_OWORD *)(a1 + v17 + 289);
        if (v17 == -208)
          break;
        v18 = *(double *)(v19 + 104);
        v17 -= 104;
        if (v16 <= v18)
        {
          v25 = (double *)(a1 + v17 + 312);
          goto LABEL_13;
        }
      }
      v25 = (double *)a1;
LABEL_13:
      *v25 = v16;
      *(_OWORD *)(v19 + 248) = v56;
      *(_OWORD *)(v19 + 216) = v44;
      *(_OWORD *)(v19 + 232) = v50;
      v20[3] = v62;
      v20[4] = *(_OWORD *)v68;
      ++v15;
      *(_OWORD *)((char *)v20 + 73) = *(_OWORD *)&v68[9];
      if (v15 == 8)
        return v13 + 104 == a2;
    }
    v12 = (double *)v13;
    v14 += 104;
    v13 += 104;
    if (v13 == a2)
      return 1;
  }
}

__n128 sub_100674E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  double v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  double v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  double v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __n128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[32];
  _BYTE v37[32];
  _BYTE v38[32];

  sub_1006747F8(a1, a2, a3);
  result.n128_u64[0] = *(_QWORD *)a4;
  v9 = *(double *)a3;
  if (*(double *)a4 > *(double *)a3)
  {
    *(_QWORD *)a3 = result.n128_u64[0];
    *(double *)a4 = v9;
    v30 = *(_OWORD *)(a3 + 40);
    v33 = *(_OWORD *)(a3 + 56);
    *(_OWORD *)v36 = *(_OWORD *)(a3 + 72);
    *(_OWORD *)&v36[16] = *(_OWORD *)(a3 + 88);
    v24 = *(_OWORD *)(a3 + 8);
    v27 = *(_OWORD *)(a3 + 24);
    v10 = *(_OWORD *)(a4 + 24);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
    *(_OWORD *)(a3 + 24) = v10;
    v11 = *(_OWORD *)(a4 + 56);
    v12 = *(_OWORD *)(a4 + 72);
    v13 = *(_OWORD *)(a4 + 81);
    *(_OWORD *)(a3 + 40) = *(_OWORD *)(a4 + 40);
    *(_OWORD *)(a3 + 81) = v13;
    *(_OWORD *)(a3 + 72) = v12;
    *(_OWORD *)(a3 + 56) = v11;
    *(_OWORD *)(a4 + 40) = v30;
    *(_OWORD *)(a4 + 56) = v33;
    *(_OWORD *)(a4 + 72) = *(_OWORD *)v36;
    *(_OWORD *)(a4 + 81) = *(_OWORD *)&v36[9];
    result.n128_u64[1] = *((_QWORD *)&v24 + 1);
    *(_OWORD *)(a4 + 8) = v24;
    *(_OWORD *)(a4 + 24) = v27;
    result.n128_u64[0] = *(_QWORD *)a3;
    v14 = *(double *)a2;
    if (*(double *)a3 > *(double *)a2)
    {
      *(_QWORD *)a2 = result.n128_u64[0];
      *(double *)a3 = v14;
      v31 = *(_OWORD *)(a2 + 40);
      v34 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)v37 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)&v37[16] = *(_OWORD *)(a2 + 88);
      v25 = *(_OWORD *)(a2 + 8);
      v28 = *(_OWORD *)(a2 + 24);
      v15 = *(_OWORD *)(a3 + 24);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a2 + 24) = v15;
      v17 = *(_OWORD *)(a3 + 56);
      v16 = *(_OWORD *)(a3 + 72);
      v18 = *(_OWORD *)(a3 + 81);
      *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
      *(_OWORD *)(a2 + 81) = v18;
      *(_OWORD *)(a2 + 72) = v16;
      *(_OWORD *)(a2 + 56) = v17;
      *(_OWORD *)(a3 + 72) = *(_OWORD *)v37;
      *(_OWORD *)(a3 + 81) = *(_OWORD *)&v37[9];
      *(_OWORD *)(a3 + 40) = v31;
      *(_OWORD *)(a3 + 56) = v34;
      result.n128_u64[1] = *((_QWORD *)&v25 + 1);
      *(_OWORD *)(a3 + 8) = v25;
      *(_OWORD *)(a3 + 24) = v28;
      result.n128_u64[0] = *(_QWORD *)a2;
      v19 = *(double *)a1;
      if (*(double *)a2 > *(double *)a1)
      {
        *(_QWORD *)a1 = result.n128_u64[0];
        *(double *)a2 = v19;
        v32 = *(_OWORD *)(a1 + 40);
        v35 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)v38 = *(_OWORD *)(a1 + 72);
        *(_OWORD *)&v38[16] = *(_OWORD *)(a1 + 88);
        v26 = *(__n128 *)(a1 + 8);
        v29 = *(_OWORD *)(a1 + 24);
        v20 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(_OWORD *)(a1 + 24) = v20;
        v22 = *(_OWORD *)(a2 + 56);
        v21 = *(_OWORD *)(a2 + 72);
        v23 = *(_OWORD *)(a2 + 81);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 81) = v23;
        *(_OWORD *)(a1 + 72) = v21;
        *(_OWORD *)(a1 + 56) = v22;
        *(_OWORD *)(a2 + 72) = *(_OWORD *)v38;
        *(_OWORD *)(a2 + 81) = *(_OWORD *)&v38[9];
        *(_OWORD *)(a2 + 40) = v32;
        *(_OWORD *)(a2 + 56) = v35;
        result = v26;
        *(__n128 *)(a2 + 8) = v26;
        *(_OWORD *)(a2 + 24) = v29;
      }
    }
  }
  return result;
}

uint64_t *sub_100675078(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)sub_10019C424((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    sub_1006750F4((uint64_t)a1, a3, (uint64_t)&v7);
    sub_1000145B0(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

_BYTE *sub_1006750F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _BYTE *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    result = sub_100115CE4(result, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  *((_DWORD *)v6 + 14) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_10067517C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_100279070(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_100675198(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = sub_10008A9F0(a1, (uint64_t *)a2);
  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  operator delete((void *)a2);
  return v3;
}

_OWORD *sub_1006751D8(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)sub_10019C424((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_1000145B0(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

double sub_100675268@<D0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, const void **a3@<X2>, const void **a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  const void **v11;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  const void **v19;
  const void **v20;
  double result;
  __int128 v22;

  *(_QWORD *)&v22 = a5;
  *((_QWORD *)&v22 + 1) = a6;
  if (a1 != a2)
  {
    v11 = a3;
    if (a3 != a4)
    {
      v13 = a1;
      do
      {
        if (sub_100279008(a7, (const void **)v13 + 4, v11 + 4))
        {
          v14 = (_QWORD *)v13[1];
          if (v14)
          {
            do
            {
              v13 = v14;
              v14 = (_QWORD *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              v15 = v13;
              v13 = (_QWORD *)v13[2];
            }
            while ((_QWORD *)*v13 != v15);
          }
        }
        else
        {
          if (sub_100279008(a7, v11 + 4, (const void **)v13 + 4))
          {
            v16 = v13;
          }
          else
          {
            sub_1006753B8((uint64_t)&v22, (const void **)v13 + 4);
            v17 = (_QWORD *)v13[1];
            if (v17)
            {
              do
              {
                v16 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v16 = (_QWORD *)v13[2];
                v18 = *v16 == (_QWORD)v13;
                v13 = v16;
              }
              while (!v18);
            }
          }
          v19 = (const void **)v11[1];
          if (v19)
          {
            do
            {
              v11 = v19;
              v19 = (const void **)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v20 = v11;
              v11 = (const void **)v11[2];
            }
            while (*v11 != v20);
          }
          v13 = v16;
        }
      }
      while (v13 != a2 && v11 != a4);
    }
  }
  *(_QWORD *)a8 = a2;
  *(_QWORD *)(a8 + 8) = a4;
  result = *(double *)&v22;
  *(_OWORD *)(a8 + 16) = v22;
  return result;
}

uint64_t sub_1006753B8(uint64_t a1, const void **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;

  v3 = sub_100675420(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), a2, (uint64_t)a2);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      v5 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      v5 = (uint64_t *)v3[2];
      v6 = *v5 == (_QWORD)v3;
      v3 = v5;
    }
    while (!v6);
  }
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

uint64_t *sub_100675420(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)sub_1006754A0(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_1001B7B1C((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000145B0(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

const void **sub_1006754A0(_QWORD *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  const void **v9;
  const void **v11;
  const void **v12;
  uint64_t v13;
  const void **v14;
  const void **v15;
  uint64_t *v16;
  BOOL v17;
  const void **v18;

  v9 = (const void **)(a1 + 1);
  if (a1 + 1 == a2 || sub_100279008((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = (const void **)a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = (const void **)a2;
        return (const void **)a2;
      }
    }
    v11 = (const void **)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (const void **)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (const void **)v16[2];
        v17 = *v12 == v16;
        v16 = (uint64_t *)v12;
      }
      while (v17);
    }
    if (sub_100279008((uint64_t)(a1 + 2), v12 + 4, a5))
      goto LABEL_16;
    return (const void **)sub_10019C424((uint64_t)a1, a3, a5);
  }
  if (sub_100279008((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (const void **)a2[1];
      do
      {
        v15 = v14;
        v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = (const void **)a2;
      do
      {
        v15 = (const void **)v18[2];
        v17 = *v15 == v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_100279008((uint64_t)(a1 + 2), a5, v15 + 4))
        return (const void **)sub_10019C424((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  *a3 = (const void **)a2;
  *a4 = (uint64_t)a2;
  return (const void **)a4;
}

char *sub_100675638(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  size_t v18;
  void *v19;
  char *v20;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 5) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x2AAAAAAAAAAAAAALL)
      sub_100259694();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 5);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x155555555555555)
      v12 = 0x2AAAAAAAAAAAAAALL;
    else
      v12 = v11;
    result = sub_100675778(v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v17 - 7;
      v19 = v9;
      v20 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 5) >= a4)
    goto LABEL_16;
  v16 = &__src[32 * ((v15 - v9) >> 5)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9 - 7);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v17 - 7;
    v19 = v9;
    v20 = v16;
LABEL_18:
    result = (char *)memmove(v19, v20, v18);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

char *sub_100675778(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    sub_100259694();
  result = (char *)sub_10067257C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[96 * v4];
  return result;
}

void sub_1006757C8(uint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  _OWORD *v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  double v26;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  int v31;
  double *v32;
  double *v33;
  int v34;
  int v35;
  double *v36;
  int v37;
  double *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  int v45;
  double *v46;
  int v47;
  double *v48;
  int v49;
  _OWORD *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  BOOL v55;
  int v56;
  double v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  double *v63;
  double *j;
  int v65;
  int v66;
  int v67;
  int v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  unint64_t v73;
  int v74;
  unint64_t v75;
  int v76;
  int v77;
  int v78;
  _OWORD *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  int v84;
  int v85;
  int v86;
  int v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _OWORD *v92;
  BOOL v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  int v98;
  int v99;
  int v100;
  int v101;
  double v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  unint64_t v106;
  uint64_t v107;
  _OWORD *v108;
  int v109;
  int v110;
  __int128 v111;
  __int128 v112;
  int64_t v113;
  int64_t v114;
  int64_t v115;
  uint64_t v116;
  unint64_t v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  unint64_t v124;
  int v125;
  int v126;
  double v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  __int128 v141;
  int64_t v142;
  uint64_t v143;
  unint64_t v144;
  _OWORD *v145;
  uint64_t v146;
  uint64_t v147;
  int64_t v148;
  int v149;
  int v150;
  int v151;
  int v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  int v165;
  int v166;
  int v167;
  double v168;
  uint64_t v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  unint64_t v174;
  unint64_t v175;
  int v176;
  int v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  int v183;
  uint64_t v184;
  int v185;
  int v186;
  int v187;
  int v188;
  double v189;
  uint64_t v190;
  __int128 v191;
  __int128 v192;
  _OWORD *v193;
  __int128 v194;
  __int128 v195;
  int v196;
  int v197;
  _BYTE v198[32];
  _BYTE v199[32];
  __int128 v200;
  __int128 v201;
  _BYTE v202[32];
  __int128 v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  int v211;
  int v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;
  uint64_t v216;
  __int128 v217;
  uint64_t v218;
  int v219;
  int v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  _BYTE v229[32];
  _BYTE v230[32];
  __int128 v231;
  _BYTE v232[20];
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  _BYTE v248[32];
  _BYTE v249[32];
  _BYTE v250[32];
  _BYTE v251[32];
  _BYTE v252[32];

double sub_100676878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  int v18;
  int v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  int v26;
  int v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  int v34;
  int v35;
  int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int v41;
  int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[32];
  _BYTE v60[32];
  _BYTE v61[32];
  _BYTE v62[32];

  *(_QWORD *)&result = sub_1006770DC(a1, a2, a3, a4).n128_u64[0];
  v11 = *(_DWORD *)(a5 + 56);
  v12 = *(_DWORD *)(a4 + 56);
  if (v11 > v12
    || v11 == v12
    && ((v41 = *(_DWORD *)(a5 + 24), v42 = *(_DWORD *)(a4 + 24), v41 > v42)
     || v41 == v42 && (result = *(double *)(a5 + 40), result < *(double *)(a4 + 40))))
  {
    v51 = *(_OWORD *)(a4 + 32);
    v55 = *(_OWORD *)(a4 + 48);
    *(_OWORD *)v59 = *(_OWORD *)(a4 + 64);
    *(_OWORD *)&v59[16] = *(_OWORD *)(a4 + 80);
    v43 = *(_OWORD *)a4;
    v47 = *(_OWORD *)(a4 + 16);
    v13 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v13;
    v15 = *(_OWORD *)(a5 + 48);
    v14 = *(_OWORD *)(a5 + 64);
    v16 = *(_OWORD *)(a5 + 32);
    *(_OWORD *)(a4 + 73) = *(_OWORD *)(a5 + 73);
    *(_OWORD *)(a4 + 48) = v15;
    *(_OWORD *)(a4 + 64) = v14;
    *(_OWORD *)(a4 + 32) = v16;
    *(_OWORD *)(a5 + 64) = *(_OWORD *)v59;
    *(_OWORD *)(a5 + 73) = *(_OWORD *)&v59[9];
    *(_OWORD *)(a5 + 32) = v51;
    *(_OWORD *)(a5 + 48) = v55;
    result = *(double *)&v43;
    *(_OWORD *)a5 = v43;
    *(_OWORD *)(a5 + 16) = v47;
    v17 = *(_DWORD *)(a4 + 56);
    v18 = *(_DWORD *)(a3 + 56);
    if (v17 > v18
      || v17 == v18
      && ((v19 = *(_DWORD *)(a4 + 24), v20 = *(_DWORD *)(a3 + 24), v19 > v20)
       || v19 == v20 && (result = *(double *)(a4 + 40), result < *(double *)(a3 + 40))))
    {
      v52 = *(_OWORD *)(a3 + 32);
      v56 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)v60 = *(_OWORD *)(a3 + 64);
      *(_OWORD *)&v60[16] = *(_OWORD *)(a3 + 80);
      v44 = *(_OWORD *)a3;
      v48 = *(_OWORD *)(a3 + 16);
      v21 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v21;
      v23 = *(_OWORD *)(a4 + 48);
      v22 = *(_OWORD *)(a4 + 64);
      v24 = *(_OWORD *)(a4 + 32);
      *(_OWORD *)(a3 + 73) = *(_OWORD *)(a4 + 73);
      *(_OWORD *)(a3 + 48) = v23;
      *(_OWORD *)(a3 + 64) = v22;
      *(_OWORD *)(a3 + 32) = v24;
      *(_OWORD *)(a4 + 64) = *(_OWORD *)v60;
      *(_OWORD *)(a4 + 73) = *(_OWORD *)&v60[9];
      *(_OWORD *)(a4 + 32) = v52;
      *(_OWORD *)(a4 + 48) = v56;
      result = *(double *)&v44;
      *(_OWORD *)a4 = v44;
      *(_OWORD *)(a4 + 16) = v48;
      v25 = *(_DWORD *)(a3 + 56);
      v26 = *(_DWORD *)(a2 + 56);
      if (v25 > v26
        || v25 == v26
        && ((v27 = *(_DWORD *)(a3 + 24), v28 = *(_DWORD *)(a2 + 24), v27 > v28)
         || v27 == v28 && (result = *(double *)(a3 + 40), result < *(double *)(a2 + 40))))
      {
        v53 = *(_OWORD *)(a2 + 32);
        v57 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)v61 = *(_OWORD *)(a2 + 64);
        *(_OWORD *)&v61[16] = *(_OWORD *)(a2 + 80);
        v45 = *(_OWORD *)a2;
        v49 = *(_OWORD *)(a2 + 16);
        v29 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v29;
        v31 = *(_OWORD *)(a3 + 48);
        v30 = *(_OWORD *)(a3 + 64);
        v32 = *(_OWORD *)(a3 + 32);
        *(_OWORD *)(a2 + 73) = *(_OWORD *)(a3 + 73);
        *(_OWORD *)(a2 + 48) = v31;
        *(_OWORD *)(a2 + 64) = v30;
        *(_OWORD *)(a2 + 32) = v32;
        *(_OWORD *)(a3 + 64) = *(_OWORD *)v61;
        *(_OWORD *)(a3 + 73) = *(_OWORD *)&v61[9];
        *(_OWORD *)(a3 + 32) = v53;
        *(_OWORD *)(a3 + 48) = v57;
        result = *(double *)&v45;
        *(_OWORD *)a3 = v45;
        *(_OWORD *)(a3 + 16) = v49;
        v33 = *(_DWORD *)(a2 + 56);
        v34 = *(_DWORD *)(a1 + 56);
        if (v33 > v34
          || v33 == v34
          && ((v35 = *(_DWORD *)(a2 + 24), v36 = *(_DWORD *)(a1 + 24), v35 > v36)
           || v35 == v36 && (result = *(double *)(a2 + 40), result < *(double *)(a1 + 40))))
        {
          v54 = *(_OWORD *)(a1 + 32);
          v58 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)v62 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)&v62[16] = *(_OWORD *)(a1 + 80);
          v46 = *(_OWORD *)a1;
          v50 = *(_OWORD *)(a1 + 16);
          v37 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v37;
          v39 = *(_OWORD *)(a2 + 48);
          v38 = *(_OWORD *)(a2 + 64);
          v40 = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
          *(_OWORD *)(a1 + 48) = v39;
          *(_OWORD *)(a1 + 64) = v38;
          *(_OWORD *)(a1 + 32) = v40;
          *(_OWORD *)(a2 + 64) = *(_OWORD *)v62;
          *(_OWORD *)(a2 + 73) = *(_OWORD *)&v62[9];
          *(_OWORD *)(a2 + 32) = v54;
          *(_OWORD *)(a2 + 48) = v58;
          result = *(double *)&v46;
          *(_OWORD *)a2 = v46;
          *(_OWORD *)(a2 + 16) = v50;
        }
      }
    }
  }
  return result;
}

__n128 sub_100676B04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v10;
  int v11;
  __n128 result;
  int v13;
  int v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  int v21;
  int v22;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  int v35;
  int v36;
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _BYTE v58[32];
  _BYTE v59[32];
  _BYTE v60[32];
  _BYTE v61[32];

  v3 = *(_DWORD *)(a2 + 56);
  v4 = *(_DWORD *)(a1 + 56);
  if (v3 > v4
    || v3 == v4
    && ((v10 = *(_DWORD *)(a2 + 24), v11 = *(_DWORD *)(a1 + 24), v10 > v11)
     || v10 == v11 && (result.n128_u64[0] = *(_QWORD *)(a2 + 40), result.n128_f64[0] < *(double *)(a1 + 40))))
  {
    v5 = *(_DWORD *)(a3 + 56);
    if (v5 > v3
      || v5 == v3
      && ((v28 = *(_DWORD *)(a3 + 24), v29 = *(_DWORD *)(a2 + 24), v28 > v29)
       || v28 == v29 && *(double *)(a3 + 40) < *(double *)(a2 + 40)))
    {
      v50 = *(_OWORD *)(a1 + 32);
      v54 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)v58 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)&v58[16] = *(_OWORD *)(a1 + 80);
      v42 = *(__n128 *)a1;
      v46 = *(_OWORD *)(a1 + 16);
      v6 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)(a3 + 48);
      v7 = *(_OWORD *)(a3 + 64);
      v9 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a1 + 73) = *(_OWORD *)(a3 + 73);
      *(_OWORD *)(a1 + 48) = v8;
      *(_OWORD *)(a1 + 64) = v7;
      *(_OWORD *)(a1 + 32) = v9;
    }
    else
    {
      v53 = *(_OWORD *)(a1 + 32);
      v57 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)v61 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)&v61[16] = *(_OWORD *)(a1 + 80);
      v45 = *(__n128 *)a1;
      v49 = *(_OWORD *)(a1 + 16);
      v30 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v30;
      v32 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 64);
      v33 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
      *(_OWORD *)(a1 + 48) = v32;
      *(_OWORD *)(a1 + 64) = v31;
      *(_OWORD *)(a1 + 32) = v33;
      *(_OWORD *)(a2 + 64) = *(_OWORD *)v61;
      *(_OWORD *)(a2 + 73) = *(_OWORD *)&v61[9];
      *(_OWORD *)(a2 + 32) = v53;
      *(_OWORD *)(a2 + 48) = v57;
      result = v45;
      *(__n128 *)a2 = v45;
      *(_OWORD *)(a2 + 16) = v49;
      v34 = *(_DWORD *)(a3 + 56);
      v35 = *(_DWORD *)(a2 + 56);
      if (v34 <= v35)
      {
        if (v34 != v35)
          return result;
        v36 = *(_DWORD *)(a3 + 24);
        v37 = *(_DWORD *)(a2 + 24);
        if (v36 <= v37)
        {
          if (v36 != v37)
            return result;
          result.n128_u64[0] = *(_QWORD *)(a3 + 40);
          if (result.n128_f64[0] >= *(double *)(a2 + 40))
            return result;
        }
      }
      v50 = *(_OWORD *)(a2 + 32);
      v54 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)v58 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)&v58[16] = *(_OWORD *)(a2 + 80);
      v42 = *(__n128 *)a2;
      v46 = *(_OWORD *)(a2 + 16);
      v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v38;
      v40 = *(_OWORD *)(a3 + 48);
      v39 = *(_OWORD *)(a3 + 64);
      v41 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 73) = *(_OWORD *)(a3 + 73);
      *(_OWORD *)(a2 + 48) = v40;
      *(_OWORD *)(a2 + 64) = v39;
      *(_OWORD *)(a2 + 32) = v41;
    }
    *(_OWORD *)(a3 + 64) = *(_OWORD *)v58;
    *(_OWORD *)(a3 + 73) = *(_OWORD *)&v58[9];
    *(_OWORD *)(a3 + 32) = v50;
    *(_OWORD *)(a3 + 48) = v54;
    result = v42;
    *(__n128 *)a3 = v42;
    *(_OWORD *)(a3 + 16) = v46;
    return result;
  }
  v13 = *(_DWORD *)(a3 + 56);
  if (v13 > v3
    || v13 == v3
    && ((v14 = *(_DWORD *)(a3 + 24), v15 = *(_DWORD *)(a2 + 24), v14 > v15)
     || v14 == v15 && (result.n128_u64[0] = *(_QWORD *)(a3 + 40), result.n128_f64[0] < *(double *)(a2 + 40))))
  {
    v51 = *(_OWORD *)(a2 + 32);
    v55 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)v59 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)&v59[16] = *(_OWORD *)(a2 + 80);
    v43 = *(__n128 *)a2;
    v47 = *(_OWORD *)(a2 + 16);
    v16 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)(a2 + 16) = v16;
    v18 = *(_OWORD *)(a3 + 48);
    v17 = *(_OWORD *)(a3 + 64);
    v19 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a2 + 73) = *(_OWORD *)(a3 + 73);
    *(_OWORD *)(a2 + 48) = v18;
    *(_OWORD *)(a2 + 64) = v17;
    *(_OWORD *)(a2 + 32) = v19;
    *(_OWORD *)(a3 + 64) = *(_OWORD *)v59;
    *(_OWORD *)(a3 + 73) = *(_OWORD *)&v59[9];
    *(_OWORD *)(a3 + 32) = v51;
    *(_OWORD *)(a3 + 48) = v55;
    result = v43;
    *(__n128 *)a3 = v43;
    *(_OWORD *)(a3 + 16) = v47;
    v20 = *(_DWORD *)(a2 + 56);
    v21 = *(_DWORD *)(a1 + 56);
    if (v20 > v21
      || v20 == v21
      && ((v22 = *(_DWORD *)(a2 + 24), v23 = *(_DWORD *)(a1 + 24), v22 > v23)
       || v22 == v23 && (result.n128_u64[0] = *(_QWORD *)(a2 + 40), result.n128_f64[0] < *(double *)(a1 + 40))))
    {
      v52 = *(_OWORD *)(a1 + 32);
      v56 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)v60 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)&v60[16] = *(_OWORD *)(a1 + 80);
      v44 = *(__n128 *)a1;
      v48 = *(_OWORD *)(a1 + 16);
      v24 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v24;
      v26 = *(_OWORD *)(a2 + 48);
      v25 = *(_OWORD *)(a2 + 64);
      v27 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
      *(_OWORD *)(a1 + 48) = v26;
      *(_OWORD *)(a1 + 64) = v25;
      *(_OWORD *)(a1 + 32) = v27;
      *(_OWORD *)(a2 + 64) = *(_OWORD *)v60;
      *(_OWORD *)(a2 + 73) = *(_OWORD *)&v60[9];
      *(_OWORD *)(a2 + 32) = v52;
      *(_OWORD *)(a2 + 48) = v56;
      result = v44;
      *(__n128 *)a2 = v44;
      *(_OWORD *)(a2 + 16) = v48;
    }
  }
  return result;
}

BOOL sub_100676DC0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  double v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  _OWORD *v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  _BYTE v43[32];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[32];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 5);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(_DWORD *)(a2 - 40);
      v7 = *(_DWORD *)(a1 + 56);
      if (v6 > v7
        || v6 == v7
        && ((v36 = *(_DWORD *)(a2 - 72), v37 = *(_DWORD *)(a1 + 24), v36 > v37)
         || v36 == v37 && *(double *)(a2 - 56) < *(double *)(a1 + 40)))
      {
        v8 = (_OWORD *)(a2 - 96);
        v45 = *(_OWORD *)(a1 + 32);
        v46 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)v47 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)&v47[16] = *(_OWORD *)(a1 + 80);
        v42 = *(_OWORD *)a1;
        v44 = *(_OWORD *)(a1 + 16);
        v9 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 16) = v9;
        v11 = *(_OWORD *)(a2 - 48);
        v10 = *(_OWORD *)(a2 - 32);
        v12 = *(_OWORD *)(a2 - 64);
        *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 - 23);
        *(_OWORD *)(a1 + 48) = v11;
        *(_OWORD *)(a1 + 64) = v10;
        *(_OWORD *)(a1 + 32) = v12;
        v8[4] = *(_OWORD *)v47;
        *(_OWORD *)((char *)v8 + 73) = *(_OWORD *)&v47[9];
        v8[2] = v45;
        v8[3] = v46;
        *v8 = v42;
        v8[1] = v44;
      }
      return result;
    case 3uLL:
      sub_100676B04(a1, a1 + 96, a2 - 96);
      return 1;
    case 4uLL:
      sub_1006770DC(a1, a1 + 96, a1 + 192, a2 - 96);
      return 1;
    case 5uLL:
      sub_100676878(a1, a1 + 96, a1 + 192, a1 + 288, a2 - 96);
      return 1;
    default:
      v13 = a1 + 192;
      sub_100676B04(a1, a1 + 96, a1 + 192);
      v14 = a1 + 288;
      if (a1 + 288 == a2)
        return 1;
      v15 = 0;
      v16 = 0;
      break;
  }
  while (1)
  {
    v17 = *(_DWORD *)(v14 + 56);
    v18 = *(_DWORD *)(v13 + 56);
    if (v17 > v18)
      break;
    if (v17 == v18)
    {
      v19 = *(_DWORD *)(v14 + 24);
      v35 = *(_DWORD *)(v13 + 24);
      if (v19 > v35 || v19 == v35 && *(double *)(v14 + 40) < *(double *)(v13 + 40))
        goto LABEL_9;
    }
LABEL_26:
    v13 = v14;
    v15 += 96;
    v14 += 96;
    if (v14 == a2)
      return 1;
  }
  v19 = *(_DWORD *)(v14 + 24);
LABEL_9:
  v41 = *(_QWORD *)(v14 + 16);
  v40 = *(_OWORD *)v14;
  v38 = *(_QWORD *)(v14 + 28);
  v39 = *(_DWORD *)(v14 + 36);
  v20 = *(double *)(v14 + 40);
  v21 = *(_QWORD *)(v14 + 48);
  *(_OWORD *)v43 = *(_OWORD *)(v14 + 60);
  *(_OWORD *)&v43[16] = *(_OWORD *)(v14 + 76);
  v22 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)v14 = *(_OWORD *)v13;
  *(_OWORD *)(v14 + 16) = v22;
  v23 = *(_OWORD *)(v13 + 32);
  v24 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(v14 + 73) = *(_OWORD *)(v13 + 73);
  v25 = *(_OWORD *)(v13 + 64);
  *(_OWORD *)(v14 + 48) = v24;
  *(_OWORD *)(v14 + 64) = v25;
  v26 = a1;
  *(_OWORD *)(v14 + 32) = v23;
  if (v13 != a1)
  {
    v27 = v15;
    while (1)
    {
      v28 = a1 + v27;
      v29 = *(_DWORD *)(a1 + v27 + 152);
      if (v17 <= v29)
      {
        if (v17 != v29)
          goto LABEL_23;
        v30 = *(_DWORD *)(a1 + v27 + 120);
        if (v19 <= v30)
        {
          if (v19 != v30)
          {
LABEL_23:
            v26 = v13;
            goto LABEL_25;
          }
          if (v20 >= *(double *)(a1 + v27 + 136))
            break;
        }
      }
      v31 = (_OWORD *)(v28 + 192);
      v13 -= 96;
      v32 = (_OWORD *)(v28 + 96);
      v33 = v32[3];
      v31[2] = v32[2];
      v31[3] = v33;
      v31[4] = v32[4];
      *(_OWORD *)((char *)v31 + 73) = *(_OWORD *)((char *)v32 + 73);
      v34 = v32[1];
      *v31 = *v32;
      v31[1] = v34;
      v27 -= 96;
      if (v27 == -192)
      {
        v26 = a1;
        goto LABEL_25;
      }
    }
    v26 = a1 + v27 + 192;
  }
LABEL_25:
  *(_QWORD *)(v26 + 16) = v41;
  *(_OWORD *)v26 = v40;
  *(_DWORD *)(v26 + 24) = v19;
  *(_QWORD *)(v26 + 28) = v38;
  *(_DWORD *)(v26 + 36) = v39;
  *(double *)(v26 + 40) = v20;
  *(_QWORD *)(v26 + 48) = v21;
  *(_DWORD *)(v26 + 56) = v17;
  *(_OWORD *)(v26 + 60) = *(_OWORD *)v43;
  *(_OWORD *)(v26 + 73) = *(_OWORD *)&v43[13];
  if (++v16 != 8)
    goto LABEL_26;
  return v14 + 96 == a2;
}

__n128 sub_1006770DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  int v9;
  int v10;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  int v18;
  int v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  int v26;
  int v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[32];
  _BYTE v46[32];
  _BYTE v47[32];

  result.n128_u64[0] = sub_100676B04(a1, a2, a3).n128_u64[0];
  v9 = *(_DWORD *)(a4 + 56);
  v10 = *(_DWORD *)(a3 + 56);
  if (v9 > v10
    || v9 == v10
    && ((v11 = *(_DWORD *)(a4 + 24), v12 = *(_DWORD *)(a3 + 24), v11 > v12)
     || v11 == v12 && (result.n128_u64[0] = *(_QWORD *)(a4 + 40), result.n128_f64[0] < *(double *)(a3 + 40))))
  {
    v39 = *(_OWORD *)(a3 + 32);
    v42 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)v45 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)&v45[16] = *(_OWORD *)(a3 + 80);
    v33 = *(__n128 *)a3;
    v36 = *(_OWORD *)(a3 + 16);
    v13 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v13;
    v15 = *(_OWORD *)(a4 + 48);
    v14 = *(_OWORD *)(a4 + 64);
    v16 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)(a3 + 73) = *(_OWORD *)(a4 + 73);
    *(_OWORD *)(a3 + 48) = v15;
    *(_OWORD *)(a3 + 64) = v14;
    *(_OWORD *)(a3 + 32) = v16;
    *(_OWORD *)(a4 + 64) = *(_OWORD *)v45;
    *(_OWORD *)(a4 + 73) = *(_OWORD *)&v45[9];
    *(_OWORD *)(a4 + 32) = v39;
    *(_OWORD *)(a4 + 48) = v42;
    result = v33;
    *(__n128 *)a4 = v33;
    *(_OWORD *)(a4 + 16) = v36;
    v17 = *(_DWORD *)(a3 + 56);
    v18 = *(_DWORD *)(a2 + 56);
    if (v17 > v18
      || v17 == v18
      && ((v19 = *(_DWORD *)(a3 + 24), v20 = *(_DWORD *)(a2 + 24), v19 > v20)
       || v19 == v20 && (result.n128_u64[0] = *(_QWORD *)(a3 + 40), result.n128_f64[0] < *(double *)(a2 + 40))))
    {
      v40 = *(_OWORD *)(a2 + 32);
      v43 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)v46 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)&v46[16] = *(_OWORD *)(a2 + 80);
      v34 = *(__n128 *)a2;
      v37 = *(_OWORD *)(a2 + 16);
      v21 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v21;
      v23 = *(_OWORD *)(a3 + 48);
      v22 = *(_OWORD *)(a3 + 64);
      v24 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 73) = *(_OWORD *)(a3 + 73);
      *(_OWORD *)(a2 + 48) = v23;
      *(_OWORD *)(a2 + 64) = v22;
      *(_OWORD *)(a2 + 32) = v24;
      *(_OWORD *)(a3 + 64) = *(_OWORD *)v46;
      *(_OWORD *)(a3 + 73) = *(_OWORD *)&v46[9];
      *(_OWORD *)(a3 + 32) = v40;
      *(_OWORD *)(a3 + 48) = v43;
      result = v34;
      *(__n128 *)a3 = v34;
      *(_OWORD *)(a3 + 16) = v37;
      v25 = *(_DWORD *)(a2 + 56);
      v26 = *(_DWORD *)(a1 + 56);
      if (v25 > v26
        || v25 == v26
        && ((v27 = *(_DWORD *)(a2 + 24), v28 = *(_DWORD *)(a1 + 24), v27 > v28)
         || v27 == v28 && (result.n128_u64[0] = *(_QWORD *)(a2 + 40), result.n128_f64[0] < *(double *)(a1 + 40))))
      {
        v41 = *(_OWORD *)(a1 + 32);
        v44 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)v47 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)&v47[16] = *(_OWORD *)(a1 + 80);
        v35 = *(__n128 *)a1;
        v38 = *(_OWORD *)(a1 + 16);
        v29 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v29;
        v31 = *(_OWORD *)(a2 + 48);
        v30 = *(_OWORD *)(a2 + 64);
        v32 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
        *(_OWORD *)(a1 + 48) = v31;
        *(_OWORD *)(a1 + 64) = v30;
        *(_OWORD *)(a1 + 32) = v32;
        *(_OWORD *)(a2 + 64) = *(_OWORD *)v47;
        *(_OWORD *)(a2 + 73) = *(_OWORD *)&v47[9];
        *(_OWORD *)(a2 + 32) = v41;
        *(_OWORD *)(a2 + 48) = v44;
        result = v35;
        *(__n128 *)a2 = v35;
        *(_OWORD *)(a2 + 16) = v38;
      }
    }
  }
  return result;
}

void sub_1006772C8(uint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  _OWORD *v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  int v27;
  int v28;
  unint64_t v29;
  int v30;
  double *v31;
  double *v32;
  int v33;
  int v34;
  double *v35;
  int v36;
  double *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int v43;
  int v44;
  double *v45;
  int v46;
  double *v47;
  int v48;
  _OWORD *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  BOOL v54;
  int v55;
  int v56;
  double v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  double *v62;
  double *j;
  int v64;
  int v65;
  int v66;
  int v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  unint64_t v72;
  int v73;
  unint64_t v74;
  int v75;
  int v76;
  int v77;
  _OWORD *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  int v83;
  int v84;
  int v85;
  int v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _OWORD *v91;
  BOOL v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  double v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  unint64_t v106;
  uint64_t v107;
  _OWORD *v108;
  int v109;
  int v110;
  __int128 v111;
  __int128 v112;
  int64_t v113;
  int64_t v114;
  int64_t v115;
  uint64_t v116;
  _OWORD *v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  unint64_t v124;
  int v125;
  int v126;
  int v127;
  double v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  _OWORD *v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  int64_t v146;
  uint64_t v147;
  unint64_t v148;
  _OWORD *v149;
  uint64_t v150;
  uint64_t v151;
  int64_t v152;
  int v153;
  int v154;
  int v155;
  int v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  int v169;
  int v170;
  int v171;
  int v172;
  double v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  unint64_t v178;
  unint64_t v179;
  int v180;
  int v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  int v187;
  uint64_t v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  double v194;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  int v198;
  int v199;
  _BYTE v200[32];
  _BYTE v201[32];
  __int128 v202;
  __int128 v203;
  _BYTE v204[32];
  __int128 v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  _BYTE v225[32];
  _BYTE v226[32];
  __int128 v227;
  _BYTE v228[32];
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  _BYTE v244[32];
  _BYTE v245[32];
  _BYTE v246[32];
  _BYTE v247[32];
  _BYTE v248[32];

double sub_100678304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  int v18;
  int v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  int v26;
  int v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  int v34;
  int v35;
  int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int v41;
  int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[32];
  _BYTE v60[32];
  _BYTE v61[32];
  _BYTE v62[32];

  *(_QWORD *)&result = sub_100678B50(a1, a2, a3, a4).n128_u64[0];
  v11 = *(_DWORD *)(a5 + 56);
  v12 = *(_DWORD *)(a4 + 56);
  if (v11 > v12
    || v11 == v12
    && ((v41 = *(_DWORD *)(a5 + 24), v42 = *(_DWORD *)(a4 + 24), v41 > v42)
     || v41 == v42 && (result = *(double *)(a5 + 32), result < *(double *)(a4 + 32))))
  {
    v51 = *(_OWORD *)(a4 + 32);
    v55 = *(_OWORD *)(a4 + 48);
    *(_OWORD *)v59 = *(_OWORD *)(a4 + 64);
    *(_OWORD *)&v59[16] = *(_OWORD *)(a4 + 80);
    v43 = *(_OWORD *)a4;
    v47 = *(_OWORD *)(a4 + 16);
    v13 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v13;
    v15 = *(_OWORD *)(a5 + 48);
    v14 = *(_OWORD *)(a5 + 64);
    v16 = *(_OWORD *)(a5 + 32);
    *(_OWORD *)(a4 + 73) = *(_OWORD *)(a5 + 73);
    *(_OWORD *)(a4 + 48) = v15;
    *(_OWORD *)(a4 + 64) = v14;
    *(_OWORD *)(a4 + 32) = v16;
    *(_OWORD *)(a5 + 64) = *(_OWORD *)v59;
    *(_OWORD *)(a5 + 73) = *(_OWORD *)&v59[9];
    *(_OWORD *)(a5 + 32) = v51;
    *(_OWORD *)(a5 + 48) = v55;
    result = *(double *)&v43;
    *(_OWORD *)a5 = v43;
    *(_OWORD *)(a5 + 16) = v47;
    v17 = *(_DWORD *)(a4 + 56);
    v18 = *(_DWORD *)(a3 + 56);
    if (v17 > v18
      || v17 == v18
      && ((v19 = *(_DWORD *)(a4 + 24), v20 = *(_DWORD *)(a3 + 24), v19 > v20)
       || v19 == v20 && (result = *(double *)(a4 + 32), result < *(double *)(a3 + 32))))
    {
      v52 = *(_OWORD *)(a3 + 32);
      v56 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)v60 = *(_OWORD *)(a3 + 64);
      *(_OWORD *)&v60[16] = *(_OWORD *)(a3 + 80);
      v44 = *(_OWORD *)a3;
      v48 = *(_OWORD *)(a3 + 16);
      v21 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v21;
      v23 = *(_OWORD *)(a4 + 48);
      v22 = *(_OWORD *)(a4 + 64);
      v24 = *(_OWORD *)(a4 + 32);
      *(_OWORD *)(a3 + 73) = *(_OWORD *)(a4 + 73);
      *(_OWORD *)(a3 + 48) = v23;
      *(_OWORD *)(a3 + 64) = v22;
      *(_OWORD *)(a3 + 32) = v24;
      *(_OWORD *)(a4 + 64) = *(_OWORD *)v60;
      *(_OWORD *)(a4 + 73) = *(_OWORD *)&v60[9];
      *(_OWORD *)(a4 + 32) = v52;
      *(_OWORD *)(a4 + 48) = v56;
      result = *(double *)&v44;
      *(_OWORD *)a4 = v44;
      *(_OWORD *)(a4 + 16) = v48;
      v25 = *(_DWORD *)(a3 + 56);
      v26 = *(_DWORD *)(a2 + 56);
      if (v25 > v26
        || v25 == v26
        && ((v27 = *(_DWORD *)(a3 + 24), v28 = *(_DWORD *)(a2 + 24), v27 > v28)
         || v27 == v28 && (result = *(double *)(a3 + 32), result < *(double *)(a2 + 32))))
      {
        v53 = *(_OWORD *)(a2 + 32);
        v57 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)v61 = *(_OWORD *)(a2 + 64);
        *(_OWORD *)&v61[16] = *(_OWORD *)(a2 + 80);
        v45 = *(_OWORD *)a2;
        v49 = *(_OWORD *)(a2 + 16);
        v29 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v29;
        v31 = *(_OWORD *)(a3 + 48);
        v30 = *(_OWORD *)(a3 + 64);
        v32 = *(_OWORD *)(a3 + 32);
        *(_OWORD *)(a2 + 73) = *(_OWORD *)(a3 + 73);
        *(_OWORD *)(a2 + 48) = v31;
        *(_OWORD *)(a2 + 64) = v30;
        *(_OWORD *)(a2 + 32) = v32;
        *(_OWORD *)(a3 + 64) = *(_OWORD *)v61;
        *(_OWORD *)(a3 + 73) = *(_OWORD *)&v61[9];
        *(_OWORD *)(a3 + 32) = v53;
        *(_OWORD *)(a3 + 48) = v57;
        result = *(double *)&v45;
        *(_OWORD *)a3 = v45;
        *(_OWORD *)(a3 + 16) = v49;
        v33 = *(_DWORD *)(a2 + 56);
        v34 = *(_DWORD *)(a1 + 56);
        if (v33 > v34
          || v33 == v34
          && ((v35 = *(_DWORD *)(a2 + 24), v36 = *(_DWORD *)(a1 + 24), v35 > v36)
           || v35 == v36 && (result = *(double *)(a2 + 32), result < *(double *)(a1 + 32))))
        {
          v54 = *(_OWORD *)(a1 + 32);
          v58 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)v62 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)&v62[16] = *(_OWORD *)(a1 + 80);
          v46 = *(_OWORD *)a1;
          v50 = *(_OWORD *)(a1 + 16);
          v37 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v37;
          v39 = *(_OWORD *)(a2 + 48);
          v38 = *(_OWORD *)(a2 + 64);
          v40 = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
          *(_OWORD *)(a1 + 48) = v39;
          *(_OWORD *)(a1 + 64) = v38;
          *(_OWORD *)(a1 + 32) = v40;
          *(_OWORD *)(a2 + 64) = *(_OWORD *)v62;
          *(_OWORD *)(a2 + 73) = *(_OWORD *)&v62[9];
          *(_OWORD *)(a2 + 32) = v54;
          *(_OWORD *)(a2 + 48) = v58;
          result = *(double *)&v46;
          *(_OWORD *)a2 = v46;
          *(_OWORD *)(a2 + 16) = v50;
        }
      }
    }
  }
  return result;
}

__n128 sub_100678590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v10;
  int v11;
  __n128 result;
  int v13;
  int v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  int v21;
  int v22;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  int v35;
  int v36;
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _BYTE v58[32];
  _BYTE v59[32];
  _BYTE v60[32];
  _BYTE v61[32];

  v3 = *(_DWORD *)(a2 + 56);
  v4 = *(_DWORD *)(a1 + 56);
  if (v3 > v4
    || v3 == v4
    && ((v10 = *(_DWORD *)(a2 + 24), v11 = *(_DWORD *)(a1 + 24), v10 > v11)
     || v10 == v11 && (result.n128_u64[0] = *(_QWORD *)(a2 + 32), result.n128_f64[0] < *(double *)(a1 + 32))))
  {
    v5 = *(_DWORD *)(a3 + 56);
    if (v5 > v3
      || v5 == v3
      && ((v28 = *(_DWORD *)(a3 + 24), v29 = *(_DWORD *)(a2 + 24), v28 > v29)
       || v28 == v29 && *(double *)(a3 + 32) < *(double *)(a2 + 32)))
    {
      v50 = *(_OWORD *)(a1 + 32);
      v54 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)v58 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)&v58[16] = *(_OWORD *)(a1 + 80);
      v42 = *(__n128 *)a1;
      v46 = *(_OWORD *)(a1 + 16);
      v6 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)(a3 + 48);
      v7 = *(_OWORD *)(a3 + 64);
      v9 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a1 + 73) = *(_OWORD *)(a3 + 73);
      *(_OWORD *)(a1 + 48) = v8;
      *(_OWORD *)(a1 + 64) = v7;
      *(_OWORD *)(a1 + 32) = v9;
    }
    else
    {
      v53 = *(_OWORD *)(a1 + 32);
      v57 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)v61 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)&v61[16] = *(_OWORD *)(a1 + 80);
      v45 = *(__n128 *)a1;
      v49 = *(_OWORD *)(a1 + 16);
      v30 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v30;
      v32 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 64);
      v33 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
      *(_OWORD *)(a1 + 48) = v32;
      *(_OWORD *)(a1 + 64) = v31;
      *(_OWORD *)(a1 + 32) = v33;
      *(_OWORD *)(a2 + 64) = *(_OWORD *)v61;
      *(_OWORD *)(a2 + 73) = *(_OWORD *)&v61[9];
      *(_OWORD *)(a2 + 32) = v53;
      *(_OWORD *)(a2 + 48) = v57;
      result = v45;
      *(__n128 *)a2 = v45;
      *(_OWORD *)(a2 + 16) = v49;
      v34 = *(_DWORD *)(a3 + 56);
      v35 = *(_DWORD *)(a2 + 56);
      if (v34 <= v35)
      {
        if (v34 != v35)
          return result;
        v36 = *(_DWORD *)(a3 + 24);
        v37 = *(_DWORD *)(a2 + 24);
        if (v36 <= v37)
        {
          if (v36 != v37)
            return result;
          result.n128_u64[0] = *(_QWORD *)(a3 + 32);
          if (result.n128_f64[0] >= *(double *)(a2 + 32))
            return result;
        }
      }
      v50 = *(_OWORD *)(a2 + 32);
      v54 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)v58 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)&v58[16] = *(_OWORD *)(a2 + 80);
      v42 = *(__n128 *)a2;
      v46 = *(_OWORD *)(a2 + 16);
      v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v38;
      v40 = *(_OWORD *)(a3 + 48);
      v39 = *(_OWORD *)(a3 + 64);
      v41 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 73) = *(_OWORD *)(a3 + 73);
      *(_OWORD *)(a2 + 48) = v40;
      *(_OWORD *)(a2 + 64) = v39;
      *(_OWORD *)(a2 + 32) = v41;
    }
    *(_OWORD *)(a3 + 64) = *(_OWORD *)v58;
    *(_OWORD *)(a3 + 73) = *(_OWORD *)&v58[9];
    *(_OWORD *)(a3 + 32) = v50;
    *(_OWORD *)(a3 + 48) = v54;
    result = v42;
    *(__n128 *)a3 = v42;
    *(_OWORD *)(a3 + 16) = v46;
    return result;
  }
  v13 = *(_DWORD *)(a3 + 56);
  if (v13 > v3
    || v13 == v3
    && ((v14 = *(_DWORD *)(a3 + 24), v15 = *(_DWORD *)(a2 + 24), v14 > v15)
     || v14 == v15 && (result.n128_u64[0] = *(_QWORD *)(a3 + 32), result.n128_f64[0] < *(double *)(a2 + 32))))
  {
    v51 = *(_OWORD *)(a2 + 32);
    v55 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)v59 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)&v59[16] = *(_OWORD *)(a2 + 80);
    v43 = *(__n128 *)a2;
    v47 = *(_OWORD *)(a2 + 16);
    v16 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)(a2 + 16) = v16;
    v18 = *(_OWORD *)(a3 + 48);
    v17 = *(_OWORD *)(a3 + 64);
    v19 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a2 + 73) = *(_OWORD *)(a3 + 73);
    *(_OWORD *)(a2 + 48) = v18;
    *(_OWORD *)(a2 + 64) = v17;
    *(_OWORD *)(a2 + 32) = v19;
    *(_OWORD *)(a3 + 64) = *(_OWORD *)v59;
    *(_OWORD *)(a3 + 73) = *(_OWORD *)&v59[9];
    *(_OWORD *)(a3 + 32) = v51;
    *(_OWORD *)(a3 + 48) = v55;
    result = v43;
    *(__n128 *)a3 = v43;
    *(_OWORD *)(a3 + 16) = v47;
    v20 = *(_DWORD *)(a2 + 56);
    v21 = *(_DWORD *)(a1 + 56);
    if (v20 > v21
      || v20 == v21
      && ((v22 = *(_DWORD *)(a2 + 24), v23 = *(_DWORD *)(a1 + 24), v22 > v23)
       || v22 == v23 && (result.n128_u64[0] = *(_QWORD *)(a2 + 32), result.n128_f64[0] < *(double *)(a1 + 32))))
    {
      v52 = *(_OWORD *)(a1 + 32);
      v56 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)v60 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)&v60[16] = *(_OWORD *)(a1 + 80);
      v44 = *(__n128 *)a1;
      v48 = *(_OWORD *)(a1 + 16);
      v24 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v24;
      v26 = *(_OWORD *)(a2 + 48);
      v25 = *(_OWORD *)(a2 + 64);
      v27 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
      *(_OWORD *)(a1 + 48) = v26;
      *(_OWORD *)(a1 + 64) = v25;
      *(_OWORD *)(a1 + 32) = v27;
      *(_OWORD *)(a2 + 64) = *(_OWORD *)v60;
      *(_OWORD *)(a2 + 73) = *(_OWORD *)&v60[9];
      *(_OWORD *)(a2 + 32) = v52;
      *(_OWORD *)(a2 + 48) = v56;
      result = v44;
      *(__n128 *)a2 = v44;
      *(_OWORD *)(a2 + 16) = v48;
    }
  }
  return result;
}

BOOL sub_10067884C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  double v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  _OWORD *v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  int v34;
  int v35;
  int v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  _BYTE v41[32];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[32];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 5);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(_DWORD *)(a2 - 40);
      v7 = *(_DWORD *)(a1 + 56);
      if (v6 > v7
        || v6 == v7
        && ((v35 = *(_DWORD *)(a2 - 72), v36 = *(_DWORD *)(a1 + 24), v35 > v36)
         || v35 == v36 && *(double *)(a2 - 64) < *(double *)(a1 + 32)))
      {
        v8 = (_OWORD *)(a2 - 96);
        v43 = *(_OWORD *)(a1 + 32);
        v44 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)v45 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)&v45[16] = *(_OWORD *)(a1 + 80);
        v40 = *(_OWORD *)a1;
        v42 = *(_OWORD *)(a1 + 16);
        v9 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 16) = v9;
        v11 = *(_OWORD *)(a2 - 48);
        v10 = *(_OWORD *)(a2 - 32);
        v12 = *(_OWORD *)(a2 - 64);
        *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 - 23);
        *(_OWORD *)(a1 + 48) = v11;
        *(_OWORD *)(a1 + 64) = v10;
        *(_OWORD *)(a1 + 32) = v12;
        v8[4] = *(_OWORD *)v45;
        *(_OWORD *)((char *)v8 + 73) = *(_OWORD *)&v45[9];
        v8[2] = v43;
        v8[3] = v44;
        *v8 = v40;
        v8[1] = v42;
      }
      return result;
    case 3uLL:
      sub_100678590(a1, a1 + 96, a2 - 96);
      return 1;
    case 4uLL:
      sub_100678B50(a1, a1 + 96, a1 + 192, a2 - 96);
      return 1;
    case 5uLL:
      sub_100678304(a1, a1 + 96, a1 + 192, a1 + 288, a2 - 96);
      return 1;
    default:
      v13 = a1 + 192;
      sub_100678590(a1, a1 + 96, a1 + 192);
      v14 = a1 + 288;
      if (a1 + 288 == a2)
        return 1;
      v15 = 0;
      v16 = 0;
      break;
  }
  while (1)
  {
    v17 = *(_DWORD *)(v14 + 56);
    v18 = *(_DWORD *)(v13 + 56);
    if (v17 > v18)
      break;
    if (v17 == v18)
    {
      v19 = *(_DWORD *)(v14 + 24);
      v34 = *(_DWORD *)(v13 + 24);
      if (v19 > v34 || v19 == v34 && *(double *)(v14 + 32) < *(double *)(v13 + 32))
        goto LABEL_9;
    }
LABEL_26:
    v13 = v14;
    v15 += 96;
    v14 += 96;
    if (v14 == a2)
      return 1;
  }
  v19 = *(_DWORD *)(v14 + 24);
LABEL_9:
  v39 = *(_QWORD *)(v14 + 16);
  v20 = *(_DWORD *)(v14 + 28);
  v21 = *(double *)(v14 + 32);
  v37 = *(_OWORD *)(v14 + 40);
  v38 = *(_OWORD *)v14;
  *(_OWORD *)v41 = *(_OWORD *)(v14 + 60);
  *(_OWORD *)&v41[16] = *(_OWORD *)(v14 + 76);
  *(_OWORD *)(v14 + 73) = *(_OWORD *)(v13 + 73);
  v22 = *(_OWORD *)(v13 + 64);
  v23 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)v14 = *(_OWORD *)v13;
  *(_OWORD *)(v14 + 16) = v23;
  v24 = *(_OWORD *)(v13 + 48);
  v25 = a1;
  *(_OWORD *)(v14 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(v14 + 48) = v24;
  *(_OWORD *)(v14 + 64) = v22;
  if (v13 != a1)
  {
    v26 = v15;
    while (1)
    {
      v27 = a1 + v26;
      v28 = *(_DWORD *)(a1 + v26 + 152);
      if (v17 <= v28)
      {
        if (v17 != v28)
          goto LABEL_23;
        v29 = *(_DWORD *)(a1 + v26 + 120);
        if (v19 <= v29)
        {
          if (v19 != v29)
          {
LABEL_23:
            v25 = v13;
            goto LABEL_25;
          }
          if (v21 >= *(double *)(a1 + v26 + 128))
            break;
        }
      }
      v30 = (_OWORD *)(v27 + 192);
      v13 -= 96;
      v31 = (_OWORD *)(v27 + 96);
      v32 = v31[3];
      v30[2] = v31[2];
      v30[3] = v32;
      v30[4] = v31[4];
      *(_OWORD *)((char *)v30 + 73) = *(_OWORD *)((char *)v31 + 73);
      v33 = v31[1];
      *v30 = *v31;
      v30[1] = v33;
      v26 -= 96;
      if (v26 == -192)
      {
        v25 = a1;
        goto LABEL_25;
      }
    }
    v25 = a1 + v26 + 192;
  }
LABEL_25:
  *(_OWORD *)v25 = v38;
  *(_QWORD *)(v25 + 16) = v39;
  *(_DWORD *)(v25 + 24) = v19;
  *(_DWORD *)(v25 + 28) = v20;
  *(double *)(v25 + 32) = v21;
  *(_OWORD *)(v25 + 40) = v37;
  *(_DWORD *)(v25 + 56) = v17;
  *(_OWORD *)(v25 + 60) = *(_OWORD *)v41;
  *(_OWORD *)(v25 + 73) = *(_OWORD *)&v41[13];
  if (++v16 != 8)
    goto LABEL_26;
  return v14 + 96 == a2;
}

__n128 sub_100678B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  int v9;
  int v10;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  int v18;
  int v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  int v26;
  int v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[32];
  _BYTE v46[32];
  _BYTE v47[32];

  result.n128_u64[0] = sub_100678590(a1, a2, a3).n128_u64[0];
  v9 = *(_DWORD *)(a4 + 56);
  v10 = *(_DWORD *)(a3 + 56);
  if (v9 > v10
    || v9 == v10
    && ((v11 = *(_DWORD *)(a4 + 24), v12 = *(_DWORD *)(a3 + 24), v11 > v12)
     || v11 == v12 && (result.n128_u64[0] = *(_QWORD *)(a4 + 32), result.n128_f64[0] < *(double *)(a3 + 32))))
  {
    v39 = *(_OWORD *)(a3 + 32);
    v42 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)v45 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)&v45[16] = *(_OWORD *)(a3 + 80);
    v33 = *(__n128 *)a3;
    v36 = *(_OWORD *)(a3 + 16);
    v13 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v13;
    v15 = *(_OWORD *)(a4 + 48);
    v14 = *(_OWORD *)(a4 + 64);
    v16 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)(a3 + 73) = *(_OWORD *)(a4 + 73);
    *(_OWORD *)(a3 + 48) = v15;
    *(_OWORD *)(a3 + 64) = v14;
    *(_OWORD *)(a3 + 32) = v16;
    *(_OWORD *)(a4 + 64) = *(_OWORD *)v45;
    *(_OWORD *)(a4 + 73) = *(_OWORD *)&v45[9];
    *(_OWORD *)(a4 + 32) = v39;
    *(_OWORD *)(a4 + 48) = v42;
    result = v33;
    *(__n128 *)a4 = v33;
    *(_OWORD *)(a4 + 16) = v36;
    v17 = *(_DWORD *)(a3 + 56);
    v18 = *(_DWORD *)(a2 + 56);
    if (v17 > v18
      || v17 == v18
      && ((v19 = *(_DWORD *)(a3 + 24), v20 = *(_DWORD *)(a2 + 24), v19 > v20)
       || v19 == v20 && (result.n128_u64[0] = *(_QWORD *)(a3 + 32), result.n128_f64[0] < *(double *)(a2 + 32))))
    {
      v40 = *(_OWORD *)(a2 + 32);
      v43 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)v46 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)&v46[16] = *(_OWORD *)(a2 + 80);
      v34 = *(__n128 *)a2;
      v37 = *(_OWORD *)(a2 + 16);
      v21 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v21;
      v23 = *(_OWORD *)(a3 + 48);
      v22 = *(_OWORD *)(a3 + 64);
      v24 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 73) = *(_OWORD *)(a3 + 73);
      *(_OWORD *)(a2 + 48) = v23;
      *(_OWORD *)(a2 + 64) = v22;
      *(_OWORD *)(a2 + 32) = v24;
      *(_OWORD *)(a3 + 64) = *(_OWORD *)v46;
      *(_OWORD *)(a3 + 73) = *(_OWORD *)&v46[9];
      *(_OWORD *)(a3 + 32) = v40;
      *(_OWORD *)(a3 + 48) = v43;
      result = v34;
      *(__n128 *)a3 = v34;
      *(_OWORD *)(a3 + 16) = v37;
      v25 = *(_DWORD *)(a2 + 56);
      v26 = *(_DWORD *)(a1 + 56);
      if (v25 > v26
        || v25 == v26
        && ((v27 = *(_DWORD *)(a2 + 24), v28 = *(_DWORD *)(a1 + 24), v27 > v28)
         || v27 == v28 && (result.n128_u64[0] = *(_QWORD *)(a2 + 32), result.n128_f64[0] < *(double *)(a1 + 32))))
      {
        v41 = *(_OWORD *)(a1 + 32);
        v44 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)v47 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)&v47[16] = *(_OWORD *)(a1 + 80);
        v35 = *(__n128 *)a1;
        v38 = *(_OWORD *)(a1 + 16);
        v29 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v29;
        v31 = *(_OWORD *)(a2 + 48);
        v30 = *(_OWORD *)(a2 + 64);
        v32 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
        *(_OWORD *)(a1 + 48) = v31;
        *(_OWORD *)(a1 + 64) = v30;
        *(_OWORD *)(a1 + 32) = v32;
        *(_OWORD *)(a2 + 64) = *(_OWORD *)v47;
        *(_OWORD *)(a2 + 73) = *(_OWORD *)&v47[9];
        *(_OWORD *)(a2 + 32) = v41;
        *(_OWORD *)(a2 + 48) = v44;
        result = v35;
        *(__n128 *)a2 = v35;
        *(_OWORD *)(a2 + 16) = v38;
      }
    }
  }
  return result;
}

void sub_100678D3C()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100678DD8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100678DF0()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100678E7C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_100678F28(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  char v9;
  char v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  int v19;
  int v20;
  id v21;
  os_activity_scope_state_s v23;
  _QWORD v24[5];
  _QWORD v25[5];
  uint8_t buf[8];
  _BYTE v27[10];
  __int16 v28;
  const char *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;

  v8 = sub_101105B78(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = off_10214A508;
  *(_DWORD *)(v8 + 176) = 0;
  *(_QWORD *)(v8 + 208) = 0;
  *(_QWORD *)(v8 + 216) = 0;
  *(_QWORD *)(v8 + 184) = 0;
  *(_QWORD *)(v8 + 224) = 0x7FEFFFFFFFFFFFFFLL;
  *(_BYTE *)(v8 + 233) = 0;
  *(_OWORD *)(v8 + 240) = 0u;
  *(_OWORD *)(v8 + 256) = 0u;
  *(_OWORD *)(v8 + 272) = xmmword_101BB8EE0;
  *(_QWORD *)(v8 + 288) = 0xC069000000000000;
  sub_1001E4804(buf);
  v9 = sub_1001E4874(*(uint64_t *)buf, "ForceMapMatching", (BOOL *)(a1 + 232));
  v10 = v9;
  v11 = *(std::__shared_weak_count **)v27;
  if (*(_QWORD *)v27)
  {
    v12 = (unint64_t *)(*(_QWORD *)v27 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if ((v10 & 1) != 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  if ((v9 & 1) == 0)
LABEL_6:
    *(_BYTE *)(a1 + 232) = 0;
LABEL_7:
  v14 = objc_msgSend(objc_msgSend(a4, "objectForKey:", CFSTR("config")), "integerValue");
  if (v14 - 1 >= 4 && v14 != 0x7FFFFFFF)
    v14 = 0;
  *(_DWORD *)(a1 + 176) = v14;
  v15 = *(_QWORD *)(a1 + 24);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_100679374;
  v25[3] = &unk_10214A578;
  v25[4] = a1;
  sub_1007C9E5C(v15, (uint64_t)v25);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_1006795E0;
  v24[3] = &unk_102131FE8;
  v24[4] = a1;
  AnalyticsSendEventLazy(CFSTR("com.apple.locationd.locationupdates.configuration"), v24);
  v16 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonLocationUpdaterLive(ctor)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v16, &v23);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10214A638);
  v17 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v18 = *(_QWORD *)(a1 + 16);
    v19 = *(_DWORD *)(a1 + 176);
    v20 = *(unsigned __int8 *)(a1 + 232);
    *(_DWORD *)buf = 68290306;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v27 = 2082;
    *(_QWORD *)&v27[2] = "";
    v28 = 2082;
    v29 = "activity";
    v30 = 2114;
    v31 = v18;
    v32 = 2050;
    v33 = a1;
    v34 = 1026;
    v35 = v19;
    v36 = 1026;
    v37 = v20;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLDaemonLocationUpdaterLive(ctor)\", \"event\":%{public, location:escape_only}s, \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"LiveUpdateConfiguration\":%{public}d, \"fForceMapMatching\":%{public}hhd}", buf, 0x3Cu);
  }
  sub_1006796B0(a1);
  if (*(_DWORD *)(a1 + 176) != 4)
    sub_100239888();
  *(_QWORD *)(a1 + 240) = objc_alloc_init(CLDaemonLocationUpdaterLiveAdapter);
  v21 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLStreamingAwareLocationProvider"));
  *(_QWORD *)(a1 + 248) = v21;
  objc_msgSend(v21, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 240), objc_msgSend(*(id *)(a1 + 32), "silo"));
  *(_QWORD *)(a1 + 192) = sub_1006799D4;
  *(_QWORD *)(a1 + 200) = a1;
  *(_DWORD *)(a1 + 236) = 48;
  sub_100679BAC(a1, 0);
  os_activity_scope_leave(&v23);
  return a1;
}

void sub_1006792EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, os_activity_scope_state_s a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;
  id **v21;
  id **v22;
  uint64_t v24;
  uint64_t v25;

  os_activity_scope_leave(&a9);
  v24 = *(_QWORD *)(v20 + 256);
  *(_QWORD *)(v20 + 256) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  sub_10067B094(v22, 0);
  sub_10067B058(v21, 0);
  v25 = *(_QWORD *)(v20 + 184);
  *(_QWORD *)(v20 + 184) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  sub_10110619C(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_100679374(uint64_t a1, void *lpsrc)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t result;
  NSObject *v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;

  v3 = *(_QWORD *)(a1 + 32);
  if (lpsrc)
  else
    v4 = 0;
  if ((*(unsigned int (**)(void *))(*(_QWORD *)lpsrc + 24))(lpsrc) != 1 || v4[44] != *(_DWORD *)(v3 + 176))
    return 0;
  result = (uint64_t)objc_msgSend(*(id *)(v3 + 16), "isEqual:", sub_100026CC8((uint64_t)lpsrc));
  if ((_DWORD)result)
  {
    *(_QWORD *)(v3 + 272) = *((_QWORD *)v4 + 34);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10214A618);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = (*(uint64_t (**)(void *))(*(_QWORD *)lpsrc + 24))(lpsrc);
      v8 = *(_QWORD *)(v3 + 16);
      v12 = 68289794;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 1026;
      v17 = v7;
      v18 = 2114;
      v19 = v8;
      v20 = 2050;
      v21 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luLive consumeMatchingButterfly\", \"dicType\":%{public}d, \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v12, 0x2Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10214A618);
    }
    v9 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v10 = (*(uint64_t (**)(void *))(*(_QWORD *)lpsrc + 24))(lpsrc);
      v11 = *(_QWORD *)(v3 + 16);
      v12 = 68289794;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 1026;
      v17 = v10;
      v18 = 2114;
      v19 = v11;
      v20 = 2050;
      v21 = v3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#luLive consumeMatchingButterfly", "{\"msg%{public}.0s\":\"#luLive consumeMatchingButterfly\", \"dicType\":%{public}d, \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v12, 0x2Cu);
    }
    return 1;
  }
  return result;
}

NSDictionary *sub_1006795E0(uint64_t a1)
{
  uint64_t v1;
  const __CFString *v2;
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;
  _QWORD v7[3];
  _QWORD v8[3];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (const __CFString *)objc_msgSend(*(id *)(v1 + 16), "clientAnchorWithType");
  if (v2)
    v3 = v2;
  else
    v3 = &stru_1021D8FB8;
  v4 = (const __CFString *)objc_msgSend(*(id *)(v1 + 16), "subIdentityIdWithType");
  if (v4)
    v5 = v4;
  else
    v5 = &stru_1021D8FB8;
  v7[0] = CFSTR("Anchor");
  v7[1] = CFSTR("SubIdentity");
  v8[0] = v3;
  v8[1] = v5;
  v7[2] = CFSTR("LiveConfigIndex");
  v8[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 176));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v8, v7, 3);
}

void sub_1006796B0(uint64_t a1)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;

  *(_QWORD *)(a1 + 264) = 0x4056800000000000;
  v2 = *(_DWORD *)(a1 + 176);
  if ((v2 - 1) >= 2)
  {
    if (v2 != 4)
      goto LABEL_6;
    v3 = 0x417E133800000000;
  }
  else
  {
    v3 = 0x407E000000000000;
  }
  *(_QWORD *)(a1 + 264) = v3;
LABEL_6:
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10214A618);
  v4 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_DWORD *)(a1 + 176);
    v7 = *(_QWORD *)(a1 + 264);
    v8[0] = 68290050;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2114;
    v12 = v5;
    v13 = 2050;
    v14 = a1;
    v15 = 1026;
    v16 = v6;
    v17 = 2050;
    v18 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luLive stationary duration threshold\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"LiveUpdateConfiguration\":%{public}d, \"fStationaryDurationThreshold\":\"%{public}f\"}", (uint8_t *)v8, 0x36u);
  }
}

void sub_1006797FC(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLDaemonLocationUpdaterLive::onMotionStateNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214A658);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonLocationUpdaterLive::onMotionStateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214A658);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonLocationUpdaterLive::onMotionStateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10067C5A8(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1006799B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1006799D4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLDaemonLocationUpdaterLive::onLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214A658);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonLocationUpdaterLive::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214A658);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonLocationUpdaterLive::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10067BE74(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100679B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100679BAC(uint64_t a1, int a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  int v19;
  void *__p;
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  _BYTE v26[14];
  __int16 v27;
  int v28;

  v4 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_10067B058((id **)(a1 + 208), 0);
  sub_10067B094((id **)(a1 + 216), 0);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10214A618);
  v5 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 16);
    __p = (void *)68289538;
    v21 = 2082;
    v22 = "";
    v23 = 2114;
    v24 = v6;
    v25 = 2050;
    *(_QWORD *)v26 = a1;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luLive manageSubscription releaseAccuracyEnablementAssertion\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\"}", (uint8_t *)&__p, 0x26u);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10214A618);
  }
  v7 = qword_1022A01D8;
  if (os_signpost_enabled((os_log_t)qword_1022A01D8))
  {
    v8 = *(_QWORD *)(a1 + 16);
    __p = (void *)68289538;
    v21 = 2082;
    v22 = "";
    v23 = 2114;
    v24 = v8;
    v25 = 2050;
    *(_QWORD *)v26 = a1;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#luLive manageSubscription releaseAccuracyEnablementAssertion", "{\"msg%{public}.0s\":\"#luLive manageSubscription releaseAccuracyEnablementAssertion\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\"}", (uint8_t *)&__p, 0x26u);
  }
  objc_msgSend(*(id *)(a1 + 248), "releaseAccuracyEnablementAssertionForClient:", *(_QWORD *)(a1 + 240));
  if (sub_1011085C4(a1))
    sub_101108720(a1);
  sub_101108804((id *)a1);
  if (objc_msgSend(*(id *)(a1 + 40), "isAuthorizedForServiceTypeMask:", 524304) && (a2 & 1) == 0)
  {
    *(_BYTE *)(a1 + 233) = 1;
    v9 = objc_msgSend(*(id *)(a1 + 40), "isAuthorizedForServiceType:", 12);
    v10 = *(_DWORD *)(a1 + 176);
    if (v9)
    {
      if (v10 != 4)
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 256) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 256) + 8), 1, 0);
      sub_1001B7C9C();
    }
    if (v10 != 4)
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 256) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 256) + 8), 1);
    sub_1001B7BB8();
  }
  *(_BYTE *)(a1 + 233) = 0;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = sub_100026CC8(a1);
  sub_1001A6AC4(v11, v12, 0);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10214A618);
  v13 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *(_QWORD *)(a1 + 16);
    __p = (void *)68289794;
    v21 = 2082;
    v22 = "";
    v23 = 2114;
    v24 = v14;
    v25 = 2050;
    *(_QWORD *)v26 = a1;
    *(_WORD *)&v26[8] = 1026;
    *(_DWORD *)&v26[10] = a2;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luLive skip starting location-updates\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"lapseSubscriptionDueToStationary\":%{public}hhd}", (uint8_t *)&__p, 0x2Cu);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10214A618);
  }
  v15 = qword_1022A01D8;
  if (os_signpost_enabled((os_log_t)qword_1022A01D8))
  {
    v16 = *(_QWORD *)(a1 + 16);
    __p = (void *)68289794;
    v21 = 2082;
    v22 = "";
    v23 = 2114;
    v24 = v16;
    v25 = 2050;
    *(_QWORD *)v26 = a1;
    *(_WORD *)&v26[8] = 1026;
    *(_DWORD *)&v26[10] = a2;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#luLive skip starting location-updates", "{\"msg%{public}.0s\":\"#luLive skip starting location-updates\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"lapseSubscriptionDueToStationary\":%{public}hhd}", (uint8_t *)&__p, 0x2Cu);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10214A618);
  }
  v17 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v18 = *(_QWORD *)(a1 + 16);
    v19 = *(_DWORD *)(a1 + 176);
    __p = (void *)68290050;
    v21 = 2082;
    v22 = "";
    v23 = 2114;
    v24 = v18;
    v25 = 1026;
    *(_DWORD *)v26 = v19;
    *(_WORD *)&v26[4] = 2050;
    *(_QWORD *)&v26[6] = a1;
    v27 = 1026;
    v28 = a2;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pwrlog not authorized for locations; stopping liveUpdates if started\", \"ClientKeyPath\":"
      "%{public, location:escape_only}@, \"LiveUpdateConfiguration\":%{public}d, \"self\":\"%{public}p\", \"lapseSubscrip"
      "tionDueToStationary\":%{public}hhd}",
      (uint8_t *)&__p,
      0x32u);
  }
  sub_10110883C((_QWORD *)a1);
}

void sub_10067A98C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_10067A9D8(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_10214A508;
  objc_msgSend(*(id *)(a1 + 248), "releaseAccuracyEnablementAssertionForClient:", *(_QWORD *)(a1 + 240));

  *(_QWORD *)(a1 + 248) = 0;
  objc_msgSend(*(id *)(a1 + 240), "invalidate");

  *(_QWORD *)(a1 + 240) = 0;
  sub_101106508(a1);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  sub_1011078A4(a1, v2);
  v3 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_10067B094((id **)(a1 + 216), 0);
  sub_10067B058((id **)(a1 + 208), 0);
  v4 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return sub_10110619C(a1);
}

void sub_10067AAA4(uint64_t a1)
{
  sub_10067A9D8(a1);
  operator delete();
}

void sub_10067AAC8(uint64_t a1, CLConnectionMessage **a2)
{
  _QWORD *v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;

  v4 = (_QWORD *)CLConnectionMessage::name(*a2);
  v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 44)
      goto LABEL_7;
    v4 = (_QWORD *)*v4;
  }
  else if (v5 != 44)
  {
    goto LABEL_7;
  }
  if (!memcmp(v4, "kCLConnectionMessageDestroyUponDisconnection", 0x2CuLL))
  {
    *(_BYTE *)(a1 + 48) = 1;
    return;
  }
LABEL_7:
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10214A638);
  v6 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 16);
    v8 = CLConnectionMessage::name(*a2);
    v9 = *(char *)(v8 + 23) >= 0 ? (uint64_t *)v8 : *(uint64_t **)v8;
    v14 = 68289794;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2114;
    v19 = v7;
    v20 = 2050;
    v21 = a1;
    v22 = 2082;
    v23 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning #luLive received unhandled message\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"message\":%{public, location:escape_only}s}", (uint8_t *)&v14, 0x30u);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10214A638);
  }
  v10 = qword_1022A01C8;
  if (os_signpost_enabled((os_log_t)qword_1022A01C8))
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = (uint64_t *)CLConnectionMessage::name(*a2);
    if (*((char *)v12 + 23) >= 0)
      v13 = v12;
    else
      v13 = (uint64_t *)*v12;
    v14 = 68289794;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2114;
    v19 = v11;
    v20 = 2050;
    v21 = a1;
    v22 = 2082;
    v23 = v13;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Warning #luLive received unhandled message", "{\"msg%{public}.0s\":\"#Warning #luLive received unhandled message\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"message\":%{public, location:escape_only}s}", (uint8_t *)&v14, 0x30u);
  }
}

void sub_10067AD0C(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  uint64_t v8;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10214A618);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    objc_msgSend(*(id *)(a1 + 40), "registrationResult");
    v3 = objc_msgSend(*(id *)(a1 + 40), "registrationResult");
    v4[0] = 68289282;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    v7 = 2050;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#luLive updateAuthContext change\", \"RegistrationResult\":%{public, location:CLClientRegistrationResult}lld}", (uint8_t *)v4, 0x1Cu);
  }
  sub_100679BAC(a1, 0);
}

uint64_t sub_10067AE10(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

NSDictionary *sub_10067AE18(uint64_t a1)
{
  NSNumber *v2;
  _QWORD v4[2];
  _QWORD v5[2];

  v4[0] = CFSTR("config");
  v2 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 176));
  v4[1] = CFSTR("SDKAtLeast2024");
  v5[0] = v2;
  v5[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 80));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 2);
}

uint64_t sub_10067AEB8()
{
  return 1;
}

uint64_t sub_10067AEC0()
{
  return 12415;
}

uint64_t sub_10067AEC8(uint64_t a1)
{
  int v1;
  unsigned int v3;

  v1 = *(_DWORD *)(a1 + 176);
  if (v1 > 3)
  {
    if (v1 == 0x7FFFFFFF)
      v3 = 5;
    else
      v3 = 48;
    if (v1 == 4)
      return 29;
    else
      return v3;
  }
  else if ((v1 - 1) >= 2)
  {
    if (v1 == 3)
      return 28;
    else
      return 48;
  }
  else if (objc_msgSend(*(id *)(a1 + 40), "inUseLevelIsAtLeast:", 5))
  {
    return 35;
  }
  else
  {
    return 48;
  }
}

uint64_t sub_10067AF40(uint64_t a1)
{
  unsigned int v2;

  v2 = *(_DWORD *)(a1 + 176);
  if (v2 > 4)
  {
    if (v2 != 0x7FFFFFFF)
      return 17;
    goto LABEL_6;
  }
  if (((1 << v2) & 0xB) == 0)
  {
LABEL_6:
    if (!objc_msgSend(*(id *)(a1 + 40), "isAuthorizedForServiceType:", 12) || !*(_BYTE *)(a1 + 232))
      return 48;
    return 17;
  }
  if (objc_msgSend(*(id *)(a1 + 40), "isAuthorizedForServiceType:", 12))
    return 17;
  return 48;
}

uint64_t sub_10067AFC0(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v3;
  uint64_t v4;

  if (*(_BYTE *)(a1 + 233))
    return 0;
  v3 = objc_msgSend(*(id *)(a1 + 40), "diagnosticMask");
  if ((int)objc_msgSend(*(id *)(a1 + 40), "inUseLevel") >= 1)
    v1 = v3 & 3;
  else
    v1 = v3 & 3 | 0x10;
  v4 = v1 | 0x1000;
  if (objc_msgSend(*(id *)(a1 + 40), "isAuthorizedForServiceTypeMask:", 16))
    v1 |= 0x1000uLL;
  if ((objc_msgSend(*(id *)(a1 + 40), "isAuthorizedForServiceTypeMask:", 0x100000) & 1) == 0
    && objc_msgSend(*(id *)(a1 + 40), "transientAwareRegistrationResult") == 4)
  {
    return v4;
  }
  return v1;
}

id *sub_10067B058(id **a1, id *a2)
{
  id *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10067CEB8(result);
    operator delete();
  }
  return result;
}

id *sub_10067B094(id **a1, id *a2)
{
  id *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10067CEF4(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10067B0D0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;

  *(int64x2_t *)(a2 + 8) = vdupq_n_s64(0x7FF0000000000000uLL);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 27) = 0;
  v2 = *(_DWORD *)(result + 236);
  *(_BYTE *)(a2 + 29) = v2 == 5;
  *(_BYTE *)a2 = v2 != 48;
  if (v2 != 48)
    *(_DWORD *)(a2 + 24) = v2;
  return result;
}

void sub_10067B110(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t *p_shared_weak_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD v31[9];
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  _OWORD v35[8];
  _OWORD v36[2];
  _QWORD v37[2];
  uint64_t (*v38)(uint64_t);
  void *v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  void *__p;
  char v45;
  std::__shared_weak_count *v46;
  id v47;
  int v48;
  uint64_t v49;
  char v50;
  _OWORD v51[8];
  _OWORD v52[35];
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  void *v55;
  char v56;
  std::__shared_weak_count *v57;
  id v58;

  sub_10011D234((uint64_t)v51, a2);
  v5 = *(_QWORD *)(a1 + 224);
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3321888768;
  v38 = sub_10067B4D4;
  v39 = &unk_10214A598;
  v40 = a1;
  sub_10011D234((uint64_t)&v41, (uint64_t)v51);
  v48 = 0x1000000;
  v49 = v5;
  v50 = a3;
  if (objc_msgSend(*(id *)(a1 + 40), "isNonProvisionallyAuthorizedForServiceTypeMask:", 524304))
  {
    v38((uint64_t)v37);
  }
  else
  {
    v6 = objc_msgSend(*(id *)(a1 + 16), "legacyClientKey");
    v7 = objc_alloc((Class)CLLocation);
    v35[6] = v51[6];
    v35[7] = v51[7];
    v36[0] = v52[0];
    *(_OWORD *)((char *)v36 + 12) = *(_OWORD *)((char *)v52 + 12);
    v35[2] = v51[2];
    v35[3] = v51[3];
    v35[4] = v51[4];
    v35[5] = v51[5];
    v35[0] = v51[0];
    v35[1] = v51[1];
    v8 = objc_msgSend(v7, "initWithClientLocation:", v35);
    v9 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:forClient:", CFSTR("CLClientManager"), CFSTR("CLClientManager"));
    v10 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLApplicationLifecycleManager"));
    sub_10052D218(a1 + 56, &v33);
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3321888768;
    v31[2] = sub_10067BAD8;
    v31[3] = &unk_10214A5D0;
    v31[7] = a1;
    v31[8] = v33;
    v32 = v34;
    if (v34)
    {
      p_shared_weak_owners = &v34->__shared_weak_owners_;
      do
        v12 = __ldxr((unint64_t *)p_shared_weak_owners);
      while (__stxr(v12 + 1, (unint64_t *)p_shared_weak_owners));
    }
    v31[5] = v10;
    v31[6] = v37;
    v31[4] = v6;
    objc_msgSend(v9, "handleProvisionalIntermediationForService:forClientKey:at:withReply:", 4, v6, v8, v31);
    if (v32)
      std::__shared_weak_count::__release_weak(v32);
    if (v34)
      std::__shared_weak_count::__release_weak(v34);
  }

  v13 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v45 < 0)
    operator delete(__p);
  v16 = v43;
  if (v43)
  {
    v17 = (unint64_t *)&v43->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v42;
  if (v42)
  {
    v20 = (unint64_t *)&v42->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  v22 = v57;
  if (v57)
  {
    v23 = (unint64_t *)&v57->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v56 < 0)
    operator delete(v55);
  v25 = v54;
  if (v54)
  {
    v26 = (unint64_t *)&v54->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v53;
  if (v53)
  {
    v29 = (unint64_t *)&v53->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_10067B474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20)
{
  uint64_t v20;

  if (a18)
    std::__shared_weak_count::__release_weak(a18);
  if (a20)
    std::__shared_weak_count::__release_weak(a20);
  sub_1004B4F0C(v20);
  sub_1004B4F0C((uint64_t)&STACK[0x738]);
  _Unwind_Resume(a1);
}

uint64_t sub_10067B4D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  double v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  uint8_t v32[23];
  uint8_t buf[8];
  _BYTE v34[10];
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  uint64_t v44;

  v2 = *(_QWORD *)(a1 + 32);
  sub_100119F3C(v32);
  v3 = a1 + 40;
  v4 = sub_10011ADE0((UInt8 *)(a1 + 40), (uint64_t)v32, a1 + 1568);
  if (v4)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10214A638);
    v5 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)(v2 + 16);
      *(_DWORD *)buf = 68290307;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v34 = 2082;
      *(_QWORD *)&v34[2] = "";
      v35 = 2114;
      v36 = v6;
      v37 = 2050;
      v38 = v2;
      v39 = 1026;
      v40 = v4;
      v41 = 1040;
      v42 = 156;
      v43 = 2097;
      v44 = a1 + 40;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luLive sending location\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"locationCountAfterSerialization\":%{public}d, \"location\":%{private, location:CLClientLocation}.*P}", buf, 0x3Cu);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10214A638);
    }
    v7 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      v8 = *(_QWORD *)(v2 + 16);
      *(_DWORD *)buf = 68290307;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v34 = 2082;
      *(_QWORD *)&v34[2] = "";
      v35 = 2114;
      v36 = v8;
      v37 = 2050;
      v38 = v2;
      v39 = 1026;
      v40 = v4;
      v41 = 1040;
      v42 = 156;
      v43 = 2097;
      v44 = a1 + 40;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#luLive sending location", "{\"msg%{public}.0s\":\"#luLive sending location\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"locationCountAfterSerialization\":%{public}d, \"location\":%{private, location:CLClientLocation}.*P}", buf, 0x3Cu);
    }
    if (v4 == 1)
    {
      v9 = objc_msgSend(*(id *)(v2 + 40), "diagnosticMask");
      v10 = *(unsigned __int8 *)(a1 + 1584);
      *(_DWORD *)buf = (v9 | (8 * (v10 != 0))) & (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2) & 0xFFFFFFFB;
      sub_10011B4E4((uint64_t)v32, "kCLConnectionMessageDiagnosticsKey", buf);
      *(_QWORD *)buf = 0;
      *(_QWORD *)v34 = 0;
      v31 = sub_10011A5AC((uint64_t)v32);
      if (*(_DWORD *)(a1 + 136) == 12)
      {
        sub_10067CFBC("kCLConnectionMessageCompensatedLocation", &v31, &v29);
        v12 = v29;
        v11 = v30;
        *(_QWORD *)buf = v29;
        *(_QWORD *)v34 = v30;
        v13 = 0.0;
      }
      else
      {
        v13 = *(double *)(a1 + 128);
        sub_10067D01C("kCLConnectionMessageLocation", &v31, &v29);
        v12 = v29;
        v11 = v30;
        *(_QWORD *)buf = v29;
        *(_QWORD *)v34 = v30;
      }
      v27 = v12;
      v28 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
      }
      sub_101106984(v2, (uint64_t)&v27, 16, 0, v13);
      v20 = v28;
      if (v28)
      {
        v21 = (unint64_t *)&v28->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = *(std::__shared_weak_count **)v34;
      if (*(_QWORD *)v34)
      {
        v24 = (unint64_t *)(*(_QWORD *)v34 + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      return sub_10011A5A8(v32);
    }
    sub_101903AE0();
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/DaemonIdentifiableClients/CLDaemonLocationUpdaterLive.mm", 520, "deliverLocationToClient_block_invoke");
    __break(1u);
  }
  else if (qword_1022A01C0 == -1)
  {
    goto LABEL_13;
  }
  dispatch_once(&qword_1022A01C0, &stru_10214A638);
LABEL_13:
  v14 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v15 = *(_QWORD *)(v2 + 16);
    *(_DWORD *)buf = 68290307;
    *(_WORD *)v34 = 2082;
    *(_DWORD *)&buf[4] = 0;
    *(_QWORD *)&v34[2] = "";
    v35 = 2114;
    v36 = v15;
    v37 = 2050;
    v38 = v2;
    v39 = 1026;
    v40 = 0;
    v41 = 1040;
    v42 = 156;
    v43 = 2097;
    v44 = v3;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luLive locationData does not have any entries\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"locationCountAfterSerialization\":%{public}d, \"location\":%{private, location:CLClientLocation}.*P}", buf, 0x3Cu);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10214A638);
  }
  v16 = qword_1022A01C8;
  if (os_signpost_enabled((os_log_t)qword_1022A01C8))
  {
    v17 = *(_QWORD *)(v2 + 16);
    *(_DWORD *)buf = 68290307;
    *(_WORD *)v34 = 2082;
    *(_DWORD *)&buf[4] = 0;
    *(_QWORD *)&v34[2] = "";
    v35 = 2114;
    v36 = v17;
    v37 = 2050;
    v38 = v2;
    v39 = 1026;
    v40 = 0;
    v41 = 1040;
    v42 = 156;
    v43 = 2097;
    v44 = v3;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#luLive locationData does not have any entries", "{\"msg%{public}.0s\":\"#luLive locationData does not have any entries\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"locationCountAfterSerialization\":%{public}d, \"location\":%{private, location:CLClientLocation}.*P}", buf, 0x3Cu);
  }
  return sub_10011A5A8(v32);
}

void sub_10067BA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va1);
  sub_10011A5A8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10067BA80(uint64_t a1, uint64_t a2)
{
  return sub_10011D234(a1 + 40, a2 + 40);
}

uint64_t sub_10067BA8C(uint64_t a1)
{

  sub_100261F44(a1 + 1200);
  if (*(char *)(a1 + 967) < 0)
    operator delete(*(void **)(a1 + 944));
  sub_100261F44(a1 + 840);
  return sub_100261F44(a1 + 720);
}

void sub_10067BAD8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  NSObject *v7;
  id v8;
  NSObject *v9;
  id v10;
  NSObject *v11;
  id v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  id v22;

  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 56);
    v13 = 0;
    v14 = &v13;
    v15 = 0x2020000000;
    v16 = 0;
    v4 = *(_QWORD *)(a1 + 72);
    if (!v4 || *(_QWORD *)(v4 + 8) == -1)
      goto LABEL_6;
    if (sub_1011060EC(v3))
    {
      if (!*((_BYTE *)v14 + 24))
      {
LABEL_6:
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10214A618);
        v5 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          v6 = objc_msgSend(*(id *)(a1 + 32), "UTF8String", v13);
          *(_DWORD *)buf = 68289282;
          v18 = 0;
          v19 = 2082;
          v20 = "";
          v21 = 2082;
          v22 = v6;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luLive ProvisionalIntermediation launching app\", \"Client\":%{public, location:escape_only}s}", buf, 0x1Cu);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_10214A618);
        }
        v7 = qword_1022A01D8;
        if (os_signpost_enabled((os_log_t)qword_1022A01D8))
        {
          v8 = objc_msgSend(*(id *)(a1 + 32), "UTF8String");
          *(_DWORD *)buf = 68289282;
          v18 = 0;
          v19 = 2082;
          v20 = "";
          v21 = 2082;
          v22 = v8;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#luLive ProvisionalIntermediation launching app", "{\"msg%{public}.0s\":\"#luLive ProvisionalIntermediation launching app\", \"Client\":%{public, location:escape_only}s}", buf, 0x1Cu);
        }
        objc_msgSend(*(id *)(a1 + 40), "launchApplication:requiringAuthForServiceMask:", *(_QWORD *)(a1 + 32), 16, v13);
LABEL_23:
        _Block_object_dispose(&v13, 8);
        return;
      }
    }
    else
    {
      *((_BYTE *)v14 + 24) = 1;
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10214A618);
    v9 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = objc_msgSend(*(id *)(a1 + 32), "UTF8String", v13);
      *(_DWORD *)buf = 68289282;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      v21 = 2082;
      v22 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luLive ProvisionalIntermediation delievering location block\", \"Client\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10214A618);
    }
    v11 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v12 = objc_msgSend(*(id *)(a1 + 32), "UTF8String");
      *(_DWORD *)buf = 68289282;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      v21 = 2082;
      v22 = v12;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#luLive ProvisionalIntermediation delievering location block", "{\"msg%{public}.0s\":\"#luLive ProvisionalIntermediation delievering location block\", \"Client\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    goto LABEL_23;
  }
}

void sub_10067BE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10067BE40(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 72) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_10067BE64(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 72);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_10067BE74(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v7;
  double v8;
  NSObject *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  uint64_t v22;
  int v23;
  NSObject *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  id v29;
  uint8_t buf[8];
  _BYTE v31[10];
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  int v37;

  objc_msgSend(*(id *)(a1 + 32), "silo");
  v7 = *a3;
  if (*a3 < 2)
  {
LABEL_4:
    sub_10067C2E0(a1, a4);
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "currentLatchedAbsoluteTimestamp");
    if (v8 - *(double *)(a1 + 272) <= *(double *)(a1 + 264))
    {
      sub_10067B110(a1, a4, 0);
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10214A618);
      v9 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *(_QWORD *)(a1 + 16);
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v31 = 2082;
        *(_QWORD *)&v31[2] = "";
        v32 = 2114;
        v33 = v10;
        v34 = 2050;
        v35 = a1;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luLive sending #stationary true\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\"}", buf, 0x26u);
      }
      sub_10067B110(a1, a4, 1);
      sub_100679BAC(a1, 1);
    }
    return;
  }
  if (v7 == 9)
  {
    v11 = (unint64_t)objc_msgSend(*(id *)(a1 + 40), "diagnosticMask");
    v12 = (v11 & 0xFFFFFFFFFFFFFFDBLL | 0x20) & (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v29 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
    objc_msgSend(v29, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v12), CFSTR("kCLConnectionMessageDiagnosticsKey"));
    sub_10067D07C("kCLConnectionMessageLocationUnavailable", &v29, buf);
    v27 = *(_QWORD *)buf;
    v28 = *(std::__shared_weak_count **)v31;
    if (*(_QWORD *)v31)
    {
      v13 = (unint64_t *)(*(_QWORD *)v31 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    sub_101106984(a1, (uint64_t)&v27, 16, 1, 0.0);
    v15 = v28;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = *(std::__shared_weak_count **)v31;
    if (*(_QWORD *)v31)
    {
      v19 = (unint64_t *)(*(_QWORD *)v31 + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else
  {
    if (v7 == 5)
      goto LABEL_4;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10214A618);
    v21 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v22 = *(_QWORD *)(a1 + 16);
      v23 = *a3;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v31 = 2082;
      *(_QWORD *)&v31[2] = "";
      v32 = 2114;
      v33 = v22;
      v34 = 2050;
      v35 = a1;
      v36 = 1026;
      v37 = v23;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#luLive unkown location notification\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"Notification\":%{public}d}", buf, 0x2Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10214A618);
    }
    v24 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v25 = *(_QWORD *)(a1 + 16);
      v26 = *a3;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v31 = 2082;
      *(_QWORD *)&v31[2] = "";
      v32 = 2114;
      v33 = v25;
      v34 = 2050;
      v35 = a1;
      v36 = 1026;
      v37 = v26;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v24, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#luLive unkown location notification", "{\"msg%{public}.0s\":\"#luLive unkown location notification\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"Notification\":%{public}d}", buf, 0x2Cu);
    }
  }
}

void sub_10067C2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_10067C2E0(uint64_t a1, uint64_t a2)
{
  double v4;
  _OWORD *v5;
  double v6;
  double v7;
  _OWORD *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;

  v4 = *(double *)(a1 + 272);
  if (v4 == 1.79769313e308)
  {
    v5 = (_OWORD *)(a2 + 4);
    v8 = (_OWORD *)(a1 + 280);
LABEL_14:
    *v8 = *v5;
    return;
  }
  if (sub_101107250(*(double *)(a1 + 280), *(double *)(a1 + 288)))
  {
    v5 = (_OWORD *)(a2 + 4);
    v6 = sub_100124100(*(double *)(a1 + 280), *(double *)(a1 + 288), *(double *)(a2 + 4), *(double *)(a2 + 12));
    if (v6 > 20.0)
    {
      objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "currentLatchedAbsoluteTimestamp");
      if (*(double *)(a1 + 272) >= v7)
        v7 = *(double *)(a1 + 272);
      *(double *)(a1 + 272) = v7;
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10214A618);
      v8 = (_OWORD *)(a1 + 280);
      v9 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *(_QWORD *)(a1 + 16);
        v11 = *(_QWORD *)(a1 + 272);
        v12 = *(_QWORD *)(a1 + 280);
        v13 = *(_QWORD *)(a1 + 288);
        v14 = *(_QWORD *)(a2 + 4);
        v15 = *(_QWORD *)(a2 + 12);
        v23 = 68291330;
        v24 = 0;
        v25 = 2082;
        v26 = "";
        v27 = 2114;
        v28 = v10;
        v29 = 2050;
        v30 = a1;
        v31 = 2050;
        v32 = v6;
        v33 = 2050;
        v34 = v4;
        v35 = 2050;
        v36 = v11;
        v37 = 2050;
        v38 = v12;
        v39 = 2050;
        v40 = v13;
        v41 = 2050;
        v42 = v14;
        v43 = 2050;
        v44 = v15;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luLive unmarking #stationary by location-wandering\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"wander\":\"%{public}f\", \"OldTS\":\"%{public}f\", \"NewTS\":\"%{public}f\", \"refLat\":\"%{public}f\", \"refLon\":\"%{public}f\", \"lat\":\"%{public}f\", \"lon\":\"%{public}f\"}", (uint8_t *)&v23, 0x6Cu);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10214A618);
      }
      v16 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        v17 = *(_QWORD *)(a1 + 16);
        v18 = *(_QWORD *)(a1 + 272);
        v19 = *(_QWORD *)(a1 + 280);
        v20 = *(_QWORD *)(a1 + 288);
        v21 = *(_QWORD *)(a2 + 4);
        v22 = *(_QWORD *)(a2 + 12);
        v23 = 68291330;
        v24 = 0;
        v25 = 2082;
        v26 = "";
        v27 = 2114;
        v28 = v17;
        v29 = 2050;
        v30 = a1;
        v31 = 2050;
        v32 = v6;
        v33 = 2050;
        v34 = v4;
        v35 = 2050;
        v36 = v18;
        v37 = 2050;
        v38 = v19;
        v39 = 2050;
        v40 = v20;
        v41 = 2050;
        v42 = v21;
        v43 = 2050;
        v44 = v22;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#luLive unmarking #stationary by location-wandering", "{\"msg%{public}.0s\":\"#luLive unmarking #stationary by location-wandering\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"wander\":\"%{public}f\", \"OldTS\":\"%{public}f\", \"NewTS\":\"%{public}f\", \"refLat\":\"%{public}f\", \"refLon\":\"%{public}f\", \"lat\":\"%{public}f\", \"lon\":\"%{public}f\"}", (uint8_t *)&v23, 0x6Cu);
      }
      goto LABEL_14;
    }
  }
}

void sub_10067C5A8(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  int v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  double v18;
  double v19;
  NSObject *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  NSObject *v28;
  uint32_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  NSObject *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  BOOL v47;
  uint8_t buf[8];
  _BYTE v49[10];
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  int v55;
  __int16 v56;
  double v57;
  __int16 v58;
  uint64_t v59;

  sub_1001E4804(buf);
  v47 = 0;
  v7 = sub_1001E4874(*(uint64_t *)buf, "DisableStationaryTracking", &v47);
  if (v47)
    v8 = v7;
  else
    v8 = 0;
  v9 = *(std::__shared_weak_count **)v49;
  if (!*(_QWORD *)v49)
    goto LABEL_8;
  v10 = (unint64_t *)(*(_QWORD *)v49 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v8)
    {
LABEL_9:
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10214A618);
      v12 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v13 = *(_QWORD *)(a1 + 16);
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v49 = 2082;
        *(_QWORD *)&v49[2] = "";
        v50 = 2114;
        v51 = v13;
        v52 = 2050;
        v53 = a1;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luLive #stationary tracking disbaled by defaults\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\"}", buf, 0x26u);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10214A618);
      }
      v14 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        v15 = *(_QWORD *)(a1 + 16);
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v49 = 2082;
        *(_QWORD *)&v49[2] = "";
        v50 = 2114;
        v51 = v15;
        v52 = 2050;
        v53 = a1;
        v16 = "#luLive #stationary tracking disbaled by defaults";
        v17 = "{\"msg%{public}.0s\":\"#luLive #stationary tracking disbaled by defaults\", \"ClientKeyPath\":%{public, lo"
              "cation:escape_only}@, \"self\":\"%{public}p\"}";
LABEL_36:
        v28 = v14;
        v29 = 38;
        goto LABEL_37;
      }
      return;
    }
  }
  else
  {
LABEL_8:
    if (v8)
      goto LABEL_9;
  }
  objc_msgSend(*(id *)(a1 + 32), "silo");
  if ((objc_msgSend(*(id *)(a1 + 40), "isAuthorizedForServiceType:", 12) & 1) != 0)
  {
    if (*a3 == 1)
    {
      v18 = *(double *)(a1 + 272);
      if ((*a4 - 1) > 1)
      {
        *(_QWORD *)(a1 + 272) = 0x7FEFFFFFFFFFFFFFLL;
        if (v18 != 1.79769313e308)
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_10214A618);
          v39 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
          {
            v40 = *(_QWORD *)(a1 + 16);
            v41 = *a4;
            v42 = *(_QWORD *)(a1 + 272);
            *(_DWORD *)buf = 68290306;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v49 = 2082;
            *(_QWORD *)&v49[2] = "";
            v50 = 2114;
            v51 = v40;
            v52 = 2050;
            v53 = a1;
            v54 = 1026;
            v55 = v41;
            v56 = 2050;
            v57 = v18;
            v58 = 2050;
            v59 = v42;
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luLive motion state non #stationary\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"Type\":%{public}d, \"OldTS\":\"%{public}f\", \"NewTS\":\"%{public}f\"}", buf, 0x40u);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_10214A618);
          }
          v43 = qword_1022A01D8;
          if (os_signpost_enabled((os_log_t)qword_1022A01D8))
          {
            v44 = *(_QWORD *)(a1 + 16);
            v45 = *a4;
            v46 = *(_QWORD *)(a1 + 272);
            *(_DWORD *)buf = 68290306;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v49 = 2082;
            *(_QWORD *)&v49[2] = "";
            v50 = 2114;
            v51 = v44;
            v52 = 2050;
            v53 = a1;
            v54 = 1026;
            v55 = v45;
            v56 = 2050;
            v57 = v18;
            v58 = 2050;
            v59 = v46;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v43, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#luLive motion state non #stationary", "{\"msg%{public}.0s\":\"#luLive motion state non #stationary\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"Type\":%{public}d, \"OldTS\":\"%{public}f\", \"NewTS\":\"%{public}f\"}", buf, 0x40u);
          }
          sub_100679BAC(a1, 0);
        }
      }
      else
      {
        objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "currentLatchedAbsoluteTimestamp");
        if (v19 >= *(double *)(a1 + 272))
          v19 = *(double *)(a1 + 272);
        *(double *)(a1 + 272) = v19;
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10214A618);
        v20 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          v21 = *(_QWORD *)(a1 + 16);
          v22 = *a4;
          v23 = *(_QWORD *)(a1 + 272);
          *(_DWORD *)buf = 68290306;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v49 = 2082;
          *(_QWORD *)&v49[2] = "";
          v50 = 2114;
          v51 = v21;
          v52 = 2050;
          v53 = a1;
          v54 = 1026;
          v55 = v22;
          v56 = 2050;
          v57 = v18;
          v58 = 2050;
          v59 = v23;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luLive motion state #stationary\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"Type\":%{public}d, \"OldTS\":\"%{public}f\", \"NewTS\":\"%{public}f\"}", buf, 0x40u);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_10214A618);
        }
        v24 = qword_1022A01D8;
        if (os_signpost_enabled((os_log_t)qword_1022A01D8))
        {
          v25 = *(_QWORD *)(a1 + 16);
          v26 = *a4;
          v27 = *(_QWORD *)(a1 + 272);
          *(_DWORD *)buf = 68290306;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v49 = 2082;
          *(_QWORD *)&v49[2] = "";
          v50 = 2114;
          v51 = v25;
          v52 = 2050;
          v53 = a1;
          v54 = 1026;
          v55 = v26;
          v56 = 2050;
          v57 = v18;
          v58 = 2050;
          v59 = v27;
          v16 = "#luLive motion state #stationary";
          v17 = "{\"msg%{public}.0s\":\"#luLive motion state #stationary\", \"ClientKeyPath\":%{public, location:escape_o"
                "nly}@, \"self\":\"%{public}p\", \"Type\":%{public}d, \"OldTS\":\"%{public}f\", \"NewTS\":\"%{public}f\"}";
          v28 = v24;
          v29 = 64;
LABEL_37:
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v28, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v16, v17, buf, v29);
        }
      }
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10214A618);
      v33 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v34 = *(_QWORD *)(a1 + 16);
        v35 = *a3;
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v49 = 2082;
        *(_QWORD *)&v49[2] = "";
        v50 = 2114;
        v51 = v34;
        v52 = 2050;
        v53 = a1;
        v54 = 1026;
        v55 = v35;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning #luLive unkown motion state notification\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"Notification\":%{public}d}", buf, 0x2Cu);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10214A618);
      }
      v36 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        v37 = *(_QWORD *)(a1 + 16);
        v38 = *a3;
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v49 = 2082;
        *(_QWORD *)&v49[2] = "";
        v50 = 2114;
        v51 = v37;
        v52 = 2050;
        v53 = a1;
        v54 = 1026;
        v55 = v38;
        v16 = "#Warning #luLive unkown motion state notification";
        v17 = "{\"msg%{public}.0s\":\"#Warning #luLive unkown motion state notification\", \"ClientKeyPath\":%{public, lo"
              "cation:escape_only}@, \"self\":\"%{public}p\", \"Notification\":%{public}d}";
        v28 = v36;
        v29 = 44;
        goto LABEL_37;
      }
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10214A618);
    v30 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v31 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v49 = 2082;
      *(_QWORD *)&v49[2] = "";
      v50 = 2114;
      v51 = v31;
      v52 = 2050;
      v53 = a1;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luLive stationary-tracking skip motion state update - coarse client\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\"}", buf, 0x26u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10214A618);
    }
    v14 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v32 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v49 = 2082;
      *(_QWORD *)&v49[2] = "";
      v50 = 2114;
      v51 = v32;
      v52 = 2050;
      v53 = a1;
      v16 = "#luLive stationary-tracking skip motion state update - coarse client";
      v17 = "{\"msg%{public}.0s\":\"#luLive stationary-tracking skip motion state update - coarse client\", \"ClientKeyPa"
            "th\":%{public, location:escape_only}@, \"self\":\"%{public}p\"}";
      goto LABEL_36;
    }
  }
}

void sub_10067CE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10067CE34(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_10067CE60(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_10067CE8C(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

id *sub_10067CEB8(id *a1)
{
  objc_msgSend(*a1, "removeRhythmicGnssClient:", 0);

  *a1 = 0;
  return a1;
}

id *sub_10067CEF4(id *a1)
{

  *a1 = 0;
  return a1;
}

_QWORD *sub_10067CF24(_QWORD *a1, uint64_t a2)
{
  int v3;
  void **v4;
  CLOSTransaction *v5;
  void **v6;
  void *__p[2];
  char v9;

  *a1 = 0;
  std::operator+<char>(__p, "LocationUpdater:", a2);
  v3 = v9;
  v4 = (void **)__p[0];
  v5 = [CLOSTransaction alloc];
  if (v3 >= 0)
    v6 = __p;
  else
    v6 = v4;
  *a1 = -[CLOSTransaction initWithDescription:](v5, "initWithDescription:", v6);
  if (v9 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_10067CFA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10067CFBC@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_100487B64(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_10067D008(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10067D01C@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_100487B64(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_10067D068(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10067D07C@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_100487B64(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_10067D0C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10067D0DC(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)a1 = off_10214A6F0;
  v6 = *a2;
  *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 4);
  *(_QWORD *)(a1 + 8) = v6;
  if (*((char *)a2 + 39) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 24), (void *)a2[2], a2[3]);
  }
  else
  {
    v7 = *((_OWORD *)a2 + 1);
    *(_QWORD *)(a1 + 40) = a2[4];
    *(_OWORD *)(a1 + 24) = v7;
  }
  *(_QWORD *)(a1 + 48) = a2[5];
  *(_QWORD *)(a1 + 56) = *a3;
  sub_100631F84(a1 + 64, a2);
  sub_100E81598((_QWORD *)(a1 + 200), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 216), 0, 0);
  return a1;
}

void sub_10067D198(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10067D1C4(uint64_t a1)
{
  *(_QWORD *)a1 = off_10214A6F0;
  sub_1006322C0(a1 + 64);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_10067D20C(uint64_t a1)
{
  int v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  NSObject *v7;
  int v8;
  void **v9;
  uint64_t v10;
  NSObject *v11;
  char *v12;
  uint64_t v13;
  int v14;
  void **p_buf;
  char *v16;
  const char *v17;
  _QWORD v18[3];
  _QWORD v19[10];
  char v20;
  uint64_t v21;
  void **buf;
  __int16 v23;
  void **v24;
  char v25;
  _DWORD v26[2];
  __int16 v27;
  void **v28;
  void **v29;
  std::__shared_weak_count *v30;
  char v31;

  if (sub_1000CC4F4(a1 + 64))
  {
    sub_100263E50((uint64_t)v18);
    HIBYTE(v17) = 1;
    sub_1001E4804(&v29);
    v2 = sub_1001E4874((uint64_t)v29, "ClearDatabaseTablesByAge", (BOOL *)&v17 + 7);
    v3 = v2;
    v4 = v30;
    if (!v30)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (v3)
        goto LABEL_7;
    }
    else
    {
LABEL_6:
      if (v2)
      {
LABEL_7:
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10214A738);
        v7 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
        {
          v8 = HIBYTE(v17);
          (*(void (**)(void ***__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v29, a1);
          v9 = v31 >= 0 ? (void **)&v29 : v29;
          LODWORD(buf) = 67109378;
          HIDWORD(buf) = v8;
          v23 = 2080;
          v24 = v9;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning Overriding clear tables by age to %d for %s", (uint8_t *)&buf, 0x12u);
          if (v31 < 0)
            operator delete(v29);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&v29, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_10214A738);
          v13 = qword_1022A02D8;
          v14 = HIBYTE(v17);
          (*(void (**)(void ***__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&buf, a1);
          if (v25 >= 0)
            p_buf = (void **)&buf;
          else
            p_buf = buf;
          v26[0] = 67109378;
          v26[1] = v14;
          v27 = 2080;
          v28 = p_buf;
          LODWORD(v17) = 18;
          v16 = (char *)_os_log_send_and_compose_impl(2, 0, &v29, 1628, &_mh_execute_header, v13, 0, "#Warning Overriding clear tables by age to %d for %s", v26, v17);
          if (v25 < 0)
            operator delete(buf);
          sub_100512490("Generic", 1, 0, 2, "void CLLocationDatabase::prepareStatements()", "%s\n", v16);
          if (v16 != (char *)&v29)
            free(v16);
        }
      }
    }
    if (HIBYTE(v17) && !*(_BYTE *)(a1 + 16) && *(double *)(a1 + 56) > 0.0 && (int)sub_10067D6EC(a1) >= 200001)
      sub_10067D760(a1, a1 + 56);
    *(_QWORD *)((char *)v18
    v18[2] = v10;
    if (v20 < 0)
      operator delete((void *)v19[8]);
    std::streambuf::~streambuf(v19);
    std::ios::~ios(&v21);
    return;
  }
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_10214A718);
  v11 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v29) = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call prepareStatements() without a backing database in CLLocationDatabase!", (uint8_t *)&v29, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v29, 0x65CuLL);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10214A718);
    LOWORD(v18[0]) = 0;
    LODWORD(v17) = 2;
    v12 = (char *)_os_log_send_and_compose_impl(2, 0, &v29, 1628, &_mh_execute_header, off_1022A0288, 2, "#Warning Attempt to call prepareStatements() without a backing database in CLLocationDatabase!", v18, v17);
    sub_100512490("Generic", 1, 0, 2, "void CLLocationDatabase::prepareStatements()", "%s\n", v12);
    if (v12 != (char *)&v29)
      free(v12);
  }
}

void sub_10067D6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10067D6EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *__p[2];
  char v5;

  v1 = a1 + 64;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(__p);
  v2 = sub_10067D7FC(v1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_10067D744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10067D760(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *__p[2];
  char v6;

  v3 = a1 + 64;
  v4 = a1 + 8;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(__p);
  sub_10067F714(a2, v3, v4, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_10067D7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10067D7E4(uint64_t a1)
{
  return sub_10001E638(a1 + 64);
}

uint64_t sub_10067D7EC(uint64_t a1)
{
  return sub_10001E99C(a1 + 64);
}

uint64_t sub_10067D7F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000C8074(a1 + 64, a2);
}

uint64_t sub_10067D7FC(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  size_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  NSObject *v16;
  char *v18;
  void *__p[2];
  char v20;
  uint8_t buf[16];
  uint64_t v22;
  _QWORD v23[8];

  if (sub_1000CC4F4(a1))
  {
    sub_100263E50((uint64_t)buf);
    v4 = sub_100263F7C(&v22, (uint64_t)"SELECT ", 7);
    v5 = strlen("Count");
    v6 = sub_100263F7C(v4, (uint64_t)"Count", v5);
    v7 = sub_100263F7C(v6, (uint64_t)" FROM ", 6);
    v8 = *(char *)(a2 + 23);
    if (v8 >= 0)
      v9 = a2;
    else
      v9 = *(_QWORD *)a2;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a2 + 23);
    else
      v10 = *(_QWORD *)(a2 + 8);
    v11 = sub_100263F7C(v7, v9, v10);
    v12 = strlen("Counts");
    v13 = sub_100263F7C(v11, (uint64_t)"Counts", v12);
    v14 = sub_100263F7C(v13, (uint64_t)" WHERE rowid=", 13);
    std::ostream::operator<<(v14, 1);
    std::stringbuf::str(__p, v23);
    if (v20 >= 0)
      v15 = (char *)__p;
    else
      v15 = (char *)__p[0];
    sub_1000CDA68(a1, v15);
  }
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_10214A718);
  v16 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call getCountFromTriggerTable() without a backing database in CLLocationDatabase!", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10214A718);
    LOWORD(__p[0]) = 0;
    v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_1022A0288, 2, "#Warning Attempt to call getCountFromTriggerTable() without a backing database in CLLocationDatabase!", __p, 2);
    sub_100512490("Generic", 1, 0, 2, "static int CLLocationDatabase::getCountFromTriggerTable(CLSqliteDatabase &, const std::string &)", "%s\n", v18);
    if (v18 != (char *)buf)
      free(v18);
  }
  return 0;
}

void sub_10067DB58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a18);
  _Unwind_Resume(a1);
}

BOOL sub_10067DBAC(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  void **v30;
  uint64_t v31;
  char *v32;
  NSObject *v33;
  const char *v34;
  uint8_t *v35;
  void *__p[2];
  unsigned __int8 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint8_t buf[16];
  uint64_t v58;
  _QWORD v59[8];

  v2 = a1 + 64;
  v3 = sub_1000CC4F4(a1 + 64);
  if (v3)
  {
    v39 = 0xFFFF;
    v41 = 0;
    v40 = 0;
    v42 = xmmword_101BAFC90;
    __asm { FMOV            V0.2D, #-1.0 }
    v43 = _Q0;
    v44 = _Q0;
    v45 = _Q0;
    v46 = 0;
    v48 = 0;
    v49 = 0;
    v47 = 0xBFF0000000000000;
    v50 = 0;
    v51 = 0xBFF0000000000000;
    v52 = 0x7FFFFFFF;
    v54 = 0;
    v55 = 0;
    v53 = 0;
    v56 = 0;
    sub_100263E50((uint64_t)buf);
    v9 = sub_100263F7C(&v58, (uint64_t)"SELECT ", 7);
    v10 = sub_100263F7C(v9, (uint64_t)"Timestamp", 9);
    v11 = sub_100263F7C(v10, (uint64_t)", ", 2);
    v12 = sub_100263F7C(v11, (uint64_t)"Latitude", 8);
    v13 = sub_100263F7C(v12, (uint64_t)", ", 2);
    v14 = sub_100263F7C(v13, (uint64_t)"Longitude", 9);
    v15 = sub_100263F7C(v14, (uint64_t)", ", 2);
    v16 = sub_100263F7C(v15, (uint64_t)"HorizontalAccuracy", 18);
    v17 = sub_100263F7C(v16, (uint64_t)", ", 2);
    v18 = sub_100263F7C(v17, (uint64_t)"Altitude", 8);
    v19 = sub_100263F7C(v18, (uint64_t)", ", 2);
    v20 = sub_100263F7C(v19, (uint64_t)"VerticalAccuracy", 16);
    v21 = sub_100263F7C(v20, (uint64_t)", ", 2);
    v22 = sub_100263F7C(v21, (uint64_t)"Speed", 5);
    v23 = sub_100263F7C(v22, (uint64_t)", ", 2);
    v24 = sub_100263F7C(v23, (uint64_t)"Course", 6);
    v25 = sub_100263F7C(v24, (uint64_t)", ", 2);
    v26 = sub_100263F7C(v25, (uint64_t)"Confidence", 10);
    v27 = sub_100263F7C(v26, (uint64_t)", ", 2);
    v28 = sub_100263F7C(v27, (uint64_t)"ROWID", 5);
    v29 = sub_100263F7C(v28, (uint64_t)" FROM ", 6);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
    if ((v38 & 0x80u) == 0)
      v30 = __p;
    else
      v30 = (void **)__p[0];
    if ((v38 & 0x80u) == 0)
      v31 = v38;
    else
      v31 = (uint64_t)__p[1];
    sub_100263F7C(v29, (uint64_t)v30, v31);
    if ((char)v38 < 0)
      operator delete(__p[0]);
    std::stringbuf::str(__p, v59);
    if ((v38 & 0x80u) == 0)
      v32 = (char *)__p;
    else
      v32 = (char *)__p[0];
    sub_1000CDA68(v2, v32);
  }
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_10214A718);
  v33 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call getLocations() without a backing database in CLLocationDatabase!", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10214A718);
    LOWORD(v39) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_1022A0288, 2, "#Warning Attempt to call getLocations() without a backing database in CLLocationDatabase!", &v39, 2);
    v35 = (uint8_t *)v34;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationDatabase::getLocations(OnLocation) const", "%s\n", v34);
    if (v35 != buf)
      free(v35);
  }
  return v3;
}

void sub_10067E12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (a17 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a38);
  _Unwind_Resume(a1);
}

uint64_t sub_10067E190(_QWORD *a1, sqlite3_int64 *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  BOOL v35;
  NSObject *v36;
  uint64_t v37;
  sqlite3_stmt *v38;
  sqlite3_stmt *v39;
  sqlite3_stmt *v40;
  sqlite3_stmt *v41;
  sqlite3_stmt *v42;
  sqlite3_stmt *v43;
  sqlite3_stmt *v44;
  sqlite3_stmt *v45;
  sqlite3_stmt *v46;
  sqlite3_stmt *v47;
  sqlite3_stmt *v48;
  int v49;
  uint64_t v50;
  NSObject *v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void (__cdecl **v62)(std::stringbuf *__hidden);
  uint64_t v63;
  char *v64;
  NSObject *v65;
  _BYTE *v66;
  uint64_t v67;
  _BYTE *v68;
  char *v69;
  const char *v70;
  double v71;
  uint64_t v72;
  _DWORD v73[2];
  __int16 v74;
  _BYTE *v75;
  _BYTE buf[24];
  void (__cdecl **v77)(std::stringbuf *__hidden);
  __int16 v78;
  uint64_t v79;
  void *v80;
  char v81;
  uint64_t v82;
  _BYTE __p[22];
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;

  v6 = (uint64_t)(a1 + 8);
  if (!sub_1000CC4F4((uint64_t)(a1 + 8)))
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10214A718);
    v51 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call setLocation() without a backing database in CLLocationDatabase!", __p, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_10214A718);
      *(_WORD *)buf = 0;
      v59 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, off_1022A0288, 2, "#Warning Attempt to call setLocation() without a backing database in CLLocationDatabase!", buf, 2);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationDatabase::setLocation(const sqlite3_int64 &, const CLDaemonLocation &)", "%s\n", v59);
      if (v59 != __p)
        free(v59);
    }
    return 0;
  }
  v7 = a1 + 27;
  if (!sub_100E815A0(a1 + 27))
  {
    sub_100263E50((uint64_t)buf);
    v8 = sub_100263F7C(&buf[16], (uint64_t)"UPDATE OR REPLACE ", 18);
    (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*a1 + 16))(__p, a1);
    if (v84 >= 0)
      v9 = __p;
    else
      v9 = *(_BYTE **)__p;
    if (v84 >= 0)
      v10 = HIBYTE(v84);
    else
      v10 = *(_QWORD *)&__p[8];
    v11 = sub_100263F7C(v8, (uint64_t)v9, v10);
    v12 = sub_100263F7C(v11, (uint64_t)" SET ", 5);
    v13 = sub_100263F7C(v12, (uint64_t)"Timestamp", 9);
    v14 = sub_100263F7C(v13, (uint64_t)"=?, ", 4);
    v15 = sub_100263F7C(v14, (uint64_t)"Latitude", 8);
    v16 = sub_100263F7C(v15, (uint64_t)"=?, ", 4);
    v17 = sub_100263F7C(v16, (uint64_t)"Longitude", 9);
    v18 = sub_100263F7C(v17, (uint64_t)"=?, ", 4);
    v19 = sub_100263F7C(v18, (uint64_t)"HorizontalAccuracy", 18);
    v20 = sub_100263F7C(v19, (uint64_t)"=?, ", 4);
    v21 = sub_100263F7C(v20, (uint64_t)"Altitude", 8);
    v22 = sub_100263F7C(v21, (uint64_t)"=?, ", 4);
    v23 = sub_100263F7C(v22, (uint64_t)"VerticalAccuracy", 16);
    v24 = sub_100263F7C(v23, (uint64_t)"=?, ", 4);
    v25 = sub_100263F7C(v24, (uint64_t)"Speed", 5);
    v26 = sub_100263F7C(v25, (uint64_t)"=?, ", 4);
    v27 = sub_100263F7C(v26, (uint64_t)"Course", 6);
    v28 = sub_100263F7C(v27, (uint64_t)"=?, ", 4);
    v29 = sub_100263F7C(v28, (uint64_t)"Confidence", 10);
    v30 = sub_100263F7C(v29, (uint64_t)"=?", 2);
    v31 = sub_100263F7C(v30, (uint64_t)" WHERE ", 7);
    v32 = sub_100263F7C(v31, (uint64_t)"ROWID", 5);
    sub_100263F7C(v32, (uint64_t)"=?", 2);
    if (SHIBYTE(v84) < 0)
      operator delete(*(void **)__p);
    std::stringbuf::str(__p, &v77);
    if (v84 >= 0)
      v33 = __p;
    else
      v33 = *(char **)__p;
    a1[27] = sub_10063D314(v6, v33);
    a1[28] = v34;
    if (SHIBYTE(v84) < 0)
      operator delete(*(void **)__p);
    v35 = sub_100E815A0(a1 + 27);
    if (!v35)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214A738);
      v36 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_FAULT, "Could not prepare cached update statement", __p, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10214A738);
        LOWORD(v73[0]) = 0;
        v69 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Could not prepare cached update statement", v73, 2);
        sub_100512490("Generic", 1, 0, 0, "BOOL CLLocationDatabase::setLocation(const sqlite3_int64 &, const CLDaemonLocation &)", "%s\n", v69);
        if (v69 != __p)
          free(v69);
      }
    }
    *(_QWORD *)&buf[16] = v37;
    if (v81 < 0)
      operator delete(v80);
    std::streambuf::~streambuf(&v77);
    std::ios::~ios(&v82);
    if (!v35)
      return 0;
  }
  sub_100087AF4(v7, &v72);
  v38 = (sqlite3_stmt *)sub_100026CC8(v72);
  if (!sub_1000890C4(v38, 1, *(double *)(a3 + 76)))
    goto LABEL_43;
  v39 = (sqlite3_stmt *)sub_100026CC8(v72);
  if (!sub_1000890C4(v39, 2, *(double *)(a3 + 4)))
    goto LABEL_43;
  v40 = (sqlite3_stmt *)sub_100026CC8(v72);
  if (!sub_1000890C4(v40, 3, *(double *)(a3 + 12))
    || (v41 = (sqlite3_stmt *)sub_100026CC8(v72), !sub_1000890C4(v41, 4, *(double *)(a3 + 20)))
    || (v42 = (sqlite3_stmt *)sub_100026CC8(v72), !sub_1000890C4(v42, 5, *(double *)(a3 + 28)))
    || (v43 = (sqlite3_stmt *)sub_100026CC8(v72), !sub_1000890C4(v43, 6, *(double *)(a3 + 36)))
    || (v44 = (sqlite3_stmt *)sub_100026CC8(v72), !sub_1000890C4(v44, 7, *(double *)(a3 + 44)))
    || (v45 = (sqlite3_stmt *)sub_100026CC8(v72), !sub_1000890C4(v45, 8, *(double *)(a3 + 60)))
    || (v46 = (sqlite3_stmt *)sub_100026CC8(v72), !sub_1000CD75C(v46, 9, *(_DWORD *)(a3 + 84)))
    || (v47 = (sqlite3_stmt *)sub_100026CC8(v72), !sub_1000CC50C(v47, 10, *a2)))
  {
LABEL_43:
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214A738);
    v52 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v53 = *(_QWORD *)(a3 + 76);
      v54 = *(_QWORD *)(a3 + 4);
      v55 = *(_QWORD *)(a3 + 12);
      v56 = *(_QWORD *)(a3 + 20);
      *(_DWORD *)__p = 134218752;
      *(_QWORD *)&__p[4] = v53;
      *(_WORD *)&__p[12] = 2048;
      *(_QWORD *)&__p[14] = v54;
      v84 = 2048;
      v85 = v55;
      v86 = 2048;
      v87 = v56;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_FAULT, "could not bind %.3f <%+.8f,%+.8f> %.2f", __p, 0x2Au);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_48;
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214A738);
    v60 = *(_QWORD *)(a3 + 76);
    v61 = *(_QWORD *)(a3 + 4);
    v62 = *(void (__cdecl ***)(std::stringbuf *__hidden))(a3 + 12);
    v63 = *(_QWORD *)(a3 + 20);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = v60;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v61;
    *(_WORD *)&buf[22] = 2048;
    v77 = v62;
    v78 = 2048;
    v79 = v63;
    LODWORD(v70) = 42;
    v64 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02D8, 17, "could not bind %.3f <%+.8f,%+.8f> %.2f", COERCE_DOUBLE(buf), *(double *)&v70, v71, *(double *)&v72);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLLocationDatabase::setLocation(const sqlite3_int64 &, const CLDaemonLocation &)", "%s\n", v64);
    if (v64 == __p)
      goto LABEL_48;
    goto LABEL_59;
  }
  v48 = (sqlite3_stmt *)sub_100026CC8(v72);
  sub_10023C9B0(v6, v48);
  v49 = sub_10063EA18(v6);
  if (v49 > 0)
  {
    v50 = 1;
    goto LABEL_49;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214A738);
  v65 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    sub_100071A00(a3, __p);
    v66 = v84 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = v49;
    *(_WORD *)&buf[8] = 2080;
    *(_QWORD *)&buf[10] = v66;
    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_FAULT, "failed to setLocation, numModRows, %d, %s", buf, 0x12u);
    if (SHIBYTE(v84) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214A738);
    v67 = qword_1022A02D8;
    sub_100071A00(a3, buf);
    if (buf[23] >= 0)
      v68 = buf;
    else
      v68 = *(_BYTE **)buf;
    v73[0] = 67109378;
    v73[1] = v49;
    v74 = 2080;
    v75 = v68;
    LODWORD(v70) = 18;
    v64 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v67, 17, "failed to setLocation, numModRows, %d, %s", v73, v70);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLLocationDatabase::setLocation(const sqlite3_int64 &, const CLDaemonLocation &)", "%s\n", v64);
    if (v64 != __p)
LABEL_59:
      free(v64);
  }
LABEL_48:
  v50 = 0;
LABEL_49:
  v57 = v72;
  v72 = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  return v50;
}

void sub_10067EBBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10067EC34(_BYTE *a1)
{
  uint64_t v2;
  NSObject *v3;
  char *v4;
  NSObject *v5;
  _QWORD *v7;
  uint8_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  _WORD v14[8];
  uint64_t v15;
  _QWORD v16[8];
  uint8_t buf[8];
  uint64_t v18;
  unsigned __int8 v19;

  v2 = (uint64_t)(a1 + 64);
  if (sub_1000CC4F4((uint64_t)(a1 + 64)))
  {
    if (!a1[16])
    {
      sub_100263E50((uint64_t)v14);
      v7 = sub_100263F7C(&v15, (uint64_t)"DELETE FROM ", 12);
      (*(void (**)(uint8_t *__return_ptr, _BYTE *))(*(_QWORD *)a1 + 16))(buf, a1);
      if ((v19 & 0x80u) == 0)
        v8 = buf;
      else
        v8 = *(uint8_t **)buf;
      if ((v19 & 0x80u) == 0)
        v9 = v19;
      else
        v9 = v18;
      v10 = sub_100263F7C(v7, (uint64_t)v8, v9);
      v11 = sub_100263F7C(v10, (uint64_t)" WHERE ", 7);
      v12 = sub_100263F7C(v11, (uint64_t)"ROWID", 5);
      sub_100263F7C(v12, (uint64_t)"=?", 2);
      if ((char)v19 < 0)
        operator delete(*(void **)buf);
      std::stringbuf::str(buf, v16);
      if ((v19 & 0x80u) == 0)
        v13 = (char *)buf;
      else
        v13 = *(char **)buf;
      sub_1000CDA68(v2, v13);
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214A738);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Can't clear location for read-only database", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214A738);
      v14[0] = 0;
      v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Can't clear location for read-only database", v14, 2);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLLocationDatabase::clearLocation(const sqlite3_int64 &)", "%s\n", v4);
LABEL_32:
      if (v4 != (char *)buf)
        free(v4);
    }
  }
  else
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10214A718);
    v5 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call clearLocation() without a backing database in CLLocationDatabase!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_10214A718);
      v14[0] = 0;
      v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_1022A0288, 2, "#Warning Attempt to call clearLocation() without a backing database in CLLocationDatabase!", v14, 2);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationDatabase::clearLocation(const sqlite3_int64 &)", "%s\n", v4);
      goto LABEL_32;
    }
  }
  return 0;
}

void sub_10067F208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  sub_1018B38B4((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_10067F268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  NSObject *v9;
  const char *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *__p[2];
  char v17;
  uint8_t buf[16];
  uint64_t v19;
  _QWORD v20[8];

  if (sub_1000CC4F4(a1))
  {
    if (!*(_BYTE *)(a2 + 8))
    {
      sub_100263E50((uint64_t)buf);
      v11 = sub_100263F7C(&v19, (uint64_t)"DELETE FROM ", 12);
      v12 = *(char *)(a3 + 23);
      if (v12 >= 0)
        v13 = a3;
      else
        v13 = *(_QWORD *)a3;
      if (v12 >= 0)
        v14 = *(unsigned __int8 *)(a3 + 23);
      else
        v14 = *(_QWORD *)(a3 + 8);
      sub_100263F7C(v11, v13, v14);
      std::stringbuf::str(__p, v20);
      if (v17 >= 0)
        v15 = (char *)__p;
      else
        v15 = (char *)__p[0];
      sub_1000CDA68(a1, v15);
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214A738);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Can't clear locations in read-only database", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214A738);
      LOWORD(__p[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Can't clear locations in read-only database", __p, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "static void CLLocationDatabase::clearLocations(CLSqliteDatabase &, const CLSqliteDatabase::SqliteProperties &, const std::string &)", "%s\n", v7);
LABEL_19:
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10214A718);
    v9 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call clearLocations() without a backing database in CLLocationDatabase!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_10214A718);
      LOWORD(__p[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_1022A0288, 2, "#Warning Attempt to call clearLocations() without a backing database in CLLocationDatabase!", __p, 2);
      v8 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "static void CLLocationDatabase::clearLocations(CLSqliteDatabase &, const CLSqliteDatabase::SqliteProperties &, const std::string &)", "%s\n", v10);
      goto LABEL_19;
    }
  }
}

void sub_10067F64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_10067F6A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *__p[2];
  char v4;

  v1 = a1 + 64;
  v2 = a1 + 8;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(__p);
  sub_10067F268(v1, v2, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_10067F6F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id *sub_10067F714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  char *v9;
  NSObject *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  _WORD v22[8];
  uint64_t v23;
  _QWORD v24[8];
  _QWORD v25[8];
  id v26[2];
  uint8_t buf[12];
  char v28;

  sub_100131938(v26, (uint64_t)"CLLocationDatabase::clearLocationsByAge", 0);
  if (sub_1000CC4F4(a2))
  {
    if (!*(_BYTE *)(a3 + 8))
    {
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      v25[2] = sub_100680228;
      v25[3] = &unk_102149260;
      v25[4] = a1;
      v25[5] = a4;
      v25[6] = mach_absolute_time();
      v25[7] = v25;
      sub_100263E50((uint64_t)v22);
      v11 = sub_100263F7C(&v23, (uint64_t)"DELETE FROM ", 12);
      v12 = *(char *)(a4 + 23);
      if (v12 >= 0)
        v13 = a4;
      else
        v13 = *(_QWORD *)a4;
      if (v12 >= 0)
        v14 = *(unsigned __int8 *)(a4 + 23);
      else
        v14 = *(_QWORD *)(a4 + 8);
      v15 = sub_100263F7C(v11, v13, v14);
      v16 = sub_100263F7C(v15, (uint64_t)" WHERE ", 7);
      v17 = sub_100263F7C(v16, (uint64_t)"Timestamp", 9);
      v18 = sub_100263F7C(v17, (uint64_t)" < ? OR ", 8);
      v19 = sub_100263F7C(v18, (uint64_t)"Timestamp", 9);
      sub_100263F7C(v19, (uint64_t)" > ?", 4);
      std::stringbuf::str(buf, v24);
      if (v28 >= 0)
        v20 = (char *)buf;
      else
        v20 = *(char **)buf;
      sub_1000CDA68(a2, v20);
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214A738);
    v8 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Can't clear locations by age in read-only database", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214A738);
      v22[0] = 0;
      v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Can't clear locations by age in read-only database", v22, 2);
      sub_100512490("Generic", 1, 0, 0, "static void CLLocationDatabase::clearLocationsByAge(const CFTimeInterval &, CLSqliteDatabase &, const CLSqliteDatabase::SqliteProperties &, const std::string &)", "%s\n", v9);
LABEL_19:
      if (v9 != (char *)buf)
        free(v9);
    }
  }
  else
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10214A718);
    v10 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call clearLocationsByAge() without a backing database in CLLocationDatabase!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_10214A718);
      v22[0] = 0;
      v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_1022A0288, 2, "#Warning Attempt to call clearLocationsByAge() without a backing database in CLLocationDatabase!", v22, 2);
      sub_100512490("Generic", 1, 0, 2, "static void CLLocationDatabase::clearLocationsByAge(const CFTimeInterval &, CLSqliteDatabase &, const CLSqliteDatabase::SqliteProperties &, const std::string &)", "%s\n", v9);
      goto LABEL_19;
    }
  }
  return sub_100131740(v26);
}

void sub_100680190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,id a55)
{
  uint64_t v55;

  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  sub_1018B38B4((uint64_t)&a11);
  sub_100134E40(&a53);
  sub_100131740(&a55);
  _Unwind_Resume(a1);
}

void sub_100680228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t v9;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  double v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t *v24;

  v6 = sub_100127828(a3 - a2);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214A758);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v8 = *(uint64_t **)(a1 + 40);
    v9 = **(_QWORD **)(a1 + 32);
    if (*((char *)v8 + 23) < 0)
      v8 = (uint64_t *)*v8;
    v10[0] = 68290563;
    v10[1] = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2082;
    v14 = "elapsed";
    v15 = 2050;
    v16 = a2;
    v17 = 2050;
    v18 = a3;
    v19 = 2050;
    v20 = v6;
    v21 = 2050;
    v22 = v9;
    v23 = 2081;
    v24 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLLocationDatabase::clearLocationsByAge\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"age_s\":\"%{public}.09f\", \"tableName\":%{private, location:escape_only}s}", (uint8_t *)v10, 0x4Eu);
  }
}

void sub_100680378(id a1)
{
  off_1022A0288 = os_log_create("com.apple.locationd.Utility", "Database");
}

void sub_1006803A4(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1006803D0(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_1006803FC()
{
  uint64_t result;

  result = sub_1001E4BF4();
  if ((result & 0x20) != 0)
    operator new();
  return result;
}

void sub_100680464()
{
  operator delete();
}

uint64_t sub_100680488()
{
  if (qword_1023031E8 != -1)
    dispatch_once(&qword_1023031E8, &stru_10214A778);
  return qword_102310A78;
}

double sub_1006804CC(uint64_t a1, int a2, double *a3)
{
  NSObject *v3;
  double v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v9;
  double v10;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  uint64_t v16;
  uint8_t buf[4];
  double v18;

  if (a2)
  {
    if (qword_10229FD60 != -1)
      dispatch_once(&qword_10229FD60, &stru_10214A7F0);
    v3 = qword_10229FD68;
    if (os_log_type_enabled((os_log_t)qword_10229FD68, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Invalid notification", buf, 2u);
    }
    v4 = 0.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD60 != -1)
        dispatch_once(&qword_10229FD60, &stru_10214A7F0);
      LOWORD(v15) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD68, 17, "Invalid notification", &v15, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "virtual CFTimeInterval CLHA::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    v4 = 0.0;
    if (sub_1006807F4(a1))
    {
      if (qword_10229FD60 != -1)
        dispatch_once(&qword_10229FD60, &stru_10214A7F0);
      v9 = qword_10229FD68;
      if (os_log_type_enabled((os_log_t)qword_10229FD68, OS_LOG_TYPE_INFO))
      {
        v10 = *a3;
        *(_DWORD *)buf = 134349056;
        v18 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Setting HA interval to %{public}f", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD60 != -1)
          dispatch_once(&qword_10229FD60, &stru_10214A7F0);
        v12 = *(_QWORD *)a3;
        v15 = 134349056;
        v16 = v12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD68, 1, "Setting HA interval to %{public}f", &v15, 12);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 2, "virtual CFTimeInterval CLHA::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
      sub_10006B4E0(*(_QWORD *)(a1 + 32), *a3);
      sub_10006BC9C(*(_QWORD *)(a1 + 32), *a3 * 16.0);
      return *a3;
    }
  }
  return v4;
}

uint64_t sub_1006807F4(uint64_t a1)
{
  unsigned int v2;
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  char v12;
  _WORD v13[8];
  uint8_t buf[1640];

  v2 = sub_1001E4BF4();
  if ((v2 & 0x20) != 0)
  {
    if (!*(_QWORD *)(a1 + 32))
    {
      v3 = (uint64_t *)sub_100A07FA0();
      v11 = 0x1E0000FF00;
      v12 = 0;
      sub_1018E4078(v3, (uint64_t)&v11, (uint64_t *)buf);
      sub_1002B7674(a1 + 32, (__int128 *)buf);
      v4 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v5 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      sub_100A0A9EC(*(_QWORD *)(a1 + 32), &off_10221FC00);
      sub_100A0A4BC(*(uint64_t **)(a1 + 32), (uint64_t)sub_100680A34, a1);
    }
  }
  else
  {
    if (qword_10229FD60 != -1)
      dispatch_once(&qword_10229FD60, &stru_10214A7F0);
    v7 = qword_10229FD68;
    if (os_log_type_enabled((os_log_t)qword_10229FD68, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "HA unavailable, unable to establish hid interface", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD60 != -1)
        dispatch_once(&qword_10229FD60, &stru_10214A7F0);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD68, 17, "HA unavailable, unable to establish hid interface", v13, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLHA::openHidDevice()", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  return (v2 >> 5) & 1;
}

void sub_100680A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  float FloatValue;
  float v10;
  float v11;
  unint64_t TimeStamp;
  _WORD v13[8];
  uint8_t buf[8];
  float v15;
  float v16;
  float v17;

  if (IOHIDEventGetType(a4) == 13)
  {
    if (IOHIDEventGetIntegerValue(a4, 851971) == 1)
    {
      if (qword_10229FD60 != -1)
        dispatch_once(&qword_10229FD60, &stru_10214A7F0);
      v6 = qword_10229FD68;
      if (os_log_type_enabled((os_log_t)qword_10229FD68, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Received shake data, discarding.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD60 != -1)
          dispatch_once(&qword_10229FD60, &stru_10214A7F0);
        v13[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD68, 2, "Received shake data, discarding.", v13, 2);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "static void CLHA::onIohidEvent(void *, void *, void *, IOHIDEventRef)", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
    }
    else
    {
      FloatValue = IOHIDEventGetFloatValue(a4, 851968);
      v10 = IOHIDEventGetFloatValue(a4, 851969);
      v11 = IOHIDEventGetFloatValue(a4, 851970);
      TimeStamp = IOHIDEventGetTimeStamp(a4);
      *(_QWORD *)buf = sub_100127828(TimeStamp);
      v15 = FloatValue;
      v16 = v10;
      v17 = v11;
      sub_10012AC18(a1, 0, (uint64_t)buf, 24);
    }
  }
}

_QWORD *sub_100680C60(_QWORD *a1)
{
  *a1 = off_10214A7A8;
  sub_100261F44((uint64_t)(a1 + 4));
  return sub_1009BAD18(a1);
}

void sub_100680C90(_QWORD *a1)
{
  *a1 = off_10214A7A8;
  sub_100261F44((uint64_t)(a1 + 4));
  sub_1009BAD18(a1);
  operator delete();
}

void sub_100680CD4(id a1)
{
  qword_10229FD68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accel");
}

_QWORD *sub_100680D00(_QWORD *a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_100680DBC((uint64_t)a1, "VO2MaxHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = off_10214A820;
  a1[9] = off_10214A8E0;
  a1[56] = off_10214A930;
  sub_100682318((uint64_t)a1);
  return a1;
}

void sub_100680D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  sub_10068121C(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100680DBC(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_102138DD8;
  *(_QWORD *)a1 = off_10214AD58;
  *(_QWORD *)(a1 + 72) = off_10214AE00;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_10214AD58;
  *(_QWORD *)(a1 + 72) = off_10214AE00;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 368) = 12000;
  *(_QWORD *)(a1 + 376) = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 384));
  *(_QWORD *)(a1 + 384) = &off_102138DD8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 248) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_100681170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[47] = off_102138DA8;
  sub_100427950(v27);
  sub_100686470(v26);
  sub_101138068(a12);
  *v24 = off_102138DA8;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_100681214()
{
  JUMPOUT(0x1006811F4);
}

_QWORD *sub_10068121C(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_10214AE00;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_10214AD58;
  a1[47] = off_102138DA8;
  sub_100427950(a1 + 48);
  sub_100686470(a1 + 22);
  sub_101138068(v2);
  *a1 = off_102138DA8;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_10068129C(uint64_t a1)
{
  return sub_10068121C((_QWORD *)(a1 - 72));
}

_QWORD *sub_1006812A4(uint64_t a1)
{
  return sub_10068121C((_QWORD *)(a1 - 448));
}

void sub_1006812AC(_QWORD *a1)
{
  sub_10068121C(a1);
  operator delete();
}

void sub_1006812D0(uint64_t a1)
{
  sub_10068121C((_QWORD *)(a1 - 72));
  operator delete();
}

void sub_1006812F8(uint64_t a1)
{
  sub_10068121C((_QWORD *)(a1 - 448));
  operator delete();
}

uint64_t sub_100681320(uint64_t a1, uint64_t a2)
{
  if (*(double *)(*(_QWORD *)(a2 + 8) - 16) == 1.79769313e308 && sub_10008950C(a1 + 72))
  {
    sub_10001E638(*(_QWORD *)(a1 + 80));
    CFAbsoluteTimeGetCurrent();
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM VO2MaxHistory WHERE estimatedVo2Max IS NULL OR startTime < ?");
  }
  return -1;
}

void sub_100681438(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100681458(uint64_t a1, uint64_t a2)
{
  return sub_100681320(a1 - 72, a2);
}

uint64_t sub_100681460(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  unsigned __int8 src[8];
  uint8_t buf[24];

  if ((sub_10008950C(a1 + 72) & 1) != 0)
  {
    a2[1] = *a2;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from VO2MaxHistory ORDER BY id ASC");
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_10214A9C8);
  v4 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "getAllRecordsWithErrorCode, DB not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10214A9C8);
    *(_WORD *)src = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "getAllRecordsWithErrorCode, DB not accessible", src, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "CMError CLVO2MaxOutputRecorderDb::getAllRecordsWithErrorCode(std::vector<VO2MaxOutput> &) const", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return 109;
}

void sub_10068181C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100681850(uint64_t a1, unsigned __int8 *a2)
{
  const __CFString *v3;
  const char *CStringPtr;

  v3 = (const __CFString *)sub_100219C4C(*(_QWORD *)(a1 + 80));
  CStringPtr = CFStringGetCStringPtr(v3, 0x8000100u);
  return uuid_parse(CStringPtr, a2);
}

uint64_t sub_100681884(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  sqlite3_stmt *v13;
  const unsigned __int8 *v14;
  sqlite3_stmt *v15;
  sqlite3_stmt *v16;
  sqlite3_stmt *v17;
  sqlite3_stmt *v18;
  sqlite3_stmt *v19;
  sqlite3_stmt *v20;
  sqlite3_stmt *v21;
  sqlite3_stmt *v22;
  sqlite3_stmt *v23;
  double v24;
  uint64_t result;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)a2 = sqlite3_column_int(v6, 0);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 24) = sqlite3_column_double(v7, 1);
  v8 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)(a2 + 40) = sqlite3_column_int(v8, 2);
  v9 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 32) = sqlite3_column_double(v9, 3);
  v10 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 48) = sqlite3_column_double(v10, 4);
  v11 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 56) = sqlite3_column_double(v11, 5);
  v12 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 64) = sqlite3_column_double(v12, 6);
  v13 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v14 = sqlite3_column_text(v13, 7);
  uuid_parse((const char *)v14, (unsigned __int8 *)(a2 + 72));
  v15 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 88) = sqlite3_column_double(v15, 8);
  v16 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 96) = sqlite3_column_double(v16, 9);
  v17 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 104) = sqlite3_column_int(v17, 10);
  v18 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_BYTE *)(a2 + 108) = sqlite3_column_int(v18, 11) != 0;
  v19 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_BYTE *)(a2 + 109) = sqlite3_column_int(v19, 12) != 0;
  v20 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 112) = sqlite3_column_int(v20, 13);
  v21 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 120) = sqlite3_column_double(v21, 14);
  v22 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 128) = sqlite3_column_double(v22, 15);
  v23 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v24 = sqlite3_column_double(v23, 16);
  result = 0;
  *(double *)(a2 + 136) = v24;
  return result;
}

uint64_t sub_100681A48(uint64_t a1, _QWORD *a2, int a3)
{
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  uint8_t buf[24];

  if ((sub_10008950C(a1 + 72) & 1) != 0)
  {
    a2[1] = *a2;
    if (a3)
      sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM VO2MaxHistory WHERE estimatedVo2Max IS NOT NULL AND eligibleForHealthKit = 1 AND startTime > ? ORDER BY startTime DESC LIMIT ?");
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM VO2MaxHistory WHERE estimatedVo2Max IS NOT NULL AND startTime > ? ORDER BY startTime DESC LIMIT ?");
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_10214A9C8);
  v6 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "VO2MaxHistory, DB not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10214A9C8);
    LOWORD(v10) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "VO2MaxHistory, DB not accessible", &v10, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "CMError CLVO2MaxOutputRecorderDb::querySinceTime(CFAbsoluteTime, std::vector<VO2MaxOutput> &, BOOL, int) const", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  return 109;
}

void sub_100681E28(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100681E54(uint64_t a1, const unsigned __int8 *a2, _QWORD *a3)
{
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  char out[48];
  uint8_t buf[24];

  if ((sub_10008950C(a1 + 72) & 1) != 0)
  {
    a3[1] = *a3;
    uuid_unparse(a2, out);
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from VO2MaxHistory WHERE sessionId = ?");
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_10214A9C8);
  v6 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "VO2MaxHistory, DB not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10214A9C8);
    *(_WORD *)out = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "VO2MaxHistory, DB not accessible", out, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "CMError CLVO2MaxOutputRecorderDb::queryBySessionId(unsigned char *, std::vector<VO2MaxOutput> &) const", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  return 109;
}

void sub_100682200(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10068222C(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT COUNT(*) FROM VO2MaxHistory");
  return 0xFFFFFFFFLL;
}

void sub_1006822CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006822F0(uint64_t a1)
{
  return sub_10068222C(a1 - 72);
}

_QWORD *sub_1006822F8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "VO2MaxHistory");
}

_QWORD *sub_100682308@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "VO2MaxHistory");
}

uint64_t sub_100682318(uint64_t a1)
{
  uint64_t result;

  result = sub_1000CC4F4(*(_QWORD *)(a1 + 80));
  if ((_DWORD)result)
  {
    sub_100682374(a1);
    return sub_100634364(*(_QWORD *)(a1 + 80), "VO2MaxHistory", (const char **)&off_10214A9E8, (const std::string::value_type **)&off_1022A3A18, 0);
  }
  return result;
}

BOOL sub_100682374(uint64_t a1)
{
  _BOOL8 result;
  const char *v3;
  int v4;
  __int16 v5;
  char v6;
  char v7;

  result = sub_100635B3C(*(_QWORD *)(a1 + 80), "VO2MaxHistory");
  if (result)
  {
    v3 = "sessionType";
    v4 = 5;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    sub_10063A8D4(*(_QWORD *)(a1 + 80), "VO2MaxHistory", (uint64_t)"sessionType", (uint64_t)&v3);
  }
  return result;
}

void sub_10068277C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;

  if (a19 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a21);
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  sub_1018B38B4((uint64_t)&a59);
  _Unwind_Resume(a1);
}

uint64_t sub_100682814(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM VO2MaxHistory");
  return result;
}

void sub_1006828A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006828C8(uint64_t a1)
{
  return sub_100682814(a1 - 72);
}

uint64_t sub_1006828D0(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_1000CDA68(a1[10], "DELETE FROM VO2MaxHistory WHERE startTime > ?");
  }
  return result;
}

void sub_100682998(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006829B8(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "UPDATE VO2MaxHistory SET startTime = startTime + ?");
  return result;
}

void sub_100682A50(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100682A70(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "INSERT INTO VO2MaxHistory (startTime, workoutType, estimatedVo2Max, durationInSeconds, hrMax, hrMin, sessionId, variance, filteredVo2Max, sessionType, eligibleForHealthKit, eligibleForCalorimetry, numWorkoutsContrToEstimate, estimatedHRResponseParam, estimatedHRRecoveryParam, sessionVo2Max) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
  return result;
}

void sub_100682CB4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100682CDC()
{
  return 0;
}

uint64_t sub_100682CE4(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM VO2MaxHistory ORDER BY id DESC LIMIT 1");
  return 2;
}

void sub_100682DB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100682DE4(uint64_t a1, void *a2)
{
  NSObject *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  size_t v8;
  std::string *v9;
  void **v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  void *v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v20;
  std::string *v21;
  void *v22[2];
  int64_t v23;
  std::string v24;
  void *__p[4];
  std::string buf[68];

  if (!sub_100635E80(*(_QWORD *)(a1 + 80), (char *)a2))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10214AE40);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10214AE40);
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice %{public}s needs autoincrement migration", __p, 12);
      v21 = (std::string *)v20;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<VO2MaxOutput, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = VO2MaxOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    memset(__p, 0, 24);
    sub_1015A2E04(buf, (char *)a2);
    v5 = std::string::append(buf, "AutoIncr");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v23 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)v22 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_1015A2E04(buf, (char *)a2);
    v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_10001E638(*(_QWORD *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0)
      v8 = HIBYTE(__p[2]);
    else
      v8 = (size_t)__p[1];
    v9 = buf;
    sub_100259584((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v23 >= 0)
      v11 = v22;
    else
      v11 = (void **)v22[0];
    if (v23 >= 0)
      v12 = HIBYTE(v23);
    else
      v12 = (std::string::size_type)v22[1];
    v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v24.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    __p[0] = v14;
    __p[1] = v24.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v24.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      v15 = HIBYTE(__p[2]);
      v14 = __p[0];
    }
    if (v15 >= 0)
      v16 = (char *)__p;
    else
      v16 = (char *)v14;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), v16);
  }
  v17 = *(_QWORD *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = *(_QWORD *)(v17 + 88);
  sub_100053048(v17, v18);
  return 0;
}

void sub_100683F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a60 < 0)
    operator delete(a55);
  _Unwind_Resume(a1);
}

double sub_10068429C(uint64_t a1)
{
  double v1;
  double *v3;
  double *v4;
  uint64_t v5;

  v3 = 0;
  v4 = 0;
  v5 = 0;
  sub_100681A48(a1, &v3, 1);
  if (v4 != v3)
  {
    v1 = v3[4];
LABEL_4:
    v4 = v3;
    operator delete(v3);
    return v1;
  }
  v1 = NAN;
  if (v4)
    goto LABEL_4;
  return v1;
}

void sub_100684308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100684324(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  uint64_t v6;
  uint8_t buf[24];

  if ((sub_10008950C(a1 + 72) & 1) != 0)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM VO2MaxHistory WHERE estimatedVo2Max IS NOT NULL AND startTime > ? AND startTime < ? ORDER BY startTime");
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_10214A9C8);
  v2 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "VO2MaxHistory, DB not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10214A9C8);
    LOWORD(v6) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "VO2MaxHistory, DB not accessible", &v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual CMError CLVO2MaxOutputRecorderDb::queryVO2MaxOutputInTimeRange(CFAbsoluteTime, CFAbsoluteTime, std::vector<VO2MaxOutput> &) const", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return 109;
}

void sub_1006846DC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100684708(uint64_t a1)
{
  return sub_100684324(a1 - 448);
}

uint64_t sub_100684710(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v11[2];
  uint64_t v12;
  _QWORD v13[8];
  void *v14[2];
  unsigned __int8 v15;

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12))
      goto LABEL_3;
LABEL_18:
    sub_101903CA4(v2);
    __break(1u);
  }
  v9 = v11[1];
  operator delete(v11[0]);
  if (!v9)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v11);
    v3 = sub_100263F7C(&v12, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(v14, a1);
    if ((v15 & 0x80u) == 0)
      v4 = v14;
    else
      v4 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v5 = v15;
    else
      v5 = (uint64_t)v14[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
    if ((char)v15 < 0)
      operator delete(v14[0]);
    v7 = a1[10];
    std::stringbuf::str(v14, v13);
    if ((v15 & 0x80u) == 0)
      v8 = (char *)v14;
    else
      v8 = (char *)v14[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_100684AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  if (*(char *)(v4 - 233) < 0)
    operator delete(*(void **)(v4 - 256));
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100684B60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10214AE40);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10214AE40);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10214AE40);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<VO2MaxOutput, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = VO2MaxOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_100685158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_100685188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  *(_OWORD *)a2 = *(_OWORD *)a3;
  v3 = *(_OWORD *)(a3 + 16);
  v4 = *(_OWORD *)(a3 + 32);
  v5 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  result = *(__n128 *)(a3 + 80);
  v7 = *(_OWORD *)(a3 + 96);
  v8 = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(a2 + 128) = v8;
  *(__n128 *)(a2 + 80) = result;
  *(_OWORD *)(a2 + 96) = v7;
  return result;
}

id *sub_1006851B4(uint64_t a1, uint64_t a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  double v31;
  const char *v32;
  uint8_t *v33;
  const char *v34;
  uint8_t *v35;
  double v36;
  id v37[2];
  int v38;
  double v39;
  __int16 v40;
  uint64_t v41;
  uint8_t buf[4];
  double v43;
  __int16 v44;
  uint64_t v45;
  _BYTE v46[24];
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v37[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v37[1] = 0;
  if (*(double *)(a1 + 248) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v37);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v47 = 0.0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v6 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v46);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10214AE40);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10214AE40);
        LOWORD(v38) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v38, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<VO2MaxOutput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *(double *)(a2 + 24);
    v8 = v47;
    v9 = v7 - v47;
    if (v7 - v47 < 0.0)
      v9 = -(v7 - v47);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10214AE40);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD *)(a2 + 24);
        *(_DWORD *)buf = 134349312;
        v43 = v47;
        v44 = 2050;
        v45 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10214AE40);
        v28 = *(_QWORD *)(a2 + 24);
        v38 = 134349312;
        v39 = v47;
        v40 = 2050;
        v41 = v28;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v38, 22);
        v30 = (uint8_t *)v29;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxOutput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *(double *)(a2 + 24);
      v8 = v47;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10214AE40);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *(double *)(a2 + 24);
          *(_DWORD *)buf = 134217984;
          v43 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10214AE40);
          v31 = *(double *)(a2 + 24);
          v38 = 134217984;
          v39 = v31;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v38));
          v33 = (uint8_t *)v32;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxOutput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v32);
          if (v33 != buf)
            free(v33);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v36 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_10214AE40);
        v18 = v36;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v43 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10214AE40);
        v38 = 134217984;
        v39 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v38));
        v35 = (uint8_t *)v34;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxOutput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v34);
        if (v35 != buf)
          free(v35);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v46, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  v21 = *(_OWORD *)(a2 + 16);
  v22 = *(_OWORD *)(a2 + 32);
  v23 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 288) = v23;
  *(_OWORD *)(a1 + 240) = v21;
  *(_OWORD *)(a1 + 256) = v22;
  v24 = *(_OWORD *)(a2 + 80);
  v25 = *(_OWORD *)(a2 + 96);
  v26 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 352) = v26;
  *(_OWORD *)(a1 + 304) = v24;
  *(_OWORD *)(a1 + 320) = v25;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v37);
}

void sub_10068591C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100685948(uint64_t a1)
{
  return sub_100684B60(a1 - 72);
}

void sub_100685950(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_10068597C(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  _QWORD v15[8];
  void *v16[2];
  unsigned __int8 v17;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (HIBYTE(v14))
      goto LABEL_3;
LABEL_18:
    sub_101903E10(v4);
    __break(1u);
  }
  v12 = v13[1];
  operator delete(v13[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v13);
    v6 = sub_100263F7C(&v14, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(v16, a1);
    if ((v17 & 0x80u) == 0)
      v7 = v16;
    else
      v7 = (void **)v16[0];
    if ((v17 & 0x80u) == 0)
      v8 = v17;
    else
      v8 = (uint64_t)v16[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v17 < 0)
      operator delete(v16[0]);
    v10 = a1[10];
    std::stringbuf::str(v16, v15);
    if ((v17 & 0x80u) == 0)
      v11 = (char *)v16;
    else
      v11 = (char *)v16[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_100685D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100685D84(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_101903F7C(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_100685FE4(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_1019040E8(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_10068621C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_101904254(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_100686444(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100686470(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 14;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 28;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10002E778((uint64_t)a1);
}

void *sub_100686504(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1C71C71C71C71C8)
    sub_10025955C();
  return operator new(144 * a2);
}

int32x2_t sub_10068654C(uint64_t a1, char a2)
{
  int32x2_t result;

  *(_QWORD *)a1 = off_10214AE70;
  *(_QWORD *)(a1 + 8) = 0x1E00000000;
  *(_QWORD *)(a1 + 376) = 0x1E00000000;
  *(_DWORD *)(a1 + 744) = 0;
  *(_BYTE *)(a1 + 748) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 796) = 0u;
  *(_DWORD *)(a1 + 812) = 998445679;
  result = vdup_n_s32(0x3B83126Fu);
  *(int32x2_t *)(a1 + 816) = result;
  *(_BYTE *)(a1 + 824) = 0;
  *(_DWORD *)(a1 + 844) = 0;
  *(_QWORD *)(a1 + 848) = 0;
  *(_BYTE *)(a1 + 856) = 0;
  *(_BYTE *)(a1 + 857) = a2;
  *(_WORD *)(a1 + 858) = 0;
  return result;
}

double sub_1006865B4(uint64_t a1)
{
  double result;

  sub_1006865E4(a1, 0x6B49D200uLL);
  result = 0.0;
  *(_OWORD *)(a1 + 784) = 0u;
  return result;
}

void sub_1006865E4(uint64_t a1, unint64_t a2)
{
  NSObject *v3;
  NSObject *v5;
  NSObject *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  double v25;
  int v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  uint8_t buf[4];
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;
  __int16 v48;
  double v49;

  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 376) = 0;
  *(_WORD *)(a1 + 744) = 0;
  *(_BYTE *)(a1 + 747) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  if (a2 < 0x6B49D200)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214AEE0);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218240;
      v39 = (float)((float)a2 * 0.000001);
      v40 = 2048;
      v41 = 1800.0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CMGyroBiasEstimator::reset: warm start [%f < %f]", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214AEE0);
      v26 = 134218240;
      v27 = (float)((float)a2 * 0.000001);
      v28 = 2048;
      v29 = 1800.0;
      LODWORD(v25) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CMGyroBiasEstimator::reset: warm start [%f < %f]", COERCE_DOUBLE(&v26), v25);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "void CMGyroBiasEstimator::reset(const uint64_t)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    *(float32x2_t *)(a1 + 812) = vadd_f32(*(float32x2_t *)(a1 + 812), 0);
    *(float *)(a1 + 820) = *(float *)(a1 + 820) + 0.0;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214AEE0);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CMGyroBiasEstimator::reset: cold start", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214AEE0);
      LOWORD(v26) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CMGyroBiasEstimator::reset: cold start", &v26, 2);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CMGyroBiasEstimator::reset(const uint64_t)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    *(_OWORD *)(a1 + 800) = xmmword_101BB9020;
    *(int32x2_t *)(a1 + 816) = vdup_n_s32(0x3B83126Fu);
    *(_BYTE *)(a1 + 824) = 0;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214AEE0);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(float *)(a1 + 800);
    v8 = *(float *)(a1 + 804);
    v9 = *(float *)(a1 + 808);
    v10 = *(float *)(a1 + 812);
    v11 = *(float *)(a1 + 816);
    v12 = *(float *)(a1 + 820);
    *(_DWORD *)buf = 134219264;
    v39 = v7;
    v40 = 2048;
    v41 = v8;
    v42 = 2048;
    v43 = v9;
    v44 = 2048;
    v45 = v10;
    v46 = 2048;
    v47 = v11;
    v48 = 2048;
    v49 = v12;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CMGyroBiasEstimator::reset: dbias.x,%.2e,.y,%.2e,.z,%.2e,P.x,%.2e,.y,%.2e,.z,%.2e", buf, 0x3Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214AEE0);
    v13 = *(float *)(a1 + 800);
    v14 = *(float *)(a1 + 804);
    v15 = *(float *)(a1 + 808);
    v16 = *(float *)(a1 + 812);
    v17 = *(float *)(a1 + 816);
    v18 = *(float *)(a1 + 820);
    v26 = 134219264;
    v27 = v13;
    v28 = 2048;
    v29 = v14;
    v30 = 2048;
    v31 = v15;
    v32 = 2048;
    v33 = v16;
    v34 = 2048;
    v35 = v17;
    v36 = 2048;
    v37 = v18;
    LODWORD(v25) = 62;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CMGyroBiasEstimator::reset: dbias.x,%.2e,.y,%.2e,.z,%.2e,P.x,%.2e,.y,%.2e,.z,%.2e", COERCE_DOUBLE(&v26), v25);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CMGyroBiasEstimator::reset(const uint64_t)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
}

uint64_t sub_100686B6C(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 858) && *(_BYTE *)(a1 + 859))
    return 0;
  sub_100687774((unsigned __int16 *)(a1 + 376), a2);
  return 1;
}

uint64_t sub_100686BA0(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  int32x2_t v8;
  BOOL v9;
  unint64_t v10;

  if (*(_BYTE *)(a1 + 858) && *(_BYTE *)(a1 + 859))
    return 0;
  if (*(_BYTE *)(a1 + 746))
  {
    if (*(_BYTE *)(a1 + 824))
    {
      result = 0;
      *(_BYTE *)(a1 + 744) = 1;
      return result;
    }
    return 0;
  }
  sub_100687774((unsigned __int16 *)(a1 + 8), a2);
  v6 = *(_QWORD *)(a1 + 752);
  v7 = *a3;
  v8.i32[0] = 833342583;
  if (v6)
  {
    v9 = v7 >= v6;
    v10 = v7 - v6;
    if (v10 != 0 && v9)
      *(float *)v8.i32 = (float)(int)(float)((float)((float)((float)v10 * 0.000001) / 0.02) + 0.5) * 0.000000005;
  }
  *(_QWORD *)(a1 + 752) = v7;
  *(float32x2_t *)(a1 + 812) = vadd_f32((float32x2_t)vdup_lane_s32(v8, 0), *(float32x2_t *)(a1 + 812));
  *(float *)(a1 + 820) = *(float *)v8.i32 + *(float *)(a1 + 820);
  if (!*(_BYTE *)(a1 + 824))
    return 0;
  *(_BYTE *)(a1 + 744) = 1;
  if (*(_DWORD *)(a1 + 12) != *(unsigned __int16 *)(a1 + 10)
    || *(_BYTE *)(a1 + 857) && *(_DWORD *)(a1 + 380) != *(unsigned __int16 *)(a1 + 378))
  {
    return 0;
  }
  result = sub_100686CC4(a1);
  if ((_DWORD)result)
  {
    sub_1006870DC((float32x2_t *)a1);
    return 1;
  }
  return result;
}

uint64_t sub_100686CC4(uint64_t a1)
{
  unsigned __int16 *v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t i;
  float v22;
  uint64_t v23;
  float v24;
  BOOL v25;
  float v26;
  float v27;
  char v28;
  unint64_t j;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float *v41;
  float v42;
  uint64_t v43;
  float v45[3];
  float v46;
  _DWORD v47[2];
  _DWORD v48[3];
  _DWORD v49[3];

  v2 = (unsigned __int16 *)(a1 + 8);
  v3 = sub_1006877E0((unsigned __int16 *)(a1 + 8), 0, *(unsigned __int16 *)(a1 + 10));
  v5 = v4;
  v7 = v6;
  sub_100687C30(v2, 0, *(unsigned __int16 *)(a1 + 10));
  v9 = v8;
  *(float *)v49 = v8;
  v49[1] = v10;
  v49[2] = v11;
  sub_100687C30((unsigned __int16 *)(a1 + 376), 0, *(unsigned __int16 *)(a1 + 378));
  v48[0] = v12;
  v48[1] = v13;
  v48[2] = v14;
  v15 = v3 - *(float *)(a1 + 832);
  v16 = v5 - *(float *)(a1 + 836);
  v17 = v7 - *(float *)(a1 + 840);
  v46 = v15;
  *(float *)v47 = v16;
  *(float *)&v47[1] = v17;
  v18 = v16 - *(float *)(a1 + 804);
  v19 = *(float *)(a1 + 808);
  v45[0] = v15 - *(float *)(a1 + 800);
  v45[1] = v18;
  v45[2] = v17 - v19;
  v20 = -v9;
  if (v9 > 0.0)
    v20 = v9;
  for (i = 1; i != 3; ++i)
  {
    v22 = *(float *)&v49[i];
    if (v22 <= 0.0)
      v22 = -v22;
    if (v22 > v20)
      v20 = v22;
  }
  if (v20 >= 0.0000025)
  {
    v25 = 0;
    v26 = flt_101BB8FE0[*(_BYTE *)(a1 + 856) == 0];
    v27 = 0.0001;
  }
  else
  {
    v23 = 0;
    if (v15 <= 0.0)
      v15 = -v15;
    do
    {
      v24 = *(float *)&v47[v23];
      if (v24 <= 0.0)
        v24 = -v24;
      if (v24 > v15)
        v15 = v24;
      ++v23;
    }
    while (v23 != 2);
    v25 = v15 < 0.03;
    v26 = flt_101BB8FE0[*(_BYTE *)(a1 + 856) == 0];
    v27 = flt_101BB8FE8[v15 < 0.03];
  }
  v28 = 0;
  for (j = 0; j != 3; ++j)
  {
    if (*(_BYTE *)(a1 + 857))
    {
      v30 = sub_100533668((uint64_t)&v46, j);
      if (v30 <= 0.0)
        v30 = -v30;
      if (v30 < v26 && sub_100533668((uint64_t)v49, j) < 0.0000025)
      {
        v31 = (float)((float)(sub_100533668((uint64_t)v49, j) + -0.00000048739) * 8.9291) + 0.00000076154;
        if (v31 >= 0.00000076154)
          v32 = v31;
        else
          v32 = 0.00000076154;
        v33 = (float)((float)(sub_100533668((uint64_t)v48, j) + -0.0000005625) * 15.508) + 0.00000076154;
        if (v33 < 0.00000076154)
          v33 = 0.00000076154;
        if (v32 <= v33)
          v34 = v33;
        else
          v34 = v32;
        v35 = (float)((float)((float)(v34 * 0.5) / 0.00000076154) * 30.0) * 0.02;
        v36 = *(_QWORD *)(a1 + 752);
        if ((unint64_t)(v36 - *(_QWORD *)sub_10068752C(a1 + 760, j)) > 0x927BF)
          v37 = 0.6 / (float)(v35 + 0.6);
        else
          v37 = 0.02 / (float)(v35 + 0.02);
        goto LABEL_43;
      }
    }
    else
    {
      if (v25)
        goto LABEL_36;
      v39 = sub_100533668((uint64_t)&v46, j);
      if (v39 <= 0.0)
        v39 = -v39;
      if (v39 < v26 && sub_100533668((uint64_t)v49, j) < 0.00000125)
      {
LABEL_36:
        v38 = *(float *)sub_100534E68(a1 + 812, j);
        v37 = v38 / (float)(v27 + *(float *)sub_100534E68(a1 + 812, j));
        v34 = 0.0;
LABEL_43:
        v40 = sub_100533668((uint64_t)v45, j);
        v41 = (float *)sub_100534E68(a1 + 800, j);
        *v41 = *v41 + (float)(v37 * v40);
        v42 = (float)(v34 * (float)(v37 * v37))
            + (float)(*(float *)sub_100534E68(a1 + 812, j) * (float)((float)(1.0 - v37) * (float)(1.0 - v37)));
        *(float *)sub_100534E68(a1 + 812, j) = v42;
        v43 = *(_QWORD *)(a1 + 752);
        *(_QWORD *)sub_10068752C(a1 + 760, j) = v43;
        v28 = 1;
        continue;
      }
    }
  }
  return v28 & 1;
}

void sub_1006870DC(float32x2_t *a1)
{
  uint64_t v2;
  float v3;
  float v4;
  NSObject *v5;
  __int8 v6;
  void (*v7)(uint8_t *, __int32 *, float32x2_t *, _QWORD);
  float v8;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[8];
  float v13;

  if (!a1[93].i8[1])
  {
    v2 = 0;
    v3 = a1[101].f32[1];
    if (v3 <= 0.0)
      v3 = -v3;
    do
    {
      v4 = a1[102].f32[v2];
      if (v4 <= 0.0)
        v4 = -v4;
      if (v4 > v3)
        v3 = v4;
      ++v2;
    }
    while (v2 != 2);
    a1[93].i8[1] = v3 < 0.000007;
    if (v3 < 0.000007)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214AEE0);
      v5 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CMGyroBiasEstimator::feedGyro: converged!", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10214AEE0);
        v11[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CMGyroBiasEstimator::feedGyro: converged!", v11, 2);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "void CMGyroBiasEstimator::notifyClients(uint64_t)", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
    }
  }
  v6 = a1[103].i8[1];
  if (v6)
    v6 = a1[93].i8[1] == 0;
  a1[93].i8[3] = v6;
  v7 = (void (*)(uint8_t *, __int32 *, float32x2_t *, _QWORD))a1[98];
  if (v7)
  {
    v8 = a1[101].f32[0] + a1[105].f32[0];
    *(float32x2_t *)buf = vadd_f32(a1[100], a1[104]);
    v13 = v8;
    v7(buf, (__int32 *)&a1[101] + 1, a1 + 93, *(_QWORD *)&a1[99]);
  }
}

void sub_10068731C(float32x2_t *a1, float32x2_t *a2, __int8 a3, float32_t a4)
{
  a1[103].i8[0] = 1;
  a1[103].i8[1] = a3;
  a1[103].f32[1] = a4;
  a1[104] = *a2;
  a1[105].i32[0] = a2[1].i32[0];
  sub_1006870DC(a1);
}

double sub_100687348(uint64_t a1)
{
  NSObject *v2;
  double result;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214AEE0);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CMGyroBiasEstimator: biasFitReset", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214AEE0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CMGyroBiasEstimator: biasFitReset", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual void CMGyroBiasEstimator::biasFitReset()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  result = 0.0;
  *(_OWORD *)(a1 + 800) = xmmword_101BB9020;
  *(int32x2_t *)(a1 + 816) = vdup_n_s32(0x3B83126Fu);
  *(_BYTE *)(a1 + 745) = 0;
  return result;
}

float sub_1006874F8(float *a1, float *a2)
{
  float result;

  a1[200] = a1[200] - *a2;
  a1[201] = a1[201] - a2[1];
  result = a1[202] - a2[2];
  a1[202] = result;
  return result;
}

uint64_t sub_10068752C(uint64_t a1, unint64_t a2)
{
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  unint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint8_t buf[4];
  unint64_t v13;
  __int16 v14;
  uint64_t v15;

  if (a2 >= 3)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214AEE0);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v13 = a2;
      v14 = 2048;
      v15 = 3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMVector.h, line 277,invalid index %zu >= %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214AEE0);
      v8 = 134218240;
      v9 = a2;
      v10 = 2048;
      v11 = 3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMVector.h, line 277,invalid index %zu >= %zu.", (size_t)&v8, 22);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "T &CMVector<unsigned long long, 3>::operator[](const size_t) [T = unsigned long long, N = 3]", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return a1 + 8 * a2;
}

uint64_t sub_100687704(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 784) = a2;
  *(_QWORD *)(result + 792) = a3;
  return result;
}

uint64_t sub_100687710(uint64_t result, char a2)
{
  *(_BYTE *)(result + 748) = a2;
  return result;
}

_QWORD *sub_100687718(_QWORD *result)
{
  *result = off_10214AE70;
  return result;
}

void sub_100687728(_QWORD *a1)
{
  *a1 = off_10214AE70;
  operator delete();
}

void sub_100687748(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

unsigned __int16 *sub_100687774(unsigned __int16 *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned __int16 *v4;
  int v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *((unsigned int *)result + 1);
  v3 = *result + (unint64_t)result[1];
  if (v3 < v2)
    v2 = 0;
  v4 = &result[6 * (v3 - v2)];
  v5 = *(_DWORD *)(a2 + 8);
  *((_QWORD *)v4 + 1) = *(_QWORD *)a2;
  *((_DWORD *)v4 + 4) = v5;
  v6 = result[1];
  v7 = *((unsigned int *)result + 1);
  if (v7 <= v6)
  {
    v8 = *result + 1;
    if (v8 < v7)
      LOWORD(v7) = 0;
    *result = v8 - v7;
  }
  else
  {
    result[1] = v6 + 1;
  }
  return result;
}

float sub_1006877E0(unsigned __int16 *a1, unint64_t a2, unint64_t a3)
{
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (!a1[1])
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214AEE0);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: !empty(), file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMVectorBuffer.h, line 93,mean() on empty buffer.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214AEE0);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: !empty(), file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMVectorBuffer.h, line 93,mean() on empty buffer.", v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "const Element CMVectorBufferBase<float, 3>::mean(size_t, size_t) const [T = float, N = 3]", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  return sub_1006879AC(a1, a2, a3) / (float)(a3 - a2);
}

float sub_1006879AC(unsigned __int16 *a1, unint64_t a2, unint64_t a3)
{
  float v3;
  float v4;
  float v5;
  unint64_t v7;
  float *v9;

  v3 = 0.0;
  v4 = 0.0;
  v5 = 0.0;
  if (a2 < a3)
  {
    v7 = a2;
    do
    {
      v9 = (float *)sub_100687A34(a1, v7);
      v3 = v3 + *v9;
      v4 = v4 + v9[1];
      v5 = v5 + v9[2];
      ++v7;
    }
    while (a3 != v7);
  }
  return v3;
}

uint64_t sub_100687A34(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  unint64_t v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  unint64_t v17;
  __int16 v18;
  int v19;

  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214AEE0);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v17 = a2;
      v18 = 1024;
      v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214AEE0);
      v9 = *((_DWORD *)a1 + 1);
      v12 = 134218240;
      v13 = a2;
      v14 = 1024;
      v15 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", (size_t)&v12, 18);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "const T &CMQueue<CMVector<float, 3>>::operator[](const size_t) const [T = CMVector<float, 3>]", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[6 * (v4 - v5) + 4];
}

float32x2_t *sub_100687C30(unsigned __int16 *a1, unint64_t a2, unint64_t a3)
{
  float32x2_t *result;
  __int128 v7;
  float v8;
  float32x2_t v9;
  float v10;
  float32x2_t v11;
  float v12;
  unint64_t v13;
  unint64_t v14;
  float32x2_t v15;
  float v16;
  float32x2_t v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  __int128 v21;
  float v22;
  _WORD v23[8];
  uint8_t buf[1640];

  if (!a1[1])
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214AEE0);
    v18 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "Assertion failed: !empty(), file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMVectorBuffer.h, line 210,variance() on empty buffer.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214AEE0);
      v23[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: !empty(), file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMVectorBuffer.h, line 210,variance() on empty buffer.", v23, 2);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 0, "const CMVector<T, N> CMVectorBufferBase<float, 3>::variance(size_t, size_t) const [T = float, N = 3]", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
  }
  v22 = 1.0 / (float)(a3 - a2);
  result = (float32x2_t *)sub_100687A34(a1, a2);
  v8 = v22;
  v9 = *result;
  v10 = result[1].f32[0];
  v11 = vmul_n_f32(*result, v22);
  v12 = v22 * v10;
  v13 = a2 + 1;
  if (v13 < a3)
  {
    v14 = v13;
    do
    {
      result = (float32x2_t *)sub_100687A34(a1, v14);
      v8 = v22;
      v11 = vadd_f32(v11, vmul_n_f32(*result, v22));
      v12 = v12 + (float)(v22 * result[1].f32[0]);
      ++v14;
    }
    while (a3 != v14);
  }
  v15 = vsub_f32(v9, v11);
  *(float32x2_t *)&v7 = vmul_n_f32(vmul_f32(v15, v15), v8);
  v16 = v8 * (float)((float)(v10 - v12) * (float)(v10 - v12));
  if (v13 < a3)
  {
    do
    {
      v21 = v7;
      result = (float32x2_t *)sub_100687A34(a1, v13);
      *((_QWORD *)&v7 + 1) = *((_QWORD *)&v21 + 1);
      v17 = vsub_f32(*result, v11);
      *(float32x2_t *)&v7 = vadd_f32(*(float32x2_t *)&v21, vmul_n_f32(vmul_f32(v17, v17), v22));
      v16 = v16 + (float)(v22 * (float)((float)(result[1].f32[0] - v12) * (float)(result[1].f32[0] - v12)));
      ++v13;
    }
    while (a3 != v13);
  }
  return result;
}

_QWORD *sub_100687ED0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE v16[24];
  _BYTE *v17;
  _BYTE v18[24];
  _BYTE *v19;
  _BYTE v20[24];
  _BYTE *v21;

  sub_100270E34((uint64_t)v20, a3);
  sub_100270E34((uint64_t)v18, a4);
  sub_100270E34((uint64_t)v16, a5);
  sub_100D6C128((uint64_t)a1, a2, CFSTR("CLX"), 0, 1, (uint64_t)v20, (uint64_t)v18, (uint64_t)v16);
  v9 = v17;
  if (v17 == v16)
  {
    v10 = 4;
    v9 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  v11 = v19;
  if (v19 == v18)
  {
    v12 = 4;
    v11 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_11;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_11:
  v13 = v21;
  if (v21 == v20)
  {
    v14 = 4;
    v13 = v20;
    goto LABEL_15;
  }
  if (v21)
  {
    v14 = 5;
LABEL_15:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  *a1 = off_10214AF10;
  sub_100119F3C(a1 + 17);
  return a1;
}

void sub_100688028(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100D6C25C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1006880EC(_QWORD *a1)
{
  *a1 = off_10214AF10;
  sub_10011A5A8(a1 + 17);
  return sub_100D6C25C((uint64_t)a1);
}

void sub_10068811C(_QWORD *a1)
{
  *a1 = off_10214AF10;
  sub_10011A5A8(a1 + 17);
  sub_100D6C25C((uint64_t)a1);
  operator delete();
}

uint64_t sub_100688160(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v5;
  id v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  id v10;
  uint8_t buf[4];
  id v12;

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_10214AFB0);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    *(_DWORD *)buf = 136446210;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,clearOutAssetData", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10214AFB0);
    v5 = qword_1022A02A8;
    v6 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v9 = 136446210;
    v10 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 0, "#CLConfig,%{public}s,clearOutAssetData", &v9, 12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLClxConfigAsset::clearOutAssetData()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  sub_100119F3C(buf);
  sub_10052502C(a1 + 136, (uint64_t)buf);
  return sub_10011A5A8(buf);
}

void sub_100688338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_100688354(uint64_t a1)
{
  NSObject *v2;
  id v3;
  int v4;
  int v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  void *v11;
  unint64_t size;
  int v13;
  void *v14;
  uint64_t v15;
  id v16;
  int v17;
  int v18;
  const char *v19;
  std::string *v20;
  __int128 __dst;
  _BYTE v22[7];
  char v23;
  void *__p[2];
  unsigned __int8 v25;
  _DWORD v26[2];
  std::string v27;
  std::string buf[68];

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_10214AFB0);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v4 = sub_1007FA8FC(*(void **)(a1 + 128));
    v5 = sub_1007FA8C8(*(void **)(a1 + 128));
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v4;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,sending kNotificationClxSettings for asset,compatibilityVersion,%{public}d,contentVersion,%{public}d", (uint8_t *)buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_10214AFB0);
    v15 = qword_1022A02A8;
    v16 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v17 = sub_1007FA8FC(*(void **)(a1 + 128));
    v18 = sub_1007FA8C8(*(void **)(a1 + 128));
    LODWORD(v27.__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)v27.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
    WORD2(v27.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&v27.__r_.__value_.__r.__words[1] + 6) = v17;
    WORD1(v27.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(v27.__r_.__value_.__r.__words[2]) = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 0, "#CLConfig,%{public}s,sending kNotificationClxSettings for asset,compatibilityVersion,%{public}d,contentVersion,%{public}d", &v27, 24);
    v20 = (std::string *)v19;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLClxConfigAsset::sendNotifications()", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  sub_1015A2E04(&v27, "#CLConfig,");
  v6 = std::string::append(&v27, (const std::string::value_type *)objc_msgSend(*(id *)(a1 + 16), "UTF8String"));
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  buf[0].__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  sub_1015A2E04(__p, ",kNotificationClxSettings,");
  if ((v25 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v25 & 0x80u) == 0)
    v9 = v25;
  else
    v9 = (std::string::size_type)__p[1];
  v10 = std::string::append(buf, (const std::string::value_type *)v8, v9);
  v11 = (void *)v10->__r_.__value_.__r.__words[0];
  size = v10->__r_.__value_.__l.__size_;
  v26[0] = v10->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v26 + 3) = *(_DWORD *)((char *)&v10->__r_.__value_.__r.__words[2] + 3);
  v13 = SHIBYTE(v10->__r_.__value_.__r.__words[2]);
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if ((char)v25 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v27.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_18;
  }
  else if ((v13 & 0x80000000) == 0)
  {
LABEL_18:
    *(_QWORD *)&__dst = v11;
    *((_QWORD *)&__dst + 1) = size;
    *(_DWORD *)v22 = v26[0];
    *(_DWORD *)&v22[3] = *(_DWORD *)((char *)v26 + 3);
    v23 = v13;
    goto LABEL_21;
  }
  sub_100115CE4(&__dst, v11, size);
LABEL_21:
  v14 = (void *)sub_10011A5AC(a1 + 136);
  sub_1007FA930(&__dst, v14);
  if (v23 < 0)
    operator delete((void *)__dst);
  sub_100D6EF24(a1, 3, a1 + 136);
  if (v13 < 0)
    operator delete(v11);
}

void sub_1006886AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a23 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100688728(uint64_t a1)
{
  sub_100D6D640(a1, CFSTR("settings.plist"), a1 + 136);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
}

void sub_100688760(id a1)
{
  qword_1022A02A8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

uint64_t sub_10068878C()
{
  if (qword_1023031F0 != -1)
    dispatch_once(&qword_1023031F0, &stru_10214AFD0);
  return qword_102310A80;
}

void sub_1006887CC(id a1)
{
  operator new();
}

void sub_10068880C()
{
  operator delete();
}

int64x2_t *sub_100688830(int64x2_t *a1)
{
  void *v3[2];
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  __int128 __p;
  uint64_t v8;
  uint64_t v9;

  sub_1015A2E04(v3, "");
  v5 = 0x500000000;
  v6 = 1;
  if (SHIBYTE(v4) < 0)
  {
    sub_100115CE4(&__p, v3[0], (unint64_t)v3[1]);
  }
  else
  {
    __p = *(_OWORD *)v3;
    v8 = v4;
  }
  v9 = 0;
  sub_10068C350(a1, (uint64_t)&v5);
  if (SHIBYTE(v8) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v4) < 0)
    operator delete(v3[0]);
  a1->i64[0] = (uint64_t)off_10214B000;
  sub_10055D44C(&a1[16].u64[1], "CLTimeZoneDatabase", 0, 1);
  (*(void (**)(int64x2_t *))(a1->i64[0] + 24))(a1);
  return a1;
}

void sub_100688910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100688968(_QWORD *a1)
{
  *a1 = off_10214B000;
  sub_10055D4D0(a1 + 33);
  return sub_10068C474(a1);
}

void sub_10068899C(_QWORD *a1)
{
  *a1 = off_10214B000;
  sub_10055D4D0(a1 + 33);
  sub_10068C474(a1);
  operator delete();
}

uint64_t sub_1006889E4(uint64_t a1)
{
  _QWORD *v2;
  size_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;
  std::string *p_p;
  uint64_t v16;
  uint64_t v17;
  std::string __p;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD v22[8];
  std::string v23;
  uint64_t v24;

  sub_10068EDAC((_QWORD *)a1);
  sub_100263E50((uint64_t)v20);
  sub_10063E994(a1 + 8, *(_QWORD *)(a1 + 176), *(sqlite3_stmt **)(a1 + 184));
  v2 = sub_100263F7C(&v21, (uint64_t)"SELECT ", 7);
  v3 = strlen("ROWID");
  v4 = sub_100263F7C(v2, (uint64_t)"ROWID", v3);
  v5 = sub_100263F7C(v4, (uint64_t)", ", 2);
  v6 = sub_100263F7C(v5, (uint64_t)"Latitude", 8);
  v7 = sub_100263F7C(v6, (uint64_t)", ", 2);
  v8 = sub_100263F7C(v7, (uint64_t)"Longitude", 9);
  v9 = sub_100263F7C(v8, (uint64_t)" FROM ", 6);
  v10 = strlen("Names");
  v11 = sub_100263F7C(v9, (uint64_t)"Names", v10);
  v12 = sub_100263F7C(v11, (uint64_t)" WHERE ", 7);
  v13 = strlen("ZoneName");
  v14 = sub_100263F7C(v12, (uint64_t)"ZoneName", v13);
  sub_100263F7C(v14, (uint64_t)"=?", 2);
  std::stringbuf::str(&__p, v22);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 176) = sub_10063D314(a1 + 8, (char *)p_p);
  *(_QWORD *)(a1 + 184) = v16;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  memset(&__p, 0, sizeof(__p));
  std::string::operator=(&v23, &__p);
  sub_1004ADDC8((uint64_t)v22);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)((char *)v20
  v21 = v17;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  std::streambuf::~streambuf(v22);
  return std::ios::~ios(&v24);
}

void sub_100688C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100688C38(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v8;
  sqlite3_int64 *v9;
  double *v10;
  NSObject *v11;
  sqlite3_int64 v12;
  double v13;
  uint64_t v14;
  NSObject *v15;
  sqlite3_int64 v16;
  double v17;
  sqlite3_int64 v18;
  double v19;
  const char *v20;
  uint8_t *v21;
  double v22;
  uint64_t v23;
  double *v24;
  sqlite3_int64 v25;
  double v26;
  double v27;
  NSObject *v28;
  sqlite3_int64 v29;
  double v30;
  uint64_t v31;
  sqlite3_int64 v32;
  double v33;
  uint64_t v34;
  const char *v35;
  uint8_t *v36;
  NSObject *v37;
  sqlite3_int64 v38;
  double v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  NSObject *v43;
  NSObject *v45;
  const char *v46;
  sqlite3_int64 v47;
  double v48;
  const char *v49;
  uint8_t *v50;
  sqlite3_int64 v51;
  double v52;
  uint64_t v53;
  const char *v54;
  const char *v55;
  uint8_t *v56;
  double v57;
  const char *v58;
  double v59;
  void *__p;
  double *v61;
  uint64_t v62;
  double v63;
  void *v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  __int16 v68;
  int v69;
  sqlite3_int64 v70;
  __int16 v71;
  double v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  uint8_t buf[4];
  sqlite3_int64 v78;
  __int16 v79;
  double v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  uint64_t v84;

  v8 = a1 + 264;
  v67 = a1 + 264;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 264) + 16))(a1 + 264);
  v68 = 256;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  *a4 = 0.0;
  v9 = (sqlite3_int64 *)(a2 + 4);
  v10 = (double *)(a2 + 12);
  v63 = 0.0;
  if ((sub_10068C544(a1, (double *)(a2 + 4), (double *)(a2 + 12), (sqlite3_int64 **)&v64) & 1) == 0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214B038);
    v15 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v16 = *v9;
      v17 = *v10;
      *(_DWORD *)buf = 134218240;
      v78 = v16;
      v79 = 2048;
      v80 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Couldn't get time zone for point <%+.8f,%+.8f>", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_60;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214B038);
    v18 = *v9;
    v19 = *v10;
    v69 = 134218240;
    v70 = v18;
    v71 = 2048;
    v72 = v19;
    LODWORD(v57) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Couldn't get time zone for point <%+.8f,%+.8f>", COERCE_DOUBLE(&v69), v57);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLTimeZoneDatabase::getTimeZoneAndDistance(const CLDaemonLocation &, std::string &, double &)", "%s\n", v20);
    goto LABEL_73;
  }
  if (v64 != v65)
  {
    if ((unint64_t)(v65 - (_BYTE *)v64) >= 0x11)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214B038);
      v11 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *v9;
        v13 = *v10;
        *(_DWORD *)buf = 134218240;
        v78 = v12;
        v79 = 2048;
        v80 = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Point <%+.8f,%+.8f> in multiple time zone polygons", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10214B038);
        v47 = *v9;
        v48 = *v10;
        v69 = 134218240;
        v70 = v47;
        v71 = 2048;
        v72 = v48;
        LODWORD(v57) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Point <%+.8f,%+.8f> in multiple time zone polygons", COERCE_DOUBLE(&v69), v57);
        v50 = (uint8_t *)v49;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLTimeZoneDatabase::getTimeZoneAndDistance(const CLDaemonLocation &, std::string &, double &)", "%s\n", v49);
        if (v50 != buf)
          free(v50);
      }
    }
    v14 = *((_QWORD *)v64 + 1);
    v63 = *(double *)v64;
    *(_QWORD *)a4 = v14;
    goto LABEL_53;
  }
  __p = 0;
  v61 = 0;
  v62 = 0;
  v22 = *(double *)(a2 + 20);
  if (v22 > 20000.0)
    v22 = 20000.0;
  v59 = v22;
  buf[0] = 1;
  v23 = sub_10068C574(a1, (double *)(a2 + 4), (double *)(a2 + 12), &v59, (sqlite3_int64 **)&__p, buf);
  if (!(_DWORD)v23 || (v24 = (double *)__p, v61 == __p))
  {
    sub_1006897C4(v23, a2, a3, a4);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214B038);
    v37 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v38 = *v9;
      v39 = *v10;
      if (*(char *)(a3 + 23) >= 0)
        v40 = a3;
      else
        v40 = *(_QWORD *)a3;
      *(_DWORD *)buf = 134218498;
      v78 = v38;
      v79 = 2048;
      v80 = v39;
      v81 = 2080;
      v82 = v40;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "Point <%+.8f,%+.8f> not in any time zone polygon; default time zone is %s, but we're not using it",
        buf,
        0x20u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_49;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214B038);
    v51 = *v9;
    v52 = *v10;
    if (*(char *)(a3 + 23) >= 0)
      v53 = a3;
    else
      v53 = *(_QWORD *)a3;
    v69 = 134218498;
    v70 = v51;
    v71 = 2048;
    v72 = v52;
    v73 = 2080;
    v74 = v53;
    LODWORD(v57) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Point <%+.8f,%+.8f> not in any time zone polygon; default time zone is %s, but we're not using it",
      COERCE_DOUBLE(&v69),
      v57,
      v58);
    v36 = (uint8_t *)v54;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTimeZoneDatabase::getTimeZoneAndDistance(const CLDaemonLocation &, std::string &, double &)", "%s\n", v54);
    goto LABEL_85;
  }
  v25 = *(_QWORD *)__p;
  v63 = *(double *)__p;
  v26 = 1.79769313e308;
  do
  {
    v27 = v24[1];
    if (v27 < v26)
    {
      v25 = *(_QWORD *)v24;
      v63 = *v24;
      v26 = v27;
    }
    v24 += 2;
  }
  while (v24 != v61);
  if (v26 > 1000.0)
  {
    sub_1006897C4(v23, a2, a3, a4);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214B038);
    v28 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v29 = *v9;
      v30 = *v10;
      if (*(char *)(a3 + 23) >= 0)
        v31 = a3;
      else
        v31 = *(_QWORD *)a3;
      *(_DWORD *)buf = 134218754;
      v78 = v29;
      v79 = 2048;
      v80 = v30;
      v81 = 2048;
      v82 = *(_QWORD *)&v26;
      v83 = 2080;
      v84 = v31;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "Point <%+.8f,%+.8f> not in any time zone polygon; closest polygon is %f meters away; default time zone is %s, bu"
        "t we're not using it",
        buf,
        0x2Au);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_49;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214B038);
    v32 = *v9;
    v33 = *v10;
    if (*(char *)(a3 + 23) >= 0)
      v34 = a3;
    else
      v34 = *(_QWORD *)a3;
    v69 = 134218754;
    v70 = v32;
    v71 = 2048;
    v72 = v33;
    v73 = 2048;
    v74 = *(_QWORD *)&v26;
    v75 = 2080;
    v76 = v34;
    LODWORD(v57) = 42;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Point <%+.8f,%+.8f> not in any time zone polygon; closest polygon is %f meters away; default time zone is %s, but "
      "we're not using it",
      COERCE_DOUBLE(&v69),
      v57,
      *(double *)&v58,
      *(const char **)&v59);
    v36 = (uint8_t *)v35;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTimeZoneDatabase::getTimeZoneAndDistance(const CLDaemonLocation &, std::string &, double &)", "%s\n", v35);
LABEL_85:
    if (v36 != buf)
      free(v36);
LABEL_49:
    v41 = 0;
    *a4 = 0.0;
    goto LABEL_50;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214B038);
  v45 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218496;
    v78 = v25;
    v79 = 2048;
    v80 = v26;
    v81 = 2048;
    v82 = ((char *)v61 - (_BYTE *)__p) >> 4;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "Not in any polygons; falling back to closest nearby time zone ID %lld (distance %f, %ld possibilities)",
      buf,
      0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214B038);
    v69 = 134218496;
    v70 = v25;
    v71 = 2048;
    v72 = v26;
    v73 = 2048;
    v74 = ((char *)v61 - (_BYTE *)__p) >> 4;
    LODWORD(v57) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Not in any polygons; falling back to closest nearby time zone ID %lld (distance %f, %ld possibilities)",
      &v69,
      v57,
      v58);
    v56 = (uint8_t *)v55;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTimeZoneDatabase::getTimeZoneAndDistance(const CLDaemonLocation &, std::string &, double &)", "%s\n", v55);
    if (v56 != buf)
      free(v56);
  }
  v41 = 1;
LABEL_50:
  if (__p)
  {
    v61 = (double *)__p;
    operator delete(__p);
  }
  if ((v41 & 1) == 0)
    goto LABEL_60;
LABEL_53:
  if ((sub_10068DA58(a1, (sqlite3_int64 *)&v63, (std::string *)a3) & 1) != 0)
  {
    v42 = 1;
    goto LABEL_61;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214B038);
  v43 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 134349056;
    v78 = *(_QWORD *)&v63;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_FAULT, "Could not get time zone name for zone ID %{public}lld", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214B038);
    v69 = 134349056;
    v70 = *(_QWORD *)&v63;
    LODWORD(v57) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Could not get time zone name for zone ID %{public}lld", &v69, *(_QWORD *)&v57);
    v21 = (uint8_t *)v46;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLTimeZoneDatabase::getTimeZoneAndDistance(const CLDaemonLocation &, std::string &, double &)", "%s\n", v46);
LABEL_73:
    if (v21 != buf)
      free(v21);
  }
LABEL_60:
  v42 = 0;
LABEL_61:
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  return v42;
}

void sub_100689758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20)
{
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  sub_10187E514((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1006897C4(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  double v7;
  _QWORD *v8;
  int v9;
  const char *v10;
  _QWORD *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  _QWORD v20[10];
  char v21;
  uint64_t v22;

  v7 = *(double *)(a2 + 12);
  sub_100263E50((uint64_t)v18);
  v8 = sub_100263F7C(&v19, (uint64_t)"Etc/GMT", 7);
  v9 = vcvtmd_s64_f64((v7 + 7.5) / 15.0);
  if (v9 >= 1)
    v10 = "-";
  else
    v10 = "+";
  v11 = sub_100263F7C(v8, (uint64_t)v10, 1);
  if (v9 >= 0)
    v12 = v9;
  else
    v12 = -v9;
  std::ostream::operator<<(v11, v12);
  std::stringbuf::str(&v16, v20);
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(_OWORD *)a3 = v16;
  *(_QWORD *)(a3 + 16) = v17;
  v13 = *(double *)(a2 + 12) + 7.5 - floor((*(double *)(a2 + 12) + 7.5) / 15.0) * 15.0;
  if (v13 > 15.0 - v13)
    v13 = 15.0 - v13;
  *a4 = v13;
  *(_QWORD *)((char *)v18
  v19 = v14;
  if (v21 < 0)
    operator delete((void *)v20[8]);
  std::streambuf::~streambuf(v20);
  std::ios::~ios(&v22);
  return 1;
}

void sub_10068992C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100689944(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100689A54()
{
  uint64_t result;

  result = sub_1001B7910();
  if ((result & 0x20) != 0)
    operator new();
  return result;
}

void sub_100689A9C()
{
  operator delete();
}

uint64_t sub_100689AC0()
{
  if (qword_1023031F8 != -1)
    dispatch_once(&qword_1023031F8, &stru_10214B058);
  return qword_102310A88;
}

uint64_t sub_100689B04(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 *v3;
  unsigned __int8 v5[3];
  unsigned __int8 v6;

  v2 = (_QWORD *)sub_10076AA88(a1, 8);
  *v2 = off_10214B088;
  v3 = (unsigned __int8 *)v2 + 36;
  *(_BYTE *)(a1 + 36) = sub_100762264();
  v6 = 1;
  sub_1018BF25C((unsigned __int8 *)(a1 + 37), "EnableVisualLocalization", &v6, 0);
  sub_1018BF25C(v5, "AlwaysOnDeviceMotion10", v3, 0);
  *(_BYTE *)(a1 + 36) = v5[1];
  sub_10076AAEC((uint64_t *)a1);
  return a1;
}

void sub_100689B94(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10076AAA0(v1);
  _Unwind_Resume(a1);
}

void sub_100689BB4(_QWORD *a1)
{
  sub_10076AAA0(a1);
  operator delete();
}

BOOL sub_100689BD8(uint64_t a1)
{
  return (sub_1001B7910() & 0x20) != 0 && *(_BYTE *)(a1 + 36) != 0;
}

BOOL sub_100689C10(uint64_t a1)
{
  return (sub_1001B7910() & 0x20) != 0 && *(_BYTE *)(a1 + 38) != 0;
}

unint64_t sub_100689C48()
{
  return ((unint64_t)sub_1001B7910() >> 5) & 1;
}

uint64_t sub_10068A390(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  int v11;
  void *String;
  uint64_t result;
  char v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        String = (void *)PBReaderReadString(a2);

        *(_QWORD *)(a1 + 56) = String;
        continue;
      case 2u:
        v15 = 0;
        v16 = 0;
        v17 = 0;
        *(_WORD *)(a1 + 72) |= 8u;
        while (2)
        {
          v18 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v19 = v18 + 1;
          if (v18 == -1 || v19 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v20 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19;
            v17 |= (unint64_t)(v20 & 0x7F) << v15;
            if (v20 < 0)
            {
              v15 += 7;
              v10 = v16++ >= 9;
              if (v10)
              {
                LODWORD(v17) = 0;
                goto LABEL_82;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v17) = 0;
LABEL_82:
        v56 = 32;
        goto LABEL_103;
      case 3u:
        v21 = 0;
        v22 = 0;
        v17 = 0;
        *(_WORD *)(a1 + 72) |= 0x10u;
        while (2)
        {
          v23 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v24 = v23 + 1;
          if (v23 == -1 || v24 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24;
            v17 |= (unint64_t)(v25 & 0x7F) << v21;
            if (v25 < 0)
            {
              v21 += 7;
              v10 = v22++ >= 9;
              if (v10)
              {
                LODWORD(v17) = 0;
                goto LABEL_86;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v17) = 0;
LABEL_86:
        v56 = 36;
        goto LABEL_103;
      case 4u:
        v26 = 0;
        v27 = 0;
        v17 = 0;
        *(_WORD *)(a1 + 72) |= 0x100u;
        while (2)
        {
          v28 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v29 = v28 + 1;
          if (v28 == -1 || v29 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29;
            v17 |= (unint64_t)(v30 & 0x7F) << v26;
            if (v30 < 0)
            {
              v26 += 7;
              v10 = v27++ >= 9;
              if (v10)
              {
                LODWORD(v17) = 0;
                goto LABEL_90;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v17) = 0;
LABEL_90:
        v56 = 64;
        goto LABEL_103;
      case 5u:
        *(_WORD *)(a1 + 72) |= 1u;
        v31 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v31 <= 0xFFFFFFFFFFFFFFF7 && v31 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v32 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v31);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v31 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v32 = 0;
        }
        v57 = 8;
        goto LABEL_114;
      case 6u:
        *(_WORD *)(a1 + 72) |= 2u;
        v33 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v33 <= 0xFFFFFFFFFFFFFFF7 && v33 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v32 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v32 = 0;
        }
        v57 = 16;
        goto LABEL_114;
      case 7u:
        *(_WORD *)(a1 + 72) |= 4u;
        v34 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v34 <= 0xFFFFFFFFFFFFFFF7 && v34 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v32 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v32 = 0;
        }
        v57 = 24;
LABEL_114:
        *(_QWORD *)(a1 + v57) = v32;
        continue;
      case 8u:
        v35 = 0;
        v36 = 0;
        v17 = 0;
        *(_WORD *)(a1 + 72) |= 0x80u;
        while (2)
        {
          v37 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v38 = v37 + 1;
          if (v37 == -1 || v38 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v39 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v38;
            v17 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              v10 = v36++ >= 9;
              if (v10)
              {
                LODWORD(v17) = 0;
                goto LABEL_94;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v17) = 0;
LABEL_94:
        v56 = 48;
        goto LABEL_103;
      case 9u:
        v40 = 0;
        v41 = 0;
        v17 = 0;
        *(_WORD *)(a1 + 72) |= 0x40u;
        while (2)
        {
          v42 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v43 = v42 + 1;
          if (v42 == -1 || v43 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v44 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v42);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v43;
            v17 |= (unint64_t)(v44 & 0x7F) << v40;
            if (v44 < 0)
            {
              v40 += 7;
              v10 = v41++ >= 9;
              if (v10)
              {
                LODWORD(v17) = 0;
                goto LABEL_98;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v17) = 0;
LABEL_98:
        v56 = 44;
        goto LABEL_103;
      case 0xAu:
        v45 = 0;
        v46 = 0;
        v17 = 0;
        *(_WORD *)(a1 + 72) |= 0x20u;
        while (2)
        {
          v47 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v48 = v47 + 1;
          if (v47 == -1 || v48 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v49 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v47);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v48;
            v17 |= (unint64_t)(v49 & 0x7F) << v45;
            if (v49 < 0)
            {
              v45 += 7;
              v10 = v46++ >= 9;
              if (v10)
              {
                LODWORD(v17) = 0;
                goto LABEL_102;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v17) = 0;
LABEL_102:
        v56 = 40;
LABEL_103:
        *(_DWORD *)(a1 + v56) = v17;
        continue;
      case 0xBu:
        v50 = 0;
        v51 = 0;
        v52 = 0;
        *(_WORD *)(a1 + 72) |= 0x200u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v53 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v54 = v53 + 1;
      if (v53 == -1 || v54 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v55 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v53);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v54;
      v52 |= (unint64_t)(v55 & 0x7F) << v50;
      if ((v55 & 0x80) == 0)
        goto LABEL_105;
      v50 += 7;
      v10 = v51++ >= 9;
      if (v10)
      {
        v52 = 0;
        goto LABEL_107;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_105:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v52 = 0;
LABEL_107:
    *(_BYTE *)(a1 + 68) = v52 != 0;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10068B78C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  std::string::value_type v7;
  int v8;
  std::string *v9;
  int v10;
  std::string __str;
  char v12;
  char *v13;

  v4 = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v5 = a1 + 1;
  do
  {
    while (1)
    {
      v12 = *(_BYTE *)(a1 + v4);
      memset(&__str, 0, sizeof(__str));
      v6 = (unsigned __int8 *)(v5 + v4);
      for (v4 += 2; ; ++v4)
      {
        v8 = *v6++;
        v7 = v8;
        if (!v8)
          break;
        std::string::push_back(&__str, v7);
      }
      v13 = &v12;
      v9 = (std::string *)sub_10068BF58(a2, &v12, (uint64_t)&unk_101B9EB60, &v13);
      std::string::operator=(v9 + 1, &__str);
      v10 = *(unsigned __int8 *)(a1 + v4);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        break;
      if (!*(_BYTE *)(a1 + v4))
        return;
    }
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  while (v10);
}

void sub_10068B86C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  sub_100127554(v15);
  _Unwind_Resume(a1);
}

NSString *sub_10068B898(void *a1)
{
  id v2;
  std::string *v3;
  std::string *v4;
  id v5;
  uint64_t v6;
  void **v7;
  unsigned int v8;
  const char *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  unsigned int v15;
  id v16;
  const char *v17;
  std::string *p_p;
  unsigned int v19;
  const char *v20;
  NSString *v21;
  const char *v23;
  void **v24;
  id v25;
  std::string *v26;
  std::string __p;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  void *v33[2];
  char v34;
  unsigned __int8 v35;

  sub_10068BC1C(objc_msgSend(a1, "appleManufacturerData"), (uint64_t)v33);
  v2 = objc_msgSend(objc_msgSend(a1, "identifier"), "UTF8String");
  sub_10068BCAC(objc_msgSend(a1, "addressData"), &v32);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = &v32;
  else
    v3 = (std::string *)v32.__r_.__value_.__r.__words[0];
  sub_10068BCAC(objc_msgSend(a1, "appleManufacturerData"), &v31);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v31;
  else
    v4 = (std::string *)v31.__r_.__value_.__r.__words[0];
  v5 = objc_msgSend(a1, "rawRSSI");
  v6 = v35;
  if (v34 >= 0)
    v7 = v33;
  else
    v7 = (void **)v33[0];
  v8 = objc_msgSend(a1, "nearbyActivityLevel");
  if (v8 > 0xE)
    v9 = "?";
  else
    v9 = off_10214B0C8[(char)v8];
  sub_10068BDB4(objc_msgSend(a1, "nearbyActionType"), qword_102310AB8, &v30);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v30;
  else
    v10 = (std::string *)v30.__r_.__value_.__r.__words[0];
  v26 = v10;
  v11 = &v29;
  sub_10068BDB4(objc_msgSend(a1, "nearbyFlags"), qword_102310AE0, &v29);
  v23 = v9;
  v24 = v7;
  v25 = v5;
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = (std::string *)v29.__r_.__value_.__r.__words[0];
  v12 = &v28;
  sub_10068BDB4(objc_msgSend(a1, "scanFlags"), qword_102310B08, &v28);
  v13 = v4;
  v14 = v3;
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v12 = (std::string *)v28.__r_.__value_.__r.__words[0];
  v15 = objc_msgSend(a1, "objectDiscoveryMode");
  v16 = v2;
  if (v15 > 2)
    v17 = "?";
  else
    v17 = off_10214B140[v15];
  p_p = &__p;
  sub_10068BDB4(objc_msgSend(a1, "objectSetupFlags"), qword_102310B30, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v19 = objc_msgSend(a1, "proximityPairingSubType");
  if (v19 > 5)
    v20 = "?";
  else
    v20 = off_10214B158[v19];
  v21 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s,%s,%s,%d,%u,%s,%s,%s,%s,%s,%s,%s,%s"), v16, v14, v13, v25, v6, v24, v23, v26, v11, v12, v17, p_p, v20);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (v34 < 0)
    operator delete(v33[0]);
  return v21;
}

void sub_10068BB64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  if (a37 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (*(char *)(v43 - 169) < 0)
    operator delete(*(void **)(v43 - 192));
  if (*(char *)(v43 - 145) < 0)
    operator delete(*(void **)(v43 - 168));
  if (*(char *)(v43 - 121) < 0)
    operator delete(*(void **)(v43 - 144));
  if (*(char *)(v43 - 97) < 0)
    operator delete(*(void **)(v43 - 120));
  _Unwind_Resume(exception_object);
}

_BYTE *sub_10068BC1C@<X0>(_BYTE *result@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  char v4;
  unint64_t v5;
  char *v6;

  if (result
    && (v3 = result, result = objc_msgSend(result, "length"), (unint64_t)result > 2)
    && (result = objc_msgSend(v3, "bytes"), *result == 76)
    && !result[1])
  {
    v5 = (char)result[2];
    v4 = result[2];
    if (v5 > 0x12)
      v6 = "?";
    else
      v6 = off_10214B188[v5];
    result = sub_1015A2E04((_QWORD *)a2, v6);
  }
  else
  {
    v4 = 0;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  *(_BYTE *)(a2 + 24) = v4;
  return result;
}

id sub_10068BCAC@<X0>(id result@<X0>, std::string *a2@<X8>)
{
  void *v2;
  unsigned __int8 *v4;
  uint64_t v5;
  unint64_t i;
  int v7;
  char *v8;
  id v9;
  char *v10;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (result)
  {
    v2 = result;
    result = objc_msgSend(result, "length");
    if (result)
    {
      result = objc_msgSend(v2, "bytes");
      if (result)
      {
        std::string::resize(a2, 2 * (_QWORD)objc_msgSend(v2, "length"), 0);
        v4 = (unsigned __int8 *)objc_msgSend(v2, "bytes");
        v5 = 0;
        for (i = 0; ; ++i)
        {
          result = objc_msgSend(v2, "length");
          if ((unint64_t)result <= i)
            break;
          v7 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
          v8 = (char *)a2->__r_.__value_.__r.__words[0];
          v9 = objc_msgSend(v2, "length");
          if (v7 >= 0)
            v10 = (char *)a2;
          else
            v10 = v8;
          snprintf(&v10[v5], 2 * (_QWORD)v9, "%02x", v4[i]);
          v5 += 2;
        }
      }
    }
  }
  return result;
}

void sub_10068BD90(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void *sub_10068BDB4@<X0>(void *result@<X0>, _QWORD *a2@<X1>, std::string *a3@<X8>)
{
  unsigned int v4;
  std::string *v5;
  uint64_t **v6;
  uint64_t **v7;
  const std::string::value_type *v8;
  uint64_t *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int i;
  uint64_t **v14;
  uint64_t **v15;
  const std::string::value_type *v16;
  uint64_t *v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  uint64_t v21;
  std::string::size_type size;
  char v23;
  char v24;
  char v25;
  char v26;

  v4 = result;
  v5 = a3;
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (!(_DWORD)result)
  {
    v26 = 0;
    result = sub_10068C1A8(a2, &v26);
    if (result)
    {
      v25 = 0;
      v6 = sub_10068C1A8(a2, &v25);
      if (!v6)
        sub_100263950("unordered_map::at: key not found");
      v9 = v6[3];
      v7 = v6 + 3;
      v8 = (const std::string::value_type *)v9;
      v10 = *((char *)v7 + 23);
      if (v10 >= 0)
        v11 = (const std::string::value_type *)v7;
      else
        v11 = v8;
      if (v10 >= 0)
        v12 = *((unsigned __int8 *)v7 + 23);
      else
        v12 = (std::string::size_type)v7[1];
      std::string::append(v5, v11, v12);
      result = std::string::append(v5, ";");
    }
  }
  for (i = 0; i != 32; ++i)
  {
    if (((v4 >> i) & 1) != 0)
    {
      v24 = i;
      result = sub_10068C1A8(a2, &v24);
      if (result)
      {
        v23 = i;
        v14 = sub_10068C1A8(a2, &v23);
        if (!v14)
          sub_100263950("unordered_map::at: key not found");
        v17 = v14[3];
        v15 = v14 + 3;
        v16 = (const std::string::value_type *)v17;
        v18 = *((char *)v15 + 23);
        if (v18 >= 0)
          v19 = (const std::string::value_type *)v15;
        else
          v19 = v16;
        if (v18 >= 0)
          v20 = *((unsigned __int8 *)v15 + 23);
        else
          v20 = (std::string::size_type)v15[1];
        std::string::append(v5, v19, v20);
        result = std::string::append(v5, ";");
      }
    }
  }
  if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
  {
    size = v5->__r_.__value_.__l.__size_;
    if (!size)
      return result;
    v21 = size - 1;
    v5->__r_.__value_.__l.__size_ = v21;
    v5 = (std::string *)v5->__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&v5->__r_.__value_.__s + 23))
      return result;
    v21 = HIBYTE(v5->__r_.__value_.__r.__words[2]) - 1;
    *((_BYTE *)&v5->__r_.__value_.__s + 23) = v21;
  }
  v5->__r_.__value_.__s.__data_[v21] = 0;
  return result;
}

void sub_10068BF24(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10068BF58(uint64_t a1, char *a2, uint64_t a3, _BYTE **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_BYTE *)v11 + 16) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_10012E444(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v11 = *v21;
LABEL_38:
    *v21 = v11;
    goto LABEL_39;
  }
  *v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    v22 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_10068C18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  sub_10055A1C0(v11, v10);
  _Unwind_Resume(a1);
}

uint64_t **sub_10068C1A8(_QWORD *a1, char *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t ***v6;
  uint64_t **result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t **)*result)
  {
    v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int8 *)result + 16) == v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

uint64_t sub_10068C25C()
{
  sub_10068B78C((uint64_t)&unk_101BB90CE, (uint64_t)&unk_102310A90);
  __cxa_atexit((void (*)(void *))sub_10068B894, &unk_102310A90, (void *)&_mh_execute_header);
  sub_10068B78C((uint64_t)&unk_101BB90F2, (uint64_t)&unk_102310AB8);
  __cxa_atexit((void (*)(void *))sub_10068B894, &unk_102310AB8, (void *)&_mh_execute_header);
  sub_10068B78C((uint64_t)&unk_101BB911B, (uint64_t)&unk_102310AE0);
  __cxa_atexit((void (*)(void *))sub_10068B894, &unk_102310AE0, (void *)&_mh_execute_header);
  sub_10068B78C((uint64_t)&unk_101BB9193, (uint64_t)&unk_102310B08);
  __cxa_atexit((void (*)(void *))sub_10068B894, &unk_102310B08, (void *)&_mh_execute_header);
  sub_10068B78C((uint64_t)"\aNFC", (uint64_t)&unk_102310B30);
  return __cxa_atexit((void (*)(void *))sub_10068B894, &unk_102310B30, (void *)&_mh_execute_header);
}

void sub_10068C350(int64x2_t *a1, uint64_t a2)
{
  int64x2_t *v4;

  a1->i64[0] = (uint64_t)off_10214B2A8;
  v4 = a1 + 9;
  sub_100631F84(&a1->u64[1], a2);
  sub_100E81598(v4, 0, 0);
  sub_100E81598((int64x2_t *)a1[10].i64, 0, 0);
  sub_100E81598((int64x2_t *)a1[11].i64, 0, 0);
  sub_100E81598((int64x2_t *)a1[12].i64, 0, 0);
  sub_100E81598((int64x2_t *)a1[13].i64, 0, 0);
  a1[14] = vdupq_n_s64(0x7FF8000000000000uLL);
  a1[15].i64[0] = (uint64_t)a1[15].i64;
  a1[15].i64[1] = (uint64_t)a1[15].i64;
  a1[16].i64[0] = 0;
  if (*(_BYTE *)(a2 + 8))
  {
    (*(void (**)(int64x2_t *))(a1->i64[0] + 24))(a1);
  }
  else
  {
    sub_1019043E8();
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Utilities/CLPolygonDatabase.mm", 78, "CLPolygonDatabase");
    __break(1u);
  }
}

void sub_10068C450(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1006322C0(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10068C474(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = off_10214B2A8;
  v2 = a1 + 1;
  sub_1000F34E0(a1 + 30);
  sub_1006322C0(v2);
  return a1;
}

_QWORD *sub_10068C4B4(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = off_10214B2A8;
  v2 = a1 + 1;
  sub_1000F34E0(a1 + 30);
  sub_1006322C0(v2);
  return a1;
}

void sub_10068C4F4(_QWORD *a1)
{
  _QWORD *v1;

  *a1 = off_10214B2A8;
  v1 = a1 + 1;
  sub_1000F34E0(a1 + 30);
  sub_1006322C0(v1);
  operator delete();
}

uint64_t sub_10068C544(uint64_t a1, double *a2, double *a3, sqlite3_int64 **a4)
{
  unsigned __int8 v5;
  uint64_t v6;

  v6 = 0;
  v5 = 0;
  return sub_10068C574(a1, a2, a3, (double *)&v6, a4, &v5);
}

uint64_t sub_10068C574(uint64_t a1, double *a2, double *a3, double *a4, sqlite3_int64 **a5, unsigned __int8 *a6)
{
  double *v8;
  double *v9;
  uint64_t v10;
  sqlite3_int64 *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  sqlite3_int64 v15;
  sqlite3_int64 v16;
  unint64_t v17;
  sqlite3_int64 *v18;
  sqlite3_int64 *v19;
  NSObject *v20;
  double v21;
  double v22;
  double *v23;
  double *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t *v27;
  uint64_t *v28;
  sqlite3_int64 *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  sqlite3_int64 *v35;
  sqlite3_int64 *v36;
  uint64_t v37;
  double v38;
  double v39;
  const char *v40;
  uint8_t *v41;
  NSObject *v42;
  double v43;
  double v44;
  double v46;
  double v47;
  const char *v48;
  uint8_t *v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 v53;
  sqlite3_int64 v54;
  sqlite3_int64 v55;
  void *__p;
  sqlite3_int64 *v57;
  uint64_t v58;
  int v59;
  double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  sqlite3_int64 v64;
  uint8_t buf[4];
  double v66;
  __int16 v67;
  double v68;
  __int16 v69;
  sqlite3_int64 v70;

  v8 = a3;
  v9 = a2;
  v10 = a1;
  __p = 0;
  v57 = 0;
  v58 = 0;
  if ((sub_10068CAE0(a1, a2, a3, a4, (char **)&__p) & 1) != 0)
  {
    a5[1] = *a5;
    v11 = (sqlite3_int64 *)__p;
    if (__p == v57)
    {
      LOBYTE(v12) = 1;
      if (!__p)
        return v12 & 1;
      goto LABEL_43;
    }
    v51 = (uint64_t)(a5 + 2);
    v12 = 1;
    v13 = &qword_1022A0000;
    v14 = &qword_1022A0000;
    v52 = v10;
    do
    {
      v15 = *v11;
      v54 = 0;
      v55 = v15;
      v53 = 0;
      if ((sub_10068D300(v10, &v55, (char *)&v53, (double *)&v54, *v9, *v8) & 1) != 0)
      {
        if (*a6 | v53)
        {
          v16 = v54;
          v18 = a5[1];
          v17 = (unint64_t)a5[2];
          if ((unint64_t)v18 >= v17)
          {
            v23 = v9;
            v24 = v8;
            v25 = v12;
            v26 = a6;
            v27 = v14;
            v28 = v13;
            v29 = *a5;
            v30 = ((char *)v18 - (char *)*a5) >> 4;
            v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 60)
              sub_100259694();
            v32 = v17 - (_QWORD)v29;
            if (v32 >> 3 > v31)
              v31 = v32 >> 3;
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
              v33 = 0xFFFFFFFFFFFFFFFLL;
            else
              v33 = v31;
            if (v33)
            {
              v34 = (char *)sub_10028E224(v51, v33);
              v29 = *a5;
              v18 = a5[1];
            }
            else
            {
              v34 = 0;
            }
            v35 = (sqlite3_int64 *)&v34[16 * v30];
            *v35 = v15;
            v35[1] = v16;
            v36 = v35;
            v13 = v28;
            if (v18 != v29)
            {
              do
              {
                *((_OWORD *)v36 - 1) = *((_OWORD *)v18 - 1);
                v36 -= 2;
                v18 -= 2;
              }
              while (v18 != v29);
              v29 = *a5;
            }
            v14 = v27;
            v19 = v35 + 2;
            *a5 = v36;
            a5[1] = v35 + 2;
            a5[2] = (sqlite3_int64 *)&v34[16 * v33];
            a6 = v26;
            if (v29)
              operator delete(v29);
            v12 = v25;
            v8 = v24;
            v9 = v23;
            v10 = v52;
          }
          else
          {
            *v18 = v15;
            v18[1] = v16;
            v19 = v18 + 2;
          }
          a5[1] = v19;
        }
      }
      else
      {
        if (v13[90] != -1)
          dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
        v20 = v14[91];
        if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
        {
          v21 = *v9;
          v22 = *v8;
          *(_DWORD *)buf = 134218496;
          v66 = v21;
          v67 = 2048;
          v68 = v22;
          v69 = 2048;
          v70 = v15;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "Couldn't determine if point <%+.8f,%+.8f> is in polygon %lld", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (v13[90] != -1)
            dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
          v37 = v14[91];
          v38 = *v9;
          v39 = *v8;
          v59 = 134218496;
          v60 = v38;
          v61 = 2048;
          v62 = v39;
          v63 = 2048;
          v64 = v15;
          LODWORD(v50) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v37, 17, "Couldn't determine if point <%+.8f,%+.8f> is in polygon %lld", COERCE_DOUBLE(&v59), v50, v51);
          v41 = (uint8_t *)v40;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLPolygonDatabase::polygonsAndDistancesForPointWithUncertainty(const double &, const double &, const double &, std::vector<std::pair<sqlite3_int64, double>> &, const BOOL &)", "%s\n", v40);
          if (v41 != buf)
            free(v41);
        }
        v12 = 0;
      }
      ++v11;
    }
    while (v11 != v57);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
    v42 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v43 = *v9;
      v44 = *v8;
      *(_DWORD *)buf = 134218240;
      v66 = v43;
      v67 = 2048;
      v68 = v44;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_FAULT, "Couldn't get list of candidates for point <%+.8f,%+.8f>", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
      v46 = *v9;
      v47 = *v8;
      v59 = 134218240;
      v60 = v46;
      v61 = 2048;
      v62 = v47;
      LODWORD(v50) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Couldn't get list of candidates for point <%+.8f,%+.8f>", COERCE_DOUBLE(&v59), v50);
      v49 = (uint8_t *)v48;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLPolygonDatabase::polygonsAndDistancesForPointWithUncertainty(const double &, const double &, const double &, std::vector<std::pair<sqlite3_int64, double>> &, const BOOL &)", "%s\n", v48);
      if (v49 != buf)
        free(v49);
    }
    LOBYTE(v12) = 0;
  }
  v11 = (sqlite3_int64 *)__p;
  if (__p)
  {
LABEL_43:
    v57 = v11;
    operator delete(v11);
  }
  return v12 & 1;
}

void sub_10068CAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10068CAE0(uint64_t a1, double *a2, double *a3, double *a4, char **a5)
{
  NSObject *v10;
  double v11;
  double v12;
  double v13;
  _QWORD *v14;
  double v15;
  double v16;
  sqlite3_stmt *v17;
  sqlite3_stmt *v18;
  sqlite3_stmt *v19;
  sqlite3_stmt *v20;
  sqlite3_stmt *v21;
  sqlite3_stmt *v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  NSObject *v36;
  const char *v37;
  uint8_t *v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  double v43;
  double v44;
  double v46;
  double v47;
  double v48;
  const char *v49;
  uint8_t *v50;
  const char *v51;
  uint8_t *v52;
  double v53;
  double v54;
  const char *v55;
  double v56;
  double v57;
  uint64_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  int v63;
  double v64;
  __int16 v65;
  double v66;
  __int16 v67;
  double v68;
  __int16 v69;
  double v70;
  uint8_t buf[4];
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  double v76;
  __int16 v77;
  double v78;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
  v10 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v11 = *a2;
    v12 = *a3;
    v13 = *a4;
    *(_DWORD *)buf = 134218496;
    v72 = v11;
    v73 = 2048;
    v74 = v12;
    v75 = 2048;
    v76 = v13;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Getting polygons for point <%+.8f,%+.8f> acc %.2f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
    v46 = *a2;
    v47 = *a3;
    v48 = *a4;
    v63 = 134218496;
    v64 = v46;
    v65 = 2048;
    v66 = v47;
    v67 = 2048;
    v68 = v48;
    LODWORD(v56) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Getting polygons for point <%+.8f,%+.8f> acc %.2f", COERCE_DOUBLE(&v63), v56, v57);
    v50 = (uint8_t *)v49;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPolygonDatabase::polygonCandidatesForPointWithUncertainty(const double &, const double &, const double &, std::vector<sqlite3_int64> &)", "%s\n", v49);
    if (v50 != buf)
      free(v50);
  }
  a5[1] = *a5;
  v14 = (_QWORD *)(a1 + 208);
  if (!sub_100E815A0(v14))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
    v36 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#Warning fBoundingBoxesSelectNearbyStatement not available - rtree module missing or db unavailable", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
    LOWORD(v63) = 0;
    LODWORD(v56) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning fBoundingBoxesSelectNearbyStatement not available - rtree module missing or db unavailable", &v63, *(_QWORD *)&v56);
    v38 = (uint8_t *)v37;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPolygonDatabase::polygonCandidatesForPointWithUncertainty(const double &, const double &, const double &, std::vector<sqlite3_int64> &)", "%s\n", v37);
    goto LABEL_67;
  }
  if (!sub_10011CE88(*a2, *a3))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
    v42 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v43 = *a2;
      v44 = *a3;
      *(_DWORD *)buf = 134218240;
      v72 = v43;
      v73 = 2048;
      v74 = v44;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#Warning Ignoring bogus location <%+.8f,%+.8f>", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
    v53 = *a2;
    v54 = *a3;
    v63 = 134218240;
    v64 = v53;
    v65 = 2048;
    v66 = v54;
    LODWORD(v56) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Ignoring bogus location <%+.8f,%+.8f>", COERCE_DOUBLE(&v63), v56);
    v38 = (uint8_t *)v55;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPolygonDatabase::polygonCandidatesForPointWithUncertainty(const double &, const double &, const double &, std::vector<sqlite3_int64> &)", "%s\n", v55);
LABEL_67:
    if (v38 != buf)
      free(v38);
    return 0;
  }
  v15 = *a2;
  v16 = *a3;
  v61 = v16;
  v62 = v15;
  v59 = v16;
  v60 = v15;
  if (*a4 > 0.0)
    sub_100515834(&v62, &v61, &v60, &v59, v15, v16, *a4);
  sub_100087AF4(v14, &v58);
  v17 = (sqlite3_stmt *)sub_100026CC8(v58);
  if (sub_1000890C4(v17, 1, v62)
    && (v18 = (sqlite3_stmt *)sub_100026CC8(v58), sub_1000890C4(v18, 2, v60))
    && (v19 = (sqlite3_stmt *)sub_100026CC8(v58), sub_1000890C4(v19, 3, v61))
    && (v20 = (sqlite3_stmt *)sub_100026CC8(v58), sub_1000890C4(v20, 4, v59)))
  {
    while (1)
    {
      v21 = (sqlite3_stmt *)sub_100026CC8(v58);
      if (sqlite3_step(v21) != 100)
        break;
      v22 = (sqlite3_stmt *)sub_100026CC8(v58);
      v23 = sqlite3_column_int(v22, 0);
      v24 = v23;
      v26 = a5[1];
      v25 = (unint64_t)a5[2];
      if ((unint64_t)v26 >= v25)
      {
        v28 = *a5;
        v29 = (v26 - *a5) >> 3;
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 61)
          sub_100259694();
        v31 = v25 - (_QWORD)v28;
        if (v31 >> 2 > v30)
          v30 = v31 >> 2;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
          v32 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v32 = v30;
        if (v32)
        {
          v33 = (char *)sub_10025E6A0((uint64_t)(a5 + 2), v32);
          v28 = *a5;
          v26 = a5[1];
        }
        else
        {
          v33 = 0;
        }
        v34 = &v33[8 * v29];
        *(_QWORD *)v34 = v24;
        v27 = v34 + 8;
        while (v26 != v28)
        {
          v35 = *((_QWORD *)v26 - 1);
          v26 -= 8;
          *((_QWORD *)v34 - 1) = v35;
          v34 -= 8;
        }
        *a5 = v34;
        a5[1] = v27;
        a5[2] = &v33[8 * v32];
        if (v28)
          operator delete(v28);
      }
      else
      {
        *(_QWORD *)v26 = v23;
        v27 = v26 + 8;
      }
      a5[1] = v27;
    }
    v40 = 1;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
    v39 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218752;
      v72 = v62;
      v73 = 2048;
      v74 = v60;
      v75 = 2048;
      v76 = v61;
      v77 = 2048;
      v78 = v59;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_FAULT, "Could not bind <%+.8f,%+.8f> - <%+.8f,%+.8f>", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
      v63 = 134218752;
      v64 = v62;
      v65 = 2048;
      v66 = v60;
      v67 = 2048;
      v68 = v61;
      v69 = 2048;
      v70 = v59;
      LODWORD(v56) = 42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Could not bind <%+.8f,%+.8f> - <%+.8f,%+.8f>", COERCE_DOUBLE(&v63), v56, v57, *(double *)&v58);
      v52 = (uint8_t *)v51;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLPolygonDatabase::polygonCandidatesForPointWithUncertainty(const double &, const double &, const double &, std::vector<sqlite3_int64> &)", "%s\n", v51);
      if (v52 != buf)
        free(v52);
    }
    v40 = 0;
  }
  v41 = v58;
  v58 = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  return v40;
}

void sub_10068D2C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10068D300(uint64_t a1, sqlite3_int64 *a2, char *a3, double *a4, double a5, double a6)
{
  _QWORD *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  sqlite3_stmt *v16;
  sqlite3_stmt *v17;
  sqlite3_stmt *v18;
  double v19;
  sqlite3_stmt *v20;
  double v21;
  sqlite3_stmt *v22;
  sqlite3_stmt *v23;
  double v24;
  sqlite3_stmt *v25;
  double v26;
  double v27;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  NSObject *v35;
  sqlite3_int64 v36;
  sqlite3_int64 v37;
  char *v38;
  NSObject *v39;
  sqlite3_int64 v40;
  sqlite3_int64 v41;
  char v42;
  double v43;
  double *v44;
  double **v45;
  uint64_t v46;
  uint64_t v47;
  char *v49;
  sqlite3_int64 v50;
  uint64_t v51;
  int v52;
  sqlite3_int64 v53;
  uint8_t buf[4];
  sqlite3_int64 v55;

  v12 = (_QWORD *)(a1 + 192);
  if (!sub_100E815A0((_QWORD *)(a1 + 192)))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
    v14 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning fPointsSelectStatement not available - rtree module missing or db unavailable", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
      LOWORD(v52) = 0;
      v49 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning fPointsSelectStatement not available - rtree module missing or db unavailable", &v52, 2);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLPolygonDatabase::pointInPolygon(const sqlite3_int64 &, const double, const double, BOOL &, double &)", "%s\n", v49);
      if (v49 != (char *)buf)
        free(v49);
    }
    return 0;
  }
  if (*(double *)(a1 + 224) != a5 || *(double *)(a1 + 232) != a6)
  {
    *(double *)(a1 + 224) = a5;
    *(double *)(a1 + 232) = a6;
    sub_1000F34E0((_QWORD *)(a1 + 240));
LABEL_15:
    *a3 = 0;
    *a4 = -1.0;
    sub_100087AF4(v12, &v51);
    v16 = (sqlite3_stmt *)sub_100026CC8(v51);
    if (sub_1000CC50C(v16, 1, *a2))
    {
      v17 = (sqlite3_stmt *)sub_100026CC8(v51);
      if (sqlite3_step(v17) == 100)
      {
        v18 = (sqlite3_stmt *)sub_100026CC8(v51);
        v19 = sqlite3_column_double(v18, 0);
        v20 = (sqlite3_stmt *)sub_100026CC8(v51);
        v21 = sqlite3_column_double(v20, 1);
        while (1)
        {
          do
          {
            v22 = (sqlite3_stmt *)sub_100026CC8(v51);
            if (sqlite3_step(v22) != 100)
            {
              v41 = *a2;
              v42 = *a3;
              v43 = *a4;
              v44 = (double *)operator new(0x28uLL);
              v44[3] = v43;
              *((_BYTE *)v44 + 32) = v42;
              v45 = *(double ***)(a1 + 248);
              *(_QWORD *)v44 = a1 + 240;
              *((_QWORD *)v44 + 1) = v45;
              *((_QWORD *)v44 + 2) = v41;
              *v45 = v44;
              v46 = *(_QWORD *)(a1 + 256) + 1;
              *(_QWORD *)(a1 + 248) = v44;
              *(_QWORD *)(a1 + 256) = v46;
              v15 = 1;
              goto LABEL_60;
            }
            v23 = (sqlite3_stmt *)sub_100026CC8(v51);
            v24 = sqlite3_column_double(v23, 0);
            v25 = (sqlite3_stmt *)sub_100026CC8(v51);
            v26 = sqlite3_column_double(v25, 1);
            v27 = v26;
          }
          while (v24 == v19 && v26 == v21);
          if ((v19 > a5 && v24 < a5 || v19 < a5 && v24 > a5) && (v26 > a6 || v21 > a6))
            break;
          if (v19 == a5 && v24 < a5 && v21 > a6 || v24 == a5 && v19 < a5 && v26 > a6)
            goto LABEL_37;
LABEL_38:
          v29 = v24 - v19;
          v30 = v27 - v21;
          v31 = ((a6 - v21) * (v27 - v21) + (a5 - v19) * (v24 - v19)) / (v30 * v30 + v29 * v29);
          if (v31 <= 0.0)
          {
            v32 = v19;
            v33 = v21;
          }
          else
          {
            v32 = v24;
            v33 = v27;
            if (v31 < 1.0)
            {
              v32 = v19 + v31 * v29;
              v33 = v21 + v31 * v30;
            }
          }
          v34 = sub_100124100(a5, a6, v32, v33);
          if (*a4 >= 0.0)
          {
            v19 = v24;
            v21 = v27;
            if (v34 >= *a4)
              continue;
          }
          *a4 = v34;
          v19 = v24;
          v21 = v27;
        }
        if (v21 + (v26 - v21) * ((a5 - v19) / (v24 - v19)) <= a6)
          goto LABEL_38;
LABEL_37:
        *a3 ^= 1u;
        goto LABEL_38;
      }
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
      v39 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
      {
        v40 = *a2;
        *(_DWORD *)buf = 134217984;
        v55 = v40;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#Warning No points data found for polygon Id %lld", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
      {
LABEL_58:
        v15 = 0;
LABEL_60:
        v47 = v51;
        v51 = 0;
        if (v47)
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
        return v15;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
      v50 = *a2;
      v52 = 134217984;
      v53 = v50;
      v38 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning No points data found for polygon Id %lld", &v52);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLPolygonDatabase::pointInPolygon(const sqlite3_int64 &, const double, const double, BOOL &, double &)", "%s\n", v38);
    }
    else
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
      v35 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
      {
        v36 = *a2;
        *(_DWORD *)buf = 134217984;
        v55 = v36;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#Warning Could not bind %lld", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_58;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
      v37 = *a2;
      v52 = 134217984;
      v53 = v37;
      v38 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Could not bind %lld", &v52);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLPolygonDatabase::pointInPolygon(const sqlite3_int64 &, const double, const double, BOOL &, double &)", "%s\n", v38);
    }
    if (v38 != (char *)buf)
      free(v38);
    goto LABEL_58;
  }
  v13 = *(_QWORD *)(a1 + 248);
  if (v13 == a1 + 240)
    goto LABEL_15;
  while (*(_QWORD *)(v13 + 16) != *a2)
  {
    v13 = *(_QWORD *)(v13 + 8);
    if (v13 == a1 + 240)
      goto LABEL_15;
  }
  *a3 = *(_BYTE *)(v13 + 32);
  *a4 = *(double *)(v13 + 24);
  return 1;
}

void sub_10068DA08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10068DA58(uint64_t a1, sqlite3_int64 *a2, std::string *a3)
{
  _QWORD *v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  const unsigned __int8 *v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  sqlite3_int64 v13;
  sqlite3_int64 v14;
  const char *v15;
  uint8_t *v16;
  NSObject *v17;
  sqlite3_int64 v18;
  sqlite3_int64 v19;
  const char *v20;
  NSObject *v21;
  uint64_t v22;
  const char *v24;
  uint8_t *v25;
  const char *v26;
  uint64_t v27;
  int v28;
  sqlite3_int64 v29;
  uint8_t buf[4];
  sqlite3_int64 v31;

  v5 = (_QWORD *)(a1 + 160);
  if (sub_100E815A0((_QWORD *)(a1 + 160)))
  {
    sub_100087AF4(v5, &v27);
    v6 = (sqlite3_stmt *)sub_100026CC8(v27);
    if (sub_1000CC50C(v6, 1, *a2))
    {
      v7 = (sqlite3_stmt *)sub_100026CC8(v27);
      if (sqlite3_step(v7) == 100)
      {
        v8 = (sqlite3_stmt *)sub_100026CC8(v27);
        v9 = sqlite3_column_text(v8, 0);
        if (v9)
        {
          std::string::assign(a3, (const std::string::value_type *)v9);
          v10 = 1;
          goto LABEL_34;
        }
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
        v21 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "Could not get polygon name", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 0))
        {
LABEL_33:
          v10 = 0;
LABEL_34:
          v22 = v27;
          v27 = 0;
          if (v22)
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          return v10;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
        LOWORD(v28) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Could not get polygon name", &v28, 2);
        v16 = (uint8_t *)v26;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLPolygonDatabase::getPolygonName(const sqlite3_int64 &, std::string &)", "%s\n", v26);
      }
      else
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
        v17 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
        {
          v18 = *a2;
          *(_DWORD *)buf = 134217984;
          v31 = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning No entry in names table for polygon ID %lld", buf, 0xCu);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_33;
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
        v19 = *a2;
        v28 = 134217984;
        v29 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning No entry in names table for polygon ID %lld", &v28);
        v16 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLPolygonDatabase::getPolygonName(const sqlite3_int64 &, std::string &)", "%s\n", v20);
      }
    }
    else
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
      v12 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        v13 = *a2;
        *(_DWORD *)buf = 134349056;
        v31 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Could not bind %{public}lld", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_33;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
      v14 = *a2;
      v28 = 134349056;
      v29 = v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Could not bind %{public}lld", &v28, 12);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLPolygonDatabase::getPolygonName(const sqlite3_int64 &, std::string &)", "%s\n", v15);
    }
    if (v16 != buf)
      free(v16);
    goto LABEL_33;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
  v11 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning fNamesSelectStatement not available - rtree module missing or db unavailable", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
    LOWORD(v28) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning fNamesSelectStatement not available - rtree module missing or db unavailable", &v28, 2);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPolygonDatabase::getPolygonName(const sqlite3_int64 &, std::string &)", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  return 0;
}

void sub_10068E034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10068E070(uint64_t a1, char *a2, _QWORD *a3)
{
  _QWORD *v5;
  sqlite3_stmt *v6;
  char *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  char *v13;
  char *v14;
  const char *v15;
  uint8_t *v16;
  NSObject *v17;
  char *v18;
  uint64_t v19;
  const char *v21;
  uint8_t *v22;
  char *v23;
  const char *v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint8_t buf[4];
  char *v29;

  v5 = (_QWORD *)(a1 + 176);
  if (sub_100E815A0((_QWORD *)(a1 + 176)))
  {
    sub_100087AF4(v5, &v25);
    v6 = (sqlite3_stmt *)sub_100026CC8(v25);
    if (a2[23] >= 0)
      v7 = a2;
    else
      v7 = *(char **)a2;
    if (sub_1000C9E20(v6, 1, v7))
    {
      v8 = (sqlite3_stmt *)sub_100026CC8(v25);
      if (sqlite3_step(v8) == 100)
      {
        v9 = (sqlite3_stmt *)sub_100026CC8(v25);
        *a3 = sqlite3_column_int(v9, 0);
        v10 = 1;
        goto LABEL_37;
      }
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
      v17 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
      {
        if (a2[23] >= 0)
          v18 = a2;
        else
          v18 = *(char **)a2;
        *(_DWORD *)buf = 136315138;
        v29 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning Polygon %s not found in names table", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
      {
LABEL_36:
        v10 = 0;
LABEL_37:
        v19 = v25;
        v25 = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        return v10;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
      if (a2[23] >= 0)
        v23 = a2;
      else
        v23 = *(char **)a2;
      v26 = 136315138;
      v27 = v23;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Polygon %s not found in names table", (const char *)&v26);
      v16 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLPolygonDatabase::getPolygonId(const std::string &, sqlite3_int64 &)", "%s\n", v24);
    }
    else
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
      v12 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
      {
        if (a2[23] >= 0)
          v13 = a2;
        else
          v13 = *(char **)a2;
        *(_DWORD *)buf = 136315138;
        v29 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Could not bind %s", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_36;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
      if (a2[23] >= 0)
        v14 = a2;
      else
        v14 = *(char **)a2;
      v26 = 136315138;
      v27 = v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Could not bind %s", (const char *)&v26);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLPolygonDatabase::getPolygonId(const std::string &, sqlite3_int64 &)", "%s\n", v15);
    }
    if (v16 != buf)
      free(v16);
    goto LABEL_36;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
  v11 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning fNamesSelectOnNameStatement not available - rtree module missing or db unavailable", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
    LOWORD(v26) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning fNamesSelectOnNameStatement not available - rtree module missing or db unavailable", &v26, 2);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPolygonDatabase::getPolygonId(const std::string &, sqlite3_int64 &)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  return 0;
}

void sub_10068E560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10068E594(uint64_t a1, char *a2, char **a3)
{
  _QWORD *v5;
  sqlite3_stmt *v6;
  char *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  char *v26;
  char *v27;
  char *v28;
  NSObject *v29;
  char *v30;
  uint64_t v31;
  char *v33;
  char *v34;
  uint64_t v35;
  int v36;
  char *v37;
  uint8_t buf[4];
  char *v39;

  a3[1] = *a3;
  v5 = (_QWORD *)(a1 + 176);
  if (sub_100E815A0((_QWORD *)(a1 + 176)))
  {
    sub_100087AF4(v5, &v35);
    v6 = (sqlite3_stmt *)sub_100026CC8(v35);
    if (a2[23] >= 0)
      v7 = a2;
    else
      v7 = *(char **)a2;
    if (sub_1000C9E20(v6, 1, v7))
    {
      while (1)
      {
        v8 = (sqlite3_stmt *)sub_100026CC8(v35);
        if (sqlite3_step(v8) != 100)
          break;
        v9 = (sqlite3_stmt *)sub_100026CC8(v35);
        v10 = sqlite3_column_int(v9, 0);
        v11 = v10;
        v13 = a3[1];
        v12 = (unint64_t)a3[2];
        if ((unint64_t)v13 >= v12)
        {
          v15 = *a3;
          v16 = (v13 - *a3) >> 3;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 61)
            sub_100259694();
          v18 = v12 - (_QWORD)v15;
          if (v18 >> 2 > v17)
            v17 = v18 >> 2;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
            v19 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v19 = v17;
          if (v19)
          {
            v20 = (char *)sub_10025E6A0((uint64_t)(a3 + 2), v19);
            v15 = *a3;
            v13 = a3[1];
          }
          else
          {
            v20 = 0;
          }
          v21 = &v20[8 * v16];
          *(_QWORD *)v21 = v11;
          v14 = v21 + 8;
          while (v13 != v15)
          {
            v22 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *((_QWORD *)v21 - 1) = v22;
            v21 -= 8;
          }
          *a3 = v21;
          a3[1] = v14;
          a3[2] = &v20[8 * v19];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *(_QWORD *)v13 = v10;
          v14 = v13 + 8;
        }
        a3[1] = v14;
      }
      if (a3[1] != *a3)
      {
        v24 = 1;
        goto LABEL_55;
      }
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
      v29 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
      {
        if (a2[23] >= 0)
          v30 = a2;
        else
          v30 = *(char **)a2;
        *(_DWORD *)buf = 136315138;
        v39 = v30;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#Warning Polygon %s not found in names table", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
      {
LABEL_54:
        v24 = 0;
LABEL_55:
        v31 = v35;
        v35 = 0;
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        return v24;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
      if (a2[23] >= 0)
        v34 = a2;
      else
        v34 = *(char **)a2;
      v36 = 136315138;
      v37 = v34;
      v28 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Polygon %s not found in names table", (const char *)&v36);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLPolygonDatabase::polygonsForName(const std::string &, std::vector<sqlite3_int64> &)", "%s\n", v28);
    }
    else
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
      v25 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
      {
        if (a2[23] >= 0)
          v26 = a2;
        else
          v26 = *(char **)a2;
        *(_DWORD *)buf = 136315138;
        v39 = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#Warning Could not bind %s", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_54;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
      if (a2[23] >= 0)
        v27 = a2;
      else
        v27 = *(char **)a2;
      v36 = 136315138;
      v37 = v27;
      v28 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Could not bind %s", (const char *)&v36);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLPolygonDatabase::polygonsForName(const std::string &, std::vector<sqlite3_int64> &)", "%s\n", v28);
    }
    if (v28 != (char *)buf)
      free(v28);
    goto LABEL_54;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
  v23 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#Warning fNamesSelectOnNameStatement not available - rtree module missing or db unavailable", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
    LOWORD(v36) = 0;
    v33 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning fNamesSelectOnNameStatement not available - rtree module missing or db unavailable", &v36, 2);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPolygonDatabase::polygonsForName(const std::string &, std::vector<sqlite3_int64> &)", "%s\n", v33);
    if (v33 != (char *)buf)
      free(v33);
  }
  return 0;
}

void sub_10068EB54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10068EB94(uint64_t a1, char *a2, double *a3, double *a4, char *a5, double *a6)
{
  uint64_t result;
  NSObject *v13;
  char *v14;
  char *v15;
  const char *v16;
  uint8_t *v17;
  sqlite3_int64 v18;
  int v19;
  char *v20;
  uint8_t buf[4];
  char *v22;

  v18 = 0;
  if ((sub_10068E070(a1, a2, &v18) & 1) != 0)
    return sub_10068D300(a1, &v18, a5, a6, *a3, *a4);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
  v13 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
  {
    if (a2[23] >= 0)
      v14 = a2;
    else
      v14 = *(char **)a2;
    *(_DWORD *)buf = 136315138;
    v22 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning No bounding box found for polygon %s", buf, 0xCu);
  }
  result = sub_1001BFF7C(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
    if (a2[23] >= 0)
      v15 = a2;
    else
      v15 = *(char **)a2;
    v19 = 136315138;
    v20 = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning No bounding box found for polygon %s", (const char *)&v19);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPolygonDatabase::pointInPolygon(const std::string &, const double &, const double &, BOOL &, double &)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
    return 0;
  }
  return result;
}

uint64_t sub_10068EDAC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  std::string *p_p;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  std::string *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  std::string *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  std::string *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  std::string *v56;
  uint64_t v57;
  uint64_t v58;
  std::string __p;
  _QWORD v61[2];
  uint64_t v62;
  _QWORD v63[8];
  std::string v64;
  uint64_t v65;

  sub_100263E50((uint64_t)v61);
  v2 = sub_100263F7C(&v62, (uint64_t)"SELECT ", 7);
  v3 = sub_100263F7C(v2, (uint64_t)"MinimumLatitude", 15);
  v4 = sub_100263F7C(v3, (uint64_t)", ", 2);
  v5 = sub_100263F7C(v4, (uint64_t)"MaximumLatitude", 15);
  v6 = sub_100263F7C(v5, (uint64_t)", ", 2);
  v7 = sub_100263F7C(v6, (uint64_t)"MinimumLongitude", 16);
  v8 = sub_100263F7C(v7, (uint64_t)", ", 2);
  v9 = sub_100263F7C(v8, (uint64_t)"MaximumLongitude", 16);
  v10 = sub_100263F7C(v9, (uint64_t)" FROM ", 6);
  v11 = sub_100263F7C(v10, (uint64_t)"BoundingBoxes", 13);
  v12 = sub_100263F7C(v11, (uint64_t)" WHERE ", 7);
  v13 = sub_100263F7C(v12, (uint64_t)"ROWID", 5);
  sub_100263F7C(v13, (uint64_t)"=?", 2);
  std::stringbuf::str(&__p, v63);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  a1[18] = sub_10063D314((uint64_t)(a1 + 1), (char *)p_p);
  a1[19] = v15;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  memset(&__p, 0, sizeof(__p));
  std::string::operator=(&v64, &__p);
  sub_1004ADDC8((uint64_t)v63);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v16 = sub_100263F7C(&v62, (uint64_t)"SELECT ", 7);
  v17 = sub_100263F7C(v16, (uint64_t)"ZoneName", 8);
  v18 = sub_100263F7C(v17, (uint64_t)" FROM ", 6);
  v19 = sub_100263F7C(v18, (uint64_t)"Names", 5);
  v20 = sub_100263F7C(v19, (uint64_t)" WHERE ", 7);
  v21 = sub_100263F7C(v20, (uint64_t)"ROWID", 5);
  sub_100263F7C(v21, (uint64_t)"=?", 2);
  std::stringbuf::str(&__p, v63);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &__p;
  else
    v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  a1[20] = sub_10063D314((uint64_t)(a1 + 1), (char *)v22);
  a1[21] = v23;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  memset(&__p, 0, sizeof(__p));
  std::string::operator=(&v64, &__p);
  sub_1004ADDC8((uint64_t)v63);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v24 = sub_100263F7C(&v62, (uint64_t)"SELECT ", 7);
  v25 = sub_100263F7C(v24, (uint64_t)"ROWID", 5);
  v26 = sub_100263F7C(v25, (uint64_t)" FROM ", 6);
  v27 = sub_100263F7C(v26, (uint64_t)"Names", 5);
  v28 = sub_100263F7C(v27, (uint64_t)" WHERE ", 7);
  v29 = sub_100263F7C(v28, (uint64_t)"ZoneName", 8);
  sub_100263F7C(v29, (uint64_t)"=?", 2);
  std::stringbuf::str(&__p, v63);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = &__p;
  else
    v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
  a1[22] = sub_10063D314((uint64_t)(a1 + 1), (char *)v30);
  a1[23] = v31;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  memset(&__p, 0, sizeof(__p));
  std::string::operator=(&v64, &__p);
  sub_1004ADDC8((uint64_t)v63);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v32 = sub_100263F7C(&v62, (uint64_t)"SELECT ", 7);
  v33 = sub_100263F7C(v32, (uint64_t)"Latitude", 8);
  v34 = sub_100263F7C(v33, (uint64_t)", ", 2);
  v35 = sub_100263F7C(v34, (uint64_t)"Longitude", 9);
  v36 = sub_100263F7C(v35, (uint64_t)" FROM ", 6);
  v37 = sub_100263F7C(v36, (uint64_t)"Points", 6);
  v38 = sub_100263F7C(v37, (uint64_t)" WHERE ", 7);
  v39 = sub_100263F7C(v38, (uint64_t)"ZoneID", 6);
  v40 = sub_100263F7C(v39, (uint64_t)"=?", 2);
  v41 = sub_100263F7C(v40, (uint64_t)" ORDER BY ", 10);
  sub_100263F7C(v41, (uint64_t)"PointID", 7);
  std::stringbuf::str(&__p, v63);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = &__p;
  else
    v42 = (std::string *)__p.__r_.__value_.__r.__words[0];
  a1[24] = sub_10063D314((uint64_t)(a1 + 1), (char *)v42);
  a1[25] = v43;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  memset(&__p, 0, sizeof(__p));
  std::string::operator=(&v64, &__p);
  sub_1004ADDC8((uint64_t)v63);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v44 = sub_100263F7C(&v62, (uint64_t)"SELECT ", 7);
  v45 = sub_100263F7C(v44, (uint64_t)"ROWID", 5);
  v46 = sub_100263F7C(v45, (uint64_t)" FROM ", 6);
  v47 = sub_100263F7C(v46, (uint64_t)"BoundingBoxes", 13);
  v48 = sub_100263F7C(v47, (uint64_t)" WHERE ", 7);
  v49 = sub_100263F7C(v48, (uint64_t)"MaximumLatitude", 15);
  v50 = sub_100263F7C(v49, (uint64_t)">=? AND ", 8);
  v51 = sub_100263F7C(v50, (uint64_t)"MinimumLatitude", 15);
  v52 = sub_100263F7C(v51, (uint64_t)"<=? AND ", 8);
  v53 = sub_100263F7C(v52, (uint64_t)"MaximumLongitude", 16);
  v54 = sub_100263F7C(v53, (uint64_t)">=? AND ", 8);
  v55 = sub_100263F7C(v54, (uint64_t)"MinimumLongitude", 16);
  sub_100263F7C(v55, (uint64_t)"<=?", 3);
  std::stringbuf::str(&__p, v63);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v56 = &__p;
  else
    v56 = (std::string *)__p.__r_.__value_.__r.__words[0];
  a1[26] = sub_10063D314((uint64_t)(a1 + 1), (char *)v56);
  a1[27] = v57;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  memset(&__p, 0, sizeof(__p));
  std::string::operator=(&v64, &__p);
  sub_1004ADDC8((uint64_t)v63);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)((char *)v61
  v62 = v58;
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  std::streambuf::~streambuf(v63);
  return std::ios::~ios(&v65);
}

void sub_10068F3B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10068F418(uint64_t a1, sqlite3_int64 *a2, double *a3, double *a4, double *a5, double *a6)
{
  _QWORD *v11;
  sqlite3_stmt *v12;
  sqlite3_stmt *v13;
  sqlite3_stmt *v14;
  sqlite3_stmt *v15;
  sqlite3_stmt *v16;
  sqlite3_stmt *v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  sqlite3_int64 v21;
  sqlite3_int64 v22;
  char *v23;
  NSObject *v24;
  sqlite3_int64 v25;
  uint64_t v26;
  char *v28;
  sqlite3_int64 v29;
  uint64_t v30;
  int v31;
  sqlite3_int64 v32;
  uint8_t buf[4];
  sqlite3_int64 v34;

  v11 = (_QWORD *)(a1 + 144);
  if (sub_100E815A0((_QWORD *)(a1 + 144)))
  {
    sub_100087AF4(v11, &v30);
    v12 = (sqlite3_stmt *)sub_100026CC8(v30);
    if (sub_1000CC50C(v12, 1, *a2))
    {
      v13 = (sqlite3_stmt *)sub_100026CC8(v30);
      if (sqlite3_step(v13) == 100)
      {
        v14 = (sqlite3_stmt *)sub_100026CC8(v30);
        *a3 = sqlite3_column_double(v14, 0);
        v15 = (sqlite3_stmt *)sub_100026CC8(v30);
        *a5 = sqlite3_column_double(v15, 1);
        v16 = (sqlite3_stmt *)sub_100026CC8(v30);
        *a4 = sqlite3_column_double(v16, 2);
        v17 = (sqlite3_stmt *)sub_100026CC8(v30);
        *a6 = sqlite3_column_double(v17, 3);
        v18 = 1;
        goto LABEL_25;
      }
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
      v24 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
      {
        v25 = *a2;
        *(_DWORD *)buf = 134217984;
        v34 = v25;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#Warning No bounding box found for polygon ID %lld", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
      {
LABEL_24:
        v18 = 0;
LABEL_25:
        v26 = v30;
        v30 = 0;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
        return v18;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
      v29 = *a2;
      v31 = 134217984;
      v32 = v29;
      v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning No bounding box found for polygon ID %lld", &v31);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLPolygonDatabase::getPolygonBoundingBox(sqlite3_int64 &, double &, double &, double &, double &)", "%s\n", v23);
    }
    else
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
      v20 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
      {
        v21 = *a2;
        *(_DWORD *)buf = 134217984;
        v34 = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning Could not bind polygon ID %lld", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_24;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
      v22 = *a2;
      v31 = 134217984;
      v32 = v22;
      v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Could not bind polygon ID %lld", &v31);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLPolygonDatabase::getPolygonBoundingBox(sqlite3_int64 &, double &, double &, double &, double &)", "%s\n", v23);
    }
    if (v23 != (char *)buf)
      free(v23);
    goto LABEL_24;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
  v19 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#Warning fBoundingBoxesSelectStatement not available - rtree module missing or db unavailable", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
    LOWORD(v31) = 0;
    v28 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning fBoundingBoxesSelectStatement not available - rtree module missing or db unavailable", &v31, 2);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPolygonDatabase::getPolygonBoundingBox(sqlite3_int64 &, double &, double &, double &, double &)", "%s\n", v28);
    if (v28 != (char *)buf)
      free(v28);
  }
  return 0;
}

void sub_10068F918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10068F94C(uint64_t a1)
{
  return sub_100634364(a1 + 8, "Names", (const char **)&off_10214B238, 0, 0);
}

void sub_10068F96C(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10068F998(_QWORD *a1)
{
  *a1 = off_10214B308;
  operator new();
}

void sub_10068FF48()
{
  operator delete();
}

void sub_1006901DC()
{
  JUMPOUT(0x100690134);
}

void sub_1006901E4()
{
  JUMPOUT(0x10069013CLL);
}

void sub_1006901EC()
{
  JUMPOUT(0x100690144);
}

void sub_1006901F4()
{
  JUMPOUT(0x10069014CLL);
}

void sub_1006901FC()
{
  JUMPOUT(0x100690154);
}

void sub_100690204()
{
  JUMPOUT(0x10069015CLL);
}

void sub_10069020C()
{
  JUMPOUT(0x100690164);
}

void sub_100690214()
{
  JUMPOUT(0x10069016CLL);
}

void sub_10069021C()
{
  JUMPOUT(0x100690174);
}

void sub_100690224()
{
  JUMPOUT(0x10069017CLL);
}

void sub_10069022C()
{
  JUMPOUT(0x100690184);
}

void sub_100690234()
{
  JUMPOUT(0x10069018CLL);
}

void sub_10069023C()
{
  JUMPOUT(0x100690194);
}

void sub_100690244()
{
  JUMPOUT(0x10069019CLL);
}

void sub_10069024C()
{
  JUMPOUT(0x1006901A4);
}

void sub_100690254()
{
  JUMPOUT(0x1006901B4);
}

void sub_10069025C()
{
  JUMPOUT(0x1006901BCLL);
}

void sub_100690264()
{
  JUMPOUT(0x1006901C4);
}

void sub_10069026C()
{
  JUMPOUT(0x1006901CCLL);
}

uint64_t sub_100690278@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X8>, double a6@<D0>)
{
  int v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;

  v11 = *(_DWORD *)(a4 + 1392);
  v12 = *(_DWORD *)(a2 + 8);
  result = sub_10004DD7C(v12);
  if ((_DWORD)result)
  {
    v15 = a1[21];
    v14 = a1[22];
    goto LABEL_67;
  }
  if (v12 <= 15229)
  {
    if (v12 <= 2064)
    {
      if (v12 <= 2021)
      {
        if (v12 > 2009)
        {
          if (v12 == 2010)
          {
            v15 = a1[31];
            v14 = a1[32];
            goto LABEL_67;
          }
          if (v12 == 2020)
          {
            v15 = a1[1];
            v14 = a1[2];
            goto LABEL_67;
          }
          goto LABEL_83;
        }
        if (v12 == 6)
        {
          v15 = a1[7];
          v14 = a1[8];
          goto LABEL_67;
        }
        if (v12 != 65)
          goto LABEL_83;
        goto LABEL_63;
      }
      if (v12 > 2047)
      {
        if (v12 == 2048)
        {
          v15 = a1[15];
          v14 = a1[16];
          goto LABEL_67;
        }
        if (v12 == 2061)
        {
          v15 = a1[5];
          v14 = a1[6];
          goto LABEL_67;
        }
        goto LABEL_83;
      }
      if (v12 != 2022 && v12 != 2024)
        goto LABEL_83;
LABEL_53:
      v15 = a1[39];
      v14 = a1[40];
      goto LABEL_67;
    }
    if (v12 > 2149)
    {
      if (v12 > 11804)
      {
        if (v12 == 11805)
        {
          v15 = a1[35];
          v14 = a1[36];
          goto LABEL_67;
        }
        if (v12 == 15110)
        {
          v15 = a1[47];
          v14 = a1[48];
          goto LABEL_67;
        }
        goto LABEL_83;
      }
      if (v12 != 2150)
      {
        if (v12 == 3015)
        {
          v15 = a1[9];
          v14 = a1[10];
          goto LABEL_67;
        }
        goto LABEL_83;
      }
    }
    else
    {
      if (v12 <= 2100)
      {
        if (v12 == 2065)
        {
          v15 = a1[29];
          v14 = a1[30];
          goto LABEL_67;
        }
        if (v12 == 2071)
          goto LABEL_32;
        goto LABEL_83;
      }
      if (v12 != 2101)
      {
        if (v12 != 2105)
          goto LABEL_83;
        goto LABEL_53;
      }
    }
    v15 = a1[37];
    v14 = a1[38];
    goto LABEL_67;
  }
  if (v12 <= 15669)
  {
    if (v12 > 15459)
    {
      if (v12 > 15591)
      {
        if (v12 == 15592)
        {
LABEL_64:
          v20 = a1[43];
          v21 = 0x4090000000000100;
          goto LABEL_65;
        }
        v19 = 15610;
      }
      else
      {
        if (v12 == 15460)
          goto LABEL_63;
        v19 = 15560;
      }
      if (v12 != v19)
        goto LABEL_83;
      goto LABEL_63;
    }
    if ((v12 - 15230) > 0x19 || ((1 << (v12 - 126)) & 0x2100001) == 0)
    {
      v18 = 15350;
LABEL_46:
      if (v12 != v18)
        goto LABEL_83;
      goto LABEL_64;
    }
LABEL_63:
    v20 = a1[43];
    v21 = 0x4006666601000101;
LABEL_65:
    *(_QWORD *)(v20 + 88) = v21;
LABEL_66:
    v15 = a1[43];
    v14 = a1[44];
    goto LABEL_67;
  }
  if (v12 > 18239)
  {
    if (v12 > 19149)
    {
      switch(v12)
      {
        case 19150:
LABEL_10:
          result = sub_100690714(a1, a6);
          v16 = a1[43];
          if ((_DWORD)result)
            v17 = 1074161254;
          else
            v17 = 1083074150;
          *(_DWORD *)(v16 + 88) = 256;
          *(_DWORD *)(v16 + 92) = v17;
          goto LABEL_66;
        case 90603:
          v15 = a1[19];
          v14 = a1[20];
          goto LABEL_67;
        case 519150:
          goto LABEL_10;
      }
      goto LABEL_83;
    }
    if (v12 == 18240)
    {
      v15 = a1[33];
      v14 = a1[34];
      goto LABEL_67;
    }
    v18 = 19090;
    goto LABEL_46;
  }
  if (v12 > 18099)
  {
    if (v12 != 18100)
    {
      if (v12 == 18200)
      {
        v15 = a1[45];
        v14 = a1[46];
        goto LABEL_67;
      }
      goto LABEL_83;
    }
    goto LABEL_64;
  }
  if (v12 == 15670)
  {
    v15 = a1[41];
    v14 = a1[42];
    goto LABEL_67;
  }
  if (v12 == 18050)
  {
LABEL_32:
    v15 = a1[23];
    v14 = a1[24];
    goto LABEL_67;
  }
LABEL_83:
  if (a3 && *(_BYTE *)(a2 + 208))
  {
    v15 = a1[17];
    v14 = a1[18];
    goto LABEL_67;
  }
  if (v12 > 15329)
  {
    if (v12 > 15710)
    {
      if (v12 <= 19029)
      {
        if (v12 == 15711)
          goto LABEL_110;
        v24 = 15733;
      }
      else
      {
        if (v12 == 19030 || v12 == 515652)
          goto LABEL_110;
        v24 = 515621;
      }
    }
    else
    {
      if ((v12 - 15620) <= 0x37 && ((1 << (v12 - 4)) & 0x80010100000001) != 0
        || v12 == 15330)
      {
        goto LABEL_110;
      }
      v24 = 15360;
    }
  }
  else
  {
    if (v12 <= 2067)
    {
      if ((v12 - 3) <= 0x3F && ((1 << (v12 - 3)) & 0xB000000000000011) != 0)
        goto LABEL_110;
LABEL_113:
      v15 = a1[13];
      v14 = a1[14];
      goto LABEL_67;
    }
    if (v12 > 15054)
    {
      if (v12 == 15055 || v12 == 15100)
        goto LABEL_110;
      v24 = 15150;
    }
    else
    {
      if (v12 == 2068 || v12 == 3016)
        goto LABEL_110;
      v24 = 15030;
    }
  }
  if (v12 != v24)
    goto LABEL_113;
LABEL_110:
  if (v11)
  {
    v15 = a1[27];
    v14 = a1[28];
  }
  else
  {
    v15 = a1[25];
    v14 = a1[26];
  }
LABEL_67:
  *a5 = v15;
  a5[1] = v14;
  if (v14)
  {
    v22 = (unint64_t *)(v14 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  return result;
}

BOOL sub_100690714(_QWORD *a1, double a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  unint64_t v13;

  v2 = a1[50];
  if (a1[51] == v2)
    return 0;
  v3 = a1[53];
  v4 = (_QWORD *)(v2 + 8 * (v3 / 0x11));
  v5 = a1[54] + v3;
  v6 = *v4 + 232 * (v3 % 0x11);
  v7 = *(_QWORD *)(v2 + 8 * (v5 / 0x11)) + 232 * (v5 % 0x11);
  if (v6 == v7)
  {
    return 0;
  }
  else
  {
    v8 = 0;
    v9 = 1.79769313e308;
    do
    {
      v10 = *(_QWORD *)(v6 + 16);
      if ((v10 & 0xFFFFFFFFFFFFFFFELL) == 2)
      {
        v11 = *(double *)(v6 + 24);
        if (v11 > a2)
          return v8;
        v12 = vabdd_f64(a2, v11);
        if (v12 < v9)
        {
          v8 = v10 == 2;
          v9 = v12;
        }
      }
      v6 += 232;
      if (v6 - *v4 == 3944)
      {
        v13 = v4[1];
        ++v4;
        v6 = v13;
      }
    }
    while (v6 != v7);
  }
  return v8;
}

_QWORD *sub_1006907EC@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  if (*(_DWORD *)(a2 + 1392))
  {
    v4 = result[27];
    v3 = result[28];
  }
  else
  {
    v4 = result[25];
    v3 = result[26];
  }
  *a3 = v4;
  a3[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void sub_100690820(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  double Current;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  void **v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = a1 + 49;
  sub_100690A70(a1 + 49, (__int128 *)a2);
  Current = CFAbsoluteTimeGetCurrent();
  v6 = a1[53];
  v7 = a1[50];
  v8 = a1[51];
  v9 = (_QWORD *)(v7 + 8 * (v6 / 0x11));
  if (v8 == v7)
  {
    v10 = 0;
    v11 = a1 + 54;
  }
  else
  {
    v10 = *(_QWORD *)(v7 + 8 * (v6 / 0x11)) + 232 * (v6 % 0x11);
    v11 = a1 + 54;
    v12 = *(_QWORD *)(a1[50] + 8 * ((a1[54] + v6) / 0x11)) + 232 * ((a1[54] + v6) % 0x11);
    if (v10 != v12)
    {
      while (vabdd_f64(Current, *(double *)(v10 + 24)) <= 1200.0)
      {
        v10 += 232;
        if (v10 - *v9 == 3944)
        {
          v13 = v9[1];
          ++v9;
          v10 = v13;
        }
        if (v10 == v12)
          goto LABEL_17;
      }
    }
    if (v10 == v12)
    {
LABEL_17:
      v10 = *(_QWORD *)(a1[50] + 8 * ((a1[54] + v6) / 0x11)) + 232 * ((a1[54] + v6) % 0x11);
    }
    else
    {
      v14 = v10;
      v15 = v9;
      while (1)
      {
        v14 += 232;
        if (v14 - *v15 == 3944)
        {
          v16 = v15[1];
          ++v15;
          v14 = v16;
        }
        if (v14 == v12)
          break;
        if (vabdd_f64(Current, *(double *)(v14 + 24)) <= 1200.0)
        {
          v17 = *(_OWORD *)v14;
          v18 = *(_OWORD *)(v14 + 32);
          *(_OWORD *)(v10 + 16) = *(_OWORD *)(v14 + 16);
          *(_OWORD *)(v10 + 32) = v18;
          *(_OWORD *)v10 = v17;
          v19 = *(_OWORD *)(v14 + 48);
          v20 = *(_OWORD *)(v14 + 64);
          v21 = *(_OWORD *)(v14 + 96);
          *(_OWORD *)(v10 + 80) = *(_OWORD *)(v14 + 80);
          *(_OWORD *)(v10 + 96) = v21;
          *(_OWORD *)(v10 + 48) = v19;
          *(_OWORD *)(v10 + 64) = v20;
          v22 = *(_OWORD *)(v14 + 112);
          v23 = *(_OWORD *)(v14 + 128);
          v24 = *(_OWORD *)(v14 + 160);
          *(_OWORD *)(v10 + 144) = *(_OWORD *)(v14 + 144);
          *(_OWORD *)(v10 + 160) = v24;
          *(_OWORD *)(v10 + 112) = v22;
          *(_OWORD *)(v10 + 128) = v23;
          v25 = *(_OWORD *)(v14 + 176);
          v26 = *(_OWORD *)(v14 + 192);
          v27 = *(_OWORD *)(v14 + 208);
          *(_QWORD *)(v10 + 224) = *(_QWORD *)(v14 + 224);
          *(_OWORD *)(v10 + 192) = v26;
          *(_OWORD *)(v10 + 208) = v27;
          *(_OWORD *)(v10 + 176) = v25;
          v10 += 232;
          if (v10 - *v9 == 3944)
          {
            v28 = v9[1];
            ++v9;
            v10 = v28;
          }
        }
      }
      v6 = a1[53];
      v7 = a1[50];
      v8 = a1[51];
    }
  }
  v29 = v6 + *v11;
  v30 = (char *)(v7 + 8 * (v29 / 0x11));
  if (v8 == v7)
    v31 = 0;
  else
    v31 = (char *)(*(_QWORD *)v30 + 232 * (v29 % 0x11));
  sub_100690B54(v4, (char *)v9, (char *)v10, v30, v31);
  if ((unint64_t)(*(_QWORD *)(a2 + 16) - 13) <= 4)
  {
    v32 = (void **)a1[50];
    v33 = a1[51];
    a1[54] = 0;
    v34 = v33 - (_QWORD)v32;
    if (v34 >= 0x11)
    {
      do
      {
        operator delete(*v32);
        v35 = a1[51];
        v32 = (void **)(a1[50] + 8);
        a1[50] = v32;
        v34 = v35 - (_QWORD)v32;
      }
      while (v34 > 0x10);
    }
    if (v34 >> 3 == 1)
    {
      v36 = 8;
    }
    else
    {
      if (v34 >> 3 != 2)
        return;
      v36 = 17;
    }
    a1[53] = v36;
  }
}

__n128 sub_100690A70(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;
  __int128 v18;
  __int128 v19;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 2 * (v4 - v5) + ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1006924A4(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x11)) + 232 * (v7 % 0x11);
  v9 = *a2;
  v10 = a2[2];
  *(_OWORD *)(v8 + 16) = a2[1];
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)v8 = v9;
  v11 = a2[3];
  v12 = a2[4];
  v13 = a2[6];
  *(_OWORD *)(v8 + 80) = a2[5];
  *(_OWORD *)(v8 + 96) = v13;
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)(v8 + 64) = v12;
  v14 = a2[7];
  v15 = a2[8];
  v16 = a2[10];
  *(_OWORD *)(v8 + 144) = a2[9];
  *(_OWORD *)(v8 + 160) = v16;
  *(_OWORD *)(v8 + 112) = v14;
  *(_OWORD *)(v8 + 128) = v15;
  result = (__n128)a2[11];
  v18 = a2[12];
  v19 = a2[13];
  *(_QWORD *)(v8 + 224) = *((_QWORD *)a2 + 28);
  *(_OWORD *)(v8 + 192) = v18;
  *(_OWORD *)(v8 + 208) = v19;
  *(__n128 *)(v8 + 176) = result;
  ++a1[5];
  return result;
}

unint64_t sub_100690B54(_QWORD *a1, char *a2, char *a3, char *a4, char *a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char **v9;
  char *v10;
  unint64_t v11;
  __n128 v12;
  __n128 v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE **v16;
  _BYTE *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  __n128 v24[2];

  if (a5 == a3)
    v6 = 0;
  else
    v6 = 2 * (a4 - a2)
       + ((a4 - a2) >> 3)
       + 0x34F72C234F72C235 * ((uint64_t)&a5[-*(_QWORD *)a4] >> 3)
       - 0x34F72C234F72C235 * ((uint64_t)&a3[-*(_QWORD *)a2] >> 3);
  v7 = a1[4];
  v8 = a1[1];
  v9 = (char **)(v8 + 8 * (v7 / 0x11));
  if (a1[2] == v8)
    v10 = 0;
  else
    v10 = &(*v9)[232 * (v7 % 0x11)];
  if (a3 == v10)
    v11 = 0;
  else
    v11 = 2 * (a2 - (char *)v9)
        + ((a2 - (char *)v9) >> 3)
        + 0x34F72C234F72C235 * ((uint64_t)&a3[-*(_QWORD *)a2] >> 3)
        - 0x34F72C234F72C235 * ((v10 - *v9) >> 3);
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x11);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_100692884(v24, v11);
  if (v6 >= 1)
  {
    v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_100692884(v24, v6);
      sub_10069292C(v9, v10, (char **)v12.n128_u64[0], (char *)v12.n128_u64[1], v24[0].n128_u64[0], (char *)v24[0].n128_u64[1], v24);
      v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
      while ((sub_1006927B8((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_100692884(v24, v6);
      v13 = v24[0];
      v14 = a1[4] + a1[5];
      v15 = a1[1];
      v16 = (_BYTE **)(v15 + 8 * (v14 / 0x11));
      if (a1[2] == v15)
        v17 = 0;
      else
        v17 = &(*v16)[232 * (v14 % 0x11)];
      v24[0] = v12;
      sub_100692AD8(v13.n128_u64[0], (_BYTE *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_100692814(a1, 1) & 1) != 0)
        ;
    }
  }
  v19 = a1[4];
  v20 = a1[1];
  v21 = (_QWORD *)(v20 + 8 * (v19 / 0x11));
  if (a1[2] == v20)
    v22 = 0;
  else
    v22 = *v21 + 232 * (v19 % 0x11);
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_100692884(v24, v11);
  return v24[0].n128_u64[0];
}

void sub_100690DE0(_QWORD *a1)
{
  sub_100691068(a1);
  operator delete();
}

uint64_t sub_100690E04(uint64_t a1)
{
  unsigned __int8 v3;

  *(_BYTE *)a1 = 0;
  v3 = 0;
  sub_1018BF25C((unsigned __int8 *)(a1 + 1), "fForceAssistedCyclingOverrideToTrue", &v3, 0);
  *(int64x2_t *)(a1 + 8) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_DWORD *)(a1 + 24) = 0;
  uuid_clear((unsigned __int8 *)(a1 + 28));
  return a1;
}

void sub_100690E60(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

double sub_100690E8C@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  NSObject *v4;
  int v5;
  double result;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_10214B3B0);
  v4 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 152);
    *(_DWORD *)buf = 67109120;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "ScubaDiving, Static, activity: %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10214B3B0);
    v7 = *(_DWORD *)(a1 + 152);
    v10[0] = 67109120;
    v10[1] = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "ScubaDiving, Static, activity: %d", v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLCalorieScubaDivingModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  *(_OWORD *)a2 = xmmword_101BB9280;
  *(_QWORD *)(a2 + 16) = 0x40A8000000000000;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)&result = 0x1500000003;
  *(_QWORD *)(a2 + 32) = 0x1500000003;
  return result;
}

_QWORD *sub_100691068(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_10214B308;
  v2 = (uint64_t)(a1 + 1);
  sub_100691160(a1 + 49);
  sub_100261F44((uint64_t)(a1 + 47));
  sub_100261F44((uint64_t)(a1 + 45));
  sub_100261F44((uint64_t)(a1 + 43));
  sub_100261F44((uint64_t)(a1 + 41));
  sub_100261F44((uint64_t)(a1 + 39));
  sub_100261F44((uint64_t)(a1 + 37));
  sub_100261F44((uint64_t)(a1 + 35));
  sub_100261F44((uint64_t)(a1 + 33));
  sub_100261F44((uint64_t)(a1 + 31));
  sub_100261F44((uint64_t)(a1 + 29));
  sub_100261F44((uint64_t)(a1 + 27));
  sub_100261F44((uint64_t)(a1 + 25));
  sub_100261F44((uint64_t)(a1 + 23));
  sub_100261F44((uint64_t)(a1 + 21));
  sub_100261F44((uint64_t)(a1 + 19));
  sub_100261F44((uint64_t)(a1 + 17));
  sub_100261F44((uint64_t)(a1 + 15));
  sub_100261F44((uint64_t)(a1 + 13));
  sub_100261F44((uint64_t)(a1 + 11));
  sub_100261F44((uint64_t)(a1 + 9));
  sub_100261F44((uint64_t)(a1 + 7));
  sub_100261F44((uint64_t)(a1 + 5));
  sub_100261F44((uint64_t)(a1 + 3));
  sub_100261F44(v2);
  return a1;
}

uint64_t sub_100691160(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 8;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 17;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10002E778((uint64_t)a1);
}

void sub_1006911F4(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10069124C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10069126C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_100691284(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1006912C4(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10069131C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10069133C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_100691354(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100691394(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1006913EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10069140C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_100691424(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100691464(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1006914BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006914DC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1006914F4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100691534(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10069158C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006915AC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1006915C4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100691604(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10069165C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10069167C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_100691694(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1006916D4(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10069172C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10069174C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_100691764(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1006917A4(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1006917FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10069181C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_100691834(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100691874(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1006918CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006918EC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_100691904(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100691944(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10069199C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006919BC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1006919D4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100691A14(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100691A6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100691A8C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_100691AA4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100691AE4(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100691B3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100691B5C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_100691B74(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100691BB4(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100691C0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100691C2C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_100691C44(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100691C84(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100691CDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100691CFC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_100691D14(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100691D54(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100691DAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100691DCC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_100691DE4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100691E24(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100691E7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100691E9C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_100691EB4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100691EF4(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100691F4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100691F6C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_100691F84(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100691FC4(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10069201C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10069203C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_100692054(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100692094(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1006920EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10069210C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_100692124(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100692164(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1006921BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006921DC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1006921F4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100692234(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10069228C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006922AC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1006922C4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100692304(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10069235C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10069237C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_100692394(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1006923D4(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10069242C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10069244C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_100692464(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1006924A4(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x11;
  v4 = v2 - 17;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xF68uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xF68uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xF68uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_10069276C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1006927B8(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x11)
    a2 = 1;
  if (v2 < 0x22)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 17;
  }
  return v4 ^ 1u;
}

uint64_t sub_100692814(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 2 * (v2 - v3) + ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x11)
    a2 = 1;
  if (v5 < 0x22)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

_QWORD *sub_100692884(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  if (a2)
  {
    v2 = (_QWORD *)*result;
    v3 = a2 + 0x34F72C234F72C235 * ((uint64_t)(result[1] - *(_QWORD *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      v5 = 16 - v3;
      v6 = &v2[-(v5 / 0x11)];
      *result = v6;
      v4 = *v6 + 232 * (17 * (v5 / 0x11) - v5) + 3712;
    }
    else
    {
      *result = &v2[v3 / 0x11];
      v4 = v2[v3 / 0x11] + 232 * (v3 % 0x11);
    }
    result[1] = v4;
  }
  return result;
}

__n128 sub_10069292C@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, _QWORD *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  char *v12;
  char **v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_1006929F8(v12, v14, v15, v16, &v21);
      v16 = (char *)v22.n128_u64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 3944;
    }
    v18 = *a1 + 3944;
    v19 = a2;
  }
  sub_1006929F8(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_1006929F8@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *result;
  uint64_t v14;
  char *v15;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = 0x34F72C234F72C235 * ((uint64_t)&a4[-v10] >> 3);
      if (0x34F72C234F72C235 * ((v11 - a1) >> 3) < v12)
        v12 = 0x34F72C234F72C235 * ((v11 - a1) >> 3);
      v11 -= 232 * v12;
      a4 -= 232 * v12;
      if (v12)
        result = memmove(a4, v11, 232 * v12);
      if (v11 == a1)
        break;
      v14 = *--v6;
      v10 = v14;
      a4 = (char *)(v14 + 3944);
    }
    if ((char *)(*v6 + 3944) == a4)
    {
      v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_100692AD8(_QWORD *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  void **v7;
  char *v8;
  _QWORD *v10;
  _BYTE *i;
  _BYTE *v12;
  double result;
  uint64_t v14;
  __int128 v15;

  v7 = *(void ***)a5;
  v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = (_BYTE *)(*a1 + 3944); ; i = v12 + 3944)
    {
      sub_100692B68(a2, v8, i, v7, &v14);
      v8 = (char *)*((_QWORD *)&v15 + 1);
      v7 = (void **)v15;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v8;
      if (v10 == a3)
        break;
      v12 = (_BYTE *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_100692B68(a2, v8, a4, v7, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_100692B68@<X0>(_BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, _QWORD *a5@<X8>)
{
  void **v6;
  _BYTE *v7;
  _BYTE *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *result;
  char *v14;

  v6 = a4;
  v7 = __src;
  if (__src == a3)
  {
    v9 = __src;
  }
  else
  {
    v9 = a3;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = 0x34F72C234F72C235 * ((v10 - __dst + 3944) >> 3);
      v12 = 0x34F72C234F72C235 * ((v9 - v7) >> 3) >= v11 ? v11 : 0x34F72C234F72C235 * ((v9 - v7) >> 3);
      if (v12)
        result = memmove(__dst, v7, 232 * v12);
      v7 += 232 * v12;
      if (v7 == v9)
        break;
      v14 = (char *)*v6++;
      v10 = v14;
      __dst = v14;
    }
    __dst += 232 * v12;
    if ((char *)*(v6 - 1) + 3944 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

void sub_100692CF8(id a1)
{
  qword_102303200 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLTimeManagerSilo"));
}

uint64_t sub_100692DAC(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1006931C0;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102303210 != -1)
    dispatch_once(&qword_102303210, block);
  return qword_102310B58;
}

void sub_100692FC0(uint64_t a1, unint64_t a2)
{
  double v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  int v6;
  double v7;
  uint8_t buf[4];
  double v9;

  v2 = (double)a2 / 1000.0 - kCFAbsoluteTimeIntervalSince1970;
  if (vabdd_f64(v2, *(double *)&qword_102303218) > 600.0)
  {
    *(double *)&qword_102303218 = (double)a2 / 1000.0 - kCFAbsoluteTimeIntervalSince1970;
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214C0D0);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v9 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Sending along GPS time %.2f to CoreTime", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214C0D0);
      v6 = 134217984;
      v7 = v2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Sending along GPS time %.2f to CoreTime", COERCE_DOUBLE(&v6));
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLTimeManager::setGpsTime(uint64_t)", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    TMSetSourceTime(type metadata for , v2, 0.1);
  }
}

void sub_1006931C0()
{
  operator new();
}

void sub_100693208()
{
  operator delete();
}

const void *sub_10069322C(const void *a1, void *a2)
{
  uint64_t v3;
  BOOL *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  NSObject *v8;
  _BOOL4 v9;
  __CFNotificationCenter *DarwinNotifyCenter;
  _BOOL4 v12;
  const char *v13;
  uint8_t *v14;
  _DWORD v15[4];
  uint8_t buf[8];
  std::__shared_weak_count *v17;

  v3 = sub_100693508((uint64_t)a1, "CLTimeManager", a2);
  *(_BYTE *)(v3 + 109) = 1;
  v4 = (BOOL *)(v3 + 109);
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)v3 = &off_10214BF18;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0xBFF0000000000000;
  sub_1001E4804(buf);
  sub_1001E4874(*(uint64_t *)buf, "EnableProactiveBBTimeTransfer", v4);
  v5 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214C0D0);
  v8 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v9 = *v4;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "EnableProactiveBBTimeTransfer,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214C0D0);
    v12 = *v4;
    v15[0] = 67109120;
    v15[1] = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "EnableProactiveBBTimeTransfer,%d", v15);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "CLTimeManager::CLTimeManager(id<CLIntersiloUniverse>)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  if (*v4)
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_1006935A4, type metadata for Builtin.UnsafeValueBuffer, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    sub_1006937C4((uint64_t)a1);
  }
  return a1;
}

void sub_1006934B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;

  sub_100694874(v2, 0);
  v5 = *v3;
  *v3 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_1006937FC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100693508(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_10214C120;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100693588(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1006935A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  id v12;
  _QWORD v13[9];
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLTimeManager::onBBTimeActiveNotification");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214C0B0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTimeManager::onBBTimeActiveNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C0B0);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTimeManager::onBBTimeActiveNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v12 = objc_msgSend(*(id *)(a2 + 32), "silo");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1006962A0;
  v13[3] = &unk_1021382B0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  objc_msgSend(v12, "sync:", v13);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_1006937A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1006937C4(uint64_t a1)
{
  if (TMIsBBTimeActive())
    sub_100694260(a1);
  else
    sub_100693938(a1);
}

uint64_t sub_1006937FC(uint64_t a1)
{
  *(_QWORD *)a1 = off_10214C120;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_100693870(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_10214BF18;
  if (*(_BYTE *)(a1 + 109))
    sub_100693938(a1);
  *(_BYTE *)(a1 + 108) = 1;
  sub_100694874((uint64_t *)(a1 + 136), 0);
  v2 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_1006937FC(a1);
}

void sub_1006938E0(uint64_t a1)
{
  sub_100693870(a1);
  operator delete();
}

uint64_t sub_100693904(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_BYTE *)(result + 109))
    result = sub_100693938(result);
  *(_BYTE *)(v1 + 108) = 1;
  return result;
}

uint64_t sub_100693938(uint64_t a1)
{
  uint64_t *v1;
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v1 = (uint64_t *)(a1 + 136);
  if (*(_QWORD *)(a1 + 136))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214C0D0);
    v2 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Stopping proactive time", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214C0D0);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Stopping proactive time", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLTimeManager::stopBBTimeActive()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
  return sub_100694874(v1, 0);
}

_QWORD *sub_100693ADC@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_100693B54()
{
  return 1;
}

uint64_t sub_100693B5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 136) == a2)
  {
    v2 = a1;
    if (qword_1022A02D0 == -1)
      goto LABEL_3;
  }
  else
  {
    sub_101904720(qword_1022A02D0 == -1);
  }
  dispatch_once(&qword_1022A02D0, &stru_10214C0D0);
LABEL_3:
  v3 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Resuming proactive time", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214C0D0);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Resuming proactive time", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLTimeManager::onBBTimeActiveRetry(CLPersistentTimer *)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  return sub_100693D0C(v2);
}

void sub_100693D0C(uint64_t a1)
{
  uint64_t *v1;
  double Current;
  double v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v12;
  const char *v13;
  char *v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  double v18;
  _WORD v19[8];
  _BYTE v20[28];
  _DWORD buf[3];
  __int16 v22;
  uint64_t v23;

  if (*(_QWORD *)(a1 + 128))
  {
    Current = CFAbsoluteTimeGetCurrent();
    v4 = *(double *)(a1 + 144);
    if (v4 > 0.0 && v4 - Current < 1800.0 && Current < v4 + 900.0 + 5.0)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214C0D0);
      v5 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v6 = *(_QWORD *)(a1 + 144);
        buf[0] = 134218240;
        *(_QWORD *)&buf[1] = v6;
        v22 = 2048;
        v23 = 0x408C200000000000;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Deferring proactive time, last attempt was at %f, which is less than minimum interval %f ago", (uint8_t *)buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10214C0D0);
        v15 = *(_QWORD *)(a1 + 144);
        *(_DWORD *)v20 = 134218240;
        *(_QWORD *)&v20[4] = v15;
        *(_WORD *)&v20[12] = 2048;
        *(_QWORD *)&v20[14] = 0x408C200000000000;
        LODWORD(v18) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Deferring proactive time, last attempt was at %f, which is less than minimum interval %f ago", COERCE_DOUBLE(v20), v18);
        v17 = (char *)v16;
        sub_100512490("Generic", 1, 0, 2, "void CLTimeManager::startBBTimeActiveJob()", "%s\n", v16);
        if (v17 != (char *)buf)
          free(v17);
      }
      operator new();
    }
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)v20 = _Q0;
    *(_WORD *)&v20[16] = 0;
    *(_QWORD *)&v20[20] = 10;
    v1 = &qword_1022A0000;
    if (qword_1022A0070 == -1)
    {
LABEL_12:
      v12 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#wigo,on,TimeManager", (uint8_t *)buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v1[14] != -1)
          dispatch_once(&qword_1022A0070, &stru_10214C0F0);
        v19[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#wigo,on,TimeManager", v19, 2);
        v14 = (char *)v13;
        sub_100512490("Generic", 1, 0, 2, "void CLTimeManager::startBBTimeActiveJob()", "%s\n", v13);
        if (v14 != (char *)buf)
          free(v14);
      }
      AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.GNSS.WIGO"), &stru_10214BFE8);
      sub_1001B3AF0();
    }
  }
  else
  {
    sub_10190488C();
    __break(1u);
  }
  dispatch_once(&qword_1022A0070, &stru_10214C0F0);
  goto LABEL_12;
}

void sub_100694214(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  operator delete();
}

void sub_100694260(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  double v4;
  uint8_t *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 109))
  {
    if (sub_10075CC24() && !*(_QWORD *)(a1 + 136))
    {
      if (!*(_QWORD *)(a1 + 128))
        sub_100E087CC();
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214C0D0);
      v2 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Starting proactive time", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10214C0D0);
        v9[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Starting proactive time", v9, 2);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "void CLTimeManager::startBBTimeActive()", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
      sub_100693D0C(a1);
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214C0D0);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "proactive time is NOT enabled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214C0D0);
      v9[0] = 0;
      v4 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "proactive time is NOT enabled", v9, 2);
      v6 = v5;
      sub_100512490("Generic", 1, 0, 2, "void CLTimeManager::startBBTimeActive()", "%s\n", v4, v5);
      if (v6 != buf)
        free(v6);
    }
  }
}

void sub_1006946C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  NSObject *v6;
  os_activity_scope_state_s state;
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  CLProfilingIdentify("CLTimeManager::onBBNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214C0B0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v8 = 1;
    v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTimeManager::onBBNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C0B0);
    v6 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = "activity";
      v15 = 2050;
      v16 = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTimeManager::onBBNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v8 = 0;
  }
  if (v8)
    os_activity_scope_leave(&state);
}

void sub_100694858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100694874(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1009865B8(result);
    operator delete();
  }
  return result;
}

void sub_1006948B0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLTimeManager::onBBTimeActiveRetry");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214C0B0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTimeManager::onBBTimeActiveRetry", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C0B0);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTimeManager::onBBTimeActiveRetry\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_100693B5C(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_100694A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

NSDictionary *__cdecl sub_100694A80(id a1)
{
  return (NSDictionary *)&off_10221FC28;
}

_QWORD *sub_100694A8C(_QWORD *result)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  NSObject *v4;
  const char *v5;
  const char *v6;
  uint8_t *v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  const char *v11;
  uint8_t buf[4];
  const char *v13;

  v1 = result[4];
  if (*(_QWORD *)(v1 + 128) == result[5])
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214C0D0);
    v2 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      if (*(_QWORD *)(v1 + 136))
        v3 = "Pausing";
      else
        v3 = "Stopped";
      *(_DWORD *)buf = 136315138;
      v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s proactive time", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214C0D0);
      if (*(_QWORD *)(v1 + 136))
        v5 = "Pausing";
      else
        v5 = "Stopped";
      v10 = 136315138;
      v11 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "%s proactive time", (const char *)&v10);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLTimeManager::startBBTimeActiveJob()_block_invoke", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10214C0F0);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#wigo,off,TimeManager", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10214C0F0);
      LOWORD(v10) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#wigo,off,TimeManager", &v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLTimeManager::startBBTimeActiveJob()_block_invoke", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.GNSS.WIGO"), &stru_10214C008);
    return objc_msgSend(*(id *)(*(_QWORD *)(v1 + 128) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(v1 + 128) + 8), 0);
  }
  return result;
}

NSDictionary *__cdecl sub_100694DCC(id a1)
{
  return (NSDictionary *)&off_10221FC50;
}

void sub_100694DD8()
{
  operator new();
}

void sub_100694E84(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_100694EC0(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = &off_10214C200;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_100694F94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10214C0B0);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_10214C0B0);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData>::removeClient(int) [Notification_T = CLTimeManager_Type::Notification, NotificationData_T = CLTimeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

BOOL sub_100695208(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C0B0);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10214C0B0);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLTimeManager_Type::Notification, NotificationData_T = CLTimeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100695488(uint64_t a1, int *a2, int *a3)
{
  _QWORD *v6;
  int v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v13;
  __int128 v14;
  int *v15;

  v6 = operator new(0x20uLL);
  v6[2] = 0;
  *v6 = off_10214C248;
  v6[1] = 0;
  v7 = *a3;
  *((_QWORD *)&v14 + 1) = v6;
  *((_DWORD *)v6 + 6) = v7;
  *(_QWORD *)&v14 = v6 + 3;
  v13 = *a2;
  v15 = &v13;
  v8 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v13, (uint64_t)&unk_101B9EB60, &v15);
  sub_1002B7674((uint64_t)(v8 + 8), &v14);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return 1;
}

void sub_10069555C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100695570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;

  v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, &v5, a3, a4, 0);
}

void sub_1006955A8(uint64_t a1, signed __int32 *a2, _DWORD *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v30[20];
  __int16 v31;
  _QWORD *v32;
  __int16 v33;
  std::__shared_weak_count *v34;
  _QWORD **v35;
  _QWORD *v36[3];
  std::__shared_weak_count *v37;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C0B0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v30 = 2082;
      *(_QWORD *)&v30[2] = "";
      *(_WORD *)&v30[10] = 2082;
      *(_QWORD *)&v30[12] = "activity";
      v31 = 2082;
      v32 = v10;
      v33 = 2050;
      v34 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v35 = v36;
      memset(v36, 0, sizeof(v36));
      v37 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v35);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v30, *(_QWORD **)&v30[8]);
      v21 = v37;
      if (v37)
      {
        v22 = (unint64_t *)&v37->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v35, v36[0]);
    }
    if (a4)
    {
      v24 = operator new(0x20uLL);
      v24[2] = 0;
      *v24 = off_10214C248;
      v24[1] = 0;
      *((_DWORD *)v24 + 6) = *a3;
      *(_QWORD *)buf = v24 + 3;
      *(_QWORD *)v30 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v25 = *(std::__shared_weak_count **)v30;
      if (*(_QWORD *)v30)
      {
        v26 = (unint64_t *)(*(_QWORD *)v30 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_100696D5C();
    os_activity_scope_leave(&state);
  }
}

void sub_100695BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100695C2C(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C0B0);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10214C0B0);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData>::listClients() [Notification_T = CLTimeManager_Type::Notification, NotificationData_T = CLTimeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C0B0);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10214C0B0);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData>::listClients() [Notification_T = CLTimeManager_Type::Notification, NotificationData_T = CLTimeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10214C0B0);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10214C0B0);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData>::listClients() [Notification_T = CLTimeManager_Type::Notification, NotificationData_T = CLTimeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_1006961D8(uint64_t a1)
{
  sub_1006962D4(a1);
  operator delete();
}

void sub_1006961FC(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  uint64_t v5;
  int v6;

  v3 = a2;
  sub_1006964EC(a3, a2);
  if (v5)
  {
    v6 = v3;
    (*(void (**)(_QWORD, int *, uint64_t, _QWORD))(a1 + 24))(0, &v6, v5, *(_QWORD *)(a1 + 32));
  }
}

void sub_100696248(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100696274(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1006962A0(uint64_t a1)
{
  sub_1006937C4(*(_QWORD *)(a1 + 32));
}

void sub_1006962A8(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_1006962D4(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = &off_10214C200;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_100696334(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_100696360()
{
  operator new();
}

_BYTE *sub_1006963F0(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t v14;
  int *v15;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v14) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    sub_1006964EC(a4, a2);
    v10 = v9;
    v11 = *(_QWORD *)a3 + 80;
    v12 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v15 = (int *)(*(_QWORD *)a2 + 32);
    v13 = sub_1001AFE94(v12, v15, (uint64_t)&unk_101B9EB60, &v15);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v14, v10, v11, v13 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v14);
  }
  return result;
}

uint64_t sub_1006964CC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

void sub_1006964EC(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
  {
    sub_100696564(a1);
  }
  else
  {
    v5 = objc_opt_class(CLCppContainer, v4);
    if ((objc_opt_isKindOfClass(a1, v5) & 1) != 0)
      sub_1006968EC(a1);
  }
}

void sub_100696564(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
  {
    sub_100696C98((uint64_t)&v7 + 7, a1);
    return;
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10214C218);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BBB08CLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_10214C218);
      LODWORD(v8) = 134218498;
      HIDWORD(v8) = (_DWORD)v2;
      LODWORD(v7) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, v7, v8);
LABEL_21:
      v6 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLTimeManager_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10214C218);
    v5 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BBB08CLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_10214C218);
      LODWORD(v8) = 134218498;
      HIDWORD(v8) = (_DWORD)v2;
      LODWORD(v7) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, v7, v8);
      goto LABEL_21;
    }
  }
}

id sub_1006968EC(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10214C218);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BBB08CLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10214C218);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10214C218);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BBB08CLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10214C218);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLTimeManager_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_100696C98(uint64_t a1, void *a2)
{
  std::__shared_weak_count *v3;

  if (objc_msgSend(a2, "cppObjectPtr")
    || !objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221B4F8))
  {
    goto LABEL_5;
  }
  if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") == (id)4)
  {
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
LABEL_5:
    objc_msgSend(a2, "cppObjectPtr");
    return;
  }
  v3 = (std::__shared_weak_count *)sub_101904A08();
  sub_100696D0C(v3);
}

void sub_100696D0C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10214C248;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100696D20(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10214C248;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100696D5C()
{
  operator new();
}

void sub_100696DEC(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        sub_1006964EC(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, uint64_t, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_1006963F0(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10214C0B0);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10214C0B0);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLTimeManager_Type::Notification, NotificationData_T = CLTimeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

uint64_t sub_1006971C0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

void sub_100697254(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  NSObject *v7;
  unsigned int v8;
  unsigned int v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  int v15;
  __n128 v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  id v29;
  const char *v30;
  uint8_t *v31;
  int32x4_t v32;
  __int16 v33;
  unsigned int v34;
  __int16 v35;
  unsigned int v36;
  __int16 v37;
  id v38;
  uint8_t buf[4];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;

  if (a2)
  {
    v4 = sub_100B303DC();
    sub_10010F434((uint64_t)buf);
    sub_100B30A14(v4, (uint64_t *)buf);
    *(_DWORD *)buf = 23;
    v32.i32[0] = 23;
    v32.i32[1] = sub_10142DEC4((int *)buf);
    v5 = sub_1005EE584();
    sub_1005FDA60(v5, &v32, (int *)(a1 + 5124), a2, 0);
    v6 = 0;
    if (objc_msgSend(a2, "hasArrivalDate"))
      v6 = objc_msgSend(a2, "hasDepartureDate") ^ 1;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v7 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      v8 = objc_msgSend(a2, "hasDepartureDate");
      v9 = objc_msgSend(a2, "hasArrivalDate");
      v10 = objc_msgSend(objc_msgSend(a2, "description"), "UTF8String");
      *(_DWORD *)buf = 67240963;
      LODWORD(v40) = v6;
      WORD2(v40) = 1026;
      *(_DWORD *)((char *)&v40 + 6) = v8;
      WORD5(v40) = 1025;
      HIDWORD(v40) = v9;
      LOWORD(v41) = 2081;
      *(_QWORD *)((char *)&v41 + 2) = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "LocationController,onVisit,isInsideVisit,%{public}d,hasDepartDate,%{public}d,hasArrivalDate,%{private}d,description,%{private}s", buf, 0x1Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v26 = qword_1022A0028;
      v27 = objc_msgSend(a2, "hasDepartureDate");
      v28 = objc_msgSend(a2, "hasArrivalDate");
      v29 = objc_msgSend(objc_msgSend(a2, "description"), "UTF8String");
      v32.i32[2] = 67240963;
      v32.i32[3] = v6;
      v33 = 1026;
      v34 = v27;
      v35 = 1025;
      v36 = v28;
      v37 = 2081;
      v38 = v29;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "LocationController,onVisit,isInsideVisit,%{public}d,hasDepartDate,%{public}d,hasArrivalDate,%{private}d,description,%{private}s", &v32.u64[1], 30);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationController::onVisit(const CLVisit *)", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
    sub_1006A1D58(a1, 12, v6);
    v11 = *(_QWORD *)(a1 + 312);
    if (v11)
      sub_100E5E6C4(v11, a2);
    v12 = *(_QWORD *)(a1 + 304);
    if (v12)
    {
      v13 = sub_100B303DC();
      *(_DWORD *)buf = 1;
      v14 = sub_100B30608(v13, buf);
      sub_100F6A914(v12, v6, v14);
    }
    v15 = v6 ^ 1;
    sub_10113D92C(a1 + 5200, v15);
    *(_DWORD *)buf = 0xFFFF;
    v40 = 0uLL;
    v41 = xmmword_101BAFC90;
    __asm { FMOV            V0.2D, #-1.0 }
    v42 = _Q0;
    v43 = _Q0;
    v44 = _Q0;
    v45 = 0;
    v47 = 0;
    v48 = 0;
    v46 = 0xBFF0000000000000;
    v49 = 0;
    v50 = 0xBFF0000000000000;
    v51 = 0x7FFFFFFF;
    v53 = 0;
    v54 = 0;
    v52 = 0;
    v55 = 0;
    v21 = sub_10113D7A4(a1 + 5200, (uint64_t)buf);
    if ((v15 & 1) != 0)
    {
      v25 = *(_QWORD *)(a1 + 288);
      if (v25)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v25 + 504))(v25, v21);
    }
    else
    {
      sub_1006A9478(a1, a2);
      v22 = *(_QWORD *)(a1 + 288);
      if (v22)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 488))(v22, 0);
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v23 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      LODWORD(v40) = 0;
      WORD2(v40) = 2082;
      *(_QWORD *)((char *)&v40 + 6) = "";
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"LocationController,slv,nil visit in onVisit()\"}", buf, 0x12u);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    }
    v24 = qword_1022A0028;
    if (os_signpost_enabled((os_log_t)qword_1022A0028))
    {
      *(_DWORD *)buf = 68289026;
      LODWORD(v40) = 0;
      WORD2(v40) = 2082;
      *(_QWORD *)((char *)&v40 + 6) = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v24, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "LocationController,slv,nil visit in onVisit()", "{\"msg%{public}.0s\":\"LocationController,slv,nil visit in onVisit()\"}", buf, 0x12u);
    }
  }
}

void sub_100697800(id a1)
{
  qword_102303250 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLLocationControllerSilo"));
}

uint64_t sub_1006978B4(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1006994D0;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102303260 != -1)
    dispatch_once(&qword_102303260, block);
  return qword_102310B60;
}

uint64_t sub_100697A44(uint64_t a1, uint64_t a2)
{
  double *v4;
  unint64_t v5;
  char **v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  double *v12;
  double *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  unint64_t v20;
  double *v21;
  double *v22;
  double *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  double *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  unint64_t *v33;
  double *v34;
  double *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  double *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  double *v50;
  double *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  unint64_t *v57;
  unint64_t v58;
  double v59;
  double *v60;
  double *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  double *v67;
  uint64_t v68;
  _QWORD *v69;
  double *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  double *v79;
  double *v80;
  double *v81;
  double *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  double v90;
  double *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  double *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  double *v102;
  double *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  double v111;
  double *v112;
  double *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  double *v119;
  uint64_t v120;
  _QWORD *v121;
  double *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  double *v132;
  double *v133;
  double *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  double *v142;
  double *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  double *v151;
  double *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  double v160;
  double *v161;
  double *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  char *v167;
  double *v168;
  uint64_t v169;
  double v170;
  double *v171;
  double *v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  char *v177;
  double *v178;
  uint64_t v179;
  double *v180;
  double *v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  double *v189;
  double *v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  double *v198;
  double *v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  double *v207;
  double *v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  double *v216;
  double *v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  char *v222;
  char *v223;
  uint64_t v224;
  double *v225;
  double *v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  double *v234;
  double *v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  _QWORD *v243;
  double *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  unint64_t v248;
  char *v249;
  char *v250;
  char *v251;
  uint64_t v252;
  uint64_t v254;
  uint64_t v255;
  __int128 v256;
  int v257;
  __int16 v258;
  __int128 v259;
  __int128 v260;
  uint64_t v261;
  int v262;

  v4 = *(double **)a2;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  v6 = (char **)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v4 >= v5)
  {
    v8 = v5 - (_QWORD)v4;
    v9 = v8 >> 2;
    if ((unint64_t)(v8 >> 2) <= 1)
      v9 = 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v11 = sub_10025E6A0((uint64_t)v6, v10);
    v12 = *(double **)a2;
    v13 = *(double **)(a2 + 8);
    v15 = &v11[v14];
    *v11 = 0x3FF0000000000000;
    v7 = v11 + 1;
    while (v13 != v12)
    {
      v16 = *((_QWORD *)v13-- - 1);
      *--v11 = v16;
    }
    *(_QWORD *)a2 = v11;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v15;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *v4 = 1.0;
    v7 = v4 + 1;
  }
  *(_QWORD *)(a2 + 8) = v7;
  v17 = sub_100B303DC();
  LODWORD(v254) = 1;
  v18 = sub_100B30608(v17, &v254);
  v19 = v18;
  v21 = *(double **)(a2 + 8);
  v20 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v21 >= v20)
  {
    v23 = *(double **)a2;
    v24 = ((uint64_t)v21 - *(_QWORD *)a2) >> 3;
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 61)
      goto LABEL_407;
    v26 = v20 - (_QWORD)v23;
    if (v26 >> 2 > v25)
      v25 = v26 >> 2;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
      v27 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v28 = (char *)sub_10025E6A0((uint64_t)v6, v27);
      v23 = *(double **)a2;
      v21 = *(double **)(a2 + 8);
    }
    else
    {
      v28 = 0;
    }
    v29 = (double *)&v28[8 * v24];
    v30 = &v28[8 * v27];
    *v29 = v19;
    v22 = v29 + 1;
    while (v21 != v23)
    {
      v31 = *((_QWORD *)v21-- - 1);
      *((_QWORD *)v29-- - 1) = v31;
    }
    *(_QWORD *)a2 = v29;
    *(_QWORD *)(a2 + 8) = v22;
    *(_QWORD *)(a2 + 16) = v30;
    if (v23)
      operator delete(v23);
  }
  else
  {
    *v21 = v18;
    v22 = v21 + 1;
  }
  *(_QWORD *)(a2 + 8) = v22;
  v32 = *(char **)(a2 + 16);
  if (*(_QWORD *)(a1 + 712))
  {
    if (v22 >= (double *)v32)
    {
      v35 = *(double **)a2;
      v36 = ((uint64_t)v22 - *(_QWORD *)a2) >> 3;
      v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 61)
        goto LABEL_407;
      v38 = v32 - (char *)v35;
      if (v38 >> 2 > v37)
        v37 = v38 >> 2;
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
        v39 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v39 = v37;
      if (v39)
      {
        v40 = (char *)sub_10025E6A0((uint64_t)v6, v39);
        v35 = *(double **)a2;
        v22 = *(double **)(a2 + 8);
      }
      else
      {
        v40 = 0;
      }
      v47 = &v40[8 * v36];
      v32 = &v40[8 * v39];
      *(_QWORD *)v47 = 0x3FF0000000000000;
      v33 = (unint64_t *)(v47 + 8);
      while (v22 != v35)
      {
        v48 = *((_QWORD *)v22-- - 1);
        *((_QWORD *)v47 - 1) = v48;
        v47 -= 8;
      }
      *(_QWORD *)a2 = v47;
      *(_QWORD *)(a2 + 8) = v33;
      *(_QWORD *)(a2 + 16) = v32;
      if (v35)
      {
        operator delete(v35);
        v32 = *v6;
      }
    }
    else
    {
      *v22 = 1.0;
      v33 = (unint64_t *)(v22 + 1);
    }
    *(_QWORD *)(a2 + 8) = v33;
    if (v33 >= (unint64_t *)v32)
    {
      v51 = *(double **)a2;
      v52 = ((uint64_t)v33 - *(_QWORD *)a2) >> 3;
      v53 = v52 + 1;
      if ((unint64_t)(v52 + 1) >> 61)
        goto LABEL_407;
      v54 = v32 - (char *)v51;
      if (v54 >> 2 > v53)
        v53 = v54 >> 2;
      if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
        v55 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v55 = v53;
      if (v55)
      {
        v56 = (char *)sub_10025E6A0((uint64_t)v6, v55);
        v51 = *(double **)a2;
        v33 = *(unint64_t **)(a2 + 8);
      }
      else
      {
        v56 = 0;
      }
      v57 = (unint64_t *)&v56[8 * v52];
      v32 = &v56[8 * v55];
      v49 = *(_QWORD *)(a1 + 736);
      *v57 = v49;
      v50 = (double *)(v57 + 1);
      while (v33 != (unint64_t *)v51)
      {
        v58 = *--v33;
        HIDWORD(v49) = HIDWORD(v58);
        *--v57 = v58;
      }
      *(_QWORD *)a2 = v57;
      *(_QWORD *)(a2 + 8) = v50;
      *(_QWORD *)(a2 + 16) = v32;
      if (v51)
      {
        operator delete(v51);
        v32 = *v6;
      }
    }
    else
    {
      v49 = *(_QWORD *)(a1 + 736);
      *v33 = v49;
      v50 = (double *)(v33 + 1);
    }
    *(_QWORD *)(a2 + 8) = v50;
    LODWORD(v49) = *(_DWORD *)(a1 + 720);
    v59 = (double)v49;
    if (v50 >= (double *)v32)
    {
      v61 = *(double **)a2;
      v62 = ((uint64_t)v50 - *(_QWORD *)a2) >> 3;
      v63 = v62 + 1;
      if ((unint64_t)(v62 + 1) >> 61)
        goto LABEL_407;
      v64 = v32 - (char *)v61;
      if (v64 >> 2 > v63)
        v63 = v64 >> 2;
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
        v65 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v65 = v63;
      if (v65)
      {
        v66 = (char *)sub_10025E6A0((uint64_t)v6, v65);
        v61 = *(double **)a2;
        v50 = *(double **)(a2 + 8);
      }
      else
      {
        v66 = 0;
      }
      v67 = (double *)&v66[8 * v62];
      v32 = &v66[8 * v65];
      *v67 = v59;
      v60 = v67 + 1;
      while (v50 != v61)
      {
        v68 = *((_QWORD *)v50-- - 1);
        *((_QWORD *)v67-- - 1) = v68;
      }
      *(_QWORD *)a2 = v67;
      *(_QWORD *)(a2 + 8) = v60;
      *(_QWORD *)(a2 + 16) = v32;
      if (v61)
      {
        operator delete(v61);
        v32 = *v6;
      }
    }
    else
    {
      *v50 = v59;
      v60 = v50 + 1;
    }
    *(_QWORD *)(a2 + 8) = v60;
    if (v60 >= (double *)v32)
    {
      v70 = *(double **)a2;
      v71 = ((uint64_t)v60 - *(_QWORD *)a2) >> 3;
      v72 = v71 + 1;
      if ((unint64_t)(v71 + 1) >> 61)
        goto LABEL_407;
      v73 = v32 - (char *)v70;
      if (v73 >> 2 > v72)
        v72 = v73 >> 2;
      if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
        v74 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v74 = v72;
      if (v74)
      {
        v75 = (char *)sub_10025E6A0((uint64_t)v6, v74);
        v70 = *(double **)a2;
        v60 = *(double **)(a2 + 8);
      }
      else
      {
        v75 = 0;
      }
      v76 = &v75[8 * v71];
      v77 = &v75[8 * v74];
      *(_QWORD *)v76 = *(_QWORD *)(a1 + 728);
      v69 = v76 + 8;
      while (v60 != v70)
      {
        v78 = *((_QWORD *)v60-- - 1);
        *((_QWORD *)v76 - 1) = v78;
        v76 -= 8;
      }
      *(_QWORD *)a2 = v76;
      *(_QWORD *)(a2 + 8) = v69;
      *(_QWORD *)(a2 + 16) = v77;
      if (v70)
        operator delete(v70);
    }
    else
    {
      *v60 = *(double *)(a1 + 728);
      v69 = v60 + 1;
    }
    *(_QWORD *)(a2 + 8) = v69;
    v262 = 0;
    v254 = 0;
    sub_1007A46EC(*(uint64_t **)(a1 + 712), &v262, (double *)&v254);
    v80 = *(double **)(a2 + 8);
    v79 = *(double **)(a2 + 16);
    if (v80 >= v79)
    {
      v82 = *(double **)a2;
      v83 = ((uint64_t)v80 - *(_QWORD *)a2) >> 3;
      v84 = v83 + 1;
      if ((unint64_t)(v83 + 1) >> 61)
        goto LABEL_407;
      v85 = (char *)v79 - (char *)v82;
      if (v85 >> 2 > v84)
        v84 = v85 >> 2;
      if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8)
        v86 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v86 = v84;
      if (v86)
      {
        v87 = (char *)sub_10025E6A0((uint64_t)v6, v86);
        v82 = *(double **)a2;
        v80 = *(double **)(a2 + 8);
      }
      else
      {
        v87 = 0;
      }
      v88 = &v87[8 * v83];
      v79 = (double *)&v87[8 * v86];
      *(_QWORD *)v88 = v254;
      v81 = (double *)(v88 + 8);
      while (v80 != v82)
      {
        v89 = *((_QWORD *)v80-- - 1);
        *((_QWORD *)v88 - 1) = v89;
        v88 -= 8;
      }
      *(_QWORD *)a2 = v88;
      *(_QWORD *)(a2 + 8) = v81;
      *(_QWORD *)(a2 + 16) = v79;
      if (v82)
      {
        operator delete(v82);
        v79 = (double *)*v6;
      }
    }
    else
    {
      *(_QWORD *)v80 = v254;
      v81 = v80 + 1;
    }
    *(_QWORD *)(a2 + 8) = v81;
    v90 = (double)v262;
    if (v81 < v79)
    {
      *v81 = v90;
      v34 = v81 + 1;
      goto LABEL_122;
    }
    v41 = *(double **)a2;
    v92 = ((uint64_t)v81 - *(_QWORD *)a2) >> 3;
    v93 = v92 + 1;
    if ((unint64_t)(v92 + 1) >> 61)
      goto LABEL_407;
    v94 = (char *)v79 - (char *)v41;
    if (v94 >> 2 > v93)
      v93 = v94 >> 2;
    if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
      v95 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v95 = v93;
    if (v95)
    {
      v96 = (char *)sub_10025E6A0((uint64_t)v6, v95);
      v41 = *(double **)a2;
      v81 = *(double **)(a2 + 8);
    }
    else
    {
      v96 = 0;
    }
    v97 = (double *)&v96[8 * v92];
    v98 = &v96[8 * v95];
    *v97 = v90;
    v91 = v97 + 1;
    while (v81 != v41)
    {
      v99 = *((_QWORD *)v81-- - 1);
      *((_QWORD *)v97-- - 1) = v99;
    }
  }
  else
  {
    if (v22 < (double *)v32)
    {
      *v22 = -1.0;
      v34 = v22 + 1;
LABEL_122:
      v91 = v34;
      goto LABEL_141;
    }
    v41 = *(double **)a2;
    v42 = ((uint64_t)v22 - *(_QWORD *)a2) >> 3;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 61)
      goto LABEL_407;
    v44 = v32 - (char *)v41;
    if (v44 >> 2 > v43)
      v43 = v44 >> 2;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
      v45 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    if (v45)
    {
      v46 = (char *)sub_10025E6A0((uint64_t)v6, v45);
      v41 = *(double **)a2;
      v22 = *(double **)(a2 + 8);
    }
    else
    {
      v46 = 0;
    }
    v97 = (double *)&v46[8 * v42];
    v98 = &v46[8 * v45];
    *v97 = -1.0;
    v91 = v97 + 1;
    while (v22 != v41)
    {
      v100 = *((_QWORD *)v22-- - 1);
      *((_QWORD *)v97-- - 1) = v100;
    }
  }
  *(_QWORD *)a2 = v97;
  *(_QWORD *)(a2 + 8) = v91;
  *(_QWORD *)(a2 + 16) = v98;
  if (v41)
    operator delete(v41);
LABEL_141:
  *(_QWORD *)(a2 + 8) = v91;
  v101 = *v6;
  if (v91 >= (double *)*v6)
  {
    v103 = *(double **)a2;
    v104 = ((uint64_t)v91 - *(_QWORD *)a2) >> 3;
    v105 = v104 + 1;
    if ((unint64_t)(v104 + 1) >> 61)
      goto LABEL_407;
    v106 = v101 - (char *)v103;
    if (v106 >> 2 > v105)
      v105 = v106 >> 2;
    if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF8)
      v107 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v107 = v105;
    if (v107)
    {
      v108 = (char *)sub_10025E6A0((uint64_t)v6, v107);
      v103 = *(double **)a2;
      v91 = *(double **)(a2 + 8);
    }
    else
    {
      v108 = 0;
    }
    v109 = &v108[8 * v104];
    v101 = &v108[8 * v107];
    *(_QWORD *)v109 = 0x3FF0000000000000;
    v102 = (double *)(v109 + 8);
    while (v91 != v103)
    {
      v110 = *((_QWORD *)v91-- - 1);
      *((_QWORD *)v109 - 1) = v110;
      v109 -= 8;
    }
    *(_QWORD *)a2 = v109;
    *(_QWORD *)(a2 + 8) = v102;
    *(_QWORD *)(a2 + 16) = v101;
    if (v103)
    {
      operator delete(v103);
      v101 = *v6;
    }
  }
  else
  {
    *v91 = 1.0;
    v102 = v91 + 1;
  }
  *(_QWORD *)(a2 + 8) = v102;
  if (*(_BYTE *)(a1 + 1952))
    v111 = 1.0;
  else
    v111 = 0.0;
  if (v102 >= (double *)v101)
  {
    v113 = *(double **)a2;
    v114 = ((uint64_t)v102 - *(_QWORD *)a2) >> 3;
    v115 = v114 + 1;
    if ((unint64_t)(v114 + 1) >> 61)
      goto LABEL_407;
    v116 = v101 - (char *)v113;
    if (v116 >> 2 > v115)
      v115 = v116 >> 2;
    if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8)
      v117 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v117 = v115;
    if (v117)
    {
      v118 = (char *)sub_10025E6A0((uint64_t)v6, v117);
      v113 = *(double **)a2;
      v102 = *(double **)(a2 + 8);
    }
    else
    {
      v118 = 0;
    }
    v119 = (double *)&v118[8 * v114];
    v101 = &v118[8 * v117];
    *v119 = v111;
    v112 = v119 + 1;
    while (v102 != v113)
    {
      v120 = *((_QWORD *)v102-- - 1);
      *((_QWORD *)v119-- - 1) = v120;
    }
    *(_QWORD *)a2 = v119;
    *(_QWORD *)(a2 + 8) = v112;
    *(_QWORD *)(a2 + 16) = v101;
    if (v113)
    {
      operator delete(v113);
      v101 = *v6;
    }
  }
  else
  {
    *v102 = v111;
    v112 = v102 + 1;
  }
  *(_QWORD *)(a2 + 8) = v112;
  if (v112 >= (double *)v101)
  {
    v122 = *(double **)a2;
    v123 = ((uint64_t)v112 - *(_QWORD *)a2) >> 3;
    v124 = v123 + 1;
    if ((unint64_t)(v123 + 1) >> 61)
      goto LABEL_407;
    v125 = v101 - (char *)v122;
    if (v125 >> 2 > v124)
      v124 = v125 >> 2;
    if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF8)
      v126 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v126 = v124;
    if (v126)
    {
      v127 = (char *)sub_10025E6A0((uint64_t)v6, v126);
      v122 = *(double **)a2;
      v112 = *(double **)(a2 + 8);
    }
    else
    {
      v127 = 0;
    }
    v128 = &v127[8 * v123];
    v129 = &v127[8 * v126];
    *(_QWORD *)v128 = 0x3FF0000000000000;
    v121 = v128 + 8;
    while (v112 != v122)
    {
      v130 = *((_QWORD *)v112-- - 1);
      *((_QWORD *)v128 - 1) = v130;
      v128 -= 8;
    }
    *(_QWORD *)a2 = v128;
    *(_QWORD *)(a2 + 8) = v121;
    *(_QWORD *)(a2 + 16) = v129;
    if (v122)
      operator delete(v122);
  }
  else
  {
    *v112 = 1.0;
    v121 = v112 + 1;
  }
  *(_QWORD *)(a2 + 8) = v121;
  v254 = 0;
  v255 = 0;
  v256 = xmmword_101BAFC90;
  v257 = -1;
  v258 = 0;
  v259 = 0u;
  v260 = 0u;
  v261 = 0;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 288) + 240))(*(_QWORD *)(a1 + 288), &v254);
  v132 = *(double **)(a2 + 8);
  v131 = *(char **)(a2 + 16);
  if (v132 >= (double *)v131)
  {
    v134 = *(double **)a2;
    v135 = ((uint64_t)v132 - *(_QWORD *)a2) >> 3;
    v136 = v135 + 1;
    if ((unint64_t)(v135 + 1) >> 61)
      goto LABEL_407;
    v137 = v131 - (char *)v134;
    if (v137 >> 2 > v136)
      v136 = v137 >> 2;
    if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFF8)
      v138 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v138 = v136;
    if (v138)
    {
      v139 = (char *)sub_10025E6A0((uint64_t)v6, v138);
      v134 = *(double **)a2;
      v132 = *(double **)(a2 + 8);
    }
    else
    {
      v139 = 0;
    }
    v140 = &v139[8 * v135];
    v131 = &v139[8 * v138];
    *(_QWORD *)v140 = v255;
    v133 = (double *)(v140 + 8);
    while (v132 != v134)
    {
      v141 = *((_QWORD *)v132-- - 1);
      *((_QWORD *)v140 - 1) = v141;
      v140 -= 8;
    }
    *(_QWORD *)a2 = v140;
    *(_QWORD *)(a2 + 8) = v133;
    *(_QWORD *)(a2 + 16) = v131;
    if (v134)
    {
      operator delete(v134);
      v131 = *v6;
    }
  }
  else
  {
    *(_QWORD *)v132 = v255;
    v133 = v132 + 1;
  }
  *(_QWORD *)(a2 + 8) = v133;
  if (v133 >= (double *)v131)
  {
    v143 = *(double **)a2;
    v144 = ((uint64_t)v133 - *(_QWORD *)a2) >> 3;
    v145 = v144 + 1;
    if ((unint64_t)(v144 + 1) >> 61)
      goto LABEL_407;
    v146 = v131 - (char *)v143;
    if (v146 >> 2 > v145)
      v145 = v146 >> 2;
    if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFF8)
      v147 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v147 = v145;
    if (v147)
    {
      v148 = (char *)sub_10025E6A0((uint64_t)v6, v147);
      v143 = *(double **)a2;
      v133 = *(double **)(a2 + 8);
    }
    else
    {
      v148 = 0;
    }
    v149 = &v148[8 * v144];
    v131 = &v148[8 * v147];
    *(_QWORD *)v149 = v256;
    v142 = (double *)(v149 + 8);
    while (v133 != v143)
    {
      v150 = *((_QWORD *)v133-- - 1);
      *((_QWORD *)v149 - 1) = v150;
      v149 -= 8;
    }
    *(_QWORD *)a2 = v149;
    *(_QWORD *)(a2 + 8) = v142;
    *(_QWORD *)(a2 + 16) = v131;
    if (v143)
    {
      operator delete(v143);
      v131 = *v6;
    }
  }
  else
  {
    *(_QWORD *)v133 = v256;
    v142 = v133 + 1;
  }
  *(_QWORD *)(a2 + 8) = v142;
  if (v142 >= (double *)v131)
  {
    v152 = *(double **)a2;
    v153 = ((uint64_t)v142 - *(_QWORD *)a2) >> 3;
    v154 = v153 + 1;
    if ((unint64_t)(v153 + 1) >> 61)
      goto LABEL_407;
    v155 = v131 - (char *)v152;
    if (v155 >> 2 > v154)
      v154 = v155 >> 2;
    if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFF8)
      v156 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v156 = v154;
    if (v156)
    {
      v157 = (char *)sub_10025E6A0((uint64_t)v6, v156);
      v152 = *(double **)a2;
      v142 = *(double **)(a2 + 8);
    }
    else
    {
      v157 = 0;
    }
    v158 = &v157[8 * v153];
    v131 = &v157[8 * v156];
    *(_QWORD *)v158 = *((_QWORD *)&v256 + 1);
    v151 = (double *)(v158 + 8);
    while (v142 != v152)
    {
      v159 = *((_QWORD *)v142-- - 1);
      *((_QWORD *)v158 - 1) = v159;
      v158 -= 8;
    }
    *(_QWORD *)a2 = v158;
    *(_QWORD *)(a2 + 8) = v151;
    *(_QWORD *)(a2 + 16) = v131;
    if (v152)
    {
      operator delete(v152);
      v131 = *v6;
    }
  }
  else
  {
    *v142 = *((double *)&v256 + 1);
    v151 = v142 + 1;
  }
  *(_QWORD *)(a2 + 8) = v151;
  if ((_BYTE)v258)
    v160 = 1.0;
  else
    v160 = 0.0;
  if (v151 >= (double *)v131)
  {
    v162 = *(double **)a2;
    v163 = ((uint64_t)v151 - *(_QWORD *)a2) >> 3;
    v164 = v163 + 1;
    if ((unint64_t)(v163 + 1) >> 61)
      goto LABEL_407;
    v165 = v131 - (char *)v162;
    if (v165 >> 2 > v164)
      v164 = v165 >> 2;
    if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFF8)
      v166 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v166 = v164;
    if (v166)
    {
      v167 = (char *)sub_10025E6A0((uint64_t)v6, v166);
      v162 = *(double **)a2;
      v151 = *(double **)(a2 + 8);
    }
    else
    {
      v167 = 0;
    }
    v168 = (double *)&v167[8 * v163];
    v131 = &v167[8 * v166];
    *v168 = v160;
    v161 = v168 + 1;
    while (v151 != v162)
    {
      v169 = *((_QWORD *)v151-- - 1);
      *((_QWORD *)v168-- - 1) = v169;
    }
    *(_QWORD *)a2 = v168;
    *(_QWORD *)(a2 + 8) = v161;
    *(_QWORD *)(a2 + 16) = v131;
    if (v162)
    {
      operator delete(v162);
      v131 = *v6;
    }
  }
  else
  {
    *v151 = v160;
    v161 = v151 + 1;
  }
  *(_QWORD *)(a2 + 8) = v161;
  if (HIBYTE(v258))
    v170 = 1.0;
  else
    v170 = 0.0;
  if (v161 >= (double *)v131)
  {
    v172 = *(double **)a2;
    v173 = ((uint64_t)v161 - *(_QWORD *)a2) >> 3;
    v174 = v173 + 1;
    if ((unint64_t)(v173 + 1) >> 61)
      goto LABEL_407;
    v175 = v131 - (char *)v172;
    if (v175 >> 2 > v174)
      v174 = v175 >> 2;
    if ((unint64_t)v175 >= 0x7FFFFFFFFFFFFFF8)
      v176 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v176 = v174;
    if (v176)
    {
      v177 = (char *)sub_10025E6A0((uint64_t)v6, v176);
      v172 = *(double **)a2;
      v161 = *(double **)(a2 + 8);
    }
    else
    {
      v177 = 0;
    }
    v178 = (double *)&v177[8 * v173];
    v131 = &v177[8 * v176];
    *v178 = v170;
    v171 = v178 + 1;
    while (v161 != v172)
    {
      v179 = *((_QWORD *)v161-- - 1);
      *((_QWORD *)v178-- - 1) = v179;
    }
    *(_QWORD *)a2 = v178;
    *(_QWORD *)(a2 + 8) = v171;
    *(_QWORD *)(a2 + 16) = v131;
    if (v172)
    {
      operator delete(v172);
      v131 = *v6;
    }
  }
  else
  {
    *v161 = v170;
    v171 = v161 + 1;
  }
  *(_QWORD *)(a2 + 8) = v171;
  if (v171 >= (double *)v131)
  {
    v181 = *(double **)a2;
    v182 = ((uint64_t)v171 - *(_QWORD *)a2) >> 3;
    v183 = v182 + 1;
    if ((unint64_t)(v182 + 1) >> 61)
      goto LABEL_407;
    v184 = v131 - (char *)v181;
    if (v184 >> 2 > v183)
      v183 = v184 >> 2;
    if ((unint64_t)v184 >= 0x7FFFFFFFFFFFFFF8)
      v185 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v185 = v183;
    if (v185)
    {
      v186 = (char *)sub_10025E6A0((uint64_t)v6, v185);
      v181 = *(double **)a2;
      v171 = *(double **)(a2 + 8);
    }
    else
    {
      v186 = 0;
    }
    v187 = &v186[8 * v182];
    v131 = &v186[8 * v185];
    *(_QWORD *)v187 = v254;
    v180 = (double *)(v187 + 8);
    while (v171 != v181)
    {
      v188 = *((_QWORD *)v171-- - 1);
      *((_QWORD *)v187 - 1) = v188;
      v187 -= 8;
    }
    *(_QWORD *)a2 = v187;
    *(_QWORD *)(a2 + 8) = v180;
    *(_QWORD *)(a2 + 16) = v131;
    if (v181)
    {
      operator delete(v181);
      v131 = *v6;
    }
  }
  else
  {
    *(_QWORD *)v171 = v254;
    v180 = v171 + 1;
  }
  *(_QWORD *)(a2 + 8) = v180;
  if (v180 >= (double *)v131)
  {
    v190 = *(double **)a2;
    v191 = ((uint64_t)v180 - *(_QWORD *)a2) >> 3;
    v192 = v191 + 1;
    if ((unint64_t)(v191 + 1) >> 61)
      goto LABEL_407;
    v193 = v131 - (char *)v190;
    if (v193 >> 2 > v192)
      v192 = v193 >> 2;
    if ((unint64_t)v193 >= 0x7FFFFFFFFFFFFFF8)
      v194 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v194 = v192;
    if (v194)
    {
      v195 = (char *)sub_10025E6A0((uint64_t)v6, v194);
      v190 = *(double **)a2;
      v180 = *(double **)(a2 + 8);
    }
    else
    {
      v195 = 0;
    }
    v196 = &v195[8 * v191];
    v131 = &v195[8 * v194];
    *(_QWORD *)v196 = v259;
    v189 = (double *)(v196 + 8);
    while (v180 != v190)
    {
      v197 = *((_QWORD *)v180-- - 1);
      *((_QWORD *)v196 - 1) = v197;
      v196 -= 8;
    }
    *(_QWORD *)a2 = v196;
    *(_QWORD *)(a2 + 8) = v189;
    *(_QWORD *)(a2 + 16) = v131;
    if (v190)
    {
      operator delete(v190);
      v131 = *v6;
    }
  }
  else
  {
    *(_QWORD *)v180 = v259;
    v189 = v180 + 1;
  }
  *(_QWORD *)(a2 + 8) = v189;
  if (v189 >= (double *)v131)
  {
    v199 = *(double **)a2;
    v200 = ((uint64_t)v189 - *(_QWORD *)a2) >> 3;
    v201 = v200 + 1;
    if ((unint64_t)(v200 + 1) >> 61)
      goto LABEL_407;
    v202 = v131 - (char *)v199;
    if (v202 >> 2 > v201)
      v201 = v202 >> 2;
    if ((unint64_t)v202 >= 0x7FFFFFFFFFFFFFF8)
      v203 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v203 = v201;
    if (v203)
    {
      v204 = (char *)sub_10025E6A0((uint64_t)v6, v203);
      v199 = *(double **)a2;
      v189 = *(double **)(a2 + 8);
    }
    else
    {
      v204 = 0;
    }
    v205 = &v204[8 * v200];
    v131 = &v204[8 * v203];
    *(_QWORD *)v205 = *((_QWORD *)&v259 + 1);
    v198 = (double *)(v205 + 8);
    while (v189 != v199)
    {
      v206 = *((_QWORD *)v189-- - 1);
      *((_QWORD *)v205 - 1) = v206;
      v205 -= 8;
    }
    *(_QWORD *)a2 = v205;
    *(_QWORD *)(a2 + 8) = v198;
    *(_QWORD *)(a2 + 16) = v131;
    if (v199)
    {
      operator delete(v199);
      v131 = *v6;
    }
  }
  else
  {
    *v189 = *((double *)&v259 + 1);
    v198 = v189 + 1;
  }
  *(_QWORD *)(a2 + 8) = v198;
  if (v198 >= (double *)v131)
  {
    v208 = *(double **)a2;
    v209 = ((uint64_t)v198 - *(_QWORD *)a2) >> 3;
    v210 = v209 + 1;
    if ((unint64_t)(v209 + 1) >> 61)
      goto LABEL_407;
    v211 = v131 - (char *)v208;
    if (v211 >> 2 > v210)
      v210 = v211 >> 2;
    if ((unint64_t)v211 >= 0x7FFFFFFFFFFFFFF8)
      v212 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v212 = v210;
    if (v212)
    {
      v213 = (char *)sub_10025E6A0((uint64_t)v6, v212);
      v208 = *(double **)a2;
      v198 = *(double **)(a2 + 8);
    }
    else
    {
      v213 = 0;
    }
    v214 = &v213[8 * v209];
    v131 = &v213[8 * v212];
    *(_QWORD *)v214 = v260;
    v207 = (double *)(v214 + 8);
    while (v198 != v208)
    {
      v215 = *((_QWORD *)v198-- - 1);
      *((_QWORD *)v214 - 1) = v215;
      v214 -= 8;
    }
    *(_QWORD *)a2 = v214;
    *(_QWORD *)(a2 + 8) = v207;
    *(_QWORD *)(a2 + 16) = v131;
    if (v208)
    {
      operator delete(v208);
      v131 = *v6;
    }
  }
  else
  {
    *(_QWORD *)v198 = v260;
    v207 = v198 + 1;
  }
  *(_QWORD *)(a2 + 8) = v207;
  if (v207 >= (double *)v131)
  {
    v217 = *(double **)a2;
    v218 = ((uint64_t)v207 - *(_QWORD *)a2) >> 3;
    v219 = v218 + 1;
    if ((unint64_t)(v218 + 1) >> 61)
      goto LABEL_407;
    v220 = v131 - (char *)v217;
    if (v220 >> 2 > v219)
      v219 = v220 >> 2;
    if ((unint64_t)v220 >= 0x7FFFFFFFFFFFFFF8)
      v221 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v221 = v219;
    if (v221)
    {
      v222 = (char *)sub_10025E6A0((uint64_t)v6, v221);
      v217 = *(double **)a2;
      v207 = *(double **)(a2 + 8);
    }
    else
    {
      v222 = 0;
    }
    v223 = &v222[8 * v218];
    v131 = &v222[8 * v221];
    *(_QWORD *)v223 = 0x3FF0000000000000;
    v216 = (double *)(v223 + 8);
    while (v207 != v217)
    {
      v224 = *((_QWORD *)v207-- - 1);
      *((_QWORD *)v223 - 1) = v224;
      v223 -= 8;
    }
    *(_QWORD *)a2 = v223;
    *(_QWORD *)(a2 + 8) = v216;
    *(_QWORD *)(a2 + 16) = v131;
    if (v217)
    {
      operator delete(v217);
      v131 = *v6;
    }
  }
  else
  {
    *v207 = 1.0;
    v216 = v207 + 1;
  }
  *(_QWORD *)(a2 + 8) = v216;
  if (v216 >= (double *)v131)
  {
    v226 = *(double **)a2;
    v227 = ((uint64_t)v216 - *(_QWORD *)a2) >> 3;
    v228 = v227 + 1;
    if ((unint64_t)(v227 + 1) >> 61)
      goto LABEL_407;
    v229 = v131 - (char *)v226;
    if (v229 >> 2 > v228)
      v228 = v229 >> 2;
    if ((unint64_t)v229 >= 0x7FFFFFFFFFFFFFF8)
      v230 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v230 = v228;
    if (v230)
    {
      v231 = (char *)sub_10025E6A0((uint64_t)v6, v230);
      v226 = *(double **)a2;
      v216 = *(double **)(a2 + 8);
    }
    else
    {
      v231 = 0;
    }
    v232 = &v231[8 * v227];
    v131 = &v231[8 * v230];
    *(_QWORD *)v232 = *(_QWORD *)(a1 + 1944);
    v225 = (double *)(v232 + 8);
    while (v216 != v226)
    {
      v233 = *((_QWORD *)v216-- - 1);
      *((_QWORD *)v232 - 1) = v233;
      v232 -= 8;
    }
    *(_QWORD *)a2 = v232;
    *(_QWORD *)(a2 + 8) = v225;
    *(_QWORD *)(a2 + 16) = v131;
    if (v226)
    {
      operator delete(v226);
      v131 = *v6;
    }
  }
  else
  {
    *v216 = *(double *)(a1 + 1944);
    v225 = v216 + 1;
  }
  *(_QWORD *)(a2 + 8) = v225;
  if (v225 >= (double *)v131)
  {
    v235 = *(double **)a2;
    v236 = ((uint64_t)v225 - *(_QWORD *)a2) >> 3;
    v237 = v236 + 1;
    if ((unint64_t)(v236 + 1) >> 61)
      goto LABEL_407;
    v238 = v131 - (char *)v235;
    if (v238 >> 2 > v237)
      v237 = v238 >> 2;
    if ((unint64_t)v238 >= 0x7FFFFFFFFFFFFFF8)
      v239 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v239 = v237;
    if (v239)
    {
      v240 = (char *)sub_10025E6A0((uint64_t)v6, v239);
      v235 = *(double **)a2;
      v225 = *(double **)(a2 + 8);
    }
    else
    {
      v240 = 0;
    }
    v241 = &v240[8 * v236];
    v131 = &v240[8 * v239];
    *(_QWORD *)v241 = *(_QWORD *)(a1 + 1960);
    v234 = (double *)(v241 + 8);
    while (v225 != v235)
    {
      v242 = *((_QWORD *)v225-- - 1);
      *((_QWORD *)v241 - 1) = v242;
      v241 -= 8;
    }
    *(_QWORD *)a2 = v241;
    *(_QWORD *)(a2 + 8) = v234;
    *(_QWORD *)(a2 + 16) = v131;
    if (v235)
    {
      operator delete(v235);
      v131 = *v6;
    }
  }
  else
  {
    *v225 = *(double *)(a1 + 1960);
    v234 = v225 + 1;
  }
  *(_QWORD *)(a2 + 8) = v234;
  if (v234 < (double *)v131)
  {
    *v234 = *(double *)(a1 + 1968);
    v243 = v234 + 1;
    goto LABEL_406;
  }
  v244 = *(double **)a2;
  v245 = ((uint64_t)v234 - *(_QWORD *)a2) >> 3;
  v246 = v245 + 1;
  if ((unint64_t)(v245 + 1) >> 61)
LABEL_407:
    sub_100259694();
  v247 = v131 - (char *)v244;
  if (v247 >> 2 > v246)
    v246 = v247 >> 2;
  if ((unint64_t)v247 >= 0x7FFFFFFFFFFFFFF8)
    v248 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v248 = v246;
  if (v248)
  {
    v249 = (char *)sub_10025E6A0((uint64_t)v6, v248);
    v244 = *(double **)a2;
    v234 = *(double **)(a2 + 8);
  }
  else
  {
    v249 = 0;
  }
  v250 = &v249[8 * v245];
  v251 = &v249[8 * v248];
  *(_QWORD *)v250 = *(_QWORD *)(a1 + 1968);
  v243 = v250 + 8;
  while (v234 != v244)
  {
    v252 = *((_QWORD *)v234-- - 1);
    *((_QWORD *)v250 - 1) = v252;
    v250 -= 8;
  }
  *(_QWORD *)a2 = v250;
  *(_QWORD *)(a2 + 8) = v243;
  *(_QWORD *)(a2 + 16) = v251;
  if (v244)
    operator delete(v244);
LABEL_406:
  *(_QWORD *)(a2 + 8) = v243;
  return 1;
}

void sub_100698FF8(uint64_t a1, uint64_t a2)
{
  int v4;
  BOOL *v5;
  id v6;
  _BOOL8 v7;
  uint64_t v8;
  NSObject *v9;
  _BOOL4 v10;
  _BOOL4 v11;
  const char *v12;
  uint8_t *v13;
  __int128 v14;
  int v15;
  _DWORD v16[4];
  uint8_t buf[4];
  _BOOL4 v18;

  v4 = sub_100CD597C(a2);
  v5 = (BOOL *)(a1 + 5080);
  if (*(unsigned __int8 *)(a1 + 5080) != v4)
  {
    *v5 = v4;
    v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLSimulationController"));
    v7 = *v5 || *(_BYTE *)(a1 + 1603) != 0;
    objc_msgSend(v6, "isInEmegencyState:", v7);
  }
  v8 = *(_QWORD *)(a1 + 288);
  v14 = *(_OWORD *)a2;
  v15 = *(_DWORD *)(a2 + 16);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v8 + 272))(v8, &v14);
  *v5 = sub_100CD597C(a2);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214C5A0);
  v9 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v10 = *v5;
    *(_DWORD *)buf = 67240192;
    v18 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "BaroAlt,LocCtrlOnEmergencyStateChange,isEmergency,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v11 = *v5;
    v16[0] = 67240192;
    v16[1] = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,LocCtrlOnEmergencyStateChange,isEmergency,%{public}d", v16, 8);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLLocationController::onEmergencyStateChange(CLEmergencyState)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
}

uint64_t sub_10069927C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int32x4_t v7[2];
  int v8;

  v4 = sub_100B303DC();
  sub_10010F434((uint64_t)v7);
  sub_100B30A14(v4, v7[0].i64);
  v8 = 22;
  v7[0].i32[0] = 22;
  v7[0].i32[1] = sub_10142DEC4(&v8);
  v5 = sub_1005EE584();
  sub_1005FD228(v5, v7, (int *)(a1 + 5124), a2);
  result = *(_QWORD *)(a1 + 288);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a2);
  return result;
}

void sub_1006994D0()
{
  operator new();
}

void sub_100699518()
{
  operator delete();
}

void sub_10069953C(uint64_t a1, void *a2)
{
  _QWORD *v3;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  double v20;
  const char *v21;
  char *v22;
  NSObject *v23;
  char v24;
  int v25;
  char version;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  NSObject *v44;
  const char *v45;
  char *v46;
  const char *v47;
  __int128 v48;
  _QWORD v49[5];
  CFRunLoopSourceContext v50;
  CFRunLoopSourceContext context;
  _BYTE buf[22];
  __int16 v53;
  double v54;

  v3 = (_QWORD *)sub_1006DAF10(a1, "controller", a2);
  *v3 = off_10214C2B8;
  sub_1002433B8((uint64_t)(v3 + 15));
  *(_OWORD *)(a1 + 168) = 0u;
  *(_WORD *)(a1 + 160) = -1;
  *(_BYTE *)(a1 + 216) = 1;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 224) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 240) = a1 + 248;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 264) = a1 + 272;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 332) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  sub_100988CF0(a1 + 352);
  *(_QWORD *)(a1 + 648) = 0;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_DWORD *)(a1 + 664) = 16842752;
  *(_QWORD *)(a1 + 668) = 0;
  *(_DWORD *)(a1 + 676) = -1;
  *(_QWORD *)(a1 + 680) = 0;
  *(_WORD *)(a1 + 704) = 0;
  *(_BYTE *)(a1 + 706) = 0;
  *(_QWORD *)(a1 + 712) = 0;
  *(_BYTE *)(a1 + 720) = 0;
  *(_BYTE *)(a1 + 752) = 0;
  *(_WORD *)(a1 + 760) = 0;
  sub_1002433B8(a1 + 768);
  *(_WORD *)(a1 + 808) = 0;
  *(_BYTE *)(a1 + 810) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 816) = _Q1;
  *(_BYTE *)(a1 + 832) = 0;
  *(_QWORD *)(a1 + 840) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 848) = 0;
  *(_QWORD *)(a1 + 856) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 872) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 880) = 0;
  *(_QWORD *)(a1 + 888) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 896) = 0;
  *(_DWORD *)(v9 + 131) = 0;
  *(_OWORD *)(v9 + 136) = 0u;
  *(_OWORD *)(v9 + 152) = 0u;
  *(_OWORD *)(v9 + 162) = 0u;
  *(_QWORD *)(a1 + 952) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 960) = _Q1;
  *(_OWORD *)(a1 + 976) = _Q1;
  *(_DWORD *)(a1 + 992) = 0xFFFF;
  *(_QWORD *)(v9 + 228) = 0;
  *(_QWORD *)(v9 + 236) = 0;
  *(_OWORD *)(a1 + 1012) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 1028) = _Q1;
  *(_OWORD *)(a1 + 1044) = _Q1;
  *(_OWORD *)(a1 + 1060) = _Q1;
  *(_DWORD *)(a1 + 1076) = 0;
  *(_QWORD *)(a1 + 1080) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1104) = 0;
  *(_QWORD *)(a1 + 1088) = 0;
  *(_QWORD *)(a1 + 1096) = 0;
  *(_QWORD *)(a1 + 1108) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1116) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 1136) = 0;
  *(_QWORD *)(a1 + 1120) = 0;
  *(_QWORD *)(a1 + 1128) = 0;
  *(_BYTE *)(a1 + 1144) = 0;
  *(_DWORD *)(a1 + 1148) = 0xFFFF;
  *(_QWORD *)(a1 + 1152) = 0;
  *(_QWORD *)(a1 + 1160) = 0;
  *(_OWORD *)(a1 + 1168) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 1184) = _Q1;
  *(_OWORD *)(a1 + 1200) = _Q1;
  v48 = _Q1;
  *(_OWORD *)(a1 + 1216) = _Q1;
  *(_DWORD *)(a1 + 1232) = 0;
  *(_QWORD *)(a1 + 1236) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1260) = 0;
  *(_QWORD *)(a1 + 1244) = 0;
  *(_QWORD *)(a1 + 1252) = 0;
  *(_QWORD *)(a1 + 1264) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1272) = 0x7FFFFFFF;
  *(_BYTE *)(a1 + 1300) = 0;
  *(_QWORD *)(a1 + 1284) = 0;
  *(_QWORD *)(a1 + 1292) = 0;
  *(_QWORD *)(a1 + 1276) = 0;
  sub_100403A9C(a1 + 1304);
  *(_BYTE *)(a1 + 1936) = 0;
  *(_OWORD *)(a1 + 1544) = 0u;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_OWORD *)(a1 + 1576) = 0u;
  *(_OWORD *)(a1 + 1588) = 0u;
  *(_QWORD *)(a1 + 1944) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 1952) = 0;
  *(_QWORD *)(a1 + 1960) = 0;
  *(_QWORD *)(a1 + 1968) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 1984) = 0;
  *(_QWORD *)(a1 + 1976) = 0;
  *(_QWORD *)(a1 + 1992) = 0xBFF0000000000000;
  sub_100129CA0(a1 + 2000);
  sub_100129CA0(a1 + 3528);
  *(_OWORD *)(a1 + 5056) = v48;
  *(_QWORD *)(a1 + 5072) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 5080) = 0;
  *(_OWORD *)(a1 + 5088) = 0u;
  *(_OWORD *)(a1 + 5104) = 0u;
  *(_WORD *)(a1 + 5120) = 1;
  *(_DWORD *)buf = 21;
  *(_DWORD *)(a1 + 5124) = 21;
  *(_DWORD *)(a1 + 5128) = sub_10142DEC4((int *)buf);
  *(_BYTE *)(a1 + 5144) = 0;
  *(_BYTE *)(a1 + 5152) = 0;
  *(_BYTE *)(a1 + 5160) = 0;
  *(_BYTE *)(a1 + 5164) = 0;
  *(_BYTE *)(a1 + 5168) = 0;
  *(_OWORD *)(a1 + 5176) = 0u;
  *(_WORD *)(a1 + 5192) = 0;
  sub_10113D7A0();
  v10 = sub_100B303DC();
  sub_10010F434((uint64_t)buf);
  sub_100B30A14(v10, (uint64_t *)buf);
  v11 = objc_msgSend(*(id *)(a1 + 40), "newTimer");
  *(_QWORD *)(a1 + 5136) = v11;
  if (v11)
  {
    v49[0] = _NSConcreteStackBlock;
    v49[1] = 3221225472;
    v49[2] = sub_10069D4A0;
    v49[3] = &unk_10212ECA0;
    v49[4] = a1;
    objc_msgSend(v11, "setHandler:", v49);
    objc_msgSend(*(id *)(a1 + 5136), "setNextFireDelay:interval:", 0.0, 1.0);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v12 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v13 = sub_100B303DC();
      LODWORD(context.version) = 1;
      v14 = sub_100B30608(v13, &context);
      v15 = sub_100B303DC();
      v16 = sub_100B309E0(v15);
      *(_DWORD *)buf = 134349568;
      *(double *)&buf[4] = v14;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = 0x3FF0000000000000;
      v53 = 2050;
      v54 = v16;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "LocationController,#time,starting heartbeat timer now,mct,%{public}.3f,interval_sec,%{public}.1f,propagation_us,%{public}.3f", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v17 = qword_1022A0028;
      v18 = sub_1005EEB24();
      v19 = sub_100B303DC();
      v20 = sub_100B309E0(v19);
      LODWORD(context.version) = 134349568;
      *(double *)((char *)&context.version + 4) = v18;
      WORD2(context.info) = 2050;
      *(void **)((char *)&context.info + 6) = (void *)0x3FF0000000000000;
      HIWORD(context.retain) = 2050;
      *(double *)&context.release = v20;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v17, 1, "LocationController,#time,starting heartbeat timer now,mct,%{public}.3f,interval_sec,%{public}.1f,propagation_us,%{public}.3f", &context, 32);
      v22 = (char *)v21;
      sub_100512490("Generic", 1, 0, 2, "CLLocationController::CLLocationController(id<CLIntersiloUniverse>)", "%s\n", v21);
LABEL_57:
      if (v22 != buf)
        free(v22);
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v23 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "LocationController,#time,failed to allocate heartbeat timer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      LOWORD(context.version) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "LocationController,#time,failed to allocate heartbeat timer", &context, 2);
      v22 = (char *)v47;
      sub_100512490("Generic", 1, 0, 0, "CLLocationController::CLLocationController(id<CLIntersiloUniverse>)", "%s\n", v47);
      goto LABEL_57;
    }
  }
  sub_1001E4804(buf);
  v24 = *(_BYTE *)(a1 + 296);
  LOBYTE(context.version) = 0;
  v25 = sub_1001E4874(*(uint64_t *)buf, "LocationControllerFilterUsageIsLegacy", (BOOL *)&context);
  version = context.version;
  if (!v25)
    version = v24;
  *(_BYTE *)(a1 + 296) = version;
  v27 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v28 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  sub_1001E4804(buf);
  v30 = *(_QWORD *)buf;
  v31 = sub_1005EED74();
  LOBYTE(context.version) = 0;
  v32 = sub_1001E4874(v30, "EnableLocationControllerRecorder", (BOOL *)&context);
  v33 = LOBYTE(context.version) != 0;
  if (!v32)
    v33 = v31;
  *(_BYTE *)(a1 + 5121) = v33;
  v34 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v35 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
    v33 = *(unsigned __int8 *)(a1 + 5121);
  }
  if (v33)
  {
    v37 = sub_1005EE584();
    sub_1005EED78(v37);
    v38 = sub_1005EE584();
    sub_1005EF278(v38);
    context.version = 0x4024000000000000;
    sub_10069D7AC(a1, (double *)&context.version);
    v39 = sub_1005EE584();
    sub_1005F0984(v39, *(unsigned __int8 *)(a1 + 296));
    sub_1001E4804(buf);
    LODWORD(v50.version) = 0;
    if (sub_1001E4B84(*(uint64_t *)buf, "LocationControllerClientListRecordIntervalSec", &v50))
      v40 = v50.version;
    else
      v40 = -1;
    v41 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v42 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    if (v40 >= 1)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v44 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v40;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "LocationController,enable client list recording interval,%d,sec", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        LODWORD(v50.version) = 67109120;
        HIDWORD(v50.version) = v40;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "LocationController,enable client list recording interval,%d,sec", &v50);
        v46 = (char *)v45;
        sub_100512490("Generic", 1, 0, 2, "CLLocationController::CLLocationController(id<CLIntersiloUniverse>)", "%s\n", v45);
        if (v46 != buf)
          free(v46);
      }
      *(_DWORD *)(a1 + 5160) = v40;
      *(_BYTE *)(a1 + 5164) = 1;
    }
  }
  if (*(_BYTE *)(a1 + 296))
    operator new();
  operator new();
}

void sub_10069CE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18, uint64_t *a19, uint64_t *a20,uint64_t a21,uint64_t *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;
  uint64_t *v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  if (a43 < 0)
    operator delete(__p);
  sub_10069FB30(a12);
  sub_1006AA6D8(a13);
  v46 = *(_QWORD *)(v43 + 1592);
  *(_QWORD *)(v43 + 1592) = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = *(_QWORD *)(v43 + 1584);
  *(_QWORD *)(v43 + 1584) = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v48 = *(_QWORD *)(v43 + 1576);
  *(_QWORD *)(v43 + 1576) = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = *(_QWORD *)(v43 + 1568);
  *(_QWORD *)(v43 + 1568) = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = *(_QWORD *)(v43 + 1560);
  *(_QWORD *)(v43 + 1560) = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = *(_QWORD *)(v43 + 1552);
  *(_QWORD *)(v43 + 1552) = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = *a22;
  *a22 = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  sub_1006A4C90(a19, 0);
  v53 = *a14;
  *a14 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  sub_10098A124(a15);
  sub_1006AAC38(a18, 0);
  sub_1006AABFC(a20, 0);
  v54 = *(_QWORD *)(v43 + 288);
  *(_QWORD *)(v43 + 288) = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  sub_1006AABA4(a21, *(_QWORD **)(v43 + 272));
  sub_1006AAB10(a16, *(_QWORD **)(v43 + 248));
  v55 = *(_QWORD *)(v43 + 208);
  *(_QWORD *)(v43 + 208) = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = *(_QWORD *)(v43 + 200);
  *(_QWORD *)(v43 + 200) = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = *(_QWORD *)(v43 + 192);
  *(_QWORD *)(v43 + 192) = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = *(_QWORD *)(v43 + 184);
  *(_QWORD *)(v43 + 184) = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v59 = *(_QWORD *)(v43 + 176);
  *(_QWORD *)(v43 + 176) = 0;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  v60 = *v44;
  *v44 = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  sub_1006DB4AC(v43);
  _Unwind_Resume(a1);
}

void sub_10069D4A0(uint64_t a1)
{
  sub_10069D4A8(*(_QWORD *)(a1 + 32));
}

void sub_10069D4A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  __n128 *v6;
  uint64_t v7;
  _BYTE *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  const char *v14;
  char *v15;
  __n128 v16[2];
  int v17;
  unint64_t v18;
  double buf[205];

  v2 = sub_100B303DC();
  sub_10010F434((uint64_t)buf);
  sub_100B30A14(v2, (uint64_t *)buf);
  v3 = *(_QWORD *)(a1 + 304);
  if (v3)
  {
    v4 = sub_100B303DC();
    LODWORD(buf[0]) = 1;
    v5 = sub_100B30608(v4, buf);
    sub_100F6A9B4(v3, v5);
  }
  v6 = (__n128 *)sub_100B303DC();
  sub_100B307F4(v6, v16);
  v7 = sub_1005EE584();
  sub_1005EFAE0(v7, (uint64_t)v16);
  v8 = (_BYTE *)(a1 + 5152);
  if (*(_BYTE *)(a1 + 5152) && v16[0].n128_f64[0] > *(double *)(a1 + 5144))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v9 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0]) = 134349056;
      *(double *)((char *)buf + 4) = v16[0].n128_f64[0];
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "#locctl,#rec,triggered client list record at time,mct,%{public}.3f", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v17 = 134349056;
      v18 = v16[0].n128_u64[0];
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#locctl,#rec,triggered client list record at time,mct,%{public}.3f", &v17, 12);
      v15 = (char *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationController::handleHeartbeatRequest()", "%s\n", v14);
      if (v15 != (char *)buf)
        free(v15);
    }
    v10 = sub_1005EE584();
    sub_1006A9128((_QWORD *)a1, buf);
    sub_1005F033C(v10, buf);
    sub_1006ABA78((uint64_t)buf, *(_QWORD **)&buf[1]);
    if (*v8)
      *v8 = 0;
  }
  if (*(_BYTE *)(a1 + 5164) && !((int)v16[0].n128_f64[0] % *(_DWORD *)(a1 + 5160)))
  {
    v11 = sub_1005EE584();
    sub_1006A9128((_QWORD *)a1, buf);
    sub_1005F033C(v11, buf);
    sub_1006ABA78((uint64_t)buf, *(_QWORD **)&buf[1]);
  }
  v12 = *(_BYTE *)(a1 + 1888) == 0;
  v13 = sub_100B303DC();
  LODWORD(buf[0]) = 1;
  buf[0] = sub_100B30608(v13, buf);
  sub_1004034F4(a1 + 768, v12, buf);
}

void sub_10069D788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, _QWORD *a18)
{
  sub_1006ABA78((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

void sub_10069D7AC(uint64_t a1, double *a2)
{
  uint64_t v4;
  double v5;
  NSObject *v6;
  double v7;
  double v8;
  char *v9;
  int v10;
  double v11;
  __int16 v12;
  double v13;
  uint8_t buf[4];
  double v15;
  __int16 v16;
  double v17;

  if (*a2 >= 0.0)
  {
    v4 = sub_100B303DC();
    *(_DWORD *)buf = 1;
    v5 = sub_100B30608(v4, buf);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v6 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v7 = v5 + *a2;
      *(_DWORD *)buf = 134349312;
      v15 = v7;
      v16 = 2050;
      v17 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#locctl,#rec,requested client list record at time,mct,%{public}.3f,now,%{public}.3f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v8 = v5 + *a2;
      v10 = 134349312;
      v11 = v8;
      v12 = 2050;
      v13 = v5;
      v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#locctl,#rec,requested client list record at time,mct,%{public}.3f,now,%{public}.3f", &v10, 22);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationController::recordClientListWithDelaySec(const CFTimeInterval &)", "%s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
    *(double *)(a1 + 5144) = v5 + *a2;
    *(_BYTE *)(a1 + 5152) = 1;
  }
}

void sub_10069D9C8(__int32 a1, int *a2, char *a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLLocationController::onStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214C560);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C560);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006A160C(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10069DB90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10069DBB0(__int32 a1, int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLLocationController::onWifiServiceNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214C560);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onWifiServiceNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C560);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onWifiServiceNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006A202C(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10069DD78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10069DD98(int a1, int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLLocationController::onClientNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214C560);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onClientNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C560);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onClientNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006A8694(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10069DF60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10069DF80(__int32 a1, int *a2, int *a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLLocationController::onDataProtectionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214C560);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C560);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006A2304(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10069E148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10069E168(int a1, int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLLocationController::onBluetoothNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214C560);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onBluetoothNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C560);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onBluetoothNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006A2540(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10069E330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10069E350(int a1, int *a2, char *a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLLocationController::onCompanionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214C560);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C560);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006A262C(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10069E518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10069E538(int a1, int *a2, int *a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLLocationController::onMotionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214C560);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onMotionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C560);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onMotionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006A06D8(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10069E700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10069E720(int a1, int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLLocationController::onAppNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214C560);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onAppNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C560);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onAppNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006A0628(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10069E8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10069E908(int a1, int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLLocationController::onMotionStateObserverNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214C560);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onMotionStateObserverNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C560);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onMotionStateObserverNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006A07F0(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10069EAD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10069EAF0(int a1, int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLLocationController::onMotionStateMediatorNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214C560);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C560);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006A08A0(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10069ECB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10069ECD8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLLocationController::onMobileAssetNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214C560);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C560);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  (*(void (**)(_QWORD, int *, uint64_t))(**(_QWORD **)(a4 + 288) + 88))(*(_QWORD *)(a4 + 288), a2, a3);
  v9 = *(_QWORD *)(a4 + 312);
  if (v9)
    sub_100E6024C(v9, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10069EEAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10069EECC(int a1, int *a2, int *a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLLocationController::onSignalEnvironmentNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214C560);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onSignalEnvironmentNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C560);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onSignalEnvironmentNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006A0950(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10069F094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10069F0B4(__int32 a1, int *a2, const __CFDictionary **a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLLocationController::onTelephonyNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214C560);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onTelephonyNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C560);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onTelephonyNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10069FFAC(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10069F27C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10069F29C(const void *a1, uint64_t a2)
{
  __CFNotificationCenter *DarwinNotifyCenter;
  __CFNotificationCenter *v4;
  const __CFString *v5;
  __CFNotificationCenter *v6;
  const __CFString *v7;

  if (objc_opt_class(RDEstimate, a2))
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_10069FB6C, kRegulatoryDomainUpdateNotification, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  }
  v4 = CFNotificationCenterGetDarwinNotifyCenter();
  v5 = (const __CFString *)off_1022A3C70[0]();
  CFNotificationCenterAddObserver(v4, a1, (CFNotificationCallback)sub_10069FD8C, v5, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  v6 = CFNotificationCenterGetDarwinNotifyCenter();
  v7 = (const __CFString *)off_1022A3C78();
  CFNotificationCenterAddObserver(v6, a1, (CFNotificationCallback)sub_10069FD8C, v7, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

void sub_10069F35C(uint64_t a1)
{
  sub_10069F364(*(_QWORD *)(a1 + 32));
}

void sub_10069F364(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  uint8_t *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  _QWORD v10[2];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214C5A0);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289026;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"catch-all location unavailable timer fired\"}", buf, 0x12u);
  }
  objc_msgSend(*(id *)(a1 + 656), "setNextFireDelay:", 1.79769313e308);
  if (*(unsigned __int8 *)(a1 + 160) == 255)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v5 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Location unavailable timer fired,required granularity is none,ignoring", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      LOWORD(v10[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "Location unavailable timer fired,required granularity is none,ignoring", v10, 2, v10[0]);
      goto LABEL_23;
    }
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLDaemonStatus")), "syncgetIsSleeping"))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v3 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "LocationController,#Warning,Location unavailable fired while sleeping", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      LOWORD(v10[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "LocationController,#Warning,Location unavailable fired while sleeping", v10, 2, v10[0]);
LABEL_23:
      v6 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationController::onLocationUnavailableTimer()", "%s\n", v4);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    *(_DWORD *)buf = 9;
    sub_1006A5950(a1, (int *)buf, 1);
    *(_DWORD *)buf = 2;
    if (sub_1001B7864(a1, (int *)buf, 1)
      || (*(_DWORD *)buf = 1, sub_1001B7864(a1, (int *)buf, 1))
      || (*(_DWORD *)buf = 0, sub_1001B7864(a1, (int *)buf, 1)))
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v7 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Location unavailable timer fired, restart with fine granularity as client still wants location", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        LOWORD(v10[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "Location unavailable timer fired, restart with fine granularity as client still wants location", v10, 2);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "void CLLocationController::onLocationUnavailableTimer()", "%s\n", v8);
        if (v9 != buf)
          free(v9);
      }
      buf[0] = 1;
      sub_100192DD0(a1, (char *)buf);
    }
  }
}

void sub_10069F834(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;

  if (a3)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v4 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289282;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2114;
      v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"LocationController,error fetching visits\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    }
    v5 = qword_1022A0028;
    if (os_signpost_enabled((os_log_t)qword_1022A0028))
    {
      *(_DWORD *)buf = 68289282;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2114;
      v17 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "LocationController,error fetching visits", "{\"msg%{public}.0s\":\"LocationController,error fetching visits\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = objc_msgSend(objc_alloc((Class)CLVisit), "initWithVisit:", objc_msgSend(a2, "firstObject"));
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v8 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "LocationController,fetched most recent visit", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "LocationController,fetched most recent visit", v11, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "CLLocationController::CLLocationController(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    sub_100697254(v6, v7);

  }
}

uint64_t sub_10069FB30(uint64_t a1)
{
  void *v2;

  sub_100008848(a1 + 568, *(_QWORD **)(a1 + 576));
  v2 = *(void **)(a1 + 344);
  if (v2)
  {
    *(_QWORD *)(a1 + 352) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_10069FB6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  id v12;
  _QWORD v13[9];
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLLocationController::onRegulatoryDomainUpdateNotification");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214C560);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onRegulatoryDomainUpdateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C560);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onRegulatoryDomainUpdateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v12 = objc_msgSend(*(id *)(a2 + 32), "silo");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1006AA760;
  v13[3] = &unk_1021382B0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  objc_msgSend(v12, "sync:", v13);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_10069FD6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10069FD8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  id v12;
  _QWORD v13[9];
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLLocationController::onPairingStateChanged");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214C560);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onPairingStateChanged", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C560);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onPairingStateChanged\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v12 = objc_msgSend(*(id *)(a2 + 32), "silo");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1006AA77C;
  v13[3] = &unk_1021382B0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  objc_msgSend(v12, "sync:", v13);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_10069FF8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10069FFAC(uint64_t a1, __int32 a2, int *a3, const __CFDictionary **a4)
{
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  NSObject *v10;
  const void *v11;
  unsigned int v12;
  unsigned int v13;
  NSObject *v14;
  const void *v15;
  NSObject *v16;
  const __CFDictionary *v17;
  id v18;
  _BOOL8 v19;
  const char *v20;
  int32x4_t *v21;
  const char *v22;
  int32x4_t *v23;
  const char *v24;
  int32x4_t *v25;
  uint64_t v26;
  unsigned __int8 v27[4];
  int32x4_t v28[103];

  v28[0].i32[2] = a2;
  v7 = sub_100B303DC();
  sub_10010F434((uint64_t)&v28[0].i64[1] + 4);
  sub_100B30A14(v7, (uint64_t *)((char *)&v28[0].i64[1] + 4));
  v28[0].i32[3] = 11;
  v28[0].i32[0] = 11;
  v28[0].i32[1] = sub_10142DEC4(&v28[0].i32[3]);
  v8 = sub_1005EE584();
  v28[0].i32[3] = 4;
  sub_1005F8578(v8, &v28[0].u32[3], v28, (int *)(a1 + 5124), &v28[0].i32[2], a3);
  v9 = (const void *)sub_1001DEC98(a3);
  if (CFEqual(v9, kCTRegistrationStatusChangedNotification))
  {
    if ((objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLTelephonyService")), "syncgetIsRegisteredOnCell") & 1) == 0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v10 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v28[0].i16[6] = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "device lost registration - no longer has active cell", &v28[0].u8[12], 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero((char *)&v28[0].u64[1] + 4, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        *(_WORD *)v27 = 0;
        LODWORD(v26) = 2;
        _os_log_send_and_compose_impl(2, 0, (char *)&v28[0].u64[1] + 4, 1628, &_mh_execute_header, qword_1022A0028, 2, "device lost registration - no longer has active cell", v27, v26);
        v21 = (int32x4_t *)v20;
        sub_100512490("Generic", 1, 0, 2, "void CLLocationController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v20);
        if (v21 != (int32x4_t *)((char *)&v28[0].u64[1] + 4))
          free(v21);
      }
      (*(void (**)(_QWORD, int *, const __CFDictionary **))(**(_QWORD **)(a1 + 288) + 64))(*(_QWORD *)(a1 + 288), a3, a4);
    }
  }
  else
  {
    v11 = (const void *)sub_1001DEC98(a3);
    if (CFEqual(v11, kCTCallStatusChangeNotification))
    {
      HIBYTE(v26) = 1;
      v12 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLTelephonyService")), "syncgetActiveCall:", (char *)&v26 + 7);
      if (HIBYTE(v26))
        v13 = v12;
      else
        v13 = 0;
      if (v13 == 1)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v14 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v28[0].i16[6] = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "device on active call - no longer has active cell", &v28[0].u8[12], 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero((char *)&v28[0].u64[1] + 4, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10214C5A0);
          *(_WORD *)v27 = 0;
          LODWORD(v26) = 2;
          _os_log_send_and_compose_impl(2, 0, (char *)&v28[0].u64[1] + 4, 1628, &_mh_execute_header, qword_1022A0028, 2, "device on active call - no longer has active cell", v27, v26);
          v23 = (int32x4_t *)v22;
          sub_100512490("Generic", 1, 0, 2, "void CLLocationController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v22);
          if (v23 != (int32x4_t *)((char *)&v28[0].u64[1] + 4))
            free(v23);
        }
        (*(void (**)(_QWORD, int *, const __CFDictionary **))(**(_QWORD **)(a1 + 288) + 64))(*(_QWORD *)(a1 + 288), a3, a4);
      }
    }
    else
    {
      v15 = (const void *)sub_1001DEC98(a3);
      if (CFEqual(v15, CFSTR("kStewieStatus")))
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v16 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v28[0].i16[6] = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "device stewie status", &v28[0].u8[12], 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero((char *)&v28[0].u64[1] + 4, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10214C5A0);
          *(_WORD *)v27 = 0;
          LODWORD(v26) = 2;
          _os_log_send_and_compose_impl(2, 0, (char *)&v28[0].u64[1] + 4, 1628, &_mh_execute_header, qword_1022A0028, 2, "device stewie status", v27, v26);
          v25 = (int32x4_t *)v24;
          sub_100512490("Generic", 1, 0, 2, "void CLLocationController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v24);
          if (v25 != (int32x4_t *)((char *)&v28[0].u64[1] + 4))
            free(v25);
        }
        v17 = *a4;
        if (*a4)
        {
          v27[0] = 0;
          sub_1001C1D6C((int)&v28[0].i32[3], v17);
          if (sub_1001E48E4((uint64_t)&v28[0].i64[1] + 4, (uint64_t)CFSTR("kStewieUseCaseActiveKey"), (BOOL *)v27)&& v27[0] != *(unsigned __int8 *)(a1 + 1603))
          {
            *(_BYTE *)(a1 + 1603) = v27[0];
            v18 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLSimulationController"));
            if (*(_BYTE *)(a1 + 5080))
              v19 = 1;
            else
              v19 = *(_BYTE *)(a1 + 1603) != 0;
            objc_msgSend(v18, "isInEmegencyState:", v19);
          }
          sub_10011A5A8((char *)&v28[0].u64[1] + 4);
        }
      }
    }
  }
}

void sub_1006A0578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006A0594(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int32x4_t v7[2];
  int v8;

  v4 = sub_100B303DC();
  sub_10010F434((uint64_t)v7);
  sub_100B30A14(v4, v7[0].i64);
  v8 = 26;
  v7[0].i32[0] = 26;
  v7[0].i32[1] = sub_10142DEC4(&v8);
  v5 = sub_1005EE584();
  sub_1005FED14(v5, v7, (int *)(a1 + 5124), a2);
  result = *(_QWORD *)(a1 + 288);
  if (result)
    return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)result + 80))(result, a2);
  return result;
}

uint64_t sub_1006A0628(uint64_t a1, int a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v10;
  int32x4_t v11[2];
  int v12;

  v10 = a2;
  v7 = sub_100B303DC();
  sub_10010F434((uint64_t)v11);
  sub_100B30A14(v7, v11[0].i64);
  v12 = 12;
  v11[0].i32[0] = 12;
  v11[0].i32[1] = sub_10142DEC4(&v12);
  v8 = sub_1005EE584();
  v12 = 4;
  sub_1005F9188(v8, (unsigned int *)&v12, v11, (int *)(a1 + 5124), &v10, a3, a4);
  return (*(uint64_t (**)(_QWORD, int *, uint64_t))(**(_QWORD **)(a1 + 288) + 72))(*(_QWORD *)(a1 + 288), a3, a4);
}

void sub_1006A06D8(uint64_t a1, int a2, int *a3, int *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  int v14;
  int32x4_t v15[2];
  int v16;

  v14 = a2;
  v7 = sub_100B303DC();
  sub_10010F434((uint64_t)v15);
  sub_100B30A14(v7, v15[0].i64);
  v16 = 8;
  v15[0].i32[0] = 8;
  v15[0].i32[1] = sub_10142DEC4(&v16);
  v8 = sub_1005EE584();
  v16 = 4;
  sub_1005F702C(v8, (unsigned int *)&v16, v15, (int *)(a1 + 5124), &v14, a3, (uint64_t)a4);
  v9 = *(_QWORD *)(a1 + 288);
  if (v9)
    (*(void (**)(uint64_t, int *, int *))(*(_QWORD *)v9 + 16))(v9, a3, a4);
  v10 = *(unsigned __int8 **)(a1 + 312);
  if (v10)
    sub_100E5FDF4(v10, a3, a4);
  sub_1004016E0(a1 + 768, (uint64_t)a3, a4);
  sub_10113EE20(a1 + 5200, a3, a4);
  v11 = *(_QWORD *)(a1 + 304);
  if (v11)
  {
    v12 = sub_100B303DC();
    v16 = 1;
    v13 = sub_100B30608(v12, &v16);
    sub_100F6A9AC(v11, a3, a4, v13);
  }
}

uint64_t sub_1006A07F0(uint64_t a1, int a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v10;
  int32x4_t v11[2];
  int v12;

  v10 = a2;
  v7 = sub_100B303DC();
  sub_10010F434((uint64_t)v11);
  sub_100B30A14(v7, v11[0].i64);
  v12 = 9;
  v11[0].i32[0] = 9;
  v11[0].i32[1] = sub_10142DEC4(&v12);
  v8 = sub_1005EE584();
  v12 = 4;
  sub_1005F5554(v8, (unsigned int *)&v12, v11, (int *)(a1 + 5124), &v10, a3, a4);
  return (*(uint64_t (**)(_QWORD, int *, uint64_t))(**(_QWORD **)(a1 + 288) + 24))(*(_QWORD *)(a1 + 288), a3, a4);
}

uint64_t sub_1006A08A0(uint64_t a1, int a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v10;
  int32x4_t v11[2];
  int v12;

  v10 = a2;
  v7 = sub_100B303DC();
  sub_10010F434((uint64_t)v11);
  sub_100B30A14(v7, v11[0].i64);
  v12 = 25;
  v11[0].i32[0] = 25;
  v11[0].i32[1] = sub_10142DEC4(&v12);
  v8 = sub_1005EE584();
  v12 = 4;
  sub_1005F6280(v8, (unsigned int *)&v12, v11, (int *)(a1 + 5124), &v10, a3, a4);
  return (*(uint64_t (**)(_QWORD, int *, uint64_t))(**(_QWORD **)(a1 + 288) + 32))(*(_QWORD *)(a1 + 288), a3, a4);
}

uint64_t sub_1006A0950(uint64_t a1, int a2, int *a3, int *a4)
{
  uint64_t v7;
  uint64_t v8;
  int v10;
  int32x4_t v11[2];
  int v12;

  v10 = a2;
  v7 = sub_100B303DC();
  sub_10010F434((uint64_t)v11);
  sub_100B30A14(v7, v11[0].i64);
  v12 = 10;
  v11[0].i32[0] = 10;
  v11[0].i32[1] = sub_10142DEC4(&v12);
  v8 = sub_1005EE584();
  v12 = 4;
  sub_1005F7AA4(v8, (unsigned int *)&v12, v11, (int *)(a1 + 5124), &v10, a3, a4);
  return (*(uint64_t (**)(_QWORD, int *, int *))(**(_QWORD **)(a1 + 288) + 56))(*(_QWORD *)(a1 + 288), a3, a4);
}

uint64_t sub_1006A0A00(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __CFNotificationCenter *DarwinNotifyCenter;
  __CFNotificationCenter *v19;
  const __CFString *v20;
  __CFNotificationCenter *v21;
  const __CFString *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v42;
  uint8_t *v43;
  const char *v44;
  uint8_t *v45;
  uint64_t v46;
  _WORD v47[8];
  unsigned int buf[410];

  *(_QWORD *)a1 = off_10214C2B8;
  if (*(_BYTE *)(a1 + 1600))
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1544) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1544) + 8), 1);
  if (*(_BYTE *)(a1 + 1601))
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1544) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1544) + 8), 2);
  v3 = *(_QWORD *)(a1 + 1544);
  *(_QWORD *)(a1 + 1544) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 1576);
  if (v4)
  {
    objc_msgSend(*(id *)(v4 + 16), "unregister:forNotification:", *(_QWORD *)(v4 + 8), 4);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1576) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1576) + 8), 9);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1576) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1576) + 8), 3);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1576) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1576) + 8), 1);
    v5 = *(_QWORD *)(a1 + 1576);
    *(_QWORD *)(a1 + 1576) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  if (*(_QWORD *)(a1 + 1552))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v6 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "LocationController,unregistered from motion state observer", (uint8_t *)buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v47[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "LocationController,unregistered from motion state observer", v47, 2);
      v43 = (uint8_t *)v42;
      sub_100512490("Generic", 1, 0, 2, "virtual CLLocationController::~CLLocationController()", "%s\n", v42);
      if (v43 != (uint8_t *)buf)
        free(v43);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1552) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1552) + 8), 0);
    v7 = *(_QWORD *)(a1 + 1552);
    *(_QWORD *)(a1 + 1552) = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (*(_QWORD *)(a1 + 1560))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v8 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "LocationController,unregistered from motion state mediator", (uint8_t *)buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v47[0] = 0;
      LODWORD(v46) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "LocationController,unregistered from motion state mediator", v47, v46);
      v45 = (uint8_t *)v44;
      sub_100512490("Generic", 1, 0, 2, "virtual CLLocationController::~CLLocationController()", "%s\n", v44);
      if (v45 != (uint8_t *)buf)
        free(v45);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1560) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1560) + 8), 0);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1560) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1560) + 8), 2);
    v9 = *(_QWORD *)(a1 + 1560);
    *(_QWORD *)(a1 + 1560) = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  v10 = *(_QWORD *)(a1 + 1568);
  if (v10)
  {
    objc_msgSend(*(id *)(v10 + 16), "unregister:forNotification:", *(_QWORD *)(v10 + 8), 0);
    v11 = *(_QWORD *)(a1 + 1568);
    *(_QWORD *)(a1 + 1568) = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = *(_QWORD *)(a1 + 1584);
  if (v12)
  {
    sub_10013F950(buf, kCTRegistrationStatusChangedNotification);
    objc_msgSend(*(id *)(v12 + 16), "unregister:forNotification:", *(_QWORD *)(v12 + 8), sub_1001CFE7C(buf));
    v13 = *(_QWORD *)(a1 + 1584);
    sub_10013F950(buf, kCTCallStatusChangeNotification);
    objc_msgSend(*(id *)(v13 + 16), "unregister:forNotification:", *(_QWORD *)(v13 + 8), sub_1001CFE7C(buf));
    v14 = *(_QWORD *)(a1 + 1584);
    sub_10013F950(buf, CFSTR("kStewieStatus"));
    objc_msgSend(*(id *)(v14 + 16), "unregister:forNotification:", *(_QWORD *)(v14 + 8), sub_1001CFE7C(buf));
    v15 = *(_QWORD *)(a1 + 1584);
    *(_QWORD *)(a1 + 1584) = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  v16 = *(_QWORD *)(a1 + 168);
  if (v16)
  {
    objc_msgSend(*(id *)(v16 + 16), "unregister:forNotification:", *(_QWORD *)(v16 + 8), 2);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 168) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8), 3);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 168) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8), 6);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 168) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8), 8);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 168) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8), 15);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 168) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8), 7);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 168) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8), 13);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 168) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8), 10);
    v17 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 168) = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  if (objc_opt_class(RDEstimate, a2))
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(DarwinNotifyCenter, (const void *)a1, kRegulatoryDomainUpdateNotification, 0);
  }
  v19 = CFNotificationCenterGetDarwinNotifyCenter();
  v20 = (const __CFString *)off_1022A3C70[0]();
  CFNotificationCenterRemoveObserver(v19, (const void *)a1, v20, 0);
  v21 = CFNotificationCenterGetDarwinNotifyCenter();
  v22 = (const __CFString *)off_1022A3C78();
  CFNotificationCenterRemoveObserver(v21, (const void *)a1, v22, 0);
  v23 = *(void **)(a1 + 5112);
  if (v23)
  {

    *(_QWORD *)(a1 + 5112) = 0;
  }
  v24 = *(void **)(a1 + 5184);
  if (v24 && *(_QWORD *)(a1 + 5176))
  {
    objc_msgSend(v24, "stopLeechingVisitsForClient:");
    v24 = *(void **)(a1 + 5184);
  }

  *(_QWORD *)(a1 + 5184) = 0;
  *(_QWORD *)(a1 + 5176) = 0;
  sub_100008848(a1 + 5768, *(_QWORD **)(a1 + 5776));
  v25 = *(void **)(a1 + 5544);
  if (v25)
  {
    *(_QWORD *)(a1 + 5552) = v25;
    operator delete(v25);
  }
  sub_1006AA6D8(a1 + 2000);
  v26 = *(_QWORD *)(a1 + 1592);
  *(_QWORD *)(a1 + 1592) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = *(_QWORD *)(a1 + 1584);
  *(_QWORD *)(a1 + 1584) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *(_QWORD *)(a1 + 1576);
  *(_QWORD *)(a1 + 1576) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = *(_QWORD *)(a1 + 1568);
  *(_QWORD *)(a1 + 1568) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = *(_QWORD *)(a1 + 1560);
  *(_QWORD *)(a1 + 1560) = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = *(_QWORD *)(a1 + 1552);
  *(_QWORD *)(a1 + 1552) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = *(_QWORD *)(a1 + 1544);
  *(_QWORD *)(a1 + 1544) = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  sub_1006A4C90((uint64_t *)(a1 + 712), 0);
  v33 = *(_QWORD *)(a1 + 632);
  *(_QWORD *)(a1 + 632) = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  sub_10098A124(a1 + 352);
  sub_1006AAC38((uint64_t *)(a1 + 312), 0);
  sub_1006AABFC((uint64_t *)(a1 + 304), 0);
  v34 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 288) = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  sub_1006AABA4(a1 + 264, *(_QWORD **)(a1 + 272));
  sub_1006AAB10(a1 + 240, *(_QWORD **)(a1 + 248));
  v35 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  sub_1006DB4AC(a1);
  return a1;
}

void sub_1006A11F0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_1006A1200(uint64_t a1, uint64_t a2)
{
  sub_1006A0A00(a1, a2);
  operator delete();
}

uint64_t sub_1006A1224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  double v8;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  _BYTE v32[96];
  __int128 v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char v45;
  uint64_t v46;
  int v47;
  _QWORD v48[4];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _OWORD v57[2];

  v3 = 0;
  if (*(_QWORD *)(a1 + 5112))
  {
    if (*(double *)(a3 + 384) <= 0.0 && *(_DWORD *)(a2 + 132) != 2)
    {
      if (!sub_100182290(a2))
        goto LABEL_18;
      v8 = *(double *)(a2 + 20);
      if (v8 <= 0.0
        || v8 >= (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 288) + 112))(*(_QWORD *)(a1 + 288)))
      {
        goto LABEL_18;
      }
      v47 = 0;
      v46 = 0;
      *(_DWORD *)v32 = 0xFFFF;
      *(_OWORD *)&v32[4] = 0uLL;
      *(_OWORD *)&v32[20] = xmmword_101BAFC90;
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)&v32[36] = _Q0;
      *(_OWORD *)&v32[52] = _Q0;
      *(_OWORD *)&v32[68] = _Q0;
      *(_DWORD *)&v32[84] = 0;
      v33 = 0uLL;
      *(_QWORD *)&v32[88] = 0xBFF0000000000000;
      LODWORD(v34) = 0;
      *(_QWORD *)((char *)&v34 + 4) = 0xBFF0000000000000;
      HIDWORD(v34) = 0x7FFFFFFF;
      memset(v35, 0, 25);
      sub_10012A33C(&v36);
      v13 = *(_OWORD *)(a2 + 112);
      v33 = *(_OWORD *)(a2 + 96);
      v34 = v13;
      *(_OWORD *)v35 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)&v35[12] = *(_OWORD *)(a2 + 140);
      v14 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v32[32] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v32[48] = v14;
      v15 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)&v32[64] = *(_OWORD *)(a2 + 64);
      *(_OWORD *)&v32[80] = v15;
      v16 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)v32 = *(_OWORD *)a2;
      *(_OWORD *)&v32[16] = v16;
      memcpy(v17, (const void *)a3, 0x201uLL);
      sub_100349198(&v37, (uint64_t *)(a3 + 520));
      v18 = *(_OWORD *)(a3 + 616);
      v43 = *(_OWORD *)(a3 + 600);
      v44 = v18;
      v19 = *(_OWORD *)(a3 + 552);
      v39 = *(_OWORD *)(a3 + 536);
      v40 = v19;
      v20 = *(_OWORD *)(a3 + 584);
      v41 = *(_OWORD *)(a3 + 568);
      v42 = v20;
      v45 = *(_BYTE *)(a3 + 632);
      v21 = objc_msgSend(*(id *)(a1 + 5112), "syncgetAltitude:rel:undulation:", v32, &v47, &v46);
      v22 = v21;
      if (v21)
      {
        v3 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _BYTE *))(**(_QWORD **)(a1 + 288) + 216))(*(_QWORD *)(a1 + 288), a2, a3, v32);
      }
      else
      {
        v23 = *(_OWORD *)(a2 + 112);
        v55 = *(_OWORD *)(a2 + 96);
        v56 = v23;
        v57[0] = *(_OWORD *)(a2 + 128);
        *(_OWORD *)((char *)v57 + 12) = *(_OWORD *)(a2 + 140);
        v24 = *(_OWORD *)(a2 + 48);
        v51 = *(_OWORD *)(a2 + 32);
        v52 = v24;
        v25 = *(_OWORD *)(a2 + 80);
        v53 = *(_OWORD *)(a2 + 64);
        v54 = v25;
        v26 = *(_OWORD *)(a2 + 16);
        v49 = *(_OWORD *)a2;
        v50 = v26;
        v27 = *(void **)(a1 + 5112);
        v48[0] = _NSConcreteStackBlock;
        v48[1] = 3221225472;
        v48[2] = sub_1006AB2F0;
        v48[3] = &unk_10214CAA0;
        objc_msgSend(v27, "downloadIfNeeded:signalQuality:allowCenterOverCellular:", objc_msgSend(v48, "copy", *(_QWORD *)v32, *(_QWORD *)&v32[8], *(_OWORD *)&v32[16], *(_OWORD *)&v32[32], *(_OWORD *)&v32[48], *(_OWORD *)&v32[64], *(_QWORD *)&v32[80], *(_QWORD *)&v32[88], v33, v34, *(_OWORD *)v35, *(_QWORD *)&v35[16], *(_QWORD *)&v35[24]),
          0,
          0);
      }
      v28 = v38;
      if (v38)
      {
        p_shared_owners = (unint64_t *)&v38->__shared_owners_;
        do
          v30 = __ldaxr(p_shared_owners);
        while (__stlxr(v30 - 1, p_shared_owners));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      if ((v22 & 1) == 0)
LABEL_18:
        v3 = 0;
    }
  }
  return v3 & 1;
}

void sub_1006A14AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

void sub_1006A160C(uint64_t a1, __int32 a2, int *a3, char *a4)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  int v11;
  int v12;
  const char *v13;
  int v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  double v21;
  NSObject *v22;
  int v23;
  int v24;
  uint8_t *v25;
  uint64_t v26;
  const char *v27;
  uint8_t *v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  double v32;
  const char *v33;
  uint8_t *v34;
  int32x4_t v35;
  double v36;
  __int16 v37;
  double v38;
  uint8_t buf[4];
  double v40;
  __int16 v41;
  double v42;

  v35.i32[2] = a2;
  v7 = sub_100B303DC();
  sub_10010F434((uint64_t)buf);
  sub_100B30A14(v7, (uint64_t *)buf);
  *(_DWORD *)buf = 2;
  v35.i32[0] = 2;
  v35.i32[1] = sub_10142DEC4((int *)buf);
  v8 = sub_1005EE584();
  *(_DWORD *)buf = 4;
  sub_1005F0FF4(v8, (unsigned int *)buf, &v35, (int *)(a1 + 5124), &v35.i32[2], a3, a4);
  (*(void (**)(_QWORD, int *, char *))(**(_QWORD **)(a1 + 288) + 48))(*(_QWORD *)(a1 + 288), a3, a4);
  switch(*a3)
  {
    case 2:
      *(_BYTE *)(a1 + 674) = 1;
      sub_1006A1D58(a1, 1, 1);
      if (*(unsigned __int8 *)(a1 + 161) != 255)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v9 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Device going to sleep,stop location unavailable timer", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10214C5A0);
          v35.i16[6] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "Device going to sleep,stop location unavailable timer", (char *)&v35.u64[1] + 4, 2);
          v28 = (uint8_t *)v27;
          sub_100512490("Generic", 1, 0, 2, "void CLLocationController::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v27);
          if (v28 != buf)
            free(v28);
        }
        objc_msgSend(*(id *)(a1 + 656), "setNextFireDelay:", 1.79769313e308);
      }
      goto LABEL_40;
    case 3:
      *(_BYTE *)(a1 + 674) = 0;
      sub_1006A1D58(a1, 1, 0);
      if (*(unsigned __int8 *)(a1 + 161) != 255)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v17 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v18 = sub_100B303DC();
          *(_DWORD *)buf = 0;
          v19 = sub_100B30608(v18, buf) + 15.0;
          v20 = sub_100B303DC();
          v21 = sub_100B309E0(v20);
          *(_DWORD *)buf = 134349312;
          v40 = v19;
          v41 = 2050;
          v42 = v21;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "LocationController,Device wake setting location unavailable timer to fire at %{public}.3f,propagation_us,%{public}.3f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10214C5A0);
          v29 = qword_1022A0028;
          v30 = sub_1005FECEC() + 15.0;
          v31 = sub_100B303DC();
          v32 = sub_100B309E0(v31);
          v35.i32[3] = 134349312;
          v36 = v30;
          v37 = 2050;
          v38 = v32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 2, "LocationController,Device wake setting location unavailable timer to fire at %{public}.3f,propagation_us,%{public}.3f", (char *)&v35.u64[1] + 4, 22);
          v34 = (uint8_t *)v33;
          sub_100512490("Generic", 1, 0, 2, "void CLLocationController::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v33);
          if (v34 != buf)
            free(v34);
        }
        objc_msgSend(*(id *)(a1 + 656), "setNextFireDelay:", 15.0);
      }
      sub_1001477A8(a1);
      goto LABEL_40;
    case 6:
      v14 = *((_DWORD *)a4 + 1) == 0;
      v15 = a1;
      v16 = 3;
      goto LABEL_39;
    case 7:
      sub_101140358(a1 + 5200, a4[9] == 0);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v22 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
      {
        v23 = a4[9];
        *(_DWORD *)buf = 67240192;
        LODWORD(v40) = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#LCStats,battery charging,%{public}d", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_40;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v24 = a4[9];
      v35.i32[3] = 67240192;
      LODWORD(v36) = v24;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#LCStats,battery charging,%{public}d", (char *)&v35.u64[1] + 4, 8);
      goto LABEL_35;
    case 8:
      v14 = *a4;
      v15 = a1;
      v16 = 5;
      goto LABEL_39;
    case 10:
      v14 = *a4 == 0;
      v15 = a1;
      v16 = 11;
      goto LABEL_39;
    case 13:
      goto LABEL_40;
    case 15:
      v14 = *a4;
      v15 = a1;
      v16 = 7;
LABEL_39:
      sub_1006A1D58(v15, v16, v14);
      goto LABEL_40;
    default:
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v10 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *a3;
        *(_DWORD *)buf = 67240192;
        LODWORD(v40) = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "LocationController,onStatusNotification,#Warning,Unhandled status notification,%{public}u", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_40;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v12 = *a3;
      v35.i32[3] = 67240192;
      LODWORD(v36) = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "LocationController,onStatusNotification,#Warning,Unhandled status notification,%{public}u", (char *)&v35.u64[1] + 4, 8);
LABEL_35:
      v25 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationController::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v13);
      if (v25 != buf)
        free(v25);
LABEL_40:
      v26 = *(_QWORD *)(a1 + 312);
      if (v26)
        sub_100E5F39C(v26, a3, (unsigned __int8 *)a4);
      return;
  }
}

void sub_1006A1D58(uint64_t a1, int a2, int a3)
{
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  _BYTE *v18;
  double *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;
  uint8_t buf[4];
  uint64_t v36;
  __int16 v37;
  int v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;

  v7 = a1 + 24 * a2;
  if (*(unsigned __int8 *)(v7 + 1624) != a3 || *(double *)(a1 + 24 * a2 + 1632) < 1.0)
  {
    v8 = sub_100B303DC();
    *(_DWORD *)buf = 0;
    v9 = sub_100B30608(v8, buf);
    v10 = a1 + 24 * a2;
    v11 = *(double *)(v10 + 1632);
    if (v11 >= 1.0)
      v12 = v9 - v11;
    else
      v12 = -1.0;
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214C620);
    v13 = (uint64_t *)(v7 + 1616);
    v14 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *v13;
      v16 = sub_100B303DC();
      v17 = sub_100B309E0(v16);
      *(_DWORD *)buf = 136447234;
      v36 = v15;
      v37 = 1026;
      v38 = a3;
      v39 = 2050;
      v40 = v12;
      v41 = 2050;
      v42 = v9;
      v43 = 2050;
      v44 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "@ClxEvent, %{public}s, %{public}d, delta, %{public}.1f, now, %{public}.3f, propagation_us,%{public}.3f", buf, 0x30u);
    }
    v18 = (_BYTE *)(v7 + 1624);
    v19 = (double *)(v10 + 1632);
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214C620);
      v20 = qword_1022A0048;
      v21 = *v13;
      v22 = sub_100B303DC();
      v25 = 136447234;
      v26 = v21;
      v27 = 1026;
      v28 = a3;
      v29 = 2050;
      v30 = v12;
      v31 = 2050;
      v32 = v9;
      v33 = 2050;
      v34 = sub_100B309E0(v22);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 0, "@ClxEvent, %{public}s, %{public}d, delta, %{public}.1f, now, %{public}.3f, propagation_us,%{public}.3f", &v25, 48);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationController::handleStateEvent(NegativeEvent, BOOL)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    *v18 = a3;
    *v19 = v9;
    if (a2 == 11 || a2 == 4)
      sub_1006A8DAC(a1);
  }
}

void sub_1006A202C(uint64_t a1, __int32 a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  uint64_t v15;
  int v16;
  const char *v17;
  uint8_t *v18;
  int32x4_t v19;
  int v20;
  uint8_t buf[1640];

  v19.i32[2] = a2;
  v7 = sub_100B303DC();
  sub_10010F434((uint64_t)buf);
  sub_100B30A14(v7, (uint64_t *)buf);
  *(_DWORD *)buf = 4;
  v19.i32[0] = 4;
  v19.i32[1] = sub_10142DEC4((int *)buf);
  v8 = sub_1005EE584();
  *(_DWORD *)buf = 4;
  sub_1005F26E8(v8, (unsigned int *)buf, &v19, (int *)(a1 + 5124), &v19.i32[2], a3, (char *)a4);
  v9 = *a3;
  if (*a3 != 7)
  {
    if (v9 != 6)
    {
      if (v9 == 1)
      {
        sub_1006A1D58(a1, 0, *(_BYTE *)a4 == 0);
      }
      else
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v13 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
        {
          v14 = *a3;
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)&buf[4] = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "LocationController,onWifiServiceNotification,#Warning,Unhandled status notification,%{public}u", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10214C5A0);
          v16 = *a3;
          v19.i32[3] = 67240192;
          v20 = v16;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "LocationController,onWifiServiceNotification,#Warning,Unhandled status notification,%{public}u", (char *)&v19.u64[1] + 4, 8);
          v18 = (uint8_t *)v17;
          sub_100512490("Generic", 1, 0, 2, "void CLLocationController::onWifiServiceNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v17);
          if (v18 != buf)
            free(v18);
        }
      }
      goto LABEL_19;
    }
    if (*(_BYTE *)(a4 + 96))
      v10 = *(_DWORD *)(a4 + 48) <= 0;
    else
      v10 = 1;
    v11 = !v10;
    sub_1006A1D58(a1, 4, v11 ^ 1);
    sub_100989134(a1 + 352, v11);
  }
  v12 = *(_QWORD *)(a1 + 288);
  if (v12)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 480))(v12, a4);
LABEL_19:
  v15 = *(_QWORD *)(a1 + 312);
  if (v15)
    sub_100E6093C(v15, a3, a4);
  sub_100DC75B4((char *)(a1 + 760), a3, a4);
  sub_100401FF4(a1 + 768, a3, a4);
}

void sub_1006A2304(uint64_t a1, __int32 a2, int *a3, int *a4)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  int32x4_t v14;
  int v15;
  uint8_t buf[1640];

  v14.i32[2] = a2;
  v7 = sub_100B303DC();
  sub_10010F434((uint64_t)buf);
  sub_100B30A14(v7, (uint64_t *)buf);
  *(_DWORD *)buf = 5;
  v14.i32[0] = 5;
  v14.i32[1] = sub_10142DEC4((int *)buf);
  v8 = sub_1005EE584();
  *(_DWORD *)buf = 4;
  sub_1005F32A0(v8, (unsigned int *)buf, &v14, (int *)(a1 + 5124), &v14.i32[2], a3, a4);
  if (*a3)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v9 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *a3;
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "LocationController,onDataProtectionNotification,#Warning,Unhandled status notification,%{public}u", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v11 = *a3;
      v14.i32[3] = 67240192;
      v15 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "LocationController,onDataProtectionNotification,#Warning,Unhandled status notification,%{public}u", (char *)&v14.u64[1] + 4, 8);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationController::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
  else
  {
    sub_1006A1D58(a1, 2, *a4 != 1);
  }
}

void sub_1006A2540(uint64_t a1, int a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  _BOOL4 v12;
  int v13;
  int32x4_t v14[2];
  int v15;

  v13 = a2;
  v7 = sub_100B303DC();
  sub_10010F434((uint64_t)v14);
  sub_100B30A14(v7, v14[0].i64);
  v15 = 6;
  v14[0].i32[0] = 6;
  v14[0].i32[1] = sub_10142DEC4(&v15);
  v8 = sub_1005EE584();
  v15 = 4;
  sub_1005F4044(v8, (unsigned int *)&v15, v14, (int *)(a1 + 5124), &v13, a3, a4);
  v9 = *a3;
  if (*a3 == 9)
  {
    v12 = *(_BYTE *)(a4 + 113) == 0;
    v10 = a1;
    v11 = 8;
  }
  else if (v9 == 5)
  {
    v10 = a1;
    v11 = 9;
    v12 = 0;
  }
  else
  {
    if (v9 != 4)
      return;
    v10 = a1;
    v11 = 9;
    v12 = 1;
  }
  sub_1006A1D58(v10, v11, v12);
}

void sub_1006A262C(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  int32x4_t v10[2];
  int v11;

  v9 = a2;
  v7 = sub_100B303DC();
  sub_10010F434((uint64_t)v10);
  sub_100B30A14(v7, v10[0].i64);
  v11 = 7;
  v10[0].i32[0] = 7;
  v10[0].i32[1] = sub_10142DEC4(&v11);
  v8 = sub_1005EE584();
  v11 = 4;
  sub_1005F4A20(v8, (unsigned int *)&v11, v10, (int *)(a1 + 5124), &v9, a3, a4);
  if (*a3 == 5)
    sub_1006A1D58(a1, 10, *a4 == 0);
}

void sub_1006A26E8(uint64_t a1)
{
  char *v2;
  std::string::size_type size;
  NSObject *v4;
  std::string *v5;
  uint64_t v6;
  void **v7;
  std::string *v8;
  __CFRunLoop *v9;
  NSObject *v10;
  id v11;
  id v12;
  int v13;
  uint64_t **v14;
  void **v15;
  void **v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26;
  __int128 v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  id v32;
  int v33;
  uint64_t **v34;
  void **v35;
  void **v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char v46;
  __int128 v47;
  __int128 v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  uint64_t **v53;
  void **v54;
  void **v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  char v65;
  __int128 v66;
  __int128 v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  int *v71;
  id v72;
  int v73;
  uint64_t **v74;
  void **v75;
  void **v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  char v86;
  __int128 v87;
  __int128 v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  int v92;
  std::string::size_type v93;
  uint64_t **v94;
  void **v95;
  void **v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  char v106;
  __int128 v107;
  __int128 v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  int v112;
  std::string::size_type v113;
  uint64_t **v114;
  void **v115;
  void **v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  char v126;
  __int128 v127;
  __int128 v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  void **v133;
  uint64_t v134;
  void **v135;
  std::string *v136;
  char *v137;
  char *v138;
  const char *v139;
  char *v140;
  uint64_t v141;
  _QWORD v142[5];
  _QWORD v143[5];
  _QWORD v144[5];
  _QWORD v145[5];
  _QWORD v146[5];
  void *v147[2];
  char v148;
  void *v149[2];
  char v150;
  std::string v151;
  std::string v152;
  __n128 (*v153)(__n128 *, __n128 *);
  void (*v154)(uint64_t);
  __int128 v155;
  __int128 v156;
  _BYTE __p[24];
  std::string *v158;
  void *v159[2];
  uint64_t *v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  _OWORD v169[2];
  _BYTE v170[513];
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  char v178;
  __int128 v179;

  sub_100197040();
  sub_10075AA9C((uint64_t)__p);
  if (__p[23] >= 0)
    v2 = __p;
  else
    v2 = *(char **)__p;
  sub_1015A2E04(&v151, v2);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  size = HIBYTE(v151.__r_.__value_.__r.__words[2]);
  if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v151.__r_.__value_.__l.__size_;
  if (!size)
    std::string::assign(&v151, "Local");
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10214C620);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    sub_100197040();
    sub_10075A1D4((uint64_t)&v152);
    if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = &v152;
    else
      v5 = (std::string *)v152.__r_.__value_.__r.__words[0];
    v6 = sub_100197040();
    sub_10075A5A0(v6, (uint64_t)v149);
    if (v150 >= 0)
      v7 = v149;
    else
      v7 = (void **)v149[0];
    v8 = &v151;
    if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v8 = (std::string *)v151.__r_.__value_.__r.__words[0];
    *(_DWORD *)__p = 136446979;
    *(_QWORD *)&__p[4] = v5;
    *(_WORD *)&__p[12] = 2081;
    *(_QWORD *)&__p[14] = v7;
    *(_WORD *)&__p[22] = 2082;
    v158 = v8;
    LOWORD(v159[0]) = 1026;
    *(_DWORD *)((char *)v159 + 2) = 10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@ClxVersion, Init, os, %{public}s, model, %{private}s, build, %{public}s, triage, %{public}d", __p, 0x26u);
    if (v150 < 0)
      operator delete(v149[0]);
    if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v152.__r_.__value_.__l.__data_);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214C620);
    v132 = qword_1022A0048;
    sub_100197040();
    v133 = v149;
    sub_10075A1D4((uint64_t)v149);
    if (v150 < 0)
      v133 = (void **)v149[0];
    v134 = sub_100197040();
    sub_10075A5A0(v134, (uint64_t)v147);
    if (v148 >= 0)
      v135 = v147;
    else
      v135 = (void **)v147[0];
    v136 = &v151;
    if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v136 = (std::string *)v151.__r_.__value_.__r.__words[0];
    LODWORD(v152.__r_.__value_.__l.__data_) = 136446979;
    *(std::string::size_type *)((char *)v152.__r_.__value_.__r.__words + 4) = (std::string::size_type)v133;
    WORD2(v152.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&v152.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v135;
    HIWORD(v152.__r_.__value_.__r.__words[2]) = 2082;
    v153 = (__n128 (*)(__n128 *, __n128 *))v136;
    LOWORD(v154) = 1026;
    *(_DWORD *)((char *)&v154 + 2) = 10;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v132, 0, "@ClxVersion, Init, os, %{public}s, model, %{private}s, build, %{public}s, triage, %{public}d", &v152, 38);
    v138 = v137;
    if (v148 < 0)
      operator delete(v147[0]);
    if (v150 < 0)
      operator delete(v149[0]);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationController::start()", "%s\n", v138);
    if (v138 != __p)
      free(v138);
  }
  CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(a1 + 688));
  v9 = (__CFRunLoop *)sub_100193530();
  CFRunLoopWakeUp(v9);
  if (!*(_BYTE *)(a1 + 664))
  {
    *(_DWORD *)(a1 + 320) = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "isServiceEnabled:", CFSTR("CLWifiLocationProvider"));
    sub_100197040();
    if (sub_10075FEF0())
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v10 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CELL_LOC:choosing CLUnifiedCellLocationProvider", __p, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        LOWORD(v152.__r_.__value_.__l.__data_) = 0;
        LODWORD(v141) = 2;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0028, 2, "CELL_LOC:choosing CLUnifiedCellLocationProvider", &v152, v141);
        v140 = (char *)v139;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationController::start()", "%s\n", v139);
        if (v140 != __p)
          free(v140);
      }
      v146[0] = _NSConcreteStackBlock;
      v146[1] = 3221225472;
      v146[2] = sub_1006A44B8;
      v146[3] = &unk_10214C498;
      v146[4] = a1;
      sub_100D97428((uint64_t)v146);
    }
    else
    {
      *(_DWORD *)(a1 + 324) = 0;
    }
    v145[0] = _NSConcreteStackBlock;
    v145[1] = 3221225472;
    v145[2] = sub_1006A44D0;
    v145[3] = &unk_10214C498;
    v145[4] = a1;
    sub_100739500((uint64_t)v145);
    v144[0] = _NSConcreteStackBlock;
    v144[1] = 3221225472;
    v144[2] = sub_1006A44E8;
    v144[3] = &unk_10214C498;
    v144[4] = a1;
    sub_1009ADA90((uint64_t)v144);
  }
  v11 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLGnssProvider"));
  *(_QWORD *)(a1 + 648) = v11;
  if (v11)
    *(_DWORD *)(a1 + 328) = 4;
  if (*(_DWORD *)(a1 + 320))
  {
    v12 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLWifiLocationProvider")), "syncgetName");
    if (v12)
    {
      sub_1015A2E04(&v152, (char *)objc_msgSend(v12, "UTF8String"));
      v13 = *(_DWORD *)(a1 + 320);
      sub_1015A2E04(v149, "CLWifiLocationProvider");
      sub_1006AA920((uint64_t)__p, v13, (__int128 *)&v152, (__int128 *)v149, 4, 1, 1);
      v147[0] = (void *)(a1 + 320);
      v14 = sub_1001B2798((uint64_t **)(a1 + 240), (int *)(a1 + 320), (uint64_t)&unk_101B9EB60, (_DWORD **)v147);
      *((_DWORD *)v14 + 10) = *(_DWORD *)__p;
      v15 = (void **)(v14 + 6);
      if (*((char *)v14 + 71) < 0)
        operator delete(*v15);
      v14[8] = (uint64_t *)v158;
      *(_OWORD *)v15 = *(_OWORD *)&__p[8];
      HIBYTE(v158) = 0;
      __p[8] = 0;
      v16 = (void **)(v14 + 9);
      if (*((char *)v14 + 95) < 0)
        operator delete(*v16);
      v14[11] = v160;
      *(_OWORD *)v16 = *(_OWORD *)v159;
      HIBYTE(v160) = 0;
      LOBYTE(v159[0]) = 0;
      v17 = v162;
      *((_OWORD *)v14 + 6) = v161;
      *((_OWORD *)v14 + 7) = v17;
      v18 = v166;
      v19 = v165;
      v20 = v164;
      *((_OWORD *)v14 + 8) = v163;
      *((_OWORD *)v14 + 9) = v20;
      v21 = *(_OWORD *)((char *)v169 + 12);
      v22 = v169[0];
      v23 = v168;
      *((_OWORD *)v14 + 12) = v167;
      *((_OWORD *)v14 + 13) = v23;
      *((_OWORD *)v14 + 14) = v22;
      *(_OWORD *)((char *)v14 + 236) = v21;
      *((_OWORD *)v14 + 10) = v19;
      *((_OWORD *)v14 + 11) = v18;
      memcpy(v14 + 32, v170, 0x201uLL);
      sub_1002B7674((uint64_t)(v14 + 97), &v171);
      v24 = v174;
      v25 = v173;
      *(_OWORD *)(v14 + 99) = v172;
      v26 = v178;
      v27 = v177;
      v28 = v176;
      *(_OWORD *)(v14 + 105) = v175;
      *(_OWORD *)(v14 + 107) = v28;
      *(_OWORD *)(v14 + 109) = v27;
      *((_BYTE *)v14 + 888) = v26;
      *(_OWORD *)(v14 + 101) = v25;
      *(_OWORD *)(v14 + 103) = v24;
      *((_OWORD *)v14 + 56) = v179;
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
      if (*((_QWORD *)&v171 + 1))
      {
        v30 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      if (SHIBYTE(v160) < 0)
        operator delete(v159[0]);
      if (SHIBYTE(v158) < 0)
        operator delete(*(void **)&__p[8]);
      if (v150 < 0)
        operator delete(v149[0]);
      sub_1006B0DD4();
    }
  }
  if (*(_DWORD *)(a1 + 324))
  {
    v32 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLUnifiedCellLocationProvider")), "syncgetName");
    if (v32)
    {
      sub_1015A2E04(&v152, (char *)objc_msgSend(v32, "UTF8String"));
      v33 = *(_DWORD *)(a1 + 324);
      sub_1015A2E04(v149, "CLUnifiedCellLocationProvider");
      sub_1006AA920((uint64_t)__p, v33, (__int128 *)&v152, (__int128 *)v149, 6, 0, -1);
      v147[0] = (void *)(a1 + 324);
      v34 = sub_1001B2798((uint64_t **)(a1 + 240), (int *)(a1 + 324), (uint64_t)&unk_101B9EB60, (_DWORD **)v147);
      *((_DWORD *)v34 + 10) = *(_DWORD *)__p;
      v35 = (void **)(v34 + 6);
      if (*((char *)v34 + 71) < 0)
        operator delete(*v35);
      v34[8] = (uint64_t *)v158;
      *(_OWORD *)v35 = *(_OWORD *)&__p[8];
      HIBYTE(v158) = 0;
      __p[8] = 0;
      v36 = (void **)(v34 + 9);
      if (*((char *)v34 + 95) < 0)
        operator delete(*v36);
      v34[11] = v160;
      *(_OWORD *)v36 = *(_OWORD *)v159;
      HIBYTE(v160) = 0;
      LOBYTE(v159[0]) = 0;
      v37 = v162;
      *((_OWORD *)v34 + 6) = v161;
      *((_OWORD *)v34 + 7) = v37;
      v38 = v166;
      v39 = v165;
      v40 = v164;
      *((_OWORD *)v34 + 8) = v163;
      *((_OWORD *)v34 + 9) = v40;
      v41 = *(_OWORD *)((char *)v169 + 12);
      v42 = v169[0];
      v43 = v168;
      *((_OWORD *)v34 + 12) = v167;
      *((_OWORD *)v34 + 13) = v43;
      *((_OWORD *)v34 + 14) = v42;
      *(_OWORD *)((char *)v34 + 236) = v41;
      *((_OWORD *)v34 + 10) = v39;
      *((_OWORD *)v34 + 11) = v38;
      memcpy(v34 + 32, v170, 0x201uLL);
      sub_1002B7674((uint64_t)(v34 + 97), &v171);
      v44 = v174;
      v45 = v173;
      *(_OWORD *)(v34 + 99) = v172;
      v46 = v178;
      v47 = v177;
      v48 = v176;
      *(_OWORD *)(v34 + 105) = v175;
      *(_OWORD *)(v34 + 107) = v48;
      *(_OWORD *)(v34 + 109) = v47;
      *((_BYTE *)v34 + 888) = v46;
      *(_OWORD *)(v34 + 101) = v45;
      *(_OWORD *)(v34 + 103) = v44;
      *((_OWORD *)v34 + 56) = v179;
      v49 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
      if (*((_QWORD *)&v171 + 1))
      {
        v50 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      if (SHIBYTE(v160) < 0)
        operator delete(v159[0]);
      if (SHIBYTE(v158) < 0)
        operator delete(*(void **)&__p[8]);
      if (v150 < 0)
        operator delete(v149[0]);
      sub_100D9733C();
    }
  }
  v52 = *(_DWORD *)(a1 + 328);
  if (v52)
  {
    sub_1015A2E04(&v152, "gps");
    sub_1015A2E04(v149, "CLGnssProvider");
    sub_1006AA920((uint64_t)__p, v52, (__int128 *)&v152, (__int128 *)v149, 1, 2, 2);
    v147[0] = (void *)(a1 + 328);
    v53 = sub_1001B2798((uint64_t **)(a1 + 240), (int *)(a1 + 328), (uint64_t)&unk_101B9EB60, (_DWORD **)v147);
    *((_DWORD *)v53 + 10) = *(_DWORD *)__p;
    v54 = (void **)(v53 + 6);
    if (*((char *)v53 + 71) < 0)
      operator delete(*v54);
    v53[8] = (uint64_t *)v158;
    *(_OWORD *)v54 = *(_OWORD *)&__p[8];
    HIBYTE(v158) = 0;
    __p[8] = 0;
    v55 = (void **)(v53 + 9);
    if (*((char *)v53 + 95) < 0)
      operator delete(*v55);
    v53[11] = v160;
    *(_OWORD *)v55 = *(_OWORD *)v159;
    HIBYTE(v160) = 0;
    LOBYTE(v159[0]) = 0;
    v56 = v162;
    *((_OWORD *)v53 + 6) = v161;
    *((_OWORD *)v53 + 7) = v56;
    v57 = v166;
    v58 = v165;
    v59 = v164;
    *((_OWORD *)v53 + 8) = v163;
    *((_OWORD *)v53 + 9) = v59;
    v60 = *(_OWORD *)((char *)v169 + 12);
    v61 = v169[0];
    v62 = v168;
    *((_OWORD *)v53 + 12) = v167;
    *((_OWORD *)v53 + 13) = v62;
    *((_OWORD *)v53 + 14) = v61;
    *(_OWORD *)((char *)v53 + 236) = v60;
    *((_OWORD *)v53 + 10) = v58;
    *((_OWORD *)v53 + 11) = v57;
    memcpy(v53 + 32, v170, 0x201uLL);
    sub_1002B7674((uint64_t)(v53 + 97), &v171);
    v63 = v174;
    v64 = v173;
    *(_OWORD *)(v53 + 99) = v172;
    v65 = v178;
    v66 = v177;
    v67 = v176;
    *(_OWORD *)(v53 + 105) = v175;
    *(_OWORD *)(v53 + 107) = v67;
    *(_OWORD *)(v53 + 109) = v66;
    *((_BYTE *)v53 + 888) = v65;
    *(_OWORD *)(v53 + 101) = v64;
    *(_OWORD *)(v53 + 103) = v63;
    *((_OWORD *)v53 + 56) = v179;
    v68 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
    if (*((_QWORD *)&v171 + 1))
    {
      v69 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    if (SHIBYTE(v160) < 0)
      operator delete(v159[0]);
    if (SHIBYTE(v158) < 0)
      operator delete(*(void **)&__p[8]);
    if (v150 < 0)
      operator delete(v149[0]);
    if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v152.__r_.__value_.__l.__data_);
    sub_100E088B0();
  }
  *(_DWORD *)(a1 + 332) = 0;
  memset(&v152, 0, sizeof(v152));
  v71 = (int *)(a1 + 332);
  if (objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "isServiceEnabled:", CFSTR("CLPipelineLocationProvider")))
  {
    v72 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLPipelineLocationProvider")), "syncgetName");
    if (v72)
    {
      std::string::assign(&v152, (const std::string::value_type *)objc_msgSend(v72, "UTF8String"));
      v73 = 5;
      *v71 = 5;
      goto LABEL_97;
    }
  }
  v73 = *v71;
  if (*v71)
  {
LABEL_97:
    sub_1015A2E04(v149, "CLPipelineLocationProvider");
    sub_1006AA920((uint64_t)__p, v73, (__int128 *)&v152, (__int128 *)v149, 10, 2, 4);
    v147[0] = (void *)(a1 + 332);
    v74 = sub_1001B2798((uint64_t **)(a1 + 240), (int *)(a1 + 332), (uint64_t)&unk_101B9EB60, (_DWORD **)v147);
    *((_DWORD *)v74 + 10) = *(_DWORD *)__p;
    v75 = (void **)(v74 + 6);
    if (*((char *)v74 + 71) < 0)
      operator delete(*v75);
    v74[8] = (uint64_t *)v158;
    *(_OWORD *)v75 = *(_OWORD *)&__p[8];
    HIBYTE(v158) = 0;
    __p[8] = 0;
    v76 = (void **)(v74 + 9);
    if (*((char *)v74 + 95) < 0)
      operator delete(*v76);
    v74[11] = v160;
    *(_OWORD *)v76 = *(_OWORD *)v159;
    HIBYTE(v160) = 0;
    LOBYTE(v159[0]) = 0;
    v77 = v162;
    *((_OWORD *)v74 + 6) = v161;
    *((_OWORD *)v74 + 7) = v77;
    v78 = v166;
    v79 = v165;
    v80 = v164;
    *((_OWORD *)v74 + 8) = v163;
    *((_OWORD *)v74 + 9) = v80;
    v81 = *(_OWORD *)((char *)v169 + 12);
    v82 = v169[0];
    v83 = v168;
    *((_OWORD *)v74 + 12) = v167;
    *((_OWORD *)v74 + 13) = v83;
    *((_OWORD *)v74 + 14) = v82;
    *(_OWORD *)((char *)v74 + 236) = v81;
    *((_OWORD *)v74 + 10) = v79;
    *((_OWORD *)v74 + 11) = v78;
    memcpy(v74 + 32, v170, 0x201uLL);
    sub_1002B7674((uint64_t)(v74 + 97), &v171);
    v84 = v174;
    v85 = v173;
    *(_OWORD *)(v74 + 99) = v172;
    v86 = v178;
    v87 = v177;
    v88 = v176;
    *(_OWORD *)(v74 + 105) = v175;
    *(_OWORD *)(v74 + 107) = v88;
    *(_OWORD *)(v74 + 109) = v87;
    *((_BYTE *)v74 + 888) = v86;
    *(_OWORD *)(v74 + 101) = v85;
    *(_OWORD *)(v74 + 103) = v84;
    *((_OWORD *)v74 + 56) = v179;
    v89 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
    if (*((_QWORD *)&v171 + 1))
    {
      v90 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    if (SHIBYTE(v160) < 0)
      operator delete(v159[0]);
    if (SHIBYTE(v158) < 0)
      operator delete(*(void **)&__p[8]);
    if (v150 < 0)
      operator delete(v149[0]);
    sub_10118DF3C();
  }
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v152.__r_.__value_.__l.__data_);
  if (*(_DWORD *)(a1 + 336))
  {
    v152.__r_.__value_.__r.__words[0] = 0;
    v152.__r_.__value_.__l.__size_ = (std::string::size_type)&v152;
    v152.__r_.__value_.__r.__words[2] = 0x4812000000;
    v153 = sub_100206CD8;
    v154 = sub_100207ACC;
    v155 = 0u;
    v156 = 0u;
    v143[0] = _NSConcreteStackBlock;
    v143[1] = 3221225472;
    v143[2] = sub_1006A4548;
    v143[3] = &unk_10214C4C0;
    v143[4] = &v152;
    sub_100739500((uint64_t)v143);
    v92 = *(_DWORD *)(a1 + 336);
    v93 = v152.__r_.__value_.__l.__size_;
    sub_1015A2E04(v149, "CLAccessoryLocationProvider");
    sub_1006AA920((uint64_t)__p, v92, (__int128 *)(v93 + 48), (__int128 *)v149, 3, 2, 5);
    v147[0] = (void *)(a1 + 336);
    v94 = sub_1001B2798((uint64_t **)(a1 + 240), (int *)(a1 + 336), (uint64_t)&unk_101B9EB60, (_DWORD **)v147);
    *((_DWORD *)v94 + 10) = *(_DWORD *)__p;
    v95 = (void **)(v94 + 6);
    if (*((char *)v94 + 71) < 0)
      operator delete(*v95);
    v94[8] = (uint64_t *)v158;
    *(_OWORD *)v95 = *(_OWORD *)&__p[8];
    HIBYTE(v158) = 0;
    __p[8] = 0;
    v96 = (void **)(v94 + 9);
    if (*((char *)v94 + 95) < 0)
      operator delete(*v96);
    v94[11] = v160;
    *(_OWORD *)v96 = *(_OWORD *)v159;
    HIBYTE(v160) = 0;
    LOBYTE(v159[0]) = 0;
    v97 = v162;
    *((_OWORD *)v94 + 6) = v161;
    *((_OWORD *)v94 + 7) = v97;
    v98 = v166;
    v99 = v165;
    v100 = v164;
    *((_OWORD *)v94 + 8) = v163;
    *((_OWORD *)v94 + 9) = v100;
    v101 = *(_OWORD *)((char *)v169 + 12);
    v102 = v169[0];
    v103 = v168;
    *((_OWORD *)v94 + 12) = v167;
    *((_OWORD *)v94 + 13) = v103;
    *((_OWORD *)v94 + 14) = v102;
    *(_OWORD *)((char *)v94 + 236) = v101;
    *((_OWORD *)v94 + 10) = v99;
    *((_OWORD *)v94 + 11) = v98;
    memcpy(v94 + 32, v170, 0x201uLL);
    sub_1002B7674((uint64_t)(v94 + 97), &v171);
    v104 = v174;
    v105 = v173;
    *(_OWORD *)(v94 + 99) = v172;
    v106 = v178;
    v107 = v177;
    v108 = v176;
    *(_OWORD *)(v94 + 105) = v175;
    *(_OWORD *)(v94 + 107) = v108;
    *(_OWORD *)(v94 + 109) = v107;
    *((_BYTE *)v94 + 888) = v106;
    *(_OWORD *)(v94 + 101) = v105;
    *(_OWORD *)(v94 + 103) = v104;
    *((_OWORD *)v94 + 56) = v179;
    v109 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
    if (*((_QWORD *)&v171 + 1))
    {
      v110 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
      do
        v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }
    if (SHIBYTE(v160) < 0)
      operator delete(v159[0]);
    if (SHIBYTE(v158) < 0)
      operator delete(*(void **)&__p[8]);
    if (v150 < 0)
      operator delete(v149[0]);
    sub_100739414();
  }
  if (*(_DWORD *)(a1 + 340))
  {
    v152.__r_.__value_.__r.__words[0] = 0;
    v152.__r_.__value_.__l.__size_ = (std::string::size_type)&v152;
    v152.__r_.__value_.__r.__words[2] = 0x4812000000;
    v153 = sub_100206CD8;
    v154 = sub_100207ACC;
    v155 = 0u;
    v156 = 0u;
    v142[0] = _NSConcreteStackBlock;
    v142[1] = 3221225472;
    v142[2] = sub_1006A45C8;
    v142[3] = &unk_10214C4C0;
    v142[4] = &v152;
    sub_1009ADA90((uint64_t)v142);
    v112 = *(_DWORD *)(a1 + 340);
    v113 = v152.__r_.__value_.__l.__size_;
    sub_1015A2E04(v149, "CLSimulatedLocationProvider");
    sub_1006AA920((uint64_t)__p, v112, (__int128 *)(v113 + 48), (__int128 *)v149, 0, 0, -1);
    v147[0] = (void *)(a1 + 340);
    v114 = sub_1001B2798((uint64_t **)(a1 + 240), (int *)(a1 + 340), (uint64_t)&unk_101B9EB60, (_DWORD **)v147);
    *((_DWORD *)v114 + 10) = *(_DWORD *)__p;
    v115 = (void **)(v114 + 6);
    if (*((char *)v114 + 71) < 0)
      operator delete(*v115);
    v114[8] = (uint64_t *)v158;
    *(_OWORD *)v115 = *(_OWORD *)&__p[8];
    HIBYTE(v158) = 0;
    __p[8] = 0;
    v116 = (void **)(v114 + 9);
    if (*((char *)v114 + 95) < 0)
      operator delete(*v116);
    v114[11] = v160;
    *(_OWORD *)v116 = *(_OWORD *)v159;
    HIBYTE(v160) = 0;
    LOBYTE(v159[0]) = 0;
    v117 = v162;
    *((_OWORD *)v114 + 6) = v161;
    *((_OWORD *)v114 + 7) = v117;
    v118 = v166;
    v119 = v165;
    v120 = v164;
    *((_OWORD *)v114 + 8) = v163;
    *((_OWORD *)v114 + 9) = v120;
    v121 = *(_OWORD *)((char *)v169 + 12);
    v122 = v169[0];
    v123 = v168;
    *((_OWORD *)v114 + 12) = v167;
    *((_OWORD *)v114 + 13) = v123;
    *((_OWORD *)v114 + 14) = v122;
    *(_OWORD *)((char *)v114 + 236) = v121;
    *((_OWORD *)v114 + 10) = v119;
    *((_OWORD *)v114 + 11) = v118;
    memcpy(v114 + 32, v170, 0x201uLL);
    sub_1002B7674((uint64_t)(v114 + 97), &v171);
    v124 = v174;
    v125 = v173;
    *(_OWORD *)(v114 + 99) = v172;
    v126 = v178;
    v127 = v177;
    v128 = v176;
    *(_OWORD *)(v114 + 105) = v175;
    *(_OWORD *)(v114 + 107) = v128;
    *(_OWORD *)(v114 + 109) = v127;
    *((_BYTE *)v114 + 888) = v126;
    *(_OWORD *)(v114 + 101) = v125;
    *(_OWORD *)(v114 + 103) = v124;
    *((_OWORD *)v114 + 56) = v179;
    v129 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
    if (*((_QWORD *)&v171 + 1))
    {
      v130 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
    }
    if (SHIBYTE(v160) < 0)
      operator delete(v159[0]);
    if (SHIBYTE(v158) < 0)
      operator delete(*(void **)&__p[8]);
    if (v150 < 0)
      operator delete(v149[0]);
    sub_1009AD9A4();
  }
  if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLLoiLocationProvider")), "syncgetName"))
  {
    sub_100EABDE0();
  }
  objc_msgSend(*(id *)(a1 + 5104), "registerForUpdates:", *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 640), "setHarvestingEnabled:", 1);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
}

void sub_1006A4290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a47 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1006A44B8(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)(result + 32) + 324) = 2 * (a2 != 0);
  return result;
}

uint64_t sub_1006A44D0(uint64_t result, uint64_t a2)
{
  int v2;

  if (a2)
    v2 = 6;
  else
    v2 = 0;
  *(_DWORD *)(*(_QWORD *)(result + 32) + 336) = v2;
  return result;
}

uint64_t sub_1006A44E8(uint64_t result, uint64_t a2)
{
  int v2;

  if (a2)
    v2 = 7;
  else
    v2 = 0;
  *(_DWORD *)(*(_QWORD *)(result + 32) + 340) = v2;
  return result;
}

uint64_t sub_1006A4500(uint64_t a1)
{
  sub_100261F44(a1 + 736);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

double sub_1006A4548(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  double result;
  __int128 v6;
  uint64_t v7;

  if (*(char *)(a2 + 31) < 0)
  {
    sub_100115CE4(&v6, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 8);
    v7 = *(_QWORD *)(a2 + 24);
  }
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = v3 + 48;
  if (*(char *)(v3 + 71) < 0)
    operator delete(*(void **)v4);
  result = *(double *)&v6;
  *(_OWORD *)v4 = v6;
  *(_QWORD *)(v4 + 16) = v7;
  return result;
}

double sub_1006A45C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  double result;
  __int128 v6;
  uint64_t v7;

  if (*(char *)(a2 + 31) < 0)
  {
    sub_100115CE4(&v6, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 8);
    v7 = *(_QWORD *)(a2 + 24);
  }
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = v3 + 48;
  if (*(char *)(v3 + 71) < 0)
    operator delete(*(void **)v4);
  result = *(double *)&v6;
  *(_OWORD *)v4 = v6;
  *(_QWORD *)(v4 + 16) = v7;
  return result;
}

void sub_1006A4648(unsigned int a1, int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLLocationController::onLoiNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214C560);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onLoiNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C560);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onLoiNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006A8090(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1006A4810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1006A4830(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  int *v7;
  id v8;
  NSObject *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  NSString *v19;
  id v20;
  uint64_t v21;
  int *v22;
  int *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _QWORD v36[6];
  int v37;
  uint64_t v38;
  uint8_t buf[4];
  uint64_t v40;

  sub_1006DB4DC(a1);
  objc_msgSend(*(id *)(a1 + 40), "assertInside");
  objc_msgSend(*(id *)(a1 + 656), "invalidate");

  *(_QWORD *)(a1 + 656) = 0;
  v2 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = objc_msgSend(*(id *)(a1 + 32), "vendor");
  v7 = *(int **)(a1 + 264);
  if (v7 != (int *)(a1 + 272))
  {
    v8 = v6;
    do
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v9 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v10 = sub_1000B5C9C(a1 + 240, v7 + 8);
        v13 = v10[1];
        v11 = v10 + 1;
        v12 = v13;
        if (*((char *)v11 + 23) >= 0)
          v12 = (uint64_t)v11;
        *(_DWORD *)buf = 136446210;
        v40 = v12;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "shutting down %{public}s location provider", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v25 = qword_1022A0028;
        v26 = sub_1000B5C9C(a1 + 240, v7 + 8);
        v29 = v26[1];
        v27 = v26 + 1;
        v28 = v29;
        if (*((char *)v27 + 23) >= 0)
          v28 = (uint64_t)v27;
        v37 = 136446210;
        v38 = v28;
        LODWORD(v35) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 2, "shutting down %{public}s location provider", &v37, v35);
        v31 = (uint8_t *)v30;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationController::shutdown()", "%s\n", v30);
        if (v31 != buf)
          free(v31);
      }
      v14 = sub_1000B5C9C(a1 + 240, v7 + 8);
      v17 = v14[4];
      v15 = v14 + 4;
      v16 = v17;
      if (*((char *)v15 + 23) >= 0)
        v18 = v15;
      else
        v18 = (uint64_t *)v16;
      v19 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v18);
      v20 = +[CLSilo main](CLSilo, "main");
      v36[0] = _NSConcreteStackBlock;
      v36[1] = 3221225472;
      v36[2] = sub_1006A4C84;
      v36[3] = &unk_10212BB30;
      v36[4] = v8;
      v36[5] = v19;
      objc_msgSend(v20, "async:", v36);
      v21 = *((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      v22 = (int *)*((_QWORD *)v7 + 1);
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = *(int **)v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (int *)*((_QWORD *)v7 + 2);
          v24 = *(_QWORD *)v23 == (_QWORD)v7;
          v7 = v23;
        }
        while (!v24);
      }
      v7 = v23;
    }
    while (v23 != (int *)(a1 + 272));
  }

  *(_QWORD *)(a1 + 648) = 0;
  v32 = *(_QWORD *)(a1 + 632);
  if (v32)
  {
    objc_msgSend(*(id *)(v32 + 16), "unregister:forNotification:", *(_QWORD *)(v32 + 8), 0);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 632) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 632) + 8), 9);
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "retireServiceWithName:", CFSTR("CLLoiLocationProvider"));
    v33 = *(_QWORD *)(a1 + 632);
    *(_QWORD *)(a1 + 632) = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  }
  objc_msgSend(*(id *)(a1 + 640), "setHarvestingEnabled:", 0);
  objc_msgSend(*(id *)(a1 + 640), "shutdown");

  *(_QWORD *)(a1 + 640) = 0;
  objc_msgSend(*(id *)(a1 + 1608), "invalidate");

  *(_QWORD *)(a1 + 1608) = 0;
  objc_msgSend(*(id *)(a1 + 5088), "stopMonitoringEmergencyState:", CLISP_ME_TOKEN);

  sub_1006A4C90((uint64_t *)(a1 + 712), 0);
  *(_QWORD *)(a1 + 5096) = 0;
  v34 = *(void **)(a1 + 5104);
  if (v34)
  {
    objc_msgSend(v34, "unregisterForUpdates:", *(_QWORD *)(a1 + 32));

    *(_QWORD *)(a1 + 5104) = 0;
  }
}

id sub_1006A4C84(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "retireServiceWithName:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_1006A4C90(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1007A46E8();
    operator delete();
  }
  return result;
}

void sub_1006A4CCC(uint64_t a1, int a2)
{
  NSObject *v3;
  uint64_t **v4;
  _QWORD *v5;
  uint64_t **v6;
  NSObject *v7;
  char *v8;
  NSObject *v9;
  uint64_t **v10;
  _QWORD *v11;
  float v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t **v15;
  uint64_t **v16;
  int v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t v22;
  double v23;
  int v24;
  int v25;
  int v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t **v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t **v41;
  _QWORD *v42;
  float v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  int v48;
  int v49;
  _BYTE v50[12];
  __int16 v51;
  double v52;
  _BYTE buf[12];
  __int16 v54;
  _WORD v55[41];
  int v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  void *v59;
  char v60;
  std::__shared_weak_count *v61;
  id v62;

  v49 = a2;
  if (a2)
  {
    if (*(_BYTE *)(a1 + 664))
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v3 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        *(_QWORD *)buf = &v49;
        v4 = sub_1001B2798((uint64_t **)(a1 + 240), &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        v5 = v4 + 6;
        if (*((char *)v4 + 71) < 0)
          v5 = (_QWORD *)*v5;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v5;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Unregistering %s location provider as bystander", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v36 = qword_1022A0028;
        *(_QWORD *)v50 = &v49;
        v37 = sub_1001B2798((uint64_t **)(a1 + 240), &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)v50);
        v38 = v37 + 6;
        if (*((char *)v37 + 71) < 0)
          v38 = (_QWORD *)*v38;
        *(_DWORD *)v50 = 136315138;
        *(_QWORD *)&v50[4] = v38;
        v39 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 2, "Unregistering %s location provider as bystander", v50);
        sub_100512490("Generic", 1, 0, 2, "void CLLocationController::stopLocationProvider(LocationProvider)", "%s\n", v39);
        if (v39 != buf)
          free(v39);
      }
      *(_QWORD *)buf = &v49;
      v6 = sub_100041CE0((uint64_t **)(a1 + 264), &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      objc_msgSend((id)v6[5][2], "unregister:forNotification:", v6[5][1], 4);
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214C620);
      v9 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)buf = &v49;
        v10 = sub_1001B2798((uint64_t **)(a1 + 240), &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        v11 = v10 + 6;
        if (*((char *)v10 + 71) < 0)
          v11 = (_QWORD *)*v11;
        v12 = sub_1001B75B4(a1);
        *(_DWORD *)buf = 136380931;
        *(_QWORD *)&buf[4] = v11;
        v54 = 2050;
        *(double *)v55 = v12;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "@ClxProvider, stop, %{private}s, desiredAccuracy, %{public}.1f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214C620);
        v40 = qword_1022A0048;
        *(_QWORD *)v50 = &v49;
        v41 = sub_1001B2798((uint64_t **)(a1 + 240), &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)v50);
        v42 = v41 + 6;
        if (*((char *)v41 + 71) < 0)
          v42 = (_QWORD *)*v42;
        v43 = sub_1001B75B4(a1);
        *(_DWORD *)v50 = 136380931;
        *(_QWORD *)&v50[4] = v42;
        v51 = 2050;
        v52 = v43;
        v44 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v40, 0, "@ClxProvider, stop, %{private}s, desiredAccuracy, %{public}.1f", v50, 22);
        sub_100512490("Generic", 1, 0, 2, "void CLLocationController::stopLocationProvider(LocationProvider)", "%s\n", v44);
        if (v44 != buf)
          free(v44);
      }
      if (v49 == *(_DWORD *)(a1 + 320))
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214C620);
        v13 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "WlpReg, 0, loccontroller", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10214C620);
          *(_WORD *)v50 = 0;
          LODWORD(v47) = 2;
          v45 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WlpReg, 0, loccontroller", v50, v47);
          sub_100512490("Generic", 1, 0, 2, "void CLLocationController::stopLocationProvider(LocationProvider)", "%s\n", v45);
          if (v45 != buf)
            free(v45);
        }
      }
      if (v49 == *(_DWORD *)(a1 + 324))
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214C620);
        v14 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "UclpReg, 0, loccontroller", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10214C620);
          *(_WORD *)v50 = 0;
          LODWORD(v47) = 2;
          v46 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "UclpReg, 0, loccontroller", v50, v47);
          sub_100512490("Generic", 1, 0, 2, "void CLLocationController::stopLocationProvider(LocationProvider)", "%s\n", v46);
          if (v46 != buf)
            free(v46);
        }
      }
      *(_QWORD *)buf = &v49;
      v15 = sub_100041CE0((uint64_t **)(a1 + 264), &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      objc_msgSend((id)v15[5][2], "unregister:forNotification:", v15[5][1], 0);
      *(_QWORD *)buf = &v49;
      v16 = sub_100041CE0((uint64_t **)(a1 + 264), &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      objc_msgSend((id)v16[5][2], "unregister:forNotification:", v16[5][1], 9);
      v17 = v49;
      if (v49 == *(_DWORD *)(a1 + 328))
      {
        *(_QWORD *)buf = &v49;
        v18 = sub_100041CE0((uint64_t **)(a1 + 264), &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        objc_msgSend((id)v18[5][2], "unregister:forNotification:", v18[5][1], 26);
        *(_QWORD *)buf = &v49;
        v19 = sub_100041CE0((uint64_t **)(a1 + 264), &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        objc_msgSend((id)v19[5][2], "unregister:forNotification:", v19[5][1], 18);
        v17 = v49;
      }
      if (v17 == *(_DWORD *)(a1 + 336))
      {
        *(_QWORD *)buf = &v49;
        v20 = sub_100041CE0((uint64_t **)(a1 + 264), &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        objc_msgSend((id)v20[5][2], "unregister:forNotification:", v20[5][1], 20);
        *(_QWORD *)buf = &v49;
        v21 = sub_100041CE0((uint64_t **)(a1 + 264), &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        objc_msgSend((id)v21[5][2], "unregister:forNotification:", v21[5][1], 21);
      }
      *(_QWORD *)buf = &v49;
      *((_BYTE *)sub_1001B2798((uint64_t **)(a1 + 240), &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 902) = 1;
      *(_QWORD *)buf = &v49;
      *((_BYTE *)sub_1001B2798((uint64_t **)(a1 + 240), &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 903) = 0;
      *(_QWORD *)buf = &v49;
      sub_1001B2798((uint64_t **)(a1 + 240), &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[113] = 0;
      *(_QWORD *)buf = &v49;
      if (*((double *)sub_1001B2798((uint64_t **)(a1 + 240), &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 23) < 0.0)
      {
        v22 = sub_100B303DC();
        *(_DWORD *)buf = 0;
        v23 = sub_100B30608(v22, buf);
        *(_QWORD *)buf = &v49;
        *(double *)((char *)sub_1001B2798((uint64_t **)(a1 + 240), &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 172) = v23;
        *(_QWORD *)buf = &v49;
        sub_1001B2798((uint64_t **)(a1 + 240), &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[23] = 0;
        sub_100129CA0((uint64_t)buf);
        v48 = 0;
        v24 = (*(uint64_t (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, &v48, buf);
        if (*(double *)&v55[3] > 0.0)
          v25 = v24;
        else
          v25 = 0;
        if (v25 == 1)
        {
          v26 = v56;
          *(_QWORD *)v50 = &v49;
          if (v26 == *((_DWORD *)sub_1001B2798((uint64_t **)(a1 + 240), &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)v50)
                      + 48))
          {
            *(double *)&v55[31] = v23;
            *(_QWORD *)&v55[37] = 0;
            *(_DWORD *)v50 = 0;
            (*(void (**)(uint64_t, _BYTE *, _BYTE *))(*(_QWORD *)a1 + 136))(a1, v50, buf);
            *(_DWORD *)v50 = 2;
            (*(void (**)(uint64_t, _BYTE *, _BYTE *))(*(_QWORD *)a1 + 136))(a1, v50, buf);
            *(_DWORD *)v50 = 1;
            (*(void (**)(uint64_t, _BYTE *, _BYTE *))(*(_QWORD *)a1 + 136))(a1, v50, buf);
            *(_DWORD *)v50 = 3;
            (*(void (**)(uint64_t, _BYTE *, _BYTE *))(*(_QWORD *)a1 + 136))(a1, v50, buf);
            *(_DWORD *)v50 = 4;
            (*(void (**)(uint64_t, _BYTE *, _BYTE *))(*(_QWORD *)a1 + 136))(a1, v50, buf);
            *(_DWORD *)v50 = 39;
            (*(void (**)(uint64_t, _BYTE *, _BYTE *))(*(_QWORD *)a1 + 136))(a1, v50, buf);
          }
        }

        v27 = v61;
        if (v61)
        {
          p_shared_owners = (unint64_t *)&v61->__shared_owners_;
          do
            v29 = __ldaxr(p_shared_owners);
          while (__stlxr(v29 - 1, p_shared_owners));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        if (v60 < 0)
          operator delete(v59);
        v30 = v58;
        if (v58)
        {
          v31 = (unint64_t *)&v58->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v33 = v57;
        if (v57)
        {
          v34 = (unint64_t *)&v57->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
      }
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v7 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "LocationController,#Warning,stopLocation when provider is None", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      *(_WORD *)v50 = 0;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "LocationController,#Warning,stopLocation when provider is None", v50, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationController::stopLocationProvider(LocationProvider)", "%s\n", v8);
      if (v8 != buf)
        free(v8);
    }
  }
}

void sub_1006A590C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1006A5950(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9[2];
  int v10;

  v10 = 1;
  v9[0] = 1;
  v9[1] = sub_10142DEC4(&v10);
  v6 = *(_QWORD *)(a1 + 96);
  v7 = sub_1005EE584();
  v10 = 4;
  v8 = v6;
  sub_1005F9D6C(v7, (unsigned int *)&v10, (int32x4_t *)(a1 + 5124), v9, &v8, a2);
  sub_10003E064(a1, (uint64_t)a2, a3, 0xFFFFFFFFLL);
}

uint64_t sub_1006A59E0(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  unint64_t v4;
  unint64_t v5;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  BOOL v17;
  NSObject *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint8_t *v26;
  int v27;
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  uint8_t buf[4];
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;

  if (*(_DWORD *)(a1 + 232) != 1)
    return 0;
  if (*(double *)(a2 + 904) <= 0.0)
    return 0;
  LODWORD(v4) = *sub_10132F058();
  LODWORD(v5) = sub_10132F058()[1];
  v9 = *(double *)(a3 + 172);
  v10 = sub_100B303DC();
  *(_DWORD *)buf = 1;
  v11 = sub_100B30608(v10, buf) - *(double *)(a2 + 904);
  if (v11 <= 0.0)
    return 0;
  v12 = (double)v4;
  v13 = (double)v5;
  v14 = vabdd_f64(a4, v9);
  v15 = *(double *)(a3 + 116);
  v16 = *(double *)(a2 + 116);
  v17 = v11 < v12 && v14 < v13;
  if (!v17 || v15 >= v16)
    return 0;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214C5A0);
  v20 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    v21 = sub_100B303DC();
    v22 = sub_100B309E0(v21);
    *(_DWORD *)buf = 134350592;
    v42 = v11;
    v43 = 2050;
    v44 = v12;
    v45 = 2050;
    v46 = v14;
    v47 = 2050;
    v48 = v13;
    v49 = 2050;
    v50 = v16;
    v51 = 2050;
    v52 = v15;
    v53 = 2050;
    v54 = v22;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Ignored: GPS warmup,runtime,%{public}.1fs,thresh,%{public}.1fs,age,%{public}.1fs,thresh,%{public}.1fs,gacc,%{public}.1fm,wacc,%{public}fm,propagation_us,%{public}.3f", buf, 0x48u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v23 = qword_1022A0028;
    v24 = sub_100B303DC();
    v27 = 134350592;
    v28 = v11;
    v29 = 2050;
    v30 = v12;
    v31 = 2050;
    v32 = v14;
    v33 = 2050;
    v34 = v13;
    v35 = 2050;
    v36 = v16;
    v37 = 2050;
    v38 = v15;
    v39 = 2050;
    v40 = sub_100B309E0(v24);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 0, "Ignored: GPS warmup,runtime,%{public}.1fs,thresh,%{public}.1fs,age,%{public}.1fs,thresh,%{public}.1fs,gacc,%{public}.1fm,wacc,%{public}fm,propagation_us,%{public}.3f", &v27, 72);
    v26 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::shouldUseWifiWhileGpsConverging(const CFAbsoluteTime, const ProvidersMap::iterator, const ProvidersMap::iterator) const", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  return 1;
}

uint64_t sub_1006A5CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  const char *v33;
  uint8_t *v34;
  NSObject *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  const char *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  _BYTE v69[14];
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  unsigned int v77;
  __int16 v78;
  const char *v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  int v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  double v89;
  __int16 v90;
  double v91;
  __int16 v92;
  uint64_t v93;
  __int16 v94;
  uint64_t v95;
  __int16 v96;
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  __int16 v100;
  uint64_t v101;
  __int16 v102;
  int v103;
  __int16 v104;
  int v105;
  __int16 v106;
  int v107;
  __int16 v108;
  double v109;
  uint8_t buf[4];
  _BYTE v111[14];
  __int16 v112;
  uint64_t v113;
  __int16 v114;
  uint64_t v115;
  __int16 v116;
  uint64_t v117;
  __int16 v118;
  unsigned int v119;
  __int16 v120;
  const char *v121;
  __int16 v122;
  uint64_t v123;
  __int16 v124;
  uint64_t v125;
  __int16 v126;
  int v127;
  __int16 v128;
  uint64_t v129;
  __int16 v130;
  uint64_t v131;
  __int16 v132;
  double v133;
  __int16 v134;
  uint64_t v135;
  __int16 v136;
  uint64_t v137;
  __int16 v138;
  uint64_t v139;
  __int16 v140;
  uint64_t v141;
  __int16 v142;
  uint64_t v143;
  __int16 v144;
  int v145;
  __int16 v146;
  int v147;
  __int16 v148;
  int v149;
  __int16 v150;
  double v151;

  v9 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 288) + 128))(*(_QWORD *)(a1 + 288), a3);
  if ((v9 & 1) != 0)
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 288) + 144))(*(_QWORD *)(a1 + 288), a2);
    *a5 = 1;
    if (*(double *)(a2 + 20) > 0.0)
    {
      if (qword_1022A02F0 != -1)
        dispatch_once(&qword_1022A02F0, &stru_10214C640);
      v10 = qword_1022A02F8;
      if (os_log_type_enabled((os_log_t)qword_1022A02F8, OS_LOG_TYPE_DEBUG))
      {
        v11 = *(_QWORD *)(a2 + 4);
        v47 = *(_QWORD *)(a2 + 12);
        v52 = *(_QWORD *)(a2 + 20);
        v12 = *(_DWORD *)(a2 + 96);
        v50 = sub_10014D1E0(v12);
        v58 = *(_QWORD *)(a2 + 44);
        v60 = *(_QWORD *)(a2 + 60);
        v62 = *(_DWORD *)(a2 + 84);
        v64 = *(_QWORD *)(a2 + 88);
        v66 = *(_QWORD *)(a2 + 76);
        v13 = sub_100B303DC();
        *(_DWORD *)buf = 0;
        v14 = sub_100B30608(v13, buf) - *(double *)(a2 + 76);
        v15 = *(_QWORD *)(a2 + 28);
        v16 = *(_QWORD *)(a2 + 36);
        v17 = *(_QWORD *)(a2 + 52);
        v45 = *(_QWORD *)(a2 + 68);
        v46 = *(_QWORD *)(a3 + 184);
        v48 = *(_DWORD *)(a2 + 128);
        v54 = *(_DWORD *)(a2 + 132);
        v56 = *(_DWORD *)(a2 + 136);
        v18 = sub_100B303DC();
        v19 = sub_100B309E0(v18);
        *(_DWORD *)buf = 136320515;
        *(_QWORD *)v111 = "CL-filtered";
        *(_WORD *)&v111[8] = 1024;
        *(_DWORD *)&v111[10] = 0;
        v112 = 2048;
        v113 = v11;
        v114 = 2048;
        v115 = v47;
        v116 = 2048;
        v117 = v52;
        v118 = 1026;
        v119 = v12;
        v120 = 2082;
        v121 = v50;
        v122 = 2050;
        v123 = v58;
        v124 = 2050;
        v125 = v60;
        v126 = 1026;
        v127 = v62;
        v128 = 2050;
        v129 = v64;
        v130 = 2050;
        v131 = v66;
        v132 = 2050;
        v133 = v14;
        v134 = 2049;
        v135 = v15;
        v136 = 2050;
        v137 = v16;
        v138 = 2050;
        v139 = v17;
        v140 = 2050;
        v141 = v45;
        v142 = 2050;
        v143 = v46;
        v144 = 1026;
        v145 = v48;
        v146 = 1026;
        v147 = v54;
        v148 = 1026;
        v149 = v56;
        v150 = 2050;
        v151 = v19;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%{public}d,%{public}s,Speed,%{public}.2f,Course,%{public}.2f,Confidence,%{public}d,Lifespan,%{public}.3f,LocationTimestamp,%{public}.3f,Age,%{public}.3f,Altitude,%{private}.3f,AltitudeAccuracy,%{public}.3f,SpeedAccuracy,%{public}.3f,CourseAccuracy,%{public}.1f,timestampGps,%{public}.3lf,integrity,%{public}d,referenceFrame,%{public}d,rawReferenceFrame,%{public}d,propagation_us,%{public}.3f", buf, 0xC6u);
      }
      if (sub_1001BFF7C(117, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02F0 != -1)
          dispatch_once(&qword_1022A02F0, &stru_10214C640);
        v67 = qword_1022A02F8;
        v20 = *(_QWORD *)(a2 + 4);
        v21 = *(_QWORD *)(a2 + 12);
        v22 = *(_QWORD *)(a2 + 20);
        v23 = *(_DWORD *)(a2 + 96);
        v24 = sub_10014D1E0(v23);
        v25 = *(_QWORD *)(a2 + 44);
        v26 = *(_QWORD *)(a2 + 60);
        v51 = *(_DWORD *)(a2 + 84);
        v55 = *(_QWORD *)(a2 + 88);
        v59 = *(double *)(a2 + 76);
        v27 = sub_1005FECEC() - v59;
        v49 = *(_QWORD *)(a2 + 28);
        v53 = *(_QWORD *)(a2 + 36);
        v57 = *(_QWORD *)(a2 + 52);
        v61 = *(_QWORD *)(a2 + 68);
        v28 = *(_QWORD *)(a3 + 184);
        v29 = *(_DWORD *)(a2 + 128);
        v30 = *(_DWORD *)(a2 + 132);
        v31 = *(_DWORD *)(a2 + 136);
        v63 = v29;
        v65 = v30;
        v32 = sub_100B303DC();
        v68 = 136320515;
        *(_QWORD *)v69 = "CL-filtered";
        *(_WORD *)&v69[8] = 1024;
        *(_DWORD *)&v69[10] = 0;
        v70 = 2048;
        v71 = v20;
        v72 = 2048;
        v73 = v21;
        v74 = 2048;
        v75 = v22;
        v76 = 1026;
        v77 = v23;
        v78 = 2082;
        v79 = v24;
        v80 = 2050;
        v81 = v25;
        v82 = 2050;
        v83 = v26;
        v84 = 1026;
        v85 = v51;
        v86 = 2050;
        v87 = v55;
        v88 = 2050;
        v89 = v59;
        v90 = 2050;
        v91 = v27;
        v92 = 2049;
        v93 = v49;
        v94 = 2050;
        v95 = v53;
        v96 = 2050;
        v97 = v57;
        v98 = 2050;
        v99 = v61;
        v100 = 2050;
        v101 = v28;
        v102 = 1026;
        v103 = v63;
        v104 = 1026;
        v105 = v65;
        v106 = 1026;
        v107 = v31;
        v108 = 2050;
        v109 = sub_100B309E0(v32);
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v67, 2, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%{public}d,%{public}s,Speed,%{public}.2f,Course,%{public}.2f,Confidence,%{public}d,Lifespan,%{public}.3f,LocationTimestamp,%{public}.3f,Age,%{public}.3f,Altitude,%{private}.3f,AltitudeAccuracy,%{public}.3f,SpeedAccuracy,%{public}.3f,CourseAccuracy,%{public}.1f,timestampGps,%{public}.3lf,integrity,%{public}d,referenceFrame,%{public}d,rawReferenceFrame,%{public}d,propagation_us,%{public}.3f", &v68, 198);
        v34 = (uint8_t *)v33;
        sub_100512490("LOCATION", 1, 0, 2, "BOOL CLLocationController::updateLegacyLCLocationFilter(CLDaemonLocation &, const CLLocationProvider_Type::NotificationData &, const LocationProvider &, BOOL &)", "%s\n", v33);
        if (v34 != buf)
          free(v34);
      }
    }
  }
  else if (*(_BYTE *)(a1 + 666))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v35 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v36 = *(_DWORD *)(a3 + 96);
      v37 = *(_QWORD *)(a3 + 100);
      v38 = *(_QWORD *)(a3 + 108);
      *(_DWORD *)buf = 67240705;
      *(_DWORD *)v111 = v36;
      *(_WORD *)&v111[4] = 2049;
      *(_QWORD *)&v111[6] = v37;
      v112 = 2049;
      v113 = v38;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "location rejected by KF,%{public}d,lat,%{private}.7lf,lon,%{private}.7lf", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v40 = *(_DWORD *)(a3 + 96);
      v41 = *(_QWORD *)(a3 + 100);
      v42 = *(_QWORD *)(a3 + 108);
      v68 = 67240705;
      *(_DWORD *)v69 = v40;
      *(_WORD *)&v69[4] = 2049;
      *(_QWORD *)&v69[6] = v41;
      v70 = 2049;
      v71 = v42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "location rejected by KF,%{public}d,lat,%{private}.7lf,lon,%{private}.7lf", &v68, 28);
      v44 = (uint8_t *)v43;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::updateLegacyLCLocationFilter(CLDaemonLocation &, const CLLocationProvider_Type::NotificationData &, const LocationProvider &, BOOL &)", "%s\n", v43);
      if (v44 != buf)
        free(v44);
    }
    *a5 = 0;
  }
  return v9;
}

uint64_t sub_1006A6370(uint64_t a1, unsigned int a2)
{
  if (a2 > 0xE)
    return 1;
  else
    return dword_101BBB9FC[a2];
}

BOOL sub_1006A6390(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  int v5;
  unsigned int v11;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int *v23;
  int v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  NSObject *v29;
  _BOOL8 result;
  uint64_t v31;
  const char *v32;
  _BOOL4 v33;
  int v34;
  uint64_t v35;
  double v36;
  double v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int v42;
  int v43;
  NSObject *v44;
  uint64_t v45;
  unsigned int v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  NSObject *v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  NSObject *v64;
  int v65;
  int v66;
  const char *v67;
  char *v68;
  NSObject *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t **v72;
  _QWORD *v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t **v79;
  _QWORD *v80;
  uint64_t v81;
  double v82;
  NSObject *v83;
  uint64_t **v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t **v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  uint64_t **v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t **v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  const char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  double v119;
  uint64_t v120;
  int v121;
  int v122;
  int v123;
  uint64_t v124;
  double v125;
  const char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  const char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  double v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  uint64_t **v149;
  uint64_t v150;
  int v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  _BYTE v156[12];
  __int16 v157;
  _BYTE v158[50];
  __int16 v159;
  uint64_t v160;
  __int16 v161;
  uint64_t v162;
  __int16 v163;
  int v164;
  __int16 v165;
  uint64_t v166;
  __int16 v167;
  double v168;
  __int16 v169;
  double v170;
  __int16 v171;
  uint64_t v172;
  __int16 v173;
  uint64_t v174;
  __int16 v175;
  uint64_t v176;
  __int16 v177;
  uint64_t v178;
  __int16 v179;
  uint64_t v180;
  __int16 v181;
  int v182;
  __int16 v183;
  int v184;
  __int16 v185;
  int v186;
  __int16 v187;
  double v188;
  _BYTE buf[12];
  __int16 v190;
  _BYTE v191[50];
  __int16 v192;
  uint64_t v193;
  __int16 v194;
  uint64_t v195;
  __int16 v196;
  int v197;
  __int16 v198;
  uint64_t v199;
  __int16 v200;
  uint64_t v201;
  __int16 v202;
  double v203;
  __int16 v204;
  uint64_t v205;
  __int16 v206;
  uint64_t v207;
  __int16 v208;
  uint64_t v209;
  __int16 v210;
  uint64_t v211;
  __int16 v212;
  uint64_t v213;
  __int16 v214;
  int v215;
  __int16 v216;
  int v217;
  __int16 v218;
  int v219;
  __int16 v220;
  double v221;

  v5 = *a4;
  *a4 = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_BYTE *)(a2 + 152) = 0;
  *(_DWORD *)a2 = 0xFFFF;
  *(_QWORD *)(a2 + 12) = 0;
  *(_QWORD *)(a2 + 4) = 0;
  *(_OWORD *)(a2 + 20) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a2 + 36) = _Q0;
  *(_OWORD *)(a2 + 52) = _Q0;
  *(_OWORD *)(a2 + 68) = _Q0;
  *(_DWORD *)(a2 + 84) = 0;
  *(_QWORD *)(a2 + 88) = 0xBFF0000000000000;
  *(_QWORD *)(a2 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a2 + 124) = 0x7FFFFFFF;
  v11 = *(_DWORD *)(a3 + 96);
  if (!v11)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v29 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "#Warning, LCFusion, not notifying clients when provider type is Unknown", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v31 = qword_1022A0028;
      *(_WORD *)v156 = 0;
      LODWORD(v132) = 2;
      v32 = "#Warning, LCFusion, not notifying clients when provider type is Unknown";
      goto LABEL_77;
    }
    return result;
  }
  v15 = sub_1006A6370(a1, v11);
  v155 = v15;
  v17 = a1 + 248;
  v16 = *(_QWORD *)(a1 + 248);
  if (!v16)
    goto LABEL_12;
  v18 = a1 + 248;
  v19 = *(_QWORD *)(a1 + 248);
  do
  {
    v20 = *(_DWORD *)(v19 + 32);
    v21 = v20 < v15;
    if (v20 >= v15)
      v22 = (uint64_t *)v19;
    else
      v22 = (uint64_t *)(v19 + 8);
    if (!v21)
      v18 = v19;
    v19 = *v22;
  }
  while (*v22);
  if (v18 == v17 || v15 < *(_DWORD *)(v18 + 32))
LABEL_12:
    v18 = a1 + 248;
  v152 = v5;
  v23 = (int *)(a1 + 232);
  if (!v16)
  {
    v24 = *v23;
LABEL_33:
    v25 = a1 + 248;
    goto LABEL_34;
  }
  v24 = *v23;
  v25 = a1 + 248;
  do
  {
    v26 = *(_DWORD *)(v16 + 32);
    v27 = v26 < v24;
    if (v26 >= v24)
      v28 = (uint64_t *)v16;
    else
      v28 = (uint64_t *)(v16 + 8);
    if (!v27)
      v25 = v16;
    v16 = *v28;
  }
  while (*v28);
  if (v25 == v17 || v24 < *(_DWORD *)(v25 + 32))
    goto LABEL_33;
LABEL_34:
  v33 = 0;
  if (v24 && v15 != v24)
  {
    if (*(_BYTE *)(v18 + 903))
    {
      v33 = 0;
      goto LABEL_49;
    }
    v149 = (uint64_t **)(a1 + 240);
    v34 = *(char *)(v18 + 900);
    if (v34 <= *(char *)(v25 + 900))
    {
      v35 = sub_100B303DC();
      *(_DWORD *)buf = 0;
      v36 = sub_100B30608(v35, buf) - *(double *)(v25 + 172);
      v37 = *(double *)(v25 + 184);
      v33 = v36 < v37;
      if (v36 < v37)
      {
        if (v155 != 1)
        {
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10214C5A0);
          v83 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
          {
            *(_QWORD *)buf = &v155;
            v84 = sub_1001B2798(v149, &v155, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
            v85 = v84 + 6;
            if (*((char *)v84 + 71) < 0)
              v85 = (_QWORD *)*v85;
            v86 = *(_QWORD *)(v18 + 100);
            v87 = *(_QWORD *)(v18 + 108);
            *(_QWORD *)buf = a1 + 232;
            v88 = sub_1001B2798(v149, v23, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
            v89 = v88 + 6;
            if (*((char *)v88 + 71) < 0)
              v89 = (_QWORD *)*v89;
            v90 = *(_QWORD *)(v18 + 172);
            v91 = sub_100B303DC();
            v92 = sub_100B309E0(v91);
            *(_DWORD *)buf = 136447491;
            *(_QWORD *)&buf[4] = v85;
            v190 = 2049;
            *(_QWORD *)v191 = v86;
            *(_WORD *)&v191[8] = 2049;
            *(_QWORD *)&v191[10] = v87;
            *(_WORD *)&v191[18] = 2082;
            *(_QWORD *)&v191[20] = v89;
            *(_WORD *)&v191[28] = 2050;
            *(_QWORD *)&v191[30] = v90;
            *(_WORD *)&v191[38] = 2050;
            *(double *)&v191[40] = v92;
            _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEBUG, "LCFusion,got non-active location provider,%{public}s,lat,%{private}.7f,lon,%{private}.7f,ignoring,in favor of,%{public}s,mct,%{public}.3f,propagation_us,%{public}.3f", buf, 0x3Eu);
          }
          result = sub_1001BFF7C(115, 2);
          if (!result)
            return result;
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10214C5A0);
          v76 = qword_1022A0028;
          *(_QWORD *)v156 = &v155;
          v93 = sub_1001B2798(v149, &v155, (uint64_t)&unk_101B9EB60, (_DWORD **)v156);
          v94 = v93 + 6;
          if (*((char *)v93 + 71) < 0)
            v94 = (_QWORD *)*v94;
          v95 = *(_QWORD *)(v18 + 100);
          v96 = *(_QWORD *)(v18 + 108);
          *(_QWORD *)v156 = a1 + 232;
          v97 = sub_1001B2798(v149, v23, (uint64_t)&unk_101B9EB60, (_DWORD **)v156);
          v98 = v97 + 6;
          if (*((char *)v97 + 71) < 0)
            v98 = (_QWORD *)*v98;
          v99 = *(_QWORD *)(v18 + 172);
          v100 = sub_100B303DC();
          v101 = sub_100B309E0(v100);
          *(_DWORD *)v156 = 136447491;
          *(_QWORD *)&v156[4] = v94;
          v157 = 2049;
          *(_QWORD *)v158 = v95;
          *(_WORD *)&v158[8] = 2049;
          *(_QWORD *)&v158[10] = v96;
          *(_WORD *)&v158[18] = 2082;
          *(_QWORD *)&v158[20] = v98;
          *(_WORD *)&v158[28] = 2050;
          *(_QWORD *)&v158[30] = v99;
          *(_WORD *)&v158[38] = 2050;
          *(double *)&v158[40] = v101;
          LODWORD(v132) = 62;
          v32 = "LCFusion,got non-active location provider,%{public}s,lat,%{private}.7f,lon,%{private}.7f,ignoring,in fav"
                "or of,%{public}s,mct,%{public}.3f,propagation_us,%{public}.3f";
          goto LABEL_109;
        }
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v38 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v39 = *(_QWORD *)(v18 + 100);
          v40 = *(_QWORD *)(v18 + 108);
          *(_DWORD *)buf = 134283777;
          *(_QWORD *)&buf[4] = v39;
          v190 = 2049;
          *(_QWORD *)v191 = v40;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "LCFusion, got non-active wifi lat,%{private}.7f,lon,%{private}.7f, Consuming in LCFusion ", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10214C5A0);
          v128 = *(_QWORD *)(v18 + 100);
          v129 = *(_QWORD *)(v18 + 108);
          *(_DWORD *)v156 = 134283777;
          *(_QWORD *)&v156[4] = v128;
          v157 = 2049;
          *(_QWORD *)v158 = v129;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "LCFusion, got non-active wifi lat,%{private}.7f,lon,%{private}.7f, Consuming in LCFusion ", v156, 22);
          v131 = (char *)v130;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::updateFusionLCLocationFilter(CLDaemonLocation &, const CLLocationProvider_Type::NotificationData &, BOOL &)", "%s\n", v130);
          if (v131 != buf)
            free(v131);
        }
      }
      LOBYTE(v34) = *(_BYTE *)(v18 + 900);
    }
    else
    {
      v33 = 0;
    }
    if ((char)v34 > 0)
      goto LABEL_49;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v69 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v70 = *(_QWORD *)(v18 + 100);
      v71 = *(_QWORD *)(v18 + 108);
      *(_QWORD *)buf = &v155;
      v72 = sub_1001B2798(v149, &v155, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v73 = v72 + 6;
      if (*((char *)v72 + 71) < 0)
        v73 = (_QWORD *)*v73;
      v74 = sub_100B303DC();
      v75 = sub_100B309E0(v74);
      *(_DWORD *)buf = 134284291;
      *(_QWORD *)&buf[4] = v70;
      v190 = 2049;
      *(_QWORD *)v191 = v71;
      *(_WORD *)&v191[8] = 2082;
      *(_QWORD *)&v191[10] = v73;
      *(_WORD *)&v191[18] = 2050;
      *(double *)&v191[20] = v75;
      _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "LCFusion Got,lat,%{private}.7f,lon,%{private}.7f,for non-active location provider,%{public}s,ignoring coarse granularity,propagation_us,%{public}.3f", buf, 0x2Au);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v76 = qword_1022A0028;
    v77 = *(_QWORD *)(v18 + 100);
    v78 = *(_QWORD *)(v18 + 108);
    *(_QWORD *)v156 = &v155;
    v79 = sub_1001B2798(v149, &v155, (uint64_t)&unk_101B9EB60, (_DWORD **)v156);
    v80 = v79 + 6;
    if (*((char *)v79 + 71) < 0)
      v80 = (_QWORD *)*v80;
    v81 = sub_100B303DC();
    v82 = sub_100B309E0(v81);
    *(_DWORD *)v156 = 134284291;
    *(_QWORD *)&v156[4] = v77;
    v157 = 2049;
    *(_QWORD *)v158 = v78;
    *(_WORD *)&v158[8] = 2082;
    *(_QWORD *)&v158[10] = v80;
    *(_WORD *)&v158[18] = 2050;
    *(double *)&v158[20] = v82;
    LODWORD(v132) = 42;
    v32 = "LCFusion Got,lat,%{private}.7f,lon,%{private}.7f,for non-active location provider,%{public}s,ignoring coarse g"
          "ranularity,propagation_us,%{public}.3f";
LABEL_109:
    v31 = v76;
LABEL_77:
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v31, 2, v32, v156, v132);
    v68 = (char *)v67;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::updateFusionLCLocationFilter(CLDaemonLocation &, const CLLocationProvider_Type::NotificationData &, BOOL &)", "%s\n", v67);
    if (v68 != buf)
      free(v68);
    return 0;
  }
LABEL_49:
  v41 = v152;
  (*(void (**)(_QWORD, BOOL))(**(_QWORD **)(a1 + 288) + 448))(*(_QWORD *)(a1 + 288), v152 != 0);
  v42 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 288) + 136))(*(_QWORD *)(a1 + 288), a3);
  v43 = v42;
  if (!*(_BYTE *)(a1 + 674) || v18 == v17 || *(_BYTE *)(v18 + 903))
  {
    if (((v33 | v42 ^ 1) & 1) != 0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v44 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        v45 = *(_QWORD *)(a3 + 76);
        v46 = *(_DWORD *)(a3 + 96);
        v47 = sub_10014D1E0(v46);
        v48 = *(_QWORD *)(a3 + 4);
        v49 = *(_QWORD *)(a3 + 12);
        v50 = *(_QWORD *)(a3 + 20);
        *(_DWORD *)buf = 134350339;
        *(_QWORD *)&buf[4] = v45;
        v190 = 1026;
        *(_DWORD *)v191 = v46;
        *(_WORD *)&v191[4] = 2082;
        *(_QWORD *)&v191[6] = v47;
        *(_WORD *)&v191[14] = 2049;
        *(_QWORD *)&v191[16] = v48;
        *(_WORD *)&v191[24] = 2049;
        *(_QWORD *)&v191[26] = v49;
        *(_WORD *)&v191[34] = 2050;
        *(_QWORD *)&v191[36] = v50;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "location rejected by LCFusion,iosTime,%{public}.3f,type,%{public}d,%{public}s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f", buf, 0x3Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v102 = qword_1022A0028;
        v103 = *(_QWORD *)(a3 + 76);
        v104 = *(_DWORD *)(a3 + 96);
        v105 = sub_10014D1E0(v104);
        v106 = *(_QWORD *)(a3 + 4);
        v107 = *(_QWORD *)(a3 + 12);
        v108 = *(_QWORD *)(a3 + 20);
        *(_DWORD *)v156 = 134350339;
        *(_QWORD *)&v156[4] = v103;
        v157 = 1026;
        *(_DWORD *)v158 = v104;
        *(_WORD *)&v158[4] = 2082;
        *(_QWORD *)&v158[6] = v105;
        *(_WORD *)&v158[14] = 2049;
        *(_QWORD *)&v158[16] = v106;
        *(_WORD *)&v158[24] = 2049;
        *(_QWORD *)&v158[26] = v107;
        *(_WORD *)&v158[34] = 2050;
        *(_QWORD *)&v158[36] = v108;
        LODWORD(v132) = 58;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v102, 1, "location rejected by LCFusion,iosTime,%{public}.3f,type,%{public}d,%{public}s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f", v156, v132);
        v110 = (char *)v109;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::updateFusionLCLocationFilter(CLDaemonLocation &, const CLLocationProvider_Type::NotificationData &, BOOL &)", "%s\n", v109);
        if (v110 != buf)
          free(v110);
      }
      v51 = 0;
      v41 = v152;
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 288) + 144))(*(_QWORD *)(a1 + 288), a2);
      v51 = 1;
    }
    *a4 = v51;
    if (!*(_BYTE *)(a1 + 666))
      v51 = v41;
    *a4 = v51;
    if (v43)
    {
      if (qword_1022A02F0 != -1)
        dispatch_once(&qword_1022A02F0, &stru_10214C640);
      v52 = qword_1022A02F8;
      if (os_log_type_enabled((os_log_t)qword_1022A02F8, OS_LOG_TYPE_DEBUG))
      {
        v53 = *(_QWORD *)(a2 + 4);
        v133 = *(_QWORD *)(a2 + 12);
        v137 = *(_QWORD *)(a2 + 20);
        v54 = *(_DWORD *)(a2 + 96);
        v135 = sub_10014D1E0(v54);
        v143 = *(_QWORD *)(a2 + 44);
        v145 = *(_QWORD *)(a2 + 60);
        v147 = *(_DWORD *)(a2 + 84);
        v150 = *(_QWORD *)(a2 + 88);
        v153 = *(_QWORD *)(a2 + 76);
        v55 = sub_100B303DC();
        *(_DWORD *)buf = 0;
        v56 = sub_100B30608(v55, buf) - *(double *)(a2 + 76);
        v57 = *(_QWORD *)(a2 + 28);
        v58 = *(_QWORD *)(a2 + 36);
        v59 = *(_QWORD *)(a2 + 52);
        v60 = *(_QWORD *)(a2 + 68);
        v61 = *(_QWORD *)(a3 + 184);
        v134 = *(_DWORD *)(a2 + 128);
        v139 = *(_DWORD *)(a2 + 132);
        v141 = *(_DWORD *)(a2 + 136);
        v62 = sub_100B303DC();
        v63 = sub_100B309E0(v62);
        *(_DWORD *)buf = 136320515;
        *(_QWORD *)&buf[4] = "CL-filtered";
        v190 = 1024;
        *(_DWORD *)v191 = 0;
        *(_WORD *)&v191[4] = 2048;
        *(_QWORD *)&v191[6] = v53;
        *(_WORD *)&v191[14] = 2048;
        *(_QWORD *)&v191[16] = v133;
        *(_WORD *)&v191[24] = 2048;
        *(_QWORD *)&v191[26] = v137;
        *(_WORD *)&v191[34] = 1026;
        *(_DWORD *)&v191[36] = v54;
        *(_WORD *)&v191[40] = 2082;
        *(_QWORD *)&v191[42] = v135;
        v192 = 2050;
        v193 = v143;
        v194 = 2050;
        v195 = v145;
        v196 = 1026;
        v197 = v147;
        v198 = 2050;
        v199 = v150;
        v200 = 2050;
        v201 = v153;
        v202 = 2050;
        v203 = v56;
        v204 = 2049;
        v205 = v57;
        v206 = 2050;
        v207 = v58;
        v208 = 2050;
        v209 = v59;
        v210 = 2050;
        v211 = v60;
        v212 = 2050;
        v213 = v61;
        v214 = 1026;
        v215 = v134;
        v216 = 1026;
        v217 = v139;
        v218 = 1026;
        v219 = v141;
        v220 = 2050;
        v221 = v63;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%{public}d,%{public}s,Speed,%{public}.2f,Course,%{public}.2f,Confidence,%{public}d,Lifespan,%{public}.3f,LocationTimestamp,%{public}.3f,Age,%{public}.3f,Altitude,%{private}.3f,AltitudeAccuracy,%{public}.3f,SpeedAccuracy,%{public}.3f,CourseAccuracy,%{public}.1f,timestampGps,%{public}.3lf,integrity,%{public}d,referenceFrame,%{public}d,rawReferenceFrame,%{public}d,propagation_us,%{public}.3f", buf, 0xC6u);
      }
      if (sub_1001BFF7C(117, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02F0 != -1)
          dispatch_once(&qword_1022A02F0, &stru_10214C640);
        v154 = qword_1022A02F8;
        v111 = *(_QWORD *)(a2 + 4);
        v112 = *(_QWORD *)(a2 + 12);
        v113 = *(_QWORD *)(a2 + 20);
        v114 = *(_DWORD *)(a2 + 96);
        v115 = sub_10014D1E0(v114);
        v116 = *(_QWORD *)(a2 + 44);
        v117 = *(_QWORD *)(a2 + 60);
        v118 = *(_DWORD *)(a2 + 84);
        v140 = *(_QWORD *)(a2 + 88);
        v144 = *(double *)(a2 + 76);
        v119 = sub_1005FECEC() - v144;
        v136 = *(_QWORD *)(a2 + 28);
        v138 = *(_QWORD *)(a2 + 36);
        v142 = *(_QWORD *)(a2 + 52);
        v146 = *(_QWORD *)(a2 + 68);
        v120 = *(_QWORD *)(a3 + 184);
        v121 = *(_DWORD *)(a2 + 128);
        v122 = *(_DWORD *)(a2 + 132);
        v123 = *(_DWORD *)(a2 + 136);
        v148 = v121;
        v151 = v122;
        v124 = sub_100B303DC();
        v125 = sub_100B309E0(v124);
        *(_DWORD *)v156 = 136320515;
        *(_QWORD *)&v156[4] = "CL-filtered";
        v157 = 1024;
        *(_DWORD *)v158 = 0;
        *(_WORD *)&v158[4] = 2048;
        *(_QWORD *)&v158[6] = v111;
        *(_WORD *)&v158[14] = 2048;
        *(_QWORD *)&v158[16] = v112;
        *(_WORD *)&v158[24] = 2048;
        *(_QWORD *)&v158[26] = v113;
        *(_WORD *)&v158[34] = 1026;
        *(_DWORD *)&v158[36] = v114;
        *(_WORD *)&v158[40] = 2082;
        *(_QWORD *)&v158[42] = v115;
        v159 = 2050;
        v160 = v116;
        v161 = 2050;
        v162 = v117;
        v163 = 1026;
        v164 = v118;
        v165 = 2050;
        v166 = v140;
        v167 = 2050;
        v168 = v144;
        v169 = 2050;
        v170 = v119;
        v171 = 2049;
        v172 = v136;
        v173 = 2050;
        v174 = v138;
        v175 = 2050;
        v176 = v142;
        v177 = 2050;
        v178 = v146;
        v179 = 2050;
        v180 = v120;
        v181 = 1026;
        v182 = v148;
        v183 = 1026;
        v184 = v151;
        v185 = 1026;
        v186 = v123;
        v187 = 2050;
        v188 = v125;
        LODWORD(v132) = 198;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v154, 2, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%{public}d,%{public}s,Speed,%{public}.2f,Course,%{public}.2f,Confidence,%{public}d,Lifespan,%{public}.3f,LocationTimestamp,%{public}.3f,Age,%{public}.3f,Altitude,%{private}.3f,AltitudeAccuracy,%{public}.3f,SpeedAccuracy,%{public}.3f,CourseAccuracy,%{public}.1f,timestampGps,%{public}.3lf,integrity,%{public}d,referenceFrame,%{public}d,rawReferenceFrame,%{public}d,propagation_us,%{public}.3f", v156, v132);
        v127 = (char *)v126;
        sub_100512490("LOCATION", 1, 0, 2, "BOOL CLLocationController::updateFusionLCLocationFilter(CLDaemonLocation &, const CLLocationProvider_Type::NotificationData &, BOOL &)", "%s\n", v126);
        if (v127 != buf)
          free(v127);
      }
      return 1;
    }
    return 0;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214C5A0);
  v64 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v65 = *(unsigned __int8 *)(a1 + 674);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v65;
    _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "#Warning, LCFusion, not notifying clients when device is sleeping,%d", buf, 8u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v31 = qword_1022A0028;
    v66 = *(unsigned __int8 *)(a1 + 674);
    *(_DWORD *)v156 = 67109120;
    *(_DWORD *)&v156[4] = v66;
    LODWORD(v132) = 8;
    v32 = "#Warning, LCFusion, not notifying clients when device is sleeping,%d";
    goto LABEL_77;
  }
  return result;
}

NSDictionary *sub_1006A7440(uint64_t a1)
{
  NSString *v1;
  _QWORD v3[3];
  _QWORD v4[3];

  v4[0] = CFSTR("client");
  v3[0] = CFSTR("provider");
  v3[1] = CFSTR("flow");
  v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a1 + 32));
  v3[2] = CFSTR("island");
  v4[1] = v1;
  v4[2] = CFSTR("null");
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 3);
}

NSDictionary *sub_1006A74E8(uint64_t a1)
{
  NSString *v1;
  _QWORD v3[3];
  _QWORD v4[3];

  v4[0] = CFSTR("client");
  v3[0] = CFSTR("provider");
  v3[1] = CFSTR("flow");
  v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a1 + 32));
  v3[2] = CFSTR("island");
  v4[1] = v1;
  v4[2] = CFSTR("sentinel");
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 3);
}

id sub_1006A7590(uint64_t *a1)
{
  id v1;
  _QWORD v3[4];
  _QWORD v4[3];
  void **v5;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768;
  v3[2] = sub_1006AB614;
  v3[3] = &unk_10214CB00;
  memset(v4, 0, sizeof(v4));
  sub_1006AB68C(v4, *a1, a1[1], 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3));
  v1 = objc_msgSend(v3, "copy");
  v5 = (void **)v4;
  sub_1006AB5A0(&v5);
  return v1;
}

void sub_1006A762C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = v1;
  sub_1006AB5A0((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_1006A7644(uint64_t a1)
{
  uint64_t v2;
  double v3;
  uint64_t **v4;
  int *v5;
  double v6;
  double v7;
  NSObject *v8;
  uint64_t v9;
  double v10;
  uint64_t **v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;
  int v17;
  double v18;
  __int16 v19;
  double v20;
  _BYTE buf[12];
  __int16 v22;
  double v23;

  v2 = sub_100B303DC();
  *(_DWORD *)buf = 1;
  v3 = sub_100B30608(v2, buf);
  v4 = (uint64_t **)(a1 + 240);
  v5 = (int *)(a1 + 320);
  *(_QWORD *)buf = v5;
  v6 = *((double *)sub_1001B2798(v4, v5, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 75);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214C5A0);
  v7 = v3 - v6;
  v8 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v9 = sub_100B303DC();
    v10 = sub_100B309E0(v9);
    *(_DWORD *)buf = 134218240;
    *(double *)&buf[4] = v7;
    v22 = 2050;
    v23 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "LocationController,isWiFiLocationProviderValidAndFresh,age,%.3f,propagation_us,%{public}.3f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v13 = qword_1022A0028;
    v14 = sub_100B303DC();
    v17 = 134218240;
    v18 = v7;
    v19 = 2050;
    v20 = sub_100B309E0(v14);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 2, "LocationController,isWiFiLocationProviderValidAndFresh,age,%.3f,propagation_us,%{public}.3f", &v17, 22);
    v16 = (char *)v15;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::isWiFiLocationProviderValidAndFresh()", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  *(_QWORD *)buf = v5;
  v11 = sub_1001B2798(v4, v5, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  result = sub_100219C74((uint64_t)(v11 + 12));
  if ((_DWORD)result)
  {
    if (v7 >= *((double *)sub_10012A448() + 55))
    {
      return 0;
    }
    else
    {
      *(_QWORD *)buf = v5;
      return *(double *)((char *)sub_1001B2798(v4, v5, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 132) < 20.0;
    }
  }
  return result;
}

uint64_t **sub_1006A78DC(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t **result;
  _DWORD *v7;

  *(_OWORD *)(a3 + 704) = *(_OWORD *)(a3 + 28);
  *(double *)(a3 + 720) = *(float *)(a3 + 476);
  *(_DWORD *)(a3 + 728) = *(_DWORD *)(a3 + 472);
  v5 = (uint64_t **)(a1 + 240);
  v7 = a2;
  *(_QWORD *)(a3 + 28) = *(uint64_t **)((char *)sub_1001B2798((uint64_t **)(a1 + 240), a2, (uint64_t)&unk_101B9EB60, &v7)
                                     + 124);
  v7 = a2;
  *(_QWORD *)(a3 + 36) = *(uint64_t **)((char *)sub_1001B2798(v5, a2, (uint64_t)&unk_101B9EB60, &v7) + 132);
  v7 = a2;
  *(_DWORD *)(a3 + 476) = *((_DWORD *)sub_1001B2798(v5, a2, (uint64_t)&unk_101B9EB60, &v7) + 143);
  v7 = a2;
  result = sub_1001B2798(v5, a2, (uint64_t)&unk_101B9EB60, &v7);
  *(_DWORD *)(a3 + 472) = *((_DWORD *)result + 142);
  return result;
}

uint64_t sub_1006A79C0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int *v5;
  uint64_t v7;
  int *v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  int *v12;
  uint8_t buf[4];
  int *v14;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214C5A0);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v5 = *(int **)(a2 + 800);
    if (v5)
      v5 = (int *)sub_10104BD1C(v5);
    *(_DWORD *)buf = 134349056;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "GPSODOM,Batched locations obtained,size,%{public}zu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v7 = qword_1022A0028;
    v8 = *(int **)(a2 + 800);
    if (v8)
      v8 = (int *)sub_10104BD1C(v8);
    v11 = 134349056;
    v12 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 1, "GPSODOM,Batched locations obtained,size,%{public}zu", &v11, 12);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLLocationController::onRhythmicGnssBatchedLocationsUpdate(const CLLocationProvider_Type::NotificationData &)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  *(_DWORD *)buf = 23;
  return (*(uint64_t (**)(uint64_t, uint8_t *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, a2, 1, 0xFFFFFFFFLL, 0);
}

void sub_1006A7BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  double v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 304);
  if (v2)
  {
    if (*(_DWORD *)(a2 + 1456) == 1)
      v3 = *(_BYTE *)(a2 + 1472) & (*(_DWORD *)(a2 + 1448) == 1);
    else
      v3 = 0;
    v4 = sub_100B303DC();
    v6 = 1;
    v5 = sub_100B30608(v4, &v6);
    sub_100F6A96C(v2, v3, v5);
  }
}

uint64_t sub_1006A7C1C(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _BYTE v9[156];

  if (*(_QWORD *)(a1 + 1608) && (v4 = sub_10104BD1C(a2)) != 0)
  {
    v5 = v4;
    v6 = 0;
    v7 = 0;
    do
      v7 |= objc_msgSend(*(id *)(a1 + 1608), "feedLocation:", v9, sub_10104B598((uint64_t)a2, v6++, (uint64_t)v9).n128_f64[0]);
    while (v5 != v6);
  }
  else
  {
    LOBYTE(v7) = 0;
  }
  return v7 & 1;
}

void sub_1006A7CAC(uint64_t a1, int a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int32x4_t v11[2];
  int v12;

  v10 = a2;
  v7 = sub_100B303DC();
  sub_10010F434((uint64_t)v11);
  sub_100B30A14(v7, v11[0].i64);
  v12 = 13;
  v11[0].i32[0] = 13;
  v11[0].i32[1] = sub_10142DEC4(&v12);
  v8 = sub_1005EE584();
  v12 = 4;
  sub_1005FA6E8(v8, (unsigned int *)&v12, v11, (int *)(a1 + 5124), &v10, a3, a4);
  sub_1001426CC(a1, *(_DWORD *)(a1 + 320), v9, (unsigned int *)a3, a4);
  sub_100DC78CC((unsigned __int8 *)(a1 + 760), a4);
  sub_100400108(a1 + 768, a3, a4);
}

void sub_1006A7D74(uint64_t a1, int a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int32x4_t v11[2];
  int v12;

  v10 = a2;
  v7 = sub_100B303DC();
  sub_10010F434((uint64_t)v11);
  sub_100B30A14(v7, v11[0].i64);
  v12 = 14;
  v11[0].i32[0] = 14;
  v11[0].i32[1] = sub_10142DEC4(&v12);
  v8 = sub_1005EE584();
  v12 = 4;
  sub_1005FA6E8(v8, (unsigned int *)&v12, v11, (int *)(a1 + 5124), &v10, a3, a4);
  sub_1001426CC(a1, *(_DWORD *)(a1 + 324), v9, (unsigned int *)a3, a4);
}

void sub_1006A7E20(uint64_t a1, unsigned int *a2)
{
  NSObject *v3;
  int v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 288) + 280))(*(_QWORD *)(a1 + 288), *a2);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214C5A0);
  v3 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v4 = *a2;
    *(_DWORD *)buf = 67240192;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Got notification signal quality,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v5 = *a2;
    v8[0] = 67240192;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "Got notification signal quality,%{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLLocationController::onGpsSignalQualityNotification(const CLLocationProvider_Type::SignalQuality &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
}

void sub_1006A7FE4(uint64_t a1, int a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int32x4_t v11[2];
  int v12;

  v10 = a2;
  v7 = sub_100B303DC();
  sub_10010F434((uint64_t)v11);
  sub_100B30A14(v7, v11[0].i64);
  v12 = 19;
  v11[0].i32[0] = 19;
  v11[0].i32[1] = sub_10142DEC4(&v12);
  v8 = sub_1005EE584();
  v12 = 4;
  sub_1005FA6E8(v8, (unsigned int *)&v12, v11, (int *)(a1 + 5124), &v10, a3, a4);
  sub_1001426CC(a1, *(_DWORD *)(a1 + 340), v9, (unsigned int *)a3, a4);
}

void sub_1006A8090(uint64_t a1, unsigned int a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int32x4_t v10[2];
  int v11;

  v9 = a2;
  v7 = sub_100B303DC();
  sub_10010F434((uint64_t)v10);
  sub_100B30A14(v7, v10[0].i64);
  v11 = 20;
  v10[0].i32[0] = 20;
  v10[0].i32[1] = sub_10142DEC4(&v11);
  v8 = sub_1005EE584();
  v11 = 4;
  sub_1005FA6E8(v8, (unsigned int *)&v11, v10, (int *)(a1 + 5124), (int *)&v9, a3, a4);
  sub_100988CF4(a1 + 352, v9, a3, a4);
}

uint64_t sub_1006A813C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD *v5;
  uint64_t **v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t result;
  const char *v15;
  uint8_t *v16;
  __int128 v17;
  _DWORD v18[4];
  uint8_t buf[8];

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214C5A0);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Setting simulation to %{public}d for all location providers", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v18[0] = 67240192;
    v18[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "Setting simulation to %{public}d for all location providers", v18, 8);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationController::setSimulationEnabled(BOOL)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  v5 = *(_QWORD **)(a1 + 240);
  if (v5 != (_QWORD *)(a1 + 248))
  {
    __asm { FMOV            V0.2D, #-1.0 }
    v17 = _Q0;
    do
    {
      if (*((_DWORD *)v5 + 8))
      {
        *((_DWORD *)v5 + 24) = 0xFFFF;
        *(_QWORD *)((char *)v5 + 108) = 0;
        *(_QWORD *)((char *)v5 + 100) = 0;
        *(_OWORD *)((char *)v5 + 116) = xmmword_101BAFC90;
        *(_OWORD *)((char *)v5 + 132) = v17;
        *(_OWORD *)((char *)v5 + 148) = v17;
        *(_OWORD *)((char *)v5 + 164) = v17;
        *((_DWORD *)v5 + 45) = 0;
        v5[24] = 0;
        v5[25] = 0;
        v5[23] = 0xBFF0000000000000;
        *((_DWORD *)v5 + 52) = 0;
        *(_QWORD *)((char *)v5 + 212) = 0xBFF0000000000000;
        *((_DWORD *)v5 + 55) = 0x7FFFFFFF;
        v5[29] = 0;
        v5[30] = 0;
        v5[28] = 0;
        *((_BYTE *)v5 + 248) = 0;
        *(_QWORD *)buf = v5 + 5;
        v11 = sub_100041CE0((uint64_t **)(a1 + 264), (int *)v5 + 10, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_1006DC7E4((uint64_t)v11[5], a2);
      }
      v12 = (_QWORD *)v5[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v5[2];
          _ZF = *v13 == (_QWORD)v5;
          v5 = v13;
        }
        while (!_ZF);
      }
      v5 = v13;
    }
    while (v13 != (_QWORD *)(a1 + 248));
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 288) + 120))(*(_QWORD *)(a1 + 288));
  *(_BYTE *)(a1 + 672) = a2;
  *(_DWORD *)buf = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)a1 + 120))(a1, buf);
  *(_DWORD *)buf = 9;
  result = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)a1 + 120))(a1, buf);
  *(_QWORD *)(a1 + 232) = 0;
  return result;
}

uint64_t sub_1006A842C(uint64_t a1)
{
  NSObject *v2;
  uint64_t result;
  _QWORD *v4;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  uint8_t *v13;
  _WORD v14[8];
  uint8_t buf[1640];

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214C5A0);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LocationController,#Warning,Clearing all location data from the controller", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v14[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "LocationController,#Warning,Clearing all location data from the controller", v14, 2);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLLocationController::clearAllLocationData()", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 304))(a1);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 288) + 120))(*(_QWORD *)(a1 + 288));
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 288) + 168))(*(_QWORD *)(a1 + 288));
  v4 = *(_QWORD **)(a1 + 240);
  if (v4 != (_QWORD *)(a1 + 248))
  {
    __asm { FMOV            V1.2D, #-1.0 }
    do
    {
      if (*((_DWORD *)v4 + 8))
      {
        *((_DWORD *)v4 + 24) = 0xFFFF;
        *(_QWORD *)((char *)v4 + 108) = 0;
        *(_QWORD *)((char *)v4 + 100) = 0;
        *(_OWORD *)((char *)v4 + 116) = xmmword_101BAFC90;
        *(_OWORD *)((char *)v4 + 132) = _Q1;
        *(_OWORD *)((char *)v4 + 148) = _Q1;
        *(_OWORD *)((char *)v4 + 164) = _Q1;
        *((_DWORD *)v4 + 45) = 0;
        v4[24] = 0;
        v4[25] = 0;
        v4[23] = 0xBFF0000000000000;
        *((_DWORD *)v4 + 52) = 0;
        *(_QWORD *)((char *)v4 + 212) = 0xBFF0000000000000;
        *((_DWORD *)v4 + 55) = 0x7FFFFFFF;
        v4[29] = 0;
        v4[30] = 0;
        v4[28] = 0;
        *((_BYTE *)v4 + 248) = 0;
      }
      v10 = (_QWORD *)v4[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v4[2];
          _ZF = *v11 == (_QWORD)v4;
          v4 = v11;
        }
        while (!_ZF);
      }
      v4 = v11;
    }
    while (v11 != (_QWORD *)(a1 + 248));
  }
  return result;
}

void sub_1006A8694(uint64_t a1, int a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  id v11;
  uint64_t *v12;
  int v13;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  const char *v27;
  uint8_t *v28;
  uint64_t v29;
  _WORD v30[2];
  _DWORD v31[2];
  int v32;
  uint8_t buf[8];
  __int16 v34;
  const char *v35;
  __int16 v36;
  _BOOL4 v37;

  v32 = a2;
  v7 = sub_100B303DC();
  sub_10010F434((uint64_t)buf);
  sub_100B30A14(v7, (uint64_t *)buf);
  *(_DWORD *)buf = 3;
  v31[0] = 3;
  v31[1] = sub_10142DEC4((int *)buf);
  v8 = sub_1005EE584();
  *(_DWORD *)buf = 4;
  sub_1005F193C(v8, (unsigned int *)buf, (int32x4_t *)v31, (int *)(a1 + 5124), &v32, a3, a4);
  if (*a3 == 4)
  {
    v13 = *(_DWORD *)(a4 + 188);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v14 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v34 = 2082;
      v35 = "";
      v36 = 1026;
      v37 = v13 == 1;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"LocationController,Location Services\", \"enabled\":%{public}d}", buf, 0x18u);
    }
    if (*(_BYTE *)(a1 + 5121) && v13 == 1)
    {
      if (*(_BYTE *)(sub_1005EE584() + 24))
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v15 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "#locctl,#rec,session already open,no-op", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10214C5A0);
          v30[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#locctl,#rec,session already open,no-op", v30, 2);
          v17 = (uint8_t *)v16;
          sub_100512490("Generic", 1, 0, 2, "void CLLocationController::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v16);
          if (v17 != buf)
            free(v17);
        }
      }
      else
      {
        v19 = sub_1005EE584();
        sub_1005EED78(v19);
        v20 = sub_1005EE584();
        sub_1005EF278(v20);
        *(_QWORD *)buf = 0x4000000000000000;
        sub_10069D7AC(a1, (double *)buf);
      }
    }
    else if (*(_BYTE *)(a1 + 5121) && v13 != 1)
    {
      v18 = sub_1005EE584();
      sub_1005EEB50(v18);
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v21 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "LocationController,#Warning,Location Services state changed,clearing local cache", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v30[0] = 0;
      LODWORD(v29) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "LocationController,#Warning,Location Services state changed,clearing local cache", v30, v29);
      v28 = (uint8_t *)v27;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationController::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v27);
      if (v28 != buf)
        free(v28);
    }
    sub_1006A1D58(a1, 6, *(_DWORD *)(a4 + 188) != 1);
    sub_1006A842C(a1);
    v22 = *(_QWORD *)(a1 + 312);
    if (v22)
      sub_100E6003C(v22, v13 == 1);
  }
  else if (!*a3)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v9 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "LocationController,#Warning,Location Services reset,clearing local cache", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v30[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "LocationController,#Warning,Location Services reset,clearing local cache", v30, 2);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationController::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214C620);
    v10 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "@ClxNotify, LpReset, 0", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214C620);
      v30[0] = 0;
      LODWORD(v29) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@ClxNotify, LpReset, 0", v30, v29);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationController::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    sub_1006A842C(a1);
    v11 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLClientManager"));
    if (byte_10230324F >= 0)
      v12 = &qword_102303238;
    else
      v12 = (uint64_t *)qword_102303238;
    objc_msgSend(v11, "resetNotificationConsumedForIdentifier:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  }
}

void sub_1006A8DAC(uint64_t a1)
{
  int v2;
  _BYTE *v3;
  NSObject *v4;
  int *v5;
  uint64_t *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  char v10;
  uint64_t *v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  _DWORD v15[4];
  uint8_t buf[4];
  int v17;

  if (*(_BYTE *)(a1 + 1888))
    v2 = 1;
  else
    v2 = *(_BYTE *)(a1 + 1720) == 0;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214C5A0);
  v3 = (_BYTE *)(a1 + 5192);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    v17 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "LocationController,gnss debounce benefit low:%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v15[0] = 67240192;
    v15[1] = v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "LocationController,gnss debounce benefit low:%{public}d", v15, 8);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLLocationController::tickGnssDebounce()", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  if (*v3 != v2)
  {
    *v3 = v2;
    if (*(_DWORD *)(a1 + 328))
    {
      v5 = (int *)(a1 + 328);
      if (*(_BYTE *)(a1 + 5193) || ((v2 ^ 1) & 1) != 0)
      {
        v10 = v2;
        if (!*(_BYTE *)(a1 + 5193))
          v10 = 1;
        if ((v10 & 1) == 0)
        {
          v11 = sub_1000B5C9C(a1 + 264, v5);
          objc_msgSend(*(id *)(*v11 + 16), "unregister:forNotification:", *(_QWORD *)(*v11 + 8), 44);
          *(_BYTE *)(a1 + 5193) = 0;
        }
      }
      else
      {
        v6 = sub_1000B5C9C(a1 + 264, v5);
        objc_msgSend(*(id *)(*v6 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*v6 + 8), 44, 0);
        *(_BYTE *)(a1 + 5193) = 1;
      }
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v7 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "LocationController,GpsProvider not available for Gnss debounce notification", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        LOWORD(v15[0]) = 0;
        LODWORD(v14) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "LocationController,GpsProvider not available for Gnss debounce notification", v15, v14);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "void CLLocationController::tickGnssDebounce()", "%s\n", v8);
        if (v9 != buf)
          free(v9);
      }
    }
  }
}

void sub_1006A9128(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  int *v7;
  int *v8;
  int *v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  const char *v14;
  uint8_t *v15;
  void *__p[2];
  uint64_t v17;
  uint8_t buf[4];
  _DWORD v19[7];
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214C5A0);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v5 = a1[12];
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "LocationController,requested client list,size,%zu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v13 = (void *)a1[12];
    LODWORD(__p[0]) = 134217984;
    *(void **)((char *)__p + 4) = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "LocationController,requested client list,size,%zu", (size_t)__p);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "CLLocationControllerRecorder_Types::ClientList CLLocationController::getLocationControllerClients() const", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  v6 = (_QWORD *)a1[10];
  if (v6 != a1 + 11)
  {
    do
    {
      sub_1015A2E04(__p, (char *)objc_msgSend(objc_msgSend((id)v6[8], "description"), "UTF8String"));
      *(_DWORD *)buf = *((_DWORD *)v6 + 8);
      if (SHIBYTE(v17) < 0)
      {
        sub_100115CE4(&v19[1], __p[0], (unint64_t)__p[1]);
        v21 = 0;
        v22 = 0;
        v20 = &v21;
        if (SHIBYTE(v17) < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_OWORD *)&v19[1] = *(_OWORD *)__p;
        *(_QWORD *)&v19[5] = v17;
        v21 = 0;
        v22 = 0;
        v20 = &v21;
      }
      v7 = (int *)v6[5];
      if (v7 != (int *)(v6 + 6))
      {
        do
        {
          sub_1000C6190(&v20, v7 + 7, v7 + 7);
          v8 = (int *)*((_QWORD *)v7 + 1);
          if (v8)
          {
            do
            {
              v9 = v8;
              v8 = *(int **)v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              v9 = (int *)*((_QWORD *)v7 + 2);
              v10 = *(_QWORD *)v9 == (_QWORD)v7;
              v7 = v9;
            }
            while (!v10);
          }
          v7 = v9;
        }
        while (v9 != (int *)(v6 + 6));
      }
      sub_1006ABAC0((uint64_t)a2, (int *)buf, (uint64_t)buf);
      sub_1006AAAD4((uint64_t)buf);
      v11 = (_QWORD *)v6[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v6[2];
          v10 = *v12 == (_QWORD)v6;
          v6 = v12;
        }
        while (!v10);
      }
      v6 = v12;
    }
    while (v12 != a1 + 11);
  }
}

void sub_1006A942C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  _Unwind_Resume(exception_object);
}

void sub_1006A9478(uint64_t a1, void *a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (a2 && *(_QWORD *)(a1 + 5184) && objc_msgSend(a2, "_placeInference"))
  {
    if (objc_msgSend(objc_msgSend(a2, "_placeInference"), "_loiIdentifier"))
    {
      objc_msgSend(*(id *)(a1 + 5184), "fetchLocationOfInterestWithIdentifier:withReply:");
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v4 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "LocationController,updateCAHomeLoiFromVisit,invalid loi identifier", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v7[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "LocationController,updateCAHomeLoiFromVisit,invalid loi identifier", v7, 2);
        v6 = (uint8_t *)v5;
        sub_100512490("Generic", 1, 0, 0, "void CLLocationController::updateCAHomeLoiFromVisit(const CLVisit *)", "%s\n", v5);
        if (v6 != buf)
          free(v6);
      }
    }
  }
}

void sub_1006A9674(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  uint64_t v14;
  id v15;
  double v16;
  CLLocationDegrees v17;
  CLLocationDegrees v18;
  CLLocationCoordinate2D v19;
  double v20;
  id v21;
  uint64_t v22;
  NSObject *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  const char *v27;
  uint8_t *v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  const char *v56;
  _DWORD v57[2];
  int v58;
  const char *v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  double v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  unint64_t v75;
  int v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint8_t buf[4];
  _BYTE v88[38];
  __int16 v89;
  double v90;

  if (a3)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v5 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      v6 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v88 = 0;
      *(_WORD *)&v88[4] = 2082;
      *(_QWORD *)&v88[6] = "";
      *(_WORD *)&v88[14] = 2113;
      *(_QWORD *)&v88[16] = v6;
      *(_WORD *)&v88[24] = 2114;
      *(_QWORD *)&v88[26] = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"LocationController,updateCAHomeLoiFromVisit,error fetching LOI\", \"loiIdentifier\":%{private, location:escape_only}@, \"error\":%{public, location:escape_only}@}", buf, 0x26u);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    }
    v7 = qword_1022A0028;
    if (os_signpost_enabled((os_log_t)qword_1022A0028))
    {
      v8 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v88 = 0;
      *(_WORD *)&v88[4] = 2082;
      *(_QWORD *)&v88[6] = "";
      *(_WORD *)&v88[14] = 2113;
      *(_QWORD *)&v88[16] = v8;
      *(_WORD *)&v88[24] = 2114;
      *(_QWORD *)&v88[26] = a3;
      v9 = "LocationController,updateCAHomeLoiFromVisit,error fetching LOI";
      v10 = "{\"msg%{public}.0s\":\"LocationController,updateCAHomeLoiFromVisit,error fetching LOI\", \"loiIdentifier\":%"
            "{private, location:escape_only}@, \"error\":%{public, location:escape_only}@}";
      v11 = v7;
      v12 = 38;
LABEL_9:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v9, v10, buf, v12);
    }
  }
  else
  {
    if (a2)
    {
      v14 = *(_QWORD *)(a1 + 48);
      v15 = objc_alloc((Class)CLVisit);
      objc_msgSend(objc_msgSend(a2, "location"), "latitude");
      v17 = v16;
      objc_msgSend(objc_msgSend(a2, "location"), "longitude");
      v19 = CLLocationCoordinate2DMake(v17, v18);
      objc_msgSend(objc_msgSend(a2, "location"), "horizontalUncertainty");
      v21 = objc_msgSend(v15, "initWithCoordinate:horizontalAccuracy:arrivalDate:departureDate:detectionDate:placeInference:", objc_msgSend(*(id *)(a1 + 40), "arrivalDate"), objc_msgSend(*(id *)(a1 + 40), "departureDate"), objc_msgSend(*(id *)(a1 + 40), "detectionDate"), objc_msgSend(*(id *)(a1 + 40), "_placeInference"), v19.latitude, v19.longitude, v20);
      *(_DWORD *)buf = 23;
      v57[0] = 23;
      v57[1] = sub_10142DEC4((int *)buf);
      v22 = sub_1005EE584();
      sub_1005FDA60(v22, (int32x4_t *)v57, (int *)(v14 + 5124), v21, 1);
      if (objc_msgSend(a2, "type"))
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v23 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v24 = objc_msgSend(a2, "type");
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)v88 = v24;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "LocationController,updateCAHomeLoiFromVisit,place type is not home,%d", buf, 8u);
        }
        if (!sub_1001BFF7C(115, 2))
          return;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v25 = qword_1022A0028;
        v26 = objc_msgSend(a2, "type");
        v68 = 67109120;
        LODWORD(v69) = v26;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 2, "LocationController,updateCAHomeLoiFromVisit,place type is not home,%d", &v68);
        v28 = (uint8_t *)v27;
        sub_100512490("Generic", 1, 0, 2, "void CLLocationController::updateCAHomeLoiFromVisit(const CLVisit *)_block_invoke", "%s\n", v27);
        if (v28 == buf)
          return;
      }
      else
      {
        if (!objc_msgSend(objc_msgSend(a2, "visits"), "count"))
          return;
        if (objc_msgSend(objc_msgSend(a2, "location"), "referenceFrame") == 2)
          return;
        objc_msgSend(a2, "confidence");
        if (v33 < 0.0)
          return;
        v68 = 0xFFFF;
        v72 = xmmword_101BAFEE0;
        __asm { FMOV            V0.2D, #-1.0 }
        v73 = _Q0;
        v74 = _Q0;
        v75 = 0xBFF0000000000000;
        v76 = 0;
        v78 = 0;
        v79 = 0;
        v77 = 0xBFF0000000000000;
        v81 = 0xBFF0000000000000;
        v80 = 0;
        v82 = 0x7FFFFFFF;
        v84 = 0;
        v85 = 0;
        v83 = 0;
        v86 = 0;
        objc_msgSend(objc_msgSend(a2, "location"), "latitude");
        v69 = v39;
        objc_msgSend(objc_msgSend(a2, "location"), "longitude");
        v70 = v40;
        objc_msgSend(objc_msgSend(a2, "location"), "horizontalUncertainty");
        v71 = v41;
        v42 = sub_10113D7A4(v14 + 5200, (uint64_t)&v68);
        v43 = *(_QWORD *)(v14 + 288);
        if (v43)
          (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v43 + 488))(v43, 1, v42);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v44 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          v45 = v69;
          v46 = v70;
          v47 = v71;
          v48 = sub_100B303DC();
          v49 = sub_100B309E0(v48);
          *(_DWORD *)buf = 136381699;
          *(_QWORD *)v88 = "home";
          *(_WORD *)&v88[8] = 2049;
          *(_QWORD *)&v88[10] = v45;
          *(_WORD *)&v88[18] = 2049;
          *(_QWORD *)&v88[20] = v46;
          *(_WORD *)&v88[28] = 2050;
          *(_QWORD *)&v88[30] = v47;
          v89 = 2050;
          v90 = v49;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "LocationController,updateCAHomeLoiFromVisit,LOI %{private}s location latitude,%{private}.7f,longitude,%{private}.7f,acc,%{public}.2f,propagation_us,%{public}.3f", buf, 0x34u);
        }
        if (!sub_1001BFF7C(115, 2))
          return;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v50 = qword_1022A0028;
        v51 = v69;
        v52 = v70;
        v53 = v71;
        v54 = sub_100B303DC();
        v55 = sub_100B309E0(v54);
        v58 = 136381699;
        v59 = "home";
        v60 = 2049;
        v61 = v51;
        v62 = 2049;
        v63 = v52;
        v64 = 2050;
        v65 = v53;
        v66 = 2050;
        v67 = v55;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v50, 1, "LocationController,updateCAHomeLoiFromVisit,LOI %{private}s location latitude,%{private}.7f,longitude,%{private}.7f,acc,%{public}.2f,propagation_us,%{public}.3f", &v58, 52);
        v28 = (uint8_t *)v56;
        sub_100512490("Generic", 1, 0, 2, "void CLLocationController::updateCAHomeLoiFromVisit(const CLVisit *)_block_invoke", "%s\n", v56);
        if (v28 == buf)
          return;
      }
      free(v28);
      return;
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v29 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      v30 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)v88 = 0;
      *(_WORD *)&v88[4] = 2082;
      *(_QWORD *)&v88[6] = "";
      *(_WORD *)&v88[14] = 2113;
      *(_QWORD *)&v88[16] = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"LocationController,updateCAHomeLoiFromVisit,received nil LOI\", \"loiIdentifier\":%{private, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    }
    v31 = qword_1022A0028;
    if (os_signpost_enabled((os_log_t)qword_1022A0028))
    {
      v32 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)v88 = 0;
      *(_WORD *)&v88[4] = 2082;
      *(_QWORD *)&v88[6] = "";
      *(_WORD *)&v88[14] = 2113;
      *(_QWORD *)&v88[16] = v32;
      v9 = "LocationController,updateCAHomeLoiFromVisit,received nil LOI";
      v10 = "{\"msg%{public}.0s\":\"LocationController,updateCAHomeLoiFromVisit,received nil LOI\", \"loiIdentifier\":%{p"
            "rivate, location:escape_only}@}";
      v11 = v31;
      v12 = 28;
      goto LABEL_9;
    }
  }
}

void sub_1006A9E78(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  int32x4_t *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int32x4_t buf[102];

  if (objc_msgSend(a2, "referenceFrame") == (id)1)
  {
    v4 = sub_100B303DC();
    sub_10010F434((uint64_t)buf);
    sub_100B30A14(v4, buf[0].i64);
    v12 = 24;
    buf[0].i32[0] = 24;
    buf[0].i32[1] = sub_10142DEC4(&v12);
    HIDWORD(v11) = 21;
    v12 = 21;
    v13 = sub_10142DEC4((int *)&v11 + 1);
    v5 = sub_1005EE584();
    sub_1005FE2C8(v5, buf, &v12, a2);
    v6 = *(_QWORD *)(a1 + 304);
    if (v6)
      sub_100F69C68(v6, a2);
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v7 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      buf[0].i32[0] = 67240192;
      buf[0].i32[1] = objc_msgSend(a2, "referenceFrame");
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "LocationController,onBackgroundInertialOdometryState, unsupported reference frame: %{public}d", (uint8_t *)buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v8 = qword_1022A0028;
      v12 = 67240192;
      v13 = objc_msgSend(a2, "referenceFrame");
      LODWORD(v11) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 17, "LocationController,onBackgroundInertialOdometryState, unsupported reference frame: %{public}d", &v12, v11);
      v10 = (int32x4_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "void CLLocationController::onBackgroundInertialOdometryState(const CMOdometry *)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
}

void sub_1006AA0B8(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  double v6;
  unint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  unint64_t v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  int v20;
  double v21;
  __int16 v22;
  unint64_t v23;
  __int16 v24;
  double v25;
  uint8_t buf[4];
  double v27;
  __int16 v28;
  unint64_t v29;
  __int16 v30;
  double v31;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214C5A0);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v5 = sub_100B303DC();
    *(_DWORD *)buf = 1;
    v6 = sub_100B30608(v5, buf);
    v7 = 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 3);
    v8 = sub_100B303DC();
    v9 = sub_100B309E0(v8);
    *(_DWORD *)buf = 134349568;
    v27 = v6;
    v28 = 2050;
    v29 = v7;
    v30 = 2050;
    v31 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "LocationController,got IO samples,mct,%{public}.3f,count,%{public}zu,propagation_us,%{public}.3f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v14 = qword_1022A0028;
    v15 = sub_1005EEB24();
    v16 = 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 3);
    v17 = sub_100B303DC();
    v20 = 134349568;
    v21 = v15;
    v22 = 2050;
    v23 = v16;
    v24 = 2050;
    v25 = sub_100B309E0(v17);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 1, "LocationController,got IO samples,mct,%{public}.3f,count,%{public}zu,propagation_us,%{public}.3f", &v20, 32);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLLocationController::inertialOdometryManagerCallback(const std::vector<CLPIOSample> &)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  v12 = *(_QWORD *)(a1 + 288);
  if (v12)
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 472))(v12, a2);
  v13 = *(_QWORD *)(a1 + 312);
  if (v13)
    sub_100E60944(v13, a2, v10, v11);
  sub_1003FFE68(a1 + 768, a2);
}

uint64_t sub_1006AA344(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[2];
  __int16 v13;
  uint64_t v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  uint64_t v18;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214C5A0);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a2 + 1512);
    v6 = *(_QWORD *)(a2 + 1520);
    *(_DWORD *)buf = 67240448;
    v16 = v5;
    v17 = 2050;
    v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,ntfy,sess start,%{public}d,gnss usage sec,%{public}0.2f", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v8 = *(_DWORD *)(a2 + 1512);
    v9 = *(_QWORD *)(a2 + 1520);
    v12[0] = 67240448;
    v12[1] = v8;
    v13 = 2050;
    v14 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#CLProactiveLoc,ntfy,sess start,%{public}d,gnss usage sec,%{public}0.2f", v12, 18);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLLocationController::onProactiveLocationSessionNotification(const CLLocationProvider_Type::NotificationData &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  *(_DWORD *)buf = 46;
  return (*(uint64_t (**)(uint64_t, uint8_t *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, a2, 1, 0xFFFFFFFFLL, 0);
}

void sub_1006AA544()
{
  operator new();
}

void sub_1006AA5EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_1006AA628(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1006AA654(id a1)
{
  qword_10229FC58 = (uint64_t)os_log_create("com.apple.locationd.Position", "TrackRun");
}

void sub_1006AA680(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_1006AA6AC(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_1006AA6D8(uint64_t a1)
{

  sub_100261F44(a1 + 2688);
  if (*(char *)(a1 + 2455) < 0)
    operator delete(*(void **)(a1 + 2432));
  sub_100261F44(a1 + 2328);
  sub_100261F44(a1 + 2208);

  sub_100261F44(a1 + 1160);
  if (*(char *)(a1 + 927) < 0)
    operator delete(*(void **)(a1 + 904));
  sub_100261F44(a1 + 800);
  sub_100261F44(a1 + 680);
  return a1;
}

uint64_t sub_1006AA760(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1[4] + 288) + 96))(*(_QWORD *)(a1[4] + 288), a1[5], a1[6], a1[7], a1[8]);
}

uint64_t sub_1006AA77C(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1[4] + 288) + 104))(*(_QWORD *)(a1[4] + 288), a1[5], a1[6], a1[7], a1[8]);
}

uint64_t sub_1006AA798()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_102303270 != -1)
    dispatch_once(&qword_102303270, &stru_10214C5E0);
  v0 = (uint64_t *)dlsym((void *)qword_102303278, "NRPairedDeviceRegistryDeviceDidPairDarwinNotification");
  if (v0)
  {
    result = *v0;
    qword_102303268 = result;
  }
  else
  {
    result = qword_102303268;
  }
  off_1022A3C70[0] = sub_1006AA810;
  return result;
}

uint64_t sub_1006AA810()
{
  return qword_102303268;
}

void sub_1006AA81C(id a1)
{
  qword_102303278 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry", 2);
}

uint64_t sub_1006AA844()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_102303270 != -1)
    dispatch_once(&qword_102303270, &stru_10214C5E0);
  v0 = (uint64_t *)dlsym((void *)qword_102303278, "NRPairedDeviceRegistryDeviceDidUnpairDarwinNotification");
  if (v0)
  {
    result = *v0;
    qword_102303280 = result;
  }
  else
  {
    result = qword_102303280;
  }
  off_1022A3C78 = sub_1006AA8BC;
  return result;
}

uint64_t sub_1006AA8BC()
{
  return qword_102303280;
}

void sub_1006AA8C8(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_1006AA8F4(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_1006AA920(uint64_t a1, int a2, __int128 *a3, __int128 *a4, int a5, char a6, char a7)
{
  __int128 v12;
  _BYTE *v13;
  __int128 v14;

  *(_DWORD *)a1 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 8), *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v12 = *a3;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v12;
  }
  v13 = (_BYTE *)(a1 + 32);
  if (*((char *)a4 + 23) < 0)
  {
    sub_100115CE4(v13, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v14 = *a4;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a4 + 2);
    *(_OWORD *)v13 = v14;
  }
  *(_DWORD *)(a1 + 56) = 0xFFFF;
  *(_QWORD *)(a1 + 68) = 0;
  *(_QWORD *)(a1 + 60) = 0;
  *(_OWORD *)(a1 + 76) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 92) = _Q0;
  *(_OWORD *)(a1 + 108) = _Q0;
  *(_OWORD *)(a1 + 124) = _Q0;
  *(_DWORD *)(a1 + 140) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 172) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 180) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  sub_10012A33C(a1 + 216);
  *(_DWORD *)(a1 + 856) = a5;
  *(_BYTE *)(a1 + 860) = a6;
  *(_BYTE *)(a1 + 861) = a7;
  *(_WORD *)(a1 + 862) = 1;
  *(_QWORD *)(a1 + 864) = 0;
  return a1;
}

void sub_1006AAA30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1006AAA4C(id a1)
{
  qword_1022A02F8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Location_deprecated");
}

void sub_1006AAA90(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void sub_1006AAAA8(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_1006AAAD4(uint64_t a1)
{
  sub_100008848(a1 + 32, *(_QWORD **)(a1 + 40));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1006AAB10(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1006AAB10(a1, *a2);
    sub_1006AAB10(a1, a2[1]);
    sub_1006AAB58((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_1006AAB58(uint64_t a1)
{
  sub_100261F44(a1 + 744);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
}

void sub_1006AABA4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  if (a2)
  {
    sub_1006AABA4(a1, *a2);
    sub_1006AABA4(a1, a2[1]);
    v4 = a2[5];
    a2[5] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    operator delete(a2);
  }
}

uint64_t sub_1006AABFC(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100F695DC();
    operator delete();
  }
  return result;
}

uint64_t sub_1006AAC38(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100E5C458();
    operator delete();
  }
  return result;
}

void sub_1006AAC78()
{
  operator delete();
}

_QWORD *sub_1006AAC8C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10214C6D0;
  result[1] = v3;
  return result;
}

uint64_t sub_1006AACC0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10214C6D0;
  a2[1] = v2;
  return result;
}

id sub_1006AACDC(uint64_t a1)
{
  return objc_msgSend(objc_msgSend(objc_msgSend(**(id **)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLClientManager")), "syncgetNonSystemLocationClientKeys");
}

uint64_t sub_1006AAD04(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1006AAD40()
{
}

void sub_1006AAD50()
{
  operator delete();
}

_QWORD *sub_1006AAD64(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10214C760;
  result[1] = v3;
  return result;
}

uint64_t sub_1006AAD98(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10214C760;
  a2[1] = v2;
  return result;
}

id sub_1006AADB4(uint64_t a1)
{
  return objc_msgSend(objc_msgSend(objc_msgSend(**(id **)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLClientManager")), "syncgetNonSystemLocationClientKeys");
}

uint64_t sub_1006AADDC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1006AAE18()
{
}

void sub_1006AAE28()
{
  operator delete();
}

_QWORD *sub_1006AAE3C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10214C7E0;
  result[1] = v3;
  return result;
}

uint64_t sub_1006AAE70(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10214C7E0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1006AAE8C(uint64_t a1, int *a2)
{
  return sub_1006A0594(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_1006AAE94(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1006AAED0()
{
}

void sub_1006AAEE0()
{
  operator delete();
}

_QWORD *sub_1006AAEF4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10214C870;
  result[1] = v3;
  return result;
}

uint64_t sub_1006AAF28(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10214C870;
  a2[1] = v2;
  return result;
}

id sub_1006AAF44(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  NSObject *v3;
  id result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE buf[32];
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v9 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v5 = *a2;
  v7 = a2[1];
  v2 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_10214C5C0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"BarometricAltitude callback\"}", buf, 0x12u);
  }
  result = objc_msgSend(objc_msgSend(*(id *)(v2 + 32), "vendor", v5, v7, v9, v11, v13), "proxyForService:", CFSTR("CLGnssProvider"));
  if (result)
  {
    v16 = v10;
    v17 = v12;
    v18 = v14;
    *(_OWORD *)buf = v6;
    *(_OWORD *)&buf[16] = v8;
    return objc_msgSend(result, "setBarometricAltitudeData:", buf);
  }
  return result;
}

uint64_t sub_1006AB06C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1006AB0A8()
{
}

void sub_1006AB0B8()
{
  operator delete();
}

_QWORD *sub_1006AB0CC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10214C900;
  result[1] = v3;
  return result;
}

uint64_t sub_1006AB100(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10214C900;
  a2[1] = v2;
  return result;
}

void sub_1006AB11C(uint64_t a1, uint64_t a2)
{
  sub_1000B5DC0(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_1006AB124(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1006AB160()
{
}

void sub_1006AB170()
{
  operator delete();
}

_QWORD *sub_1006AB184(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10214C990;
  result[1] = v3;
  return result;
}

uint64_t sub_1006AB1B8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10214C990;
  a2[1] = v2;
  return result;
}

uint64_t sub_1006AB1D4(uint64_t a1, uint64_t a2)
{
  return sub_1006AA344(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_1006AB1DC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1006AB218()
{
}

void sub_1006AB228()
{
  operator delete();
}

_QWORD *sub_1006AB23C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10214CA20;
  result[1] = v3;
  return result;
}

uint64_t sub_1006AB270(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10214CA20;
  a2[1] = v2;
  return result;
}

uint64_t sub_1006AB28C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 288);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 496))(result);
  return result;
}

uint64_t sub_1006AB2A8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1006AB2E4()
{
}

__n128 sub_1006AB2F0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;

  v2 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 112) = v2;
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 140) = *(_OWORD *)(a1 + 172);
  v3 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = v3;
  v4 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = v4;
  result = *(__n128 *)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 48);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v6;
  return result;
}

uint64_t sub_1006AB324(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0xFFFF;
  *(_QWORD *)(a1 + 68) = 0;
  *(_QWORD *)(a1 + 60) = 0;
  *(_OWORD *)(a1 + 76) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 92) = _Q0;
  *(_OWORD *)(a1 + 108) = _Q0;
  *(_OWORD *)(a1 + 124) = _Q0;
  *(_DWORD *)(a1 + 140) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 172) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 180) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  sub_10012A33C(a1 + 216);
  *(_DWORD *)(a1 + 856) = 0;
  *(_DWORD *)(a1 + 860) = 1;
  *(_QWORD *)(a1 + 864) = 0;
  return a1;
}

void sub_1006AB3C8(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1006AAB58((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t sub_1006AB40C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      *(_DWORD *)(a4 + v7) = *(_DWORD *)(a2 + v7);
      sub_1001F869C(a4 + v7 + 8, a2 + v7 + 8);
      v7 += 40;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1006AB470(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 32;
    do
    {
      sub_1001F8644(v4 + v2);
      v2 -= 40;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

