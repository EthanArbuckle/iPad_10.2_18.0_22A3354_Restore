void sub_10102F41C(uint64_t a1, char a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];
  int v8;
  char v9;

  v5 = a1 - 56;
  v6 = sub_100127B9C();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10102F200;
  v7[3] = &unk_10219AB00;
  v7[4] = v5;
  v9 = a2;
  v8 = a3;
  sub_1000A57FC(v6, (uint64_t)v7);
}

void sub_10102F494(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v5[5];
  char v6;

  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10102F4FC;
  v5[3] = &unk_1021468D0;
  v5[4] = a1;
  v6 = a2;
  sub_1000A57FC(v4, (uint64_t)v5);
}

void sub_10102F4FC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  __int16 v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  v2 = *(_QWORD *)(a1 + 32);
  v8 = 67;
  HIBYTE(v8) = *(_BYTE *)(a1 + 40);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10219AC68);
  v3 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    *(_DWORD *)buf = 67109120;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[LOIStateChange]transition,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v5 = *(unsigned __int8 *)(a1 + 40);
    v9[0] = 67109120;
    v9[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "[LOIStateChange]transition,%d", v9);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::sendLoiTransition(const uint8_t)_block_invoke", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  sub_101036210(v2 + 192, &v8, 0);
}

void sub_10102F6D0(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];
  char v6;

  v3 = a1 - 128;
  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10102F4FC;
  v5[3] = &unk_1021468D0;
  v5[4] = v3;
  v6 = a2;
  sub_1000A57FC(v4, (uint64_t)v5);
}

void sub_10102F738(uint64_t a1, void *aBlock)
{
  void *v3;
  uint64_t v4;
  _QWORD v5[6];

  v3 = _Block_copy(aBlock);
  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10102F7A4;
  v5[3] = &unk_102131360;
  v5[4] = v3;
  v5[5] = a1;
  sub_1000A57FC(v4, (uint64_t)v5);
}

void sub_10102F7A4(uint64_t a1)
{
  __objc2_class *v1;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 32))
  {
    v3 = *(_QWORD *)(a1 + 40);

    *(_QWORD *)(v3 + 1288) = objc_msgSend(*(id *)(a1 + 32), "copy");
    _Block_release(*(const void **)(a1 + 32));
    v1 = DefaultObserver;
    if (qword_10229FC70 == -1)
      goto LABEL_3;
  }
  else
  {
    sub_10193AFE8();
  }
  dispatch_once(&qword_10229FC70, &stru_10219AC68);
LABEL_3:
  v4 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[SedentaryTimerTriage] SedentaryAlarm, setSedentaryAlarmHandler!", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v1[79].vtable != (void *)-1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "[SedentaryTimerTriage] SedentaryAlarm, setSedentaryAlarmHandler!", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::setSedentaryAlarmHandler(SedentaryAlarmHandler)_block_invoke", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
}

void sub_10102F958(uint64_t a1, void *a2)
{
  sub_10102F738(a1 - 64, a2);
}

void sub_10102F960(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  __int16 v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  uint8_t buf[1640];

  LOBYTE(v7) = 13;
  *(_WORD *)((char *)&v7 + 1) = *(_WORD *)a2;
  *(_DWORD *)((char *)&v7 + 3) = *(_DWORD *)(a2 + 2);
  HIBYTE(v7) = *(_BYTE *)(a2 + 6);
  v8 = *(_WORD *)(a2 + 8);
  v9 = *(_DWORD *)(a2 + 10);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10219AC68);
  v3 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[SedentaryTimerTriage] SedentaryAlarm, startSedentaryAlarm!", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v6 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "[SedentaryTimerTriage] SedentaryAlarm, startSedentaryAlarm!", &v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::startSedentaryAlarm(const CLSedentaryAlarmParams &)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_10103638C(a1 + 192, &v7, 0);
}

void sub_10102FB30(uint64_t a1, uint64_t a2)
{
  sub_10102F960(a1 - 64, a2);
}

void sub_10102FB38(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint64_t v6[2];
  uint8_t buf[1640];

  *(uint64_t *)((char *)v6 + 6) = 0;
  v6[0] = 13;
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10219AC68);
  v2 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[SedentaryTimerTriage] SedentaryAlarm, stopSedentaryAlarm!", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "[SedentaryTimerTriage] SedentaryAlarm, stopSedentaryAlarm!", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::stopSedentaryAlarm()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_10103638C(a1 + 192, v6, 0);
}

void sub_10102FCE4(uint64_t a1)
{
  sub_10102FB38(a1 - 64);
}

void sub_10102FCEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v5[6];

  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10102FD50;
  v5[3] = &unk_102131360;
  v5[4] = a2;
  v5[5] = a1;
  sub_1000A57FC(v4, (uint64_t)v5);
}

void sub_10102FD50(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if ((objc_msgSend(*(id *)(v2 + 160), "isEqualToDictionary:", *(_QWORD *)(a1 + 32)) & 1) == 0)
    sub_1010248DC((_QWORD *)v2, *(void **)(a1 + 32));
}

void sub_10102FD90(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[6];

  v3 = a1 - 48;
  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10102FD50;
  v5[3] = &unk_102131360;
  v5[4] = a2;
  v5[5] = v3;
  sub_1000A57FC(v4, (uint64_t)v5);
}

void sub_10102FDF4(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[7];
  char v6;
  uint8_t buf[1640];

  v6 = 20;
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_10219AD68);
  v2 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Sending reset compass to AOP", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_10219AD68);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "Sending reset compass to AOP", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::resetCompass()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_1010366C8(a1 + 192, &v6, 0);
}

void sub_10102FF9C(uint64_t a1)
{
  sub_10102FDF4(a1 - 80);
}

void sub_10102FFA4(uint64_t a1)
{
  char v1;

  v1 = 23;
  sub_101036844(a1 + 192, &v1, 0);
}

void sub_10102FFD4(uint64_t a1)
{
  char v1;

  v1 = 23;
  sub_101036844(a1 + 112, &v1, 0);
}

void sub_101030004(uint64_t a1)
{
  char v1;

  v1 = 24;
  sub_1010369C0(a1 + 192, &v1, 0);
}

void sub_101030034(uint64_t a1)
{
  char v1;

  v1 = 24;
  sub_1010369C0(a1 + 112, &v1, 0);
}

void sub_101030064(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10219AE68);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sending command to reset workout detector.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10219AE68);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Sending command to reset workout detector.", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::resetTier1WorkoutDetector()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  buf[0] = 33;
  sub_101036B4C(a1 + 192, (char *)buf, 0);
}

void sub_10103020C(uint64_t a1)
{
  sub_101030064(a1 - 96);
}

void sub_101030214(uint64_t a1, float *a2)
{
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  NSObject *v6;
  int v7;
  int v8;
  double v9;
  int v10;
  int v11;
  double v12;
  const char *v13;
  char *v14;
  NSObject *v16;
  int v17;
  int v18;
  double v19;
  int v20;
  int v21;
  double v22;
  const char *v23;
  char *v24;
  double v25;
  __int16 v26;
  int v27;
  __int16 v28;
  double v29;
  _BYTE buf[10];
  int v31;
  __int16 v32;
  double v33;

  v3 = *(unsigned __int16 *)a2;
  if (v3 > 0x21C || ((v4 = *((unsigned __int16 *)a2 + 1), v4 <= 0x347) ? (v5 = v4 > v3) : (v5 = 1), v5))
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10219AE68);
    v6 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
    {
      v7 = *(unsigned __int16 *)a2;
      v8 = *((unsigned __int16 *)a2 + 1);
      v9 = a2[1];
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = v7;
      *(_WORD *)&buf[8] = 1024;
      v31 = v8;
      v32 = 2048;
      v33 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Cannot update alternate escalation parameters: lookbackTimeInSeconds,%hu,activeTimeInSeconds,%hu,activeSpeedInMPH,%f", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10219AE68);
      v10 = *(unsigned __int16 *)a2;
      v11 = *((unsigned __int16 *)a2 + 1);
      v12 = a2[1];
      LODWORD(v25) = 67109632;
      HIDWORD(v25) = v10;
      v26 = 1024;
      v27 = v11;
      v28 = 2048;
      v29 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "Cannot update alternate escalation parameters: lookbackTimeInSeconds,%hu,activeTimeInSeconds,%hu,activeSpeedInMPH,%f", &v25, 24, v25);
      v14 = (char *)v13;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLMotionCoprocessor::updateAlternateEscalationParameters(const EscalationRules &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  else
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10219AE68);
    v16 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v17 = *(unsigned __int16 *)a2;
      v18 = *((unsigned __int16 *)a2 + 1);
      v19 = a2[1];
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = v17;
      *(_WORD *)&buf[8] = 1024;
      v31 = v18;
      v32 = 2048;
      v33 = v19;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Sending updated alternate escalation parameters to the AOP: lookbackTimeInSeconds,%hu,activeTimeInSeconds,%hu,activeSpeedInMPH,%f", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10219AE68);
      v20 = *(unsigned __int16 *)a2;
      v21 = *((unsigned __int16 *)a2 + 1);
      v22 = a2[1];
      LODWORD(v25) = 67109632;
      HIDWORD(v25) = v20;
      v26 = 1024;
      v27 = v21;
      v28 = 2048;
      v29 = v22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Sending updated alternate escalation parameters to the AOP: lookbackTimeInSeconds,%hu,activeTimeInSeconds,%hu,activeSpeedInMPH,%f", &v25, 24, v25);
      v24 = (char *)v23;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::updateAlternateEscalationParameters(const EscalationRules &)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    buf[0] = 38;
    *(_QWORD *)&buf[1] = *(_QWORD *)a2;
    sub_101036CC8(a1 + 192, (uint64_t *)buf, 0);
  }
}

void sub_1010305EC(uint64_t a1, float *a2)
{
  sub_101030214(a1 - 96, a2);
}

void sub_1010305F4(uint64_t a1, int *a2)
{
  char v2;
  int v3;
  int v4;

  v2 = 82;
  v3 = *a2;
  v4 = a2[1];
  sub_101036E50(a1 + 192, (uint64_t *)&v2, 0);
}

void sub_101030634(uint64_t a1, int *a2)
{
  char v2;
  int v3;
  int v4;

  v2 = 82;
  v3 = *a2;
  v4 = a2[1];
  sub_101036E50(a1 + 96, (uint64_t *)&v2, 0);
}

void sub_101030674(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v5[5];
  char v6;

  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1010306DC;
  v5[3] = &unk_1021468D0;
  v5[4] = a1;
  v6 = a2;
  sub_1000A57FC(v4, (uint64_t)v5);
}

uint64_t sub_1010306DC(uint64_t a1)
{
  _BYTE *v1;

  v1 = *(_BYTE **)(a1 + 32);
  v1[270] = *(_BYTE *)(a1 + 40);
  return (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v1 + 552))(v1, 0);
}

void sub_1010306FC(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint64_t *v8;
  _DWORD v9[4];
  uint64_t buf;
  int v11;

  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10219AC68);
  v4 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a2;
    LODWORD(buf) = 67109120;
    HIDWORD(buf) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Sending cycling state,%d", (uint8_t *)&buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v6 = *a2;
    v9[0] = 67109120;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "Sending cycling state,%d", v9);
    v8 = (uint64_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::sendCyclingState(const CMMotionContext::CyclingStateDetectorMessage &)", "%s\n", v7);
    if (v8 != &buf)
      free(v8);
  }
  LOBYTE(buf) = 42;
  BYTE1(buf) = *a2;
  WORD1(buf) = 0;
  HIDWORD(buf) = *((_DWORD *)a2 + 1);
  v11 = *((_DWORD *)a2 + 2);
  sub_101036FD8(a1 + 192, &buf, 0);
}

void sub_1010308E4(uint64_t a1, unsigned __int8 *a2)
{
  sub_1010306FC(a1 - 96, a2);
}

void sub_1010308EC(uint64_t a1, uint8_t *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10219AC68);
  v4 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67109120;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Sending workout pause/resume,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v6 = *a2;
    v9[0] = 67109120;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Sending workout pause/resume,%d", v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::sendWorkoutPauseResumeTransition(const CMMotionContext::Transition &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  strcpy((char *)buf, ",");
  buf[1] = *a2;
  sub_101037160(a1 + 192, (__int16 *)buf, 0);
}

void sub_101030AC0(uint64_t a1, uint8_t *a2)
{
  sub_1010308EC(a1 - 96, a2);
}

void sub_101030AD0(uint64_t a1, void *aBlock)
{
  void *v3;
  uint64_t v4;
  _QWORD v5[6];

  v3 = _Block_copy(aBlock);
  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_101030B3C;
  v5[3] = &unk_102131360;
  v5[4] = v3;
  v5[5] = a1;
  sub_1000A57FC(v4, (uint64_t)v5);
}

void sub_101030B3C(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v4 = a1 + 32;
  v2 = *(const void **)(a1 + 32);
  v3 = *(_QWORD *)(v4 + 8);
  v5 = *(void **)(v3 + 1296);
  if (v2 != v5)
  {

    *(_QWORD *)(v3 + 1296) = objc_msgSend(*(id *)(a1 + 32), "copy");
    v2 = *(const void **)(a1 + 32);
  }
  _Block_release(v2);
}

void sub_101030B7C(uint64_t a1, void *a2)
{
  sub_101030AD0(a1 - 88, a2);
}

void sub_101030B84(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  __int16 v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  LOBYTE(v7) = 26;
  HIBYTE(v7) = a2;
  if (qword_10229FE20 != -1)
    dispatch_once(&qword_10229FE20, &stru_10219ADE8);
  v4 = qword_10229FE28;
  if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending ski transition %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_10219ADE8);
    v8[0] = 67109120;
    v8[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 0, "Sending ski transition %d", v8);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::sendSkiTransition(const CLSkiTransitions)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_1010372DC(a1 + 192, &v7, 0);
}

void sub_101030D4C(uint64_t a1, int a2)
{
  sub_101030B84(a1 - 88, a2);
}

void sub_101030D54(uint64_t a1, unsigned __int8 a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  __int16 v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  LOBYTE(v7) = 39;
  HIBYTE(v7) = a2;
  if (qword_10229FE80 != -1)
    dispatch_once(&qword_10229FE80, &stru_10219AE28);
  v4 = qword_10229FE88;
  if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Sending altimeter command to the AOP,%u", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_10219AE28);
    v8[0] = 67109120;
    v8[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 2, "Sending altimeter command to the AOP,%u", v8);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::sendAltimeterCommand(const CLAltimeterCommand)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_101037458(a1 + 192, &v7, 0);
}

void sub_101030F24(uint64_t a1, unsigned __int8 a2)
{
  sub_101030D54(a1 - 112, a2);
}

void sub_101030F2C(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  uint64_t v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  BYTE6(v7) = 68;
  HIBYTE(v7) = a2;
  if (qword_10229FE80 != -1)
    dispatch_once(&qword_10229FE80, &stru_10219AE28);
  v4 = qword_10229FE88;
  if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending water state to the AOP,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_10219AE28);
    v8[0] = 67240192;
    v8[1] = a2;
    LODWORD(v7) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "Sending water state to the AOP,%{public}d", v8, v7);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::sendWaterState(BOOL)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_1010375D4(a1 + 192, (__int16 *)&v7 + 3, 0);
}

void sub_1010310F4(uint64_t a1, int a2)
{
  sub_101030F2C(a1 - 112, a2);
}

void sub_1010310FC(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  int v5;
  double v6;
  double v7;
  double v8;
  int v9;
  double v10;
  double v11;
  double v12;
  const char *v13;
  char *v14;
  _DWORD v15[2];
  __int16 v16;
  double v17;
  __int16 v18;
  double v19;
  __int16 v20;
  double v21;
  _BYTE buf[10];
  double v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;

  if (qword_10229FE80 != -1)
    dispatch_once(&qword_10229FE80, &stru_10219AE28);
  v4 = qword_10229FE88;
  if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    v6 = *((float *)a2 + 1);
    v7 = *((float *)a2 + 2);
    v8 = *((float *)a2 + 3);
    *(_DWORD *)buf = 67240960;
    *(_DWORD *)&buf[4] = v5;
    *(_WORD *)&buf[8] = 2050;
    v23 = v6;
    v24 = 2050;
    v25 = v7;
    v26 = 2050;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending wetConfig to the AOP,useShower,%{public}d,wetTimeout,%{public}f,pressureAmplitude,%{public}f,tDot,%{public}f", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_10219AE28);
    v9 = *a2;
    v10 = *((float *)a2 + 1);
    v11 = *((float *)a2 + 2);
    v12 = *((float *)a2 + 3);
    v15[0] = 67240960;
    v15[1] = v9;
    v16 = 2050;
    v17 = v10;
    v18 = 2050;
    v19 = v11;
    v20 = 2050;
    v21 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "Sending wetConfig to the AOP,useShower,%{public}d,wetTimeout,%{public}f,pressureAmplitude,%{public}f,tDot,%{public}f", v15, 38);
    v14 = (char *)v13;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::sendWetConfig(const CLAltimeterInterface::WetConfig &)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  buf[0] = 69;
  buf[1] = *a2;
  *(_QWORD *)&buf[2] = *(_QWORD *)(a2 + 4);
  LODWORD(v23) = *((_DWORD *)a2 + 3);
  sub_101037750(a1 + 192, (uint64_t *)buf, 0);
}

void sub_101031340(uint64_t a1, unsigned __int8 *a2)
{
  sub_1010310FC(a1 - 112, a2);
}

void sub_101031348(uint64_t a1, int a2, float a3, float a4)
{
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  double v11;
  int v12;
  char v13;
  float v14;
  float v15;
  char v16;
  int v17;
  double v18;
  __int16 v19;
  double v20;
  __int16 v21;
  int v22;
  uint8_t buf[4];
  double v24;
  __int16 v25;
  double v26;
  __int16 v27;
  int v28;

  v13 = 77;
  v14 = a3;
  v15 = a4;
  v16 = a2;
  if (qword_10229FE80 != -1)
    dispatch_once(&qword_10229FE80, &stru_10219AE28);
  v8 = qword_10229FE88;
  if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    v24 = a3;
    v25 = 2048;
    v26 = a4;
    v27 = 1024;
    v28 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sending MSLP to the AOP,%f,uncertainty,%f,resetInVisitReference,%d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_10219AE28);
    v17 = 134218496;
    v18 = a3;
    v19 = 2048;
    v20 = a4;
    v21 = 1024;
    v22 = a2;
    LODWORD(v11) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "Sending MSLP to the AOP,%f,uncertainty,%f,resetInVisitReference,%d", COERCE_DOUBLE(&v17), v11, v12);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::sendMeanSeaLevelPressure(float, float, BOOL)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  sub_1010378D8(a1 + 192, (uint64_t *)&v13, 0);
}

void sub_101031568(uint64_t a1, int a2, float a3, float a4)
{
  sub_101031348(a1 - 112, a2, a3, a4);
}

void sub_101031570(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  __int16 v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  LOBYTE(v7) = 78;
  HIBYTE(v7) = a2;
  if (qword_10229FE80 != -1)
    dispatch_once(&qword_10229FE80, &stru_10219AE28);
  v4 = qword_10229FE88;
  if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending in visit status,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_10219AE28);
    v8[0] = 67109120;
    v8[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "Sending in visit status,%d", v8);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::sendInVisit(BOOL)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_101037A60(a1 + 192, &v7, 0);
}

void sub_101031738(uint64_t a1, int a2)
{
  sub_101031570(a1 - 112, a2);
}

void sub_101031740(uint64_t a1, float a2, float a3)
{
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  double v9;
  char v10;
  float v11;
  float v12;
  int v13;
  double v14;
  __int16 v15;
  double v16;
  uint8_t buf[4];
  double v18;
  __int16 v19;
  double v20;

  v10 = 79;
  v11 = a2;
  v12 = a3;
  if (qword_10229FE80 != -1)
    dispatch_once(&qword_10229FE80, &stru_10219AE28);
  v6 = qword_10229FE88;
  if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    v18 = a2;
    v19 = 2048;
    v20 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sending elevation thresholds,lower,%f,upper,%f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_10219AE28);
    v13 = 134218240;
    v14 = a2;
    v15 = 2048;
    v16 = a3;
    LODWORD(v9) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "Sending elevation thresholds,lower,%f,upper,%f", COERCE_DOUBLE(&v13), v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::sendElevationThreshold(float, float)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  sub_101037BDC(a1 + 192, (uint64_t *)&v10, 0);
}

void sub_10103193C(uint64_t a1, float a2, float a3)
{
  sub_101031740(a1 - 112, a2, a3);
}

void sub_101031944(uint64_t a1, uint64_t a2)
{
  float v3;
  float v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  double v8;
  uint64_t v9;
  float v10;
  int v11;
  double v12;
  __int16 v13;
  double v14;
  uint8_t buf[4];
  double v16;
  __int16 v17;
  double v18;

  LOBYTE(v9) = 47;
  *(_WORD *)((char *)&v9 + 1) = 0;
  BYTE3(v9) = 0;
  v3 = *(double *)a2;
  v4 = *(float *)(a2 + 8);
  *((float *)&v9 + 1) = v3;
  v10 = v4;
  if (qword_10229FE80 != -1)
    dispatch_once(&qword_10229FE80, &stru_10219AE28);
  v5 = qword_10229FE88;
  if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134218240;
    v16 = v3;
    v17 = 2048;
    v18 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Sending surface calibration to the AOP,timestamp,%f,surfacePressure,%f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_10219AE28);
    v11 = 134218240;
    v12 = v3;
    v13 = 2048;
    v14 = v4;
    LODWORD(v8) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 1, "Sending surface calibration to the AOP,timestamp,%f,surfacePressure,%f", COERCE_DOUBLE(&v11), v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::sendSurfaceCalibrationUpdate(const CLWaterSubmersion_Types::CMSurfaceCalibrationSample &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  sub_101037D64(a1 + 192, &v9, 0);
}

void sub_101031B4C(uint64_t a1, uint64_t a2)
{
  sub_101031944(a1 - 112, a2);
}

void sub_101031B54(uint64_t a1, uint64_t a2)
{
  int v4;
  float v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _BYTE v9[2];
  __int16 v10;
  char v11;
  float v12;
  int v13;
  double v14;
  __int16 v15;
  int v16;
  uint8_t buf[4];
  double v18;
  __int16 v19;
  int v20;

  v9[0] = 48;
  v4 = *(unsigned __int8 *)(a2 + 8);
  v9[1] = *(_BYTE *)(a2 + 8);
  v10 = 0;
  v11 = 0;
  v5 = *(double *)a2;
  v12 = v5;
  if (qword_10229FE80 != -1)
    dispatch_once(&qword_10229FE80, &stru_10219AE28);
  v6 = qword_10229FE88;
  if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349312;
    v18 = v5;
    v19 = 1026;
    v20 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sending submersion state to the AOP,timestamp,%{public}f,submersionState,%{public}hu", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_10219AE28);
    v13 = 134349312;
    v14 = v5;
    v15 = 1026;
    v16 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "Sending submersion state to the AOP,timestamp,%{public}f,submersionState,%{public}hu", &v13, 18);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::sendSubmersionStateUpdate(const CLWaterSubmersion_Types::CMSubmersionState &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  if (*(unsigned __int8 *)(a2 + 8) >= 2u)
    *(_BYTE *)(a1 + 1756) = 1;
  sub_101037EEC(a1 + 192, (uint64_t *)v9, 0);
}

void sub_101031D78(uint64_t a1, uint64_t a2)
{
  sub_101031B54(a1 - 112, a2);
}

void sub_101031D80(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  __int16 v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  LOBYTE(v7) = 70;
  HIBYTE(v7) = a2;
  if (qword_10229FE80 != -1)
    dispatch_once(&qword_10229FE80, &stru_10219AE28);
  v4 = qword_10229FE88;
  if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Sending easy submersion to the AOP,easySubmersionState,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_10219AE28);
    v8[0] = 67109120;
    v8[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 1, "Sending easy submersion to the AOP,easySubmersionState,%d", v8);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::sendEasySubmersionUpdate(BOOL)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_101038074(a1 + 192, &v7, 0);
}

void sub_101031F48(uint64_t a1, int a2)
{
  sub_101031D80(a1 - 112, a2);
}

void sub_101031F50(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v5[5];
  char v6;

  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_101031FB8;
  v5[3] = &unk_1021468D0;
  v5[4] = a1;
  v6 = a2;
  sub_1000A57FC(v4, (uint64_t)v5);
}

void sub_101031FB8(uint64_t a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  __int16 v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  v1 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v1 + 1419) = *(_BYTE *)(a1 + 40);
  v6 = 41;
  v2 = *(unsigned __int8 *)(a1 + 40);
  HIBYTE(v6) = *(_BYTE *)(a1 + 40);
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10219AE68);
  v3 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v9 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Sending update for ALS active scans to the AOP,shouldEnable,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10219AE68);
    v7[0] = 67109120;
    v7[1] = v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Sending update for ALS active scans to the AOP,shouldEnable,%d", v7);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::enableALSActiveScans(BOOL)_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_1010381F0(v1 + 192, &v6, 0);
}

void sub_101032188(uint64_t a1, char a2)
{
  sub_101031F50(a1 - 120, a2);
}

uint64_t sub_101032190(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *i;
  NSNumber *v8;
  const __CFString *v9;
  char *v10;
  int v11;
  double v12;
  double v13;
  double v14;
  NSObject *v15;
  double v16;
  char *v17;
  NSObject *v18;
  char *v20;
  double v21;
  _QWORD v22[5];
  size_t v23;
  int v24;
  char *v25;
  __int16 v26;
  double v27;
  uint8_t buf[4];
  char *v29;
  __int16 v30;
  double v31;
  char __str[32];
  char __s1[256];

  v4 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v5 = 1872;
  if ((_DWORD)a2)
    v5 = 1832;
  v6 = (_QWORD *)(a1 + v5);
  for (i = *(uint64_t **)(a1 + v5 + 16); i; i = (uint64_t *)*i)
  {
    v8 = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", i[3]);
    v9 = CFSTR("Unknown");
    if ((*((_BYTE *)i + 16) + 80) <= 0xACu)
      v9 = off_10219AFC8[(*((_BYTE *)i + 16) + 80)];
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v8, v9);
  }
  sub_10001BB9C(v6);
  objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2), CFSTR("IsHistorical"));
  if ((a2 & 1) != 0)
  {
    v23 = 256;
    if (*(_DWORD *)(a1 + 672))
    {
      if (!sysctlbyname("kern.wakereason", __s1, &v23, 0, 0))
      {
        snprintf(__str, 0x20uLL, "spu_queue_overflow_ep%u", *(_DWORD *)(a1 + 672));
        v10 = strstr(__s1, __str);
        if (v10)
        {
          v11 = v10[strlen(__str)];
          if (v11 < 0 || (_DefaultRuneLocale.__runetype[v11] & 0x400) == 0)
          {
            v12 = sub_1010345C8(1);
            v13 = sub_1010345C8(0);
            v14 = v13;
            if (v12 <= v13)
            {
              v16 = v13 - v12;
            }
            else
            {
              if (qword_10229FC80 != -1)
                dispatch_once(&qword_10229FC80, &stru_10219AC48);
              v15 = qword_10229FC88;
              if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                v29 = *(char **)&v12;
                v30 = 2048;
                v31 = v14;
                _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "kern.sleeptime is greater than kern.waketime: %f > %f", buf, 0x16u);
              }
              v16 = 0.0;
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FC80 != -1)
                  dispatch_once(&qword_10229FC80, &stru_10219AC48);
                v24 = 134218240;
                v25 = *(char **)&v12;
                v26 = 2048;
                v27 = v14;
                LODWORD(v21) = 22;
                v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 16, "kern.sleeptime is greater than kern.waketime: %f > %f", COERCE_DOUBLE(&v24), v21);
                sub_100512490("Generic", 1, 0, 0, "void CLMotionCoprocessor::sendCoprocessorReplyAnalytics(BOOL)", "%s\n", v17);
                if (v17 != (char *)buf)
                  free(v17);
              }
            }
            objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)(v16 * 1000.0)), CFSTR("SleepDuration"));
            if (qword_10229FC80 != -1)
              dispatch_once(&qword_10229FC80, &stru_10219AC48);
            v18 = qword_10229FC88;
            if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136446466;
              v29 = __str;
              v30 = 2050;
              v31 = v16;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "wakeReason,%{public}s,sleepDuration,%{public}f", buf, 0x16u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FC80 != -1)
                dispatch_once(&qword_10229FC80, &stru_10219AC48);
              v24 = 136446466;
              v25 = __str;
              v26 = 2050;
              v27 = v16;
              LODWORD(v21) = 22;
              v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 0, "wakeReason,%{public}s,sleepDuration,%{public}f", &v24, *(_QWORD *)&v21);
              sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::sendCoprocessorReplyAnalytics(BOOL)", "%s\n", v20);
              if (v20 != (char *)buf)
                free(v20);
            }
          }
        }
      }
    }
  }
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_101034644;
  v22[3] = &unk_102132010;
  v22[4] = +[NSDictionary dictionaryWithDictionary:](NSDictionary, "dictionaryWithDictionary:", v4);
  return AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.MotionCoprocessorReply"), v22);
}

CLOSTransaction *sub_1010326B0(uint64_t a1, int a2)
{
  void *v3;
  CLOSTransaction *result;

  if (a2)
  {
    sub_1010231AC(a1);
    *(_BYTE *)(a1 + 652) = 1;
    v3 = *(void **)(a1 + 656);
    if (v3)

    result = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "CLMotionCoprocessor.fHistoricalPacketsTransaction");
    *(_QWORD *)(a1 + 656) = result;
  }
  else
  {
    *(_BYTE *)(a1 + 652) = 0;
    sub_1001282C8(a1);

    *(_QWORD *)(a1 + 656) = 0;
    return (CLOSTransaction *)sub_101032190(a1, 1);
  }
  return result;
}

void sub_101032734(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  NSObject *v5;
  int v6;
  int v7;
  char *v8;
  int v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (*a2 == 14)
  {
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)a1 + 576))(a1, *(_BYTE *)a3 == 0);
  }
  else if (*a2 == 7)
  {
    v9 = 4;
    BYTE1(v9) = *(_BYTE *)(a3 + 9);
    BYTE2(v9) = *(_BYTE *)(a3 + 8);
    HIBYTE(v9) = sub_100647A50(*(_DWORD *)(a3 + 12));
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_10219AC88);
    v5 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_INFO))
    {
      v6 = *(unsigned __int8 *)(a3 + 9);
      *(_DWORD *)buf = 67109120;
      v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Sending battery connection update, connected,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_10219AC88);
      v7 = *(unsigned __int8 *)(a3 + 9);
      v10[0] = 67109120;
      v10[1] = v7;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 1, "Sending battery connection update, connected,%d", v10);
      sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::onDaemonStatus(const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
    sub_1010385A0(a1 + 192, &v9, 0);
  }
}

uint64_t sub_101032978(_QWORD *a1, unint64_t a2, unint64_t a3, float *a4)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 *v21;
  __int128 *v22;
  _QWORD *v23;
  __int128 *v24;
  char *v25;
  __int128 *v26;
  double Current;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[2];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  __n128 v74;

  v74.n128_u64[0] = a2;
  v74.n128_u64[1] = a3;
  if (a2 != 1)
    return 0;
  if (*((float *)&a3 + 1) < 4.0 && *(float *)&a3 >= 0.0)
  {
    sub_101032DF8(a1 + 179, &v74);
    v6 = a1[184];
    if (v6 >= 3)
    {
      v7 = a1[180];
      v8 = a1[183];
      v9 = (char *)(v7 + 8 * (v8 >> 8));
      if (a1[181] == v7)
        v10 = 0;
      else
        v10 = *(_QWORD *)v9 + 16 * v8;
      v69 = v7 + 8 * (v8 >> 8);
      v70 = v10;
      v11 = sub_1004CE854((uint64_t)&v69, v6);
      v13 = v12 - *v11;
      v14 = v13 >> 4;
      if (v13 < 49)
      {
        v18 = 258 - v14;
        v16 = (char *)&v11[-(v18 >> 8)];
        v17 = *(_QWORD *)v16 + 16 * ~(_BYTE)v18;
      }
      else
      {
        v15 = v14 - 3;
        v16 = (char *)&v11[v15 >> 8];
        v17 = *(_QWORD *)v16 + 16 * v15;
      }
      sub_1000D8D4C(a1 + 179, v9, v10, v16, v17);
      sub_101038A30((uint64_t)&v69, a1 + 179);
      if (v71 == v70)
        v19 = 0;
      else
        v19 = *(_QWORD *)(v70 + 8 * (v72 >> 8)) + 16 * v72;
      v68[0] = v70 + 8 * (v72 >> 8);
      v68[1] = v19;
      v20 = (char *)sub_1004CE854((uint64_t)v68, v73 >> 1);
      v22 = v21;
      v23 = (_QWORD *)(v70 + 8 * (v72 >> 8));
      if (v71 == v70)
      {
        v24 = 0;
        v26 = 0;
        v25 = (char *)(v70 + 8 * ((v73 + v72) >> 8));
      }
      else
      {
        v24 = (__int128 *)(*v23 + 16 * v72);
        v25 = (char *)(v70 + 8 * ((v73 + v72) >> 8));
        v26 = (__int128 *)(*(_QWORD *)v25 + 16 * (v73 + v72));
      }
      v68[0] = &stru_10219AB40;
      if (v22 != v26)
        sub_1010391B8((uint64_t)v23, v24, v20, v22, v25, v26, (uint64_t)v68);
      sub_101032DF8(a1 + 185, (__n128 *)v22);
      sub_1004A4854(&v69);
    }
  }
  Current = CFAbsoluteTimeGetCurrent();
  v28 = a1[186];
  v29 = a1[189];
  v30 = (_QWORD *)(v28 + 8 * (v29 >> 8));
  v31 = a1[187];
  if (v31 == v28)
  {
    v32 = 0;
    v33 = a1 + 190;
  }
  else
  {
    v32 = *v30 + 16 * v29;
    v33 = a1 + 190;
    v34 = *(_QWORD *)(v28 + (((a1[190] + v29) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*((_BYTE *)a1 + 1520) + v29);
    if (v32 != v34)
    {
      while (Current + -30.0 <= *(float *)(v32 + 4))
      {
        v32 += 16;
        if (v32 - *v30 == 4096)
        {
          v35 = v30[1];
          ++v30;
          v32 = v35;
        }
        if (v32 == v34)
          goto LABEL_36;
      }
    }
    if (v32 == v34)
    {
LABEL_36:
      v32 = *(_QWORD *)(v28 + (((a1[190] + v29) >> 5) & 0x7FFFFFFFFFFFFF8))
          + 16 * (*((_BYTE *)a1 + 1520) + v29);
    }
    else
    {
      v36 = Current + -30.0;
      v37 = v32;
      v38 = v30;
      while (1)
      {
        v37 += 16;
        if (v37 - *v38 == 4096)
        {
          v39 = v38[1];
          ++v38;
          v37 = v39;
        }
        if (v37 == v34)
          break;
        if (v36 <= *(float *)(v37 + 4))
        {
          *(_OWORD *)v32 = *(_OWORD *)v37;
          v32 += 16;
          if (v32 - *v30 == 4096)
          {
            v40 = v30[1];
            ++v30;
            v32 = v40;
          }
        }
      }
      v29 = a1[189];
      v28 = a1[186];
      v31 = a1[187];
    }
  }
  v41 = v29 + *v33;
  v42 = (char *)(v28 + 8 * (v41 >> 8));
  v43 = v31 == v28 ? 0 : *(_QWORD *)v42 + 16 * v41;
  sub_1000D8D4C(a1 + 185, (char *)v30, v32, v42, v43);
  v44 = *v33;
  if ((unint64_t)*v33 < 0xA)
    return 0;
  v45 = a1[186];
  v46 = a1[189];
  v47 = (char *)(v45 + 8 * (v46 >> 8));
  if (a1[187] == v45)
    v48 = 0;
  else
    v48 = *(_QWORD *)v47 + 16 * v46;
  v69 = v45 + 8 * (v46 >> 8);
  v70 = v48;
  v50 = sub_1004CE854((uint64_t)&v69, v44);
  v52 = v51 - *v50;
  v53 = v52 >> 4;
  if (v52 < 161)
  {
    v57 = 265 - v53;
    v55 = (char *)&v50[-(v57 >> 8)];
    v56 = *(_QWORD *)v55 + 16 * ~(_BYTE)v57;
  }
  else
  {
    v54 = v53 - 10;
    v55 = (char *)&v50[v54 >> 8];
    v56 = *(_QWORD *)v55 + 16 * v54;
  }
  sub_1000D8D4C(a1 + 185, v47, v48, v55, v56);
  v58 = a1[186];
  if (a1[187] == v58)
  {
    v63 = *v33;
  }
  else
  {
    v59 = a1[189];
    v60 = (uint64_t *)(v58 + 8 * (v59 >> 8));
    v61 = *v60;
    v62 = *v60 + 16 * v59;
    v63 = a1[190];
    v64 = *(_QWORD *)(v58 + (((v63 + v59) >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * (v63 + v59);
    if (v62 != v64)
    {
      v65 = 0.0;
      do
      {
        v66 = v62 + 16;
        if (v62 + 16 - v61 == 4096)
        {
          v67 = v60[1];
          ++v60;
          v61 = v67;
          v66 = v67;
        }
        v65 = v65 + (float)(*(float *)(v62 + 8) - *(float *)(v62 + 12));
        v62 = v66;
      }
      while (v66 != v64);
      goto LABEL_58;
    }
  }
  v65 = 0.0;
LABEL_58:
  *a4 = v65 / (float)v63;
  return 1;
}

void sub_101032DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1004A4854((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 sub_101032DF8(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10103871C(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

BOOL sub_101032E80(id a1, const SpeedData *a2, const SpeedData *a3)
{
  return (float)(a2->var2 - a2->var3) < (float)(a3->var2 - a3->var3);
}

void sub_101032E9C(_BYTE *a1, int *a2, int *a3)
{
  int v5;
  NSObject *v6;
  const char *v7;
  char v8;
  int v9;
  NSObject *v10;
  BOOL v11;
  NSObject *v12;
  const char *v13;
  const char *v14;
  char *v15;
  char *v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  int v20;
  const char *v21;
  uint8_t buf[4];
  const char *v23;

  v5 = *a2;
  if (*a2 == 4)
  {
    HIWORD(v19) = 36;
    v9 = *a3;
    HIBYTE(v19) = *a3 == 2;
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_10219AC88);
    v10 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v23) = v9 == 2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Youth Fitness Mode, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_10219AC88);
      v20 = 67240192;
      LODWORD(v21) = v9 == 2;
      LODWORD(v19) = 8;
      v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "Youth Fitness Mode, %{public}d", &v20, v19);
      sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::onFitnessTrackingNotification(const CLFitnessTrackingNotifier_Type::Notification &, const CLFitnessTrackingNotifier_Type::NotificationData &)", "%s\n", v16);
      if (v16 != (char *)buf)
        free(v16);
    }
    sub_101039B7C((uint64_t)(a1 + 192), (__int16 *)&v19 + 3, 0);
  }
  else if (v5 == 3)
  {
    a1[863] = *(_BYTE *)a3;
  }
  else if (!v5)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v6 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      if (*((_BYTE *)a3 + 3))
        v7 = "on";
      else
        v7 = "off";
      *(_DWORD *)buf = 136446210;
      v23 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "fitness tracking is %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219AC68);
      if (*((_BYTE *)a3 + 3))
        v14 = "on";
      else
        v14 = "off";
      v20 = 136446210;
      v21 = v14;
      LODWORD(v19) = 12;
      v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "fitness tracking is %{public}s", &v20, v19);
      sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::onFitnessTrackingNotification(const CLFitnessTrackingNotifier_Type::Notification &, const CLFitnessTrackingNotifier_Type::NotificationData &)", "%s\n", v15);
      if (v15 != (char *)buf)
        free(v15);
    }
    a1[859] = *((_BYTE *)a3 + 3);
    if (*((_BYTE *)a3 + 3))
    {
      if (sub_1009BB4D4((uint64_t)a1, 4) >= 1 && a1[283])
        sub_10014C2F4((uint64_t)a1, 4, (uint64_t)(a1 + 284), 60);
      if (a1[1812])
      {
        sub_10102C828((uint64_t)a1, (uint64_t)(a1 + 1768));
        a1[1812] = 0;
      }
      v8 = 1;
    }
    else
    {
      if (*(_BYTE *)a3)
        v11 = *((_BYTE *)a3 + 1) == 0;
      else
        v11 = 1;
      v8 = !v11;
    }
    a1[860] = v8;
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v12 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      if (a1[860])
        v13 = "on";
      else
        v13 = "off";
      *(_DWORD *)buf = 136446210;
      v23 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "elevation tracking is %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219AC68);
      if (a1[860])
        v17 = "on";
      else
        v17 = "off";
      v20 = 136446210;
      v21 = v17;
      LODWORD(v19) = 12;
      v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "elevation tracking is %{public}s", &v20, v19);
      sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::onFitnessTrackingNotification(const CLFitnessTrackingNotifier_Type::Notification &, const CLFitnessTrackingNotifier_Type::NotificationData &)", "%s\n", v18);
      if (v18 != (char *)buf)
        free(v18);
    }
  }
}

void sub_101033420(uint64_t a1, int a2)
{
  NSObject *v4;
  char *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  if (qword_10229FCB0 != -1)
    dispatch_once(&qword_10229FCB0, &stru_10219AC88);
  v4 = qword_10229FCB8;
  if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "isVehicleConnected,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_10219AC88);
    v6[0] = 67109120;
    v6[1] = a2;
    v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 1, "isVehicleConnected,%d", v6);
    sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::setIsVehicleConnected(BOOL)", "%s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
  buf[0] = 9;
  buf[1] = a2;
  buf[2] = a2 ^ 1;
  sub_101039CF8(a1 + 192, (__int16 *)buf, 0);
}

void sub_1010335F0(uint64_t a1, int *a2, double *a3)
{
  int v6;
  NSObject *v7;
  int v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double Current;
  int v18;
  double v19;
  uint64_t v20;
  char *v21;
  double v22;
  uint64_t buf;
  __int16 v24;
  double v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t (**v31)();
  _BYTE v32[10];
  __int16 v33;
  _BYTE v34[20];
  char v35;

  v6 = a3[1] < 0.0 && *a3 > 0.0;
  if (qword_10229FCB0 != -1)
    dispatch_once(&qword_10229FCB0, &stru_10219AC88);
  v7 = qword_10229FCB8;
  if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEBUG))
  {
    v8 = *a2;
    v9 = *a3;
    v10 = *((_QWORD *)a3 + 1);
    LODWORD(buf) = 67109632;
    HIDWORD(buf) = v8;
    v24 = 2048;
    v25 = v9;
    v26 = 2048;
    v27 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Received VehicleConnection notification,%d,startTime, %f,endTime,%f", (uint8_t *)&buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_10219AC88);
    v18 = *a2;
    v19 = *a3;
    v20 = *((_QWORD *)a3 + 1);
    LODWORD(v31) = 67109632;
    HIDWORD(v31) = v18;
    *(_WORD *)v32 = 2048;
    *(double *)&v32[2] = v19;
    v33 = 2048;
    *(_QWORD *)v34 = v20;
    LODWORD(v22) = 28;
    v21 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FCB8, 2, "Received VehicleConnection notification,%d,startTime, %f,endTime,%f", &v31, v22);
    sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::onVehicleConnection(const CLVehicleConnectionNotifier_Type::Notification &, const CLVehicleConnectionNotifier_Type::NotificationData &)", "%s\n", v21);
    if (v21 != (char *)&buf)
      free(v21);
  }
  if (*(_BYTE *)(a1 + 868))
  {
    v31 = off_102171990;
    *(_QWORD *)v32 = CFAbsoluteTimeGetCurrent();
    *(_OWORD *)&v34[4] = *(_OWORD *)a3;
    v35 = v6;
    v11 = sub_1011B78D4();
    sub_1011B8DB0(v11, (uint64_t)&v31);
    sub_1015EB864(&buf);
    sub_10160508C((uint64_t)&buf);
    v30 |= 1u;
    v29 = *(_QWORD *)v32;
    v12 = v28;
    v13 = *a3;
    *(_BYTE *)(v28 + 28) |= 2u;
    *(double *)(v12 + 16) = v13;
    v14 = v28;
    v15 = *((_QWORD *)a3 + 1);
    *(_BYTE *)(v28 + 28) |= 1u;
    *(_QWORD *)(v14 + 8) = v15;
    v16 = v28;
    *(_BYTE *)(v28 + 28) |= 4u;
    *(_BYTE *)(v16 + 24) = v6;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_10219AD28);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)&buf);
    sub_1015EE304((PB::Base *)&buf);
  }
  sub_101033420(a1, v6);
  if ((v6 & 1) != 0)
    Current = 1.79769313e308;
  else
    Current = CFAbsoluteTimeGetCurrent();
  *(double *)(a1 + 1408) = Current;
}

void sub_101033908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_101033928(uint64_t a1)
{
  sub_101025130(*(_QWORD *)(a1 + 32));
}

uint64_t sub_101033930(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD v13[157];
  uint64_t v14;
  char v15;
  uint64_t (**v16)();
  CFAbsoluteTime Current;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  char v22;

  if (*(_BYTE *)(a2 + 868))
  {
    v2 = result;
    v16 = off_102171468;
    v20 = *(_DWORD *)(result + 16);
    v3 = *(_QWORD *)(result + 8);
    v18 = *(_QWORD *)result;
    v19 = v3;
    Current = CFAbsoluteTimeGetCurrent();
    v21 = *(_WORD *)(v2 + 20);
    v22 = *(_BYTE *)(v2 + 22);
    v4 = sub_1011B78D4();
    sub_1011B8DB0(v4, (uint64_t)&v16);
    sub_1015EB864(v13);
    sub_101604B78((uint64_t)v13);
    v15 |= 1u;
    *(CFAbsoluteTime *)&v13[77] = Current;
    v5 = v14;
    v6 = *(_QWORD *)v2;
    *(_BYTE *)(v14 + 36) |= 1u;
    *(_QWORD *)(v5 + 8) = v6;
    v7 = v14;
    LODWORD(v6) = *(_DWORD *)(v2 + 8);
    *(_BYTE *)(v14 + 36) |= 4u;
    *(_DWORD *)(v7 + 20) = v6;
    v8 = v14;
    LODWORD(v6) = *(_DWORD *)(v2 + 12);
    *(_BYTE *)(v14 + 36) |= 8u;
    *(_DWORD *)(v8 + 24) = v6;
    v9 = v14;
    LODWORD(v6) = *(_DWORD *)(v2 + 16);
    *(_BYTE *)(v14 + 36) |= 0x10u;
    *(_DWORD *)(v9 + 28) = v6;
    v10 = v14;
    v11 = *(unsigned __int16 *)(v2 + 20);
    *(_BYTE *)(v14 + 36) |= 2u;
    *(_DWORD *)(v10 + 16) = v11;
    v12 = v14;
    LOBYTE(v11) = *(_BYTE *)(v2 + 22);
    *(_BYTE *)(v14 + 36) |= 0x20u;
    *(_BYTE *)(v12 + 32) = v11;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_10219AD28);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)v13);
    return sub_1015EE304((PB::Base *)v13);
  }
  return result;
}

void sub_101033AA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101033AB8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[8];
  uint64_t v11;
  CFAbsoluteTime v12;
  char v13;
  uint64_t (**v14)();
  CFAbsoluteTime Current;
  uint64_t v16;
  uint64_t v17;
  int v18;

  if (*(_BYTE *)(a2 + 868))
  {
    v2 = result;
    v14 = off_102172320;
    v18 = *(_DWORD *)(result + 16);
    v3 = *(_QWORD *)(result + 8);
    v16 = *(_QWORD *)result;
    v17 = v3;
    Current = CFAbsoluteTimeGetCurrent();
    v4 = sub_1011B78D4();
    sub_1011B8DB0(v4, (uint64_t)&v14);
    sub_1015EB864(v10);
    sub_101604AB0((uint64_t)v10);
    v13 |= 1u;
    v12 = Current;
    sub_1015A5F74(v11);
    v5 = *(_QWORD *)(v11 + 8);
    v6 = *(_QWORD *)v2;
    *(_BYTE *)(v5 + 32) |= 1u;
    *(_QWORD *)(v5 + 8) = v6;
    v7 = *(_QWORD *)(v11 + 8);
    LODWORD(v6) = *(_DWORD *)(v2 + 8);
    *(_BYTE *)(v7 + 32) |= 4u;
    *(_DWORD *)(v7 + 20) = v6;
    v8 = *(_QWORD *)(v11 + 8);
    LODWORD(v6) = *(_DWORD *)(v2 + 12);
    *(_BYTE *)(v8 + 32) |= 8u;
    *(_DWORD *)(v8 + 24) = v6;
    v9 = *(_QWORD *)(v11 + 8);
    LODWORD(v6) = *(_DWORD *)(v2 + 16);
    *(_BYTE *)(v9 + 32) |= 0x10u;
    *(_DWORD *)(v9 + 28) = v6;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_10219AD28);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)v10);
    return sub_1015EE304((PB::Base *)v10);
  }
  return result;
}

void sub_101033C00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_101033C18(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v5;
  int v6;
  int v7;
  char *v8;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  char *v14;
  char *v15;
  double v16;
  _BYTE v17[13];
  __int128 v18;
  int v19;
  double v20;
  __int16 v21;
  double v22;
  __int16 v23;
  double v24;
  uint8_t buf[4];
  double v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;

  if (*a3)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v5 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      v6 = *a3;
      *(_DWORD *)buf = 67109120;
      LODWORD(v26) = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Unexpected CLPressureBias notification.notification,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219AC68);
      v7 = *a3;
      v19 = 67109120;
      LODWORD(v20) = v7;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 16, "Unexpected CLPressureBias notification.notification,%d", &v19);
      sub_100512490("Generic", 1, 0, 0, "void CLMotionCoprocessor::onPressureBias(int, const CLPressureBias_Type::Notification &, const CLPressureBias_Type::NotificationData &)", "%s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
  }
  else
  {
    v18 = *(_OWORD *)a4;
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_10219AD48);
    v11 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218496;
      v26 = *((float *)&v18 + 1);
      v27 = 2048;
      v28 = *((float *)&v18 + 2);
      v29 = 2048;
      v30 = *((float *)&v18 + 3);
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "pressureBiasFit.fMedianTemperatureOffsetCoefficient,%f,pressureBiasFit.fMedToc_FactoryTemp,%f,fMaxTemp,%f", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_10219AD48);
      v19 = 134218496;
      v20 = *((float *)&v18 + 1);
      v21 = 2048;
      v22 = *((float *)&v18 + 2);
      v23 = 2048;
      v24 = *((float *)&v18 + 3);
      LODWORD(v16) = 32;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 1, "pressureBiasFit.fMedianTemperatureOffsetCoefficient,%f,pressureBiasFit.fMedToc_FactoryTemp,%f,fMaxTemp,%f", COERCE_DOUBLE(&v19), v16, *(double *)v17);
      sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::onPressureBias(int, const CLPressureBias_Type::Notification &, const CLPressureBias_Type::NotificationData &)", "%s\n", v14);
      if (v14 != (char *)buf)
        free(v14);
    }
    v12 = a1 + 192;
    sub_101039E84(v12, &v18, 0);
    *(_QWORD *)v17 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)&v17[5] = *(_QWORD *)(a4 + 21);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_10219AD48);
    v13 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218496;
      v26 = *(float *)&v17[1];
      v27 = 2048;
      v28 = *(float *)&v17[5];
      v29 = 2048;
      v30 = *(float *)&v17[9];
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "PressureInertialFit,compensationOnX,%f,compensationOnY,%f,compensationOnZ,%f", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_10219AD48);
      v19 = 134218496;
      v20 = *(float *)&v17[1];
      v21 = 2048;
      v22 = *(float *)&v17[5];
      v23 = 2048;
      v24 = *(float *)&v17[9];
      LODWORD(v16) = 32;
      v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 1, "PressureInertialFit,compensationOnX,%f,compensationOnY,%f,compensationOnZ,%f", COERCE_DOUBLE(&v19), v16, *(double *)v17);
      sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::onPressureBias(int, const CLPressureBias_Type::Notification &, const CLPressureBias_Type::NotificationData &)", "%s\n", v15);
      if (v15 != (char *)buf)
        free(v15);
    }
    sub_10103A000(v12, (uint64_t *)v17, 0);
  }
}

void sub_10103414C(uint64_t a1, uint64_t a2, _DWORD *a3, __int128 *a4)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _QWORD v8[5];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (!*a3)
  {
    v5 = a4[1];
    v9 = *a4;
    v10 = v5;
    v6 = a4[3];
    v11 = a4[2];
    v12 = v6;
    v7 = sub_100127B9C();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1010341C4;
    v8[3] = &unk_1021660F0;
    v8[4] = a1;
    sub_1000A57FC(v7, (uint64_t)v8);
  }
}

void sub_1010341C4(uint64_t a1)
{
  sub_101025E58(*(_QWORD *)(a1 + 32), (double *)(a1 + 40));
}

void sub_1010341D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  NSObject *v5;
  int v6;
  int v7;
  char *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 10)
  {
    if (objc_opt_class(MCProfileConnection, a2))
      *(_BYTE *)(v2 + 1736) = objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed");
  }
  else if (v3 == 6)
  {
    *(_BYTE *)(v2 + 653) = 1;
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v5 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)buf = 67109120;
      v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Unhandled notification %d.", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219AC68);
      v7 = *(_DWORD *)(a1 + 40);
      v9[0] = 67109120;
      v9[1] = v7;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning Unhandled notification %d.", v9);
      sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::onDarwinNotification(const CLDarwinNotifier_Type::Notification &, const CLDarwinNotifier_Type::NotificationData &)_block_invoke", "%s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
  }
}

void sub_1010343CC(uint64_t a1, uint64_t a2, _DWORD *a3, uint8_t *a4)
{
  NSObject *v6;
  int v7;
  int v8;
  char *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (!*a3)
  {
    sub_100197040();
    if (sub_1007617C8())
    {
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_10219AE88);
      v6 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEBUG))
      {
        v7 = *a4;
        *(_DWORD *)buf = 67109120;
        v12 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Resetting compass on pencil state update, isAttached, %d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_10219AE88);
        v8 = *a4;
        v10[0] = 67109120;
        v10[1] = v8;
        v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 2, "Resetting compass on pencil state update, isAttached, %d", v10);
        sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::onPencilStateNotification(int, const CLPencilState_Type::Notification &, const CLPencilState_Type::NotificationData &)", "%s\n", v9);
        if (v9 != (char *)buf)
          free(v9);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 456))(a1);
      strcpy((char *)buf, "-");
      buf[1] = *a4;
      sub_10103A198(a1 + 192, (__int16 *)buf, 0);
    }
  }
}

double sub_1010345C8(int a1)
{
  const char *v1;
  int v2;
  double v3;
  double v4;
  size_t v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  v6 = 16;
  if (a1)
    v1 = "kern.sleeptime";
  else
    v1 = "kern.waketime";
  v2 = sysctlbyname(v1, &v7, &v6, 0, 0);
  v3 = (double)v7;
  v4 = (double)(int)v8;
  if (v2)
  {
    v4 = 0.0;
    v3 = 0.0;
  }
  return v3 + v4 * 0.000001;
}

uint64_t sub_101034644(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t sub_10103464C(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 856) = 0;
  return result;
}

uint64_t sub_101034658(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 857) = 0;
  return result;
}

uint64_t sub_101034664(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 858) = 0;
  return result;
}

void sub_101034670(id a1)
{
  qword_10229FC88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "AOP");
}

void sub_10103469C(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1010346C8(id a1)
{
  qword_10229FCB8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

void sub_1010346F4(id a1)
{
  qword_10229FCD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_101034720(id a1)
{
  qword_10229FD28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

void sub_10103474C(id a1)
{
  off_10229FD58 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

void sub_101034778(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1010347A8(id a1)
{
  qword_10229FD78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

void sub_1010347D4(id a1)
{
  qword_10229FD48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_101034800(id a1)
{
  qword_10229FFB8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "BatchedSensor");
}

void sub_10103482C(id a1)
{
  qword_10229FCC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "ActivityAlarm");
}

void sub_101034858(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_101034884(id a1)
{
  qword_10229FE28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Skiing");
}

void sub_1010348B0(id a1)
{
  qword_10229FD98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

void sub_1010348DC(id a1)
{
  qword_10229FE88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_101034908(id a1)
{
  qword_10229FEF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "OnBody");
}

void sub_101034934(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_101034960(id a1)
{
  qword_10229FD88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

void sub_10103498C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10219AEB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1010349A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10219AEB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1010349D4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10219AF08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1010349E8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10219AF08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_101034A1C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10219AF58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101034A30(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10219AF58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_101034A64(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void sub_101034A80(uint64_t a1, __int16 *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  __int16 v8;
  char v9;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[3] = sub_10020726C;
    v7[4] = nullsub_58;
    v7[2] = 0x3812000000;
    v7[5] = &unk_102080316;
    v8 = *a2;
    v9 = *((_BYTE *)a2 + 2);
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_101034B8C;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_101034B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_101034B8C(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 11;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 3);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_101034BF4(uint64_t a1, _OWORD *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD block[7];
  _QWORD v7[6];
  _OWORD v8[2];

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[3] = sub_101034D00;
    v7[4] = nullsub_1341;
    v7[2] = 0x4C12000000;
    v7[5] = &unk_102080316;
    v8[0] = *a2;
    *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)((char *)a2 + 12);
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_101034D18;
    block[3] = &unk_102147938;
    block[5] = v7;
    block[6] = a1;
    block[4] = v4;
    dispatch_async(v5, block);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_101034CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_101034D00(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 48);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  *(__n128 *)(a1 + 48) = result;
  return result;
}

void sub_101034D18(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 10;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 28);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_101034D80(uint64_t a1, const void *a2, void (**a3)(_QWORD, _QWORD))
{
  void *v5;
  NSObject *v6;
  _QWORD block[7];
  _QWORD v8[6];
  _BYTE v9[282];

  if (*(_QWORD *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    v8[2] = 0x15012000000;
    v8[3] = sub_101034E98;
    v8[4] = nullsub_1342;
    v8[5] = &unk_102080316;
    memcpy(v9, a2, sizeof(v9));
    if (a3)
      v5 = _Block_copy(a3);
    else
      v5 = 0;
    v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_101034EAC;
    block[3] = &unk_102147938;
    block[5] = v8;
    block[6] = a1;
    block[4] = v5;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (a3)
  {
    a3[2](a3, 0);
  }
}

void sub_101034E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_101034E98(uint64_t a1, uint64_t a2)
{
  return memcpy((void *)(a1 + 48), (const void *)(a2 + 48), 0x11AuLL);
}

void sub_101034EAC(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 22;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 282);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_101034F14(uint64_t a1, uint64_t *a2, void *aBlock)
{
  uint64_t v4;
  void *v5;
  NSObject *v6;
  _QWORD block[7];
  _QWORD v8[7];
  int v9;

  if (*(_QWORD *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    v8[2] = 0x3C12000000;
    v8[3] = sub_10103501C;
    v8[4] = nullsub_1343;
    v4 = *a2;
    v8[5] = &unk_102080316;
    v8[6] = v4;
    v9 = *((_DWORD *)a2 + 2);
    if (aBlock)
      v5 = _Block_copy(aBlock);
    else
      v5 = 0;
    v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_101035034;
    block[3] = &unk_102147938;
    block[5] = v8;
    block[6] = a1;
    block[4] = v5;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_101035004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10103501C(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = v2;
  return result;
}

void sub_101035034(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 17;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 12);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_10103509C(uint64_t a1, uint64_t *a2, void *aBlock)
{
  uint64_t v4;
  void *v5;
  NSObject *v6;
  _QWORD block[7];
  _QWORD v8[7];
  char v9;

  if (*(_QWORD *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    v8[2] = 0x4012000000;
    v8[3] = sub_1010351A4;
    v8[4] = nullsub_1344;
    v4 = *a2;
    v8[5] = &unk_102080316;
    v8[6] = v4;
    v9 = *((_BYTE *)a2 + 8);
    if (aBlock)
      v5 = _Block_copy(aBlock);
    else
      v5 = 0;
    v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1010351BC;
    block[3] = &unk_102147938;
    block[5] = v8;
    block[6] = a1;
    block[4] = v5;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_10103518C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010351A4(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(result + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(result + 48) = v2;
  return result;
}

void sub_1010351BC(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 15;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 9);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_101035224(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 71) < 0)
      operator delete(*(void **)(a2 + 48));
    operator delete();
  }
}

void sub_10103526C(uint64_t a1, __int16 *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  __int16 v8;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[2] = 0x3812000000;
    v7[3] = sub_101035370;
    v7[4] = nullsub_1345;
    v7[5] = &unk_102080316;
    v8 = *a2;
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_101035380;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_101035358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_101035370(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_101035380(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 66;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 2);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_1010353E8(uint64_t a1, __int16 *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  __int16 v8;
  char v9;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[3] = sub_1010354F4;
    v7[4] = nullsub_1346;
    v7[2] = 0x3812000000;
    v7[5] = &unk_102080316;
    v8 = *a2;
    v9 = *((_BYTE *)a2 + 2);
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10103550C;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_1010354DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010354F4(uint64_t result, uint64_t a2)
{
  __int16 v2;

  v2 = *(_WORD *)(a2 + 48);
  *(_BYTE *)(result + 50) = *(_BYTE *)(a2 + 50);
  *(_WORD *)(result + 48) = v2;
  return result;
}

void sub_10103550C(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 76;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 3);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_101035574(uint64_t a1, __int16 *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  __int16 v8;
  char v9;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[3] = sub_101035680;
    v7[4] = nullsub_1347;
    v7[2] = 0x3812000000;
    v7[5] = &unk_102080316;
    v8 = *a2;
    v9 = *((_BYTE *)a2 + 2);
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_101035698;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_101035668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_101035680(uint64_t result, uint64_t a2)
{
  __int16 v2;

  v2 = *(_WORD *)(a2 + 48);
  *(_BYTE *)(result + 50) = *(_BYTE *)(a2 + 50);
  *(_WORD *)(result + 48) = v2;
  return result;
}

void sub_101035698(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 2;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 3);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_101035700(uint64_t a1, int *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  int v8;
  __int16 v9;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[3] = sub_10103580C;
    v7[4] = nullsub_1348;
    v7[2] = 0x3812000000;
    v7[5] = &unk_102080316;
    v8 = *a2;
    v9 = *((_WORD *)a2 + 2);
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_101035824;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_1010357F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10103580C(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(result + 52) = *(_WORD *)(a2 + 52);
  *(_DWORD *)(result + 48) = v2;
  return result;
}

void sub_101035824(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 19;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 6);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_10103588C(uint64_t a1, __int16 *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  __int16 v8;
  char v9;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[3] = sub_101035998;
    v7[4] = nullsub_1349;
    v7[2] = 0x3812000000;
    v7[5] = &unk_102080316;
    v8 = *a2;
    v9 = *((_BYTE *)a2 + 2);
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1010359B0;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_101035980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_101035998(uint64_t result, uint64_t a2)
{
  __int16 v2;

  v2 = *(_WORD *)(a2 + 48);
  *(_BYTE *)(result + 50) = *(_BYTE *)(a2 + 50);
  *(_WORD *)(result + 48) = v2;
  return result;
}

void sub_1010359B0(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 34;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 3);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_101035A18(uint64_t a1, __int16 *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  __int16 v8;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[2] = 0x3812000000;
    v7[3] = sub_101035B1C;
    v7[4] = nullsub_1350;
    v7[5] = &unk_102080316;
    v8 = *a2;
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_101035B2C;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_101035B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_101035B1C(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_101035B2C(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 73;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 2);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void *sub_101035B94(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1745D1745D1745ELL)
    sub_10025955C();
  return operator new(176 * a2);
}

void sub_101035BDC(uint64_t a1, _OWORD *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD block[7];
  _QWORD v7[6];
  _OWORD v8[2];

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[3] = sub_101035CE8;
    v7[4] = nullsub_1351;
    v7[2] = 0x5012000000;
    v7[5] = &unk_102080316;
    v8[0] = *a2;
    *(_OWORD *)((char *)v8 + 13) = *(_OWORD *)((char *)a2 + 13);
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_101035D00;
    block[3] = &unk_102147938;
    block[5] = v7;
    block[6] = a1;
    block[4] = v4;
    dispatch_async(v5, block);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_101035CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_101035CE8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 48);
  *(_OWORD *)(a1 + 61) = *(_OWORD *)(a2 + 61);
  *(__n128 *)(a1 + 48) = result;
  return result;
}

void sub_101035D00(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 35;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 29);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_101035D68(uint64_t a1, __int128 *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD block[7];
  _QWORD v7[6];
  __int128 v8;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[2] = 0x4012000000;
    v7[3] = sub_101035E6C;
    v7[4] = nullsub_1352;
    v7[5] = &unk_102080316;
    v8 = *a2;
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_101035E7C;
    block[3] = &unk_102147938;
    block[5] = v7;
    block[6] = a1;
    block[4] = v4;
    dispatch_async(v5, block);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_101035E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_101035E6C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void sub_101035E7C(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 3;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 16);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_101035EE4(uint64_t a1, __int128 *a2, void *aBlock)
{
  __int128 v4;
  void *v5;
  NSObject *v6;
  _QWORD v7[7];
  _QWORD v8[6];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  if (*(_QWORD *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    v8[2] = 0x6812000000;
    v8[3] = sub_101035FFC;
    v8[4] = nullsub_1353;
    v8[5] = &unk_102080316;
    v4 = a2[1];
    v9 = *a2;
    v10 = v4;
    v11 = a2[2];
    v12 = *((_QWORD *)a2 + 6);
    if (aBlock)
      v5 = _Block_copy(aBlock);
    else
      v5 = 0;
    v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10103601C;
    v7[3] = &unk_102147938;
    v7[5] = v8;
    v7[6] = a1;
    v7[4] = v5;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_101035FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_101035FFC(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  v4 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v3;
  *(_OWORD *)(a1 + 80) = v4;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

void sub_10103601C(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 16;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 56);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_101036084(uint64_t a1, __int16 *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  __int16 v8;
  char v9;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[3] = sub_101036190;
    v7[4] = nullsub_1354;
    v7[2] = 0x3812000000;
    v7[5] = &unk_102080316;
    v8 = *a2;
    v9 = *((_BYTE *)a2 + 2);
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1010361A8;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_101036178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_101036190(uint64_t result, uint64_t a2)
{
  __int16 v2;

  v2 = *(_WORD *)(a2 + 48);
  *(_BYTE *)(result + 50) = *(_BYTE *)(a2 + 50);
  *(_WORD *)(result + 48) = v2;
  return result;
}

void sub_1010361A8(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 28;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 3);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_101036210(uint64_t a1, __int16 *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  __int16 v8;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[2] = 0x3812000000;
    v7[3] = sub_101036314;
    v7[4] = nullsub_1355;
    v7[5] = &unk_102080316;
    v8 = *a2;
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_101036324;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_1010362FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_101036314(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_101036324(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 67;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 2);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_10103638C(uint64_t a1, uint64_t *a2, void *aBlock)
{
  uint64_t v4;
  void *v5;
  NSObject *v6;
  _QWORD block[7];
  _QWORD v8[6];
  _QWORD v9[2];

  if (*(_QWORD *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    v8[2] = 0x4012000000;
    v8[3] = sub_101036494;
    v8[4] = nullsub_1356;
    v4 = *a2;
    v8[5] = &unk_102080316;
    v9[0] = v4;
    *(_QWORD *)((char *)v9 + 6) = *(uint64_t *)((char *)a2 + 6);
    if (aBlock)
      v5 = _Block_copy(aBlock);
    else
      v5 = 0;
    v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1010364AC;
    block[3] = &unk_102147938;
    block[5] = v8;
    block[6] = a1;
    block[4] = v5;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_10103647C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_101036494(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 54) = *(_QWORD *)(a2 + 54);
  *(_QWORD *)(result + 48) = v2;
  return result;
}

void sub_1010364AC(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 13;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 14);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_101036514(uint64_t a1, __int128 *a2, void *aBlock)
{
  __int128 v4;
  __int128 v5;
  void *v6;
  NSObject *v7;
  _QWORD v8[7];
  _QWORD v9[6];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;

  if (*(_QWORD *)(a1 + 8))
  {
    v9[0] = 0;
    v9[1] = v9;
    v9[2] = 0x8812000000;
    v9[3] = sub_101036638;
    v9[4] = nullsub_1357;
    v9[5] = &unk_102080316;
    v4 = a2[3];
    v12 = a2[2];
    v13 = v4;
    v14 = a2[4];
    v15 = *((_BYTE *)a2 + 80);
    v5 = a2[1];
    v10 = *a2;
    v11 = v5;
    if (aBlock)
      v6 = _Block_copy(aBlock);
    else
      v6 = 0;
    v7 = *(NSObject **)a1;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_101036660;
    v8[3] = &unk_102147938;
    v8[5] = v9;
    v8[6] = a1;
    v8[4] = v6;
    dispatch_async(v7, v8);
    _Block_object_dispose(v9, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_101036620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_101036638(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v2;
  result = *(__n128 *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 96);
  v5 = *(_OWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 112) = v5;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

void sub_101036660(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 12;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 81);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_1010366C8(uint64_t a1, char *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  char v8;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[2] = 0x3812000000;
    v7[3] = sub_1010367CC;
    v7[4] = nullsub_1358;
    v7[5] = &unk_102080316;
    v8 = *a2;
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1010367DC;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_1010367B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010367CC(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(result + 48) = *(_BYTE *)(a2 + 48);
  return result;
}

void sub_1010367DC(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 20;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 1);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_101036844(uint64_t a1, char *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  char v8;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[2] = 0x3812000000;
    v7[3] = sub_101036948;
    v7[4] = nullsub_1359;
    v7[5] = &unk_102080316;
    v8 = *a2;
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_101036958;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_101036930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_101036948(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(result + 48) = *(_BYTE *)(a2 + 48);
  return result;
}

void sub_101036958(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 23;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 1);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_1010369C0(uint64_t a1, char *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  char v8;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[2] = 0x3812000000;
    v7[3] = sub_101036AC4;
    v7[4] = nullsub_1360;
    v7[5] = &unk_102080316;
    v8 = *a2;
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_101036AD4;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_101036AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_101036AC4(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(result + 48) = *(_BYTE *)(a2 + 48);
  return result;
}

void sub_101036AD4(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 24;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 1);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

uint64_t sub_101036B3C(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_101036B4C(uint64_t a1, char *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  char v8;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[2] = 0x3812000000;
    v7[3] = sub_101036C50;
    v7[4] = nullsub_1362;
    v7[5] = &unk_102080316;
    v8 = *a2;
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_101036C60;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_101036C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_101036C50(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(result + 48) = *(_BYTE *)(a2 + 48);
  return result;
}

void sub_101036C60(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 33;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 1);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_101036CC8(uint64_t a1, uint64_t *a2, void *aBlock)
{
  uint64_t v4;
  void *v5;
  NSObject *v6;
  _QWORD block[7];
  _QWORD v8[7];
  char v9;

  if (*(_QWORD *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    v8[2] = 0x4012000000;
    v8[3] = sub_101036DD0;
    v8[4] = nullsub_1363;
    v4 = *a2;
    v8[5] = &unk_102080316;
    v8[6] = v4;
    v9 = *((_BYTE *)a2 + 8);
    if (aBlock)
      v5 = _Block_copy(aBlock);
    else
      v5 = 0;
    v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_101036DE8;
    block[3] = &unk_102147938;
    block[5] = v8;
    block[6] = a1;
    block[4] = v5;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_101036DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_101036DD0(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(result + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(result + 48) = v2;
  return result;
}

void sub_101036DE8(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 38;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 9);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_101036E50(uint64_t a1, uint64_t *a2, void *aBlock)
{
  uint64_t v4;
  void *v5;
  NSObject *v6;
  _QWORD block[7];
  _QWORD v8[7];
  char v9;

  if (*(_QWORD *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    v8[2] = 0x4012000000;
    v8[3] = sub_101036F58;
    v8[4] = nullsub_1364;
    v4 = *a2;
    v8[5] = &unk_102080316;
    v8[6] = v4;
    v9 = *((_BYTE *)a2 + 8);
    if (aBlock)
      v5 = _Block_copy(aBlock);
    else
      v5 = 0;
    v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_101036F70;
    block[3] = &unk_102147938;
    block[5] = v8;
    block[6] = a1;
    block[4] = v5;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_101036F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_101036F58(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(result + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(result + 48) = v2;
  return result;
}

void sub_101036F70(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 82;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 9);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_101036FD8(uint64_t a1, uint64_t *a2, void *aBlock)
{
  uint64_t v4;
  void *v5;
  NSObject *v6;
  _QWORD block[7];
  _QWORD v8[7];
  int v9;

  if (*(_QWORD *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    v8[2] = 0x3C12000000;
    v8[3] = sub_1010370E0;
    v8[4] = nullsub_1365;
    v4 = *a2;
    v8[5] = &unk_102080316;
    v8[6] = v4;
    v9 = *((_DWORD *)a2 + 2);
    if (aBlock)
      v5 = _Block_copy(aBlock);
    else
      v5 = 0;
    v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1010370F8;
    block[3] = &unk_102147938;
    block[5] = v8;
    block[6] = a1;
    block[4] = v5;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_1010370C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010370E0(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = v2;
  return result;
}

void sub_1010370F8(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 42;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 12);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_101037160(uint64_t a1, __int16 *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  __int16 v8;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[2] = 0x3812000000;
    v7[3] = sub_101037264;
    v7[4] = nullsub_1366;
    v7[5] = &unk_102080316;
    v8 = *a2;
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_101037274;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_10103724C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_101037264(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_101037274(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 44;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 2);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_1010372DC(uint64_t a1, __int16 *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  __int16 v8;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[2] = 0x3812000000;
    v7[3] = sub_1010373E0;
    v7[4] = nullsub_1367;
    v7[5] = &unk_102080316;
    v8 = *a2;
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1010373F0;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_1010373C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010373E0(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_1010373F0(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 26;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 2);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_101037458(uint64_t a1, __int16 *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  __int16 v8;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[2] = 0x3812000000;
    v7[3] = sub_10103755C;
    v7[4] = nullsub_1368;
    v7[5] = &unk_102080316;
    v8 = *a2;
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10103756C;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_101037544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10103755C(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_10103756C(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 39;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 2);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_1010375D4(uint64_t a1, __int16 *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  __int16 v8;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[2] = 0x3812000000;
    v7[3] = sub_1010376D8;
    v7[4] = nullsub_1369;
    v7[5] = &unk_102080316;
    v8 = *a2;
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1010376E8;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_1010376C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010376D8(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_1010376E8(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 68;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 2);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_101037750(uint64_t a1, uint64_t *a2, void *aBlock)
{
  uint64_t v4;
  void *v5;
  NSObject *v6;
  _QWORD block[7];
  _QWORD v8[6];
  _QWORD v9[2];

  if (*(_QWORD *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    v8[2] = 0x4012000000;
    v8[3] = sub_101037858;
    v8[4] = nullsub_1370;
    v4 = *a2;
    v8[5] = &unk_102080316;
    v9[0] = v4;
    *(_QWORD *)((char *)v9 + 6) = *(uint64_t *)((char *)a2 + 6);
    if (aBlock)
      v5 = _Block_copy(aBlock);
    else
      v5 = 0;
    v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_101037870;
    block[3] = &unk_102147938;
    block[5] = v8;
    block[6] = a1;
    block[4] = v5;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_101037840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_101037858(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 54) = *(_QWORD *)(a2 + 54);
  *(_QWORD *)(result + 48) = v2;
  return result;
}

void sub_101037870(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 69;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 14);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_1010378D8(uint64_t a1, uint64_t *a2, void *aBlock)
{
  uint64_t v4;
  void *v5;
  NSObject *v6;
  _QWORD block[7];
  _QWORD v8[7];
  __int16 v9;

  if (*(_QWORD *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    v8[2] = 0x4012000000;
    v8[3] = sub_1010379E0;
    v8[4] = nullsub_1371;
    v4 = *a2;
    v8[5] = &unk_102080316;
    v8[6] = v4;
    v9 = *((_WORD *)a2 + 4);
    if (aBlock)
      v5 = _Block_copy(aBlock);
    else
      v5 = 0;
    v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1010379F8;
    block[3] = &unk_102147938;
    block[5] = v8;
    block[6] = a1;
    block[4] = v5;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_1010379C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010379E0(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_WORD *)(result + 56) = *(_WORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = v2;
  return result;
}

void sub_1010379F8(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 77;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 10);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_101037A60(uint64_t a1, __int16 *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  __int16 v8;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[2] = 0x3812000000;
    v7[3] = sub_101037B64;
    v7[4] = nullsub_1372;
    v7[5] = &unk_102080316;
    v8 = *a2;
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_101037B74;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_101037B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_101037B64(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_101037B74(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 78;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 2);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_101037BDC(uint64_t a1, uint64_t *a2, void *aBlock)
{
  uint64_t v4;
  void *v5;
  NSObject *v6;
  _QWORD block[7];
  _QWORD v8[7];
  char v9;

  if (*(_QWORD *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    v8[2] = 0x4012000000;
    v8[3] = sub_101037CE4;
    v8[4] = nullsub_1373;
    v4 = *a2;
    v8[5] = &unk_102080316;
    v8[6] = v4;
    v9 = *((_BYTE *)a2 + 8);
    if (aBlock)
      v5 = _Block_copy(aBlock);
    else
      v5 = 0;
    v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_101037CFC;
    block[3] = &unk_102147938;
    block[5] = v8;
    block[6] = a1;
    block[4] = v5;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_101037CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_101037CE4(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(result + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(result + 48) = v2;
  return result;
}

void sub_101037CFC(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 79;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 9);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_101037D64(uint64_t a1, uint64_t *a2, void *aBlock)
{
  uint64_t v4;
  void *v5;
  NSObject *v6;
  _QWORD block[7];
  _QWORD v8[7];
  int v9;

  if (*(_QWORD *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    v8[2] = 0x3C12000000;
    v8[3] = sub_101037E6C;
    v8[4] = nullsub_1374;
    v4 = *a2;
    v8[5] = &unk_102080316;
    v8[6] = v4;
    v9 = *((_DWORD *)a2 + 2);
    if (aBlock)
      v5 = _Block_copy(aBlock);
    else
      v5 = 0;
    v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_101037E84;
    block[3] = &unk_102147938;
    block[5] = v8;
    block[6] = a1;
    block[4] = v5;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_101037E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_101037E6C(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = v2;
  return result;
}

void sub_101037E84(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 47;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 12);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_101037EEC(uint64_t a1, uint64_t *a2, void *aBlock)
{
  uint64_t v4;
  void *v5;
  NSObject *v6;
  _QWORD block[7];
  _QWORD v8[7];
  char v9;

  if (*(_QWORD *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    v8[2] = 0x4012000000;
    v8[3] = sub_101037FF4;
    v8[4] = nullsub_1375;
    v4 = *a2;
    v8[5] = &unk_102080316;
    v8[6] = v4;
    v9 = *((_BYTE *)a2 + 8);
    if (aBlock)
      v5 = _Block_copy(aBlock);
    else
      v5 = 0;
    v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10103800C;
    block[3] = &unk_102147938;
    block[5] = v8;
    block[6] = a1;
    block[4] = v5;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_101037FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_101037FF4(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(result + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(result + 48) = v2;
  return result;
}

void sub_10103800C(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 48;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 9);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_101038074(uint64_t a1, __int16 *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  __int16 v8;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[2] = 0x3812000000;
    v7[3] = sub_101038178;
    v7[4] = nullsub_1376;
    v7[5] = &unk_102080316;
    v8 = *a2;
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_101038188;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_101038160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_101038178(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_101038188(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 70;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 2);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_1010381F0(uint64_t a1, __int16 *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  __int16 v8;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[2] = 0x3812000000;
    v7[3] = sub_1010382F4;
    v7[4] = nullsub_1377;
    v7[5] = &unk_102080316;
    v8 = *a2;
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_101038304;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_1010382DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010382F4(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_101038304(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 41;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 2);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

uint64_t sub_10103836C(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

_QWORD *sub_10103837C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_BYTE *)v11 + 16) = **a4;
  v11[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_10012E444(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_10103858C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1010385A0(uint64_t a1, int *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  int v8;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[2] = 0x3812000000;
    v7[3] = sub_1010386A4;
    v7[4] = nullsub_1379;
    v7[5] = &unk_102080316;
    v8 = *a2;
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1010386B4;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_10103868C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010386A4(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

void sub_1010386B4(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 4;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 4);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_10103871C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1010389E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_101038A30(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;
  unint64_t v9;
  char *v10;
  __int128 *v11;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = a2[4];
  v5 = a2[1];
  v6 = a2[2];
  v7 = (char *)(v5 + 8 * (v4 >> 8));
  if (v6 == v5)
  {
    v8 = 0;
    v11 = 0;
    v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 8));
  }
  else
  {
    v8 = (__int128 *)(*(_QWORD *)v7 + 16 * v4);
    v9 = a2[5] + v4;
    v10 = (char *)(v5 + 8 * (v9 >> 8));
    v11 = (__int128 *)(*(_QWORD *)v10 + 16 * v9);
  }
  sub_101038AD0((_QWORD *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_101038ABC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10002E778(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_101038AD0(_QWORD *a1, char *a2, __int128 *a3, char *a4, __int128 *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = (((uint64_t)a5 - *(_QWORD *)a4) >> 4) + 32 * (a4 - a2) - (((uint64_t)a3 - *(_QWORD *)a2) >> 4);
  return sub_101038B04(a1, a2, a3, v5);
}

_QWORD *sub_101038B04(_QWORD *a1, _QWORD *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;
  __int128 *v20;
  uint64_t v21;
  _QWORD v22[2];

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = 32 * (v9 - v8) - 1;
  v11 = a1[5] + a1[4];
  v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_101038C30(a1, a4 - v12);
    v8 = a1[1];
    v9 = a1[2];
    v11 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 >> 8));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = *v13 + 16 * v11;
  v22[0] = v8 + 8 * (v11 >> 8);
  v22[1] = v14;
  result = sub_1004CE854((uint64_t)v22, a4);
  while (v14 != v16)
  {
    v17 = (_OWORD *)(v13 == result ? v16 : *v13 + 4096);
    if ((_OWORD *)v14 == v17)
    {
      v17 = (_OWORD *)v14;
    }
    else
    {
      v18 = (_OWORD *)v14;
      do
      {
        v19 = *a3++;
        *v18 = v19;
        if ((__int128 *)((char *)a3 - *a2) == (__int128 *)4096)
        {
          v20 = (__int128 *)a2[1];
          ++a2;
          a3 = v20;
        }
        ++v18;
      }
      while (v18 != v17);
    }
    a1[5] += ((uint64_t)v17 - v14) >> 4;
    if (v13 == result)
      break;
    v21 = v13[1];
    ++v13;
    v14 = v21;
  }
  return result;
}

void sub_101038C30(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((_BYTE)v5)
    v6 = (v5 >> 8) + 1;
  else
    v6 = v5 >> 8;
  v7 = a1[4];
  if (v6 >= v7 >> 8)
    v8 = v7 >> 8;
  else
    v8 = v6;
  if (v6 <= v7 >> 8)
  {
    for (a1[4] = v7 - (v8 << 8); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_100212218(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_100343094((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 255;
          else
            v64 = 256;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 8);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        sub_10003732C(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)sub_10025E6A0((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1003431B0((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_101039144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010391B8(uint64_t result, __int128 *a2, char *a3, __int128 *a4, char *a5, __int128 *a6, uint64_t a7)
{
  __int128 *v8;
  __int128 *v11;
  uint64_t v12;
  char *v13;
  __int128 *v14;
  _QWORD *v15;
  __int128 *v16;
  char *v17;
  uint64_t v18;
  __int128 *v19;
  int v20;
  char *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  __int128 *v25;
  __int128 *v26;
  __int128 *v27;
  uint64_t v28;
  __int128 *v29;
  __int128 *v30;
  __int128 *v31;
  char *v32;
  __int128 *v33;
  _QWORD *v34;
  __int128 *v35;
  __int128 *v36;
  __int128 *v37;
  __int128 *v38;
  __int128 *v39;
  __int128 *v40;
  char *v41;
  uint64_t v42;
  __int128 *v43;
  __int128 *v44;
  uint64_t v45;
  __int128 *v46;
  __int128 *v47;
  __int128 *v48;
  __int128 *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 *v53;
  __int128 v54;
  _QWORD *v56;
  __int128 *v57;
  __int128 v58;

  v56 = (_QWORD *)result;
  v57 = a2;
  if (a6 != a4)
  {
    v8 = a6;
    do
    {
      if (v8 == v57)
        break;
      result = (uint64_t)v56;
      v11 = *(__int128 **)a5;
      v12 = (((uint64_t)v8 - *(_QWORD *)a5) >> 4) + 32 * (a5 - (char *)v56) - (((uint64_t)v57 - *v56) >> 4);
      if ((unint64_t)v12 < 2)
        break;
      if (v12 == 3)
      {
        v49 = v57 + 1;
        v50 = v56;
        if ((__int128 *)((char *)v57 - *v56 + 16) == (__int128 *)4096)
        {
          v50 = v56 + 1;
          v49 = (__int128 *)v56[1];
        }
        if (v8 == v11)
        {
          v51 = *((_QWORD *)a5 - 1);
          a5 -= 8;
          v8 = (__int128 *)(v51 + 4096);
        }
        return sub_101039790((uint64_t)v56, v57, (uint64_t)v50, v49, (uint64_t)a5, v8 - 1, a7);
      }
      if (v12 == 2)
      {
        v52 = *(_QWORD *)a7;
        if (v8 == v11)
          v8 = (__int128 *)(*((_QWORD *)a5 - 1) + 4096);
        v53 = v8 - 1;
        result = (*(uint64_t (**)(uint64_t, __int128 *, __int128 *))(v52 + 16))(v52, v8 - 1, v57);
        if ((_DWORD)result)
        {
          v58 = *v57;
          v54 = v58;
          *v57 = *v53;
          *v53 = v54;
        }
        return result;
      }
      if (v12 <= 7)
        return (uint64_t)sub_10103989C(v56, v57, a5, (uint64_t)v8, a7);
      v13 = a3;
      v15 = sub_1004CE854((uint64_t)&v56, (unint64_t)v12 >> 1);
      v16 = v14;
      v17 = a5;
      v18 = (uint64_t)v8;
      if (v8 == *(__int128 **)a5)
      {
        v17 = a5 - 8;
        v18 = *((_QWORD *)a5 - 1) + 4096;
      }
      v19 = (__int128 *)(v18 - 16);
      v20 = sub_101039790((uint64_t)v56, v57, (uint64_t)v15, v14, (uint64_t)v17, (__int128 *)(v18 - 16), a7);
      v21 = (char *)v56;
      v22 = v57;
      result = (*(uint64_t (**)(void))(*(_QWORD *)a7 + 16))();
      if ((result & 1) == 0)
      {
        do
        {
          if (v19 == *(__int128 **)v17)
          {
            v23 = *((_QWORD *)v17 - 1);
            v17 -= 8;
            v19 = (__int128 *)(v23 + 4096);
          }
          if (v22 == --v19)
          {
            v39 = v22 + 1;
            if ((__int128 *)((char *)v39 - *(_QWORD *)v21) == (__int128 *)4096)
            {
              v40 = (__int128 *)*((_QWORD *)v21 + 1);
              v21 += 8;
              v39 = v40;
            }
            a3 = v13;
            v41 = a5;
            v42 = (uint64_t)v8;
            v30 = a4;
            if (v8 == *(__int128 **)a5)
            {
              v41 = a5 - 8;
              v42 = *((_QWORD *)a5 - 1) + 4096;
            }
            v43 = (__int128 *)(v42 - 16);
            result = (*(uint64_t (**)(void))(*(_QWORD *)a7 + 16))();
            if ((result & 1) == 0)
            {
              while (1)
              {
                if (v39 == v43)
                  return result;
                result = (*(uint64_t (**)(void))(*(_QWORD *)a7 + 16))();
                if ((_DWORD)result)
                  break;
                if ((__int128 *)((char *)++v39 - *(_QWORD *)v21) == (__int128 *)4096)
                {
                  v46 = (__int128 *)*((_QWORD *)v21 + 1);
                  v21 += 8;
                  v39 = v46;
                }
              }
              v58 = *v39;
              *v39++ = *v43;
              *v43 = v58;
              if ((__int128 *)((char *)v39 - *(_QWORD *)v21) == (__int128 *)4096)
              {
                v48 = (__int128 *)*((_QWORD *)v21 + 1);
                v21 += 8;
                v39 = v48;
              }
            }
            if (v39 == v43)
              return result;
            while (1)
            {
              if (((*(uint64_t (**)(void))(*(_QWORD *)a7 + 16))() & 1) != 0)
              {
                do
                {
                  if (v43 == *(__int128 **)v41)
                  {
                    v45 = *((_QWORD *)v41 - 1);
                    v41 -= 8;
                    v43 = (__int128 *)(v45 + 4096);
                  }
                  --v43;
                  result = (*(uint64_t (**)(void))(*(_QWORD *)a7 + 16))();
                }
                while ((result & 1) != 0);
                if (v21 >= v41 && (v21 != v41 || v39 >= v43))
                {
                  if (v21 > a3 || v39 > a4 && v21 == a3)
                    return result;
LABEL_85:
                  v56 = v21;
                  v57 = v39;
                  goto LABEL_86;
                }
                v58 = *v39;
                *v39 = *v43;
                *v43 = v58;
              }
              if ((__int128 *)((char *)++v39 - *(_QWORD *)v21) == (__int128 *)4096)
              {
                v44 = (__int128 *)*((_QWORD *)v21 + 1);
                v21 += 8;
                v39 = v44;
              }
            }
          }
          result = (*(uint64_t (**)(void))(*(_QWORD *)a7 + 16))();
        }
        while (!(_DWORD)result);
        v58 = *v22;
        v24 = v58;
        *v22 = *v19;
        *v19 = v24;
        ++v20;
      }
      v25 = v22 + 1;
      if ((__int128 *)((char *)v25 - *(_QWORD *)v21) == (__int128 *)4096)
      {
        v26 = (__int128 *)*((_QWORD *)v21 + 1);
        v21 += 8;
        v25 = v26;
      }
      if (v21 < v17 || v21 == v17 && v25 < v19)
      {
        while (1)
        {
          if ((*(unsigned int (**)(void))(*(_QWORD *)a7 + 16))())
          {
            do
            {
              if ((__int128 *)((char *)++v25 - *(_QWORD *)v21) == (__int128 *)4096)
              {
                v27 = (__int128 *)*((_QWORD *)v21 + 1);
                v21 += 8;
                v25 = v27;
              }
            }
            while (((*(uint64_t (**)(void))(*(_QWORD *)a7 + 16))() & 1) != 0);
          }
          do
          {
            if (v19 == *(__int128 **)v17)
            {
              v28 = *((_QWORD *)v17 - 1);
              v17 -= 8;
              v19 = (__int128 *)(v28 + 4096);
            }
            --v19;
            result = (*(uint64_t (**)(void))(*(_QWORD *)a7 + 16))();
          }
          while (!(_DWORD)result);
          if (v21 >= v17 && (v21 != v17 || v25 >= v19))
            break;
          v58 = *v25;
          *v25 = *v19;
          *v19 = v58;
          ++v20;
          if (v16 == v25)
            v16 = v19;
          if ((__int128 *)((char *)++v25 - *(_QWORD *)v21) == (__int128 *)4096)
          {
            v29 = (__int128 *)*((_QWORD *)v21 + 1);
            v21 += 8;
            v25 = v29;
          }
        }
      }
      a3 = v13;
      v30 = a4;
      if (v25 != v16)
      {
        result = (*(uint64_t (**)(void))(*(_QWORD *)a7 + 16))();
        if ((_DWORD)result)
        {
          v58 = *v25;
          *v25 = *v16;
          *v16 = v58;
          ++v20;
        }
      }
      if (v25 == a4)
        return result;
      if (!v20)
      {
        if (v21 > a3 || (v31 = v25, v32 = v21, v25 > a4) && (v31 = v25, v32 = v21, v21 == a3))
        {
          v34 = v56;
          v33 = v57;
          while (1)
          {
            v35 = v33 + 1;
            if ((__int128 *)((char *)v33 - *v34 + 16) == (__int128 *)4096)
            {
              v36 = (__int128 *)v34[1];
              ++v34;
              v35 = v36;
            }
            if (v35 == v25)
              break;
            result = (*(uint64_t (**)(void))(*(_QWORD *)a7 + 16))();
            v33 = v35;
            if ((result & 1) != 0)
              goto LABEL_40;
          }
        }
        else
        {
          while (1)
          {
            v37 = v31 + 1;
            if ((__int128 *)((char *)v31 - *(_QWORD *)v32 + 16) == (__int128 *)4096)
            {
              v38 = (__int128 *)*((_QWORD *)v32 + 1);
              v32 += 8;
              v37 = v38;
            }
            if (v37 == v8)
              break;
            result = (*(uint64_t (**)(void))(*(_QWORD *)a7 + 16))();
            v31 = v37;
            if ((_DWORD)result)
              goto LABEL_40;
          }
        }
        return result;
      }
LABEL_40:
      if (v21 <= a3)
      {
        if (v25 <= a4 || v21 != a3)
        {
          v39 = v25 + 1;
          if ((__int128 *)((char *)v39 - *(_QWORD *)v21) == (__int128 *)4096)
          {
            v47 = (__int128 *)*((_QWORD *)v21 + 1);
            v21 += 8;
            v39 = v47;
          }
          goto LABEL_85;
        }
        v8 = v25;
        a5 = a3;
      }
      else
      {
        v8 = v25;
        a5 = v21;
      }
LABEL_86:
      ;
    }
    while (v8 != v30);
  }
  return result;
}

uint64_t sub_101039790(uint64_t a1, __int128 *a2, uint64_t a3, __int128 *a4, uint64_t a5, __int128 *a6, uint64_t a7)
{
  char v11;
  uint64_t result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v11 = (*(uint64_t (**)(void))(*(_QWORD *)a7 + 16))();
  result = (*(uint64_t (**)(void))(*(_QWORD *)a7 + 16))();
  if ((v11 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v14 = *a4;
    *a4 = *a6;
    *a6 = v14;
    if (!(*(unsigned int (**)(void))(*(_QWORD *)a7 + 16))())
      return 1;
    v15 = *a2;
    *a2 = *a4;
    *a4 = v15;
    return 2;
  }
  if (!(_DWORD)result)
  {
    v16 = *a2;
    *a2 = *a4;
    *a4 = v16;
    if (!(*(unsigned int (**)(void))(*(_QWORD *)a7 + 16))())
      return 1;
    v17 = *a4;
    *a4 = *a6;
    *a6 = v17;
    return 2;
  }
  v13 = *a2;
  *a2 = *a6;
  *a6 = v13;
  return 1;
}

_QWORD *sub_10103989C(_QWORD *result, __int128 *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  __int128 *v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;
  __int128 v14;

  v8 = a2;
  v9 = result;
  v10 = a4;
  if (*a3 == a4)
    v10 = *(a3 - 1) + 4096;
  v11 = (__int128 *)(v10 - 16);
  if ((__int128 *)(v10 - 16) != a2)
  {
    do
    {
      result = sub_10103995C(v9, (uint64_t)v8, (uint64_t)a3, a4, a5);
      if (v8 != v12)
      {
        v14 = *v8;
        *v8 = *v12;
        *v12 = v14;
      }
      if ((__int128 *)((char *)++v8 - *v9) == (__int128 *)4096)
      {
        v13 = (__int128 *)v9[1];
        ++v9;
        v8 = v13;
      }
    }
    while (v8 != v11);
  }
  return result;
}

_QWORD *sub_10103995C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v5 = a1;
  if (a2 != a4)
  {
    v8 = a2;
    v9 = a1;
    while (1)
    {
      v8 += 16;
      if (v8 - *v9 == 4096)
      {
        v10 = v9[1];
        ++v9;
        v8 = v10;
      }
      if (v8 == a4)
        break;
      if ((*(unsigned int (**)(void))(*(_QWORD *)a5 + 16))())
        v5 = v9;
    }
  }
  return v5;
}

void sub_1010399F0(uint64_t a1, __int128 *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  __int128 v8;
  uint64_t v9;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[3] = sub_101039AFC;
    v7[4] = nullsub_1380;
    v7[2] = 0x4812000000;
    v7[5] = &unk_102080316;
    v8 = *a2;
    v9 = *((_QWORD *)a2 + 2);
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_101039B14;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_101039AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_101039AFC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  return result;
}

void sub_101039B14(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 5;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 24);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_101039B7C(uint64_t a1, __int16 *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  __int16 v8;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[2] = 0x3812000000;
    v7[3] = sub_101039C80;
    v7[4] = nullsub_1381;
    v7[5] = &unk_102080316;
    v8 = *a2;
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_101039C90;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_101039C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_101039C80(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_101039C90(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 36;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 2);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_101039CF8(uint64_t a1, __int16 *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  __int16 v8;
  char v9;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[3] = sub_101039E04;
    v7[4] = nullsub_1382;
    v7[2] = 0x3812000000;
    v7[5] = &unk_102080316;
    v8 = *a2;
    v9 = *((_BYTE *)a2 + 2);
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_101039E1C;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_101039DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_101039E04(uint64_t result, uint64_t a2)
{
  __int16 v2;

  v2 = *(_WORD *)(a2 + 48);
  *(_BYTE *)(result + 50) = *(_BYTE *)(a2 + 50);
  *(_WORD *)(result + 48) = v2;
  return result;
}

void sub_101039E1C(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 9;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 3);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_101039E84(uint64_t a1, __int128 *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD block[7];
  _QWORD v7[6];
  __int128 v8;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[2] = 0x4012000000;
    v7[3] = sub_101039F88;
    v7[4] = nullsub_1383;
    v7[5] = &unk_102080316;
    v8 = *a2;
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_101039F98;
    block[3] = &unk_102147938;
    block[5] = v7;
    block[6] = a1;
    block[4] = v4;
    dispatch_async(v5, block);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_101039F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_101039F88(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void sub_101039F98(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 14;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 16);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_10103A000(uint64_t a1, uint64_t *a2, void *aBlock)
{
  uint64_t v4;
  void *v5;
  NSObject *v6;
  _QWORD block[7];
  _QWORD v8[6];
  _QWORD v9[2];

  if (*(_QWORD *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    v8[2] = 0x4012000000;
    v8[3] = sub_10103A108;
    v8[4] = nullsub_1384;
    v4 = *a2;
    v8[5] = &unk_102080316;
    v9[0] = v4;
    *(_QWORD *)((char *)v9 + 5) = *(uint64_t *)((char *)a2 + 5);
    if (aBlock)
      v5 = _Block_copy(aBlock);
    else
      v5 = 0;
    v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10103A120;
    block[3] = &unk_102147938;
    block[5] = v8;
    block[6] = a1;
    block[4] = v5;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_10103A0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10103A108(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 53) = *(_QWORD *)(a2 + 53);
  *(_QWORD *)(result + 48) = v2;
  return result;
}

void sub_10103A120(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 30;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 13);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

uint64_t sub_10103A188(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_10103A198(uint64_t a1, __int16 *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  __int16 v8;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[2] = 0x3812000000;
    v7[3] = sub_10103A29C;
    v7[4] = nullsub_1386;
    v7[5] = &unk_102080316;
    v8 = *a2;
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10103A2AC;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_10103A284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10103A29C(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_10103A2AC(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 45;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 2);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_10103A314(uint64_t a1, __int16 *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  __int16 v8;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[2] = 0x3812000000;
    v7[3] = sub_10103A418;
    v7[4] = nullsub_1387;
    v7[5] = &unk_102080316;
    v8 = *a2;
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10103A428;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_10103A400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10103A418(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_10103A428(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 49;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 2);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_10103A490(uint64_t a1, __int16 *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  __int16 v8;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[2] = 0x3812000000;
    v7[3] = sub_10103A594;
    v7[4] = nullsub_1388;
    v7[5] = &unk_102080316;
    v8 = *a2;
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10103A5A4;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_10103A57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10103A594(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_10103A5A4(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 52;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 2);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_10103A60C(uint64_t a1, __int16 *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  __int16 v8;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[2] = 0x3812000000;
    v7[3] = sub_10103A710;
    v7[4] = nullsub_1389;
    v7[5] = &unk_102080316;
    v8 = *a2;
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10103A720;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_10103A6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10103A710(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_10103A720(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 54;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 2);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_10103A788(uint64_t a1, __int16 *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  __int16 v8;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[2] = 0x3812000000;
    v7[3] = sub_10103A88C;
    v7[4] = nullsub_1390;
    v7[5] = &unk_102080316;
    v8 = *a2;
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10103A89C;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_10103A874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10103A88C(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_10103A89C(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 55;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 2);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_10103A904(uint64_t a1, __int16 *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  __int16 v8;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[2] = 0x3812000000;
    v7[3] = sub_10103AA08;
    v7[4] = nullsub_1391;
    v7[5] = &unk_102080316;
    v8 = *a2;
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10103AA18;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_10103A9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10103AA08(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_10103AA18(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 56;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 2);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_10103AA80()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C3B000;
      v1[3] = unk_101C3B010;
      v1[4] = xmmword_101C3B020;
      v1[0] = xmmword_101C3AFE0;
      v1[1] = unk_101C3AFF0;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_10103AB54(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_10103AB6C()
{
  _OWORD *v0;
  _DWORD *v1;
  _DWORD *v2;
  _DWORD *v3;

  sub_1015A2E04(qword_10230BB90, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230BB90, (void *)&_mh_execute_header);
  qword_10230BBB0 = 0;
  unk_10230BBB8 = 0;
  qword_10230BBA8 = 0;
  v0 = operator new(0x48uLL);
  qword_10230BBB0 = (uint64_t)v0 + 72;
  unk_10230BBB8 = (char *)v0 + 72;
  v0[2] = xmmword_101C3B198;
  v0[3] = unk_101C3B1A8;
  *((_QWORD *)v0 + 8) = 0x4120000040A00000;
  *v0 = xmmword_101C3B178;
  v0[1] = unk_101C3B188;
  qword_10230BBA8 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_10041C534, &qword_10230BBA8, (void *)&_mh_execute_header);
  qword_10230BBC8 = 0;
  unk_10230BBD0 = 0;
  qword_10230BBC0 = 0;
  v1 = operator new(0x44uLL);
  qword_10230BBC8 = (uint64_t)(v1 + 17);
  unk_10230BBD0 = v1 + 17;
  v1[16] = 1120403456;
  *(_OWORD *)v1 = xmmword_101C3B1C0;
  *((_OWORD *)v1 + 1) = unk_101C3B1D0;
  *((_OWORD *)v1 + 2) = xmmword_101C3B1E0;
  *((_OWORD *)v1 + 3) = unk_101C3B1F0;
  qword_10230BBC0 = (uint64_t)v1;
  __cxa_atexit((void (*)(void *))sub_10041C534, &qword_10230BBC0, (void *)&_mh_execute_header);
  qword_10230BBE0 = 0;
  unk_10230BBE8 = 0;
  qword_10230BBD8 = 0;
  v2 = operator new(0x64uLL);
  qword_10230BBE0 = (uint64_t)(v2 + 25);
  unk_10230BBE8 = v2 + 25;
  v2[24] = 1203982336;
  *((_OWORD *)v2 + 2) = xmmword_101C3B224;
  *((_OWORD *)v2 + 3) = unk_101C3B234;
  *((_OWORD *)v2 + 4) = xmmword_101C3B244;
  *((_OWORD *)v2 + 5) = unk_101C3B254;
  *(_OWORD *)v2 = xmmword_101C3B204;
  *((_OWORD *)v2 + 1) = unk_101C3B214;
  qword_10230BBD8 = (uint64_t)v2;
  __cxa_atexit((void (*)(void *))sub_10041C534, &qword_10230BBD8, (void *)&_mh_execute_header);
  qword_10230BBF8 = 0;
  unk_10230BC00 = 0;
  qword_10230BBF0 = 0;
  v3 = operator new(0x54uLL);
  qword_10230BBF8 = (uint64_t)(v3 + 21);
  unk_10230BC00 = v3 + 21;
  v3[20] = 1092616192;
  *((_OWORD *)v3 + 2) = xmmword_101C3B288;
  *((_OWORD *)v3 + 3) = unk_101C3B298;
  *((_OWORD *)v3 + 4) = xmmword_101C3B2A8;
  *(_OWORD *)v3 = xmmword_101C3B268;
  *((_OWORD *)v3 + 1) = unk_101C3B278;
  qword_10230BBF0 = (uint64_t)v3;
  return __cxa_atexit((void (*)(void *))sub_10041C534, &qword_10230BBF0, (void *)&_mh_execute_header);
}

_QWORD *sub_10103AD28(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *result;

  result = (_QWORD *)sub_10103AD50(a1, "CLWifiService", a3);
  *result = off_10219B540;
  return result;
}

uint64_t sub_10103AD50(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_10219B650;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_10103ADD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10103ADEC(_QWORD *a1)
{
  *a1 = off_10219B540;
  if (qword_102311C30)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311C30 + 8))(qword_102311C30);
  qword_102311C30 = 0;
  return sub_10103AE34((uint64_t)a1);
}

uint64_t sub_10103AE34(uint64_t a1)
{
  *(_QWORD *)a1 = off_10219B650;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_10103AEB0(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10103AF24;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230BC30 != -1)
    dispatch_once(&qword_10230BC30, block);
  return qword_102311C30;
}

void sub_10103AF24()
{
  operator new();
}

void sub_10103AF6C()
{
  operator delete();
}

uint64_t sub_10103AF90(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(unsigned __int16 *)(result + 28);
  v3 = *(unsigned __int16 *)(result + 30);
  v4 = *(unsigned int *)(result + 32);
  if (v2 + v3 >= v4)
    v5 = *(unsigned int *)(result + 32);
  else
    v5 = 0;
  *(_DWORD *)(result + 28 + 4 * (v2 + v3 - v5) + 8) = *a2;
  if (v4 <= v3)
  {
    v6 = v2 + 1;
    if (v6 < v4)
      LOWORD(v4) = 0;
    *(_WORD *)(result + 28) = v6 - v4;
  }
  else
  {
    *(_WORD *)(result + 30) = v3 + 1;
  }
  *(_BYTE *)(result + 12) = 1;
  v7 = *(unsigned __int16 *)(result + 1078);
  v8 = *(unsigned int *)(result + 1080);
  v9 = *(unsigned __int16 *)(result + 1076);
  if (v9 + v7 >= v8)
    v10 = *(unsigned int *)(result + 1080);
  else
    v10 = 0;
  *(_DWORD *)(result + 1076 + 4 * (v9 + v7 - v10) + 8) = a2[1];
  if (v8 <= v7)
  {
    if (v9 + 1 < v8)
      LOWORD(v8) = 0;
    *(_WORD *)(result + 1076) = v9 + 1 - v8;
  }
  else
  {
    *(_WORD *)(result + 1078) = v7 + 1;
  }
  *(_BYTE *)(result + 1060) = 1;
  v11 = *(unsigned __int16 *)(result + 2126);
  v12 = *(unsigned int *)(result + 2128);
  v13 = *(unsigned __int16 *)(result + 2124);
  if (v13 + v11 >= v12)
    v14 = *(unsigned int *)(result + 2128);
  else
    v14 = 0;
  *(_DWORD *)(result + 2124 + 4 * (v13 + v11 - v14) + 8) = a2[2];
  if (v12 <= v11)
  {
    if (v13 + 1 < v12)
      LOWORD(v12) = 0;
    *(_WORD *)(result + 2124) = v13 + 1 - v12;
  }
  else
  {
    *(_WORD *)(result + 2126) = v11 + 1;
  }
  *(_BYTE *)(result + 2108) = 1;
  return result;
}

void sub_10103B0E8(id a1)
{
  sub_100197040();
  if (sub_10075C870())
    qword_10230BC38 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLOdometerAlarmManagerSilo"));
}

void sub_10103B278(uint64_t a1, int *a2, uint64_t a3, void *a4)
{
  NSObject *v6;
  NSObject *v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  _DWORD v15[4];
  uint8_t buf[4];
  int v17;

  if (*a2 == 5)
  {
LABEL_8:
    objc_msgSend(a4, "handleLocationData:", a3);
    return;
  }
  if (!*a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219B760);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "BATCH: Should not be registered for location", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10219B760);
      LOWORD(v15[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "BATCH: Should not be registered for location", v15, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "void (anonymous namespace)::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void *)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    goto LABEL_8;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10219B760);
  v8 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    v9 = *a2;
    *(_DWORD *)buf = 67240192;
    v17 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "BATCH: Unexpected notification: %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219B760);
    v12 = *a2;
    v15[0] = 67240192;
    v15[1] = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "BATCH: Unexpected notification: %{public}d", v15, 8);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 0, "void (anonymous namespace)::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void *)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
}

void sub_10103B580(uint64_t a1, int *a2, uint64_t a3, void *a4)
{
  NSObject *v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (*a2 == 16)
  {
    _objc_msgSend(a4, "handleOdometerData:");
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219B760);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v6 = *a2;
      *(_DWORD *)buf = 67240192;
      v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "BATCH: Unexpected notification: %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10219B760);
      v7 = *a2;
      v10[0] = 67240192;
      v10[1] = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "BATCH: Unexpected notification: %{public}d", v10, 8);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "void (anonymous namespace)::onGpsNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void *)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

void sub_10103B85C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

int64_t sub_10103B870(id a1, id a2, id a3)
{
  double v5;
  double v6;
  double v7;
  double v9;
  double v10;
  double v11;

  objc_msgSend(a2, "odometerTarget");
  v6 = v5;
  objc_msgSend(a3, "odometerTarget");
  if (v6 < v7)
    return -1;
  objc_msgSend(a2, "odometerTarget");
  v10 = v9;
  objc_msgSend(a3, "odometerTarget");
  return v10 != v11;
}

void sub_10103B91C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10103BED0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10103C22C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10103C320(uint64_t a1)
{
  return _objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "firstAlarm"), "fire:withError:", 0, *(double *)(a1 + 40));
}

id sub_10103C4A4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "fire:withError:", +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 11, 0), -1.0);
}

void sub_10103C5F0(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10103C61C()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C3B5E8;
      v1[3] = unk_101C3B5F8;
      v1[4] = xmmword_101C3B608;
      v1[0] = xmmword_101C3B5C8;
      v1[1] = unk_101C3B5D8;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_10103C6F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_10103C708(uint64_t a1)
{
  NSObject *v2;
  id v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  *(_QWORD *)(a1 + 32) = 0;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_10219B780);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLTelephonyIratManager", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219B780);
    v10[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLTelephonyIratManager", v10, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "CLTelephonyIratManager::CLTelephonyIratManager()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  sub_100197040();
  if ((sub_10075FBA4() & 1) != 0 || (sub_100197040(), sub_1000C4240()))
  {
    v3 = objc_alloc_init((Class)WRM_iRATInterface);
    *(_QWORD *)a1 = v3;
    if (v3)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219B780);
      v4 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        v12 = 0;
        v13 = 2082;
        v14 = "";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#irat,CLTelephonyIratManager initialized\"}", buf, 0x12u);
      }
      objc_msgSend(*(id *)a1, "registerClient:queue:", 16, dispatch_queue_create("com.apple.Client.wirelesscoexmanager", 0));
      sub_10103CAC4(a1, 1u);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219B780);
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289026;
        v12 = 0;
        v13 = 2082;
        v14 = "";
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#irat,CLTelephonyIratManager init failed\"}", buf, 0x12u);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219B780);
      }
      v6 = qword_1022A0078;
      if (os_signpost_enabled((os_log_t)qword_1022A0078))
      {
        *(_DWORD *)buf = 68289026;
        v12 = 0;
        v13 = 2082;
        v14 = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#irat,CLTelephonyIratManager init failed", "{\"msg%{public}.0s\":\"#irat,CLTelephonyIratManager init failed\"}", buf, 0x12u);
      }
    }
  }
  return a1;
}

void sub_10103CAA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;

  sub_100008848(v1, *v2);
  _Unwind_Resume(a1);
}

void sub_10103CAC4(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  unsigned int v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  unsigned int v28;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_10219B780);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    if (a2 > 4)
      v5 = "AssertLevelUnknown";
    else
      v5 = (&off_10219B7A0)[a2];
    *(_DWORD *)buf = 68289282;
    v22 = 0;
    v23 = 2082;
    v24 = "";
    v25 = 2082;
    v26 = (void *)v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#irat,assertCommCenterBaseBand\", \"level\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (!*(_QWORD *)a1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219B780);
    v9 = qword_1022A0078;
    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      return;
    *(_DWORD *)buf = 68289026;
    v22 = 0;
    v23 = 2082;
    v24 = "";
    v10 = "{\"msg%{public}.0s\":\"#irat,skip irat assertion for this platform. IratClient not initialized\"}";
LABEL_24:
    v11 = v9;
    v12 = 18;
LABEL_25:
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, v10, buf, v12);
    return;
  }
  sub_100197040();
  v6 = sub_10075FBA4();
  if ((v6 & 1) == 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219B780);
    v9 = qword_1022A0078;
    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      return;
    *(_DWORD *)buf = 68289026;
    v22 = 0;
    v23 = 2082;
    v24 = "";
    v10 = "{\"msg%{public}.0s\":\"#irat,skip irat assertion for un-supported platform\"}";
    goto LABEL_24;
  }
  if (*(_DWORD *)(a1 + 8) == a2)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219B780);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      if (a2 > 4)
        v8 = "AssertLevelUnknown";
      else
        v8 = (&off_10219B7A0)[a2];
      *(_DWORD *)buf = 68289282;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2082;
      v26 = (void *)v8;
      v10 = "{\"msg%{public}.0s\":\"#irat,skip repeated irat assertion\", \"level\":%{public, location:escape_only}s}";
      v11 = v7;
      v12 = 28;
      goto LABEL_25;
    }
  }
  else
  {
    v20 = 0;
    if (sub_10103CFD4(v6, a2, &v20))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219B780);
      v13 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        if (a2 > 4)
          v14 = "AssertLevelUnknown";
        else
          v14 = (&off_10219B7A0)[a2];
        v17 = v20;
        *(_DWORD *)buf = 68289538;
        v22 = 0;
        v23 = 2082;
        v24 = "";
        v25 = 2082;
        v26 = (void *)v14;
        v27 = 1026;
        v28 = v20;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#irat,spi,assertCommCenterBaseband\", \"assertion\":%{public, location:escape_only}s, \"wrmState\":%{public}d}", buf, 0x22u);
      }
      else
      {
        v17 = v20;
      }
      *(_DWORD *)(a1 + 8) = a2;
      objc_msgSend(*(id *)a1, "assertCommCenterBaseBand:", v17);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219B780);
      v15 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        v16 = a2 > 4 ? "AssertLevelUnknown" : (&off_10219B7A0)[a2];
        *(_DWORD *)buf = 68289282;
        v22 = 0;
        v23 = 2082;
        v24 = "";
        v25 = 2082;
        v26 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#irat,Assertion level not implemented/supported\", \"assertion\":%{public, location:escape_only}s}", buf, 0x1Cu);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219B780);
      }
      v18 = qword_1022A0078;
      if (os_signpost_enabled((os_log_t)qword_1022A0078))
      {
        if (a2 > 4)
          v19 = "AssertLevelUnknown";
        else
          v19 = (&off_10219B7A0)[a2];
        *(_DWORD *)buf = 68289282;
        v22 = 0;
        v23 = 2082;
        v24 = "";
        v25 = 2082;
        v26 = (void *)v19;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#irat,Assertion level not implemented/supported", "{\"msg%{public}.0s\":\"#irat,Assertion level not implemented/supported\", \"assertion\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
    }
  }
}

BOOL sub_10103CFD4(uint64_t a1, int a2, _DWORD *a3)
{
  _BOOL8 result;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  const char *v8;
  int v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;

  switch(a2)
  {
    case 3:
      result = 1;
      *a3 = 1;
      return result;
    case 2:
      *a3 = 2;
      return 1;
    case 1:
      *a3 = 0;
      return 1;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_10219B780);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    v6 = "AssertLevelUnknown";
    if (a2 == 4)
      v6 = "kOnline";
    v9 = 68289282;
    v10 = 0;
    v12 = "";
    v11 = 2082;
    if (!a2)
      v6 = "kNone";
    v13 = 2082;
    v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#irat,Invalid conversion to WRM state requested\", \"state\":%{public, location:escape_only}s}", (uint8_t *)&v9, 0x1Cu);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219B780);
  }
  v7 = qword_1022A0078;
  result = os_signpost_enabled((os_log_t)qword_1022A0078);
  if (result)
  {
    v8 = "AssertLevelUnknown";
    if (a2 == 4)
      v8 = "kOnline";
    v9 = 68289282;
    v10 = 0;
    v12 = "";
    v11 = 2082;
    if (!a2)
      v8 = "kNone";
    v13 = 2082;
    v14 = v8;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#irat,Invalid conversion to WRM state requested", "{\"msg%{public}.0s\":\"#irat,Invalid conversion to WRM state requested\", \"state\":%{public, location:escape_only}s}", (uint8_t *)&v9, 0x1Cu);
    return 0;
  }
  return result;
}

void sub_10103D1E4(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  const char *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  NSObject *v14;
  const char *v15;
  const char *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  NSObject *v21;
  char *v22;
  char *v23;
  NSObject *v24;
  const char *v25;
  const char *v26;
  uint64_t **v28;
  unsigned int v30;
  uint8_t buf[8];
  __int16 v32;
  const char *v33;
  __int16 v34;
  void *v35;
  __int16 v36;
  void *v37;

  v30 = a2;
  v3 = *(uint64_t **)(a1 + 16);
  v28 = (uint64_t **)(a1 + 16);
  v4 = (uint64_t *)(a1 + 24);
  v5 = qword_1022A0070;
  if (v3 != (uint64_t *)(a1 + 24))
  {
    do
    {
      v7 = *((int *)v3 + 7);
      v6 = *((int *)v3 + 8);
      if (v5 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219B780);
      v8 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v9 = "AssertClientUnknown";
        if (v7 <= 3)
          v9 = (&off_10219B7C8)[v7];
        v10 = "AssertLevelUnknown";
        if (v6 <= 4)
          v10 = (&off_10219B7A0)[v6];
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        v32 = 2082;
        v33 = "";
        v34 = 2082;
        v35 = (void *)v9;
        v36 = 2082;
        v37 = (void *)v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#irat,assertCommCenter,existingVote\", \"client\":%{public, location:escape_only}s, \"level\":%{public, location:escape_only}s}", buf, 0x26u);
        v5 = qword_1022A0070;
      }
      else
      {
        v5 = -1;
      }
      v11 = (uint64_t *)v3[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (uint64_t *)v3[2];
          v13 = *v12 == (_QWORD)v3;
          v3 = v12;
        }
        while (!v13);
      }
      v3 = v12;
    }
    while (v12 != v4);
  }
  if (v5 != -1)
    dispatch_once(&qword_1022A0070, &stru_10219B780);
  v14 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    if (v30 > 3)
      v15 = "AssertClientUnknown";
    else
      v15 = (&off_10219B7C8)[v30];
    if (a3 > 4)
      v16 = "AssertLevelUnknown";
    else
      v16 = (&off_10219B7A0)[a3];
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    v32 = 2082;
    v33 = "";
    v34 = 2082;
    v35 = (void *)v15;
    v36 = 2082;
    v37 = (void *)v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#irat,assertCommCenter,newVote\", \"client\":%{public, location:escape_only}s, \"level\":%{public, location:escape_only}s}", buf, 0x26u);
  }
  *(_QWORD *)buf = &v30;
  *((_DWORD *)sub_100136FD4(v28, (int *)&v30, (uint64_t)&unk_101B9EB60, (unsigned int **)buf) + 8) = a3;
  v17 = *v28;
  if (*v28 == v4)
    goto LABEL_40;
  v18 = *v28;
  while (1)
  {
    v19 = (uint64_t *)v18[1];
    v20 = v18;
    if (v19)
    {
      do
      {
        v18 = v19;
        v19 = (uint64_t *)*v19;
      }
      while (v19);
    }
    else
    {
      do
      {
        v18 = (uint64_t *)v20[2];
        v13 = *v18 == (_QWORD)v20;
        v20 = v18;
      }
      while (!v13);
    }
    if (v18 == v4)
      break;
    if (*((_DWORD *)v17 + 8) < *((_DWORD *)v18 + 8))
      v17 = v18;
  }
  if (v4 == v17)
  {
LABEL_40:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219B780);
    v21 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v22 = v30 > 3 ? "AssertClientUnknown" : (&off_10219B7C8)[v30];
      v23 = a3 > 4 ? "AssertLevelUnknown" : (&off_10219B7A0)[a3];
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      v32 = 2082;
      v33 = "";
      v34 = 2082;
      v35 = v22;
      v36 = 2082;
      v37 = v23;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#irat,unexpected, max not found\", \"client\":%{public, location:escape_only}s, \"assertion\":%{public, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219B780);
    }
    v24 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      if (v30 > 3)
        v25 = "AssertClientUnknown";
      else
        v25 = (&off_10219B7C8)[v30];
      if (a3 > 4)
        v26 = "AssertLevelUnknown";
      else
        v26 = (&off_10219B7A0)[a3];
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      v32 = 2082;
      v33 = "";
      v34 = 2082;
      v35 = (void *)v25;
      v36 = 2082;
      v37 = (void *)v26;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v24, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#irat,unexpected, max not found", "{\"msg%{public}.0s\":\"#irat,unexpected, max not found\", \"client\":%{public, location:escape_only}s, \"assertion\":%{public, location:escape_only}s}", buf, 0x26u);
    }
  }
  else
  {
    sub_10103CAC4(a1, *((_DWORD *)v17 + 8));
  }
}

id sub_10103D6E4(void **a1, uint64_t a2)
{
  void *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v8[8];
  uint8_t buf[1640];

  v3 = *a1;
  if (v3)
    return _objc_msgSend(v3, "getStreamingInfo:linkType:", a2, 0);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_10219B780);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#irat,skip fetching streamingInfo. IratClient is nil", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219B780);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#irat,skip fetching streamingInfo. IratClient is nil", v8, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLTelephonyIratManager::fetchStreamingInfo(CLIratStreamingInfoBlockHandler)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  return (id)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(a2 + 16))(a2, 0, 0, 0, 0);
}

void sub_10103D8D0(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10103D8FC(_QWORD *a1, void *a2)
{
  *a1 = a2;
  sub_100DE187C((uint64_t)(a1 + 1), a2);
}

void sub_10103DBA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v2 + 1152);
  *(_QWORD *)(v2 + 1152) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *v3;
  *v3 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_100DE1ACC(v1);
  _Unwind_Resume(a1);
}

void sub_10103DBFC(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLMotionCuesVehicleConfidenceBooster::onMotionStateUpdate");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10219B808);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionCuesVehicleConfidenceBooster::onMotionStateUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219B808);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionCuesVehicleConfidenceBooster::onMotionStateUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10103EE40((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10103DDB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10103DDD4(uint64_t a1, _DWORD *a2, unsigned __int8 *a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLMotionCuesVehicleConfidenceBooster::onDisplayStateUpdate");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10219B808);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionCuesVehicleConfidenceBooster::onDisplayStateUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219B808);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionCuesVehicleConfidenceBooster::onDisplayStateUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10103EE64((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10103DF8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10103DFB0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_1022A0300 != -1)
    dispatch_once(&qword_1022A0300, &stru_10219B7E8);
  v2 = qword_1022A0308;
  if (os_log_type_enabled((os_log_t)qword_1022A0308, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[CLMotionCuesVehicleConfidenceBooster] ~CLMotionCuesVehicleConfidenceBooster", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0300 != -1)
      dispatch_once(&qword_1022A0300, &stru_10219B7E8);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0308, 2, "[CLMotionCuesVehicleConfidenceBooster] ~CLMotionCuesVehicleConfidenceBooster", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "CLMotionCuesVehicleConfidenceBooster::~CLMotionCuesVehicleConfidenceBooster()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  sub_10103E198((id *)a1);

  v3 = *(_QWORD *)(a1 + 1152);
  *(_QWORD *)(a1 + 1152) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 1144);
  *(_QWORD *)(a1 + 1144) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_100DE1ACC(a1 + 8);
  return a1;
}

void sub_10103E18C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

id *sub_10103E198(id *result)
{
  id *v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  __int16 v5[8];
  uint8_t buf[1640];

  if (*((_BYTE *)result + 1179))
  {
    v1 = result;
    if (qword_1022A0300 != -1)
      dispatch_once(&qword_1022A0300, &stru_10219B7E8);
    v2 = qword_1022A0308;
    if (os_log_type_enabled((os_log_t)qword_1022A0308, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[CLMotionCuesVehicleConfidenceBooster] Stopping auto stop timer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0300 != -1)
        dispatch_once(&qword_1022A0300, &stru_10219B7E8);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0308, 0, "[CLMotionCuesVehicleConfidenceBooster] Stopping auto stop timer", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionCuesVehicleConfidenceBooster::stopAutoStopTimer()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    result = (id *)objc_msgSend(v1[145], "invalidate");
    *((_BYTE *)v1 + 1179) = 0;
  }
  return result;
}

void sub_10103E340(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v14;
  double v16;
  NSObject *v17;
  float v18;
  uint64_t v19;
  NSObject *v20;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  float v27;
  const char *v28;
  uint8_t *v29;
  const char *v30;
  uint8_t *v31;
  uint64_t v32;
  int v33;
  double v34;
  uint8_t buf[4];
  double v36;

  if (qword_1022A0300 != -1)
    dispatch_once(&qword_1022A0300, &stru_10219B7E8);
  v4 = qword_1022A0308;
  if (os_log_type_enabled((os_log_t)qword_1022A0308, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[CLMotionCuesVehicleConfidenceBooster] updateFromActivity", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0300 != -1)
      dispatch_once(&qword_1022A0300, &stru_10219B7E8);
    LOWORD(v33) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0308, 2, "[CLMotionCuesVehicleConfidenceBooster] updateFromActivity", &v33, 2);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionCuesVehicleConfidenceBooster::updateFromActivity(const CLMotionActivity &)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  if (CLMotionActivity::isDriving((CLMotionActivity *)a2))
  {
    if (*(_BYTE *)(a1 + 1180))
    {
      if (qword_1022A0300 != -1)
        dispatch_once(&qword_1022A0300, &stru_10219B7E8);
      v5 = qword_1022A0308;
      if (os_log_type_enabled((os_log_t)qword_1022A0308, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[CLMotionCuesVehicleConfidenceBooster] Driving detected, stopping GNSS updates", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0300 != -1)
          dispatch_once(&qword_1022A0300, &stru_10219B7E8);
        LOWORD(v33) = 0;
        LODWORD(v32) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0308, 0, "[CLMotionCuesVehicleConfidenceBooster] Driving detected, stopping GNSS updates", &v33, v32);
        v26 = (uint8_t *)v25;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionCuesVehicleConfidenceBooster::updateFromActivity(const CLMotionActivity &)", "%s\n", v25);
        if (v26 != buf)
          free(v26);
      }
      *(_BYTE *)(a1 + 1180) = 0;
    }
    sub_100DE18FC((double *)(a1 + 8));
    sub_10103E198((id *)a1);
  }
  else
  {
    _H10 = *(_WORD *)(a2 + 74);
    __asm { FCVT            S8, H10 }
    *(_BYTE *)(a1 + 1180) = 1;
    _H9 = *(_WORD *)(a1 + 1176);
    if (qword_1022A0300 != -1)
      dispatch_once(&qword_1022A0300, &stru_10219B7E8);
    __asm { FCVT            D10, H10 }
    v14 = qword_1022A0308;
    if (os_log_type_enabled((os_log_t)qword_1022A0308, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v36 = _D10;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[CLMotionCuesVehicleConfidenceBooster] mostRecentShortTermMean %f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0300 != -1)
        dispatch_once(&qword_1022A0300, &stru_10219B7E8);
      v33 = 134217984;
      v34 = _D10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0308, 0, "[CLMotionCuesVehicleConfidenceBooster] mostRecentShortTermMean %f", COERCE_DOUBLE(&v33));
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionCuesVehicleConfidenceBooster::updateFromActivity(const CLMotionActivity &)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    __asm { FCVT            S0, H9 }
    if (_S8 >= _S0 && !*(_BYTE *)(a1 + 280))
    {
      v16 = 0.0;
      if (!*(_BYTE *)(a1 + 1178) && *(double *)(a1 + 1168) > 0.0)
        v16 = sub_1001FCBB4() - *(double *)(a1 + 1168);
      if (qword_1022A0300 != -1)
        dispatch_once(&qword_1022A0300, &stru_10219B7E8);
      v17 = qword_1022A0308;
      if (os_log_type_enabled((os_log_t)qword_1022A0308, OS_LOG_TYPE_DEFAULT))
      {
        v18 = v16;
        *(_DWORD *)buf = 134217984;
        v36 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "[CLMotionCuesVehicleConfidenceBooster] timeSinceDisplayOff %f", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0300 != -1)
          dispatch_once(&qword_1022A0300, &stru_10219B7E8);
        v27 = v16;
        v33 = 134217984;
        v34 = v27;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0308, 0, "[CLMotionCuesVehicleConfidenceBooster] timeSinceDisplayOff %f", COERCE_DOUBLE(&v33));
        v29 = (uint8_t *)v28;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionCuesVehicleConfidenceBooster::updateFromActivity(const CLMotionActivity &)", "%s\n", v28);
        if (v29 != buf)
          free(v29);
      }
      if (v16 <= 60.0)
      {
        if (qword_1022A0300 != -1)
          dispatch_once(&qword_1022A0300, &stru_10219B7E8);
        v19 = a1 + 8;
        v20 = qword_1022A0308;
        if (os_log_type_enabled((os_log_t)qword_1022A0308, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[CLMotionCuesVehicleConfidenceBooster] Potential driving detected, starting GNSS updates", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0300 != -1)
            dispatch_once(&qword_1022A0300, &stru_10219B7E8);
          LOWORD(v33) = 0;
          LODWORD(v32) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0308, 0, "[CLMotionCuesVehicleConfidenceBooster] Potential driving detected, starting GNSS updates", &v33, v32);
          v31 = (uint8_t *)v30;
          sub_100512490("Generic", 1, 0, 2, "void CLMotionCuesVehicleConfidenceBooster::updateFromActivity(const CLMotionActivity &)", "%s\n", v30);
          if (v31 != buf)
            free(v31);
        }
        sub_100DE1AD0(v19);
      }
    }
  }
}

id *sub_10103EA6C(uint64_t a1, int a2)
{
  NSObject *v4;
  id *result;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (qword_1022A0300 != -1)
    dispatch_once(&qword_1022A0300, &stru_10219B7E8);
  v4 = qword_1022A0308;
  if (os_log_type_enabled((os_log_t)qword_1022A0308, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[CLMotionCuesVehicleConfidenceBooster] updateFromDisplayChange %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0300 != -1)
      dispatch_once(&qword_1022A0300, &stru_10219B7E8);
    v8[0] = 67109120;
    v8[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0308, 2, "[CLMotionCuesVehicleConfidenceBooster] updateFromDisplayChange %d", v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionCuesVehicleConfidenceBooster::updateFromDisplayChange(BOOL)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  if ((a2 & 1) != 0)
  {
    result = sub_10103E198((id *)a1);
  }
  else
  {
    *(double *)(a1 + 1168) = sub_1001FCBB4();
    result = sub_10103EC3C((id *)a1);
  }
  *(_BYTE *)(a1 + 1178) = a2;
  return result;
}

id *sub_10103EC3C(id *result)
{
  id *v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _QWORD v5[5];
  __int16 v6[8];
  uint8_t buf[1640];

  if (!*((_BYTE *)result + 1179))
  {
    v1 = result;
    if (qword_1022A0300 != -1)
      dispatch_once(&qword_1022A0300, &stru_10219B7E8);
    v2 = qword_1022A0308;
    if (os_log_type_enabled((os_log_t)qword_1022A0308, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[CLMotionCuesVehicleConfidenceBooster] Starting auto stop timer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0300 != -1)
        dispatch_once(&qword_1022A0300, &stru_10219B7E8);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0308, 2, "[CLMotionCuesVehicleConfidenceBooster] Starting auto stop timer", v6, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionCuesVehicleConfidenceBooster::startAutoStopTimer()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    if (objc_msgSend(v1[145], "handler"))
      sub_10193B15C();
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10103EEE0;
    v5[3] = &unk_10212ECA0;
    v5[4] = v1;
    objc_msgSend(v1[145], "setHandler:", v5);
    result = (id *)objc_msgSend(v1[145], "setNextFireDelay:interval:", 60.0, 1.79769313e308);
    *((_BYTE *)v1 + 1179) = 1;
  }
  return result;
}

void sub_10103EE40(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 != 1)
    sub_10193B184();
  sub_10103E340(a1, a4);
}

id *sub_10103EE64(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned __int8 *a4)
{
  if (*a3 != 10)
    sub_10193B1AC();
  return sub_10103EA6C(a1, *a4);
}

void sub_10103EE88(id a1)
{
  qword_1022A0308 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MotionCues");
}

void sub_10103EEB4(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

double *sub_10103EEE0(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0300 != -1)
    dispatch_once(&qword_1022A0300, &stru_10219B7E8);
  v2 = qword_1022A0308;
  if (os_log_type_enabled((os_log_t)qword_1022A0308, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[CLMotionCuesVehicleConfidenceBooster] Auto stop timer expired; stopping session",
      buf,
      2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0300 != -1)
      dispatch_once(&qword_1022A0300, &stru_10219B7E8);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0308, 0, "[CLMotionCuesVehicleConfidenceBooster] Auto stop timer expired; stopping session",
      v6,
      2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionCuesVehicleConfidenceBooster::startAutoStopTimer()_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return sub_100DE18FC((double *)(v1 + 8));
}

uint64_t sub_10103F078(uint64_t a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_10103F138(a1, "HRRecoveryInputWRHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = off_10219B838;
  *(_QWORD *)(a1 + 72) = off_10219B900;
  *(_QWORD *)(a1 + 360) = off_10219B950;
  *(_BYTE *)(a1 + 368) = 0;
  sub_10103FB68(a1);
  return a1;
}

void sub_10103F10C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  sub_10103F5A0(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_10103F138(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_102138DD8;
  *(_QWORD *)a1 = off_10219BBC0;
  *(_QWORD *)(a1 + 72) = off_10219BC68;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_10219BBC0;
  *(_QWORD *)(a1 + 72) = off_10219BC68;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_DWORD *)(a1 + 272) = 3;
  *(_DWORD *)(a1 + 280) = 12000;
  *(_QWORD *)(a1 + 288) = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 296));
  *(_QWORD *)(a1 + 296) = &off_102138DD8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_10103F4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[36] = off_102138DA8;
  sub_100427950(v27);
  sub_1005CBF30(v26);
  sub_101138068(a12);
  *v24 = off_102138DA8;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_10103F598()
{
  JUMPOUT(0x10103F578);
}

_QWORD *sub_10103F5A0(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_10219BC68;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_10219BBC0;
  a1[36] = off_102138DA8;
  sub_100427950(a1 + 37);
  sub_1005CBF30(a1 + 22);
  sub_101138068(v2);
  *a1 = off_102138DA8;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_10103F620(uint64_t a1)
{
  return sub_10103F5A0((_QWORD *)(a1 - 72));
}

_QWORD *sub_10103F628(uint64_t a1)
{
  return sub_10103F5A0((_QWORD *)(a1 - 360));
}

void sub_10103F630(_QWORD *a1)
{
  sub_10103F5A0(a1);
  operator delete();
}

void sub_10103F654(uint64_t a1)
{
  sub_10103F5A0((_QWORD *)(a1 - 72));
  operator delete();
}

void sub_10103F67C(uint64_t a1)
{
  sub_10103F5A0((_QWORD *)(a1 - 360));
  operator delete();
}

uint64_t sub_10103F6A4(uint64_t a1, uint64_t a2)
{
  if (*(double *)(*(_QWORD *)(a2 + 8) - 16) == 1.79769313e308 && sub_10008950C(a1 + 72))
  {
    if (!*(_BYTE *)(a1 + 368))
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    sub_10001E638(*(_QWORD *)(a1 + 80));
    CFAbsoluteTimeGetCurrent();
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM HRRecoveryInputWRHistory WHERE startTime < ?");
  }
  return -1;
}

void sub_10103F7D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10103F7F4(uint64_t a1, uint64_t a2)
{
  return sub_10103F6A4(a1 - 72, a2);
}

uint64_t sub_10103F7FC(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from HRRecoveryInputWRHistory ORDER BY startTime ASC");
  }
  return result;
}

void sub_10103FA18(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10103FA40(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  sub_101040284(a1, a2);
  return 0;
}

uint64_t sub_10103FA9C(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT COUNT(*) FROM HRRecoveryInputWRHistory");
  return 0xFFFFFFFFLL;
}

void sub_10103FB3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10103FB60(uint64_t a1)
{
  return sub_10103FA9C(a1 - 72);
}

uint64_t sub_10103FB68(uint64_t a1)
{
  uint64_t result;

  result = sub_1000CC4F4(*(_QWORD *)(a1 + 80));
  if ((_DWORD)result)
  {
    sub_10103FBC4(a1);
    result = sub_100634364(*(_QWORD *)(a1 + 80), "HRRecoveryInputWRHistory", (const char **)&off_10219B9F0, (const std::string::value_type **)&off_1022FC9E8, 0);
    *(_BYTE *)(a1 + 368) = 1;
  }
  return result;
}

BOOL sub_10103FBC4(uint64_t a1)
{
  _BOOL8 result;
  const char *v3;
  int v4;
  __int16 v5;
  char v6;
  char v7;

  result = sub_100635B3C(*(_QWORD *)(a1 + 80), "HRRecoveryInputWRHistory");
  if (result)
  {
    v3 = "userMets";
    v4 = 5;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    sub_10063A8D4(*(_QWORD *)(a1 + 80), "HRRecoveryInputWRHistory", (uint64_t)"userMets", (uint64_t)&v3);
  }
  return result;
}

void sub_10103FFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v61;

  if (a21 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a23);
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  sub_1018B38B4((uint64_t)&a61);
  _Unwind_Resume(a1);
}

_QWORD *sub_101040040@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "HRRecoveryInputWRHistory");
}

_QWORD *sub_101040050@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "HRRecoveryInputWRHistory");
}

uint64_t sub_101040060(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM HRRecoveryInputWRHistory");
  return result;
}

void sub_1010400F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101040114(uint64_t a1)
{
  return sub_101040060(a1 - 72);
}

uint64_t sub_10104011C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100131938(&v3, (uint64_t)"CLHRRecoveryInputWRRecorderDb.insertRecord", 0);
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "INSERT INTO HRRecoveryInputWRHistory (startTime, mets, gradeType, grade, userMets, userMetsSource) VALUES (?, ?, ?, ?, ?, ?)");
  }
  return result;
}

void sub_101040248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101040278(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_101040284(a2, a3);
}

uint64_t sub_101040284(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  sqlite3_stmt *v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  uint64_t result;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)a2 = sqlite3_column_int(v4, 0);
  v5 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v5, 1);
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v6, 2);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 24) = sqlite3_column_int(v7, 3);
  v8 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 32) = sqlite3_column_double(v8, 4);
  v9 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 40) = sqlite3_column_double(v9, 5);
  v10 = (sqlite3_stmt *)sub_100026CC8(*a1);
  result = sqlite3_column_int(v10, 6);
  *(_DWORD *)(a2 + 48) = result;
  return result;
}

uint64_t sub_101040334(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  _QWORD v9[3];
  __int16 v10;
  uint8_t buf[16];

  v3 = a1 + 112;
  v2 = *(_QWORD *)(a1 + 112);
  v4 = a1 + 72;
  v9[1] = a1 + 112;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 112);
  v10 = 256;
  if ((sub_10008950C(v4) & 1) != 0)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM HRRecoveryInputWRHistory WHERE startTime > ? and startTime < ? ORDER BY startTime ASC LIMIT ?");
  if (qword_10229FF60 != -1)
    dispatch_once(&qword_10229FF60, &stru_10219BB70);
  v5 = qword_10229FF68;
  if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "StepCountHistory not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_10219BB70);
    LOWORD(v9[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 2, "StepCountHistory not accessible", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual CMError CLHRRecoveryInputWRRecorderDb::queryHRRecoveryInputWRInTimeRange(CFAbsoluteTime, CFAbsoluteTime, int, std::vector<HRRecoveryInputWR> &) const", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  return 109;
}

void sub_10104073C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101040788(uint64_t a1)
{
  return sub_101040334(a1 - 360);
}

uint64_t sub_101040790(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  _QWORD v9[3];
  __int16 v10;
  uint8_t buf[16];

  v3 = a1 + 112;
  v2 = *(_QWORD *)(a1 + 112);
  v4 = a1 + 72;
  v9[1] = a1 + 112;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 112);
  v10 = 256;
  if ((sub_10008950C(v4) & 1) != 0)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from HRRecoveryInputWRHistory ORDER BY startTime ASC");
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_10219BB90);
  v5 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "HRRecoveryInputWRHistory not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10219BB90);
    LOWORD(v9[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "HRRecoveryInputWRHistory not accessible", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual CMError CLHRRecoveryInputWRRecorderDb::queryHRRecoveryInputWRAllRecords(std::vector<HRRecoveryInputWR> &) const", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  return 109;
}

void sub_101040B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101040B94(uint64_t a1)
{
  return sub_101040790(a1 - 360);
}

uint64_t sub_101040B9C(uint64_t a1, void *a2)
{
  NSObject *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  size_t v8;
  std::string *v9;
  void **v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  void *v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v20;
  std::string *v21;
  void *v22[2];
  int64_t v23;
  std::string v24;
  void *__p[4];
  std::string buf[68];

  if (!sub_100635E80(*(_QWORD *)(a1 + 80), (char *)a2))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219BCA8);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219BCA8);
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice %{public}s needs autoincrement migration", __p, 12);
      v21 = (std::string *)v20;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<HRRecoveryInputWR, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = HRRecoveryInputWR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    memset(__p, 0, 24);
    sub_1015A2E04(buf, (char *)a2);
    v5 = std::string::append(buf, "AutoIncr");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v23 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)v22 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_1015A2E04(buf, (char *)a2);
    v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_10001E638(*(_QWORD *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0)
      v8 = HIBYTE(__p[2]);
    else
      v8 = (size_t)__p[1];
    v9 = buf;
    sub_100259584((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v23 >= 0)
      v11 = v22;
    else
      v11 = (void **)v22[0];
    if (v23 >= 0)
      v12 = HIBYTE(v23);
    else
      v12 = (std::string::size_type)v22[1];
    v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v24.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    __p[0] = v14;
    __p[1] = v24.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v24.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      v15 = HIBYTE(__p[2]);
      v14 = __p[0];
    }
    if (v15 >= 0)
      v16 = (char *)__p;
    else
      v16 = (char *)v14;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), v16);
  }
  v17 = *(_QWORD *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = *(_QWORD *)(v17 + 88);
  sub_100053048(v17, v18);
  return 0;
}

void sub_101041D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a60 < 0)
    operator delete(a55);
  _Unwind_Resume(a1);
}

uint64_t sub_101042054(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17) < 0)
  {
    v1 = v16[1];
    operator delete(v16[0]);
    if (v1)
    {
LABEL_3:
      if (sub_10008950C(a1 + 9))
      {
        sub_100263E50((uint64_t)v16);
        v5 = sub_100263F7C(&v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        if ((v14 & 0x80u) == 0)
          v7 = v14;
        else
          v7 = (uint64_t)__p[1];
        v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
        sub_100263F7C(v8, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0)
          operator delete(__p[0]);
        v9 = a1[10];
        std::stringbuf::str(__p, v18);
        if ((v14 & 0x80u) == 0)
          v10 = (char *)__p;
        else
          v10 = (char *)__p[0];
        sub_1000CDA68(v9, v10);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17))
  {
    goto LABEL_3;
  }
  sub_10193B1D4(v4);
  v15 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(void **)((char *)v16
  v17 = v11;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf(v1);
  std::ios::~ios(&v20);
  return 2;
}

void sub_1010423E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_10104244C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10219BCA8);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219BCA8);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219BCA8);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<HRRecoveryInputWR, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = HRRecoveryInputWR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_101042A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_101042A6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  v5 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  return result;
}

id *sub_101042A88(uint64_t a1, __int128 *a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v25;
  const char *v26;
  uint8_t *v27;
  double v28;
  const char *v29;
  uint8_t *v30;
  const char *v31;
  uint8_t *v32;
  double v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  id v41[2];
  int v42;
  double v43;
  __int16 v44;
  uint64_t v45;
  uint8_t buf[4];
  double v47;
  __int16 v48;
  uint64_t v49;

  v41[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v41[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v41);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v34 = 0;
  v35 = 0.0;
  v37 = 0;
  v36 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 3;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 104))(a1, &v34);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219BCA8);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10219BCA8);
        LOWORD(v42) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v42, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<HRRecoveryInputWR, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HRRecoveryInputWR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *((double *)a2 + 1);
    v8 = v35;
    v9 = v7 - v35;
    if (v7 - v35 < 0.0)
      v9 = -(v7 - v35);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219BCA8);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *((_QWORD *)a2 + 1);
        *(_DWORD *)buf = 134349312;
        v47 = v35;
        v48 = 2050;
        v49 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10219BCA8);
        v25 = *((_QWORD *)a2 + 1);
        v42 = 134349312;
        v43 = v35;
        v44 = 2050;
        v45 = v25;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v42, 22);
        v27 = (uint8_t *)v26;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<HRRecoveryInputWR, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HRRecoveryInputWR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v26);
        if (v27 != buf)
          free(v27);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *((double *)a2 + 1);
      v8 = v35;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10219BCA8);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *((double *)a2 + 1);
          *(_DWORD *)buf = 134217984;
          v47 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10219BCA8);
          v28 = *((double *)a2 + 1);
          v42 = 134217984;
          v43 = v28;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v42));
          v30 = (uint8_t *)v29;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<HRRecoveryInputWR, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HRRecoveryInputWR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v29);
          if (v30 != buf)
            free(v30);
        }
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v33 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_10219BCA8);
        v18 = v33;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v47 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10219BCA8);
        v42 = 134217984;
        v43 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v42));
        v32 = (uint8_t *)v31;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<HRRecoveryInputWR, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HRRecoveryInputWR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v31);
        if (v32 != buf)
          free(v32);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, __int128 *))(*(_QWORD *)a1 + 144))(a1, &v34, a1 + 224, a2);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *a2;
  v22 = a2[1];
  v23 = a2[2];
  *(_DWORD *)(a1 + 272) = *((_DWORD *)a2 + 12);
  *(_OWORD *)(a1 + 240) = v22;
  *(_OWORD *)(a1 + 256) = v23;
  *(_OWORD *)(a1 + 224) = v21;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v41);
}

void sub_1010431EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101043218(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_10193B340(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_101043478(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10193B4AC(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_1010436B0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10193B618(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

uint64_t sub_1010438D8(uint64_t a1)
{
  return sub_10104244C(a1 - 72);
}

void sub_1010438E0(id a1)
{
  qword_10229FF68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HRRecovery");
}

void sub_10104390C(id a1)
{
  qword_10229FCD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_101043938(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    sub_10193B784(v4);
    sub_100259694();
  }
  v12 = v15[1];
  operator delete(v15[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v15);
    v6 = sub_100263F7C(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v8 = v14;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_101043C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  sub_1018B38B4((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_101043CEC(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_101043DBC(id a1)
{
  qword_10230BC48 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLProxPDPAndALSPhoneNotifierSilo"));
}

uint64_t sub_101043E70(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101043FD0;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230BC58 != -1)
    dispatch_once(&qword_10230BC58, block);
  return qword_102311C38;
}

void sub_101043FD0()
{
  operator new();
}

void sub_101044018()
{
  operator delete();
}

void sub_10104403C(uint64_t a1, void *a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)sub_101044138(a1, "CLProxPDPAndALSPhoneNotifier", a2);
  *v2 = off_10219BCF8;
  v2[14] = 0;
  v2[15] = 0;
  operator new();
}

void sub_1010440FC()
{
  operator delete();
}

uint64_t sub_101044138(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_10219BEA0;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_1010441B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1010441D4(uint64_t *a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLProxPDPAndALSPhoneNotifier::onProxPDPData");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10219BE50);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLProxPDPAndALSPhoneNotifier::onProxPDPData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219BE50);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLProxPDPAndALSPhoneNotifier::onProxPDPData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_101044EA4(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_101044384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1010443A4(uint64_t *a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLProxPDPAndALSPhoneNotifier::onALSPhoneData");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10219BE50);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLProxPDPAndALSPhoneNotifier::onALSPhoneData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219BE50);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLProxPDPAndALSPhoneNotifier::onALSPhoneData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_101044F34(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_101044554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101044574(uint64_t a1)
{
  *(_QWORD *)a1 = off_10219BEA0;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_1010445E8(_QWORD *a1)
{
  *a1 = off_10219BCF8;
  sub_101044644((uint64_t)a1);
  return sub_101044574((uint64_t)a1);
}

void sub_101044620(_QWORD *a1)
{
  sub_1010445E8(a1);
  operator delete();
}

void sub_101044644(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  *(_BYTE *)(a1 + 108) = 1;
  v2 = sub_1001FBB04(0);
  sub_1000A4A6C(v2, 40, *(_QWORD *)(a1 + 112));
  v3 = *(_QWORD *)(a1 + 112);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)(a1 + 112) = 0;
  v4 = sub_1001FBB04(0);
  sub_1000A4A6C(v4, 41, *(_QWORD *)(a1 + 120));
  v5 = *(_QWORD *)(a1 + 120);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)(a1 + 120) = 0;
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10219BE70);
  v6 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLProxPDPAndALSPhoneNotifier is shutting down", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219BE70);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "CLProxPDPAndALSPhoneNotifier is shutting down", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLProxPDPAndALSPhoneNotifier::shutdown()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

_QWORD *sub_10104482C@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_1010448A4(uint64_t a1, _DWORD *a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  int v7;
  NSObject *v8;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  _WORD v14[8];
  uint8_t buf[1640];

  if (*a2 == 1)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219BE70);
    v8 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Received register for ALS Phone notification request", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219BE70);
      v14[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Received register for ALS Phone notification request", v14, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLProxPDPAndALSPhoneNotifier::registerForNotificationInternal(const CLProxPDPAndALSPhoneNotifier_Type::Notification &)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    v4 = sub_1001FBB04(0);
    v5 = *(_QWORD *)(a1 + 120);
    v6 = -1.0;
    v7 = 41;
    goto LABEL_15;
  }
  if (!*a2)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219BE70);
    v3 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Received register for prox PDP notification request", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219BE70);
      v14[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Received register for prox PDP notification request", v14, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLProxPDPAndALSPhoneNotifier::registerForNotificationInternal(const CLProxPDPAndALSPhoneNotifier_Type::Notification &)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    v4 = sub_1001FBB04(0);
    v5 = *(_QWORD *)(a1 + 112);
    v6 = -1.0;
    v7 = 40;
LABEL_15:
    sub_1000A4FD8(v4, v7, v5, v6);
  }
  return 1;
}

uint64_t sub_101044BA8(uint64_t a1, _DWORD *a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  _WORD v13[8];
  uint8_t buf[1640];

  if (*a2 == 1)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219BE70);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Received unregister for ALS Phone notification request", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219BE70);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Received unregister for ALS Phone notification request", v13, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLProxPDPAndALSPhoneNotifier::unregisterForNotificationInternal(const CLProxPDPAndALSPhoneNotifier_Type::Notification &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    v4 = sub_1001FBB04(0);
    v5 = *(_QWORD *)(a1 + 120);
    v6 = 41;
    goto LABEL_15;
  }
  if (!*a2)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219BE70);
    v3 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Received unregister for prox PDP notification request", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219BE70);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Received unregister for prox PDP notification request", v13, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLProxPDPAndALSPhoneNotifier::unregisterForNotificationInternal(const CLProxPDPAndALSPhoneNotifier_Type::Notification &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    v4 = sub_1001FBB04(0);
    v5 = *(_QWORD *)(a1 + 112);
    v6 = 40;
LABEL_15:
    sub_1000A4A6C(v4, v6, v5);
  }
  return 1;
}

uint64_t sub_101044EA4(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  __int16 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  __int16 v13;
  int v14;

  LODWORD(v8) = 0;
  result = sub_1001B7864(a1, (int *)&v8, 1);
  if ((_DWORD)result)
  {
    v5 = *a2;
    v6 = *(_DWORD *)((char *)a2 + 19);
    v7 = *(_WORD *)((char *)a2 + 17);
    v14 = 0;
    v8 = v5;
    v9 = *(_OWORD *)((char *)a2 + 23);
    v10 = *(uint64_t *)((char *)a2 + 39);
    v11 = v6;
    v12 = v7;
    v13 = 0;
    return (*(uint64_t (**)(uint64_t, int *, uint64_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v14, &v8, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

uint64_t sub_101044F34(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;

  LODWORD(v7) = 1;
  result = sub_1001B7864(a1, (int *)&v7, 1);
  if ((_DWORD)result)
  {
    v5 = *a2;
    v6 = *((_DWORD *)a2 + 5);
    v10 = 1;
    v7 = v5;
    v8 = v6;
    v9 = 0;
    return (*(uint64_t (**)(uint64_t, int *, uint64_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v10, &v7, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

uint64_t sub_101044FB8(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = &off_10219BFF0;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_10104508C()
{
  operator new();
}

void sub_101045138(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_101045174(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10219BE50);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_10219BE50);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLProxPDPAndALSPhoneNotifier_Type::Notification, CLProxPDPAndALSPhoneNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLProxPDPAndALSPhoneNotifier_Type::Notification, NotificationData_T = CLProxPDPAndALSPhoneNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_1010453E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FCAB8);
}

uint64_t sub_1010453FC(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  uint8_t buf[32];
  uint64_t v46;

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        v46 = 0;
        memset(buf, 0, sizeof(buf));
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, uint8_t *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_101047B6C();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022FCAB9;
        HIDWORD(v39) = v17;
        *(_QWORD *)buf = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10219BE50);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219BE50);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (uint8_t *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLProxPDPAndALSPhoneNotifier_Type::Notification, CLProxPDPAndALSPhoneNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLProxPDPAndALSPhoneNotifier_Type::Notification, NotificationData_T = CLProxPDPAndALSPhoneNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != buf)
      free(v38);
    return 0;
  }
  return result;
}

BOOL sub_101045860(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219BE50);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10219BE50);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLProxPDPAndALSPhoneNotifier_Type::Notification, CLProxPDPAndALSPhoneNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLProxPDPAndALSPhoneNotifier_Type::Notification, NotificationData_T = CLProxPDPAndALSPhoneNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_101045AE0(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10219BE50);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10219BE50);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLProxPDPAndALSPhoneNotifier_Type::Notification, CLProxPDPAndALSPhoneNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLProxPDPAndALSPhoneNotifier_Type::Notification, NotificationData_T = CLProxPDPAndALSPhoneNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_101045E68(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(__int128 **)(v7 + 64);
  if (!v11)
    return 0;
  v12 = *v11;
  v13 = v11[1];
  *(_QWORD *)(a3 + 32) = *((_QWORD *)v11 + 4);
  *(_OWORD *)a3 = v12;
  *(_OWORD *)(a3 + 16) = v13;
  return 1;
}

uint64_t sub_101045ED0(uint64_t a1, int *a2, uint64_t a3)
{
  char *v6;
  __int128 v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v13;
  __int128 v14;
  int *v15;

  v6 = (char *)operator new(0x40uLL);
  v7 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)a3;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_10219BF80;
  *((_QWORD *)v6 + 1) = 0;
  *(_OWORD *)(v6 + 40) = v7;
  *((_QWORD *)v6 + 7) = *(_QWORD *)(a3 + 32);
  *(_QWORD *)&v14 = v6 + 24;
  *((_QWORD *)&v14 + 1) = v6;
  v13 = *a2;
  v15 = &v13;
  v8 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v13, (uint64_t)&unk_101B9EB60, &v15);
  sub_1002B7674((uint64_t)(v8 + 8), &v14);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return 1;
}

void sub_101045FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101045FC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD v5[2];
  uint64_t v6;

  v6 = 0;
  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_101046004(uint64_t a1, signed __int32 *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v31[20];
  __int16 v32;
  _QWORD *v33;
  __int16 v34;
  std::__shared_weak_count *v35;
  _QWORD **v36;
  _QWORD *v37[3];
  std::__shared_weak_count *v38;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219BE50);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v31 = 2082;
      *(_QWORD *)&v31[2] = "";
      *(_WORD *)&v31[10] = 2082;
      *(_QWORD *)&v31[12] = "activity";
      v32 = 2082;
      v33 = v10;
      v34 = 2050;
      v35 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v36 = v37;
      memset(v37, 0, sizeof(v37));
      v38 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v36);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v35;
      if (v35)
      {
        p_shared_owners = (unint64_t *)&v35->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v31, *(_QWORD **)&v31[8]);
      v21 = v38;
      if (v38)
      {
        v22 = (unint64_t *)&v38->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v36, v37[0]);
    }
    if (a4)
    {
      v24 = (char *)operator new(0x40uLL);
      v25 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(v24 + 24) = *(_OWORD *)a3;
      *((_QWORD *)v24 + 2) = 0;
      *(_QWORD *)v24 = off_10219BF80;
      *((_QWORD *)v24 + 1) = 0;
      *(_OWORD *)(v24 + 40) = v25;
      *((_QWORD *)v24 + 7) = *(_QWORD *)(a3 + 32);
      *(_QWORD *)buf = v24 + 24;
      *(_QWORD *)v31 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v26 = *(std::__shared_weak_count **)v31;
      if (*(_QWORD *)v31)
      {
        v27 = (unint64_t *)(*(_QWORD *)v31 + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_101046D08();
    os_activity_scope_leave(&state);
  }
}

void sub_101046648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_101046694(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219BE50);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10219BE50);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLProxPDPAndALSPhoneNotifier_Type::Notification, CLProxPDPAndALSPhoneNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLProxPDPAndALSPhoneNotifier_Type::Notification, NotificationData_T = CLProxPDPAndALSPhoneNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219BE50);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10219BE50);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLProxPDPAndALSPhoneNotifier_Type::Notification, CLProxPDPAndALSPhoneNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLProxPDPAndALSPhoneNotifier_Type::Notification, NotificationData_T = CLProxPDPAndALSPhoneNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10219BE50);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10219BE50);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLProxPDPAndALSPhoneNotifier_Type::Notification, CLProxPDPAndALSPhoneNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLProxPDPAndALSPhoneNotifier_Type::Notification, NotificationData_T = CLProxPDPAndALSPhoneNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_101046C40(uint64_t a1)
{
  sub_101047B0C(a1);
  operator delete();
}

id sub_101046C64(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_1010472C0(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_101046CB0(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101046CDC(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_101046D08()
{
  operator new();
}

void sub_101046DA0(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_1010472C0(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_101047174(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10219BE50);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10219BE50);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLProxPDPAndALSPhoneNotifier_Type::Notification, CLProxPDPAndALSPhoneNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLProxPDPAndALSPhoneNotifier_Type::Notification, NotificationData_T = CLProxPDPAndALSPhoneNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_101047174(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_1010472C0(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

void sub_101047250(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10219BF80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101047264(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10219BF80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1010472A0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

id sub_1010472C0(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_101047338(a1);
  v6 = objc_opt_class(CLCppContainer, v4);
  if ((objc_opt_isKindOfClass(a1, v6) & 1) != 0)
    return sub_1010476C0(a1);
  else
    return 0;
}

id sub_101047338(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  id v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return sub_101047A6C((uint64_t)&v8 + 7, a1);
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10219BFC0);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101C3B840 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10219BFC0);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10219BFC0);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101C3B840 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10219BFC0);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLProxPDPAndALSPhoneNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_1010476C0(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10219BFC0);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C3B840 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10219BFC0);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10219BFC0);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C3B840 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10219BFC0);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLProxPDPAndALSPhoneNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_101047A6C(uint64_t a1, void *a2)
{
  if (!objc_msgSend(a2, "cppObjectPtr")
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221CD70))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)40)
      sub_10193BA78();
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }
  return objc_msgSend(a2, "cppObjectPtr");
}

void sub_101047AE0(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_101047B0C(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = &off_10219BFF0;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_101047B6C()
{
  operator new();
}

uint64_t sub_101047C04(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

uint64_t sub_101047C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  NSObject *v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  int v24;

  *(_OWORD *)a1 = xmmword_101C3B888;
  *(_OWORD *)(a1 + 16) = unk_101C3B898;
  *(_OWORD *)(a1 + 32) = xmmword_101C3B8A8;
  *(_OWORD *)(a1 + 44) = *(__int128 *)((char *)&xmmword_101C3B8A8 + 12);
  *(_QWORD *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 224) = xmmword_101C3B968;
  *(_OWORD *)(a1 + 240) = unk_101C3B978;
  *(_OWORD *)(a1 + 256) = xmmword_101C3B988;
  *(_OWORD *)(a1 + 272) = unk_101C3B998;
  *(_OWORD *)(a1 + 160) = xmmword_101C3B928;
  *(_OWORD *)(a1 + 176) = unk_101C3B938;
  *(_OWORD *)(a1 + 192) = xmmword_101C3B948;
  *(_OWORD *)(a1 + 208) = unk_101C3B958;
  *(_OWORD *)(a1 + 96) = xmmword_101C3B8E8;
  *(_OWORD *)(a1 + 112) = unk_101C3B8F8;
  *(_OWORD *)(a1 + 128) = xmmword_101C3B908;
  *(_OWORD *)(a1 + 144) = unk_101C3B918;
  *(_OWORD *)(a1 + 64) = xmmword_101C3B8C8;
  *(_OWORD *)(a1 + 80) = unk_101C3B8D8;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_QWORD *)(a1 + 392) = a2;
  *(_QWORD *)(a1 + 400) = a3;
  *(_QWORD *)(a1 + 432) = 0;
  *(_WORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_WORD *)(a1 + 424) = 0;
  sub_1008152B8(a1 + 448, a2);
  sub_100CEC214(a1 + 3120, 10);
  sub_100CEC214(a1 + 3176, 10);
  sub_100CEC214(a1 + 3232, 10);
  *(_OWORD *)(a1 + 3288) = 0u;
  v4 = sub_100127B9C();
  sub_100081C10(v4, &v15);
  v5 = (unsigned __int8 *)(a1 + 424);
  if (sub_1001E4874(v15, "MotionLoggerLogRunningForm", (BOOL *)(a1 + 424)))
  {
    if (qword_10229FF30 != -1)
      dispatch_once(&qword_10229FF30, &stru_10219C008);
    v6 = qword_10229FF38;
    if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_INFO))
    {
      v7 = *v5;
      *(_DWORD *)buf = 136315394;
      v22 = "MotionLoggerLogRunningForm";
      v23 = 1024;
      v24 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[FormController] MSL Logging: %s: %d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF30 != -1)
        dispatch_once(&qword_10229FF30, &stru_10219C008);
      v12 = *v5;
      v17 = 136315394;
      v18 = "MotionLoggerLogRunningForm";
      v19 = 1024;
      v20 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 1, "[FormController] MSL Logging: %s: %d", (const char *)&v17, 18);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "CLRunning::FormController::FormController(const CLNatalieInput<CLElevationChangeEntry> &, CLRunningFormHealthKitWriter *)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return a1;
}

void sub_101047F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  sub_10047F25C(v3 + 405);
  sub_10047F25C(v3 + 398);
  sub_10047F25C(v3 + 391);
  sub_101047FA0(v5);
  sub_1005CBF30(v3 + 43);
  sub_1006CF50C(v4);
  _Unwind_Resume(a1);
}

_QWORD *sub_101047FA0(_QWORD *a1)
{
  sub_100FFA444(a1 + 327);
  nullsub_34((char *)a1 + 2615);
  sub_10081FB1C(a1 + 43);
  sub_10081FA88(a1 + 37);
  sub_1004A4854(a1 + 31);
  sub_1004A4854(a1 + 25);
  sub_10047F660(a1 + 19);
  sub_10047F660(a1 + 13);
  sub_10047F660(a1 + 7);
  return a1;
}

_QWORD *sub_10104800C(_QWORD *a1)
{
  a1[51] = 0;
  sub_10047F25C(a1 + 405);
  sub_10047F25C(a1 + 398);
  sub_10047F25C(a1 + 391);
  sub_100FFA444(a1 + 383);
  nullsub_34((char *)a1 + 3063);
  sub_10081FB1C(a1 + 99);
  sub_10081FA88(a1 + 93);
  sub_1004A4854(a1 + 87);
  sub_1004A4854(a1 + 81);
  sub_10047F660(a1 + 75);
  sub_10047F660(a1 + 69);
  sub_10047F660(a1 + 63);
  sub_1005CBF30(a1 + 43);
  sub_1006CF50C(a1 + 37);
  return a1;
}

uint64_t sub_1010480A4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  sub_100197040();
  result = sub_100195F08();
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(a1 + 3300) != 2)
      *(_QWORD *)(a1 + 408) = a2;
  }
  return result;
}

void sub_1010480E0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  std::string *p_p;
  id v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  NSObject *v20;
  uint64_t v21;
  const char *v22;
  uint8_t *v23;
  uint64_t v24;
  std::string *v25;
  id v26;
  char *v27;
  char *v28;
  const char *v29;
  uint8_t *v30;
  uint64_t v31;
  std::string v32;
  std::string __p;
  uint64_t v34;
  uint8_t buf[4];
  std::string *v36;
  __int16 v37;
  id v38;
  __int16 v39;
  uint64_t v40;

  sub_100197040();
  if (sub_100195F08() && *(_DWORD *)(a1 + 3300) != 2)
  {
    v5 = sub_100F72B18(a2);
    if (qword_10229FF30 != -1)
      dispatch_once(&qword_10229FF30, &stru_10219C008);
    v6 = qword_10229FF38;
    if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_DEBUG))
    {
      p_p = &__p;
      sub_100F72CB4(*(_QWORD *)(a2 + 16), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v8 = objc_msgSend(+[CMWorkout workoutName:](CMWorkout, "workoutName:", *(_QWORD *)(a2 + 112)), "UTF8String");
      *(_DWORD *)buf = 136446722;
      v36 = p_p;
      v37 = 2082;
      v38 = v8;
      v39 = 2050;
      v40 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "[FormController] WorkoutEvent - eventType,%{public}s,workoutType,%{public}s,labelState,%{public}ld,", buf, 0x20u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF30 != -1)
        dispatch_once(&qword_10229FF30, &stru_10219C008);
      v24 = qword_10229FF38;
      v25 = &v32;
      sub_100F72CB4(*(_QWORD *)(a2 + 16), &v32);
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v25 = (std::string *)v32.__r_.__value_.__r.__words[0];
      v26 = objc_msgSend(+[CMWorkout workoutName:](CMWorkout, "workoutName:", *(_QWORD *)(a2 + 112)), "UTF8String");
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446722;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v26;
      HIWORD(__p.__r_.__value_.__r.__words[2]) = 2050;
      v34 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v24, 2, "[FormController] WorkoutEvent - eventType,%{public}s,workoutType,%{public}s,labelState,%{public}ld,", &__p, 32);
      v28 = v27;
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "void CLRunning::FormController::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v28);
      if (v28 != (char *)buf)
        free(v28);
    }
    if (v5)
    {
      v9 = *(_OWORD *)a2;
      v10 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 96) = v10;
      *(_OWORD *)(a1 + 64) = v9;
      v11 = *(_OWORD *)(a2 + 48);
      v12 = *(_OWORD *)(a2 + 64);
      v13 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 160) = v13;
      *(_OWORD *)(a1 + 112) = v11;
      *(_OWORD *)(a1 + 128) = v12;
      v14 = *(_OWORD *)(a2 + 112);
      v15 = *(_OWORD *)(a2 + 128);
      v16 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 224) = v16;
      *(_OWORD *)(a1 + 176) = v14;
      *(_OWORD *)(a1 + 192) = v15;
      v17 = *(_OWORD *)(a2 + 176);
      v18 = *(_OWORD *)(a2 + 192);
      v19 = *(_OWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 256) = v18;
      *(_OWORD *)(a1 + 272) = v19;
      *(_OWORD *)(a1 + 240) = v17;
      if (sub_100D7B998(a1 + 64))
      {
        if (qword_10229FF30 != -1)
          dispatch_once(&qword_10229FF30, &stru_10219C008);
        v20 = qword_10229FF38;
        if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "[FormController] Beginning outdoor run", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FF30 != -1)
            dispatch_once(&qword_10229FF30, &stru_10219C008);
          LOWORD(__p.__r_.__value_.__l.__data_) = 0;
          LODWORD(v31) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 1, "[FormController] Beginning outdoor run", &__p, v31);
          v30 = (uint8_t *)v29;
          sub_100512490("Generic", 1, 0, 2, "void CLRunning::FormController::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v29);
          if (v30 != buf)
            free(v30);
        }
        sub_1010486AC(a1);
      }
      else
      {
        sub_1010489B8((_BYTE *)a1);
      }
    }
  }
  else
  {
    if (qword_10229FF30 != -1)
      dispatch_once(&qword_10229FF30, &stru_10219C008);
    v4 = qword_10229FF38;
    if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_DEFAULT))
    {
      sub_100197040();
      *(_DWORD *)buf = 67109120;
      LODWORD(v36) = sub_100195F08();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[FormController] Form Metrics not available (supportBoltRunning=%d)", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF30 != -1)
        dispatch_once(&qword_10229FF30, &stru_10219C008);
      v21 = qword_10229FF38;
      sub_100197040();
      LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = sub_100195F08();
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 0, "[FormController] Form Metrics not available (supportBoltRunning=%d)", &__p);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "void CLRunning::FormController::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
  }
}

void sub_101048674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1010486AC(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 425))
    goto LABEL_15;
  if (*(_QWORD *)(a1 + 408))
  {
    if (qword_10229FF30 != -1)
      dispatch_once(&qword_10229FF30, &stru_10219C008);
    v2 = qword_10229FF38;
    if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[FormController] Enabling FormMetrics sources", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF30 != -1)
        dispatch_once(&qword_10229FF30, &stru_10219C008);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 0, "[FormController] Enabling FormMetrics sources", v9, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLRunning::FormController::enableFormMetrics()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 408) + 16))(*(_QWORD *)(a1 + 408));
    *(_BYTE *)(a1 + 425) = 1;
    sub_101049B4C(a1);
    sub_1008152BC(a1 + 448);
  }
  else
  {
    if (qword_10229FF30 != -1)
      dispatch_once(&qword_10229FF30, &stru_10219C008);
    v3 = qword_10229FF38;
    if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "[FormController] Cannot enable FormMetrics, no DM source specified", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF30 != -1)
        dispatch_once(&qword_10229FF30, &stru_10219C008);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 16, "[FormController] Cannot enable FormMetrics, no DM source specified", v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLRunning::FormController::enableFormMetrics()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  if (*(_BYTE *)(a1 + 425))
  {
LABEL_15:
    v4 = *(_QWORD *)(a1 + 408);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  }
}

_BYTE *sub_1010489B8(_BYTE *result)
{
  _BYTE *v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (result[425])
  {
    v1 = result;
    if (qword_10229FF30 != -1)
      dispatch_once(&qword_10229FF30, &stru_10219C008);
    v2 = qword_10229FF38;
    if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[FormController] Disabling Form sources, resetting state", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF30 != -1)
        dispatch_once(&qword_10229FF30, &stru_10219C008);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 0, "[FormController] Disabling Form sources, resetting state", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLRunning::FormController::disableFormMetrics()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    v1[425] = 0;
    sub_101049958(v1);
    result = (_BYTE *)*((_QWORD *)v1 + 51);
    if (result)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 24))(result);
  }
  return result;
}

void *sub_101048B70(uint64_t a1, __int128 *a2)
{
  void *result;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  sub_100197040();
  result = (void *)sub_100195F08();
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(a1 + 3300) != 2)
    {
      v5 = *a2;
      v6 = a2[1];
      v7 = a2[2];
      *(_OWORD *)(a1 + 44) = *(__int128 *)((char *)a2 + 44);
      *(_OWORD *)(a1 + 16) = v6;
      *(_OWORD *)(a1 + 32) = v7;
      *(_OWORD *)a1 = v5;
      return memmove((void *)(a1 + 2976), a2, 0x3CuLL);
    }
  }
  return result;
}

void sub_101048BD8(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  double v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  uint64_t v24;

  sub_100197040();
  if (!sub_100195F08() || *(_DWORD *)(a1 + 3300) == 2)
    return;
  if (!sub_100D7B998(a1 + 64))
  {
    sub_1010489B8((_BYTE *)a1);
    return;
  }
  sub_1010486AC(a1);
  sub_100212098((_QWORD *)(a1 + 296), (__int128 *)a2);
  v4 = *(double *)(a2 + 8);
  v5 = *(double *)(a1 + 416);
  if (v4 - v5 < 0.0)
  {
    if (qword_10229FF30 != -1)
      dispatch_once(&qword_10229FF30, &stru_10219C008);
    v6 = qword_10229FF38;
    if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_INFO))
    {
      v7 = *(_QWORD *)(a2 + 8);
      v8 = *(_QWORD *)(a1 + 416);
      *(_DWORD *)buf = 134349312;
      v22 = v7;
      v23 = 2050;
      v24 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[FormController] #warning: Time Rollback: %{public}f->%{public}f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF30 != -1)
        dispatch_once(&qword_10229FF30, &stru_10219C008);
      v9 = *(_QWORD *)(a2 + 8);
      v10 = *(_QWORD *)(a1 + 416);
      v17 = 134349312;
      v18 = v9;
      v19 = 2050;
      v20 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 1, "[FormController] #warning: Time Rollback: %{public}f->%{public}f", &v17, 22);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLRunning::FormController::feedStepCountEntry(const CLStepCountEntry &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    goto LABEL_19;
  }
  if (v5 == 0.0 || v4 - v5 >= 5.0)
  {
    sub_101048EF0(a1, (_QWORD *)(a1 + 296));
LABEL_19:
    v4 = *(double *)(a2 + 8);
    *(double *)(a1 + 416) = v4;
  }
  v13 = *(_QWORD *)(a1 + 336);
  if (v13)
  {
    v14 = v4 + -46.08;
    do
    {
      v15 = *(_QWORD *)(a1 + 328);
      v16 = (v15 * (unsigned __int128)0x642C8590B21642C9uLL) >> 64;
      if (*(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 304) + 8 * ((v16 + ((v15 - v16) >> 1)) >> 4))
                     + 176 * (v15 - 23 * ((v16 + ((v15 - v16) >> 1)) >> 4))
                     + 8) >= v14)
        break;
      *(_QWORD *)(a1 + 328) = v15 + 1;
      *(_QWORD *)(a1 + 336) = v13 - 1;
      sub_100A0EFD8(a1 + 296, 1);
      v13 = *(_QWORD *)(a1 + 336);
    }
    while (v13);
  }
}

void sub_101048EF0(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  double v21;
  NSObject *v22;
  NSObject *v23;
  double v24;
  double v25;
  unint64_t *v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  const char *v31;
  uint8_t *v32;
  _WORD v33[8];
  int v34;
  double v35;
  int8x16_t v36;
  uint64_t v37;
  double v38[7];
  int v39;
  int8x16_t v40;
  int v41;
  double v42;
  double v43;
  int8x16_t v44;
  char v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;
  int v52;
  __int128 v53;
  __int128 v54;
  int v55;
  int32x2_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  __int128 v65;
  double v66;
  double v67;
  uint8_t buf[1640];

  v3 = a2[5];
  if (!v3)
  {
    if (qword_10229FF30 != -1)
      dispatch_once(&qword_10229FF30, &stru_10219C008);
    v15 = qword_10229FF38;
    if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "[FormController] No steps in queue, cannot compute Form Metrics", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_26;
    bzero(buf, 0x65CuLL);
    if (qword_10229FF30 != -1)
      dispatch_once(&qword_10229FF30, &stru_10219C008);
    LOWORD(v47) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 16, "[FormController] No steps in queue, cannot compute Form Metrics", &v47, 2);
    goto LABEL_49;
  }
  v5 = a2[4];
  v6 = v3 + v5 - 1;
  v7 = v6 / 0x17;
  v8 = v6 % 0x17;
  v9 = a2[1];
  v10 = a2[2];
  v67 = *(double *)(*(_QWORD *)(v9 + 8 * v7) + 176 * v8 + 8) + -5.12;
  if (v10 == v9)
  {
    v11 = 0;
    v14 = 0;
    v13 = (_QWORD *)(v9 + 8 * ((v5 + v3) / 0x17));
  }
  else
  {
    v11 = *(_QWORD *)(v9 + 8 * (v5 / 0x17)) + 176 * (v5 % 0x17);
    v12 = v5 + v3;
    v13 = (_QWORD *)(v9 + 8 * (v12 / 0x17));
    v14 = *v13 + 176 * (v12 % 0x17);
  }
  LOBYTE(v47) = 0;
  sub_100821A80((_QWORD *)(v9 + 8 * (v5 / 0x17)), v11, v13, v14, &v67);
  v18 = a2[1];
  if (a2[2] == v18)
  {
    v20 = 0;
  }
  else
  {
    v19 = a2[5] + a2[4];
    v20 = *(_QWORD *)(v18 + 8 * (v19 / 0x17)) + 176 * (v19 % 0x17);
  }
  if (v20 == v17)
  {
    if (qword_10229FF30 != -1)
      dispatch_once(&qword_10229FF30, &stru_10219C008);
    v22 = qword_10229FF38;
    if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "[FormController] Not enough steps in queue", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_26;
    bzero(buf, 0x65CuLL);
    if (qword_10229FF30 != -1)
      dispatch_once(&qword_10229FF30, &stru_10219C008);
    LOWORD(v47) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 16, "[FormController] Not enough steps in queue", &v47, 2);
LABEL_49:
    v30 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 0, "void CLRunning::FormController::computeFormMetrics(const StepQueue &, const DeviceMotionQueue &)", "%s\n", v16);
    if (v30 != buf)
      free(v30);
LABEL_26:
    sub_10104A26C(a1);
    return;
  }
  v50 = 0.0;
  v51 = 0;
  v52 = 0;
  v53 = 0u;
  v54 = 0u;
  v56 = vdup_n_s32(0x3E8u);
  v55 = 0;
  v57 = 1000;
  v59 = 0;
  v60 = 0;
  v58 = 0;
  v64 = 0u;
  v65 = 0u;
  v47 = v67;
  sub_10081B8F8(a1 + 448, a2, (uint64_t)&v41, v67);
  LODWORD(v51) = v41;
  v66 = sub_100C5CFAC(v43 * 0.5, 0.01);
  v48 = v66;
  *((_QWORD *)&v53 + 1) = v46;
  *(double *)&v54 = v42 * 0.5;
  v61 = v45;
  v63 = vextq_s8(v44, v44, 8uLL);
  sub_10081D064(a1 + 448, a2, (uint64_t)v38, v67);
  v49 = v38[0] * 1000.0;
  *(double *)&v65 = v38[0] * 1000.0;
  HIDWORD(v51) = v39;
  v62 = vextq_s8(v40, v40, 8uLL);
  if ((v39 & 0x100) != 0)
    sub_10104A760(a1, (uint64_t)&v47, 0);
  sub_10081AD44(a1 + 448, a2, (uint64_t)&v34, v67);
  v52 = v34;
  v50 = v35;
  *((double *)&v65 + 1) = v35;
  *(_QWORD *)&v53 = v37;
  v64 = vextq_s8(v36, v36, 8uLL);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 392) + 80))
  {
    sub_10104A870(a1, (uint64_t)&v47, 1);
    sub_10104A870(a1, (uint64_t)&v47, 2);
    sub_10104A870(a1, (uint64_t)&v47, 0);
  }
  else
  {
    if (qword_10229FF30 != -1)
      dispatch_once(&qword_10229FF30, &stru_10219C008);
    v23 = qword_10229FF38;
    if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "[FormController] Cannot determine grade, ElevationSource not active", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF30 != -1)
        dispatch_once(&qword_10229FF30, &stru_10219C008);
      v33[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 16, "[FormController] Cannot determine grade, ElevationSource not active", v33, 2);
      v32 = (uint8_t *)v31;
      sub_100512490("Generic", 1, 0, 0, "void CLRunning::FormController::computeFormMetrics(const StepQueue &, const DeviceMotionQueue &)", "%s\n", v31);
      if (v32 != buf)
        free(v32);
    }
  }
  sub_10104AB9C(a1, (uint64_t)&v47, 1, v21);
  sub_10104AB9C(a1, (uint64_t)&v47, 2, v24);
  sub_10104AB9C(a1, (uint64_t)&v47, 0, v25);
  v26 = (unint64_t *)(a1 + 3232);
  if ((v51 & 0xFFFFFFBF) != 0)
  {
    sub_100CEC28C((uint64_t)v26);
    *(_DWORD *)(a1 + 3296) = 0;
  }
  else
  {
    sub_100CEC22C(v26, v48);
  }
  if (!HIDWORD(v51) || HIDWORD(v51) == 256 || HIDWORD(v51) == 64)
  {
    sub_100CEC22C((unint64_t *)(a1 + 3120), v49);
  }
  else
  {
    sub_100CEC28C(a1 + 3120);
    *(_DWORD *)(a1 + 3288) = 0;
  }
  v27 = (unint64_t *)(a1 + 3176);
  if ((v52 & 0xFFFFFFBF) != 0)
  {
    v28 = sub_100CEC28C((uint64_t)v27);
    *(_DWORD *)(a1 + 3292) = 0;
  }
  else
  {
    sub_100CEC22C(v27, v50);
  }
  sub_10104A374(v28, (uint64_t *)&v47);
  sub_10104A668(a1, (uint64_t)&v47);
  sub_10104A2AC((id *)a1, (uint64_t)&v47);
  v29 = *(_QWORD *)(a1 + 408);
  if (v29)
    (*(void (**)(uint64_t, double *))(*(_QWORD *)v29 + 40))(v29, &v47);
}

void sub_101049630(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  NSObject *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  uint64_t v24;

  sub_100197040();
  if (sub_100195F08() && *(_DWORD *)(a1 + 3300) != 2)
  {
    v4 = *(_QWORD *)(a1 + 384);
    if (v4)
    {
      v5 = *(double *)(a2 + 40)
         - *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 8 * ((v4 + *(_QWORD *)(a1 + 376) - 1) / 0x49uLL))
                     + 56 * ((v4 + *(_QWORD *)(a1 + 376) - 1) % 0x49uLL)
                     + 40);
      if (v5 < 0.0 || v5 > 1.0)
      {
        if (qword_10229FF30 != -1)
          dispatch_once(&qword_10229FF30, &stru_10219C008);
        v7 = qword_10229FF38;
        if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_DEFAULT))
        {
          v8 = *(_QWORD *)(a2 + 40);
          v9 = *(_QWORD *)(a1 + 384) + *(_QWORD *)(a1 + 376) - 1;
          v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 8 * (v9 / 0x49)) + 56 * (v9 % 0x49) + 40);
          *(_DWORD *)buf = 134349312;
          v22 = v8;
          v23 = 2050;
          v24 = v10;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[FormController] #warning: unexpected change in timestamp (%{public}.2f->%{public}.2f)", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FF30 != -1)
            dispatch_once(&qword_10229FF30, &stru_10219C008);
          v12 = *(_QWORD *)(a2 + 40);
          v13 = *(_QWORD *)(a1 + 384) + *(_QWORD *)(a1 + 376) - 1;
          v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 8 * (v13 / 0x49)) + 56 * (v13 % 0x49) + 40);
          v17 = 134349312;
          v18 = v12;
          v19 = 2050;
          v20 = v14;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 0, "[FormController] #warning: unexpected change in timestamp (%{public}.2f->%{public}.2f)", &v17, 22);
          v16 = (uint8_t *)v15;
          sub_100512490("Generic", 1, 0, 2, "void CLRunning::FormController::feedDeviceMotion(const CLWorkoutPredictorDMInput &)", "%s\n", v15);
          if (v16 != buf)
            free(v16);
        }
        sub_101049958((_QWORD *)a1);
      }
    }
    sub_101049A2C((_QWORD *)(a1 + 344), a2);
    sub_1008156AC(a1 + 448, (_QWORD *)(a1 + 344), (_QWORD *)(a1 + 296));
    v11 = *(_QWORD *)(a1 + 384);
    if (v11 >= 0x501)
    {
      do
      {
        ++*(_QWORD *)(a1 + 376);
        *(_QWORD *)(a1 + 384) = v11 - 1;
        sub_100AAFEC0(a1 + 344, 1);
        v11 = *(_QWORD *)(a1 + 384);
      }
      while (v11 > 0x500);
    }
  }
}

void sub_101049958(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  a1[52] = 0;
  v2 = (void **)a1[38];
  v3 = a1[39];
  a1[42] = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = a1[39];
      v2 = (void **)(a1[38] + 8);
      a1[38] = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 11;
  }
  else
  {
    if (v4 >> 3 != 2)
      goto LABEL_8;
    v6 = 23;
  }
  a1[41] = v6;
LABEL_8:
  v7 = (void **)a1[44];
  v8 = a1[45];
  a1[48] = 0;
  v9 = v8 - (_QWORD)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      v10 = a1[45];
      v7 = (void **)(a1[44] + 8);
      a1[44] = v7;
      v9 = v10 - (_QWORD)v7;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    v11 = 36;
    goto LABEL_14;
  }
  if (v9 >> 3 == 2)
  {
    v11 = 73;
LABEL_14:
    a1[47] = v11;
  }
  sub_1008154AC((uint64_t)(a1 + 56));
}

__n128 sub_101049A2C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __n128 result;
  __int128 v10;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 73 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10104AEC0(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x49)) + 56 * (v7 % 0x49);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v10 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(a2 + 48);
  *(__n128 *)(v8 + 16) = result;
  *(_OWORD *)(v8 + 32) = v10;
  ++a1[5];
  return result;
}

uint64_t sub_101049AE8(uint64_t a1, _QWORD *a2)
{
  return sub_1008156A0(a1 + 448, a2);
}

uint64_t sub_101049AF0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  sub_100197040();
  result = sub_100195F08();
  if ((_DWORD)result && *(_DWORD *)(a1 + 3300) != 2 && *(_BYTE *)(a1 + 425) && *(int *)(a2 + 112) >= 1)
    return sub_101049B4C(a1);
  return result;
}

uint64_t sub_101049B4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  void *__p;
  void *v13;
  uint64_t v14;
  uint8_t buf[1640];

  v2 = *(_QWORD *)(a1 + 408);
  if (v2)
  {
    __p = 0;
    v13 = 0;
    v14 = 0;
    v3 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v2 + 48))(v2, &__p);
    if ((v3 & 1) != 0)
    {
      sub_10081A820(a1 + 448, (uint64_t *)&__p);
    }
    else
    {
      if (qword_10229FF30 != -1)
        dispatch_once(&qword_10229FF30, &stru_10219C008);
      v5 = qword_10229FF38;
      if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[FormController] CLStrideCal database query failed, unable to calibrate StrideLength", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF30 != -1)
          dispatch_once(&qword_10229FF30, &stru_10219C008);
        v11[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 16, "[FormController] CLStrideCal database query failed, unable to calibrate StrideLength", v11, 2);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLRunning::FormController::calibrateStrideLength()", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
    }
    if (__p)
    {
      v13 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (qword_10229FF30 != -1)
      dispatch_once(&qword_10229FF30, &stru_10219C008);
    v4 = qword_10229FF38;
    if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[FormController] No delegate, cannot calibrate StrideLength", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF30 != -1)
        dispatch_once(&qword_10229FF30, &stru_10219C008);
      LOWORD(__p) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 16, "[FormController] No delegate, cannot calibrate StrideLength", &__p, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLRunning::FormController::calibrateStrideLength()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    return 0;
  }
  return v3;
}

void sub_101049E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101049E88(uint64_t a1, uint64_t a2, char a3, char a4)
{
  NSObject *v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  char v22;
  __int16 v23;
  char v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  char v30;
  __int16 v31;
  char v32;

  if ((a3 & 0xFE) == 2)
  {
    *(CFAbsoluteTime *)(a1 + 432) = CFAbsoluteTimeGetCurrent();
    *(_BYTE *)(a1 + 440) = a3;
    *(_BYTE *)(a1 + 441) = a4;
  }
  if (qword_10229FF30 != -1)
    dispatch_once(&qword_10229FF30, &stru_10219C008);
  v8 = qword_10229FF38;
  if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_INFO))
  {
    v9 = *(_QWORD *)(a1 + 432);
    v10 = *(_BYTE *)(a1 + 440);
    v11 = *(_BYTE *)(a1 + 441);
    *(_DWORD *)buf = 134218752;
    v26 = v9;
    v27 = 2048;
    v28 = a2;
    v29 = 256;
    v30 = v10;
    v31 = 256;
    v32 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "gesture %f (%llul) - state: %hhu type: %hhu\n", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF30 != -1)
      dispatch_once(&qword_10229FF30, &stru_10219C008);
    v12 = *(_QWORD *)(a1 + 432);
    v13 = *(_BYTE *)(a1 + 440);
    v14 = *(_BYTE *)(a1 + 441);
    v17 = 134218752;
    v18 = v12;
    v19 = 2048;
    v20 = a2;
    v21 = 256;
    v22 = v13;
    v23 = 256;
    v24 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 1, "gesture %f (%llul) - state: %hhu type: %hhu\n", COERCE_DOUBLE(&v17), 28);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLRunning::FormController::feedWakeGesture(uint64_t, CMSPU::GestureState, CMSPU::GestureType)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
}

void sub_10104A0B0(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (*(_DWORD *)(a1 + 3300) != a2)
  {
    if (qword_10229FF30 != -1)
      dispatch_once(&qword_10229FF30, &stru_10219C008);
    v4 = qword_10229FF38;
    if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67240192;
      v9 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[FormController] Setting ActivityMoveMode: %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF30 != -1)
        dispatch_once(&qword_10229FF30, &stru_10219C008);
      v7[0] = 67240192;
      v7[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 1, "[FormController] Setting ActivityMoveMode: %{public}d", v7, 8);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLRunning::FormController::feedMoveModeUpdate(CLFitnessTrackingNotifier_Type::ActivityMoveMode)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    *(_DWORD *)(a1 + 3300) = a2;
  }
}

double sub_10104A26C(uint64_t a1)
{
  double result;

  sub_100CEC28C(a1 + 3120);
  sub_100CEC28C(a1 + 3232);
  sub_100CEC28C(a1 + 3176);
  result = 0.0;
  *(_QWORD *)(a1 + 3288) = 0;
  *(_DWORD *)(a1 + 3296) = 0;
  return result;
}

id *sub_10104A2AC(id *result, uint64_t a2)
{
  id *v3;
  NSDate *v4;
  int v5;
  NSDate *v6;

  v3 = result;
  if ((*(_DWORD *)(a2 + 32) & 0xFFFFFFBF) == 0)
  {
    v4 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 56));
    result = (id *)objc_msgSend(v3[50], "writeToHealthRunningStrideLength:startDate:endDate:", v4, v4, *(double *)(a2 + 8));
  }
  v5 = *(_DWORD *)(a2 + 36);
  if (!v5 || v5 == 256 || v5 == 64)
  {
    v6 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *(double *)a2);
    result = (id *)objc_msgSend(v3[50], "writeToHealthRunningGroundContactTime:startDate:endDate:", v6, v6, *(double *)(a2 + 16));
  }
  if ((*(_DWORD *)(a2 + 40) & 0xFFFFFFBF) == 0)
  {
    +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 48));
    return (id *)_objc_msgSend(v3[50], "writeToHealthRunningVerticalOscillation:startDate:endDate:", *(double *)(a2 + 24));
  }
  return result;
}

void sub_10104A374(uint64_t a1, uint64_t *a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint8_t *v35;
  int v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  int v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  int v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  int v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  uint8_t buf[4];
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  int v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  int v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  int v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  int v83;
  __int16 v84;
  int v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;
  __int16 v90;
  uint64_t v91;
  __int16 v92;
  uint64_t v93;
  __int16 v94;
  uint64_t v95;

  if (qword_10229FF30 != -1)
    dispatch_once(&qword_10229FF30, &stru_10219C008);
  v3 = qword_10229FF38;
  if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *a2;
    v5 = a2[1];
    v6 = *((_DWORD *)a2 + 8);
    v7 = *((_DWORD *)a2 + 9);
    v8 = a2[2];
    v9 = a2[3];
    v10 = *((_DWORD *)a2 + 10);
    v11 = a2[7];
    v12 = a2[8];
    v13 = *((_DWORD *)a2 + 18);
    v14 = *((_DWORD *)a2 + 21);
    v15 = a2[12];
    v17 = a2[16];
    v16 = a2[17];
    v18 = a2[6];
    *(_DWORD *)buf = 134352640;
    v67 = v4;
    v68 = 2048;
    v69 = v5;
    v70 = 1026;
    v71 = v6;
    v72 = 2048;
    v73 = v8;
    v74 = 1026;
    v75 = v7;
    v76 = 2048;
    v77 = v9;
    v78 = 1026;
    v79 = v10;
    v80 = 2048;
    v81 = v12;
    v82 = 1026;
    v83 = v13;
    v84 = 1026;
    v85 = v14;
    v86 = 2048;
    v87 = v15;
    v88 = 2048;
    v89 = v16;
    v90 = 2048;
    v91 = v17;
    v92 = 2050;
    v93 = v11;
    v94 = 2050;
    v95 = v18;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "FormMetrics,gctWindowEndTime,%{public}.2f,strideLength,%.2f,rejectionStatus,%{public}d,groundContactTime,%.2f,rejectionStatus,%{public}d,verticalOscillation,%.2f,rejectionStatus,%{public}d,strideLengthUncalibrated,%.2f,gctGradeType,%{public}d,gctGradeSource,%{public}d,gctGrade,%.2f,gctCadence,%.2f,gctPace,%.2f,slWindowEndTime,%{public}.2f,voWindowEndTime,%{public}.2f", buf, 0x84u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF30 != -1)
      dispatch_once(&qword_10229FF30, &stru_10219C008);
    v19 = *a2;
    v20 = a2[1];
    v21 = *((_DWORD *)a2 + 8);
    v22 = *((_DWORD *)a2 + 9);
    v23 = a2[2];
    v24 = a2[3];
    v25 = *((_DWORD *)a2 + 10);
    v26 = a2[7];
    v27 = a2[8];
    v28 = *((_DWORD *)a2 + 18);
    v29 = *((_DWORD *)a2 + 21);
    v30 = a2[12];
    v32 = a2[16];
    v31 = a2[17];
    v33 = a2[6];
    v36 = 134352640;
    v37 = v19;
    v38 = 2048;
    v39 = v20;
    v40 = 1026;
    v41 = v21;
    v42 = 2048;
    v43 = v23;
    v44 = 1026;
    v45 = v22;
    v46 = 2048;
    v47 = v24;
    v48 = 1026;
    v49 = v25;
    v50 = 2048;
    v51 = v27;
    v52 = 1026;
    v53 = v28;
    v54 = 1026;
    v55 = v29;
    v56 = 2048;
    v57 = v30;
    v58 = 2048;
    v59 = v31;
    v60 = 2048;
    v61 = v32;
    v62 = 2050;
    v63 = v26;
    v64 = 2050;
    v65 = v33;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 0, "FormMetrics,gctWindowEndTime,%{public}.2f,strideLength,%.2f,rejectionStatus,%{public}d,groundContactTime,%.2f,rejectionStatus,%{public}d,verticalOscillation,%.2f,rejectionStatus,%{public}d,strideLengthUncalibrated,%.2f,gctGradeType,%{public}d,gctGradeSource,%{public}d,gctGrade,%.2f,gctCadence,%.2f,gctPace,%.2f,slWindowEndTime,%{public}.2f,voWindowEndTime,%{public}.2f", &v36, 132);
    v35 = (uint8_t *)v34;
    sub_100512490("Generic", 1, 0, 2, "void CLRunning::FormController::logFormMetricsResult(const FormMetrics &) const", "%s\n", v34);
    if (v35 != buf)
      free(v35);
  }
}

void sub_10104A668(uint64_t a1, uint64_t a2)
{
  _QWORD v2[29];

  if (*(_BYTE *)(a1 + 424))
  {
    sub_10163B424(a2, v2);
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_10219C028);
    if (qword_1023118B0)
      operator new();
    PB::Base::~Base((PB::Base *)v2);
  }
}

void sub_10104A72C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PB::Base::~Base((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_10104A760(uint64_t a1, uint64_t a2, int a3)
{
  double v5;
  double v6;
  double v7;

  switch(a3)
  {
    case 2:
      v6 = sub_100CEC2B8((_QWORD *)(a1 + 3232));
      if (v6 <= 0.0 || *(int *)(a1 + 3296) > 4)
      {
        *(_DWORD *)(a2 + 32) |= 0x80u;
      }
      else
      {
        *(double *)(a2 + 8) = sub_100C5CFAC(v6, 0.01);
        ++*(_DWORD *)(a1 + 3296);
      }
      break;
    case 1:
      v7 = sub_100CEC2B8((_QWORD *)(a1 + 3176));
      if (v7 <= 0.0 || *(int *)(a1 + 3292) > 4)
      {
        *(_DWORD *)(a2 + 40) |= 0x80u;
      }
      else
      {
        *(double *)(a2 + 24) = sub_100C5CFAC(v7, 0.001);
        ++*(_DWORD *)(a1 + 3292);
      }
      break;
    case 0:
      v5 = sub_100CEC2B8((_QWORD *)(a1 + 3120));
      if (v5 <= 0.0 || *(int *)(a1 + 3288) > 4)
      {
        *(_DWORD *)(a2 + 36) |= 0x80u;
      }
      else
      {
        *(double *)(a2 + 16) = sub_100C5CFAC(v5, 1.0);
        ++*(_DWORD *)(a1 + 3288);
      }
      break;
  }
}

void sub_10104A870(uint64_t a1, uint64_t a2, int a3)
{
  double *v5;
  double *v6;
  int v7;
  uint64_t v8;
  double v9;
  int v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  int v25;

  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  DWORD2(v16) = 1000;
  LODWORD(v17) = -1082130432;
  v5 = (double *)a2;
  if (a3)
  {
    if (a3 == 1)
      v5 = (double *)(a2 + 48);
    else
      v5 = (double *)(a2 + 56);
  }
  if ((sub_10081C4FC((uint64_t)&v14, *(_QWORD **)(a1 + 392), *v5) & 1) == 0)
  {
    if (a3 == 2)
      goto LABEL_40;
LABEL_11:
    if (a3 == 1)
    {
      *(_DWORD *)(a2 + 40) |= 4u;
    }
    else if (!a3)
    {
      *(_DWORD *)(a2 + 36) |= 4u;
    }
    return;
  }
  if (a3 == 2)
  {
    v6 = (double *)(a2 + 144);
  }
  else if (a3 == 1)
  {
    v6 = (double *)(a2 + 160);
  }
  else
  {
    if (a3)
      return;
    v6 = (double *)(a2 + 128);
  }
  if (*v6 > 0.0)
  {
    v7 = DWORD2(v15);
    v9 = sub_100D7B970(1.0 / *v6 * 2.23693991, *(double *)&v16 * 2.23693991);
    v10 = DWORD2(v16);
    if (a3 == 2)
    {
      *(double *)(a2 + 112) = v9;
      *(_DWORD *)(a2 + 80) = v7;
      *(_DWORD *)(a2 + 92) = v10;
    }
    else if (a3 == 1)
    {
      *(double *)(a2 + 104) = v9;
      *(_DWORD *)(a2 + 76) = v7;
      *(_DWORD *)(a2 + 88) = v10;
    }
    else
    {
      *(double *)(a2 + 96) = v9;
      *(_DWORD *)(a2 + 72) = v7;
      *(_DWORD *)(a2 + 84) = v10;
    }
    if (v7 == 3)
    {
      if (v9 >= 0.0)
        return;
    }
    else
    {
      if (v7 != 1)
      {
        if (!v7)
        {
          if (qword_10229FF30 != -1)
            dispatch_once(&qword_10229FF30, &stru_10219C008);
          v11 = qword_10229FF38;
          if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134349312;
            v23 = *((_QWORD *)&v14 + 1);
            v24 = 1026;
            v25 = DWORD2(v16);
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[FormController] Unable to determine grade -- startTime,%{public}.2f,source,%{public}d", buf, 0x12u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FF30 != -1)
              dispatch_once(&qword_10229FF30, &stru_10219C008);
            v18 = 134349312;
            v19 = *((_QWORD *)&v14 + 1);
            v20 = 1026;
            v21 = DWORD2(v16);
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 2, "[FormController] Unable to determine grade -- startTime,%{public}.2f,source,%{public}d", &v18, 18, (_QWORD)v14);
            v13 = (uint8_t *)v12;
            sub_100512490("Generic", 1, 0, 2, "void CLRunning::FormController::checkExcessiveGrade(FormMetrics &, FormMetricType) const", "%s\n", v12);
            if (v13 != buf)
              free(v13);
          }
        }
        return;
      }
      if (v9 <= 0.0)
        return;
    }
    if (!sub_10104AE24(v9, v8, a3))
      return;
    if (a3 == 2)
    {
LABEL_40:
      *(_DWORD *)(a2 + 32) |= 4u;
      return;
    }
    goto LABEL_11;
  }
}

void sub_10104AB9C(uint64_t a1, uint64_t a2, int a3, double a4)
{
  double v7;
  double v8;
  double v9;
  BOOL v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  double v16;
  _DWORD v17[2];
  __int16 v18;
  uint64_t v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  uint64_t v23;

  switch(a3)
  {
    case 2:
      a4 = *(double *)(a2 + 56);
      break;
    case 1:
      a4 = *(double *)(a2 + 48);
      break;
    case 0:
      a4 = *(double *)a2;
      break;
  }
  v7 = *(double *)(a1 + 432);
  v8 = a4 + -10.24;
  v9 = a4 + 5.12;
  v10 = v7 > v8 && v7 < v9;
  if (v10 && (*(_BYTE *)(a1 + 440) & 0xFE) == 2)
  {
    if (qword_10229FF30 != -1)
      dispatch_once(&qword_10229FF30, &stru_10219C008);
    v11 = qword_10229FF38;
    if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(_QWORD *)(a1 + 432);
      *(_DWORD *)buf = 67109376;
      v21 = a3;
      v22 = 2048;
      v23 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[FormController] Suppresing metric: %d, glanceTime: %.2f", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF30 != -1)
        dispatch_once(&qword_10229FF30, &stru_10219C008);
      v13 = *(_QWORD *)(a1 + 432);
      v17[0] = 67109376;
      v17[1] = a3;
      v18 = 2048;
      v19 = v13;
      LODWORD(v16) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 2, "[FormController] Suppresing metric: %d, glanceTime: %.2f", v17, v16);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLRunning::FormController::checkForGlances(FormMetrics &, FormMetricType)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    switch(a3)
    {
      case 2:
        *(_DWORD *)(a2 + 32) |= 0x40u;
        break;
      case 1:
        *(_DWORD *)(a2 + 40) |= 0x40u;
        break;
      case 0:
        *(_DWORD *)(a2 + 36) |= 0x40u;
        break;
    }
    sub_10104A760(a1, a2, a3);
  }
}

BOOL sub_10104AE24(double a1, uint64_t a2, int a3)
{
  _BOOL4 v3;
  _BOOL4 v4;
  _BOOL4 v5;

  v3 = a1 > 9.0;
  if (a1 <= 0.0)
    v3 = a1 < -9.0;
  v4 = a1 > 9.0;
  if (a1 <= 0.0)
    v4 = a1 < -9.0;
  v5 = a1 > 9.0;
  if (a1 <= 0.0)
    v5 = a1 < -9.0;
  if (a3)
    v5 = 0;
  if (a3 != 1)
    v4 = v5;
  if (a3 == 2)
    return v3;
  else
    return v4;
}

void sub_10104AE90(id a1)
{
  qword_10229FF38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "RunningForm");
}

void sub_10104AEC0(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x49;
  v4 = v2 - 73;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF8uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF8uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF8uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_10104B188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10104B1D4(uint64_t a1, int a2)
{
  size_t v3;

  *(_DWORD *)a1 = a2;
  v3 = 156 * a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = 560 * a2;
  *(_QWORD *)(a1 + 24) = malloc_type_malloc(v3, 0x7BC1EC9AuLL);
  *(_QWORD *)(a1 + 32) = malloc_type_malloc(*(_QWORD *)(a1 + 16), 0xC42AC528uLL);
  *(_QWORD *)(a1 + 40) = dispatch_data_create(*(const void **)(a1 + 24), *(_QWORD *)(a1 + 8), 0, _dispatch_data_destructor_free);
  *(_QWORD *)(a1 + 48) = dispatch_data_create(*(const void **)(a1 + 32), *(_QWORD *)(a1 + 16), 0, _dispatch_data_destructor_free);
  return a1;
}

uint64_t sub_10104B26C(uint64_t a1, const void *a2, int a3)
{
  size_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_DWORD *)a1 = a3;
  v6 = 156 * a3;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = 560 * a3;
  *(_QWORD *)(a1 + 24) = malloc_type_malloc(v6, 0xC48DF30AuLL);
  *(_QWORD *)(a1 + 32) = malloc_type_malloc(*(_QWORD *)(a1 + 16), 0x7F848C98uLL);
  *(_QWORD *)(a1 + 40) = dispatch_data_create(*(const void **)(a1 + 24), *(_QWORD *)(a1 + 8), 0, _dispatch_data_destructor_free);
  *(_QWORD *)(a1 + 48) = dispatch_data_create(*(const void **)(a1 + 32), *(_QWORD *)(a1 + 16), 0, _dispatch_data_destructor_free);
  memcpy(*(void **)(a1 + 24), a2, *(_QWORD *)(a1 + 8));
  if (a3)
  {
    v7 = 0;
    v8 = a3;
    do
    {
      memcpy((void *)(*(_QWORD *)(a1 + 32) + v7), &unk_101C3B9B0, 0x230uLL);
      v7 += 560;
      --v8;
    }
    while (v8);
  }
  return a1;
}

uint64_t sub_10104B35C(uint64_t a1, const void *a2, const void *a3, int a4)
{
  size_t v7;

  *(_DWORD *)a1 = a4;
  v7 = 156 * a4;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = 560 * a4;
  *(_QWORD *)(a1 + 24) = malloc_type_malloc(v7, 0xC48E88B4uLL);
  *(_QWORD *)(a1 + 32) = malloc_type_malloc(*(_QWORD *)(a1 + 16), 0x5A12D4FAuLL);
  *(_QWORD *)(a1 + 40) = dispatch_data_create(*(const void **)(a1 + 24), *(_QWORD *)(a1 + 8), 0, _dispatch_data_destructor_free);
  *(_QWORD *)(a1 + 48) = dispatch_data_create(*(const void **)(a1 + 32), *(_QWORD *)(a1 + 16), 0, _dispatch_data_destructor_free);
  if (a2)
    memcpy(*(void **)(a1 + 24), a2, *(_QWORD *)(a1 + 8));
  if (a3)
    memcpy(*(void **)(a1 + 32), a3, *(_QWORD *)(a1 + 16));
  return a1;
}

uint64_t sub_10104B430(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;

  sub_10104B1D4(a1, -1762037865 * ((unint64_t)(a2[1] - *a2) >> 2));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v6 = 0;
    do
    {
      v7 = (_OWORD *)(*(_QWORD *)(a1 + 24) + v6);
      v8 = *(_OWORD *)(v4 + v6 + 16);
      *v7 = *(_OWORD *)(v4 + v6);
      v7[1] = v8;
      v9 = *(_OWORD *)(v4 + v6 + 32);
      v10 = *(_OWORD *)(v4 + v6 + 48);
      v11 = *(_OWORD *)(v4 + v6 + 80);
      v7[4] = *(_OWORD *)(v4 + v6 + 64);
      v7[5] = v11;
      v7[2] = v9;
      v7[3] = v10;
      v12 = *(_OWORD *)(v4 + v6 + 96);
      v13 = *(_OWORD *)(v4 + v6 + 112);
      v14 = *(_OWORD *)(v4 + v6 + 128);
      *(_OWORD *)((char *)v7 + 140) = *(_OWORD *)(v4 + v6 + 140);
      v7[7] = v13;
      v7[8] = v14;
      v7[6] = v12;
      v6 += 156;
    }
    while (v4 + v6 != v5);
    if (a2[1] != *a2)
    {
      v15 = 0;
      v16 = 0;
      do
      {
        memcpy((void *)(*(_QWORD *)(a1 + 32) + v16), &unk_101C3B9B0, 0x230uLL);
        v16 += 560;
        ++v15;
      }
      while (v15 < 0x6F96F96F96F96F97 * ((a2[1] - *a2) >> 2));
    }
  }
  return a1;
}

_QWORD *sub_10104B53C(_QWORD *a1)
{
  NSObject *v2;
  void *v3;
  NSObject *v4;
  void *v5;

  v2 = a1[5];
  if (v2)
  {
    dispatch_release(v2);
  }
  else
  {
    v3 = (void *)a1[3];
    if (v3)
      free(v3);
  }
  v4 = a1[6];
  if (v4)
  {
    dispatch_release(v4);
  }
  else
  {
    v5 = (void *)a1[4];
    if (v5)
      free(v5);
  }
  return a1;
}

__n128 sub_10104B598@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  NSObject *v12;
  char *v17;
  int v18;
  unint64_t v19;
  uint8_t buf[4];
  unint64_t v21;

  sub_10104B7EC((int *)a1, a2);
  if (*(_QWORD *)(a1 + 8))
  {
    v6 = *(_QWORD *)(a1 + 24) + 156 * a2;
    v7 = *(_OWORD *)(v6 + 112);
    *(_OWORD *)(a3 + 96) = *(_OWORD *)(v6 + 96);
    *(_OWORD *)(a3 + 112) = v7;
    *(_OWORD *)(a3 + 128) = *(_OWORD *)(v6 + 128);
    *(_OWORD *)(a3 + 140) = *(_OWORD *)(v6 + 140);
    v8 = *(_OWORD *)(v6 + 48);
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(v6 + 32);
    *(_OWORD *)(a3 + 48) = v8;
    v9 = *(_OWORD *)(v6 + 80);
    *(_OWORD *)(a3 + 64) = *(_OWORD *)(v6 + 64);
    *(_OWORD *)(a3 + 80) = v9;
    result = *(__n128 *)v6;
    v11 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v6;
    *(_OWORD *)(a3 + 16) = v11;
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10219C068);
    v12 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#batchedlocations,requested location index %{public}zu but buffer is empty, return default value", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10219C068);
      v18 = 134349056;
      v19 = a2;
      v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#batchedlocations,requested location index %{public}zu but buffer is empty, return default value", &v18, 12);
      sub_100512490("Generic", 1, 0, 0, "CLDaemonLocation CLBatchedLocations::daemonLocationForIndex(size_t) const", "%s\n", v17);
      if (v17 != (char *)buf)
        free(v17);
    }
    *(_DWORD *)a3 = 0xFFFF;
    *(_QWORD *)(a3 + 12) = 0;
    *(_QWORD *)(a3 + 4) = 0;
    *(_OWORD *)(a3 + 20) = xmmword_101BAFC90;
    __asm { FMOV            V0.2D, #-1.0 }
    *(__n128 *)(a3 + 36) = result;
    *(__n128 *)(a3 + 52) = result;
    *(__n128 *)(a3 + 68) = result;
    *(_DWORD *)(a3 + 84) = 0;
    *(_QWORD *)(a3 + 96) = 0;
    *(_QWORD *)(a3 + 104) = 0;
    *(_QWORD *)(a3 + 88) = 0xBFF0000000000000;
    *(_DWORD *)(a3 + 112) = 0;
    *(_QWORD *)(a3 + 116) = 0xBFF0000000000000;
    *(_DWORD *)(a3 + 124) = 0x7FFFFFFF;
    *(_QWORD *)(a3 + 136) = 0;
    *(_QWORD *)(a3 + 144) = 0;
    *(_QWORD *)(a3 + 128) = 0;
    *(_BYTE *)(a3 + 152) = 0;
  }
  return result;
}

int *sub_10104B7EC(int *result, unint64_t a2)
{
  int *v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  unint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;

  if (*result <= a2)
  {
    v3 = result;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10219C068);
    v4 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      v5 = *v3;
      *(_DWORD *)buf = 68290051;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2050;
      v15 = a2;
      v16 = 2050;
      v17 = v5;
      v18 = 2082;
      v19 = "assert";
      v20 = 2081;
      v21 = "index < fNumEntries";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"out of bounds index entry in #batchedlocations\", \"index\":%{public}ld, \"batchedLocationsSize\":%{public}ld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10219C068);
    }
    v6 = qword_1022A0028;
    if (os_signpost_enabled((os_log_t)qword_1022A0028))
    {
      v7 = *v3;
      *(_DWORD *)buf = 68290051;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2050;
      v15 = a2;
      v16 = 2050;
      v17 = v7;
      v18 = 2082;
      v19 = "assert";
      v20 = 2081;
      v21 = "index < fNumEntries";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "out of bounds index entry in #batchedlocations", "{\"msg%{public}.0s\":\"out of bounds index entry in #batchedlocations\", \"index\":%{public}ld, \"batchedLocationsSize\":%{public}ld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10219C068);
    }
    v8 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v9 = *v3;
      *(_DWORD *)buf = 68290051;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2050;
      v15 = a2;
      v16 = 2050;
      v17 = v9;
      v18 = 2082;
      v19 = "assert";
      v20 = 2081;
      v21 = "index < fNumEntries";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"out of bounds index entry in #batchedlocations\", \"index\":%{public}ld, \"batchedLocationsSize\":%{public}ld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLBatchedLocations.cpp", 177, "assertNotOutOfBounds");
  }
  return result;
}

void sub_10104BAA8(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  char *v7;
  int v8;
  unint64_t v9;
  uint8_t buf[4];
  unint64_t v11;

  sub_10104B7EC((int *)a1, a2);
  if (*(_QWORD *)(a1 + 16))
  {
    sub_1000A0750(a3, *(_QWORD *)(a1 + 32) + 560 * a2);
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10219C068);
    v6 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      v11 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#batchedlocations,requested location private index %{public}zu but buffer is empty, return default value", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10219C068);
      v8 = 134349056;
      v9 = a2;
      v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#batchedlocations,requested location private index %{public}zu but buffer is empty, return default value", &v8, 12);
      sub_100512490("Generic", 1, 0, 0, "CLDaemonLocationPrivate CLBatchedLocations::daemonLocationPrivateForIndex(size_t) const", "%s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
    }
    sub_10012A33C(a3);
  }
}

__n128 sub_10104BCAC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  sub_10104B7EC((int *)a1, a3);
  v6 = *(_QWORD *)(a1 + 24) + 156 * a3;
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v6 = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_OWORD *)(a2 + 32);
  v9 = *(_OWORD *)(a2 + 48);
  v10 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v6 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v6 + 80) = v10;
  *(_OWORD *)(v6 + 32) = v8;
  *(_OWORD *)(v6 + 48) = v9;
  result = *(__n128 *)(a2 + 96);
  v12 = *(_OWORD *)(a2 + 112);
  v13 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v6 + 140) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(v6 + 112) = v12;
  *(_OWORD *)(v6 + 128) = v13;
  *(__n128 *)(v6 + 96) = result;
  return result;
}

uint64_t sub_10104BD1C(int *a1)
{
  return *a1;
}

BOOL sub_10104BD24(int *a1, int a2)
{
  int v2;

  v2 = *a1;
  if (*a1 >= a2)
    *a1 = a2;
  return v2 >= a2;
}

void sub_10104BD40(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_10104CC14(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  unint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  void *Data;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      Data = (void *)PBReaderReadData(a2);

      *(_QWORD *)(a1 + 8) = Data;
    }
    else
    {
      if ((_DWORD)v12 == 2)
      {
        v19 = 0;
        v20 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v21 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0)
            goto LABEL_42;
          v19 += 7;
          v9 = v20++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_44;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_44:
        v24 = 20;
      }
      else
      {
        if ((_DWORD)v12 != 1)
        {
          result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result)
            return result;
          continue;
        }
        v13 = 0;
        v14 = 0;
        v15 = 0;
        while (1)
        {
          v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1 || v16 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v17 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0)
            goto LABEL_38;
          v13 += 7;
          v9 = v14++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_40:
        v24 = 16;
      }
      *(_DWORD *)(a1 + v24) = v15;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_10104D224(uint64_t a1, __int128 *a2, uint64_t *a3, double a4)
{
  _OWORD *v6;
  __int128 v7;
  char *v8;
  NSObject *v9;
  char *v11;
  __int16 v12;
  double v13;
  uint8_t buf[1640];

  v13 = a4;
  sub_10067D0DC(a1, a3, &v13);
  *(_QWORD *)a1 = off_10219C0C8;
  v6 = (_OWORD *)(a1 + 232);
  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 232), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    *(_QWORD *)(a1 + 248) = *((_QWORD *)a2 + 2);
    *v6 = v7;
  }
  if (sub_1000CC4F4(a1 + 64))
  {
    v8 = (char *)(a1 + 232);
    if (*(char *)(a1 + 255) < 0)
      v8 = *(char **)v6;
    sub_100634364(a1 + 64, v8, (const char **)&qword_10230BC60, 0, 0);
    sub_10067D20C(a1);
  }
  else
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10219C0F8);
    v9 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning CLWifiHarvestDatabase is not valid; not initializing! Please add retry logic if needed!",
        buf,
        2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_10219C0F8);
      v12 = 0;
      v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_1022A0288, 0, "#Warning CLWifiHarvestDatabase is not valid; not initializing! Please add retry logic if needed!",
                      &v12,
                      2);
      sub_100512490("Generic", 1, 0, 2, "CLWifiHarvestDatabase::CLWifiHarvestDatabase(std::string, const CLSqliteDatabase::SqliteProperties &, double)", "%s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
  return a1;
}

void sub_10104D44C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 255) < 0)
    operator delete(*v2);
  sub_10067D1C4(v1);
  _Unwind_Resume(a1);
}

char *sub_10104D484@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[255] < 0)
    return (char *)sub_100115CE4((_BYTE *)a2, *((void **)result + 29), *((_QWORD *)result + 30));
  *(_OWORD *)a2 = *(_OWORD *)(result + 232);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 31);
  return result;
}

uint64_t sub_10104D4B0(uint64_t a1)
{
  _QWORD *v2;
  const char *v3;
  size_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  size_t v18;
  _QWORD *v19;
  _QWORD *v20;
  size_t v21;
  _QWORD *v22;
  _QWORD *v23;
  size_t v24;
  _QWORD *v25;
  _QWORD *v26;
  size_t v27;
  _QWORD *v28;
  _QWORD *v29;
  size_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  NSObject *v37;
  char *v39;
  void *__p[2];
  char v41;
  _WORD v42[8];
  uint64_t v43;
  _QWORD v44[8];
  uint8_t buf[1640];

  if (sub_1000CC504(a1))
  {
    sub_100263E50((uint64_t)v42);
    v2 = sub_100263F7C(&v43, (uint64_t)"INSERT OR REPLACE INTO ", 23);
    v3 = (const char *)(a1 + 232);
    if (*(char *)(a1 + 255) < 0)
      v3 = *(const char **)v3;
    v4 = strlen(v3);
    v5 = sub_100263F7C(v2, (uint64_t)v3, v4);
    v6 = sub_100263F7C(v5, (uint64_t)"(", 3);
    v7 = sub_100263F7C(v6, (uint64_t)"MAC", 3);
    v8 = sub_100263F7C(v7, (uint64_t)",", 1);
    v9 = sub_100263F7C(v8, (uint64_t)"Channel", 7);
    v10 = sub_100263F7C(v9, (uint64_t)",", 1);
    v11 = sub_100263F7C(v10, (uint64_t)"Rssi", 4);
    v12 = sub_100263F7C(v11, (uint64_t)",", 1);
    v13 = sub_100263F7C(v12, (uint64_t)"ScanTimestamp", 13);
    v14 = sub_100263F7C(v13, (uint64_t)",", 1);
    v15 = strlen("Timestamp");
    v16 = sub_100263F7C(v14, (uint64_t)"Timestamp", v15);
    v17 = sub_100263F7C(v16, (uint64_t)",", 1);
    v18 = strlen("Latitude");
    v19 = sub_100263F7C(v17, (uint64_t)"Latitude", v18);
    v20 = sub_100263F7C(v19, (uint64_t)",", 1);
    v21 = strlen("Longitude");
    v22 = sub_100263F7C(v20, (uint64_t)"Longitude", v21);
    v23 = sub_100263F7C(v22, (uint64_t)",", 1);
    v24 = strlen("HorizontalAccuracy");
    v25 = sub_100263F7C(v23, (uint64_t)"HorizontalAccuracy", v24);
    v26 = sub_100263F7C(v25, (uint64_t)",", 1);
    v27 = strlen("Altitude");
    v28 = sub_100263F7C(v26, (uint64_t)"Altitude", v27);
    v29 = sub_100263F7C(v28, (uint64_t)",", 1);
    v30 = strlen("VerticalAccuracy");
    v31 = sub_100263F7C(v29, (uint64_t)"VerticalAccuracy", v30);
    v32 = sub_100263F7C(v31, (uint64_t)",", 1);
    v33 = sub_100263F7C(v32, (uint64_t)"LoiType", 7);
    v34 = sub_100263F7C(v33, (uint64_t)") VALUES ", 9);
    sub_100263F7C(v34, (uint64_t)"(?,?,?,?,?,?,?,?,?,?,?);", 24);
    std::stringbuf::str(__p, v44);
    v35 = a1 + 64;
    if (v41 >= 0)
      v36 = (char *)__p;
    else
      v36 = (char *)__p[0];
    sub_1000CDA68(v35, v36);
  }
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_10219C0F8);
  v37 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call insertOrReplace() without a backing database in CLWifiHarvestDatabase!", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10219C0F8);
    v42[0] = 0;
    v39 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_1022A0288, 2, "#Warning Attempt to call insertOrReplace() without a backing database in CLWifiHarvestDatabase!", v42, 2);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiHarvestDatabase::insertOrReplace(const CLWifiHarvestDatabaseEntry &)", "%s\n", v39);
    if (v39 != (char *)buf)
      free(v39);
  }
  return 0;
}

void sub_10104DD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  if (a19 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_10104DD78(uint64_t a1)
{
  _QWORD *v2;
  const char *v3;
  size_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  char *v11;
  NSObject *v12;
  char *v14;
  void *__p[2];
  char v16;
  uint8_t buf[16];
  uint64_t v18;
  _QWORD v19[8];

  if (sub_1000CC504(a1))
  {
    sub_100263E50((uint64_t)buf);
    v2 = sub_100263F7C(&v18, (uint64_t)"DELETE FROM ", 12);
    v3 = (const char *)(a1 + 232);
    if (*(char *)(a1 + 255) < 0)
      v3 = *(const char **)v3;
    v4 = strlen(v3);
    v5 = sub_100263F7C(v2, (uint64_t)v3, v4);
    v6 = sub_100263F7C(v5, (uint64_t)" WHERE ", 7);
    v7 = sub_100263F7C(v6, (uint64_t)"MAC", 3);
    v8 = sub_100263F7C(v7, (uint64_t)" = ? AND ", 9);
    v9 = strlen("Timestamp");
    v10 = sub_100263F7C(v8, (uint64_t)"Timestamp", v9);
    sub_100263F7C(v10, (uint64_t)"< ?;", 4);
    std::stringbuf::str(__p, v19);
    if (v16 >= 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(a1 + 64, v11);
  }
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_10219C0F8);
  v12 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call deleteByMacAndTimestampLessThan() without a backing database in CLWifiHarvestDatabase!", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10219C0F8);
    LOWORD(__p[0]) = 0;
    v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_1022A0288, 2, "#Warning Attempt to call deleteByMacAndTimestampLessThan() without a backing database in CLWifiHarvestDatabase!", __p, 2);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiHarvestDatabase::deleteByMacAndTimestampLessThan(const CLMacAddress &, const CFAbsoluteTime &)", "%s\n", v14);
    if (v14 != (char *)buf)
      free(v14);
  }
  return 0;
}

void sub_10104E118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a18 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_10104E16C(uint64_t a1)
{
  return sub_10104DD78(a1);
}

void sub_10104E194(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  NSObject *v5;
  char *v6;
  int v7;
  void *__p[2];
  char v9;
  uint8_t buf[16];

  if (sub_1000CC504(a1))
  {
    sub_100074DEC(a1, __p);
    if (v9 >= 0)
      v4 = (char *)__p;
    else
      v4 = (char *)__p[0];
    sub_1000CDA68(a1 + 64, v4);
  }
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_10219C0F8);
  v5 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call getAllEntries() without a backing database in CLWifiHarvestDatabase!", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10219C0F8);
    LOWORD(v7) = 0;
    v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_1022A0288, 2, "#Warning Attempt to call getAllEntries() without a backing database in CLWifiHarvestDatabase!", &v7, 2);
    sub_100512490("Generic", 1, 0, 2, "std::vector<CLWifiHarvestDatabaseEntry> CLWifiHarvestDatabase::getAllEntries()", "%s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void sub_10104E690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a45 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10104E70C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v3;
  _OWORD *v4;
  _QWORD *v5;
  _OWORD *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _OWORD *v47;
  _OWORD *v48;
  uint64_t *v49;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  sub_10104E194(a1, &v47);
  v3 = v47;
  v4 = v48;
  if (v47 != v48)
  {
    do
    {
      v46 = *(_QWORD *)v3;
      v49 = &v46;
      v5 = sub_10104EA24(a2, &v46, (uint64_t)&unk_101B9EB60, &v49);
      v6 = (_OWORD *)v5[4];
      v7 = v5[5];
      if ((unint64_t)v6 >= v7)
      {
        v18 = v5[3];
        v19 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - v18) >> 6);
        v20 = v19 + 1;
        if (v19 + 1 > 0x155555555555555)
          sub_100259694();
        v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v18) >> 6);
        if (2 * v21 > v20)
          v20 = 2 * v21;
        if (v21 >= 0xAAAAAAAAAAAAAALL)
          v22 = 0x155555555555555;
        else
          v22 = v20;
        if (v22)
          v23 = (char *)sub_1002746CC((uint64_t)(v5 + 5), v22);
        else
          v23 = 0;
        v24 = &v23[192 * v19];
        v25 = *v3;
        v26 = v3[1];
        v27 = v3[3];
        *((_OWORD *)v24 + 2) = v3[2];
        *((_OWORD *)v24 + 3) = v27;
        *(_OWORD *)v24 = v25;
        *((_OWORD *)v24 + 1) = v26;
        v28 = v3[4];
        v29 = v3[5];
        v30 = v3[7];
        *((_OWORD *)v24 + 6) = v3[6];
        *((_OWORD *)v24 + 7) = v30;
        *((_OWORD *)v24 + 4) = v28;
        *((_OWORD *)v24 + 5) = v29;
        v31 = v3[8];
        v32 = v3[9];
        v33 = v3[11];
        *((_OWORD *)v24 + 10) = v3[10];
        *((_OWORD *)v24 + 11) = v33;
        *((_OWORD *)v24 + 8) = v31;
        *((_OWORD *)v24 + 9) = v32;
        v35 = (char *)v5[3];
        v34 = (char *)v5[4];
        v36 = v24;
        if (v34 != v35)
        {
          do
          {
            v37 = *((_OWORD *)v34 - 12);
            v38 = *((_OWORD *)v34 - 11);
            v39 = *((_OWORD *)v34 - 9);
            *((_OWORD *)v36 - 10) = *((_OWORD *)v34 - 10);
            *((_OWORD *)v36 - 9) = v39;
            *((_OWORD *)v36 - 12) = v37;
            *((_OWORD *)v36 - 11) = v38;
            v40 = *((_OWORD *)v34 - 8);
            v41 = *((_OWORD *)v34 - 7);
            v42 = *((_OWORD *)v34 - 5);
            *((_OWORD *)v36 - 6) = *((_OWORD *)v34 - 6);
            *((_OWORD *)v36 - 5) = v42;
            *((_OWORD *)v36 - 8) = v40;
            *((_OWORD *)v36 - 7) = v41;
            v43 = *((_OWORD *)v34 - 4);
            v44 = *((_OWORD *)v34 - 3);
            v45 = *((_OWORD *)v34 - 1);
            *((_OWORD *)v36 - 2) = *((_OWORD *)v34 - 2);
            *((_OWORD *)v36 - 1) = v45;
            *((_OWORD *)v36 - 4) = v43;
            *((_OWORD *)v36 - 3) = v44;
            v36 -= 192;
            v34 -= 192;
          }
          while (v34 != v35);
          v34 = (char *)v5[3];
        }
        v17 = v24 + 192;
        v5[3] = v36;
        v5[4] = v24 + 192;
        v5[5] = &v23[192 * v22];
        if (v34)
          operator delete(v34);
      }
      else
      {
        v8 = *v3;
        v9 = v3[1];
        v10 = v3[3];
        v6[2] = v3[2];
        v6[3] = v10;
        *v6 = v8;
        v6[1] = v9;
        v11 = v3[4];
        v12 = v3[5];
        v13 = v3[7];
        v6[6] = v3[6];
        v6[7] = v13;
        v6[4] = v11;
        v6[5] = v12;
        v14 = v3[8];
        v15 = v3[9];
        v16 = v3[11];
        v6[10] = v3[10];
        v6[11] = v16;
        v6[8] = v14;
        v6[9] = v15;
        v17 = v6 + 12;
      }
      v5[4] = v17;
      v3 += 12;
    }
    while (v3 != v4);
    v3 = v47;
  }
  if (v3)
  {
    v48 = v3;
    operator delete(v3);
  }
}

void sub_10104E93C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  sub_1008813BC(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_10104E96C(uint64_t a1)
{
  *(_QWORD *)a1 = off_10219C0C8;
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  return sub_10067D1C4(a1);
}

void sub_10104E9A8(uint64_t a1)
{
  *(_QWORD *)a1 = off_10219C0C8;
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  sub_10067D1C4(a1);
  operator delete();
}

void sub_10104E9F8(id a1)
{
  off_1022A0288 = os_log_create("com.apple.locationd.Utility", "Database");
}

_QWORD *sub_10104EA24(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD **v13;
  _QWORD *i;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v8 = sub_100129380((uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v13 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = *v13; i; i = (_QWORD *)*i)
      {
        v15 = i[1];
        if (v15 == v9)
        {
          if (sub_10009483C(i + 2, a2))
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v9;
  v17 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v17;
  i[3] = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    sub_10012E444(a1, v23);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *i = *v25;
LABEL_38:
    *v25 = i;
    goto LABEL_39;
  }
  *i = *v16;
  *v16 = i;
  *(_QWORD *)(v24 + 8 * v4) = v16;
  if (*i)
  {
    v26 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10)
        v26 %= v10;
    }
    else
    {
      v26 &= v10 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_10104EC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  sub_1008817BC(v11, v10);
  _Unwind_Resume(a1);
}

void sub_10104EC88()
{
  qword_10230BC60 = (uint64_t)"MAC";
  dword_10230BC68 = 1;
  word_10230BC6C = 1;
  byte_10230BC70 = 0;
  byte_10230BC88 = 0;
  qword_10230BC90 = (uint64_t)"Channel";
  dword_10230BC98 = 1;
  word_10230BC9C = 0;
  byte_10230BCA0 = 0;
  byte_10230BCB8 = 0;
  qword_10230BCC0 = (uint64_t)"Rssi";
  dword_10230BCC8 = 1;
  word_10230BCCC = 0;
  byte_10230BCD0 = 0;
  byte_10230BCE8 = 0;
  qword_10230BCF0 = (uint64_t)"ScanTimestamp";
  dword_10230BCF8 = 2;
  word_10230BCFC = 0;
  byte_10230BD00 = 0;
  byte_10230BD18 = 0;
  qword_10230BD20 = (uint64_t)"Timestamp";
  dword_10230BD28 = 2;
  word_10230BD2C = 1;
  byte_10230BD30 = 0;
  byte_10230BD48 = 0;
  qword_10230BD50 = (uint64_t)"Latitude";
  dword_10230BD58 = 2;
  word_10230BD5C = 0;
  byte_10230BD60 = 0;
  byte_10230BD78 = 0;
  qword_10230BD80 = (uint64_t)"Longitude";
  dword_10230BD88 = 2;
  word_10230BD8C = 0;
  byte_10230BD90 = 0;
  byte_10230BDA8 = 0;
  qword_10230BDB0 = (uint64_t)"HorizontalAccuracy";
  dword_10230BDB8 = 2;
  word_10230BDBC = 0;
  byte_10230BDC0 = 0;
  byte_10230BDD8 = 0;
  qword_10230BDE0 = (uint64_t)"Altitude";
  dword_10230BDE8 = 2;
  word_10230BDEC = 0;
  byte_10230BDF0 = 0;
  byte_10230BE08 = 0;
  qword_10230BE10 = (uint64_t)"VerticalAccuracy";
  dword_10230BE18 = 2;
  word_10230BE1C = 0;
  byte_10230BE20 = 0;
  byte_10230BE38 = 0;
  qword_10230BE40 = (uint64_t)"LoiType";
  dword_10230BE48 = 1;
  word_10230BE4C = 0;
  byte_10230BE50 = 0;
  byte_10230BE68 = 0;
  qword_10230BE70 = 0;
  dword_10230BE78 = 5;
  word_10230BE7C = 0;
  byte_10230BE80 = 0;
  byte_10230BE98 = 0;
}

char *sub_10104EE00(char *__dst, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  uint64_t v6;
  char *v7;
  double v8;
  double v9;
  double v10;
  int v11;
  int v12;

  if (*((char *)a3 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a3 + 2);
    *(_OWORD *)__dst = v5;
  }
  *((_QWORD *)__dst + 3) = 0;
  *((_QWORD *)__dst + 4) = 0;
  *((_QWORD *)__dst + 5) = a2;
  *((_QWORD *)__dst + 46) = 0x800000000;
  *((_QWORD *)__dst + 63) = 0x800000000;
  *((_QWORD *)__dst + 80) = 0x800000000;
  *((_QWORD *)__dst + 89) = 0x800000000;
  *((_QWORD *)__dst + 98) = 0x800000000;
  *((_QWORD *)__dst + 107) = 0x800000000;
  *((_QWORD *)__dst + 116) = 0x800000000;
  *((_QWORD *)__dst + 125) = 0x800000000;
  *((_QWORD *)__dst + 130) = 0x3200000000;
  *((_DWORD *)__dst + 480) = 0;
  *((_QWORD *)__dst + 234) = 0;
  *(_OWORD *)(__dst + 1880) = 0u;
  *(_OWORD *)(__dst + 1928) = 0u;
  v6 = 1960;
  *((_QWORD *)__dst + 243) = 0;
  do
  {
    v7 = &__dst[v6];
    *(_QWORD *)v7 = 0x800000000;
    *((_QWORD *)v7 + 17) = 0x800000000;
    *((_QWORD *)v7 + 30) = 0;
    *((_QWORD *)v7 + 27) = 0;
    *((_QWORD *)v7 + 28) = 0;
    *((_QWORD *)v7 + 26) = 0;
    v6 += 248;
    *((_DWORD *)v7 + 58) = 0;
  }
  while (v7 + 248 != __dst + 2952);
  v8 = 0.0;
  v9 = 0.0;
  do
  {
    v9 = v9 + exp(v8 * -10.0) * 10.0;
    v8 = v8 + 0.01;
  }
  while (v8 <= 1.0);
  *((double *)__dst + 3) = v9;
  v10 = 0.0;
  v11 = 62;
  do
  {
    v10 = v10 + 0.00000555555556;
    --v11;
  }
  while (v11);
  v12 = 180;
  do
  {
    v10 = v10 + 0.00555555556;
    --v12;
  }
  while (v12);
  *((double *)__dst + 4) = v10;
  sub_10104EF70((uint64_t)__dst);
  return __dst;
}

int64x2_t sub_10104EF70(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v2;
  int64x2_t result;

  v1 = 0;
  *(_DWORD *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 640) = 0;
  *(_DWORD *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 784) = 0;
  *(_DWORD *)(a1 + 856) = 0;
  *(_DWORD *)(a1 + 928) = 0;
  v2 = (_DWORD *)(a1 + 2192);
  *(_DWORD *)(a1 + 1000) = 0;
  do
  {
    *(v2 - 58) = 0;
    *(v2 - 24) = 0;
    *((_QWORD *)v2 - 2) = 0;
    *((_QWORD *)v2 - 1) = 0;
    *v2 = v1;
    v1 += 2;
    *((_QWORD *)v2 - 3) = 0;
    v2 += 62;
  }
  while (v1 != 8);
  *(_QWORD *)(a1 + 1928) = 0x7FF8000000000000;
  *(int64x2_t *)(a1 + 1936) = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)(a1 + 1872) = 0u;
  *(_QWORD *)(a1 + 1896) = 0;
  *(_QWORD *)(a1 + 1888) = 0;
  *(_QWORD *)(a1 + 48) = 0xFFEFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 1952) = 0;
  result = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(int64x2_t *)(a1 + 1904) = result;
  *(_QWORD *)(a1 + 1848) = 0;
  *(_QWORD *)(a1 + 1864) = 0;
  *(_QWORD *)(a1 + 1856) = 0;
  return result;
}

void sub_10104F004(uint64_t a1, double a2)
{
  double v4;
  int v5;
  double v6;
  double v7;
  double v8;

  v4 = 0.0;
  v5 = 361;
  v6 = -180.0;
  do
  {
    v4 = v4 + sub_1011A2E80(v6, 0.0, 40.0);
    v6 = v6 + 1.0;
    --v5;
  }
  while (v5);
  v7 = sub_1011A2E80(a2, 0.0, 40.0) / v4;
  v8 = dbl_101C3BC70[a2 < 0.0];
  if (a2 < -60.0)
    v8 = 0.0;
  log10(v7 / (v8 / *(double *)(a1 + 32)));
}

void *sub_10104F0D8(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(a1 + 1876) = a2[8];
  return memcpy((void *)(a1 + 48), a2, 0x140uLL);
}

uint64_t sub_10104F0F0()
{
  return 0;
}

void sub_10104F0FC(id a1)
{
  qword_10229FF48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "IndoorOutdoor");
}

void sub_10104F128(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_10104F154(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

double sub_10104F180(unsigned __int16 *a1, unsigned int (*a2)(double, double), unint64_t a3)
{
  unint64_t v6;
  double v7;
  double *v8;
  double v9;
  NSObject *v11;
  char *v12;
  _WORD v13[8];
  uint8_t buf[1640];

  v6 = a1[1];
  if (!a1[1])
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219C158);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Assertion failed: n > 0, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 179,.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10219C158);
      v13[0] = 0;
      v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: n > 0, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 179,.", v13, 2);
      sub_100512490("Generic", 1, 0, 0, "T CMQueue<double>::getComparison(int (*)(const T, const T), size_t) const [T = double]", "%s\n", v12);
      if (v12 != (char *)buf)
        free(v12);
    }
  }
  v7 = *(double *)sub_1000E2B78(a1, a3);
  if (v6 > a3)
  {
    do
    {
      v8 = (double *)sub_1000E2B78(a1, a3);
      v9 = *v8;
      if (a2(*v8, v7))
        v7 = v9;
      ++a3;
    }
    while (v6 != a3);
  }
  return v7;
}

BOOL sub_10104F37C(double a1, double a2)
{
  return a2 < a1;
}

BOOL sub_10104F388(double a1, double a2)
{
  return a1 < a2;
}

double sub_10104F394(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  double result;

  v2 = sub_101476A58(a1, a2);
  *v2 = off_10219C188;
  v2[11] = 0;
  v2[12] = 0;
  *(int64x2_t *)(v2 + 13) = vdupq_n_s64(0x7FF8000000000000uLL);
  v2[15] = 0xBFF0000000000000;
  v2[16] = 0;
  *((_DWORD *)v2 + 34) = 0;
  v2[18] = 0;
  *((_DWORD *)v2 + 38) = 0;
  v2[20] = 0;
  *((_DWORD *)v2 + 42) = 0;
  v2[22] = 0;
  result = 0.0;
  *(_OWORD *)(v2 + 3) = 0u;
  *(_OWORD *)(v2 + 5) = 0u;
  *(_OWORD *)(v2 + 7) = 0u;
  *(_OWORD *)((char *)v2 + 68) = 0u;
  return result;
}

uint64_t sub_10104F3F8()
{
  return 1;
}

uint64_t sub_10104F400(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(&v18, v4, a1);
  sub_100349198((_QWORD *)(a1 + 88), &v18);
  v8 = v19;
  if (v19)
  {
    v9 = (unint64_t *)&v19->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v13 = *a2;
  v14 = a2[1];
  v15 = a2[2];
  *(_OWORD *)(a1 + 68) = *(__int128 *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 56) = v15;
  *(_OWORD *)(a1 + 40) = v14;
  *(_OWORD *)(a1 + 24) = v13;
  return 1;
}

void sub_10104F504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10104F518(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 88);
  if (v1)
    sub_100E49BB4(v1);
  return 1;
}

__n128 sub_10104F538@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a1 + 104);
  v3 = *(_OWORD *)(a1 + 120);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_10104F548(uint64_t a1)
{
  *(_DWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  return 1;
}

BOOL sub_10104F564(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  double v5;
  float *v6;
  float v7;

  v3 = a3 - 12;
  if (a3 < 0xC)
    return 0;
  v4 = a3 + 12;
  if (a3 + 12 >= (uint64_t)(a2[1] - *a2) >> 6)
    return 0;
  v5 = 0.0;
  if (v3 <= v4)
  {
    v6 = (float *)(*a2 + (a3 << 6) - 752);
    v5 = 0.0;
    do
    {
      v7 = *v6;
      v6 += 16;
      if (*(double *)(a1 + 144) * 0.77 <= v7)
        v5 = v5 + 1.0;
      ++v3;
    }
    while (v3 <= v4);
  }
  return v5 / 25.0 >= 0.5;
}

uint64_t sub_10104F5EC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  double v8;
  __int128 *v9;
  uint64_t *v10;
  double v11;
  double v12;
  float v13;
  float v14;
  uint64_t v15;
  float v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BOOL4 v20;
  double v21;
  double v22;
  uint64_t *v23;
  float v24;
  _OWORD v26[2];
  _BYTE v27[28];
  _QWORD v28[2];
  float v29;
  float v30;
  uint64_t v31;
  float v32;
  _BYTE v33[28];
  _OWORD v34[2];

  ++*(_DWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 72);
  v2 = *(uint64_t **)(a2 + 48);
  v3 = *v2;
  if (*v2 != v2[1])
  {
    v6 = 0;
    v7 = 0;
    v8 = *(double *)(v3 + 8);
    v9 = (__int128 *)(a1 + 24);
    do
    {
      v10 = (uint64_t *)(v3 + v6);
      v11 = *(double *)v10;
      v12 = *((double *)v10 + 1);
      v13 = *((float *)v10 + 4);
      v14 = *((float *)v10 + 5);
      v15 = v10[3];
      v16 = *((float *)v10 + 8);
      v34[0] = *(_OWORD *)((char *)v10 + 36);
      *(_OWORD *)((char *)v34 + 12) = *((_OWORD *)v10 + 3);
      *(double *)v28 = v11;
      *(double *)&v28[1] = v12;
      v29 = v13;
      v30 = v14;
      v31 = v15;
      v32 = v16;
      *(_OWORD *)v33 = v34[0];
      *(_OWORD *)&v33[12] = *(_OWORD *)((char *)v34 + 12);
      v17 = *v9;
      v18 = v9[1];
      v19 = v9[2];
      *(_OWORD *)&v27[12] = *(__int128 *)((char *)v9 + 44);
      v26[1] = v18;
      *(_OWORD *)v27 = v19;
      v26[0] = v17;
      v20 = sub_101311168((uint64_t)v28, (uint64_t)v26);
      if (v12 - v8 < 2700.0 && v16 >= 0.0 && v16 <= 1500.0 && v20 && v14 > 0.39)
      {
        v21 = v13;
        v22 = *(double *)(a1 + 144);
        v23 = *(uint64_t **)(a2 + 48);
        if (v22 * 0.77 <= v21 && v22 + v22 >= v21 && sub_10104F564(a1, *(_QWORD **)(a2 + 48), v7))
        {
          v24 = v21 / v22;
          *(float *)(a1 + 168) = *(float *)(a1 + 168) + v24;
          ++*(_QWORD *)(a1 + 176);
          *(float *)(a1 + 152) = v16 + *(float *)(a1 + 152);
          ++*(_QWORD *)(a1 + 160);
        }
      }
      else
      {
        v23 = *(uint64_t **)(a2 + 48);
      }
      ++v7;
      v3 = *v23;
      v6 += 64;
    }
    while (v7 < (v23[1] - *v23) >> 6);
  }
  return 1;
}

uint64_t sub_10104F818(uint64_t a1)
{
  unint64_t v2;
  NSObject *v3;
  unint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  double v10;
  double v11;
  int v12;
  unint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  _BYTE v24[30];
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  double v28;
  uint8_t buf[4];
  _BOOL4 v30;
  __int16 v31;
  unint64_t v32;
  __int16 v33;
  int v34;
  __int16 v35;
  double v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  double v44;

  v2 = *(_QWORD *)(a1 + 160);
  if (qword_10229FF90 != -1)
    dispatch_once(&qword_10229FF90, &stru_10219C1E8);
  v3 = qword_10229FF98;
  if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 160);
    v5 = 0.0;
    v6 = 0.0;
    if (v4)
      v6 = (float)(*(float *)(a1 + 152) / (float)v4);
    v7 = *(_QWORD *)(a1 + 144);
    v8 = *(_QWORD *)(a1 + 176);
    if (v8)
      v5 = (float)(*(float *)(a1 + 168) / (float)v8);
    *(_DWORD *)buf = 67110912;
    v30 = v2 > 0xE;
    v31 = 2048;
    v32 = v4;
    v33 = 1024;
    v34 = 15;
    v35 = 2048;
    v36 = v6;
    v37 = 2048;
    v38 = v7;
    v39 = 2048;
    v40 = 0x3FE8A3D70A3D70A4;
    v41 = 2048;
    v42 = 0x4000000000000000;
    v43 = 2048;
    v44 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "powerValid,%d,sampleCount,%zu,requiredSampleCount,%d,meanPower,%f,hrmax,%f,hrPctLow,%f,hrPctHigh,%f,meanHRMaxPercent,%f", buf, 0x4Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_10219C1E8);
    v14 = *(_QWORD *)(a1 + 160);
    v15 = 0.0;
    v16 = 0.0;
    if (v14)
      v16 = (float)(*(float *)(a1 + 152) / (float)v14);
    v17 = *(_QWORD *)(a1 + 144);
    v18 = *(_QWORD *)(a1 + 176);
    if (v18)
      v15 = (float)(*(float *)(a1 + 168) / (float)v18);
    LOWORD(v23) = 2048;
    *(_QWORD *)((char *)&v23 + 2) = v14;
    WORD5(v23) = 1024;
    HIDWORD(v23) = 15;
    *(_WORD *)v24 = 2048;
    *(double *)&v24[2] = v16;
    *(_WORD *)&v24[10] = 2048;
    *(_QWORD *)&v24[12] = v17;
    *(_WORD *)&v24[20] = 2048;
    *(_QWORD *)&v24[22] = 0x3FE8A3D70A3D70A4;
    v25 = 2048;
    v26 = 0x4000000000000000;
    v27 = 2048;
    v28 = v15;
    LODWORD(v21) = 74;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "powerValid,%d,sampleCount,%zu,requiredSampleCount,%d,meanPower,%f,hrmax,%f,hrPctLow,%f,hrPctHigh,%f,meanHRMaxPercent,%f", &v22, v21, 67110912, *(double *)&v23, *((double *)&v23 + 1), *(double *)v24, *(double *)&v24[8], *(double *)&v24[16]);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLCyclingFTPHRMax::execute()", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  if (v2 < 0xF)
  {
    v10 = -1.0;
    v11 = NAN;
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 160);
    v10 = 0.5;
    if (v9)
      v11 = (float)(*(float *)(a1 + 152) / (float)v9);
    else
      v11 = 0.0;
  }
  v12 = *(_DWORD *)(a1 + 136);
  *(double *)(a1 + 104) = v11;
  *(_QWORD *)(a1 + 112) = 0x7FF8000000000000;
  *(double *)(a1 + 120) = v10;
  *(_DWORD *)(a1 + 128) = v12;
  *(_DWORD *)(a1 + 132) = 11;
  return 1;
}

_QWORD *sub_10104FB54(_QWORD *a1)
{
  *a1 = off_10219C188;
  sub_100261F44((uint64_t)(a1 + 11));
  *a1 = off_102184AD0;
  sub_100261F44((uint64_t)(a1 + 1));
  return a1;
}

void sub_10104FB9C(_QWORD *a1)
{
  *a1 = off_10219C188;
  sub_100261F44((uint64_t)(a1 + 11));
  *a1 = off_102184AD0;
  sub_100261F44((uint64_t)(a1 + 1));
  operator delete();
}

void sub_10104FBF4(id a1)
{
  qword_10229FF98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CyclingPower");
}

double sub_10104FC20(uint64_t a1)
{
  double result;

  *(_DWORD *)a1 = 28;
  result = 0.333333333;
  *(_OWORD *)(a1 + 8) = xmmword_101C3BCF0;
  *(_BYTE *)(a1 + 24) = 1;
  return result;
}

void sub_10104FC40(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  double v17;
  int *v18;
  double v19;
  uint64_t v20;
  int v21;
  int v22;

  if (a3[1] == *a3)
    return;
  v5 = *a2;
  v6 = a2[1];
  v7 = 126 - 2 * __clz(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v6 - v5) >> 3));
  v8 = v6 == v5 ? 0 : v7;
  sub_101052B50(v5, v6, v8, 1);
  v9 = a3[1];
  v10 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *a3) >> 3));
  v11 = v9 == *a3 ? 0 : v10;
  sub_101054284(*a3, v9, v11, 1);
  v12 = *a3;
  v13 = a3[1];
  if (*a3 == v13)
    return;
  v14 = 0;
  v15 = 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 3);
  v16 = *a2 + 76;
  do
  {
    if (v14 >= v15)
      goto LABEL_29;
    v17 = *(double *)v12;
    v18 = (int *)(v16 + 120 * v14);
    do
    {
      v19 = (*(double *)(v18 - 17) + *(double *)(v18 - 15)) * 0.5;
      if (v19 < v17)
        goto LABEL_18;
      if (v19 > *(double *)(v12 + 8))
        goto LABEL_29;
      v20 = (*(_DWORD *)(v12 + 16) - 13);
      if (v20 > 0x3D)
      {
LABEL_28:
        v21 = 5;
        goto LABEL_17;
      }
      if (((1 << (*(_BYTE *)(v12 + 16) - 13)) & 0x2000000284400019) != 0)
      {
        v21 = 4;
LABEL_17:
        *v18 = v21;
        goto LABEL_18;
      }
      if (v20 == 24)
      {
        v21 = 3;
        goto LABEL_17;
      }
      if (v20 != 39)
        goto LABEL_28;
      if (*(_BYTE *)(v12 + 20))
        v22 = 1;
      else
        v22 = 2;
      *v18 = v22;
      if (!*(v18 - 1))
        goto LABEL_29;
LABEL_18:
      ++v14;
      v18 += 30;
    }
    while (v15 != v14);
    v14 = v15;
LABEL_29:
    v12 += 24;
  }
  while (v12 != v13);
}

void sub_10104FDD8(double a1, uint64_t a2, uint64_t *a3, float *a4)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v8;
  double v9;

  v4 = *a3;
  v5 = a3[1];
  if (*a3 != v5)
  {
    v6 = a1;
    do
    {
      LODWORD(a1) = *(_DWORD *)(v4 + 24);
      v8 = (double)*(unint64_t *)&a1 / *(double *)(v4 + 40);
      *(double *)(v4 + 80) = v8;
      v9 = *(double *)(v4 + 64)
         + (double)(*(_DWORD *)(v4 + 24) - *(_DWORD *)(v4 + 56))
         * (sub_10064E2F4(v8, a4[2], a4[3], a4[5]) + v6);
      *(double *)(v4 + 32) = v9;
      a1 = v9 / *(double *)(v4 + 40);
      *(double *)(v4 + 96) = a1;
      v4 += 120;
    }
    while (v4 != v5);
  }
}

void sub_10104FE6C(uint64_t a1@<X0>, uint64_t *a2@<X1>, double **a3@<X2>, double **a4@<X3>, double **a5@<X4>, double **a6@<X5>, uint64_t a7@<X6>, float *a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>)
{
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v23;
  double v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  float *v37;
  int v38;
  float v39;
  void *v40;
  float *v41;
  uint64_t v42;
  unint64_t v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  float *v47;
  int v48;
  double v49;
  NSObject *v50;
  __int128 v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  int v55;
  double v56;
  double v57;
  __int128 v58;
  double v59;
  float64x2_t v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  double v68;
  double v69;
  double v70;
  double v71;
  long double v72;
  long double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t *v84;
  double v85;
  unint64_t *v86;
  uint64_t v87;
  double v88;
  unint64_t *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  double v98;
  unint64_t v99;
  double v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  double *v104;
  double *v105;
  double *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  double v115;
  double *v116;
  double *v117;
  double *v118;
  double *v119;
  int64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  double *v125;
  uint64_t v126;
  int64_t v127;
  double *v128;
  _QWORD *v129;
  double v130;
  unint64_t v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double *v136;
  uint64_t v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  double *v146;
  double *v147;
  double v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t *v151;
  unint64_t *v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  char *v156;
  unint64_t v157;
  double *v158;
  _DWORD *v159;
  double v160;
  uint64_t v162;
  double v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  unint64_t v169;
  double v170;
  unint64_t v171;
  uint64_t v172;
  NSObject *v173;
  uint64_t v174;
  uint64_t v175;
  double v176;
  uint64_t v177;
  uint64_t v178;
  double *v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  uint64_t v188;
  uint64_t v189;
  double v190;
  uint64_t v191;
  uint64_t v192;
  const char *v193;
  char *v194;
  double v195;
  uint64_t v196;
  uint64_t v197;
  NSObject *v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  double v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  double v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  const char *v217;
  char *v218;
  int v219;
  double v220;
  int v221;
  double *v222;
  double *v223;
  int v224;
  int v225;
  double v226;
  double v227;
  double *v228;
  double v229;
  double v230;
  double v234;
  double v235;
  NSObject *v236;
  double v237;
  double v238;
  NSObject *v239;
  int v240;
  uint64_t v241;
  double v242;
  double v243;
  double v244;
  NSObject *v245;
  double v246;
  double v247;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  double v253;
  double v254;
  double v255;
  double v256;
  double v257;
  NSObject *v258;
  uint64_t v259;
  uint64_t v260;
  double v261;
  double v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  double v266;
  double v267;
  NSObject *v268;
  double v269;
  const char *v270;
  double v271;
  NSObject *v272;
  const char *v273;
  char *v274;
  NSObject *v275;
  int v276;
  NSObject *v277;
  NSObject *v278;
  NSObject *v279;
  NSObject *v280;
  NSObject *v281;
  NSObject *v282;
  const char *v283;
  char *v284;
  const char *v285;
  char *v286;
  const char *v287;
  char *v288;
  int v289;
  uint64_t v290;
  const char *v291;
  char *v292;
  const char *v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  double v297;
  double v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  const char *v302;
  char *v303;
  double v304;
  const char *v305;
  const char *v306;
  const char *v307;
  char *v308;
  const char *v309;
  char *v310;
  const char *v311;
  char *v312;
  const char *v313;
  char *v314;
  const char *v315;
  const char *v316;
  char *v317;
  double v318;
  double v319;
  double v320;
  __int128 v321;
  double v322;
  double v323;
  double v324;
  double v325;
  double v326;
  float64x2_t v327;
  double v328;
  double v329;
  __int128 v330;
  double **v331;
  int v336;
  int v337;
  double *v338;
  double v339;
  double v340;
  void *v341[3];
  void *v342[3];
  void *v343[2];
  _OWORD v344[4];
  void *v345;
  double *v346;
  double *v347;
  void *v348;
  double *v349;
  unint64_t v350;
  void *v351;
  void *v352;
  unint64_t *v353;
  unint64_t *v354;
  void *__p;
  void *v356;
  uint64_t v357;
  int v358;
  _BYTE v359[10];
  _BYTE v360[10];
  _BYTE v361[10];
  double v362;
  __int16 v363;
  _BYTE v364[20];
  _BYTE v365[10];
  _BYTE v366[10];
  __int16 v367;
  uint64_t v368;
  _BYTE buf[14];
  _BYTE v370[10];
  _BYTE v371[10];
  double v372;
  __int16 v373;
  _BYTE v374[20];
  _BYTE v375[10];
  _BYTE v376[10];
  __int16 v377;
  uint64_t v378;

  *(double *)a9 = a11;
  *(_QWORD *)(a9 + 8) = 0;
  *(_OWORD *)(a9 + 24) = 0u;
  v338 = (double *)(a9 + 24);
  *(_DWORD *)(a9 + 16) = 0;
  *(_OWORD *)(a9 + 40) = 0u;
  *(_OWORD *)(a9 + 56) = 0u;
  *(double *)(a9 + 72) = a12;
  *(_OWORD *)(a9 + 80) = 0u;
  *(_OWORD *)(a9 + 96) = 0u;
  *(_OWORD *)(a9 + 112) = 0u;
  *(_OWORD *)(a9 + 128) = 0u;
  *(_OWORD *)(a9 + 140) = 0u;
  *(_OWORD *)(a9 + 160) = 0u;
  *(_OWORD *)(a9 + 176) = 0u;
  *(_OWORD *)(a9 + 192) = 0u;
  *(_OWORD *)(a9 + 208) = 0u;
  *(_OWORD *)(a9 + 224) = 0u;
  *(_OWORD *)(a9 + 240) = 0u;
  v20 = *a2;
  v19 = a2[1];
  if (*a2 != v19)
  {
    while (1)
    {
      v21 = *(double *)(v20 + 16);
      if (v21 > a11 || v21 < a10)
        break;
      v20 += 120;
      if (v20 == v19)
        goto LABEL_19;
    }
  }
  if (v20 != v19)
  {
    v23 = v20 + 120;
    if (v20 + 120 != v19)
    {
      do
      {
        v24 = *(double *)(v23 + 16);
        if (v24 <= a11 && v24 >= a10)
        {
          v26 = *(_OWORD *)v23;
          v27 = *(_OWORD *)(v23 + 16);
          v28 = *(_OWORD *)(v23 + 48);
          *(_OWORD *)(v20 + 32) = *(_OWORD *)(v23 + 32);
          *(_OWORD *)(v20 + 48) = v28;
          *(_OWORD *)v20 = v26;
          *(_OWORD *)(v20 + 16) = v27;
          v29 = *(_OWORD *)(v23 + 64);
          v30 = *(_OWORD *)(v23 + 80);
          v31 = *(_OWORD *)(v23 + 96);
          *(_QWORD *)(v20 + 112) = *(_QWORD *)(v23 + 112);
          *(_OWORD *)(v20 + 80) = v30;
          *(_OWORD *)(v20 + 96) = v31;
          *(_OWORD *)(v20 + 64) = v29;
          v20 += 120;
        }
        v23 += 120;
      }
      while (v23 != v19);
      v19 = a2[1];
    }
  }
  if (v20 != v19)
    a2[1] = v20;
LABEL_19:
  __p = 0;
  v356 = 0;
  v357 = 0;
  v32 = sub_10041D904(&__p, *(const void **)a7, *(_QWORD *)(a7 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a7 + 8) - *(_QWORD *)a7) >> 3));
  sub_10104FC40((uint64_t)v32, a2, (uint64_t *)&__p);
  v33 = __p;
  if (__p)
  {
    v356 = __p;
    operator delete(__p);
  }
  sub_10104FDD8(a12, (uint64_t)v33, a2, a8);
  v343[0] = 0;
  v343[1] = 0;
  *(_QWORD *)&v344[0] = 0;
  v34 = *a2;
  v35 = a2[1];
  v36 = 0.0;
  if (*a2 == v35)
  {
    v38 = 0;
  }
  else
  {
    v37 = 0;
    v38 = 0;
    do
    {
      if (*(_DWORD *)(v34 + 72) == 1 && (*(_DWORD *)(v34 + 76) - 3) >= 2)
      {
        v39 = *(double *)(v34 + 80);
        if ((unint64_t)v37 >= *(_QWORD *)&v344[0])
        {
          v41 = (float *)v343[0];
          v42 = ((char *)v37 - (char *)v343[0]) >> 2;
          v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 62)
            sub_100259694();
          v44 = *(_QWORD *)&v344[0] - (unint64_t)v343[0];
          if ((uint64_t)(*(_QWORD *)&v344[0] - (unint64_t)v343[0]) >> 1 > v43)
            v43 = v44 >> 1;
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
            v45 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v45 = v43;
          if (v45)
          {
            v46 = (char *)sub_100260634((uint64_t)v344, v45);
            v41 = (float *)v343[0];
            v37 = (float *)v343[1];
          }
          else
          {
            v46 = 0;
          }
          v47 = (float *)&v46[4 * v42];
          *v47 = v39;
          v40 = v47 + 1;
          while (v37 != v41)
          {
            v48 = *((_DWORD *)v37-- - 1);
            *((_DWORD *)v47-- - 1) = v48;
          }
          v343[0] = v47;
          v343[1] = v40;
          *(_QWORD *)&v344[0] = &v46[4 * v45];
          if (v41)
            operator delete(v41);
        }
        else
        {
          *v37 = v39;
          v40 = v37 + 1;
        }
        v343[1] = v40;
        ++v38;
        v37 = (float *)v40;
      }
      v34 += 120;
    }
    while (v34 != v35);
    if (v38 > 19)
    {
      v49 = sub_100AA7BF8((uint64_t)v343, 25);
      v36 = sub_100AA7BF8((uint64_t)v343, 75);
      goto LABEL_47;
    }
  }
  v49 = 0.0;
LABEL_47:
  if (qword_10229FEA0 != -1)
    dispatch_once(&qword_10229FEA0, &stru_10219C228);
  v50 = qword_10229FEA8;
  if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218496;
    *(double *)&buf[4] = v49;
    *(_WORD *)&buf[12] = 2048;
    *(double *)v370 = v36;
    *(_WORD *)&v370[8] = 1024;
    *(_DWORD *)v371 = v38;
    _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "minCadenceForBouts,%.3f,minCadenceForWorkouts,%.3f,boutsUsed,%d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_10219C228);
    v358 = 134218496;
    *(double *)v359 = v49;
    *(_WORD *)&v359[8] = 2048;
    *(double *)v360 = v36;
    *(_WORD *)&v360[8] = 1024;
    *(_DWORD *)v361 = v38;
    LODWORD(v318) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 2, "minCadenceForBouts,%.3f,minCadenceForWorkouts,%.3f,boutsUsed,%d", COERCE_DOUBLE(&v358), v318, LODWORD(v319));
    v286 = (char *)v285;
    sub_100512490("Generic", 1, 0, 2, "P6MWDUserCadences (anonymous namespace)::calculateCadences(const std::vector<CLPredictedWalkDistanceBoutEntry> &)", "%s\n", v285);
    if (v286 != buf)
      free(v286);
  }
  if (v343[0])
  {
    v343[1] = v343[0];
    operator delete(v343[0]);
  }
  v331 = a6;
  v52 = *a2;
  v53 = a2[1];
  if (*a2 == v53)
  {
    v55 = 0;
    v54 = 0;
    *(_QWORD *)&v58 = 0;
    v339 = 0.0;
  }
  else
  {
    v54 = 0;
    v55 = 0;
    v56 = *(double *)(a9 + 240);
    v57 = a11 + -604800.0;
    v58 = 0uLL;
    v339 = 0.0;
    v59 = 2.33333325;
    v60 = (float64x2_t)xmmword_101C3BD00;
    v61 = 360.0;
    *(double *)&v62 = 604800.0;
    *(double *)&v63 = 0.949999988;
    *(double *)&v64 = 330.0;
    *(double *)&v65 = 500.0;
    v66 = *a2;
    do
    {
      if (*(_DWORD *)(v66 + 72)
        || (*(_QWORD *)&v51 = *(_QWORD *)(v66 + 40), *(double *)&v51 > 361.0)
        || (v67 = *(_DWORD *)(v66 + 76), v67 == 4)
        || (v68 = *(double *)(v66 + 8), *(double *)(v66 + 16) - v68 < 120.0))
      {
        *(_QWORD *)(v66 + 88) = 0xBFF0000000000000;
      }
      else if (v67 == 3 || (v69 = *(double *)(v66 + 80), v69 > v59))
      {
        *(_QWORD *)(v66 + 88) = 0xBFF0000000000000;
        v56 = *(double *)&v51 + v56;
        *(double *)(a9 + 240) = v56;
        v70 = *(double *)(a9 + 200);
        if (v70 < *(double *)(v66 + 32))
          v70 = *(double *)(v66 + 32);
        *(double *)(a9 + 200) = v70;
      }
      else if (v69 >= v49)
      {
        v322 = *(double *)&v65;
        v323 = *(double *)&v64;
        v325 = v49;
        v327 = v60;
        v328 = v59;
        v329 = v57;
        v330 = v58;
        v340 = v36;
        v336 = v55;
        v326 = v61;
        v71 = *(double *)&v62;
        v72 = *(double *)&v63;
        v321 = v51;
        v320 = pow(*(double *)&v51 / v61, 3.0);
        v324 = v72;
        v73 = pow(v72, (a11 - v68) / v71);
        *((_QWORD *)&v51 + 1) = *((_QWORD *)&v321 + 1);
        *(double *)&v64 = v323;
        v74 = v320 * v73;
        *(long double *)(v66 + 88) = v320 * v73;
        if (*(double *)&v321 >= v323 && v67 == 2)
        {
          v75 = *(double *)(v66 + 32);
          v36 = v340;
          v55 = v336;
          v58 = v330;
          v57 = v329;
          v60 = v327;
          *(double *)&v65 = v322;
          if (v69 >= v340 || v75 > v322)
          {
            *(double *)(v66 + 88) = v74 * 4.0;
            v59 = v328;
            *(double *)&v62 = v71;
            v61 = v326;
            *(double *)&v63 = v324;
            v49 = v325;
            if (v68 >= v329)
              v55 = v336 + 1;
          }
          else
          {
            v59 = v328;
            *(double *)&v62 = v71;
            v61 = v326;
            *(double *)&v63 = v324;
            v49 = v325;
          }
        }
        else
        {
          v75 = *(double *)(v66 + 32);
          v55 = v336;
          v36 = v340;
          v58 = v330;
          v59 = v328;
          v57 = v329;
          v60 = v327;
          *(double *)&v62 = v71;
          v61 = v326;
          *(double *)&v63 = v324;
          v49 = v325;
          *(double *)&v65 = v322;
        }
        ++v54;
        *(int32x2_t *)&v58 = vsub_s32(*(int32x2_t *)&v58, vmovn_s64(vcgtq_f64((float64x2_t)vdupq_lane_s64(v321, 0), v60)));
        v76 = v339;
        if (v339 < v75)
          v76 = v75;
        v339 = v76;
        v77 = v61 / *(double *)&v321 * v75;
        if (*(double *)(a9 + 248) >= v77)
          v77 = *(double *)(a9 + 248);
        *(double *)(a9 + 248) = v77;
      }
      else
      {
        *(_QWORD *)(v66 + 88) = 0;
      }
      v66 += 120;
    }
    while (v66 != v53);
  }
  *(double *)(a9 + 48) = v339;
  *(_DWORD *)(a9 + 80) = v54;
  *(_QWORD *)(a9 + 84) = v58;
  v78 = 126 - 2 * __clz(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v53 - v52) >> 3));
  v337 = v55;
  *(_DWORD *)(a9 + 92) = v55;
  *(_DWORD *)(a9 + 152) = v38;
  *(double *)(a9 + 160) = v49;
  *(double *)(a9 + 168) = v36;
  if (v53 == v52)
    v79 = 0;
  else
    v79 = v78;
  sub_101054E08(v52, v53, v79, 1);
  v352 = 0;
  v353 = 0;
  v354 = 0;
  v80 = 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 3);
  buf[0] = 0;
  sub_100B8FCC8(&v351, v80, buf);
  v81 = *a2;
  v82 = a2[1];
  if (v82 == *a2)
  {
    v81 = a2[1];
  }
  else
  {
    v83 = 0;
    v84 = v353;
    v85 = 0.0;
    do
    {
      v86 = (unint64_t *)v352;
      v87 = (char *)v84 - (_BYTE *)v352;
      if ((unint64_t)((char *)v84 - (_BYTE *)v352) <= 0x10)
        v88 = 0.0;
      else
        v88 = 0.75;
      if (*(double *)(v81 + 120 * v83 + 88) > v88)
      {
        if (v84 >= v354)
        {
          v90 = v87 >> 3;
          v91 = (v87 >> 3) + 1;
          if (v91 >> 61)
            sub_100259694();
          v92 = (char *)v354 - (_BYTE *)v352;
          if (((char *)v354 - (_BYTE *)v352) >> 2 > v91)
            v91 = v92 >> 2;
          if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
            v93 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v93 = v91;
          if (v93)
          {
            v94 = (char *)sub_10025E6A0((uint64_t)&v354, v93);
            v86 = (unint64_t *)v352;
            v84 = v353;
          }
          else
          {
            v94 = 0;
          }
          v95 = (unint64_t *)&v94[8 * v90];
          *v95 = v83;
          v89 = v95 + 1;
          while (v84 != v86)
          {
            v96 = *--v84;
            *--v95 = v96;
          }
          v352 = v95;
          v353 = v89;
          v354 = (unint64_t *)&v94[8 * v93];
          if (v86)
            operator delete(v86);
        }
        else
        {
          *v84 = v83;
          v89 = v84 + 1;
        }
        v353 = v89;
        v81 = *a2;
        v97 = *a2 + 120 * v83;
        v98 = *(double *)(v97 + 88);
        v85 = v85 + v98;
        *(_QWORD *)((char *)v351 + ((v83 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v83;
        *(double *)(v97 + 104) = v98;
        v82 = a2[1];
        v84 = v89;
      }
      if (v85 > 2.0)
        break;
      ++v83;
    }
    while (v83 < 0xEEEEEEEEEEEEEEEFLL * ((v82 - v81) >> 3));
  }
  v348 = 0;
  v349 = 0;
  v350 = 0;
  v345 = 0;
  v346 = 0;
  v347 = 0;
  memset(v344, 0, sizeof(v344));
  *(_OWORD *)v343 = 0u;
  if (v82 == v81)
  {
    v127 = 0;
    v100 = 0.0;
    v128 = (double *)&unk_101BAF000;
  }
  else
  {
    v99 = 0;
    v100 = 0.0;
    do
    {
      if (*(double *)(v81 + 120 * v99 + 88) >= 0.0)
      {
        v101 = v81 + 120 * v99;
        v102 = *(_QWORD *)(v101 + 40);
        v103 = *(_QWORD *)(v101 + 96);
        v104 = v346;
        if (v346 >= v347)
        {
          v106 = (double *)v345;
          v107 = ((char *)v346 - (_BYTE *)v345) >> 4;
          v108 = v107 + 1;
          if ((unint64_t)(v107 + 1) >> 60)
            sub_100259694();
          v109 = (char *)v347 - (_BYTE *)v345;
          if (((char *)v347 - (_BYTE *)v345) >> 3 > v108)
            v108 = v109 >> 3;
          if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF0)
            v110 = 0xFFFFFFFFFFFFFFFLL;
          else
            v110 = v108;
          if (v110)
          {
            v111 = (char *)sub_10028E224((uint64_t)&v347, v110);
            v106 = (double *)v345;
            v104 = v346;
          }
          else
          {
            v111 = 0;
          }
          v112 = &v111[16 * v107];
          *(_QWORD *)v112 = v102;
          *((_QWORD *)v112 + 1) = v103;
          v113 = v112;
          if (v104 != v106)
          {
            do
            {
              *((_OWORD *)v113 - 1) = *((_OWORD *)v104 - 1);
              v113 -= 16;
              v104 -= 2;
            }
            while (v104 != v106);
            v106 = (double *)v345;
          }
          v105 = (double *)(v112 + 16);
          v345 = v113;
          v346 = (double *)(v112 + 16);
          v347 = (double *)&v111[16 * v110];
          if (v106)
            operator delete(v106);
        }
        else
        {
          *(_QWORD *)v346 = v102;
          *((_QWORD *)v104 + 1) = v103;
          v105 = v104 + 2;
        }
        v346 = v105;
        v114 = *a2 + 120 * v99;
        v115 = *(double *)(v114 + 40);
        sub_101052948((uint64_t)v343, v115, *(double *)(v114 + 96));
        v100 = v100 + v115;
        v81 = *a2;
      }
      if (*(_DWORD *)(v81 + 120 * v99 + 72) == 1 || *(double *)(v81 + 120 * v99 + 88) >= 0.0)
      {
        v116 = (double *)(v81 + 120 * v99 + 96);
        v117 = v349;
        if ((unint64_t)v349 >= v350)
        {
          v119 = (double *)v348;
          v120 = ((char *)v349 - (_BYTE *)v348) >> 3;
          v121 = v120 + 1;
          if ((unint64_t)(v120 + 1) >> 61)
            sub_100259694();
          v122 = v350 - (_QWORD)v348;
          if ((uint64_t)(v350 - (_QWORD)v348) >> 2 > v121)
            v121 = v122 >> 2;
          if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFF8)
            v123 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v123 = v121;
          if (v123)
          {
            v124 = (char *)sub_10025E6A0((uint64_t)&v350, v123);
            v119 = (double *)v348;
            v117 = v349;
          }
          else
          {
            v124 = 0;
          }
          v125 = (double *)&v124[8 * v120];
          *v125 = *v116;
          v118 = v125 + 1;
          while (v117 != v119)
          {
            v126 = *((_QWORD *)v117-- - 1);
            *((_QWORD *)v125-- - 1) = v126;
          }
          v348 = v125;
          v349 = v118;
          v350 = (unint64_t)&v124[8 * v123];
          if (v119)
            operator delete(v119);
        }
        else
        {
          *v349 = *v116;
          v118 = v117 + 1;
        }
        v349 = v118;
        v81 = *a2;
      }
      ++v99;
    }
    while (v99 < 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - v81) >> 3));
    v127 = (char *)v349 - (_BYTE *)v348;
    v128 = (double *)&unk_101BAF000;
    if (v349 != v348)
    {
      sub_101056508((double *)v348, v349, 126 - 2 * __clz(v127 >> 3), 1);
      v129 = v348;
      v127 = (char *)v349 - (_BYTE *)v348;
      v130 = (double)(unint64_t)(((char *)v349 - (_BYTE *)v348) >> 3);
      *(_QWORD *)(a9 + 224) = *((_QWORD *)v348 + (int)(v130 * 0.1));
      *(_QWORD *)(a9 + 232) = v129[(int)(v130 * 0.05)];
    }
  }
  v131 = (char *)v346 - (_BYTE *)v345;
  *(_DWORD *)(a9 + 216) = (unint64_t)((char *)v346 - (_BYTE *)v345) >> 4;
  *(_DWORD *)(a9 + 220) = (unint64_t)v127 >> 3;
  v132 = 0.0;
  if (v131 >= 0x141)
  {
    v132 = sub_1011A2AA0((double **)&v345, 0);
    v134 = v133;
    v135 = v128[418];
    *(double *)(a9 + 32) = (v133 + v132 * v135) * v135;
    *(double *)(a9 + 96) = sub_1010529F8((uint64_t)v343);
    *(double *)(a9 + 104) = v132;
    v136 = (double *)v345;
    v137 = ((char *)v346 - (_BYTE *)v345) >> 4;
    v138 = v100 / (double)(unint64_t)v137;
    if (v346 == v345)
    {
      v140 = 0.0;
      v139 = 0.0;
    }
    else
    {
      v139 = 0.0;
      v140 = 0.0;
      do
      {
        v141 = *v136;
        v142 = v136[1];
        v136 += 2;
        v139 = v139 + (v141 - v138) * (v141 - v138);
        v140 = v140 + (v134 + v141 * v132 - v142) * (v134 + v141 * v132 - v142);
      }
      while (v136 != v346);
    }
    *(double *)(a9 + 112) = sqrt(v140 / (double)(unint64_t)(v137 - 2))
                          * sqrt(1.0 / (double)(unint64_t)v137 + 1.0 + (v135 - v138) * (v135 - v138) / v139);
  }
  v143 = 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 3);
  *(_QWORD *)buf = 0;
  sub_10025E5E0(v342, v143, buf);
  v144 = a2[1] - *a2;
  if (v144)
  {
    v145 = v144 / 120;
    v146 = (double *)v342[0];
    if (v145 <= 1)
      v145 = 1;
    v147 = (double *)(*a2 + 96);
    v148 = v128[418];
    do
    {
      *v146++ = *v147 + v132 * (v148 - *(v147 - 7));
      v147 += 15;
      --v145;
    }
    while (v145);
  }
  *(_DWORD *)buf = 0;
  sub_100CB0348(v341, ((char *)v353 - (_BYTE *)v352) >> 3, buf);
  v149 = *a2;
  v150 = a2[1];
  v151 = (unint64_t *)v352;
  v152 = v353;
  v153 = v150 - *a2;
  if (v150 != *a2)
  {
    v154 = 0;
    v155 = v153 / 120;
    v156 = (char *)v351;
    v157 = ((char *)v353 - (_BYTE *)v352) >> 3;
    v158 = (double *)v342[0];
    v159 = v341[0];
    if (v157 <= 1)
      v157 = 1;
    if (v155 <= 1)
      v155 = 1;
    do
    {
      if (((*(_QWORD *)&v156[(v154 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v154) & 1) == 0)
      {
        v160 = *(double *)(v149 + 120 * v154 + 88);
        if (v160 > 0.0 && v152 != v151)
        {
          v162 = 0;
          v163 = 0.0;
          v164 = -1;
          do
          {
            v165 = v151[v162];
            if (v158[v165] < v158[v154])
            {
              v166 = v149 + 120 * v165;
              if (*(double *)(v166 + 32) > v163)
              {
                v163 = *(double *)(v166 + 32);
                v164 = v162;
              }
            }
            ++v162;
          }
          while (v157 != v162);
          if (v163 > 0.0)
          {
            v167 = v159[v164];
            if (v167 <= 4)
            {
              v168 = v149 + 120 * v151[v164];
              *(double *)(v168 + 88) = v160 + *(double *)(v168 + 88);
              v159[v164] = v167 + 1;
              *(_QWORD *)(v149 + 120 * v154 + 112) = *(_QWORD *)(v149 + 120 * v164 + 8);
            }
          }
        }
      }
      ++v154;
    }
    while (v154 != v155);
    v151 = (unint64_t *)v352;
    v152 = v353;
  }
  *v338 = 0.0;
  if (v152 != v151)
  {
    v169 = 0;
    *(_QWORD *)(a9 + 176) = 0x408F380000000000;
    v170 = 0.0;
    do
    {
      v171 = v151[v169];
      v172 = *a2;
      if (qword_10229FEA0 != -1)
        dispatch_once(&qword_10229FEA0, &stru_10219C228);
      v173 = qword_10229FEA8;
      if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEBUG))
      {
        v174 = v172 + 120 * v171;
        v175 = *(_QWORD *)(v174 + 104);
        v176 = *(double *)(v174 + 88);
        v177 = *(_QWORD *)(v174 + 32);
        v178 = *(_QWORD *)(v174 + 40);
        LODWORD(v174) = *(_DWORD *)(v174 + 24);
        *(_DWORD *)buf = 134219520;
        *(double *)&buf[4] = a11;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)v370 = v169;
        *(_WORD *)&v370[8] = 2048;
        *(_QWORD *)v371 = v175;
        *(_WORD *)&v371[8] = 2048;
        v372 = v176;
        v373 = 2048;
        *(_QWORD *)v374 = v177;
        *(_WORD *)&v374[8] = 2048;
        *(_QWORD *)&v374[10] = v178;
        *(_WORD *)&v374[18] = 1024;
        *(_DWORD *)v375 = v174;
        _os_log_impl((void *)&_mh_execute_header, v173, OS_LOG_TYPE_DEBUG, "Week,%.0f,Support,%lu,BaseConf,%.3f,Conf+,%.3f,Dist,%.1f,timeWithSteps,%.1f,steps,%d", buf, 0x44u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FEA0 != -1)
          dispatch_once(&qword_10229FEA0, &stru_10219C228);
        v188 = v172 + 120 * v171;
        v189 = *(_QWORD *)(v188 + 104);
        v190 = *(double *)(v188 + 88);
        v191 = *(_QWORD *)(v188 + 32);
        v192 = *(_QWORD *)(v188 + 40);
        LODWORD(v188) = *(_DWORD *)(v188 + 24);
        v358 = 134219520;
        *(double *)v359 = a11;
        *(_WORD *)&v359[8] = 2048;
        *(_QWORD *)v360 = v169;
        *(_WORD *)&v360[8] = 2048;
        *(_QWORD *)v361 = v189;
        *(_WORD *)&v361[8] = 2048;
        v362 = v190;
        v363 = 2048;
        *(_QWORD *)v364 = v191;
        *(_WORD *)&v364[8] = 2048;
        *(_QWORD *)&v364[10] = v192;
        *(_WORD *)&v364[18] = 1024;
        *(_DWORD *)v365 = v188;
        LODWORD(v318) = 68;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 2, "Week,%.0f,Support,%lu,BaseConf,%.3f,Conf+,%.3f,Dist,%.1f,timeWithSteps,%.1f,steps,%d", COERCE_DOUBLE(&v358), *(_QWORD *)&v318, v319, v320, *(double *)&v321, *((double *)&v321 + 1), LODWORD(v322));
        v194 = (char *)v193;
        sub_100512490("Generic", 1, 0, 2, "CLPredictedWalkDistanceEstimate CLPredictedWalkDistanceEstimator::makeEstimate(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLPredictedWalkDistanceBoutEntry>, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<P6MWDHoursPerDay> &, std::vector<HealthKitWorkout>, const CLBodyMetrics &, double) const", "%s\n", v193);
        if (v194 != buf)
          free(v194);
      }
      v179 = (double *)(v172 + 120 * v171);
      v180 = v179[11];
      v181 = *(double *)(a9 + 24) + v179[4] * v180;
      *(double *)(a9 + 24) = v181;
      v170 = v170 + v180;
      v182 = v179[5];
      v183 = *(double *)(a9 + 184);
      if (*(double *)(a9 + 176) < v182)
        v182 = *(double *)(a9 + 176);
      *(double *)(a9 + 176) = v182;
      v184 = v179[5];
      if (v184 >= v183)
        v185 = v179[5];
      else
        v185 = v183;
      v186 = v184 + *(double *)(a9 + 192);
      *(double *)(a9 + 184) = v185;
      *(double *)(a9 + 192) = v186;
      v187 = v179[10] + *(double *)(a9 + 208);
      *(double *)(a9 + 208) = v187;
      ++v169;
      v151 = (unint64_t *)v352;
    }
    while (v169 < ((char *)v353 - (_BYTE *)v352) >> 3);
    v195 = (double)(unint64_t)(((char *)v353 - (_BYTE *)v352) >> 3);
    *(double *)(a9 + 192) = v186 / v195;
    *(double *)(a9 + 208) = v187 / v195;
    if (v170 > 0.0)
      *v338 = v181 / v170;
  }
  v196 = *a2;
  v197 = a2[1];
  if (*a2 != v197)
  {
    do
    {
      if (!*(_DWORD *)(v196 + 72))
      {
        if (qword_10229FEA0 != -1)
          dispatch_once(&qword_10229FEA0, &stru_10219C228);
        v198 = qword_10229FEA8;
        if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEBUG))
        {
          v199 = *(_QWORD *)(v196 + 8);
          v200 = *(_QWORD *)(v196 + 16);
          v201 = *(_DWORD *)(v196 + 24);
          v202 = *(double *)(v196 + 32);
          v203 = *(_QWORD *)(v196 + 40);
          v204 = *(_DWORD *)(v196 + 76);
          v205 = *(_QWORD *)(v196 + 88);
          v206 = *(_QWORD *)(v196 + 104);
          v207 = *(_QWORD *)(v196 + 112);
          *(_DWORD *)buf = 134220288;
          *(double *)&buf[4] = a11;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)v370 = v199;
          *(_WORD *)&v370[8] = 2048;
          *(_QWORD *)v371 = v200;
          *(_WORD *)&v371[8] = 2048;
          v372 = v202;
          v373 = 1024;
          *(_DWORD *)v374 = v201;
          *(_WORD *)&v374[4] = 2048;
          *(_QWORD *)&v374[6] = v203;
          *(_WORD *)&v374[14] = 1024;
          *(_DWORD *)&v374[16] = v204;
          *(_WORD *)v375 = 2048;
          *(_QWORD *)&v375[2] = v205;
          *(_WORD *)v376 = 2048;
          *(_QWORD *)&v376[2] = v206;
          v377 = 2048;
          v378 = v207;
          _os_log_impl((void *)&_mh_execute_header, v198, OS_LOG_TYPE_DEBUG, "Week,%.0f,boutStart,%.3f,boutEnd,%.3f,dist,%.3f,steps,%d,activeTime,%.3f,workoutType,%d,conf,%.3f,baseConf,%.3f,supportsBout,%.3f", buf, 0x5Eu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FEA0 != -1)
            dispatch_once(&qword_10229FEA0, &stru_10219C228);
          v208 = *(_QWORD *)(v196 + 8);
          v209 = *(_QWORD *)(v196 + 16);
          v210 = *(_DWORD *)(v196 + 24);
          v211 = *(double *)(v196 + 32);
          v212 = *(_QWORD *)(v196 + 40);
          v213 = *(_DWORD *)(v196 + 76);
          v214 = *(_QWORD *)(v196 + 88);
          v215 = *(_QWORD *)(v196 + 104);
          v216 = *(_QWORD *)(v196 + 112);
          v358 = 134220288;
          *(double *)v359 = a11;
          *(_WORD *)&v359[8] = 2048;
          *(_QWORD *)v360 = v208;
          *(_WORD *)&v360[8] = 2048;
          *(_QWORD *)v361 = v209;
          *(_WORD *)&v361[8] = 2048;
          v362 = v211;
          v363 = 1024;
          *(_DWORD *)v364 = v210;
          *(_WORD *)&v364[4] = 2048;
          *(_QWORD *)&v364[6] = v212;
          *(_WORD *)&v364[14] = 1024;
          *(_DWORD *)&v364[16] = v213;
          *(_WORD *)v365 = 2048;
          *(_QWORD *)&v365[2] = v214;
          *(_WORD *)v366 = 2048;
          *(_QWORD *)&v366[2] = v215;
          v367 = 2048;
          v368 = v216;
          LODWORD(v318) = 94;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 2, "Week,%.0f,boutStart,%.3f,boutEnd,%.3f,dist,%.3f,steps,%d,activeTime,%.3f,workoutType,%d,conf,%.3f,baseConf,%.3f,supportsBout,%.3f", COERCE_DOUBLE(&v358), v318, v319, v320, (_DWORD)v321, *((double *)&v321 + 1), LODWORD(v322), v323, v324, v325);
          v218 = (char *)v217;
          sub_100512490("Generic", 1, 0, 2, "void (anonymous namespace)::logBouts(double, const std::vector<CLPredictedWalkDistanceBoutEntry> &)", "%s\n", v217);
          if (v218 != buf)
            free(v218);
        }
      }
      v196 += 120;
    }
    while (v196 != v197);
  }
  v219 = *(_DWORD *)a1;
  v220 = *(double *)(a1 + 8);
  if (*(int *)a1 >= 7)
    v221 = 7;
  else
    v221 = *(_DWORD *)a1;
  *(double *)(a9 + 8) = a11;
  v222 = *v331;
  v223 = v331[1];
  if (*v331 == v223)
  {
    v225 = 0;
    v224 = 0;
    v227 = a11;
    v228 = (double *)&unk_101BAF000;
  }
  else
  {
    v224 = 0;
    v225 = 0;
    v226 = *(double *)(a1 + 16);
    v227 = a11;
    v228 = (double *)&unk_101BAF000;
    do
    {
      v229 = v222[3];
      v230 = (*v222 + v222[1]) * 0.5;
      if (v229 >= v226 && v222[2] >= v226 && v230 > a10 && v230 < a11)
      {
        ++v224;
        if (v230 > a11 + -604800.0)
          ++v225;
      }
      if (v229 > 0.0)
      {
        v227 = fmin(*v222, v227);
        *(double *)(a9 + 8) = v227;
      }
      v222 += 4;
    }
    while (v222 != v223);
  }
  v234 = (double)v221;
  *(double *)(a9 + 8) = fmax(a10, v227);
  if (qword_10229FEA0 != -1)
    dispatch_once(&qword_10229FEA0, &stru_10219C228);
  v235 = v220 * v234;
  v236 = qword_10229FEA8;
  if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = v337;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v225;
    *(_WORD *)v370 = 2048;
    *(double *)&v370[2] = v220 * v234;
    _os_log_impl((void *)&_mh_execute_header, v236, OS_LOG_TYPE_DEBUG, "Saw %d goodWalkWorkouts and %d days of data in current week, 1 workout or at least %.1f days required ", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_10219C228);
    v358 = 67109632;
    *(_DWORD *)v359 = v337;
    *(_WORD *)&v359[4] = 1024;
    *(_DWORD *)&v359[6] = v225;
    *(_WORD *)v360 = 2048;
    *(double *)&v360[2] = v220 * v234;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 2, "Saw %d goodWalkWorkouts and %d days of data in current week, 1 workout or at least %.1f days required ", &v358, 24, v319);
    v288 = (char *)v287;
    sub_100512490("Generic", 1, 0, 2, "CLPredictedWalkDistanceEstimate CLPredictedWalkDistanceEstimator::makeEstimate(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLPredictedWalkDistanceBoutEntry>, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<P6MWDHoursPerDay> &, std::vector<HealthKitWorkout>, const CLBodyMetrics &, double) const", "%s\n", v287);
    if (v288 != buf)
      free(v288);
  }
  if (qword_10229FEA0 != -1)
    dispatch_once(&qword_10229FEA0, &stru_10219C228);
  v237 = (double)v219;
  v238 = v220 * (double)v219;
  v239 = qword_10229FEA8;
  if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEBUG))
  {
    v240 = *(_DWORD *)a1;
    v241 = *(_QWORD *)(a9 + 8);
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&buf[4] = v224;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v240;
    *(_WORD *)v370 = 2048;
    *(double *)&v370[2] = v220 * v237;
    *(_WORD *)v371 = 2048;
    *(_QWORD *)&v371[2] = v241;
    _os_log_impl((void *)&_mh_execute_header, v239, OS_LOG_TYPE_DEBUG, "Saw %d days of data in last %d days, at least %.1f required, earliest day with watch use was %.1f", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_10219C228);
    v289 = *(_DWORD *)a1;
    v290 = *(_QWORD *)(a9 + 8);
    v358 = 67109888;
    *(_DWORD *)v359 = v224;
    *(_WORD *)&v359[4] = 1024;
    *(_DWORD *)&v359[6] = v289;
    *(_WORD *)v360 = 2048;
    *(double *)&v360[2] = v220 * v237;
    *(_WORD *)v361 = 2048;
    *(_QWORD *)&v361[2] = v290;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 2, "Saw %d days of data in last %d days, at least %.1f required, earliest day with watch use was %.1f", &v358, 34, v319, v320);
    v292 = (char *)v291;
    sub_100512490("Generic", 1, 0, 2, "CLPredictedWalkDistanceEstimate CLPredictedWalkDistanceEstimator::makeEstimate(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLPredictedWalkDistanceBoutEntry>, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<P6MWDHoursPerDay> &, std::vector<HealthKitWorkout>, const CLBodyMetrics &, double) const", "%s\n", v291);
    if (v292 != buf)
      free(v292);
  }
  v242 = sub_101052A78(a1, a3, v331, 1, a10, a11);
  v243 = sub_101052A78(a1, a4, v331, *(unsigned __int8 *)(a1 + 24), a10, a11);
  v244 = sub_101052A78(a1, a5, v331, 1, a10, a11);
  if (qword_10229FEA0 != -1)
    dispatch_once(&qword_10229FEA0, &stru_10219C228);
  v245 = qword_10229FEA8;
  if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218752;
    *(double *)&buf[4] = a11;
    *(_WORD *)&buf[12] = 2048;
    *(double *)v370 = v242;
    *(_WORD *)&v370[8] = 2048;
    *(double *)v371 = v243;
    *(_WORD *)&v371[8] = 2048;
    v372 = v244;
    _os_log_impl((void *)&_mh_execute_header, v245, OS_LOG_TYPE_DEBUG, "Week,%.0f,meanFlightsPerDay,%.3f,meanStepsPerDay,%.3f,meanExerciseMinutesPerDay,%.3f", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_10219C228);
    v358 = 134218752;
    *(double *)v359 = a11;
    *(_WORD *)&v359[8] = 2048;
    *(double *)v360 = v242;
    *(_WORD *)&v360[8] = 2048;
    *(double *)v361 = v243;
    *(_WORD *)&v361[8] = 2048;
    v362 = v244;
    LODWORD(v318) = 42;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 2, "Week,%.0f,meanFlightsPerDay,%.3f,meanStepsPerDay,%.3f,meanExerciseMinutesPerDay,%.3f", COERCE_DOUBLE(&v358), v318, v319, v320);
    v294 = (char *)v293;
    sub_100512490("Generic", 1, 0, 2, "CLPredictedWalkDistanceEstimate CLPredictedWalkDistanceEstimator::makeEstimate(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLPredictedWalkDistanceBoutEntry>, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<P6MWDHoursPerDay> &, std::vector<HealthKitWorkout>, const CLBodyMetrics &, double) const", "%s\n", v293);
    if (v294 != buf)
      free(v294);
  }
  if (v242 >= 0.0 && v243 >= 0.0 && v244 >= 0.0)
  {
    v246 = log10(fmax(fmin(v242, 80.0), 0.0357142857));
    v247 = log10(fmax(fmin(v243, 12000.0), 1500.0));
    *(long double *)(a9 + 40) = v246 * 82.7803
                              + -577.7315
                              + v247 * 267.6314
                              + log10(fmax(fmin(v244, 100.0), 1.0)) * -12.0958;
  }
  *(_DWORD *)(a9 + 120) = v224;
  *(_DWORD *)(a9 + 124) = v225;
  *(double *)(a9 + 128) = v242;
  *(double *)(a9 + 136) = v243;
  *(double *)(a9 + 144) = v244;
  if (*(double *)(a9 + 232) * 360.0 >= v339)
    v248 = *(double *)(a9 + 232) * 360.0;
  else
    v248 = v339;
  v249 = *(double *)(a9 + 192);
  v250 = *(double *)(a9 + 24);
  if (v249 > 240.0)
  {
    v251 = 360.0 / v249 * v250;
    if (v251 >= v248)
      v248 = v251;
  }
  v252 = *(double *)(a9 + 200);
  v253 = *(double *)(a9 + 32);
  if (*(double *)(a9 + 40) >= v252)
    v252 = *(double *)(a9 + 40);
  if (v248 >= v252)
    v254 = v252;
  else
    v254 = v248;
  if (v250 < v254)
    v250 = v254;
  *(double *)(a9 + 56) = v250;
  v255 = v228[399];
  if (v253 > v250)
  {
    v256 = fmax(fmin((v252 + -250.0) / 200.0, 0.6), 0.25);
    v257 = v253 - v250;
    if (v257 > 160.0)
      v257 = 160.0;
    v250 = v250 + v256 * v257;
    *(double *)(a9 + 56) = v250;
  }
  *(double *)(a9 + 64) = fmax(fmin(v250, v255), 120.0);
  if (qword_10229FEA0 != -1)
    dispatch_once(&qword_10229FEA0, &stru_10219C228);
  v258 = qword_10229FEA8;
  if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEFAULT))
  {
    v259 = *(_QWORD *)(a9 + 24);
    v260 = *(_QWORD *)(a9 + 32);
    v261 = *(double *)(a9 + 232) * 360.0;
    v262 = *(double *)(a9 + 40);
    v263 = *(_QWORD *)(a9 + 192);
    v264 = *(_QWORD *)(a9 + 200);
    v265 = *(_QWORD *)(a9 + 56);
    *(_DWORD *)buf = 134285313;
    *(_QWORD *)&buf[4] = v259;
    *(_WORD *)&buf[12] = 2049;
    *(_QWORD *)v370 = v260;
    *(_WORD *)&v370[8] = 2049;
    *(double *)v371 = v261;
    *(_WORD *)&v371[8] = 2049;
    v372 = v262;
    v373 = 2049;
    *(double *)v374 = v339;
    *(_WORD *)&v374[8] = 2049;
    *(_QWORD *)&v374[10] = v263;
    *(_WORD *)&v374[18] = 2049;
    *(_QWORD *)v375 = v264;
    *(_WORD *)&v375[8] = 2049;
    *(_QWORD *)v376 = v265;
    _os_log_impl((void *)&_mh_execute_header, v258, OS_LOG_TYPE_DEFAULT, "pDist,%{private}.0f,pSpeed,%{private}.0f,pSpeed95,%{private}.0f,pActivity,%{private}.0f,maxBout,%{private}.0f,avgActiveTimeInSupport,%{private}.0f,maxRunningDist,%{private}.0f,p6MWD,%{private}.0f", buf, 0x52u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_10219C228);
    v295 = *(_QWORD *)(a9 + 24);
    v296 = *(_QWORD *)(a9 + 32);
    v297 = *(double *)(a9 + 232) * 360.0;
    v298 = *(double *)(a9 + 40);
    v299 = *(_QWORD *)(a9 + 192);
    v300 = *(_QWORD *)(a9 + 200);
    v301 = *(_QWORD *)(a9 + 56);
    v358 = 134285313;
    *(_QWORD *)v359 = v295;
    *(_WORD *)&v359[8] = 2049;
    *(_QWORD *)v360 = v296;
    *(_WORD *)&v360[8] = 2049;
    *(double *)v361 = v297;
    *(_WORD *)&v361[8] = 2049;
    v362 = v298;
    v363 = 2049;
    *(double *)v364 = v339;
    *(_WORD *)&v364[8] = 2049;
    *(_QWORD *)&v364[10] = v299;
    *(_WORD *)&v364[18] = 2049;
    *(_QWORD *)v365 = v300;
    *(_WORD *)&v365[8] = 2049;
    *(_QWORD *)v366 = v301;
    LODWORD(v318) = 82;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 0, "pDist,%{private}.0f,pSpeed,%{private}.0f,pSpeed95,%{private}.0f,pActivity,%{private}.0f,maxBout,%{private}.0f,avgActiveTimeInSupport,%{private}.0f,maxRunningDist,%{private}.0f,p6MWD,%{private}.0f", &v358, *(_QWORD *)&v318);
    v303 = (char *)v302;
    sub_100512490("Generic", 1, 0, 2, "CLPredictedWalkDistanceEstimate CLPredictedWalkDistanceEstimator::makeEstimate(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLPredictedWalkDistanceBoutEntry>, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<P6MWDHoursPerDay> &, std::vector<HealthKitWorkout>, const CLBodyMetrics &, double) const", "%s\n", v302);
    if (v303 != buf)
      free(v303);
  }
  v266 = fmin(v248, v255);
  if (qword_10229FEA0 != -1)
    dispatch_once(&qword_10229FEA0, &stru_10219C228);
  v267 = fmax(v266, 120.0);
  v268 = qword_10229FEA8;
  if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEFAULT))
  {
    v269 = *(double *)(a9 + 56);
    if (*(double *)(a9 + 24) >= v269)
    {
      v270 = "pDist";
    }
    else if (*(double *)(a9 + 40) >= v269)
    {
      v270 = "pActivity";
    }
    else
    {
      v270 = "maxDist";
      if (*(double *)(a9 + 32) >= v267)
        v270 = "pSpeed";
    }
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v270;
    _os_log_impl((void *)&_mh_execute_header, v268, OS_LOG_TYPE_DEFAULT, "p6MWD based on %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_10219C228);
    v304 = *(double *)(a9 + 56);
    if (*(double *)(a9 + 24) >= v304)
    {
      v305 = "pDist";
    }
    else if (*(double *)(a9 + 40) >= v304)
    {
      v305 = "pActivity";
    }
    else
    {
      v305 = "maxDist";
      if (*(double *)(a9 + 32) >= v267)
        v305 = "pSpeed";
    }
    v358 = 136446210;
    *(_QWORD *)v359 = v305;
    LODWORD(v318) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 0, "p6MWD based on %{public}s", &v358, *(_QWORD *)&v318);
    v310 = (char *)v309;
    sub_100512490("Generic", 1, 0, 2, "CLPredictedWalkDistanceEstimate CLPredictedWalkDistanceEstimator::makeEstimate(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLPredictedWalkDistanceBoutEntry>, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<P6MWDHoursPerDay> &, std::vector<HealthKitWorkout>, const CLBodyMetrics &, double) const", "%s\n", v309);
    if (v310 != buf)
      free(v310);
  }
  if (v235 > (double)v225 || v238 > (double)v224)
  {
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_10219C228);
    v275 = qword_10229FEA8;
    if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v275, OS_LOG_TYPE_DEFAULT, "No p6MWD estimate, insufficient time on wrist", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEA0 != -1)
        dispatch_once(&qword_10229FEA0, &stru_10219C228);
      LOWORD(v358) = 0;
      LODWORD(v318) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 0, "No p6MWD estimate, insufficient time on wrist", &v358, *(_QWORD *)&v318);
      v308 = (char *)v307;
      sub_100512490("Generic", 1, 0, 2, "CLPredictedWalkDistanceEstimate CLPredictedWalkDistanceEstimator::makeEstimate(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLPredictedWalkDistanceBoutEntry>, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<P6MWDHoursPerDay> &, std::vector<HealthKitWorkout>, const CLBodyMetrics &, double) const", "%s\n", v307);
      if (v308 != buf)
        free(v308);
    }
    v276 = 0;
  }
  else if (*v338 <= 0.0)
  {
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_10219C228);
    v277 = qword_10229FEA8;
    if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = a11;
      _os_log_impl((void *)&_mh_execute_header, v277, OS_LOG_TYPE_DEFAULT, "No valid bouts for period ending %{public}.0f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEA0 != -1)
        dispatch_once(&qword_10229FEA0, &stru_10219C228);
      v358 = 134349056;
      *(double *)v359 = a11;
      LODWORD(v318) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 0, "No valid bouts for period ending %{public}.0f", &v358, *(_QWORD *)&v318);
      v312 = (char *)v311;
      sub_100512490("Generic", 1, 0, 2, "CLPredictedWalkDistanceEstimate CLPredictedWalkDistanceEstimator::makeEstimate(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLPredictedWalkDistanceBoutEntry>, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<P6MWDHoursPerDay> &, std::vector<HealthKitWorkout>, const CLBodyMetrics &, double) const", "%s\n", v311);
      if (v312 != buf)
        free(v312);
    }
    v276 = 5;
  }
  else
  {
    v271 = *(double *)(a9 + 40);
    if (v271 <= 0.0)
    {
      if (qword_10229FEA0 != -1)
        dispatch_once(&qword_10229FEA0, &stru_10219C228);
      v278 = qword_10229FEA8;
      if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v278, OS_LOG_TYPE_DEFAULT, "No p6MWD estimate, no activity prediction", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FEA0 != -1)
          dispatch_once(&qword_10229FEA0, &stru_10219C228);
        LOWORD(v358) = 0;
        LODWORD(v318) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 0, "No p6MWD estimate, no activity prediction", &v358, *(_QWORD *)&v318);
        v314 = (char *)v313;
        sub_100512490("Generic", 1, 0, 2, "CLPredictedWalkDistanceEstimate CLPredictedWalkDistanceEstimator::makeEstimate(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLPredictedWalkDistanceBoutEntry>, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<P6MWDHoursPerDay> &, std::vector<HealthKitWorkout>, const CLBodyMetrics &, double) const", "%s\n", v313);
        if (v314 != buf)
          free(v314);
      }
      v276 = 4;
    }
    else
    {
      if (*(double *)(a9 + 32) <= 0.0)
      {
        if (qword_10229FEA0 != -1)
          dispatch_once(&qword_10229FEA0, &stru_10219C228);
        v279 = qword_10229FEA8;
        if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v279, OS_LOG_TYPE_DEFAULT, "No p6MWD estimate, insufficient points for pSpeed", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_335;
        bzero(buf, 0x65CuLL);
        if (qword_10229FEA0 != -1)
          dispatch_once(&qword_10229FEA0, &stru_10219C228);
        LOWORD(v358) = 0;
        LODWORD(v318) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 0, "No p6MWD estimate, insufficient points for pSpeed", &v358, *(_QWORD *)&v318);
        v274 = (char *)v315;
        sub_100512490("Generic", 1, 0, 2, "CLPredictedWalkDistanceEstimate CLPredictedWalkDistanceEstimator::makeEstimate(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLPredictedWalkDistanceBoutEntry>, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<P6MWDHoursPerDay> &, std::vector<HealthKitWorkout>, const CLBodyMetrics &, double) const", "%s\n", v315);
        goto LABEL_424;
      }
      if (*(int *)(a9 + 216) <= 19)
      {
        if (qword_10229FEA0 != -1)
          dispatch_once(&qword_10229FEA0, &stru_10219C228);
        v272 = qword_10229FEA8;
        if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v272, OS_LOG_TYPE_DEFAULT, "No p6MWD estimate, high uncertainty in speed prediction", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_335;
        bzero(buf, 0x65CuLL);
        if (qword_10229FEA0 != -1)
          dispatch_once(&qword_10229FEA0, &stru_10219C228);
        LOWORD(v358) = 0;
        LODWORD(v318) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 0, "No p6MWD estimate, high uncertainty in speed prediction", &v358, *(_QWORD *)&v318);
        v274 = (char *)v273;
        sub_100512490("Generic", 1, 0, 2, "CLPredictedWalkDistanceEstimate CLPredictedWalkDistanceEstimator::makeEstimate(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLPredictedWalkDistanceBoutEntry>, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<P6MWDHoursPerDay> &, std::vector<HealthKitWorkout>, const CLBodyMetrics &, double) const", "%s\n", v273);
LABEL_424:
        if (v274 != buf)
          free(v274);
LABEL_335:
        v276 = 2;
        goto LABEL_336;
      }
      if (v271 >= *v338 + -100.0 || v271 >= v255)
      {
        if (qword_10229FEA0 != -1)
          dispatch_once(&qword_10229FEA0, &stru_10219C228);
        v282 = qword_10229FEA8;
        if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v282, OS_LOG_TYPE_DEFAULT, "Available p6MWD estimate", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_342;
        bzero(buf, 0x65CuLL);
        if (qword_10229FEA0 != -1)
          dispatch_once(&qword_10229FEA0, &stru_10219C228);
        LOWORD(v358) = 0;
        LODWORD(v318) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 0, "Available p6MWD estimate", &v358, *(_QWORD *)&v318);
        v284 = (char *)v283;
        sub_100512490("Generic", 1, 0, 2, "CLPredictedWalkDistanceEstimate CLPredictedWalkDistanceEstimator::makeEstimate(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLPredictedWalkDistanceBoutEntry>, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<P6MWDHoursPerDay> &, std::vector<HealthKitWorkout>, const CLBodyMetrics &, double) const", "%s\n", v283);
        goto LABEL_403;
      }
      if (qword_10229FEA0 != -1)
        dispatch_once(&qword_10229FEA0, &stru_10219C228);
      v281 = qword_10229FEA8;
      if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v281, OS_LOG_TYPE_DEFAULT, "No p6MWD estimate, inconsistent estimates", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FEA0 != -1)
          dispatch_once(&qword_10229FEA0, &stru_10219C228);
        LOWORD(v358) = 0;
        LODWORD(v318) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 0, "No p6MWD estimate, inconsistent estimates", &v358, *(_QWORD *)&v318);
        v317 = (char *)v316;
        sub_100512490("Generic", 1, 0, 2, "CLPredictedWalkDistanceEstimate CLPredictedWalkDistanceEstimator::makeEstimate(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLPredictedWalkDistanceBoutEntry>, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<P6MWDHoursPerDay> &, std::vector<HealthKitWorkout>, const CLBodyMetrics &, double) const", "%s\n", v316);
        if (v317 != buf)
          free(v317);
      }
      v276 = 3;
    }
  }
LABEL_336:
  *(_DWORD *)(a9 + 16) = v276;
  if (v337 >= 1)
  {
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_10219C228);
    v280 = qword_10229FEA8;
    if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v280, OS_LOG_TYPE_DEFAULT, "Available p6MWD estimate because of workout", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_342;
    bzero(buf, 0x65CuLL);
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_10219C228);
    LOWORD(v358) = 0;
    LODWORD(v318) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 0, "Available p6MWD estimate because of workout", &v358, *(_QWORD *)&v318);
    v284 = (char *)v306;
    sub_100512490("Generic", 1, 0, 2, "CLPredictedWalkDistanceEstimate CLPredictedWalkDistanceEstimator::makeEstimate(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLPredictedWalkDistanceBoutEntry>, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<P6MWDHoursPerDay> &, std::vector<HealthKitWorkout>, const CLBodyMetrics &, double) const", "%s\n", v306);
LABEL_403:
    if (v284 != buf)
      free(v284);
LABEL_342:
    *(_DWORD *)(a9 + 16) = 1;
    goto LABEL_344;
  }
  *(_QWORD *)(a9 + 64) = 0;
LABEL_344:
  *(double *)(a9 + 32) = *(double *)(a9 + 232) * 360.0;
  if (v341[0])
  {
    v341[1] = v341[0];
    operator delete(v341[0]);
  }
  if (v342[0])
  {
    v342[1] = v342[0];
    operator delete(v342[0]);
  }
  if (v345)
  {
    v346 = (double *)v345;
    operator delete(v345);
  }
  if (v348)
  {
    v349 = (double *)v348;
    operator delete(v348);
  }
  if (v351)
    operator delete(v351);
  if (v352)
  {
    v353 = (unint64_t *)v352;
    operator delete(v352);
  }
}

void sub_101052838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (__p)
    operator delete(__p);
  if (a40)
    operator delete(a40);
  if (a54)
    operator delete(a54);
  if (a57)
    operator delete(a57);
  if (a60)
    operator delete(a60);
  if (a63)
    operator delete(a63);
  _Unwind_Resume(a1);
}

double sub_101052948(uint64_t a1, double a2, double a3)
{
  double v3;
  double v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double result;

  v3 = *(double *)(a1 + 8);
  v4 = a2 - v3;
  v5 = *(_QWORD *)a1 + 1;
  v6 = v3 + (a2 - v3) / (double)(unint64_t)v5;
  v7 = *(double *)(a1 + 16) + v4 * (a2 - v6);
  v8 = *(double *)(a1 + 32);
  v9 = a3 - v8;
  v10 = *(_QWORD *)(a1 + 24) + 1;
  v11 = v8 + (a3 - v8) / (double)(unint64_t)v10;
  v12 = *(double *)(a1 + 40) + v9 * (a3 - v11);
  *(_QWORD *)a1 = v5;
  *(double *)(a1 + 8) = v6;
  *(double *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v10;
  *(double *)(a1 + 32) = v11;
  *(double *)(a1 + 40) = v12;
  v13 = *(_QWORD *)(a1 + 72) + 1;
  *(_QWORD *)(a1 + 72) = v13;
  v14 = *(double *)(a1 + 48);
  v15 = *(double *)(a1 + 56);
  v16 = (a2 - v14) / (double)(unint64_t)v13;
  v17 = (a3 - v15) / (double)(unint64_t)v13;
  *(double *)(a1 + 48) = v14 + v16;
  *(double *)(a1 + 56) = v15 + v17;
  result = *(double *)(a1 + 64)
         + -*(double *)(a1 + 64) / (double)(unint64_t)v13
         + ((double)(unint64_t)v13 + -1.0) * v16 * v17;
  *(double *)(a1 + 64) = result;
  return result;
}

double sub_1010529F8(uint64_t a1)
{
  double v1;
  double v2;
  unint64_t v3;
  double v4;
  double result;
  unint64_t v6;

  v1 = 0.0;
  v2 = 0.0;
  if (*(_QWORD *)a1 >= 2uLL)
    v2 = *(double *)(a1 + 16) / (double)(unint64_t)(*(_QWORD *)a1 - 1);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 2)
    v1 = *(double *)(a1 + 40) / (double)(v3 - 1);
  v4 = v2 * v1;
  result = 0.0;
  if (v4 > 0.0)
  {
    v6 = *(_QWORD *)(a1 + 72);
    if (v6 >= 2)
      result = (double)v6 / ((double)v6 + -1.0) * *(double *)(a1 + 64);
    return result / sqrt(v4);
  }
  return result;
}

double sub_101052A78(uint64_t a1, double **a2, double **a3, int a4, double a5, double a6)
{
  double *v7;
  double *v8;
  double result;
  int v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  double *i;
  BOOL v18;
  double v19;

  v7 = *a3;
  v8 = a3[1];
  result = -1.0;
  if (*a3 != v8)
  {
    v10 = 0;
    v11 = 0.0;
    do
    {
      if (a4)
        v12 = 3;
      else
        v12 = 2;
      v13 = v7[1];
      v14 = (*v7 + v13) * 0.5;
      if (v7[v12] >= *(double *)(a1 + 16) && v14 > a5 && v14 < a6)
      {
        for (i = *a2; i != a2[1]; i += 3)
        {
          v18 = *i >= v13 || *i < *v7;
          v19 = i[2];
          if (v18)
            v19 = -0.0;
          v11 = v11 + v19;
        }
        ++v10;
      }
      v7 += 4;
    }
    while (v7 != v8);
    if (v10 > 0)
      return v11 / (double)v10;
  }
  return result;
}

void sub_101052B24(id a1)
{
  qword_10229FEA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PredictedWalkDistance");
}

void sub_101052B50(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  double v29;
  unint64_t v30;
  double v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  double v39;
  double v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  unint64_t v51;
  double v52;
  unint64_t v53;
  unint64_t v54;
  double v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  double v62;
  double v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 *v76;
  __int128 *v77;
  __int128 *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  unint64_t v100;
  BOOL v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  double v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  int64_t v116;
  int64_t v117;
  int64_t v118;
  uint64_t v119;
  unint64_t v120;
  double v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  int64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  unint64_t v153;
  double v154;
  uint64_t v155;
  unint64_t v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  uint64_t v168;
  double v169;
  uint64_t v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  double v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  uint64_t v275;
  uint64_t v276;
  __int128 v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;

__n128 sub_10105396C(__int128 *a1, __int128 *a2, double *a3)
{
  __n128 result;
  double v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __n128 v55;
  __int128 v56;
  __n128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  result.n128_u64[0] = *((_QWORD *)a2 + 1);
  v4 = a3[1];
  if (result.n128_f64[0] >= *((double *)a1 + 1))
  {
    if (v4 < result.n128_f64[0])
    {
      v52 = a2[4];
      v56 = a2[5];
      v60 = a2[6];
      v64 = *((_QWORD *)a2 + 14);
      v36 = *a2;
      v40 = a2[1];
      v44 = a2[2];
      v48 = a2[3];
      v11 = *((_OWORD *)a3 + 4);
      v12 = *((_OWORD *)a3 + 5);
      v13 = *((_OWORD *)a3 + 6);
      *((double *)a2 + 14) = a3[14];
      a2[5] = v12;
      a2[6] = v13;
      a2[4] = v11;
      v14 = *(_OWORD *)a3;
      v15 = *((_OWORD *)a3 + 1);
      v16 = *((_OWORD *)a3 + 3);
      a2[2] = *((_OWORD *)a3 + 2);
      a2[3] = v16;
      *a2 = v14;
      a2[1] = v15;
      *((_OWORD *)a3 + 2) = v44;
      *((_OWORD *)a3 + 3) = v48;
      *(_OWORD *)a3 = v36;
      *((_OWORD *)a3 + 1) = v40;
      *((_QWORD *)a3 + 14) = v64;
      result.n128_u64[1] = *((_QWORD *)&v56 + 1);
      *((_OWORD *)a3 + 5) = v56;
      *((_OWORD *)a3 + 6) = v60;
      *((_OWORD *)a3 + 4) = v52;
      result.n128_u64[0] = *((_QWORD *)a2 + 1);
      if (result.n128_f64[0] < *((double *)a1 + 1))
      {
        v53 = a1[4];
        v57 = (__n128)a1[5];
        v61 = a1[6];
        v65 = *((_QWORD *)a1 + 14);
        v37 = *a1;
        v41 = a1[1];
        v45 = a1[2];
        v49 = a1[3];
        v17 = a2[4];
        v18 = a2[5];
        v19 = a2[6];
        *((_QWORD *)a1 + 14) = *((_QWORD *)a2 + 14);
        a1[5] = v18;
        a1[6] = v19;
        a1[4] = v17;
        v20 = *a2;
        v21 = a2[1];
        v22 = a2[3];
        a1[2] = a2[2];
        a1[3] = v22;
        *a1 = v20;
        a1[1] = v21;
        a2[2] = v45;
        a2[3] = v49;
        *a2 = v37;
        a2[1] = v41;
        *((_QWORD *)a2 + 14) = v65;
        result = v57;
        a2[5] = (__int128)v57;
        a2[6] = v61;
        a2[4] = v53;
      }
    }
  }
  else
  {
    if (v4 >= result.n128_f64[0])
    {
      v54 = a1[4];
      v58 = a1[5];
      v62 = a1[6];
      v66 = *((_QWORD *)a1 + 14);
      v38 = *a1;
      v42 = a1[1];
      v46 = a1[2];
      v50 = a1[3];
      v23 = a2[4];
      v24 = a2[5];
      v25 = a2[6];
      *((_QWORD *)a1 + 14) = *((_QWORD *)a2 + 14);
      a1[5] = v24;
      a1[6] = v25;
      a1[4] = v23;
      v26 = *a2;
      v27 = a2[1];
      v28 = a2[3];
      a1[2] = a2[2];
      a1[3] = v28;
      *a1 = v26;
      a1[1] = v27;
      a2[2] = v46;
      a2[3] = v50;
      *a2 = v38;
      a2[1] = v42;
      *((_QWORD *)a2 + 14) = v66;
      result.n128_u64[1] = *((_QWORD *)&v58 + 1);
      a2[5] = v58;
      a2[6] = v62;
      a2[4] = v54;
      result.n128_f64[0] = a3[1];
      if (result.n128_f64[0] >= *((double *)a2 + 1))
        return result;
      v51 = a2[4];
      v55 = (__n128)a2[5];
      v59 = a2[6];
      v63 = *((_QWORD *)a2 + 14);
      v35 = *a2;
      v39 = a2[1];
      v43 = a2[2];
      v47 = a2[3];
      v29 = *((_OWORD *)a3 + 4);
      v30 = *((_OWORD *)a3 + 5);
      v31 = *((_OWORD *)a3 + 6);
      *((double *)a2 + 14) = a3[14];
      a2[5] = v30;
      a2[6] = v31;
      a2[4] = v29;
      v32 = *(_OWORD *)a3;
      v33 = *((_OWORD *)a3 + 1);
      v34 = *((_OWORD *)a3 + 3);
      a2[2] = *((_OWORD *)a3 + 2);
      a2[3] = v34;
      *a2 = v32;
      a2[1] = v33;
    }
    else
    {
      v51 = a1[4];
      v55 = (__n128)a1[5];
      v59 = a1[6];
      v63 = *((_QWORD *)a1 + 14);
      v35 = *a1;
      v39 = a1[1];
      v43 = a1[2];
      v47 = a1[3];
      v5 = *((_OWORD *)a3 + 4);
      v6 = *((_OWORD *)a3 + 5);
      v7 = *((_OWORD *)a3 + 6);
      *((double *)a1 + 14) = a3[14];
      a1[5] = v6;
      a1[6] = v7;
      a1[4] = v5;
      v8 = *(_OWORD *)a3;
      v9 = *((_OWORD *)a3 + 1);
      v10 = *((_OWORD *)a3 + 3);
      a1[2] = *((_OWORD *)a3 + 2);
      a1[3] = v10;
      *a1 = v8;
      a1[1] = v9;
    }
    *((_OWORD *)a3 + 2) = v43;
    *((_OWORD *)a3 + 3) = v47;
    *(_OWORD *)a3 = v35;
    *((_OWORD *)a3 + 1) = v39;
    *((_QWORD *)a3 + 14) = v63;
    result = v55;
    *((__n128 *)a3 + 5) = v55;
    *((_OWORD *)a3 + 6) = v59;
    *((_OWORD *)a3 + 4) = v51;
  }
  return result;
}

BOOL sub_101053BF4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  double v23;
  uint64_t v24;
  __int128 *v25;
  __int128 *v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v4 = 0xEEEEEEEEEEEEEEEFLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 112) < *(double *)(a1 + 8))
      {
        v76 = *(_OWORD *)(a1 + 64);
        v82 = *(_OWORD *)(a1 + 80);
        v88 = *(_OWORD *)(a1 + 96);
        v94 = *(_QWORD *)(a1 + 112);
        v52 = *(_OWORD *)a1;
        v58 = *(_OWORD *)(a1 + 16);
        v64 = *(_OWORD *)(a1 + 32);
        v70 = *(_OWORD *)(a1 + 48);
        v6 = *(_OWORD *)(a2 - 56);
        v7 = *(_OWORD *)(a2 - 40);
        v8 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 - 8);
        *(_OWORD *)(a1 + 80) = v7;
        *(_OWORD *)(a1 + 96) = v8;
        *(_OWORD *)(a1 + 64) = v6;
        v9 = *(_OWORD *)(a2 - 120);
        v10 = *(_OWORD *)(a2 - 104);
        v11 = *(_OWORD *)(a2 - 72);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 - 88);
        *(_OWORD *)(a1 + 48) = v11;
        *(_OWORD *)a1 = v9;
        *(_OWORD *)(a1 + 16) = v10;
        *(_OWORD *)(a2 - 72) = v70;
        *(_OWORD *)(a2 - 88) = v64;
        *(_OWORD *)(a2 - 104) = v58;
        *(_OWORD *)(a2 - 120) = v52;
        *(_OWORD *)(a2 - 24) = v88;
        *(_OWORD *)(a2 - 40) = v82;
        *(_OWORD *)(a2 - 56) = v76;
        *(_QWORD *)(a2 - 8) = v94;
      }
      return result;
    case 3uLL:
      sub_10105396C((__int128 *)a1, (__int128 *)(a1 + 120), (double *)(a2 - 120));
      return 1;
    case 4uLL:
      sub_1010540B0(a1, a1 + 120, (__int128 *)(a1 + 240), (__int128 *)(a2 - 120));
      return 1;
    case 5uLL:
      v25 = (__int128 *)(a1 + 120);
      v26 = (__int128 *)(a1 + 240);
      v27 = (__int128 *)(a1 + 360);
      sub_1010540B0(a1, a1 + 120, (__int128 *)(a1 + 240), (__int128 *)(a1 + 360));
      if (*(double *)(a2 - 112) >= *(double *)(a1 + 368))
        return 1;
      v78 = *(_OWORD *)(a1 + 424);
      v84 = *(_OWORD *)(a1 + 440);
      v90 = *(_OWORD *)(a1 + 456);
      v95 = *(_QWORD *)(a1 + 472);
      v54 = *v27;
      v60 = *(_OWORD *)(a1 + 376);
      v66 = *(_OWORD *)(a1 + 392);
      v72 = *(_OWORD *)(a1 + 408);
      v28 = *(_OWORD *)(a2 - 56);
      v29 = *(_OWORD *)(a2 - 40);
      v30 = *(_OWORD *)(a2 - 24);
      *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 - 8);
      *(_OWORD *)(a1 + 440) = v29;
      *(_OWORD *)(a1 + 456) = v30;
      *(_OWORD *)(a1 + 424) = v28;
      v31 = *(_OWORD *)(a2 - 120);
      v32 = *(_OWORD *)(a2 - 104);
      v33 = *(_OWORD *)(a2 - 72);
      *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 - 88);
      *(_OWORD *)(a1 + 408) = v33;
      *v27 = v31;
      *(_OWORD *)(a1 + 376) = v32;
      *(_OWORD *)(a2 - 72) = v72;
      *(_OWORD *)(a2 - 88) = v66;
      *(_OWORD *)(a2 - 104) = v60;
      *(_OWORD *)(a2 - 120) = v54;
      *(_OWORD *)(a2 - 24) = v90;
      *(_OWORD *)(a2 - 40) = v84;
      *(_OWORD *)(a2 - 56) = v78;
      *(_QWORD *)(a2 - 8) = v95;
      if (*(double *)(a1 + 368) >= *(double *)(a1 + 248))
        return 1;
      v79 = *(_OWORD *)(a1 + 304);
      v85 = *(_OWORD *)(a1 + 320);
      v91 = *(_OWORD *)(a1 + 336);
      v96 = *(_QWORD *)(a1 + 352);
      v55 = *v26;
      v61 = *(_OWORD *)(a1 + 256);
      v67 = *(_OWORD *)(a1 + 272);
      v73 = *(_OWORD *)(a1 + 288);
      v34 = *v27;
      v35 = *(_OWORD *)(a1 + 376);
      v36 = *(_OWORD *)(a1 + 408);
      *(_OWORD *)(a1 + 272) = *(_OWORD *)(a1 + 392);
      *(_OWORD *)(a1 + 288) = v36;
      *v26 = v34;
      *(_OWORD *)(a1 + 256) = v35;
      v37 = *(_OWORD *)(a1 + 424);
      v38 = *(_OWORD *)(a1 + 440);
      v39 = *(_OWORD *)(a1 + 456);
      *(_QWORD *)(a1 + 352) = *(_QWORD *)(a1 + 472);
      *(_OWORD *)(a1 + 320) = v38;
      *(_OWORD *)(a1 + 336) = v39;
      *(_OWORD *)(a1 + 304) = v37;
      *(_OWORD *)(a1 + 392) = v67;
      *(_OWORD *)(a1 + 408) = v73;
      *v27 = v55;
      *(_OWORD *)(a1 + 376) = v61;
      *(_QWORD *)(a1 + 472) = v96;
      *(_OWORD *)(a1 + 440) = v85;
      *(_OWORD *)(a1 + 456) = v91;
      *(_QWORD *)&v39 = *(_QWORD *)(a1 + 248);
      *(_QWORD *)&v36 = *(_QWORD *)(a1 + 128);
      *(_OWORD *)(a1 + 424) = v79;
      if (*(double *)&v39 >= *(double *)&v36)
        return 1;
      v80 = *(_OWORD *)(a1 + 184);
      v86 = *(_OWORD *)(a1 + 200);
      v92 = *(_OWORD *)(a1 + 216);
      v97 = *(_QWORD *)(a1 + 232);
      v56 = *v25;
      v62 = *(_OWORD *)(a1 + 136);
      v68 = *(_OWORD *)(a1 + 152);
      v74 = *(_OWORD *)(a1 + 168);
      v40 = *v26;
      v41 = *(_OWORD *)(a1 + 256);
      v42 = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 168) = v42;
      *v25 = v40;
      *(_OWORD *)(a1 + 136) = v41;
      v43 = *(_OWORD *)(a1 + 304);
      v44 = *(_OWORD *)(a1 + 320);
      v45 = *(_OWORD *)(a1 + 336);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a1 + 352);
      *(_OWORD *)(a1 + 200) = v44;
      *(_OWORD *)(a1 + 216) = v45;
      *(_OWORD *)(a1 + 184) = v43;
      *(_OWORD *)(a1 + 272) = v68;
      *(_OWORD *)(a1 + 288) = v74;
      *v26 = v56;
      *(_OWORD *)(a1 + 256) = v62;
      *(_QWORD *)(a1 + 352) = v97;
      *(_OWORD *)(a1 + 320) = v86;
      *(_OWORD *)(a1 + 336) = v92;
      *(_QWORD *)&v45 = *(_QWORD *)(a1 + 128);
      *(_QWORD *)&v42 = *(_QWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 304) = v80;
      if (*(double *)&v45 >= *(double *)&v42)
        return 1;
      v81 = *(_OWORD *)(a1 + 64);
      v87 = *(_OWORD *)(a1 + 80);
      v93 = *(_OWORD *)(a1 + 96);
      v98 = *(_QWORD *)(a1 + 112);
      v57 = *(_OWORD *)a1;
      v63 = *(_OWORD *)(a1 + 16);
      v69 = *(_OWORD *)(a1 + 32);
      v75 = *(_OWORD *)(a1 + 48);
      v46 = *v25;
      v47 = *(_OWORD *)(a1 + 136);
      v48 = *(_OWORD *)(a1 + 168);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 152);
      *(_OWORD *)(a1 + 48) = v48;
      *(_OWORD *)a1 = v46;
      *(_OWORD *)(a1 + 16) = v47;
      v49 = *(_OWORD *)(a1 + 184);
      v50 = *(_OWORD *)(a1 + 200);
      v51 = *(_OWORD *)(a1 + 216);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 232);
      *(_OWORD *)(a1 + 80) = v50;
      *(_OWORD *)(a1 + 96) = v51;
      *(_OWORD *)(a1 + 64) = v49;
      *(_OWORD *)(a1 + 152) = v69;
      *(_OWORD *)(a1 + 168) = v75;
      *v25 = v57;
      *(_OWORD *)(a1 + 136) = v63;
      *(_QWORD *)(a1 + 232) = v98;
      *(_OWORD *)(a1 + 200) = v87;
      *(_OWORD *)(a1 + 216) = v93;
      result = 1;
      *(_OWORD *)(a1 + 184) = v81;
      return result;
    default:
      v12 = a1 + 240;
      sub_10105396C((__int128 *)a1, (__int128 *)(a1 + 120), (double *)(a1 + 240));
      v13 = a1 + 360;
      if (a1 + 360 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v16 = *(double *)(v13 + 8);
    if (v16 < *(double *)(v12 + 8))
    {
      v17 = *(_QWORD *)v13;
      v77 = *(_OWORD *)(v13 + 80);
      v83 = *(_OWORD *)(v13 + 96);
      v89 = *(_QWORD *)(v13 + 112);
      v53 = *(_OWORD *)(v13 + 16);
      v59 = *(_OWORD *)(v13 + 32);
      v18 = v14;
      v65 = *(_OWORD *)(v13 + 48);
      v71 = *(_OWORD *)(v13 + 64);
      while (1)
      {
        v19 = (_OWORD *)(a1 + v18 + 360);
        v20 = *(_OWORD *)(a1 + v18 + 320);
        v19[4] = *(_OWORD *)(a1 + v18 + 304);
        v19[5] = v20;
        v19[6] = *(_OWORD *)(a1 + v18 + 336);
        *(_QWORD *)(a1 + v18 + 472) = *(_QWORD *)(a1 + v18 + 352);
        v21 = *(_OWORD *)(a1 + v18 + 256);
        *v19 = *(_OWORD *)(a1 + v18 + 240);
        v19[1] = v21;
        v22 = *(_OWORD *)(a1 + v18 + 288);
        v19[2] = *(_OWORD *)(a1 + v18 + 272);
        v19[3] = v22;
        if (v18 == -240)
          break;
        v23 = *(double *)(a1 + v18 + 128);
        v18 -= 120;
        if (v16 >= v23)
        {
          v24 = a1 + v18 + 360;
          goto LABEL_13;
        }
      }
      v24 = a1;
LABEL_13:
      *(_QWORD *)v24 = v17;
      *(double *)(v24 + 8) = v16;
      *(_OWORD *)(v24 + 80) = v77;
      *(_OWORD *)(v24 + 96) = v83;
      *(_QWORD *)(v24 + 112) = v89;
      *(_OWORD *)(v24 + 16) = v53;
      *(_OWORD *)(v24 + 32) = v59;
      ++v15;
      *(_OWORD *)(v24 + 48) = v65;
      *(_OWORD *)(v24 + 64) = v71;
      if (v15 == 8)
        return v13 + 120 == a2;
    }
    v12 = v13;
    v14 += 120;
    v13 += 120;
    if (v13 == a2)
      return 1;
  }
}

__n128 sub_1010540B0(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __n128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  sub_10105396C((__int128 *)a1, (__int128 *)a2, (double *)a3);
  result.n128_u64[0] = *((_QWORD *)a4 + 1);
  if (result.n128_f64[0] < *((double *)a3 + 1))
  {
    v39 = a3[4];
    v42 = a3[5];
    v45 = a3[6];
    v48 = *((_QWORD *)a3 + 14);
    v27 = *a3;
    v30 = a3[1];
    v33 = a3[2];
    v36 = a3[3];
    v9 = a4[4];
    v10 = a4[5];
    v11 = a4[6];
    *((_QWORD *)a3 + 14) = *((_QWORD *)a4 + 14);
    a3[5] = v10;
    a3[6] = v11;
    a3[4] = v9;
    v12 = *a4;
    v13 = a4[1];
    v14 = a4[3];
    a3[2] = a4[2];
    a3[3] = v14;
    *a3 = v12;
    a3[1] = v13;
    a4[2] = v33;
    a4[3] = v36;
    *a4 = v27;
    a4[1] = v30;
    *((_QWORD *)a4 + 14) = v48;
    result.n128_u64[1] = *((_QWORD *)&v42 + 1);
    a4[5] = v42;
    a4[6] = v45;
    a4[4] = v39;
    result.n128_u64[0] = *((_QWORD *)a3 + 1);
    if (result.n128_f64[0] < *(double *)(a2 + 8))
    {
      v40 = *(_OWORD *)(a2 + 64);
      v43 = *(_OWORD *)(a2 + 80);
      v46 = *(_OWORD *)(a2 + 96);
      v49 = *(_QWORD *)(a2 + 112);
      v28 = *(_OWORD *)a2;
      v31 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)(a2 + 32);
      v37 = *(_OWORD *)(a2 + 48);
      v15 = a3[4];
      v16 = a3[5];
      v17 = a3[6];
      *(_QWORD *)(a2 + 112) = *((_QWORD *)a3 + 14);
      *(_OWORD *)(a2 + 80) = v16;
      *(_OWORD *)(a2 + 96) = v17;
      *(_OWORD *)(a2 + 64) = v15;
      v18 = *a3;
      v19 = a3[1];
      v20 = a3[3];
      *(_OWORD *)(a2 + 32) = a3[2];
      *(_OWORD *)(a2 + 48) = v20;
      *(_OWORD *)a2 = v18;
      *(_OWORD *)(a2 + 16) = v19;
      a3[2] = v34;
      a3[3] = v37;
      *a3 = v28;
      a3[1] = v31;
      *((_QWORD *)a3 + 14) = v49;
      result.n128_u64[1] = *((_QWORD *)&v43 + 1);
      a3[5] = v43;
      a3[6] = v46;
      a3[4] = v40;
      result.n128_u64[0] = *(_QWORD *)(a2 + 8);
      if (result.n128_f64[0] < *(double *)(a1 + 8))
      {
        v41 = *(_OWORD *)(a1 + 64);
        v44 = *(__n128 *)(a1 + 80);
        v47 = *(_OWORD *)(a1 + 96);
        v50 = *(_QWORD *)(a1 + 112);
        v29 = *(_OWORD *)a1;
        v32 = *(_OWORD *)(a1 + 16);
        v35 = *(_OWORD *)(a1 + 32);
        v38 = *(_OWORD *)(a1 + 48);
        v21 = *(_OWORD *)(a2 + 64);
        v22 = *(_OWORD *)(a2 + 80);
        v23 = *(_OWORD *)(a2 + 96);
        *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 80) = v22;
        *(_OWORD *)(a1 + 96) = v23;
        *(_OWORD *)(a1 + 64) = v21;
        v24 = *(_OWORD *)a2;
        v25 = *(_OWORD *)(a2 + 16);
        v26 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v26;
        *(_OWORD *)a1 = v24;
        *(_OWORD *)(a1 + 16) = v25;
        *(_OWORD *)(a2 + 32) = v35;
        *(_OWORD *)(a2 + 48) = v38;
        *(_OWORD *)a2 = v29;
        *(_OWORD *)(a2 + 16) = v32;
        *(_QWORD *)(a2 + 112) = v50;
        result = v44;
        *(__n128 *)(a2 + 80) = v44;
        *(_OWORD *)(a2 + 96) = v47;
        *(_OWORD *)(a2 + 64) = v41;
      }
    }
  }
  return result;
}

void sub_101054284(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  unint64_t v20;
  unint64_t v21;
  double v22;
  double v23;
  unint64_t v24;
  __int128 v25;
  double v26;
  double v27;
  __int128 v28;
  BOOL v29;
  double v30;
  unint64_t v31;
  unint64_t v32;
  double v33;
  __int128 v34;
  double v35;
  double v36;
  __int128 v37;
  unint64_t v38;
  double v39;
  __int128 v40;
  _OWORD *v41;
  _OWORD *v42;
  _OWORD *v43;
  unint64_t v44;
  double v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  BOOL v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  double v66;
  unint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  int64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int64_t v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  double v82;
  unint64_t v83;
  __int128 v84;
  uint64_t v86;
  double v87;
  unint64_t v88;
  double v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _BYTE v93[29];
  _BYTE v94[29];
  _BYTE v95[29];
  _BYTE v96[29];
  _BYTE v97[24];
  _BYTE v98[24];
  _BYTE v99[24];
  _BYTE v100[29];
  __int128 v101;
  __int128 v102;
  _BYTE v103[24];
  __int128 v104;

BOOL sub_101054B4C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 *v19;
  uint64_t v20;
  double v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[24];
  __int128 v28;
  _BYTE v29[24];
  _BYTE v30[24];
  _BYTE v31[24];
  _BYTE v32[24];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (_OWORD *)(a2 - 24);
      if (*(double *)(a2 - 24) < *(double *)a1)
      {
        *(_OWORD *)v27 = *(_OWORD *)a1;
        v7 = *(_OWORD *)a1;
        *(_QWORD *)&v27[16] = *(_QWORD *)(a1 + 16);
        v8 = *(_QWORD *)(a2 - 11);
        *(_OWORD *)a1 = *v6;
        *(_QWORD *)(a1 + 13) = v8;
        *v6 = v7;
        *(_QWORD *)(a2 - 11) = *(_QWORD *)&v27[13];
      }
      return result;
    case 3uLL:
      sub_100C315A8((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_100C3198C(a1, a1 + 24, a1 + 48, (unint64_t *)(a2 - 24));
      return 1;
    case 5uLL:
      v17 = (__int128 *)(a1 + 24);
      v18 = (__int128 *)(a1 + 48);
      v19 = (__int128 *)(a1 + 72);
      sub_100C3198C(a1, a1 + 24, a1 + 48, (unint64_t *)(a1 + 72));
      v21 = *(double *)(a2 - 24);
      v20 = a2 - 24;
      if (v21 < *(double *)(a1 + 72))
      {
        *(_OWORD *)v29 = *v19;
        v22 = *v19;
        *(_QWORD *)&v29[16] = *(_QWORD *)(a1 + 88);
        v23 = *(_QWORD *)(v20 + 13);
        *v19 = *(_OWORD *)v20;
        *(_QWORD *)(a1 + 85) = v23;
        *(_OWORD *)v20 = v22;
        *(_QWORD *)(v20 + 13) = *(_QWORD *)&v29[13];
        if (*(double *)v19 < *(double *)v18)
        {
          *(_OWORD *)v30 = *v18;
          v24 = *v18;
          *(_QWORD *)&v30[16] = *(_QWORD *)(a1 + 64);
          *v18 = *v19;
          *(_QWORD *)(a1 + 61) = *(_QWORD *)(a1 + 85);
          *v19 = v24;
          *(_QWORD *)(a1 + 85) = *(_QWORD *)&v30[13];
          if (*(double *)v18 < *(double *)v17)
          {
            *(_OWORD *)v31 = *v17;
            v25 = *v17;
            *(_QWORD *)&v31[16] = *(_QWORD *)(a1 + 40);
            *v17 = *v18;
            *(_QWORD *)(a1 + 37) = *(_QWORD *)(a1 + 61);
            *v18 = v25;
            *(_QWORD *)(a1 + 61) = *(_QWORD *)&v31[13];
            if (*(double *)(a1 + 24) < *(double *)a1)
            {
              *(_OWORD *)v32 = *(_OWORD *)a1;
              v26 = *(_OWORD *)a1;
              *(_QWORD *)&v32[16] = *(_QWORD *)(a1 + 16);
              *(_OWORD *)a1 = *v17;
              *(_QWORD *)(a1 + 13) = *(_QWORD *)(a1 + 37);
              *v17 = v26;
              *(_QWORD *)(a1 + 37) = *(_QWORD *)&v32[13];
            }
          }
        }
      }
      return 1;
    default:
      v9 = (double *)(a1 + 48);
      sub_100C315A8((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48));
      v10 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(double *)v10;
    if (*(double *)v10 < *v9)
    {
      v28 = *(_OWORD *)(v10 + 8);
      v14 = v11;
      while (1)
      {
        v15 = a1 + v14;
        *(_OWORD *)(v15 + 72) = *(_OWORD *)(a1 + v14 + 48);
        *(_QWORD *)(v15 + 85) = *(_QWORD *)(a1 + v14 + 61);
        if (v14 == -48)
          break;
        v14 -= 24;
        if (v13 >= *(double *)(v15 + 24))
        {
          v16 = a1 + v14 + 72;
          goto LABEL_13;
        }
      }
      v16 = a1;
LABEL_13:
      *(double *)v16 = v13;
      *(_QWORD *)(v16 + 8) = v28;
      *(_QWORD *)(v16 + 13) = *(_QWORD *)((char *)&v28 + 5);
      if (++v12 == 8)
        return v10 + 24 == a2;
    }
    v9 = (double *)v10;
    v11 += 24;
    v10 += 24;
    if (v10 == a2)
      return 1;
  }
}

void sub_101054E08(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  double v22;
  uint64_t v23;
  double v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  double v28;
  unint64_t v29;
  double v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  double v38;
  double v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  BOOL v47;
  uint64_t v48;
  double v49;
  unint64_t v50;
  double v51;
  unint64_t v52;
  unint64_t v53;
  double v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  double v61;
  double v62;
  __int128 *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 *v76;
  __int128 *v77;
  __int128 *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  _OWORD *v100;
  BOOL v102;
  uint64_t v103;
  unint64_t v104;
  _OWORD *v105;
  double v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  int64_t v113;
  int64_t v114;
  int64_t v115;
  uint64_t v116;
  unint64_t v117;
  double v118;
  unint64_t v119;
  unint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int64_t v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  unint64_t v149;
  double v150;
  unint64_t v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  _OWORD *v159;
  double v160;
  _OWORD *v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  double v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;

__n128 sub_101055BE8(__int128 *a1, __int128 *a2, double *a3)
{
  __n128 result;
  double v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __n128 v55;
  __int128 v56;
  __n128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  result.n128_u64[0] = *((_QWORD *)a2 + 4);
  v4 = a3[4];
  if (result.n128_f64[0] <= *((double *)a1 + 4))
  {
    if (v4 > result.n128_f64[0])
    {
      v52 = a2[4];
      v56 = a2[5];
      v60 = a2[6];
      v64 = *((_QWORD *)a2 + 14);
      v36 = *a2;
      v40 = a2[1];
      v44 = a2[2];
      v48 = a2[3];
      v11 = *((_OWORD *)a3 + 4);
      v12 = *((_OWORD *)a3 + 5);
      v13 = *((_OWORD *)a3 + 6);
      *((double *)a2 + 14) = a3[14];
      a2[5] = v12;
      a2[6] = v13;
      a2[4] = v11;
      v14 = *(_OWORD *)a3;
      v15 = *((_OWORD *)a3 + 1);
      v16 = *((_OWORD *)a3 + 3);
      a2[2] = *((_OWORD *)a3 + 2);
      a2[3] = v16;
      *a2 = v14;
      a2[1] = v15;
      *((_OWORD *)a3 + 2) = v44;
      *((_OWORD *)a3 + 3) = v48;
      *(_OWORD *)a3 = v36;
      *((_OWORD *)a3 + 1) = v40;
      *((_QWORD *)a3 + 14) = v64;
      result.n128_u64[1] = *((_QWORD *)&v56 + 1);
      *((_OWORD *)a3 + 5) = v56;
      *((_OWORD *)a3 + 6) = v60;
      *((_OWORD *)a3 + 4) = v52;
      result.n128_u64[0] = *((_QWORD *)a2 + 4);
      if (result.n128_f64[0] > *((double *)a1 + 4))
      {
        v53 = a1[4];
        v57 = (__n128)a1[5];
        v61 = a1[6];
        v65 = *((_QWORD *)a1 + 14);
        v37 = *a1;
        v41 = a1[1];
        v45 = a1[2];
        v49 = a1[3];
        v17 = a2[4];
        v18 = a2[5];
        v19 = a2[6];
        *((_QWORD *)a1 + 14) = *((_QWORD *)a2 + 14);
        a1[5] = v18;
        a1[6] = v19;
        a1[4] = v17;
        v20 = *a2;
        v21 = a2[1];
        v22 = a2[3];
        a1[2] = a2[2];
        a1[3] = v22;
        *a1 = v20;
        a1[1] = v21;
        a2[2] = v45;
        a2[3] = v49;
        *a2 = v37;
        a2[1] = v41;
        *((_QWORD *)a2 + 14) = v65;
        result = v57;
        a2[5] = (__int128)v57;
        a2[6] = v61;
        a2[4] = v53;
      }
    }
  }
  else
  {
    if (v4 <= result.n128_f64[0])
    {
      v54 = a1[4];
      v58 = a1[5];
      v62 = a1[6];
      v66 = *((_QWORD *)a1 + 14);
      v38 = *a1;
      v42 = a1[1];
      v46 = a1[2];
      v50 = a1[3];
      v23 = a2[4];
      v24 = a2[5];
      v25 = a2[6];
      *((_QWORD *)a1 + 14) = *((_QWORD *)a2 + 14);
      a1[5] = v24;
      a1[6] = v25;
      a1[4] = v23;
      v26 = *a2;
      v27 = a2[1];
      v28 = a2[3];
      a1[2] = a2[2];
      a1[3] = v28;
      *a1 = v26;
      a1[1] = v27;
      a2[2] = v46;
      a2[3] = v50;
      *a2 = v38;
      a2[1] = v42;
      *((_QWORD *)a2 + 14) = v66;
      result.n128_u64[1] = *((_QWORD *)&v58 + 1);
      a2[5] = v58;
      a2[6] = v62;
      a2[4] = v54;
      result.n128_f64[0] = a3[4];
      if (result.n128_f64[0] <= *((double *)a2 + 4))
        return result;
      v51 = a2[4];
      v55 = (__n128)a2[5];
      v59 = a2[6];
      v63 = *((_QWORD *)a2 + 14);
      v35 = *a2;
      v39 = a2[1];
      v43 = a2[2];
      v47 = a2[3];
      v29 = *((_OWORD *)a3 + 4);
      v30 = *((_OWORD *)a3 + 5);
      v31 = *((_OWORD *)a3 + 6);
      *((double *)a2 + 14) = a3[14];
      a2[5] = v30;
      a2[6] = v31;
      a2[4] = v29;
      v32 = *(_OWORD *)a3;
      v33 = *((_OWORD *)a3 + 1);
      v34 = *((_OWORD *)a3 + 3);
      a2[2] = *((_OWORD *)a3 + 2);
      a2[3] = v34;
      *a2 = v32;
      a2[1] = v33;
    }
    else
    {
      v51 = a1[4];
      v55 = (__n128)a1[5];
      v59 = a1[6];
      v63 = *((_QWORD *)a1 + 14);
      v35 = *a1;
      v39 = a1[1];
      v43 = a1[2];
      v47 = a1[3];
      v5 = *((_OWORD *)a3 + 4);
      v6 = *((_OWORD *)a3 + 5);
      v7 = *((_OWORD *)a3 + 6);
      *((double *)a1 + 14) = a3[14];
      a1[5] = v6;
      a1[6] = v7;
      a1[4] = v5;
      v8 = *(_OWORD *)a3;
      v9 = *((_OWORD *)a3 + 1);
      v10 = *((_OWORD *)a3 + 3);
      a1[2] = *((_OWORD *)a3 + 2);
      a1[3] = v10;
      *a1 = v8;
      a1[1] = v9;
    }
    *((_OWORD *)a3 + 2) = v43;
    *((_OWORD *)a3 + 3) = v47;
    *(_OWORD *)a3 = v35;
    *((_OWORD *)a3 + 1) = v39;
    *((_QWORD *)a3 + 14) = v63;
    result = v55;
    *((__n128 *)a3 + 5) = v55;
    *((_OWORD *)a3 + 6) = v59;
    *((_OWORD *)a3 + 4) = v51;
  }
  return result;
}

BOOL sub_101055E70(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  double v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  double v22;
  uint64_t v23;
  __int128 *v24;
  __int128 *v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v4 = 0xEEEEEEEEEEEEEEEFLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 88) > *(double *)(a1 + 32))
      {
        v77 = *(_OWORD *)(a1 + 64);
        v83 = *(_OWORD *)(a1 + 80);
        v88 = *(_OWORD *)(a1 + 96);
        v93 = *(_QWORD *)(a1 + 112);
        v53 = *(_OWORD *)a1;
        v59 = *(_OWORD *)(a1 + 16);
        v65 = *(_OWORD *)(a1 + 32);
        v71 = *(_OWORD *)(a1 + 48);
        v6 = *(_OWORD *)(a2 - 56);
        v7 = *(_OWORD *)(a2 - 40);
        v8 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 - 8);
        *(_OWORD *)(a1 + 80) = v7;
        *(_OWORD *)(a1 + 96) = v8;
        *(_OWORD *)(a1 + 64) = v6;
        v9 = *(_OWORD *)(a2 - 120);
        v10 = *(_OWORD *)(a2 - 104);
        v11 = *(_OWORD *)(a2 - 72);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 - 88);
        *(_OWORD *)(a1 + 48) = v11;
        *(_OWORD *)a1 = v9;
        *(_OWORD *)(a1 + 16) = v10;
        *(_OWORD *)(a2 - 72) = v71;
        *(_OWORD *)(a2 - 88) = v65;
        *(_OWORD *)(a2 - 104) = v59;
        *(_OWORD *)(a2 - 120) = v53;
        *(_OWORD *)(a2 - 24) = v88;
        *(_OWORD *)(a2 - 40) = v83;
        *(_OWORD *)(a2 - 56) = v77;
        *(_QWORD *)(a2 - 8) = v93;
      }
      return result;
    case 3uLL:
      sub_101055BE8((__int128 *)a1, (__int128 *)(a1 + 120), (double *)(a2 - 120));
      return 1;
    case 4uLL:
      sub_101056334(a1, a1 + 120, (__int128 *)(a1 + 240), (__int128 *)(a2 - 120));
      return 1;
    case 5uLL:
      v24 = (__int128 *)(a1 + 120);
      v25 = (__int128 *)(a1 + 240);
      v26 = (__int128 *)(a1 + 360);
      sub_101056334(a1, a1 + 120, (__int128 *)(a1 + 240), (__int128 *)(a1 + 360));
      if (*(double *)(a2 - 88) <= *(double *)(a1 + 392))
        return 1;
      v79 = *(_OWORD *)(a1 + 424);
      v84 = *(_OWORD *)(a1 + 440);
      v89 = *(_OWORD *)(a1 + 456);
      v94 = *(_QWORD *)(a1 + 472);
      v55 = *v26;
      v61 = *(_OWORD *)(a1 + 376);
      v67 = *(_OWORD *)(a1 + 392);
      v73 = *(_OWORD *)(a1 + 408);
      v27 = *(_OWORD *)(a2 - 56);
      v28 = *(_OWORD *)(a2 - 40);
      v29 = *(_OWORD *)(a2 - 24);
      *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 - 8);
      *(_OWORD *)(a1 + 440) = v28;
      *(_OWORD *)(a1 + 456) = v29;
      *(_OWORD *)(a1 + 424) = v27;
      v30 = *(_OWORD *)(a2 - 120);
      v31 = *(_OWORD *)(a2 - 104);
      v32 = *(_OWORD *)(a2 - 72);
      *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 - 88);
      *(_OWORD *)(a1 + 408) = v32;
      *v26 = v30;
      *(_OWORD *)(a1 + 376) = v31;
      *(_OWORD *)(a2 - 72) = v73;
      *(_OWORD *)(a2 - 88) = v67;
      *(_OWORD *)(a2 - 104) = v61;
      *(_OWORD *)(a2 - 120) = v55;
      *(_OWORD *)(a2 - 24) = v89;
      *(_OWORD *)(a2 - 40) = v84;
      *(_OWORD *)(a2 - 56) = v79;
      *(_QWORD *)(a2 - 8) = v94;
      if (*(double *)(a1 + 392) <= *(double *)(a1 + 272))
        return 1;
      v80 = *(_OWORD *)(a1 + 304);
      v85 = *(_OWORD *)(a1 + 320);
      v90 = *(_OWORD *)(a1 + 336);
      v95 = *(_QWORD *)(a1 + 352);
      v56 = *v25;
      v62 = *(_OWORD *)(a1 + 256);
      v68 = *(_OWORD *)(a1 + 272);
      v74 = *(_OWORD *)(a1 + 288);
      v33 = *v26;
      v34 = *(_OWORD *)(a1 + 376);
      v35 = *(_OWORD *)(a1 + 408);
      *(_OWORD *)(a1 + 272) = *(_OWORD *)(a1 + 392);
      *(_OWORD *)(a1 + 288) = v35;
      *v25 = v33;
      *(_OWORD *)(a1 + 256) = v34;
      v36 = *(_OWORD *)(a1 + 424);
      v37 = *(_OWORD *)(a1 + 440);
      v38 = *(_OWORD *)(a1 + 456);
      *(_QWORD *)(a1 + 352) = *(_QWORD *)(a1 + 472);
      *(_OWORD *)(a1 + 320) = v37;
      *(_OWORD *)(a1 + 336) = v38;
      *(_OWORD *)(a1 + 304) = v36;
      *(_OWORD *)(a1 + 392) = v68;
      *(_OWORD *)(a1 + 408) = v74;
      *v26 = v56;
      *(_OWORD *)(a1 + 376) = v62;
      *(_QWORD *)(a1 + 472) = v95;
      *(_OWORD *)(a1 + 440) = v85;
      *(_OWORD *)(a1 + 456) = v90;
      *(_QWORD *)&v38 = *(_QWORD *)(a1 + 272);
      *(_QWORD *)&v35 = *(_QWORD *)(a1 + 152);
      *(_OWORD *)(a1 + 424) = v80;
      if (*(double *)&v38 <= *(double *)&v35)
        return 1;
      v81 = *(_OWORD *)(a1 + 184);
      v86 = *(_OWORD *)(a1 + 200);
      v91 = *(_OWORD *)(a1 + 216);
      v96 = *(_QWORD *)(a1 + 232);
      v57 = *v24;
      v63 = *(_OWORD *)(a1 + 136);
      v69 = *(_OWORD *)(a1 + 152);
      v75 = *(_OWORD *)(a1 + 168);
      v39 = *v25;
      v40 = *(_OWORD *)(a1 + 256);
      v41 = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 168) = v41;
      *v24 = v39;
      *(_OWORD *)(a1 + 136) = v40;
      v42 = *(_OWORD *)(a1 + 304);
      v43 = *(_OWORD *)(a1 + 320);
      v44 = *(_OWORD *)(a1 + 336);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a1 + 352);
      *(_OWORD *)(a1 + 200) = v43;
      *(_OWORD *)(a1 + 216) = v44;
      *(_OWORD *)(a1 + 184) = v42;
      *(_OWORD *)(a1 + 272) = v69;
      *(_OWORD *)(a1 + 288) = v75;
      *v25 = v57;
      *(_OWORD *)(a1 + 256) = v63;
      *(_QWORD *)(a1 + 352) = v96;
      *(_OWORD *)(a1 + 320) = v86;
      *(_OWORD *)(a1 + 336) = v91;
      *(_QWORD *)&v44 = *(_QWORD *)(a1 + 152);
      *(_QWORD *)&v41 = *(_QWORD *)(a1 + 32);
      *(_OWORD *)(a1 + 304) = v81;
      if (*(double *)&v44 <= *(double *)&v41)
        return 1;
      v82 = *(_OWORD *)(a1 + 64);
      v87 = *(_OWORD *)(a1 + 80);
      v92 = *(_OWORD *)(a1 + 96);
      v97 = *(_QWORD *)(a1 + 112);
      v58 = *(_OWORD *)a1;
      v64 = *(_OWORD *)(a1 + 16);
      v70 = *(_OWORD *)(a1 + 32);
      v76 = *(_OWORD *)(a1 + 48);
      v45 = *v24;
      v46 = *(_OWORD *)(a1 + 136);
      v47 = *(_OWORD *)(a1 + 168);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 152);
      *(_OWORD *)(a1 + 48) = v47;
      *(_OWORD *)a1 = v45;
      *(_OWORD *)(a1 + 16) = v46;
      v48 = *(_OWORD *)(a1 + 184);
      v49 = *(_OWORD *)(a1 + 200);
      v50 = *(_OWORD *)(a1 + 216);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 232);
      *(_OWORD *)(a1 + 80) = v49;
      *(_OWORD *)(a1 + 96) = v50;
      *(_OWORD *)(a1 + 64) = v48;
      *(_OWORD *)(a1 + 152) = v70;
      *(_OWORD *)(a1 + 168) = v76;
      *v24 = v58;
      *(_OWORD *)(a1 + 136) = v64;
      *(_QWORD *)(a1 + 232) = v97;
      *(_OWORD *)(a1 + 200) = v87;
      *(_OWORD *)(a1 + 216) = v92;
      result = 1;
      *(_OWORD *)(a1 + 184) = v82;
      return result;
    default:
      v12 = a1 + 240;
      sub_101055BE8((__int128 *)a1, (__int128 *)(a1 + 120), (double *)(a1 + 240));
      v13 = a1 + 360;
      if (a1 + 360 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v16 = *(double *)(v13 + 32);
    if (v16 > *(double *)(v12 + 32))
    {
      v51 = *(_OWORD *)v13;
      v52 = *(_OWORD *)(v13 + 16);
      v66 = *(_OWORD *)(v13 + 72);
      v72 = *(_OWORD *)(v13 + 88);
      v78 = *(_OWORD *)(v13 + 104);
      v17 = v14;
      v54 = *(_OWORD *)(v13 + 40);
      v60 = *(_OWORD *)(v13 + 56);
      while (1)
      {
        v18 = (_OWORD *)(a1 + v17 + 360);
        v19 = *(_OWORD *)(a1 + v17 + 320);
        v18[4] = *(_OWORD *)(a1 + v17 + 304);
        v18[5] = v19;
        v18[6] = *(_OWORD *)(a1 + v17 + 336);
        *(_QWORD *)(a1 + v17 + 472) = *(_QWORD *)(a1 + v17 + 352);
        v20 = *(_OWORD *)(a1 + v17 + 256);
        *v18 = *(_OWORD *)(a1 + v17 + 240);
        v18[1] = v20;
        v21 = *(_OWORD *)(a1 + v17 + 288);
        v18[2] = *(_OWORD *)(a1 + v17 + 272);
        v18[3] = v21;
        if (v17 == -240)
          break;
        v22 = *(double *)(a1 + v17 + 152);
        v17 -= 120;
        if (v16 <= v22)
        {
          v23 = a1 + v17 + 360;
          goto LABEL_13;
        }
      }
      v23 = a1;
LABEL_13:
      *(_OWORD *)v23 = v51;
      *(_OWORD *)(v23 + 16) = v52;
      *(double *)(v23 + 32) = v16;
      *(_OWORD *)(v23 + 56) = v60;
      *(_OWORD *)(v23 + 72) = v66;
      *(_OWORD *)(v23 + 88) = v72;
      *(_OWORD *)(v23 + 104) = v78;
      ++v15;
      *(_OWORD *)(v23 + 40) = v54;
      if (v15 == 8)
        return v13 + 120 == a2;
    }
    v12 = v13;
    v14 += 120;
    v13 += 120;
    if (v13 == a2)
      return 1;
  }
}

__n128 sub_101056334(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __n128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  sub_101055BE8((__int128 *)a1, (__int128 *)a2, (double *)a3);
  result.n128_u64[0] = *((_QWORD *)a4 + 4);
  if (result.n128_f64[0] > *((double *)a3 + 4))
  {
    v39 = a3[4];
    v42 = a3[5];
    v45 = a3[6];
    v48 = *((_QWORD *)a3 + 14);
    v27 = *a3;
    v30 = a3[1];
    v33 = a3[2];
    v36 = a3[3];
    v9 = a4[4];
    v10 = a4[5];
    v11 = a4[6];
    *((_QWORD *)a3 + 14) = *((_QWORD *)a4 + 14);
    a3[5] = v10;
    a3[6] = v11;
    a3[4] = v9;
    v12 = *a4;
    v13 = a4[1];
    v14 = a4[3];
    a3[2] = a4[2];
    a3[3] = v14;
    *a3 = v12;
    a3[1] = v13;
    a4[2] = v33;
    a4[3] = v36;
    *a4 = v27;
    a4[1] = v30;
    *((_QWORD *)a4 + 14) = v48;
    result.n128_u64[1] = *((_QWORD *)&v42 + 1);
    a4[5] = v42;
    a4[6] = v45;
    a4[4] = v39;
    result.n128_u64[0] = *((_QWORD *)a3 + 4);
    if (result.n128_f64[0] > *(double *)(a2 + 32))
    {
      v40 = *(_OWORD *)(a2 + 64);
      v43 = *(_OWORD *)(a2 + 80);
      v46 = *(_OWORD *)(a2 + 96);
      v49 = *(_QWORD *)(a2 + 112);
      v28 = *(_OWORD *)a2;
      v31 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)(a2 + 32);
      v37 = *(_OWORD *)(a2 + 48);
      v15 = a3[4];
      v16 = a3[5];
      v17 = a3[6];
      *(_QWORD *)(a2 + 112) = *((_QWORD *)a3 + 14);
      *(_OWORD *)(a2 + 80) = v16;
      *(_OWORD *)(a2 + 96) = v17;
      *(_OWORD *)(a2 + 64) = v15;
      v18 = *a3;
      v19 = a3[1];
      v20 = a3[3];
      *(_OWORD *)(a2 + 32) = a3[2];
      *(_OWORD *)(a2 + 48) = v20;
      *(_OWORD *)a2 = v18;
      *(_OWORD *)(a2 + 16) = v19;
      a3[2] = v34;
      a3[3] = v37;
      *a3 = v28;
      a3[1] = v31;
      *((_QWORD *)a3 + 14) = v49;
      result.n128_u64[1] = *((_QWORD *)&v43 + 1);
      a3[5] = v43;
      a3[6] = v46;
      a3[4] = v40;
      result.n128_u64[0] = *(_QWORD *)(a2 + 32);
      if (result.n128_f64[0] > *(double *)(a1 + 32))
      {
        v41 = *(_OWORD *)(a1 + 64);
        v44 = *(__n128 *)(a1 + 80);
        v47 = *(_OWORD *)(a1 + 96);
        v50 = *(_QWORD *)(a1 + 112);
        v29 = *(_OWORD *)a1;
        v32 = *(_OWORD *)(a1 + 16);
        v35 = *(_OWORD *)(a1 + 32);
        v38 = *(_OWORD *)(a1 + 48);
        v21 = *(_OWORD *)(a2 + 64);
        v22 = *(_OWORD *)(a2 + 80);
        v23 = *(_OWORD *)(a2 + 96);
        *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 80) = v22;
        *(_OWORD *)(a1 + 96) = v23;
        *(_OWORD *)(a1 + 64) = v21;
        v24 = *(_OWORD *)a2;
        v25 = *(_OWORD *)(a2 + 16);
        v26 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v26;
        *(_OWORD *)a1 = v24;
        *(_OWORD *)(a1 + 16) = v25;
        *(_OWORD *)(a2 + 32) = v35;
        *(_OWORD *)(a2 + 48) = v38;
        *(_OWORD *)a2 = v29;
        *(_OWORD *)(a2 + 16) = v32;
        *(_QWORD *)(a2 + 112) = v50;
        result = v44;
        *(__n128 *)(a2 + 80) = v44;
        *(_OWORD *)(a2 + 96) = v47;
        *(_OWORD *)(a2 + 64) = v41;
      }
    }
  }
  return result;
}

double *sub_101056508(double *result, double *a2, uint64_t a3, char a4)
{
  double *v7;
  double *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double *v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  double *v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  double *v22;
  double *v23;
  double v24;
  double v25;
  double *v26;
  BOOL v27;
  double v28;
  double *v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double *v36;
  double v37;
  double v38;
  double *v39;
  double *v40;
  double *v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double *v48;
  BOOL v50;
  uint64_t v51;
  double *v52;
  double v53;
  double v54;
  uint64_t v55;
  double *v56;
  int64_t v57;
  int64_t v58;
  int64_t v59;
  uint64_t v60;
  double *v61;
  double *v62;
  double v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  double *v70;
  double *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  double *v76;
  double v77;
  double v79;
  double v80;
  double *v81;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v37 = *(a2 - 1);
        v38 = *v8;
        if (v37 > *v8)
        {
          *v8 = v37;
          *(a2 - 1) = v38;
        }
        return result;
      case 3uLL:
        return sub_101056B58(v8, v8 + 1, a2 - 1);
      case 4uLL:
        return sub_101056D84(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5uLL:
        v39 = v8 + 1;
        v40 = v8 + 2;
        v41 = v8 + 3;
        result = sub_101056D84(v8, v8 + 1, v8 + 2, v8 + 3);
        v42 = *(a2 - 1);
        v43 = v8[3];
        if (v42 > v43)
        {
          *v41 = v42;
          *(a2 - 1) = v43;
          v44 = *v41;
          v45 = *v40;
          if (*v41 > *v40)
          {
            *v40 = v44;
            *v41 = v45;
            v46 = *v39;
            if (v44 > *v39)
            {
              v8[1] = v44;
              v8[2] = v46;
              v47 = *v8;
              if (v44 > *v8)
              {
                *v8 = v44;
                v8[1] = v47;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v48 = v8 + 1;
          v50 = v8 == a2 || v48 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v50)
            {
              v51 = 0;
              v52 = v8;
              do
              {
                v54 = *v52;
                v53 = v52[1];
                v52 = v48;
                if (v53 > v54)
                {
                  v55 = v51;
                  while (1)
                  {
                    *(double *)((char *)v8 + v55 + 8) = v54;
                    if (!v55)
                      break;
                    v54 = *(double *)((char *)v8 + v55 - 8);
                    v55 -= 8;
                    if (v53 <= v54)
                    {
                      v56 = (double *)((char *)v8 + v55 + 8);
                      goto LABEL_79;
                    }
                  }
                  v56 = v8;
LABEL_79:
                  *v56 = v53;
                }
                v48 = v52 + 1;
                v51 += 8;
              }
              while (v52 + 1 != a2);
            }
          }
          else if (!v50)
          {
            do
            {
              v80 = *v7;
              v79 = v7[1];
              v7 = v48;
              if (v79 > v80)
              {
                v81 = v48;
                do
                {
                  *v81 = v80;
                  v80 = *(v81 - 2);
                  --v81;
                }
                while (v79 > v80);
                *v81 = v79;
              }
              ++v48;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 == a2)
            return result;
          v57 = (v10 - 2) >> 1;
          v58 = v57;
          do
          {
            v59 = v58;
            if (v57 >= v58)
            {
              v60 = (2 * v58) | 1;
              v61 = &v8[v60];
              if (2 * v59 + 2 < (uint64_t)v10 && *v61 > v61[1])
              {
                ++v61;
                v60 = 2 * v59 + 2;
              }
              v62 = &v8[v59];
              v63 = *v61;
              v64 = *v62;
              if (*v61 <= *v62)
              {
                do
                {
                  *v62 = v63;
                  v62 = v61;
                  if (v57 < v60)
                    break;
                  v65 = 2 * v60;
                  v60 = (2 * v60) | 1;
                  v61 = &v8[v60];
                  v66 = v65 + 2;
                  if (v66 < (uint64_t)v10 && *v61 > v61[1])
                  {
                    ++v61;
                    v60 = v66;
                  }
                  v63 = *v61;
                }
                while (*v61 <= v64);
                *v62 = v64;
              }
            }
            v58 = v59 - 1;
          }
          while (v59);
          v67 = (unint64_t)v9 >> 3;
          while (2)
          {
            v68 = 0;
            v69 = *v8;
            v70 = v8;
            do
            {
              v71 = v70;
              v70 += v68 + 1;
              v72 = 2 * v68;
              v68 = (2 * v68) | 1;
              v73 = v72 + 2;
              if (v73 < v67 && *v70 > v70[1])
              {
                ++v70;
                v68 = v73;
              }
              *v71 = *v70;
            }
            while (v68 <= (uint64_t)((unint64_t)(v67 - 2) >> 1));
            if (v70 == --a2)
            {
LABEL_107:
              *v70 = v69;
            }
            else
            {
              *v70 = *a2;
              *a2 = v69;
              v74 = (char *)v70 - (char *)v8 + 8;
              if (v74 >= 9)
              {
                v75 = (((unint64_t)v74 >> 3) - 2) >> 1;
                v76 = &v8[v75];
                v77 = *v76;
                v69 = *v70;
                if (*v76 > *v70)
                {
                  do
                  {
                    *v70 = v77;
                    v70 = v76;
                    if (!v75)
                      break;
                    v75 = (v75 - 1) >> 1;
                    v76 = &v8[v75];
                    v77 = *v76;
                  }
                  while (*v76 > v69);
                  goto LABEL_107;
                }
              }
            }
            if (v67-- <= 2)
              return result;
            continue;
          }
        }
        v11 = v10 >> 1;
        v12 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = sub_101056B58(&v7[v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_101056B58(v7, &v7[v10 >> 1], a2 - 1);
          sub_101056B58(v7 + 1, v12 - 1, a2 - 2);
          sub_101056B58(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = sub_101056B58(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0 && *(v7 - 1) <= v14)
        {
          if (v14 <= *(a2 - 1))
          {
            v29 = v7 + 1;
            do
            {
              v8 = v29;
              if (v29 >= a2)
                break;
              ++v29;
            }
            while (v14 <= *v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v28 = v8[1];
              ++v8;
            }
            while (v14 <= v28);
          }
          v30 = a2;
          if (v8 < a2)
          {
            v30 = a2;
            do
              v31 = *--v30;
            while (v14 > v31);
          }
          if (v8 < v30)
          {
            v32 = *v8;
            v33 = *v30;
            do
            {
              *v8 = v33;
              *v30 = v32;
              do
              {
                v34 = v8[1];
                ++v8;
                v32 = v34;
              }
              while (v14 <= v34);
              do
              {
                v35 = *--v30;
                v33 = v35;
              }
              while (v14 > v35);
            }
            while (v8 < v30);
          }
          v36 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v36;
          a4 = 0;
          *v36 = v14;
          continue;
        }
        v15 = 0;
        do
          v16 = v7[++v15];
        while (v16 > v14);
        v17 = &v7[v15];
        v18 = a2;
        if (v15 == 1)
        {
          v18 = a2;
          do
          {
            if (v17 >= v18)
              break;
            v20 = *--v18;
          }
          while (v20 <= v14);
        }
        else
        {
          do
            v19 = *--v18;
          while (v19 <= v14);
        }
        if (v17 >= v18)
        {
          v26 = v17 - 1;
        }
        else
        {
          v21 = *v18;
          v22 = &v7[v15];
          v23 = v18;
          do
          {
            *v22 = v21;
            *v23 = v16;
            do
            {
              v24 = v22[1];
              ++v22;
              v16 = v24;
            }
            while (v24 > v14);
            do
            {
              v25 = *--v23;
              v21 = v25;
            }
            while (v25 <= v14);
          }
          while (v22 < v23);
          v26 = v22 - 1;
        }
        if (v26 != v7)
          *v7 = *v26;
        *v26 = v14;
        if (v17 < v18)
        {
LABEL_32:
          result = (double *)sub_101056508(v7, v26, a3, a4 & 1);
          a4 = 0;
          v8 = v26 + 1;
          continue;
        }
        v27 = sub_101056BC8(v7, v26);
        v8 = v26 + 1;
        result = (double *)sub_101056BC8(v26 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v27)
            continue;
          goto LABEL_32;
        }
        a2 = v26;
        if (!v27)
          goto LABEL_2;
        return result;
    }
  }
}

double *sub_101056B58(double *result, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;

  v3 = *a2;
  v4 = *result;
  v5 = *a3;
  if (*a2 <= *result)
  {
    if (v5 > v3)
    {
      *a2 = v5;
      *a3 = v3;
      v6 = *result;
      if (*a2 > *result)
      {
        *result = *a2;
        *a2 = v6;
      }
    }
  }
  else
  {
    if (v5 <= v3)
    {
      *result = v3;
      *a2 = v4;
      if (*a3 <= v4)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v5;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_101056BC8(double *a1, double *a2)
{
  uint64_t v4;
  _BOOL8 result;
  double v6;
  double v7;
  double *v8;
  double *v9;
  int v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 > *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_101056B58(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_101056D84(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v17 = a1 + 1;
      v18 = a1 + 2;
      v19 = a1 + 3;
      sub_101056D84(a1, a1 + 1, a1 + 2, a1 + 3);
      v20 = *(a2 - 1);
      v21 = a1[3];
      if (v20 > v21)
      {
        *v19 = v20;
        *(a2 - 1) = v21;
        v22 = *v19;
        v23 = *v18;
        if (*v19 > *v18)
        {
          *v18 = v22;
          *v19 = v23;
          v24 = *v17;
          if (v22 > *v17)
          {
            a1[1] = v22;
            a1[2] = v24;
            v25 = *a1;
            if (v22 > *a1)
            {
              *a1 = v22;
              a1[1] = v25;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      sub_101056B58(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*v9 > *v8)
    {
      v14 = v11;
      while (1)
      {
        *(double *)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(double *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (v12 <= v13)
        {
          v16 = (double *)((char *)a1 + v15);
          goto LABEL_13;
        }
      }
      v16 = a1;
LABEL_13:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

double *sub_101056D84(double *a1, double *a2, double *a3, double *a4)
{
  double *result;
  double v9;
  double v10;
  double v11;

  result = sub_101056B58(a1, a2, a3);
  v9 = *a3;
  if (*a4 > *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*a3 > *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*a2 > *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

void sub_101056E64(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  NSDictionary *v14;
  uint64_t v15;
  uint64_t v16;

  v15 = CMDistributedSensingVehicleStateUpdateKey;
  v16 = a2;
  v14 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1);
  sub_101057AD8("DistributedSensing/kCLConnectionMessageDistributedSensingVehicleStateUpdate", &v14, &v12);
  v3 = *(_QWORD *)(a1 + 8);
  v11 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  CLConnection::sendMessage(v3);
  if (v11)
  {
    v6 = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_101056F94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_100261F44((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_101056FC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;
  uint64_t v5;
  _QWORD v7[5];

  *(_QWORD *)a1 = off_10219C258;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = a3;
  if (+[CLDistributedSensingService isSupported](CLDistributedSensingService, "isSupported"))
  {
    *(_QWORD *)(a1 + 32) = -[CLDistributedSensingSubscriptionClient initWithSubscription:]([CLDistributedSensingSubscriptionClient alloc], "initWithSubscription:", a1);
    v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "vendor"), "proxyForService:", CFSTR("CLDistributedSensingService"));
    *(_QWORD *)(a1 + 24) = v4;
    objc_msgSend(v4, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 32), objc_msgSend(*(id *)(a1 + 16), "silo"));
  }
  v5 = *(_QWORD *)(a1 + 8);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1010570C0;
  v7[3] = &unk_10213D510;
  v7[4] = a1;
  CLConnection::setDefaultMessageHandler(v5, v7);
  return a1;
}

void sub_1010570AC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10008ABA0(v1);
  _Unwind_Resume(a1);
}

void sub_1010570C0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_10105714C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_101057164(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = off_10219C258;
  v2 = *(void **)(a1 + 24);
  if (v2)
  {

    *(_QWORD *)(a1 + 24) = 0;
  }
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    objc_msgSend(v3, "invalidate");

    *(_QWORD *)(a1 + 32) = 0;
  }
  return sub_10008ABA0((_QWORD *)a1);
}

void sub_1010571C0(uint64_t a1)
{
  sub_101057164(a1);
  operator delete();
}

void sub_1010571E4(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  _QWORD *v5;
  int v6;
  NSObject *v7;
  uint64_t *v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  void **v12;
  NSObject *v13;
  uint64_t *v14;
  int v15;
  uint64_t *v16;
  uint64_t *v17;
  void **v18;
  CLConnectionMessage *v19;
  CLConnectionMessage *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  void *__p[2];
  char v26;
  CLConnectionMessage *v27[2];
  uint8_t buf[4];
  int v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  uint64_t *v33;
  __int16 v34;
  void **v35;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v5 = (_QWORD *)CLConnectionMessage::name(*a2);
  v6 = *((char *)v5 + 23);
  if (v6 < 0)
  {
    if (v5[1] != 75)
    {
LABEL_7:
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10219C298);
      v7 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
      {
        v8 = (uint64_t *)CLConnectionMessage::name(*a2);
        v9 = *((char *)v8 + 23);
        v10 = (uint64_t *)*v8;
        CLConnection::getName(*(CLConnection **)(a1 + 8));
        if (v9 >= 0)
          v11 = v8;
        else
          v11 = v10;
        if (v26 >= 0)
          v12 = __p;
        else
          v12 = (void **)__p[0];
        *(_DWORD *)buf = 68289538;
        v29 = 0;
        v30 = 2082;
        v31 = "";
        v32 = 2082;
        v33 = v11;
        v34 = 2082;
        v35 = v12;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unhandled message\", \"name\":%{public, location:escape_only}s, \"client\":%{public, location:escape_only}s}", buf, 0x26u);
        if (v26 < 0)
          operator delete(__p[0]);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_10219C298);
      }
      v13 = qword_1022A01C8;
      if (os_signpost_enabled((os_log_t)qword_1022A01C8))
      {
        v14 = (uint64_t *)CLConnectionMessage::name(*a2);
        v15 = *((char *)v14 + 23);
        v16 = (uint64_t *)*v14;
        CLConnection::getName(*(CLConnection **)(a1 + 8));
        if (v15 >= 0)
          v17 = v14;
        else
          v17 = v16;
        if (v26 >= 0)
          v18 = __p;
        else
          v18 = (void **)__p[0];
        *(_DWORD *)buf = 68289538;
        v29 = 0;
        v30 = 2082;
        v31 = "";
        v32 = 2082;
        v33 = v17;
        v34 = 2082;
        v35 = v18;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unhandled message", "{\"msg%{public}.0s\":\"Unhandled message\", \"name\":%{public, location:escape_only}s, \"client\":%{public, location:escape_only}s}", buf, 0x26u);
        if (v26 < 0)
          operator delete(__p[0]);
      }
      goto LABEL_37;
    }
    v5 = (_QWORD *)*v5;
  }
  else if (v6 != 75)
  {
    goto LABEL_7;
  }
  if (memcmp(v5, "DistributedSensing/kCLConnectionMessageDistributedSensingVehicleStateUpdate", 0x4BuLL))
    goto LABEL_7;
  v19 = *a2;
  v20 = a2[1];
  v27[0] = v19;
  v27[1] = v20;
  if (v20)
  {
    v21 = (unint64_t *)((char *)v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  sub_101057528(a1, v27);
  if (v20)
  {
    v23 = (unint64_t *)((char *)v20 + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v20 + 16))(v20);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v20);
    }
  }
LABEL_37:

}

void sub_1010574E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_101057528(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  uint64_t v5;
  char isEntitled;
  char v7;
  const __CFDictionary *Dictionary;
  NSObject *v9;
  void **v10;
  void *v11;
  uint64_t v12;
  CLConnectionMessage *v13;
  NSObject *v14;
  void **v15;
  NSObject *v16;
  void **v17;
  NSObject *v18;
  void **v19;
  CLConnectionMessage *v20;
  BOOL v21;
  _BYTE v22[16];
  void *__p[2];
  char v24;
  uint64_t v25;
  _UNKNOWN **v26;
  uint8_t buf[8];
  __int16 v28;
  const char *v29;
  __int16 v30;
  void **v31;
  __int16 v32;
  _BOOL4 v33;
  uint64_t v34;
  _UNKNOWN **v35;
  uint64_t v36;
  _UNKNOWN **v37;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v5 = *(_QWORD *)(a1 + 8);
  sub_1015A2E04(buf, "com.apple.locationd.activity");
  isEntitled = CLConnection::isEntitled(v5, buf);
  v7 = isEntitled;
  if ((SBYTE3(v31) & 0x80000000) == 0)
  {
    if ((isEntitled & 1) != 0)
      goto LABEL_3;
LABEL_16:
    v13 = *a2;
    v36 = CMErrorMessage;
    v37 = &off_10221CD88;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v37, &v36, 1);
LABEL_26:
    CLConnectionMessage::sendReply(v13);
    goto LABEL_46;
  }
  operator delete(*(void **)buf);
  if ((v7 & 1) == 0)
    goto LABEL_16;
LABEL_3:
  if (!+[CLDistributedSensingService isSupported](CLDistributedSensingService, "isSupported"))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10219C298);
    v14 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      CLConnection::getName(*(CLConnection **)(a1 + 8));
      v15 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v28 = 2082;
      v29 = "";
      v30 = 2082;
      v31 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#distributedSensing Service unavailable\", \"client\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (v24 < 0)
        operator delete(__p[0]);
    }
    v13 = *a2;
    v34 = CMErrorMessage;
    v35 = &off_10221CDA0;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1);
    goto LABEL_26;
  }
  Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
  sub_1001C1D6C((int)v22, Dictionary);
  v21 = 0;
  if ((sub_1001E4874((uint64_t)v22, "kCLConnectionMessageSubscribeKey", &v21) & 1) != 0)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10219C298);
    v9 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      CLConnection::getName(*(CLConnection **)(a1 + 8));
      if (v24 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      v28 = 2082;
      v29 = "";
      v30 = 2082;
      v31 = v10;
      v32 = 1026;
      v33 = v21;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#distributedSensing Client subscribe\", \"client\":%{public, location:escape_only}s, \"subscribe\":%{public}hhd}", buf, 0x22u);
      if (v24 < 0)
        operator delete(__p[0]);
    }
    v11 = *(void **)(a1 + 24);
    v12 = *(_QWORD *)(a1 + 32);
    if (v21)
      objc_msgSend(v11, "registerClient:forNotification:", v12, 0);
    else
      objc_msgSend(v11, "unregisterClient:forNotification:", v12, 0);
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10219C298);
    v16 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      CLConnection::getName(*(CLConnection **)(a1 + 8));
      if (v24 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      v28 = 2082;
      v29 = "";
      v30 = 2082;
      v31 = v17;
      v32 = 1026;
      v33 = v21;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#distributedSensing Error obtaining subscription key\", \"client\":%{public, location:escape_only}s, \"subscribe\":%{public}hhd}", buf, 0x22u);
      if (v24 < 0)
        operator delete(__p[0]);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10219C298);
    }
    v18 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      CLConnection::getName(*(CLConnection **)(a1 + 8));
      v19 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      v28 = 2082;
      v29 = "";
      v30 = 2082;
      v31 = v19;
      v32 = 1026;
      v33 = v21;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#distributedSensing Error obtaining subscription key", "{\"msg%{public}.0s\":\"#distributedSensing Error obtaining subscription key\", \"client\":%{public, location:escape_only}s, \"subscribe\":%{public}hhd}", buf, 0x22u);
      if (v24 < 0)
        operator delete(__p[0]);
    }
    v20 = *a2;
    v25 = CMErrorMessage;
    v26 = &off_10221CDB8;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1);
    CLConnectionMessage::sendReply(v20);
  }
  sub_10011A5A8(v22);
LABEL_46:

}

void sub_101057A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  sub_10011A5A8(&a10);

  _Unwind_Resume(a1);
}

void sub_101057AAC(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

_QWORD *sub_101057AD8@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_100487B64(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_101057B24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101057B4C()
{
  sub_1015A2E04(qword_10230BEA0, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230BEA0, (void *)&_mh_execute_header);
}

_QWORD *sub_101057B90(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[5];

  *a1 = off_10219C2C8;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  v2 = sub_100127B9C();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_101057C20;
  v4[3] = &unk_10212ECA0;
  v4[4] = a1;
  sub_1000A50A8(v2, (uint64_t)v4);
  return a1;
}

void sub_101057C0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

BOOL sub_101057C20(uint64_t a1)
{
  return sub_101057C28(*(_QWORD *)(a1 + 32));
}

BOOL sub_101057C28(uint64_t a1)
{
  _BOOL8 v2;
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  char v12;
  _WORD v13[8];
  uint8_t buf[1640];

  sub_100127B9C();
  sub_100127BDC();
  v2 = sub_10075E6A0();
  if (v2)
  {
    if (!*(_QWORD *)(a1 + 8))
    {
      v3 = (uint64_t *)sub_100A07FA0();
      v11 = 0x160000FF0CLL;
      v12 = 0;
      sub_1018E4078(v3, (uint64_t)&v11, (uint64_t *)buf);
      sub_1002B7674(a1 + 8, (__int128 *)buf);
      v4 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v5 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      sub_100A0A4BC(*(uint64_t **)(a1 + 8), (uint64_t)sub_10014F998, a1);
    }
  }
  else
  {
    if (qword_10229FF80 != -1)
      dispatch_once(&qword_10229FF80, &stru_10219C310);
    v7 = qword_10229FF88;
    if (os_log_type_enabled((os_log_t)qword_10229FF88, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Service unavailable.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF80 != -1)
        dispatch_once(&qword_10229FF80, &stru_10219C310);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF88, 17, "Service unavailable.", v13, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLSPUInertialOdometryInterface::openHidDevice()", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  return v2;
}

_QWORD *sub_101057E5C(_QWORD *a1)
{
  *a1 = off_10219C2C8;
  sub_100261F44((uint64_t)(a1 + 1));
  return a1;
}

_QWORD *sub_101057E8C(_QWORD *a1)
{
  *a1 = off_10219C2C8;
  sub_100261F44((uint64_t)(a1 + 1));
  return a1;
}

void sub_101057EBC(_QWORD *a1)
{
  *a1 = off_10219C2C8;
  sub_100261F44((uint64_t)(a1 + 1));
  operator delete();
}

void sub_101057F00(id a1)
{
  qword_10229FF88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "InertialOdometry");
}

uint64_t sub_101057F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  NSURLSessionConfiguration *v9;

  *(_QWORD *)a1 = a2;
  v8 = a1 + 40;
  sub_100270E34(a1 + 8, a3);
  sub_100270E34(v8, a4);
  sub_100270E34(a1 + 72, a5);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v9 = +[NSURLSessionConfiguration defaultSessionConfiguration](NSURLSessionConfiguration, "defaultSessionConfiguration");
  -[NSURLSessionConfiguration setAllowsCellularAccess:](v9, "setAllowsCellularAccess:", 1);
  *(_QWORD *)(a1 + 104) = +[NSURLSession sessionWithConfiguration:](NSURLSession, "sessionWithConfiguration:", v9);
  return a1;
}

void sub_101057FDC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v5 = *(_QWORD **)(v2 + 64);
  if (v5 == v3)
  {
    v6 = 4;
    v5 = v3;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v7 = *(_QWORD **)(v2 + 32);
  if (v7 == v1)
  {
    v8 = 4;
    v7 = v1;
  }
  else
  {
    if (!v7)
      goto LABEL_11;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t sub_101058094(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 104) = 0;
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  v2 = *(_QWORD **)(a1 + 96);
  if (v2 == (_QWORD *)(a1 + 72))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 72);
  }
  else
  {
    if (!v2)
      goto LABEL_8;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_8:
  v4 = *(_QWORD **)(a1 + 64);
  if (v4 == (_QWORD *)(a1 + 40))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 40);
  }
  else
  {
    if (!v4)
      goto LABEL_13;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_13:
  v6 = *(_QWORD **)(a1 + 32);
  if (v6 == (_QWORD *)(a1 + 8))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 8);
    goto LABEL_17;
  }
  if (v6)
  {
    v7 = 5;
LABEL_17:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void sub_101058168(uint64_t a1, int a2)
{
  NSObject *v4;
  void **v5;
  uint64_t v6;
  _BYTE *v7;
  char *v8;
  char *v9;
  _BYTE buf[12];
  char v11;
  int v12;
  _BYTE *v13;
  void *__p[2];
  char v15;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_10219C398);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    sub_100A82650(a2, __p);
    v5 = v15 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#EED2Control,handleCommTypeChange,comm type changed to %{public}s", buf, 0xCu);
    if (v15 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10219C398);
    v6 = qword_1022A0088;
    sub_100A82650(a2, buf);
    if (v11 >= 0)
      v7 = buf;
    else
      v7 = *(_BYTE **)buf;
    v12 = 136446210;
    v13 = v7;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v6, 2, "#EED2Control,handleCommTypeChange,comm type changed to %{public}s", &v12, 12);
    v9 = v8;
    if (v11 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2Control::handleCommTypeChange(Emergency::CommunicationType)", "%s\n", v9);
    if (v9 != (char *)__p)
      free(v9);
  }
  *(_DWORD *)(a1 + 112) = a2;
}

std::string *sub_101058388(std::string *a1, const std::string *a2)
{
  NSObject *v4;
  const std::string *v5;
  const std::string *v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  const std::string *v11;
  uint8_t buf[4];
  const std::string *v13;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_10219C398);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = a2;
    else
      v5 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136380675;
    v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#EED2Control,handleCompanionNumberChange,companion phone number changed to %{private}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10219C398);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = a2;
    else
      v7 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    v10 = 136380675;
    v11 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EED2Control,handleCompanionNumberChange,companion phone number changed to %{private}s", &v10, 12);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyEED2Control::handleCompanionNumberChange(const std::string &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  return std::string::operator=(a1 + 5, a2);
}

uint64_t sub_101058560(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10)
{
  uint64_t v14;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  void *v28;
  NSObject *v29;
  NSMutableArray *v30;
  uint64_t v31;
  id v32;
  id v33;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  NSObject *v37;
  const char *v38;
  uint8_t *v39;
  NSObject *v40;
  NSObject *v41;
  const char *v42;
  uint64_t v43;
  NSObject *v44;
  NSMutableArray *v45;
  uint64_t v46;
  id v47;
  id v48;
  void *v49;
  _BOOL4 v50;
  _QWORD *v51;
  uint64_t v52;
  NSObject *v53;
  NSObject *v54;
  const char *v55;
  NSObject *v56;
  const char *v58;
  uint8_t *v59;
  const char *v60;
  uint8_t *v61;
  const char *v62;
  uint8_t *v63;
  const char *v64;
  uint8_t *v65;
  const char *v66;
  uint8_t *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  _WORD v71[8];
  void *__p[2];
  uint64_t v73;
  _BYTE v74[24];
  _BYTE *v75;
  _BYTE v76[24];
  _BYTE *v77;
  uint8_t buf[1632];

  if (a3 && a6 && a5 && *(_QWORD *)(a8 + 24))
  {
    v14 = *(_QWORD *)(a1 + 32);
    if (!v14
      || (v21 = *(unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14),
          v22 = sub_1010593E0(a1, v21),
          v23 = v22,
          *(_DWORD *)buf = v21,
          (v24 = *(_QWORD *)(a1 + 64)) == 0))
    {
      sub_10025FD1C();
    }
    v25 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v24 + 48))(v24, buf);
    if (*(char *)(v25 + 159) < 0)
    {
      sub_100115CE4(__p, *(void **)(v25 + 136), *(_QWORD *)(v25 + 144));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v25 + 136);
      v73 = *(_QWORD *)(v25 + 152);
    }
    if (v73 >= 0)
      v28 = (void *)HIBYTE(v73);
    else
      v28 = __p[1];
    if (!v28)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10219C398);
      v40 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#EED2Control,sendControlData,native number is empty, not sending control data", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_10219C398);
        v71[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2Control,sendControlData,native number is empty, not sending control data", v71, 2);
        v63 = (uint8_t *)v62;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2Control::sendControlData(NSData *, CFAbsoluteTime, CFAbsoluteTime, NSDictionary *, NSArray<CLEEDRequest *> *, NSData *, SecKeyRef, NSArray *, SendControlDataResponse)", "%s\n", v62);
        if (v63 != buf)
          free(v63);
      }
      HIDWORD(v70) = 0;
LABEL_57:
      if (*(char *)(a1 + 143) < 0)
        v43 = *(_QWORD *)(a1 + 128);
      else
        v43 = *(unsigned __int8 *)(a1 + 143);
      if (!v43 || byte_102313FC8)
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_10219C398);
        v53 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "#EED2Control,sendControlData,companion number is empty or device supports alternate account, not sending control data", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_10219C398);
          v71[0] = 0;
          LODWORD(v70) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2Control,sendControlData,companion number is empty or device supports alternate account, not sending control data", v71, v70);
          v67 = (uint8_t *)v66;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2Control::sendControlData(NSData *, CFAbsoluteTime, CFAbsoluteTime, NSDictionary *, NSArray<CLEEDRequest *> *, NSData *, SecKeyRef, NSArray *, SendControlDataResponse)", "%s\n", v66);
          if (v67 != buf)
            free(v67);
        }
        v50 = 0;
        goto LABEL_80;
      }
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10219C398);
      v44 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "#EED2Control,sendControlData,sending control data for companion number", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_10219C398);
        v71[0] = 0;
        LODWORD(v70) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2Control,sendControlData,sending control data for companion number", v71, v70);
        v65 = (uint8_t *)v64;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2Control::sendControlData(NSData *, CFAbsoluteTime, CFAbsoluteTime, NSDictionary *, NSArray<CLEEDRequest *> *, NSData *, SecKeyRef, NSArray *, SendControlDataResponse)", "%s\n", v64);
        if (v65 != buf)
          free(v65);
      }
      v45 = sub_101059928(a1, (uint64_t *)(a1 + 120), a4, a5, a6);
      v46 = (uint64_t)v45;
      if (v45 && (v47 = -[NSMutableArray count](v45, "count")) != 0)
      {
        v48 = sub_101059F70(a9, a10, (uint64_t)v47, a2, (uint64_t *)(a1 + 120), a3, v46, (uint64_t)v22, a7);
        v49 = v48;
        if (v48 && objc_msgSend(v48, "count"))
        {
          sub_100270E34((uint64_t)v74, a8);
          v50 = sub_10105A374(a1, 1, (uint64_t)v49, (uint64_t)v74);
          v51 = v75;
          if (v75 == v74)
          {
            v52 = 4;
            v51 = v74;
          }
          else
          {
            if (!v75)
            {
LABEL_100:

LABEL_80:
              v27 = HIDWORD(v70) | v50;
              goto LABEL_95;
            }
            v52 = 5;
          }
          (*(void (**)(void))(*v51 + 8 * v52))();
          goto LABEL_100;
        }
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_10219C398);
        v56 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "#EED2Control,sendControlData,nil or empty companionNumberDict,early return", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 0))
        {
LABEL_94:
          v27 = 0;
LABEL_95:
          if (SHIBYTE(v73) < 0)
            operator delete(__p[0]);
          return v27;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_10219C398);
        v71[0] = 0;
        LODWORD(v70) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Control,sendControlData,nil or empty companionNumberDict,early return", v71, v70);
        v39 = (uint8_t *)v68;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyEED2Control::sendControlData(NSData *, CFAbsoluteTime, CFAbsoluteTime, NSDictionary *, NSArray<CLEEDRequest *> *, NSData *, SecKeyRef, NSArray *, SendControlDataResponse)", "%s\n", v68);
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_10219C398);
        v54 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "#EED2Control,sendControlData,fCompanionNumber,nil or empty perPartnerDataArray,early return", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_94;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_10219C398);
        v71[0] = 0;
        LODWORD(v70) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Control,sendControlData,fCompanionNumber,nil or empty perPartnerDataArray,early return", v71, v70);
        v39 = (uint8_t *)v55;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyEED2Control::sendControlData(NSData *, CFAbsoluteTime, CFAbsoluteTime, NSDictionary *, NSArray<CLEEDRequest *> *, NSData *, SecKeyRef, NSArray *, SendControlDataResponse)", "%s\n", v55);
      }
LABEL_124:
      if (v39 != buf)
        free(v39);
      goto LABEL_94;
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10219C398);
    v29 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#EED2Control,sendControlData,sending control data for native number", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10219C398);
      v71[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2Control,sendControlData,sending control data for native number", v71, 2);
      v61 = (uint8_t *)v60;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2Control::sendControlData(NSData *, CFAbsoluteTime, CFAbsoluteTime, NSDictionary *, NSArray<CLEEDRequest *> *, NSData *, SecKeyRef, NSArray *, SendControlDataResponse)", "%s\n", v60);
      if (v61 != buf)
        free(v61);
    }
    v30 = sub_101059928(a1, (uint64_t *)__p, a4, a5, a6);
    v31 = (uint64_t)v30;
    if (!v30 || (v32 = -[NSMutableArray count](v30, "count")) == 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10219C398);
      v37 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "#EED2Control,sendControlData,nativeNumber,nil or empty perPartnerDataArray,early return", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_94;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10219C398);
      v71[0] = 0;
      LODWORD(v69) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Control,sendControlData,nativeNumber,nil or empty perPartnerDataArray,early return", v71, v69);
      v39 = (uint8_t *)v38;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyEED2Control::sendControlData(NSData *, CFAbsoluteTime, CFAbsoluteTime, NSDictionary *, NSArray<CLEEDRequest *> *, NSData *, SecKeyRef, NSArray *, SendControlDataResponse)", "%s\n", v38);
      goto LABEL_124;
    }
    v33 = sub_101059F70(a9, a10, (uint64_t)v32, a2, (uint64_t *)__p, a3, v31, (uint64_t)v22, a7);
    v34 = v33;
    if (!v33 || !objc_msgSend(v33, "count"))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10219C398);
      v41 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "#EED2Control,sendControlData,nil or empty nativeNumberDict,early return", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_94;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10219C398);
      v71[0] = 0;
      LODWORD(v69) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Control,sendControlData,nil or empty nativeNumberDict,early return", v71, v69);
      v39 = (uint8_t *)v42;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyEED2Control::sendControlData(NSData *, CFAbsoluteTime, CFAbsoluteTime, NSDictionary *, NSArray<CLEEDRequest *> *, NSData *, SecKeyRef, NSArray *, SendControlDataResponse)", "%s\n", v42);
      goto LABEL_124;
    }
    sub_100270E34((uint64_t)v76, a8);
    HIDWORD(v70) = sub_10105A374(a1, 0, (uint64_t)v34, (uint64_t)v76);
    v35 = v77;
    if (v77 == v76)
    {
      v36 = 4;
      v35 = v76;
    }
    else
    {
      if (!v77)
      {
LABEL_56:

        goto LABEL_57;
      }
      v36 = 5;
    }
    (*(void (**)(void))(*v35 + 8 * v36))();
    goto LABEL_56;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_10219C398);
  v26 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "#EED2Control,sendControlData,one more more input parameters is nil,early return", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10219C398);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Control,sendControlData,one more more input parameters is nil,early return", __p, 2);
    v59 = (uint8_t *)v58;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyEED2Control::sendControlData(NSData *, CFAbsoluteTime, CFAbsoluteTime, NSDictionary *, NSArray<CLEEDRequest *> *, NSData *, SecKeyRef, NSArray *, SendControlDataResponse)", "%s\n", v58);
    if (v59 != buf)
      free(v59);
  }
  return 0;
}

void sub_101059334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1010593E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  std::string::size_type size;
  char v11;
  std::string *p_dst;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  std::string::size_type v16;
  char v17;
  std::string *v18;
  NSString *v19;
  NSString *v20;
  uint64_t v21;
  uint8_t *v22;
  NSString *v23;
  NSObject *v24;
  std::string *v25;
  const char *v26;
  std::string *v27;
  const char *v28;
  const char *v29;
  unsigned int v31;
  void *v32[2];
  char v33;
  std::string v34;
  void *__p[2];
  char v36;
  std::string __dst;
  uint8_t buf[8];
  __int16 v39;
  const char *v40;
  __int16 v41;
  int v42;
  __int16 v43;
  unsigned int v44;
  __int16 v45;
  std::string *v46;
  __int16 v47;
  const char *v48;
  __int16 v49;
  std::string *v50;
  __int16 v51;
  const char *v52;
  __int16 v53;
  int v54;
  __int16 v55;
  const char *v56;

  *(_DWORD *)buf = a2;
  v3 = *(_QWORD *)(a1 + 64);
  if (!v3)
    sub_10025FD1C();
  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v3 + 48))(v3, buf);
  v6 = objc_alloc_init((Class)NSMutableDictionary);
  objc_msgSend(v6, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2), CFSTR("sim"));
  objc_msgSend(v6, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *v5), CFSTR("rat"));
  v7 = *(_QWORD *)(a1 + 32);
  if (!v7)
    sub_10025FD1C();
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
  sub_1015A2E04(__p, "carrier");
  v9 = sub_100A580B8(v8, a2, (uint64_t *)__p);
  if (*((char *)v9 + 55) < 0)
    sub_100115CE4(&__dst, (void *)v9[4], v9[5]);
  else
    __dst = *(std::string *)(v9 + 4);
  if (v36 < 0)
    operator delete(__p[0]);
  size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  v11 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __dst.__r_.__value_.__l.__size_;
  if (!size)
  {
    std::string::assign(&__dst, "Unavailable");
    v11 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  if (v11 >= 0)
    p_dst = &__dst;
  else
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  objc_msgSend(v6, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_dst), CFSTR("sim_bundle_id"));
  v13 = *(_QWORD *)(a1 + 32);
  if (!v13)
    sub_10025FD1C();
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13);
  sub_1015A2E04(v32, "operator");
  v15 = sub_100A580B8(v14, a2, (uint64_t *)v32);
  if (*((char *)v15 + 55) < 0)
    sub_100115CE4(&v34, (void *)v15[4], v15[5]);
  else
    v34 = *(std::string *)(v15 + 4);
  if (v33 < 0)
    operator delete(v32[0]);
  v16 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  v17 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v16 = v34.__r_.__value_.__l.__size_;
  if (!v16)
  {
    std::string::assign(&v34, "Unavailable");
    v17 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  }
  if (v17 >= 0)
    v18 = &v34;
  else
    v18 = (std::string *)v34.__r_.__value_.__r.__words[0];
  objc_msgSend(v6, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v18), CFSTR("operator_bundle_id"));
  v19 = sub_100F7F650(v5[8]);
  objc_msgSend(v6, "setValue:forKey:", v19, CFSTR("sim_country"));
  v20 = sub_100F7F650(v5[2]);
  objc_msgSend(v6, "setValue:forKey:", v20, CFSTR("operator_country"));
  sub_100197040();
  v21 = sub_10075A924();
  objc_msgSend(v6, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v21), CFSTR("release_type"));
  sub_100197040();
  sub_10075B048((uint64_t)buf);
  if (v42 >= 0)
    v22 = buf;
  else
    v22 = *(uint8_t **)buf;
  v23 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v22);
  if (SHIBYTE(v42) < 0)
    operator delete(*(void **)buf);
  objc_msgSend(v6, "setValue:forKey:", v23, CFSTR("product_type"));
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_10219C398);
  v24 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v31 = *v5;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &__dst;
    else
      v25 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    v26 = -[NSString UTF8String](v19, "UTF8String");
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &v34;
    else
      v27 = (std::string *)v34.__r_.__value_.__r.__words[0];
    v28 = -[NSString UTF8String](v20, "UTF8String");
    v29 = -[NSString UTF8String](v23, "UTF8String");
    *(_DWORD *)buf = 68291075;
    *(_DWORD *)&buf[4] = 0;
    v39 = 2082;
    v40 = "";
    v41 = 1026;
    v42 = a2;
    v43 = 1026;
    v44 = v31;
    v45 = 2082;
    v46 = v25;
    v47 = 2082;
    v48 = v26;
    v49 = 2082;
    v50 = v27;
    v51 = 2082;
    v52 = v28;
    v53 = 1026;
    v54 = v21;
    v55 = 2081;
    v56 = v29;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2Control,createControlInternalDict\", \"sim\":%{public}d, \"rat\":%{public}d, \"sim_bundle_id\":%{public, location:escape_only}s, \"sim_country\":%{public, location:escape_only}s, \"operator_bundle_id\":%{public, location:escape_only}s, \"operator_country\":%{public, location:escape_only}s, \"release_type\":%{public}d, \"product_type\":%{private, location:escape_only}s}", buf, 0x56u);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v6;
}

void sub_10105988C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a21 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

NSMutableArray *sub_101059928(uint64_t a1, uint64_t *a2, void *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7;
  int *v11;
  uint64_t *v12;
  id v13;
  id v14;
  NSMutableArray *v15;
  _QWORD *i;
  id v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  NSObject *v21;
  NSObject *v22;
  const char *v23;
  uint8_t *v24;
  NSObject *v25;
  const char *v27;
  uint8_t *v28;
  const char *v29;
  uint64_t v30;
  _WORD v31[8];
  _WORD v32[8];
  _QWORD *v33;
  uint64_t v34;
  uint8_t buf[1632];

  if (a4 && a5)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (!v7)
      sub_10025FD1C();
    v11 = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
    v12 = sub_100A57ECC(v11);
    sub_100A91C94((uint64_t)v32, (uint64_t)(v12 + 20));
    v13 = +[CLEEDCryptoUtilities copyPublicKeyFromPrivateKey:](CLEEDCryptoUtilities, "copyPublicKeyFromPrivateKey:", a5);
    if (v13)
    {
      v14 = +[CLEEDCryptoUtilities getKeyExternalRepresentation:](CLEEDCryptoUtilities, "getKeyExternalRepresentation:", v13);
      CFRelease(v13);
      if (v14)
      {
        v15 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", v34);
        for (i = v33; i; i = (_QWORD *)*i)
        {
          v17 = sub_10105AC84(a1, (uint64_t)(i + 5), (uint64_t)v14, a3, a2, a4);
          if (v17)
          {
            -[NSMutableArray addObject:](v15, "addObject:", v17);
          }
          else
          {
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_10219C398);
            v18 = qword_1022A0088;
            if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#EED2Control,getEncryptedControlData,nil perPartnerControlDataDict,ignore and continue", buf, 2u);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0080 != -1)
                dispatch_once(&qword_1022A0080, &stru_10219C398);
              v31[0] = 0;
              LODWORD(v30) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Control,getEncryptedControlData,nil perPartnerControlDataDict,ignore and continue", v31, v30);
              v20 = (uint8_t *)v19;
              sub_100512490("Generic", 1, 0, 0, "NSArray *CLEmergencyEED2Control::getEncryptedControlData(const std::string &, NSArray<CLEEDRequest *> *, CFAbsoluteTime, NSData *, SecKeyRef)", "%s\n", v19);
              if (v20 != buf)
                free(v20);
            }
          }
        }
        goto LABEL_40;
      }
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10219C398);
      v25 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "#EED2Control,getEncryptedControlData,nil deviceSessionPublicKeyRep,early return", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
      {
LABEL_39:
        v15 = 0;
LABEL_40:
        sub_100A921D8((uint64_t)v32);
        return v15;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10219C398);
      v31[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Control,getEncryptedControlData,nil deviceSessionPublicKeyRep,early return", v31, 2);
      v24 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 0, "NSArray *CLEmergencyEED2Control::getEncryptedControlData(const std::string &, NSArray<CLEEDRequest *> *, CFAbsoluteTime, NSData *, SecKeyRef)", "%s\n", v29);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10219C398);
      v22 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#EED2Control,getEncryptedControlData,nil deviceSessionPublicKey,early return", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_39;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10219C398);
      v31[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Control,getEncryptedControlData,nil deviceSessionPublicKey,early return", v31, 2);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "NSArray *CLEmergencyEED2Control::getEncryptedControlData(const std::string &, NSArray<CLEEDRequest *> *, CFAbsoluteTime, NSData *, SecKeyRef)", "%s\n", v23);
    }
    if (v24 != buf)
      free(v24);
    goto LABEL_39;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_10219C398);
  v21 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#EED2Control,getEncryptedControlData,one more more input parameters is nil,early return", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10219C398);
    v32[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Control,getEncryptedControlData,one more more input parameters is nil,early return", v32, 2);
    v28 = (uint8_t *)v27;
    sub_100512490("Generic", 1, 0, 0, "NSArray *CLEmergencyEED2Control::getEncryptedControlData(const std::string &, NSArray<CLEEDRequest *> *, CFAbsoluteTime, NSData *, SecKeyRef)", "%s\n", v27);
    if (v28 != buf)
      free(v28);
  }
  return 0;
}

void sub_101059F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100A921D8((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_101059F70(double a1, double a2, uint64_t a3, void *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t v17;
  id v18;
  uint64_t *v19;
  __CFString *v20;
  NSObject *v21;
  uint64_t *v22;
  NSObject *v23;
  id v24;
  uint64_t *v25;
  const char *v27;
  uint8_t *v28;
  _WORD v29[8];
  uint8_t buf[4];
  int v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  id v35;
  __int16 v36;
  uint64_t *v37;
  __int16 v38;
  unint64_t v39;

  v9 = *((unsigned __int8 *)a5 + 23);
  if ((v9 & 0x80u) != 0)
    v9 = a5[1];
  if (a8 && a7 && a6 && v9)
  {
    v17 = sub_100A8262C();
    v18 = objc_alloc_init((Class)NSMutableDictionary);
    if (*((char *)a5 + 23) >= 0)
      v19 = a5;
    else
      v19 = (uint64_t *)*a5;
    objc_msgSend(v18, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v19), CFSTR("call_ID"));
    objc_msgSend(v18, "setValue:forKey:", +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v17), CFSTR("session_start_time"));
    if (a2 > 0.0)
      objc_msgSend(v18, "setValue:forKey:", +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", sub_100A8262C()), CFSTR("session_end_time"));
    objc_msgSend(v18, "setValue:forKey:", a6, CFSTR("location"));
    if (a4)
      v20 = (__CFString *)objc_msgSend(a4, "__imHexString");
    else
      v20 = &stru_1021D8FB8;
    objc_msgSend(v18, "setValue:forKey:", v20, CFSTR("apns_token"));
    objc_msgSend(v18, "setValue:forKey:", CFSTR("1"), CFSTR("data_version"));
    if (byte_10230BEFF >= 0)
      v22 = &qword_10230BEE8;
    else
      v22 = (uint64_t *)qword_10230BEE8;
    objc_msgSend(v18, "setValue:forKey:", a7, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v22));
    objc_msgSend(v18, "setValue:forKey:", a8, CFSTR("internal"));
    if (a9)
      objc_msgSend(v18, "setValue:forKey:", a9, CFSTR("capabilities"));
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10219C398);
    v23 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v24 = -[__CFString UTF8String](v20, "UTF8String");
      if (*((char *)a5 + 23) >= 0)
        v25 = a5;
      else
        v25 = (uint64_t *)*a5;
      *(_DWORD *)buf = 68289795;
      v31 = 0;
      v32 = 2082;
      v33 = "";
      v34 = 2081;
      v35 = v24;
      v36 = 2081;
      v37 = v25;
      v38 = 2050;
      v39 = v17;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2Control,createControlDataDict\", \"APNS Token\":%{private, location:escape_only}s, \"phone number\":%{private, location:escape_only}s, \"session start time\":%{public}lld}", buf, 0x30u);
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10219C398);
    v21 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#EED2Control,createControlDict,missing required info for forming control data POST dict", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10219C398);
      v29[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Control,createControlDict,missing required info for forming control data POST dict", v29, 2);
      v28 = (uint8_t *)v27;
      sub_100512490("Generic", 1, 0, 0, "NSDictionary *CLEmergencyEED2Control::createControlDict(NSData *, const std::string &, CFAbsoluteTime, CFAbsoluteTime, NSDictionary *, NSArray *, NSDictionary *, NSArray *) const", "%s\n", v27);
      if (v28 != buf)
        free(v28);
    }
    return 0;
  }
  return v18;
}

BOOL sub_10105A374(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  int *v10;
  uint64_t *v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  NSObject *v15;
  _BOOL8 v16;
  void **v17;
  uint64_t v18;
  NSObject *v19;
  int v20;
  void **v21;
  id v22;
  void **v23;
  void *v24;
  NSMutableURLRequest *v25;
  _QWORD *v26;
  uint64_t v27;
  NSObject *v28;
  const char *v29;
  uint8_t *v30;
  const char *v32;
  __int16 v33;
  NSMutableURLRequest *v34;
  void *__p[2];
  uint64_t v36;
  _QWORD v37[5];
  _BYTE v38[24];
  _BYTE *v39;
  int v40;
  uint8_t buf[4];
  int v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  void **v46;
  __int16 v47;
  id v48;

  if (!a3)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10219C398);
    v12 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#EED2Control,postControlData,nil controlDataDict,early return", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10219C398);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Control,postControlData,nil controlDataDict,early return", __p, 2);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyEED2Control::postControlData(NumberType, NSDictionary *, SendControlDataResponse) const", "%s\n", v13);
    goto LABEL_51;
  }
  v7 = sub_100A82980(a3);
  if (!v7)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10219C398);
    v15 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#EED2Control,postControlData,failed to serialize control data dict into JSON", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10219C398);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Control,postControlData,failed to serialize control data dict into JSON", __p, 2);
    v14 = (uint8_t *)v32;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyEED2Control::postControlData(NumberType, NSDictionary *, SendControlDataResponse) const", "%s\n", v32);
LABEL_51:
    if (v14 != buf)
      free(v14);
    return 0;
  }
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 32);
  if (!v9)
    sub_10025FD1C();
  v10 = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
  v11 = sub_100A57ECC(v10);
  if (*((char *)v11 + 135) < 0)
  {
    sub_100115CE4(__p, (void *)v11[14], v11[15]);
  }
  else
  {
    *(_OWORD *)__p = *((_OWORD *)v11 + 7);
    v36 = v11[16];
  }
  if (v36 >= 0)
    v17 = __p;
  else
    v17 = (void **)__p[0];
  v34 = +[NSMutableURLRequest requestWithURL:](NSMutableURLRequest, "requestWithURL:", +[NSURL URLWithString:](NSURL, "URLWithString:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v17)));
  -[NSMutableURLRequest setHTTPMethod:](v34, "setHTTPMethod:", CFSTR("POST"));
  sub_10105C7A4(a1 + 72, (uint64_t)v8, (uint64_t)&v34);
  v18 = *(_QWORD *)(a1 + 104);
  v16 = v18 != 0;
  if (!v18)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10219C398);
    v28 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "#EED2Control,postControlData,missing NSURLSession", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10219C398);
      v33 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 17, "#EED2Control,postControlData,missing NSURLSession", &v33, 2);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyEED2Control::postControlData(NumberType, NSDictionary *, SendControlDataResponse) const", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    goto LABEL_45;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_10219C398);
  v19 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v20 = SHIBYTE(v36);
    v21 = (void **)__p[0];
    v22 = objc_msgSend(v8, "length");
    *(_DWORD *)buf = 68289539;
    v23 = __p;
    if (v20 < 0)
      v23 = v21;
    v42 = 0;
    v43 = 2082;
    v44 = "";
    v45 = 2081;
    v46 = v23;
    v47 = 2049;
    v48 = v22;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2Control,postControlData,sending Control Data POST\", \"URL\":%{private, location:escape_only}s, \"length\":%{private}lld}", buf, 0x26u);
  }
  v24 = *(void **)(a1 + 104);
  v25 = v34;
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3321888768;
  v37[2] = sub_10105C7E0;
  v37[3] = &unk_10219C368;
  v37[4] = a1;
  v40 = a2;
  v26 = v38;
  sub_100270E34((uint64_t)v38, a4);
  objc_msgSend(objc_msgSend(v24, "uploadTaskWithRequest:fromData:completionHandler:", v25, v8, v37), "resume");
  if (v39 == v38)
  {
    v27 = 4;
  }
  else
  {
    if (!v39)
      goto LABEL_45;
    v27 = 5;
    v26 = v39;
  }
  (*(void (**)(_QWORD *))(*v26 + 8 * v27))(v26);
LABEL_45:
  if (SHIBYTE(v36) < 0)
    operator delete(__p[0]);
  return v16;
}

void sub_10105A9A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_10105AA18(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _WORD v19[8];
  uint8_t v20[128];
  uint8_t buf[1640];

  if (objc_msgSend(a2, "count"))
  {
    v5 = objc_alloc_init((Class)NSMutableArray);
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v6 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v16;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(_QWORD *)v16 != v8)
            objc_enumerationMutation(a2);
          v10 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i);
          if (objc_msgSend(a3, "isEqualToString:", objc_msgSend(v10, "partnerID")))
            objc_msgSend(v5, "addObject:", objc_msgSend(v10, "getResponseDataDictionary"));
        }
        v7 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
      }
      while (v7);
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10219C398);
    v11 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#EED2,createResponseData, no EED Requests, nil responseData", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10219C398);
      v19[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2,createResponseData, no EED Requests, nil responseData", v19, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "NSMutableArray *CLEmergencyEED2Control::createResponseData(NSArray<CLEEDRequest *> *, NSString *) const", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    return 0;
  }
  return v5;
}

id sub_10105AC84(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  id v12;
  uint64_t v13;
  NSString *v14;
  id v15;
  uint64_t *v16;
  uint64_t *v17;
  id v18;
  uint64_t *v19;
  uint64_t v20;
  NSString *v21;
  id v22;
  id v23;
  uint64_t *v24;
  _QWORD *v25;
  NSObject *v26;
  const char *v27;
  NSObject *v28;
  NSString *v29;
  uint64_t *v30;
  NSObject *v31;
  id v32;
  id v33;
  uint64_t *v34;
  NSObject *v35;
  const char *v37;
  uint8_t *v38;
  uint8_t *v39;
  uint64_t v40;
  _BYTE v41[12];
  uint8_t buf[4];
  id v43;

  if (!a3 || !a6)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10219C398);
    v26 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "#EED2Control,getPerPartnerControlDataDict,one more more input parameters is nil,early return", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10219C398);
    *(_WORD *)v41 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Control,getPerPartnerControlDataDict,one more more input parameters is nil,early return", v41, 2, *(_QWORD *)v41);
    goto LABEL_70;
  }
  v12 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  if (*(char *)(a2 + 23) >= 0)
    v13 = a2;
  else
    v13 = *(_QWORD *)a2;
  v14 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13);
  objc_msgSend(v12, "setValue:forKey:", v14, kEEDPartnerIDKey);
  v15 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  if (byte_10230BECF >= 0)
    v16 = &qword_10230BEB8;
  else
    v16 = (uint64_t *)qword_10230BEB8;
  v17 = sub_10105B330((uint64_t)objc_msgSend(v15, "setValue:forKey:", a3, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16)), (uint64_t *)a2, a5, a6);
  if (!v17)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10219C398);
    v28 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "#EED2Control,getPerPartnerControlDataDict,nil deviceSessionSecretForPartner,early return", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10219C398);
    *(_WORD *)v41 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Control,getPerPartnerControlDataDict,nil deviceSessionSecretForPartner,early return", v41, 2, *(_QWORD *)v41);
    goto LABEL_70;
  }
  v18 = objc_msgSend(v17, "base64EncodedStringWithOptions:", 0);
  if (byte_10230BEE7 >= 0)
    v19 = &qword_10230BED0;
  else
    v19 = (uint64_t *)qword_10230BED0;
  objc_msgSend(v15, "setValue:forKey:", v18, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v19));
  if (*(char *)(a2 + 23) >= 0)
    v20 = a2;
  else
    v20 = *(_QWORD *)a2;
  v21 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v20);
  v22 = sub_10105AA18((uint64_t)v21, a4, v21);
  v23 = v22;
  if (objc_msgSend(v22, "count"))
  {
    if (byte_10230BF17 >= 0)
      v24 = &qword_10230BF00;
    else
      v24 = (uint64_t *)qword_10230BF00;
    objc_msgSend(v15, "setValue:forKey:", v22, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v24));
  }
  v25 = (_QWORD *)(a2 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    if (!*(_QWORD *)(a2 + 64))
      goto LABEL_46;
    v25 = (_QWORD *)*v25;
  }
  else if (!*(_BYTE *)(a2 + 79))
  {
    goto LABEL_46;
  }
  v29 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v25);
  if (byte_10230BF2F >= 0)
    v30 = &qword_10230BF18;
  else
    v30 = (uint64_t *)qword_10230BF18;
  objc_msgSend(v15, "setValue:forKey:", v29, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v30));
LABEL_46:
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_10219C398);
  v31 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v43 = v15;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#EED2Control,getPerPartnerControlDataDict,partner control data (pre-encryption),%@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10219C398);
    *(_DWORD *)v41 = 138412290;
    *(_QWORD *)&v41[4] = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2Control,getPerPartnerControlDataDict,partner control data (pre-encryption),%@", v41, 12);
    v38 = (uint8_t *)v37;
    sub_100512490("Generic", 1, 0, 2, "NSDictionary *CLEmergencyEED2Control::getPerPartnerControlDataDict(const CLEEDPartnerInfo &, NSString *, NSArray<CLEEDRequest *> *, const std::string &, CFAbsoluteTime, NSData *) const", "%s\n", v37);
    if (v38 != buf)
      free(v38);
  }
  v32 = sub_10105BD58(a1, a2, (uint64_t)v15, a5);
  if (!v32)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10219C398);
    v35 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "#EED2Control,getPerPartnerControlDataDict,nil encryptedPartnerControlData,early return", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10219C398);
    *(_WORD *)v41 = 0;
    LODWORD(v40) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Control,getPerPartnerControlDataDict,nil encryptedPartnerControlData,early return", v41, v40, *(_QWORD *)v41);
LABEL_70:
    v39 = (uint8_t *)v27;
    sub_100512490("Generic", 1, 0, 0, "NSDictionary *CLEmergencyEED2Control::getPerPartnerControlDataDict(const CLEEDPartnerInfo &, NSString *, NSArray<CLEEDRequest *> *, const std::string &, CFAbsoluteTime, NSData *) const", "%s\n", v27);
    if (v39 != buf)
      free(v39);
    return 0;
  }
  v33 = objc_msgSend(v32, "base64EncodedStringWithOptions:", 0);
  if (byte_10230BF47 >= 0)
    v34 = &qword_10230BF30;
  else
    v34 = (uint64_t *)qword_10230BF30;
  objc_msgSend(v12, "setValue:forKey:", v33, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v34));
  return v12;
}

uint64_t *sub_10105B330(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  NSMutableData *v6;
  __SecCertificate *v7;
  __SecCertificate *v8;
  __SecKey *v9;
  __SecKey *v10;
  CFDataRef v11;
  NSObject *v12;
  uint64_t *v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSMutableData *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  NSObject *v26;
  NSObject *v27;
  const char *v28;
  NSObject *v29;
  NSObject *v30;
  NSMutableData *v31;
  NSMutableData *v32;
  NSObject *v33;
  uint64_t *v34;
  uint64_t *v35;
  const char *v36;
  uint8_t *v37;
  NSObject *v38;
  const char *v40;
  uint8_t *v41;
  const char *v42;
  uint8_t *v43;
  uint8_t *v44;
  uint64_t v45;
  CFErrorRef error;
  int v47;
  NSMutableData *v48;
  __int16 v49;
  uint64_t *v50;
  __int16 v51;
  uint64_t *v52;
  uint8_t buf[4];
  NSMutableData *v54;
  __int16 v55;
  uint64_t *v56;
  __int16 v57;
  uint64_t *v58;

  if (!a4)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10219C398);
    v29 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "#EED2Control,getDeviceSessionSecretForPartner,nil rootSecret,early return", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10219C398);
    LOWORD(v47) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Control,getDeviceSessionSecretForPartner,nil rootSecret,early return", &v47, 2);
    goto LABEL_104;
  }
  if (*((char *)a3 + 23) < 0)
    a3 = (uint64_t *)*a3;
  v6 = (NSMutableData *)+[CLEEDCryptoUtilities getSessionIDWithPhoneNumber:sessionStartTime:](CLEEDCryptoUtilities, "getSessionIDWithPhoneNumber:sessionStartTime:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a3), sub_100A8262C());
  v7 = sub_100A54ACC(a2 + 3);
  if (!v7)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10219C398);
    v30 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a2 + 23) >= 0)
        v31 = (NSMutableData *)a2;
      else
        v31 = (NSMutableData *)*a2;
      *(_DWORD *)buf = 136446210;
      v54 = v31;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#EED2Control,getDeviceSessionSecretForPartner unable to convert partner cert data to SecCertificateRef,partner ID,%{public}s", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10219C398);
    if (*((char *)a2 + 23) >= 0)
      v32 = (NSMutableData *)a2;
    else
      v32 = (NSMutableData *)*a2;
    v47 = 136446210;
    v48 = v32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Control,getDeviceSessionSecretForPartner unable to convert partner cert data to SecCertificateRef,partner ID,%{public}s", &v47, 12);
    goto LABEL_104;
  }
  v8 = v7;
  v9 = SecCertificateCopyKey(v7);
  if (!v9)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10219C398);
    v33 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "#EED2Control,getDeviceSessionSecretForPartner,nil publicKey obtained from SecCertificateCopyKey,early return", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10219C398);
      LOWORD(v47) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Control,getDeviceSessionSecretForPartner,nil publicKey obtained from SecCertificateCopyKey,early return", &v47, 2);
      v43 = (uint8_t *)v42;
      sub_100512490("Generic", 1, 0, 0, "NSData *CLEmergencyEED2Control::getDeviceSessionSecretForPartner(const CLEEDPartnerInfo &, const std::string &, CFAbsoluteTime, NSData *) const", "%s\n", v42);
      if (v43 != buf)
        free(v43);
    }
    CFRelease(v8);
    return 0;
  }
  v10 = v9;
  error = 0;
  v11 = SecKeyCopyExternalRepresentation(v9, &error);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_10219C398);
  v12 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0)
      v13 = a2;
    else
      v13 = (uint64_t *)*a2;
    v14 = &qword_10230BF48;
    if (byte_10230BF5F < 0)
      v14 = (uint64_t *)qword_10230BF48;
    *(_DWORD *)buf = 138412802;
    v54 = v6;
    v55 = 2080;
    v56 = v13;
    v57 = 2080;
    v58 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#EED2Control,getDeviceSessionSecretForPartner,session ID = %@, partner ID = %s, device session secret const string = %s", buf, 0x20u);
  }
  if (!sub_1001BFF7C(115, 2))
  {
    if (v11)
      goto LABEL_17;
LABEL_86:
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10219C398);
    v38 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "#EED2Control,getDeviceSessionSecretForPartner,nil adrPublicKeyRep,early return", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10219C398);
    LOWORD(v47) = 0;
    LODWORD(v45) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Control,getDeviceSessionSecretForPartner,nil adrPublicKeyRep,early return", &v47, v45);
    goto LABEL_104;
  }
  bzero(buf, 0x65CuLL);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_10219C398);
  if (*((char *)a2 + 23) >= 0)
    v34 = a2;
  else
    v34 = (uint64_t *)*a2;
  v35 = &qword_10230BF48;
  if (byte_10230BF5F < 0)
    v35 = (uint64_t *)qword_10230BF48;
  v47 = 138412802;
  v48 = v6;
  v49 = 2080;
  v50 = v34;
  v51 = 2080;
  v52 = v35;
  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2Control,getDeviceSessionSecretForPartner,session ID = %@, partner ID = %s, device session secret const string = %s", &v47, 32);
  v37 = (uint8_t *)v36;
  sub_100512490("Generic", 1, 0, 2, "NSData *CLEmergencyEED2Control::getDeviceSessionSecretForPartner(const CLEEDPartnerInfo &, const std::string &, CFAbsoluteTime, NSData *) const", "%s\n", v36);
  if (v37 != buf)
    free(v37);
  if (!v11)
    goto LABEL_86;
LABEL_17:
  v15 = -[NSMutableData length](v6, "length");
  if (*((char *)a2 + 23) >= 0)
    v16 = *((unsigned __int8 *)a2 + 23);
  else
    v16 = a2[1];
  v17 = &v15[(_QWORD)-[__CFData length](v11, "length") + v16];
  v18 = byte_10230BF5F;
  if (byte_10230BF5F < 0)
    v18 = qword_10230BF50;
  v19 = +[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", &v17[v18]);
  -[NSMutableData appendData:](v19, "appendData:", v6);
  v20 = *((char *)a2 + 23);
  if (v20 >= 0)
    v21 = a2;
  else
    v21 = (uint64_t *)*a2;
  if (v20 >= 0)
    v22 = *((unsigned __int8 *)a2 + 23);
  else
    v22 = a2[1];
  -[NSMutableData appendBytes:length:](v19, "appendBytes:length:", v21, v22);
  -[NSMutableData appendData:](v19, "appendData:", v11);
  if (byte_10230BF5F >= 0)
    v23 = &qword_10230BF48;
  else
    v23 = (uint64_t *)qword_10230BF48;
  if (byte_10230BF5F >= 0)
    v24 = byte_10230BF5F;
  else
    v24 = qword_10230BF50;
  -[NSMutableData appendBytes:length:](v19, "appendBytes:length:", v23, v24);

  v25 = (uint64_t *)+[CLEEDCryptoUtilities getDerivedKeyWithLength:secretData:additionalInfo:](CLEEDCryptoUtilities, "getDerivedKeyWithLength:secretData:additionalInfo:", 32, a4, v19);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_10219C398);
  v26 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412802;
    v54 = v19;
    v55 = 2112;
    v56 = a4;
    v57 = 2112;
    v58 = v25;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#EED2Control,getDeviceSessionSecretForPartner,additional info = %@, root secret = %@, device device session secret for partner = %@", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10219C398);
    v47 = 138412802;
    v48 = v19;
    v49 = 2112;
    v50 = a4;
    v51 = 2112;
    v52 = v25;
    LODWORD(v45) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2Control,getDeviceSessionSecretForPartner,additional info = %@, root secret = %@, device device session secret for partner = %@", &v47, v45);
    v41 = (uint8_t *)v40;
    sub_100512490("Generic", 1, 0, 2, "NSData *CLEmergencyEED2Control::getDeviceSessionSecretForPartner(const CLEEDPartnerInfo &, const std::string &, CFAbsoluteTime, NSData *) const", "%s\n", v40);
    if (v41 != buf)
      free(v41);
  }
  CFRelease(v8);
  CFRelease(v10);
  if (!v25)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10219C398);
    v27 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "#EED2Control,getDeviceSessionSecretForPartner,nil deviceSessionSecret", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10219C398);
    LOWORD(v47) = 0;
    LODWORD(v45) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Control,getDeviceSessionSecretForPartner,nil deviceSessionSecret", &v47, v45);
LABEL_104:
    v44 = (uint8_t *)v28;
    sub_100512490("Generic", 1, 0, 0, "NSData *CLEmergencyEED2Control::getDeviceSessionSecretForPartner(const CLEEDPartnerInfo &, const std::string &, CFAbsoluteTime, NSData *) const", "%s\n", v28);
    if (v44 != buf)
      free(v44);
    return 0;
  }
  return v25;
}

id sub_10105BD58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  int *v8;
  uint64_t *v9;
  NSObject *v10;
  id v11;
  unint64_t v12;
  __SecCertificate *v13;
  __SecCertificate *v14;
  SecKeyRef v15;
  id v16;
  id v17;
  uint64_t *v18;
  id v19;
  char *v20;
  char *v21;
  uint64_t v22;
  NSMutableData *v23;
  int v24;
  void *v25;
  uint64_t v26;
  NSObject *v27;
  const char *v28;
  uint8_t *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  const char *v33;
  NSObject *v34;
  void *v35;
  void *v36;
  const char *v37;
  NSObject *v38;
  NSObject *v39;
  const char *v41;
  uint8_t *v42;
  const char *v43;
  uint8_t *v44;
  const char *v45;
  uint8_t *v46;
  void *__p[2];
  uint64_t v48;
  void *v49[2];
  unsigned __int8 v50;
  int v51;
  void *v52;
  uint8_t buf[4];
  void *v54;

  if (a3)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      sub_10025FD1C();
    v8 = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
    v9 = sub_100A57ECC(v8);
    if (*(char *)(a2 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a2;
      v48 = *(_QWORD *)(a2 + 16);
    }
    sub_100A545DC((int *)v9, (unsigned __int8 *)__p, (uint64_t)v49);
    if (SHIBYTE(v48) < 0)
      operator delete(__p[0]);
    v12 = v50;
    if ((v50 & 0x80u) != 0)
      v12 = (unint64_t)v49[1];
    if (v12)
    {
      v13 = sub_100A54ACC((uint64_t *)(a2 + 24));
      v14 = v13;
      if (v13)
      {
        v15 = SecCertificateCopyKey(v13);
        if (!v15)
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_10219C398);
          v38 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "#EED2Control,getEncryptedPartnerControlData,nil partnerKey obtained from SecCertificateCopyKey,early return", buf, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_10219C398);
            LOWORD(v51) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Control,getEncryptedPartnerControlData,nil partnerKey obtained from SecCertificateCopyKey,early return", &v51, 2);
            v44 = (uint8_t *)v43;
            sub_100512490("Generic", 1, 0, 0, "NSData *CLEmergencyEED2Control::getEncryptedPartnerControlData(const CLEEDPartnerInfo &, NSDictionary *, const std::string &, CFAbsoluteTime) const", "%s\n", v43);
            if (v44 != buf)
              free(v44);
          }
          CFRelease(v14);
          goto LABEL_82;
        }
        v16 = +[CLEEDCryptoUtilities getKeyFingerprint:](CLEEDCryptoUtilities, "getKeyFingerprint:", v15);
        if (!v16)
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_10219C398);
          v39 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "#EED2Control,getEncryptedPartnerControlData,nil keyFingerprint obtained from getKeyFingerprint,early return", buf, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_10219C398);
            LOWORD(v51) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Control,getEncryptedPartnerControlData,nil keyFingerprint obtained from getKeyFingerprint,early return", &v51, 2);
            v46 = (uint8_t *)v45;
            sub_100512490("Generic", 1, 0, 0, "NSData *CLEmergencyEED2Control::getEncryptedPartnerControlData(const CLEEDPartnerInfo &, NSDictionary *, const std::string &, CFAbsoluteTime) const", "%s\n", v45);
            if (v46 != buf)
              free(v46);
          }
          CFRelease(v14);
          CFRelease(v15);
          goto LABEL_82;
        }
        v17 = sub_100A82980(a3);
        if (*((char *)a4 + 23) >= 0)
          v18 = a4;
        else
          v18 = (uint64_t *)*a4;
        v19 = +[CLEEDCryptoUtilities getSessionIDWithPhoneNumber:sessionStartTime:](CLEEDCryptoUtilities, "getSessionIDWithPhoneNumber:sessionStartTime:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v18), sub_100A8262C());
        v20 = (char *)objc_msgSend(v19, "length");
        v21 = &v20[(_QWORD)objc_msgSend(v16, "length")];
        v22 = *(unsigned __int8 *)(a2 + 23);
        if ((v22 & 0x80u) != 0)
          v22 = *(_QWORD *)(a2 + 8);
        v23 = +[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", &v21[v22]);
        -[NSMutableData appendData:](v23, "appendData:", v19);
        -[NSMutableData appendData:](v23, "appendData:", v16);
        v24 = *(char *)(a2 + 23);
        if (v24 >= 0)
          v25 = (void *)a2;
        else
          v25 = *(void **)a2;
        if (v24 >= 0)
          v26 = *(unsigned __int8 *)(a2 + 23);
        else
          v26 = *(_QWORD *)(a2 + 8);
        -[NSMutableData appendBytes:length:](v23, "appendBytes:length:", v25, v26);
        v11 = +[CLEEDCryptoUtilities getECIESEncryptedData:key:sharedInfo:prependKeyFingerprint:](CLEEDCryptoUtilities, "getECIESEncryptedData:key:sharedInfo:prependKeyFingerprint:", v17, v15, v23, 1);
        CFRelease(v14);
        CFRelease(v15);
        if (v11)
          goto LABEL_83;
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_10219C398);
        v27 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "#EED2Control,getEncryptedPartnerControlData,nil encryptedPartnerControlData obtained from getECIESEncryptedData", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 0))
        {
LABEL_82:
          v11 = 0;
LABEL_83:
          if ((char)v50 < 0)
            operator delete(v49[0]);
          return v11;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_10219C398);
        LOWORD(v51) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Control,getEncryptedPartnerControlData,nil encryptedPartnerControlData obtained from getECIESEncryptedData", &v51, 2);
        v29 = (uint8_t *)v28;
        sub_100512490("Generic", 1, 0, 0, "NSData *CLEmergencyEED2Control::getEncryptedPartnerControlData(const CLEEDPartnerInfo &, NSDictionary *, const std::string &, CFAbsoluteTime) const", "%s\n", v28);
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_10219C398);
        v34 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          if (*(char *)(a2 + 23) >= 0)
            v35 = (void *)a2;
          else
            v35 = *(void **)a2;
          *(_DWORD *)buf = 136446210;
          v54 = v35;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "#EED2Control,getEncryptedPartnerControlData unable to convert partner cert data to SecCertificateRef,partner ID,%{public}s", buf, 0xCu);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_82;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_10219C398);
        if (*(char *)(a2 + 23) >= 0)
          v36 = (void *)a2;
        else
          v36 = *(void **)a2;
        v51 = 136446210;
        v52 = v36;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Control,getEncryptedPartnerControlData unable to convert partner cert data to SecCertificateRef,partner ID,%{public}s", &v51, 12);
        v29 = (uint8_t *)v37;
        sub_100512490("Generic", 1, 0, 0, "NSData *CLEmergencyEED2Control::getEncryptedPartnerControlData(const CLEEDPartnerInfo &, NSDictionary *, const std::string &, CFAbsoluteTime) const", "%s\n", v37);
      }
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10219C398);
      v30 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a2 + 23) >= 0)
          v31 = (void *)a2;
        else
          v31 = *(void **)a2;
        *(_DWORD *)buf = 136315138;
        v54 = v31;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#EED2Control,getEncryptedPartnerControlData,valid cert not found for partner: %s", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_82;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10219C398);
      if (*(char *)(a2 + 23) >= 0)
        v32 = (void *)a2;
      else
        v32 = *(void **)a2;
      v51 = 136315138;
      v52 = v32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Control,getEncryptedPartnerControlData,valid cert not found for partner: %s", (const char *)&v51);
      v29 = (uint8_t *)v33;
      sub_100512490("Generic", 1, 0, 0, "NSData *CLEmergencyEED2Control::getEncryptedPartnerControlData(const CLEEDPartnerInfo &, NSDictionary *, const std::string &, CFAbsoluteTime) const", "%s\n", v33);
    }
    if (v29 != buf)
      free(v29);
    goto LABEL_82;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_10219C398);
  v10 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#EED2Control,getEncryptedPartnerControlData,nil partnerControlData,early return", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10219C398);
    LOWORD(v49[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EED2Control,getEncryptedPartnerControlData,nil partnerControlData,early return", v49, 2);
    v42 = (uint8_t *)v41;
    sub_100512490("Generic", 1, 0, 0, "NSData *CLEmergencyEED2Control::getEncryptedPartnerControlData(const CLEEDPartnerInfo &, NSDictionary *, const std::string &, CFAbsoluteTime) const", "%s\n", v41);
    if (v42 != buf)
      free(v42);
  }
  return 0;
}

void sub_10105C734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10105C7A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = a3;
  v6 = a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

_QWORD *sub_10105C7E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD v13[6];
  _BYTE v14[24];
  _BYTE *v15;
  int v16;

  v7 = objc_msgSend(objc_msgSend(**(id **)(a1 + 32), "silo"), "queue");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3321888768;
  v13[2] = sub_10105C8E0;
  v13[3] = &unk_10219C338;
  v16 = *(_DWORD *)(a1 + 72);
  sub_100270E34((uint64_t)v14, a1 + 40);
  v13[4] = a3;
  v13[5] = a4;
  dispatch_async(v7, v13);
  result = v15;
  if (v15 == v14)
  {
    v12 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*result + 8 * v12))(result, v8, v9, v10);
}

uint64_t sub_10105C8E0(uint64_t a1)
{
  NSObject *v2;
  void **v3;
  uint64_t v5;
  _BYTE *v6;
  char *v7;
  char *v8;
  _BYTE buf[12];
  char v10;
  int v11;
  _BYTE *v12;
  void *__p[2];
  char v14;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_10219C398);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    sub_100A6C7E8(*(_DWORD *)(a1 + 80), __p);
    v3 = v14 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2Control,postControlData,received response for %{public}s number", buf, 0xCu);
    if (v14 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10219C398);
    v5 = qword_1022A0088;
    sub_100A6C7E8(*(_DWORD *)(a1 + 80), buf);
    if (v10 >= 0)
      v6 = buf;
    else
      v6 = *(_BYTE **)buf;
    v11 = 136446210;
    v12 = v6;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v5, 0, "#EED2Control,postControlData,received response for %{public}s number", &v11, 12);
    v8 = v7;
    if (v10 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyEED2Control::postControlData(NumberType, NSDictionary *, SendControlDataResponse) const_block_invoke", "%s\n", v8);
    if (v8 != (char *)__p)
      free(v8);
  }
  return sub_10105CB00(a1 + 48, *(_DWORD *)(a1 + 80), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t sub_10105CB00(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v8 = a2;
  v6 = a4;
  v7 = a3;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, int *, uint64_t *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v8, &v7, &v6);
}

uint64_t sub_10105CB44(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 48, a2 + 48);
}

_QWORD *sub_10105CB50(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 48);
  result = *(_QWORD **)(a1 + 72);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_10105CB84(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_10105CB90(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10105CBC4(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

uint64_t sub_10105CBF0()
{
  sub_1015A2E04(&qword_10230BEB8, "device_session_key");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230BEB8, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230BED0, "device_session_secret");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230BED0, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230BEE8, "per_partner_data");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230BEE8, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230BF00, "responses");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230BF00, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230BF18, "domain");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230BF18, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230BF30, "data");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230BF30, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230BF48, "device session secret");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230BF48, (void *)&_mh_execute_header);
}

uint64_t sub_10105CD34(uint64_t a1)
{
  float *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  *(_QWORD *)a1 = off_10219C3C8;
  *(_QWORD *)(a1 + 8) = off_102168E98;
  *(_DWORD *)(a1 + 16) = 1099956224;
  v2 = (float *)(a1 + 16);
  v3 = sub_100127B9C();
  sub_100081C10(v3, &v8);
  sub_100526804(v8, "SemiStatVMThreshold", v2);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_10105CDDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10105CDF4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float v6;
  int v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  float v15;
  uint8_t *v16;
  float v17;
  BOOL v18;
  float v19;
  int v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint8_t *v25;
  double v26;
  double v27;
  _BYTE v28[32];
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;
  uint8_t buf[4];
  _BYTE v36[14];
  __int16 v37;
  uint64_t v38;
  _BYTE v39[10];
  __int16 v40;
  double v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 3;
  *(_QWORD *)(a3 + 32) = 3;
  v6 = *(float *)(a2 + 296);
  if (*(_BYTE *)(a2 + 352) || v6 > 1.0)
  {
    v7 = *(unsigned __int8 *)(a2 + 324);
    sub_100AD5268(a2, (uint64_t)buf);
    v8 = *(float *)&v38;
    v9 = *(float *)v39;
    *(_DWORD *)(a3 + 32) = *(_DWORD *)&v39[4];
    v10 = 0.0;
    if (v6 > *(float *)(a1 + 16))
    {
      sub_1006B2E70();
      v10 = v11;
    }
    if (*(_BYTE *)(a2 + 352))
    {
      v12 = 4.5;
      if (v8 >= 4.5)
        v12 = v8;
      if (v12 >= v10)
        v13 = v12;
      else
        v13 = v10;
      *(float *)(a3 + 20) = v13;
      *(float *)buf = v9;
      *(_QWORD *)v36 = 0x3F95C28F3FA66666;
      *(float *)&v36[8] = v10;
      v14 = 4;
      v15 = v9;
      v16 = buf;
      do
      {
        if (v15 < *(float *)&buf[v14])
        {
          v15 = *(float *)&buf[v14];
          v16 = &buf[v14];
        }
        v14 += 4;
      }
      while (v14 != 16);
      v17 = *(float *)v16;
    }
    else
    {
      v18 = v6 < 33.0;
      v19 = fmaxf(v10, 1.17);
      if (v8 != 0.0 && v6 < 33.0)
        v13 = v8;
      else
        v13 = v19;
      *(float *)(a3 + 20) = v13;
      if (v9 != 0.0 && v18)
        v17 = v9;
      else
        v17 = v19;
    }
    *(float *)(a3 + 28) = v17;
    *(float *)(a3 + 12) = v17;
    if (v17 == v9)
      v20 = 17;
    else
      v20 = 1;
    *(_DWORD *)(a3 + 36) = v20;
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10219C408);
    v21 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      v22 = *(_QWORD *)(a2 + 112);
      *(_DWORD *)buf = 67110912;
      *(_DWORD *)v36 = v7;
      *(_WORD *)&v36[4] = 2048;
      *(double *)&v36[6] = v10;
      v37 = 2048;
      v38 = 0x3FF2B851E0000000;
      *(_WORD *)v39 = 2048;
      *(double *)&v39[2] = v13;
      v40 = 2048;
      v41 = v8;
      v42 = 2048;
      v43 = v22;
      v44 = 2048;
      v45 = v17;
      v46 = 2048;
      v47 = v9;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Semistationary, Wheelchair, %d, metsFromIntensity, %.1f, metsFromPosture, %.1f, userMetsFinal, %.1f, userMetsFromPushes, %.1f, computeTime, %.1f, truthMetsFinal, %.1f, truthMetsFromPushes, %.1f", buf, 0x4Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_10219C408);
      v23 = *(_QWORD *)(a2 + 112);
      LODWORD(v27) = 67110912;
      HIDWORD(v27) = v7;
      *(_WORD *)v28 = 2048;
      *(double *)&v28[2] = v10;
      *(_WORD *)&v28[10] = 2048;
      *(_QWORD *)&v28[12] = 0x3FF2B851E0000000;
      *(_WORD *)&v28[20] = 2048;
      *(double *)&v28[22] = v13;
      *(_WORD *)&v28[30] = 2048;
      v29 = 2048;
      v30 = v23;
      v31 = 2048;
      v32 = v17;
      v33 = 2048;
      v34 = v9;
      LODWORD(v26) = 78;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Semistationary, Wheelchair, %d, metsFromIntensity, %.1f, metsFromPosture, %.1f, userMetsFinal, %.1f, userMetsFromPushes, %.1f, computeTime, %.1f, truthMetsFinal, %.1f, truthMetsFromPushes, %.1f", &v27, v26, v27, *(double *)v28, *(double *)&v28[8], *(double *)&v28[16], *(double *)&v28[24], v8);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLCalorieSemiStatWheelchairModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
  }
}

uint64_t sub_10105D1B4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 40) + 48))(*(_QWORD *)(a2 + 40));
}

void sub_10105D1C4()
{
  operator delete();
}

void sub_10105D1D8(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_10105D204()
{
  return 1;
}

void sub_10105D20C(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10105D554(id a1, BOOL a2, NSError *a3)
{
  NSObject *v3;
  double v4;
  uint8_t *v5;
  uint8_t *v6;
  NSObject *v8;
  double v9;
  uint8_t *v10;
  int v11;
  NSError *v12;
  uint8_t buf[4];
  NSError *v14;

  if (a2)
  {
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_10219C488);
    v3 = qword_10229FF98;
    if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "HKHealthStore, ftp event successfully inserted", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF90 != -1)
        dispatch_once(&qword_10229FF90, &stru_10219C488);
      LOWORD(v11) = 0;
      v4 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "HKHealthStore, ftp event successfully inserted", &v11, 2);
      v6 = v5;
      sub_100512490("Generic", 1, 0, 2, "-[CLCyclingPowerHKWriter writeFTPToHK:]_block_invoke", "%s\n", v4);
LABEL_19:
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_10219C488);
    v8 = qword_10229FF98;
    if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v14 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "HKHealthStore, saveObjects failed on, %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF90 != -1)
        dispatch_once(&qword_10229FF90, &stru_10219C488);
      v11 = 138412290;
      v12 = a3;
      v9 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 16, "HKHealthStore, saveObjects failed on, %@", &v11, 12);
      v6 = v10;
      sub_100512490("Generic", 1, 0, 0, "-[CLCyclingPowerHKWriter writeFTPToHK:]_block_invoke", "%s\n", v9);
      goto LABEL_19;
    }
  }
}

void sub_10105D860(id a1)
{
  qword_10229FF98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CyclingPower");
}

void sub_10105D88C(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_10105D8B8()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_10105D954(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_10105D96C()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_10105D9F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

_QWORD *sub_10105DA10(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  int v3;

  v3 = 1;
  result = (_QWORD *)sub_10080E4E4(a1, &v3, qword_10230BF60, a2);
  *result = off_10219C4D8;
  return result;
}

void sub_10105DA54(uint64_t a1)
{
  sub_100FA05F0(a1);
  operator delete();
}

uint64_t sub_10105DA78(uint64_t a1)
{
  NSObject *v2;
  void **v3;
  uint64_t v5;
  _BYTE *v6;
  char *v7;
  char *v8;
  _BYTE buf[12];
  char v10;
  int v11;
  _BYTE *v12;
  void *__p[2];
  char v14;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10219C5A0);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
    v3 = v14 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TILE: clear, tile, %sd", buf, 0xCu);
    if (v14 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219C5A0);
    v5 = qword_1022A02D8;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(buf, a1);
    if (v10 >= 0)
      v6 = buf;
    else
      v6 = *(_BYTE **)buf;
    v11 = 136315138;
    v12 = v6;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v5, 2, "TILE: clear, tile, %sd", (const char *)&v11);
    v8 = v7;
    if (v10 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLDEMTile::clear()", "%s\n", v8);
    if (v8 != (char *)__p)
      free(v8);
  }
  return sub_100FA0654(a1);
}

void sub_10105DCA0(uint64_t a1, uint64_t a2)
{
  sub_100811580(a1, a2);
  *(_BYTE *)(a1 + 296) = 0;
}

void sub_10105DCC4(uint64_t a1, uint64_t a2)
{
  sub_100810CB0(a1, a2);
  *(_BYTE *)(a1 + 296) = 0;
}

double sub_10105DCE8()
{
  return 0.1;
}

void sub_10105DCF4(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10105DD20()
{
  operator new();
}

void sub_10105DD70()
{
  operator delete();
}

uint64_t sub_10105DD94(uint64_t a1)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  sub_10055D44C(a1 + 48, "CLBundleKeyValueCache", 1, 1);
  *(_QWORD *)a1 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(_QWORD *)(a1 + 8) = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(_QWORD *)(a1 + 16) = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(_QWORD *)(a1 + 24) = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(_QWORD *)(a1 + 32) = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(_QWORD *)(a1 + 40) = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  return a1;
}

void sub_10105DE9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055D4D0(v1);
  _Unwind_Resume(a1);
}

void sub_10105DEB4()
{
  operator new();
}

void sub_10105DEF4()
{
  operator delete();
}

uint64_t sub_10105DF18(uint64_t a1)
{
  uint64_t v2;
  CFPropertyListRef DeepCopy;
  CFPropertyListRef v4;
  CFPropertyListRef v5;
  CFPropertyListRef v6;
  CFPropertyListRef v7;
  CFPropertyListRef v8;

  v2 = a1 + 48;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 48) + 16))(a1 + 48);
  DeepCopy = CFPropertyListCreateDeepCopy(kCFAllocatorDefault, *(CFPropertyListRef *)a1, 2uLL);
  CFRelease(*(CFTypeRef *)a1);
  *(_QWORD *)a1 = DeepCopy;
  v4 = CFPropertyListCreateDeepCopy(kCFAllocatorDefault, *(CFPropertyListRef *)(a1 + 8), 2uLL);
  CFRelease(*(CFTypeRef *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = v4;
  v5 = CFPropertyListCreateDeepCopy(kCFAllocatorDefault, *(CFPropertyListRef *)(a1 + 16), 2uLL);
  CFRelease(*(CFTypeRef *)(a1 + 16));
  *(_QWORD *)(a1 + 16) = v5;
  v6 = CFPropertyListCreateDeepCopy(kCFAllocatorDefault, *(CFPropertyListRef *)(a1 + 24), 2uLL);
  CFRelease(*(CFTypeRef *)(a1 + 24));
  *(_QWORD *)(a1 + 24) = v6;
  v7 = CFPropertyListCreateDeepCopy(kCFAllocatorDefault, *(CFPropertyListRef *)(a1 + 32), 2uLL);
  CFRelease(*(CFTypeRef *)(a1 + 32));
  *(_QWORD *)(a1 + 32) = v7;
  v8 = CFPropertyListCreateDeepCopy(kCFAllocatorDefault, *(CFPropertyListRef *)(a1 + 40), 2uLL);
  CFRelease(*(CFTypeRef *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = v8;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 48) + 24))(v2);
}

void sub_10105E044(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10105F384(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_101060DB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_101062248(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_101062350(id a1)
{
  qword_10229FCD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_10106237C(id a1)
{
  qword_1022A02F8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Location_deprecated");
}

uint64_t sub_1010623A8(uint64_t a1, double a2)
{
  uint64_t *v2;
  double v3;
  double v4;
  uint64_t v5;
  int v6;

  v2 = &qword_101C3BE60;
  while (1)
  {
    v3 = *(double *)v2;
    if (*(double *)v2 <= a2)
    {
      v4 = *((double *)v2 + 1);
      if (v4 > a2)
      {
        v6 = *((_DWORD *)v2 + 6);
        goto LABEL_10;
      }
    }
    if (*((_DWORD *)v2 + 6) == 1)
    {
      v4 = *((double *)v2 + 1);
      if (vabdd_f64(a2, v4) <= 1.0e-12)
        break;
    }
    v2 += 4;
    if (v2 == (uint64_t *)&jpt_1010624C0)
      return 0;
  }
  v6 = 1;
LABEL_10:
  *(_DWORD *)(a1 + 24) = v6;
  v5 = 1;
  *(double *)a1 = v3;
  *(double *)(a1 + 8) = v4;
  return v5;
}

uint64_t sub_101063454(uint64_t a1, uint64_t a2)
{
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  int *v10;
  int *v11;
  int *v12;
  int *v13;
  int *v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  BOOL v21;
  int v22;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  int *v30;
  int *v31;
  int *v32;
  int *v33;
  int *v34;
  uint64_t v35;
  uint64_t result;
  char v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    v4 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v5 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v6 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v7 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v8 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v9 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v10 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v11 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v12 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v13 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v14 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    do
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        break;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        v19 = v18 + 1;
        if (v18 == -1 || v19 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v20 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19;
        v17 |= (unint64_t)(v20 & 0x7F) << v15;
        if ((v20 & 0x80) == 0)
          goto LABEL_12;
        v15 += 7;
        v21 = v16++ >= 9;
        if (v21)
        {
          v17 = 0;
          v22 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
      v22 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v17 = 0;
LABEL_14:
      if (v22 || (v17 & 7) == 4)
        break;
      switch((v17 >> 3))
      {
        case 1u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + v4[947]) |= 0x20u;
          while (1)
          {
            v27 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v28 = v27 + 1;
            if (v27 == -1 || v28 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              break;
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28;
            v26 |= (unint64_t)(v29 & 0x7F) << v24;
            if ((v29 & 0x80) == 0)
              goto LABEL_76;
            v24 += 7;
            v21 = v25++ >= 9;
            if (v21)
            {
              LODWORD(v26) = 0;
              goto LABEL_78;
            }
          }
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_76:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v26) = 0;
LABEL_78:
          v71 = v5[948];
          goto LABEL_83;
        case 2u:
          v37 = 0;
          v38 = 0;
          v26 = 0;
          while (2)
          {
            v39 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v40 = v39 + 1;
            if (v39 == -1 || v40 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v41 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v39);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v40;
              v26 |= (unint64_t)(v41 & 0x7F) << v37;
              if (v41 < 0)
              {
                v37 += 7;
                v21 = v38++ >= 9;
                if (v21)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v26) = 0;
LABEL_82:
          v71 = v6[954];
LABEL_83:
          *(_DWORD *)(a1 + v71) = v26;
          continue;
        case 3u:
          v42 = 0;
          v43 = 0;
          v44 = 0;
          while (2)
          {
            v45 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v46 = v45 + 1;
            if (v45 == -1 || v46 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v47 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v45);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v46;
              v44 |= (unint64_t)(v47 & 0x7F) << v42;
              if (v47 < 0)
              {
                v42 += 7;
                v21 = v43++ >= 9;
                if (v21)
                {
                  v44 = 0;
                  goto LABEL_87;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            v44 = 0;
LABEL_87:
          v72 = v44 != 0;
          v73 = v7[955];
          goto LABEL_101;
        case 4u:
          *(_BYTE *)(a1 + v4[947]) |= 4u;
          v48 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v48 <= 0xFFFFFFFFFFFFFFF7 && v48 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v49 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v48);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v48 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v49 = 0;
          }
          v75 = v8[949];
          goto LABEL_110;
        case 5u:
          *(_BYTE *)(a1 + v4[947]) |= 0x10u;
          v50 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v50 <= 0xFFFFFFFFFFFFFFFBLL && v50 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v51 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v50);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v50 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v51 = 0;
          }
          *(_DWORD *)(a1 + v9[950]) = v51;
          continue;
        case 6u:
          v52 = 0;
          v53 = 0;
          v54 = 0;
          while (2)
          {
            v55 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v56 = v55 + 1;
            if (v55 == -1 || v56 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v57 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v55);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v56;
              v54 |= (unint64_t)(v57 & 0x7F) << v52;
              if (v57 < 0)
              {
                v52 += 7;
                v21 = v53++ >= 9;
                if (v21)
                {
                  v54 = 0;
                  goto LABEL_91;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            v54 = 0;
LABEL_91:
          v74 = v10[956];
          goto LABEL_96;
        case 7u:
          v58 = 0;
          v59 = 0;
          v54 = 0;
          *(_BYTE *)(a1 + v4[947]) |= 1u;
          while (2)
          {
            v60 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v61 = v60 + 1;
            if (v60 == -1 || v61 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v62 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v60);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v61;
              v54 |= (unint64_t)(v62 & 0x7F) << v58;
              if (v62 < 0)
              {
                v58 += 7;
                v21 = v59++ >= 9;
                if (v21)
                {
                  v54 = 0;
                  goto LABEL_95;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            v54 = 0;
LABEL_95:
          v74 = v11[951];
LABEL_96:
          *(_QWORD *)(a1 + v74) = v54;
          continue;
        case 8u:
          *(_BYTE *)(a1 + v4[947]) |= 8u;
          v63 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v63 <= 0xFFFFFFFFFFFFFFF7 && v63 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v49 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v63);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v63 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v49 = 0;
          }
          v75 = v12[952];
          goto LABEL_110;
        case 9u:
          *(_BYTE *)(a1 + v4[947]) |= 2u;
          v64 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v64 <= 0xFFFFFFFFFFFFFFF7 && v64 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v49 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v64);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v64 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v49 = 0;
          }
          v75 = v13[953];
LABEL_110:
          *(_QWORD *)(a1 + v75) = v49;
          continue;
        case 0xAu:
          v65 = 0;
          v66 = 0;
          v67 = 0;
          break;
        default:
          v30 = v5;
          v31 = v6;
          v32 = v4;
          v33 = v7;
          v34 = v8;
          v35 = a1;
          result = PBReaderSkipValueWithTag(a2);
          a1 = v35;
          v9 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          v8 = v34;
          v10 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          v7 = v33;
          v11 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          v4 = v32;
          v13 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          v6 = v31;
          v12 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          v5 = v30;
          v14 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v68 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        v69 = v68 + 1;
        if (v68 == -1 || v69 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v70 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v68);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v69;
        v67 |= (unint64_t)(v70 & 0x7F) << v65;
        if ((v70 & 0x80) == 0)
          goto LABEL_98;
        v65 += 7;
        v21 = v66++ >= 9;
        if (v21)
        {
          v67 = 0;
          goto LABEL_100;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_98:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v67 = 0;
LABEL_100:
      v72 = v67 != 0;
      v73 = v14[957];
LABEL_101:
      *(_BYTE *)(a1 + v73) = v72;
    }
    while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length));
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1010645AC(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[5];

  *(_QWORD *)a1 = &off_102163560;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_BYTE *)(a1 + 40) = 0;
  v2 = sub_100127B9C();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10106465C;
  v4[3] = &unk_10212ECA0;
  v4[4] = a1;
  sub_1000A50A8(v2, (uint64_t)v4);
  return a1;
}

void sub_10106463C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10051CFC0((uint64_t *)(v2 + 24), 0);
  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10106465C(uint64_t a1)
{
  return sub_101064664(*(_QWORD *)(a1 + 32));
}

uint64_t sub_101064664(uint64_t a1)
{
  unint64_t v2;
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  char v12;
  _WORD v13[8];
  uint8_t buf[1640];

  sub_100127B9C();
  sub_100127BDC();
  v2 = sub_1001B7910();
  if ((v2 & 0x200) != 0)
  {
    if (!*(_QWORD *)(a1 + 8))
    {
      v3 = (uint64_t *)sub_100A07FA0();
      v11 = 0x150000FF0CLL;
      v12 = 0;
      sub_1018E4078(v3, (uint64_t)&v11, (uint64_t *)buf);
      sub_1002B7674(a1 + 8, (__int128 *)buf);
      v4 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v5 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      sub_100A0A4BC(*(uint64_t **)(a1 + 8), (uint64_t)sub_1010654A4, a1);
      sub_100A0A610(*(_QWORD *)(a1 + 8), (uint64_t)sub_101064A34, a1);
      sub_100A0A544(*(_QWORD *)(a1 + 8), (uint64_t)sub_101064A34, a1);
      sub_100A0A6B8(*(_QWORD *)(a1 + 8), (uint64_t)sub_101064A34, a1);
      operator new();
    }
  }
  else
  {
    if (qword_10229FD10 != -1)
      dispatch_once(&qword_10229FD10, &stru_10219C620);
    v7 = qword_10229FD18;
    if (os_log_type_enabled((os_log_t)qword_10229FD18, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Service unavailable.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD10 != -1)
        dispatch_once(&qword_10229FD10, &stru_10219C620);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD18, 17, "Service unavailable.", v13, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLSPUMagicMountInterface::openHidDevice()", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  return (v2 >> 9) & 1;
}

void sub_10106496C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100261F44((uint64_t)va);
  operator delete();
}

unint64_t sub_1010649A8()
{
  return ((unint64_t)sub_1001B7910() >> 9) & 1;
}

BOOL sub_1010649C0(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v7;
  int v8;

  sub_100127B9C();
  sub_100127BDC();
  if ((sub_1001B7910() & 0x200) == 0)
    sub_10193C0AC();
  v8 = 0;
  v7 = 4;
  return sub_1011E4FF0(*(_QWORD *)(a1 + 24), a2, a3, (uint64_t)&v8, (uint64_t)&v7) == 0;
}

BOOL sub_101064A34(uint64_t a1)
{
  uint64_t *v2;

  v2 = *(uint64_t **)(a1 + 24);
  sub_1011E407C(v2);
  sub_1011E4404(v2);
  return sub_101064A68(a1);
}

BOOL sub_101064A68(uint64_t a1)
{
  int v2;
  NSObject *v3;
  _BOOL8 v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  _BYTE v12[2];
  uint64_t v13;
  int v14;
  _DWORD v15[4];
  uint8_t buf[4];
  int v17;

  sub_100127B9C();
  sub_100127BDC();
  v12[0] = 2;
  v2 = *(unsigned __int8 *)(a1 + 40);
  v12[1] = *(_BYTE *)(a1 + 40);
  v13 = 0;
  v14 = 0;
  if (qword_10229FD10 != -1)
    dispatch_once(&qword_10229FD10, &stru_10219C620);
  v3 = qword_10229FD18;
  if (os_log_type_enabled((os_log_t)qword_10229FD18, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240192;
    v17 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[CLMagicMountInterface] Sending config shouldKeepRunning,%{public}u,", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD10 != -1)
      dispatch_once(&qword_10229FD10, &stru_10219C620);
    v15[0] = 67240192;
    v15[1] = v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD18, 1, "[CLMagicMountInterface] Sending config shouldKeepRunning,%{public}u,", v15, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLSPUMagicMountInterface::configure()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  v4 = sub_1010649C0(a1, (uint64_t)v12, (char *)0xE);
  if (!v4)
  {
    if (qword_10229FD10 != -1)
      dispatch_once(&qword_10229FD10, &stru_10219C620);
    v5 = qword_10229FD18;
    if (os_log_type_enabled((os_log_t)qword_10229FD18, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[CLMagicMountInterface] Configure failed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD10 != -1)
        dispatch_once(&qword_10229FD10, &stru_10219C620);
      LOWORD(v15[0]) = 0;
      LODWORD(v11) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD18, 16, "[CLMagicMountInterface] Configure failed", v15, v11);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLSPUMagicMountInterface::configure()", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  return v4;
}

void sub_101064D74(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  NSObject *v5;
  double v6;
  uint8_t *v7;
  uint8_t *v8;
  NSObject *v9;
  double v10;
  uint8_t *v11;
  unint64_t TimeStamp;
  double v13;
  __int16 v14;
  int64_t v15;
  unsigned __int8 *v16[2];
  uint8_t buf[1640];

  if (a2)
  {
    v15 = 0;
    v16[0] = 0;
    IOHIDEventGetVendorDefinedData(a2, v16, &v15);
    if (v16[0])
      v4 = v15 <= 0;
    else
      v4 = 1;
    if (!v4)
    {
      TimeStamp = IOHIDEventGetTimeStamp(a2);
      v13 = sub_100127828(TimeStamp);
      sub_10106505C(a1, v16[0], v15, v13);
      return;
    }
    if (qword_10229FD10 != -1)
      dispatch_once(&qword_10229FD10, &stru_10219C620);
    v5 = qword_10229FD18;
    if (os_log_type_enabled((os_log_t)qword_10229FD18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Empty payload, returning", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD10 != -1)
        dispatch_once(&qword_10229FD10, &stru_10219C620);
      v14 = 0;
      v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD18, 1, "Empty payload, returning", &v14, 2);
      v8 = v7;
      sub_100512490("Generic", 1, 0, 2, "void CLSPUMagicMountInterface::onIoHidEvent(IOHIDEventRef)", "%s\n", v6);
LABEL_23:
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    if (qword_10229FD10 != -1)
      dispatch_once(&qword_10229FD10, &stru_10219C620);
    v9 = qword_10229FD18;
    if (os_log_type_enabled((os_log_t)qword_10229FD18, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Event ref invalid", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD10 != -1)
        dispatch_once(&qword_10229FD10, &stru_10219C620);
      LOWORD(v16[0]) = 0;
      v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD18, 17, "Event ref invalid", v16, 2);
      v8 = v11;
      sub_100512490("Generic", 1, 0, 0, "void CLSPUMagicMountInterface::onIoHidEvent(IOHIDEventRef)", "%s\n", v10);
      goto LABEL_23;
    }
  }
}

void sub_10106505C(uint64_t a1, unsigned __int8 *a2, size_t a3, double a4)
{
  int v7;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  uint8_t *v14;
  uint64_t v15;
  unsigned __int8 __dst[8];
  int v17;
  int v18;
  __int16 v19;
  size_t v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  size_t v24;

  *(double *)(a1 + 32) = a4;
  sub_100932610(__dst, a2, a3);
  if (a3)
    v7 = *a2;
  else
    v7 = 0;
  if (qword_10229FD10 != -1)
    dispatch_once(&qword_10229FD10, &stru_10219C620);
  v8 = qword_10229FD18;
  if (os_log_type_enabled((os_log_t)qword_10229FD18, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240448;
    v22 = v7;
    v23 = 2050;
    v24 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "type,%{public}d,size,%{public}lu", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD10 != -1)
      dispatch_once(&qword_10229FD10, &stru_10219C620);
    v17 = 67240448;
    v18 = v7;
    v19 = 2050;
    v20 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD18, 2, "type,%{public}d,size,%{public}lu", &v17, 18);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLSPUMagicMountInterface::visitIoHidEvent(const uint8_t *, size_t, const CFTimeInterval)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  if (v7 == 255)
  {
    if (qword_10229FD10 != -1)
      dispatch_once(&qword_10229FD10, &stru_10219C620);
    v9 = qword_10229FD18;
    if (os_log_type_enabled((os_log_t)qword_10229FD18, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240448;
      v22 = 255;
      v23 = 2050;
      v24 = a3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Bad report,type,%{public}d,size,%{public}lu", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD10 != -1)
        dispatch_once(&qword_10229FD10, &stru_10219C620);
      v17 = 67240448;
      v18 = 255;
      v19 = 2050;
      v20 = a3;
      LODWORD(v15) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD18, 17, "Bad report,type,%{public}d,size,%{public}lu", &v17, v15);
LABEL_32:
      v14 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "void CLSPUMagicMountInterface::visitIoHidEvent(const uint8_t *, size_t, const CFTimeInterval)", "%s\n", v10);
      if (v14 != buf)
        free(v14);
    }
  }
  else if ((sub_1001500DC(__dst, (_QWORD *)a1) & 1) == 0)
  {
    if (qword_10229FD10 != -1)
      dispatch_once(&qword_10229FD10, &stru_10219C620);
    v11 = qword_10229FD18;
    if (os_log_type_enabled((os_log_t)qword_10229FD18, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v22 = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "CMMagicMountReport::visit() type %{public}d failed.", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD10 != -1)
        dispatch_once(&qword_10229FD10, &stru_10219C620);
      v17 = 67240192;
      v18 = v7;
      LODWORD(v15) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD18, 17, "CMMagicMountReport::visit() type %{public}d failed.", &v17, v15);
      goto LABEL_32;
    }
  }
}

void sub_1010654A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_101064D74(a1, a4);
}

void sub_1010654AC(id a1)
{
  qword_10229FD18 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MagicMount");
}

uint64_t sub_1010654D8(uint64_t a1)
{
  int v3;

  *(_QWORD *)a1 = off_10219C650;
  v3 = 0;
  sub_101066350((_QWORD *)(a1 + 8), 0x1FuLL, &v3);
  *(_OWORD *)(a1 + 92) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  return a1;
}

_QWORD *sub_10106552C(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = off_10219C650;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  sub_1010663D0(a1 + 4);
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_101065584(_QWORD *a1)
{
  sub_10106552C(a1);
  operator delete();
}

void sub_1010655A8(uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 40);
  v3 = *(void ***)(a1 + 48);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 72);
    v3 = *(void ***)(a1 + 40);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 72);
    v5 = *(_QWORD *)(a1 + 64);
    v6 = &v2[v5 / 0xAA];
    v7 = (unint64_t)*v6;
    v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    v9 = (unint64_t)v2[(*(_QWORD *)(a1 + 72) + v5) / 0xAA] + 24 * ((*(_QWORD *)(a1 + 72) + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        v10 = *(void **)v8;
        if (*(_QWORD *)v8)
        {
          *(_QWORD *)(v8 + 8) = v10;
          operator delete(v10);
          v7 = (unint64_t)*v6;
        }
        v8 += 24;
        if (v8 - v7 == 4080)
        {
          v11 = (unint64_t)v6[1];
          ++v6;
          v7 = v11;
          v8 = v11;
        }
      }
      while (v8 != v9);
      v2 = *(void ***)(a1 + 40);
      v3 = *(void ***)(a1 + 48);
    }
  }
  *v4 = 0;
  v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v13 = *(_QWORD *)(a1 + 48);
      v2 = (void **)(*(_QWORD *)(a1 + 40) + 8);
      *(_QWORD *)(a1 + 40) = v2;
      v12 = v13 - (_QWORD)v2;
    }
    while (v12 > 0x10);
  }
  if (v12 >> 3 == 1)
  {
    v14 = 85;
  }
  else
  {
    if (v12 >> 3 != 2)
      goto LABEL_17;
    v14 = 170;
  }
  *(_QWORD *)(a1 + 64) = v14;
LABEL_17:
  v15 = *(void **)(a1 + 8);
  v16 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
  if (v16 >= 1)
    bzero(v15, 4 * (((unint64_t)v16 >> 2) - ((unint64_t)v16 > 3)) + 4);
  *(_DWORD *)(a1 + 104) = 0;
}

void sub_1010656FC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  double *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  double v9;
  unsigned int v10;
  int v11;

  a3[1] = *a3;
  v11 = 0;
  sub_1002F4340((uint64_t)a3, 0x1FuLL, &v11);
  v5 = *(double **)a2;
  v6 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v6)
  {
    v7 = v6 >> 3;
    v8 = *a3;
    if (v7 <= 1)
      v7 = 1;
    do
    {
      v9 = *v5++;
      v10 = (int)(v9 / 0.100000001) & ~((int)(v9 / 0.100000001) >> 31);
      if (v10 >= 0x1E)
        v10 = 30;
      ++*(_DWORD *)(v8 + 4 * v10);
      --v7;
    }
    while (v7);
  }
}

uint64_t sub_101065794(uint64_t a1, uint64_t *a2, double *a3, double **a4)
{
  uint64_t v5;
  _DWORD *v8;
  unint64_t v9;
  double v10;
  double *v11;
  double *v12;
  unint64_t v13;
  uint64_t v14;
  double *v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t result;
  NSObject *v20;
  _BOOL4 v21;
  const char *v22;
  uint8_t *v23;
  _WORD v24[8];
  uint8_t buf[1640];

  if (*a3 < 1.0 || (v5 = a2[1], *a2 == v5))
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10219C670);
    v20 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "noSamples < 1 || hist.empty()", buf, 2u);
    }
    v21 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v21)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10219C670);
      v24[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 17, "noSamples < 1 || hist.empty()", v24, 2);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLOdometerQuality::cdfCalculator(const std::vector<unsigned int> &, const double &, std::vector<double> &)", "%s\n", v22);
      if (v23 != buf)
        free(v23);
      return 0;
    }
  }
  else
  {
    sub_1000F3860((uint64_t)a4, (v5 - *a2) >> 2);
    v8 = (_DWORD *)*a2;
    LODWORD(v9) = *(_DWORD *)*a2;
    v10 = (double)v9;
    v11 = *a4;
    *v11 = v10;
    v12 = a4[1];
    v13 = v12 - v11;
    if ((unint64_t)((char *)v12 - (char *)v11) >= 9)
    {
      if (v13 <= 2)
        v14 = 2;
      else
        v14 = v12 - v11;
      v15 = v11 + 1;
      v16 = v8 + 1;
      v17 = v14 - 1;
      do
      {
        v18 = *v16++;
        v10 = v10 + (double)v18;
        *v15++ = v10;
        --v17;
      }
      while (v17);
    }
    if (v12 != v11)
    {
      if (v13 <= 1)
        v13 = 1;
      do
      {
        *v11 = *v11 * (100.0 / *a3);
        ++v11;
        --v13;
      }
      while (v13);
    }
    return 1;
  }
  return result;
}

void sub_1010659F0(double *a1, uint64_t *a2)
{
  uint64_t v2;
  double *v3;
  double **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  _QWORD *v9;
  double v10;
  double *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  int *v39;
  int *v40;
  int v41;
  int v42;
  uint64_t v43;
  double *v44;
  double *v45;
  double *v46;
  double *v47;
  double *v48;
  double *v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double *v58;
  BOOL v59;
  double *v60;
  double v61;
  double *v62;
  double v63;
  double v64;
  unint64_t v65;
  int v66;
  NSObject *v67;
  NSObject *v68;
  int v69;
  uint64_t v70;
  const char *v71;
  void **v72;
  int v73;
  uint64_t v74;
  const char *v75;
  void **v76;
  double v77;
  void *v78;
  double *v79;
  void *v80;
  double *v81;
  uint64_t v82;
  double v83;
  _DWORD v84[2];
  __int16 v85;
  uint64_t v86;
  void *__p;
  __int128 v88;

  v2 = (uint64_t)a1;
  v4 = (double **)(a1 + 10);
  v3 = (double *)*((_QWORD *)a1 + 10);
  *((_QWORD *)a1 + 11) = v3;
  v6 = *a2;
  v5 = a2[1];
  if (v5 == *a2)
    goto LABEL_44;
  v8 = 0;
  v9 = a1 + 12;
  do
  {
    v10 = *(double *)(v6 + 8 * v8);
    if (v10 > 0.0 && v10 < 5000.0)
    {
      if ((unint64_t)v3 >= *v9)
      {
        a1 = *v4;
        v12 = v3 - *v4;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61)
          sub_100259694();
        v14 = *v9 - (_QWORD)a1;
        if (v14 >> 2 > v13)
          v13 = v14 >> 2;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)sub_10025E6A0(v2 + 96, v15);
          a1 = *(double **)(v2 + 80);
          v3 = *(double **)(v2 + 88);
          v10 = *(double *)(v6 + 8 * v8);
        }
        else
        {
          v16 = 0;
        }
        v17 = (double *)&v16[8 * v12];
        *v17 = v10;
        v11 = v17 + 1;
        while (v3 != a1)
        {
          v18 = *((_QWORD *)v3-- - 1);
          *((_QWORD *)v17-- - 1) = v18;
        }
        *(_QWORD *)(v2 + 80) = v17;
        *(_QWORD *)(v2 + 88) = v11;
        *(_QWORD *)(v2 + 96) = &v16[8 * v15];
        if (a1)
          operator delete(a1);
      }
      else
      {
        *v3 = v10;
        v11 = v3 + 1;
      }
      *(_QWORD *)(v2 + 88) = v11;
      v6 = *a2;
      v5 = a2[1];
      v3 = v11;
    }
    ++v8;
  }
  while (v8 < (v5 - v6) >> 3);
  if (*v4 == v3)
  {
LABEL_44:
    sub_1010655A8(v2);
    return;
  }
  if (*(_QWORD *)(v2 + 72) >= 0xAuLL)
    a1 = (double *)sub_101066204((_QWORD *)(v2 + 32));
  __p = 0;
  v88 = 0uLL;
  sub_1010656FC((uint64_t)a1, (uint64_t)v4, &__p);
  sub_101066280(v2 + 32, (uint64_t)&__p);
  if (__p)
  {
    *(_QWORD *)&v88 = __p;
    operator delete(__p);
  }
  v19 = *(_QWORD *)(v2 + 72);
  if (v19)
  {
    v20 = *(_QWORD *)(v2 + 64);
    v21 = *(_QWORD *)(v2 + 40);
    v22 = (_QWORD *)(v21 + 8 * (v20 / 0xAA));
    v23 = (_QWORD *)(*v22 + 24 * (v20 % 0xAA));
    v24 = v23[1];
    v25 = v24 - *v23;
    if (v24 == *v23)
    {
      v39 = *(int **)(v2 + 8);
    }
    else
    {
      v26 = 0;
      v27 = 0;
      v28 = v25 >> 2;
      v29 = *(_QWORD *)(v2 + 48);
      if (v29 == v21)
        v23 = 0;
      v30 = v20 + v19;
      v31 = v30 / 0xAA;
      v32 = v30 % 0xAA;
      do
      {
        v33 = 0;
        v34 = v22;
        v35 = v23;
LABEL_34:
        v36 = v35 - 510;
        while (1)
        {
          v37 = v29 == v21 ? 0 : *(_QWORD *)(v21 + 8 * v31) + 24 * v32;
          if (v35 == (_QWORD *)v37)
            break;
          if (v26 >= (uint64_t)(v35[1] - *v35) >> 2)
            sub_1002EAEB0();
          v33 += *(_DWORD *)(*v35 + 4 * v26);
          v35 += 3;
          v36 += 3;
          if ((_QWORD *)*v34 == v36)
          {
            v38 = (_QWORD *)v34[1];
            ++v34;
            v35 = v38;
            goto LABEL_34;
          }
        }
        v39 = *(int **)(v2 + 8);
        v39[v26] = v33;
        v26 = ++v27;
      }
      while (v28 > v27);
    }
    v40 = *(int **)(v2 + 16);
    if (v39 == v40)
    {
      v41 = 0;
    }
    else
    {
      v41 = 0;
      do
      {
        v42 = *v39++;
        v41 += v42;
      }
      while (v39 != v40);
    }
    v83 = (double)v41;
    v80 = 0;
    v81 = 0;
    v82 = 0;
    if ((sub_101065794((uint64_t)v39, (uint64_t *)(v2 + 8), &v83, (double **)&v80) & 1) != 0)
    {
      v43 = ((char *)v81 - (_BYTE *)v80) >> 3;
      if (v43 == (*(_QWORD *)algn_10230BF78 - qword_10230BF70) >> 3
        && v43 == (qword_10230BF90 - qword_10230BF88) >> 3
        && v43 == (qword_10230BFA8 - qword_10230BFA0) >> 3)
      {
        __p = 0;
        sub_10025E5E0(&v78, 3uLL, &__p);
        v44 = (double *)v80;
        v45 = v81;
        v46 = (double *)v78;
        if (v80 != v81)
        {
          v47 = (double *)qword_10230BF88;
          v48 = (double *)qword_10230BF70;
          v49 = (double *)qword_10230BFA0;
          v51 = *((double *)v78 + 1);
          v50 = *((double *)v78 + 2);
          v52 = *(double *)v78;
          do
          {
            v53 = *v47++;
            v50 = v50 + (*v44 - v53) * (*v44 - v53);
            v46[2] = v50;
            v54 = *v48++;
            v51 = v51 + (*v44 - v54) * (*v44 - v54);
            v46[1] = v51;
            v55 = *v44++;
            v56 = v55;
            v57 = *v49++;
            v52 = v52 + (v56 - v57) * (v56 - v57);
            *v46 = v52;
          }
          while (v44 != v45);
        }
        v58 = v46 + 1;
        v59 = v46 == v79 || v58 == v79;
        v60 = v46;
        if (!v59)
        {
          v61 = *v46;
          v60 = v46;
          v62 = v46 + 1;
          do
          {
            v63 = *v62++;
            v64 = v63;
            if (v63 < v61)
            {
              v61 = v64;
              v60 = v58;
            }
            v58 = v62;
          }
          while (v62 != v79);
        }
        v65 = (unint64_t)((char *)v60 - (char *)v46) >> 3;
        *(_DWORD *)(v2 + 104) = v65 + 1;
        if ((_DWORD)v65)
        {
          if ((_DWORD)v65 != 1 || v46[2] * 0.98 > v46[1])
            goto LABEL_82;
          v66 = 3;
        }
        else
        {
          if (v46[1] * 0.93 > *v46)
          {
LABEL_82:
            if (qword_10229FCD0 != -1)
              dispatch_once(&qword_10229FCD0, &stru_10219C670);
            v68 = qword_10229FCD8;
            if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
            {
              v69 = *(_DWORD *)(v2 + 104);
              v70 = *((_QWORD *)v78 + v69 - 1);
              LODWORD(__p) = 67109376;
              HIDWORD(__p) = v69;
              LOWORD(v88) = 2048;
              *(_QWORD *)((char *)&v88 + 2) = v70;
              _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "OdometerQualityIndicator,%d,r2,%f", (uint8_t *)&__p, 0x12u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(&__p, 0x65CuLL);
              if (qword_10229FCD0 != -1)
                dispatch_once(&qword_10229FCD0, &stru_10219C670);
              v73 = *(_DWORD *)(v2 + 104);
              v74 = *((_QWORD *)v78 + v73 - 1);
              v84[0] = 67109376;
              v84[1] = v73;
              v85 = 2048;
              v86 = v74;
              LODWORD(v77) = 18;
              _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_10229FCD8, 2, "OdometerQualityIndicator,%d,r2,%f", v84, v77);
              v76 = (void **)v75;
              sub_100512490("Generic", 1, 0, 2, "void CLOdometerQuality::classifySamples(std::vector<double> &)", "%s\n", v75);
              if (v76 != &__p)
                free(v76);
            }
            if (v78)
            {
              v79 = (double *)v78;
              operator delete(v78);
            }
            goto LABEL_76;
          }
          v66 = 2;
        }
        *(_DWORD *)(v2 + 104) = v66;
        goto LABEL_82;
      }
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10219C670);
      v67 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_FAULT))
      {
        LOWORD(__p) = 0;
        _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_FAULT, "unexpected trained cdf data size issue", (uint8_t *)&__p, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_10219C670);
        LOWORD(v78) = 0;
        _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_10229FCD8, 17, "unexpected trained cdf data size issue", &v78, 2);
        v72 = (void **)v71;
        sub_100512490("Generic", 1, 0, 0, "void CLOdometerQuality::classifySamples(std::vector<double> &)", "%s\n", v71);
        if (v72 != &__p)
          free(v72);
      }
    }
    sub_1010655A8(v2);
LABEL_76:
    if (v80)
    {
      v81 = (double *)v80;
      operator delete(v80);
    }
  }
}

void sub_1010661A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101066204(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;

  v2 = a1[5] - 1;
  v3 = v2 + a1[4];
  v4 = *(_QWORD *)(a1[1] + 8 * (v3 / 0xAA));
  v5 = v3 % 0xAA;
  v6 = *(void **)(v4 + 24 * v5);
  if (v6)
  {
    *(_QWORD *)(v4 + 24 * v5 + 8) = v6;
    operator delete(v6);
    v2 = a1[5] - 1;
  }
  a1[5] = v2;
  return sub_1004CDEEC(a1, 1);
}

int64x2_t sub_101066280(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int64x2_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    sub_101066514((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0xAA));
  v7 = *v6 + 24 * (v4 % 0xAA);
  if (*(_QWORD *)(a1 + 16) == v5)
    v8 = 0;
  else
    v8 = v7;
  if (v8 == *v6)
    v8 = *(v6 - 1) + 4080;
  *(_QWORD *)(v8 - 24) = 0;
  *(_QWORD *)(v8 - 16) = 0;
  v9 = (_QWORD *)(v8 - 24);
  v9[2] = 0;
  sub_10027205C(v9, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_101BB2F70);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void sub_101066324(id a1)
{
  qword_10229FCD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

_QWORD *sub_101066350(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1002720D4(a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1010663B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010663D0(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0xAA];
    v7 = (unint64_t)*v6;
    v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    v9 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        v10 = *(void **)v8;
        if (*(_QWORD *)v8)
        {
          *(_QWORD *)(v8 + 8) = v10;
          operator delete(v10);
          v7 = (unint64_t)*v6;
        }
        v8 += 24;
        if (v8 - v7 == 4080)
        {
          v11 = (unint64_t)v6[1];
          ++v6;
          v7 = v11;
          v8 = v11;
        }
      }
      while (v8 != v9);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v13 = v12 >> 3;
  if (v13 == 1)
  {
    v14 = 85;
  }
  else
  {
    if (v13 != 2)
      goto LABEL_18;
    v14 = 170;
  }
  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    v15 = *v2++;
    operator delete(v15);
  }
  return sub_10002E778((uint64_t)a1);
}

void sub_101066514(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = (v3 - v2) >> 3;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 170 * v4 - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0xAA)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = sub_10025E6A0(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0xFF0uLL);
      sub_10003732C(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)sub_10025E6A0((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 85;
      else
        v40 = (uint64_t)a1[4] + 170;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xFF0uLL);
        sub_100212218(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xFF0uLL);
      }
      sub_100343094((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 85;
      else
        v35 = (uint64_t)a1[4] + 170;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 170;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    sub_100343094((uint64_t)a1, &__p);
  }
}

void sub_1010667E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10106682C()
{
  _OWORD *v0;
  _OWORD *v1;
  _OWORD *v2;

  qword_10230BF70 = 0;
  *(_QWORD *)algn_10230BF78 = 0;
  qword_10230BF80 = 0;
  v0 = operator new(0xF8uLL);
  qword_10230BF80 = (uint64_t)v0 + 248;
  v0[12] = xmmword_101C3BFB8;
  v0[13] = unk_101C3BFC8;
  v0[14] = xmmword_101C3BFD8;
  *((_QWORD *)v0 + 30) = 0x4059000000000000;
  v0[8] = xmmword_101C3BF78;
  v0[9] = unk_101C3BF88;
  v0[10] = xmmword_101C3BF98;
  v0[11] = unk_101C3BFA8;
  v0[4] = xmmword_101C3BF38;
  v0[5] = unk_101C3BF48;
  v0[6] = xmmword_101C3BF58;
  v0[7] = unk_101C3BF68;
  *v0 = xmmword_101C3BEF8;
  v0[1] = unk_101C3BF08;
  v0[2] = xmmword_101C3BF18;
  v0[3] = unk_101C3BF28;
  qword_10230BF70 = (uint64_t)v0;
  *(_QWORD *)algn_10230BF78 = (char *)v0 + 248;
  __cxa_atexit((void (*)(void *))sub_1004093B0, &qword_10230BF70, (void *)&_mh_execute_header);
  qword_10230BF90 = 0;
  qword_10230BF98 = 0;
  qword_10230BF88 = 0;
  v1 = operator new(0xF8uLL);
  qword_10230BF98 = (uint64_t)v1 + 248;
  v1[12] = xmmword_101C3C0B0;
  v1[13] = unk_101C3C0C0;
  v1[14] = xmmword_101C3C0D0;
  *((_QWORD *)v1 + 30) = 0x4059000000000000;
  v1[8] = xmmword_101C3C070;
  v1[9] = unk_101C3C080;
  v1[10] = xmmword_101C3C090;
  v1[11] = unk_101C3C0A0;
  v1[4] = xmmword_101C3C030;
  v1[5] = unk_101C3C040;
  v1[6] = xmmword_101C3C050;
  v1[7] = unk_101C3C060;
  *v1 = xmmword_101C3BFF0;
  v1[1] = unk_101C3C000;
  v1[2] = xmmword_101C3C010;
  v1[3] = unk_101C3C020;
  qword_10230BF88 = (uint64_t)v1;
  qword_10230BF90 = (uint64_t)v1 + 248;
  __cxa_atexit((void (*)(void *))sub_1004093B0, &qword_10230BF88, (void *)&_mh_execute_header);
  qword_10230BFA8 = 0;
  qword_10230BFB0 = 0;
  qword_10230BFA0 = 0;
  v2 = operator new(0xF8uLL);
  qword_10230BFB0 = (uint64_t)v2 + 248;
  v2[12] = xmmword_101C3C1A8;
  v2[13] = unk_101C3C1B8;
  v2[14] = xmmword_101C3C1C8;
  *((_QWORD *)v2 + 30) = 0x4059000000000000;
  v2[8] = xmmword_101C3C168;
  v2[9] = unk_101C3C178;
  v2[10] = xmmword_101C3C188;
  v2[11] = unk_101C3C198;
  v2[4] = xmmword_101C3C128;
  v2[5] = unk_101C3C138;
  v2[6] = xmmword_101C3C148;
  v2[7] = unk_101C3C158;
  *v2 = xmmword_101C3C0E8;
  v2[1] = unk_101C3C0F8;
  v2[2] = xmmword_101C3C108;
  v2[3] = unk_101C3C118;
  qword_10230BFA0 = (uint64_t)v2;
  qword_10230BFA8 = (uint64_t)v2 + 248;
  return __cxa_atexit((void (*)(void *))sub_1004093B0, &qword_10230BFA0, (void *)&_mh_execute_header);
}

void sub_1010675D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1 + 520);
  _Unwind_Resume(a1);
}

void sub_101067610(id a1)
{
  qword_1022A01E8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Streaming");
}

double sub_10106763C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0x400000000;
  *(_QWORD *)(a1 + 72) = 0x500000000;
  *(_QWORD *)&result = 0x700000000;
  *(_QWORD *)(a1 + 160) = 0x700000000;
  *(_WORD *)(a1 + 448) = 257;
  return result;
}

uint64_t sub_10106766C(uint64_t result)
{
  *(_DWORD *)result = 0;
  *(_DWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 160) = 0;
  *(_WORD *)(result + 448) = 257;
  return result;
}

void sub_101067684(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_1010676B0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_10230C248);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10230C248))
  {
    word_10230C240 = sub_10106775C();
    __cxa_guard_release(&qword_10230C248);
  }
  if (HIBYTE(word_10230C240))
    return (_BYTE)word_10230C240 != 0;
  sub_100197040();
  if ((sub_1000C4240() & 1) != 0)
    return 1;
  sub_100197040();
  return sub_100081BD0();
}

void sub_101067744(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230C248);
  _Unwind_Resume(a1);
}

uint64_t sub_10106775C()
{
  int v0;
  int v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  NSObject *v5;
  const char *v6;
  int v7;
  int v8;
  const char *v10;
  const char *v11;
  char *v12;
  uint64_t v13;
  int v14;
  const char *v15;
  _OWORD buf[102];

  HIBYTE(v13) = 0;
  sub_1001E4804(buf);
  v0 = sub_1001E4874(*(uint64_t *)&buf[0], "EnableAONSenseWiFiLeech", (BOOL *)&v13 + 7);
  v1 = v0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (*((_QWORD *)&buf[0] + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if (v1)
        goto LABEL_6;
LABEL_16:
      v7 = 0;
      v8 = 0;
      return v8 | (v7 << 8);
    }
  }
  if (!v0)
    goto LABEL_16;
LABEL_6:
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10219C6F0);
  v5 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    if (HIBYTE(v13))
      v6 = "true";
    else
      v6 = "false";
    LODWORD(buf[0]) = 136380675;
    *(_QWORD *)((char *)buf + 4) = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning defaults write EnableAONSenseWiFiLeech to %{private}s", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219C6F0);
    if (HIBYTE(v13))
      v10 = "true";
    else
      v10 = "false";
    v14 = 136380675;
    v15 = v10;
    LODWORD(v13) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "#Warning defaults write EnableAONSenseWiFiLeech to %{private}s", &v14, v13);
    v12 = (char *)v11;
    sub_100512490("Generic", 1, 0, 2, "std::optional<BOOL> isAonsensedScanRequestEnabledByDefaultsWrite()", "%s\n", v11);
    if (v12 != (char *)buf)
      free(v12);
  }
  v7 = 1;
  v8 = HIBYTE(v13);
  return v8 | (v7 << 8);
}

void sub_1010679B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010679CC(unsigned int a1)
{
  unsigned int v2;
  unsigned int v3;

  v2 = sub_10132F064()[2];
  v3 = sub_10132F064()[3];
  return sub_101067A00(a1, v2, v3);
}

uint64_t sub_101067A00(unsigned int a1, unsigned int a2, unsigned int a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v10;
  NSObject *v11;
  uint64_t v13;
  char *v14;
  int v15;
  const char *v16;
  _OWORD buf[102];

  if (a1 == 1)
  {
    sub_1001E4804(buf);
    LOBYTE(v15) = 0;
    if (sub_1001E4874(*(uint64_t *)&buf[0], "skipWifiManagerScans", (BOOL *)&v15))
      v5 = (_BYTE)v15 != 0;
    else
      v5 = a3;
    v6 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
    if (*((_QWORD *)&buf[0] + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
      do
        v8 = __ldaxr(v10);
      while (__stlxr(v8 - 1, v10));
LABEL_16:
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else if (a1 == 2)
  {
    sub_1001E4804(buf);
    LOBYTE(v15) = 0;
    if (sub_1001E4874(*(uint64_t *)&buf[0], "skipAonsensedScans", (BOOL *)&v15))
      v5 = (_BYTE)v15 != 0;
    else
      v5 = a2;
    v6 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
    if (*((_QWORD *)&buf[0] + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      goto LABEL_16;
    }
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219C6F0);
    v11 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 136446210;
      *(_QWORD *)((char *)buf + 4) = sub_100CF2174(a1);
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "@Wsb, warning, unsupported WSB scan source %{public}s", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10219C6F0);
      v13 = qword_1022A0048;
      v15 = 136446210;
      v16 = sub_100CF2174(a1);
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 16, "@Wsb, warning, unsupported WSB scan source %{public}s", &v15, 12);
      sub_100512490("Generic", 1, 0, 0, "BOOL skipScanSource(const CLWifiService_Type::ScanSource, const BOOL, const BOOL)", "%s\n", v14);
      if (v14 != (char *)buf)
        free(v14);
    }
    return 0;
  }
  return v5;
}

void sub_101067CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101067CC8(unsigned int a1)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *sub_10132F064();
  v3 = sub_10132F064()[1];
  return sub_101067A00(a1, v2, v3);
}

uint64_t sub_101067CFC(unsigned int a1)
{
  int v2;
  char *v3;
  int v4;
  char *v5;

  sub_100197040();
  v2 = sub_1007573A8();
  v3 = sub_10132F064();
  if (v2)
  {
    v4 = v3[6];
    v5 = sub_10132F064() + 7;
  }
  else
  {
    v4 = v3[4];
    v5 = sub_10132F064() + 5;
  }
  return sub_101067A00(a1, v4 != 0, *v5);
}

void sub_101067D58(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_101067D84()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_101067E20(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_101067E38()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_101067EC4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

void sub_1010684B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_101068B04(id a1)
{
  qword_10229FE88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

uint64_t *sub_101068B34(_QWORD *a1, int *a2)
{
  int8x8_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = a2[1];
  v4 = *a2;
  v5 = 0xC6A4A7935BD1E995
     * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v3) ^ ((0xC6A4A7935BD1E995 * v3) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v4) ^ ((0xC6A4A7935BD1E995 * v4) >> 47)) + 3864292196u))
     + 3864292196u;
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0xC6A4A7935BD1E995
       * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v3) ^ ((0xC6A4A7935BD1E995 * v3) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v4) ^ ((0xC6A4A7935BD1E995 * v4) >> 47)) + 3864292196u))
       + 3864292196u;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(uint64_t ***)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  for (result = *v8; result; result = (uint64_t *)*result)
  {
    v10 = result[1];
    if (v5 == v10)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v4 && *((_DWORD *)result + 5) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(_QWORD *)&v2)
          v10 %= *(_QWORD *)&v2;
      }
      else
      {
        v10 &= *(_QWORD *)&v2 - 1;
      }
      if (v10 != v7)
        return 0;
    }
  }
  return result;
}

uint64_t sub_101068C38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[24];

  qword_10230C258 = 0;
  qword_10230C260 = 0;
  qword_10230C250 = 0;
  qword_10230C250 = (uint64_t)operator new(0x284uLL);
  v0 = qword_10230C250 + 644;
  qword_10230C260 = qword_10230C250 + 644;
  memcpy((void *)qword_10230C250, &unk_101C3C218, 0x284uLL);
  qword_10230C258 = v0;
  __cxa_atexit((void (*)(void *))sub_10041C534, &qword_10230C250, (void *)&_mh_execute_header);
  qword_10230C270 = 0;
  qword_10230C278 = 0;
  qword_10230C268 = 0;
  qword_10230C268 = (uint64_t)operator new(0x284uLL);
  v1 = qword_10230C268 + 644;
  qword_10230C278 = qword_10230C268 + 644;
  memcpy((void *)qword_10230C268, &unk_101C3C49C, 0x284uLL);
  qword_10230C270 = v1;
  qword_10230C288 = 0;
  qword_10230C290 = 0;
  qword_10230C280 = 0;
  qword_10230C280 = (uint64_t)operator new(0x284uLL);
  v2 = qword_10230C280 + 644;
  qword_10230C290 = qword_10230C280 + 644;
  memcpy((void *)qword_10230C280, &unk_101C3C720, 0x284uLL);
  qword_10230C288 = v2;
  __cxa_atexit((void (*)(void *))sub_100AA26AC, &qword_10230C268, (void *)&_mh_execute_header);
  qword_10230C2A0 = 0;
  qword_10230C2A8 = 0;
  qword_10230C298 = 0;
  qword_10230C298 = (uint64_t)operator new(0x284uLL);
  v3 = qword_10230C298 + 644;
  qword_10230C2A8 = qword_10230C298 + 644;
  memcpy((void *)qword_10230C298, &unk_101C3C49C, 0x284uLL);
  qword_10230C2A0 = v3;
  qword_10230C2B8 = 0;
  qword_10230C2C0 = 0;
  qword_10230C2B0 = 0;
  qword_10230C2B0 = (uint64_t)operator new(0x284uLL);
  v4 = qword_10230C2B0 + 644;
  qword_10230C2C0 = qword_10230C2B0 + 644;
  memcpy((void *)qword_10230C2B0, &unk_101C3C720, 0x284uLL);
  qword_10230C2B8 = v4;
  __cxa_atexit((void (*)(void *))sub_100AA26AC, &qword_10230C298, (void *)&_mh_execute_header);
  v6[0] = 0x7800000001;
  v6[1] = &qword_10230C298;
  v6[2] = 0x7A00000001;
  v6[3] = &qword_10230C298;
  v6[4] = 0x7900000001;
  v6[5] = &qword_10230C298;
  v6[6] = 0x7B00000001;
  v6[7] = &qword_10230C298;
  v6[8] = 0x7800000004;
  v6[9] = &qword_10230C298;
  v6[10] = 0x7A00000004;
  v6[11] = &qword_10230C298;
  v6[12] = 0x7900000004;
  v6[13] = &qword_10230C298;
  v6[14] = 0x7B00000004;
  v6[15] = &qword_10230C298;
  v6[16] = 0x7300000004;
  v6[17] = &qword_10230C268;
  v6[18] = 0x7C00000004;
  v6[19] = &qword_10230C268;
  v6[20] = 0x7300000000;
  v6[21] = &qword_10230C268;
  v6[22] = 0x7C00000000;
  v6[23] = &qword_10230C268;
  sub_100AA9EC4((uint64_t)qword_10230C2C8, (int *)v6, 12);
  return __cxa_atexit((void (*)(void *))sub_100AA26EC, qword_10230C2C8, (void *)&_mh_execute_header);
}

void sub_101068E94(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_101068EC8(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _BYTE v6[24];
  _BYTE *v7;

  *(_QWORD *)a1 = a2;
  v7 = 0;
  sub_1006D5E24(a1 + 8, (uint64_t)v6, 10.0, 300.0);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  *(_QWORD *)(a1 + 296) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 304) = 0x4050400000000000;
  *(CFAbsoluteTime *)(a1 + 312) = CFAbsoluteTimeGetCurrent();
  *(_QWORD *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 328) = xmmword_101C3C9C0;
  *(_OWORD *)(a1 + 344) = unk_101C3C9D0;
  *(_OWORD *)(a1 + 360) = xmmword_101C3C9E0;
  *(_OWORD *)(a1 + 372) = *(__int128 *)((char *)&xmmword_101C3C9E0 + 12);
  sub_101069008((_QWORD *)a1);
  return a1;
}

void sub_101068FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_101069008(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *result;
  uint64_t v42;
  _QWORD v43[3];
  _QWORD *v44;
  _QWORD v45[3];
  _QWORD *v46;
  _QWORD v47[3];
  _QWORD *v48;
  _QWORD v49[3];
  _QWORD *v50;
  _QWORD v51[3];
  _QWORD *v52;
  _QWORD v53[3];
  _QWORD *v54;
  _QWORD v55[3];
  _QWORD *v56;
  _QWORD v57[3];
  _QWORD *v58;
  _QWORD v59[3];
  _QWORD *v60;
  _QWORD v61[3];
  _QWORD *v62;
  _QWORD v63[3];
  _QWORD *v64;
  _QWORD v65[3];
  _QWORD *v66;
  _QWORD v67[3];
  _QWORD *v68;
  _QWORD v69[3];
  _QWORD *v70;

  v69[0] = off_10219C780;
  v69[1] = sub_1000D1614;
  v70 = v69;
  sub_100AB0394(a1 + 33, (uint64_t)v69);
  v2 = v70;
  if (v70 == v69)
  {
    v3 = 4;
    v2 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 104))(*a1);
  v67[0] = off_10219C820;
  v67[1] = sub_10022A4F4;
  v68 = v67;
  sub_10106D004((_QWORD *)(v4 + 416), (uint64_t)v67);
  v5 = v68;
  if (v68 == v67)
  {
    v6 = 4;
    v5 = v67;
  }
  else
  {
    if (!v68)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 120))(*a1);
  v65[0] = off_10219C8D0;
  v65[1] = sub_10106B1D4;
  v66 = v65;
  sub_100AB0EA4((_QWORD *)(v7 + 288), (uint64_t)v65);
  v8 = v66;
  if (v66 == v65)
  {
    v9 = 4;
    v8 = v65;
  }
  else
  {
    if (!v66)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 112))(*a1);
  v63[0] = off_10219C970;
  v63[1] = sub_10106AFF4;
  v64 = v63;
  sub_10106D35C((_QWORD *)(v10 + 160), (uint64_t)v63);
  v11 = v64;
  if (v64 == v63)
  {
    v12 = 4;
    v11 = v63;
  }
  else
  {
    if (!v64)
      goto LABEL_21;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_21:
  v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 128))(*a1);
  v61[0] = off_10219CA20;
  v61[1] = sub_10106B3DC;
  v62 = v61;
  sub_10106D614((_QWORD *)(v13 + 272), (uint64_t)v61);
  v14 = v62;
  if (v62 == v61)
  {
    v15 = 4;
    v14 = v61;
  }
  else
  {
    if (!v62)
      goto LABEL_26;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_26:
  v16 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 136))(*a1);
  v59[0] = off_10219CAD0;
  v59[1] = sub_10022A2C4;
  v60 = v59;
  sub_100AB091C((_QWORD *)(v16 + 416), (uint64_t)v59);
  v17 = v60;
  if (v60 == v59)
  {
    v18 = 4;
    v17 = v59;
  }
  else
  {
    if (!v60)
      goto LABEL_31;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_31:
  v19 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 144))(*a1);
  v57[0] = off_10219CB70;
  v57[1] = sub_10106B5DC;
  v58 = v57;
  sub_10106D96C((_QWORD *)(v19 + 168), (uint64_t)v57);
  v20 = v58;
  if (v58 == v57)
  {
    v21 = 4;
    v20 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_36;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_36:
  v22 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 152))(*a1);
  v55[0] = off_10219CC20;
  v55[1] = sub_10106B7B4;
  v56 = v55;
  sub_10106DC24((_QWORD *)(v22 + 136), (uint64_t)v55);
  v23 = v56;
  if (v56 == v55)
  {
    v24 = 4;
    v23 = v55;
  }
  else
  {
    if (!v56)
      goto LABEL_41;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_41:
  v25 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 160))(*a1);
  v53[0] = off_10219CCD0;
  v53[1] = sub_10106B98C;
  v54 = v53;
  sub_100AB1184((_QWORD *)(v25 + 168), (uint64_t)v53);
  v26 = v54;
  if (v54 == v53)
  {
    v27 = 4;
    v26 = v53;
  }
  else
  {
    if (!v54)
      goto LABEL_46;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_46:
  v28 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 168))(*a1);
  v51[0] = off_10219CD70;
  v51[1] = sub_10106BB9C;
  v52 = v51;
  sub_10106DF88((_QWORD *)(v28 + 248), (uint64_t)v51);
  v29 = v52;
  if (v52 == v51)
  {
    v30 = 4;
    v29 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_51;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_51:
  v31 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 176))(*a1);
  v49[0] = off_10219CE20;
  v49[1] = sub_10106BD7C;
  v50 = v49;
  sub_10106E240((_QWORD *)(v31 + 112), (uint64_t)v49);
  v32 = v50;
  if (v50 == v49)
  {
    v33 = 4;
    v32 = v49;
  }
  else
  {
    if (!v50)
      goto LABEL_56;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_56:
  v34 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 192))(*a1);
  v47[0] = off_10219CEC0;
  v47[1] = sub_10106BF7C;
  v48 = v47;
  sub_10106E4F8((_QWORD *)(v34 + 112), (uint64_t)v47);
  v35 = v48;
  if (v48 == v47)
  {
    v36 = 4;
    v35 = v47;
  }
  else
  {
    if (!v48)
      goto LABEL_61;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_61:
  v37 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 200))(*a1);
  v45[0] = off_10219CF70;
  v45[1] = sub_10106C14C;
  v46 = v45;
  sub_10106E7B0((_QWORD *)(v37 + 136), (uint64_t)v45);
  v38 = v46;
  if (v46 == v45)
  {
    v39 = 4;
    v38 = v45;
  }
  else
  {
    if (!v46)
      goto LABEL_66;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_66:
  v40 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 184))(*a1);
  v43[0] = off_10219D020;
  v43[1] = sub_10106C39C;
  v44 = v43;
  sub_10106EA68((_QWORD *)(v40 + 120), (uint64_t)v43);
  result = v44;
  if (v44 == v43)
  {
    v42 = 4;
    result = v43;
  }
  else
  {
    if (!v44)
      return result;
    v42 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v42))();
}

void sub_101069600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  char *v41;
  char *v43;
  uint64_t v44;

  v43 = a13;
  if (a13 == v41)
  {
    v44 = 4;
    v43 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v44 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v43 + 8 * v44))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010697B0(uint64_t a1, _OWORD *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v3 = *(_QWORD *)(a1 + 312);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(a1 + 280);
  if (*(_QWORD *)(a1 + 288) == v4)
    return 0;
  v5 = *(_QWORD *)(a1 + 304);
  v6 = v5 + v3;
  v7 = (uint64_t *)(v4 + 8 * ((v5 + v3) >> 6));
  v8 = *v7;
  v9 = *v7 + ((unint64_t)(v6 & 0x3F) << 6);
  v10 = v5 >> 6;
  v11 = *(_QWORD *)(v4 + 8 * (v5 >> 6));
  v12 = v5 & 0x3F;
  v13 = v11 + (v12 << 6);
  if (v9 != v13)
  {
    while (1)
    {
      v14 = v9;
      if (v9 == v8)
        v14 = *(v7 - 1) + 4096;
      v15 = *(double *)(v14 - 56);
      if (v15 <= a3 && v15 > a3 - *(double *)(a1 + 336))
        break;
      if (v9 == v8)
      {
        v16 = *--v7;
        v8 = v16;
        v9 = v16 + 4096;
      }
      v9 -= 64;
      if (v9 == v13)
      {
        v9 = v13;
        break;
      }
    }
  }
  if (v9 == *(_QWORD *)(v4 + 8 * v10) + (v12 << 6))
    return 0;
  if (v9 == *v7)
    v9 = *(v7 - 1) + 4096;
  v17 = *(_OWORD *)(v9 - 64);
  v18 = *(_OWORD *)(v9 - 48);
  v19 = *(_OWORD *)(v9 - 16);
  a2[2] = *(_OWORD *)(v9 - 32);
  a2[3] = v19;
  *a2 = v17;
  a2[1] = v18;
  return 1;
}

uint64_t sub_10106988C(uint64_t result)
{
  uint64_t v1;
  double v2;

  if (*(double *)(result + 320) != -1.0)
  {
    v1 = result;
    if (!*(_BYTE *)(result + 264))
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      if ((_DWORD)result)
      {
        *(_BYTE *)(v1 + 264) = 1;
      }
      else if (!*(_BYTE *)(v1 + 264))
      {
        v2 = 2.22507386e-308;
        goto LABEL_7;
      }
    }
    v2 = *(double *)(v1 + 320) + 30.0;
LABEL_7:
    *(double *)(v1 + 328) = v2;
  }
  return result;
}

uint64_t sub_101069904(uint64_t a1, _OWORD *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v3 = *(_QWORD *)(a1 + 56);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 32) == v4)
    return 0;
  v5 = *(_QWORD *)(a1 + 48);
  v6 = v5 + v3;
  v7 = (uint64_t *)(v4 + 8 * ((v5 + v3) >> 6));
  v8 = *v7;
  v9 = *v7 + ((unint64_t)(v6 & 0x3F) << 6);
  v10 = v5 >> 6;
  v11 = *(_QWORD *)(v4 + 8 * (v5 >> 6));
  v12 = v5 & 0x3F;
  v13 = v11 + (v12 << 6);
  if (v9 != v13)
  {
    while (1)
    {
      v14 = v9;
      if (v9 == v8)
        v14 = *(v7 - 1) + 4096;
      v15 = *(double *)(v14 - 24);
      if (v15 <= a3 && v15 > a3 - *(double *)(a1 + 80))
        break;
      if (v9 == v8)
      {
        v16 = *--v7;
        v8 = v16;
        v9 = v16 + 4096;
      }
      v9 -= 64;
      if (v9 == v13)
      {
        v9 = v13;
        break;
      }
    }
  }
  if (v9 == *(_QWORD *)(v4 + 8 * v10) + (v12 << 6))
    return 0;
  if (v9 == *v7)
    v9 = *(v7 - 1) + 4096;
  v17 = *(_OWORD *)(v9 - 64);
  v18 = *(_OWORD *)(v9 - 48);
  v19 = *(_OWORD *)(v9 - 16);
  a2[2] = *(_OWORD *)(v9 - 32);
  a2[3] = v19;
  *a2 = v17;
  a2[1] = v18;
  return 1;
}

uint64_t sub_1010699E0(uint64_t a1, _OWORD *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v3 = *(_QWORD *)(a1 + 56);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 32) == v4)
    return 0;
  v5 = *(_QWORD *)(a1 + 48);
  v6 = v5 + v3;
  v7 = (uint64_t *)(v4 + 8 * (v6 / 0x17));
  v8 = *v7;
  v9 = *v7 + 176 * (v6 % 0x17);
  v10 = v5 / 0x17;
  v11 = *(_QWORD *)(v4 + 8 * (v5 / 0x17));
  v12 = v5 % 0x17;
  v13 = v11 + 176 * v12;
  if (v9 != v13)
  {
    while (1)
    {
      v14 = v9;
      if (v9 == v8)
        v14 = *(v7 - 1) + 4048;
      v15 = *(double *)(v14 - 168);
      if (v15 <= a3 && v15 > a3 - *(double *)(a1 + 80))
        break;
      if (v9 == v8)
      {
        v16 = *--v7;
        v8 = v16;
        v9 = v16 + 4048;
      }
      v9 -= 176;
      if (v9 == v13)
      {
        v9 = v11 + 176 * v12;
        break;
      }
    }
  }
  if (v9 == *(_QWORD *)(v4 + 8 * v10) + 176 * v12)
    return 0;
  if (v9 == *v7)
    v9 = *(v7 - 1) + 4048;
  v17 = *(_OWORD *)(v9 - 176);
  v18 = *(_OWORD *)(v9 - 144);
  a2[1] = *(_OWORD *)(v9 - 160);
  a2[2] = v18;
  *a2 = v17;
  v19 = *(_OWORD *)(v9 - 128);
  v20 = *(_OWORD *)(v9 - 112);
  v21 = *(_OWORD *)(v9 - 80);
  a2[5] = *(_OWORD *)(v9 - 96);
  a2[6] = v21;
  a2[3] = v19;
  a2[4] = v20;
  v22 = *(_OWORD *)(v9 - 64);
  v23 = *(_OWORD *)(v9 - 48);
  v24 = *(_OWORD *)(v9 - 16);
  a2[9] = *(_OWORD *)(v9 - 32);
  a2[10] = v24;
  a2[7] = v22;
  a2[8] = v23;
  return 1;
}

uint64_t sub_101069B10(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v3 = *(_QWORD *)(a1 + 56);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 32) == v4)
    return 0;
  v5 = *(_QWORD *)(a1 + 48);
  v6 = v5 + v3;
  v7 = (v5 + v3) / 0x38;
  v8 = (uint64_t *)(v4 + 8 * v7);
  v9 = *v8;
  v10 = *v8 + 72 * (v6 - 56 * v7);
  v11 = v5 / 0x38;
  v12 = *(_QWORD *)(v4 + 8 * (v5 / 0x38));
  v13 = v5 % 0x38;
  v14 = v12 + 72 * v13;
  if (v10 != v14)
  {
    while (1)
    {
      v15 = v10;
      if (v10 == v9)
        v15 = *(v8 - 1) + 4032;
      v16 = *(double *)(v15 - 72);
      if (v16 <= a3 && v16 > a3 - *(double *)(a1 + 80))
        break;
      if (v10 == v9)
      {
        v17 = *--v8;
        v9 = v17;
        v10 = v17 + 4032;
      }
      v10 -= 72;
      if (v10 == v14)
      {
        v10 = v12 + 72 * v13;
        break;
      }
    }
  }
  if (v10 == *(_QWORD *)(v4 + 8 * v11) + 72 * v13)
    return 0;
  if (v10 == *v8)
    v10 = *(v8 - 1) + 4032;
  *(_OWORD *)a2 = *(_OWORD *)(v10 - 72);
  v18 = *(_OWORD *)(v10 - 56);
  v19 = *(_OWORD *)(v10 - 40);
  v20 = *(_OWORD *)(v10 - 24);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(v10 - 8);
  *(_OWORD *)(a2 + 32) = v19;
  *(_OWORD *)(a2 + 48) = v20;
  *(_OWORD *)(a2 + 16) = v18;
  return 1;
}

uint64_t sub_101069C24(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  v3 = *(_QWORD *)(a1 + 56);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 32) == v4)
    return 0;
  v5 = *(_QWORD *)(a1 + 48);
  v6 = v5 + v3;
  v7 = (uint64_t *)(v4 + 8 * ((v5 + v3) / 0x66));
  v8 = *v7;
  v9 = *v7 + 40 * (v6 % 0x66);
  v10 = v5 / 0x66;
  v11 = *(_QWORD *)(v4 + 8 * (v5 / 0x66));
  v12 = v5 % 0x66;
  v13 = v11 + 40 * v12;
  if (v9 != v13)
  {
    while (1)
    {
      v14 = v9;
      if (v9 == v8)
        v14 = *(v7 - 1) + 4080;
      v15 = *(double *)(v14 - 40);
      if (v15 <= a3 && v15 > a3 - *(double *)(a1 + 80))
        break;
      if (v9 == v8)
      {
        v16 = *--v7;
        v8 = v16;
        v9 = v16 + 4080;
      }
      v9 -= 40;
      if (v9 == v13)
      {
        v9 = v11 + 40 * v12;
        break;
      }
    }
  }
  if (v9 == *(_QWORD *)(v4 + 8 * v10) + 40 * v12)
    return 0;
  if (v9 == *v7)
    v9 = *(v7 - 1) + 4080;
  v17 = *(_OWORD *)(v9 - 40);
  v18 = *(_OWORD *)(v9 - 24);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v9 - 8);
  *(_OWORD *)a2 = v17;
  *(_OWORD *)(a2 + 16) = v18;
  return 1;
}

uint64_t sub_101069D28(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v3 = *(_QWORD *)(a1 + 56);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 32) == v4)
    return 0;
  v5 = *(_QWORD *)(a1 + 48);
  v6 = v5 + v3;
  v7 = (uint64_t *)(v4 + 8 * (v6 / 0x1A));
  v8 = *v7;
  v9 = *v7 + 152 * (v6 % 0x1A);
  v10 = v5 / 0x1A;
  v11 = *(_QWORD *)(v4 + 8 * (v5 / 0x1A));
  v12 = v5 % 0x1A;
  v13 = v11 + 152 * v12;
  if (v9 != v13)
  {
    while (1)
    {
      v14 = v9;
      if (v9 == v8)
        v14 = *(v7 - 1) + 3952;
      v15 = *(double *)(v14 - 112);
      if (v15 <= a3 && v15 > a3 - *(double *)(a1 + 80))
        break;
      if (v9 == v8)
      {
        v16 = *--v7;
        v8 = v16;
        v9 = v16 + 3952;
      }
      v9 -= 152;
      if (v9 == v13)
      {
        v9 = v11 + 152 * v12;
        break;
      }
    }
  }
  if (v9 == *(_QWORD *)(v4 + 8 * v10) + 152 * v12)
    return 0;
  if (v9 == *v7)
    v9 = *(v7 - 1) + 3952;
  v17 = *(_OWORD *)(v9 - 136);
  *(_OWORD *)a2 = *(_OWORD *)(v9 - 152);
  *(_OWORD *)(a2 + 16) = v17;
  v18 = *(_OWORD *)(v9 - 120);
  v19 = *(_OWORD *)(v9 - 104);
  v20 = *(_OWORD *)(v9 - 72);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(v9 - 88);
  *(_OWORD *)(a2 + 80) = v20;
  *(_OWORD *)(a2 + 32) = v18;
  *(_OWORD *)(a2 + 48) = v19;
  v21 = *(_OWORD *)(v9 - 56);
  v22 = *(_OWORD *)(v9 - 40);
  v23 = *(_OWORD *)(v9 - 24);
  *(_QWORD *)(a2 + 144) = *(_QWORD *)(v9 - 8);
  *(_OWORD *)(a2 + 112) = v22;
  *(_OWORD *)(a2 + 128) = v23;
  *(_OWORD *)(a2 + 96) = v21;
  return 1;
}

uint64_t sub_101069E58(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  v3 = *(_QWORD *)(a1 + 56);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 32) == v4)
    return 0;
  v5 = *(_QWORD *)(a1 + 48);
  v6 = v5 + v3;
  v7 = (uint64_t *)(v4 + 8 * ((v5 + v3) / 0x66));
  v8 = *v7;
  v9 = *v7 + 40 * (v6 % 0x66);
  v10 = v5 / 0x66;
  v11 = *(_QWORD *)(v4 + 8 * (v5 / 0x66));
  v12 = v5 % 0x66;
  v13 = v11 + 40 * v12;
  if (v9 != v13)
  {
    while (1)
    {
      v14 = v9;
      if (v9 == v8)
        v14 = *(v7 - 1) + 4080;
      v15 = *(double *)(v14 - 40);
      if (v15 <= a3 && v15 > a3 - *(double *)(a1 + 80))
        break;
      if (v9 == v8)
      {
        v16 = *--v7;
        v8 = v16;
        v9 = v16 + 4080;
      }
      v9 -= 40;
      if (v9 == v13)
      {
        v9 = v11 + 40 * v12;
        break;
      }
    }
  }
  if (v9 == *(_QWORD *)(v4 + 8 * v10) + 40 * v12)
    return 0;
  if (v9 == *v7)
    v9 = *(v7 - 1) + 4080;
  v17 = *(_OWORD *)(v9 - 40);
  v18 = *(_OWORD *)(v9 - 24);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(v9 - 8);
  *(_OWORD *)a2 = v17;
  *(_OWORD *)(a2 + 16) = v18;
  return 1;
}

void sub_101069F5C(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t *v7;
  _DWORD *v8;
  _DWORD *v9;
  NSObject *v10;
  uint64_t *v11;
  uint64_t *v12;
  const char *v13;
  NSObject *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  NSObject *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  NSObject *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  NSObject *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  NSObject *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  NSObject *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  NSObject *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  NSObject *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  NSObject *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  NSObject *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  NSObject *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  NSObject *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint8_t *v62;
  uint64_t *v63;
  const char *v64;
  uint8_t *v65;
  int v66;
  uint64_t *v67;
  uint8_t buf[4];
  uint64_t *v69;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10219C750);
  v6 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a2 + 23) >= 0)
      v7 = a2;
    else
      v7 = (uint64_t *)*a2;
    *(_DWORD *)buf = 136315138;
    v69 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "logLatestTime for %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10219C750);
    if (*((char *)a2 + 23) >= 0)
      v63 = a2;
    else
      v63 = (uint64_t *)*a2;
    v66 = 136315138;
    v67 = v63;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "logLatestTime for %s", (const char *)&v66);
    v65 = (uint8_t *)v64;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictorInputs::logLatestTimes(const std::string &, const std::vector<Type> &) const", "%s\n", v64);
    if (v65 != buf)
      free(v65);
  }
  v8 = *(_DWORD **)a3;
  v9 = *(_DWORD **)(a3 + 8);
  if (*(_DWORD **)a3 != v9)
  {
    do
    {
      switch(*v8)
      {
        case 0:
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_10219C750);
          v10 = qword_10229FE68;
          if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
          {
            v11 = (uint64_t *)a1[14];
            *(_DWORD *)buf = 134217984;
            v69 = v11;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Activity,lastTime,%f", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FE60 != -1)
              dispatch_once(&qword_10229FE60, &stru_10219C750);
            v12 = (uint64_t *)a1[14];
            v66 = 134217984;
            v67 = v12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "Activity,lastTime,%f");
            goto LABEL_117;
          }
          break;
        case 1:
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_10219C750);
          v14 = qword_10229FE68;
          if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
          {
            v15 = *(uint64_t **)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 104))(*a1) + 360);
            *(_DWORD *)buf = 134217984;
            v69 = v15;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Elevation,lastTime,%f", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FE60 != -1)
              dispatch_once(&qword_10229FE60, &stru_10219C750);
            v16 = qword_10229FE68;
            v17 = *(uint64_t **)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 104))(*a1) + 360);
            v66 = 134217984;
            v67 = v17;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 1, "Elevation,lastTime,%f");
            goto LABEL_117;
          }
          break;
        case 2:
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_10219C750);
          v18 = qword_10229FE68;
          if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
          {
            v19 = *(uint64_t **)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 120))(*a1) + 96);
            *(_DWORD *)buf = 134217984;
            v69 = v19;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "GPS,lastTime,%f", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FE60 != -1)
              dispatch_once(&qword_10229FE60, &stru_10219C750);
            v20 = qword_10229FE68;
            v21 = *(uint64_t **)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 120))(*a1) + 96);
            v66 = 134217984;
            v67 = v21;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 1, "GPS,lastTime,%f");
            goto LABEL_117;
          }
          break;
        case 3:
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_10219C750);
          v22 = qword_10229FE68;
          if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
          {
            v23 = *(uint64_t **)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 112))(*a1) + 136);
            *(_DWORD *)buf = 134217984;
            v69 = v23;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "HR,lastTime,%f", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FE60 != -1)
              dispatch_once(&qword_10229FE60, &stru_10219C750);
            v24 = qword_10229FE68;
            v25 = *(uint64_t **)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 112))(*a1) + 136);
            v66 = 134217984;
            v67 = v25;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v24, 1, "HR,lastTime,%f");
            goto LABEL_117;
          }
          break;
        case 4:
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_10219C750);
          v26 = qword_10229FE68;
          if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
          {
            v27 = *(uint64_t **)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 128))(*a1) + 104);
            *(_DWORD *)buf = 134217984;
            v69 = v27;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Steps,lastTime,%f", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FE60 != -1)
              dispatch_once(&qword_10229FE60, &stru_10219C750);
            v28 = qword_10229FE68;
            v29 = *(uint64_t **)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 128))(*a1) + 104);
            v66 = 134217984;
            v67 = v29;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, 1, "Steps,lastTime,%f");
            goto LABEL_117;
          }
          break;
        case 5:
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_10219C750);
          v30 = qword_10229FE68;
          if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
          {
            v31 = *(uint64_t **)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 144))(*a1) + 96);
            *(_DWORD *)buf = 134217984;
            v69 = v31;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "Activity2,lastTime,%f", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FE60 != -1)
              dispatch_once(&qword_10229FE60, &stru_10219C750);
            v32 = qword_10229FE68;
            v33 = *(uint64_t **)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 144))(*a1) + 96);
            v66 = 134217984;
            v67 = v33;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v32, 1, "Activity2,lastTime,%f");
            goto LABEL_117;
          }
          break;
        case 6:
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_10219C750);
          v34 = qword_10229FE68;
          if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
          {
            v35 = *(uint64_t **)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 152))(*a1) + 96);
            *(_DWORD *)buf = 134217984;
            v69 = v35;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "Activity2Smooth,lastTime,%f", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FE60 != -1)
              dispatch_once(&qword_10229FE60, &stru_10219C750);
            v36 = qword_10229FE68;
            v37 = *(uint64_t **)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 152))(*a1) + 96);
            v66 = 134217984;
            v67 = v37;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 1, "Activity2Smooth,lastTime,%f");
            goto LABEL_117;
          }
          break;
        case 7:
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_10219C750);
          v38 = qword_10229FE68;
          if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
          {
            v39 = *(uint64_t **)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 160))(*a1) + 96);
            *(_DWORD *)buf = 134217984;
            v69 = v39;
            _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "Turns,lastTime,%f", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FE60 != -1)
              dispatch_once(&qword_10229FE60, &stru_10219C750);
            v40 = qword_10229FE68;
            v41 = *(uint64_t **)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 160))(*a1) + 96);
            v66 = 134217984;
            v67 = v41;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v40, 1, "Turns,lastTime,%f");
            goto LABEL_117;
          }
          break;
        case 8:
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_10219C750);
          v42 = qword_10229FE68;
          if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
          {
            v43 = *(uint64_t **)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 136))(*a1) + 96);
            *(_DWORD *)buf = 134217984;
            v69 = v43;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "ExtendedSteps,lastTime,%f", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FE60 != -1)
              dispatch_once(&qword_10229FE60, &stru_10219C750);
            v44 = qword_10229FE68;
            v45 = *(uint64_t **)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 136))(*a1) + 96);
            v66 = 134217984;
            v67 = v45;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v44, 1, "ExtendedSteps,lastTime,%f");
            goto LABEL_117;
          }
          break;
        case 9:
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_10219C750);
          v46 = qword_10229FE68;
          if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
          {
            v47 = *(uint64_t **)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 168))(*a1) + 136);
            *(_DWORD *)buf = 134217984;
            v69 = v47;
            _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "Swim,lastTime,%f", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FE60 != -1)
              dispatch_once(&qword_10229FE60, &stru_10219C750);
            v48 = qword_10229FE68;
            v49 = *(uint64_t **)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 168))(*a1) + 136);
            v66 = 134217984;
            v67 = v49;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v48, 1, "Swim,lastTime,%f");
            goto LABEL_117;
          }
          break;
        case 0xA:
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_10219C750);
          v50 = qword_10229FE68;
          if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
          {
            v51 = *(uint64_t **)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 176))(*a1) + 96);
            *(_DWORD *)buf = 134217984;
            v69 = v51;
            _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "WatchPressure,lastTime,%f", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FE60 != -1)
              dispatch_once(&qword_10229FE60, &stru_10219C750);
            v52 = qword_10229FE68;
            v53 = *(uint64_t **)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 176))(*a1) + 96);
            v66 = 134217984;
            v67 = v53;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v52, 1, "WatchPressure,lastTime,%f");
            goto LABEL_117;
          }
          break;
        case 0xB:
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_10219C750);
          v54 = qword_10229FE68;
          if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
          {
            v55 = *(uint64_t **)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 192))(*a1) + 96);
            *(_DWORD *)buf = 134217984;
            v69 = v55;
            _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_INFO, "CyclingState,lastTime,%f", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FE60 != -1)
              dispatch_once(&qword_10229FE60, &stru_10219C750);
            v56 = qword_10229FE68;
            v57 = *(uint64_t **)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 192))(*a1) + 96);
            v66 = 134217984;
            v67 = v57;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v56, 1, "CyclingState,lastTime,%f");
            goto LABEL_117;
          }
          break;
        case 0xC:
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_10219C750);
          v58 = qword_10229FE68;
          if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
          {
            v59 = *(uint64_t **)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 200))(*a1) + 96);
            *(_DWORD *)buf = 134217984;
            v69 = v59;
            _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_INFO, "Tier1CyclingFeatures,lastTime,%f", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FE60 != -1)
              dispatch_once(&qword_10229FE60, &stru_10219C750);
            v60 = qword_10229FE68;
            v61 = *(uint64_t **)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 200))(*a1) + 96);
            v66 = 134217984;
            v67 = v61;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v60, 1, "Tier1CyclingFeatures,lastTime,%f");
LABEL_117:
            v62 = (uint8_t *)v13;
            sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictorInputs::logLatestTimes(const std::string &, const std::vector<Type> &) const", "%s\n", v13);
            if (v62 != buf)
              free(v62);
          }
          break;
        default:
          break;
      }
      ++v8;
    }
    while (v8 != v9);
  }
}

void sub_10106AFF4(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  double v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10219C750);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    v3 = a1[5];
    v4 = a1[1];
    v5 = a1[2];
    *(_DWORD *)buf = 134218496;
    v19 = v3;
    v20 = 2048;
    v21 = v4;
    v22 = 2048;
    v23 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "HeartRate,%f,hr,%f,conf,%f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10219C750);
    v6 = a1[5];
    v7 = a1[1];
    v8 = a1[2];
    v12 = 134218496;
    v13 = v6;
    v14 = 2048;
    v15 = v7;
    v16 = 2048;
    v17 = v8;
    LODWORD(v11) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "HeartRate,%f,hr,%f,conf,%f", COERCE_DOUBLE(&v12), v11);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "static void CLWorkoutPredictorInputs::logHeartRate(const CLWorkoutPredictorHeartRate &)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
}

void sub_10106B1D4(uint64_t *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  double v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10219C750);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    v3 = *a1;
    v5 = a1[4];
    v4 = a1[5];
    v6 = a1[7];
    *(_DWORD *)buf = 134219008;
    v25 = v3;
    v26 = 2048;
    v27 = v4;
    v28 = 2048;
    v29 = v5;
    v30 = 2048;
    v31 = v6;
    v32 = 2048;
    v33 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Odometer,%f,rawSpeed,%f,speed,%f,speedAccuracy,%f,startTime,%f", buf, 0x34u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10219C750);
    v7 = *a1;
    v9 = a1[4];
    v8 = a1[5];
    v10 = a1[7];
    v14 = 134219008;
    v15 = v7;
    v16 = 2048;
    v17 = v8;
    v18 = 2048;
    v19 = v9;
    v20 = 2048;
    v21 = v10;
    v22 = 2048;
    v23 = v7;
    LODWORD(v13) = 52;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Odometer,%f,rawSpeed,%f,speed,%f,speedAccuracy,%f,startTime,%f", COERCE_DOUBLE(&v14), v13);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "static void CLWorkoutPredictorInputs::logGPS(const CLWorkoutPredictorGPS &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
}

void sub_10106B3DC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  double v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  int v29;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10219C750);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *(_QWORD *)(a1 + 72);
    v5 = *(_QWORD *)(a1 + 80);
    v6 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)buf = 134218752;
    v23 = v3;
    v24 = 2048;
    v25 = v4;
    v26 = 2048;
    v27 = v5;
    v28 = 1024;
    v29 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Steps,%f,pace,%f,cadence,%f,count,%d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10219C750);
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 72);
    v9 = *(_QWORD *)(a1 + 80);
    v10 = *(_DWORD *)(a1 + 24);
    v14 = 134218752;
    v15 = v7;
    v16 = 2048;
    v17 = v8;
    v18 = 2048;
    v19 = v9;
    v20 = 1024;
    v21 = v10;
    LODWORD(v13) = 38;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Steps,%f,pace,%f,cadence,%f,count,%d", COERCE_DOUBLE(&v14), v13);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "static void CLWorkoutPredictorInputs::logStep(const CLWorkoutPredictorStep &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
}

void sub_10106B5DC(uint64_t *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10219C750);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    v3 = *a1;
    v4 = a1[1];
    *(_DWORD *)buf = 134218496;
    v16 = v3;
    v17 = 2048;
    v18 = v4;
    v19 = 2048;
    v20 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Activity2,%f,result,%lu,startTime,%f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10219C750);
    v5 = *a1;
    v6 = a1[1];
    v9 = 134218496;
    v10 = v5;
    v11 = 2048;
    v12 = v6;
    v13 = 2048;
    v14 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Activity2,%f,result,%lu,startTime,%f", COERCE_DOUBLE(&v9), 32);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "static void CLWorkoutPredictorInputs::logActivityTier2(const CLWorkoutPredictorActivityTier2 &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

void sub_10106B7B4(uint64_t *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10219C750);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    v3 = *a1;
    v4 = a1[1];
    *(_DWORD *)buf = 134218496;
    v16 = v3;
    v17 = 2048;
    v18 = v4;
    v19 = 2048;
    v20 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Tier2Smooth,%f,result,%lu,startTime,%f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10219C750);
    v5 = *a1;
    v6 = a1[1];
    v9 = 134218496;
    v10 = v5;
    v11 = 2048;
    v12 = v6;
    v13 = 2048;
    v14 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Tier2Smooth,%f,result,%lu,startTime,%f", COERCE_DOUBLE(&v9), 32);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "static void CLWorkoutPredictorInputs::logActivityTier2Smoothed(const CLWorkoutPredictorActivityTier2Smoothed &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

void sub_10106B98C(float *a1)
{
  NSObject *v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  const char *v11;
  uint8_t *v12;
  double v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  double v17;
  __int16 v18;
  double v19;
  __int16 v20;
  double v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10219C750);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)a1;
    v4 = a1[2];
    v5 = a1[6];
    v6 = a1[7];
    *(_DWORD *)buf = 134218752;
    v23 = v3;
    v24 = 2048;
    v25 = v4;
    v26 = 2048;
    v27 = v5;
    v28 = 2048;
    v29 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Turn,%f,%f,%f,%f", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10219C750);
    v7 = *(_QWORD *)a1;
    v8 = a1[2];
    v9 = a1[6];
    v10 = a1[7];
    v14 = 134218752;
    v15 = v7;
    v16 = 2048;
    v17 = v8;
    v18 = 2048;
    v19 = v9;
    v20 = 2048;
    v21 = v10;
    LODWORD(v13) = 42;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Turn,%f,%f,%f,%f", COERCE_DOUBLE(&v14), v13);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "static void CLWorkoutPredictorInputs::logTurn(const CLWorkoutPredictorTurn &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
}

void sub_10106BB9C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10219C750);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 40);
    v5 = *(_DWORD *)(a1 + 100);
    v4 = *(_DWORD *)(a1 + 104);
    *(_DWORD *)buf = 134218496;
    v18 = v3;
    v19 = 1024;
    v20 = v4;
    v21 = 1024;
    v22 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Swim,startTime,%f,strokes,%d,style,%d\n", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10219C750);
    v6 = *(_QWORD *)(a1 + 40);
    v8 = *(_DWORD *)(a1 + 100);
    v7 = *(_DWORD *)(a1 + 104);
    v11 = 134218496;
    v12 = v6;
    v13 = 1024;
    v14 = v7;
    v15 = 1024;
    v16 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Swim,startTime,%f,strokes,%d,style,%d\n", COERCE_DOUBLE(&v11), 24);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "static void CLWorkoutPredictorInputs::logSwim(const CLWorkoutPredictorSwim &)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
}

void sub_10106BD7C(uint64_t *a1)
{
  __int16 v2;
  unsigned int v3;
  NSObject *v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  double v8;
  const char *v9;
  uint8_t *v10;
  double v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  double v15;
  __int16 v16;
  unsigned int v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  double v21;
  __int16 v22;
  unsigned int v23;

  v2 = *((_WORD *)a1 + 4);
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10219C750);
  v3 = v2 & 0x1000;
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a1;
    v6 = *((float *)a1 + 3);
    *(_DWORD *)buf = 134218496;
    v19 = v5;
    v20 = 2048;
    v21 = v6;
    v22 = 1024;
    v23 = v3 >> 12;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "WatchPressure,startTime,%f,averagePressure,%f,failureState,%d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10219C750);
    v7 = *a1;
    v8 = *((float *)a1 + 3);
    v12 = 134218496;
    v13 = v7;
    v14 = 2048;
    v15 = v8;
    v16 = 1024;
    v17 = v3 >> 12;
    LODWORD(v11) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "WatchPressure,startTime,%f,averagePressure,%f,failureState,%d", COERCE_DOUBLE(&v12), v11);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "static void CLWorkoutPredictorInputs::logWatchPressure(const CLWorkoutPredictorWatchPressure &)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
}

void sub_10106BF7C(uint64_t *a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  uint8_t buf[4];
  uint64_t v14;
  __int16 v15;
  int v16;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10219C750);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    v3 = *a1;
    v4 = *((_DWORD *)a1 + 2);
    *(_DWORD *)buf = 134218240;
    v14 = v3;
    v15 = 1024;
    v16 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CyclingState,%.3f,state,%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10219C750);
    v5 = *a1;
    v6 = *((_DWORD *)a1 + 2);
    v9 = 134218240;
    v10 = v5;
    v11 = 1024;
    v12 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "CyclingState,%.3f,state,%d", COERCE_DOUBLE(&v9), 18);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "static void CLWorkoutPredictorInputs::logCyclingState(const CLWorkoutPredictorCyclingState &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

void sub_10106C14C(float *a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  int v10;
  double v11;
  double v12;
  double v13;
  double v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  __int16 v21;
  double v22;
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;
  uint8_t buf[4];
  uint64_t v30;
  __int16 v31;
  int v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10219C750);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)a1;
    v4 = *((unsigned __int8 *)a1 + 8);
    v5 = a1[3];
    v6 = a1[4];
    v7 = a1[5];
    v8 = a1[8];
    *(_DWORD *)buf = 134219264;
    v30 = v3;
    v31 = 1024;
    v32 = v4;
    v33 = 2048;
    v34 = v5;
    v35 = 2048;
    v36 = v6;
    v37 = 2048;
    v38 = v7;
    v39 = 2048;
    v40 = v8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Tier1CyclingFeatures,%.3f,isArmConstrained,%d,accelXPowerSum,%f,grav90th_100Hz,%f,cyclingProbability,%f,pedEnergyVertical,%f", buf, 0x3Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10219C750);
    v9 = *(_QWORD *)a1;
    v10 = *((unsigned __int8 *)a1 + 8);
    v11 = a1[3];
    v12 = a1[4];
    v13 = a1[5];
    v14 = a1[8];
    v17 = 134219264;
    v18 = v9;
    v19 = 1024;
    v20 = v10;
    v21 = 2048;
    v22 = v11;
    v23 = 2048;
    v24 = v12;
    v25 = 2048;
    v26 = v13;
    v27 = 2048;
    v28 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Tier1CyclingFeatures,%.3f,isArmConstrained,%d,accelXPowerSum,%f,grav90th_100Hz,%f,cyclingProbability,%f,pedEnergyVertical,%f", COERCE_DOUBLE(&v17), 58);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "static void CLWorkoutPredictorInputs::logTier1CyclingFeatures(const CLWorkoutPredictorTier1CyclingFeatures &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
}

void sub_10106C39C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  uint64_t v8;
  uint8_t buf[4];
  uint64_t v10;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10219C750);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 134217984;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "ExerciseMinute,%.3f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10219C750);
    v4 = *(_QWORD *)(a1 + 8);
    v7 = 134217984;
    v8 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "ExerciseMinute,%.3f", COERCE_DOUBLE(&v7));
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "static void CLWorkoutPredictorInputs::logExerciseMinute(const CLWorkoutPredictorExerciseMinute &)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
}

void sub_10106C54C(_QWORD *a1, __int128 *a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 144))(*a1);
  sub_10106C57C(v3, a2);
}

void sub_10106C57C(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void **v8;
  double v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  __int128 v15;
  __int128 v16;
  const char *v17;
  uint8_t *v18;
  double v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int16 v27;
  double v28;
  uint8_t buf[4];
  uint64_t v30;
  __int16 v31;
  double v32;

  v3 = a2[3];
  v22 = a2[2];
  v23 = v3;
  v24 = *((_QWORD *)a2 + 8);
  v4 = a2[1];
  v20 = *a2;
  v21 = v4;
  v5 = *(_QWORD *)(a1 + 192);
  if (v5)
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v5 + 48))(v5, &v20);
  v6 = *(_QWORD *)(a1 + 56);
  if (v6)
  {
    v7 = v6 + *(_QWORD *)(a1 + 48) - 1;
    v8 = *(void ***)(a1 + 24);
    v9 = *((double *)v8[v7 / 0x38] + 9 * (v7 % 0x38));
    if (v9 > *(double *)&v20)
    {
      v10 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 56) = 0;
      v11 = v10 - (_QWORD)v8;
      if (v11 >= 0x11)
      {
        do
        {
          operator delete(*v8);
          v12 = *(_QWORD *)(a1 + 32);
          v8 = (void **)(*(_QWORD *)(a1 + 24) + 8);
          *(_QWORD *)(a1 + 24) = v8;
          v11 = v12 - (_QWORD)v8;
        }
        while (v11 > 0x10);
      }
      if (v11 >> 3 == 1)
      {
        v13 = 28;
      }
      else
      {
        if (v11 >> 3 != 2)
        {
LABEL_12:
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10219D0B0);
          v14 = qword_10229FC78;
          if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134218240;
            v30 = v20;
            v31 = 2048;
            v32 = v9;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "time rollback on add, newItemTime, %f, lastItemTime, %f", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC70 != -1)
              dispatch_once(&qword_10229FC70, &stru_10219D0B0);
            v25 = 134218240;
            v26 = v20;
            v27 = 2048;
            v28 = v9;
            LODWORD(v19) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on add, newItemTime, %f, lastItemTime, %f", COERCE_DOUBLE(&v25), v19);
            v18 = (uint8_t *)v17;
            sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLWorkoutClassifier_Type::WorkoutClassifierResult>::add(const T &) [T = CLWorkoutClassifier_Type::WorkoutClassifierResult]", "%s\n", v17);
            if (v18 != buf)
              free(v18);
          }
          goto LABEL_17;
        }
        v13 = 56;
      }
      *(_QWORD *)(a1 + 48) = v13;
      goto LABEL_12;
    }
  }
LABEL_17:
  sub_1005549C4((_QWORD *)(a1 + 16), (uint64_t)&v20);
  v15 = v23;
  *(_OWORD *)(a1 + 128) = v22;
  *(_OWORD *)(a1 + 144) = v15;
  *(_QWORD *)(a1 + 160) = v24;
  v16 = v21;
  *(_OWORD *)(a1 + 96) = v20;
  *(_OWORD *)(a1 + 112) = v16;
}

void sub_10106C850(_QWORD *a1, __int128 *a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 152))(*a1);
  sub_10106C880(v3, a2);
}

void sub_10106C880(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void **v7;
  double v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  __int128 v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  double v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  double v28;

  v3 = a2[1];
  v18 = *a2;
  v19 = v3;
  v20 = *((_QWORD *)a2 + 4);
  v4 = *(_QWORD *)(a1 + 160);
  if (v4)
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v4 + 48))(v4, &v18);
  v5 = *(_QWORD *)(a1 + 56);
  if (v5)
  {
    v6 = v5 + *(_QWORD *)(a1 + 48) - 1;
    v7 = *(void ***)(a1 + 24);
    v8 = *((double *)v7[v6 / 0x66] + 5 * (v6 % 0x66));
    if (v8 > *(double *)&v18)
    {
      v9 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 56) = 0;
      v10 = v9 - (_QWORD)v7;
      if (v10 >= 0x11)
      {
        do
        {
          operator delete(*v7);
          v11 = *(_QWORD *)(a1 + 32);
          v7 = (void **)(*(_QWORD *)(a1 + 24) + 8);
          *(_QWORD *)(a1 + 24) = v7;
          v10 = v11 - (_QWORD)v7;
        }
        while (v10 > 0x10);
      }
      if (v10 >> 3 == 1)
      {
        v12 = 51;
      }
      else
      {
        if (v10 >> 3 != 2)
        {
LABEL_12:
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10219D0B0);
          v13 = qword_10229FC78;
          if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134218240;
            v26 = v18;
            v27 = 2048;
            v28 = v8;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "time rollback on add, newItemTime, %f, lastItemTime, %f", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC70 != -1)
              dispatch_once(&qword_10229FC70, &stru_10219D0B0);
            v21 = 134218240;
            v22 = v18;
            v23 = 2048;
            v24 = v8;
            LODWORD(v17) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on add, newItemTime, %f, lastItemTime, %f", COERCE_DOUBLE(&v21), v17);
            v16 = (uint8_t *)v15;
            sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLWorkoutClassifier_Type::SmoothedTier2ClassifierResult>::add(const T &) [T = CLWorkoutClassifier_Type::SmoothedTier2ClassifierResult]", "%s\n", v15);
            if (v16 != buf)
              free(v16);
          }
          goto LABEL_17;
        }
        v12 = 102;
      }
      *(_QWORD *)(a1 + 48) = v12;
      goto LABEL_12;
    }
  }
LABEL_17:
  sub_10106ED4C((_QWORD *)(a1 + 16), (uint64_t)&v18);
  v14 = v19;
  *(_OWORD *)(a1 + 96) = v18;
  *(_OWORD *)(a1 + 112) = v14;
  *(_QWORD *)(a1 + 128) = v20;
}

void sub_10106CB44(_QWORD *a1, __n128 *a2)
{
  __n128 *v3;

  v3 = (__n128 *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 192))(*a1);
  sub_10106CB74(v3, a2);
}

void sub_10106CB74(__n128 *a1, __n128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void **v6;
  double v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  double v15;
  __n128 v16;
  int v17;
  unint64_t v18;
  __int16 v19;
  double v20;
  uint8_t buf[4];
  unint64_t v22;
  __int16 v23;
  double v24;

  v16 = *a2;
  v3 = a1[8].n128_u64[1];
  if (v3)
    (*(void (**)(unint64_t, __n128 *))(*(_QWORD *)v3 + 48))(v3, &v16);
  v4 = a1[3].n128_u64[1];
  if (v4)
  {
    v5 = v4 + a1[3].n128_u64[0] - 1;
    v6 = (void **)a1[1].n128_u64[1];
    v7 = (*(double **)((char *)v6 + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8)))[2 * v5];
    if (v7 > v16.n128_f64[0])
    {
      v8 = a1[2].n128_u64[0];
      a1[3].n128_u64[1] = 0;
      v9 = v8 - (_QWORD)v6;
      if (v9 >= 0x11)
      {
        do
        {
          operator delete(*v6);
          v10 = a1[2].n128_u64[0];
          v6 = (void **)(a1[1].n128_u64[1] + 8);
          a1[1].n128_u64[1] = (unint64_t)v6;
          v9 = v10 - (_QWORD)v6;
        }
        while (v9 > 0x10);
      }
      if (v9 >> 3 == 1)
      {
        v11 = 128;
      }
      else
      {
        if (v9 >> 3 != 2)
        {
LABEL_12:
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10219D0B0);
          v12 = qword_10229FC78;
          if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134218240;
            v22 = v16.n128_u64[0];
            v23 = 2048;
            v24 = v7;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "time rollback on add, newItemTime, %f, lastItemTime, %f", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC70 != -1)
              dispatch_once(&qword_10229FC70, &stru_10219D0B0);
            v17 = 134218240;
            v18 = v16.n128_u64[0];
            v19 = 2048;
            v20 = v7;
            LODWORD(v15) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on add, newItemTime, %f, lastItemTime, %f", COERCE_DOUBLE(&v17), v15);
            v14 = (uint8_t *)v13;
            sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLCyclingStateDetector_Type::CyclingResult>::add(const T &) [T = CLCyclingStateDetector_Type::CyclingResult]", "%s\n", v13);
            if (v14 != buf)
              free(v14);
          }
          goto LABEL_17;
        }
        v11 = 256;
      }
      a1[3].n128_u64[0] = v11;
      goto LABEL_12;
    }
  }
LABEL_17:
  sub_10106F114((__n128 *)a1[1].n128_u64, &v16);
  a1[6] = v16;
}

void sub_10106CE10(_QWORD *a1, __int128 *a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 120))(*a1);
  sub_1006C95A0(v3, a2);
}

float sub_10106CE40(_QWORD *a1, double a2, double a3)
{
  uint64_t v5;
  float v6;
  uint64_t v7;
  int v8;
  double v9;
  double v10;
  double v11;
  _OWORD v13[12];

  v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 120))(*a1);
  v6 = 0.0;
  if (a3 > 0.0)
  {
    v7 = v5;
    v8 = 1;
    v9 = 0.0;
    v10 = 0.0;
    do
    {
      memset(v13, 0, sizeof(v13));
      if (sub_1000E1198(v7, v13, a2 - v9) && (v11 = *(double *)v13, v10 != *(double *)v13))
      {
        if (*(double *)v13 <= a2 - a3)
          return v6;
        v6 = fmax(*((double *)v13 + 1), 0.0) + v6;
      }
      else
      {
        v11 = v10;
      }
      v9 = (double)v8++;
      v10 = v11;
    }
    while (v9 < a3);
  }
  return v6;
}

void sub_10106CF38(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

_QWORD *sub_10106CF64(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10219C780;
  result[1] = v3;
  return result;
}

uint64_t sub_10106CF9C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10219C780;
  a2[1] = v2;
  return result;
}

uint64_t sub_10106CFBC(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_10219C7F0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10106CFF8()
{
  return &off_10219C7F0;
}

_QWORD *sub_10106D004(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_10106D09C(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_10106D09C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10106D204(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_10106D210(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10219C820;
  result[1] = v3;
  return result;
}

uint64_t sub_10106D248(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10219C820;
  a2[1] = v2;
  return result;
}

uint64_t sub_10106D268(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_10219C8A0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10106D2A4()
{
  return &off_10219C8A0;
}

_QWORD *sub_10106D2B0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10219C8D0;
  result[1] = v3;
  return result;
}

uint64_t sub_10106D2E8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10219C8D0;
  a2[1] = v2;
  return result;
}

uint64_t sub_10106D308(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_10106D314(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_10219C940))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10106D350()
{
  return &off_10219C940;
}

_QWORD *sub_10106D35C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_10106D3F4(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_10106D3F4(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10106D55C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_10106D568(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10219C970;
  result[1] = v3;
  return result;
}

uint64_t sub_10106D5A0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10219C970;
  a2[1] = v2;
  return result;
}

uint64_t sub_10106D5C0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_10106D5CC(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_10219C9F0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10106D608()
{
  return &off_10219C9F0;
}

_QWORD *sub_10106D614(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_10106D6AC(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_10106D6AC(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10106D814(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_10106D820(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10219CA20;
  result[1] = v3;
  return result;
}

uint64_t sub_10106D858(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10219CA20;
  a2[1] = v2;
  return result;
}

uint64_t sub_10106D878(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_10106D884(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_10219CAA0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10106D8C0()
{
  return &off_10219CAA0;
}

_QWORD *sub_10106D8CC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10219CAD0;
  result[1] = v3;
  return result;
}

uint64_t sub_10106D904(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10219CAD0;
  a2[1] = v2;
  return result;
}

uint64_t sub_10106D924(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_10219CB40))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10106D960()
{
  return &off_10219CB40;
}

_QWORD *sub_10106D96C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_10106DA04(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_10106DA04(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10106DB6C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_10106DB78(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10219CB70;
  result[1] = v3;
  return result;
}

uint64_t sub_10106DBB0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10219CB70;
  a2[1] = v2;
  return result;
}

uint64_t sub_10106DBD0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_10106DBDC(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_10219CBF0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10106DC18()
{
  return &off_10219CBF0;
}

_QWORD *sub_10106DC24(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_10106DCBC(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_10106DCBC(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10106DE24(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_10106DE30(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10219CC20;
  result[1] = v3;
  return result;
}

uint64_t sub_10106DE68(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10219CC20;
  a2[1] = v2;
  return result;
}

uint64_t sub_10106DE88(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_10106DE94(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_10219CCA0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10106DED0()
{
  return &off_10219CCA0;
}

_QWORD *sub_10106DEDC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10219CCD0;
  result[1] = v3;
  return result;
}

uint64_t sub_10106DF14(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10219CCD0;
  a2[1] = v2;
  return result;
}

uint64_t sub_10106DF34(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_10106DF40(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_10219CD40))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10106DF7C()
{
  return &off_10219CD40;
}

_QWORD *sub_10106DF88(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_10106E020(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_10106E020(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10106E188(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_10106E194(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10219CD70;
  result[1] = v3;
  return result;
}

uint64_t sub_10106E1CC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10219CD70;
  a2[1] = v2;
  return result;
}

uint64_t sub_10106E1EC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_10106E1F8(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_10219CDF0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10106E234()
{
  return &off_10219CDF0;
}

_QWORD *sub_10106E240(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_10106E2D8(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_10106E2D8(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10106E440(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_10106E44C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10219CE20;
  result[1] = v3;
  return result;
}

uint64_t sub_10106E484(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10219CE20;
  a2[1] = v2;
  return result;
}

uint64_t sub_10106E4A4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_10106E4B0(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_10219CE90))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10106E4EC()
{
  return &off_10219CE90;
}

_QWORD *sub_10106E4F8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_10106E590(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_10106E590(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10106E6F8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_10106E704(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10219CEC0;
  result[1] = v3;
  return result;
}

uint64_t sub_10106E73C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10219CEC0;
  a2[1] = v2;
  return result;
}

uint64_t sub_10106E75C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_10106E768(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_10219CF40))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10106E7A4()
{
  return &off_10219CF40;
}

_QWORD *sub_10106E7B0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_10106E848(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_10106E848(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10106E9B0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_10106E9BC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10219CF70;
  result[1] = v3;
  return result;
}

uint64_t sub_10106E9F4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10219CF70;
  a2[1] = v2;
  return result;
}

uint64_t sub_10106EA14(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_10106EA20(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_10219CFF0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10106EA5C()
{
  return &off_10219CFF0;
}

_QWORD *sub_10106EA68(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_10106EB00(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_10106EB00(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10106EC68(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_10106EC74(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10219D020;
  result[1] = v3;
  return result;
}

uint64_t sub_10106ECAC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10219D020;
  a2[1] = v2;
  return result;
}

uint64_t sub_10106ECCC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_10106ECD8(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_10219D090))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10106ED14()
{
  return &off_10219D090;
}

void sub_10106ED20(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

__n128 sub_10106ED4C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __n128 result;
  __int128 v10;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 102 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10106EE00(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)v8 = result;
  *(_OWORD *)(v8 + 16) = v10;
  ++a1[5];
  return result;
}

void sub_10106EE00(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x66;
  v4 = v2 - 102;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_10106F0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 sub_10106F114(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10106F19C(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void sub_10106F19C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_10106F464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_10106F4B0(_QWORD *result, double *a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  double *v6;
  double *v7;
  _QWORD *v8;
  double *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double *v13;

  if (a2 != (double *)a4)
  {
    while (*(double *)&a5 - a2[1] <= *(double *)(a6 + 344))
    {
      a2 += 8;
      if ((double *)((char *)a2 - *result) == (double *)4096)
      {
        v6 = (double *)result[1];
        ++result;
        a2 = v6;
      }
      if (a2 == (double *)a4)
        return result;
    }
  }
  if (a2 != (double *)a4)
  {
    v7 = a2;
    v8 = result;
    while (1)
    {
      v7 += 8;
      if ((double *)((char *)v7 - *v8) == (double *)4096)
      {
        v9 = (double *)v8[1];
        ++v8;
        v7 = v9;
      }
      if (v7 == (double *)a4)
        break;
      if (*(double *)&a5 - v7[1] <= *(double *)(a6 + 344))
      {
        v10 = *(_OWORD *)v7;
        v11 = *((_OWORD *)v7 + 1);
        v12 = *((_OWORD *)v7 + 3);
        *((_OWORD *)a2 + 2) = *((_OWORD *)v7 + 2);
        *((_OWORD *)a2 + 3) = v12;
        *(_OWORD *)a2 = v10;
        *((_OWORD *)a2 + 1) = v11;
        a2 += 8;
        if ((double *)((char *)a2 - *result) == (double *)4096)
        {
          v13 = (double *)result[1];
          ++result;
          a2 = v13;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_10106F568(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = a2 + ((uint64_t)(*(_QWORD *)(a1 + 8) - *result) >> 6);
    if (v4 < 1)
      result -= (unint64_t)(63 - v4) >> 6;
    else
      result += (unint64_t)v4 >> 6;
  }
  return result;
}

uint64_t sub_10106F5CC(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 8 * (v2 - v3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x40)
    a2 = 1;
  if (v5 < 0x80)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

__n128 sub_10106F638@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, _QWORD *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  char *v12;
  char **v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_10106F704(v12, v14, v15, v16, &v21);
      v16 = (char *)v22.n128_u64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4096;
    }
    v18 = *a1 + 4096;
    v19 = a2;
  }
  sub_10106F704(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_10106F704@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *result;
  uint64_t v15;
  char *v16;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = (uint64_t)&a4[-v10];
      if ((v11 - a1) >> 6 >= v12 >> 6)
        v13 = v12 >> 6;
      else
        v13 = (v11 - a1) >> 6;
      v11 -= 64 * v13;
      a4 -= 64 * v13;
      if (v13)
        result = memmove(a4, v11, v13 << 6);
      if (v11 == a1)
        break;
      v15 = *--v6;
      v10 = v15;
      a4 = (char *)(v15 + 4096);
    }
    if ((char *)(*v6 + 4096) == a4)
    {
      v16 = (char *)v6[1];
      ++v6;
      a4 = v16;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_10106F7BC(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  char **v8;
  char *v9;
  char *v10;
  void **v11;
  char *v12;
  double result;
  char *v14;
  __int128 v15;

  if (a1 == a3)
  {
    v11 = *(void ***)a5;
    v12 = *(char **)(a5 + 8);
    v10 = __src;
  }
  else
  {
    v8 = a1 + 1;
    sub_10106F888(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      v9 = *v8++;
      sub_10106F888(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }
    v10 = *a3;
    v11 = *(void ***)a5;
    v12 = *(char **)(a5 + 8);
  }
  sub_10106F888(v10, v12, a4, v11, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *sub_10106F888@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  void **v6;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v6 = a4;
  if (__src != a3)
  {
    v9 = __src;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = v10 - __dst + 4096;
      v12 = (a3 - v9) >> 6 >= v11 >> 6 ? v11 >> 6 : (a3 - v9) >> 6;
      if (v12)
        __src = (char *)memmove(__dst, v9, v12 << 6);
      v9 += 64 * v12;
      if (v9 == a3)
        break;
      v13 = (char *)*v6++;
      v10 = v13;
      __dst = v13;
    }
    __dst += 64 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

_QWORD *sub_10106F944(_QWORD *result, double *a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  double *v6;
  double *v7;
  _QWORD *v8;
  double *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double *v13;

  if (a2 != (double *)a4)
  {
    while (*(double *)&a5 - a2[5] <= *(double *)(a6 + 88))
    {
      a2 += 8;
      if ((double *)((char *)a2 - *result) == (double *)4096)
      {
        v6 = (double *)result[1];
        ++result;
        a2 = v6;
      }
      if (a2 == (double *)a4)
        return result;
    }
  }
  if (a2 != (double *)a4)
  {
    v7 = a2;
    v8 = result;
    while (1)
    {
      v7 += 8;
      if ((double *)((char *)v7 - *v8) == (double *)4096)
      {
        v9 = (double *)v8[1];
        ++v8;
        v7 = v9;
      }
      if (v7 == (double *)a4)
        break;
      if (*(double *)&a5 - v7[5] <= *(double *)(a6 + 88))
      {
        v10 = *(_OWORD *)v7;
        v11 = *((_OWORD *)v7 + 1);
        v12 = *((_OWORD *)v7 + 3);
        *((_OWORD *)a2 + 2) = *((_OWORD *)v7 + 2);
        *((_OWORD *)a2 + 3) = v12;
        *(_OWORD *)a2 = v10;
        *((_OWORD *)a2 + 1) = v11;
        a2 += 8;
        if ((double *)((char *)a2 - *result) == (double *)4096)
        {
          v13 = (double *)result[1];
          ++result;
          a2 = v13;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_10106F9FC(_QWORD *result, double *a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  double *v6;
  double *v7;
  _QWORD *v8;
  double *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  double *v18;

  if (a2 != (double *)a4)
  {
    while (*(double *)&a5 - a2[1] <= *(double *)(a6 + 88))
    {
      a2 += 22;
      if ((double *)((char *)a2 - *result) == (double *)4048)
      {
        v6 = (double *)result[1];
        ++result;
        a2 = v6;
      }
      if (a2 == (double *)a4)
        return result;
    }
  }
  if (a2 != (double *)a4)
  {
    v7 = a2;
    v8 = result;
    while (1)
    {
      v7 += 22;
      if ((double *)((char *)v7 - *v8) == (double *)4048)
      {
        v9 = (double *)v8[1];
        ++v8;
        v7 = v9;
      }
      if (v7 == (double *)a4)
        break;
      if (*(double *)&a5 - v7[1] <= *(double *)(a6 + 88))
      {
        v10 = *(_OWORD *)v7;
        v11 = *((_OWORD *)v7 + 2);
        *((_OWORD *)a2 + 1) = *((_OWORD *)v7 + 1);
        *((_OWORD *)a2 + 2) = v11;
        *(_OWORD *)a2 = v10;
        v12 = *((_OWORD *)v7 + 3);
        v13 = *((_OWORD *)v7 + 4);
        v14 = *((_OWORD *)v7 + 6);
        *((_OWORD *)a2 + 5) = *((_OWORD *)v7 + 5);
        *((_OWORD *)a2 + 6) = v14;
        *((_OWORD *)a2 + 3) = v12;
        *((_OWORD *)a2 + 4) = v13;
        v15 = *((_OWORD *)v7 + 7);
        v16 = *((_OWORD *)v7 + 8);
        v17 = *((_OWORD *)v7 + 10);
        *((_OWORD *)a2 + 9) = *((_OWORD *)v7 + 9);
        *((_OWORD *)a2 + 10) = v17;
        *((_OWORD *)a2 + 7) = v15;
        *((_OWORD *)a2 + 8) = v16;
        a2 += 22;
        if ((double *)((char *)a2 - *result) == (double *)4048)
        {
          v18 = (double *)result[1];
          ++result;
          a2 = v18;
        }
      }
    }
  }
  return result;
}

unint64_t sub_10106FAD8(_QWORD *a1, _QWORD *a2, char *a3, _QWORD *a4, char *a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char **v9;
  char *v10;
  unint64_t v11;
  __n128 v12;
  __n128 v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE **v16;
  _BYTE *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  __n128 v24[2];

  if (a5 == a3)
    v6 = 0;
  else
    v6 = 56 * (a4 - a2)
       - 0x71C71C71C71C71C7 * ((uint64_t)&a5[-*a4] >> 3)
       + 0x71C71C71C71C71C7 * ((uint64_t)&a3[-*a2] >> 3);
  v7 = a1[4];
  v8 = a1[1];
  v9 = (char **)(v8 + 8 * (v7 / 0x38));
  if (a1[2] == v8)
    v10 = 0;
  else
    v10 = &(*v9)[72 * (v7 % 0x38)];
  if (a3 == v10)
    v11 = 0;
  else
    v11 = 56 * ((char **)a2 - v9)
        - 0x71C71C71C71C71C7 * ((uint64_t)&a3[-*a2] >> 3)
        + 0x71C71C71C71C71C7 * ((v10 - *v9) >> 3);
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x38);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_1005E5C2C(v24, v11);
  if (v6 >= 1)
  {
    v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_1005E5C2C(v24, v6);
      sub_10106FD80(v9, v10, (char **)v12.n128_u64[0], (char *)v12.n128_u64[1], v24[0].n128_u64[0], (char *)v24[0].n128_u64[1], v24);
      v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
      while ((sub_100554D9C((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_1005E5C2C(v24, v6);
      v13 = v24[0];
      v14 = a1[4] + a1[5];
      v15 = a1[1];
      v16 = (_BYTE **)(v15 + 8 * (v14 / 0x38));
      if (a1[2] == v15)
        v17 = 0;
      else
        v17 = &(*v16)[72 * (v14 % 0x38)];
      v24[0] = v12;
      sub_10106FF34(v13.n128_u64[0], (_BYTE *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_1005E5CE0(a1, 1) & 1) != 0)
        ;
    }
  }
  v19 = a1[4];
  v20 = a1[1];
  v21 = (_QWORD *)(v20 + 8 * (v19 / 0x38));
  if (a1[2] == v20)
    v22 = 0;
  else
    v22 = *v21 + 72 * (v19 % 0x38);
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_1005E5C2C(v24, v11);
  return v24[0].n128_u64[0];
}

__n128 sub_10106FD80@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, _QWORD *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  char *v12;
  char **v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_10106FE4C(v12, v14, v15, v16, &v21);
      v16 = (char *)v22.n128_u64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4032;
    }
    v18 = *a1 + 4032;
    v19 = a2;
  }
  sub_10106FE4C(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_10106FE4C@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  char *v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  void *result;
  uint64_t v14;
  char *v15;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = 0x8E38E38E38E38E39 * ((uint64_t)&a4[-v10] >> 3);
      if ((uint64_t)(0x8E38E38E38E38E39 * ((v11 - a1) >> 3)) < v12)
        v12 = 0x8E38E38E38E38E39 * ((v11 - a1) >> 3);
      v11 -= 72 * v12;
      a4 -= 72 * v12;
      if (v12)
        result = memmove(a4, v11, 72 * v12);
      if (v11 == a1)
        break;
      v14 = *--v6;
      v10 = v14;
      a4 = (char *)(v14 + 4032);
    }
    if ((char *)(*v6 + 4032) == a4)
    {
      v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_10106FF34(_QWORD *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  void **v7;
  char *v8;
  _QWORD *v10;
  _BYTE *i;
  _BYTE *v12;
  double result;
  uint64_t v14;
  __int128 v15;

  v7 = *(void ***)a5;
  v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = (_BYTE *)(*a1 + 4032); ; i = v12 + 4032)
    {
      sub_10106FFC4(a2, v8, i, v7, &v14);
      v8 = (char *)*((_QWORD *)&v15 + 1);
      v7 = (void **)v15;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v8;
      if (v10 == a3)
        break;
      v12 = (_BYTE *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_10106FFC4(a2, v8, a4, v7, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_10106FFC4@<X0>(_BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, _QWORD *a5@<X8>)
{
  void **v6;
  _BYTE *v7;
  _BYTE *v9;
  char *v10;
  int64_t v11;
  unint64_t v12;
  void *result;
  char *v14;

  v6 = a4;
  v7 = __src;
  if (__src == a3)
  {
    v9 = __src;
  }
  else
  {
    v9 = a3;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = 0x8E38E38E38E38E39 * ((v10 - __dst + 4032) >> 3);
      v12 = (uint64_t)(0x8E38E38E38E38E39 * ((v9 - v7) >> 3)) >= v11 ? v11 : 0x8E38E38E38E38E39 * ((v9 - v7) >> 3);
      if (v12)
        result = memmove(__dst, v7, 72 * v12);
      v7 += 72 * v12;
      if (v7 == v9)
        break;
      v14 = (char *)*v6++;
      v10 = v14;
      __dst = v14;
    }
    __dst += 72 * v12;
    if ((char *)*(v6 - 1) + 4032 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

_QWORD *sub_1010700B4(_QWORD *result, __int128 *a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  __int128 *v6;
  __int128 *v7;
  _QWORD *v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 *v12;

  if (a2 != a4)
  {
    while (*(double *)&a5 - *(double *)a2 <= *(double *)(a6 + 88))
    {
      a2 = (__int128 *)((char *)a2 + 40);
      if ((__int128 *)((char *)a2 - *result) == (__int128 *)4080)
      {
        v6 = (__int128 *)result[1];
        ++result;
        a2 = v6;
      }
      if (a2 == a4)
        return result;
    }
  }
  if (a2 != a4)
  {
    v7 = a2;
    v8 = result;
    while (1)
    {
      v7 = (__int128 *)((char *)v7 + 40);
      if ((__int128 *)((char *)v7 - *v8) == (__int128 *)4080)
      {
        v9 = (__int128 *)v8[1];
        ++v8;
        v7 = v9;
      }
      if (v7 == a4)
        break;
      if (*(double *)&a5 - *(double *)v7 <= *(double *)(a6 + 88))
      {
        v10 = *v7;
        v11 = v7[1];
        *((_QWORD *)a2 + 4) = *((_QWORD *)v7 + 4);
        *a2 = v10;
        a2[1] = v11;
        a2 = (__int128 *)((char *)a2 + 40);
        if ((__int128 *)((char *)a2 - *result) == (__int128 *)4080)
        {
          v12 = (__int128 *)result[1];
          ++result;
          a2 = v12;
        }
      }
    }
  }
  return result;
}

__n128 sub_101070170@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, _QWORD *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  char *v12;
  char **v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_10107023C(v12, v14, v15, v16, &v21);
      v16 = (char *)v22.n128_u64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4080;
    }
    v18 = *a1 + 4080;
    v19 = a2;
  }
  sub_10107023C(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_10107023C@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  char *v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  void *result;
  uint64_t v14;
  char *v15;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&a4[-v10] >> 3);
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v11 - a1) >> 3)) < v12)
        v12 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - a1) >> 3);
      v11 -= 40 * v12;
      a4 -= 40 * v12;
      if (v12)
        result = memmove(a4, v11, 40 * v12);
      if (v11 == a1)
        break;
      v14 = *--v6;
      v10 = v14;
      a4 = (char *)(v14 + 4080);
    }
    if ((char *)(*v6 + 4080) == a4)
    {
      v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_10107031C(_QWORD *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  void **v7;
  char *v8;
  _QWORD *v10;
  _BYTE *i;
  _BYTE *v12;
  double result;
  uint64_t v14;
  __int128 v15;

  v7 = *(void ***)a5;
  v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = (_BYTE *)(*a1 + 4080); ; i = v12 + 4080)
    {
      sub_1010703AC(a2, v8, i, v7, &v14);
      v8 = (char *)*((_QWORD *)&v15 + 1);
      v7 = (void **)v15;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v8;
      if (v10 == a3)
        break;
      v12 = (_BYTE *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_1010703AC(a2, v8, a4, v7, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_1010703AC@<X0>(_BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, _QWORD *a5@<X8>)
{
  void **v6;
  _BYTE *v7;
  _BYTE *v9;
  char *v10;
  int64_t v11;
  unint64_t v12;
  void *result;
  char *v14;

  v6 = a4;
  v7 = __src;
  if (__src == a3)
  {
    v9 = __src;
  }
  else
  {
    v9 = a3;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - __dst + 4080) >> 3);
      v12 = (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 3)) >= v11 ? v11 : 0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 3);
      if (v12)
        result = memmove(__dst, v7, 40 * v12);
      v7 += 40 * v12;
      if (v7 == v9)
        break;
      v14 = (char *)*v6++;
      v10 = v14;
      __dst = v14;
    }
    __dst += 40 * v12;
    if ((char *)*(v6 - 1) + 4080 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

_QWORD *sub_101070494(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  if (a2 != a4)
  {
    while (*(double *)&a5 - *(double *)(a2 + 40) <= *(double *)(a6 + 88))
    {
      a2 += 152;
      if (a2 - *result == 3952)
      {
        v6 = result[1];
        ++result;
        a2 = v6;
      }
      if (a2 == a4)
        return result;
    }
  }
  if (a2 != a4)
  {
    v7 = a2;
    v8 = result;
    while (1)
    {
      v7 += 152;
      if (v7 - *v8 == 3952)
      {
        v9 = v8[1];
        ++v8;
        v7 = v9;
      }
      if (v7 == a4)
        break;
      if (*(double *)&a5 - *(double *)(v7 + 40) <= *(double *)(a6 + 88))
      {
        v10 = *(_OWORD *)(v7 + 16);
        *(_OWORD *)a2 = *(_OWORD *)v7;
        *(_OWORD *)(a2 + 16) = v10;
        v11 = *(_OWORD *)(v7 + 32);
        v12 = *(_OWORD *)(v7 + 48);
        v13 = *(_OWORD *)(v7 + 80);
        *(_OWORD *)(a2 + 64) = *(_OWORD *)(v7 + 64);
        *(_OWORD *)(a2 + 80) = v13;
        *(_OWORD *)(a2 + 32) = v11;
        *(_OWORD *)(a2 + 48) = v12;
        v14 = *(_OWORD *)(v7 + 96);
        v15 = *(_OWORD *)(v7 + 112);
        v16 = *(_OWORD *)(v7 + 128);
        *(_QWORD *)(a2 + 144) = *(_QWORD *)(v7 + 144);
        *(_OWORD *)(a2 + 112) = v15;
        *(_OWORD *)(a2 + 128) = v16;
        *(_OWORD *)(a2 + 96) = v14;
        a2 += 152;
        if (a2 - *result == 3952)
        {
          v17 = result[1];
          ++result;
          a2 = v17;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_101070570(_QWORD *result, __int128 *a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  __int128 *v6;
  __int128 *v7;
  _QWORD *v8;
  __int128 *v9;
  __int128 v10;
  __int128 *v11;

  if (a2 != a4)
  {
    while (*(double *)&a5 - *((double *)a2 + 1) <= *(double *)(a6 + 88))
    {
      a2 = (__int128 *)((char *)a2 + 24);
      if ((__int128 *)((char *)a2 - *result) == (__int128 *)4080)
      {
        v6 = (__int128 *)result[1];
        ++result;
        a2 = v6;
      }
      if (a2 == a4)
        return result;
    }
  }
  if (a2 != a4)
  {
    v7 = a2;
    v8 = result;
    while (1)
    {
      v7 = (__int128 *)((char *)v7 + 24);
      if ((__int128 *)((char *)v7 - *v8) == (__int128 *)4080)
      {
        v9 = (__int128 *)v8[1];
        ++v8;
        v7 = v9;
      }
      if (v7 == a4)
        break;
      if (*(double *)&a5 - *((double *)v7 + 1) <= *(double *)(a6 + 88))
      {
        v10 = *v7;
        *((_QWORD *)a2 + 2) = *((_QWORD *)v7 + 2);
        *a2 = v10;
        a2 = (__int128 *)((char *)a2 + 24);
        if ((__int128 *)((char *)a2 - *result) == (__int128 *)4080)
        {
          v11 = (__int128 *)result[1];
          ++result;
          a2 = v11;
        }
      }
    }
  }
  return result;
}

__n128 sub_101070628@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, _QWORD *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  char *v12;
  char **v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_1010706F4(v12, v14, v15, v16, &v21);
      v16 = (char *)v22.n128_u64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4080;
    }
    v18 = *a1 + 4080;
    v19 = a2;
  }
  sub_1010706F4(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_1010706F4@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  char *v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  void *result;
  uint64_t v14;
  char *v15;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&a4[-v10] >> 3);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - a1) >> 3)) < v12)
        v12 = 0xAAAAAAAAAAAAAAABLL * ((v11 - a1) >> 3);
      v11 -= 24 * v12;
      a4 -= 24 * v12;
      if (v12)
        result = memmove(a4, v11, 24 * v12);
      if (v11 == a1)
        break;
      v14 = *--v6;
      v10 = v14;
      a4 = (char *)(v14 + 4080);
    }
    if ((char *)(*v6 + 4080) == a4)
    {
      v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_1010707D4(_QWORD *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  void **v7;
  char *v8;
  _QWORD *v10;
  _BYTE *i;
  _BYTE *v12;
  double result;
  uint64_t v14;
  __int128 v15;

  v7 = *(void ***)a5;
  v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = (_BYTE *)(*a1 + 4080); ; i = v12 + 4080)
    {
      sub_101070864(a2, v8, i, v7, &v14);
      v8 = (char *)*((_QWORD *)&v15 + 1);
      v7 = (void **)v15;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v8;
      if (v10 == a3)
        break;
      v12 = (_BYTE *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_101070864(a2, v8, a4, v7, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_101070864@<X0>(_BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, _QWORD *a5@<X8>)
{
  void **v6;
  _BYTE *v7;
  _BYTE *v9;
  char *v10;
  int64_t v11;
  unint64_t v12;
  void *result;
  char *v14;

  v6 = a4;
  v7 = __src;
  if (__src == a3)
  {
    v9 = __src;
  }
  else
  {
    v9 = a3;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - __dst + 4080) >> 3);
      v12 = (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v9 - v7) >> 3)) >= v11 ? v11 : 0xAAAAAAAAAAAAAAABLL * ((v9 - v7) >> 3);
      if (v12)
        result = memmove(__dst, v7, 24 * v12);
      v7 += 24 * v12;
      if (v7 == v9)
        break;
      v14 = (char *)*v6++;
      v10 = v14;
      __dst = v14;
    }
    __dst += 24 * v12;
    if ((char *)*(v6 - 1) + 4080 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

_QWORD *sub_10107094C(_QWORD *result, __int128 *a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  __int128 *v6;
  __int128 *v7;
  _QWORD *v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 *v12;

  if (a2 != a4)
  {
    while (*(double *)&a5 - *(double *)a2 <= *(double *)(a6 + 88))
    {
      a2 = (__int128 *)((char *)a2 + 40);
      if ((__int128 *)((char *)a2 - *result) == (__int128 *)4080)
      {
        v6 = (__int128 *)result[1];
        ++result;
        a2 = v6;
      }
      if (a2 == a4)
        return result;
    }
  }
  if (a2 != a4)
  {
    v7 = a2;
    v8 = result;
    while (1)
    {
      v7 = (__int128 *)((char *)v7 + 40);
      if ((__int128 *)((char *)v7 - *v8) == (__int128 *)4080)
      {
        v9 = (__int128 *)v8[1];
        ++v8;
        v7 = v9;
      }
      if (v7 == a4)
        break;
      if (*(double *)&a5 - *(double *)v7 <= *(double *)(a6 + 88))
      {
        v10 = *v7;
        v11 = v7[1];
        *((_DWORD *)a2 + 8) = *((_DWORD *)v7 + 8);
        *a2 = v10;
        a2[1] = v11;
        a2 = (__int128 *)((char *)a2 + 40);
        if ((__int128 *)((char *)a2 - *result) == (__int128 *)4080)
        {
          v12 = (__int128 *)result[1];
          ++result;
          a2 = v12;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_101070A08@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  void *__p[2];
  char v9;
  _BYTE v10[24];
  _BYTE *v11;

  v6[0] = off_10219D160;
  v6[1] = sub_1001BBC18;
  v6[2] = 0;
  v7 = v6;
  sub_1015A2E04(__p, "kCLConnectionMessageHeading");
  sub_100BB2138((uint64_t)v10, (uint64_t)v6);
  sub_101070DA4(a1, (unsigned __int8 *)__p, 1);
  v2 = v11;
  if (v11 == v10)
  {
    v3 = 4;
    v2 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (v9 < 0)
    operator delete(__p[0]);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_101070B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13)
{
  uint64_t *v14;
  uint64_t v15;

  sub_1004E21A4((uint64_t)&a13);
  v14 = a12;
  if (a12 == &a9)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t sub_101070B64(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_10219D0E0;
  v2 = a1[6];
  if (v2)
  {
    sub_100EAE17C(v2);
    sub_100EAE908(a1[6]);
  }
  if (a1[21])
  {
    v3 = sub_1000A5944();
    sub_1000A4A6C(v3, 0, a1[21]);
    v4 = a1[21];
    a1[21] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  else
  {
    a1[21] = 0;
  }
  v5 = a1[6];
  a1[6] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return sub_10002FA68((uint64_t)a1);
}

void sub_101070BFC(_QWORD *a1)
{
  sub_101070B64(a1);
  operator delete();
}

void sub_101070C20(id a1)
{
  qword_10229FD48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

__n128 sub_101070C4C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_10219D160;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_101070C88(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_10219D160;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_101070CAC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101070CE8()
{
}

void sub_101070CF4(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_1001BB5B8(a1, a2, (CLConnectionMessage **)&v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_101070D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_1018FBC0C(a10);
  _Unwind_Resume(exception_object);
}

void sub_101070D78(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

uint64_t sub_101070DA4(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_101070E1C(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_101070E08(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_101070E1C(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_10107109C(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_101071084(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_10107109C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_101071110(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1010710F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_101071110(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_101071168(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_101071184(_QWORD *a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_101071238((uint64_t)a1, "VO2MaxStagingHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = off_10219D218;
  a1[9] = off_10219D2D0;
  sub_101071E48((uint64_t)a1);
  return a1;
}

void sub_10107120C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_1010716E8(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_101071238(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_102138DD8;
  *(_QWORD *)a1 = off_10219D7E0;
  *(_QWORD *)(a1 + 72) = off_10219D888;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_10219D7E0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 72) = off_10219D888;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 368) = 3;
  *(_BYTE *)(a1 + 376) = 0;
  sub_1015A2E04((_QWORD *)(a1 + 384), "");
  *(_QWORD *)(a1 + 408) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 416) = 12000;
  *(_QWORD *)(a1 + 424) = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 432));
  *(_QWORD *)(a1 + 432) = &off_102138DD8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 248) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_101071624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  void **v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a17);
  *(_QWORD *)(v22 + 424) = off_102138DA8;
  sub_100427950(v27);
  if (*(char *)(v22 + 407) < 0)
    operator delete(*v26);
  sub_1010767FC(v25);
  sub_101138068(v24);
  *(_QWORD *)v22 = off_102138DA8;
  sub_100427950(v23);
  _Unwind_Resume(a1);
}

void sub_1010716E0()
{
  JUMPOUT(0x1010716C0);
}

uint64_t sub_1010716E8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 72) = off_10219D888;
  v2 = a1 + 72;
  *(_QWORD *)a1 = off_10219D7E0;
  *(_QWORD *)(a1 + 424) = off_102138DA8;
  sub_100427950((_QWORD *)(a1 + 432));
  if (*(char *)(a1 + 407) < 0)
    operator delete(*(void **)(a1 + 384));
  sub_1010767FC((_QWORD *)(a1 + 176));
  sub_101138068(v2);
  *(_QWORD *)a1 = off_102138DA8;
  sub_100427950((_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_101071778(uint64_t a1)
{
  return sub_1010716E8(a1 - 72);
}

void sub_101071780(uint64_t a1)
{
  sub_1010716E8(a1);
  operator delete();
}

void sub_1010717A4(uint64_t a1)
{
  sub_1010716E8(a1 - 72);
  operator delete();
}

uint64_t sub_1010717CC(uint64_t a1, uint64_t a2)
{
  if (*(double *)(*(_QWORD *)(a2 + 8) - 16) == 1.79769313e308 && sub_10008950C(a1 + 72))
  {
    sub_10001E638(*(_QWORD *)(a1 + 80));
    CFAbsoluteTimeGetCurrent();
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM VO2MaxStagingHistory WHERE startTime < ?");
  }
  return -1;
}

void sub_1010718E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101071904(uint64_t a1, uint64_t a2)
{
  return sub_1010717CC(a1 - 72, a2);
}

uint64_t sub_10107190C(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT COUNT(*) FROM VO2MaxStagingHistory");
  return 0xFFFFFFFFLL;
}

void sub_1010719AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010719D0(uint64_t a1)
{
  return sub_10107190C(a1 - 72);
}

uint64_t sub_1010719D8(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t result;
  char out[40];

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    memset(out, 0, 37);
    uuid_unparse(a2, out);
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM VO2MaxStagingHistory WHERE sessionId = ?");
  }
  return result;
}

void sub_101071C0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_101071C38(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_101071C44(a2, a3);
}

void sub_101071C44(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  sqlite3_stmt *v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  sqlite3_stmt *v11;
  const unsigned __int8 *v12;
  sqlite3_stmt *v13;
  sqlite3_stmt *v14;
  sqlite3_stmt *v15;
  sqlite3_stmt *v16;
  sqlite3_stmt *v17;
  sqlite3_stmt *v18;
  sqlite3_stmt *v19;
  sqlite3_stmt *v20;
  sqlite3_stmt *v21;
  sqlite3_stmt *v22;
  sqlite3_stmt *v23;
  sqlite3_stmt *v24;
  const unsigned __int8 *v25;
  sqlite3_stmt *v26;
  sqlite3_stmt *v27;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)a2 = sqlite3_column_int(v4, 0);
  v5 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 24) = sqlite3_column_double(v5, 1);
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)(a2 + 40) = sqlite3_column_int(v6, 2);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 32) = sqlite3_column_double(v7, 3);
  v8 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 48) = sqlite3_column_double(v8, 4);
  v9 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 56) = sqlite3_column_double(v9, 5);
  v10 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 64) = sqlite3_column_double(v10, 6);
  v11 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v12 = sqlite3_column_text(v11, 7);
  uuid_parse((const char *)v12, (unsigned __int8 *)(a2 + 72));
  v13 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 88) = sqlite3_column_double(v13, 8);
  v14 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 96) = sqlite3_column_double(v14, 9);
  v15 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 104) = sqlite3_column_int(v15, 10);
  v16 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_BYTE *)(a2 + 108) = sqlite3_column_int(v16, 11) != 0;
  v17 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_BYTE *)(a2 + 109) = sqlite3_column_int(v17, 12) != 0;
  v18 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 112) = sqlite3_column_int(v18, 13);
  v19 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 120) = sqlite3_column_double(v19, 14);
  v20 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 128) = sqlite3_column_double(v20, 15);
  v21 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 144) = sqlite3_column_int(v21, 16);
  v22 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 148) = sqlite3_column_int(v22, 17);
  v23 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_BYTE *)(a2 + 152) = sqlite3_column_int(v23, 18) != 0;
  v24 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v25 = sqlite3_column_text(v24, 19);
  std::string::assign((std::string *)(a2 + 160), (const std::string::value_type *)v25);
  v26 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 184) = sqlite3_column_double(v26, 20);
  v27 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 136) = sqlite3_column_double(v27, 21);
}

uint64_t sub_101071E48(uint64_t a1)
{
  uint64_t result;

  result = sub_1000CC4F4(*(_QWORD *)(a1 + 80));
  if ((_DWORD)result)
  {
    sub_101071EA4(a1);
    return sub_100634364(*(_QWORD *)(a1 + 80), "VO2MaxStagingHistory", (const char **)&off_10219D380, (const std::string::value_type **)&off_1022FCAC0, 0);
  }
  return result;
}

BOOL sub_101071EA4(uint64_t a1)
{
  _BOOL8 result;
  const char *v3;
  int v4;
  __int16 v5;
  char v6;
  char v7;

  result = sub_100635B3C(*(_QWORD *)(a1 + 80), "VO2MaxStagingHistory");
  if (result)
  {
    v3 = "startTime";
    v4 = 5;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    sub_10063A8D4(*(_QWORD *)(a1 + 80), "VO2MaxStagingHistory", (uint64_t)"startTime", (uint64_t)&v3);
  }
  return result;
}

void sub_101072248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;

  if (a19 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a21);
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  sub_1018B38B4((uint64_t)&a59);
  _Unwind_Resume(a1);
}

uint64_t sub_1010722E0(uint64_t a1, void *a2)
{
  NSObject *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  size_t v8;
  std::string *v9;
  void **v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  void *v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v20;
  std::string *v21;
  void *v22[2];
  int64_t v23;
  std::string v24;
  void *__p[4];
  std::string buf[68];

  if (!sub_100635E80(*(_QWORD *)(a1 + 80), (char *)a2))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219D8C8);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219D8C8);
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice %{public}s needs autoincrement migration", __p, 12);
      v21 = (std::string *)v20;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<VO2MaxStagingOutput, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = VO2MaxStagingOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    memset(__p, 0, 24);
    sub_1015A2E04(buf, (char *)a2);
    v5 = std::string::append(buf, "AutoIncr");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v23 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)v22 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_1015A2E04(buf, (char *)a2);
    v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_10001E638(*(_QWORD *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0)
      v8 = HIBYTE(__p[2]);
    else
      v8 = (size_t)__p[1];
    v9 = buf;
    sub_100259584((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v23 >= 0)
      v11 = v22;
    else
      v11 = (void **)v22[0];
    if (v23 >= 0)
      v12 = HIBYTE(v23);
    else
      v12 = (std::string::size_type)v22[1];
    v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v24.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    __p[0] = v14;
    __p[1] = v24.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v24.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      v15 = HIBYTE(__p[2]);
      v14 = __p[0];
    }
    if (v15 >= 0)
      v16 = (char *)__p;
    else
      v16 = (char *)v14;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), v16);
  }
  v17 = *(_QWORD *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = *(_QWORD *)(v17 + 88);
  sub_100053048(v17, v18);
  return 0;
}

void sub_101073478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a60 < 0)
    operator delete(a55);
  _Unwind_Resume(a1);
}

uint64_t sub_101073798(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM VO2MaxStagingHistory");
  return result;
}

void sub_10107382C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10107384C(uint64_t a1)
{
  return sub_101073798(a1 - 72);
}

_QWORD *sub_101073854@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "VO2MaxStagingHistory");
}

_QWORD *sub_101073864@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "VO2MaxStagingHistory");
}

uint64_t sub_101073874(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "INSERT INTO VO2MaxStagingHistory (startTime, workoutType, estimatedVo2Max, durationInSeconds, hrMax, hrMin, sessionId, variance, filteredVo2Max, sessionType, eligibleForHealthKit, eligibleForCalorimetry, numWorkoutsContrToEstimate, estimatedHRResponseParam, estimatedHRRecoveryParam, algorithmVersion, sampleVersion, betaBlockerUse, bundleIdentifier, previousVo2Max,sessionVo2Max) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
  return result;
}

void sub_101073B40(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_101073B68(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100582164(a2);
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from VO2MaxStagingHistory ORDER BY startTime ASC");
  }
  return result;
}

void sub_101073D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a35 < 0)
    operator delete(__p);
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101073D84(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  sub_101071C44(a1, a2);
  return 0;
}

uint64_t sub_101073DE0(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[24];

  if ((sub_10008950C(a1 + 72) & 1) != 0)
  {
    sub_100582164(a2);
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM VO2MaxStagingHistory WHERE sessionId IN (SELECT sessionId FROM VO2MaxStagingLostEstimateHistory)");
  }
  if (qword_10229FEC0 != -1)
    dispatch_once(&qword_10229FEC0, &stru_10219D360);
  v4 = qword_10229FEC8;
  if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "VO2MaxStagingHistory, DB not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_10219D360);
    LOWORD(v8) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 2, "VO2MaxStagingHistory, DB not accessible", &v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "CMError CLVO2MaxStagingOutputRecorderDb::getRecordsWithConflictingStagingData(std::vector<VO2MaxStagingOutput> &) const", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return 109;
}

void sub_1010740B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101074104(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[24];

  if ((sub_10008950C(a1 + 72) & 1) != 0)
  {
    sub_100582164(a2);
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM VO2MaxStagingHistory WHERE estimatedVo2Max IS NOT NULL AND startTime > ? ORDER BY startTime DESC");
  }
  if (qword_10229FEC0 != -1)
    dispatch_once(&qword_10229FEC0, &stru_10219D360);
  v4 = qword_10229FEC8;
  if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "VO2MaxStagingHistory, DB not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_10219D360);
    LOWORD(v8) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 2, "VO2MaxStagingHistory, DB not accessible", &v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "CMError CLVO2MaxStagingOutputRecorderDb::querySinceTime(CFAbsoluteTime, std::vector<VO2MaxStagingOutput> &) const", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return 109;
}

void sub_101074400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101074450(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (qword_10229FEC0 != -1)
    dispatch_once(&qword_10229FEC0, &stru_10219D360);
  v2 = qword_10229FEC8;
  if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Promoting staging data", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_10219D360);
    v10[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 2, "Promoting staging data", v10, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "CMError CLVO2MaxStagingOutputRecorderDb::promoteStagingData() const", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if ((sub_10008950C(a1 + 72) & 1) != 0)
  {
    sub_10001E638(*(_QWORD *)(a1 + 80));
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM VO2MaxHistory WHERE sessionId IN (SELECT sessionId from VO2MaxStagingSummaryHistory) OR sessionId IN (SELECT sessionId from VO2MaxStagingLostEstimateHistory)");
  }
  if (qword_10229FEC0 != -1)
    dispatch_once(&qword_10229FEC0, &stru_10219D360);
  v3 = qword_10229FEC8;
  if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "VO2MaxStagingHistory, DB not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_10219D360);
    v10[0] = 0;
    LODWORD(v9) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 2, "VO2MaxStagingHistory, DB not accessible", v10, v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "CMError CLVO2MaxStagingOutputRecorderDb::promoteStagingData() const", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return 109;
}

void sub_101074948(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101074988(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13[2];
  uint64_t v14;
  _QWORD v15[10];
  char v16;
  uint64_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if (SHIBYTE(v14) < 0)
  {
    v1 = v13[1];
    operator delete(v13[0]);
    if (v1)
    {
LABEL_3:
      if (sub_10008950C(a1 + 9))
      {
        sub_100263E50((uint64_t)v13);
        v5 = sub_100263F7C(&v14, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
        if ((v19 & 0x80u) == 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        if ((v19 & 0x80u) == 0)
          v7 = v19;
        else
          v7 = (uint64_t)__p[1];
        v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
        sub_100263F7C(v8, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v19 < 0)
          operator delete(__p[0]);
        v9 = a1[10];
        std::stringbuf::str(__p, v15);
        if ((v19 & 0x80u) == 0)
          v10 = (char *)__p;
        else
          v10 = (char *)__p[0];
        sub_1000CDA68(v9, v10);
      }
      return 2;
    }
  }
  else if (HIBYTE(v14))
  {
    goto LABEL_3;
  }
  sub_10193C278(v4);
  __break(1u);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(void **)((char *)v13
  v14 = v11;
  if (v16 < 0)
    operator delete((void *)v15[8]);
  std::streambuf::~streambuf(v1);
  std::ios::~ios(&v17);
  return 2;
}

void sub_101074CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101074D58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10219D8C8);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219D8C8);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219D8C8);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<VO2MaxStagingOutput, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = VO2MaxStagingOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_101075410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_101075440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  double result;

  *(_OWORD *)a2 = *(_OWORD *)a3;
  v5 = *(_OWORD *)(a3 + 16);
  v6 = *(_OWORD *)(a3 + 32);
  v7 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 64) = v7;
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 32) = v6;
  v8 = *(_OWORD *)(a3 + 80);
  v9 = *(_OWORD *)(a3 + 96);
  v10 = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(a2 + 128) = v10;
  *(_OWORD *)(a2 + 80) = v8;
  *(_OWORD *)(a2 + 96) = v9;
  v11 = *(_QWORD *)(a3 + 144);
  *(_BYTE *)(a2 + 152) = *(_BYTE *)(a3 + 152);
  *(_QWORD *)(a2 + 144) = v11;
  std::string::operator=((std::string *)(a2 + 160), (const std::string *)(a3 + 160));
  result = *(double *)(a3 + 184);
  *(double *)(a2 + 184) = result;
  return result;
}

id *sub_1010754AC(uint64_t a1, uint64_t a2, char a3)
{
  _OWORD *v6;
  int v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  double v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  NSObject *v29;
  const char *v30;
  uint8_t *v31;
  double v32;
  double v33;
  double v34;
  NSObject *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v44;
  const char *v45;
  uint8_t *v46;
  double v47;
  const char *v48;
  uint8_t *v49;
  const char *v50;
  uint8_t *v51;
  double v52;
  id v53[2];
  int v54;
  double v55;
  __int16 v56;
  uint64_t v57;
  uint8_t buf[4];
  double v59;
  __int16 v60;
  uint64_t v61;
  _BYTE v62[24];
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  void *__p;
  char v70;
  unint64_t v71;

  v53[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v53[1] = 0;
  v6 = (_OWORD *)(a1 + 224);
  if (*(double *)(a1 + 248) <= 0.0
    || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    if ((a3 & 1) == 0)
      sub_10001E638(*(_QWORD *)(a1 + 80));
    v63 = 0.0;
    v64 = 0;
    v66 = 0;
    v65 = 0;
    v67 = 3;
    v68 = 0;
    sub_1015A2E04(&__p, "");
    v71 = 0xBFF0000000000000;
    v7 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v62);
    if (v7 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
      *v6 = *(_OWORD *)a2;
      v22 = *(_OWORD *)(a2 + 16);
      v23 = *(_OWORD *)(a2 + 32);
      v24 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 288) = v24;
      *(_OWORD *)(a1 + 240) = v22;
      *(_OWORD *)(a1 + 256) = v23;
      v25 = *(_OWORD *)(a2 + 80);
      v26 = *(_OWORD *)(a2 + 96);
      v27 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 352) = v27;
      *(_OWORD *)(a1 + 304) = v25;
      *(_OWORD *)(a1 + 320) = v26;
      v28 = *(_QWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 152);
      *(_QWORD *)(a1 + 368) = v28;
      std::string::operator=((std::string *)(a1 + 384), (const std::string *)(a2 + 160));
    }
    else
    {
      if (v7)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10219D8C8);
        v29 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10219D8C8);
          LOWORD(v54) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v54, 2);
          v31 = (uint8_t *)v30;
          sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<VO2MaxStagingOutput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxStagingOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v30);
          if (v31 != buf)
            free(v31);
        }
LABEL_43:
        if (v70 < 0)
        {
          operator delete(__p);
          if ((a3 & 1) != 0)
            return sub_100131740(v53);
        }
        else if ((a3 & 1) != 0)
        {
          return sub_100131740(v53);
        }
        sub_10001E99C(*(_QWORD *)(a1 + 80));
        return sub_100131740(v53);
      }
      v8 = *(double *)(a2 + 24);
      v9 = v63;
      v10 = v8 - v63;
      if (v8 - v63 < 0.0)
        v10 = -(v8 - v63);
      if (v10 > 604800.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10219D8C8);
        v11 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
        {
          v12 = *(_QWORD *)(a2 + 24);
          *(_DWORD *)buf = 134349312;
          v59 = v63;
          v60 = 2050;
          v61 = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10219D8C8);
          v44 = *(_QWORD *)(a2 + 24);
          v54 = 134349312;
          v55 = v63;
          v56 = 2050;
          v57 = v44;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v54, 22);
          v46 = (uint8_t *)v45;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxStagingOutput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxStagingOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v45);
          if (v46 != buf)
            free(v46);
        }
        CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
        v8 = *(double *)(a2 + 24);
        v9 = v63;
      }
      if (v8 < v9)
      {
        if (v9 - v8 < 10.0)
        {
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10219D8C8);
          v13 = qword_10229FC78;
          if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
          {
            v14 = *(double *)(a2 + 24);
            *(_DWORD *)buf = 134217984;
            v59 = v14;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC70 != -1)
              dispatch_once(&qword_10229FC70, &stru_10219D8C8);
            v47 = *(double *)(a2 + 24);
            v54 = 134217984;
            v55 = v47;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v54));
            v49 = (uint8_t *)v48;
            sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxStagingOutput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxStagingOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v48);
            if (v49 != buf)
              free(v49);
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2);
          *v6 = *(_OWORD *)a2;
          v15 = *(_OWORD *)(a2 + 16);
          v16 = *(_OWORD *)(a2 + 32);
          v17 = *(_OWORD *)(a2 + 64);
          *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(a1 + 288) = v17;
          *(_OWORD *)(a1 + 240) = v15;
          *(_OWORD *)(a1 + 256) = v16;
          v18 = *(_OWORD *)(a2 + 80);
          v19 = *(_OWORD *)(a2 + 96);
          v20 = *(_OWORD *)(a2 + 128);
          *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 112);
          *(_OWORD *)(a1 + 352) = v20;
          *(_OWORD *)(a1 + 304) = v18;
          *(_OWORD *)(a1 + 320) = v19;
          v21 = *(_QWORD *)(a2 + 144);
          *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 152);
          *(_QWORD *)(a1 + 368) = v21;
          std::string::operator=((std::string *)(a1 + 384), (const std::string *)(a2 + 160));
          goto LABEL_42;
        }
        v32 = v8 - v9;
        v33 = *(float *)(a1 + 136);
        if (qword_10229FC70 != -1)
        {
          v52 = *(float *)(a1 + 136);
          dispatch_once(&qword_10229FC70, &stru_10219D8C8);
          v33 = v52;
        }
        v34 = v32 - v33;
        v35 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          v59 = v34;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10219D8C8);
          v54 = 134217984;
          v55 = v34;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v54));
          v51 = (uint8_t *)v50;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxStagingOutput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxStagingOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v50);
          if (v51 != buf)
            free(v51);
        }
        (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v34);
      }
      (*(void (**)(uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v62, a1 + 224, a2);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
      *v6 = *(_OWORD *)a2;
      v36 = *(_OWORD *)(a2 + 16);
      v37 = *(_OWORD *)(a2 + 32);
      v38 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 288) = v38;
      *(_OWORD *)(a1 + 240) = v36;
      *(_OWORD *)(a1 + 256) = v37;
      v39 = *(_OWORD *)(a2 + 80);
      v40 = *(_OWORD *)(a2 + 96);
      v41 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 352) = v41;
      *(_OWORD *)(a1 + 304) = v39;
      *(_OWORD *)(a1 + 320) = v40;
      v42 = *(_QWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 152);
      *(_QWORD *)(a1 + 368) = v42;
      std::string::operator=((std::string *)(a1 + 384), (const std::string *)(a2 + 160));
    }
LABEL_42:
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 184);
    goto LABEL_43;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
  return sub_100131740(v53);
}

void sub_101075D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  if (SLOBYTE(STACK[0x76F]) < 0)
    operator delete((void *)STACK[0x758]);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101075D4C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_10193C3E4(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_101075FAC(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10193C550(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_1010761E4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10193C6BC(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

uint64_t sub_10107640C(uint64_t a1)
{
  return sub_101074D58(a1 - 72);
}

void sub_101076414(id a1)
{
  qword_10229FEC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

uint64_t sub_101076440(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  _QWORD v15[8];
  void *__p[2];
  unsigned __int8 v17;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (HIBYTE(v14))
      goto LABEL_3;
LABEL_18:
    sub_10193C828(v4);
    __break(1u);
  }
  v12 = v13[1];
  operator delete(v13[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100582164(a2);
    sub_100263E50((uint64_t)v13);
    v6 = sub_100263F7C(&v14, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v17 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v17 & 0x80u) == 0)
      v8 = v17;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v17 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v15);
    if ((v17 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_10107673C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a71;

  if (a71 < 0)
    operator delete(__p);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  sub_1018B38B4((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1010767D0(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1010767FC(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x15];
    v7 = (unint64_t)*v6;
    v8 = (unint64_t)*v6 + 192 * (v5 % 0x15);
    v9 = (unint64_t)v2[(a1[5] + v5) / 0x15] + 192 * ((a1[5] + v5) % 0x15);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 183) < 0)
        {
          operator delete(*(void **)(v8 + 160));
          v7 = (unint64_t)*v6;
        }
        v8 += 192;
        if (v8 - v7 == 4032)
        {
          v10 = (unint64_t)v6[1];
          ++v6;
          v7 = v10;
          v8 = v10;
        }
      }
      while (v8 != v9);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 10;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_18;
    v13 = 21;
  }
  a1[4] = v13;
LABEL_18:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return sub_10002E778((uint64_t)a1);
}

uint64_t sub_101076958(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  v4 = v3 + 1;
  if (v3 + 1 > 0x155555555555555)
    sub_100259694();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 6) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 6);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 6) >= 0xAAAAAAAAAAAAAALL)
    v6 = 0x155555555555555;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_1002746CC((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[192 * v3];
  v13 = &v7[192 * v6];
  sub_101076A64((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 192;
  sub_101076AF0(a1, &v10);
  v8 = a1[1];
  sub_101076CBC((uint64_t)&v10);
  return v8;
}

void sub_101076A50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_101076CBC((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_101076A64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _BYTE *v12;
  __int128 v13;
  double result;

  *(_OWORD *)a2 = *(_OWORD *)a3;
  v5 = *(_OWORD *)(a3 + 16);
  v6 = *(_OWORD *)(a3 + 32);
  v7 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 64) = v7;
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 32) = v6;
  v8 = *(_OWORD *)(a3 + 80);
  v9 = *(_OWORD *)(a3 + 96);
  v10 = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(a2 + 128) = v10;
  *(_OWORD *)(a2 + 80) = v8;
  *(_OWORD *)(a2 + 96) = v9;
  v11 = *(_QWORD *)(a3 + 144);
  *(_BYTE *)(a2 + 152) = *(_BYTE *)(a3 + 152);
  *(_QWORD *)(a2 + 144) = v11;
  v12 = (_BYTE *)(a2 + 160);
  if (*(char *)(a3 + 183) < 0)
  {
    sub_100115CE4(v12, *(void **)(a3 + 160), *(_QWORD *)(a3 + 168));
  }
  else
  {
    v13 = *(_OWORD *)(a3 + 160);
    *(_QWORD *)(a2 + 176) = *(_QWORD *)(a3 + 176);
    *(_OWORD *)v12 = v13;
  }
  result = *(double *)(a3 + 184);
  *(double *)(a2 + 184) = result;
  return result;
}

uint64_t sub_101076AF0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_101076B64((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_101076B64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v18[3];
  char v19;
  __int128 v20;
  __int128 v21;

  v7 = a7;
  *(_QWORD *)&v21 = a6;
  *((_QWORD *)&v21 + 1) = a7;
  v20 = v21;
  v18[0] = a1;
  v18[1] = &v20;
  v18[2] = &v21;
  if (a3 == a5)
  {
    v16 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 192) = *(_OWORD *)(a3 - 192);
      v8 = *(_OWORD *)(a3 - 176);
      v9 = *(_OWORD *)(a3 - 160);
      v10 = *(_OWORD *)(a3 - 128);
      *(_OWORD *)(v7 - 144) = *(_OWORD *)(a3 - 144);
      *(_OWORD *)(v7 - 128) = v10;
      *(_OWORD *)(v7 - 176) = v8;
      *(_OWORD *)(v7 - 160) = v9;
      v11 = *(_OWORD *)(a3 - 112);
      v12 = *(_OWORD *)(a3 - 96);
      v13 = *(_OWORD *)(a3 - 64);
      *(_OWORD *)(v7 - 80) = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 64) = v13;
      *(_OWORD *)(v7 - 112) = v11;
      *(_OWORD *)(v7 - 96) = v12;
      v14 = *(_QWORD *)(a3 - 48);
      *(_BYTE *)(v7 - 40) = *(_BYTE *)(a3 - 40);
      *(_QWORD *)(v7 - 48) = v14;
      v15 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v7 - 32) = v15;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      v7 = *((_QWORD *)&v21 + 1) - 192;
      *((_QWORD *)&v21 + 1) -= 192;
      a3 -= 192;
    }
    while (a3 != a5);
    v16 = v21;
  }
  v19 = 1;
  sub_101076C44((uint64_t)v18);
  return v16;
}

uint64_t sub_101076C44(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_101076C78(a1);
  return a1;
}

void sub_101076C78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 183) < 0)
      operator delete(*(void **)(v1 + 160));
    v1 += 192;
  }
}

uint64_t sub_101076CBC(uint64_t a1)
{
  sub_101076CF0(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_101076CF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 192;
      *(_QWORD *)(a1 + 16) = v2 - 192;
      if (*(char *)(v2 - 9) < 0)
      {
        operator delete(*(void **)(v2 - 32));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_101076D44(uint64_t *a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double v8;
  double v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  double v16;
  const char *v17;
  uint8_t *v18;
  double v19;
  double v20;
  _BYTE v21[12];
  __int128 v22;
  int v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  uint8_t buf[4];
  int v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;

  if (qword_10229FCA0 != -1)
    dispatch_once(&qword_10229FCA0, &stru_10219D8E8);
  v2 = qword_10229FCA8;
  if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *((_DWORD *)a1 + 8);
    v4 = *a1;
    v5 = a1[1];
    v6 = a1[2];
    v7 = *((unsigned __int8 *)a1 + 36);
    v8 = *((float *)a1 + 12);
    v9 = *((float *)a1 + 13);
    *(_DWORD *)buf = 67110656;
    v29 = v3;
    v30 = 2048;
    v31 = v4;
    v32 = 2048;
    v33 = v5;
    v34 = 2048;
    v35 = v6;
    v36 = 1024;
    v37 = v7;
    v38 = 2048;
    v39 = v8;
    v40 = 2048;
    v41 = v9;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "SwimDetectState,nStrokes,%d,startTime,%f,endTime,%f,turnTime,%f,isSwim,%d,distance,%f,distError,%f", buf, 0x40u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_10219D8E8);
    v10 = *((_DWORD *)a1 + 8);
    v11 = *a1;
    v12 = a1[1];
    v13 = a1[2];
    v14 = *((unsigned __int8 *)a1 + 36);
    v15 = *((float *)a1 + 12);
    v16 = *((float *)a1 + 13);
    LODWORD(v20) = 67110656;
    HIDWORD(v20) = v10;
    *(_WORD *)v21 = 2048;
    *(_QWORD *)&v21[2] = v11;
    *(_WORD *)&v21[10] = 2048;
    LODWORD(v22) = HIDWORD(v12);
    WORD2(v22) = 2048;
    *(_QWORD *)((char *)&v22 + 6) = v13;
    HIWORD(v22) = 1024;
    v23 = v14;
    v24 = 2048;
    v25 = v15;
    v26 = 2048;
    v27 = v16;
    LODWORD(v19) = 64;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 2, "SwimDetectState,nStrokes,%d,startTime,%f,endTime,%f,turnTime,%f,isSwim,%d,distance,%f,distError,%f", &v20, v19, v20, *(double *)v21, *(_DWORD *)&v21[8], *(double *)&v22, *((double *)&v22 + 1));
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLSwimDetect::logState()", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
}

double sub_101076F94(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 29) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = a2;
  return result;
}

uint64_t sub_101076FAC(uint64_t a1, _QWORD *a2)
{
  if (!*(_BYTE *)(a1 + 36) || *(int *)(a1 + 60) < 3)
    return 0;
  *a2 = *(_QWORD *)(a1 + 24);
  return 1;
}

BOOL sub_101076FD8(uint64_t a1)
{
  return *(_DWORD *)(a1 + 32) > 2;
}

BOOL sub_101076FE8(uint64_t a1, double a2)
{
  int v3;

  *(double *)(a1 + 16) = a2;
  v3 = *(unsigned __int8 *)(a1 + 36);
  if (*(_BYTE *)(a1 + 36))
  {
    *(_BYTE *)(a1 + 36) = 0;
    sub_101076D44((uint64_t *)a1);
    *(_QWORD *)(a1 + 29) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
  }
  else
  {
    sub_101076D44((uint64_t *)a1);
  }
  return v3 != 0;
}

void sub_101077040(uint64_t *a1, double a2)
{
  double v4;
  double v5;
  BOOL v6;
  unsigned int *v7;
  unsigned int *v8;
  BOOL v9;
  double v10;
  double v11;
  double v12;
  double v13;
  float v14;
  float v15;
  void *__p;
  unsigned int *v17;

  v4 = *((double *)a1 + 1);
  if (v4 == 0.0)
  {
    *(double *)a1 = a2;
    *((double *)a1 + 1) = a2;
    v4 = a2;
  }
  v5 = a2 - v4;
  if (*((_BYTE *)a1 + 36))
    v6 = 1;
  else
    v6 = v5 <= 10.0;
  if (!v6)
  {
    a1[1] = 0;
    a1[2] = 0;
    *(uint64_t *)((char *)a1 + 29) = 0;
    a1[3] = 0;
    a1[6] = 0;
    a1[7] = 0;
    *(double *)a1 = a2;
  }
  *((double *)a1 + 1) = a2;
  (*(void (**)(void **__return_ptr, double))(*(_QWORD *)a1[5] + 80))(&__p, *(double *)a1);
  v8 = (unsigned int *)__p;
  v7 = v17;
  v9 = v17 == __p;
  *((_DWORD *)a1 + 8) = -1431655765 * ((unint64_t)((char *)v17 - (_BYTE *)__p) >> 3);
  if (v9)
  {
    v11 = 0.0;
    v10 = 0.0;
  }
  else
  {
    v10 = 0.0;
    v11 = 0.0;
    do
    {
      v12 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)a1[5] + 192))(a1[5], v8[2]);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1[5] + 192))(a1[5], v8[2]);
      v11 = v11 + v12;
      v10 = v10 + v13;
      v8 += 6;
    }
    while (v8 != v7);
  }
  v14 = v11;
  v15 = v10;
  *((float *)a1 + 12) = v14;
  *((float *)a1 + 13) = v15;
  if (!*((_BYTE *)a1 + 36))
    *((_BYTE *)a1 + 36) = v11 + v10 * 2.0 > (*(float (**)(uint64_t))(*(_QWORD *)a1[5] + 32))(a1[5]) * 0.5;
  sub_101076D44(a1);
  if (__p)
  {
    v17 = (unsigned int *)__p;
    operator delete(__p);
  }
}

void sub_1010771AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1010771D0(uint64_t a1, __int128 *a2)
{
  float v4;
  float v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  double v26;
  __int128 v27;
  double v28;
  double v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  int v47;
  uint8_t buf[4];
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  double v53;
  __int16 v54;
  double v55;
  __int16 v56;
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  double v63;
  __int16 v64;
  int v65;
  float v66;
  __int128 v67;
  float v68;

  v67 = *a2;
  v4 = *(float *)(a1 + 48);
  v68 = v4 / (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
  v27 = xmmword_101C3D92C;
  v28 = 6.07861231;
  sub_1000F08C0((uint64_t)&v67, &v66, (int *)&v27, 2, 5);
  v5 = v66;
  *(float *)(a1 + 56) = v66;
  if (v5 <= 0.925)
  {
    v6 = 0;
  }
  else
  {
    v6 = *(unsigned __int8 *)(a1 + 36);
    if (*(_BYTE *)(a1 + 36))
      v6 = *(_DWORD *)(a1 + 60) + 1;
  }
  *(_DWORD *)(a1 + 60) = v6;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  if (qword_10229FCA0 != -1)
    dispatch_once(&qword_10229FCA0, &stru_10219D8E8);
  v7 = qword_10229FCA8;
  if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_INFO))
  {
    v8 = *((_QWORD *)a2 + 2);
    v9 = *((_QWORD *)a2 + 3);
    v10 = *(float *)(a1 + 48);
    v11 = *(float *)a2;
    v12 = *((float *)a2 + 1);
    v13 = *((float *)a2 + 2);
    v14 = *((float *)a2 + 3);
    v15 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)buf = 134220032;
    v49 = v8;
    v50 = 2048;
    v51 = v9;
    v52 = 2048;
    v53 = v10;
    v54 = 2048;
    v55 = v11;
    v56 = 2048;
    v57 = v12;
    v58 = 2048;
    v59 = v13;
    v60 = 2048;
    v61 = v14;
    v62 = 2048;
    v63 = v66;
    v64 = 1024;
    v65 = v15;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "SwimDetectFeatures,startTime,%f,timestamp,%f,distance,%f,periodicity,%f,rotationNorm2,%f,rotationZ,%f,peakAccel,%f,isSwimming,%f,pauseCount,%d", buf, 0x58u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_10219D8E8);
    v16 = *((_QWORD *)a2 + 2);
    v17 = *((_QWORD *)a2 + 3);
    v18 = *(float *)(a1 + 48);
    v19 = *(float *)a2;
    v20 = *((float *)a2 + 1);
    v21 = *((float *)a2 + 2);
    v22 = *((float *)a2 + 3);
    v23 = *(_DWORD *)(a1 + 60);
    v30 = 134220032;
    v31 = v16;
    v32 = 2048;
    v33 = v17;
    v34 = 2048;
    v35 = v18;
    v36 = 2048;
    v37 = v19;
    v38 = 2048;
    v39 = v20;
    v40 = 2048;
    v41 = v21;
    v42 = 2048;
    v43 = v22;
    v44 = 2048;
    v45 = v66;
    v46 = 1024;
    v47 = v23;
    LODWORD(v26) = 88;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 1, "SwimDetectFeatures,startTime,%f,timestamp,%f,distance,%f,periodicity,%f,rotationNorm2,%f,rotationZ,%f,peakAccel,%f,isSwimming,%f,pauseCount,%d", COERCE_DOUBLE(&v30), v26, *(double *)&v27, *((double *)&v27 + 1), v28, v29);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "void CLSwimDetect::feedFeatures(const Features &)", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
}

void sub_101077508(id a1)
{
  qword_10229FCA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

uint64_t sub_101077534(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  char **v7;
  char ***v8;
  __int128 v9;
  __int128 v10;
  int v11;
  NSObject *v12;
  int v13;
  int v14;
  NSObject *v15;
  int v16;
  int v17;
  NSObject *v18;
  uint8_t *v19;
  uint64_t v21;
  _BYTE *v22;
  char *v23;
  char *v24;
  int v25;
  int v26;
  const char *v27;
  uint8_t *v28;
  int v29;
  int v30;
  const char *v31;
  uint8_t *v32;
  uint64_t v33;
  _BYTE v34[14];
  char v35;
  int v36;
  _BYTE *v37;
  uint8_t buf[8];
  __int16 v39;
  int v40;
  char v41;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = a1 + 8;
  *(_QWORD *)(a1 + 32) = 0;
  v7 = (char **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = a1 + 32;
  v8 = (char ***)(a1 + 24);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a3;
  v9 = *a2;
  v10 = a2[1];
  *(_OWORD *)(a1 + 88) = a2[2];
  *(_OWORD *)(a1 + 72) = v10;
  *(_OWORD *)(a1 + 56) = v9;
  *(_DWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 109) = 256;
  *(_BYTE *)(a1 + 111) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a4;
  *(_QWORD *)(a1 + 128) = a5;
  sub_1008B9D24(a1, 0);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = 0;
  *v6 = 0;
  sub_100067A00((uint64_t)v8, *v7);
  *v8 = v7;
  *(_QWORD *)(a1 + 40) = 0;
  *v7 = 0;
  v11 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) < v11)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219D908);
    v12 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(_DWORD *)(a1 + 56);
      v14 = *(_DWORD *)(a1 + 60);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = v13;
      v39 = 1026;
      v40 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "TileError, connectivity, current, %{public}d, neighbor, %{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10219D908);
      v25 = *(_DWORD *)(a1 + 56);
      v26 = *(_DWORD *)(a1 + 60);
      *(_DWORD *)v34 = 67240448;
      *(_DWORD *)&v34[4] = v25;
      *(_WORD *)&v34[8] = 1026;
      *(_DWORD *)&v34[10] = v26;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TileError, connectivity, current, %{public}d, neighbor, %{public}d", v34, 14);
      v28 = (uint8_t *)v27;
      sub_100512490("Generic", 1, 0, 2, "CLTileDownloader::CLTileDownloader(CLTileDownloaderPolicy, CLITileDownloaderExternal *, CLTilesSetCollection *, CLTileDownloadPolicy *)", "%s\n", v27);
      if (v28 != buf)
        free(v28);
    }
    v11 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 56) = v11;
  }
  if (v11 < *(_DWORD *)(a1 + 64))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219D908);
    v15 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *(_DWORD *)(a1 + 60);
      v17 = *(_DWORD *)(a1 + 64);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = v16;
      v39 = 1026;
      v40 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "TileError, connectivity, neighbor, %{public}d, nonneighbor, %{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10219D908);
      v29 = *(_DWORD *)(a1 + 60);
      v30 = *(_DWORD *)(a1 + 64);
      *(_DWORD *)v34 = 67240448;
      *(_DWORD *)&v34[4] = v29;
      *(_WORD *)&v34[8] = 1026;
      *(_DWORD *)&v34[10] = v30;
      LODWORD(v33) = 14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TileError, connectivity, neighbor, %{public}d, nonneighbor, %{public}d", v34, v33);
      v32 = (uint8_t *)v31;
      sub_100512490("Generic", 1, 0, 2, "CLTileDownloader::CLTileDownloader(CLTileDownloaderPolicy, CLITileDownloaderExternal *, CLTilesSetCollection *, CLTileDownloadPolicy *)", "%s\n", v31);
      if (v32 != buf)
        free(v32);
    }
    *(_DWORD *)(a1 + 60) = *(_DWORD *)(a1 + 64);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10219D908);
  v18 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    sub_101077AEC((unsigned int *)(a1 + 56), buf);
    v19 = v41 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)v34 = 136446210;
    *(_QWORD *)&v34[4] = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "TileQueue, %{public}s", v34, 0xCu);
    if (v41 < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219D908);
    v21 = qword_1022A0048;
    sub_101077AEC((unsigned int *)(a1 + 56), v34);
    if (v35 >= 0)
      v22 = v34;
    else
      v22 = *(_BYTE **)v34;
    v36 = 136446210;
    v37 = v22;
    LODWORD(v33) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 1, "TileQueue, %{public}s", &v36, v33);
    v24 = v23;
    if (v35 < 0)
      operator delete(*(void **)v34);
    sub_100512490("Generic", 1, 0, 2, "CLTileDownloader::CLTileDownloader(CLTileDownloaderPolicy, CLITileDownloaderExternal *, CLTilesSetCollection *, CLTileDownloadPolicy *)", "%s\n", v24);
    if (v24 != (char *)buf)
      free(v24);
  }
  return a1;
}

void sub_101077AB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100067A00(v2, *(char **)(v1 + 32));
  sub_1008B9D24(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_101077AEC@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD v28[2];
  uint64_t v29;
  _QWORD v30[10];
  char v31;
  uint64_t v32;

  sub_100263E50((uint64_t)v28);
  v4 = sub_100263F7C(&v29, (uint64_t)"tileDownloaderPolicy", 20);
  v5 = sub_100263F7C(v4, (uint64_t)", currentRequirement, ", 22);
  v6 = (_QWORD *)std::ostream::operator<<(v5, *a1);
  v7 = sub_100263F7C(v6, (uint64_t)", neighborRequirement, ", 23);
  v8 = (_QWORD *)std::ostream::operator<<(v7, a1[1]);
  v9 = sub_100263F7C(v8, (uint64_t)", nonneighborRequirement, ", 26);
  v10 = (_QWORD *)std::ostream::operator<<(v9, a1[2]);
  v11 = sub_100263F7C(v10, (uint64_t)", slowCell, ", 12);
  v12 = (_QWORD *)std::ostream::operator<<(v11, *((unsigned __int8 *)a1 + 12));
  v13 = sub_100263F7C(v12, (uint64_t)", redownloadLocked, ", 20);
  v14 = (_QWORD *)std::ostream::operator<<(v13, *((unsigned __int8 *)a1 + 13));
  v15 = sub_100263F7C(v14, (uint64_t)", neighbors, ", 13);
  v16 = (_QWORD *)std::ostream::operator<<(v15, a1[4]);
  v17 = sub_100263F7C(v16, (uint64_t)", maxlist,", 10);
  v18 = (_QWORD *)std::ostream::operator<<(v17, a1[5]);
  v19 = sub_100263F7C(v18, (uint64_t)", maxage,", 9);
  v20 = (_QWORD *)std::ostream::operator<<(v19, *((double *)a1 + 3));
  v21 = sub_100263F7C(v20, (uint64_t)", cooloff, ", 11);
  v22 = (_QWORD *)std::ostream::operator<<(v21, *((double *)a1 + 4));
  v23 = sub_100263F7C(v22, (uint64_t)", refreshMultiplier, ", 21);
  v24 = (_QWORD *)std::ostream::operator<<(v23, *((float *)a1 + 10));
  v25 = sub_100263F7C(v24, (uint64_t)", decompress, ", 14);
  std::ostream::operator<<(v25, *((unsigned __int8 *)a1 + 44));
  std::stringbuf::str(a2, v30);
  *(_QWORD *)((char *)v28
  v29 = v26;
  if (v31 < 0)
    operator delete((void *)v30[8]);
  std::streambuf::~streambuf(v30);
  return std::ios::~ios(&v32);
}

void sub_101077CB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101077CCC(uint64_t a1, uint64_t *a2, uint64_t a3, double a4)
{
  uint64_t v7;
  NSObject *v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  std::string v15;
  __int128 __p;
  uint64_t v17;
  _WORD v18[8];
  std::string v19;
  __int128 v20;
  uint64_t v21;
  uint8_t buf[8];

  v19 = *(std::string *)a3;
  if (*(char *)(a3 + 47) < 0)
  {
    sub_100115CE4(&v20, *(void **)(a3 + 24), *(_QWORD *)(a3 + 32));
  }
  else
  {
    v20 = *(_OWORD *)(a3 + 24);
    v21 = *(_QWORD *)(a3 + 40);
  }
  if (*(_BYTE *)(a1 + 111))
  {
    sub_100FBCB08(*a2, &v19);
    v7 = *a2;
    *(_BYTE *)(v7 + 144) = *(_BYTE *)(a1 + 100);
    sub_100FA21A0(v7, (uint64_t)&unk_10230C2F0);
    v15 = v19;
    if (SHIBYTE(v21) < 0)
    {
      sub_100115CE4(&__p, (void *)v20, *((unint64_t *)&v20 + 1));
    }
    else
    {
      __p = v20;
      v17 = v21;
    }
    sub_101078048((_QWORD *)a1, (unsigned int *)&v15, 0, (uint64_t)"add");
    if (SHIBYTE(v17) < 0)
      operator delete((void *)__p);
    if ((_QWORD *)(a1 + 8) == sub_1001C8840(a1, (uint64_t)&v19))
    {
      *(_QWORD *)buf = &v19;
      v10 = sub_1008B9D6C((uint64_t **)a1, (uint64_t)&v19, (uint64_t)&unk_101B9EB60, (_OWORD **)buf);
      v11 = *a2;
      *a2 = 0;
      v12 = v10[10];
      v10[10] = v11;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      *(_QWORD *)buf = &v19;
      v13 = sub_1001CCC64((uint64_t **)(a1 + 24), (uint64_t)&v19, (uint64_t)&unk_101B9EB60, (__int128 **)buf);
      *((double *)v13 + 10) = a4;
      *((_BYTE *)v13 + 88) = 0;
      goto LABEL_22;
    }
    sub_10193C994();
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTileDownloader.mm", 174, "addToDownloadList");
    __break(1u);
    goto LABEL_26;
  }
  a2 = &qword_1022A0000;
  if (qword_1022A0040 != -1)
LABEL_26:
    dispatch_once(&qword_1022A0040, &stru_10219D908);
  v8 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "TileDl, preindexskip, addToDownloadList, #CloneMe", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (a2[8] != -1)
      dispatch_once(&qword_1022A0040, &stru_10219D908);
    v18[0] = 0;
    LODWORD(v14) = 2;
    v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TileDl, preindexskip, addToDownloadList, #CloneMe", v18, v14);
    sub_100512490("Generic", 1, 0, 0, "void CLTileDownloader::addToDownloadList(std::unique_ptr<CLTileFile>, const TileId &, CFAbsoluteTime)", "%s\n", v9);
    if (v9 != (char *)buf)
      free(v9);
  }
LABEL_22:
  if (SHIBYTE(v21) < 0)
    operator delete((void *)v20);
}

void sub_101078004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101078048(_QWORD *a1, unsigned int *a2, int a3, uint64_t a4)
{
  uint64_t **v8;
  uint64_t *v9;
  NSObject *v10;
  const char *v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  NSObject *v23;
  const char *v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _BYTE v36[24];
  _BYTE v37[32];
  _BYTE buf[12];
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;

  v8 = (uint64_t **)(a1 + 3);
  if (a1 + 4 == sub_1001C8840((uint64_t)(a1 + 3), (uint64_t)a2))
  {
    *(_QWORD *)buf = a2;
    v9 = sub_1001CCC64(v8, (uint64_t)a2, (uint64_t)&unk_101B9EB60, (__int128 **)buf);
    v9[10] = 0;
    *((_BYTE *)v9 + 88) = 0;
    if (a3)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10219D908);
      v10 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        v11 = sub_1001CC818(*a2);
        v12 = sub_1001C087C((uint64_t)a2);
        v13 = sub_1001C0858((uint64_t)a2);
        v14 = a1[2];
        v15 = a1[5];
        *(_DWORD *)buf = 136447491;
        *(_QWORD *)&buf[4] = v11;
        v39 = 2080;
        v40 = a4;
        v41 = 2049;
        v42 = v12;
        v43 = 2049;
        v44 = v13;
        v45 = 2050;
        v46 = v14;
        v47 = 2050;
        v48 = v15;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "@TileError, %{public}s, nostate, %s, llsw, %{private}.2lf, %{private}.2lf, nlist, %{public}ld, nstate, %{public}lu", buf, 0x3Eu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10219D908);
        v16 = qword_1022A0048;
        v17 = sub_1001CC818(*a2);
        v18 = sub_1001C087C((uint64_t)a2);
        v19 = sub_1001C0858((uint64_t)a2);
        v20 = a1[2];
        v21 = a1[5];
        *(_DWORD *)v36 = 136447491;
        *(_QWORD *)&v36[4] = v17;
        *(_WORD *)&v36[12] = 2080;
        *(_QWORD *)&v36[14] = a4;
        *(_WORD *)&v36[22] = 2049;
        *(_WORD *)v37 = 2049;
        *(double *)&v37[2] = v19;
        *(_WORD *)&v37[10] = 2050;
        *(_QWORD *)&v37[12] = v20;
        *(_WORD *)&v37[20] = 2050;
        *(_QWORD *)&v37[22] = v21;
        v22 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 0, "@TileError, %{public}s, nostate, %s, llsw, %{private}.2lf, %{private}.2lf, nlist, %{public}ld, nstate, %{public}lu", v36, 62, *(_OWORD *)v36, *(_QWORD *)&v36[16], *(_QWORD *)&v18, *(_OWORD *)v37, *(_OWORD *)&v37[16]);
LABEL_20:
        v35 = (char *)v22;
        sub_100512490("Generic", 1, 0, 2, "void CLTileDownloader::checkAndMakeState(TileId, BOOL, const char *)", "%s\n", v22);
        if (v35 != buf)
          free(v35);
      }
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10219D908);
      v23 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
      {
        v24 = sub_1001CC818(*a2);
        v25 = sub_1001C087C((uint64_t)a2);
        v26 = sub_1001C0858((uint64_t)a2);
        v27 = a1[2];
        v28 = a1[5];
        *(_DWORD *)buf = 136447491;
        *(_QWORD *)&buf[4] = v24;
        v39 = 2080;
        v40 = a4;
        v41 = 2049;
        v42 = v25;
        v43 = 2049;
        v44 = v26;
        v45 = 2050;
        v46 = v27;
        v47 = 2050;
        v48 = v28;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "@TileDl, %{public}s, makestate, %s, llsw, %{private}.2lf, %{private}.2lf, nlist, %{public}ld, nstate, %{public}lu", buf, 0x3Eu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10219D908);
        v29 = qword_1022A0048;
        v30 = sub_1001CC818(*a2);
        v31 = sub_1001C087C((uint64_t)a2);
        v32 = sub_1001C0858((uint64_t)a2);
        v33 = a1[2];
        v34 = a1[5];
        *(_DWORD *)v36 = 136447491;
        *(_QWORD *)&v36[4] = v30;
        *(_WORD *)&v36[12] = 2080;
        *(_QWORD *)&v36[14] = a4;
        *(_WORD *)&v36[22] = 2049;
        *(_WORD *)v37 = 2049;
        *(double *)&v37[2] = v32;
        *(_WORD *)&v37[10] = 2050;
        *(_QWORD *)&v37[12] = v33;
        *(_WORD *)&v37[20] = 2050;
        *(_QWORD *)&v37[22] = v34;
        v22 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 1, "@TileDl, %{public}s, makestate, %s, llsw, %{private}.2lf, %{private}.2lf, nlist, %{public}ld, nstate, %{public}lu", v36, 62, *(_QWORD *)v36, *(_OWORD *)&v36[8], *(_QWORD *)&v31, *(_QWORD *)v37, *(_QWORD *)&v37[8], *(_QWORD *)&v37[16], *(_QWORD *)&v37[24]);
        goto LABEL_20;
      }
    }
  }
}

BOOL sub_1010784C0(uint64_t a1)
{
  char v2;
  NSObject *v3;
  _BOOL8 result;
  const char *v5;
  NSObject *v6;
  NSObject *v7;
  uint8_t *v8;
  _QWORD v9[2];
  uint8_t buf[1640];

  v2 = sub_10119196C(*(_DWORD *)(a1 + 104), *(unsigned __int8 *)(a1 + 109));
  if (*(_BYTE *)(a1 + 111))
  {
    if ((v2 & 1) != 0)
    {
      if (*(double *)(a1 + 112) == 0.0)
        return 1;
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10219D908);
      v3 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "@TileDl, skipall, in progress", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10219D908);
        LOWORD(v9[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "@TileDl, skipall, in progress", v9, 2, v9[0]);
LABEL_28:
        v8 = (uint8_t *)v5;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLTileDownloader::areDownloadConditionsMet() const", "%s\n", v5);
        if (v8 != buf)
          free(v8);
        return 0;
      }
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10219D908);
      v7 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "@TileDl, skipall, on connectivity", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10219D908);
        LOWORD(v9[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "@TileDl, skipall, on connectivity", v9, 2, v9[0]);
        goto LABEL_28;
      }
    }
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219D908);
    v6 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "@TileDl, skipall, first unlock", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10219D908);
      LOWORD(v9[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "@TileDl, skipall, first unlock", v9, 2, v9[0]);
      goto LABEL_28;
    }
  }
  return result;
}

void sub_10107881C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  int v9;
  int v10;
  _QWORD *v11;
  int v12;
  double v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  int v31;
  NSObject *v32;
  double v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  int v48;
  uint64_t v49;
  NSString *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  BOOL v56;
  char v57;
  NSObject *v58;
  const char *v59;
  char *v60;
  int v61;
  char *v62;
  unsigned int *v63;
  __int128 v64;
  NSObject *v65;
  const char *v66;
  double v67;
  double v68;
  _BOOL4 v69;
  int v70;
  const char *v71;
  double v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  char *v79;
  uint64_t v80;
  const char *v81;
  double v82;
  double v83;
  _BOOL4 v84;
  int v85;
  const char *v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  __int128 v92;
  uint64_t v93;
  __int128 __p;
  uint64_t v95;
  BOOL v96;
  _OWORD v97[8];
  _BYTE v98[28];
  unsigned __int8 v99;
  _OWORD v100[8];
  _OWORD v101[2];
  void *__src;
  char *v103;
  char *v104;
  int v105;
  const char *v106;
  __int16 v107;
  double v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  _BOOL4 v112;
  __int16 v113;
  int v114;
  __int16 v115;
  _BYTE v116[10];
  __int16 v117;
  uint64_t v118;
  __int16 v119;
  uint64_t v120;
  __int16 v121;
  uint64_t v122;
  _BYTE buf[12];
  __int16 v124;
  double v125;
  __int16 v126;
  uint64_t v127;
  __int16 v128;
  _BOOL4 v129;
  __int16 v130;
  int v131;
  __int16 v132;
  _BYTE v133[10];
  __int16 v134;
  uint64_t v135;
  __int16 v136;
  uint64_t v137;
  __int16 v138;
  uint64_t v139;

  *(_DWORD *)buf = 13;
  sub_1000C1928(a4, buf);
  __src = 0;
  v103 = 0;
  v104 = 0;
  v89 = a4;
  v90 = sub_1001CC83C(*(_DWORD *)(a1 + 104), *(unsigned __int8 *)(a1 + 109));
  v9 = sub_10119196C(*(_DWORD *)(a1 + 104), *(unsigned __int8 *)(a1 + 109));
  if ((v90 & 1) != 0 || (*(int *)(a1 + 56) > 1 ? (v10 = v9) : (v10 = 0), v10 == 1))
  {
    v11 = *(_QWORD **)a1;
    if (*(_QWORD *)a1 == a1 + 8)
    {
      v12 = 0;
    }
    else
    {
      v12 = 0;
      do
      {
        *(_QWORD *)buf = v11[10];
        if (sub_1001CC848(a1, *(uint64_t *)buf, a5))
        {
          v13 = *(double *)(sub_1001CDE58(*(_DWORD *)(*(_QWORD *)buf + 48), *(_QWORD **)(a1 + 120)) + 136);
          v14 = *(_OWORD *)(a3 + 112);
          v100[6] = *(_OWORD *)(a3 + 96);
          v100[7] = v14;
          v101[0] = *(_OWORD *)(a3 + 128);
          *(_OWORD *)((char *)v101 + 12) = *(_OWORD *)(a3 + 140);
          v15 = *(_OWORD *)(a3 + 48);
          v100[2] = *(_OWORD *)(a3 + 32);
          v100[3] = v15;
          v16 = *(_OWORD *)(a3 + 80);
          v100[4] = *(_OWORD *)(a3 + 64);
          v100[5] = v16;
          v17 = *(_OWORD *)(a3 + 16);
          v100[0] = *(_OWORD *)a3;
          v100[1] = v17;
          if (sub_1011914B0(*(uint64_t *)buf, (uint64_t)v100, v13, a5))
          {
            sub_10107943C((uint64_t)&__src, (char *)__src, buf);
            ++v12;
          }
          else
          {
            v18 = v103;
            if (v103 >= v104)
            {
              v20 = (v103 - (_BYTE *)__src) >> 3;
              if ((unint64_t)(v20 + 1) >> 61)
                sub_100259694();
              v21 = (v104 - (_BYTE *)__src) >> 2;
              if (v21 <= v20 + 1)
                v21 = v20 + 1;
              if ((unint64_t)(v104 - (_BYTE *)__src) >= 0x7FFFFFFFFFFFFFF8)
                v22 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v22 = v21;
              if (v22)
                v23 = (char *)sub_10025E6A0((uint64_t)&v104, v22);
              else
                v23 = 0;
              v24 = &v23[8 * v20];
              *(_QWORD *)v24 = *(_QWORD *)buf;
              v19 = v24 + 8;
              v26 = (char *)__src;
              v25 = v103;
              if (v103 != __src)
              {
                do
                {
                  v27 = *((_QWORD *)v25 - 1);
                  v25 -= 8;
                  *((_QWORD *)v24 - 1) = v27;
                  v24 -= 8;
                }
                while (v25 != v26);
                v25 = (char *)__src;
              }
              __src = v24;
              v103 = v19;
              v104 = &v23[8 * v22];
              if (v25)
                operator delete(v25);
            }
            else
            {
              *(_QWORD *)v103 = *(_QWORD *)buf;
              v19 = v18 + 8;
            }
            v103 = v19;
          }
        }
        v28 = (_QWORD *)v11[1];
        if (v28)
        {
          do
          {
            v29 = v28;
            v28 = (_QWORD *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v29 = (_QWORD *)v11[2];
            v30 = *v29 == (_QWORD)v11;
            v11 = v29;
          }
          while (!v30);
        }
        v11 = v29;
      }
      while (v29 != (_QWORD *)(a1 + 8));
    }
    v31 = 1;
  }
  else
  {
    v31 = 0;
    v12 = 0;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10219D908);
  v32 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v33 = *(double *)(a1 + 16);
    v34 = *(_DWORD *)(a1 + 104);
    v35 = *(unsigned __int8 *)(a1 + 109);
    v36 = *(_QWORD *)(a3 + 4);
    v37 = *(_QWORD *)(a3 + 12);
    v38 = *(_QWORD *)(a3 + 20);
    *(_DWORD *)buf = 136448515;
    *(_QWORD *)&buf[4] = "TBD";
    v124 = 2050;
    v125 = v33;
    v126 = 2050;
    v127 = (v103 - (_BYTE *)__src) >> 3;
    v128 = 1026;
    v129 = v12;
    v130 = 1026;
    v131 = v31;
    v132 = 1026;
    *(_DWORD *)v133 = v34;
    *(_WORD *)&v133[4] = 1026;
    *(_DWORD *)&v133[6] = v35;
    v134 = 2049;
    v135 = v36;
    v136 = 2049;
    v137 = v37;
    v138 = 2050;
    v139 = v38;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "@TileDl, %{public}s, checkNextEligible, tilesToDownload, %{public}lu, tilesCanBeDownloaded, %{public}lu, ncurrent, %{public}d, connectivity, %{public}d, %{public}d, %{public}d, location, %{private}0.1f, %{private}0.1f, %{public}1.f", buf, 0x56u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219D908);
    v72 = *(double *)(a1 + 16);
    v73 = *(_DWORD *)(a1 + 104);
    v74 = *(unsigned __int8 *)(a1 + 109);
    v75 = *(_QWORD *)(a3 + 4);
    v76 = *(_QWORD *)(a3 + 12);
    v77 = *(_QWORD *)(a3 + 20);
    v105 = 136448515;
    v106 = "TBD";
    v107 = 2050;
    v108 = v72;
    v109 = 2050;
    v110 = (v103 - (_BYTE *)__src) >> 3;
    v111 = 1026;
    v112 = v12;
    v113 = 1026;
    v114 = v31;
    v115 = 1026;
    *(_DWORD *)v116 = v73;
    *(_WORD *)&v116[4] = 1026;
    *(_DWORD *)&v116[6] = v74;
    v117 = 2049;
    v118 = v75;
    v119 = 2049;
    v120 = v76;
    v121 = 2050;
    v122 = v77;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "@TileDl, %{public}s, checkNextEligible, tilesToDownload, %{public}lu, tilesCanBeDownloaded, %{public}lu, ncurrent, %{public}d, connectivity, %{public}d, %{public}d, %{public}d, location, %{private}0.1f, %{private}0.1f, %{public}1.f", &v105, 86);
    v79 = (char *)v78;
    sub_100512490("Generic", 1, 0, 2, "TileId CLTileDownloader::downloadNextEligibleTile(CLFileDownload *, CLDaemonLocation, CFAbsoluteTime)", "%s\n", v78);
    if (v79 != buf)
      free(v79);
  }
  v39 = (uint64_t *)__src;
  v40 = v103;
  if (__src == v103)
  {
LABEL_66:
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219D908);
    v58 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_INFO, "@TileDl, cell, skipall", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_93;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219D908);
    LOWORD(v105) = 0;
    LODWORD(v88) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "@TileDl, cell, skipall", &v105, v88);
    v60 = (char *)v59;
    sub_100512490("Generic", 1, 0, 2, "TileId CLTileDownloader::downloadNextEligibleTile(CLFileDownload *, CLDaemonLocation, CFAbsoluteTime)", "%s\n", v59);
LABEL_103:
    if (v60 != buf)
      free(v60);
    goto LABEL_93;
  }
  while (1)
  {
    v41 = *v39;
    v42 = sub_1001CDE58(*(_DWORD *)(*v39 + 48), *(_QWORD **)(a1 + 120));
    v99 = 0;
    v43 = *(double *)(v42 + 136);
    v44 = *(_OWORD *)(a3 + 112);
    v97[6] = *(_OWORD *)(a3 + 96);
    v97[7] = v44;
    *(_OWORD *)v98 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)&v98[12] = *(_OWORD *)(a3 + 140);
    v45 = *(_OWORD *)(a3 + 48);
    v97[2] = *(_OWORD *)(a3 + 32);
    v97[3] = v45;
    v46 = *(_OWORD *)(a3 + 80);
    v97[4] = *(_OWORD *)(a3 + 64);
    v97[5] = v46;
    v47 = *(_OWORD *)(a3 + 16);
    v97[0] = *(_OWORD *)a3;
    v97[1] = v47;
    v48 = sub_1011914B0(v41, (uint64_t)v97, v43, a5);
    v99 = v48;
    if (*(int *)(a1 + 60) > 1)
    {
      v96 = 1;
      goto LABEL_46;
    }
    if (v48)
      break;
    v96 = 0;
    if ((v90 & 1) != 0)
      goto LABEL_46;
LABEL_57:
    if (++v39 == (uint64_t *)v40)
      goto LABEL_66;
  }
  v55 = *(_DWORD *)(a1 + 56);
  v56 = v55 <= 1;
  v96 = v55 > 1;
  v57 = v90;
  if (!v56)
    v57 = 1;
  if ((v57 & 1) == 0)
    goto LABEL_57;
LABEL_46:
  if (*(char *)(v42 + 79) >= 0)
    v49 = v42 + 56;
  else
    v49 = *(_QWORD *)(v42 + 56);
  v50 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v49);
  if (!*(_BYTE *)(v42 + 80))
  {
    v51 = +[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration");
    if (*(char *)(v42 + 111) >= 0)
      v52 = v42 + 88;
    else
      v52 = *(_QWORD *)(v42 + 88);
    v50 = (NSString *)objc_msgSend(v51, "defaultForKey:defaultValue:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v52), v50);
  }
  v53 = *(_QWORD *)(a1 + 48);
  sub_1015A2E04(buf, (char *)-[NSString UTF8String](v50, "UTF8String"));
  v54 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t, BOOL))(*(_QWORD *)v53 + 24))(v53, v41, buf, a2, v96);
  if (SHIBYTE(v126) < 0)
    operator delete(*(void **)buf);
  if (!v54)
    goto LABEL_57;
  (*(void (**)(uint64_t))(*(_QWORD *)(v42 + 232) + 16))(v42 + 232);
  ++*(_DWORD *)(v42 + 280);
  (*(void (**)(uint64_t))(*(_QWORD *)(v42 + 232) + 24))(v42 + 232);
  sub_1015A2E04(buf, "startDownloading");
  if (v90)
    v61 = 2;
  else
    v61 = 1;
  sub_100CDC4CC(v42 + 232, (uint64_t *)buf, v61);
  if (SHIBYTE(v126) < 0)
    operator delete(*(void **)buf);
  if (sub_1001DFAE8())
  {
    sub_100119F3C(buf);
    v62 = (char *)(v41 + 8);
    if (*(char *)(v41 + 31) < 0)
      v62 = *(char **)v62;
    sub_1005285B4((uint64_t)buf, "getTile", v62);
    sub_10011B47C((uint64_t)buf, "isCurrentTile", &v99);
    sub_10011B47C((uint64_t)buf, "isAllowCellular", &v96);
    sub_1001DFAF4((uint64_t)buf, (uint64_t)"locationd");
    sub_10011A5A8(buf);
  }
  v63 = (unsigned int *)(v41 + 48);
  v64 = *(_OWORD *)(v41 + 48);
  *(_QWORD *)(v89 + 16) = *(_QWORD *)(v41 + 64);
  *(_OWORD *)v89 = v64;
  std::string::operator=((std::string *)(v89 + 24), (const std::string *)(v41 + 72));
  v92 = *(_OWORD *)v89;
  v93 = *(_QWORD *)(v89 + 16);
  if (*(char *)(v89 + 47) < 0)
  {
    sub_100115CE4(&__p, *(void **)(v89 + 24), *(_QWORD *)(v89 + 32));
  }
  else
  {
    __p = *(_OWORD *)(v89 + 24);
    v95 = *(_QWORD *)(v89 + 40);
  }
  sub_101078048((_QWORD *)a1, (unsigned int *)&v92, 1, (uint64_t)"downloading");
  if (SHIBYTE(v95) < 0)
    operator delete((void *)__p);
  *(_QWORD *)buf = v89;
  *((_BYTE *)sub_1001CCC64((uint64_t **)(a1 + 24), v89, (uint64_t)&unk_101B9EB60, (__int128 **)buf) + 88) = 1;
  *(double *)(a1 + 112) = a5;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10219D908);
  v65 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v66 = sub_1001CC818(*v63);
    v67 = sub_1001C087C(v41 + 48);
    v68 = sub_1001C0858(v41 + 48);
    v69 = v96;
    v70 = v99;
    v71 = -[NSString UTF8String](v50, "UTF8String");
    *(_DWORD *)buf = 136447491;
    *(_QWORD *)&buf[4] = v66;
    v124 = 2049;
    v125 = v67;
    v126 = 2049;
    v127 = *(_QWORD *)&v68;
    v128 = 1026;
    v129 = v69;
    v130 = 1026;
    v131 = v70;
    v132 = 2081;
    *(_QWORD *)v133 = v71;
    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "@TileReq, %{public}s, start, llsw, %{private}.2lf, %{private}.2lf, allowOverCellular, %{public}d, isCurrentTile, %{public}d, %{private}s", buf, 0x36u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219D908);
    v80 = qword_1022A0048;
    v81 = sub_1001CC818(*v63);
    v82 = sub_1001C087C(v41 + 48);
    v83 = sub_1001C0858(v41 + 48);
    v84 = v96;
    v85 = v99;
    v86 = -[NSString UTF8String](v50, "UTF8String");
    v105 = 136447491;
    v106 = v81;
    v107 = 2049;
    v108 = v82;
    v109 = 2049;
    v110 = *(_QWORD *)&v83;
    v111 = 1026;
    v112 = v84;
    v113 = 1026;
    v114 = v85;
    v115 = 2081;
    *(_QWORD *)v116 = v86;
    LODWORD(v88) = 54;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v80, 0, "@TileReq, %{public}s, start, llsw, %{private}.2lf, %{private}.2lf, allowOverCellular, %{public}d, isCurrentTile, %{public}d, %{private}s", &v105, v88);
    v60 = (char *)v87;
    sub_100512490("Generic", 1, 0, 2, "TileId CLTileDownloader::downloadNextEligibleTile(CLFileDownload *, CLDaemonLocation, CFAbsoluteTime)", "%s\n", v87);
    goto LABEL_103;
  }
LABEL_93:
  if (__src)
  {
    v103 = (char *)__src;
    operator delete(__src);
  }
}

void sub_101079368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;

  if (__p)
    operator delete(__p);
  if (*(char *)(a12 + 47) < 0)
    operator delete(*(void **)(a12 + 24));
  _Unwind_Resume(a1);
}

char *sub_10107943C(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      sub_100259694();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10025E6A0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10025E6A0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10107BE08((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_101079644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10107967C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v2 = a1 + 1;
  v3 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 == a1 + 1)
    return 0;
  while (sub_1000753C8(v3[10]) != a2)
  {
    v5 = (_QWORD *)v3[1];
    if (v5)
    {
      do
      {
        v6 = v5;
        v5 = (_QWORD *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        v6 = (_QWORD *)v3[2];
        v7 = *v6 == (_QWORD)v3;
        v3 = v6;
      }
      while (!v7);
    }
    v3 = v6;
    if (v6 == v2)
      return 0;
  }
  return v3[10];
}

uint64_t *sub_101079704@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t *a5@<X8>, double a6@<D0>)
{
  uint64_t *v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t *result;
  uint64_t v22;
  const char *v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  const char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  __int128 __p;
  uint64_t v34;
  int v35;
  const char *v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  int v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  double v48;
  _BYTE buf[12];
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  int v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  double v61;

  v31 = *(_OWORD *)a2;
  v32 = *(_QWORD *)(a2 + 16);
  if (*(char *)(a2 + 47) < 0)
  {
    sub_100115CE4(&__p, *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    __p = *(_OWORD *)(a2 + 24);
    v34 = *(_QWORD *)(a2 + 40);
  }
  sub_101078048((_QWORD *)a1, (unsigned int *)&v31, 1, (uint64_t)"completed");
  if (SHIBYTE(v34) < 0)
    operator delete((void *)__p);
  *a5 = 0;
  if (a3)
  {
    *(_QWORD *)buf = a2;
    v12 = sub_1008B9D6C((uint64_t **)a1, a2, (uint64_t)&unk_101B9EB60, (_OWORD **)buf);
    v13 = v12[10];
    v12[10] = 0;
    *a5 = v13;
    sub_1008B9B68((uint64_t **)a1, a2);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10219D908);
  v14 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v15 = sub_1001CC818(*(_DWORD *)a2);
    v16 = sub_1001C087C(a2);
    v17 = sub_1001C0858(a2);
    v18 = *(_QWORD *)(a1 + 16);
    v19 = *(_QWORD *)(a1 + 40);
    v20 = a6 - *(double *)(a1 + 112);
    *(_DWORD *)buf = 136447747;
    *(_QWORD *)&buf[4] = v15;
    v50 = 2049;
    v51 = v16;
    v52 = 2049;
    v53 = v17;
    v54 = 1026;
    v55 = a3;
    v56 = 2050;
    v57 = v18;
    v58 = 2050;
    v59 = v19;
    v60 = 2050;
    v61 = v20;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "@TileDl, %{public}s, completed, llsw, %{private}.2lf, %{private}.2lf, success, %{public}d, nlist, %{public}ld, nstate, %{public}lu, rtt, %{public}.1f", buf, 0x44u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219D908);
    v22 = qword_1022A0048;
    v23 = sub_1001CC818(*(_DWORD *)a2);
    v24 = sub_1001C087C(a2);
    v25 = sub_1001C0858(a2);
    v26 = *(_QWORD *)(a1 + 16);
    v27 = *(_QWORD *)(a1 + 40);
    v28 = a6 - *(double *)(a1 + 112);
    v35 = 136447747;
    v36 = v23;
    v37 = 2049;
    v38 = v24;
    v39 = 2049;
    v40 = v25;
    v41 = 1026;
    v42 = a3;
    v43 = 2050;
    v44 = v26;
    v45 = 2050;
    v46 = v27;
    v47 = 2050;
    v48 = v28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 0, "@TileDl, %{public}s, completed, llsw, %{private}.2lf, %{private}.2lf, success, %{public}d, nlist, %{public}ld, nstate, %{public}lu, rtt, %{public}.1f", &v35, 68, v31, v32);
    v30 = (char *)v29;
    sub_100512490("Generic", 1, 0, 2, "std::unique_ptr<CLTileFile> CLTileDownloader::downloadCompleted(TileId, BOOL, BOOL, CFAbsoluteTime)", "%s\n", v29);
    if (v30 != buf)
      free(v30);
  }
  *(_QWORD *)buf = a2;
  result = sub_1001CCC64((uint64_t **)(a1 + 24), a2, (uint64_t)&unk_101B9EB60, (__int128 **)buf);
  if (!a4 && a3)
    result[10] = 0;
  *((_BYTE *)result + 88) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  return result;
}

void sub_101079A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  _QWORD *v19;
  uint64_t v20;

  *v19 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101079AF0(uint64_t a1, uint64_t a2, double a3)
{
  __int128 *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BOOL4 v11;
  _QWORD *v12;
  _QWORD *v13;
  NSObject *v14;
  double v15;
  double v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  const char *v21;
  char *v22;
  uint64_t v23;
  double v24;
  double v25;
  const char *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 __p;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  _BOOL4 v42;
  __int16 v43;
  _BOOL4 v44;
  _BYTE buf[12];
  __int16 v46;
  double v47;
  __int16 v48;
  _BOOL4 v49;
  __int16 v50;
  _BOOL4 v51;

  if (!*(_BYTE *)(a1 + 111))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219D908);
    v7 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "TileDl, preindexskip, refresh, #CloneMe", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10219D908);
      LOWORD(v33) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TileDl, preindexskip, refresh, #CloneMe", &v33, 2);
      v22 = (char *)v21;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLTileDownloader::shouldRefresh(CLTileFile *, CFAbsoluteTime)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    return 0;
  }
  if (!sub_1001C94A8(a2))
    return 0;
  v33 = *(_OWORD *)(a2 + 48);
  v34 = *(_QWORD *)(a2 + 64);
  v6 = (__int128 *)(a2 + 72);
  if (*(char *)(a2 + 95) < 0)
  {
    sub_100115CE4(&v35, *(void **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v35 = *v6;
    v36 = *(_QWORD *)(a2 + 88);
  }
  v9 = sub_1001CDE58(v33, *(_QWORD **)(a1 + 120));
  v10 = sub_1001CC83C(*(_DWORD *)(a1 + 104), *(unsigned __int8 *)(a1 + 109));
  v11 = sub_100FA0798(a2, v10, a3, *(float *)(a1 + 96));
  v29 = *(_OWORD *)(a2 + 48);
  v30 = *(_QWORD *)(a2 + 64);
  if (*(char *)(a2 + 95) < 0)
  {
    sub_100115CE4(&__p, *(void **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    __p = *v6;
    v32 = *(_QWORD *)(a2 + 88);
  }
  v12 = sub_1001C8840(a1, (uint64_t)&v29);
  if (SHIBYTE(v32) < 0)
    operator delete((void *)__p);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10219D908);
  v13 = (_QWORD *)(a1 + 8);
  v14 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v15 = sub_1001C087C((uint64_t)&v33);
    v16 = sub_1001C0858((uint64_t)&v33);
    *(_DWORD *)buf = 134284289;
    *(double *)&buf[4] = v15;
    v46 = 2049;
    v47 = v16;
    v48 = 1026;
    v49 = v11;
    v50 = 1026;
    v51 = v13 != v12;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "@TileDl, checkRefresh, llsw, %{private}.2lf, %{private}.2lf, expired, %{public}d, onlist, %{public}d", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219D908);
    v23 = qword_1022A0048;
    v24 = sub_1001C087C((uint64_t)&v33);
    v25 = sub_1001C0858((uint64_t)&v33);
    v37 = 134284289;
    v38 = v24;
    v39 = 2049;
    v40 = v25;
    v41 = 1026;
    v42 = v11;
    v43 = 1026;
    v44 = v13 != v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 2, "@TileDl, checkRefresh, llsw, %{private}.2lf, %{private}.2lf, expired, %{public}d, onlist, %{public}d", &v37, 34);
    v27 = (char *)v26;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTileDownloader::shouldRefresh(CLTileFile *, CFAbsoluteTime)", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  v17 = v13 != v12 || !v11;
  if ((v17 & 1) == 0)
  {
    sub_101191978(*(_DWORD *)(v9 + 4), buf);
    sub_100FA0AB0(*(uint64_t *)buf, a2);
    v18 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    v28 = v18;
    sub_101077CCC(a1, &v28, (uint64_t)&v33, a3);
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v19 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v8 = v17 ^ 1u;
  if (SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  return v8;
}

void sub_101079FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10107A080(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t v11;
  double v12;
  unsigned int *v13;
  double v14;
  NSObject *v15;
  const char *v16;
  double v17;
  double v18;
  uint64_t v19;
  NSObject *v20;
  const char *v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  const char *v27;
  double v28;
  double v29;
  uint64_t v30;
  const char *v31;
  char *v32;
  uint64_t v33;
  const char *v34;
  double v35;
  double v36;
  uint64_t v37;
  const char *v38;
  char *v39;
  NSObject *v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v44;
  const char *v45;
  char *v46;
  uint64_t v47;
  const char *v48;
  char *v49;
  uint64_t v50;
  int v51;
  __int128 v52;
  uint64_t v53;
  __int128 __p;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  _QWORD v60[5];
  uint64_t v61[2];
  int v62;
  _BYTE v63[18];
  __int16 v64;
  double v65;
  __int16 v66;
  double v67;
  __int16 v68;
  double v69;
  __int16 v70;
  uint64_t v71;
  _BYTE buf[24];
  double v73;
  __int16 v74;
  double v75;
  __int16 v76;
  double v77;
  __int16 v78;
  uint64_t v79;

  v60[0] = _NSConcreteStackBlock;
  v60[1] = 3221225472;
  v60[2] = sub_10107AAE4;
  v60[3] = &unk_10217D888;
  *(double *)&v60[4] = a2;
  v61[0] = mach_absolute_time();
  v61[1] = (uint64_t)v60;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10219D908);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "@TileQueue, deleteAged, startsize, %{public}lu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219D908);
    v44 = *(_QWORD *)(a1 + 16);
    v62 = 134349056;
    *(_QWORD *)v63 = v44;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "@TileQueue, deleteAged, startsize, %{public}lu", &v62, 12);
    v46 = (char *)v45;
    sub_100512490("Generic", 1, 0, 2, "void CLTileDownloader::deleteAgedDownloads(CFAbsoluteTime)", "%s\n", v45);
    if (v46 != buf)
      free(v46);
  }
  v6 = *(uint64_t **)a1;
  if (*(_QWORD *)a1 == a1 + 8)
  {
    v51 = 0;
  }
  else
  {
    v51 = 0;
    do
    {
      v7 = (uint64_t *)v6[1];
      v8 = v6;
      if (v7)
      {
        do
        {
          v9 = v7;
          v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v8[2];
          v10 = *v9 == (_QWORD)v8;
          v8 = v9;
        }
        while (!v10);
      }
      v11 = v6[10];
      v56 = *(_OWORD *)(v11 + 48);
      v57 = *(_QWORD *)(v11 + 64);
      if (*(char *)(v11 + 95) < 0)
      {
        sub_100115CE4(&v58, *(void **)(v11 + 72), *(_QWORD *)(v11 + 80));
      }
      else
      {
        v58 = *(_OWORD *)(v11 + 72);
        v59 = *(_QWORD *)(v11 + 88);
      }
      v52 = v56;
      v53 = v57;
      if (SHIBYTE(v59) < 0)
      {
        sub_100115CE4(&__p, (void *)v58, *((unint64_t *)&v58 + 1));
      }
      else
      {
        __p = v58;
        v55 = v59;
      }
      sub_101078048((_QWORD *)a1, (unsigned int *)&v52, 1, (uint64_t)"aged");
      if (SHIBYTE(v55) < 0)
        operator delete((void *)__p);
      *(_QWORD *)buf = &v56;
      v12 = *((double *)sub_1001CCC64((uint64_t **)(a1 + 24), (uint64_t)&v56, (uint64_t)&unk_101B9EB60, (__int128 **)buf)
            + 10);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10219D908);
      v13 = (unsigned int *)(v11 + 48);
      v14 = vabdd_f64(a2, v12);
      v15 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        v16 = sub_1001CC818(*v13);
        v17 = sub_1001C087C((uint64_t)&v56);
        v18 = sub_1001C0858((uint64_t)&v56);
        v19 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 136447491;
        *(_QWORD *)&buf[4] = v16;
        *(_WORD *)&buf[12] = 2049;
        *(double *)&buf[14] = v17;
        *(_WORD *)&buf[22] = 2049;
        v73 = v18;
        v74 = 2050;
        v75 = v14;
        v76 = 2050;
        v77 = v12;
        v78 = 2050;
        v79 = v19;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "TileQueue, %{public}s, reqage, llsw, %{private}.2lf, %{private}.2lf, age, %{public}0.1f, time, %{public}0.1f, size, %{public}lu", buf, 0x3Eu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10219D908);
        v26 = qword_1022A0048;
        v27 = sub_1001CC818(*v13);
        v28 = sub_1001C087C((uint64_t)&v56);
        v29 = sub_1001C0858((uint64_t)&v56);
        v30 = *(_QWORD *)(a1 + 40);
        v62 = 136447491;
        *(_QWORD *)v63 = v27;
        *(_WORD *)&v63[8] = 2049;
        *(double *)&v63[10] = v28;
        v64 = 2049;
        v65 = v29;
        v66 = 2050;
        v67 = v14;
        v68 = 2050;
        v69 = v12;
        v70 = 2050;
        v71 = v30;
        LODWORD(v50) = 62;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 2, "TileQueue, %{public}s, reqage, llsw, %{private}.2lf, %{private}.2lf, age, %{public}0.1f, time, %{public}0.1f, size, %{public}lu", &v62, v50);
        v32 = (char *)v31;
        sub_100512490("Generic", 1, 0, 2, "void CLTileDownloader::deleteAgedDownloads(CFAbsoluteTime)", "%s\n", v31);
        if (v32 != buf)
          free(v32);
      }
      if (v14 >= *(double *)(a1 + 80))
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10219D908);
        v20 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          v21 = sub_1001CC818(*v13);
          v22 = sub_1001C087C(v11 + 48);
          v23 = sub_1001C0858(v11 + 48);
          v24 = *(_QWORD *)(a1 + 16) - 1;
          *(_DWORD *)buf = 136446979;
          *(_QWORD *)&buf[4] = v21;
          *(_WORD *)&buf[12] = 2049;
          *(double *)&buf[14] = v22;
          *(_WORD *)&buf[22] = 2049;
          v73 = v23;
          v74 = 2050;
          v75 = *(double *)&v24;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "@TileReq, %{public}s, rmlist, llsw, %{private}.2lf, %{private}.2lf, aged, size, %{public}ld", buf, 0x2Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10219D908);
          v33 = qword_1022A0048;
          v34 = sub_1001CC818(*v13);
          v35 = sub_1001C087C(v11 + 48);
          v36 = sub_1001C0858(v11 + 48);
          v37 = *(_QWORD *)(a1 + 16) - 1;
          v62 = 136446979;
          *(_QWORD *)v63 = v34;
          *(_WORD *)&v63[8] = 2049;
          *(double *)&v63[10] = v35;
          v64 = 2049;
          v65 = v36;
          v66 = 2050;
          v67 = *(double *)&v37;
          LODWORD(v50) = 42;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 0, "@TileReq, %{public}s, rmlist, llsw, %{private}.2lf, %{private}.2lf, aged, size, %{public}ld", &v62, v50);
          v39 = (char *)v38;
          sub_100512490("Generic", 1, 0, 2, "void CLTileDownloader::deleteAgedDownloads(CFAbsoluteTime)", "%s\n", v38);
          if (v39 != buf)
            free(v39);
        }
        sub_100FA2CE0(v11);
        sub_10008A9F0((uint64_t **)a1, v6);
        sub_1008B9B1C((uint64_t)(v6 + 4));
        operator delete(v6);
        *(_QWORD *)buf = &v56;
        v25 = sub_1001CCC64((uint64_t **)(a1 + 24), (uint64_t)&v56, (uint64_t)&unk_101B9EB60, (__int128 **)buf);
        v25[10] = 0;
        *((_BYTE *)v25 + 88) = 0;
        ++v51;
      }
      if (SHIBYTE(v59) < 0)
        operator delete((void *)v58);
      v6 = v9;
    }
    while (v9 != (uint64_t *)(a1 + 8));
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10219D908);
  v40 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v41 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&buf[4] = v51;
    *(_WORD *)&buf[8] = 2050;
    *(_QWORD *)&buf[10] = v41;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "@TileQueue, deleteAged, %{public}d, endsize, %{public}lu", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219D908);
    v47 = *(_QWORD *)(a1 + 16);
    v62 = 67240448;
    *(_DWORD *)v63 = v51;
    *(_WORD *)&v63[4] = 2050;
    *(_QWORD *)&v63[6] = v47;
    LODWORD(v50) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "@TileQueue, deleteAged, %{public}d, endsize, %{public}lu", &v62, v50);
    v49 = (char *)v48;
    sub_100512490("Generic", 1, 0, 2, "void CLTileDownloader::deleteAgedDownloads(CFAbsoluteTime)", "%s\n", v48);
    if (v49 != buf)
      free(v49);
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10219D948);
  v42 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v51;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Finished CLTilesDownloader::deleteAgedDownloads\", \"deleted\":%{public}u}", buf, 0x18u);
  }
  return sub_100134E40(v61);
}

void sub_10107AA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  sub_100134E40(&a41);
  _Unwind_Resume(a1);
}

void sub_10107AAE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  NSObject *v7;
  uint64_t v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  double v19;
  __int16 v20;
  uint64_t v21;

  v6 = sub_100127828(a3 - a2);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10219D948);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v8 = *(_QWORD *)(a1 + 32);
    v9[0] = 68290306;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2082;
    v13 = "elapsed";
    v14 = 2050;
    v15 = a2;
    v16 = 2050;
    v17 = a3;
    v18 = 2050;
    v19 = v6;
    v20 = 2050;
    v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLTileDownloader::deleteAgedDownloadItems\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"now_s\":\"%{public}.09f\"}", (uint8_t *)v9, 0x44u);
  }
}

uint64_t *sub_10107AC18(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  _QWORD v14[5];
  uint64_t v15[2];
  int v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t v19;

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10107AEB8;
  v14[3] = &unk_10217D888;
  v14[4] = a1;
  v15[0] = mach_absolute_time();
  v15[1] = (uint64_t)v14;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10219D908);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)buf = 134217984;
    v19 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "@TileQueue, cancelAll, size, %lu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219D908);
    v11 = *(_QWORD *)(a1 + 16);
    v16 = 134217984;
    v17 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "@TileQueue, cancelAll, size, %lu", &v16);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLTileDownloader::cancelAllDownloads()", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  v4 = (_QWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (*(_QWORD *)a1 != a1 + 8)
  {
    do
    {
      v6 = v5[10];
      sub_100FA2CE0(v6);
      sub_100FA2FF8(v6);
      v7 = (_QWORD *)v5[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v5[2];
          v9 = *v8 == (_QWORD)v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
    }
    while (v8 != v4);
  }
  *(_QWORD *)(a1 + 112) = 0;
  sub_1008B9D24(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v4;
  sub_100067A00(a1 + 24, *(char **)(a1 + 32));
  *(_QWORD *)(a1 + 24) = a1 + 32;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  return sub_100134E40(v15);
}

void sub_10107AE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100134E40((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10107AEB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double v6;
  NSObject *v7;
  uint64_t v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  double v19;
  __int16 v20;
  uint64_t v21;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = sub_100127828(a3 - a2);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10219D948);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v8 = *(_QWORD *)(v5 + 16);
    v9[0] = 68290307;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2082;
    v13 = "elapsed";
    v14 = 2050;
    v15 = a2;
    v16 = 2050;
    v17 = a3;
    v18 = 2050;
    v19 = v6;
    v20 = 2049;
    v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLTileDownloader::cancelAllDownloads\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"planned\":%{private}lu}", (uint8_t *)v9, 0x44u);
  }
}

void sub_10107AFF0(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  _BOOL4 v16;
  _BOOL4 v17;
  uint64_t *v18;
  char v19;
  NSObject *v20;
  const char *v21;
  double v22;
  double v23;
  uint64_t v24;
  NSObject *v25;
  const char *v26;
  double v27;
  double v28;
  int v29;
  _BOOL4 v30;
  uint64_t v31;
  const char *v32;
  double v33;
  double v34;
  int v35;
  _BOOL4 v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  const char *v40;
  double v41;
  double v42;
  uint64_t v43;
  const char *v44;
  char *v45;
  NSObject *v46;
  uint64_t v47;
  const char *v48;
  int v49;
  const char *v50;
  char *v51;
  const char *v52;
  const char *v53;
  char *v54;
  uint64_t v55;
  int v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  const char *v61;
  __int16 v62;
  double v63;
  __int16 v64;
  double v65;
  __int16 v66;
  _BYTE v67[10];
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  _BYTE buf[12];
  __int16 v73;
  double v74;
  __int16 v75;
  double v76;
  __int16 v77;
  _BYTE v78[10];
  __int16 v79;
  int v80;
  __int16 v81;
  int v82;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10219D908);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)buf = 134349312;
    *(_QWORD *)&buf[4] = v5;
    v73 = 1026;
    LODWORD(v74) = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TileQueue, cleanupList, start, size, %{public}lu, thresh, %{public}d", buf, 0x12u);
  }
  v59 = a1;
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219D908);
    v48 = *(const char **)(a1 + 16);
    v49 = *(_DWORD *)(a1 + 76);
    v60 = 134349312;
    v61 = v48;
    v62 = 1026;
    LODWORD(v63) = v49;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileQueue, cleanupList, start, size, %{public}lu, thresh, %{public}d", &v60, 18);
    v51 = (char *)v50;
    sub_100512490("Generic", 1, 0, 2, "void CLTileDownloader::cleanupDownloadList(CFAbsoluteTime)", "%s\n", v50);
    if (v51 != buf)
      free(v51);
  }
  if (*(_QWORD *)(a1 + 16) >= (unint64_t)*(int *)(a1 + 76))
    sub_10107AC18(a1);
  v7 = *(uint64_t **)a1;
  v58 = (uint64_t *)(a1 + 8);
  if (*(_QWORD *)a1 != a1 + 8)
  {
    v56 = 0;
    v8 = (uint64_t **)(a1 + 24);
    v57 = (_QWORD *)(a1 + 32);
    while (1)
    {
      v9 = v7;
      v10 = (uint64_t *)v7[1];
      v11 = v7;
      if (v10)
      {
        do
        {
          v7 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v7 = (uint64_t *)v11[2];
          v12 = *v7 == (_QWORD)v11;
          v11 = v7;
        }
        while (!v12);
      }
      v13 = v9[10];
      v14 = (unsigned int *)(v13 + 48);
      v15 = sub_1001CDE58(*(_DWORD *)(v13 + 48), *(_QWORD **)(a1 + 120));
      v16 = sub_1001C0618(v15 + 184, (unsigned int *)(v13 + 48));
      v17 = v16 && sub_1001CC848(v59, v13, a2);
      if (v57 == sub_1001C8840((uint64_t)v8, (uint64_t)v14))
      {
        *(_QWORD *)buf = v13 + 48;
        v18 = sub_1001CCC64(v8, (uint64_t)v14, (uint64_t)&unk_101B9EB60, (__int128 **)buf);
        if (*((_BYTE *)v18 + 88))
          v19 = 1;
        else
          v19 = v17;
        if ((v19 & 1) == 0 && (v16 & sub_1001C94A8(v13)) == 1)
        {
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10219D908);
          v20 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
          {
            v21 = sub_1001CC818(*v14);
            v22 = sub_1001C087C((uint64_t)v14);
            v23 = sub_1001C0858((uint64_t)v14);
            v24 = *(_QWORD *)(v59 + 16) - 1;
            *(_DWORD *)buf = 136446979;
            *(_QWORD *)&buf[4] = v21;
            v73 = 2049;
            v74 = v22;
            v75 = 2049;
            v76 = v23;
            v77 = 2050;
            *(_QWORD *)v78 = v24;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "@TileReq, %{public}s, rmlist, llsw, %{private}.2lf, %{private}.2lf, aged, size, %{public}ld", buf, 0x2Au);
          }
          a1 = v59;
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_10219D908);
            v39 = qword_1022A0048;
            v40 = sub_1001CC818(*v14);
            v41 = sub_1001C087C((uint64_t)v14);
            v42 = sub_1001C0858((uint64_t)v14);
            v43 = *(_QWORD *)(v59 + 16) - 1;
            v60 = 136446979;
            v61 = v40;
            v62 = 2049;
            v63 = v41;
            v64 = 2049;
            v65 = v42;
            v66 = 2050;
            *(_QWORD *)v67 = v43;
            LODWORD(v55) = 42;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v39, 0, "@TileReq, %{public}s, rmlist, llsw, %{private}.2lf, %{private}.2lf, aged, size, %{public}ld", &v60, v55);
            v45 = (char *)v44;
            sub_100512490("Generic", 1, 0, 2, "void CLTileDownloader::cleanupDownloadList(CFAbsoluteTime)", "%s\n", v44);
            if (v45 != buf)
              free(v45);
            a1 = v59;
          }
          sub_10008A9F0((uint64_t **)a1, v9);
          sub_1008B9B1C((uint64_t)(v9 + 4));
          operator delete(v9);
          v18[10] = 0;
          ++v56;
          goto LABEL_36;
        }
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10219D908);
        v25 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
        {
          v26 = sub_1001CC818(*(_DWORD *)(v13 + 48));
          v27 = sub_1001C087C((uint64_t)v14);
          v28 = sub_1001C0858((uint64_t)v14);
          v29 = *((unsigned __int8 *)v18 + 88);
          v30 = sub_1001C94A8(v13);
          *(_DWORD *)buf = 136447747;
          *(_QWORD *)&buf[4] = v26;
          v73 = 2049;
          v74 = v27;
          v75 = 2049;
          v76 = v28;
          v77 = 1026;
          *(_DWORD *)v78 = v29;
          *(_WORD *)&v78[4] = 1026;
          *(_DWORD *)&v78[6] = v17;
          v79 = 1026;
          v80 = !v30;
          v81 = 1026;
          v82 = !v16;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "@TileReq, %{public}s, keeplist, llsw, %{private}.2lf, %{private}.2lf, reasons, dl, %{public}d, retry, %{public}d, onserver, %{public}d, ondisc, %{public}d", buf, 0x38u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10219D908);
          v31 = qword_1022A0048;
          v32 = sub_1001CC818(*(_DWORD *)(v13 + 48));
          v33 = sub_1001C087C((uint64_t)v14);
          v34 = sub_1001C0858((uint64_t)v14);
          v35 = *((unsigned __int8 *)v18 + 88);
          v36 = sub_1001C94A8(v13);
          v60 = 136447747;
          v61 = v32;
          v62 = 2049;
          v63 = v33;
          v64 = 2049;
          v65 = v34;
          v66 = 1026;
          *(_DWORD *)v67 = v35;
          *(_WORD *)&v67[4] = 1026;
          *(_DWORD *)&v67[6] = v17;
          v68 = 1026;
          v69 = !v36;
          v70 = 1026;
          v71 = !v16;
          LODWORD(v55) = 56;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v31, 1, "@TileReq, %{public}s, keeplist, llsw, %{private}.2lf, %{private}.2lf, reasons, dl, %{public}d, retry, %{public}d, onserver, %{public}d, ondisc, %{public}d", &v60, v55);
          v38 = (char *)v37;
          sub_100512490("Generic", 1, 0, 2, "void CLTileDownloader::cleanupDownloadList(CFAbsoluteTime)", "%s\n", v37);
          if (v38 != buf)
            free(v38);
        }
      }
      a1 = v59;
LABEL_36:
      if (v7 == v58)
        goto LABEL_48;
    }
  }
  v56 = 0;
LABEL_48:
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10219D908);
  v46 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v47 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)buf = 134349312;
    *(_QWORD *)&buf[4] = v47;
    v73 = 1026;
    LODWORD(v74) = v56;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "TileQueue, cleanupList, done, size, %{public}lu, cleanedFiles, %{public}u", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219D908);
    v52 = *(const char **)(v59 + 16);
    v60 = 134349312;
    v61 = v52;
    v62 = 1026;
    LODWORD(v63) = v56;
    LODWORD(v55) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileQueue, cleanupList, done, size, %{public}lu, cleanedFiles, %{public}u", &v60, v55);
    v54 = (char *)v53;
    sub_100512490("Generic", 1, 0, 2, "void CLTileDownloader::cleanupDownloadList(CFAbsoluteTime)", "%s\n", v53);
    if (v54 != buf)
      free(v54);
  }
}

void sub_10107B90C(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10219D908);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TileQueue, setReach, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219D908);
    v7[0] = 67240192;
    v7[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileQueue, setReach, %{public}d", v7, 8);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLTileDownloader::setReachability(CLDaemonStatus_Type::Reachability)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  *(_DWORD *)(a1 + 104) = a2;
}

uint64_t sub_10107BABC(uint64_t a1, char a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
  if ((_DWORD)result)
    *(_BYTE *)(a1 + 109) = a2;
  return result;
}

void sub_10107BAF4(uint64_t a1, char a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if ((a2 & 1) == 0 && !*(_BYTE *)(a1 + 111))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219D908);
    v4 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TileQueue, firstUnlock", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10219D908);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileQueue, firstUnlock", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLTileDownloader::setLockState(BOOL)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    *(_BYTE *)(a1 + 111) = 1;
  }
  *(_BYTE *)(a1 + 110) = a2;
}

void sub_10107BCA0(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_10107BCCC(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10107BCF8(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_10107BD24@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x60uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_10107BDA4((uint64_t)v6 + 32, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_10107BD88(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1008B9C00(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10107BDA4(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;

  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
  v4 = a1 + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_100115CE4((_BYTE *)v4, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v4 = v5;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  return a1;
}

char *sub_10107BE08(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

uint64_t sub_10107BECC()
{
  sub_1015A2E04(qword_10230C2F0, "t");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230C2F0, (void *)&_mh_execute_header);
}

uint64_t sub_10107BF10(uint64_t a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_10107C06C(a1, "CLElevationRecorderDb", a2, (uint64_t)__p, 1, 2.56);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = off_10219D978;
  *(_QWORD *)(a1 + 72) = off_10219DA28;
  sub_100E81598((_QWORD *)(a1 + 368), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 384), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 400), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 416), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 432), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 448), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 464), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 480), 0, 0);
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_QWORD *)(a1 + 536) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 544) = 0x7FEFFFFFFFFFFFFFLL;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  return a1;
}

void sub_10107C040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10107C06C(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_10213DEF8;
  *(_QWORD *)a1 = off_10219DC58;
  *(_QWORD *)(a1 + 72) = off_10219DD00;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_10219DC58;
  *(_QWORD *)(a1 + 72) = off_10219DD00;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 288) = 12000;
  *(_QWORD *)(a1 + 296) = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 304));
  *(_QWORD *)(a1 + 304) = &off_10213DEF8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 248) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_10107C414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[37] = off_10213DEB0;
  sub_100427950(v27);
  sub_100554930(v26);
  sub_101138068(a12);
  *v24 = off_10213DEB0;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_10107C4B8()
{
  JUMPOUT(0x10107C498);
}

_QWORD *sub_10107C4C0(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_10219DD00;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_10219DC58;
  a1[37] = off_10213DEB0;
  sub_100427950(a1 + 38);
  sub_100554930(a1 + 22);
  sub_101138068(v2);
  *a1 = off_10213DEB0;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_10107C53C(_QWORD *a1)
{
  *a1 = off_10219D978;
  a1[9] = off_10219DA28;
  sub_10107C580((uint64_t)a1, 0, 0);
  return sub_10107C4C0(a1);
}

void sub_10107C580(uint64_t a1, void *a2, const void *a3)
{
  const void *v6;
  uint64_t v7;

  if ((a2 != 0) == (a3 != 0))
  {

    *(_QWORD *)(a1 + 496) = a2;
    v6 = *(const void **)(a1 + 504);
    if (v6)
      _Block_release(v6);
    if (a3)
      *(_QWORD *)(a1 + 504) = _Block_copy(a3);
  }
  else
  {
    v7 = sub_10193CB58();
    sub_10107C5F4(v7);
  }
}

_QWORD *sub_10107C5F8(uint64_t a1)
{
  return sub_10107C53C((_QWORD *)(a1 - 72));
}

void sub_10107C600(_QWORD *a1)
{
  sub_10107C53C(a1);
  operator delete();
}

void sub_10107C624(uint64_t a1)
{
  sub_10107C53C((_QWORD *)(a1 - 72));
  operator delete();
}

uint64_t sub_10107C64C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  double Current;
  sqlite3_stmt *v7;
  uint64_t v8;
  sqlite3_stmt *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  const char *v15;
  uint8_t *v16;
  uint64_t v17[3];
  __int16 v18;
  id buf[205];

  v5 = a1 + 14;
  v4 = a1[14];
  v17[1] = (uint64_t)(a1 + 14);
  (*(void (**)(uint64_t *))(v4 + 16))(a1 + 14);
  v18 = 256;
  if (*(double *)(*(_QWORD *)(a2 + 8) - 16) == 1.79769313e308)
  {
    if (sub_10008950C(a1 + 9))
    {
      sub_100131938(buf, (uint64_t)"CLElevationRecorderDb.aggregateRecords", 0);
      sub_10001E638(a1[10]);
      Current = CFAbsoluteTimeGetCurrent();
      sub_100087AF4(a1 + 50, v17);
      v7 = (sqlite3_stmt *)sub_100026CC8(v17[0]);
      if (sub_1000890C4(v7, 1, Current - *(double *)(*(_QWORD *)(a2 + 8) - 24)))
      {
        v8 = a1[10];
        v9 = (sqlite3_stmt *)sub_100026CC8(v17[0]);
        sub_10023C9B0(v8, v9);
      }
      sub_10001E99C(a1[10]);
      v10 = a1[10];
      if (*(uint64_t *)(v10 + 88) <= 0)
        v11 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v11 = *(_QWORD *)(v10 + 88);
      sub_100053048(v10, v11);
      v12 = v17[0];
      v17[0] = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      sub_100131740(buf);
    }
  }
  else
  {
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_10219DAB8);
    v13 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Programmer error, we expect an expiration record!", (uint8_t *)buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_10219DAB8);
      LOWORD(v17[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 17, "Programmer error, we expect an expiration record!", v17, 2);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "virtual long CLElevationRecorderDb::aggregateRecords(const CLAggregationRules &)", "%s\n", v15);
      if (v16 != (uint8_t *)buf)
        free(v16);
    }
  }
  (*(void (**)(uint64_t *))(*v5 + 24))(v5);
  return 0;
}

void sub_10107C8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10107C950(uint64_t a1, uint64_t a2)
{
  sub_10107C64C((uint64_t *)(a1 - 72), a2);
  return 0;
}

uint64_t sub_10107C96C(uint64_t a1, void **a2, double a3, double a4)
{
  uint64_t result;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  uint64_t v11;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100087AF4((_QWORD *)(a1 + 368), &v11);
    v9 = (sqlite3_stmt *)sub_100026CC8(v11);
    if (sub_1000890C4(v9, 1, a3))
    {
      v10 = (sqlite3_stmt *)sub_100026CC8(v11);
      if (sub_1000890C4(v10, 2, a4))
        sub_10107CA38(a1, &v11, a2);
    }
    result = v11;
    v11 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_10107CA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10107CA38(uint64_t a1, uint64_t *a2, void **a3)
{
  _OWORD *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unsigned __int8 src[8];
  uint64_t v33;

  sub_10001E638(*(_QWORD *)(a1 + 80));
  *(_QWORD *)src = 0;
  v33 = 0;
  sub_100681850(a1, src);
  for (; !sub_10003A094(a2, (uint64_t)&v28); a3[1] = v11)
  {
    uuid_copy((unsigned __int8 *)&v28 + 4, src);
    v6 = a3[1];
    v7 = (unint64_t)a3[2];
    if ((unint64_t)v6 >= v7)
    {
      v12 = ((char *)v6 - (_BYTE *)*a3) >> 6;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 58)
        sub_100259694();
      v14 = v7 - (_QWORD)*a3;
      if (v14 >> 5 > v13)
        v13 = v14 >> 5;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFC0)
        v15 = 0x3FFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
        v16 = (char *)sub_1002697F0((uint64_t)(a3 + 2), v15);
      else
        v16 = 0;
      v17 = &v16[64 * v12];
      v18 = v28;
      v19 = v29;
      v20 = v31;
      *((_OWORD *)v17 + 2) = v30;
      *((_OWORD *)v17 + 3) = v20;
      *(_OWORD *)v17 = v18;
      *((_OWORD *)v17 + 1) = v19;
      v22 = (char *)*a3;
      v21 = (char *)a3[1];
      v23 = v17;
      if (v21 != *a3)
      {
        do
        {
          v24 = *((_OWORD *)v21 - 4);
          v25 = *((_OWORD *)v21 - 3);
          v26 = *((_OWORD *)v21 - 1);
          *((_OWORD *)v23 - 2) = *((_OWORD *)v21 - 2);
          *((_OWORD *)v23 - 1) = v26;
          *((_OWORD *)v23 - 4) = v24;
          *((_OWORD *)v23 - 3) = v25;
          v23 -= 64;
          v21 -= 64;
        }
        while (v21 != v22);
        v21 = (char *)*a3;
      }
      v11 = v17 + 64;
      *a3 = v23;
      a3[1] = v17 + 64;
      a3[2] = &v16[64 * v15];
      if (v21)
        operator delete(v21);
    }
    else
    {
      v8 = v28;
      v9 = v29;
      v10 = v31;
      v6[2] = v30;
      v6[3] = v10;
      *v6 = v8;
      v6[1] = v9;
      v11 = v6 + 4;
    }
  }
  return sub_10001E99C(*(_QWORD *)(a1 + 80));
}

uint64_t sub_10107CBF8(uint64_t a1, int a2, int a3, void **a4, double a5, double a6)
{
  uint64_t result;
  sqlite3_stmt *v13;
  sqlite3_stmt *v14;
  sqlite3_stmt *v15;
  sqlite3_stmt *v16;
  uint64_t v17;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100087AF4((_QWORD *)(a1 + 480), &v17);
    v13 = (sqlite3_stmt *)sub_100026CC8(v17);
    if (sub_1000890C4(v13, 1, a5))
    {
      v14 = (sqlite3_stmt *)sub_100026CC8(v17);
      if (sub_1000890C4(v14, 2, a6))
      {
        v15 = (sqlite3_stmt *)sub_100026CC8(v17);
        if (sub_1000CD75C(v15, 3, a2))
        {
          v16 = (sqlite3_stmt *)sub_100026CC8(v17);
          if (sub_1000CD75C(v16, 4, a3))
            sub_10107CA38(a1, &v17, a4);
        }
      }
    }
    result = v17;
    v17 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_10107CCE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

BOOL sub_10107CD04(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) == 0;
}

double sub_10107CD28(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 528) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_QWORD *)(a1 + 536) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 544) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  return result;
}

void sub_10107CD4C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  _WORD v13[8];
  uint8_t buf[1640];

  if (sub_1000CC4F4(a1[10]))
  {
    sub_10107CFB0((uint64_t)a1);
    sub_100634364(a1[10], "ElevationHistory", (const char **)&off_10219DAF8, (const std::string::value_type **)&off_1022FCAD0, 0);
    a1[46] = sub_10063D314(a1[10], "SELECT * FROM ElevationHistory WHERE ? <= startTime AND endTime <= ? ORDER BY startTime ASC");
    a1[47] = v2;
    a1[48] = sub_10063D314(a1[10], "SELECT * FROM ElevationHistory ORDER BY startTime ASC");
    a1[49] = v3;
    a1[50] = sub_10063D314(a1[10], "DELETE FROM ElevationHistory WHERE startTime < ?");
    a1[51] = v4;
    a1[52] = sub_10063D314(a1[10], "DELETE FROM ElevationHistory");
    a1[53] = v5;
    a1[54] = sub_10063D314(a1[10], "INSERT INTO ElevationHistory (startTime, endTime, elevationAscended, elevationDescended, pressure) VALUES (?, ?, ?, ?, ?)");
    a1[55] = v6;
    a1[56] = sub_10063D314(a1[10], "SELECT * FROM ElevationHistory ORDER BY startTime DESC LIMIT 1");
    a1[57] = v7;
    a1[58] = sub_10063D314(a1[10], "UPDATE ElevationHistory SET startTime = startTime + ?, endTime = endTime + ?");
    a1[59] = v8;
    a1[60] = sub_10063D314(a1[10], "SELECT * FROM ElevationHistory WHERE ? <= startTime AND endTime <= ? AND ? <= id ORDER BY startTime ASC LIMIT ?");
    a1[61] = v9;
  }
  else
  {
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_10219DAB8);
    v10 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Device is locked and we are unable to open the database", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_10219DAB8);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "Device is locked and we are unable to open the database", v13, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLElevationRecorderDb::prepareSQLStatements()", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

void sub_10107CFB0(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  void *__p;
  const char *v6;
  int v7;
  __int16 v8;
  char v9;
  char v10;
  uint8_t buf[16];

  if (sub_100635B3C(*(_QWORD *)(a1 + 80), "ElevationHistory"))
  {
    v6 = "pressure";
    v7 = 5;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    sub_10063A8D4(*(_QWORD *)(a1 + 80), "ElevationHistory", (uint64_t)"pressure", (uint64_t)&v6);
  }
  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_10219DAB8);
  v2 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "ElevationHistory table doesn't even exist", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_10219DAB8);
    LOWORD(__p) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "ElevationHistory table doesn't even exist", &__p, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLElevationRecorderDb::alterTableIfNecessary()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
}

void sub_10107D480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a18 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a20);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  sub_1018B38B4((uint64_t)&a62);
  _Unwind_Resume(a1);
}

uint64_t sub_10107D524(uint64_t a1, void *a2)
{
  NSObject *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  size_t v8;
  std::string *v9;
  void **v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  void *v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v20;
  std::string *v21;
  void *v22[2];
  int64_t v23;
  std::string v24;
  void *__p[4];
  std::string buf[68];

  if (!sub_100635E80(*(_QWORD *)(a1 + 80), (char *)a2))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219DD40);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219DD40);
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice %{public}s needs autoincrement migration", __p, 12);
      v21 = (std::string *)v20;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<CLSignificantElevation>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLSignificantElevation, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    memset(__p, 0, 24);
    sub_1015A2E04(buf, (char *)a2);
    v5 = std::string::append(buf, "AutoIncr");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v23 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)v22 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_1015A2E04(buf, (char *)a2);
    v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_10001E638(*(_QWORD *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0)
      v8 = HIBYTE(__p[2]);
    else
      v8 = (size_t)__p[1];
    v9 = buf;
    sub_100259584((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v23 >= 0)
      v11 = v22;
    else
      v11 = (void **)v22[0];
    if (v23 >= 0)
      v12 = HIBYTE(v23);
    else
      v12 = (std::string::size_type)v22[1];
    v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v24.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    __p[0] = v14;
    __p[1] = v24.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v24.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      v15 = HIBYTE(__p[2]);
      v14 = __p[0];
    }
    if (v15 >= 0)
      v16 = (char *)__p;
    else
      v16 = (char *)v14;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), v16);
  }
  v17 = *(_QWORD *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = *(_QWORD *)(v17 + 88);
  sub_100053048(v17, v18);
  return 0;
}

void sub_10107E6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a60 < 0)
    operator delete(a55);
  _Unwind_Resume(a1);
}

uint64_t sub_10107E9DC(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  sqlite3_stmt *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100087AF4((_QWORD *)(a1 + 416), &v7);
    v3 = *(_QWORD *)(a1 + 80);
    v4 = (sqlite3_stmt *)sub_100026CC8(v7);
    sub_10023C9B0(v3, v4);
    v5 = *(_QWORD *)(a1 + 80);
    if (*(uint64_t *)(v5 + 88) <= 0)
      v6 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v6 = *(_QWORD *)(v5 + 88);
    sub_100053048(v5, v6);
    result = v7;
    v7 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_10107EA60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10107EA84(uint64_t a1)
{
  return sub_10107E9DC(a1 - 72);
}

uint64_t sub_10107EA90(uint64_t a1, double a2)
{
  uint64_t result;
  sqlite3_stmt *v5;
  sqlite3_stmt *v6;
  uint64_t v7;
  sqlite3_stmt *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  __int16 v12;
  uint64_t v13;
  uint8_t buf[1640];

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100087AF4((_QWORD *)(a1 + 464), &v13);
    v5 = (sqlite3_stmt *)sub_100026CC8(v13);
    if (sub_1000890C4(v5, 1, a2) && (v6 = (sqlite3_stmt *)sub_100026CC8(v13), sub_1000890C4(v6, 2, a2)))
    {
      v7 = *(_QWORD *)(a1 + 80);
      v8 = (sqlite3_stmt *)sub_100026CC8(v13);
      sub_10023C9B0(v7, v8);
    }
    else
    {
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_10219DAB8);
      v9 = qword_10229FD78;
      if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Failed to shift records.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD70 != -1)
          dispatch_once(&qword_10229FD70, &stru_10219DAB8);
        v12 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 17, "Failed to shift records.", &v12, 2);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLElevationRecorderDb::shiftRecordsByUL(CFTimeInterval)", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
    }
    result = v13;
    v13 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_10107ECA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10107ECD0(uint64_t a1, void **a2)
{
  uint64_t result;
  uint64_t v5;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100087AF4((_QWORD *)(a1 + 384), &v5);
    sub_10107CA38(a1, &v5, a2);
    result = v5;
    v5 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_10107ED38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10107ED5C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v11[2];
  uint64_t v12;
  _QWORD v13[8];
  void *v14[2];
  unsigned __int8 v15;

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12))
      goto LABEL_3;
LABEL_18:
    sub_10193CCE0(v2);
    __break(1u);
  }
  v9 = v11[1];
  operator delete(v11[0]);
  if (!v9)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v11);
    v3 = sub_100263F7C(&v12, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(v14, a1);
    if ((v15 & 0x80u) == 0)
      v4 = v14;
    else
      v4 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v5 = v15;
    else
      v5 = (uint64_t)v14[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
    if ((char)v15 < 0)
      operator delete(v14[0]);
    v7 = a1[10];
    std::stringbuf::str(v14, v13);
    if ((v15 & 0x80u) == 0)
      v8 = (char *)v14;
    else
      v8 = (char *)v14[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_10107F0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  if (*(char *)(v3 - 145) < 0)
    operator delete(*(void **)(v3 - 168));
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10107F11C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10219DD40);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219DD40);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219DD40);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLSignificantElevation>::setDatabaseAccessible() [T = CLSignificantElevation, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_10107F6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10107F718(uint64_t a1)
{
  return sub_10107F11C(a1 - 72);
}

void sub_10107F720(id a1)
{
  qword_10229FD78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

void sub_10107F74C(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_10107F778(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  _QWORD v15[8];
  void *v16[2];
  unsigned __int8 v17;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (HIBYTE(v14))
      goto LABEL_3;
LABEL_18:
    sub_10193CE4C(v4);
    __break(1u);
  }
  v12 = v13[1];
  operator delete(v13[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v13);
    v6 = sub_100263F7C(&v14, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(v16, a1);
    if ((v17 & 0x80u) == 0)
      v7 = v16;
    else
      v7 = (void **)v16[0];
    if ((v17 & 0x80u) == 0)
      v8 = v17;
    else
      v8 = (uint64_t)v16[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v17 < 0)
      operator delete(v16[0]);
    v10 = a1[10];
    std::stringbuf::str(v16, v15);
    if ((v17 & 0x80u) == 0)
      v11 = (char *)v16;
    else
      v11 = (char *)v16[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_10107FA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10107FAF0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_10193CFB8(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_10107FD50(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10193D124(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_10107FF88(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10193D290(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_1010801B0(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1010801DC(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _BYTE *v25;
  uint64_t *v26;
  _BYTE *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  NSObject *v37;
  NSObject *v38;
  int v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD handler[5];
  _QWORD v48[5];
  __int128 v49;
  void *__p;
  __int16 v51;
  const char *v52;
  __int16 v53;
  int v54;
  __int16 v55;
  uint64_t v56;

  *(_QWORD *)a1 = off_10219DD70;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = *a3;
  v8 = (_QWORD *)(a1 + 16);
  v9 = a3[1];
  *(_QWORD *)(a1 + 24) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 32) = *a7;
  v12 = a7[1];
  v45 = a1 + 32;
  *(_QWORD *)(a1 + 40) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_QWORD *)(a1 + 48) = *a4;
  v15 = (_QWORD *)(a1 + 48);
  v16 = a4[1];
  *(_QWORD *)(a1 + 56) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_QWORD *)(a1 + 64) = *a5;
  v19 = a5[1];
  v44 = a1 + 64;
  *(_QWORD *)(a1 + 72) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *(_QWORD *)(a1 + 80) = *a6;
  v22 = a6[1];
  *(_QWORD *)(a1 + 88) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  *(_WORD *)(a1 + 96) = 256;
  v25 = (_BYTE *)(a1 + 96);
  *(_QWORD *)(a1 + 104) = qword_1022FCAE8;
  v26 = (uint64_t *)(a1 + 104);
  *(_BYTE *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0xBFF0000000000000;
  *(_WORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 132) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 168) = 0xFFFF00000000;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 192) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 208) = _Q1;
  *(_OWORD *)(a1 + 224) = _Q1;
  *(_OWORD *)(a1 + 240) = _Q1;
  *(_DWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 268) = 0;
  *(_QWORD *)(a1 + 276) = 0;
  *(_QWORD *)(a1 + 260) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 284) = 0;
  *(_QWORD *)(a1 + 288) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 296) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 308) = 0;
  *(_QWORD *)(a1 + 316) = 0;
  *(_QWORD *)(a1 + 300) = 0;
  *(_BYTE *)(a1 + 324) = 0;
  v46 = a1 + 328;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  v43 = a1 + 344;
  sub_10023CFD8(a1 + 344, (uint64_t)"ProactiveHarvest", a1, 3600.0);
  v32 = (_BYTE *)(a1 + 97);
  if (((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v8 + 56))(*v8, a1 + 97) & 1) == 0)
    *v32 = 1;
  v33 = *v8;
  sub_1015A2E04(&__p, "ProactiveTimer");
  v48[0] = _NSConcreteStackBlock;
  v48[1] = 3221225472;
  v48[2] = sub_101080758;
  v48[3] = &unk_10212ECA0;
  v48[4] = a1;
  (*(void (**)(__int128 *__return_ptr, uint64_t, void **, _QWORD *, double, double))(*(_QWORD *)v33 + 88))(&v49, v33, &__p, v48, 1.79769313e308, 1.79769313e308);
  sub_1002B7674(v46, &v49);
  v34 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (SHIBYTE(v54) < 0)
    operator delete(__p);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*v8 + 96))(*v8, a1 + 104))
    goto LABEL_30;
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10219DE40);
  v37 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    __p = (void *)68289026;
    v51 = 2082;
    v52 = "";
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#proactive battery level overwritten by network default\"}", (uint8_t *)&__p, 0x12u);
LABEL_30:
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10219DE40);
  }
  v38 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v39 = *v32;
    v40 = *v26;
    __p = (void *)68289539;
    v51 = 2082;
    v52 = "";
    v53 = 1025;
    v54 = v39;
    v55 = 2049;
    v56 = v40;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#proactive policy constructor\", \"isProactiveAllowed\":%{private}hhd, \"proactiveBatteryLevel\":\"%{private}.02f\"}", (uint8_t *)&__p, 0x22u);
  }
  *(_QWORD *)(a1 + 120) = qword_1022FCAE0;
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16), a1 + 96) & 1) == 0)
    *v25 = 0;
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16), a1 + 160) & 1) == 0)
  {
    *(double *)(a1 + 160) = (*(double (**)(_QWORD))(*(_QWORD *)*v15 + 64))(*v15);
    (*(void (**)(_QWORD))(*(_QWORD *)*v8 + 80))(*v8);
  }
  sub_100197040();
  if (sub_10075D288())
  {
    LODWORD(__p) = 0;
    v41 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "silo", v43, v44, v45), "queue");
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_101080848;
    handler[3] = &unk_102145848;
    handler[4] = a1;
    notify_register_dispatch("CLPolicyProactive.start", (int *)&__p, v41, handler);
  }
  return a1;
}

void sub_1010806EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (a30 < 0)
    operator delete(__p);
  sub_100E3E6C8(a9);
  sub_100261F44(a12);
  sub_100261F44(v32);
  sub_100261F44(a10);
  sub_100261F44(v31);
  sub_100261F44(a11);
  sub_100261F44(v30);
  _Unwind_Resume(a1);
}

uint64_t sub_101080758(uint64_t a1)
{
  return sub_101080760(*(_QWORD *)(a1 + 32));
}

uint64_t sub_101080760(uint64_t a1)
{
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10219DE40);
  v2 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#proactive timer fired\"}", (uint8_t *)v4, 0x12u);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
}

void sub_101080848(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10219DE40);
  v2 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    v4 = 2082;
    v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#proactive CLPolicyProactive.start Darwin Notification\"}", (uint8_t *)v3, 0x12u);
  }
  sub_10004E3F4(v1, 1);
}

void sub_101080930(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 328);
  if (v2)
  {
    v3 = (_QWORD *)(a1 + 328);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    sub_100346F9C(v3);
    v7 = 0uLL;
    sub_1002B7674((uint64_t)v3, &v7);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
    if (*((_QWORD *)&v7 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1010809CC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  NSObject *v3;
  uint64_t v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;

  v2 = (uint64_t *)(a1 + 104);
  if (sub_1001FD98C(a2, "ProactiveBatteryLevel", (void *)(a1 + 104)))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10219DE40);
    v3 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v4 = *v2;
      v5[0] = 68289283;
      v5[1] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2049;
      v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#proactive battery level overwritten by harvest rules\", \"proactiveBatteryLevel\":\"%{private}f\"}", (uint8_t *)v5, 0x1Cu);
    }
  }
}

uint64_t sub_101080AD4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

uint64_t sub_101080AE0(uint64_t a1)
{
  double v2;
  double v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  double v8;
  void *__p[2];
  char v10;
  int v11;
  double v12;
  __int16 v13;
  uint64_t v14;
  uint8_t buf[4];
  double v16;
  __int16 v17;
  uint64_t v18;

  v2 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 64))(*(_QWORD *)(a1 + 48));
  v3 = v2 - *(double *)(a1 + 152);
  if (v3 < 0.0 || v3 >= 3240.0)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10219DE40);
    v4 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218240;
      v16 = v3;
      v17 = 2048;
      v18 = 0x40A9500000000000;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#proactive Extending proactive harvesting power assertion. Elapsed proactive time, %0.2f, minimum elapsed interval, %0.2f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10219DE40);
      v11 = 134218240;
      v12 = v3;
      v13 = 2048;
      v14 = 0x40A9500000000000;
      LODWORD(v8) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 1, "#proactive Extending proactive harvesting power assertion. Elapsed proactive time, %0.2f, minimum elapsed interval, %0.2f", COERCE_DOUBLE(&v11), v8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLPolicyProactive::extendProactiveAttempt()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    sub_100E3E6F0(a1 + 344);
    if (*(int *)(a1 + 352) >= 1)
      sub_10193D570();
    sub_1015A2E04(__p, "Extend");
    sub_10002B684(a1 + 344, (uint64_t *)__p);
    if (v10 < 0)
      operator delete(__p[0]);
    *(double *)(a1 + 152) = v2;
  }
  return (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(a1 + 328) + 24))(*(_QWORD *)(a1 + 328), v2 + 180.0);
}

void sub_101080D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

NSDictionary *__cdecl sub_101080D7C(id a1)
{
  return (NSDictionary *)&off_102220150;
}

NSDictionary *__cdecl sub_101080D88(id a1)
{
  return (NSDictionary *)&off_102220178;
}

uint64_t sub_101080D94(uint64_t a1)
{
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), a1);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), 14);
  return sub_101080DDC(a1);
}

uint64_t sub_101080DDC(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  _BOOL4 v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  _BOOL4 v9;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
  if (*(_DWORD *)(a1 + 168) != (_DWORD)result)
  {
    *(_DWORD *)(a1 + 168) = result;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10219DE40);
    v3 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v4 = *(_DWORD *)(a1 + 168) == 3;
      v5[0] = 68289283;
      v5[1] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 1025;
      v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#proactive request #proactive authorization status\", \"isAuthorized\":%{private}hhd}", (uint8_t *)v5, 0x18u);
    }
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48));
  }
  return result;
}

uint64_t sub_101080EFC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  const char *v21;
  uint8_t *v22;
  double v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  double v29;
  uint8_t buf[4];
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  double v35;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((_DWORD)result)
  {
    result = sub_101080AE0(a1);
    if (*(double *)(a1 + 192) < 0.0
      || (result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 104))(*(_QWORD *)(a1 + 80)),
          (_DWORD)result))
    {
      v5 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 172) = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 188) = v5;
      v6 = *(_OWORD *)(a2 + 32);
      v7 = *(_OWORD *)(a2 + 48);
      v8 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 236) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 252) = v8;
      *(_OWORD *)(a1 + 204) = v6;
      *(_OWORD *)(a1 + 220) = v7;
      v9 = *(_OWORD *)(a2 + 96);
      v10 = *(_OWORD *)(a2 + 112);
      v11 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 140);
      *(_OWORD *)(a1 + 284) = v10;
      *(_OWORD *)(a1 + 300) = v11;
      *(_OWORD *)(a1 + 268) = v9;
    }
    else if (*(double *)(a2 + 76) - *(double *)(a1 + 160) > 900.0)
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10219DE40);
      v12 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
      {
        v13 = *(_QWORD *)(a1 + 176);
        v14 = *(_QWORD *)(a1 + 184);
        v15 = *(double *)(a2 + 76) - *(double *)(a1 + 160);
        *(_DWORD *)buf = 134218496;
        v31 = v13;
        v32 = 2048;
        v33 = v14;
        v34 = 2048;
        v35 = v15;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#proactive Did not achieve vehicular speed from <%+.8f,%+.8f> in %.3fs, turning off proactive harvesting", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_10219DE40);
        v18 = *(_QWORD *)(a1 + 176);
        v19 = *(_QWORD *)(a1 + 184);
        v20 = *(double *)(a2 + 76) - *(double *)(a1 + 160);
        v24 = 134218496;
        v25 = v18;
        v26 = 2048;
        v27 = v19;
        v28 = 2048;
        v29 = v20;
        LODWORD(v23) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 0, "#proactive Did not achieve vehicular speed from <%+.8f,%+.8f> in %.3fs, turning off proactive harvesting", COERCE_DOUBLE(&v24), v23);
        v22 = (uint8_t *)v21;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLPolicyProactive::updatePolicyProactiveFromGps(const CLDaemonLocation &)", "%s\n", v21);
        if (v22 != buf)
          free(v22);
      }
      sub_10004E3F4(a1, 0);
      v16 = *(_QWORD *)(a1 + 328);
      v17 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 64))(*(_QWORD *)(a1 + 48));
      return (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v16 + 24))(v16, v17 + 3600.0);
    }
  }
  return result;
}

uint64_t sub_1010811B8(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 14)
    return sub_101080DDC(a1);
  return a1;
}

void sub_1010811C8(uint64_t a1, __int128 *a2)
{
  uint64_t *v2;
  double v3;
  __int128 v4;
  int v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  NSObject *v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  _WORD v23[7];
  uint8_t buf[4];
  _BYTE v25[18];

  v2 = (uint64_t *)(a1 + 120);
  v3 = *(double *)(a1 + 120);
  v4 = *a2;
  *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 120) = v4;
  if (v3 != *(double *)&qword_1022FCAE0 || *(double *)a2 >= 100.0 || *((_BYTE *)a2 + 8) != 0)
  {
    v8 = *(unsigned __int8 *)(a1 + 144);
    if (*(_BYTE *)(a1 + 129))
    {
      v9 = *(double *)(a1 + 120);
      if (v9 >= *(double *)(a1 + 104))
      {
        if (v9 >= v3 || *(_BYTE *)(a1 + 128) != 0)
        {
          if (*(_BYTE *)(a1 + 144))
            return;
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_10219DE40);
          v16 = qword_1022A0208;
          if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#proactive battery criteria achieved", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0200 != -1)
              dispatch_once(&qword_1022A0200, &stru_10219DE40);
            v23[0] = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 1, "#proactive battery criteria achieved", v23, 2);
            v22 = (uint8_t *)v21;
            sub_100512490("Generic", 1, 0, 2, "virtual void CLPolicyProactive::updatePolicyFromBattery(const CLDaemonStatus_Type::Battery &)", "%s\n", v21);
            if (v22 != buf)
              free(v22);
          }
          v17 = 1;
          goto LABEL_42;
        }
        if (*(_BYTE *)(a1 + 144))
        {
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_10219DE40);
          v18 = qword_1022A0208;
          if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
          {
            v19 = *v2;
            *(_DWORD *)buf = 134218240;
            *(double *)v25 = v3;
            *(_WORD *)&v25[8] = 2048;
            *(_QWORD *)&v25[10] = v19;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "#proactive battery criteria not achieved: battery level dropped: from,%.2f,to,%.2f", buf, 0x16u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_41;
          bzero(buf, 0x65CuLL);
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_10219DE40);
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 1, "#proactive battery criteria not achieved: battery level dropped: from,%.2f,to,%.2f");
          goto LABEL_50;
        }
      }
      else if (*(_BYTE *)(a1 + 144))
      {
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_10219DE40);
        v10 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
        {
          v11 = *(_QWORD *)(a1 + 120);
          v12 = *(_QWORD *)(a1 + 104);
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)v25 = v11;
          *(_WORD *)&v25[8] = 2048;
          *(_QWORD *)&v25[10] = v12;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#proactive battery criteria not achieved: battery level too low:required,%.2f,achieved,%.2f", buf, 0x16u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_41;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_10219DE40);
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 1, "#proactive battery criteria not achieved: battery level too low:required,%.2f,achieved,%.2f");
LABEL_50:
        v20 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLPolicyProactive::updatePolicyFromBattery(const CLDaemonStatus_Type::Battery &)", "%s\n", v13);
        if (v20 != buf)
          free(v20);
LABEL_41:
        v17 = 0;
LABEL_42:
        *(_BYTE *)(a1 + 144) = v17;
        goto LABEL_44;
      }
    }
    else if (*(_BYTE *)(a1 + 144))
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10219DE40);
      v14 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)v25 = 0;
        *(_WORD *)&v25[4] = 2082;
        *(_QWORD *)&v25[6] = "";
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#proactive battery criteria not achieved: battery disconnected\"}", buf, 0x12u);
      }
      goto LABEL_41;
    }
    v17 = 0;
LABEL_44:
    if (v17 != v8)
    {
      sub_10004DECC(a1);
      sub_10004E3F4(a1, *(unsigned __int8 *)(a1 + 112));
    }
  }
}

void sub_101081720(_QWORD **a1)
{
  uint64_t v2;
  double v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  double v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  double v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  double v28;

  v2 = (*(uint64_t (**)(_QWORD *))(*a1[10] + 56))(a1[10]);
  if (((unsigned int (*)(_QWORD **))(*a1)[5])(a1))
  {
    v3 = (*(double (**)(_QWORD *))(*a1[6] + 64))(a1[6]);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10219DE40);
    v4 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(v2 + 4);
      v6 = *(_QWORD *)(v2 + 12);
      v7 = v3 - *(double *)(v2 + 76);
      *(_DWORD *)buf = 134218496;
      v24 = v5;
      v25 = 2048;
      v26 = v6;
      v27 = 2048;
      v28 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#proactive GPS timed out (last location <%+.8f,%+.8f> from %.3fs ago), turning off proactive harvesting", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10219DE40);
      v9 = *(_QWORD *)(v2 + 4);
      v10 = *(_QWORD *)(v2 + 12);
      v11 = v3 - *(double *)(v2 + 76);
      v17 = 134218496;
      v18 = v9;
      v19 = 2048;
      v20 = v10;
      v21 = 2048;
      v22 = v11;
      LODWORD(v16) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 0, "#proactive GPS timed out (last location <%+.8f,%+.8f> from %.3fs ago), turning off proactive harvesting", COERCE_DOUBLE(&v17), v16);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLPolicyProactive::updatePolicyFromTrafficTimer()", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    sub_10004E3F4((uint64_t)a1, 0);
    (*(void (**)(_QWORD *, double))(*a1[41] + 24))(a1[41], v3 + 3600.0);
  }
  else if ((sub_10004DECC((uint64_t)a1) & 1) != 0)
  {
    sub_10004E3F4((uint64_t)a1, 1);
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10219DE40);
    v8 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#proactive Proactive harvesting is not allowed, ignoring, onProactiveTimer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10219DE40);
      LOWORD(v17) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 0, "#proactive Proactive harvesting is not allowed, ignoring, onProactiveTimer", &v17, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLPolicyProactive::updatePolicyFromTrafficTimer()", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
}

_QWORD *sub_101081AF8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_10219DD70;
  v2 = (uint64_t)(a1 + 2);
  sub_100E3E6C8(a1 + 43);
  sub_100261F44((uint64_t)(a1 + 41));
  sub_100261F44((uint64_t)(a1 + 10));
  sub_100261F44((uint64_t)(a1 + 8));
  sub_100261F44((uint64_t)(a1 + 6));
  sub_100261F44((uint64_t)(a1 + 4));
  sub_100261F44(v2);
  return a1;
}

void sub_101081B60(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_10219DD70;
  v2 = (uint64_t)(a1 + 2);
  sub_100E3E6C8(a1 + 43);
  sub_100261F44((uint64_t)(a1 + 41));
  sub_100261F44((uint64_t)(a1 + 10));
  sub_100261F44((uint64_t)(a1 + 8));
  sub_100261F44((uint64_t)(a1 + 6));
  sub_100261F44((uint64_t)(a1 + 4));
  sub_100261F44(v2);
  operator delete();
}

void sub_101081BD8(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_101081C04(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

std::string *sub_101081C30@<X0>(unsigned int a1@<W0>, std::string *a2@<X8>)
{
  std::string *result;

  result = (std::string *)sub_1015A2E04(a2, "invalid");
  if (a1 < 4)
    return std::string::assign(a2, off_10219DF00[a1]);
  return result;
}

void sub_101081C7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_101081C98@<X0>(unsigned int a1@<W0>, std::string *a2@<X8>)
{
  std::string *result;

  result = (std::string *)sub_1015A2E04(a2, "invalid");
  if (a1 < 3)
    return std::string::assign(a2, off_10219DF20[(char)a1]);
  return result;
}

void sub_101081CE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_101081D04@<X0>(int a1@<W0>, std::string *a2@<X8>)
{
  std::string *result;
  const std::string::value_type *v5;

  result = (std::string *)sub_1015A2E04(a2, "invalid");
  if (a1 == 1)
  {
    v5 = "stepBout";
  }
  else
  {
    if (a1)
      return result;
    v5 = "gaitBout";
  }
  return std::string::assign(a2, v5);
}

void sub_101081D5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

double sub_101081D78(double a1)
{
  return floor(a1 / 86400.0) * 86400.0;
}

double sub_101081D90(double **a1)
{
  double *v1;
  double *v2;
  uint64_t v3;
  double v5;
  double v6;
  double *v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v2 = *a1;
  v1 = a1[1];
  v3 = (char *)v1 - (char *)*a1;
  if ((unint64_t)v3 < 0x10)
    return -INFINITY;
  v5 = (double)(unint64_t)(v3 >> 3);
  if (v2 == v1)
  {
    v9 = 0.0;
  }
  else
  {
    v6 = 0.0;
    v7 = *a1;
    do
    {
      v8 = *v7++;
      v6 = v6 + v8;
    }
    while (v7 != v1);
    v9 = 0.0;
    v10 = v6 / v5;
    do
    {
      v11 = *v2++;
      v9 = v9 + (v11 - v10) * (v11 - v10);
    }
    while (v2 != v1);
  }
  return sqrt(v9 / (v5 + -1.0));
}

double sub_101081E0C(double **a1)
{
  double *v1;
  double *v2;
  double v3;
  double v4;

  v2 = *a1;
  v1 = a1[1];
  if (v1 == *a1)
    return 0.0;
  v3 = 0.0;
  do
  {
    v4 = *v2++;
    v3 = v3 + v4;
  }
  while (v2 != v1);
  return v3 / (double)(unint64_t)(v1 - *a1);
}

double sub_101081E44(double **a1)
{
  double *v1;
  double *v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  __int16 v16[8];
  uint8_t buf[1640];

  v2 = *a1;
  v1 = a1[1];
  v3 = (char *)v1 - (char *)*a1;
  if ((unint64_t)v3 < 0x10)
    return -INFINITY;
  v5 = (double)(unint64_t)(v3 >> 3);
  if (v2 == v1)
  {
    v10 = 0.0;
    v9 = 0.0 / v5;
    if (0.0 / v5 != 0.0)
      return sqrt(v10 / (v5 + -1.0)) / v9;
  }
  else
  {
    v6 = 0.0;
    v7 = *a1;
    do
    {
      v8 = *v7++;
      v6 = v6 + v8;
    }
    while (v7 != v1);
    v9 = v6 / v5;
    if (v9 != 0.0)
    {
      v10 = 0.0;
      do
      {
        v11 = *v2++;
        v10 = v10 + (v11 - v9) * (v11 - v9);
      }
      while (v2 != v1);
      return sqrt(v10 / (v5 + -1.0)) / v9;
    }
  }
  if (qword_10229FC40 != -1)
    dispatch_once(&qword_10229FC40, &stru_10219DEA0);
  v12 = qword_10229FC48;
  if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "#warning: zero-mean coefficient of variance", buf, 2u);
  }
  v4 = 0.0;
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_10219DEA0);
    v16[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 1, "#warning: zero-mean coefficient of variance", v16, 2);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "double CLMobility::calculateCV(const std::vector<double> &)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  return v4;
}

double sub_101082068(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a1[1] == *a1)
    return -INFINITY;
  std::__sort<std::__less<double,double> &,double *>();
  v2 = *a1;
  v3 = a1[1] - *a1;
  v4 = (v3 >> 3) - 1;
  if ((v3 & 8) != 0)
    return *(double *)(v2 + ((4 * v4) & 0xFFFFFFFFFFFFFFF8));
  else
    return (*(double *)(v2 + 8 * (int)vcvtpd_s64_f64((double)(unint64_t)v4 * 0.5))
          + *(double *)(v2 + 8 * (int)vcvtmd_s64_f64((double)(unint64_t)v4 * 0.5)))
         * 0.5;
}

uint64_t sub_1010820F4(uint64_t a1, unsigned int a2, double a3)
{
  float v5;
  float v6;
  double v7;
  double v8;
  NSObject *v9;
  std::string *p_p;
  std::string *v11;
  const char *v12;
  uint8_t *v13;
  NSObject *v14;
  std::string *v15;
  uint64_t v16;
  NSObject *v17;
  const char *v19;
  uint8_t *v20;
  std::string *v21;
  const char *v22;
  int v23;
  std::string *v24;
  __int16 v25;
  double v26;
  std::string __p;
  uint8_t buf[4];
  std::string *v29;
  __int16 v30;
  double v31;

  v5 = *(float *)(a1 + 8);
  v6 = sub_10094DA5C(v5);
  v7 = 10.0;
  v8 = 60.0;
  switch(a2)
  {
    case 0u:
      v8 = v6;
      v7 = 0.2;
      goto LABEL_5;
    case 1u:
      goto LABEL_5;
    case 2u:
      v8 = ((float)(v5 * 0.55) + (float)(v5 * 0.55)) * 0.745476;
      v7 = 0.0923076889;
      goto LABEL_5;
    case 3u:
      v7 = 0.0;
      v8 = 100.0;
LABEL_5:
      sub_101081C30(a2, &__p);
      if (v8 < a3)
      {
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_10219DEE0);
        v9 = qword_10229FE98;
        if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_INFO))
        {
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136446467;
          v29 = p_p;
          v30 = 2049;
          v31 = a3;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "BoutExtractor: Boutwise %{public}s above limit, ignoring (%{private}.3f)", buf, 0x16u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_26;
        bzero(buf, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_10219DEE0);
        v11 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v23 = 136446467;
        v24 = v11;
        v25 = 2049;
        v26 = a3;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 1, "BoutExtractor: Boutwise %{public}s above limit, ignoring (%{private}.3f)", &v23, 22);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLMobility::isMeasurementInRange(CLBodyMetrics, double, QuantityTypeIdentifier)", "%s\n", v12);
LABEL_46:
        if (v13 != buf)
          free(v13);
LABEL_26:
        v16 = 0;
        goto LABEL_34;
      }
      if (v7 > a3)
      {
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_10219DEE0);
        v14 = qword_10229FE98;
        if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_INFO))
        {
          v15 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136446467;
          v29 = v15;
          v30 = 2049;
          v31 = a3;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "BoutExtractor: Boutwise %{public}s below limit, ignoring (%{private}.3f)", buf, 0x16u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_26;
        bzero(buf, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_10219DEE0);
        v21 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v23 = 136446467;
        v24 = v21;
        v25 = 2049;
        v26 = a3;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 1, "BoutExtractor: Boutwise %{public}s below limit, ignoring (%{private}.3f)", &v23, 22);
        v13 = (uint8_t *)v22;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLMobility::isMeasurementInRange(CLBodyMetrics, double, QuantityTypeIdentifier)", "%s\n", v22);
        goto LABEL_46;
      }
      v16 = 1;
LABEL_34:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      return v16;
    default:
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_10219DEE0);
      v17 = qword_10229FE98;
      if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v29) = a2;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "BoutExtractor: Unexpected type %d, cannot determine ranges", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_10219DEE0);
        LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(__p.__r_.__value_.__r.__words[0]) = a2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 16, "BoutExtractor: Unexpected type %d, cannot determine ranges", &__p);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLMobility::isMeasurementInRange(CLBodyMetrics, double, QuantityTypeIdentifier)", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
      return 0;
  }
}

void sub_101082678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1010826B4(id a1)
{
  qword_10229FC48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Steadiness");
}

void sub_1010826E0(id a1)
{
  qword_10229FE98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

_QWORD *sub_10108270C(_QWORD *result)
{
  *result = off_10219DF48;
  return result;
}

void sub_101082720()
{
  operator delete();
}

uint64_t sub_101082734()
{
  sub_100197040();
  return sub_100195F08();
}

uint64_t sub_101082748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(_BYTE *)(a4 + 80) = a5;
  *(_BYTE *)(a4 + 81) = 1;
  return sub_100FA0AC4(a2, a3, a4);
}

void sub_101082A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101082ABC(uint64_t a1, int a2, int a3, char a4, uint64_t a5)
{
  uint64_t result;

  result = sub_100A0A3DC(a1, a2, a3, a4, a5);
  *(_QWORD *)result = off_10219DFA0;
  *(_DWORD *)(result + 168) = 0;
  *(_BYTE *)(result + 172) = 0;
  return result;
}

uint64_t sub_101082AE4(_QWORD *a1)
{
  *a1 = off_10219DFA0;
  sub_101082B18((uint64_t)a1);
  return sub_100A0A440((uint64_t)a1);
}

void sub_101082B18(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;

  if (*(_BYTE *)(a1 + 172))
  {
    v2 = (os_unfair_lock_s *)(a1 + 168);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 168));
    v3 = sub_100A0A3A0(a1);
    IOHIDServiceClientFastPathInvalidate(v3);
    *(_BYTE *)(a1 + 172) = 0;
    os_unfair_lock_unlock(v2);
  }
}

void sub_101082B6C(_QWORD *a1)
{
  sub_101082AE4(a1);
  operator delete();
}

BOOL sub_101082B90(uint64_t a1, uint64_t a2)
{
  CFRunLoopRef Current;
  NSObject *v5;
  _BOOL8 result;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  _BOOL4 v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  uint64_t v25;

  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  if (Current != (CFRunLoopRef)sub_1001AD8D0())
    sub_10193D6E4();
  if (*(_BYTE *)(a1 + 172))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219DFE0);
    v5 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "[FastPath] Already initialized", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219DFE0);
      LOWORD(v18) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "[FastPath] Already initialized", &v18, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "BOOL FastPathDevice::initializeFastPath(NSDictionary *)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    return 1;
  }
  else if (sub_100168204(a1))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 168));
    v7 = sub_100A0A3A0(a1);
    *(_BYTE *)(a1 + 172) = IOHIDServiceClientFastPathInit(v7, a2) != 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 168));
    if (!*(_BYTE *)(a1 + 172))
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219DFE0);
      v8 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        v23 = sub_100A0A3A0(a1);
        v24 = 2112;
        v25 = a2;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[FastPath] Initialization failed,serviceRef,%@,properties,%@", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10219DFE0);
        v15 = qword_10229FC78;
        v18 = 138412546;
        v19 = sub_100A0A3A0(a1);
        v20 = 2112;
        v21 = a2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 16, "[FastPath] Initialization failed,serviceRef,%@,properties,%@", &v18, 22);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 0, "BOOL FastPathDevice::initializeFastPath(NSDictionary *)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
    }
    return *(_BYTE *)(a1 + 172) != 0;
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219DFE0);
    v9 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[FastPath] Couldn't initialize FastPath due null service ref", buf, 2u);
    }
    v10 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v10)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219DFE0);
      LOWORD(v18) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 16, "[FastPath] Couldn't initialize FastPath due null service ref", &v18, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "BOOL FastPathDevice::initializeFastPath(NSDictionary *)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
      return 0;
    }
  }
  return result;
}

uint64_t sub_101083054(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v2;
  int v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  v8 = 0;
  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
    return 0;
  if (*(_BYTE *)(a1 + 172))
  {
    v2 = (os_unfair_lock_s *)(a1 + 168);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 168));
    v3 = IOHIDServiceClientFastPathCopyEventWithStatus(v1, 0, 0, &v8);
    os_unfair_lock_unlock(v2);
    if (v3)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219DFE0);
      v4 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67240192;
        v11 = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[FastPath] copyEvent Failed (%{public}x)", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10219DFE0);
        v9[0] = 67240192;
        v9[1] = v3;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "[FastPath] copyEvent Failed (%{public}x)", v9, 8);
        v7 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 2, "virtual IOHIDEventRef FastPathDevice::copyEvent()", "%s\n", v6);
        if (v7 != buf)
          free(v7);
      }
    }
  }
  return v8;
}

void sub_101083248(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_101083274(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  const char *v6;
  uint8_t *v7;
  _QWORD v8[4];
  uint8_t buf[1640];

  v8[2] = a2;
  v8[3] = a1;
  sub_100197040();
  if ((sub_100195F08() & 1) != 0 || (sub_100197040(), sub_10019DF90()))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219E000);
    v2 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Instantiating CLTileSyncManager", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10219E000);
      LOWORD(v8[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Instantiating CLTileSyncManager", v8, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "static std::unique_ptr<CLITileSyncManager> CLITileSyncManager::createProduction(CLWifiTilesManager *, id<CLIntersiloUniverse>, std::shared_ptr<CLWifiAccessPointLocationService>)", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    sub_1013FBC34();
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10219E000);
  v3 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Instantiating NoopTileSyncManager", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219E000);
    LOWORD(v8[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Instantiating NoopTileSyncManager", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "static std::unique_ptr<CLITileSyncManager> CLITileSyncManager::createProduction(CLWifiTilesManager *, id<CLIntersiloUniverse>, std::shared_ptr<CLWifiAccessPointLocationService>)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  operator new();
}

void sub_1010835C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_1010835F4()
{
  operator new();
}

void sub_1010836F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_100261F44((uint64_t)&a10);
  v12 = a12;
  a12 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  operator delete();
}

void sub_10108373C(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

_QWORD *sub_101083768(_QWORD *result, uint64_t a2)
{
  *result = off_10219E098;
  result[1] = a2;
  return result;
}

uint64_t sub_101083778(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v3 = sub_1001E4B84(v8, "MaxHarvestPasses", a2);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_1010837FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_101083824(uint64_t a1, uint64_t a2, void *a3)
{
  CLDaemonHealthClientAdapter *v5;
  id v6;
  uint64_t v7;
  _QWORD v9[5];

  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)a1 = off_10219E0E8;
  *(_DWORD *)(a1 + 24) = 0;
  v5 = objc_alloc_init(CLDaemonHealthClientAdapter);
  *(_QWORD *)(a1 + 40) = v5;
  -[CLDaemonHealthClientAdapter setValid:](v5, "setValid:", 1);
  v6 = objc_msgSend(objc_msgSend(a3, "vendor"), "proxyForService:", CFSTR("CLNatalimetryNotifier"));
  *(_QWORD *)(a1 + 32) = v6;
  objc_msgSend(v6, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 40), objc_msgSend(a3, "silo"));
  v7 = *(_QWORD *)(a1 + 8);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_101083910;
  v9[3] = &unk_10213D510;
  v9[4] = a1;
  CLConnection::setDefaultMessageHandler(v7, v9);
  return a1;
}

void sub_1010838FC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10008ABA0(v1);
  _Unwind_Resume(a1);
}

void sub_101083910(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_10108399C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1010839B4(uint64_t a1)
{
  *(_QWORD *)a1 = off_10219E0E8;
  objc_msgSend(*(id *)(a1 + 40), "setValid:", 0);

  *(_QWORD *)(a1 + 40) = 0;
  return sub_10008ABA0((_QWORD *)a1);
}

void sub_101083A08(uint64_t a1)
{
  sub_1010839B4(a1);
  operator delete();
}

void sub_101083A2C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  _QWORD *v6;
  int v7;
  NSObject *v8;
  uint64_t *v9;
  uint64_t *v10;
  CLConnectionMessage *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  CLConnectionMessage *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  const char *v24;
  uint8_t *v25;
  _QWORD v26[2];
  _QWORD v27[2];
  int v28;
  uint64_t *v29;
  uint8_t buf[4];
  uint64_t *v31;

  v4 = (_QWORD *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 42)
      goto LABEL_7;
    v4 = (_QWORD *)*v4;
  }
  else if (v5 != 42)
  {
LABEL_7:
    v6 = (_QWORD *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
    v7 = *((char *)v6 + 23);
    if (v7 < 0)
    {
      if (v6[1] != 44)
      {
LABEL_13:
        if (qword_10229FE10 != -1)
          dispatch_once(&qword_10229FE10, &stru_10219E188);
        v8 = qword_10229FE18;
        if (os_log_type_enabled((os_log_t)qword_10229FE18, OS_LOG_TYPE_FAULT))
        {
          v9 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
          if (*((char *)v9 + 23) >= 0)
            v10 = v9;
          else
            v10 = (uint64_t *)*v9;
          *(_DWORD *)buf = 136446210;
          v31 = v10;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Got unhandled mesage of type %{public}s", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE10 != -1)
            dispatch_once(&qword_10229FE10, &stru_10219E188);
          v21 = qword_10229FE18;
          v22 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
          if (*((char *)v22 + 23) >= 0)
            v23 = v22;
          else
            v23 = (uint64_t *)*v22;
          v28 = 136446210;
          v29 = v23;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 17, "Got unhandled mesage of type %{public}s", &v28, 12);
          v25 = (uint8_t *)v24;
          sub_100512490("Generic", 1, 0, 0, "virtual void CLDaemonHealthClient::handleMessage(std::shared_ptr<CLConnectionMessage>)", "%s\n", v24);
          if (v25 != buf)
            free(v25);
        }
        return;
      }
      v6 = (_QWORD *)*v6;
    }
    else if (v7 != 44)
    {
      goto LABEL_13;
    }
    if (memcmp(v6, "Health/kCLConnectionMessageVO2MaxInputsQuery", 0x2CuLL))
      goto LABEL_13;
    v17 = *(CLConnectionMessage **)a2;
    v12 = *(std::__shared_weak_count **)(a2 + 8);
    v26[0] = v17;
    v26[1] = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    sub_1010842F8(a1, (uint64_t)v26);
    if (v12)
    {
      v20 = (unint64_t *)&v12->__shared_owners_;
      do
        v16 = __ldaxr(v20);
      while (__stlxr(v16 - 1, v20));
      goto LABEL_35;
    }
    return;
  }
  if (memcmp(v4, "Health/kCLConnectionMessageMetMinutesQuery", 0x2AuLL))
    goto LABEL_7;
  v11 = *(CLConnectionMessage **)a2;
  v12 = *(std::__shared_weak_count **)(a2 + 8);
  v27[0] = v11;
  v27[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  sub_101083D88(a1, (uint64_t)v27);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
LABEL_35:
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_101083D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_101083D88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSSet *v7;
  void *DictionaryOfClasses;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  BOOL v14;
  NSObject *v15;
  id v16;
  CLConnectionMessage *v17;
  CLConnectionMessage *v19;
  NSObject *v20;
  CLConnectionMessage *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  const char *v31;
  uint8_t *v32;
  const char *v33;
  uint8_t *v34;
  uint64_t v35;
  _QWORD v36[5];
  std::__shared_weak_count *v37;
  double v38;
  double v39;
  unsigned int v40;
  uint64_t v41;
  _UNKNOWN **v42;
  int v43;
  id v44;
  uint64_t v45;
  _UNKNOWN **v46;
  uint8_t buf[4];
  id v48;
  uint64_t v49;
  NSNumber *v50;

  v40 = 0;
  if ((sub_101084964(a1, (int *)&v40) & 1) != 0)
  {
    v5 = objc_opt_class(CMMotionTimeRange, v4);
    v7 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v5, objc_opt_class(NSString, v6), 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v7);
    v9 = CMTimeRangeKey;
    if (objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CMTimeRangeKey))
    {
      +[CMMotionTimeRange CLMotionTimeRangeFromCMMotionTimeRange:](CMMotionTimeRange, "CLMotionTimeRangeFromCMMotionTimeRange:", objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", v9));
      v11 = v10;
      v13 = v12;
      if (v10 <= CFAbsoluteTimeGetCurrent() && (v13 <= CFAbsoluteTimeGetCurrent() ? (v14 = v11 < v13) : (v14 = 0), v14))
      {
        sub_100131938(buf, (uint64_t)"CLDaemonClient.MetMinutesQuery", 0);
        v22 = *(void **)(a1 + 32);
        v36[0] = _NSConcreteStackBlock;
        v36[1] = 3321888768;
        v36[2] = sub_101084C90;
        v36[3] = &unk_10219E110;
        v23 = *(std::__shared_weak_count **)(a2 + 8);
        v36[4] = *(_QWORD *)a2;
        v37 = v23;
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(p_shared_owners);
          while (__stxr(v25 + 1, p_shared_owners));
        }
        v38 = v11;
        v39 = v13;
        objc_msgSend(v22, "queryMetMinutesInTimeRange:withReply:", v36, v11, v13);
        v26 = v37;
        if (v37)
        {
          v27 = (unint64_t *)&v37->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        return sub_100131740((id *)buf);
      }
      else
      {
        if (qword_10229FE10 != -1)
          dispatch_once(&qword_10229FE10, &stru_10219E188);
        v15 = qword_10229FE18;
        if (os_log_type_enabled((os_log_t)qword_10229FE18, OS_LOG_TYPE_ERROR))
        {
          v16 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", v9);
          *(_DWORD *)buf = 138412290;
          v48 = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "METMinutes,query,error,invalid parameter,%@", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE10 != -1)
            dispatch_once(&qword_10229FE10, &stru_10219E188);
          v29 = qword_10229FE18;
          v30 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", v9);
          v43 = 138412290;
          v44 = v30;
          LODWORD(v35) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 16, "METMinutes,query,error,invalid parameter,%@", &v43, v35);
          v32 = (uint8_t *)v31;
          sub_100512490("Generic", 1, 0, 0, "void CLDaemonHealthClient::handleMessageMetMinutesQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v31);
          if (v32 != buf)
            free(v32);
        }
        v17 = *(CLConnectionMessage **)a2;
        v41 = CMErrorMessage;
        v42 = &off_10221CDE8;
        +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v42, &v41, 1);
        return (id *)CLConnectionMessage::sendReply(v17);
      }
    }
    else
    {
      if (qword_10229FE10 != -1)
        dispatch_once(&qword_10229FE10, &stru_10219E188);
      v20 = qword_10229FE18;
      if (os_log_type_enabled((os_log_t)qword_10229FE18, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "METMinutes,query,empty request", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE10 != -1)
          dispatch_once(&qword_10229FE10, &stru_10219E188);
        LOWORD(v43) = 0;
        LODWORD(v35) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE18, 17, "METMinutes,query,empty request", &v43, v35);
        v34 = (uint8_t *)v33;
        sub_100512490("Generic", 1, 0, 0, "void CLDaemonHealthClient::handleMessageMetMinutesQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v33);
        if (v34 != buf)
          free(v34);
      }
      v21 = *(CLConnectionMessage **)a2;
      v45 = CMErrorMessage;
      v46 = &off_10221CDE8;
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v46, &v45, 1);
      return (id *)CLConnectionMessage::sendReply(v21);
    }
  }
  else
  {
    v19 = *(CLConnectionMessage **)a2;
    v49 = CMErrorMessage;
    v50 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v40);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v50, &v49, 1);
    return (id *)CLConnectionMessage::sendReply(v19);
  }
}

void sub_1010842D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  uint64_t v27;

  sub_100261F44(v27);
  sub_100131740(&a27);
  _Unwind_Resume(a1);
}

void sub_1010842F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSSet *v7;
  void *DictionaryOfClasses;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  CLConnectionMessage *v17;
  NSObject *v18;
  CLConnectionMessage *v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  __int16 v23[6];
  unsigned int v24;
  _QWORD v25[5];
  std::__shared_weak_count *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[7];
  uint64_t v35;
  _UNKNOWN **v36;
  uint8_t buf[16];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  NSNumber *v45;

  v24 = 0;
  if ((sub_1010850C4(a1, (int *)&v24) & 1) != 0)
  {
    v5 = objc_opt_class(CMVO2MaxInputs, v4);
    v7 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v5, objc_opt_class(NSString, v6), 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v7);
    v9 = CMVO2MaxInputsRecord;
    if (objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CMVO2MaxInputsRecord))
    {
      +[CMVO2MaxInputs VO2MaxInputFromCMVO2MaxInputs:](CMVO2MaxInputs, "VO2MaxInputFromCMVO2MaxInputs:", objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", v9));
      v10 = *(void **)(a1 + 32);
      v34[4] = v41;
      v34[5] = v42;
      v34[6] = v43;
      v34[0] = *(_OWORD *)buf;
      v34[1] = v38;
      v34[2] = v39;
      v34[3] = v40;
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3321888768;
      v25[2] = sub_1010853F0;
      v25[3] = &unk_10219E140;
      v11 = *(std::__shared_weak_count **)(a2 + 8);
      v25[4] = *(_QWORD *)a2;
      v26 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      v31 = v41;
      v32 = v42;
      v33 = v43;
      v27 = *(_OWORD *)buf;
      v28 = v38;
      v29 = v39;
      v30 = v40;
      objc_msgSend(v10, "queryVO2MaxInputsFromRecord:withReply:", v34, v25);
      v14 = v26;
      if (v26)
      {
        v15 = (unint64_t *)&v26->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    else
    {
      if (qword_10229FE10 != -1)
        dispatch_once(&qword_10229FE10, &stru_10219E188);
      v18 = qword_10229FE18;
      if (os_log_type_enabled((os_log_t)qword_10229FE18, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "VO2MaxData,query,empty request", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE10 != -1)
          dispatch_once(&qword_10229FE10, &stru_10219E188);
        v23[0] = 0;
        LODWORD(v22) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE18, 17, "VO2MaxData,query,empty request", v23, v22);
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 0, "void CLDaemonHealthClient::handleMessageVO2MaxInputsQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
      v19 = *(CLConnectionMessage **)a2;
      v35 = CMErrorMessage;
      v36 = &off_10221CDE8;
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v36, &v35, 1);
      CLConnectionMessage::sendReply(v19);
    }
  }
  else
  {
    v17 = *(CLConnectionMessage **)a2;
    v44 = CMErrorMessage;
    v45 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v24);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v45, &v44, 1);
    CLConnectionMessage::sendReply(v17);
  }
}

void sub_101084688(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1010846A4(uint64_t a1)
{
  uint64_t v2;
  int isEntitled;
  int v4;
  uint64_t v5;
  NSObject *v7;
  void **v8;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  _BYTE v13[32];
  _BYTE buf[12];
  char v15;
  int v16;
  _BYTE *v17;
  void *__p[2];
  char v19;

  if (!*(_DWORD *)(a1 + 24))
  {
    v2 = *(_QWORD *)(a1 + 8);
    sub_1015A2E04(__p, "com.apple.locationd.activity");
    isEntitled = CLConnection::isEntitled(v2, __p);
    v4 = isEntitled;
    if (v19 < 0)
    {
      operator delete(__p[0]);
      if (v4)
      {
LABEL_7:
        *(_DWORD *)(a1 + 24) = 1;
        return *(_DWORD *)(a1 + 24) == 1;
      }
    }
    else if (isEntitled)
    {
      goto LABEL_7;
    }
    v5 = kTCCServiceMotion;
    CLConnection::getAuditToken(*(CLConnection **)(a1 + 8));
    if (TCCAccessCheckAuditToken(v5, v13, 0))
      goto LABEL_7;
    *(_DWORD *)(a1 + 24) = 2;
    if (qword_10229FE10 != -1)
      dispatch_once(&qword_10229FE10, &stru_10219E188);
    v7 = qword_10229FE18;
    if (os_log_type_enabled((os_log_t)qword_10229FE18, OS_LOG_TYPE_DEFAULT))
    {
      CLConnection::getName(*(CLConnection **)(a1 + 8));
      v8 = v19 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning Client %s did not pass entitlement/tcc checks.", buf, 0xCu);
      if (v19 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_10229FE10 != -1)
        dispatch_once(&qword_10229FE10, &stru_10219E188);
      v9 = qword_10229FE18;
      CLConnection::getName(*(CLConnection **)(a1 + 8));
      if (v15 >= 0)
        v10 = buf;
      else
        v10 = *(_BYTE **)buf;
      v16 = 136315138;
      v17 = v10;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 0, "#Warning Client %s did not pass entitlement/tcc checks.", (const char *)&v16);
      v12 = v11;
      if (v15 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLDaemonHealthClient::isAuthorizedForMotionActivity()", "%s\n", v12);
      if (v12 != (char *)__p)
        free(v12);
    }
  }
  return *(_DWORD *)(a1 + 24) == 1;
}

void sub_101084940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101084964(uint64_t a1, int *a2)
{
  uint64_t v4;
  char isEntitled;
  char v6;
  uint64_t result;
  int v8;
  NSObject *v9;
  int RemotePid;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  void *v14;
  char *v15;
  char *v16;
  const void *v17;
  void *v18;
  char v19;
  _BYTE v20[12];
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  _BYTE __p[12];
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;

  v4 = *(_QWORD *)(a1 + 8);
  sub_1015A2E04(__p, "com.apple.locationd.metminutes");
  isEntitled = CLConnection::isEntitled(v4, __p);
  v6 = isEntitled;
  if (SBYTE3(v29) < 0)
  {
    operator delete(*(void **)__p);
    if ((v6 & 1) != 0)
    {
LABEL_3:
      result = sub_1011C589C(*(_QWORD *)(a1 + 16));
      if ((_DWORD)result)
      {
        result = sub_1010846A4(a1);
        if ((_DWORD)result)
          v8 = 100;
        else
          v8 = 111;
      }
      else
      {
        v8 = 109;
      }
      goto LABEL_18;
    }
  }
  else if ((isEntitled & 1) != 0)
  {
    goto LABEL_3;
  }
  if (qword_10229FE10 != -1)
    dispatch_once(&qword_10229FE10, &stru_10219E188);
  v9 = qword_10229FE18;
  if (os_log_type_enabled((os_log_t)qword_10229FE18, OS_LOG_TYPE_DEFAULT))
  {
    CLConnection::getName(*(CLConnection **)(a1 + 8));
    RemotePid = CLConnection::getRemotePid(*(CLConnection **)(a1 + 8));
    v11 = v20;
    *(_DWORD *)__p = 136315650;
    if ((v24 & 0x80000000) != 0)
      v11 = *(_BYTE **)v20;
    *(_QWORD *)&__p[4] = v11;
    v26 = 1024;
    v27 = RemotePid;
    v28 = 2048;
    v29 = a1;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning METMinutes,Client failed entitlement check, %s, %d, %p", __p, 0x1Cu);
    if (SBYTE3(v24) < 0)
      operator delete(*(void **)v20);
  }
  result = sub_1001BFF7C(115, 2);
  if ((_DWORD)result)
  {
    bzero(__p, 0x65CuLL);
    if (qword_10229FE10 != -1)
      dispatch_once(&qword_10229FE10, &stru_10219E188);
    v12 = qword_10229FE18;
    CLConnection::getName(*(CLConnection **)(a1 + 8));
    v13 = CLConnection::getRemotePid(*(CLConnection **)(a1 + 8));
    v14 = &v18;
    *(_DWORD *)v20 = 136315650;
    if (v19 < 0)
      v14 = v18;
    *(_QWORD *)&v20[4] = v14;
    v21 = 1024;
    v22 = v13;
    v23 = 2048;
    v24 = a1;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v12, 0, "#Warning METMinutes,Client failed entitlement check, %s, %d, %p", v20, 28, v17);
    v16 = v15;
    if (v19 < 0)
      operator delete(v18);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLDaemonHealthClient::isAuthorizedForMetMinutes(CMError &)", "%s\n", v16);
    if (v16 != __p)
      free(v16);
    result = 0;
  }
  v8 = 110;
LABEL_18:
  *a2 = v8;
  return result;
}

void sub_101084C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101084C90(_QWORD *a1, void *a2, int a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  const __CFString *v9;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  const __CFString *v19;
  const char *v20;
  uint8_t *v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  id v27;
  __int16 v28;
  const __CFString *v29;
  uint64_t v30;
  void *v31;
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  id v37;
  __int16 v38;
  const __CFString *v39;
  uint64_t v40;
  NSNumber *v41;

  if (a3 == 100)
  {
    v30 = CMMetMinutesArray;
    v31 = a2;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1);
    if (qword_10229FE10 != -1)
      dispatch_once(&qword_10229FE10, &stru_10219E188);
    v5 = qword_10229FE18;
    if (os_log_type_enabled((os_log_t)qword_10229FE18, OS_LOG_TYPE_INFO))
    {
      v7 = a1[6];
      v6 = a1[7];
      v8 = objc_msgSend(a2, "count");
      if (objc_msgSend(a2, "count"))
        v9 = (const __CFString *)objc_msgSend(a2, "lastObject");
      else
        v9 = CFSTR(" ");
      *(_DWORD *)buf = 134218754;
      v33 = v7;
      v34 = 2048;
      v35 = v6;
      v36 = 2048;
      v37 = v8;
      v38 = 2112;
      v39 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "METMinutes,query,range,from,%.3f,to,%.3f,count,%lu,response,%@", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE10 != -1)
        dispatch_once(&qword_10229FE10, &stru_10219E188);
      v15 = qword_10229FE18;
      v17 = a1[6];
      v16 = a1[7];
      v18 = objc_msgSend(a2, "count");
      if (objc_msgSend(a2, "count"))
        v19 = (const __CFString *)objc_msgSend(a2, "lastObject");
      else
        v19 = CFSTR(" ");
      v22 = 134218754;
      v23 = v17;
      v24 = 2048;
      v25 = v16;
      v26 = 2048;
      v27 = v18;
      v28 = 2112;
      v29 = v19;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 1, "METMinutes,query,range,from,%.3f,to,%.3f,count,%lu,response,%@", &v22, 42);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "void CLDaemonHealthClient::handleMessageMetMinutesQuery(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    CLConnectionMessage::sendReply(a1[4]);
  }
  else
  {
    v11 = a1[4];
    v40 = CMErrorMessage;
    v41 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:");
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v41, &v40, 1);
    CLConnectionMessage::sendReply(v11);
    if (qword_10229FE10 != -1)
      dispatch_once(&qword_10229FE10, &stru_10219E188);
    v12 = qword_10229FE18;
    if (os_log_type_enabled((os_log_t)qword_10229FE18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v33) = a3;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "METMinutes,query,error,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE10 != -1)
        dispatch_once(&qword_10229FE10, &stru_10219E188);
      v22 = 67240192;
      LODWORD(v23) = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE18, 16, "METMinutes,query,error,%{public}d", &v22, 8);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "void CLDaemonHealthClient::handleMessageMetMinutesQuery(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
}

uint64_t sub_1010850C4(uint64_t a1, int *a2)
{
  uint64_t v4;
  char isEntitled;
  char v6;
  uint64_t result;
  int v8;
  NSObject *v9;
  int RemotePid;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  void *v14;
  char *v15;
  char *v16;
  const void *v17;
  void *v18;
  char v19;
  _BYTE v20[12];
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  _BYTE __p[12];
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;

  v4 = *(_QWORD *)(a1 + 8);
  sub_1015A2E04(__p, "com.apple.locationd.vo2max");
  isEntitled = CLConnection::isEntitled(v4, __p);
  v6 = isEntitled;
  if (SBYTE3(v29) < 0)
  {
    operator delete(*(void **)__p);
    if ((v6 & 1) != 0)
    {
LABEL_3:
      result = sub_1011C589C(*(_QWORD *)(a1 + 16));
      if ((_DWORD)result)
      {
        result = sub_1010846A4(a1);
        if ((_DWORD)result)
          v8 = 100;
        else
          v8 = 111;
      }
      else
      {
        v8 = 109;
      }
      goto LABEL_18;
    }
  }
  else if ((isEntitled & 1) != 0)
  {
    goto LABEL_3;
  }
  if (qword_10229FE10 != -1)
    dispatch_once(&qword_10229FE10, &stru_10219E188);
  v9 = qword_10229FE18;
  if (os_log_type_enabled((os_log_t)qword_10229FE18, OS_LOG_TYPE_ERROR))
  {
    CLConnection::getName(*(CLConnection **)(a1 + 8));
    RemotePid = CLConnection::getRemotePid(*(CLConnection **)(a1 + 8));
    v11 = v20;
    *(_DWORD *)__p = 136315650;
    if ((v24 & 0x80000000) != 0)
      v11 = *(_BYTE **)v20;
    *(_QWORD *)&__p[4] = v11;
    v26 = 1024;
    v27 = RemotePid;
    v28 = 2048;
    v29 = a1;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "VO2MaxData,Client failed entitlement check, %s, %d, %p", __p, 0x1Cu);
    if (SBYTE3(v24) < 0)
      operator delete(*(void **)v20);
  }
  result = sub_1001BFF7C(115, 0);
  if ((_DWORD)result)
  {
    bzero(__p, 0x65CuLL);
    if (qword_10229FE10 != -1)
      dispatch_once(&qword_10229FE10, &stru_10219E188);
    v12 = qword_10229FE18;
    CLConnection::getName(*(CLConnection **)(a1 + 8));
    v13 = CLConnection::getRemotePid(*(CLConnection **)(a1 + 8));
    v14 = &v18;
    *(_DWORD *)v20 = 136315650;
    if (v19 < 0)
      v14 = v18;
    *(_QWORD *)&v20[4] = v14;
    v21 = 1024;
    v22 = v13;
    v23 = 2048;
    v24 = a1;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v12, 16, "VO2MaxData,Client failed entitlement check, %s, %d, %p", v20, 28, v17);
    v16 = v15;
    if (v19 < 0)
      operator delete(v18);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLDaemonHealthClient::isAuthorizedForVO2Max(CMError &)", "%s\n", v16);
    if (v16 != __p)
      free(v16);
    result = 0;
  }
  v8 = 110;
LABEL_18:
  *a2 = v8;
  return result;
}

void sub_1010853A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1010853F0(uint64_t a1, void *a2, int a3)
{
  NSObject *v5;
  uint64_t v6;
  id v7;
  const __CFString *v8;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  const __CFString *v17;
  const char *v18;
  uint8_t *v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  id v23;
  __int16 v24;
  const __CFString *v25;
  uint64_t v26;
  void *v27;
  uint8_t buf[4];
  uint64_t v29;
  __int16 v30;
  id v31;
  __int16 v32;
  const __CFString *v33;
  uint64_t v34;
  NSNumber *v35;

  if (a3 == 100)
  {
    v26 = CMVO2MaxInputsArray;
    v27 = a2;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1);
    if (qword_10229FE10 != -1)
      dispatch_once(&qword_10229FE10, &stru_10219E188);
    v5 = qword_10229FE18;
    if (os_log_type_enabled((os_log_t)qword_10229FE18, OS_LOG_TYPE_INFO))
    {
      v6 = *(_QWORD *)(a1 + 48);
      v7 = objc_msgSend(a2, "count");
      if (objc_msgSend(a2, "count"))
        v8 = (const __CFString *)objc_msgSend(a2, "lastObject");
      else
        v8 = CFSTR(" ");
      *(_DWORD *)buf = 134218498;
      v29 = v6;
      v30 = 2048;
      v31 = v7;
      v32 = 2112;
      v33 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "VO2MaxData,query,fromRecordId,%llu,count,%lu,response,%@", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE10 != -1)
        dispatch_once(&qword_10229FE10, &stru_10219E188);
      v14 = qword_10229FE18;
      v15 = *(_QWORD *)(a1 + 48);
      v16 = objc_msgSend(a2, "count");
      if (objc_msgSend(a2, "count"))
        v17 = (const __CFString *)objc_msgSend(a2, "lastObject");
      else
        v17 = CFSTR(" ");
      v20 = 134218498;
      v21 = v15;
      v22 = 2048;
      v23 = v16;
      v24 = 2112;
      v25 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 1, "VO2MaxData,query,fromRecordId,%llu,count,%lu,response,%@", &v20, 32);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "void CLDaemonHealthClient::handleMessageVO2MaxInputsQuery(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
    CLConnectionMessage::sendReply(*(_QWORD *)(a1 + 32));
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 32);
    v34 = CMErrorMessage;
    v35 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:");
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1);
    CLConnectionMessage::sendReply(v10);
    if (qword_10229FE10 != -1)
      dispatch_once(&qword_10229FE10, &stru_10219E188);
    v11 = qword_10229FE18;
    if (os_log_type_enabled((os_log_t)qword_10229FE18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v29) = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "VO2MaxData,query,error,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE10 != -1)
        dispatch_once(&qword_10229FE10, &stru_10219E188);
      v20 = 67240192;
      LODWORD(v21) = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE18, 16, "VO2MaxData,query,error,%{public}d", &v20, 8);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "void CLDaemonHealthClient::handleMessageVO2MaxInputsQuery(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
}

void sub_101085814(id a1)
{
  qword_10229FE18 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Health");
}

uint64_t sub_101085840()
{
  sub_1015A2E04(qword_10230C308, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230C308, (void *)&_mh_execute_header);
}

NSDictionary *sub_101085D04(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v7[6];
  _QWORD v8[6];

  v7[0] = CFSTR("type");
  v8[0] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 16));
  v7[1] = CFSTR("typeBounded");
  v8[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 16));
  v7[2] = CFSTR("pressureDifferenceFromLastLocationCalibration");
  v2 = (_QWORD *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    v2 = (_QWORD *)*v2;
  v8[2] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2);
  v7[3] = CFSTR("timeSinceLastLocationCalibration");
  v3 = (_QWORD *)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
    v3 = (_QWORD *)*v3;
  v8[3] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3);
  v7[4] = CFSTR("pressureDifferenceFromLastMotionCalibration");
  v4 = (_QWORD *)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
    v4 = (_QWORD *)*v4;
  v8[4] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4);
  v7[5] = CFSTR("timeSinceLastMotionCalibration");
  v5 = (_QWORD *)(a1 + 120);
  if (*(char *)(a1 + 143) < 0)
    v5 = (_QWORD *)*v5;
  v8[5] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v8, v7, 6);
}

_BYTE *sub_101085E54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE *result;
  __int128 v11;

  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  if (*(char *)(a2 + 71) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 48), *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v7;
  }
  if (*(char *)(a2 + 95) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 72), *(void **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = v8;
  }
  if (*(char *)(a2 + 119) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 96), *(void **)(a2 + 96), *(_QWORD *)(a2 + 104));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = v9;
  }
  result = (_BYTE *)(a1 + 120);
  if (*(char *)(a2 + 143) < 0)
    return sub_100115CE4(result, *(void **)(a2 + 120), *(_QWORD *)(a2 + 128));
  v11 = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_OWORD *)result = v11;
  return result;
}

void sub_101085F64(_Unwind_Exception *a1)
{
  uint64_t v1;
  char *v2;
  void **v3;
  void **v4;
  void **v5;

  if (v2[119] < 0)
    operator delete(*v5);
  if (v2[95] < 0)
    operator delete(*v4);
  if (v2[71] < 0)
    operator delete(*v3);
  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101085FC0(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  return sub_100261F44(a1 + 32);
}

void sub_101086114(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 384; i != -48; i -= 48)
    sub_1006F0FB8((_QWORD *)(v1 + i));
  _Unwind_Resume(a1);
}

void sub_101086514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1006F0FB8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1010865A4(id a1)
{
  qword_10229FE88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_1010865D0(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_101086898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1010868E4(char *a1, double **a2, char *a3, double **a4, uint64_t a5, char a6)
{
  unint64_t v8;
  double **v10;
  char *v11;
  uint64_t v12;
  double **v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  double **v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  double **v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  double **v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  double **v60;
  double **v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  double **v67;
  double *v68;
  double **v69;
  double *v70;
  __int128 *v71;
  char *v72;
  double *v73;
  uint64_t v74;
  uint64_t v75;
  double **v76;
  double v77;
  uint64_t v78;
  double v79;
  double **v80;
  double **v81;
  double **v82;
  double *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  double **v87;
  double **v88;
  double **v89;
  double *v90;
  uint64_t v91;
  double *v92;
  BOOL v94;
  BOOL v95;
  double *v96;
  double v97;
  double **v98;
  double **v99;
  double **v100;
  double *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  __int128 *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  _BOOL4 v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  double *v117;
  double **v118;
  uint64_t v119;
  uint64_t v120;
  double **v121;
  unint64_t v122;
  double **v123;
  double **v124;
  double v125;
  double **v126;
  double **v127;
  double **v128;
  char *v129;
  double **v130;
  double **v131;
  double *v132;
  double *v133;
  double *v134;
  double v135;
  double **v136;
  double **v137;
  double **v138;
  double *v139;
  uint64_t v140;
  uint64_t v141;
  __int128 *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  double *v146;
  double *v147;
  double *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  double **v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  unint64_t v163;
  char *i;
  char *v165;
  char *v166;
  uint64_t v167;
  __int128 *v168;
  double *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  double *v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  __int128 v182;
  char *v183;
  __int128 *v184;
  uint64_t v185;
  uint64_t v186;
  __int128 *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  double **v195;
  __int128 *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  BOOL v202;
  unint64_t v203;
  uint64_t v204;
  __int128 *v205;
  _QWORD *v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  char *v217;
  double **v218;
  char *v219;
  uint64_t v220;
  unint64_t v221;
  char *v222;
  uint64_t v223;
  double *v224;
  double *v225;
  uint64_t v226;
  double *v227;
  uint64_t v228;
  double *v229;
  uint64_t v230;
  double *v231;
  double *v232;
  uint64_t v233;
  uint64_t v234;
  unsigned __int8 v235;
  char *v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  unint64_t v243;
  char *v244;
  __int128 *v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  double *v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  char *v256;
  unint64_t v257;
  char *v258;
  double **v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;

  v258 = a1;
  v259 = a2;
  if (a2 != a4)
  {
    v8 = (unint64_t)a4;
    v10 = a2;
    while (2)
    {
      v11 = v258;
      v12 = a3 - v258;
      v13 = *(double ***)a3;
      v14 = *(char **)v258;
      v15 = ((uint64_t)(v8 - *(_QWORD *)a3) >> 4) + 32 * (a3 - v258) - (((uint64_t)v10 - *(_QWORD *)v258) >> 4);
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((double **)v8 == v13)
            v8 = *((_QWORD *)a3 - 1) + 4096;
          v146 = *(double **)(v8 - 16);
          if (*v146 < **v10)
          {
            v147 = *v10;
            *v10 = v146;
            *(_QWORD *)(v8 - 16) = v147;
            v148 = v10[1];
            v10[1] = *(double **)(v8 - 8);
            *(_QWORD *)(v8 - 8) = v148;
          }
          return;
        case 3uLL:
          v149 = (char *)v10 - v14;
          v150 = ((char *)v10 - v14) >> 4;
          if (v149 < -15)
          {
            v215 = 254 - v150;
            v152 = &v258[-8 * (v215 >> 8)];
            v153 = *(_QWORD *)v152 + 16 * ~(_BYTE)v215;
          }
          else
          {
            v151 = v150 + 1;
            v152 = &v258[8 * (v151 >> 8)];
            v153 = *(_QWORD *)v152 + 16 * v151;
          }
          if ((double **)v8 == v13)
          {
            v216 = *((_QWORD *)a3 - 1);
            a3 -= 8;
            v8 = v216 + 4096;
          }
          sub_101087B8C((uint64_t)v258, v10, (uint64_t)v152, v153, (uint64_t)a3, v8 - 16);
          return;
        case 4uLL:
          v154 = (char *)v10 - v14;
          v155 = ((char *)v10 - v14) >> 4;
          if (v154 >= -15)
          {
            v156 = &v258[8 * ((unint64_t)(v155 + 1) >> 8)];
            v157 = (double **)(*(_QWORD *)v156 + 16 * (v155 + 1));
            v158 = v155 + 2;
LABEL_233:
            v217 = &v258[8 * (v158 >> 8)];
            v218 = (double **)(*(_QWORD *)v217 + 16 * v158);
            goto LABEL_249;
          }
          v156 = &v258[-8 * ((unint64_t)(254 - v155) >> 8)];
          v157 = (double **)(*(_QWORD *)v156 + 16 * ~(-2 - v155));
          if ((unint64_t)v154 >= 0xFFFFFFFFFFFFFFE1)
          {
            v158 = 1;
            goto LABEL_233;
          }
          v237 = 253 - v155;
          v217 = &v258[-8 * (v237 >> 8)];
          v218 = (double **)(*(_QWORD *)v217 + 16 * ~(_BYTE)v237);
LABEL_249:
          if ((double **)v8 == v13)
          {
            v238 = *((_QWORD *)a3 - 1);
            a3 -= 8;
            v8 = v238 + 4096;
          }
          sub_1010881F8((uint64_t)v258, v10, (uint64_t)v156, v157, (uint64_t)v217, v218, (uint64_t)a3, (double **)(v8 - 16));
          return;
        case 5uLL:
          v159 = (char *)v10 - v14;
          v160 = ((char *)v10 - v14) >> 4;
          if (v159 >= -15)
          {
            v161 = &v258[8 * ((unint64_t)(v160 + 1) >> 8)];
            v162 = *(_QWORD *)v161 + 16 * (v160 + 1);
            v163 = v160 + 2;
LABEL_236:
            v219 = &v258[8 * (v163 >> 8)];
            v220 = *(_QWORD *)v219 + 16 * v163;
            v221 = v160 + 3;
LABEL_237:
            v222 = &v258[8 * (v221 >> 8)];
            v223 = *(_QWORD *)v222 + 16 * v221;
            goto LABEL_238;
          }
          v161 = &v258[-8 * ((unint64_t)(254 - v160) >> 8)];
          v162 = *(_QWORD *)v161 + 16 * ~(-2 - v160);
          if ((unint64_t)v159 >= 0xFFFFFFFFFFFFFFE1)
          {
            v163 = 1;
            goto LABEL_236;
          }
          v219 = &v258[-8 * ((unint64_t)(253 - v160) >> 8)];
          v220 = *(_QWORD *)v219 + 16 * ~(-3 - v160);
          if ((unint64_t)v159 >= 0xFFFFFFFFFFFFFFD1)
          {
            v221 = 1;
            goto LABEL_237;
          }
          v257 = 252 - v160;
          v222 = &v258[-8 * (v257 >> 8)];
          v223 = *(_QWORD *)v222 + 16 * ~(_BYTE)v257;
LABEL_238:
          if ((double **)v8 == v13)
            v8 = *((_QWORD *)a3 - 1) + 4096;
          sub_1010881F8((uint64_t)v258, v10, (uint64_t)v161, (double **)v162, (uint64_t)v219, (double **)v220, (uint64_t)v222, (double **)v223);
          v224 = *(double **)(v8 - 16);
          v225 = *(double **)v223;
          if (*v224 < **(double **)v223)
          {
            *(_QWORD *)v223 = v224;
            *(_QWORD *)(v8 - 16) = v225;
            v226 = *(_QWORD *)(v223 + 8);
            *(_QWORD *)(v223 + 8) = *(_QWORD *)(v8 - 8);
            *(_QWORD *)(v8 - 8) = v226;
            v227 = *(double **)v220;
            if (**(double **)v223 < **(double **)v220)
            {
              *(_QWORD *)v220 = *(_QWORD *)v223;
              *(_QWORD *)v223 = v227;
              v228 = *(_QWORD *)(v220 + 8);
              *(_QWORD *)(v220 + 8) = *(_QWORD *)(v223 + 8);
              *(_QWORD *)(v223 + 8) = v228;
              v229 = *(double **)v162;
              if (**(double **)v220 < **(double **)v162)
              {
                *(_QWORD *)v162 = *(_QWORD *)v220;
                *(_QWORD *)v220 = v229;
                v230 = *(_QWORD *)(v162 + 8);
                *(_QWORD *)(v162 + 8) = *(_QWORD *)(v220 + 8);
                *(_QWORD *)(v220 + 8) = v230;
                v231 = *v10;
                if (**(double **)v162 < **v10)
                {
                  *v10 = *(double **)v162;
                  *(_QWORD *)v162 = v231;
                  v232 = v10[1];
                  v10[1] = *(double **)(v162 + 8);
                  *(_QWORD *)(v162 + 8) = v232;
                }
              }
            }
          }
          return;
        default:
          if ((uint64_t)v15 > 23)
          {
            if (!a5)
            {
              if ((double **)v8 != v10)
              {
                v179 = 32 * v12;
                *(_QWORD *)&v262 = v258;
                *((_QWORD *)&v262 + 1) = v10;
                v180 = 32 * v12 + ((uint64_t)(v8 - *(_QWORD *)a3) >> 4) - (((uint64_t)v10 - *(_QWORD *)v258) >> 4);
                if (v180 > 1)
                {
                  v181 = (unint64_t)(v180 - 2) >> 1;
                  do
                  {
                    v182 = v262;
                    v183 = (char *)sub_1004CE854((uint64_t)&v262, v181);
                    sub_1010882BC((char *)v182, *((__int128 **)&v182 + 1), v180, v183, v184);
                    --v181;
                  }
                  while (v181 != -1);
                  v185 = v179 + ((uint64_t)(v8 - *(_QWORD *)a3) >> 4) - (((uint64_t)v10 - *(_QWORD *)v11) >> 4);
                  if (v185 >= 2)
                  {
                    do
                    {
                      v186 = 0;
                      v260 = *(_OWORD *)v10;
                      *v10 = 0;
                      v10[1] = 0;
                      v187 = (__int128 *)v10;
                      v188 = v11;
                      do
                      {
                        v189 = (uint64_t)v187;
                        if (v186 != -1)
                        {
                          v190 = v186 + 1 + (((uint64_t)v187 - *(_QWORD *)v188) >> 4);
                          if (v190 < 1)
                          {
                            v191 = 255 - v190;
                            v188 -= 8 * (v191 >> 8);
                            v187 = (__int128 *)(*(_QWORD *)v188 + 16 * ~(_BYTE)v191);
                          }
                          else
                          {
                            v188 += 8 * ((unint64_t)v190 >> 8);
                            v187 = (__int128 *)(*(_QWORD *)v188 + 16 * v190);
                          }
                        }
                        v192 = (2 * v186) | 1;
                        v186 = 2 * v186 + 2;
                        if (v186 >= v185
                          || ((v193 = (uint64_t)v187 - *(_QWORD *)v188, v194 = v193 >> 4, v193 < -15)
                            ? (v195 = (double **)(*(_QWORD *)&v188[-8 * ((unint64_t)(254 - v194) >> 8)]
                                                + 16 * ~(-2 - v194)))
                            : (v195 = (double **)(*(_QWORD *)&v188[((unint64_t)(v194 + 1) >> 5) & 0x7FFFFFFFFFFFFF8]
                                                + 16 * (v194 + 1))),
                              **(double **)v187 >= **v195))
                        {
                          v186 = v192;
                        }
                        else if ((__int128 *)((char *)++v187 - *(_QWORD *)v188) == (__int128 *)4096)
                        {
                          v196 = (__int128 *)*((_QWORD *)v188 + 1);
                          v188 += 8;
                          v187 = v196;
                        }
                        sub_1002B7674(v189, v187);
                      }
                      while (v186 <= (uint64_t)((unint64_t)(v185 - 2) >> 1));
                      v197 = v8;
                      if (*(_QWORD *)a3 == v8)
                        v197 = *((_QWORD *)a3 - 1) + 4096;
                      v198 = v197 - 16;
                      if (v187 == (__int128 *)(v197 - 16))
                      {
                        sub_1002B7674((uint64_t)v187, &v260);
                      }
                      else
                      {
                        sub_1002B7674((uint64_t)v187, (__int128 *)(v197 - 16));
                        v199 = (uint64_t)(v187 + 1);
                        if ((__int128 *)((char *)v187 - *(_QWORD *)v188 + 16) == (__int128 *)4096)
                        {
                          v200 = *((_QWORD *)v188 + 1);
                          v188 += 8;
                          v199 = v200;
                        }
                        sub_1002B7674(v198, &v260);
                        if ((double **)v199 != v10)
                        {
                          v201 = ((v199 - *(_QWORD *)v188) >> 4)
                               + 32 * (v188 - v11)
                               - (((uint64_t)v10 - *(_QWORD *)v11) >> 4);
                          *(_QWORD *)&v262 = v11;
                          *((_QWORD *)&v262 + 1) = v10;
                          v202 = v201 < 2;
                          v203 = v201 - 2;
                          if (!v202)
                          {
                            v204 = v203 >> 1;
                            sub_1004CE854((uint64_t)&v262, v203 >> 1);
                            if (*(_QWORD *)v188 == v199)
                              v199 = *((_QWORD *)v188 - 1) + 4096;
                            v206 = (_QWORD *)(v199 - 16);
                            if (**(double **)v205 < **(double **)(v199 - 16))
                            {
                              v261 = *(_OWORD *)(v199 - 16);
                              *v206 = 0;
                              *(_QWORD *)(v199 - 8) = 0;
                              do
                              {
                                v207 = (uint64_t)v205;
                                sub_1002B7674((uint64_t)v206, v205);
                                if (!v204)
                                  break;
                                v204 = (unint64_t)(v204 - 1) >> 1;
                                sub_1004CE854((uint64_t)&v262, v204);
                                v206 = (_QWORD *)v207;
                              }
                              while (**(double **)v205 < *(double *)v261);
                              sub_1002B7674(v207, &v261);
                              v208 = (std::__shared_weak_count *)*((_QWORD *)&v261 + 1);
                              if (*((_QWORD *)&v261 + 1))
                              {
                                v209 = (unint64_t *)(*((_QWORD *)&v261 + 1) + 8);
                                do
                                  v210 = __ldaxr(v209);
                                while (__stlxr(v210 - 1, v209));
                                if (!v210)
                                {
                                  ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                                  std::__shared_weak_count::__release_weak(v208);
                                }
                              }
                            }
                          }
                        }
                      }
                      v211 = (std::__shared_weak_count *)*((_QWORD *)&v260 + 1);
                      if (*((_QWORD *)&v260 + 1))
                      {
                        v212 = (unint64_t *)(*((_QWORD *)&v260 + 1) + 8);
                        do
                          v213 = __ldaxr(v212);
                        while (__stlxr(v213 - 1, v212));
                        if (!v213)
                        {
                          ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
                          std::__shared_weak_count::__release_weak(v211);
                        }
                      }
                      if (v8 == *(_QWORD *)a3)
                      {
                        v214 = *((_QWORD *)a3 - 1);
                        a3 -= 8;
                        v8 = v214 + 4096;
                      }
                      v8 -= 16;
                      v202 = v185-- <= 2;
                    }
                    while (!v202);
                  }
                }
              }
              return;
            }
            v16 = v15 >> 1;
            v17 = sub_1004CE854((uint64_t)&v258, v15 >> 1);
            if (v15 < 0x81)
            {
              v24 = v8 - *(_QWORD *)a3;
              v25 = v24 >> 4;
              if (v24 < 17)
              {
                v35 = 256 - v25;
                v27 = &a3[-8 * (v35 >> 8)];
                v28 = *(_QWORD *)v27 + 16 * ~(_BYTE)v35;
              }
              else
              {
                v26 = v25 - 1;
                v27 = &a3[8 * (v26 >> 8)];
                v28 = *(_QWORD *)v27 + 16 * v26;
              }
              sub_101087B8C((uint64_t)v17, v18, (uint64_t)v258, (uint64_t)v259, (uint64_t)v27, v28);
            }
            else
            {
              v19 = v8 - *(_QWORD *)a3;
              v20 = v19 >> 4;
              if (v19 < 17)
              {
                v29 = 256 - v20;
                v22 = &a3[-8 * (v29 >> 8)];
                v23 = *(_QWORD *)v22 + 16 * ~(_BYTE)v29;
              }
              else
              {
                v21 = v20 - 1;
                v22 = &a3[8 * (v21 >> 8)];
                v23 = *(_QWORD *)v22 + 16 * v21;
              }
              sub_101087B8C((uint64_t)v11, v10, (uint64_t)v17, (uint64_t)v18, (uint64_t)v22, v23);
              v30 = (uint64_t)v259 - *(_QWORD *)v258;
              v31 = v30 >> 4;
              if (v30 < -15)
              {
                v36 = 254 - v31;
                v33 = &v258[-8 * (v36 >> 8)];
                v34 = (double **)(*(_QWORD *)v33 + 16 * ~(_BYTE)v36);
              }
              else
              {
                v32 = v31 + 1;
                v33 = &v258[8 * (v32 >> 8)];
                v34 = (double **)(*(_QWORD *)v33 + 16 * v32);
              }
              v38 = sub_1004CE854((uint64_t)&v258, v16 - 1);
              v39 = v8 - *(_QWORD *)a3;
              v40 = v39 >> 4;
              if (v39 < 33)
              {
                v44 = 257 - v40;
                v42 = &a3[-8 * (v44 >> 8)];
                v43 = *(_QWORD *)v42 + 16 * ~(_BYTE)v44;
              }
              else
              {
                v41 = v40 - 2;
                v42 = &a3[8 * (v41 >> 8)];
                v43 = *(_QWORD *)v42 + 16 * v41;
              }
              sub_101087B8C((uint64_t)v33, v34, (uint64_t)v38, v37, (uint64_t)v42, v43);
              v45 = (uint64_t)v259 - *(_QWORD *)v258;
              v46 = v45 >> 4;
              if (v45 < -31)
              {
                v50 = 253 - v46;
                v48 = &v258[-8 * (v50 >> 8)];
                v49 = (double **)(*(_QWORD *)v48 + 16 * ~(_BYTE)v50);
              }
              else
              {
                v47 = v46 + 2;
                v48 = &v258[8 * (v47 >> 8)];
                v49 = (double **)(*(_QWORD *)v48 + 16 * v47);
              }
              v52 = sub_1004CE854((uint64_t)&v258, v16 + 1);
              v53 = v8 - *(_QWORD *)a3;
              v54 = v53 >> 4;
              if (v53 < 49)
              {
                v58 = 258 - v54;
                v56 = &a3[-8 * (v58 >> 8)];
                v57 = *(_QWORD *)v56 + 16 * ~(_BYTE)v58;
              }
              else
              {
                v55 = v54 - 3;
                v56 = &a3[8 * (v55 >> 8)];
                v57 = *(_QWORD *)v56 + 16 * v55;
              }
              sub_101087B8C((uint64_t)v48, v49, (uint64_t)v52, v51, (uint64_t)v56, v57);
              v59 = sub_1004CE854((uint64_t)&v258, v16 - 1);
              v61 = v60;
              v62 = sub_1004CE854((uint64_t)&v258, v16);
              v64 = v63;
              v65 = sub_1004CE854((uint64_t)&v258, v16 + 1);
              sub_101087B8C((uint64_t)v59, v61, (uint64_t)v62, v64, (uint64_t)v65, v66);
              sub_1004CE854((uint64_t)&v258, v16);
              v67 = v259;
              v68 = *v259;
              *v259 = *v69;
              *v69 = v68;
              v70 = v67[1];
              v67[1] = v69[1];
              v69[1] = v70;
            }
            --a5;
            if ((a6 & 1) != 0)
            {
              v72 = v258;
              v71 = (__int128 *)v259;
              v73 = *v259;
            }
            else
            {
              v72 = v258;
              v71 = (__int128 *)v259;
              v74 = (uint64_t)v259 - *(_QWORD *)v258;
              v75 = v74 >> 4;
              if (v74 < 17)
                v76 = (double **)(*(_QWORD *)&v258[-8 * ((unint64_t)(256 - v75) >> 8)]
                                + 16 * (v75 - 1));
              else
                v76 = (double **)(*(_QWORD *)&v258[((unint64_t)(v75 - 1) >> 5) & 0x7FFFFFFFFFFFFF8]
                                + 16 * (v75 - 1));
              v77 = **v76;
              v73 = *v259;
              if (v77 >= **v259)
              {
                v117 = v259[1];
                *(_QWORD *)&v262 = *v259;
                *((_QWORD *)&v262 + 1) = v117;
                *v259 = 0;
                *((_QWORD *)v71 + 1) = 0;
                v118 = *(double ***)a3;
                v119 = v8 - *(_QWORD *)a3;
                v120 = v119 >> 4;
                if (v119 < 17)
                  v121 = (double **)(*(_QWORD *)&a3[-8 * ((unint64_t)(256 - v120) >> 8)]
                                   + 16 * (v120 - 1));
                else
                  v121 = (double **)(*(_QWORD *)&a3[((unint64_t)(v120 - 1) >> 5) & 0x7FFFFFFFFFFFFF8]
                                   + 16 * (v120 - 1));
                v125 = *v73;
                v126 = *(double ***)v72;
                v10 = (double **)v71;
                if (v125 >= **v121)
                {
                  do
                  {
                    v10 += 2;
                    if ((char *)v10 - (char *)v126 == 4096)
                    {
                      v128 = (double **)*((_QWORD *)v72 + 1);
                      v72 += 8;
                      v126 = v128;
                      v10 = v128;
                    }
                  }
                  while ((v72 < a3 || v72 == a3 && (unint64_t)v10 < v8) && v125 >= **v10);
                }
                else
                {
                  do
                  {
                    v10 += 2;
                    if ((char *)v10 - (char *)v126 == 4096)
                    {
                      v127 = (double **)*((_QWORD *)v72 + 1);
                      v72 += 8;
                      v126 = v127;
                      v10 = v127;
                    }
                  }
                  while (v125 >= **v10);
                }
                if (v72 < a3
                  || (v129 = a3, v130 = (double **)v8, v72 == a3)
                  && (v129 = a3, v130 = (double **)v8, (unint64_t)v10 < v8))
                {
                  v129 = a3;
                  v130 = (double **)v8;
                  do
                  {
                    if (v130 == v118)
                    {
                      v131 = (double **)*((_QWORD *)v129 - 1);
                      v129 -= 8;
                      v118 = v131;
                      v130 = v131 + 512;
                    }
                    v132 = *(v130 - 2);
                    v130 -= 2;
                  }
                  while (v125 < *v132);
                }
                while (v72 < v129 || v72 == v129 && v10 < v130)
                {
                  v133 = *v10;
                  *v10 = *v130;
                  *v130 = v133;
                  v134 = v10[1];
                  v10[1] = v130[1];
                  v130[1] = v134;
                  v135 = *(double *)v262;
                  v126 = *(double ***)v72;
                  do
                  {
                    v10 += 2;
                    if ((char *)v10 - (char *)v126 == 4096)
                    {
                      v136 = (double **)*((_QWORD *)v72 + 1);
                      v72 += 8;
                      v126 = v136;
                      v10 = v136;
                    }
                  }
                  while (v135 >= **v10);
                  v137 = *(double ***)v129;
                  do
                  {
                    if (v130 == v137)
                    {
                      v138 = (double **)*((_QWORD *)v129 - 1);
                      v129 -= 8;
                      v137 = v138;
                      v130 = v138 + 512;
                    }
                    v139 = *(v130 - 2);
                    v130 -= 2;
                  }
                  while (v135 < *v139);
                }
                v140 = (char *)v10 - (char *)v126;
                v141 = ((char *)v10 - (char *)v126) >> 4;
                if (v140 < 17)
                  v142 = (__int128 *)(*(_QWORD *)&v72[-8 * ((unint64_t)(256 - v141) >> 8)]
                                    + 16 * (v141 - 1));
                else
                  v142 = (__int128 *)(*(_QWORD *)&v72[((unint64_t)(v141 - 1) >> 5) & 0x7FFFFFFFFFFFFF8]
                                    + 16 * (v141 - 1));
                if (v142 != v71)
                  sub_1002B7674((uint64_t)v71, v142);
                sub_1002B7674((uint64_t)v142, &v262);
                v143 = (std::__shared_weak_count *)*((_QWORD *)&v262 + 1);
                if (*((_QWORD *)&v262 + 1))
                {
                  v144 = (unint64_t *)(*((_QWORD *)&v262 + 1) + 8);
                  do
                    v145 = __ldaxr(v144);
                  while (__stlxr(v145 - 1, v144));
                  if (!v145)
                  {
                    ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                    std::__shared_weak_count::__release_weak(v143);
                  }
                }
                a6 = 0;
                v258 = v72;
                goto LABEL_141;
              }
            }
            v78 = *((_QWORD *)v71 + 1);
            *(_QWORD *)&v262 = v73;
            *((_QWORD *)&v262 + 1) = v78;
            *(_QWORD *)v71 = 0;
            *((_QWORD *)v71 + 1) = 0;
            v79 = *v73;
            v80 = *(double ***)v72;
            v81 = (double **)v71;
            do
            {
              v81 += 2;
              if ((char *)v81 - (char *)v80 == 4096)
              {
                v82 = (double **)*((_QWORD *)v72 + 1);
                v72 += 8;
                v80 = v82;
                v81 = v82;
              }
              v83 = *v81;
            }
            while (**v81 < v79);
            v84 = ((char *)v81 - (char *)v80) >> 4;
            if ((char *)v81 - (char *)v80 < 17)
              v85 = *(_QWORD *)&v72[-8 * ((unint64_t)(256 - v84) >> 8)] + 16 * (v84 - 1);
            else
              v85 = *(_QWORD *)&v72[((unint64_t)(v84 - 1) >> 5) & 0x7FFFFFFFFFFFFF8]
                  + 16 * (v84 - 1);
            v86 = a3;
            v87 = (double **)v8;
            if ((__int128 *)v85 == v71)
            {
              do
              {
                if (v72 >= v86 && (v72 != v86 || v81 >= v87))
                  break;
                if (v87 == *(double ***)v86)
                {
                  v91 = *((_QWORD *)v86 - 1);
                  v86 -= 8;
                  v87 = (double **)(v91 + 4096);
                }
                v92 = *(v87 - 2);
                v87 -= 2;
              }
              while (*v92 >= v79);
            }
            else
            {
              v88 = *(double ***)a3;
              v86 = a3;
              v87 = (double **)v8;
              do
              {
                if (v87 == v88)
                {
                  v89 = (double **)*((_QWORD *)v86 - 1);
                  v86 -= 8;
                  v88 = v89;
                  v87 = v89 + 512;
                }
                v90 = *(v87 - 2);
                v87 -= 2;
              }
              while (*v90 >= v79);
            }
            v94 = v72 != v86 || v81 >= v87;
            v95 = v72 >= v86 && v94;
            while (v72 < v86 || v72 == v86 && v81 < v87)
            {
              *v81 = *v87;
              *v87 = v83;
              v96 = v81[1];
              v81[1] = v87[1];
              v87[1] = v96;
              v97 = *(double *)v262;
              v80 = *(double ***)v72;
              do
              {
                v81 += 2;
                if ((char *)v81 - (char *)v80 == 4096)
                {
                  v98 = (double **)*((_QWORD *)v72 + 1);
                  v72 += 8;
                  v80 = v98;
                  v81 = v98;
                }
                v83 = *v81;
              }
              while (**v81 < v97);
              v99 = *(double ***)v86;
              do
              {
                if (v87 == v99)
                {
                  v100 = (double **)*((_QWORD *)v86 - 1);
                  v86 -= 8;
                  v99 = v100;
                  v87 = v100 + 512;
                }
                v101 = *(v87 - 2);
                v87 -= 2;
              }
              while (*v101 >= v97);
            }
            v102 = (char *)v81 - (char *)v80;
            v103 = v102 >> 4;
            if (v102 < 17)
            {
              v107 = 256 - v103;
              v105 = &v72[-8 * (v107 >> 8)];
              v106 = (__int128 *)(*(_QWORD *)v105 + 16 * ~(_BYTE)v107);
            }
            else
            {
              v104 = v103 - 1;
              v105 = &v72[8 * (v104 >> 8)];
              v106 = (__int128 *)(*(_QWORD *)v105 + 16 * v104);
            }
            if (v106 != v71)
              sub_1002B7674((uint64_t)v71, v106);
            sub_1002B7674((uint64_t)v106, &v262);
            v108 = (std::__shared_weak_count *)*((_QWORD *)&v262 + 1);
            if (!*((_QWORD *)&v262 + 1))
              goto LABEL_82;
            v109 = (unint64_t *)(*((_QWORD *)&v262 + 1) + 8);
            do
              v110 = __ldaxr(v109);
            while (__stlxr(v110 - 1, v109));
            if (!v110)
            {
              ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
              std::__shared_weak_count::__release_weak(v108);
              if (!v95)
                goto LABEL_95;
            }
            else
            {
LABEL_82:
              if (!v95)
                goto LABEL_95;
            }
            v111 = sub_101087C60(v258, (uint64_t)v259, v105, (uint64_t)v106);
            v112 = (uint64_t)v106 - *(_QWORD *)v105;
            v113 = v112 >> 4;
            if (v112 < -15)
            {
              v122 = 254 - v113;
              v115 = &v105[-8 * (v122 >> 8)];
              v116 = *(_QWORD *)v115 + 16 * ~(_BYTE)v122;
            }
            else
            {
              v114 = v113 + 1;
              v115 = &v105[8 * (v114 >> 8)];
              v116 = *(_QWORD *)v115 + 16 * v114;
            }
            if (sub_101087C60(v115, v116, a3, v8))
            {
              if (v111)
                return;
              v10 = v259;
              a3 = v105;
              v8 = (unint64_t)v106;
              goto LABEL_142;
            }
            if (v111)
            {
              v10 = (double **)(v106 + 1);
              if ((__int128 *)((char *)v106 - *(_QWORD *)v105 + 16) == (__int128 *)4096)
              {
                v123 = (double **)*((_QWORD *)v105 + 1);
                v105 += 8;
                v10 = v123;
              }
LABEL_98:
              v258 = v105;
LABEL_141:
              v259 = v10;
LABEL_142:
              if ((double **)v8 != v10)
                continue;
              return;
            }
LABEL_95:
            sub_1010868E4(v258, v259, v105, v106, a5, a6 & 1);
            v10 = (double **)(v106 + 1);
            if ((__int128 *)((char *)v106 - *(_QWORD *)v105 + 16) == (__int128 *)4096)
            {
              v124 = (double **)*((_QWORD *)v105 + 1);
              v105 += 8;
              v10 = v124;
            }
            a6 = 0;
            goto LABEL_98;
          }
          if ((a6 & 1) != 0)
          {
            if ((double **)v8 != v10)
            {
              for (i = (char *)(v10 + 2); ; i += 16)
              {
                if (i - v14 == 4096)
                {
                  v165 = (char *)*((_QWORD *)v11 + 1);
                  v11 += 8;
                  v14 = v165;
                  i = v165;
                }
                if (i == (char *)v8)
                  break;
                v166 = v11;
                v167 = (uint64_t)i;
                if (i == v14)
                {
                  v166 = v11 - 8;
                  v167 = *((_QWORD *)v11 - 1) + 4096;
                }
                v169 = *(double **)(v167 - 16);
                v168 = (__int128 *)(v167 - 16);
                if (**(double **)i < *v169)
                {
                  v170 = *((_QWORD *)i + 1);
                  *(_QWORD *)&v262 = *(_QWORD *)i;
                  *((_QWORD *)&v262 + 1) = v170;
                  *(_QWORD *)i = 0;
                  *((_QWORD *)i + 1) = 0;
                  v171 = (uint64_t)i;
                  while (1)
                  {
                    v172 = (uint64_t)v168;
                    sub_1002B7674(v171, v168);
                    if ((double **)v172 == v10)
                      break;
                    if (v172 == *(_QWORD *)v166)
                    {
                      v174 = *((_QWORD *)v166 - 1);
                      v166 -= 8;
                      v173 = v174 + 4096;
                    }
                    else
                    {
                      v173 = v172;
                    }
                    v175 = *(double **)(v173 - 16);
                    v168 = (__int128 *)(v173 - 16);
                    v171 = v172;
                    if (*(double *)v262 >= *v175)
                      goto LABEL_172;
                  }
                  v172 = (uint64_t)v10;
LABEL_172:
                  sub_1002B7674(v172, &v262);
                  v176 = (std::__shared_weak_count *)*((_QWORD *)&v262 + 1);
                  if (*((_QWORD *)&v262 + 1))
                  {
                    v177 = (unint64_t *)(*((_QWORD *)&v262 + 1) + 8);
                    do
                      v178 = __ldaxr(v177);
                    while (__stlxr(v178 - 1, v177));
                    if (!v178)
                    {
                      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                      std::__shared_weak_count::__release_weak(v176);
                    }
                  }
                  v14 = *(char **)v11;
                }
              }
            }
          }
          else if ((double **)v8 != v10)
          {
            v233 = (char *)v10 - v14;
            v234 = v233 >> 4;
            if (v233 < -15)
            {
              v239 = 254 - v234;
              v235 = ~(_BYTE)v239;
              v236 = &v258[-8 * (v239 >> 8)];
            }
            else
            {
              v235 = v234 + 1;
              v236 = &v258[8 * ((unint64_t)(v234 + 1) >> 8)];
            }
            v240 = *(char **)v236;
            v241 = (char *)(*(_QWORD *)v236 + 16 * v235);
            while (v241 != (char *)v8)
            {
              v242 = (v241 - v240) >> 4;
              if (v241 - v240 < 17)
              {
                v246 = 256 - v242;
                v244 = &v236[-8 * (v246 >> 8)];
                v245 = (__int128 *)(*(_QWORD *)v244 + 16 * ~(_BYTE)v246);
              }
              else
              {
                v243 = v242 - 1;
                v244 = &v236[8 * (v243 >> 8)];
                v245 = (__int128 *)(*(_QWORD *)v244 + 16 * v243);
              }
              if (**(double **)v241 < **(double **)v245)
              {
                v247 = *((_QWORD *)v241 + 1);
                *(_QWORD *)&v262 = *(_QWORD *)v241;
                *((_QWORD *)&v262 + 1) = v247;
                *(_QWORD *)v241 = 0;
                *((_QWORD *)v241 + 1) = 0;
                v248 = (uint64_t)v241;
                do
                {
                  v249 = (uint64_t)v245;
                  sub_1002B7674(v248, v245);
                  if (v249 == *(_QWORD *)v244)
                  {
                    v251 = *((_QWORD *)v244 - 1);
                    v244 -= 8;
                    v250 = v251 + 4096;
                  }
                  else
                  {
                    v250 = v249;
                  }
                  v252 = *(double **)(v250 - 16);
                  v245 = (__int128 *)(v250 - 16);
                  v248 = v249;
                }
                while (*(double *)v262 < *v252);
                sub_1002B7674(v249, &v262);
                v253 = (std::__shared_weak_count *)*((_QWORD *)&v262 + 1);
                if (*((_QWORD *)&v262 + 1))
                {
                  v254 = (unint64_t *)(*((_QWORD *)&v262 + 1) + 8);
                  do
                    v255 = __ldaxr(v254);
                  while (__stlxr(v255 - 1, v254));
                  if (!v255)
                  {
                    ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
                    std::__shared_weak_count::__release_weak(v253);
                  }
                }
                v240 = *(char **)v236;
              }
              v241 += 16;
              if (v241 - v240 == 4096)
              {
                v256 = (char *)*((_QWORD *)v236 + 1);
                v236 += 8;
                v240 = v256;
                v241 = v256;
              }
            }
          }
          break;
      }
      break;
    }
  }
}

void sub_101087B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14)
{
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_101087B8C(uint64_t a1, double **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  double *v15;
  double *v16;
  double *v17;
  uint64_t v18;

  v6 = *(double **)a4;
  v7 = **(double **)a4;
  v8 = *a2;
  v9 = *(double **)a6;
  v10 = **(double **)a6;
  if (v7 < **a2)
  {
    if (v10 >= v7)
    {
      *a2 = v6;
      *(_QWORD *)a4 = v8;
      v16 = a2[1];
      a2[1] = *(double **)(a4 + 8);
      *(_QWORD *)(a4 + 8) = v16;
      v17 = *(double **)a4;
      if (**(double **)a6 >= **(double **)a4)
        return;
      *(_QWORD *)a4 = *(_QWORD *)a6;
      *(_QWORD *)a6 = v17;
      v12 = (uint64_t *)(a6 + 8);
      v11 = (uint64_t *)(a4 + 8);
    }
    else
    {
      *a2 = v9;
      v11 = (uint64_t *)(a2 + 1);
      *(_QWORD *)a6 = v8;
      v12 = (uint64_t *)(a6 + 8);
    }
    v13 = v12;
    goto LABEL_10;
  }
  if (v10 < v7)
  {
    *(_QWORD *)a4 = v9;
    *(_QWORD *)a6 = v6;
    v13 = (uint64_t *)(a4 + 8);
    v14 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = *(_QWORD *)(a6 + 8);
    *(_QWORD *)(a6 + 8) = v14;
    v15 = *a2;
    if (**(double **)a4 < **a2)
    {
      *a2 = *(double **)a4;
      v11 = (uint64_t *)(a2 + 1);
      *(_QWORD *)a4 = v15;
LABEL_10:
      v18 = *v11;
      *v11 = *v13;
      *v13 = v18;
    }
  }
}

BOOL sub_101087C60(char *a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  double *v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  __int128 *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  double **v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  double *v34;
  double *v35;
  uint64_t v36;
  double *v37;
  uint64_t v38;
  double *v39;
  uint64_t v40;
  double *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  double **v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  char *v50;
  unint64_t v51;
  __int128 *v52;
  __int128 *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double *v59;
  __int128 *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  __int128 v68;

  if (a4 != a2)
  {
    v4 = a4;
    v5 = (uint64_t)a3;
    v7 = *(_QWORD *)a3;
    v8 = a2 - *(_QWORD *)a1;
    v9 = v8 >> 4;
    v10 = 1;
    switch(((a4 - *(_QWORD *)a3) >> 4) + 32 * (a3 - a1) - (v8 >> 4))
    {
      case 0:
      case 1:
        return v10;
      case 2:
        if (v7 == a4)
          v4 = *((_QWORD *)a3 - 1) + 4096;
        v11 = *(double **)(v4 - 16);
        v12 = *(double **)a2;
        if (*v11 < **(double **)a2)
        {
          *(_QWORD *)a2 = v11;
          *(_QWORD *)(v4 - 16) = v12;
          v13 = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a2 + 8) = *(_QWORD *)(v4 - 8);
          *(_QWORD *)(v4 - 8) = v13;
        }
        return v10;
      case 3:
        if (v8 < -15)
        {
          v27 = 254 - v9;
          v15 = &a1[-8 * (v27 >> 8)];
          v16 = *(_QWORD *)v15 + 16 * ~(_BYTE)v27;
        }
        else
        {
          v14 = v9 + 1;
          v15 = &a1[8 * (v14 >> 8)];
          v16 = *(_QWORD *)v15 + 16 * v14;
        }
        if (v7 == v4)
        {
          v28 = *(_QWORD *)(v5 - 8);
          v5 -= 8;
          v4 = v28 + 4096;
        }
        sub_101087B8C((uint64_t)a1, (double **)a2, (uint64_t)v15, v16, v5, v4 - 16);
        return v10;
      case 4:
        if (v8 >= -15)
        {
          v21 = &a1[8 * ((unint64_t)(v9 + 1) >> 8)];
          v22 = (double **)(*(_QWORD *)v21 + 16 * (v9 + 1));
          v23 = v9 + 2;
LABEL_35:
          v45 = &a1[8 * (v23 >> 8)];
          v46 = (double **)(*(_QWORD *)v45 + 16 * v23);
          goto LABEL_71;
        }
        v21 = &a1[-8 * ((unint64_t)(254 - v9) >> 8)];
        v22 = (double **)(*(_QWORD *)v21 + 16 * ~(-2 - v9));
        if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFFE1)
        {
          v23 = 1;
          goto LABEL_35;
        }
        v65 = 253 - v9;
        v45 = &a1[-8 * (v65 >> 8)];
        v46 = (double **)(*(_QWORD *)v45 + 16 * ~(_BYTE)v65);
LABEL_71:
        if (v7 == v4)
        {
          v66 = *(_QWORD *)(v5 - 8);
          v5 -= 8;
          v4 = v66 + 4096;
        }
        sub_1010881F8((uint64_t)a1, (double **)a2, (uint64_t)v21, v22, (uint64_t)v45, v46, v5, (double **)(v4 - 16));
        return v10;
      case 5:
        if (v8 >= -15)
        {
          v24 = &a1[8 * ((unint64_t)(v9 + 1) >> 8)];
          v25 = *(_QWORD *)v24 + 16 * (v9 + 1);
          v26 = v9 + 2;
LABEL_22:
          v29 = &a1[8 * (v26 >> 8)];
          v30 = *(_QWORD *)v29 + 16 * v26;
          v31 = v9 + 3;
LABEL_23:
          v32 = &a1[8 * (v31 >> 8)];
          v33 = *(_QWORD *)v32 + 16 * v31;
          goto LABEL_24;
        }
        v24 = &a1[-8 * ((unint64_t)(254 - v9) >> 8)];
        v25 = *(_QWORD *)v24 + 16 * ~(-2 - v9);
        if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFFE1)
        {
          v26 = 1;
          goto LABEL_22;
        }
        v29 = &a1[-8 * ((unint64_t)(253 - v9) >> 8)];
        v30 = *(_QWORD *)v29 + 16 * ~(-3 - v9);
        if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFFD1)
        {
          v31 = 1;
          goto LABEL_23;
        }
        v67 = 252 - v9;
        v32 = &a1[-8 * (v67 >> 8)];
        v33 = *(_QWORD *)v32 + 16 * ~(_BYTE)v67;
LABEL_24:
        if (v7 == a4)
          v4 = *(_QWORD *)(v5 - 8) + 4096;
        sub_1010881F8((uint64_t)a1, (double **)a2, (uint64_t)v24, (double **)v25, (uint64_t)v29, (double **)v30, (uint64_t)v32, (double **)v33);
        v34 = *(double **)(v4 - 16);
        v35 = *(double **)v33;
        if (*v34 < **(double **)v33)
        {
          *(_QWORD *)v33 = v34;
          *(_QWORD *)(v4 - 16) = v35;
          v36 = *(_QWORD *)(v33 + 8);
          *(_QWORD *)(v33 + 8) = *(_QWORD *)(v4 - 8);
          *(_QWORD *)(v4 - 8) = v36;
          v37 = *(double **)v30;
          if (**(double **)v33 < **(double **)v30)
          {
            *(_QWORD *)v30 = *(_QWORD *)v33;
            *(_QWORD *)v33 = v37;
            v38 = *(_QWORD *)(v30 + 8);
            *(_QWORD *)(v30 + 8) = *(_QWORD *)(v33 + 8);
            *(_QWORD *)(v33 + 8) = v38;
            v39 = *(double **)v25;
            if (**(double **)v30 < **(double **)v25)
            {
              *(_QWORD *)v25 = *(_QWORD *)v30;
              *(_QWORD *)v30 = v39;
              v40 = *(_QWORD *)(v25 + 8);
              *(_QWORD *)(v25 + 8) = *(_QWORD *)(v30 + 8);
              *(_QWORD *)(v30 + 8) = v40;
              v41 = *(double **)a2;
              if (**(double **)v25 < **(double **)a2)
              {
                *(_QWORD *)a2 = *(_QWORD *)v25;
                *(_QWORD *)v25 = v41;
                v42 = *(_QWORD *)(a2 + 8);
                *(_QWORD *)(a2 + 8) = *(_QWORD *)(v25 + 8);
                *(_QWORD *)(v25 + 8) = v42;
              }
            }
          }
        }
        return v10;
      default:
        if (v8 <= -32)
        {
          v17 = &a1[-8 * ((unint64_t)(253 - v9) >> 8)];
          v18 = (__int128 *)(*(_QWORD *)v17 + 16 * ~(-3 - v9));
          v20 = 254 - v9;
        }
        else
        {
          v17 = &a1[8 * ((unint64_t)(v9 + 2) >> 8)];
          v18 = (__int128 *)(*(_QWORD *)v17 + 16 * (v9 + 2));
          v19 = v9 + 1;
          if (v9 != -1)
          {
            v43 = &a1[8 * (v19 >> 8)];
            v44 = *(_QWORD *)v43 + 16 * v19;
            goto LABEL_39;
          }
          v20 = 255;
        }
        v43 = &a1[-8 * (v20 >> 8)];
        v44 = *(_QWORD *)v43 + 16 * ~(_BYTE)v20;
LABEL_39:
        sub_101087B8C((uint64_t)a1, (double **)a2, (uint64_t)v43, v44, (uint64_t)v17, (uint64_t)v18);
        v47 = (uint64_t)v18 - *(_QWORD *)v17;
        v48 = v47 >> 4;
        if (v47 < -15)
        {
          v51 = 254 - v48;
          v49 = ~(_BYTE)v51;
          v50 = &v17[-8 * (v51 >> 8)];
        }
        else
        {
          v49 = v48 + 1;
          v50 = &v17[8 * ((unint64_t)(v48 + 1) >> 8)];
        }
        v52 = *(__int128 **)v50;
        v53 = (__int128 *)(*(_QWORD *)v50 + 16 * v49);
        if (v53 == (__int128 *)v4)
          break;
        v54 = 0;
        while (1)
        {
          if (**(double **)v53 >= **(double **)v18)
          {
            v18 = v53;
            v17 = v50;
          }
          else
          {
            v55 = *((_QWORD *)v53 + 1);
            *(_QWORD *)&v68 = *(_QWORD *)v53;
            *((_QWORD *)&v68 + 1) = v55;
            *(_QWORD *)v53 = 0;
            *((_QWORD *)v53 + 1) = 0;
            v56 = (uint64_t)v53;
            while (1)
            {
              v57 = (uint64_t)v18;
              sub_1002B7674(v56, v18);
              if (v18 == (__int128 *)a2)
                break;
              if (v18 == *(__int128 **)v17)
              {
                v58 = *((_QWORD *)v17 - 1);
                v17 -= 8;
                v18 = (__int128 *)(v58 + 4096);
              }
              v59 = (double *)*((_QWORD *)v18-- - 2);
              v56 = v57;
              if (*(double *)v68 >= *v59)
                goto LABEL_53;
            }
            v57 = a2;
LABEL_53:
            sub_1002B7674(v57, &v68);
            if (++v54 == 8)
            {
              v18 = v53 + 1;
              if ((__int128 *)((char *)v53 - *(_QWORD *)v50 + 16) == (__int128 *)4096)
              {
                v60 = (__int128 *)*((_QWORD *)v50 + 1);
                v50 += 8;
                v18 = v60;
              }
              v10 = v18 == (__int128 *)v4;
            }
            else
            {
              v18 = v53;
            }
            v17 = v50;
            v61 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
            if (*((_QWORD *)&v68 + 1))
            {
              v62 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
              do
                v63 = __ldaxr(v62);
              while (__stlxr(v63 - 1, v62));
              if (!v63)
              {
                ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                std::__shared_weak_count::__release_weak(v61);
              }
            }
            if (v54 == 8)
              return v10;
            v52 = *(__int128 **)v50;
          }
          v53 = v18 + 1;
          if ((char *)(v18 + 1) - (char *)v52 == 4096)
          {
            v50 = v17 + 8;
            v52 = (__int128 *)*((_QWORD *)v17 + 1);
            v53 = v52;
          }
          if (v53 == (__int128 *)v4)
            return 1;
        }
    }
  }
  return 1;
}

void sub_1010881F8(uint64_t a1, double **a2, uint64_t a3, double **a4, uint64_t a5, double **a6, uint64_t a7, double **a8)
{
  double *v12;
  double *v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;

  sub_101087B8C(a1, a2, a3, (uint64_t)a4, a5, (uint64_t)a6);
  v12 = *a6;
  if (**a8 < **a6)
  {
    *a6 = *a8;
    *a8 = v12;
    v13 = a6[1];
    a6[1] = a8[1];
    a8[1] = v13;
    v14 = *a4;
    if (**a6 < **a4)
    {
      *a4 = *a6;
      *a6 = v14;
      v15 = a4[1];
      a4[1] = a6[1];
      a6[1] = v15;
      v16 = *a2;
      if (**a4 < **a2)
      {
        *a2 = *a4;
        *a4 = v16;
        v17 = a2[1];
        a2[1] = a4[1];
        a4[1] = v17;
      }
    }
  }
}

void sub_1010882BC(char *a1, __int128 *a2, uint64_t a3, char *a4, __int128 *a5)
{
  __int128 *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  double **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  double **v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  _QWORD v28[2];

  v5 = a5;
  v28[0] = a1;
  v28[1] = a2;
  if (a2 == a5)
    v7 = 0;
  else
    v7 = (((uint64_t)a5 - *(_QWORD *)a4) >> 4) + 32 * (a4 - a1) - (((uint64_t)a2 - *(_QWORD *)a1) >> 4);
  v8 = a3 - 2;
  if (a3 >= 2)
  {
    v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) >= v7)
    {
      v10 = 2 * v7;
      v11 = (2 * v7) | 1;
      v12 = sub_1004CE854((uint64_t)v28, v11);
      if (v10 + 2 < a3)
      {
        v14 = (uint64_t)v13 - *v12;
        v15 = v14 >> 4;
        v16 = (double **)(v14 < -15
                        ? v12[-((unint64_t)(254 - v15) >> 8)] + 16 * ~(-2 - v15)
                        : *(_QWORD *)((char *)v12 + (((unint64_t)(v15 + 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * (v15 + 1));
        if (**(double **)v13 < **v16)
        {
          if ((__int128 *)((char *)++v13 - *v12) == (__int128 *)4096)
            v13 = (__int128 *)v12[1];
          v11 = v10 + 2;
        }
      }
      if (**(double **)v13 >= **(double **)v5)
      {
        v17 = *((_QWORD *)v5 + 1);
        *(_QWORD *)&v27 = *(_QWORD *)v5;
        *((_QWORD *)&v27 + 1) = v17;
        *(_QWORD *)v5 = 0;
        *((_QWORD *)v5 + 1) = 0;
        do
        {
          v18 = (uint64_t)v5;
          v5 = v13;
          sub_1002B7674(v18, v13);
          if (v9 < v11)
            break;
          v19 = (2 * v11) | 1;
          v20 = sub_1004CE854((uint64_t)v28, v19);
          if (2 * v11 + 2 < a3)
          {
            v21 = (uint64_t)v13 - *v20;
            v22 = v21 >> 4;
            v23 = (double **)(v21 < -15
                            ? v20[-((unint64_t)(254 - v22) >> 8)] + 16 * ~(-2 - v22)
                            : *(_QWORD *)((char *)v20 + (((unint64_t)(v22 + 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                            + 16 * (v22 + 1));
            if (**(double **)v13 < **v23)
            {
              if ((__int128 *)((char *)++v13 - *v20) == (__int128 *)4096)
                v13 = (__int128 *)v20[1];
              v19 = 2 * v11 + 2;
            }
          }
          v11 = v19;
        }
        while (**(double **)v13 >= *(double *)v27);
        sub_1002B7674((uint64_t)v5, &v27);
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
        if (*((_QWORD *)&v27 + 1))
        {
          v25 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
      }
    }
  }
}

void sub_10108850C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_101088520()
{
  _DWORD *v0;
  _OWORD *v1;

  qword_10230C320 = 0;
  qword_10230C328 = 0;
  qword_10230C330 = 0;
  v0 = operator new(0x44uLL);
  qword_10230C328 = (uint64_t)(v0 + 17);
  qword_10230C330 = (uint64_t)(v0 + 17);
  v0[16] = 1189765120;
  *(_OWORD *)v0 = xmmword_101C3DAF4;
  *((_OWORD *)v0 + 1) = unk_101C3DB04;
  *((_OWORD *)v0 + 2) = xmmword_101C3DB14;
  *((_OWORD *)v0 + 3) = unk_101C3DB24;
  qword_10230C320 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_10041C534, &qword_10230C320, (void *)&_mh_execute_header);
  qword_10230C340 = 0;
  unk_10230C348 = 0;
  qword_10230C338 = 0;
  v1 = operator new(0x30uLL);
  qword_10230C340 = (uint64_t)(v1 + 3);
  unk_10230C348 = v1 + 3;
  *v1 = xmmword_101C3DB38;
  v1[1] = unk_101C3DB48;
  v1[2] = xmmword_101C3DB58;
  qword_10230C338 = (uint64_t)v1;
  return __cxa_atexit((void (*)(void *))sub_10041C534, &qword_10230C338, (void *)&_mh_execute_header);
}

uint64_t sub_1010885F0(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v6;
  int v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  int v15;

  v6 = sub_1001B5A2C(a1, a2, a3, a4, a5);
  *(_QWORD *)v6 = off_10219E208;
  *(_BYTE *)(v6 + 41) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_DWORD *)(v6 + 56) = 3;
  v15 = 0;
  sub_1001E4804(&v13);
  v7 = sub_1001E4B84(v13, "OnBodyStatusOverride", &v15);
  v8 = v7;
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (!v8)
        return a1;
      goto LABEL_6;
    }
  }
  if (v7)
  {
LABEL_6:
    *(_BYTE *)(a1 + 41) = 1;
    *(_DWORD *)(a1 + 56) = v15;
  }
  return a1;
}

void sub_1010886BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  v4 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 48) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_10002FA68(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1010886FC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_10219E208;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_10002FA68((uint64_t)a1);
}

void sub_101088740(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_10219E208;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_10002FA68((uint64_t)a1);
  operator delete();
}

_QWORD *sub_101088798@<X0>(uint64_t a1@<X8>)
{
  uint64_t i;
  _BYTE *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  uint64_t v14;
  _QWORD v15[3];
  _BYTE v16[32];

  v11[0] = off_10219E2A8;
  v11[1] = sub_101088A0C;
  v11[2] = 0;
  v12 = v11;
  sub_1015A2E04(v13, "kCLConnectionMessageOnBodyDetection");
  sub_100BBC5DC((uint64_t)&v14, (uint64_t)v11);
  v9[0] = off_10219E358;
  v9[1] = sub_101088CD0;
  v9[2] = 0;
  v10 = v9;
  sub_1015A2E04(v15, "kCLConnectionMessageOnBodyDetectionParams");
  sub_100BBC5DC((uint64_t)v16, (uint64_t)v9);
  sub_101089CE4(a1, (unsigned __int8 *)v13, 2);
  for (i = 0; i != -14; i -= 7)
  {
    v3 = *(_BYTE **)&v16[i * 8 + 24];
    if (&v16[i * 8] == v3)
    {
      v3 = &v16[i * 8];
      v4 = 4;
    }
    else
    {
      if (!v3)
        goto LABEL_7;
      v4 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE(v15[i + 2]) < 0)
      operator delete((void *)v15[i]);
  }
  v5 = v10;
  if (v10 == v9)
  {
    v6 = 4;
    v5 = v9;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  else if (v10)
  {
    v6 = 5;
    goto LABEL_14;
  }
  result = v12;
  if (v12 == v11)
  {
    v8 = 4;
    result = v11;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }
  else if (v12)
  {
    v8 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }
  return result;
}

void sub_10108893C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v17;
  uint64_t i;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;

  for (i = 56; i != -56; i -= 56)
    sub_1004E21A4(v17 + i);
  v20 = a13;
  if (a13 == &a10)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_8;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_8:
  v22 = a17;
  if (a17 == &a14)
  {
    v23 = 4;
    v22 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_13;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_13:
  _Unwind_Resume(a1);
}

void sub_101088A0C(uint64_t a1, int a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  _DWORD buf[3];
  __int16 v16;
  int v17;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_10229FEF0 != -1)
    dispatch_once(&qword_10229FEF0, &stru_10219E258);
  v5 = qword_10229FEF8;
  if (os_log_type_enabled((os_log_t)qword_10229FEF8, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(_QWORD *)(a1 + 24);
    buf[0] = 138412546;
    *(_QWORD *)&buf[1] = v6;
    v16 = 1024;
    v17 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Received OnBodyDetection request,client,%@,subscribe,%d", (uint8_t *)buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEF0 != -1)
      dispatch_once(&qword_10229FEF0, &stru_10219E258);
    v8 = *(_QWORD *)(a1 + 24);
    v11 = 138412546;
    v12 = v8;
    v13 = 1024;
    v14 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEF8, 2, "Received OnBodyDetection request,client,%@,subscribe,%d", &v11, 18);
    v10 = (char *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLOnBodyDetectionSubscription::handleRequestOnBodyDetection(BOOL, const CLNameValuePair &)", "%s\n", v9);
    if (v10 != (char *)buf)
      free(v10);
  }
  if (sub_10108938C(a1))
  {
    sub_1001A638C(a1);
    v7 = *(_QWORD *)(a1 + 48);
    if (a2)
    {
      if (!v7)
        sub_100C226B4();
    }
    else if (v7)
    {
      *(_QWORD *)(a1 + 48) = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
  }

}

void sub_101088C9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_101088CD0(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  NSObject *v5;
  uint64_t Dictionary;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  uint64_t v12;
  _QWORD v13[5];
  _WORD v14[8];
  uint8_t buf[1640];

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_10229FEF0 != -1)
    dispatch_once(&qword_10229FEF0, &stru_10219E258);
  v5 = qword_10229FEF8;
  if (os_log_type_enabled((os_log_t)qword_10229FEF8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEF0 != -1)
      dispatch_once(&qword_10229FEF0, &stru_10219E258);
    v14[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEF8, 2, "", v14, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLOnBodyDetectionSubscription::handleMessageOnBodyDetectionParams(std::shared_ptr<CLConnectionMessage>)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  if (sub_10108938C(a1))
  {
    Dictionary = CLConnectionMessage::getDictionary(*a2);
    if (Dictionary)
    {
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_101089770;
      v13[3] = &unk_102155328;
      v13[4] = Dictionary;
      sub_100C2279C((uint64_t)v13);
    }
    else
    {
      if (qword_10229FEF0 != -1)
        dispatch_once(&qword_10229FEF0, &stru_10219E258);
      v7 = qword_10229FEF8;
      if (os_log_type_enabled((os_log_t)qword_10229FEF8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Wrong parameters were passed!", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FEF0 != -1)
          dispatch_once(&qword_10229FEF0, &stru_10219E258);
        v14[0] = 0;
        LODWORD(v12) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEF8, 17, "Wrong parameters were passed!", v14, v12);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 0, "void CLOnBodyDetectionSubscription::handleMessageOnBodyDetectionParams(std::shared_ptr<CLConnectionMessage>)", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
    }
  }

}

void sub_101088FFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_101089030(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  int v6;
  id v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  id v19;
  const char *v20;
  uint8_t *v21;
  NSDictionary *v22;
  int v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  id v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  id v34;
  uint64_t v35;
  id v36;

  v6 = *(unsigned __int8 *)(a1 + 41);
  v7 = objc_alloc((Class)CMOnBodyStatus);
  if (v6)
  {
    v8 = *(unsigned int *)(a1 + 56);
    v9 = a4[1];
    v10 = 1;
  }
  else
  {
    v8 = *(unsigned int *)a4;
    v10 = *((unsigned int *)a4 + 1);
    v9 = a4[1];
  }
  v11 = objc_msgSend(v7, "initWithOnBodyResult:confidence:timestamp:", v8, v10, v9);
  v35 = CMOnBodyStatusData;
  v36 = v11;
  v22 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v36, &v35, 1);

  sub_1010892E4(a1, &v22);
  if (qword_10229FEF0 != -1)
    dispatch_once(&qword_10229FEF0, &stru_10219E258);
  v12 = qword_10229FEF8;
  if (os_log_type_enabled((os_log_t)qword_10229FEF8, OS_LOG_TYPE_DEBUG))
  {
    if (*(_BYTE *)(a1 + 41))
      v13 = " overridden";
    else
      v13 = "";
    v14 = *(_QWORD *)(a1 + 24);
    v15 = objc_msgSend(objc_msgSend(v11, "description"), "UTF8String");
    *(_DWORD *)buf = 136315650;
    v30 = v13;
    v31 = 2112;
    v32 = v14;
    v33 = 2080;
    v34 = v15;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Sent%s onBodyDetection message to %@, %s", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEF0 != -1)
      dispatch_once(&qword_10229FEF0, &stru_10219E258);
    v16 = qword_10229FEF8;
    if (*(_BYTE *)(a1 + 41))
      v17 = " overridden";
    else
      v17 = "";
    v18 = *(_QWORD *)(a1 + 24);
    v19 = objc_msgSend(objc_msgSend(v11, "description"), "UTF8String");
    v23 = 136315650;
    v24 = v17;
    v25 = 2112;
    v26 = v18;
    v27 = 2080;
    v28 = v19;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 2, "Sent%s onBodyDetection message to %@, %s", &v23, 32);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLOnBodyDetectionSubscription::onOnBodyNotification(int, const CLOnBodyNotifier_Type::Notification &, const CLOnBodyNotifier_Type::NotificationData &)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
}

void sub_1010892E4(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(&off_10219E3C8, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_101089378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10108938C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v7;
  const char *v8;
  char *v9;
  int v10;
  uint64_t v11;
  _BYTE __p[12];
  char v13;

  sub_1015A2E04(__p, "com.apple.locationd.on_body_detection");
  v2 = sub_1002255E0(a1);
  v3 = v2;
  if (v13 < 0)
  {
    operator delete(*(void **)__p);
    if ((v3 & 1) != 0)
      return v3;
  }
  else if ((v2 & 1) != 0)
  {
    return v3;
  }
  if (qword_10229FEF0 != -1)
    dispatch_once(&qword_10229FEF0, &stru_10219E258);
  v4 = qword_10229FEF8;
  if (os_log_type_enabled((os_log_t)qword_10229FEF8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)__p = 138412290;
    *(_QWORD *)&__p[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning Client %@ does not have appropriate entitlement to access on body detection SPI", __p, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_10229FEF0 != -1)
      dispatch_once(&qword_10229FEF0, &stru_10219E258);
    v7 = *(_QWORD *)(a1 + 24);
    v10 = 138412290;
    v11 = v7;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FEF8, 0, "#Warning Client %@ does not have appropriate entitlement to access on body detection SPI", &v10, 12);
    v9 = (char *)v8;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLOnBodyDetectionSubscription::isEntitledForOnBodyDetection()", "%s\n", v8);
    if (v9 != __p)
      free(v9);
  }
  return v3;
}

void sub_10108957C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1010895A0(uint64_t a1, uint64_t a2, double *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLOnBodyDetectionSubscription::onOnBodyNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10219E278);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLOnBodyDetectionSubscription::onOnBodyNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219E278);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLOnBodyDetectionSubscription::onOnBodyNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_101089030(a4, v6, v7, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101089750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101089770(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 208))(a2, *(_QWORD *)(a1 + 32));
}

void sub_101089788(id a1)
{
  qword_10229FEF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "OnBody");
}

void sub_1010897B4(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

__n128 sub_1010897E0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_10219E2A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10108981C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_10219E2A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_101089840(uint64_t a1, uint64_t a2, __int128 *a3)
{
  sub_101089890(a1 + 8, a2, a3);
}

uint64_t sub_101089848(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101089884()
{
}

void sub_101089890(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_101089914(a1, a2, (CLConnectionMessage **)&v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1010898FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_1018FBC0C(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101089914(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  NSSet *v6;
  const __CFDictionary *DictionaryOfClasses;
  void (*v8)(_QWORD *, BOOL, uint8_t *);
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  NSObject *v12;
  BOOL v14;
  uint8_t v15[16];
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;

  v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1001C1D6C((int)v15, DictionaryOfClasses);
  v14 = 0;
  if ((sub_1001E4874((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))a1;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = (_QWORD *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0)
      v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))(*v10 + v8);
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10219E318);
    v11 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10219E318);
    }
    v12 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10011A5A8(v15);
}

void sub_101089AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_101089B18(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_101089B44(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_10219E358;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_101089B80(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_10219E358;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_101089BA4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_101089BF4(a1 + 8, a2, a3);
}

uint64_t sub_101089BAC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101089BE8()
{
}

void sub_101089BF4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, uint64_t *);
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = *a3;
  v3 = (std::__shared_weak_count *)a3[1];
  v15 = v3;
  *a3 = 0;
  a3[1] = 0;
  v5 = *(void (**)(_QWORD *, uint64_t *))a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(void (**)(_QWORD *, uint64_t *))(*v7 + v5);
  v16 = v4;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v5(v7, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_101089CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_101089CE4(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_101089D5C(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_101089D48(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_101089D5C(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_101089FDC(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_101089FC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_101089FDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_10108A050(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_10108A038(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_10108A050(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_10108A0A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10108A4E4(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  int v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 44) |= 4u;
        v13 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v13 <= 0xFFFFFFFFFFFFFFF7 && v13 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v14 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v13);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v13 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v14 = 0;
        }
        v36 = 24;
        goto LABEL_69;
      case 2u:
        *(_BYTE *)(a1 + 44) |= 1u;
        v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v16 <= 0xFFFFFFFFFFFFFFF7 && v16 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v14 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v14 = 0;
        }
        v36 = 8;
        goto LABEL_69;
      case 3u:
        *(_BYTE *)(a1 + 44) |= 2u;
        v17 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v17 <= 0xFFFFFFFFFFFFFFF7 && v17 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v14 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v14 = 0;
        }
        v36 = 16;
LABEL_69:
        *(_QWORD *)(a1 + v36) = v14;
        continue;
      case 4u:
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 44) |= 0x10u;
        while (2)
        {
          v21 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v22 = v21 + 1;
          if (v21 == -1 || v22 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v23 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if (v23 < 0)
            {
              v18 += 7;
              v10 = v19++ >= 9;
              if (v10)
              {
                LODWORD(v20) = 0;
                goto LABEL_53;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v20) = 0;
LABEL_53:
        v35 = 36;
        goto LABEL_62;
      case 5u:
        v24 = 0;
        v25 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 44) |= 0x20u;
        while (2)
        {
          v27 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v28 = v27 + 1;
          if (v27 == -1 || v28 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28;
            v26 |= (unint64_t)(v29 & 0x7F) << v24;
            if (v29 < 0)
            {
              v24 += 7;
              v10 = v25++ >= 9;
              if (v10)
              {
                v26 = 0;
                goto LABEL_57;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v26 = 0;
LABEL_57:
        *(_BYTE *)(a1 + 40) = v26 != 0;
        continue;
      case 6u:
        v30 = 0;
        v31 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 44) |= 8u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v32 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v33 = v32 + 1;
      if (v32 == -1 || v33 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v34 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v32);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33;
      v20 |= (unint64_t)(v34 & 0x7F) << v30;
      if ((v34 & 0x80) == 0)
        goto LABEL_59;
      v30 += 7;
      v10 = v31++ >= 9;
      if (v10)
      {
        LODWORD(v20) = 0;
        goto LABEL_61;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_59:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v20) = 0;
LABEL_61:
    v35 = 32;
LABEL_62:
    *(_DWORD *)(a1 + v35) = v20;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

float sub_10108B14C(float a1, float a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  NSObject *v8;
  const char *v10;
  uint8_t *v11;
  int v12;
  double v13;
  __int16 v14;
  double v15;
  __int16 v16;
  double v17;
  uint8_t buf[4];
  double v19;
  __int16 v20;
  double v21;
  __int16 v22;
  double v23;

  v4 = 0.8856;
  if (a1 > 0.0)
    v4 = (float)(a1 * -0.7123) + 0.8856;
  v5 = 0.88649;
  if (a1 > 0.0)
    v5 = (float)(a1 * -0.71301) + 0.88649;
  if (a2 <= 18.0)
    v6 = v5;
  else
    v6 = v4;
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_10219E3D0);
  v7 = fmaxf(v6, 0.0);
  v8 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134284033;
    v19 = a1;
    v20 = 2049;
    v21 = a2;
    v22 = 2049;
    v23 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "HR,fhr,%{private}0.2f,userAge,%{private}0.2f,normalizedMets,%{private}0.2f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10219E3D0);
    v12 = 134284033;
    v13 = a1;
    v14 = 2049;
    v15 = a2;
    v16 = 2049;
    v17 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "HR,fhr,%{private}0.2f,userAge,%{private}0.2f,normalizedMets,%{private}0.2f", &v12, 32);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "static float CLNatalieHeartRateModel::computeNormMETS(float, float)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  return v7;
}

void sub_10108B38C(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_10108B3B8(id a1)
{
  qword_1022A0198 = (uint64_t)os_log_create("com.apple.locationd.Position", "Outdoor");
}

double *sub_10108B3E4(double *result, double *a2, double *a3, double *a4, double *a5)
{
  double v5;
  float v6;
  float v7;
  BOOL v8;
  double v9;
  double v10;
  float v11;
  float v12;
  BOOL v13;
  double v14;
  double v15;
  float v16;
  float v17;
  BOOL v18;
  double v19;
  float v20;
  float v21;
  BOOL v22;
  double v23;
  double v24;
  float v25;
  float v26;
  BOOL v27;
  double v28;
  double v29;
  float v30;
  float v31;
  BOOL v32;
  double v33;
  float v34;
  float v35;
  BOOL v36;
  double v37;
  double v38;
  float v39;
  float v40;
  BOOL v41;
  double v42;
  float v43;
  float v44;
  BOOL v45;
  double v46;

  v5 = *result;
  v6 = *result;
  v7 = *a2;
  v8 = v6 <= v7;
  if (v6 <= v7)
    v9 = *a2;
  else
    v9 = *result;
  if (!v8)
    v5 = *a2;
  *a2 = v5;
  *result = v9;
  v10 = *a4;
  v11 = *a4;
  v12 = *a5;
  v13 = v11 <= v12;
  if (v11 <= v12)
    v14 = *a5;
  else
    v14 = *a4;
  if (!v13)
    v10 = *a5;
  *a5 = v10;
  *a4 = v14;
  v15 = *a5;
  v16 = *a5;
  v17 = *a3;
  v18 = v16 <= v17;
  if (v16 <= v17)
    v19 = *a3;
  else
    v19 = *a5;
  if (!v18)
    v15 = *a3;
  *a5 = v15;
  v20 = v19;
  v21 = *a4;
  v22 = v20 <= v21;
  if (v20 <= v21)
    v23 = *a4;
  else
    v23 = *a3;
  *a3 = v23;
  if (!v22)
    v19 = *a4;
  *a4 = v19;
  v24 = *a2;
  v25 = *a2;
  v26 = *a5;
  v27 = v25 <= v26;
  if (v25 <= v26)
    v28 = *a5;
  else
    v28 = *a2;
  if (!v27)
    v24 = *a5;
  *a5 = v24;
  *a2 = v28;
  v29 = *a4;
  v30 = *a4;
  v31 = *result;
  v32 = v30 <= v31;
  if (v30 <= v31)
    v33 = *result;
  else
    v33 = *a4;
  if (!v32)
    v29 = *result;
  *a4 = v29;
  v34 = v33;
  v35 = *a3;
  v36 = v34 <= v35;
  if (v34 <= v35)
    v37 = *a3;
  else
    v37 = *result;
  *result = v37;
  if (!v36)
    v33 = *a3;
  *a3 = v33;
  v38 = *a4;
  v39 = *a4;
  v40 = *a2;
  v41 = v39 <= v40;
  if (v39 <= v40)
    v42 = *a2;
  else
    v42 = *a4;
  if (!v41)
    v38 = *a2;
  *a4 = v38;
  v43 = v42;
  v44 = *a3;
  v45 = v43 <= v44;
  if (v43 <= v44)
    v46 = *a3;
  else
    v46 = *a2;
  *a2 = v46;
  if (!v45)
    v42 = *a3;
  *a3 = v42;
  return result;
}

double *sub_10108B52C(double *result, double *a2)
{
  double *v2;
  uint64_t v3;
  double *v4;
  double v5;
  double v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  double *v11;

  if (result != a2)
  {
    v2 = result + 1;
    if (result + 1 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v6 = *v4;
        v5 = v4[1];
        v4 = v2;
        v7 = v5;
        v8 = v6;
        if (v7 > v8)
        {
          v9 = v3;
          while (1)
          {
            *(double *)((char *)result + v9 + 8) = v6;
            if (!v9)
              break;
            v6 = *(double *)((char *)result + v9 - 8);
            v10 = v6;
            v9 -= 8;
            if (v7 <= v10)
            {
              v11 = (double *)((char *)result + v9 + 8);
              goto LABEL_10;
            }
          }
          v11 = result;
LABEL_10:
          *v11 = v5;
        }
        v2 = v4 + 1;
        v3 += 8;
      }
      while (v4 + 1 != a2);
    }
  }
  return result;
}

uint64_t sub_10108B5AC(double *a1, double *a2, double *a3)
{
  double v3;
  float v4;
  double v5;
  float v6;
  double v7;
  float v8;
  float v9;
  double v10;
  float v11;
  float v12;

  v3 = *a2;
  v4 = *a2;
  v5 = *a1;
  v6 = *a1;
  v7 = *a3;
  v8 = *a3;
  if (v4 > v6)
  {
    if (v8 > v4)
    {
      *a1 = v7;
      *a3 = v5;
      return 1;
    }
    *a1 = v3;
    *a2 = v5;
    v12 = *a3;
    if (v12 <= v6)
      return 1;
    *a2 = *a3;
    *a3 = v5;
    return 2;
  }
  if (v8 > v4)
  {
    *a2 = v7;
    *a3 = v3;
    v9 = *a2;
    v10 = *a1;
    v11 = *a1;
    if (v9 <= v11)
      return 1;
    *a1 = *a2;
    *a2 = v10;
    return 2;
  }
  return 0;
}

double *sub_10108B64C(double *a1, double *a2)
{
  double v2;
  float v3;
  float v4;
  double *v5;
  double v6;
  float v7;
  double *v8;
  float v9;
  double v10;
  float v11;
  double v12;
  double v13;
  double v14;
  float v15;
  double v16;
  float v17;

  v2 = *a1;
  v3 = *a1;
  v4 = *(a2 - 1);
  if (v3 <= v4)
  {
    v8 = a1 + 1;
    do
    {
      v5 = v8;
      if (v8 >= a2)
        break;
      ++v8;
      v9 = *v5;
    }
    while (v3 <= v9);
  }
  else
  {
    v5 = a1;
    do
    {
      v6 = v5[1];
      ++v5;
      v7 = v6;
    }
    while (v3 <= v7);
  }
  if (v5 < a2)
  {
    do
    {
      v10 = *--a2;
      v11 = v10;
    }
    while (v3 > v11);
  }
  if (v5 < a2)
  {
    v12 = *v5;
    v13 = *a2;
    do
    {
      *v5 = v13;
      *a2 = v12;
      do
      {
        v14 = v5[1];
        ++v5;
        v12 = v14;
        v15 = v14;
      }
      while (v3 <= v15);
      do
      {
        v16 = *--a2;
        v13 = v16;
        v17 = v16;
      }
      while (v3 > v17);
    }
    while (v5 < a2);
  }
  if (v5 - 1 != a1)
    *a1 = *(v5 - 1);
  *(v5 - 1) = v2;
  return v5;
}

double *sub_10108B718(double *a1, double *a2)
{
  uint64_t v2;
  double v3;
  float v4;
  double v5;
  float v6;
  double *v7;
  double *v8;
  double v9;
  float v10;
  double v11;
  float v12;
  double v13;
  double *v14;
  double *v15;
  double v16;
  float v17;
  double v18;
  float v19;

  v2 = 0;
  v3 = *a1;
  v4 = *a1;
  do
  {
    v5 = a1[v2 + 1];
    v6 = v5;
    ++v2;
  }
  while (v6 > v4);
  v7 = &a1[v2];
  v8 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v7 >= a2)
        break;
      v11 = *--a2;
      v12 = v11;
    }
    while (v12 <= v4);
  }
  else
  {
    do
    {
      v9 = *--a2;
      v10 = v9;
    }
    while (v10 <= v4);
  }
  if (v7 < a2)
  {
    v13 = *a2;
    v14 = &a1[v2];
    v15 = a2;
    do
    {
      *v14 = v13;
      *v15 = v5;
      do
      {
        v16 = v14[1];
        ++v14;
        v5 = v16;
        v17 = v16;
      }
      while (v17 > v4);
      do
      {
        v18 = *--v15;
        v13 = v18;
        v19 = v18;
      }
      while (v19 <= v4);
    }
    while (v14 < v15);
    v8 = v14 - 1;
  }
  if (v8 != a1)
    *a1 = *v8;
  *v8 = v3;
  return v8;
}

BOOL sub_10108B7E4(double *a1, double *a2)
{
  uint64_t v2;
  double v3;
  float v4;
  double v5;
  float v6;
  double *v7;
  double v8;
  double v9;
  float v10;
  float v11;
  BOOL v12;
  double v13;
  float v14;
  float v15;
  BOOL v16;
  double v17;
  float v18;
  float v19;
  BOOL v20;
  double v21;
  double *v22;
  int v23;
  uint64_t v24;
  double v25;
  float v26;
  double v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  double *v32;
  double v33;
  float v34;
  float v35;
  BOOL v36;
  uint64_t v37;
  double v38;
  float v39;
  float v40;
  BOOL v41;
  double v42;
  float v43;
  float v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  float v49;
  float v50;
  BOOL v51;
  uint64_t v52;
  float v53;
  float v54;
  BOOL v55;
  double v56;
  float v57;
  float v58;
  BOOL v59;
  double v60;
  double v61;
  float v62;
  float v63;
  BOOL v64;
  double v65;
  double v66;
  float v67;
  float v68;
  BOOL v69;
  double v70;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = v3;
      v5 = *a1;
      v6 = *a1;
      if (v4 > v6)
      {
        *a1 = v3;
        *(a2 - 1) = v5;
      }
      return v2;
    case 3:
      v33 = a1[1];
      v34 = v33;
      v35 = *(a2 - 1);
      v36 = v34 <= v35;
      if (v34 <= v35)
        v37 = *((_QWORD *)a2 - 1);
      else
        v37 = *((_QWORD *)a1 + 1);
      if (!v36)
        v33 = *(a2 - 1);
      *(a2 - 1) = v33;
      *((_QWORD *)a1 + 1) = v37;
      v38 = *(a2 - 1);
      v39 = v38;
      v40 = *a1;
      v41 = v39 <= v40;
      if (v39 <= v40)
        v42 = *a1;
      else
        v42 = *(a2 - 1);
      if (!v41)
        v38 = *a1;
      *(a2 - 1) = v38;
      v43 = v42;
      v44 = a1[1];
      v45 = v43 <= v44;
      if (v43 <= v44)
        v46 = *((_QWORD *)a1 + 1);
      else
        v46 = *(_QWORD *)a1;
      if (!v45)
        v42 = a1[1];
      *(_QWORD *)a1 = v46;
      a1[1] = v42;
      return v2;
    case 4:
      v47 = *(_QWORD *)a1;
      v48 = a1[1];
      v49 = *a1;
      v50 = a1[2];
      v51 = v49 <= v50;
      if (v49 <= v50)
        v52 = *((_QWORD *)a1 + 2);
      else
        v52 = *(_QWORD *)a1;
      if (!v51)
        v47 = *((_QWORD *)a1 + 2);
      *((_QWORD *)a1 + 2) = v47;
      *(_QWORD *)a1 = v52;
      v53 = v48;
      v54 = *(a2 - 1);
      v55 = v53 <= v54;
      if (v53 <= v54)
        v56 = *(a2 - 1);
      else
        v56 = v48;
      if (!v55)
        v48 = *(a2 - 1);
      *(a2 - 1) = v48;
      v57 = *a1;
      v58 = v56;
      v59 = v57 <= v58;
      if (v57 <= v58)
        v60 = v56;
      else
        v60 = *a1;
      if (v59)
        v56 = *a1;
      *a1 = v60;
      a1[1] = v56;
      v61 = a1[2];
      v62 = v61;
      v63 = *(a2 - 1);
      v64 = v62 <= v63;
      if (v62 <= v63)
        v65 = *(a2 - 1);
      else
        v65 = a1[2];
      if (!v64)
        v61 = *(a2 - 1);
      *(a2 - 1) = v61;
      v66 = a1[1];
      v67 = v66;
      v68 = v65;
      v69 = v67 <= v68;
      if (v67 <= v68)
        v70 = v65;
      else
        v70 = a1[1];
      if (!v69)
        v66 = v65;
      a1[1] = v70;
      a1[2] = v66;
      return v2;
    case 5:
      sub_10108B3E4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v7 = a1 + 2;
      v8 = a1[2];
      v9 = *a1;
      v10 = a1[1];
      v11 = v8;
      v12 = v10 <= v11;
      if (v10 <= v11)
        v13 = a1[2];
      else
        v13 = a1[1];
      if (v12)
        v8 = a1[1];
      v14 = v8;
      v15 = v9;
      v16 = v14 <= v15;
      if (v14 <= v15)
        v17 = *a1;
      else
        v17 = v8;
      if (!v16)
        v8 = *a1;
      *v7 = v8;
      v18 = v17;
      v19 = v13;
      v20 = v18 <= v19;
      if (v18 <= v19)
        v21 = v13;
      else
        v21 = v9;
      if (!v20)
        v17 = v13;
      *a1 = v21;
      a1[1] = v17;
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      v24 = 24;
      break;
  }
  while (1)
  {
    v25 = *v22;
    v26 = *v22;
    v27 = *v7;
    v28 = *v7;
    if (v26 > v28)
    {
      v29 = v24;
      while (1)
      {
        *(double *)((char *)a1 + v29) = v27;
        v30 = v29 - 8;
        if (v29 == 8)
          break;
        v27 = *(double *)((char *)a1 + v29 - 16);
        v31 = v27;
        v29 -= 8;
        if (v26 <= v31)
        {
          v32 = (double *)((char *)a1 + v30);
          goto LABEL_28;
        }
      }
      v32 = a1;
LABEL_28:
      *v32 = v25;
      if (++v23 == 8)
        return v22 + 1 == a2;
    }
    v7 = v22;
    v24 += 8;
    if (++v22 == a2)
      return 1;
  }
}

double *sub_10108BA54(double *a1, double *a2, double *a3, uint64_t a4)
{
  double *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  double v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double *v21;
  double *v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        sub_10108BBF8((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *v14;
        v16 = *v14;
        v17 = *a1;
        if (v16 > v17)
        {
          *v14 = *a1;
          *a1 = v15;
          sub_10108BBF8((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v18 = (unint64_t)v8 >> 3;
      do
      {
        v19 = 0;
        v20 = *a1;
        v21 = a1;
        do
        {
          v22 = v21;
          v21 += v19 + 1;
          v23 = 2 * v19;
          v19 = (2 * v19) | 1;
          v24 = v23 + 2;
          if (v24 < v18)
          {
            v25 = *v21;
            v26 = v21[1];
            if (v25 > v26)
            {
              ++v21;
              v19 = v24;
            }
          }
          *v22 = *v21;
        }
        while (v19 <= (uint64_t)((unint64_t)(v18 - 2) >> 1));
        if (v21 == --v6)
        {
          *v21 = v20;
        }
        else
        {
          *v21 = *v6;
          *v6 = v20;
          sub_10108BCD0((uint64_t)a1, (uint64_t)(v21 + 1), a4, v21 + 1 - a1);
        }
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_10108BBF8(uint64_t result, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  float v10;
  float v11;
  double v12;
  float v13;
  double v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (double *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = *v8;
        v11 = v8[1];
        if (v10 > v11)
        {
          ++v8;
          v7 = v9;
        }
      }
      v12 = *v8;
      v13 = *v8;
      v14 = *a4;
      v15 = *a4;
      if (v13 <= v15)
      {
        do
        {
          *a4 = v12;
          a4 = v8;
          if (v5 < v7)
            break;
          v16 = 2 * v7;
          v7 = (2 * v7) | 1;
          v8 = (double *)(result + 8 * v7);
          v17 = v16 + 2;
          if (v17 < a3)
          {
            v18 = *v8;
            v19 = v8[1];
            if (v18 > v19)
            {
              ++v8;
              v7 = v17;
            }
          }
          v12 = *v8;
          v20 = *v8;
        }
        while (v20 <= v15);
        *a4 = v14;
      }
    }
  }
  return result;
}

uint64_t sub_10108BCD0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  double *v5;
  double v6;
  float v7;
  double *v8;
  double v9;
  double v10;
  float v11;
  float v12;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (double *)(result + 8 * v4);
    v6 = *v5;
    v7 = *v5;
    v9 = *(double *)(a2 - 8);
    v8 = (double *)(a2 - 8);
    v10 = v9;
    v11 = v9;
    if (v7 > v11)
    {
      do
      {
        *v8 = v6;
        v8 = v5;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (double *)(result + 8 * v4);
        v6 = *v5;
        v12 = *v5;
      }
      while (v12 > v11);
      *v8 = v10;
    }
  }
  return result;
}

id sub_10108C118(uint64_t a1, void *a2, uint64_t a3)
{
  double v5;
  id result;
  double v7;

  v5 = *(double *)(a1 + 40);
  result = objc_msgSend(objc_msgSend(objc_msgSend(a2, "advertisement"), "scanDate"), "timeIntervalSinceReferenceDate");
  if (v5 - v7 > 1.95)
    return objc_msgSend(*(id *)(a1 + 32), "addIndex:", a3);
  return result;
}

uint64_t sub_10108C1E0(uint64_t a1)
{
  sub_10108C204();
  return a1;
}

void sub_10108C204()
{
  NSObject *v0;
  int v1;
  int v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  NSObject *v6;
  int v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  NSObject *v12;
  int v13;
  int v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  int v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  NSObject *v24;
  int v25;
  int v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  NSObject *v30;
  const char *v31;
  char *v32;
  const char *v33;
  char *v34;
  const char *v35;
  char *v36;
  const char *v37;
  char *v38;
  const char *v39;
  char *v40;
  const char *v41;
  char *v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  _OWORD buf[102];

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10219E438);
  v44 = 0;
  v0 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Fence: init globals", (uint8_t *)buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10219E438);
    LOWORD(v45) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: init globals", &v45, 2);
    v32 = (char *)v31;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceSettings::initSettingOverrides()", "%s\n", v31);
    if (v32 != (char *)buf)
      free(v32);
  }
  sub_1001E4804(buf);
  v1 = sub_1001FD98C(*(uint64_t *)&buf[0], "WifiFenceCalculatorMaxFenceRadius", &v44);
  v2 = v1;
  v3 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_10;
  v4 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (!v2)
      goto LABEL_16;
  }
  else
  {
LABEL_10:
    if (!v1)
      goto LABEL_16;
  }
  qword_1022FCD28 = v44;
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10219E438);
  v6 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 134217984;
    *(_QWORD *)((char *)buf + 4) = v44;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "FenceCal: Overriding WifiFenceCalculatorMaxFenceRadius = %5.1lf", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10219E438);
    v45 = 134217984;
    v46 = v44;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "FenceCal: Overriding WifiFenceCalculatorMaxFenceRadius = %5.1lf", COERCE_DOUBLE(&v45));
    v34 = (char *)v33;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceSettings::initSettingOverrides()", "%s\n", v33);
    if (v34 != (char *)buf)
      free(v34);
  }
LABEL_16:
  sub_1001E4804(buf);
  v7 = sub_1001FD98C(*(uint64_t *)&buf[0], "WifiFenceCalculatorMinFenceRadius", &v44);
  v8 = v7;
  v9 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_20;
  v10 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v8)
      goto LABEL_26;
  }
  else
  {
LABEL_20:
    if (!v7)
      goto LABEL_26;
  }
  qword_1022FCD30 = v44;
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10219E438);
  v12 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 134217984;
    *(_QWORD *)((char *)buf + 4) = v44;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "FenceCal: Overriding WifiFenceCalculatorMinFenceRadius = %5.1lf", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10219E438);
    v45 = 134217984;
    v46 = v44;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "FenceCal: Overriding WifiFenceCalculatorMinFenceRadius = %5.1lf", COERCE_DOUBLE(&v45));
    v36 = (char *)v35;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceSettings::initSettingOverrides()", "%s\n", v35);
    if (v36 != (char *)buf)
      free(v36);
  }
LABEL_26:
  if (_os_feature_enabled_impl("CoreLocation", "GeofenceFastEntry"))
    byte_1022FCD68 = 1;
  v43 = 0;
  sub_1001E4804(buf);
  v13 = sub_1001E4B84(*(uint64_t *)&buf[0], "ConvergingStateConverganceAttemptsPerWindow", &v43);
  v14 = v13;
  v15 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_32;
  v16 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (!v14)
      goto LABEL_39;
  }
  else
  {
LABEL_32:
    if (!v13)
      goto LABEL_39;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10219E438);
  v18 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 67109120;
    DWORD1(buf[0]) = v43;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "converging state overriding ConvergenceAttemptsPerWindow, %d", (uint8_t *)buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10219E438);
    v45 = 67109120;
    LODWORD(v46) = v43;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "converging state overriding ConvergenceAttemptsPerWindow, %d", &v45);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceSettings::initSettingOverrides()", "%s\n", v37);
    if (v38 != (char *)buf)
      free(v38);
  }
  dword_1022FCD9C = v43;
LABEL_39:
  sub_1001E4804(buf);
  v19 = sub_1001FD98C(*(uint64_t *)&buf[0], "ConvergingStateConverganceBudgetWindow", &v44);
  v20 = v19;
  v21 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_43;
  v22 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    if (!v20)
      goto LABEL_50;
  }
  else
  {
LABEL_43:
    if (!v19)
      goto LABEL_50;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10219E438);
  v24 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 134217984;
    *(_QWORD *)((char *)buf + 4) = v44;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "converging state overriding ConvergenceBudgetWindow, %f", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10219E438);
    v45 = 134217984;
    v46 = v44;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "converging state overriding ConvergenceBudgetWindow, %f", COERCE_DOUBLE(&v45));
    v40 = (char *)v39;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceSettings::initSettingOverrides()", "%s\n", v39);
    if (v40 != (char *)buf)
      free(v40);
  }
  qword_1022FCDA0 = v44;
LABEL_50:
  sub_1001E4804(buf);
  v25 = sub_1001FD98C(*(uint64_t *)&buf[0], "ConvergingStateConvergenceAttemptMaxDuration", &v44);
  v26 = v25;
  v27 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_54;
  v28 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (!v26)
      return;
  }
  else
  {
LABEL_54:
    if (!v25)
      return;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10219E438);
  v30 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 134217984;
    *(_QWORD *)((char *)buf + 4) = v44;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "converging state overriding ConvergenceAttemptMaxDuration, %f", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10219E438);
    v45 = 134217984;
    v46 = v44;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "converging state overriding ConvergenceAttemptMaxDuration, %f", COERCE_DOUBLE(&v45));
    v42 = (char *)v41;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceSettings::initSettingOverrides()", "%s\n", v41);
    if (v42 != (char *)buf)
      free(v42);
  }
  qword_1022FCDA8 = v44;
}

void sub_10108CC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_10108CC94()
{
  return &dword_1022FCD10;
}

char *sub_10108CCA0()
{
  return &byte_1022FCD48;
}

char *sub_10108CCAC()
{
  return &byte_1022FCD68;
}

void sub_10108CCB8(id a1)
{
  qword_1022A0068 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

uint64_t sub_10108CCE4(uint64_t a1, int a2)
{
  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0xBFF0000000000000;
  sub_1002433B8(a1 + 64);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_BYTE *)(a1 + 144) = 1;
  *(_QWORD *)(a1 + 152) = 0xBFF0000000000000;
  sub_10108CD7C((_DWORD *)a1, a2);
  return a1;
}

void sub_10108CD60(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 112) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_10108CD7C(_DWORD *a1, int a2)
{
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  int v11;
  __int16 v12;
  int v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  int v17;

  if ((a2 - 16) > 0xFFFFFFF0)
  {
    if (*a1 != a2)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219E458);
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67240192;
        v15 = a2;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "GPSODOM, changing modified subsampler window size to,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219E458);
        v10 = 67240192;
        v11 = a2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM, changing modified subsampler window size to,%{public}d", &v10, 8);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryModifiedSubsampler::changeWindowSize(const unsigned int)", "%s\n", v8);
        if (v9 != buf)
          free(v9);
      }
      *a1 = a2;
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219E458);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240448;
      v15 = a2;
      v16 = 1026;
      v17 = 15;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "GPSODOM, invalid windowSize,%{public}d, outside allowed range, 1 to,%{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219E458);
      v10 = 67240448;
      v11 = a2;
      v12 = 1026;
      v13 = 15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM, invalid windowSize,%{public}d, outside allowed range, 1 to,%{public}d", &v10, 14);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLGpsOdometryModifiedSubsampler::changeWindowSize(const unsigned int)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    sub_10108DE68((uint64_t)a1);
  }
}

void sub_10108D0BC(unsigned int *a1, int a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, double a17, uint64_t a18)
{
  double v26;
  double v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  unint64_t v34;
  uint64_t v40;
  double v41;
  double v42;
  uint64_t v43;
  unint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint8_t *v63;
  unint64_t v64;
  double v65;
  float64x2_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  void *v70;
  char *v71;
  char *v72;
  int v73;
  unint64_t v74;
  double v75;
  double v76;
  double v77;
  char *v78;
  double *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  double *v86;
  uint64_t v87;
  NSObject *v88;
  const char *v89;
  double *v90;
  double v91;
  uint64_t v92;
  double v93;
  double v94;
  double *v95;
  double *v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  char v107;
  NSObject *v108;
  NSObject *v109;
  const char *v110;
  char *v111;
  const char *v112;
  uint8_t *v113;
  uint64_t v114;
  uint64_t v116;
  float64x2_t v117;
  double v118;
  void *__p;
  char *v120;
  char *v121;
  uint64_t (**v122)();
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  _BYTE v136[24];
  uint64_t v137;
  __int16 v138;
  uint64_t v139;
  __int16 v140;
  double v141;
  __int16 v142;
  uint64_t v143;
  __int16 v144;
  int v145;
  uint8_t buf[4];
  double v147;
  __int16 v148;
  uint64_t v149;
  __int16 v150;
  uint64_t v151;
  __int16 v152;
  uint64_t v153;
  __int16 v154;
  double v155;
  __int16 v156;
  uint64_t v157;
  __int16 v158;
  int v159;
  int v160;
  uint64_t v161;
  __int16 v162;
  uint64_t v163;

  v116 = a18;
  v26 = a17;
  v135 = a3;
  v133 = a5;
  v132 = a6;
  v131 = a7;
  v130 = a8;
  v129 = a9;
  v128 = a10;
  v118 = *((double *)a1 + 4);
  *((double *)a1 + 3) = v118;
  if (*((_BYTE *)a1 + 144))
  {
    *((double *)a1 + 16) = a3;
    *((double *)a1 + 17) = a4;
    v27 = a4;
    *((_BYTE *)a1 + 144) = 0;
  }
  else
  {
    v27 = *((double *)a1 + 17);
  }
  v28 = *a1;
  v32 = sub_1010B9110(v27, a4) + *((double *)a1 + 17);
  v134 = v32;
  if (v32 <= 180.0)
  {
    if (v32 >= -180.0)
      goto LABEL_9;
    v33 = 360.0;
  }
  else
  {
    v33 = -360.0;
  }
  v32 = v32 + v33;
  v134 = v32;
LABEL_9:
  v34 = *((_QWORD *)a1 + 14);
  if (v34 >= *((_QWORD *)a1 + 15))
  {
    v29 = sub_10108E88C((uint64_t *)a1 + 13, (uint64_t *)&v135, (uint64_t *)&v134, (uint64_t *)&v133, &v132, &v131, (uint64_t *)&v130, (uint64_t *)&v129, (uint64_t *)&v128, (uint64_t *)&a17, &a18);
    v40 = v29;
  }
  else
  {
    __asm { FMOV            V1.2D, #1.0 }
    *(_OWORD *)(v34 + 80) = _Q1;
    *(double *)v34 = a3;
    *(double *)(v34 + 8) = v32;
    *(double *)(v34 + 16) = a5;
    *(double *)(v34 + 24) = a6;
    *(double *)(v34 + 32) = a7;
    *(double *)(v34 + 40) = a8;
    *(double *)(v34 + 48) = a9;
    *(double *)(v34 + 56) = a10;
    *(double *)(v34 + 64) = v26;
    *(_QWORD *)(v34 + 72) = v116;
    if (a6 > 0.0)
      *(double *)(v34 + 80) = 1.0 / (a6 * a6);
    if (a7 > 0.0)
      *(double *)(v34 + 88) = 1.0 / (a7 * a7);
    *(_QWORD *)(v34 + 96) = 0;
    v40 = v34 + 104;
    *((_QWORD *)a1 + 14) = v34 + 104;
  }
  *((_QWORD *)a1 + 14) = v40;
  v41 = *((double *)a1 + 19);
  if (v41 >= 0.0
    && v128 >= 0.0
    && (*(_QWORD *)&v128 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && a17 > 0.0
    && (*(_QWORD *)&a17 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && a17 < 45.0)
  {
    v42 = fmod(v128 - v41, 360.0);
    if (v42 < 0.0)
      v42 = v42 + 360.0;
    if (v42 > 180.0)
      v42 = v42 + -360.0;
    if (fabs(v42) > 45.0)
    {
      v28 = *a1;
      sub_10108CD7C(a1, 3);
      v40 = *((_QWORD *)a1 + 14);
    }
  }
  v43 = *((_QWORD *)a1 + 13);
  v44 = *a1;
  if (0x4EC4EC4EC4EC4EC5 * ((v40 - v43) >> 3) < v44)
  {
LABEL_29:
    v45 = sub_10011E634((double *)a1 + 8, *((double *)a1 + 16), *((double *)a1 + 17), v135, v134, v133)
        * *((double *)a1 + 1);
    *((double *)a1 + 7) = v45;
    v46 = *((double *)a1 + 6);
    v47 = v45 + v46;
    v48 = fmax(*((double *)a1 + 4), v45 + v46);
    v49 = v48 - v118;
    *((double *)a1 + 4) = v48;
    *((double *)a1 + 5) = v48 - v118;
    if (v129 != -1.0 && v129 > 0.0 && (*(_QWORD *)&v129 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v129 < 2.0)
    {
      v50 = v130;
      v51 = vabdd_f64(fabs(v49), v130);
      if (v51 > v129 * 4.0 && v51 > v130 * 4.0)
      {
        *((double *)a1 + 4) = v48 - v49 + v130;
        *((double *)a1 + 5) = v50;
        *((double *)a1 + 6) = v46 - v49 + v50;
      }
    }
    *((double *)a1 + 19) = v128;
    sub_10108CD7C(a1, v28);
    *((_QWORD *)a1 + 3) = *((_QWORD *)a1 + 4);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219E458);
    v53 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v54 = *((_QWORD *)a1 + 4);
      v55 = *((_QWORD *)a1 + 5);
      v57 = *((_QWORD *)a1 + 6);
      v56 = *((_QWORD *)a1 + 7);
      *(_DWORD *)buf = 134350592;
      v147 = v47;
      v148 = 2050;
      v149 = v54;
      v150 = 2050;
      v151 = v55;
      v152 = 2050;
      v153 = v56;
      v154 = 2050;
      v155 = v45;
      v156 = 2050;
      v157 = v57;
      v158 = 1026;
      v159 = a2;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "GPSODOM,totalD,%{public}.3lf,greatestD,%{public}.3lf,deltaGreatestD,%{public}.3lf,windowD,%{public}.3lf,deltaD,%{public}.3lf,fLockedDistance,%{public}.3lf,source,%{public}d", buf, 0x44u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219E458);
      v58 = *((_QWORD *)a1 + 4);
      v59 = *((_QWORD *)a1 + 5);
      v61 = *((_QWORD *)a1 + 6);
      v60 = *((_QWORD *)a1 + 7);
      *(_DWORD *)v136 = 134350592;
      *(double *)&v136[4] = v47;
      *(_WORD *)&v136[12] = 2050;
      *(_QWORD *)&v136[14] = v58;
      *(_WORD *)&v136[22] = 2050;
      v137 = v59;
      v138 = 2050;
      v139 = v60;
      v140 = 2050;
      v141 = v45;
      v142 = 2050;
      v143 = v61;
      v144 = 1026;
      v145 = a2;
      LODWORD(v114) = 68;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,totalD,%{public}.3lf,greatestD,%{public}.3lf,deltaGreatestD,%{public}.3lf,windowD,%{public}.3lf,deltaD,%{public}.3lf,fLockedDistance,%{public}.3lf,source,%{public}d", v136, v114);
      v63 = (uint8_t *)v62;
      sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryModifiedSubsampler::update(const double, double, const double, const double, const double, const double, const double, const double, const double, const double, const CLGpsOdometerSource)", "%s\n", v62);
LABEL_82:
      if (v63 != buf)
        free(v63);
    }
    return;
  }
  v125 = 0x40000000FLL;
  v126 = 0;
  v124 = 0;
  v122 = off_10219E4D0;
  v123 = 0;
  if (v44 >= 0x10)
    sub_101918728(v29, v30, v31);
  v123 = v44 | 0x400000000;
  LODWORD(v124) = 4 * v44;
  HIDWORD(v124) = v44;
  v126 = &v127;
  if (!(_DWORD)v44)
  {
LABEL_54:
    sub_10108EB00((uint64_t)buf, (uint64_t)&v122);
    sub_10108E068(buf);
    __p = 0;
    v120 = 0;
    v121 = 0;
    sub_100407BF8(&__p, *a1);
    if (*a1)
    {
      v74 = 0;
      v75 = 0.0;
      do
      {
        sub_10108E4DC(":", (uint64_t)&v122, v74, (uint64_t)v136);
        sub_10108E2C8((uint64_t)buf, (uint64_t)v136);
        v77 = v76;
        v78 = v120;
        if (v120 >= v121)
        {
          v80 = (char *)__p;
          v81 = (v120 - (_BYTE *)__p) >> 3;
          v82 = v81 + 1;
          if ((unint64_t)(v81 + 1) >> 61)
            sub_100259694();
          v83 = v121 - (_BYTE *)__p;
          if ((v121 - (_BYTE *)__p) >> 2 > v82)
            v82 = v83 >> 2;
          if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8)
            v84 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v84 = v82;
          if (v84)
          {
            v85 = (char *)sub_10025E6A0((uint64_t)&v121, v84);
            v80 = (char *)__p;
            v78 = v120;
          }
          else
          {
            v85 = 0;
          }
          v86 = (double *)&v85[8 * v81];
          *v86 = v77;
          v79 = v86 + 1;
          while (v78 != v80)
          {
            v87 = *((_QWORD *)v78 - 1);
            v78 -= 8;
            *((_QWORD *)v86-- - 1) = v87;
          }
          __p = v86;
          v120 = (char *)v79;
          v121 = &v85[8 * v84];
          if (v80)
            operator delete(v80);
        }
        else
        {
          *(double *)v120 = v76;
          v79 = (double *)(v78 + 8);
        }
        v120 = (char *)v79;
        *(double *)(*((_QWORD *)a1 + 13) + 104 * v74 + 96) = v77;
        v75 = v75 + v77;
        ++v74;
      }
      while (v74 < *a1);
    }
    else
    {
      v75 = 0.0;
      v79 = (double *)v120;
    }
    v90 = (double *)__p;
    v91 = 0.0;
    v92 = ((char *)v79 - (_BYTE *)__p) >> 3;
    if (v79 == __p)
    {
      v93 = 0.0;
    }
    else
    {
      v93 = v75 / (double)(unint64_t)v92;
      if ((unint64_t)((char *)v79 - (_BYTE *)__p) >= 9)
      {
        do
        {
          v94 = *v90++;
          v91 = v91 + (v94 - v93) * (v94 - v93);
        }
        while (v90 != v79);
      }
    }
    v95 = (double *)*((_QWORD *)a1 + 13);
    v96 = (double *)*((_QWORD *)a1 + 14);
    if (v95 == v96)
      goto LABEL_98;
    v97 = v93 + sqrt(v91 / (double)(unint64_t)(v92 - 1));
    v98 = 0.0;
    v99 = 0.0;
    v100 = 0.0;
    v101 = 0.0;
    v102 = 0.0;
    do
    {
      if (v95[12] <= v97)
      {
        v104 = v95[10];
        v103 = v95[11];
        v102 = v102 + *v95 * v104;
        v101 = v101 + v95[1] * v104;
        v100 = v100 + v95[2] * v103;
        v99 = v99 + v104;
        v98 = v98 + v103;
      }
      v95 += 13;
    }
    while (v95 != v96);
    if (v99 == 0.0 || v98 == 0.0)
    {
LABEL_98:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219E458);
      v108 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)v136 = 0;
        _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEBUG, "GPSODOM, Modified Subsampler, computed weights sensibility check failed.", v136, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(v136, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219E458);
        LOWORD(v160) = 0;
        LODWORD(v114) = 2;
        _os_log_send_and_compose_impl(2, 0, v136, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM, Modified Subsampler, computed weights sensibility check failed.", &v160, v114);
        v111 = (char *)v110;
        sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryModifiedSubsampler::update(const double, double, const double, const double, const double, const double, const double, const double, const double, const double, const CLGpsOdometerSource)", "%s\n", v110);
        if (v111 != v136)
          free(v111);
      }
      sub_10108DE68((uint64_t)a1);
      v107 = 0;
    }
    else
    {
      v105 = v102 / v99;
      v106 = v101 / v99;
      *((long double *)a1 + 6) = *((double *)a1 + 6)
                               + sub_10011E634((double *)a1 + 8, *((double *)a1 + 16), *((double *)a1 + 17), v102 / v99, v101 / v99, v100 / v98)* *((double *)a1 + 1);
      *((_QWORD *)a1 + 7) = 0;
      *((double *)a1 + 16) = v105;
      *((double *)a1 + 17) = v106;
      *((_QWORD *)a1 + 14) = *((_QWORD *)a1 + 13);
      v107 = 1;
    }
    if (__p)
    {
      v120 = (char *)__p;
      operator delete(__p);
    }
    if ((v107 & 1) == 0)
      return;
    goto LABEL_29;
  }
  v64 = 0;
  v65 = *(double *)(v43 + 72);
  v66 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
  v117 = v66;
LABEL_49:
  v67 = *((_QWORD *)a1 + 13) + 104 * v64;
  v68 = *(_QWORD *)(v67 + 16);
  v69 = *(double *)(v67 + 72);
  *(float64x2_t *)v136 = vmulq_f64(*(float64x2_t *)v67, v66);
  *(_QWORD *)&v136[16] = v68;
  __p = 0;
  v120 = 0;
  v121 = 0;
  if (cnnavigation::LLAToECEF(v136, 1, &__p))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219E458);
    v109 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283777;
      v147 = *(double *)v136;
      v148 = 2049;
      v149 = *(_QWORD *)&v136[8];
      _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_ERROR, "GPSODOM, Could not convert LLA Coordinate,%{private}.7lf,%{private}.7lf, to ECEF", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219E458);
      v160 = 134283777;
      v161 = *(_QWORD *)v136;
      v162 = 2049;
      v163 = *(_QWORD *)&v136[8];
      LODWORD(v114) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM, Could not convert LLA Coordinate,%{private}.7lf,%{private}.7lf, to ECEF", &v160, v114);
      v113 = (uint8_t *)v112;
      sub_100512490("Generic", 1, 0, 0, "void CLGpsOdometryModifiedSubsampler::update(const double, double, const double, const double, const double, const double, const double, const double, const double, const double, const CLGpsOdometerSource)", "%s\n", v112);
      if (v113 != buf)
        free(v113);
    }
    sub_10108DE68((uint64_t)a1);
  }
  else
  {
    v70 = __p;
    *(_QWORD *)sub_100206B6C((uint64_t)&v122, v64, 0) = v70;
    v71 = v120;
    *(_QWORD *)sub_100206B6C((uint64_t)&v122, v64, 1) = v71;
    v72 = v121;
    *(_QWORD *)sub_100206B6C((uint64_t)&v122, v64, 2) = v72;
    v73 = 0;
    *(double *)sub_100206B6C((uint64_t)&v122, v64, 3) = (v69 - v65) * 1000.0;
    while ((*(_QWORD *)sub_100206B6C((uint64_t)&v122, v64, v73) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      if (++v73 == 4)
      {
        ++v64;
        v66 = v117;
        if (v64 < *a1)
          goto LABEL_49;
        goto LABEL_54;
      }
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219E458);
    v88 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_ERROR, "GPSODOM, Modified Subsampler window point sensibility check failed.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219E458);
      LOWORD(v160) = 0;
      LODWORD(v114) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM, Modified Subsampler window point sensibility check failed.", &v160, v114);
      v63 = (uint8_t *)v89;
      sub_100512490("Generic", 1, 0, 0, "void CLGpsOdometryModifiedSubsampler::update(const double, double, const double, const double, const double, const double, const double, const double, const double, const double, const CLGpsOdometerSource)", "%s\n", v89);
      goto LABEL_82;
    }
  }
}

void sub_10108DE08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  _Unwind_Resume(exception_object);
}

void sub_10108DE68(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  uint64_t v8;
  uint8_t buf[4];
  uint64_t v10;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_10219E458);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 134349056;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "GPSODOM,resetting and storing distance,%{public}.3lf", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219E458);
    v4 = *(_QWORD *)(a1 + 24);
    v7 = 134349056;
    v8 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,resetting and storing distance,%{public}.3lf", &v7, 12);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryModifiedSubsampler::reset()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  *(double *)(a1 + 16) = *(double *)(a1 + 24) + *(double *)(a1 + 16);
  *(_DWORD *)a1 = 5;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = xmmword_101BAFC90;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 1;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  sub_10064AD18(a1 + 64);
  *(_QWORD *)(a1 + 152) = 0xBFF0000000000000;
}

_DWORD *sub_10108E068(_DWORD *result)
{
  BOOL v1;
  _DWORD *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD v6[5];
  uint64_t (**v7)();
  __int128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (**v12)();
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  if (result[2])
    v1 = result[3] == 0;
  else
    v1 = 1;
  if (!v1)
  {
    v2 = result;
    sub_10108ED10(result);
    sub_10021C264(v2 + 798, v2[928], v2[929]);
    if (v2[928])
    {
      v3 = 0;
      do
      {
        sub_10108E4DC(":", (uint64_t)v2, v3, (uint64_t)&v12);
        v9 = 0x400000001;
        v7 = off_10217C8F8;
        v8 = xmmword_101C1F5F0;
        v10 = &v11;
        sub_100A9EDB8((uint64_t)&v12, (uint64_t)(v2 + 130), (uint64_t)&v7);
        sub_10108E4DC(":", (uint64_t)(v2 + 798), v3, (uint64_t)v6);
        sub_10108EEC4((uint64_t)v6, (uint64_t)&v7);
        ++v3;
      }
      while (v3 < v2[928]);
    }
    v4 = v2[800];
    v5 = v2[801];
    v17 = 0x40000000FLL;
    v12 = off_10219E4D0;
    if (v4 <= 0xF)
    {
      if (v5 < 5)
      {
        v13 = v4;
        v14 = v5;
        v15 = v5 * v4;
        v16 = v4;
        v18 = &v19;
        sub_10108F384((uint64_t)v6);
      }
      sub_1019184AC(423, "this->max_num_cols_ >= num_cols");
    }
    sub_1019184AC(422, "this->max_num_rows_ >= num_rows");
  }
  return result;
}

void sub_10108E27C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17)
    operator delete[]();
  _Unwind_Resume(exception_object);
}

void sub_10108E2C8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  double v4;
  unsigned int v5;
  unsigned int v6;
  double v7;
  __int128 v8;
  uint64_t (**v9)();
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (**v22)();
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (**v27)();
  __int128 v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t (**v32)();
  __int128 v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t (**v37)();
  __int128 v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t (**v42)();
  __int128 v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;

  if (*(_DWORD *)(a1 + 8))
    v2 = *(_DWORD *)(a1 + 12) == 0;
  else
    v2 = 1;
  if (!v2 && *(_BYTE *)(a1 + 3720))
  {
    v29 = 0x400000001;
    v27 = off_10217C8F8;
    v28 = xmmword_101C1F5F0;
    v30 = &v31;
    sub_100A9EDB8(a2, a1 + 520, (uint64_t)&v27);
    v4 = sub_100A9FA30((uint64_t)&v27, a1 + 592);
    v5 = *(_DWORD *)(a1 + 604);
    v6 = *(_DWORD *)(a1 + 600);
    v14 = 0x400000001;
    v9 = off_10217C8F8;
    if (v5 > 1)
      sub_1019184AC(422, "this->max_num_rows_ >= num_rows");
    if (v6 >= 5)
      sub_1019184AC(423, "this->max_num_cols_ >= num_cols");
    v7 = v4;
    v10 = v5;
    v11 = v6;
    v12 = v6 * v5;
    v13 = v5;
    v15 = &v16;
    sub_100AA0214(a1 + 592, &v9);
    v19 = 0x400000001;
    v17 = off_10217C8F8;
    v18 = xmmword_101C1F5F0;
    v20 = &v21;
    sub_100078B9C((uint64_t)&v9, (uint64_t)&v17, v7);
    v24 = 0x400000001;
    v22 = off_10217C8F8;
    v23 = xmmword_101C1F5F0;
    v25 = &v26;
    sub_100A9EDB8((uint64_t)&v27, (uint64_t)&v17, (uint64_t)&v22);
    v44 = 0x400000001;
    v42 = off_10217C8F8;
    v43 = xmmword_101C1F5F0;
    v45 = &v46;
    v39 = 0x10000018BLL;
    v37 = off_10219E638;
    v38 = xmmword_101C3E000;
    v40 = &v41;
    v34 = 0x100000001;
    v32 = off_102167548;
    *(_QWORD *)&v8 = 0x100000001;
    *((_QWORD *)&v8 + 1) = 0x100000001;
    v33 = v8;
    v35 = &v36;
    sub_100A9FAAC((uint64_t)&v22, (uint64_t)&v42, (uint64_t)&v37, (uint64_t)&v32, "2");
  }
}

uint64_t sub_10108E4DC@<X0>(char *__s1@<X2>, uint64_t a2@<X0>, int a3@<W1>, uint64_t a4@<X8>)
{
  __int128 v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int32x4_t v12;
  unsigned int i;
  uint64_t (**v15)();
  int32x4_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (**v20)();
  __int128 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  if (strcmp(__s1, ":"))
    sub_10193D850();
  v22 = 0x100000001;
  v20 = off_102167358;
  *(_QWORD *)&v7 = 0x100000001;
  *((_QWORD *)&v7 + 1) = 0x100000001;
  v21 = v7;
  v23 = &v24;
  v8 = (_DWORD *)sub_100A9E948((uint64_t)&v20, 0);
  *v8 = a3;
  v11 = *(_DWORD *)(a2 + 12);
  v17 = 0x100000004;
  v15 = off_10219E518;
  if (v11 >= 5)
    sub_101918728((uint64_t)v8, v9, v10);
  v12 = vdupq_lane_s32((int32x2_t)(v11 | 0x100000000), 0);
  v12.i32[1] = 1;
  v16 = v12;
  v18 = &v19;
  if (v11)
  {
    for (i = 0; i != v11; ++i)
      *(_DWORD *)sub_100A9E948((uint64_t)&v15, i) = i;
  }
  return sub_10108F124(a4, a2, (uint64_t)&v20, (uint64_t)&v15);
}

_QWORD *sub_10108E5EC(_QWORD *result)
{
  result[16] = off_1021673B0;
  result[10] = off_1021673B0;
  *result = off_102155D60;
  return result;
}

double sub_10108E614(uint64_t a1)
{
  return *(double *)(a1 + 32) + *(double *)(a1 + 16);
}

void sub_10108E624(uint64_t a1, double a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  double v8;
  uint8_t buf[4];
  double v10;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_10219E458);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349056;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "GPSODOM, setting distance multiplier to,%{public}.3f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219E458);
    v7 = 134349056;
    v8 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM, setting distance multiplier to,%{public}.3f", &v7, 12);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryModifiedSubsampler::changeDistanceMultiplier(const double)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if (*(double *)(a1 + 8) != a2)
    *(double *)(a1 + 8) = a2;
}

void sub_10108E7E8(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10108E814(_QWORD *a1)
{
  *a1 = off_102155D60;
  operator delete();
}

void sub_10108E838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[225];

  sub_100A9DEA4(a1, v3, a3);
}

uint64_t sub_10108E88C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, double *a5, double *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11)
{
  uint64_t v12;
  unint64_t v13;
  double *v17;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  double *v25;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t *v42;
  uint64_t v43;

  v12 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) > 0x276276276276276)
    sub_100259694();
  v17 = a5;
  v22 = a10;
  v21 = a11;
  v23 = a9;
  if (0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 3) > v13)
    v13 = 0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a1[2] - *a1) >> 3)) >= 0x13B13B13B13B13BLL)
    v24 = 0x276276276276276;
  else
    v24 = v13;
  if (v24)
  {
    v42 = a7;
    v43 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
    v25 = a6;
    v27 = (char *)sub_100673A14((uint64_t)(a1 + 2), v24);
    v23 = a9;
    a7 = v42;
    v22 = a10;
    v12 = v43;
    v21 = a11;
    v17 = a5;
    a6 = v25;
    v28 = v27;
    v30 = v29;
  }
  else
  {
    v28 = 0;
    v30 = 0;
  }
  v31 = (uint64_t)&v28[104 * v12];
  sub_10108EA7C((uint64_t)(a1 + 2), v31, a2, a3, a4, v17, a6, a7, a8, v23, v22, v21);
  v32 = &v28[104 * v30];
  v33 = v31 + 104;
  v35 = (char *)*a1;
  v34 = (char *)a1[1];
  if (v34 != (char *)*a1)
  {
    do
    {
      v36 = *(_OWORD *)(v34 - 104);
      v37 = *(_OWORD *)(v34 - 88);
      *(_OWORD *)(v31 - 72) = *(_OWORD *)(v34 - 72);
      *(_OWORD *)(v31 - 88) = v37;
      *(_OWORD *)(v31 - 104) = v36;
      v38 = *(_OWORD *)(v34 - 56);
      v39 = *(_OWORD *)(v34 - 40);
      v40 = *(_OWORD *)(v34 - 24);
      *(_QWORD *)(v31 - 8) = *((_QWORD *)v34 - 1);
      *(_OWORD *)(v31 - 24) = v40;
      *(_OWORD *)(v31 - 40) = v39;
      *(_OWORD *)(v31 - 56) = v38;
      v31 -= 104;
      v34 -= 104;
    }
    while (v34 != v35);
    v34 = (char *)*a1;
  }
  *a1 = v31;
  a1[1] = v33;
  a1[2] = (uint64_t)v32;
  if (v34)
    operator delete(v34);
  return v33;
}

void sub_10108EA64(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_10108EA7C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, double *a6, double *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v12 = *a3;
  v13 = *a4;
  v14 = *a5;
  v15 = *a6;
  v16 = *a7;
  v17 = *a8;
  v18 = *a9;
  v19 = *a10;
  v20 = *a11;
  v21 = *a12;
  __asm { FMOV            V18.2D, #1.0 }
  *(_OWORD *)(a2 + 80) = _Q18;
  *(_QWORD *)a2 = v12;
  *(_QWORD *)(a2 + 8) = v13;
  *(_QWORD *)(a2 + 16) = v14;
  *(double *)(a2 + 24) = v15;
  *(double *)(a2 + 32) = v16;
  *(_QWORD *)(a2 + 40) = v17;
  *(_QWORD *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 56) = v19;
  *(_QWORD *)(a2 + 64) = v20;
  *(_QWORD *)(a2 + 72) = v21;
  if (v15 > 0.0)
    *(double *)(a2 + 80) = 1.0 / (v15 * v15);
  if (v16 > 0.0)
    *(double *)(a2 + 88) = 1.0 / (v16 * v16);
  *(_QWORD *)(a2 + 96) = 0;
}

uint64_t sub_10108EB00(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 24) = 0x40000000FLL;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_10219E4D0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 544) = 0x400000001;
  *(_QWORD *)(a1 + 520) = off_10217C8F8;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 552) = a1 + 560;
  *(_QWORD *)(a1 + 616) = 0x100000004;
  *(_QWORD *)(a1 + 592) = off_10217C698;
  *(_QWORD *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 624) = a1 + 632;
  *(_QWORD *)(a1 + 688) = 0xF0000000FLL;
  *(_QWORD *)(a1 + 664) = off_10219E488;
  *(_OWORD *)(a1 + 672) = xmmword_101C3E010;
  *(_QWORD *)(a1 + 696) = a1 + 704;
  *(_QWORD *)(a1 + 2528) = 0x40000000FLL;
  *(_QWORD *)(a1 + 2504) = off_10219E4D0;
  *(_OWORD *)(a1 + 2512) = xmmword_101C3E020;
  *(_QWORD *)(a1 + 2536) = a1 + 2544;
  *(_QWORD *)(a1 + 3048) = 0x400000004;
  *(_QWORD *)(a1 + 3024) = off_10217C6E0;
  *(_OWORD *)(a1 + 3032) = xmmword_101C1F5E0;
  *(_QWORD *)(a1 + 3056) = a1 + 3064;
  *(_QWORD *)(a1 + 3216) = 0x40000000FLL;
  *(_QWORD *)(a1 + 3192) = off_10219E4D0;
  *(_QWORD *)(a1 + 3200) = 0;
  *(_QWORD *)(a1 + 3208) = 0;
  *(_QWORD *)(a1 + 3224) = a1 + 3232;
  *(_QWORD *)(a1 + 3712) = 0;
  *(_BYTE *)(a1 + 3720) = 0;
  sub_10108EC68(a1, a2);
  return a1;
}

void sub_10108EC3C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  v1[399] = off_102155D60;
  v1[378] = off_102155D60;
  v1[313] = off_102155D60;
  v1[83] = off_102155D60;
  v1[74] = off_102155D60;
  v1[65] = off_102155D60;
  *v1 = off_102155D60;
  _Unwind_Resume(a1);
}

BOOL sub_10108EC68(uint64_t a1, uint64_t a2)
{
  _BOOL8 v3;

  v3 = *(_DWORD *)(a2 + 8) < 0x10u && *(_DWORD *)(a2 + 12) < 5u;
  if (v3)
  {
    *(_BYTE *)(a1 + 3720) = 0;
    sub_10007A0C8(a1, a2);
    sub_100079AC4((_DWORD *)(a1 + 520), 0, 0);
    sub_100079AC4((_DWORD *)(a1 + 592), 0, 0);
    sub_100079AC4((_DWORD *)(a1 + 664), 0, 0);
    sub_100079AC4((_DWORD *)(a1 + 2504), 0, 0);
    sub_100079AC4((_DWORD *)(a1 + 3024), 0, 0);
    sub_100079AC4((_DWORD *)(a1 + 3192), 0, 0);
    *(_QWORD *)(a1 + 3712) = *(_QWORD *)(a1 + 8);
  }
  return v3;
}

void sub_10108ED10(_DWORD *a1)
{
  BOOL v2;
  int v3;
  unsigned int v4;
  uint64_t (**v5)();
  __int128 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (**v10)();
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (**v15)();
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD v20[5];
  uint64_t v21;

  if (a1[2])
    v2 = a1[3] == 0;
  else
    v2 = 1;
  if (v2)
  {
    v20[3] = 0x400000001;
    v20[1] = 0;
    v20[2] = 0;
    v20[0] = off_10217C8F8;
    v20[4] = &v21;
    sub_10007A0C8((uint64_t)(a1 + 130), (uint64_t)v20);
  }
  else
  {
    sub_10108E4DC(":", (uint64_t)a1, 0, (uint64_t)v20);
    sub_10007A0C8((uint64_t)(a1 + 130), (uint64_t)v20);
    if (a1[928] >= 2u)
    {
      v3 = 1;
      do
      {
        v4 = v3 + 1;
        sub_10108E4DC(":", (uint64_t)a1, v3, (uint64_t)v20);
        v7 = 0x400000001;
        v5 = off_10217C8F8;
        v6 = xmmword_101C1F5F0;
        v8 = &v9;
        sub_100A9EDB8((uint64_t)v20, (uint64_t)(a1 + 130), (uint64_t)&v5);
        v12 = 0x400000001;
        v10 = off_10217C8F8;
        v11 = xmmword_101C1F5F0;
        v13 = &v14;
        sub_100078B9C((uint64_t)&v5, (uint64_t)&v10, 1.0 / (double)v4);
        v17 = 0x400000001;
        v15 = off_10217C8F8;
        v16 = xmmword_101C1F5F0;
        v18 = &v19;
        sub_100A9ECBC((uint64_t)(a1 + 130), (uint64_t)&v10, (uint64_t)&v15);
        sub_10007A0C8((uint64_t)(a1 + 130), (uint64_t)&v15);
        v3 = v4;
      }
      while (v4 < a1[928]);
    }
  }
}

uint64_t sub_10108EEC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  int v6;
  uint64_t i;
  uint64_t j;
  uint64_t v9;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 8))
    sub_101918798();
  v5 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v5 != *(_DWORD *)(a2 + 12))
    sub_101918770();
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i != v5; ++i)
    {
      if ((_DWORD)v2)
      {
        for (j = 0; j != v2; ++j)
        {
          v9 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * (v6 + j));
          *(_QWORD *)sub_100A9EB8C(*(_QWORD *)(a1 + 72), *(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * j), *(_DWORD *)(*(_QWORD *)(a1 + 160) + 4 * i)) = v9;
          *(_QWORD *)sub_100206B6C(a1, j, i) = v9;
        }
      }
      v6 += v2;
    }
  }
  return a1;
}

uint64_t sub_10108EF9C@<X0>(char *__s1@<X1>, uint64_t a2@<X0>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int32x4_t v11;
  unsigned int i;
  __int128 v13;
  uint64_t (**v15)();
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (**v20)();
  int32x4_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  v7 = strcmp(__s1, ":");
  if ((_DWORD)v7)
    sub_1019187C0();
  v10 = *(_DWORD *)(a2 + 8);
  v22 = 0x100000004;
  v20 = off_10219E518;
  if (v10 >= 5)
    sub_101918728(v7, v8, v9);
  v11 = vdupq_lane_s32((int32x2_t)(v10 | 0x100000000), 0);
  v11.i32[1] = 1;
  v21 = v11;
  v23 = &v24;
  if (v10)
  {
    for (i = 0; i != v10; ++i)
      *(_DWORD *)sub_100A9E948((uint64_t)&v20, i) = i;
  }
  v17 = 0x100000001;
  v15 = off_102167358;
  *(_QWORD *)&v13 = 0x100000001;
  *((_QWORD *)&v13 + 1) = 0x100000001;
  v16 = v13;
  v18 = &v19;
  *(_DWORD *)sub_100A9E948((uint64_t)&v15, 0) = a3;
  return sub_10108F5A4(a4, a2, (uint64_t)&v20, (uint64_t)&v15);
}

_QWORD *sub_10108F0B8(_QWORD *result)
{
  result[17] = off_1021673B0;
  result[10] = off_1021673B0;
  *result = off_102155D60;
  return result;
}

void sub_10108F0E0(_QWORD *a1)
{
  *a1 = off_1021673B0;
  operator delete();
}

void sub_10108F104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[4];

  sub_100A9E878(a1, v3, a3);
}

uint64_t sub_10108F124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t i;
  uint64_t j;
  const char *v14;
  int v15;

  *(_QWORD *)(a1 + 24) = 0x400000001;
  *(_OWORD *)(a1 + 8) = xmmword_101C1F5F0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = off_10219E560;
  *(_QWORD *)(a1 + 72) = a2;
  *(_QWORD *)(a1 + 104) = 0x100000001;
  *(_QWORD *)(a1 + 80) = off_102167358;
  *(_QWORD *)&v7 = 0x100000001;
  *((_QWORD *)&v7 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 112) = a1 + 120;
  *(_QWORD *)(a1 + 128) = off_10219E518;
  *(_QWORD *)(a1 + 152) = 0x100000004;
  *(_OWORD *)(a1 + 136) = xmmword_101C3E030;
  *(_QWORD *)(a1 + 160) = a1 + 168;
  sub_100A9EC04(a1 + 80, a3);
  sub_100A9EC04(a1 + 128, a4);
  v8 = *(unsigned int *)(a1 + 96);
  if (*(_DWORD *)(a1 + 24) < v8)
  {
    v14 = "this->max_num_rows_ >= num_rows";
    v15 = 422;
    goto LABEL_12;
  }
  v9 = *(unsigned int *)(a1 + 144);
  if (*(_DWORD *)(a1 + 28) < v9)
  {
    v14 = "this->max_num_cols_ >= num_cols";
    v15 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v15, v14);
  }
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if ((_DWORD)v9)
  {
    v10 = 0;
    for (i = 0; i != v9; ++i)
    {
      if ((_DWORD)v8)
      {
        for (j = 0; j != v8; ++j)
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (v10 + j)) = *(_QWORD *)sub_100A9EB8C(a2, *(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * j), *(_DWORD *)(*(_QWORD *)(a1 + 160) + 4 * i));
      }
      v10 += v8;
    }
  }
  return a1;
}

void sub_10108F2C0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  v1[16] = off_1021673B0;
  v1[10] = off_1021673B0;
  *v1 = off_102155D60;
  _Unwind_Resume(a1);
}

void sub_10108F2EC(_QWORD *a1)
{
  a1[16] = off_1021673B0;
  a1[10] = off_1021673B0;
  *a1 = off_102155D60;
  operator delete();
}

_QWORD *sub_10108F324(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_10219E5A8;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    operator delete[]();
  *a1 = off_102155D60;
  return a1;
}

void sub_10108F384(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = 0x1000007F1;
  *(_QWORD *)a1 = off_10219E5A8;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_101C3E040;
  sub_10108F4B4();
}

void sub_10108F3DC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    operator delete[]();
  *v1 = off_102155D60;
  _Unwind_Resume(exception_object);
}

void sub_10108F418(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_10219E5A8;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    operator delete[]();
  *a1 = off_102155D60;
  operator delete();
}

void sub_10108F488()
{
  sub_10108F4B4();
}

void sub_10108F4B4()
{
  operator new[]();
}

void sub_10108F520()
{
  operator new[]();
}

void sub_10108F580()
{
  operator delete[]();
}

uint64_t sub_10108F5A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t i;
  uint64_t j;
  const char *v14;
  int v15;

  *(_QWORD *)(a1 + 24) = 0x100000004;
  *(_OWORD *)(a1 + 8) = xmmword_101C3E030;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = off_10219E5F0;
  *(_QWORD *)(a1 + 72) = a2;
  *(_QWORD *)(a1 + 104) = 0x100000004;
  *(_QWORD *)(a1 + 80) = off_10219E518;
  *(_OWORD *)(a1 + 88) = xmmword_101C3E030;
  *(_QWORD *)(a1 + 112) = a1 + 120;
  *(_QWORD *)(a1 + 136) = off_102167358;
  *(_QWORD *)(a1 + 160) = 0x100000001;
  *(_QWORD *)&v7 = 0x100000001;
  *((_QWORD *)&v7 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 144) = v7;
  *(_QWORD *)(a1 + 168) = a1 + 176;
  sub_100A9EC04(a1 + 80, a3);
  sub_100A9EC04(a1 + 136, a4);
  v8 = *(unsigned int *)(a1 + 96);
  if (*(_DWORD *)(a1 + 24) < v8)
  {
    v14 = "this->max_num_rows_ >= num_rows";
    v15 = 422;
    goto LABEL_12;
  }
  v9 = *(unsigned int *)(a1 + 152);
  if (*(_DWORD *)(a1 + 28) < v9)
  {
    v14 = "this->max_num_cols_ >= num_cols";
    v15 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v15, v14);
  }
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if ((_DWORD)v9)
  {
    v10 = 0;
    for (i = 0; i != v9; ++i)
    {
      if ((_DWORD)v8)
      {
        for (j = 0; j != v8; ++j)
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (v10 + j)) = *(_QWORD *)sub_100A9EB8C(a2, *(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * j), *(_DWORD *)(*(_QWORD *)(a1 + 168) + 4 * i));
      }
      v10 += v8;
    }
  }
  return a1;
}

void sub_10108F730(_Unwind_Exception *a1)
{
  _QWORD *v1;

  v1[17] = off_1021673B0;
  v1[10] = off_1021673B0;
  *v1 = off_102155D60;
  _Unwind_Resume(a1);
}

void sub_10108F75C(_QWORD *a1)
{
  a1[17] = off_1021673B0;
  a1[10] = off_1021673B0;
  *a1 = off_102155D60;
  operator delete();
}

void sub_10108F794(_QWORD *a1)
{
  *a1 = off_102155D60;
  operator delete();
}

void sub_10108F7B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[395];

  sub_100A9DEA4(a1, v3, a3);
}

void sub_10108F8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10108F8C8(uint64_t a1, double **a2)
{
  id v3;
  double *v4;
  double v5;
  NSDate *v6;
  NSNumber *v7;
  id v8;
  NSNumber *v9;
  NSNumber *v10;
  NSNumber *v11;
  NSNumber *v12;
  NSNumber *v13;
  NSNumber *v14;
  NSNumber *v15;
  id v16;
  NSObject *v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  id v24;
  uint64_t v25;
  id v26;
  int v27;
  id v28;
  __int16 v29;
  id v30;
  __int16 v31;
  id v32;
  _BYTE buf[12];
  __int16 v34;
  id v35;
  __int16 v36;
  id v37;

  v22 = a1;
  v3 = objc_alloc_init((Class)NSMutableArray);
  v4 = *a2;
  if (*a2 != a2[1])
  {
    v23 = a2[1];
    do
    {
      v24 = objc_alloc((Class)CMOdometerData);
      v5 = v4[1];
      v6 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *v4);
      v7 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v4[2]);
      v8 = v3;
      v9 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v4[5]);
      v10 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v4[7]);
      v11 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v4[8]);
      v12 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v4[13]);
      v13 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v4[18]);
      v14 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v4[19]);
      v15 = v9;
      v3 = v8;
      v16 = objc_msgSend(v24, "initWithDeltaDistance:startDate:endDate:accuracy:rawSpeed:gpsSpeedAccuracy:timestampGps:deltaGroundAltitude:groundAltitudeUncertainty:originDevice:slope:maxAbsSlope:", 0, v6, v7, v15, v10, v11, v5, 0, v12, 2, v13, v14, v22);
      objc_msgSend(v16, "setCurrentSpeed:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v4[4]));
      objc_msgSend(v16, "setGpsAltitude:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v4[3]));
      objc_msgSend(v16, "setOdometer:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v4[6]));
      objc_msgSend(v16, "setGroundAltitude:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v4[12]));
      objc_msgSend(v16, "setSmoothedGPSAltitude:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v4[14]));
      objc_msgSend(v16, "setSmoothedGPSAltitudeUncertainty:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v4[15]));
      objc_msgSend(v16, "setGpsCourseRadians:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v4[16]));
      objc_msgSend(v16, "setGpsCourseAccuracy:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v4[17]));
      objc_msgSend(v3, "addObject:", v16);

      v4 += 24;
    }
    while (v4 != v23);
  }
  if ((unint64_t)objc_msgSend(v3, "count") > 1)
  {
    if (qword_10229FDF0 != -1)
      dispatch_once(&qword_10229FDF0, &stru_10219E6F0);
    v17 = qword_10229FDF8;
    if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349570;
      *(_QWORD *)&buf[4] = objc_msgSend(v3, "count");
      v34 = 2114;
      v35 = objc_msgSend(v3, "firstObject");
      v36 = 2114;
      v37 = objc_msgSend(v3, "lastObject");
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "CyclingDistance, sent datums, %{public}lu, first, %{public}@, last, %{public}@", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDF0 != -1)
        dispatch_once(&qword_10229FDF0, &stru_10219E6F0);
      v18 = qword_10229FDF8;
      v27 = 134349570;
      v28 = objc_msgSend(v3, "count");
      v29 = 2114;
      v30 = objc_msgSend(v3, "firstObject");
      v31 = 2114;
      v32 = objc_msgSend(v3, "lastObject");
      LODWORD(v21) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 0, "CyclingDistance, sent datums, %{public}lu, first, %{public}@, last, %{public}@", &v27, v21);
      v20 = (char *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLOdometerSubscription::onCyclingDistanceUpdate(const std::vector<CLOdometerEntry> &)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
  }
  v25 = CMCyclingWorkoutDistanceDataArray;
  v26 = v3;
  *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1);

  sub_101091640(v22, buf);
}

void sub_10108FD40(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v5;

  v5 = sub_1001B5A2C(a1, a2, a3, a4, a5);
  *(_OWORD *)(v5 + 216) = xmmword_101C3E1D0;
  *(_OWORD *)(v5 + 232) = unk_101C3E1E0;
  *(_OWORD *)(v5 + 248) = xmmword_101C3E1F0;
  *(_OWORD *)(v5 + 264) = unk_101C3E200;
  *(_OWORD *)(v5 + 152) = xmmword_101C3E190;
  *(_OWORD *)(v5 + 168) = unk_101C3E1A0;
  *(_OWORD *)(v5 + 184) = xmmword_101C3E1B0;
  *(_OWORD *)(v5 + 200) = unk_101C3E1C0;
  *(_OWORD *)(v5 + 88) = xmmword_101C3E150;
  *(_OWORD *)(v5 + 104) = unk_101C3E160;
  *(_OWORD *)(v5 + 120) = xmmword_101C3E170;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)v5 = off_10219E680;
  *(_QWORD *)(v5 + 56) = 0;
  *(_BYTE *)(v5 + 64) = 0;
  *(_OWORD *)(v5 + 136) = unk_101C3E180;
  sub_1004FAEDC();
}

void sub_10108FEEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 56) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v2;
  *v2 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_10002FA68(v1);
  _Unwind_Resume(a1);
}

void sub_10108FF38(uint64_t a1, _DWORD *a2, double *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLOdometerSubscription::onOdometerUpdate");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10219E6D0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLOdometerSubscription::onOdometerUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219E6D0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLOdometerSubscription::onOdometerUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_101090E58(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1010900F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_101090110(uint64_t a1, _DWORD *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLOdometerSubscription::onNatalimetryUpdate");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10219E6D0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLOdometerSubscription::onNatalimetryUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219E6D0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLOdometerSubscription::onNatalimetryUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1010914EC(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1010902C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010902EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_10219E680;
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(_BYTE *)(a1 + 64))
    objc_msgSend(*(id *)(a1 + 80), "unregisterForCyclingWorkoutDistanceUpdates:", *(_QWORD *)(a1 + 72));

  *(_QWORD *)(a1 + 80) = 0;
  objc_msgSend(*(id *)(a1 + 72), "setValid:", 0);

  *(_QWORD *)(a1 + 72) = 0;
  v4 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return sub_10002FA68(a1);
}

void sub_1010903B4(uint64_t a1)
{
  sub_1010902EC(a1);
  operator delete();
}

_QWORD *sub_1010903D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t i;
  _BYTE *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  _QWORD v21[3];
  _BYTE v22[32];

  v15[0] = off_10219E760;
  v15[1] = sub_1010906F0;
  v15[2] = 0;
  v16 = v15;
  sub_1015A2E04(v17, "kCLConnectionMessageOdometerGpsAvailability");
  sub_100BB6D08((uint64_t)&v18, (uint64_t)v15);
  v13[0] = off_10219E760;
  v13[1] = sub_101090968;
  v13[2] = 0;
  v14 = v13;
  sub_1015A2E04(v19, "kCLConnectionMessageStartOdometerUpdate");
  sub_100BB6D08((uint64_t)&v20, (uint64_t)v13);
  v11[0] = off_10219E760;
  v11[1] = sub_101090C00;
  v11[2] = 0;
  v12 = v11;
  sub_1015A2E04(v21, "kCLConnectionMessageCyclingWorkoutDistanceUpdate");
  sub_100BB6D08((uint64_t)v22, (uint64_t)v11);
  sub_101091AFC(a1, (unsigned __int8 *)v17, 3);
  for (i = 0; i != -21; i -= 7)
  {
    v3 = *(_BYTE **)&v22[i * 8 + 24];
    if (&v22[i * 8] == v3)
    {
      v3 = &v22[i * 8];
      v4 = 4;
    }
    else
    {
      if (!v3)
        goto LABEL_7;
      v4 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE(v21[i + 2]) < 0)
      operator delete((void *)v21[i]);
  }
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  else if (v12)
  {
    v6 = 5;
    goto LABEL_14;
  }
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
LABEL_19:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  else if (v14)
  {
    v8 = 5;
    goto LABEL_19;
  }
  result = v16;
  if (v16 == v15)
  {
    v10 = 4;
    result = v15;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
  }
  else if (v16)
  {
    v10 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
  }
  return result;
}

void sub_1010905E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, char *a20,char a21)
{
  uint64_t i;
  uint64_t *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;

  for (i = 112; i != -56; i -= 56)
    sub_1004E21A4((uint64_t)(&a21 + i));
  v23 = a12;
  if (a12 == &a9)
  {
    v24 = 4;
    v23 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_8;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_8:
  v25 = a16;
  if (a16 == &a13)
  {
    v26 = 4;
    v25 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_13;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_13:
  v27 = a20;
  if (a20 == &a17)
  {
    v28 = 4;
    v27 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_18;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_18:
  _Unwind_Resume(a1);
}

void sub_1010906F0(uint64_t *a1, int a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[2];
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t *v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if ((sub_1011C589C(a1[1]) & 1) != 0)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10219E730);
    v5 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      v6 = a1[3];
      *(_DWORD *)buf = 67109634;
      v19 = a2;
      v20 = 2112;
      v21 = v6;
      v22 = 2048;
      v23 = a1;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "OdometerGpsAvailability subscription changed, %d, %@, %p", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_10219E730);
      v10 = a1[3];
      v13[0] = 67109634;
      v13[1] = a2;
      v14 = 2112;
      v15 = v10;
      v16 = 2048;
      v17 = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "OdometerGpsAvailability subscription changed, %d, %@, %p", v13, 28);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLOdometerSubscription::handleRequestOdometerGpsAvailability(BOOL, const CLNameValuePair &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    sub_1001A638C((uint64_t)a1);
    v7 = a1[7];
    v9 = *(_QWORD *)(v7 + 8);
    v8 = *(void **)(v7 + 16);
    if (a2)
      objc_msgSend(v8, "register:forNotification:registrationInfo:", v9, 1, 0);
    else
      objc_msgSend(v8, "unregister:forNotification:", v9, 1);
  }

}

void sub_101090934(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_101090968(uint64_t a1, int a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  int v24;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_10229FDF0 != -1)
    dispatch_once(&qword_10229FDF0, &stru_10219E6F0);
  v5 = qword_10229FDF8;
  if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 138412802;
    v20 = v6;
    v21 = 2048;
    v22 = a1;
    v23 = 1024;
    v24 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Odometer subscription changed, %@, %p, %d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDF0 != -1)
      dispatch_once(&qword_10229FDF0, &stru_10219E6F0);
    v10 = *(_QWORD *)(a1 + 24);
    v13 = 138412802;
    v14 = v10;
    v15 = 2048;
    v16 = a1;
    v17 = 1024;
    v18 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDF8, 0, "Odometer subscription changed, %@, %p, %d", &v13, 28);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLOdometerSubscription::handleRequestOdometerUpdate(BOOL, const CLNameValuePair &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  sub_1001A638C(a1);
  v7 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(v7 + 8);
  v8 = *(void **)(v7 + 16);
  if (a2)
  {
    objc_msgSend(v8, "register:forNotification:registrationInfo:", v9, 2, 0);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8), 4, 0);
  }
  else
  {
    objc_msgSend(v8, "unregister:forNotification:", v9, 2);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8), 4);
  }

}

void sub_101090BC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_101090C00(uint64_t a1, int a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_10229FDF0 != -1)
    dispatch_once(&qword_10229FDF0, &stru_10219E6F0);
  v5 = qword_10229FDF8;
  if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 138412802;
    v19 = v6;
    v20 = 2048;
    v21 = a1;
    v22 = 1024;
    v23 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Cycling Workout Distance subscription changed, %@, %p, %d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDF0 != -1)
      dispatch_once(&qword_10229FDF0, &stru_10219E6F0);
    v9 = *(_QWORD *)(a1 + 24);
    v12 = 138412802;
    v13 = v9;
    v14 = 2048;
    v15 = a1;
    v16 = 1024;
    v17 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDF8, 0, "Cycling Workout Distance subscription changed, %@, %p, %d", &v12, 28);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLOdometerSubscription::handleRequestCyclingWorkoutDistanceUpdate(BOOL, const CLNameValuePair &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  sub_1001A638C(a1);
  *(_BYTE *)(a1 + 64) = a2;
  v8 = *(_QWORD *)(a1 + 72);
  v7 = *(void **)(a1 + 80);
  if (a2)
    objc_msgSend(v7, "registerForCyclingWorkoutDistanceUpdates:", v8);
  else
    objc_msgSend(v7, "unregisterForCyclingWorkoutDistanceUpdates:", v8);

}

void sub_101090E2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_101090E58(uint64_t a1, uint64_t a2, _DWORD *a3, double *a4)
{
  int v5;
  _BOOL8 v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  NSObject *v11;
  double v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  const char *v27;
  char *v28;
  void *v29;
  uint64_t v30;
  const char *v31;
  char *v32;
  uint64_t v33;
  NSNumber *v34;
  uint64_t v35;
  uint64_t v37;
  id v38;
  int v39;
  id v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  _BYTE buf[12];
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;

  if (*a3 != 4)
    return;
  v5 = *((_DWORD *)a4 + 21);
  v6 = v5 == 1;
  v7 = v5 == 2;
  v8 = 2;
  if (!v7)
    v8 = v6;
  v35 = v8;
  v9 = a1 + 88;
  v10 = *(double *)(a1 + 88);
  if (v10 == 0.0)
    goto LABEL_12;
  if (vabdd_f64(*a4, v10) >= 1800.0)
  {
    if (qword_10229FDF0 != -1)
      dispatch_once(&qword_10229FDF0, &stru_10219E6F0);
    v11 = qword_10229FDF8;
    if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_DEBUG))
    {
      v12 = *a4;
      v13 = *(_QWORD *)v9;
      *(_DWORD *)buf = 134349312;
      *(double *)&buf[4] = v12;
      v46 = 2050;
      v47 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Ignoring cached OdometerEntry due to significant time between entries (%{public}.2f) (%{public}.2f)", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDF0 != -1)
        dispatch_once(&qword_10229FDF0, &stru_10219E6F0);
      v29 = *(void **)a4;
      v30 = *(_QWORD *)v9;
      v39 = 134349312;
      v40 = v29;
      v41 = 2050;
      v42 = v30;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDF8, 2, "Ignoring cached OdometerEntry due to significant time between entries (%{public}.2f) (%{public}.2f)", &v39, 22);
      v32 = (char *)v31;
      sub_100512490("Generic", 1, 0, 2, "void CLOdometerSubscription::onOdometerUpdate(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v31);
      if (v32 != buf)
        free(v32);
    }
LABEL_12:
    v34 = 0;
    goto LABEL_13;
  }
  v34 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4[12] - *(double *)(a1 + 184));
LABEL_13:
  v14 = objc_msgSend(objc_alloc((Class)CMOdometerData), "initWithDeltaDistance:startDate:endDate:accuracy:rawSpeed:gpsSpeedAccuracy:timestampGps:deltaGroundAltitude:groundAltitudeUncertainty:originDevice:slope:maxAbsSlope:", 0, +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *a4), +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4[2]), +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4[5]), +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4[7]), +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4[8]), a4[1], v34, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4[13]), v35, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4[18]), +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4[19]));
  objc_msgSend(v14, "setCurrentSpeed:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4[4]));
  objc_msgSend(v14, "setAverageSpeed:", 0);
  objc_msgSend(v14, "setGpsAltitude:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4[3]));
  objc_msgSend(v14, "setOdometer:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4[6]));
  objc_msgSend(v14, "setGroundAltitude:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4[12]));
  objc_msgSend(v14, "setSmoothedGPSAltitude:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4[14]));
  objc_msgSend(v14, "setSmoothedGPSAltitudeUncertainty:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4[15]));
  objc_msgSend(v14, "setGpsCourseRadians:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4[16]));
  objc_msgSend(v14, "setGpsCourseAccuracy:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4[17]));
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10219E710);
  v15 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v16 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)&buf[4] = v14;
    v46 = 2112;
    v47 = v16;
    v48 = 2048;
    v49 = a1;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%@, %@, %p", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219E710);
    v26 = *(_QWORD *)(a1 + 24);
    v39 = 138412802;
    v40 = v14;
    v41 = 2112;
    v42 = v26;
    v43 = 2048;
    v44 = a1;
    LODWORD(v33) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "%@, %@, %p", &v39, v33);
    v28 = (char *)v27;
    sub_100512490("Generic", 1, 0, 2, "void CLOdometerSubscription::onOdometerUpdate(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v27);
    if (v28 != buf)
      free(v28);
  }
  v37 = CMOdometerDataObject;
  v38 = v14;
  *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v38, &v37, 1);

  sub_101091444(a1, buf);
  v17 = *(_OWORD *)a4;
  v18 = *((_OWORD *)a4 + 1);
  v19 = *((_OWORD *)a4 + 3);
  *(_OWORD *)(v9 + 32) = *((_OWORD *)a4 + 2);
  *(_OWORD *)(v9 + 48) = v19;
  *(_OWORD *)v9 = v17;
  *(_OWORD *)(v9 + 16) = v18;
  v20 = *((_OWORD *)a4 + 4);
  v21 = *((_OWORD *)a4 + 5);
  v22 = *((_OWORD *)a4 + 7);
  *(_OWORD *)(v9 + 96) = *((_OWORD *)a4 + 6);
  *(_OWORD *)(v9 + 112) = v22;
  *(_OWORD *)(v9 + 64) = v20;
  *(_OWORD *)(v9 + 80) = v21;
  v23 = *((_OWORD *)a4 + 8);
  v24 = *((_OWORD *)a4 + 9);
  v25 = *((_OWORD *)a4 + 11);
  *(_OWORD *)(v9 + 160) = *((_OWORD *)a4 + 10);
  *(_OWORD *)(v9 + 176) = v25;
  *(_OWORD *)(v9 + 128) = v23;
  *(_OWORD *)(v9 + 144) = v24;
}

void sub_101091444(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(off_10219E800, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1010914D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1010914EC(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned __int8 *a4)
{
  NSDictionary *v5;
  uint64_t v6;
  NSNumber *v7;

  if (*a3 == 1)
  {
    v6 = CMOdometerGpsAvailability;
    v7 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *a4);
    v5 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1);
    sub_101091598(a1, &v5);
  }
}

void sub_101091598(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(off_10219E808, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_10109162C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101091640(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(&off_10219E810, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1010916D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1010916E8(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101091714(id a1)
{
  qword_10229FDF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Odometer");
}

void sub_101091740(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_10109176C(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

__n128 sub_101091798(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_10219E760;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1010917D4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_10219E760;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1010917F8(uint64_t a1, uint64_t a2, __int128 *a3)
{
  sub_101091848(a1 + 8, a2, a3);
}

uint64_t sub_101091800(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10109183C()
{
}

void sub_101091848(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_1010918CC(a1, a2, (CLConnectionMessage **)&v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1010918B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_1018FBC0C(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010918CC(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  NSSet *v6;
  const __CFDictionary *DictionaryOfClasses;
  void (*v8)(_QWORD *, BOOL, uint8_t *);
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  NSObject *v12;
  BOOL v14;
  uint8_t v15[16];
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;

  v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1001C1D6C((int)v15, DictionaryOfClasses);
  v14 = 0;
  if ((sub_1001E4874((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))a1;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = (_QWORD *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0)
      v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))(*v10 + v8);
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10219E7D0);
    v11 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10219E7D0);
    }
    v12 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10011A5A8(v15);
}

void sub_101091AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_101091AD0(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

uint64_t sub_101091AFC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_101091B74(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_101091B60(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_101091B74(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_101091DF4(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_101091DDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_101091DF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_101091E68(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_101091E50(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_101091E68(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_101091EC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101091EDC()
{
  sub_1015A2E04(qword_10230C398, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230C398, (void *)&_mh_execute_header);
}

uint64_t sub_101092788(uint64_t a1, uint64_t a2)
{
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  int *v10;
  int *v11;
  int *v12;
  int *v13;
  int *v14;
  int *v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  BOOL v22;
  int v23;
  unint64_t v25;
  uint64_t v26;
  int *v27;
  int *v28;
  int *v29;
  int *v30;
  int *v31;
  uint64_t v32;
  uint64_t result;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    v4 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v5 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v6 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v7 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v8 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v9 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v10 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v11 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v12 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v13 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v14 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    v15 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
    do
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        break;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      while (1)
      {
        v19 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        v20 = v19 + 1;
        if (v19 == -1 || v20 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20;
        v18 |= (unint64_t)(v21 & 0x7F) << v16;
        if ((v21 & 0x80) == 0)
          goto LABEL_12;
        v16 += 7;
        v22 = v17++ >= 9;
        if (v22)
        {
          v18 = 0;
          v23 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
      v23 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v18 = 0;
LABEL_14:
      if (v23 || (v18 & 7) == 4)
        break;
      switch((v18 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + v4[992]) |= 0x20u;
          v25 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v25 <= 0xFFFFFFFFFFFFFFF7 && v25 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v59 = v5[993];
          goto LABEL_95;
        case 2u:
          *(_WORD *)(a1 + v4[992]) |= 1u;
          v34 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v34 <= 0xFFFFFFFFFFFFFFF7 && v34 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v59 = v6[994];
          goto LABEL_95;
        case 3u:
          *(_WORD *)(a1 + v4[992]) |= 2u;
          v35 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v35 <= 0xFFFFFFFFFFFFFFF7 && v35 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v35);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v59 = v7[995];
          goto LABEL_95;
        case 4u:
          *(_WORD *)(a1 + v4[992]) |= 0x80u;
          v36 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v36 <= 0xFFFFFFFFFFFFFFF7 && v36 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v36);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v36 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v59 = v8[996];
          goto LABEL_95;
        case 5u:
          *(_WORD *)(a1 + v4[992]) |= 0x40u;
          v37 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v37 <= 0xFFFFFFFFFFFFFFF7 && v37 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v37 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v59 = v9[997];
          goto LABEL_95;
        case 6u:
          *(_WORD *)(a1 + v4[992]) |= 0x10u;
          v38 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v38 <= 0xFFFFFFFFFFFFFFF7 && v38 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v38);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v38 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v59 = v10[998];
          goto LABEL_95;
        case 7u:
          *(_WORD *)(a1 + v4[992]) |= 4u;
          v39 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v39 <= 0xFFFFFFFFFFFFFFF7 && v39 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v39);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v39 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v59 = v11[999];
          goto LABEL_95;
        case 8u:
          *(_WORD *)(a1 + v4[992]) |= 8u;
          v40 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v40 <= 0xFFFFFFFFFFFFFFF7 && v40 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v40);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v40 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v59 = v12[1000];
LABEL_95:
          *(_QWORD *)(a1 + v59) = v26;
          continue;
        case 9u:
          v41 = 0;
          v42 = 0;
          v43 = 0;
          *(_WORD *)(a1 + v4[992]) |= 0x400u;
          while (2)
          {
            v44 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v45 = v44 + 1;
            if (v44 == -1 || v45 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v46 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v44);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v45;
              v43 |= (unint64_t)(v46 & 0x7F) << v41;
              if (v46 < 0)
              {
                v41 += 7;
                v22 = v42++ >= 9;
                if (v22)
                {
                  LODWORD(v43) = 0;
                  goto LABEL_69;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v43) = 0;
LABEL_69:
          v58 = v13[1001];
          goto LABEL_74;
        case 0xAu:
          v47 = 0;
          v48 = 0;
          v43 = 0;
          *(_WORD *)(a1 + v4[992]) |= 0x200u;
          while (2)
          {
            v49 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v50 = v49 + 1;
            if (v49 == -1 || v50 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v51 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v49);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v50;
              v43 |= (unint64_t)(v51 & 0x7F) << v47;
              if (v51 < 0)
              {
                v47 += 7;
                v22 = v48++ >= 9;
                if (v22)
                {
                  LODWORD(v43) = 0;
                  goto LABEL_73;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v43) = 0;
LABEL_73:
          v58 = v14[1002];
LABEL_74:
          *(_DWORD *)(a1 + v58) = v43;
          continue;
        case 0xBu:
          v52 = 0;
          v53 = 0;
          v54 = 0;
          *(_WORD *)(a1 + v4[992]) |= 0x100u;
          break;
        default:
          v27 = v5;
          v28 = v6;
          v29 = v4;
          v30 = v7;
          v31 = v8;
          v32 = a1;
          result = PBReaderSkipValueWithTag(a2);
          v15 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          a1 = v32;
          v9 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          v8 = v31;
          v10 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          v7 = v30;
          v11 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          v4 = v29;
          v14 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          v6 = v28;
          v12 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          v5 = v27;
          v13 = &OBJC_IVAR___CLEEDCoexMonitorCellular_fULInfoQueue;
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v55 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        v56 = v55 + 1;
        if (v55 == -1 || v56 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v57 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v55);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v56;
        v54 |= (unint64_t)(v57 & 0x7F) << v52;
        if ((v57 & 0x80) == 0)
          goto LABEL_76;
        v52 += 7;
        v22 = v53++ >= 9;
        if (v22)
        {
          v54 = 0;
          goto LABEL_78;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_76:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v54 = 0;
LABEL_78:
      *(_QWORD *)(a1 + v15[1003]) = v54;
    }
    while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length));
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_101093D00()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C3E490;
      v1[3] = unk_101C3E4A0;
      v1[4] = xmmword_101C3E4B0;
      v1[0] = xmmword_101C3E470;
      v1[1] = unk_101C3E480;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_101093DD4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

void sub_101093E90(id a1)
{
  qword_10230C3B0 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLRayTracingTileManagerSilo"));
}

uint64_t sub_101093F44(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101098F74;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230C3D0 != -1)
    dispatch_once(&qword_10230C3D0, block);
  return qword_102311C78;
}

void sub_1010940E4(id a1)
{
  NSObject *v1;
  _DWORD v2[2];
  __int16 v3;
  const char *v4;

  sub_100197040();
  if ((sub_100762DE8() & 1) != 0)
  {
    byte_10230C3C0 = 1;
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219EA10);
    v1 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      v2[0] = 68289026;
      v2[1] = 0;
      v3 = 2082;
      v4 = "";
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"RayTracingTileManager is not supported\"}", (uint8_t *)v2, 0x12u);
    }
  }
}

void sub_101094390(uint64_t a1, int a2, double a3, double a4)
{
  NSObject *v8;
  id v9;
  NSObject *v10;
  _BOOL4 v11;
  _BOOL4 v12;
  NSObject *v13;
  _BOOL4 v14;
  _BOOL4 v15;
  NSObject *v16;
  _QWORD v17[7];
  int v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  _BOOL4 v24;
  __int16 v25;
  _BOOL4 v26;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10219EA10);
  v8 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v20 = 0;
    v21 = 2082;
    v22 = "";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,getTiles\"}", buf, 0x12u);
  }
  if (*(_BYTE *)(a1 + 272))
  {
    if (*(_QWORD *)(a1 + 120) && *(_QWORD *)(a1 + 360))
    {
      v9 = objc_msgSend(*(id *)(a1 + 112), "silo");
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_10109A170;
      v17[3] = &unk_102146A50;
      v17[4] = a1;
      *(double *)&v17[5] = a3;
      *(double *)&v17[6] = a4;
      v18 = a2;
      objc_msgSend(v9, "async:", v17);
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10219EA10);
      v10 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
      {
        v11 = *(_QWORD *)(a1 + 120) == 0;
        v12 = *(_QWORD *)(a1 + 360) == 0;
        *(_DWORD *)buf = 68289538;
        v20 = 0;
        v21 = 2082;
        v22 = "";
        v23 = 1026;
        v24 = v11;
        v25 = 1026;
        v26 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,getTiles,unexpected null pointer\", \"fRTTileDownloader null\":%{public}hhd, \"fTileAvailabilityMgr null\":%{public}hhd}", buf, 0x1Eu);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10219EA10);
      }
      v13 = qword_1022A0048;
      if (os_signpost_enabled((os_log_t)qword_1022A0048))
      {
        v14 = *(_QWORD *)(a1 + 120) == 0;
        v15 = *(_QWORD *)(a1 + 360) == 0;
        *(_DWORD *)buf = 68289538;
        v20 = 0;
        v21 = 2082;
        v22 = "";
        v23 = 1026;
        v24 = v14;
        v25 = 1026;
        v26 = v15;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLRayTracingTileManager,getTiles,unexpected null pointer", "{\"msg%{public}.0s\":\"CLRayTracingTileManager,getTiles,unexpected null pointer\", \"fRTTileDownloader null\":%{public}hhd, \"fTileAvailabilityMgr null\":%{public}hhd}", buf, 0x1Eu);
      }
    }
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219EA10);
    v16 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v20 = 0;
      v21 = 2082;
      v22 = "";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,feature not enabled\"}", buf, 0x12u);
    }
  }
}

void sub_10109486C(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  int v5;
  int v6;
  __int16 v7;
  const char *v8;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10219EA10);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 68289026;
    v6 = 0;
    v7 = 2082;
    v8 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,runPreCachingCycle\"}", (uint8_t *)&v5, 0x12u);
  }
  if (*(_BYTE *)(a1 + 272))
  {
    if (!*(_BYTE *)(a1 + 274))
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10219EA10);
      v3 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        v5 = 68289026;
        v6 = 0;
        v7 = 2082;
        v8 = "";
        v4 = "{\"msg%{public}.0s\":\"CLRayTracingTileManager,runPreCachingCycle not allowed\"}";
LABEL_15:
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v4, (uint8_t *)&v5, 0x12u);
      }
    }
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219EA10);
    v3 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 68289026;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      v4 = "{\"msg%{public}.0s\":\"CLRayTracingTileManager,feature not enabled\"}";
      goto LABEL_15;
    }
  }
}

void sub_101094BE8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10219EA10);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,cancelRequest\"}", (uint8_t *)v4, 0x12u);
  }
  v3 = *(_QWORD *)(a1 + 120);
  if (v3)
    sub_100791910(v3);
  *(_BYTE *)(a1 + 356) = 0;
}

void sub_101094CD0(uint64_t a1, void *a2)
{
  id v4;
  NSObject *v5;
  uint8_t buf[8];
  _WORD v7[8];

  *(_QWORD *)sub_101095188(a1, "CLRayTracingTileManager", a2) = off_10219E898;
  v4 = a2;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 112) = v4;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 268) = 0;
  *(_OWORD *)(a1 + 150) = 0u;
  *(_WORD *)(a1 + 272) = 1;
  *(_BYTE *)(a1 + 274) = 0;
  *(_QWORD *)(a1 + 280) = 0x415BAF8000000000;
  *(_OWORD *)(a1 + 288) = xmmword_101C3E4D0;
  *(_OWORD *)(a1 + 304) = xmmword_101C3E4E0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 3;
  *(_QWORD *)(a1 + 349) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10219EA10);
  v5 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    v7[0] = 2082;
    *(_QWORD *)&v7[1] = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,constructor\"}", buf, 0x12u);
  }
  operator new();
}

void sub_101095078(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a2);
  v6 = v2[47];
  v2[47] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = v2[46];
  v2[46] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_10109DB3C(v4, 0);
  sub_10109DAB0((void ***)va);
  v8 = v2[16];
  v2[16] = 0;
  if (v8)
    operator delete();
  sub_10109D9A4(v3, 0);
  sub_1010984A8((uint64_t)v2);
  _Unwind_Resume(a1);
}

uint64_t sub_101095188(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_10219EA60;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_101095208(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_101095224(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLRayTracingTileManager::onDaemonStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 112), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10219E9F0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRayTracingTileManager::onDaemonStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219E9F0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRayTracingTileManager::onDaemonStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10109A184(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1010953DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1010953FC(uint64_t a1)
{
  int v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;
  int v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  const char *v14;
  int v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  const char *v21;
  int v22;
  int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v27;
  const char *v28;
  int v29;
  int v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  NSObject *v34;
  int v35;
  int v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  NSObject *v40;
  int v41;
  int v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  NSObject *v46;
  int v47;
  int v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  NSObject *v52;
  double v53;
  int v54;
  int v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  NSObject *v59;
  int v60;
  int v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  NSObject *v65;
  const char *v66;
  char *v67;
  const char *v68;
  const char *v69;
  char *v70;
  const char *v71;
  const char *v72;
  char *v73;
  const char *v74;
  const char *v75;
  char *v76;
  const char *v77;
  char *v78;
  const char *v79;
  char *v80;
  const char *v81;
  char *v82;
  const char *v83;
  char *v84;
  const char *v85;
  char *v86;
  const char *v87;
  char *v88;
  uint64_t v89;
  const char *v90;
  const char *v91;
  double v92;
  const char *v93;
  const char *v94;
  const char *v95;
  BOOL v96;
  BOOL v97;
  BOOL v98;
  const char *v99;
  int v100;
  const char *v101;
  _OWORD buf[102];

  v99 = 0;
  sub_1001E4804(buf);
  v2 = sub_1001FD98C(*(uint64_t *)&buf[0], "RayTracingAvlExpirationAgeDefaults", &v99);
  v3 = v2;
  v4 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_5;
  v5 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 - 1, v5));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v3)
      goto LABEL_12;
  }
  else
  {
LABEL_5:
    if (!v2)
      goto LABEL_12;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10219EA30);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf[0]) = 134349056;
    *(_QWORD *)((char *)buf + 4) = v99;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "RayTracingTileManager,defaults expirationAge,%{public}.3lf", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10219EA30);
    v100 = 134349056;
    v101 = v99;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "RayTracingTileManager,defaults expirationAge,%{public}.3lf", &v100, 12);
    v67 = (char *)v66;
    sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileManager::readRayTracingDefaultsWriteConfig()", "%s\n", v66);
    if (v67 != (char *)buf)
      free(v67);
  }
  *(_QWORD *)(a1 + 168) = v99;
  *(_BYTE *)(a1 + 176) = 1;
LABEL_12:
  v98 = 0;
  sub_1001E4804(buf);
  v8 = sub_1001E4874(*(uint64_t *)&buf[0], "RayTracingTileManagerEnableDefaults", &v98);
  v9 = v8;
  v10 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_16;
  v11 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!v9)
      goto LABEL_26;
  }
  else
  {
LABEL_16:
    if (!v8)
      goto LABEL_26;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10219EA30);
  v13 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    if (v98)
      v14 = "On";
    else
      v14 = "Off";
    LODWORD(buf[0]) = 136446210;
    *(_QWORD *)((char *)buf + 4) = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "RayTracingTileManager,defaults featureEnable,%{public}s", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10219EA30);
    if (v98)
      v68 = "On";
    else
      v68 = "Off";
    v100 = 136446210;
    v101 = v68;
    LODWORD(v89) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "RayTracingTileManager,defaults featureEnable,%{public}s", &v100, v89);
    v70 = (char *)v69;
    sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileManager::readRayTracingDefaultsWriteConfig()", "%s\n", v69);
    if (v70 != (char *)buf)
      free(v70);
  }
  *(_WORD *)(a1 + 160) = v98 | 0x100;
LABEL_26:
  v97 = 0;
  sub_1001E4804(buf);
  v15 = sub_1001E4874(*(uint64_t *)&buf[0], "RayTracingPreCacheingEnabledDefaults", &v97);
  v16 = v15;
  v17 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_30;
  v18 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if (!v16)
      goto LABEL_40;
  }
  else
  {
LABEL_30:
    if (!v15)
      goto LABEL_40;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10219EA30);
  v20 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    if (v97)
      v21 = "On";
    else
      v21 = "Off";
    LODWORD(buf[0]) = 136446210;
    *(_QWORD *)((char *)buf + 4) = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "RayTracingTileManager,defaults preCacheingEnable,%{public}s", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10219EA30);
    if (v97)
      v71 = "On";
    else
      v71 = "Off";
    v100 = 136446210;
    v101 = v71;
    LODWORD(v89) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "RayTracingTileManager,defaults preCacheingEnable,%{public}s", &v100, v89);
    v73 = (char *)v72;
    sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileManager::readRayTracingDefaultsWriteConfig()", "%s\n", v72);
    if (v73 != (char *)buf)
      free(v73);
  }
  *(_WORD *)(a1 + 164) = v97 | 0x100;
LABEL_40:
  v96 = 0;
  sub_1001E4804(buf);
  v22 = sub_1001E4874(*(uint64_t *)&buf[0], "RayTracingFlushRTDataDefaults", &v96);
  v23 = v22;
  v24 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_44;
  v25 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    if (!v23)
      goto LABEL_54;
  }
  else
  {
LABEL_44:
    if (!v22)
      goto LABEL_54;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10219EA30);
  v27 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    if (v96)
      v28 = "On";
    else
      v28 = "Off";
    LODWORD(buf[0]) = 136446210;
    *(_QWORD *)((char *)buf + 4) = v28;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "RayTracingTileManager,defaults FlushEnabled,%{public}s", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10219EA30);
    if (v96)
      v74 = "On";
    else
      v74 = "Off";
    v100 = 136446210;
    v101 = v74;
    LODWORD(v89) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "RayTracingTileManager,defaults FlushEnabled,%{public}s", &v100, v89);
    v76 = (char *)v75;
    sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileManager::readRayTracingDefaultsWriteConfig()", "%s\n", v75);
    if (v76 != (char *)buf)
      free(v76);
  }
  *(_WORD *)(a1 + 162) = v96 | 0x100;
LABEL_54:
  v95 = 0;
  sub_1001E4804(buf);
  v29 = sub_1001FD98C(*(uint64_t *)&buf[0], "RayTracingFlushRTDataBeforeTimeDefaults", &v95);
  v30 = v29;
  v31 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_58;
  v32 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    if (!v30)
      goto LABEL_65;
  }
  else
  {
LABEL_58:
    if (!v29)
      goto LABEL_65;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10219EA30);
  v34 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf[0]) = 134349056;
    *(_QWORD *)((char *)buf + 4) = v95;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "RayTracingTileManager,defaults flushTime,%{public}.3lf", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10219EA30);
    v100 = 134349056;
    v101 = v95;
    LODWORD(v89) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "RayTracingTileManager,defaults flushTime,%{public}.3lf", &v100, v89);
    v78 = (char *)v77;
    sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileManager::readRayTracingDefaultsWriteConfig()", "%s\n", v77);
    if (v78 != (char *)buf)
      free(v78);
  }
  *(_QWORD *)(a1 + 184) = v95;
  *(_BYTE *)(a1 + 192) = 1;
LABEL_65:
  v94 = 0;
  sub_1001E4804(buf);
  v35 = sub_1001FD98C(*(uint64_t *)&buf[0], "RayTracingAvlDownloadRateOnWifiDefaults", &v94);
  v36 = v35;
  v37 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_69;
  v38 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    if (!v36)
      goto LABEL_76;
  }
  else
  {
LABEL_69:
    if (!v35)
      goto LABEL_76;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10219EA30);
  v40 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf[0]) = 134349056;
    *(_QWORD *)((char *)buf + 4) = v94;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "RayTracingTileManager,defaults wifiDownloadRateDefault,%{public}.3lf", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10219EA30);
    v100 = 134349056;
    v101 = v94;
    LODWORD(v89) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "RayTracingTileManager,defaults wifiDownloadRateDefault,%{public}.3lf", &v100, v89);
    v80 = (char *)v79;
    sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileManager::readRayTracingDefaultsWriteConfig()", "%s\n", v79);
    if (v80 != (char *)buf)
      free(v80);
  }
  *(_QWORD *)(a1 + 200) = v94;
  *(_BYTE *)(a1 + 208) = 1;
LABEL_76:
  v93 = 0;
  sub_1001E4804(buf);
  v41 = sub_1001FD98C(*(uint64_t *)&buf[0], "RayTracingAvlDownloadRateOnCellDefaults", &v93);
  v42 = v41;
  v43 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_80;
  v44 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v45 = __ldaxr(v44);
  while (__stlxr(v45 - 1, v44));
  if (!v45)
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
    if (!v42)
      goto LABEL_87;
  }
  else
  {
LABEL_80:
    if (!v41)
      goto LABEL_87;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10219EA30);
  v46 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf[0]) = 134349056;
    *(_QWORD *)((char *)buf + 4) = v93;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "RayTracingTileManager,defaults CellDownloadRateDefault,%{public}.3lf", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10219EA30);
    v100 = 134349056;
    v101 = v93;
    LODWORD(v89) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "RayTracingTileManager,defaults CellDownloadRateDefault,%{public}.3lf", &v100, v89);
    v82 = (char *)v81;
    sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileManager::readRayTracingDefaultsWriteConfig()", "%s\n", v81);
    if (v82 != (char *)buf)
      free(v82);
  }
  *(_QWORD *)(a1 + 216) = v93;
  *(_BYTE *)(a1 + 224) = 1;
LABEL_87:
  v92 = 0.0;
  sub_1001E4804(buf);
  v47 = sub_1001FD98C(*(uint64_t *)&buf[0], "RayTracingTrialDownloadMaxRetrialAllowedDefaults", &v92);
  v48 = v47;
  v49 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_91;
  v50 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v51 = __ldaxr(v50);
  while (__stlxr(v51 - 1, v50));
  if (!v51)
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
    if (!v48)
      goto LABEL_100;
  }
  else
  {
LABEL_91:
    if (!v47)
      goto LABEL_100;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10219EA30);
  v52 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf[0]) = 134349056;
    *(double *)((char *)buf + 4) = v92;
    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_INFO, "RayTracingTileManager,defaults retrial,%{public}.3lf", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10219EA30);
    v100 = 134349056;
    v101 = *(const char **)&v92;
    LODWORD(v89) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "RayTracingTileManager,defaults retrial,%{public}.3lf", &v100, v89);
    v84 = (char *)v83;
    sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileManager::readRayTracingDefaultsWriteConfig()", "%s\n", v83);
    if (v84 != (char *)buf)
      free(v84);
  }
  v53 = v92;
  if (!*(_BYTE *)(a1 + 268))
    *(_BYTE *)(a1 + 268) = 1;
  *(_DWORD *)(a1 + 264) = v53;
LABEL_100:
  v91 = 0;
  sub_1001E4804(buf);
  v54 = sub_1001FD98C(*(uint64_t *)&buf[0], "RayTracingTileGridSizeDefaults", &v91);
  v55 = v54;
  v56 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_104;
  v57 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v58 = __ldaxr(v57);
  while (__stlxr(v58 - 1, v57));
  if (!v58)
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
    if (!v55)
      goto LABEL_111;
  }
  else
  {
LABEL_104:
    if (!v54)
      goto LABEL_111;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10219EA30);
  v59 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf[0]) = 134349056;
    *(_QWORD *)((char *)buf + 4) = v91;
    _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_INFO, "RayTracingTileManager,defaults GridSize,%{public}.3lf", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10219EA30);
    v100 = 134349056;
    v101 = v91;
    LODWORD(v89) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "RayTracingTileManager,defaults GridSize,%{public}.3lf", &v100, v89);
    v86 = (char *)v85;
    sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileManager::readRayTracingDefaultsWriteConfig()", "%s\n", v85);
    if (v86 != (char *)buf)
      free(v86);
  }
  *(_QWORD *)(a1 + 248) = v91;
  *(_BYTE *)(a1 + 256) = 1;
LABEL_111:
  v90 = 0;
  sub_1001E4804(buf);
  v60 = sub_1001FD98C(*(uint64_t *)&buf[0], "RayTracingStorageLimitDefaults", &v90);
  v61 = v60;
  v62 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_115;
  v63 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v64 = __ldaxr(v63);
  while (__stlxr(v64 - 1, v63));
  if (!v64)
  {
    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
    std::__shared_weak_count::__release_weak(v62);
    if (!v61)
      return;
  }
  else
  {
LABEL_115:
    if (!v60)
      return;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10219EA30);
  v65 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf[0]) = 134349056;
    *(_QWORD *)((char *)buf + 4) = v90;
    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_INFO, "RayTracingTileManager,defaults diskSpace,%{public}.3lf", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10219EA30);
    v100 = 134349056;
    v101 = v90;
    LODWORD(v89) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "RayTracingTileManager,defaults diskSpace,%{public}.3lf", &v100, v89);
    v88 = (char *)v87;
    sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileManager::readRayTracingDefaultsWriteConfig()", "%s\n", v87);
    if (v88 != (char *)buf)
      free(v88);
  }
  *(_QWORD *)(a1 + 232) = v90;
  *(_BYTE *)(a1 + 240) = 1;
}

void sub_1010966E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_101096724(uint64_t a1)
{
  double result;

  if (*(_BYTE *)(a1 + 176))
  {
    result = *(double *)(a1 + 168);
    *(double *)(a1 + 280) = result;
  }
  if (*(_BYTE *)(a1 + 161))
    *(_BYTE *)(a1 + 272) = *(_BYTE *)(a1 + 160);
  if (*(_BYTE *)(a1 + 165))
    *(_BYTE *)(a1 + 274) = *(_BYTE *)(a1 + 164);
  if (*(_BYTE *)(a1 + 163))
    *(_BYTE *)(a1 + 273) = *(_BYTE *)(a1 + 162);
  if (*(_BYTE *)(a1 + 192))
  {
    result = *(double *)(a1 + 184);
    *(double *)(a1 + 288) = result;
  }
  if (*(_BYTE *)(a1 + 208))
  {
    result = *(double *)(a1 + 200);
    *(double *)(a1 + 296) = result;
  }
  if (*(_BYTE *)(a1 + 224))
  {
    result = *(double *)(a1 + 216);
    *(double *)(a1 + 304) = result;
  }
  if (*(_BYTE *)(a1 + 268))
    *(_DWORD *)(a1 + 328) = *(_DWORD *)(a1 + 264);
  if (*(_BYTE *)(a1 + 256))
  {
    result = *(double *)(a1 + 248);
    *(double *)(a1 + 320) = result;
  }
  if (*(_BYTE *)(a1 + 240))
  {
    result = *(double *)(a1 + 232);
    *(double *)(a1 + 312) = result;
  }
  return result;
}

void sub_1010967C8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLRayTracingTileManager::onMobileAssetNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 112), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10219E9F0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRayTracingTileManager::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219E9F0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRayTracingTileManager::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10109A3EC(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101096980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010969A0(_QWORD *a1)
{
  NSObject *v1;
  char *v2;
  const char *v3;
  DIR *v4;
  NSFileManager *v5;
  void *v6;
  NSEnumerator *v7;
  id v8;
  void *v9;
  const std::string::value_type *v10;
  uint64_t *v11;
  int64_t v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  int v16;
  int64_t v17;
  void *v18;
  int64_t v19;
  char *v20;
  char *v21;
  NSObject *v22;
  const char *v23;
  std::string *v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  int v31;
  int v32;
  BOOL v33;
  size_t v34;
  std::string *p_buf;
  const void *v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  NSObject *v41;
  void **v42;
  void **v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  _BYTE *v47;
  NSObject *v48;
  NSObject *v49;
  void **v50;
  const char *v51;
  void **v52;
  const char *v53;
  std::string *v54;
  void **v55;
  const char *v56;
  std::string *v57;
  void **v58;
  const char *v59;
  std::string *v60;
  id v61;
  uint64_t v62;
  NSObject *v63;
  const char *v64;
  std::string *v65;
  NSObject *v66;
  void *v67;
  const char *v69;
  std::string *v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  NSEnumerator *obj;
  uint64_t v76;
  void *__p[2];
  int64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _BYTE v83[32];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  char *v90;
  size_t v91;
  unsigned __int8 v92;
  int v93;
  void **v94;
  __int16 v95;
  uint64_t v96;
  __int16 v97;
  int v98;
  __int16 v99;
  int v100;
  __int16 v101;
  int v102;
  __int16 v103;
  int v104;
  __int16 v105;
  uint64_t v106;
  __int16 v107;
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  uint64_t v112;
  __int16 v113;
  uint64_t v114;
  __int16 v115;
  uint64_t v116;
  stat v117;
  _BYTE v118[128];
  std::string buf;
  int v120;
  __int16 v121;
  int v122;
  __int16 v123;
  int v124;
  __int16 v125;
  int v126;
  __int16 v127;
  uint64_t v128;
  __int16 v129;
  uint64_t v130;
  __int16 v131;
  uint64_t v132;
  __int16 v133;
  uint64_t v134;
  __int16 v135;
  uint64_t v136;
  __int16 v137;
  uint64_t v138;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10219EA10);
  v1 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "RayTracingTileManager,getListOfRayTracingTilesOnDisk", (uint8_t *)&buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219EA10);
    LOWORD(v117.st_dev) = 0;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "RayTracingTileManager,getListOfRayTracingTilesOnDisk", &v117, 2);
    v70 = (std::string *)v69;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileManager::getListOfRayTracingTilesOnDisk()", "%s\n", v69);
    if (v70 != &buf)
      free(v70);
  }
  v2 = (char *)sub_1001FD94C();
  sub_1000B7884(v2, (uint64_t)&v90);
  if (((char)v92 & 0x80000000) == 0)
  {
    if (v92)
    {
      v3 = (const char *)&v90;
      goto LABEL_11;
    }
LABEL_155:
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219EA10);
    v63 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_INFO, "RayTracingTileManager,empty dir", (uint8_t *)&buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_170;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219EA10);
    LOWORD(v117.st_dev) = 0;
    LODWORD(v73) = 2;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "RayTracingTileManager,empty dir", &v117, v73);
    v65 = (std::string *)v64;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileManager::getListOfRayTracingTilesOnDisk()", "%s\n", v64);
    goto LABEL_183;
  }
  if (!v91)
    goto LABEL_155;
  v3 = v90;
LABEL_11:
  v4 = opendir(v3);
  if (!v4)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219EA10);
    v66 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      v67 = &v90;
      if ((v92 & 0x80u) != 0)
        v67 = v90;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v67;
      _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_ERROR, "RayTracingTileManager,can't open dir,%{public}s", (uint8_t *)&buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_170;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219EA10);
    v71 = &v90;
    if ((v92 & 0x80u) != 0)
      v71 = v90;
    v117.st_dev = 136446210;
    *(_QWORD *)&v117.st_mode = v71;
    LODWORD(v73) = 12;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "RayTracingTileManager,can't open dir,%{public}s", &v117, v73);
    v65 = (std::string *)v72;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLRayTracingTileManager::getListOfRayTracingTilesOnDisk()", "%s\n", v72);
LABEL_183:
    if (v65 != &buf)
      free(v65);
LABEL_170:
    v62 = 0;
    goto LABEL_171;
  }
  v88 = 0uLL;
  v89 = 0;
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  memset(v83, 0, sizeof(v83));
  v5 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
  if ((v92 & 0x80u) == 0)
    v6 = &v90;
  else
    v6 = v90;
  v81 = 0u;
  v82 = 0u;
  v79 = 0u;
  v80 = 0u;
  v7 = -[NSArray reverseObjectEnumerator](-[NSFileManager contentsOfDirectoryAtPath:error:](v5, "contentsOfDirectoryAtPath:error:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6), 0), "reverseObjectEnumerator");
  v8 = -[NSEnumerator countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v79, v118, 16);
  if (v8)
  {
    v76 = *(_QWORD *)v80;
    obj = v7;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v80 != v76)
          objc_enumerationMutation(obj);
        v10 = (const std::string::value_type *)objc_msgSend(*(id *)(*((_QWORD *)&v79 + 1) + 8 * (_QWORD)v9), "UTF8String");
        if (v10)
        {
          std::string::assign((std::string *)v83, v10);
          if (byte_102311C5F >= 0)
            v11 = &qword_102311C48;
          else
            v11 = (uint64_t *)qword_102311C48;
          if (byte_102311C5F >= 0)
            v12 = byte_102311C5F;
          else
            v12 = unk_102311C50;
          if (v83[23] >= 0)
            v13 = v83;
          else
            v13 = *(_BYTE **)v83;
          if (v83[23] >= 0)
            v14 = v83[23];
          else
            v14 = *(_QWORD *)&v83[8];
          if (v12)
          {
            if (v14 >= v12)
            {
              v15 = &v13[v14];
              v16 = *(char *)v11;
              v17 = v14;
              v18 = v13;
              do
              {
                v19 = v17 - v12;
                if (v19 == -1)
                  break;
                v20 = (char *)memchr(v18, v16, v19 + 1);
                if (!v20)
                  break;
                v21 = v20;
                if (!memcmp(v20, v11, v12))
                {
                  if (v21 == v15 || v21 - v13 == -1)
                    break;
                  goto LABEL_51;
                }
                v18 = v21 + 1;
                v17 = v15 - (v21 + 1);
              }
              while (v17 >= v12);
            }
          }
          else
          {
LABEL_51:
            v25 = &qword_102311C60;
            v26 = byte_102311C77;
            if (byte_102311C77 < 0)
            {
              v25 = (uint64_t *)qword_102311C60;
              v26 = unk_102311C68;
            }
            v27 = &v13[v14];
            if (v14 && v26)
            {
              v28 = v13;
              v29 = &v13[v14];
              do
              {
                if (*v28 == *(unsigned __int8 *)v25)
                {
                  v30 = 1;
                  while (v26 != v30)
                  {
                    if (&v28[v30] == v27)
                      goto LABEL_66;
                    v31 = v28[v30];
                    v32 = *((unsigned __int8 *)v25 + v30++);
                    if (v31 != v32)
                      goto LABEL_57;
                  }
                  v29 = v28;
                }
LABEL_57:
                ++v28;
              }
              while (v28 != v27);
            }
            else
            {
              v29 = &v13[v14];
            }
LABEL_66:
            v33 = v29 != v27 || v26 == 0;
            if (v33 && v29 - v13 != -1)
            {
              if ((v92 & 0x80u) == 0)
                v34 = v92;
              else
                v34 = v91;
              sub_100259584((uint64_t)&buf, v34 + 1);
              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_buf = &buf;
              else
                p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
              if (v34)
              {
                if ((v92 & 0x80u) == 0)
                  v36 = &v90;
                else
                  v36 = v90;
                memmove(p_buf, v36, v34);
              }
              *(_WORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v34) = 47;
              if (v83[23] >= 0)
                v37 = v83;
              else
                v37 = *(const std::string::value_type **)v83;
              if (v83[23] >= 0)
                v38 = v83[23];
              else
                v38 = *(_QWORD *)&v83[8];
              v39 = std::string::append(&buf, v37, v38);
              v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
              v78 = v39->__r_.__value_.__r.__words[2];
              *(_OWORD *)__p = v40;
              v39->__r_.__value_.__l.__size_ = 0;
              v39->__r_.__value_.__r.__words[2] = 0;
              v39->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                operator delete(buf.__r_.__value_.__l.__data_);
              if (qword_1022A0040 != -1)
                dispatch_once(&qword_1022A0040, &stru_10219EA10);
              v41 = qword_1022A0048;
              if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
              {
                v42 = __p;
                if (v78 < 0)
                  v42 = (void **)__p[0];
                LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v42;
                _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "RayTracingTileManager,fileOnDisk,%{public}s", (uint8_t *)&buf, 0xCu);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(&buf, 0x65CuLL);
                if (qword_1022A0040 != -1)
                  dispatch_once(&qword_1022A0040, &stru_10219EA10);
                v52 = __p;
                if (v78 < 0)
                  v52 = (void **)__p[0];
                v117.st_dev = 136446210;
                *(_QWORD *)&v117.st_mode = v52;
                LODWORD(v73) = 12;
                _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "RayTracingTileManager,fileOnDisk,%{public}s", &v117, v73);
                v54 = (std::string *)v53;
                sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileManager::getListOfRayTracingTilesOnDisk()", "%s\n", v53);
                if (v54 != &buf)
                  free(v54);
              }
              if (v78 >= 0)
                v43 = __p;
              else
                v43 = (void **)__p[0];
              v44 = stat((const char *)v43, &v117);
              if ((_DWORD)v44 == -1)
              {
                if (qword_1022A0040 != -1)
                  dispatch_once(&qword_1022A0040, &stru_10219EA10);
                v49 = qword_1022A0048;
                if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
                {
                  v50 = __p;
                  if (v78 < 0)
                    v50 = (void **)__p[0];
                  LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
                  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v50;
                  _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "RayTracingTileManager,fileOnDisk,%{public}s,stat error", (uint8_t *)&buf, 0xCu);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(&buf, 0x65CuLL);
                  if (qword_1022A0040 != -1)
                    dispatch_once(&qword_1022A0040, &stru_10219EA10);
                  v58 = __p;
                  if (v78 < 0)
                    v58 = (void **)__p[0];
                  v93 = 136446210;
                  v94 = v58;
                  LODWORD(v73) = 12;
                  _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "RayTracingTileManager,fileOnDisk,%{public}s,stat error", &v93, v73);
                  v60 = (std::string *)v59;
                  sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileManager::getListOfRayTracingTilesOnDisk()", "%s\n", v59);
                  if (v60 != &buf)
                    free(v60);
                }
              }
              else
              {
                sub_10109851C(v44, (const std::string *)v83, (unint64_t *)&v83[24]);
                v45 = a1[16];
                if (v45)
                  sub_10052E200(v45, (uint64_t)__p, (uint64_t)v83);
                LODWORD(v84) = v117.st_size;
                *(_QWORD *)&v85 = sub_100110314(&v117.st_ctimespec.tv_sec);
                *(_QWORD *)&v86 = sub_100110314(&v117.st_atimespec.tv_sec);
                if (qword_1022A0040 != -1)
                  dispatch_once(&qword_1022A0040, &stru_10219EA10);
                v46 = qword_1022A0048;
                if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
                {
                  v47 = v83;
                  if (v83[23] < 0)
                    v47 = *(_BYTE **)v83;
                  LODWORD(buf.__r_.__value_.__l.__data_) = 136449027;
                  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v47;
                  WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
                  *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = *(_QWORD *)&v83[24];
                  HIWORD(buf.__r_.__value_.__r.__words[2]) = 1026;
                  v120 = v84;
                  v121 = 1026;
                  v122 = DWORD1(v84);
                  v123 = 1026;
                  v124 = HIDWORD(v84);
                  v125 = 1026;
                  v126 = DWORD2(v84);
                  v127 = 2049;
                  v128 = v87;
                  v129 = 2049;
                  v130 = v87;
                  v131 = 2050;
                  v132 = *((_QWORD *)&v86 + 1);
                  v133 = 2050;
                  v134 = v85;
                  v135 = 2050;
                  v136 = *((_QWORD *)&v85 + 1);
                  v137 = 2050;
                  v138 = v86;
                  _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "RayTracingTileManager,fileName,%{public}s,tileIndex,%{public}llu,fileSize,%{public}u,fileVersion,%{public}d,fileIODBasedOnTileFile,%{public}d,fileIODBasedOnAvlFile,%{public}d,minLat,%{private}.3lf,minLon,%{private}.3lf,expirationAge,%{public}.3lf,downloadTimeStamp_s,%{public}.3lf,creationTimeStamp_s,%{public}.3lf,lastAccessTimeStamp_s,%{public}.3lf", (uint8_t *)&buf, 0x6Au);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(&buf, 0x65CuLL);
                  if (qword_1022A0040 != -1)
                    dispatch_once(&qword_1022A0040, &stru_10219EA10);
                  v55 = (void **)v83;
                  if (v83[23] < 0)
                    v55 = *(void ***)v83;
                  v93 = 136449027;
                  v94 = v55;
                  v95 = 2050;
                  v96 = *(_QWORD *)&v83[24];
                  v97 = 1026;
                  v98 = v84;
                  v99 = 1026;
                  v100 = DWORD1(v84);
                  v101 = 1026;
                  v102 = HIDWORD(v84);
                  v103 = 1026;
                  v104 = DWORD2(v84);
                  v105 = 2049;
                  v106 = v87;
                  v107 = 2049;
                  v108 = v87;
                  v109 = 2050;
                  v110 = *((_QWORD *)&v86 + 1);
                  v111 = 2050;
                  v112 = v85;
                  v113 = 2050;
                  v114 = *((_QWORD *)&v85 + 1);
                  v115 = 2050;
                  v116 = v86;
                  LODWORD(v73) = 106;
                  _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "RayTracingTileManager,fileName,%{public}s,tileIndex,%{public}llu,fileSize,%{public}u,fileVersion,%{public}d,fileIODBasedOnTileFile,%{public}d,fileIODBasedOnAvlFile,%{public}d,minLat,%{private}.3lf,minLon,%{private}.3lf,expirationAge,%{public}.3lf,downloadTimeStamp_s,%{public}.3lf,creationTimeStamp_s,%{public}.3lf,lastAccessTimeStamp_s,%{public}.3lf", &v93, v73);
                  v57 = (std::string *)v56;
                  sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileManager::getListOfRayTracingTilesOnDisk()", "%s\n", v56);
                  if (v57 != &buf)
                    free(v57);
                }
                sub_10109B9E8((uint64_t *)&v88, (__int128 *)v83);
              }
              if (SHIBYTE(v78) < 0)
                operator delete(__p[0]);
              goto LABEL_117;
            }
          }
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10219EA10);
          v48 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "RayTracingTileManager,not a RayTracing file", (uint8_t *)&buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_10219EA10);
            LOWORD(v117.st_dev) = 0;
            LODWORD(v73) = 2;
            _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "RayTracingTileManager,not a RayTracing file", &v117, v73);
            v24 = (std::string *)v51;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileManager::getListOfRayTracingTilesOnDisk()", "%s\n", v51);
LABEL_131:
            if (v24 != &buf)
              free(v24);
          }
        }
        else
        {
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10219EA10);
          v22 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "RayTracingTileManager,null file", (uint8_t *)&buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_10219EA10);
            LOWORD(v117.st_dev) = 0;
            LODWORD(v73) = 2;
            _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "RayTracingTileManager,null file", &v117, v73);
            v24 = (std::string *)v23;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileManager::getListOfRayTracingTilesOnDisk()", "%s\n", v23);
            goto LABEL_131;
          }
        }
LABEL_117:
        v9 = (char *)v9 + 1;
      }
      while (v9 != v8);
      v61 = -[NSEnumerator countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v79, v118, 16);
      v8 = v61;
    }
    while (v61);
  }
  closedir(v4);
  sub_10109EC6C(a1 + 17);
  *(_OWORD *)(a1 + 17) = v88;
  a1[19] = v89;
  v89 = 0;
  v88 = 0uLL;
  if ((v83[23] & 0x80000000) != 0)
    operator delete(*(void **)v83);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
  sub_10109DAB0((void ***)&buf);
  v62 = 1;
LABEL_171:
  if ((char)v92 < 0)
    operator delete(v90);
  return v62;
}

void sub_101097A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a55 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_101097AC8(uint64_t a1)
{
  NSObject *v2;
  double v3;
  int v4;
  double Current;
  NSObject *v6;
  unint64_t v7;
  uint64_t v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t k;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t j;
  uint64_t v26;
  const char *v27;
  uint8_t *v28;
  uint64_t v29;
  const char *v30;
  uint8_t *v31;
  uint64_t v32;
  const char *v33;
  uint8_t *v34;
  NSObject *v35;
  unint64_t v36;
  NSObject *v37;
  unint64_t v38;
  const char *v39;
  uint8_t *v40;
  unint64_t v41;
  const char *v42;
  uint8_t *v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  uint8_t buf[4];
  _QWORD v48[203];

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10219EA10);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    LODWORD(v48[0]) = 0;
    WORD2(v48[0]) = 2082;
    *(_QWORD *)((char *)v48 + 6) = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,cleanupRayTracingTiles\"}", buf, 0x12u);
  }
  if (*(_QWORD *)(a1 + 144) == *(_QWORD *)(a1 + 136))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219EA10);
    v37 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      LODWORD(v48[0]) = 0;
      WORD2(v48[0]) = 2082;
      *(_QWORD *)((char *)v48 + 6) = "";
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,cleanupRayTracingTiles no files\"}", buf, 0x12u);
    }
  }
  else
  {
    v3 = *(double *)(a1 + 288);
    v4 = *(unsigned __int8 *)(a1 + 273);
    Current = CFAbsoluteTimeGetCurrent();
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219EA10);
    v6 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 5);
      *(_DWORD *)buf = 134349056;
      v48[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLRayTracingTileManager,cleanupRayTracingTiles,%{public}lu", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10219EA10);
      v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 5);
      v45 = 134349056;
      v46 = v38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "CLRayTracingTileManager,cleanupRayTracingTiles,%{public}lu", &v45, 12);
      v40 = (uint8_t *)v39;
      sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileManager::cleanupRayTracingTiles()", "%s\n", v39);
      if (v40 != buf)
        free(v40);
    }
    v8 = *(_QWORD *)(a1 + 136);
    while (v8 != *(_QWORD *)(a1 + 144))
    {
      v9 = *(double *)(a1 + 280);
      if (v9 >= *(double *)(v8 + 72))
        v9 = *(double *)(v8 + 72);
      if (v4 && *(double *)(v8 + 48) < v3)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10219EA10);
        v10 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          v11 = v8;
          if (*(char *)(v8 + 23) < 0)
            v11 = *(_QWORD *)v8;
          *(_DWORD *)buf = 136446210;
          v48[0] = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CLRayTracingTileManager,cleanupRayTracingTiles,delete Flush,%{public}s", buf, 0xCu);
        }
        v12 = sub_1001BFF7C(115, 2);
        if ((_DWORD)v12)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10219EA10);
          v29 = v8;
          if (*(char *)(v8 + 23) < 0)
            v29 = *(_QWORD *)v8;
          v45 = 136446210;
          v46 = v29;
          LODWORD(v44) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "CLRayTracingTileManager,cleanupRayTracingTiles,delete Flush,%{public}s", &v45, v44);
          v31 = (uint8_t *)v30;
          v12 = sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileManager::cleanupRayTracingTiles()", "%s\n", v30);
          if (v31 != buf)
            free(v31);
        }
        if (sub_101098B10(v12, v8))
        {
          sub_10109DD00((uint64_t)buf, (__int128 *)(v8 + 96), *(__int128 **)(a1 + 144), v8);
          v14 = v13;
          for (i = *(_QWORD *)(a1 + 144); i != v14; i -= 96)
          {
            if (*(char *)(i - 73) < 0)
              operator delete(*(void **)(i - 96));
          }
LABEL_58:
          *(_QWORD *)(a1 + 144) = v14;
          continue;
        }
      }
      else if (v9 + *(double *)(v8 + 56) >= Current)
      {
        if (*(_DWORD *)(v8 + 44) < *(_DWORD *)(v8 + 40))
        {
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10219EA10);
          v21 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
          {
            v22 = v8;
            if (*(char *)(v8 + 23) < 0)
              v22 = *(_QWORD *)v8;
            *(_DWORD *)buf = 136446210;
            v48[0] = v22;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "CLRayTracingTileManager,cleanupRayTracingTiles,delete Iod,%{public}s", buf, 0xCu);
          }
          v23 = sub_1001BFF7C(115, 2);
          if ((_DWORD)v23)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_10219EA10);
            v32 = v8;
            if (*(char *)(v8 + 23) < 0)
              v32 = *(_QWORD *)v8;
            v45 = 136446210;
            v46 = v32;
            LODWORD(v44) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "CLRayTracingTileManager,cleanupRayTracingTiles,delete Iod,%{public}s", &v45, v44);
            v34 = (uint8_t *)v33;
            v23 = sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileManager::cleanupRayTracingTiles()", "%s\n", v33);
            if (v34 != buf)
              free(v34);
          }
          if (sub_101098B10(v23, v8))
          {
            sub_10109DD00((uint64_t)buf, (__int128 *)(v8 + 96), *(__int128 **)(a1 + 144), v8);
            v14 = v24;
            for (j = *(_QWORD *)(a1 + 144); j != v14; j -= 96)
            {
              if (*(char *)(j - 73) < 0)
                operator delete(*(void **)(j - 96));
            }
            goto LABEL_58;
          }
        }
      }
      else
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10219EA10);
        v16 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          v17 = v8;
          if (*(char *)(v8 + 23) < 0)
            v17 = *(_QWORD *)v8;
          *(_DWORD *)buf = 136446210;
          v48[0] = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "CLRayTracingTileManager,cleanupRayTracingTiles,delete ExpAge,%{public}s", buf, 0xCu);
        }
        v18 = sub_1001BFF7C(115, 2);
        if ((_DWORD)v18)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10219EA10);
          v26 = v8;
          if (*(char *)(v8 + 23) < 0)
            v26 = *(_QWORD *)v8;
          v45 = 136446210;
          v46 = v26;
          LODWORD(v44) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "CLRayTracingTileManager,cleanupRayTracingTiles,delete ExpAge,%{public}s", &v45, v44);
          v28 = (uint8_t *)v27;
          v18 = sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileManager::cleanupRayTracingTiles()", "%s\n", v27);
          if (v28 != buf)
            free(v28);
        }
        if (sub_101098B10(v18, v8))
        {
          sub_10109DD00((uint64_t)buf, (__int128 *)(v8 + 96), *(__int128 **)(a1 + 144), v8);
          v14 = v19;
          for (k = *(_QWORD *)(a1 + 144); k != v14; k -= 96)
          {
            if (*(char *)(k - 73) < 0)
              operator delete(*(void **)(k - 96));
          }
          goto LABEL_58;
        }
      }
      v8 += 96;
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219EA10);
    v35 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 5);
      *(_DWORD *)buf = 134349056;
      v48[0] = v36;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "CLRayTracingTileManager,cleanupRayTracingTiles,%{public}lu", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10219EA10);
      v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 5);
      v45 = 134349056;
      v46 = v41;
      LODWORD(v44) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "CLRayTracingTileManager,cleanupRayTracingTiles,%{public}lu", &v45, v44);
      v43 = (uint8_t *)v42;
      sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileManager::cleanupRayTracingTiles()", "%s\n", v42);
      if (v43 != buf)
        free(v43);
    }
    sub_101098D54(a1);
  }
}

uint64_t sub_1010984A8(uint64_t a1)
{
  *(_QWORD *)a1 = off_10219EA60;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_10109851C(uint64_t a1, const std::string *a2, unint64_t *a3)
{
  uint64_t *v5;
  NSObject *v6;
  char *v7;
  std::string::size_type v8;
  uint64_t *v9;
  int64_t v10;
  char *size;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  int64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  void *v22;
  char *v23;
  char *v24;
  int v25;
  void *v26;
  char *v27;
  char *v28;
  std::string *v29;
  NSObject *v30;
  unint64_t v31;
  NSObject *v32;
  unint64_t v33;
  const std::string *v34;
  unint64_t v35;
  const std::string *v36;
  const char *v37;
  uint8_t *v38;
  NSObject *v39;
  const char *v40;
  char *__endptr;
  std::string v42;
  int v43;
  unint64_t v44;
  __int16 v45;
  const std::string *v46;
  uint8_t buf[4];
  _BYTE v48[18];

  v5 = &qword_1022A0000;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10219EA10);
  v6 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)v48 = 0;
    *(_WORD *)&v48[4] = 2082;
    *(_QWORD *)&v48[6] = "";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,getTileIdFromFilePath\"}", buf, 0x12u);
  }
  v7 = (char *)HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((char)v7 >= 0)
    v8 = (std::string::size_type)a2;
  else
    v8 = a2->__r_.__value_.__r.__words[0];
  if (byte_102311C5F >= 0)
    v9 = &qword_102311C48;
  else
    v9 = (uint64_t *)qword_102311C48;
  if (byte_102311C5F >= 0)
    v10 = byte_102311C5F;
  else
    v10 = unk_102311C50;
  if (v10)
  {
    if ((char)v7 >= 0)
      size = (char *)HIBYTE(a2->__r_.__value_.__r.__words[2]);
    else
      size = (char *)a2->__r_.__value_.__l.__size_;
    v12 = &size[v8];
    if ((uint64_t)size >= v10)
    {
      v21 = *(char *)v9;
      v22 = (void *)v8;
      do
      {
        v23 = &size[-v10];
        if (v23 == (char *)-1)
          break;
        v24 = (char *)memchr(v22, v21, (size_t)(v23 + 1));
        if (!v24)
          break;
        v13 = v24;
        if (!memcmp(v24, v9, v10))
          goto LABEL_20;
        v22 = v13 + 1;
        size = (char *)(v12 - (v13 + 1));
      }
      while ((uint64_t)size >= v10);
    }
    v13 = v12;
LABEL_20:
    if (v13 == v12)
      v14 = -1;
    else
      v14 = (uint64_t)&v13[-v8];
    v5 = &qword_1022A0000;
  }
  else
  {
    v14 = 0;
  }
  if (byte_102311C77 >= 0)
    v15 = &qword_102311C60;
  else
    v15 = (uint64_t *)qword_102311C60;
  if (byte_102311C77 >= 0)
    v16 = byte_102311C77;
  else
    v16 = unk_102311C68;
  if (v16)
  {
    if ((char)v7 >= 0)
      v17 = v7;
    else
      v17 = (char *)a2->__r_.__value_.__l.__size_;
    v18 = &v17[v8];
    if ((uint64_t)v17 >= v16)
    {
      v25 = *(char *)v15;
      v26 = (void *)v8;
      do
      {
        v27 = &v17[-v16];
        if (v27 == (char *)-1)
          break;
        v28 = (char *)memchr(v26, v25, (size_t)(v27 + 1));
        if (!v28)
          break;
        v19 = v28;
        if (!memcmp(v28, v15, v16))
          goto LABEL_50;
        v26 = v19 + 1;
        v17 = (char *)(v18 - (v19 + 1));
      }
      while ((uint64_t)v17 >= v16);
      v19 = v18;
LABEL_50:
      v5 = &qword_1022A0000;
    }
    else
    {
      v19 = &v17[v8];
    }
    v20 = (uint64_t)&v19[-v8];
    if (v19 == v18)
      v20 = -1;
  }
  else
  {
    v20 = 0;
  }
  if (v14 != -1 && v20 != -1)
  {
    std::string::basic_string(&v42, a2, v14 + v10, v20 - (v14 + v10), (std::allocator<char> *)buf);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v42.__r_.__value_.__l.__size_)
      {
        __endptr = 0;
        v29 = (std::string *)v42.__r_.__value_.__r.__words[0];
        goto LABEL_64;
      }
    }
    else if (*((_BYTE *)&v42.__r_.__value_.__s + 23))
    {
      __endptr = 0;
      v29 = &v42;
LABEL_64:
      v31 = strtoull((const char *)v29, &__endptr, 10);
      if (__endptr)
      {
        *a3 = v31;
        if (v5[8] != -1)
          dispatch_once(&qword_1022A0040, &stru_10219EA10);
        v32 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          v33 = *a3;
          if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v34 = a2;
          else
            v34 = (const std::string *)a2->__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 134218242;
          *(_QWORD *)v48 = v33;
          *(_WORD *)&v48[8] = 2080;
          *(_QWORD *)&v48[10] = v34;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "CLRayTracingTileManager,getTileIdFromFilePath,tileId,%llu,fileName,%s", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (v5[8] != -1)
            dispatch_once(&qword_1022A0040, &stru_10219EA10);
          v35 = *a3;
          if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v36 = a2;
          else
            v36 = (const std::string *)a2->__r_.__value_.__r.__words[0];
          v43 = 134218242;
          v44 = v35;
          v45 = 2080;
          v46 = v36;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "CLRayTracingTileManager,getTileIdFromFilePath,tileId,%llu,fileName,%s", &v43, 22);
          v38 = (uint8_t *)v37;
          sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileManager::getTileIdFromFilePath(const std::string &, uint64_t &)", "%s\n", v37);
          if (v38 != buf)
            free(v38);
        }
        goto LABEL_89;
      }
      if (v5[8] != -1)
        dispatch_once(&qword_1022A0040, &stru_10219EA10);
      v39 = qword_1022A0048;
      if (!os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        goto LABEL_89;
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)v48 = 0;
      *(_WORD *)&v48[4] = 2082;
      *(_QWORD *)&v48[6] = "";
      v40 = "{\"msg%{public}.0s\":\"CLRayTracingTileManager,getTileIdFromFilePath,strtoull error\"}";
LABEL_88:
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, v40, buf, 0x12u);
LABEL_89:
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      return;
    }
    if (v5[8] != -1)
      dispatch_once(&qword_1022A0040, &stru_10219EA10);
    v39 = qword_1022A0048;
    if (!os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      goto LABEL_89;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)v48 = 0;
    *(_WORD *)&v48[4] = 2082;
    *(_QWORD *)&v48[6] = "";
    v40 = "{\"msg%{public}.0s\":\"CLRayTracingTileManager,getTileIdFromFilePath,invalid Filename sub-string\"}";
    goto LABEL_88;
  }
  if (v5[8] != -1)
    dispatch_once(&qword_1022A0040, &stru_10219EA10);
  v30 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)v48 = 0;
    *(_WORD *)&v48[4] = 2082;
    *(_QWORD *)&v48[6] = "";
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,getTileIdFromFilePath,invalid Filename\"}", buf, 0x12u);
  }
}

void sub_101098AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_101098B10(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  char *v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  const char *v11;
  _BOOL8 v12;
  NSObject *v13;
  std::string v15;
  _BYTE buf[24];

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10219EA10);
  v3 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,deleteRayTracingFile\"}", buf, 0x12u);
  }
  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = (char *)sub_1001FD94C();
    sub_1000B7884(v5, (uint64_t)&v15);
    v6 = *(char *)(a2 + 23);
    if (v6 >= 0)
      v7 = (const std::string::value_type *)a2;
    else
      v7 = *(const std::string::value_type **)a2;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a2 + 23);
    else
      v8 = *(_QWORD *)(a2 + 8);
    v9 = std::string::append(&v15, v7, v8);
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    *(_QWORD *)&buf[16] = *((_QWORD *)&v9->__r_.__value_.__l + 2);
    *(_OWORD *)buf = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    if (buf[23] >= 0)
      v11 = buf;
    else
      v11 = *(const char **)buf;
    v12 = !sub_100512FA8(v11);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219EA10);
    v13 = qword_1022A0048;
    v12 = 0;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,deleteRayTracingFileOrFiles no files\"}", buf, 0x12u);
      return 0;
    }
  }
  return v12;
}

void sub_101098D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101098D54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  unint64_t v6;
  unint64_t v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[2];
  __int16 v12;
  unint64_t v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  unint64_t v17;

  v2 = *(_QWORD *)(a1 + 136);
  v3 = *(_QWORD *)(a1 + 144);
  if (v2 == v3)
  {
    v4 = 0;
  }
  else
  {
    LODWORD(v4) = 0;
    do
    {
      v4 = (*(_DWORD *)(v2 + 32) + v4);
      v2 += 96;
    }
    while (v2 != v3);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10219EA10);
  v5 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 5);
    *(_DWORD *)buf = 67240448;
    v15 = v4;
    v16 = 2050;
    v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "RayTracingTileManager,getTotalSizeOfAllRayTracingTilesOnDisk,%{public}u,numberOfFileOnDisk,%{public}zu", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219EA10);
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 5);
    v11[0] = 67240448;
    v11[1] = v4;
    v12 = 2050;
    v13 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "RayTracingTileManager,getTotalSizeOfAllRayTracingTilesOnDisk,%{public}u,numberOfFileOnDisk,%{public}zu", v11, 18);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "uint32_t CLRayTracingTileManager::getTotalSizeOfAllRayTracingTilesOnDisk()", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  return v4;
}

void sub_101098F74()
{
  operator new();
}

void sub_101098FBC()
{
  operator delete();
}

void sub_101098FE0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10219EA10);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289026;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,shutdown\"}", (uint8_t *)v5, 0x12u);
  }
  v3 = *(_QWORD *)(a1 + 120);
  if (v3)
    sub_100791910(v3);
  v4 = *(_QWORD *)(a1 + 368);
  if (v4)
  {
    objc_msgSend(*(id *)(v4 + 16), "unregister:forNotification:", *(_QWORD *)(v4 + 8), 6);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 368) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 368) + 8), 8);
  }
}

uint64_t sub_1010990E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v6;

  *(_QWORD *)a1 = off_10219E898;
  sub_101098FE0(a1);
  v2 = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 376) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 368);
  *(_QWORD *)(a1 + 368) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_10109DB3C((uint64_t *)(a1 + 360), 0);
  v6 = (void **)(a1 + 136);
  sub_10109DAB0(&v6);
  v4 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v4)
    operator delete();
  sub_10109D9A4((uint64_t *)(a1 + 120), 0);
  return sub_1010984A8(a1);
}

void sub_1010991A0(uint64_t a1)
{
  sub_1010990E8(a1);
  operator delete();
}

void sub_1010991C4(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  NSObject *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  uint8_t buf[20];
  _BYTE __p[20];
  _OWORD v18[2];
  char v19;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10219EA10);
  v8 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
    v10 = *(_QWORD *)(a1 + 336);
    v11 = *(_QWORD *)(a1 + 344);
    v12 = *(_DWORD *)(a1 + 352);
    *(_DWORD *)buf = 68290563;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)__p = v9;
    *(_WORD *)&__p[8] = 1026;
    *(_DWORD *)&__p[10] = a3;
    *(_WORD *)&__p[14] = 1026;
    *(_DWORD *)&__p[16] = a4 ^ 1;
    LOWORD(v18[0]) = 2049;
    *(_QWORD *)((char *)v18 + 2) = v10;
    WORD5(v18[0]) = 2049;
    *(_QWORD *)((char *)v18 + 12) = v11;
    WORD2(v18[1]) = 1026;
    *(_DWORD *)((char *)&v18[1] + 6) = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,kNotificationTilesProvided\", \"numberOfTileFiles\":%{public}ld, \"responseCode\":%{public}d, \"requestComplete\":%{public}hhd, \"requestLat\":\"%{private}f\", \"requestLon\":\"%{private}f\", \"numTilesRequested\":%{public}d}", buf, 0x42u);
  }
  memset(buf, 0, sizeof(buf));
  __p[0] = 2;
  *(_OWORD *)&__p[4] = 0u;
  memset(v18, 0, sizeof(v18));
  v19 = 1;
  if (*a2 != a2[1])
  {
    sub_100385A64((uint64_t *)v18 + 1);
    *(_OWORD *)((char *)v18 + 8) = *(_OWORD *)a2;
    *((_QWORD *)&v18[1] + 1) = a2[2];
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
  }
  v13 = (char *)sub_1001FD94C();
  sub_1000B7884(v13, (uint64_t)&v14);
  if (SBYTE7(v18[0]) < 0)
    operator delete(*(void **)&__p[4]);
  *(_OWORD *)&__p[4] = v14;
  *(_QWORD *)&v18[0] = v15;
  __p[0] = a3;
  v19 = a4 ^ 1;
  *(_OWORD *)buf = *(_OWORD *)(a1 + 336);
  *(_DWORD *)&buf[16] = *(_DWORD *)(a1 + 352);
  if ((a4 & 1) == 0)
    *(_BYTE *)(a1 + 356) = 0;
  LODWORD(v14) = 0;
  (*(void (**)(uint64_t, __int128 *, uint8_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v14, buf, 0, 0xFFFFFFFFLL, 0);
  *(_QWORD *)&v14 = (char *)v18 + 8;
  sub_100259608((void ***)&v14);
  if (SBYTE7(v18[0]) < 0)
    operator delete(*(void **)&__p[4]);
}

void sub_101099410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_101099428((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101099428(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 48);
  sub_100259608(&v3);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_101099470(uint64_t a1, int a2, double a3, double a4)
{
  NSObject *v8;
  NSObject *v9;
  int v10;
  double v11;
  NSObject *v12;
  uint64_t v13;
  BOOL v14;
  NSObject *v16;
  unint64_t v17;
  _BOOL4 v18;
  NSObject *v19;
  void *__p[2];
  unsigned __int8 v21;
  uint64_t v22;
  void *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  uint8_t buf[8];
  _BYTE v32[20];
  __int16 v33;
  double v34;
  __int16 v35;
  int v36;

  v29 = a4;
  v30 = a3;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10219EA10);
  v8 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v32 = 2082;
    *(_QWORD *)&v32[2] = "";
    *(_WORD *)&v32[10] = 2049;
    *(double *)&v32[12] = a3;
    v33 = 2049;
    v34 = a4;
    v35 = 1026;
    v36 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,getOnDemandTiles\", \"lat\":\"%{private}f\", \"lon\":\"%{private}f\", \"tileBoundarySizeAroundCurrentTile\":%{public}d}", buf, 0x2Cu);
  }
  v26 = 0;
  v27 = 0;
  v28 = 0;
  if (*(_BYTE *)(a1 + 356))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219EA10);
    v9 = qword_1022A0048;
    v10 = 1;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v32 = 2082;
      *(_QWORD *)&v32[2] = "";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,getTiles,request already in progress\"}", buf, 0x12u);
    }
LABEL_16:
    sub_1010991C4(a1, &v26, v10, 0);
    goto LABEL_17;
  }
  v11 = v29;
  *(double *)(a1 + 336) = v30;
  *(double *)(a1 + 344) = v11;
  *(_DWORD *)(a1 + 352) = a2;
  if ((a2 - 4) <= 0xFFFFFFFC)
  {
    *(_DWORD *)(a1 + 352) = 0;
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219EA10);
    v12 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v32 = 2082;
      *(_QWORD *)&v32[2] = "";
      *(_WORD *)&v32[10] = 1026;
      *(_DWORD *)&v32[12] = a2;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,getTiles,invalid number of tiles requested\", \"tileBoundarySizeAroundCurrentTile\":%{public}d}", buf, 0x18u);
    }
    v10 = 2;
    goto LABEL_16;
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v22 = 0;
  v13 = *(_QWORD *)(a1 + 360);
  *(_DWORD *)buf = a2;
  v14 = sub_100A4D080(v13, &v30, &v29, (unsigned int *)buf, &v22, (char *)&v23);
  if (v23 != v24 && v14)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219EA10);
    v16 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v32 = 2082;
      *(_QWORD *)&v32[2] = "";
      *(_WORD *)&v32[10] = 2050;
      *(_QWORD *)&v32[12] = (v24 - (_BYTE *)v23) >> 4;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,isRayTracingTileAvailable success\", \"AvailabilityMgrTileListSize\":%{public}ld}", buf, 0x1Cu);
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)v32 = 0;
    *(_QWORD *)&v32[8] = 0;
    sub_101099994(a1, (uint64_t *)&v23, &v26, (uint64_t *)buf, v22);
    *(_BYTE *)(a1 + 356) = 1;
    sub_100A4DDA8(*(char **)(a1 + 360), (uint64_t)__p);
    if (v26 == v27)
    {
      v18 = 0;
    }
    else
    {
      v17 = v21;
      if ((v21 & 0x80u) != 0)
        v17 = (unint64_t)__p[1];
      v18 = v17 != 0;
    }
    if (*(_QWORD *)buf != *(_QWORD *)v32)
      sub_1010991C4(a1, buf, 0, v18);
    if (v18)
      sub_100791568(*(_QWORD *)(a1 + 120), (uint64_t)&v26, (__int128 *)__p);
    if ((char)v21 < 0)
      operator delete(__p[0]);
    __p[0] = buf;
    sub_100259608((void ***)__p);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219EA10);
    v19 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v32 = 2082;
      *(_QWORD *)&v32[2] = "";
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,getTiles,no tiles according to availability file\"}", buf, 0x12u);
    }
    sub_1010991C4(a1, &v26, 2, 0);
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
LABEL_17:
  *(_QWORD *)buf = &v26;
  sub_100259608((void ***)buf);
}

void sub_101099928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char *a24)
{
  if (__p)
    operator delete(__p);
  a24 = &a19;
  sub_100259608((void ***)&a24);
  _Unwind_Resume(a1);
}

void sub_101099994(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  char v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  char *v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  void **v18;
  NSObject *v19;
  void **v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  NSObject *v26;
  void **v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  __int128 v46;
  std::string::size_type v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  NSObject *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  std::string::size_type v60;
  void *__p;
  void *v63[2];
  int64_t v64;
  std::string v65;
  _DWORD v66[3];
  stat v67;
  uint64_t v68;
  _BYTE v69[32];

  v6 = *a2;
  v7 = a2[1];
  if (v7 == *a2)
  {
    sub_100259648(a3);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219EA10);
    v51 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v67.st_dev = 68289026;
      *(_DWORD *)&v67.st_mode = 0;
      LOWORD(v67.st_ino) = 2082;
      *(__darwin_ino64_t *)((char *)&v67.st_ino + 2) = (__darwin_ino64_t)"";
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,tilesToDownload,no new tiles to download\"}", (uint8_t *)&v67, 0x12u);
    }
  }
  else
  {
    __p = 0;
    v10 = 0;
    memset(v66, 0, 11);
    v58 = (uint64_t)(a4 + 2);
    v59 = (uint64_t)(a3 + 2);
    v60 = 0;
    do
    {
      sub_1015A2E04(&v65, "rt_tile_");
      std::to_string((std::string *)&v68, *(_QWORD *)v6);
      if (v69[15] >= 0)
        v11 = (const std::string::value_type *)&v68;
      else
        v11 = (const std::string::value_type *)v68;
      if (v69[15] >= 0)
        v12 = v69[15];
      else
        v12 = *(_QWORD *)v69;
      std::string::append(&v65, v11, v12);
      if ((v69[15] & 0x80000000) != 0)
        operator delete((void *)v68);
      std::string::append(&v65, ".bin");
      v13 = (char *)sub_1001FD94C();
      sub_1000B7884(v13, (uint64_t)&v68);
      if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v65;
      else
        v14 = (std::string *)v65.__r_.__value_.__r.__words[0];
      if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v65.__r_.__value_.__r.__words[2]);
      else
        size = v65.__r_.__value_.__l.__size_;
      v16 = std::string::append((std::string *)&v68, (const std::string::value_type *)v14, size);
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v64 = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)v63 = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if ((v69[15] & 0x80000000) != 0)
        operator delete((void *)v68);
      if (v64 >= 0)
        v18 = v63;
      else
        v18 = (void **)v63[0];
      if (stat((const char *)v18, &v67) != -1
        && sub_10052E348(*(_QWORD *)(a1 + 128), (uint64_t)v63, v66)
        && v66[0] == *(_DWORD *)(v6 + 8))
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10219EA10);
        v19 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          if (v64 >= 0)
            v20 = v63;
          else
            v20 = (void **)v63[0];
          v21 = *(_DWORD *)(v6 + 8);
          v68 = 68289794;
          *(_WORD *)v69 = 2082;
          *(_QWORD *)&v69[2] = "";
          *(_WORD *)&v69[10] = 2082;
          *(_QWORD *)&v69[12] = v20;
          *(_WORD *)&v69[20] = 1026;
          *(_DWORD *)&v69[22] = v66[0];
          *(_WORD *)&v69[26] = 1026;
          *(_DWORD *)&v69[28] = v21;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,tilesToDownload,no need to download\", \"alreadyExistingTile\":%{public, location:escape_only}s, \"tileIod\":%{public}u, \"fTile_content_iod_number\":%{public}u}", (uint8_t *)&v68, 0x28u);
        }
        v22 = a4[1];
        v23 = a4[2];
        if (v22 >= v23)
        {
          v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a4) >> 3);
          v41 = v40 + 1;
          if (v40 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_98:
            sub_100259694();
          v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a4) >> 3);
          if (2 * v42 > v41)
            v41 = 2 * v42;
          if (v42 >= 0x555555555555555)
            v43 = 0xAAAAAAAAAAAAAAALL;
          else
            v43 = v41;
          *(_QWORD *)&v69[24] = v58;
          if (v43)
            v44 = (char *)sub_1002596A8(v58, v43);
          else
            v44 = 0;
          v45 = &v44[24 * v40];
          v68 = (uint64_t)v44;
          *(_QWORD *)v69 = v45;
          *(_QWORD *)&v69[16] = &v44[24 * v43];
          v46 = *(_OWORD *)&v65.__r_.__value_.__l.__data_;
          *((_QWORD *)v45 + 2) = *((_QWORD *)&v65.__r_.__value_.__l + 2);
          *(_OWORD *)v45 = v46;
          memset(&v65, 0, sizeof(v65));
          *(_QWORD *)&v69[8] = v45 + 24;
          sub_100074D44(a4, &v68);
          v25 = a4[1];
          sub_100074DB8((uint64_t)&v68);
        }
        else
        {
          v24 = *(_OWORD *)&v65.__r_.__value_.__l.__data_;
          *(_QWORD *)(v22 + 16) = *((_QWORD *)&v65.__r_.__value_.__l + 2);
          *(_OWORD *)v22 = v24;
          memset(&v65, 0, sizeof(v65));
          v25 = v22 + 24;
          a4[1] = v22 + 24;
        }
        a4[1] = v25;
      }
      else
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10219EA10);
        v26 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          if (v64 >= 0)
            v27 = v63;
          else
            v27 = (void **)v63[0];
          v28 = *(_DWORD *)(v6 + 8);
          v68 = 68289794;
          *(_WORD *)v69 = 2082;
          *(_QWORD *)&v69[2] = "";
          *(_WORD *)&v69[10] = 2082;
          *(_QWORD *)&v69[12] = v27;
          *(_WORD *)&v69[20] = 1026;
          *(_DWORD *)&v69[22] = v66[0];
          *(_WORD *)&v69[26] = 1026;
          *(_DWORD *)&v69[28] = v28;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,tilesToDownload\", \"tileToDownload\":%{public, location:escape_only}s, \"tileIod\":%{public}u, \"fTile_content_iod_number\":%{public}u}", (uint8_t *)&v68, 0x28u);
        }
        if (v66[0] == a5)
        {
          if (v10 < 0)
            operator delete(__p);
          v60 = v65.__r_.__value_.__l.__size_;
          __p = (void *)v65.__r_.__value_.__r.__words[0];
          v66[1] = v65.__r_.__value_.__r.__words[2];
          *(_DWORD *)((char *)&v66[1] + 3) = *(_DWORD *)((char *)&v65.__r_.__value_.__r.__words[2] + 3);
          v10 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
          *((_BYTE *)&v65.__r_.__value_.__s + 23) = 0;
          v65.__r_.__value_.__s.__data_[0] = 0;
        }
        else
        {
          v29 = a3[1];
          v30 = a3[2];
          if (v29 >= v30)
          {
            v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *a3) >> 3);
            v34 = v33 + 1;
            if (v33 + 1 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_98;
            v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - *a3) >> 3);
            if (2 * v35 > v34)
              v34 = 2 * v35;
            if (v35 >= 0x555555555555555)
              v36 = 0xAAAAAAAAAAAAAAALL;
            else
              v36 = v34;
            *(_QWORD *)&v69[24] = v59;
            if (v36)
              v37 = (char *)sub_1002596A8(v59, v36);
            else
              v37 = 0;
            v38 = &v37[24 * v33];
            v68 = (uint64_t)v37;
            *(_QWORD *)v69 = v38;
            *(_QWORD *)&v69[16] = &v37[24 * v36];
            v39 = *(_OWORD *)&v65.__r_.__value_.__l.__data_;
            *((_QWORD *)v38 + 2) = *((_QWORD *)&v65.__r_.__value_.__l + 2);
            *(_OWORD *)v38 = v39;
            memset(&v65, 0, sizeof(v65));
            *(_QWORD *)&v69[8] = v38 + 24;
            sub_100074D44(a3, &v68);
            v32 = a3[1];
            sub_100074DB8((uint64_t)&v68);
          }
          else
          {
            v31 = *(_OWORD *)&v65.__r_.__value_.__l.__data_;
            *(_QWORD *)(v29 + 16) = *((_QWORD *)&v65.__r_.__value_.__l + 2);
            *(_OWORD *)v29 = v31;
            memset(&v65, 0, sizeof(v65));
            v32 = v29 + 24;
            a3[1] = v29 + 24;
          }
          a3[1] = v32;
        }
      }
      if (SHIBYTE(v64) < 0)
        operator delete(v63[0]);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
      v6 += 16;
    }
    while (v6 != v7);
    if (v10 >= 0)
      v47 = v10;
    else
      v47 = v60;
    if (v47)
    {
      v48 = a3[1];
      v49 = a3[2];
      if (v48 >= v49)
      {
        v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - *a3) >> 3);
        v53 = v52 + 1;
        if (v52 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_100259694();
        v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - *a3) >> 3);
        if (2 * v54 > v53)
          v53 = 2 * v54;
        if (v54 >= 0x555555555555555)
          v55 = 0xAAAAAAAAAAAAAAALL;
        else
          v55 = v53;
        *(_QWORD *)&v69[24] = v59;
        if (v55)
          v56 = (char *)sub_1002596A8(v59, v55);
        else
          v56 = 0;
        v57 = &v56[24 * v52];
        v68 = (uint64_t)v56;
        *(_QWORD *)v69 = v57;
        *(_QWORD *)&v69[16] = &v56[24 * v55];
        *(_QWORD *)v57 = __p;
        *((_QWORD *)v57 + 1) = v60;
        *((_DWORD *)v57 + 4) = v66[1];
        *(_DWORD *)(v57 + 19) = *(_DWORD *)((char *)&v66[1] + 3);
        v57[23] = v10;
        *(_QWORD *)&v69[8] = v57 + 24;
        sub_100074D44(a3, &v68);
        v50 = a3[1];
        sub_100074DB8((uint64_t)&v68);
      }
      else
      {
        *(_QWORD *)v48 = __p;
        *(_QWORD *)(v48 + 8) = v60;
        *(_DWORD *)(v48 + 16) = v66[1];
        *(_DWORD *)(v48 + 19) = *(_DWORD *)((char *)&v66[1] + 3);
        *(_BYTE *)(v48 + 23) = v10;
        v50 = v48 + 24;
        a3[1] = v48 + 24;
      }
      a3[1] = v50;
    }
    else if (v10 < 0)
    {
      operator delete(__p);
    }
  }
}

void sub_10109A0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  sub_100074DB8(v28 - 144);
  _Unwind_Resume(a1);
}

void sub_10109A170(uint64_t a1)
{
  sub_101099470(*(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 56), *(double *)(a1 + 40), *(double *)(a1 + 48));
}

void sub_10109A184(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  NSObject *v6;
  int v7;
  int v8;
  char v9;
  char v10;
  NSObject *v11;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;

  if (*a3 == 8)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219EA10);
    v11 = qword_1022A0048;
    v12 = os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT);
    v10 = 0;
    v9 = 0;
    if (v12)
    {
      v13 = *(unsigned __int8 *)a4;
      v16 = 68289282;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 1026;
      v21 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,kNotificationAirplaneMode\", \"airplaneMode\":%{public}hhd}", (uint8_t *)&v16, 0x18u);
      v10 = 0;
      v9 = 0;
    }
    goto LABEL_12;
  }
  if (*a3 == 6)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219EA10);
    v6 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *a4;
      v7 = a4[1];
      v16 = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 1026;
      v21 = v7;
      v22 = 1026;
      v23 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,kNotificationReachability\", \"currentReachability\":%{public}d, \"previousReachability\":%{public}d}", (uint8_t *)&v16, 0x1Eu);
    }
    v9 = a4[1] == 1;
    v10 = (a4[1] - 1) < 2;
LABEL_12:
    v14 = *(_QWORD *)(a1 + 120);
    if (v14)
      sub_10079145C(v14, v10, v9);
    return;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10219EA10);
  v15 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v16 = 68289026;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,unexpected Daemon notification\"}", (uint8_t *)&v16, 0x12u);
  }
}

void sub_10109A3EC(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t *v11;
  NSObject *v12;
  uint64_t *v13;
  NSObject *v14;
  int *v15;
  NSObject *v16;
  uint64_t *v17;
  NSObject *v18;
  uint64_t *v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  NSObject *v32;
  uint64_t v33;
  const char *v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  const char *v44;
  const char *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  const char *v53;
  uint8_t *v54;
  NSObject *v56;
  int v57;
  int v58;
  const char *v59;
  uint8_t *v60;
  NSObject *v61;
  const char *v62;
  uint64_t v63;
  const char *v64;
  const char *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  const char *v73;
  uint8_t *v74;
  const char *v75;
  uint8_t *v76;
  const char *v77;
  uint8_t *v78;
  const char *v79;
  uint8_t *v80;
  const char *v81;
  uint8_t *v82;
  const char *v83;
  uint8_t *v84;
  const char *v85;
  uint8_t *v86;
  const char *v87;
  uint8_t *v88;
  const char *v89;
  uint8_t *v90;
  const char *v91;
  uint8_t *v92;
  const char *v93;
  uint8_t *v94;
  uint64_t v95;
  uint64_t *v96;
  _BYTE *v97;
  _BYTE *v98;
  _BYTE *v99;
  uint64_t *v100;
  _QWORD v101[2];
  int v102;
  uint64_t v103;
  __int16 v104;
  const char *v105;
  __int16 v106;
  const char *v107;
  __int16 v108;
  const char *v109;
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  uint64_t v113;
  __int16 v114;
  uint64_t v115;
  __int16 v116;
  uint64_t v117;
  __int16 v118;
  uint64_t v119;
  __int16 v120;
  int v121;
  uint8_t buf[4];
  uint64_t v123;
  __int16 v124;
  const char *v125;
  __int16 v126;
  const char *v127;
  __int16 v128;
  const char *v129;
  __int16 v130;
  uint64_t v131;
  __int16 v132;
  uint64_t v133;
  __int16 v134;
  uint64_t v135;
  __int16 v136;
  uint64_t v137;
  __int16 v138;
  uint64_t v139;
  __int16 v140;
  int v141;

  if (*a3 == 2)
  {
    sub_100119F3C(v101);
    if (sub_100006BB4(a4, "RayTracingConfigurations_v1", v101))
    {
      v100 = (uint64_t *)(a1 + 280);
      if ((sub_1001FD98C((uint64_t)v101, "RayTracingAvlExpirationAge", (void *)(a1 + 280)) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10219EA30);
        v6 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "RayTracingTileManager,#Warning,MA-OTA,file exp age config read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10219EA30);
          LOWORD(v102) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "RayTracingTileManager,#Warning,MA-OTA,file exp age config read error", &v102, 2);
          v76 = (uint8_t *)v75;
          sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v75);
          if (v76 != buf)
            free(v76);
        }
        *v100 = 0x415BAF8000000000;
      }
      v99 = (_BYTE *)(a1 + 272);
      if ((sub_1001E4874((uint64_t)v101, "RayTracingTileManagerEnable", (BOOL *)(a1 + 272)) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10219EA30);
        v7 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "RayTracingTileManager,#Warning,MA-OTA,RayTracing feature state config read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10219EA30);
          LOWORD(v102) = 0;
          LODWORD(v95) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "RayTracingTileManager,#Warning,MA-OTA,RayTracing feature state config read error", &v102, v95);
          v78 = (uint8_t *)v77;
          sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v77);
          if (v78 != buf)
            free(v78);
        }
      }
      v98 = (_BYTE *)(a1 + 274);
      if ((sub_1001E4874((uint64_t)v101, "RayTracingPreCacheingEnabled", (BOOL *)(a1 + 274)) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10219EA30);
        v8 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "RayTracingTileManager,#Warning,MA-OTA,RayTracing pre-Cacheing read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10219EA30);
          LOWORD(v102) = 0;
          LODWORD(v95) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "RayTracingTileManager,#Warning,MA-OTA,RayTracing pre-Cacheing read error", &v102, v95);
          v80 = (uint8_t *)v79;
          sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v79);
          if (v80 != buf)
            free(v80);
        }
      }
      v97 = (_BYTE *)(a1 + 273);
      if ((sub_1001E4874((uint64_t)v101, "RayTracingFlushRTData", (BOOL *)(a1 + 273)) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10219EA30);
        v9 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "RayTracingTileManager,#Warning,MA-OTA,RayTracing flush read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10219EA30);
          LOWORD(v102) = 0;
          LODWORD(v95) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "RayTracingTileManager,#Warning,MA-OTA,RayTracing flush read error", &v102, v95);
          v82 = (uint8_t *)v81;
          sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v81);
          if (v82 != buf)
            free(v82);
        }
      }
      v96 = (uint64_t *)(a1 + 288);
      if ((sub_1001FD98C((uint64_t)v101, "RayTracingFlushRTDataBeforeTime", (void *)(a1 + 288)) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10219EA30);
        v10 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "RayTracingTileManager,#Warning,MA-OTA,flush time read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10219EA30);
          LOWORD(v102) = 0;
          LODWORD(v95) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "RayTracingTileManager,#Warning,MA-OTA,flush time read error", &v102, v95);
          v84 = (uint8_t *)v83;
          sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v83);
          if (v84 != buf)
            free(v84);
        }
      }
      v11 = (uint64_t *)(a1 + 296);
      if ((sub_1001FD98C((uint64_t)v101, "RayTracingAvlDownloadRateOnWifi", (void *)(a1 + 296)) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10219EA30);
        v12 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "RayTracingTileManager,#Warning,MA-OTA,wifi download rate read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10219EA30);
          LOWORD(v102) = 0;
          LODWORD(v95) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "RayTracingTileManager,#Warning,MA-OTA,wifi download rate read error", &v102, v95);
          v86 = (uint8_t *)v85;
          sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v85);
          if (v86 != buf)
            free(v86);
        }
      }
      v13 = (uint64_t *)(a1 + 304);
      if ((sub_1001FD98C((uint64_t)v101, "RayTracingAvlDownloadRateOnCell", (void *)(a1 + 304)) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10219EA30);
        v14 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "RayTracingTileManager,#Warning,MA-OTA,cell download rate read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10219EA30);
          LOWORD(v102) = 0;
          LODWORD(v95) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "RayTracingTileManager,#Warning,MA-OTA,cell download rate read error", &v102, v95);
          v88 = (uint8_t *)v87;
          sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v87);
          if (v88 != buf)
            free(v88);
        }
      }
      v15 = (int *)(a1 + 328);
      if ((sub_100526244((uint64_t)v101, "RayTracingTrialDownloadMaxRetrialAllowed", (_DWORD *)(a1 + 328)) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10219EA30);
        v16 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "RayTracingTileManager,#Warning,MA-OTA,retrial read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10219EA30);
          LOWORD(v102) = 0;
          LODWORD(v95) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "RayTracingTileManager,#Warning,MA-OTA,retrial read error", &v102, v95);
          v90 = (uint8_t *)v89;
          sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v89);
          if (v90 != buf)
            free(v90);
        }
      }
      v17 = (uint64_t *)(a1 + 320);
      if ((sub_1001FD98C((uint64_t)v101, "RayTracingTileGridSize", (void *)(a1 + 320)) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10219EA30);
        v18 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "RayTracingTileManager,#Warning,MA-OTA,grid size read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10219EA30);
          LOWORD(v102) = 0;
          LODWORD(v95) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "RayTracingTileManager,#Warning,MA-OTA,grid size read error", &v102, v95);
          v92 = (uint8_t *)v91;
          sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v91);
          if (v92 != buf)
            free(v92);
        }
      }
      v19 = (uint64_t *)(a1 + 312);
      if ((sub_1001FD98C((uint64_t)v101, "RayTracingStorageLimit", (void *)(a1 + 312)) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10219EA30);
        v20 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "RayTracingTileManager,#Warning,MA-OTA,storage limit read error", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10219EA30);
          LOWORD(v102) = 0;
          LODWORD(v95) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "RayTracingTileManager,#Warning,MA-OTA,storage limit read error", &v102, v95);
          v94 = (uint8_t *)v93;
          sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v93);
          if (v94 != buf)
            free(v94);
        }
      }
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10219EA30);
      v21 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        v22 = *v100;
        v23 = "Yes";
        if (*v99)
          v24 = "Yes";
        else
          v24 = "No";
        if (*v98)
          v25 = "Yes";
        else
          v25 = "No";
        v26 = *v96;
        if (!*v97)
          v23 = "No";
        v27 = *v11;
        v28 = *v13;
        v29 = *v19;
        v30 = *v17;
        v31 = *v15;
        *(_DWORD *)buf = 134351362;
        v123 = v22;
        v124 = 2082;
        v125 = v24;
        v126 = 2082;
        v127 = v25;
        v128 = 2082;
        v129 = v23;
        v130 = 2050;
        v131 = v26;
        v132 = 2050;
        v133 = v27;
        v134 = 2050;
        v135 = v28;
        v136 = 2050;
        v137 = v29;
        v138 = 2050;
        v139 = v30;
        v140 = 1026;
        v141 = v31;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "RayTracingTileManager,MA-OTA,AvlFileExpAge,%{public}.3lf,featureEnable,%{public}s,flush,%{public}s,pre-Cacheing,%{public}s,flushTime,%{public}.3lf,WifiDownloadrate,%{public}.3lf,CellDownloadrate,%{public}.3lf,sotrageLimit,%{public}.3lf,gridSize,%{public}.3lf,retrial,%{public}d", buf, 0x62u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10219EA30);
        v63 = *v100;
        v64 = "Yes";
        if (*v99)
          v65 = "Yes";
        else
          v65 = "No";
        if (*v98)
          v66 = "Yes";
        else
          v66 = "No";
        if (!*v97)
          v64 = "No";
        v67 = *v96;
        v68 = *v11;
        v69 = *v13;
        v70 = *v19;
        v71 = *v17;
        v72 = *v15;
        v102 = 134351362;
        v103 = v63;
        v104 = 2082;
        v105 = v65;
        v106 = 2082;
        v107 = v66;
        v108 = 2082;
        v109 = v64;
        v110 = 2050;
        v111 = v67;
        v112 = 2050;
        v113 = v68;
        v114 = 2050;
        v115 = v69;
        v116 = 2050;
        v117 = v70;
        v118 = 2050;
        v119 = v71;
        v120 = 1026;
        v121 = v72;
        LODWORD(v95) = 98;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "RayTracingTileManager,MA-OTA,AvlFileExpAge,%{public}.3lf,featureEnable,%{public}s,flush,%{public}s,pre-Cacheing,%{public}s,flushTime,%{public}.3lf,WifiDownloadrate,%{public}.3lf,CellDownloadrate,%{public}.3lf,sotrageLimit,%{public}.3lf,gridSize,%{public}.3lf,retrial,%{public}d", &v102, v95);
        v74 = (uint8_t *)v73;
        sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v73);
        if (v74 != buf)
          free(v74);
      }
      sub_101096724(a1);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10219EA30);
      v32 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v33 = *v100;
        v34 = "Yes";
        if (*v99)
          v35 = "Yes";
        else
          v35 = "No";
        if (*v98)
          v36 = "Yes";
        else
          v36 = "No";
        v37 = *v96;
        if (!*v97)
          v34 = "No";
        v38 = *v11;
        v39 = *v13;
        v40 = *v19;
        v41 = *v17;
        v42 = *v15;
        *(_DWORD *)buf = 134351362;
        v123 = v33;
        v124 = 2082;
        v125 = v35;
        v126 = 2082;
        v127 = v36;
        v128 = 2082;
        v129 = v34;
        v130 = 2050;
        v131 = v37;
        v132 = 2050;
        v133 = v38;
        v134 = 2050;
        v135 = v39;
        v136 = 2050;
        v137 = v40;
        v138 = 2050;
        v139 = v41;
        v140 = 1026;
        v141 = v42;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "RayTracingTileManager,final,AvlFileExpAge,%{public}.3lf,featureEnable,%{public}s,flush,%{public}s,pre-Cacheing,%{public}s,flushTime,%{public}.3lf,WifiDownloadrate,%{public}.3lf,CellDownloadrate,%{public}.3lf,sotrageLimit,%{public}.3lf,gridSize,%{public}.3lf,retrial,%{public}d", buf, 0x62u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_115;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10219EA30);
      v43 = *v100;
      v44 = "Yes";
      if (*v99)
        v45 = "Yes";
      else
        v45 = "No";
      if (*v98)
        v46 = "Yes";
      else
        v46 = "No";
      if (!*v97)
        v44 = "No";
      v47 = *v96;
      v48 = *v11;
      v49 = *v13;
      v50 = *v19;
      v51 = *v17;
      v52 = *v15;
      v102 = 134351362;
      v103 = v43;
      v104 = 2082;
      v105 = v45;
      v106 = 2082;
      v107 = v46;
      v108 = 2082;
      v109 = v44;
      v110 = 2050;
      v111 = v47;
      v112 = 2050;
      v113 = v48;
      v114 = 2050;
      v115 = v49;
      v116 = 2050;
      v117 = v50;
      v118 = 2050;
      v119 = v51;
      v120 = 1026;
      v121 = v52;
      LODWORD(v95) = 98;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "RayTracingTileManager,final,AvlFileExpAge,%{public}.3lf,featureEnable,%{public}s,flush,%{public}s,pre-Cacheing,%{public}s,flushTime,%{public}.3lf,WifiDownloadrate,%{public}.3lf,CellDownloadrate,%{public}.3lf,sotrageLimit,%{public}.3lf,gridSize,%{public}.3lf,retrial,%{public}d", &v102, v95);
      v54 = (uint8_t *)v53;
      sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v53);
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10219EA30);
      v61 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_INFO, "RayTracingTileManager,#Warning,MA-OTA,RayTracing Config not available", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_115;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10219EA30);
      LOWORD(v102) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "RayTracingTileManager,#Warning,MA-OTA,RayTracing Config not available", &v102, 2);
      v54 = (uint8_t *)v62;
      sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v62);
    }
    if (v54 != buf)
      free(v54);
LABEL_115:
    sub_10011A5A8(v101);
    return;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10219EA30);
  v56 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v57 = *a3;
    *(_DWORD *)buf = 67240192;
    LODWORD(v123) = v57;
    _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_INFO, "RayTracingTileManager,#Warning,Invalid notification,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10219EA30);
    v58 = *a3;
    v102 = 67240192;
    LODWORD(v103) = v58;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "RayTracingTileManager,#Warning,Invalid notification,%{public}d", &v102, 8);
    v60 = (uint8_t *)v59;
    sub_100512490("Generic", 1, 0, 2, "void CLRayTracingTileManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v59);
    if (v60 != buf)
      free(v60);
  }
}

void sub_10109B998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_10109B9E8(uint64_t *a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _QWORD v23[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 5);
    v14 = v13 + 1;
    if (v13 + 1 > 0x2AAAAAAAAAAAAAALL)
      sub_100259694();
    v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 5);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x155555555555555)
      v16 = 0x2AAAAAAAAAAAAAALL;
    else
      v16 = v14;
    v23[4] = result;
    if (v16)
      v17 = (char *)sub_10067257C(result, v16);
    else
      v17 = 0;
    v18 = &v17[96 * v13];
    v23[0] = v17;
    v23[1] = v18;
    v23[3] = &v17[96 * v16];
    v19 = *a2;
    *((_QWORD *)v18 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v18 = v19;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_OWORD *)(v18 + 24) = *(__int128 *)((char *)a2 + 24);
    v20 = *(__int128 *)((char *)a2 + 56);
    v21 = *(__int128 *)((char *)a2 + 72);
    v22 = *((_QWORD *)a2 + 11);
    *(_OWORD *)(v18 + 40) = *(__int128 *)((char *)a2 + 40);
    *((_QWORD *)v18 + 11) = v22;
    *(_OWORD *)(v18 + 72) = v21;
    *(_OWORD *)(v18 + 56) = v20;
    v23[2] = v18 + 96;
    sub_10109EA34(a1, v23);
    v12 = a1[1];
    result = sub_10109EBE4((uint64_t)v23);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_OWORD *)(v7 + 24) = *(__int128 *)((char *)a2 + 24);
    v9 = *(__int128 *)((char *)a2 + 56);
    v10 = *(__int128 *)((char *)a2 + 72);
    v11 = *((_QWORD *)a2 + 11);
    *(_OWORD *)(v7 + 40) = *(__int128 *)((char *)a2 + 40);
    *(_QWORD *)(v7 + 88) = v11;
    *(_OWORD *)(v7 + 72) = v10;
    *(_OWORD *)(v7 + 56) = v9;
    v12 = v7 + 96;
    a1[1] = v7 + 96;
  }
  a1[1] = v12;
  return result;
}

void sub_10109BB5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10109EBE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10109BB70()
{
  operator new();
}

void sub_10109BC1C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_10109BC58(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = &off_10219EC40;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_10109BD2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10219E9F0);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_10219E9F0);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLRayTracingTileManager_Type::Notification, CLRayTracingTileManager_Type::NotificationData>::removeClient(int) [Notification_T = CLRayTracingTileManager_Type::Notification, NotificationData_T = CLRayTracingTileManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_10109BFA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FCE78);
}

BOOL sub_10109BFB4(uint64_t a1, int a2, int *a3, char *a4)
{
  _BOOL8 result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  char v29;
  uint64_t **v30;
  char v31;
  uint64_t **v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  const char *v36;
  uint8_t *v37;
  uint64_t v38;
  int v39;
  _BYTE v40[12];
  __int16 v41;
  int v42;
  uint8_t buf[24];
  void *__p[2];
  _OWORD v45[2];
  char v46;

  v39 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      v38 = v10;
      v16 = *a3;
      v19 = *(_QWORD *)(v10 + 48);
      v18 = v10 + 48;
      v17 = v19;
      if (!v19)
        goto LABEL_31;
      v20 = v18;
      do
      {
        v21 = *(_DWORD *)(v17 + 28);
        v22 = v21 < v16;
        if (v21 >= v16)
          v23 = (uint64_t *)v17;
        else
          v23 = (uint64_t *)(v17 + 8);
        if (!v22)
          v20 = v17;
        v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28))
LABEL_31:
        v20 = v18;
      v24 = *(_QWORD *)(a1 + 64);
      if (!v24)
        goto LABEL_42;
      v25 = a1 + 64;
      do
      {
        v26 = *(_DWORD *)(v24 + 32);
        v27 = v26 < v16;
        if (v26 >= v16)
          v28 = (uint64_t *)v24;
        else
          v28 = (uint64_t *)(v24 + 8);
        if (!v27)
          v25 = v24;
        v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        v33 = *(_QWORD *)(v25 + 56);
        v34 = *a4;
        *(_QWORD *)buf = &v39;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v25 + 40), &v39, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v34;
        memset(buf, 0, 20);
        buf[20] = 2;
        *(_OWORD *)__p = 0u;
        memset(v45, 0, sizeof(v45));
        v46 = 1;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, uint8_t *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_10109ED04();
        }
        *(_QWORD *)v40 = (char *)v45 + 8;
        sub_100259608((void ***)v40);
        if (SBYTE7(v45[0]) < 0)
          operator delete(__p[0]);
        if (v33)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v29 = byte_1022FCE79;
        *(_DWORD *)v40 = *a3;
        *(_QWORD *)buf = v40;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v29;
        *(_DWORD *)v40 = *a3;
        *(_QWORD *)buf = v40;
        v30 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v30 + 8);
        v31 = *a4;
        *(_DWORD *)v40 = *a3;
        *(_QWORD *)buf = v40;
        v32 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v39;
        *((_BYTE *)sub_1001AFE94(v32 + 5, &v39, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v31;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v20 == v18)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(v38 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10219E9F0);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219E9F0);
    v35 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v35 = (_QWORD *)*v35;
    *(_DWORD *)v40 = 136446466;
    *(_QWORD *)&v40[4] = v35;
    v41 = 1026;
    v42 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v40,
      18);
    v37 = (uint8_t *)v36;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLRayTracingTileManager_Type::Notification, CLRayTracingTileManager_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLRayTracingTileManager_Type::Notification, NotificationData_T = CLRayTracingTileManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v36);
    if (v37 != buf)
      free(v37);
    return 0;
  }
  return result;
}

void sub_10109C460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_101099428((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10109C480(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219E9F0);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10219E9F0);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLRayTracingTileManager_Type::Notification, CLRayTracingTileManager_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLRayTracingTileManager_Type::Notification, NotificationData_T = CLRayTracingTileManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_10109C700(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10219E9F0);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10219E9F0);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLRayTracingTileManager_Type::Notification, CLRayTracingTileManager_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLRayTracingTileManager_Type::Notification, NotificationData_T = CLRayTracingTileManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_10109CA88(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  __int128 *v12;
  __int128 v13;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v7 = *a2;
  v8 = v3;
  do
  {
    v9 = *(_DWORD *)(v4 + 32);
    v10 = v9 < v7;
    if (v9 >= v7)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (!v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v3)
    return 0;
  if (v7 < *(_DWORD *)(v8 + 32))
    return 0;
  v12 = *(__int128 **)(v8 + 64);
  if (!v12)
    return 0;
  v13 = *v12;
  *(_QWORD *)(a3 + 13) = *(_QWORD *)((char *)v12 + 13);
  *(_OWORD *)a3 = v13;
  std::string::operator=((std::string *)(a3 + 24), (const std::string *)v12 + 1);
  if (v12 != (__int128 *)a3)
    sub_101892BBC(a3 + 48, *((std::string **)v12 + 6), *((__int128 **)v12 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v12 + 7) - *((_QWORD *)v12 + 6)) >> 3));
  *(_BYTE *)(a3 + 72) = *((_BYTE *)v12 + 72);
  return 1;
}

uint64_t sub_10109CB44(uint64_t a1, int *a2, __int128 *a3)
{
  uint64_t **v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int v10;
  __int128 v11;
  int *v12;

  sub_10109E390(a3, &v11);
  v10 = *a2;
  v12 = &v10;
  v5 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101B9EB60, &v12);
  sub_1002B7674((uint64_t)(v5 + 8), &v11);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_10109CBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10109CC04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v4[2];
  int v5;
  char v6;
  void *__p[2];
  _OWORD v8[2];
  char v9;
  void **v10;

  v4[0] = 0;
  v4[1] = 0;
  v5 = 0;
  v6 = 2;
  *(_OWORD *)__p = 0u;
  memset(v8, 0, sizeof(v8));
  v9 = 1;
  (*(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v4, a3, a4, 0);
  v10 = (void **)v8 + 1;
  sub_100259608(&v10);
  if (SBYTE7(v8[0]) < 0)
    operator delete(__p[0]);
}

void sub_10109CC88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_101099428((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10109CC9C(uint64_t a1, signed __int32 *a2, __int128 *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  os_activity_scope_state_s state;
  uint64_t buf;
  _BYTE v29[20];
  __int16 v30;
  _QWORD *v31;
  __int16 v32;
  std::__shared_weak_count *v33;
  _QWORD **v34;
  _QWORD *v35[3];
  std::__shared_weak_count *v36;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219E9F0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      buf = 68289794;
      *(_WORD *)v29 = 2082;
      *(_QWORD *)&v29[2] = "";
      *(_WORD *)&v29[10] = 2082;
      *(_QWORD *)&v29[12] = "activity";
      v30 = 2082;
      v31 = v10;
      v32 = 2050;
      v33 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", (uint8_t *)&buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v34 = v35;
      memset(v35, 0, sizeof(v35));
      v36 = 0;
      sub_1004A6D60((uint64_t)&buf, a2, (uint64_t)&v34);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)&buf);
      v18 = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v29, *(_QWORD **)&v29[8]);
      v21 = v36;
      if (v36)
      {
        v22 = (unint64_t *)&v36->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v34, v35[0]);
    }
    if (a4)
    {
      sub_10109E390(a3, &buf);
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)&buf);
      v24 = *(std::__shared_weak_count **)v29;
      if (*(_QWORD *)v29)
      {
        v25 = (unint64_t *)(*(_QWORD *)v29 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_10109DDA0();
    os_activity_scope_leave(&state);
  }
}

void sub_10109D2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_10109D304(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219E9F0);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10219E9F0);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLRayTracingTileManager_Type::Notification, CLRayTracingTileManager_Type::NotificationData>::listClients() [Notification_T = CLRayTracingTileManager_Type::Notification, NotificationData_T = CLRayTracingTileManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219E9F0);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10219E9F0);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLRayTracingTileManager_Type::Notification, CLRayTracingTileManager_Type::NotificationData>::listClients() [Notification_T = CLRayTracingTileManager_Type::Notification, NotificationData_T = CLRayTracingTileManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10219E9F0);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10219E9F0);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLRayTracingTileManager_Type::Notification, CLRayTracingTileManager_Type::NotificationData>::listClients() [Notification_T = CLRayTracingTileManager_Type::Notification, NotificationData_T = CLRayTracingTileManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_10109D8B0(uint64_t a1)
{
  sub_10109ECA4(a1);
  operator delete();
}

id sub_10109D8D4(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_10109E610(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_10109D920(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10109D94C(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_10109D978(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_10109D9A4(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10109D9E0(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10109D9E0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void **v7;

  v2 = (_QWORD *)(a1 + 160);
  v3 = *(_QWORD **)(a1 + 184);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  v7 = (void **)(a1 + 112);
  sub_100259608(&v7);
  v7 = (void **)(a1 + 88);
  sub_100259608(&v7);
  v7 = (void **)(a1 + 64);
  sub_100259608(&v7);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

void sub_10109DAB0(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_10109DAF0((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_10109DAF0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 96)
  {
    if (*(char *)(i - 73) < 0)
      operator delete(*(void **)(i - 96));
  }
  a1[1] = v2;
}

uint64_t sub_10109DB3C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10109DB78(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10109DB78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (*(_BYTE *)(a1 + 560) && *(char *)(a1 + 559) < 0)
    operator delete(*(void **)(a1 + 536));
  if (*(char *)(a1 + 487) < 0)
    operator delete(*(void **)(a1 + 464));
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  if (*(char *)(a1 + 399) < 0)
    operator delete(*(void **)(a1 + 376));
  std::mutex::~mutex((std::mutex *)(a1 + 312));
  sub_100602508(a1 + 64);
  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(void **)(a1 + 16);
  if (v4)
  {
    *(_QWORD *)(a1 + 24) = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_10109DC44()
{
  operator delete();
}

_QWORD *sub_10109DC58(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10219EB40;
  result[1] = v3;
  return result;
}

uint64_t sub_10109DC8C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10219EB40;
  a2[1] = v2;
  return result;
}

void sub_10109DCA8(uint64_t a1, _QWORD *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  sub_1010991C4(*(_QWORD *)(a1 + 8), a2, *a3, *a4);
}

uint64_t sub_10109DCB8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10109DCF4()
{
}

__int128 *sub_10109DD00(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      v7 = *v5;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a4 = v7;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)v5 = 0;
      *(_OWORD *)(a4 + 24) = *(__int128 *)((char *)v5 + 24);
      v8 = *(__int128 *)((char *)v5 + 40);
      v9 = *(__int128 *)((char *)v5 + 56);
      v10 = *(__int128 *)((char *)v5 + 72);
      *(_QWORD *)(a4 + 88) = *((_QWORD *)v5 + 11);
      *(_OWORD *)(a4 + 72) = v10;
      *(_OWORD *)(a4 + 56) = v9;
      *(_OWORD *)(a4 + 40) = v8;
      a4 += 96;
      v5 += 6;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void sub_10109DDA0()
{
  operator new();
}

void sub_10109DEA4()
{
  operator delete();
}

void sub_10109DEE0(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_10109E610(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_10109E2B4(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10219E9F0);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10219E9F0);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLRayTracingTileManager_Type::Notification, CLRayTracingTileManager_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLRayTracingTileManager_Type::Notification, NotificationData_T = CLRayTracingTileManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_10109E2B4(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_10109E610(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

_QWORD *sub_10109E390@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x68uLL);
  result = sub_10109E3E8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10109E3D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10109E3E8(_QWORD *a1, __int128 *a2)
{
  char v4;

  a1[2] = 0;
  *a1 = off_10219EBD0;
  a1[1] = 0;
  sub_10109E4B8((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_10109E434(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10109E448(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10219EBD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10109E45C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10219EBD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10109E490(uint64_t a1)
{
  char v1;

  sub_10109E56C((uint64_t)&v1, a1 + 24);
}

char *sub_10109E4B8(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  _BYTE *v6;
  __int128 v7;
  char *result;

  v5 = *a3;
  *(_QWORD *)(a2 + 13) = *(_QWORD *)((char *)a3 + 13);
  *(_OWORD *)a2 = v5;
  v6 = (_BYTE *)(a2 + 24);
  if (*((char *)a3 + 47) < 0)
  {
    sub_100115CE4(v6, *((void **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v7 = *(__int128 *)((char *)a3 + 24);
    *(_QWORD *)(a2 + 40) = *((_QWORD *)a3 + 5);
    *(_OWORD *)v6 = v7;
  }
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  result = sub_100259B94((char *)(a2 + 48), *((__int128 **)a3 + 6), *((__int128 **)a3 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a3 + 7) - *((_QWORD *)a3 + 6)) >> 3));
  *(_BYTE *)(a2 + 72) = *((_BYTE *)a3 + 72);
  return result;
}

void sub_10109E550(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_10109E56C(uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 48);
  sub_100259608(&v3);
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
}

uint64_t sub_10109E5B0(uint64_t result)
{
  uint64_t v1;
  void **v2;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    v2 = (void **)(v1 + 48);
    sub_100259608(&v2);
    if (*(char *)(v1 + 47) < 0)
      operator delete(*(void **)(v1 + 24));
    operator delete();
  }
  return result;
}

id sub_10109E610(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_10109E65C(a1);
  else
    return 0;
}

id sub_10109E65C(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10219EC10);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C3E853 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10219EC10);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10219EC10);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C3E853 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10219EC10);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLRayTracingTileManager_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_10109EA08(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_10109EA34(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10109EAA8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10109EAA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[3];
  char v16;
  __int128 v17;
  __int128 v18;

  v7 = a7;
  *(_QWORD *)&v18 = a6;
  *((_QWORD *)&v18 + 1) = a7;
  v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 96);
      *(_QWORD *)(v9 - 80) = *(_QWORD *)(a3 - 80);
      *(_OWORD *)(v9 - 96) = v10;
      *(_QWORD *)(a3 - 88) = 0;
      *(_QWORD *)(a3 - 80) = 0;
      *(_QWORD *)(a3 - 96) = 0;
      *(_OWORD *)(v9 - 72) = *(_OWORD *)(a3 - 72);
      v11 = *(_OWORD *)(a3 - 40);
      v12 = *(_OWORD *)(a3 - 24);
      v13 = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 56) = *(_OWORD *)(a3 - 56);
      *(_QWORD *)(v9 - 8) = v13;
      *(_OWORD *)(v9 - 24) = v12;
      *(_OWORD *)(v9 - 40) = v11;
      v9 -= 96;
      v7 -= 96;
      a3 -= 96;
    }
    while (a3 != a5);
    *((_QWORD *)&v18 + 1) = v9;
  }
  v16 = 1;
  sub_10109EB6C((uint64_t)v15);
  return a6;
}

uint64_t sub_10109EB6C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10109EBA0(a1);
  return a1;
}

void sub_10109EBA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 96;
  }
}

uint64_t sub_10109EBE4(uint64_t a1)
{
  sub_10109EC18(a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_10109EC18(uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 12;
      *(_QWORD *)(a1 + 16) = v2 - 12;
      if (*((char *)v2 - 73) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_10109EC6C(uint64_t *a1)
{
  if (*a1)
  {
    sub_10109DAF0(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_10109ECA4(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = &off_10219EC40;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_10109ED04()
{
  operator new();
}

void sub_10109EE08()
{
  operator delete();
}

uint64_t sub_10109EE44(uint64_t result)
{
  uint64_t v1;
  void **v2;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    v2 = (void **)(v1 + 48);
    sub_100259608(&v2);
    if (*(char *)(v1 + 47) < 0)
      operator delete(*(void **)(v1 + 24));
    operator delete();
  }
  return result;
}

uint64_t sub_10109EEA4()
{
  sub_1015A2E04(&qword_102311C48, "rt_tile_");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102311C48, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102311C60, ".bin");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102311C60, (void *)&_mh_execute_header);
}

void sub_10109EFA8(id a1)
{
  qword_10230C3D8 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLDigitalElevationModelSilo"));
}

uint64_t sub_10109F04C(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1010A7534;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230C3E8 != -1)
    dispatch_once(&qword_10230C3E8, block);
  return qword_102311C80;
}

uint64_t sub_10109F104(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 104;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 104) + 16))(a1 + 104);
  sub_1010A5210(v2 + 808);
  *(_OWORD *)(a1 + 704) = xmmword_101C3E8E0;
  *(_QWORD *)(a1 + 728) = 0;
  *(_QWORD *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 864) = 0xC0C3878000000000;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(int64x2_t *)(a1 + 848) = vdupq_n_s64(0xC0C3878000000000);
  *(_QWORD *)(a1 + 880) = 0;
  *(_QWORD *)(a1 + 872) = 0;
  *(_WORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 904) = 0;
  *(_QWORD *)(a1 + 896) = 0;
  *(_BYTE *)(a1 + 576) = 0;
  *(_BYTE *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  if (*(char *)(a1 + 575) < 0)
  {
    **(_BYTE **)(a1 + 552) = 0;
    *(_QWORD *)(a1 + 560) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 552) = 0;
    *(_BYTE *)(a1 + 575) = 0;
  }
  sub_100605848(a1 + 120);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

void sub_10109F1E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10109F21C(uint64_t a1, char a2)
{
  _BYTE *v3;

  v3 = (_BYTE *)(a1 + 104);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 104) + 16))(a1 + 104);
  v3[384] = a2;
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 24))(v3);
}

uint64_t sub_10109F2E8(uint64_t a1, uint64_t a2, char a3, int a4, int a5)
{
  uint64_t v10;
  _BYTE *v11;
  int v12;
  BOOL v13;
  char v14;
  double v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  NSObject *v20;
  NSObject *v21;
  int v22;
  CFAbsoluteTime Current;
  char v24;
  NSObject *v25;
  double v26;
  double v27;
  id v28;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint8_t *v33;
  const char *v34;
  uint8_t *v35;
  const char *v36;
  uint8_t *v37;
  int v38;
  const char *v39;
  uint8_t *v40;
  uint64_t v41;
  _BYTE v42[8];
  unint64_t v43;
  int v44;
  CFAbsoluteTime v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  int v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  uint8_t buf[4];
  uint64_t v54;
  __int16 v55;
  uint64_t v56;

  v11 = (_BYTE *)(a1 + 104);
  v10 = *(_QWORD *)(a1 + 104);
  v47 = a1 + 104;
  (*(void (**)(uint64_t))(v10 + 16))(a1 + 104);
  v48 = 256;
  if (!v11[384])
  {
    v12 = sub_100203764(a1 + 8);
    v13 = a5 <= 0 && *(_BYTE *)(a1 + 464) == 0;
    v14 = v13 ? v12 : 1;
    if ((v14 & 1) != 0)
    {
      if (v12 && a5 <= 0 && vabdd_f64(*(double *)(a2 + 76), *(double *)(a1 + 584)) > 3600.0)
      {
        sub_10109FB2C(a1, (_QWORD *)(a2 + 76));
        return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v11 + 24))(v11);
      }
      if (*(double *)(a2 + 44) > 15.0)
        return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v11 + 24))(v11);
      if (*(_BYTE *)(a1 + 464))
      {
        v15 = *(double *)(a2 + 76);
        if (a5 <= 0 && vabdd_f64(v15, *(double *)(a1 + 592)) <= 31.0)
          return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v11 + 24))(v11);
      }
      else
      {
        if (a5 < 1)
          return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v11 + 24))(v11);
        v15 = *(double *)(a2 + 76);
      }
      *(double *)(a1 + 592) = v15;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v16 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        v17 = *(_QWORD *)(a1 + 472);
        v18 = *(_QWORD *)(a1 + 480);
        *(_DWORD *)buf = 134283777;
        v54 = v17;
        v55 = 2049;
        v56 = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "DEM,requestDownload, Requesting DEM Tile download,lat,%{private}.7lf,lon,%{private}.7lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        v30 = *(_QWORD *)(a1 + 472);
        v31 = *(_QWORD *)(a1 + 480);
        v49 = 134283777;
        v50 = v30;
        v51 = 2049;
        v52 = v31;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "DEM,requestDownload, Requesting DEM Tile download,lat,%{private}.7lf,lon,%{private}.7lf", &v49, 22);
        v33 = (uint8_t *)v32;
        sub_100512490("Generic", 1, 0, 2, "void CLDigitalElevationModel::downloadIfNeeded(const CLDaemonLocation &, const BOOL, const BOOL, const int)", "%s\n", v32);
        if (v33 != buf)
          free(v33);
      }
      if (a4)
      {
        if (*(double *)(a2 + 20) <= 10.0)
          v19 = 1;
        else
          v19 = a3;
        if ((v19 & 1) == 0)
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_10219ECA8);
          v20 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "DEM,allowing download request over cell due to poor GNSS signal conditions", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_10219ECA8);
            LOWORD(v49) = 0;
            LODWORD(v41) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "DEM,allowing download request over cell due to poor GNSS signal conditions", &v49, v41);
            v37 = (uint8_t *)v36;
            sub_100512490("Generic", 1, 0, 2, "void CLDigitalElevationModel::downloadIfNeeded(const CLDaemonLocation &, const BOOL, const BOOL, const int)", "%s\n", v36);
            if (v37 != buf)
              free(v37);
          }
        }
        if (sub_1010A6AF0(a1, a1 + 400))
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_10219ECA8);
          v21 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
          {
            v22 = *(_DWORD *)(a1 + 408);
            *(_DWORD *)buf = 67109120;
            LODWORD(v54) = v22;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "DEM,allowing download request over cell due to activity,%d", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_10219ECA8);
            v38 = *(_DWORD *)(a1 + 408);
            v49 = 67109120;
            LODWORD(v50) = v38;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "DEM,allowing download request over cell due to activity,%d", &v49);
            v40 = (uint8_t *)v39;
            sub_100512490("Generic", 1, 0, 2, "void CLDigitalElevationModel::downloadIfNeeded(const CLDaemonLocation &, const BOOL, const BOOL, const int)", "%s\n", v39);
            if (v40 != buf)
              free(v40);
          }
          LOBYTE(a4) = 1;
        }
        else
        {
          LOBYTE(a4) = v19 ^ 1;
        }
      }
      Current = CFAbsoluteTimeGetCurrent();
      v24 = *(_BYTE *)(a1 + 605);
      if (v24)
        LOBYTE(a4) = 1;
      if ((a5 - 1) >= 2)
      {
        a5 = 0;
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        v25 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v54) = a5;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "DEM,downloadIfNeeded,numRingsToDownloadOverCellular,%d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_10219ECA8);
          v49 = 67109120;
          LODWORD(v50) = a5;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,downloadIfNeeded,numRingsToDownloadOverCellular,%d", &v49);
          v35 = (uint8_t *)v34;
          sub_100512490("Generic", 1, 0, 2, "void CLDigitalElevationModel::downloadIfNeeded(const CLDaemonLocation &, const BOOL, const BOOL, const int)", "%s\n", v34);
          if (v35 != buf)
            free(v35);
        }
        v24 = 1;
        LOBYTE(a4) = 1;
      }
      v26 = *(double *)(a1 + 472);
      v27 = *(double *)(a1 + 480);
      if (!sub_10011CE88(v26, v27) || sub_10011CE64(v26, v27))
      {
        v26 = *(double *)(a2 + 4);
        v27 = *(double *)(a2 + 12);
      }
      v28 = objc_msgSend(objc_msgSend(*(id *)(a1 + 368), "vendor"), "proxyForService:", CFSTR("CLTilesManager"));
      v42[0] = a4;
      v42[1] = v24;
      v42[2] = 0;
      v43 = 0xBFF0000000000000;
      v44 = a5;
      v45 = Current;
      v46 = 1;
      objc_msgSend(v28, "requestTileDownloadByType:lat:lon:seckey:details:", 1, -1, v42, v26, v27);
    }
  }
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v11 + 24))(v11);
}

void sub_10109FA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10109FB2C(uint64_t a1, _QWORD *a2)
{
  _BOOL4 v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  NSObject *v8;
  std::string *v9;
  std::string *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  std::string *v14;
  void **v15;
  std::string::size_type v16;
  char *v17;
  void **v18;
  std::string::size_type v19;
  NSObject *v20;
  std::string *v21;
  std::string *v22;
  double *v23;
  std::string *v24;
  std::string *v25;
  NSObject *v26;
  NSObject *v27;
  std::string *v28;
  std::string *v29;
  const char *v30;
  char *v31;
  const char *v32;
  char *v33;
  std::string *v34;
  const char *v35;
  const char *v36;
  char *v37;
  uint64_t v38;
  double v39[2];
  std::string v40;
  std::string v41;
  void *__p[2];
  uint64_t v43;
  _BYTE v44[12];
  __int16 v45;
  std::string *v46;
  __int16 v47;
  uint64_t v48;
  _BYTE buf[22];
  __int16 v50;
  uint64_t v51;

  if (*(char *)(a1 + 463) < 0)
  {
    sub_100115CE4(__p, *(void **)(a1 + 440), *(_QWORD *)(a1 + 448));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 440);
    v43 = *(_QWORD *)(a1 + 456);
  }
  sub_100FBF2B0(&v41);
  sub_1001E4804(buf);
  v4 = sub_1000BCB64(*(uint64_t *)buf, "DEMTilesServerUrl", &v41);
  v5 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v6 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v4)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v9 = &v41;
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v9 = (std::string *)v41.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "DEM, server, %{public}s, overridden, 1", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v10 = &v41;
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v10 = (std::string *)v41.__r_.__value_.__r.__words[0];
      *(_DWORD *)v44 = 136446210;
      *(_QWORD *)&v44[4] = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM, server, %{public}s, overridden, 1", v44, 12);
      v12 = (char *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLDigitalElevationModel::downloadAvailabilityFile(const CFAbsoluteTime &)", "%s\n", v11);
LABEL_93:
      if (v12 != buf)
        free(v12);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v13 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v14 = &v41;
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v14 = (std::string *)v41.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "DEM, server, %{public}s, overridden, 0", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v34 = &v41;
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v34 = (std::string *)v41.__r_.__value_.__r.__words[0];
      *(_DWORD *)v44 = 136446210;
      *(_QWORD *)&v44[4] = v34;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM, server, %{public}s, overridden, 0", v44, 12);
      v12 = (char *)v35;
      sub_100512490("Generic", 1, 0, 2, "void CLDigitalElevationModel::downloadAvailabilityFile(const CFAbsoluteTime &)", "%s\n", v35);
      goto LABEL_93;
    }
  }
  std::string::append(&v41, "/");
  if (v43 >= 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if (v43 >= 0)
    v16 = HIBYTE(v43);
  else
    v16 = (std::string::size_type)__p[1];
  std::string::append(&v41, (const std::string::value_type *)v15, v16);
  v17 = (char *)sub_1001FD94C();
  sub_1000B7884(v17, (uint64_t)&v40);
  if (v43 >= 0)
    v18 = __p;
  else
    v18 = (void **)__p[0];
  if (v43 >= 0)
    v19 = HIBYTE(v43);
  else
    v19 = (std::string::size_type)__p[1];
  std::string::append(&v40, (const std::string::value_type *)v18, v19);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_10219ECA8);
  v20 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v21 = &v41;
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v21 = (std::string *)v41.__r_.__value_.__r.__words[0];
    v22 = &v40;
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v22 = (std::string *)v40.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = v21;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v22;
    v50 = 2050;
    v51 = 0x40AC200000000000;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "DEM,download request,url,%{public}s,storeTo,%{public}s,retryInterval,%{public}.1lf", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v28 = &v41;
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v28 = (std::string *)v41.__r_.__value_.__r.__words[0];
    v29 = &v40;
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v29 = (std::string *)v40.__r_.__value_.__r.__words[0];
    *(_DWORD *)v44 = 136446722;
    *(_QWORD *)&v44[4] = v28;
    v45 = 2082;
    v46 = v29;
    v47 = 2050;
    v48 = 0x40AC200000000000;
    LODWORD(v38) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,download request,url,%{public}s,storeTo,%{public}s,retryInterval,%{public}.1lf", v44, v38);
    v31 = (char *)v30;
    sub_100512490("Generic", 1, 0, 2, "void CLDigitalElevationModel::downloadAvailabilityFile(const CFAbsoluteTime &)", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
  *(_QWORD *)(a1 + 584) = *a2;
  *(_QWORD *)v44 = 0x404E000000000000;
  v23 = (double *)(a1 + 120);
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = &v41;
  else
    v24 = (std::string *)v41.__r_.__value_.__r.__words[0];
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = &v40;
  else
    v25 = (std::string *)v40.__r_.__value_.__r.__words[0];
  if (sub_100604D40((uint64_t)v23, (const std::string::value_type *)v24, (const std::string::value_type *)v25, (double *)v44))
  {
    *(_QWORD *)buf = sub_1010A704C();
    v39[0] = sub_1010A6B64();
    if ((sub_10060538C((uint64_t)v23, (double *)buf, v39) & 1) != 0)
    {
      *(double *)buf = *(double *)a2 + 3600.0 + -0.5;
      sub_100605798(v23, (double *)buf);
      goto LABEL_69;
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v26 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "#Warning,DEM,could not setUpdateSource AVL file updater", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      LOWORD(v39[0]) = 0;
      LODWORD(v38) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#Warning,DEM,could not setUpdateSource AVL file updater", v39, v38);
      v37 = (char *)v36;
      sub_100512490("Generic", 1, 0, 2, "void CLDigitalElevationModel::downloadAvailabilityFile(const CFAbsoluteTime &)", "%s\n", v36);
      if (v37 != buf)
        free(v37);
    }
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_10219ECA8);
  v27 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "#Warning,DEM,could not setUpdateRate AVl file updater", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    LOWORD(v39[0]) = 0;
    LODWORD(v38) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#Warning,DEM,could not setUpdateRate AVl file updater", v39, v38);
    v33 = (char *)v32;
    sub_100512490("Generic", 1, 0, 2, "void CLDigitalElevationModel::downloadAvailabilityFile(const CFAbsoluteTime &)", "%s\n", v32);
    if (v33 != buf)
      free(v33);
  }
LABEL_69:
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43) < 0)
    operator delete(__p[0]);
}

void sub_1010A0440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010A04E4(uint64_t a1, char a2)
{
  _BYTE *v3;

  v3 = (_BYTE *)(a1 + 104);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 104) + 16))(a1 + 104);
  v3[544] = a2;
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 24))(v3);
}

uint64_t sub_1010A054C(uint64_t a1, double *a2, _QWORD *a3, double a4, double a5, double a6, double a7, double a8)
{
  NSObject *v9;
  _BOOL4 v10;
  uint64_t result;
  const char *v12;
  NSObject *v13;
  _BOOL4 v14;
  NSObject *v15;
  _BOOL4 v16;
  __int128 v21;
  double v22;
  double v23;
  NSObject *v24;
  const char *v25;
  NSObject *v26;
  _BOOL4 v27;
  uint8_t *v28;
  NSObject *v29;
  double v30;
  double v31;
  NSObject *v32;
  double v33;
  BOOL v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  double v45;
  double *v46;
  uint64_t v47;
  uint8_t *v48;
  _QWORD v49[2];
  uint8_t buf[1640];

  if (a6 > 90.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#Error,DEM,latitude_degs>90.0", buf, 2u);
    }
    v10 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v10)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      LOWORD(v49[0]) = 0;
      v12 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,DEM,latitude_degs>90.0", v49, 2, v49[0]);
LABEL_47:
      v28 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLDigitalElevationModel::CLDEMAltitudeFilter::update(const double, double, const double, const double, const double, double &, double &)", "%s\n", v12);
      if (v28 != buf)
        free(v28);
      return 0;
    }
    return result;
  }
  if (a6 >= -90.0)
  {
    if (a4 < -500.0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v15 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#Error,DEM,heightDEM<-500", buf, 2u);
      }
      v16 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v16)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        LOWORD(v49[0]) = 0;
        v12 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,DEM,heightDEM<-500", v49, 2, v49[0]);
        goto LABEL_47;
      }
      return result;
    }
    if (a5 <= 0.0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v26 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "#Error,DEM,heightVariance<=0", buf, 2u);
      }
      v27 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v27)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        LOWORD(v49[0]) = 0;
        v12 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,DEM,heightVariance<=0", v49, 2, v49[0]);
        goto LABEL_47;
      }
      return result;
    }
    v21 = *(_OWORD *)(a1 + 168);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 152);
    *(_OWORD *)(a1 + 128) = v21;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a1 + 184);
    *(double *)(a1 + 168) = a4;
    *(double *)(a1 + 176) = a5;
    *(double *)(a1 + 152) = a6;
    *(double *)(a1 + 160) = a7;
    v22 = *(double *)(a1 + 192);
    *(double *)(a1 + 184) = a8;
    if (v22 == -9999.0)
      goto LABEL_56;
    *(double *)(a1 + 208) = v22;
    *(_QWORD *)(a1 + 192) = 0xC0C3878000000000;
    v23 = a8 - *(double *)(a1 + 144);
    if (v23 < 0.0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v24 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#Warning,DEM,deltaT<0,DEM height filter internal_reset", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_56;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      LOWORD(v49[0]) = 0;
      v25 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,DEM,deltaT<0,DEM height filter internal_reset", v49, 2, v49[0]);
LABEL_104:
      v48 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::CLDEMAltitudeFilter::update(const double, double, const double, const double, const double, double &, double &)", "%s\n", v25);
      if (v48 == buf)
      {
LABEL_56:
        *(double *)(a1 + 192) = a4;
        *(double *)(a1 + 48) = a5;
        *(double *)(a1 + 56) = a5;
        *(_QWORD *)(a1 + 104) = 0;
        *(_QWORD *)(a1 + 216) = 0;
        *(_QWORD *)(a1 + 224) = 0;
        *(_WORD *)(a1 + 232) = 0;
        *(_QWORD *)(a1 + 240) = 0;
        *(_QWORD *)(a1 + 248) = 0;
        *a2 = a4;
LABEL_57:
        *a3 = *(_QWORD *)(a1 + 48);
        return 1;
      }
LABEL_105:
      free(v48);
      goto LABEL_56;
    }
    if (v23 > 2400.0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v29 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "#Warning,DEM,Height filter timed out,DEM height filter internal_reset", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_56;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      LOWORD(v49[0]) = 0;
      v25 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#Warning,DEM,Height filter timed out,DEM height filter internal_reset", v49, 2, v49[0]);
      goto LABEL_104;
    }
    v30 = *(double *)(a1 + 128);
    v31 = sub_10011E634((double *)(a1 + 8), a6, a7, *(double *)(a1 + 112), *(double *)(a1 + 120), a4);
    *(double *)(a1 + 216) = v31;
    if (v31 > 3500.0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v32 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "DEM,Height filter exceeded maximum change in horizontal position,DEM height filter internal_reset", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_56;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      LOWORD(v49[0]) = 0;
      v48 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,Height filter exceeded maximum change in horizontal position,DEM height filter internal_reset", v49, 2);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::CLDEMAltitudeFilter::update(const double, double, const double, const double, const double, double &, double &)", "%s\n", (const char *)v48);
      if (v48 == buf)
        goto LABEL_56;
      goto LABEL_105;
    }
    v33 = (a4 - v30) / v31;
    v34 = v31 < 5.0;
    v35 = 0.0;
    if (v34)
      v36 = 0.0;
    else
      v36 = v33;
    v37 = *(double *)(a1 + 208);
    *(double *)(a1 + 200) = v37;
    *(double *)(a1 + 64) = v23 * 1.3;
    *(double *)(a1 + 48) = v23 * 1.3 + *(double *)(a1 + 48);
    *(_QWORD *)(a1 + 56) = 0x40C3880000000000;
    if ((*(_BYTE *)(a1 + 232) || *(_BYTE *)(a1 + 233))
      && (v35 = sub_10011E634((double *)(a1 + 8), *(double *)(a1 + 152), *(double *)(a1 + 160), *(double *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 168)), *(_BYTE *)(a1 + 232)))
    {
      if (*(double *)(a1 + 168) < *(double *)(a1 + 96) + v35 * -0.07)
        goto LABEL_73;
    }
    else
    {
      if (!*(_BYTE *)(a1 + 233))
      {
        v42 = fabs(v36);
        if (v42 <= 0.4)
        {
          if (v42 <= 0.32)
          {
            v38 = *(double *)(a1 + 176);
            v43 = 0.0;
            if (v42 > 0.18)
            {
              v38 = v38 * 5.0;
              v43 = 0.5;
            }
          }
          else
          {
            v38 = *(double *)(a1 + 176) * 20.0;
            v43 = 1.0;
          }
        }
        else
        {
          v38 = *(double *)(a1 + 176) * 25.0;
          v43 = 2.0;
        }
        v44 = 248;
        if (v36 < 0.0)
          v44 = 240;
        v45 = *(double *)(a1 + v44);
        *(double *)(a1 + 56) = v38;
        *(double *)(a1 + v44) = v43 + v45;
        if (v36 <= 0.32 || *(double *)(a1 + 248) <= 4.1 || *(double *)(a1 + 184) - *(double *)(a1 + 104) <= 30.0)
        {
          v46 = (double *)(a1 + 240);
          if (v36 >= -0.32 || *v46 <= 4.1 || *(double *)(a1 + 184) - *(double *)(a1 + 104) <= 30.0)
          {
            if (v42 < 0.18)
            {
              *v46 = 0.0;
              *(_QWORD *)(a1 + 248) = 0;
            }
            goto LABEL_81;
          }
          *(_BYTE *)(a1 + 232) = 1;
        }
        else
        {
          *(_BYTE *)(a1 + 233) = 1;
        }
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 152);
        v47 = *(_QWORD *)(a1 + 184);
        *(_QWORD *)(a1 + 96) = *(_QWORD *)(a1 + 200);
        *(_QWORD *)(a1 + 104) = v47;
        *(_QWORD *)(a1 + 56) = 0x40C3880000000000;
        v38 = 10000.0;
LABEL_81:
        v39 = *(double *)(a1 + 48);
        v40 = v39 / (v39 + v38);
        *(double *)(a1 + 48) = v39 * (1.0 - v40);
        v41 = *(double *)(a1 + 200) + (a4 - v37) * v40;
        *(double *)(a1 + 192) = v41;
        *a2 = v41;
        goto LABEL_57;
      }
      if (*(double *)(a1 + 168) > *(double *)(a1 + 96) + v35 * 0.1)
      {
LABEL_73:
        if (*(double *)(a1 + 184) - *(double *)(a1 + 104) > 1800.0 || v35 > 3500.0)
          goto LABEL_56;
        v38 = *(double *)(a1 + 56);
        goto LABEL_81;
      }
    }
    *(_WORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 240) = 0;
    *(_QWORD *)(a1 + 248) = 0;
    v38 = *(double *)(a1 + 176);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 184);
    if (fabs(v36) > 0.18)
      v38 = v38 * 10.0;
    *(double *)(a1 + 56) = v38;
    goto LABEL_81;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_10219ECA8);
  v13 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#Error,DEM,latitude_degs<-90.0", buf, 2u);
  }
  v14 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v14)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    LOWORD(v49[0]) = 0;
    v12 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,DEM,latitude_degs<-90.0", v49, 2, v49[0]);
    goto LABEL_47;
  }
  return result;
}

void sub_1010A10BC(uint64_t a1, void *a2)
{
  *(_QWORD *)a1 = off_10219EC88;
  *(_QWORD *)(a1 + 8) = a1 + 8;
  *(_QWORD *)(a1 + 16) = a1 + 8;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  sub_1015A2E04((_QWORD *)(a1 + 48), "cldavl.avl");
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  sub_10055D44C(a1 + 104, "cldem", 1, 1);
  sub_100602438(a1 + 120, a2, (uint64_t)sub_1010A163C, a1);
}

void sub_1010A1558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  void **v16;
  void **v17;
  uint64_t v19;

  if (*(char *)(v13 + 975) < 0)
    operator delete(*v17);
  if (*(char *)(v13 + 575) < 0)
    operator delete(*(void **)(v13 + 552));
  if (*(char *)(v13 + 463) < 0)
    operator delete(*v16);
  if (*(char *)(v13 + 439) < 0)
    operator delete(*v15);
  v19 = *(_QWORD *)(v13 + 376);
  *(_QWORD *)(v13 + 376) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  sub_100602508(v14);
  sub_10055D4D0(a12);
  sub_100FB12FC(v12);
  _Unwind_Resume(a1);
}

void sub_1010A163C(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  os_activity_scope_state_s state;
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;

  CLProfilingIdentify("CLDigitalElevationModel::onAvlFileUpdated");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 368), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10219ECC8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v9 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDigitalElevationModel::onAvlFileUpdated", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219ECC8);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "activity";
      v16 = 2050;
      v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDigitalElevationModel::onAvlFileUpdated\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v9 = 0;
  }
  sub_1010A5968(a3, a1, a2);
  if (v9)
    os_activity_scope_leave(&state);
}

void sub_1010A17F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1010A1814(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLDigitalElevationModel::onManagerNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 368), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10219ECC8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDigitalElevationModel::onManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219ECC8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDigitalElevationModel::onManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1010A75A0(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1010A19CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010A19EC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10219EC88;

  *(_QWORD *)(a1 + 392) = 0;
  sub_10109F104(a1);
  if (*(char *)(a1 + 975) < 0)
    operator delete(*(void **)(a1 + 952));
  if (*(char *)(a1 + 575) < 0)
    operator delete(*(void **)(a1 + 552));
  if (*(char *)(a1 + 463) < 0)
    operator delete(*(void **)(a1 + 440));
  if (*(char *)(a1 + 439) < 0)
    operator delete(*(void **)(a1 + 416));
  v2 = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 376) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_100602508(a1 + 120);
  sub_10055D4D0(a1 + 104);
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  sub_1000F34E0((_QWORD *)(a1 + 8));
  return a1;
}

void sub_1010A1AC4(uint64_t a1)
{
  sub_1010A19EC(a1);
  operator delete();
}

id sub_1010A1B28(uint64_t a1, _BYTE *a2, double a3, double a4)
{
  NSObject *v8;
  double Current;
  id v10;
  NSObject *v11;
  CFAbsoluteTime v12;
  std::string *p_p;
  NSObject *v14;
  std::string *v15;
  uint64_t v17;
  char v18;
  id v19;
  std::string *v20;
  char *v21;
  uint64_t v22;
  CFAbsoluteTime v23;
  char *v24;
  std::string *data;
  char *v26;
  uint64_t v27;
  std::string __p;
  int v29;
  double v30;
  __int16 v31;
  double v32;
  stat buf[11];

  memset(&__p, 0, sizeof(__p));
  *a2 = 0;
  HIWORD(v27) = 0;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_10219ECA8);
  v8 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    buf[0].st_dev = 134283777;
    *(double *)&buf[0].st_mode = a3;
    WORD2(buf[0].st_ino) = 2049;
    *(double *)((char *)&buf[0].st_ino + 6) = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "DEM,loadTile,lat,%{private}.7lf,lon,%{private}.7lf", (uint8_t *)buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v29 = 134283777;
    v30 = a3;
    v31 = 2049;
    v32 = a4;
    LODWORD(v27) = 22;
    v21 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,loadTile,lat,%{private}.7lf,lon,%{private}.7lf", &v29, v27, __p.__r_.__value_.__r.__words[0], __p.__r_.__value_.__l.__size_, __p.__r_.__value_.__r.__words[2]);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::loadTile(double, double, BOOL &)", "%s\n", v21);
    if (v21 != (char *)buf)
      free(v21);
  }
  Current = CFAbsoluteTimeGetCurrent();
  v10 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 368), "vendor"), "proxyForService:", CFSTR("CLTilesManager")), "syncgetTileFilePath:latitude:longitude:isFileAccessible:isTileNotExistingOnServer:", 1, (char *)&v27 + 7, (char *)&v27 + 6, a3, a4);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_10219ECA8);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v12 = CFAbsoluteTimeGetCurrent();
    buf[0].st_dev = 134349056;
    *(double *)&buf[0].st_mode = v12 - Current;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "DEM,loadTile,CLTilesManager,getTileFile,took,%{public}.1lf", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v22 = qword_1022A0078;
    v23 = CFAbsoluteTimeGetCurrent();
    v29 = 134349056;
    v30 = v23 - Current;
    LODWORD(v27) = 12;
    v24 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 2, "DEM,loadTile,CLTilesManager,getTileFile,took,%{public}.1lf", &v29, v27);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::loadTile(double, double, BOOL &)", "%s\n", v24);
    if (v24 != (char *)buf)
      free(v24);
  }
  if (!v10)
    goto LABEL_27;
  sub_1015A2E04(buf, (char *)objc_msgSend(v10, "UTF8String"));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&buf[0].st_dev;
  __p.__r_.__value_.__r.__words[2] = *(_QWORD *)&buf[0].st_uid;
  if (!HIBYTE(v27))
  {
LABEL_26:
    v10 = 0;
LABEL_27:
    *a2 = 1;
    goto LABEL_28;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (stat((const char *)p_p, buf))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v14 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v15 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
      buf[0].st_dev = 136446210;
      *(_QWORD *)&buf[0].st_mode = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "#Warning,Unexpected, this tile should be on disk,%{public}s", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      *(double *)&data = COERCE_DOUBLE(&__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        data = (std::string *)__p.__r_.__value_.__l.__data_;
      v29 = 136446210;
      v30 = *(double *)&data;
      LODWORD(v27) = 12;
      v26 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,Unexpected, this tile should be on disk,%{public}s", &v29, v27);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::loadTile(double, double, BOOL &)", "%s\n", v26);
      if (v26 != (char *)buf)
        free(v26);
    }
    goto LABEL_26;
  }
  LOBYTE(buf[0].st_dev) = 0;
  v17 = sub_1010A3204(a1 + 912, &__p, (BOOL *)buf);
  v10 = (id)v17;
  if (LOBYTE(buf[0].st_dev))
    v18 = v17;
  else
    v18 = 1;
  if ((v18 & 1) == 0)
  {
    v19 = objc_msgSend(objc_msgSend(*(id *)(a1 + 368), "vendor"), "proxyForService:", CFSTR("CLTilesManager"));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &__p;
    else
      v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
    objc_msgSend(v19, "syncgetDeleteTileFile:atPath:", 1, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v20));
    *a2 = 1;
  }
LABEL_28:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1010A210C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1010A214C(uint64_t a1, uint64_t a2, double a3, long double a4)
{
  NSObject *v6;
  _BOOL8 result;
  const char *v8;
  NSObject *v9;
  double v11;
  unint64_t v12;
  double v13;
  double v14;
  NSObject *v15;
  double v16;
  double v17;
  NSObject *v18;
  long double v19;
  double v20;
  double v21;
  double v22;
  NSObject *v23;
  double v24;
  NSObject *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  NSObject *v30;
  NSObject *v31;
  double v32;
  int v33;
  double v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  NSObject *v41;
  double v42;
  double v43;
  NSObject *v44;
  double v45;
  double v46;
  NSObject *v47;
  unint64_t v48;
  double v49;
  unint64_t v50;
  double v51;
  NSObject *v52;
  unint64_t v53;
  double v54;
  unint64_t v55;
  double v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  uint8_t *v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  int v68;
  int v69;
  unsigned int v70;
  int v71;
  float v72;
  float v73;
  float v74;
  float v75;
  char *v76;
  float v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  double v81;
  __int16 v82;
  double v83;
  uint8_t buf[4];
  double v85;
  __int16 v86;
  double v87;

  *(_DWORD *)(a2 + 784) = -2;
  if (!*(_BYTE *)(a1 + 32))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "#Warning,DEM,current tile is not valid", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      LOWORD(v80) = 0;
      v8 = (const char *)((uint64_t (*)(uint64_t, _QWORD, uint8_t *, uint64_t, const mach_header_64 *, uint64_t, uint64_t, const char *, ...))_os_log_send_and_compose_impl)(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,current tile is not valid", &v80, 2);
      goto LABEL_119;
    }
    return result;
  }
  if (*(double *)(a1 + 136) == 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#Warning,DEM,cellsize == 0", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      LOWORD(v80) = 0;
      v8 = (const char *)((uint64_t (*)(uint64_t, _QWORD, uint8_t *, uint64_t, const mach_header_64 *, uint64_t, uint64_t, const char *, ...))_os_log_send_and_compose_impl)(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,cellsize == 0", &v80, 2);
LABEL_119:
      v61 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLDigitalElevationModel::getFlatnessMetric(const CLDEMTile &, const double, const double, GNSS::DaemonLocation &)", "%s\n", v8);
      if (v61 != buf)
        free(v61);
      return 0;
    }
  }
  else
  {
    *(_DWORD *)(a2 + 784) = -3;
    if (a3 < -90.0 || a3 > 90.0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v18 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134283521;
        v85 = a3;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "#Warning,DEM,latitude,%{private}.9lf,out of range", buf, 0xCu);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        v80 = 134283521;
        v81 = a3;
        v8 = (const char *)((uint64_t (*)(uint64_t, _QWORD, uint8_t *, uint64_t, const mach_header_64 *, uint64_t, uint64_t, const char *, ...))_os_log_send_and_compose_impl)(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,latitude,%{private}.9lf,out of range", &v80, 12);
        goto LABEL_119;
      }
      return result;
    }
    sub_100080DCC(a4);
    v14 = *(double *)(a1 + 128);
    if (v14 <= a3)
    {
      v19 = v11;
      *(_DWORD *)(a2 + 784) = -2;
      v20 = *(double *)(a1 + 136);
      LOWORD(v12) = *(_WORD *)(a1 + 108);
      v21 = (double)v12;
      v22 = v14 + v20 * v21;
      if (v22 >= a3)
      {
        v24 = *(double *)(a1 + 120);
        if (v19 >= v24)
        {
          LOWORD(v21) = *(_WORD *)(a1 + 110);
          v28 = (double)*(unint64_t *)&v21;
          v29 = v24 + v20 * v28;
          if (v19 <= v29)
          {
            if (sub_100080E28(a1, a3, v19, v28, v13))
            {
              if (*(float *)(a1 + 148) == *(float *)(a1 + 144))
              {
                *(_DWORD *)(a2 + 784) = *(unsigned __int16 *)(a1 + 110) * *(unsigned __int16 *)(a1 + 108);
                *(_DWORD *)(a2 + 788) = 1065353216;
              }
              else
              {
                v32 = *(double *)(a1 + 136);
                v33 = (int)(floor((v19 - *(double *)(a1 + 120)) / v32) + 0.5);
                if (v33 < 0)
                {
                  if (qword_1022A0070 != -1)
                    dispatch_once(&qword_1022A0070, &stru_10219ECA8);
                  v41 = qword_1022A0078;
                  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
                  {
                    v42 = *(double *)(a1 + 120);
                    *(_DWORD *)buf = 134283777;
                    v85 = v19;
                    v86 = 2049;
                    v87 = v42;
                    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "#Warning,DEM,longitude,%{private}.9lf,invalid,minLongitude,%{private}.9lf", buf, 0x16u);
                  }
                  result = sub_1001BFF7C(115, 2);
                  if (result)
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A0070 != -1)
                      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
                    v43 = *(double *)(a1 + 120);
                    v80 = 134283777;
                    v81 = v19;
                    v82 = 2049;
                    v83 = v43;
                    v8 = (const char *)((uint64_t (*)(uint64_t, _QWORD, uint8_t *, uint64_t, const mach_header_64 *, uint64_t, uint64_t, const char *, ...))_os_log_send_and_compose_impl)(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,longitude,%{private}.9lf,invalid,minLongitude,%{private}.9lf", &v80, 22);
                    goto LABEL_119;
                  }
                  return result;
                }
                v34 = floor((a3 - *(double *)(a1 + 128)) / v32) + 0.5;
                v35 = (int)v34;
                if ((int)v34 < 0)
                {
                  if (qword_1022A0070 != -1)
                    dispatch_once(&qword_1022A0070, &stru_10219ECA8);
                  v44 = qword_1022A0078;
                  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
                  {
                    v45 = *(double *)(a1 + 128);
                    *(_DWORD *)buf = 134283777;
                    v85 = a3;
                    v86 = 2049;
                    v87 = v45;
                    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "#Warning,DEM,latitude,%{private}.9lf,invalid,minLatitude,%{private}.9lf", buf, 0x16u);
                  }
                  result = sub_1001BFF7C(115, 2);
                  if (result)
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A0070 != -1)
                      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
                    v46 = *(double *)(a1 + 128);
                    v80 = 134283777;
                    v81 = a3;
                    v82 = 2049;
                    v83 = v46;
                    v8 = (const char *)((uint64_t (*)(uint64_t, _QWORD, uint8_t *, uint64_t, const mach_header_64 *, uint64_t, uint64_t, const char *, ...))_os_log_send_and_compose_impl)(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,latitude,%{private}.9lf,invalid,minLatitude,%{private}.9lf", &v80, 22);
                    goto LABEL_119;
                  }
                  return result;
                }
                v36 = *(unsigned __int16 *)(a1 + 110);
                if (v33 >= v36)
                {
                  if (qword_1022A0070 != -1)
                    dispatch_once(&qword_1022A0070, &stru_10219ECA8);
                  v47 = qword_1022A0078;
                  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
                  {
                    LOWORD(v48) = *(_WORD *)(a1 + 110);
                    v49 = *(double *)(a1 + 120) + (double)v48 * *(double *)(a1 + 136);
                    *(_DWORD *)buf = 134283777;
                    v85 = v19;
                    v86 = 2049;
                    v87 = v49;
                    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "#Warning,DEM,longitude,%{private}.9lf,invalid,maxLongitude,%{private}.9lf", buf, 0x16u);
                  }
                  result = sub_1001BFF7C(115, 2);
                  if (result)
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A0070 != -1)
                      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
                    LOWORD(v50) = *(_WORD *)(a1 + 110);
                    v51 = *(double *)(a1 + 120) + (double)v50 * *(double *)(a1 + 136);
                    v80 = 134283777;
                    v81 = v19;
                    v82 = 2049;
                    v83 = v51;
                    v8 = (const char *)((uint64_t (*)(uint64_t, _QWORD, uint8_t *, uint64_t, const mach_header_64 *, uint64_t, uint64_t, const char *, ...))_os_log_send_and_compose_impl)(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,longitude,%{private}.9lf,invalid,maxLongitude,%{private}.9lf", &v80, 22);
                    goto LABEL_119;
                  }
                  return result;
                }
                v37 = *(unsigned __int16 *)(a1 + 108);
                if (v35 >= v37)
                {
                  if (qword_1022A0070 != -1)
                    dispatch_once(&qword_1022A0070, &stru_10219ECA8);
                  v52 = qword_1022A0078;
                  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
                  {
                    LOWORD(v53) = *(_WORD *)(a1 + 108);
                    v54 = *(double *)(a1 + 128) + (double)v53 * *(double *)(a1 + 136);
                    *(_DWORD *)buf = 134283777;
                    v85 = a3;
                    v86 = 2049;
                    v87 = v54;
                    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_INFO, "#Warning,DEM,latitude,%{private}.9lf,invalid,maxLatitude,%{private}.9lf", buf, 0x16u);
                  }
                  result = sub_1001BFF7C(115, 2);
                  if (result)
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A0070 != -1)
                      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
                    LOWORD(v55) = *(_WORD *)(a1 + 108);
                    v56 = *(double *)(a1 + 128) + (double)v55 * *(double *)(a1 + 136);
                    v80 = 134283777;
                    v81 = a3;
                    v82 = 2049;
                    v83 = v56;
                    v8 = (const char *)((uint64_t (*)(uint64_t, _QWORD, uint8_t *, uint64_t, const mach_header_64 *, uint64_t, uint64_t, const char *, ...))_os_log_send_and_compose_impl)(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,latitude,%{private}.9lf,invalid,maxLatitude,%{private}.9lf", &v80, 22);
                    goto LABEL_119;
                  }
                  return result;
                }
                v38 = v33;
                v39 = *(_QWORD *)(a1 + 24);
                v40 = *(unsigned __int8 *)(v39 + v33 + *(unsigned __int16 *)(a1 + 110) * (uint64_t)v35);
                if (v40 == *(unsigned __int8 *)(a1 + 80))
                {
                  *(_DWORD *)(a2 + 784) = -2;
                }
                else
                {
                  v79 = v33;
                  v57 = v33 + 1;
                  if (v40 == *(unsigned __int8 *)(v39 + *(unsigned __int16 *)(a1 + 110) * (uint64_t)v35 + v38 + 1)
                    && (v58 = (v35 + 1) * v36, v40 == *(unsigned __int8 *)(v39 + v58 + v38))
                    && v40 == *(unsigned __int8 *)(v39 + v58 + v57))
                  {
                    v78 = (int)v34;
                    v59 = v79 - 6;
                    if (v79 >= 6)
                    {
                      v60 = v79 + 6;
                      if (v79 + 6 >= v36)
                      {
                        v60 = v36 - 1;
                        v59 = v36 - 12;
                      }
                    }
                    else
                    {
                      v59 = 0;
                      v60 = 11;
                    }
                    v62 = v78 - 6;
                    if (v78 >= 6)
                    {
                      v63 = v78 + 6;
                      if (v78 + 6 >= v37)
                      {
                        v63 = v37 - 1;
                        v62 = v37 - 12;
                      }
                    }
                    else
                    {
                      v62 = 0;
                      v63 = 11;
                    }
                    v64 = sub_1010A5474(a1, v62, v63, v59, v60, v79, v78, 12);
                    *(_DWORD *)(a2 + 784) = v64;
                    if (v64 >= 143)
                    {
                      v65 = v79 - 20;
                      if (v79 >= 0x14)
                      {
                        v66 = v79 + 20;
                        v67 = *(unsigned __int16 *)(a1 + 110);
                        if (v79 + 20 >= v67)
                        {
                          v66 = v67 - 1;
                          v65 = v67 - 40;
                        }
                      }
                      else
                      {
                        v65 = 0;
                        v66 = 39;
                      }
                      v68 = v78 - 20;
                      if (v78 >= 0x14)
                      {
                        v69 = v78 + 20;
                        v70 = *(unsigned __int16 *)(a1 + 108);
                        if (v78 + 20 >= v70)
                        {
                          v69 = v70 - 1;
                          v68 = v70 - 40;
                        }
                      }
                      else
                      {
                        v68 = 0;
                        v69 = 39;
                      }
                      v71 = sub_1010A5474(a1, v68, v69, v65, v66, v79, v78, 40);
                      *(_DWORD *)(a2 + 784) = v71;
                      v72 = *(float *)(a1 + 148);
                      v73 = 0.9;
                      v74 = 1.0;
                      if (v72 >= 5.0)
                        v73 = 1.0;
                      if (*(float *)(a1 + 156) > 1.0)
                      {
                        v75 = *(float *)(a1 + 144) - v72;
                        if (v75 >= 2000.0)
                          v74 = 0.0005;
                        else
                          v74 = (float)(v75 / -2000.0) + 1.0;
                      }
                      v77 = 0.25;
                      if (v71 >= 500)
                        v77 = (float)((float)v71 / 1600.0) * 0.2 + 0.8;
                      *(float *)(a2 + 788) = (float)(v73 * v74) * v77;
                    }
                  }
                  else
                  {
                    *(_QWORD *)(a2 + 784) = 0x3F80000000000000;
                  }
                }
              }
            }
            else
            {
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_10219ECA8);
              v31 = qword_1022A0078;
              if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 134283777;
                v85 = a3;
                v86 = 2049;
                v87 = v19;
                _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "#Warning,DEM,latitude,%{private}.9lf,longitude,%{private}.9lf,is not in the current DEM tile", buf, 0x16u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_10219ECA8);
                v80 = 134283777;
                v81 = a3;
                v82 = 2049;
                v83 = v19;
                v76 = (char *)((uint64_t (*)(uint64_t, _QWORD, uint8_t *, uint64_t, const mach_header_64 *, uint64_t, uint64_t, const char *, ...))_os_log_send_and_compose_impl)(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,latitude,%{private}.9lf,longitude,%{private}.9lf,is not in the current DEM tile", &v80, 22);
                sub_100512490("Generic", 1, 0, 2, "static BOOL CLDigitalElevationModel::getFlatnessMetric(const CLDEMTile &, const double, const double, GNSS::DaemonLocation &)", "%s\n", v76);
                if (v76 != (char *)buf)
                  free(v76);
              }
            }
            return 1;
          }
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_10219ECA8);
          v30 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134283777;
            v85 = v19;
            v86 = 2049;
            v87 = v29;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "#Warning,DEM,longitude,%{private}.9lf,exceedsMax,%{private}.9lf", buf, 0x16u);
          }
          result = sub_1001BFF7C(115, 2);
          if (result)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_10219ECA8);
            v80 = 134283777;
            v81 = v19;
            v82 = 2049;
            v83 = v29;
            v8 = (const char *)((uint64_t (*)(uint64_t, _QWORD, uint8_t *, uint64_t, const mach_header_64 *, uint64_t, uint64_t, const char *, ...))_os_log_send_and_compose_impl)(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,longitude,%{private}.9lf,exceedsMax,%{private}.9lf", &v80, 22);
            goto LABEL_119;
          }
        }
        else
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_10219ECA8);
          v25 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
          {
            v26 = *(double *)(a1 + 120);
            *(_DWORD *)buf = 134283777;
            v85 = v19;
            v86 = 2049;
            v87 = v26;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "#Warning,DEM,longitude,%{private}.9lf,lessThanMin,%{private}.9lf", buf, 0x16u);
          }
          result = sub_1001BFF7C(115, 2);
          if (result)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_10219ECA8);
            v27 = *(double *)(a1 + 120);
            v80 = 134283777;
            v81 = v19;
            v82 = 2049;
            v83 = v27;
            v8 = (const char *)((uint64_t (*)(uint64_t, _QWORD, uint8_t *, uint64_t, const mach_header_64 *, uint64_t, uint64_t, const char *, ...))_os_log_send_and_compose_impl)(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,longitude,%{private}.9lf,lessThanMin,%{private}.9lf", &v80, 22);
            goto LABEL_119;
          }
        }
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        v23 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134283777;
          v85 = a3;
          v86 = 2049;
          v87 = v22;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "#Warning,DEM,latitude,%{private}.9lf,exceedsMax,%{private}.9lf", buf, 0x16u);
        }
        result = sub_1001BFF7C(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_10219ECA8);
          v80 = 134283777;
          v81 = a3;
          v82 = 2049;
          v83 = v22;
          v8 = (const char *)((uint64_t (*)(uint64_t, _QWORD, uint8_t *, uint64_t, const mach_header_64 *, uint64_t, uint64_t, const char *, ...))_os_log_send_and_compose_impl)(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,latitude,%{private}.9lf,exceedsMax,%{private}.9lf", &v80, 22);
          goto LABEL_119;
        }
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v15 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        v16 = *(double *)(a1 + 128);
        *(_DWORD *)buf = 134283777;
        v85 = a3;
        v86 = 2049;
        v87 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "#Warning,DEM,latitude,%{private}.9lf,lessThanMin,%{private}.9lf", buf, 0x16u);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        v17 = *(double *)(a1 + 128);
        v80 = 134283777;
        v81 = a3;
        v82 = 2049;
        v83 = v17;
        v8 = (const char *)((uint64_t (*)(uint64_t, _QWORD, uint8_t *, uint64_t, const mach_header_64 *, uint64_t, uint64_t, const char *, ...))_os_log_send_and_compose_impl)(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,latitude,%{private}.9lf,lessThanMin,%{private}.9lf", &v80, 22);
        goto LABEL_119;
      }
    }
  }
  return result;
}

uint64_t sub_1010A3204(uint64_t a1, const std::string *a2, BOOL *a3)
{
  const char *v6;
  FILE *v7;
  FILE *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  const std::string *v13;
  int v14;
  uint64_t v16;
  BOOL v17;
  char *v18;
  uint64_t v19;
  char *v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  const char *v24;
  const char *v25;
  int v26;
  void *v27;
  NSObject *v28;
  const std::string *v29;
  uint64_t v30;
  uint64_t v31;
  const std::string *v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  NSObject *v36;
  uint64_t v37;
  NSObject *v38;
  const std::string *v39;
  int v40;
  uint64_t v41;
  const std::string *v42;
  int v43;
  NSObject *v44;
  const std::string *v45;
  int v46;
  uint64_t v47;
  char *v48;
  int v49;
  NSObject *v50;
  uint8_t *v51;
  NSObject *v52;
  NSObject *v53;
  int v54;
  uint64_t v55;
  int v56;
  NSObject *v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  char *v62;
  char *v63;
  uint64_t v64;
  const std::string *v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  int v70;
  const std::string *v71;
  __int16 v72;
  off_t v73;
  __int16 v74;
  _BOOL4 v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  stat v80;
  uint8_t buf[4];
  _BYTE v82[10];
  off_t st_size;
  __int16 v84;
  _BOOL4 v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;

  v68 = 0;
  v69 = 0;
  HIDWORD(v67) = 0;
  sub_1010A5210(a1);
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = (const char *)a2;
  else
    v6 = (const char *)a2->__r_.__value_.__r.__words[0];
  v7 = fopen(v6, "rb");
  if (v7)
  {
    v8 = v7;
    v9 = ftell(v7);
    if (!sub_1010A44B4(v8, a1 + 64, &v68, &v69))
    {
LABEL_12:
      fclose(v8);
LABEL_13:
      sub_1010A5210(a1);
      return 0;
    }
    if (fseek(v8, 0, 2))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#Error,DEM,fseek returned non-zero", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        LOWORD(v80.st_dev) = 0;
        LODWORD(v67) = 2;
        v63 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,DEM,fseek returned non-zero", &v80, v67);
        sub_100512490("Generic", 1, 0, 0, "static BOOL CLDigitalElevationModel::readCLDEMTileFromFile(CLDEMTile &, const std::string &, BOOL &)", "%s\n", v63);
        if (v63 != (char *)buf)
          free(v63);
      }
      goto LABEL_12;
    }
    v16 = ftell(v8);
    fclose(v8);
    if (*(unsigned __int8 *)(a1 + 91) | *(unsigned __int8 *)(a1 + 90))
    {
      *a3 = 0;
      goto LABEL_13;
    }
    v17 = *(_BYTE *)(a1 + 78) == 2;
    *a3 = v17;
    if (!v17)
      goto LABEL_13;
    v18 = (char *)(v16 - v9);
    v19 = *(_DWORD *)(a1 + 112) + *(unsigned __int8 *)(a1 + 79);
    v20 = v69;
    if (v18 != &v69[v19])
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v23 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#Error,DEM,Invalid CLDEM tile file - file size does not match headerLength+dataSizeBytes", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_13;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      LOWORD(v80.st_dev) = 0;
      LODWORD(v67) = 2;
      v22 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,DEM,Invalid CLDEM tile file - file size does not match headerLength+dataSizeBytes", &v80, v67);
      goto LABEL_116;
    }
    if (v19 > 0x400000)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v21 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#Error,DEM,tile is larger than the allowed maximum", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_13;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      LOWORD(v80.st_dev) = 0;
      LODWORD(v67) = 2;
      v22 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,DEM,tile is larger than the allowed maximum", &v80, v67);
      goto LABEL_116;
    }
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = (const char *)a2;
    else
      v24 = (const char *)a2->__r_.__value_.__r.__words[0];
    if (sub_1005169DC(v24, 3))
    {
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = (const char *)a2;
      else
        v25 = (const char *)a2->__r_.__value_.__r.__words[0];
      v26 = open(v25, 0);
      *(_DWORD *)a1 = v26;
      if (v26 == -1)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        v38 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
        {
          if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v39 = a2;
          else
            v39 = (const std::string *)a2->__r_.__value_.__r.__words[0];
          v40 = *__error();
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)v82 = v39;
          *(_WORD *)&v82[8] = 1024;
          LODWORD(st_size) = v40;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "#Error,DEM,can't open,%s,errno,%d", buf, 0x12u);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_100;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        v41 = qword_1022A0078;
        if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v42 = a2;
        else
          v42 = (const std::string *)a2->__r_.__value_.__r.__words[0];
        v43 = *__error();
        v80.st_dev = 136315394;
        *(_QWORD *)&v80.st_mode = v42;
        WORD2(v80.st_ino) = 1024;
        *(_DWORD *)((char *)&v80.st_ino + 6) = v43;
        LODWORD(v67) = 18;
        v37 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v41, 16, "#Error,DEM,can't open,%s,errno,%d", &v80, v67);
      }
      else
      {
        if (fstat(v26, &v80) != -1)
        {
          v27 = mmap(0, v80.st_size, 1, 2, *(_DWORD *)a1, 0);
          if (v27 == (void *)-1)
          {
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_10219ECA8);
            v53 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
            {
              v54 = *__error();
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)v82 = v54;
              _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "#Error,DEM,mmap,MAP_FAILED,errno,%d", buf, 8u);
            }
            if (!sub_1001BFF7C(115, 0))
              goto LABEL_13;
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_10219ECA8);
            v55 = qword_1022A0078;
            v56 = *__error();
            v70 = 67109120;
            LODWORD(v71) = v56;
            v22 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v55, 16, "#Error,DEM,mmap,MAP_FAILED,errno,%d", &v70);
            goto LABEL_116;
          }
          *(_QWORD *)(a1 + 8) = v80.st_size;
          *(_QWORD *)(a1 + 16) = v27;
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_10219ECA8);
          v28 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v29 = a2;
            else
              v29 = (const std::string *)a2->__r_.__value_.__r.__words[0];
            v31 = *(_QWORD *)(a1 + 8);
            v30 = *(_QWORD *)(a1 + 16);
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)v82 = v29;
            *(_WORD *)&v82[8] = 2048;
            st_size = v80.st_size;
            v84 = 1024;
            v85 = (v80.st_mode & 0xF000) == 0x8000;
            v86 = 2048;
            v87 = v30;
            v88 = 2048;
            v89 = v31;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "DEM,mmapDem,%s,size,%lld,regfile,%d,m,%p,size,%lu", buf, 0x30u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_100;
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_10219ECA8);
          if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v32 = a2;
          else
            v32 = (const std::string *)a2->__r_.__value_.__r.__words[0];
          v34 = *(_QWORD *)(a1 + 8);
          v33 = *(_QWORD *)(a1 + 16);
          v70 = 136316162;
          v71 = v32;
          v72 = 2048;
          v73 = v80.st_size;
          v74 = 1024;
          v75 = (v80.st_mode & 0xF000) == 0x8000;
          v76 = 2048;
          v77 = v33;
          v78 = 2048;
          v79 = v34;
          LODWORD(v67) = 48;
          v35 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,mmapDem,%s,size,%lld,regfile,%d,m,%p,size,%lu", (const char *)&v70, v67, v68, v69);
          sub_100512490("Generic", 1, 0, 2, "static BOOL CLDigitalElevationModel::readCLDEMTileFromFile(CLDEMTile &, const std::string &, BOOL &)", "%s\n");
          goto LABEL_160;
        }
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        v44 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
        {
          if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v45 = a2;
          else
            v45 = (const std::string *)a2->__r_.__value_.__r.__words[0];
          v46 = *__error();
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)v82 = v45;
          *(_WORD *)&v82[8] = 1024;
          LODWORD(st_size) = v46;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "#Error,DEM,can't stat,%s,errno,%d", buf, 0x12u);
        }
        if (!sub_1001BFF7C(115, 0))
        {
LABEL_100:
          v47 = *(_QWORD *)(a1 + 16);
          if (v47 && (v48 = *(char **)(a1 + 8), v48 == v18) && v48)
          {
            if ((sub_1010A42C0((uint64_t)&v20[v47], *(_DWORD *)(a1 + 112) + *(unsigned __int8 *)(a1 + 79), v68, (_DWORD *)&v67 + 1) & 1) == 0)
            {
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_10219ECA8);
              v52 = qword_1022A0078;
              if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_INFO, "#Warning,DEM,calculateCLDEM_CRC returned false unexpectedly", buf, 2u);
              }
              if (!sub_1001BFF7C(115, 2))
                goto LABEL_13;
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_10219ECA8);
              LOWORD(v80.st_dev) = 0;
              LODWORD(v67) = 2;
              v51 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,calculateCLDEM_CRC returned false unexpectedly", &v80, v67);
              sub_100512490("Generic", 1, 0, 2, "static BOOL CLDigitalElevationModel::readCLDEMTileFromFile(CLDEMTile &, const std::string &, BOOL &)", "%s\n");
              goto LABEL_117;
            }
            v49 = HIDWORD(v67);
            if (HIDWORD(v67) == *(_DWORD *)(a1 + 116))
            {
              if (*(_DWORD *)(a1 + 112))
                *(_QWORD *)(a1 + 24) = &v20[*(unsigned __int8 *)(a1 + 79) + *(_QWORD *)(a1 + 16)];
              v11 = 1;
              *(_BYTE *)(a1 + 32) = 1;
              std::string::operator=((std::string *)(a1 + 40), a2);
              return v11;
            }
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_10219ECA8);
            v57 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
            {
              v58 = *(_DWORD *)(a1 + 116);
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)v82 = v49;
              *(_WORD *)&v82[4] = 1024;
              *(_DWORD *)&v82[6] = v58;
              _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "#Error,DEM,Invalid CLDEM,crc fail,calculated,%X,received,%X", buf, 0xEu);
            }
            if (!sub_1001BFF7C(115, 0))
              goto LABEL_13;
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_10219ECA8);
            v59 = *(_DWORD *)(a1 + 116);
            v80.st_dev = 67109376;
            *(_DWORD *)&v80.st_mode = v49;
            LOWORD(v80.st_ino) = 1024;
            *(_DWORD *)((char *)&v80.st_ino + 2) = v59;
            v22 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,DEM,Invalid CLDEM,crc fail,calculated,%X,received,%X", &v80);
          }
          else
          {
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_10219ECA8);
            v50 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "#Error,mmap failed", buf, 2u);
            }
            if (!sub_1001BFF7C(115, 0))
              goto LABEL_13;
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_10219ECA8);
            LOWORD(v80.st_dev) = 0;
            v22 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,mmap failed");
          }
LABEL_116:
          v51 = (uint8_t *)v22;
          sub_100512490("Generic", 1, 0, 0, "static BOOL CLDigitalElevationModel::readCLDEMTileFromFile(CLDEMTile &, const std::string &, BOOL &)", "%s\n");
LABEL_117:
          if (v51 != buf)
            free(v51);
          goto LABEL_13;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        v64 = qword_1022A0078;
        if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v65 = a2;
        else
          v65 = (const std::string *)a2->__r_.__value_.__r.__words[0];
        v66 = *__error();
        v70 = 136315394;
        v71 = v65;
        v72 = 1024;
        LODWORD(v73) = v66;
        LODWORD(v67) = 18;
        v37 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v64, 16, "#Error,DEM,can't stat,%s,errno,%d", &v70, v67);
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v36 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "#Error,DEM,CLCommonSetFileProtectionClass,fail", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_100;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      LOWORD(v80.st_dev) = 0;
      LODWORD(v67) = 2;
      v37 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,DEM,CLCommonSetFileProtectionClass,fail", &v80, v67);
    }
    v35 = (uint8_t *)v37;
    sub_100512490("Generic", 1, 0, 0, "static BOOL CLDigitalElevationModel::readCLDEMTileFromFile(CLDEMTile &, const std::string &, BOOL &)", "%s\n");
LABEL_160:
    if (v35 != buf)
      free(v35);
    goto LABEL_100;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_10219ECA8);
  v12 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = a2;
    else
      v13 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    v14 = *__error();
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)v82 = v13;
    *(_WORD *)&v82[8] = 1026;
    LODWORD(st_size) = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#Error,DEM,Unable to load %{public}s,errno,%{public}d", buf, 0x12u);
  }
  v11 = 0;
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v60 = qword_1022A0078;
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      a2 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    v61 = *__error();
    v80.st_dev = 136446466;
    *(_QWORD *)&v80.st_mode = a2;
    WORD2(v80.st_ino) = 1026;
    *(_DWORD *)((char *)&v80.st_ino + 6) = v61;
    LODWORD(v67) = 18;
    v62 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v60, 16, "#Error,DEM,Unable to load %{public}s,errno,%{public}d", &v80, v67);
    sub_100512490("Generic", 1, 0, 0, "static BOOL CLDigitalElevationModel::readCLDEMTileFromFile(CLDEMTile &, const std::string &, BOOL &)", "%s\n", v62);
    if (v62 != (char *)buf)
      free(v62);
    return 0;
  }
  return v11;
}

uint64_t sub_1010A42C0(uint64_t result, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  uint64_t v5;
  NSObject *v6;
  _BOOL4 v7;
  char *v8;
  int v9;
  unint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint8_t buf[4];
  unint64_t v14;
  __int16 v15;
  uint64_t v16;

  if (result)
  {
    v5 = a2 - 4;
    if (a2 - 4 <= a3)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        v14 = a3;
        v15 = 2050;
        v16 = v5;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#Error,DEM,indexCrcInBuffer,%zu,exceeds (bufferSize-4) bytes,%{public}zu", buf, 0x16u);
      }
      v7 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v7)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        v9 = 134218240;
        v10 = a3;
        v11 = 2050;
        v12 = v5;
        v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,DEM,indexCrcInBuffer,%zu,exceeds (bufferSize-4) bytes,%{public}zu", &v9, 22);
        sub_100512490("Generic", 1, 0, 0, "static BOOL CLDigitalElevationModel::calculateCLDEM_CRC(unsigned char *, const size_t, const size_t, unsigned int &)", "%s\n", v8);
        if (v8 != (char *)buf)
          free(v8);
        return 0;
      }
    }
    else
    {
      *a4 = sub_100CF9178(result, a2, a3);
      return 1;
    }
  }
  return result;
}

BOOL sub_1010A44B4(FILE *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  _BOOL8 v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8x8_t v13;
  int v14;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  NSObject *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  double v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  __int16 v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  double v53;
  int v54;
  int v55;
  int v56;
  int v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  uint8_t *v66;
  NSObject *v67;
  uint64_t v68;
  NSObject *v69;
  NSObject *v70;
  NSObject *v71;
  NSObject *v72;
  uint8_t *v73;
  NSObject *v74;
  NSObject *v75;
  unint64_t v76;
  unint64_t __ptr;
  int v78;
  int v79;
  int v80;
  double v81;
  _BYTE v82[12];
  double v83;
  double v84;
  _BYTE v85[32];
  __int16 v86;
  double v87;
  __int16 v88;
  double v89;
  __int16 v90;
  double v91;
  uint8_t buf[4];
  int v93;
  __int16 v94;
  int v95;
  __int16 v96;
  int v97;
  __int16 v98;
  int v99;
  __int16 v100;
  int v101;
  __int16 v102;
  int v103;
  __int16 v104;
  int v105;
  __int16 v106;
  int v107;
  __int16 v108;
  uint64_t v109;
  __int16 v110;
  double v111;
  __int16 v112;
  int v113;
  __int16 v114;
  int v115;
  __int16 v116;
  int v117;
  __int16 v118;
  int v119;
  __int16 v120;
  uint64_t v121;
  __int16 v122;
  uint64_t v123;
  __int16 v124;
  uint64_t v125;
  __int16 v126;
  double v127;
  __int16 v128;
  double v129;
  __int16 v130;
  double v131;
  __int16 v132;
  double v133;
  __int16 v134;
  double v135;
  _BYTE v136[14];
  char v137;
  unsigned __int8 v138;
  char v139;
  __int16 v140;
  int v141;
  char v142;
  int v143;
  unsigned int v144;
  unint64_t v145;
  unsigned int v146;
  unsigned __int16 v147;
  unsigned __int16 v148;
  unsigned int v149;
  unsigned int v150;
  _BYTE v151[12];
  _BYTE v152[12];
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;

  if (!a1 || feof(a1))
    return 0;
  v10 = 0;
  while (1)
  {
    LOBYTE(__ptr) = 0;
    if (fread(&__ptr, 1uLL, 1uLL, a1) != 1)
      return 0;
    v11 = ftell(a1);
    if (__ptr == 67)
      break;
LABEL_12:
    v8 = 0;
    if (!feof(a1) && v10++ < 0xFF)
      continue;
    return v8;
  }
  v12 = v11;
  v136[0] = 67;
  if (fread(&v136[1], 1uLL, 4uLL, a1) != 4)
    return 0;
  *(_DWORD *)a2 = *(_DWORD *)v136;
  v14 = v136[4];
  *(_BYTE *)(a2 + 4) = v136[4];
  v13.i32[0] = *(_DWORD *)a2;
  if (vmovn_s16((int16x8_t)vmovl_u8(v13)).u32[0] != 1162103875 || v14 != 77)
  {
    if (!fseek(a1, v12, 0))
      goto LABEL_12;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v67 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "#Error,DEM,fseek returned non-zero", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    LOWORD(v78) = 0;
    v68 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,DEM,fseek returned non-zero", &v78, 2);
    goto LABEL_68;
  }
  *a4 = v10;
  if (fread(&v136[5], 1uLL, 9uLL, a1) != 9)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v69 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_ERROR, "#Error,DEM,Invalid CLDEM tile file - header string", buf, 2u);
    }
    v8 = 0;
    if (!sub_1001BFF7C(115, 0))
      return v8;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    LOWORD(v78) = 0;
    v68 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,DEM,Invalid CLDEM tile file - header string", &v78, 2);
    goto LABEL_68;
  }
  *(_QWORD *)a2 = *(_QWORD *)v136;
  *(_QWORD *)(a2 + 6) = *(_QWORD *)&v136[6];
  if (fread(&v137, 1uLL, 1uLL, a1) != 1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v70 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_ERROR, "#Error,DEM,Invalid CLDEM tile file - version", buf, 2u);
    }
    v8 = 0;
    if (!sub_1001BFF7C(115, 0))
      return v8;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    LOWORD(v78) = 0;
    v68 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,DEM,Invalid CLDEM tile file - version", &v78, 2);
    goto LABEL_68;
  }
  *(_BYTE *)(a2 + 14) = v137;
  if (fread(&v138, 1uLL, 1uLL, a1) != 1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v71 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, "#Error,DEM,Invalid CLDEM tile file - headerLength", buf, 2u);
    }
    v8 = 0;
    if (!sub_1001BFF7C(115, 0))
      return v8;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 == -1)
      goto LABEL_67;
LABEL_89:
    dispatch_once(&qword_1022A0070, &stru_10219ECA8);
LABEL_67:
    LOWORD(v78) = 0;
    v68 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,DEM,Invalid CLDEM tile file - headerLength", &v78, 2);
LABEL_68:
    v73 = (uint8_t *)v68;
    sub_100512490("Generic", 1, 0, 0, "static BOOL CLDigitalElevationModel::readCLDEMTileHeaderHelper(FILE *, CLDEMTileFileHeader &, size_t &, size_t &)", "%s\n");
    goto LABEL_69;
  }
  v16 = v138;
  *(_BYTE *)(a2 + 15) = v138;
  v17 = fread(&v139, 1uLL, v16 - 16, a1);
  v18 = *(unsigned __int8 *)(a2 + 15);
  if (v17 != v18 - 16)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v72 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_ERROR, "#Error,DEM,Invalid CLDEM tile file - headerLength", buf, 2u);
    }
    v8 = 0;
    if (!sub_1001BFF7C(115, 0))
      return v8;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 == -1)
      goto LABEL_67;
    goto LABEL_89;
  }
  *(_BYTE *)(a2 + 16) = v139;
  *(_WORD *)(a2 + 17) = v140;
  *(_DWORD *)(a2 + 19) = v141;
  *(_BYTE *)(a2 + 23) = v142;
  *(_DWORD *)(a2 + 24) = v143;
  *(_DWORD *)(a2 + 28) = bswap32(v144);
  *(_QWORD *)(a2 + 32) = bswap64(v145);
  *(_DWORD *)(a2 + 40) = bswap32(v146);
  v19 = bswap32(v147) >> 16;
  *(_WORD *)(a2 + 44) = v19;
  v20 = bswap32(v148) >> 16;
  *(_WORD *)(a2 + 46) = v20;
  v21 = bswap32(v149);
  *(_DWORD *)(a2 + 48) = v21;
  if (v21 != v20 * v19)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v74 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_INFO, "#Warning,DEM,header.dataSizeBytes != header.nrows*header.ncols", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    LOWORD(v78) = 0;
    v73 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,header.dataSizeBytes != header.nrows*header.ncols", &v78, 2);
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLDigitalElevationModel::readCLDEMTileHeaderHelper(FILE *, CLDEMTileFileHeader &, size_t &, size_t &)", "%s\n");
LABEL_69:
    if (v73 != buf)
      free(v73);
    return 0;
  }
  *a3 = 52;
  *(_DWORD *)(a2 + 52) = bswap32(v150);
  v76 = (unint64_t)vext_s8(*(int8x8_t *)&v151[4], *(int8x8_t *)&v151[4], 4uLL);
  __ptr = (unint64_t)vzip1_s32(*(int32x2_t *)v151, *(int32x2_t *)v152);
  v22 = bswap64(__ptr);
  *(_QWORD *)(a2 + 56) = bswap64(v76);
  *(_QWORD *)(a2 + 64) = v22;
  *(_QWORD *)(a2 + 72) = bswap64(*(unint64_t *)&v152[4]);
  *(_DWORD *)(a2 + 80) = bswap32(v153);
  *(_DWORD *)(a2 + 84) = bswap32(v154);
  *(_DWORD *)(a2 + 88) = bswap32(v155);
  *(_DWORD *)(a2 + 92) = bswap32(v156);
  *(_DWORD *)(a2 + 96) = bswap32(v157);
  v8 = (_DWORD)v18 == 100;
  if ((_DWORD)v18 == 100)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v23 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v24 = *(unsigned __int8 *)(a2 + 14);
      v25 = *(unsigned __int8 *)(a2 + 15);
      v26 = *(unsigned __int8 *)(a2 + 16);
      v27 = *(unsigned __int8 *)(a2 + 17);
      v28 = *(unsigned __int8 *)(a2 + 18);
      v29 = *(unsigned __int8 *)(a2 + 26);
      v30 = *(unsigned __int8 *)(a2 + 27);
      v31 = *(_DWORD *)(a2 + 28);
      v32 = *(_QWORD *)(a2 + 32);
      v33 = *(float *)(a2 + 40);
      v34 = *(unsigned __int16 *)(a2 + 44);
      v35 = *(unsigned __int16 *)(a2 + 46);
      v36 = *(_DWORD *)(a2 + 48);
      v37 = *(_DWORD *)(a2 + 52);
      v38 = *(_QWORD *)(a2 + 56);
      v39 = *(_QWORD *)(a2 + 64);
      v40 = *(_QWORD *)(a2 + 72);
      v41 = *(float *)(a2 + 80);
      v42 = *(float *)(a2 + 84);
      v43 = *(float *)(a2 + 88);
      v44 = *(float *)(a2 + 92);
      v45 = *(float *)(a2 + 96);
      *(_DWORD *)buf = 67114496;
      v93 = v24;
      v94 = 1024;
      v95 = v25;
      v96 = 1024;
      v97 = v26;
      v98 = 1024;
      v99 = v27;
      v100 = 1024;
      v101 = v28;
      v102 = 1024;
      v103 = v29;
      v104 = 1024;
      v105 = v30;
      v106 = 1024;
      v107 = v31;
      v108 = 2048;
      v109 = v32;
      v110 = 2048;
      v111 = v33;
      v112 = 1024;
      v113 = v34;
      v114 = 1024;
      v115 = v35;
      v116 = 1024;
      v117 = v36;
      v118 = 1024;
      v119 = v37;
      v120 = 2048;
      v121 = v38;
      v122 = 2048;
      v123 = v39;
      v124 = 2048;
      v125 = v40;
      v126 = 2048;
      v127 = v41;
      v128 = 2048;
      v129 = v42;
      v130 = 2048;
      v131 = v43;
      v132 = 2048;
      v133 = v44;
      v134 = 2048;
      v135 = v45;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "DEM,header,vers,%d,headerLen,%d,noDataValue,%d,importance,%d,overlapInPixels,%d,dataElementType,%d,compressionType,%d,expirationAge,%d,timestamp,%.1f,uncertainty_m,%.1f,nrows,%d,ncols,%d,dataSizeBytes,%d,crc,%d,xllcorner,%f,yllcorner,%f,cellsize,%f,maxalt,%f,minalt,%f,medianalt,%f,scaleFactor,%f,meanUndulation,%f", buf, 0xAEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v46 = *(unsigned __int8 *)(a2 + 15);
      v47 = *(unsigned __int8 *)(a2 + 16);
      v48 = *(unsigned __int8 *)(a2 + 17);
      v49 = *(unsigned __int8 *)(a2 + 26);
      v50 = *(unsigned __int8 *)(a2 + 27);
      v51 = *(_DWORD *)(a2 + 28);
      v52 = *(_QWORD *)(a2 + 32);
      v53 = *(float *)(a2 + 40);
      v54 = *(unsigned __int16 *)(a2 + 44);
      v55 = *(unsigned __int16 *)(a2 + 46);
      v56 = *(_DWORD *)(a2 + 48);
      v57 = *(_DWORD *)(a2 + 52);
      v58 = *(double *)(a2 + 56);
      v59 = *(_QWORD *)(a2 + 64);
      v60 = *(_QWORD *)(a2 + 72);
      v61 = *(float *)(a2 + 80);
      v62 = *(float *)(a2 + 84);
      v63 = *(float *)(a2 + 88);
      v64 = *(float *)(a2 + 92);
      v65 = *(float *)(a2 + 96);
      LOWORD(v79) = 1024;
      HIWORD(v79) = v46;
      LOWORD(v80) = HIWORD(v48);
      HIWORD(v80) = 1024;
      LOWORD(v81) = 1024;
      *(_DWORD *)((char *)&v81 + 2) = v49;
      HIWORD(v81) = 1024;
      *(_DWORD *)v82 = v50;
      *(_WORD *)&v82[4] = 1024;
      *(_DWORD *)&v82[6] = v51;
      *(_WORD *)&v82[10] = 2048;
      LOWORD(v83) = HIWORD(v55);
      WORD1(v83) = 1024;
      HIDWORD(v83) = v56;
      LOWORD(v84) = 1024;
      *(_DWORD *)((char *)&v84 + 2) = v57;
      HIWORD(v84) = 2048;
      *(_WORD *)v85 = 2048;
      *(_QWORD *)&v85[2] = v59;
      *(_WORD *)&v85[10] = 2048;
      *(_QWORD *)&v85[12] = v60;
      *(_WORD *)&v85[20] = 2048;
      *(double *)&v85[22] = v61;
      *(_WORD *)&v85[30] = 2048;
      v86 = 2048;
      v87 = v63;
      v88 = 2048;
      v89 = v64;
      v90 = 2048;
      v91 = v65;
      v66 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,header,vers,%d,headerLen,%d,noDataValue,%d,importance,%d,overlapInPixels,%d,dataElementType,%d,compressionType,%d,expirationAge,%d,timestamp,%.1f,uncertainty_m,%.1f,nrows,%d,ncols,%d,dataSizeBytes,%d,crc,%d,xllcorner,%f,yllcorner,%f,cellsize,%f,maxalt,%f,minalt,%f,medianalt,%f,scaleFactor,%f,meanUndulation,%f", &v78, 174, v76, __ptr, 67114496, v79, v47, v80,
                         v81,
                         *(double *)v82,
                         *(_DWORD *)&v82[8],
                         HIDWORD(v52),
                         *(_QWORD *)&v53 >> 16,
                         v54,
                         v83,
                         v84,
                         v58,
                         *(double *)v85,
                         *(double *)&v85[8],
                         *(double *)&v85[16],
                         *(double *)&v85[24],
                         v62);
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLDigitalElevationModel::readCLDEMTileHeaderHelper(FILE *, CLDEMTileFileHeader &, size_t &, size_t &)", "%s\n");
      goto LABEL_87;
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v75 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_ERROR, "#Error,DEM,Invalid CLDEM tile file - headerLength", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      LOWORD(v78) = 0;
      v66 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,DEM,Invalid CLDEM tile file - headerLength", &v78, 2);
      sub_100512490("Generic", 1, 0, 0, "static BOOL CLDigitalElevationModel::readCLDEMTileHeaderHelper(FILE *, CLDEMTileFileHeader &, size_t &, size_t &)", "%s\n");
LABEL_87:
      if (v66 != buf)
        free(v66);
    }
  }
  return v8;
}

void *sub_1010A5210(uint64_t a1)
{
  int v2;
  void *result;
  size_t v4;

  v2 = *(_DWORD *)a1;
  if ((v2 & 0x80000000) == 0)
  {
    close(v2);
    *(_DWORD *)a1 = -1;
  }
  result = *(void **)(a1 + 16);
  if (result)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
      result = (void *)munmap(result, v4);
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if (*(char *)(a1 + 63) < 0)
  {
    **(_BYTE **)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 63) = 0;
  }
  return result;
}

void sub_1010A5294(_QWORD *a1, uint64_t *a2, int a3, int a4, int a5, _DWORD *a6)
{
  char *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  void *__p;
  char *v29;
  unint64_t v30;

  v30 = 0;
  v12 = (char *)sub_100260634((uint64_t)&v30, 1uLL);
  v14 = (unint64_t)&v12[4 * v13];
  *(_DWORD *)v12 = a4;
  v15 = v12 + 4;
  __p = v12;
  v30 = v14;
  v29 = v12 + 4;
  if ((unint64_t)(v12 + 4) >= v14)
  {
    v17 = (char *)__p;
    v18 = (v15 - (_BYTE *)__p) >> 2;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 62)
      sub_100259694();
    v20 = v14 - (_QWORD)__p;
    if (v20 >> 1 > v19)
      v19 = v20 >> 1;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
      v21 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      v22 = (char *)sub_100260634((uint64_t)&v30, v21);
      v17 = (char *)__p;
      v15 = v29;
    }
    else
    {
      v22 = 0;
    }
    v23 = &v22[4 * v18];
    v24 = &v22[4 * v21];
    *(_DWORD *)v23 = a3;
    v16 = v23 + 4;
    while (v15 != v17)
    {
      v25 = *((_DWORD *)v15 - 1);
      v15 -= 4;
      *((_DWORD *)v23 - 1) = v25;
      v23 -= 4;
    }
    __p = v23;
    v29 = v16;
    v30 = (unint64_t)v24;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *((_DWORD *)v12 + 1) = a3;
    v16 = v12 + 8;
  }
  v29 = v16;
  v26 = a2[1];
  if (v26 >= a2[2])
  {
    v27 = sub_100AA2234(a2, (uint64_t)&__p);
  }
  else
  {
    sub_100AA21E4((uint64_t)a2, (uint64_t)&__p);
    v27 = v26 + 24;
  }
  a2[1] = v27;
  *(_DWORD *)(*(_QWORD *)(*a1 + 24 * a3) + 4 * a4) = a5;
  ++*a6;
  if (__p)
  {
    v29 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1010A5458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010A5474(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  int v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  int v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  int v41;
  _QWORD *v42;
  _QWORD *v43;
  int *v44;
  _QWORD *v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  void *p_p;
  _BYTE *v55;
  unint64_t v56;
  void *__p;
  _QWORD *v58;
  unint64_t v59;
  int v60;
  uint64_t v61[3];
  unsigned int v62;

  v16 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + a6 + *(unsigned __int16 *)(a1 + 110) * a7);
  v62 = 0;
  memset(v61, 0, sizeof(v61));
  v60 = 0;
  v17 = a8;
  sub_100CB0348(&__p, a8, &v60);
  sub_1010A58D4(v61, v17, (uint64_t)&__p);
  if (__p)
  {
    v58 = __p;
    operator delete(__p);
  }
  if (a3 > a2)
  {
    v18 = v61[0];
    v19 = a3;
    v20 = *(_QWORD *)(a1 + 24) + a4 + *(unsigned __int16 *)(a1 + 110) * (uint64_t)a3;
    v21 = -(uint64_t)*(unsigned __int16 *)(a1 + 110);
    do
    {
      --v17;
      if (a5 > a4)
      {
        v22 = *(_DWORD **)(v18 + 24 * v17);
        v23 = (unsigned __int8 *)v20;
        v24 = (a5 - a4);
        do
        {
          v25 = *v23++;
          *v22++ = v25;
          --v24;
        }
        while (v24);
      }
      --v19;
      v20 += v21;
    }
    while (v19 > a2);
  }
  __p = 0;
  v58 = 0;
  v59 = 0;
  v56 = 0;
  v26 = sub_100260634((uint64_t)&v56, 1uLL);
  v27 = a6 - a4;
  v29 = (unint64_t)&v26[v28];
  *v26 = v27;
  v30 = v26 + 1;
  p_p = v26;
  v56 = v29;
  v55 = v26 + 1;
  v31 = a7 - a2;
  if ((unint64_t)(v26 + 1) >= v29)
  {
    v33 = p_p;
    v34 = (v30 - (_BYTE *)p_p) >> 2;
    v35 = v34 + 1;
    if ((unint64_t)(v34 + 1) >> 62)
      sub_100259694();
    v36 = v29 - (_QWORD)p_p;
    if (v36 >> 1 > v35)
      v35 = v36 >> 1;
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
      v37 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v37 = v35;
    if (v37)
    {
      v38 = (char *)sub_100260634((uint64_t)&v56, v37);
      v33 = p_p;
      v30 = v55;
    }
    else
    {
      v38 = 0;
    }
    v39 = &v38[4 * v34];
    v40 = &v38[4 * v37];
    *(_DWORD *)v39 = v31;
    v32 = v39 + 4;
    while (v30 != v33)
    {
      v41 = *((_DWORD *)v30 - 1);
      v30 -= 4;
      *((_DWORD *)v39 - 1) = v41;
      v39 -= 4;
    }
    p_p = v39;
    v55 = v32;
    v56 = (unint64_t)v40;
    if (v33)
      operator delete(v33);
  }
  else
  {
    v26[1] = v31;
    v32 = v26 + 2;
  }
  v55 = v32;
  v42 = v58;
  if ((unint64_t)v58 >= v59)
  {
    v43 = (_QWORD *)sub_100AA2234((uint64_t *)&__p, (uint64_t)&p_p);
  }
  else
  {
    *v58 = 0;
    v42[1] = 0;
    v42[2] = 0;
    sub_10027205C(v42, p_p, (uint64_t)v55, (v55 - (_BYTE *)p_p) >> 2);
    v43 = v42 + 3;
  }
  v58 = v43;
  *(_DWORD *)(*(_QWORD *)(v61[0] + 24 * v31) + 4 * v27) = *(unsigned __int8 *)(a1 + 80);
  while (v43 != __p)
  {
    v45 = v43 - 3;
    v44 = (int *)*(v43 - 3);
    v46 = *v44;
    v47 = v44[1];
    if (v44)
    {
      *(v43 - 2) = v44;
      operator delete(v44);
    }
    v58 = v45;
    v48 = v46 + 1;
    if ((int)v46 + 1 < a8 && *(_DWORD *)(*(_QWORD *)(v61[0] + 24 * v47) + 4 * v48) == v16)
      sub_1010A5294(v61, (uint64_t *)&__p, v47, v48, *(unsigned __int8 *)(a1 + 80), &v62);
    v49 = v47 + 1;
    if (v47 + 1 < a8 && *(_DWORD *)(*(_QWORD *)(v61[0] + 24 * v49) + 4 * v46) == v16)
      sub_1010A5294(v61, (uint64_t *)&__p, v49, v46, *(unsigned __int8 *)(a1 + 80), &v62);
    v50 = v46 - 1;
    if ((int)v46 >= 1 && *(_DWORD *)(*(_QWORD *)(v61[0] + 24 * v47) + 4 * v50) == v16)
      sub_1010A5294(v61, (uint64_t *)&__p, v47, v50, *(unsigned __int8 *)(a1 + 80), &v62);
    v51 = v47 - 1;
    if (v47 >= 1 && *(_DWORD *)(*(_QWORD *)(v61[0] + 24 * v51) + 4 * v46) == v16)
      sub_1010A5294(v61, (uint64_t *)&__p, v51, v46, *(unsigned __int8 *)(a1 + 80), &v62);
    v43 = v58;
  }
  v52 = v62;
  if (p_p)
  {
    v55 = p_p;
    operator delete(p_p);
  }
  p_p = &__p;
  sub_10025E1F0((void ***)&p_p);
  __p = v61;
  sub_10025E1F0((void ***)&__p);
  return v52;
}

void sub_1010A5860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char **__p, char **a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (__p)
  {
    a11 = __p;
    operator delete(__p);
  }
  __p = &a13;
  sub_10025E1F0((void ***)&__p);
  a13 = &a17;
  sub_10025E1F0((void ***)&a13);
  _Unwind_Resume(a1);
}

void sub_1010A58D4(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = a2 >= v5;
  v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    sub_1010A7B00(a1, v7, a3);
  }
  else if (!v6)
  {
    v8 = *a1 + 24 * a2;
    if (v4 != v8)
    {
      v9 = a1[1];
      do
      {
        v11 = *(void **)(v9 - 24);
        v9 -= 24;
        v10 = v11;
        if (v11)
        {
          *(_QWORD *)(v4 - 16) = v10;
          operator delete(v10);
        }
        v4 = v9;
      }
      while (v9 != v8);
    }
    a1[1] = v8;
  }
}

uint64_t sub_1010A5968(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  char *v9;
  NSObject *v10;
  NSObject *v11;
  void **v12;
  void **v13;
  NSObject *v14;
  void **v15;
  char *v16;
  NSObject *v17;
  int v18;
  int v19;
  NSObject *v20;
  void **v21;
  int v22;
  void **v23;
  int v24;
  const char *v25;
  char *v26;
  NSObject *v27;
  NSObject *v28;
  const char *v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  char *v32;
  std::string *v33;
  NSObject *v34;
  void **v35;
  std::string *v36;
  std::string *v37;
  NSObject *v38;
  std::string *v39;
  uint64_t v40;
  int v41;
  NSObject *v42;
  const char *v44;
  char *v45;
  const char *v46;
  char *v47;
  const char *v48;
  char *v49;
  void **v50;
  const char *v51;
  char *v52;
  void **v53;
  std::string *v54;
  const char *v55;
  char *v56;
  const char *v57;
  char *v58;
  void **v59;
  const char *v60;
  char *v61;
  std::string *v62;
  const char *v63;
  char *v64;
  uint64_t v65;
  int v66;
  std::string *v67;
  __int16 v68;
  std::string *v69;
  std::string v70;
  void *__p[2];
  char v72;
  _BYTE buf[1632];

  v6 = a1 + 104;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 104) + 16))(a1 + 104);
  switch(a3)
  {
    case 0:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v7 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "DEM,avl download status,NONE", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        LOWORD(__p[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "DEM,avl download status,NONE", __p, 2);
        v9 = (char *)v8;
        sub_100512490("Generic", 1, 0, 2, "void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v8);
        goto LABEL_70;
      }
      break;
    case 1:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v27 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "DEM,avl download status,STARTED", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        LOWORD(__p[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "DEM,avl download status,STARTED", __p, 2);
        v49 = (char *)v48;
        sub_100512490("Generic", 1, 0, 2, "void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v48);
        if (v49 != buf)
          free(v49);
      }
      *(CFAbsoluteTime *)(a1 + 584) = CFAbsoluteTimeGetCurrent();
      break;
    case 2:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "DEM,avl download status,COMPLETED", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        LOWORD(__p[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "DEM,avl download status,COMPLETED", __p, 2);
        v45 = (char *)v44;
        sub_100512490("Generic", 1, 0, 2, "void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v44);
        if (v45 != buf)
          free(v45);
      }
      sub_100605D40(a2, (uint64_t)__p);
      *(_DWORD *)(a1 + 600) = 1;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v11 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v12 = __p;
        if (v72 < 0)
          v12 = (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "DEM,avl downloaded,%{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        v50 = __p;
        if (v72 < 0)
          v50 = (void **)__p[0];
        LODWORD(v70.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words + 4) = (std::string::size_type)v50;
        LODWORD(v65) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,avl downloaded,%{public}s", &v70, v65);
        v52 = (char *)v51;
        sub_100512490("Generic", 1, 0, 2, "void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v51);
        if (v52 != buf)
          free(v52);
      }
      if (v72 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      if (!sub_1005169DC((const char *)v13, 4))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        v14 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
        {
          v15 = __p;
          if (v72 < 0)
            v15 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "#Warning,DEM,Cannot set protection class for DEM avl file,%{public}s", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_10219ECA8);
          v59 = __p;
          if (v72 < 0)
            v59 = (void **)__p[0];
          LODWORD(v70.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words + 4) = (std::string::size_type)v59;
          LODWORD(v65) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,Cannot set protection class for DEM avl file,%{public}s", &v70, v65);
          v61 = (char *)v60;
          sub_100512490("Generic", 1, 0, 2, "void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v60);
          if (v61 != buf)
            free(v61);
        }
      }
      v16 = (char *)sub_1001FD94C();
      sub_1000B7884(v16, (uint64_t)&v70);
      if (*(char *)(a1 + 439) < 0)
      {
        sub_100115CE4(buf, *(void **)(a1 + 416), *(_QWORD *)(a1 + 424));
      }
      else
      {
        *(_OWORD *)buf = *(_OWORD *)(a1 + 416);
        *(_QWORD *)&buf[16] = *(_QWORD *)(a1 + 432);
      }
      if (buf[23] >= 0)
        v30 = buf;
      else
        v30 = *(const std::string::value_type **)buf;
      if (buf[23] >= 0)
        v31 = buf[23];
      else
        v31 = *(_QWORD *)&buf[8];
      std::string::append(&v70, v30, v31);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      *(CFAbsoluteTime *)(a1 + 584) = CFAbsoluteTimeGetCurrent();
      if (v72 >= 0)
        v32 = (char *)__p;
      else
        v32 = (char *)__p[0];
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = &v70;
      else
        v33 = (std::string *)v70.__r_.__value_.__r.__words[0];
      sub_100513F8C(v32, (const char *)v33);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v34 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v35 = __p;
        if (v72 < 0)
          v35 = (void **)__p[0];
        v36 = &v70;
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v36 = (std::string *)v70.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v35;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v36;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "DEM,avl file decompressed,%{public}s,to,%{public}s", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        v53 = __p;
        if (v72 < 0)
          v53 = (void **)__p[0];
        v54 = &v70;
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v54 = (std::string *)v70.__r_.__value_.__r.__words[0];
        v66 = 136446466;
        v67 = (std::string *)v53;
        v68 = 2082;
        v69 = v54;
        LODWORD(v65) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,avl file decompressed,%{public}s,to,%{public}s", &v66, v65);
        v56 = (char *)v55;
        sub_100512490("Generic", 1, 0, 2, "void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v55);
        if (v56 != buf)
          free(v56);
      }
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = &v70;
      else
        v37 = (std::string *)v70.__r_.__value_.__r.__words[0];
      if (!sub_1005169DC((const char *)v37, 4))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        v38 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
        {
          v39 = &v70;
          if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v39 = (std::string *)v70.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v39;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "#Warning,DEM,Cannot set protection class for DEM decompressed avl file,%{public}s", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_10219ECA8);
          v62 = &v70;
          if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v62 = (std::string *)v70.__r_.__value_.__r.__words[0];
          v66 = 136446210;
          v67 = v62;
          LODWORD(v65) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,Cannot set protection class for DEM decompressed avl file,%{public}s", &v66, v65);
          v64 = (char *)v63;
          sub_100512490("Generic", 1, 0, 2, "void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v63);
          if (v64 != buf)
            free(v64);
        }
      }
      v40 = a1 + 8;
      v41 = sub_1001C6834(v40);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v42 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&buf[4] = v41;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "DEM,is availability file valid,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        v66 = 67240192;
        LODWORD(v67) = v41;
        LODWORD(v65) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,is availability file valid,%{public}d", &v66, v65);
        v58 = (char *)v57;
        sub_100512490("Generic", 1, 0, 2, "void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v57);
        if (v58 != buf)
          free(v58);
      }
      sub_1008B9F28(v40);
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      goto LABEL_114;
    case 3:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v17 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning,DEM,avl download status,FAILED", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        LOWORD(__p[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,DEM,avl download status,FAILED", __p, 2);
        v47 = (char *)v46;
        sub_100512490("Generic", 1, 0, 2, "void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v46);
        if (v47 != buf)
          free(v47);
      }
      v18 = *(_DWORD *)(a1 + 600);
      if (v18 < 5)
        v19 = v18 + 1;
      else
        v19 = v18 + 10;
      *(_DWORD *)(a1 + 600) = v19;
      sub_100605D40(a2, (uint64_t)__p);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v20 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v21 = __p;
        if (v72 < 0)
          v21 = (void **)__p[0];
        v22 = *(_DWORD *)(a1 + 600);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v21;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = v22;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning,DEM,avl download request failed,%{public}s,retryMultiplier,%{public}d", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        v23 = __p;
        if (v72 < 0)
          v23 = (void **)__p[0];
        v24 = *(_DWORD *)(a1 + 600);
        LODWORD(v70.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
        WORD2(v70.__r_.__value_.__r.__words[1]) = 1026;
        *(_DWORD *)((char *)&v70.__r_.__value_.__r.__words[1] + 6) = v24;
        LODWORD(v65) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,DEM,avl download request failed,%{public}s,retryMultiplier,%{public}d", &v70, v65);
        v26 = (char *)v25;
        sub_100512490("Generic", 1, 0, 2, "void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v25);
        if (v26 != buf)
          free(v26);
      }
LABEL_114:
      if (v72 < 0)
        operator delete(__p[0]);
      break;
    default:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v28 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&buf[4] = a3;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#Warning,DEM,avl download status,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        LODWORD(__p[0]) = 67240192;
        HIDWORD(__p[0]) = a3;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,DEM,avl download status,%{public}d", __p, 8);
        v9 = (char *)v29;
        sub_100512490("Generic", 1, 0, 2, "void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v29);
LABEL_70:
        if (v9 != buf)
          free(v9);
      }
      break;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
}

void sub_1010A6A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a24 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  sub_10187E514((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1010A6AF0(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;
  BOOL v4;
  uint64_t v5;
  BOOL v7;
  int v8;

  if (!*(_DWORD *)(a1 + 412))
    return 0;
  v2 = *(_DWORD *)(a2 + 8);
  result = 1;
  if (v2 <= 99)
  {
    v4 = v2 > 0x29;
    v5 = (1 << v2) & 0x20000000150;
    if (!v4 && v5 != 0)
      return result;
    return 0;
  }
  if (v2 > 19149)
  {
    v7 = v2 == 19150;
    v8 = 90603;
  }
  else
  {
    v7 = v2 == 100;
    v8 = 11805;
  }
  if (!v7 && v2 != v8)
    return 0;
  return result;
}

double sub_1010A6B64()
{
  int v0;
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v3;
  NSObject *v4;
  double v5;
  NSObject *v6;
  NSObject *v7;
  const char *v9;
  char *v10;
  const char *v11;
  char *v12;
  const char *v13;
  char *v14;
  uint64_t v15;
  double v16;
  int v17;
  uint64_t v18;
  _OWORD buf[102];

  v16 = 0.0;
  sub_1001E4804(buf);
  v0 = sub_1001FD98C(*(uint64_t *)&buf[0], "DemAvlFileUpdatePeriodOverWifi", &v16);
  v1 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (*((_QWORD *)&buf[0] + 1))
  {
    v2 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  if (v0)
  {
    if (v16 > 0.0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v4 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 134349056;
        *(double *)((char *)buf + 4) = v16;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "DEM,DemAvlFileUpdatePeriodOverWifi,%{public}.1lf", (uint8_t *)buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        v17 = 134349056;
        v18 = *(_QWORD *)&v16;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,DemAvlFileUpdatePeriodOverWifi,%{public}.1lf", &v17, 12);
        v12 = (char *)v11;
        sub_100512490("Generic", 1, 0, 2, "CFTimeInterval CLDigitalElevationModel::getAvlFileDownloadRateOverWifi() const", "%s\n", v11);
        if (v12 != (char *)buf)
          free(v12);
      }
      return v16;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0]) = 134349056;
      *(double *)((char *)buf + 4) = v16;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#Warning,DEM,given avl update rate over WiFi is invalid,%{public}.1lf,using default value instead", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v17 = 134349056;
      v18 = *(_QWORD *)&v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,given avl update rate over WiFi is invalid,%{public}.1lf,using default value instead", &v17, 12);
      v14 = (char *)v13;
      sub_100512490("Generic", 1, 0, 2, "CFTimeInterval CLDigitalElevationModel::getAvlFileDownloadRateOverWifi() const", "%s\n", v13);
      if (v14 != (char *)buf)
        free(v14);
    }
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_10219ECA8);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0]) = 134349056;
    *(_QWORD *)((char *)buf + 4) = 0x40F5180000000000;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "DEM,DemAvlFileUpdatePeriodOverWifi,%{public}.1lf", (uint8_t *)buf, 0xCu);
  }
  v5 = 86400.0;
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v17 = 134349056;
    v18 = 0x40F5180000000000;
    LODWORD(v15) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,DemAvlFileUpdatePeriodOverWifi,%{public}.1lf", &v17, v15);
    v10 = (char *)v9;
    sub_100512490("Generic", 1, 0, 2, "CFTimeInterval CLDigitalElevationModel::getAvlFileDownloadRateOverWifi() const", "%s\n", v9);
    if (v10 != (char *)buf)
      free(v10);
  }
  return v5;
}

void sub_1010A7030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1010A704C()
{
  int v0;
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v3;
  NSObject *v4;
  double v5;
  NSObject *v6;
  NSObject *v7;
  const char *v9;
  char *v10;
  const char *v11;
  char *v12;
  const char *v13;
  char *v14;
  uint64_t v15;
  double v16;
  int v17;
  uint64_t v18;
  _OWORD buf[102];

  v16 = 0.0;
  sub_1001E4804(buf);
  v0 = sub_1001FD98C(*(uint64_t *)&buf[0], "DemAvlFileUpdatePeriodOverCell", &v16);
  v1 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (*((_QWORD *)&buf[0] + 1))
  {
    v2 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  if (v0)
  {
    if (v16 > 0.0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v4 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 134349056;
        *(double *)((char *)buf + 4) = v16;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "DEM,DemAvlFileUpdatePeriodOverCell,%{public}.1lf", (uint8_t *)buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        v17 = 134349056;
        v18 = *(_QWORD *)&v16;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,DemAvlFileUpdatePeriodOverCell,%{public}.1lf", &v17, 12);
        v12 = (char *)v11;
        sub_100512490("Generic", 1, 0, 2, "CFTimeInterval CLDigitalElevationModel::getAvlFileDownloadRateOverCell() const", "%s\n", v11);
        if (v12 != (char *)buf)
          free(v12);
      }
      return v16;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0]) = 134349056;
      *(double *)((char *)buf + 4) = v16;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#Warning,DEM,given avl update rate over Cell is invalid,%{public}.1lf,using default value instead", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v17 = 134349056;
      v18 = *(_QWORD *)&v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,given avl update rate over Cell is invalid,%{public}.1lf,using default value instead", &v17, 12);
      v14 = (char *)v13;
      sub_100512490("Generic", 1, 0, 2, "CFTimeInterval CLDigitalElevationModel::getAvlFileDownloadRateOverCell() const", "%s\n", v13);
      if (v14 != (char *)buf)
        free(v14);
    }
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_10219ECA8);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0]) = 134349056;
    *(_QWORD *)((char *)buf + 4) = 0x4122750000000000;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "DEM,DemAvlFileUpdatePeriodOverCell,%{public}.1lf", (uint8_t *)buf, 0xCu);
  }
  v5 = 604800.0;
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v17 = 134349056;
    v18 = 0x4122750000000000;
    LODWORD(v15) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,DemAvlFileUpdatePeriodOverCell,%{public}.1lf", &v17, v15);
    v10 = (char *)v9;
    sub_100512490("Generic", 1, 0, 2, "CFTimeInterval CLDigitalElevationModel::getAvlFileDownloadRateOverCell() const", "%s\n", v9);
    if (v10 != (char *)buf)
      free(v10);
  }
  return v5;
}

void sub_1010A7518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1010A7534()
{
  operator new();
}

void sub_1010A757C()
{
  operator delete();
}

uint64_t sub_1010A75A0(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  int v11;
  char *v12;
  std::string *p_p;
  std::string::size_type size;
  std::string *p_dst;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  int v20;
  const char *v21;
  std::string *v22;
  void *v23[2];
  uint64_t v24;
  std::string __p;
  uint64_t v26;
  __int16 v27;
  std::string __dst;
  std::string buf[68];

  v8 = a1 + 104;
  v7 = *(_QWORD *)(a1 + 104);
  v26 = a1 + 104;
  (*(void (**)(uint64_t))(v7 + 16))(a1 + 104);
  v27 = 256;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_10219ECA8);
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v10 = *a3;
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 67240192;
    HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Notification,%{public}d", (uint8_t *)buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v20 = *a3;
    LODWORD(__dst.__r_.__value_.__l.__data_) = 67240192;
    HIDWORD(__dst.__r_.__value_.__r.__words[0]) = v20;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Notification,%{public}d", &__dst, 8);
    v22 = (std::string *)v21;
    sub_100512490("Generic", 1, 0, 2, "void CLDigitalElevationModel::onManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  if (*a3 == 4)
  {
    v11 = *(_DWORD *)(a4 + 188);
    if (v11 == 1)
    {
      if (!*(_BYTE *)(a1 + 384))
      {
        buf[0].__r_.__value_.__r.__words[0] = CFAbsoluteTimeGetCurrent();
        sub_10109FB2C(a1, buf);
        *(_BYTE *)(a1 + 384) = 1;
      }
    }
    else if (!v11)
    {
      v12 = (char *)sub_1001FD94C();
      sub_1000B7884(v12, (uint64_t)buf);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        sub_100115CE4(&__dst, buf[0].__r_.__value_.__l.__data_, buf[0].__r_.__value_.__l.__size_);
      else
        __dst = buf[0];
      if (*(char *)(a1 + 439) < 0)
        sub_100115CE4(&__p, *(void **)(a1 + 416), *(_QWORD *)(a1 + 424));
      else
        __p = *(std::string *)(a1 + 416);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::string::append(&__dst, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_dst = &__dst;
      else
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      sub_1005164F0((const char *)p_dst);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        sub_100115CE4(&__p, buf[0].__r_.__value_.__l.__data_, buf[0].__r_.__value_.__l.__size_);
      else
        __p = buf[0];
      if (*(char *)(a1 + 463) < 0)
      {
        sub_100115CE4(v23, *(void **)(a1 + 440), *(_QWORD *)(a1 + 448));
      }
      else
      {
        *(_OWORD *)v23 = *(_OWORD *)(a1 + 440);
        v24 = *(_QWORD *)(a1 + 456);
      }
      if (v24 >= 0)
        v16 = v23;
      else
        v16 = (void **)v23[0];
      if (v24 >= 0)
        v17 = HIBYTE(v24);
      else
        v17 = (std::string::size_type)v23[1];
      std::string::append(&__p, (const std::string::value_type *)v16, v17);
      if (SHIBYTE(v24) < 0)
        operator delete(v23[0]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = &__p;
      else
        v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
      sub_1005164F0((const char *)v18);
      *(_BYTE *)(a1 + 384) = 0;
      sub_100605848(a1 + 120);
      sub_1008BA0E4(a1 + 8);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf[0].__r_.__value_.__l.__data_);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
}

void sub_1010A7964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  sub_10187E514((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_1010A7A04(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1010A7A30(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_1010A7A5C(uint64_t a1)
{
  *(_QWORD *)a1 = off_10219ECF8;
  sub_1002433B8(a1 + 8);
  *(_OWORD *)(a1 + 48) = xmmword_101C3E8E0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 96) = 0xC0C3878000000000;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = xmmword_101C3E8F0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 168) = xmmword_101C3E8F0;
  *(_OWORD *)(a1 + 184) = xmmword_101C3E900;
  *(int64x2_t *)(a1 + 200) = vdupq_n_s64(0xC0C3878000000000);
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_WORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  return a1;
}

void sub_1010A7AEC()
{
  operator delete();
}

_QWORD *sub_1010A7B00(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  _QWORD *v21;

  v8 = a1[2];
  result = a1 + 2;
  v7 = v8;
  v9 = (_QWORD *)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v9) >> 3) >= a2)
  {
    if (a2)
    {
      v15 = &v9[3 * a2];
      v16 = 24 * a2;
      do
      {
        *v9 = 0;
        v9[1] = 0;
        v9[2] = 0;
        result = sub_10027205C(v9, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      v9 = v15;
    }
    a1[1] = (uint64_t)v9;
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *a1) >> 3);
    v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_100259694();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    v21 = result;
    if (v13)
      v14 = (char *)sub_1002596A8((uint64_t)result, v13);
    else
      v14 = 0;
    v17 = v14;
    v18 = &v14[24 * v10];
    v19 = v18;
    v20 = &v14[24 * v13];
    sub_1010A7C70(&v17, a2, a3);
    sub_100AA2348(a1, &v17);
    return (_QWORD *)sub_10025E974((uint64_t)&v17);
  }
  return result;
}

void sub_1010A7C50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10025E974((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1010A7C70(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;

  v3 = result;
  v4 = (_QWORD *)result[2];
  if (a2)
  {
    v6 = &v4[3 * a2];
    v7 = 24 * a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      result = sub_10027205C(v4, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v4 += 3;
      v7 -= 24;
    }
    while (v7);
    v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_1010A7CE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

BOOL sub_1010A7CF0(uint64_t a1, _DWORD *a2)
{
  return *a2 == 0;
}

uint64_t sub_1010A7D00(uint64_t a1)
{
  sub_1010A91DC(a1);
  return sub_10090020C(a1 + 240);
}

BOOL sub_1010A7D28(uint64_t a1, _DWORD *a2)
{
  return *a2 == 1;
}

_QWORD *sub_1010A7D38(_QWORD *a1)
{
  sub_1010A9B70(a1);
  return sub_1010A96A0(a1);
}

uint64_t sub_1010A7D5C(_QWORD *a1)
{
  sub_1010A9B70(a1);
  return sub_10090020C((uint64_t)(a1 + 30));
}

BOOL sub_1010A7D80(uint64_t a1, _DWORD *a2)
{
  return *a2 == 2;
}

BOOL sub_1010A7D94(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2 == *(_QWORD *)(a1 + 80) && *(_DWORD *)(a2 + 8) == 1;
}

_QWORD *sub_1010A7DB0(_QWORD *a1, uint64_t *a2)
{
  sub_1010A96EC((uint64_t)a1, a2);
  return sub_1010A9678(a1);
}

BOOL sub_1010A7DD4(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2 == *(_QWORD *)(a1 + 80) && *(_DWORD *)(a2 + 8) == 2;
}

BOOL sub_1010A7DF4(uint64_t a1, _QWORD *a2)
{
  return *a2 != *(_QWORD *)(a1 + 80);
}

BOOL sub_1010A7E0C(uint64_t a1, _BYTE *a2)
{
  return *a2 == 0;
}

uint64_t sub_1010A7E1C(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD v19[3];
  _QWORD *v20;

  *(_QWORD *)a1 = &unk_10219ED18;
  *(_QWORD *)(a1 + 8) = 12;
  *(_WORD *)(a1 + 16) = 512;
  *(_QWORD *)(a1 + 24) = a2;
  v5 = a3[8];
  v6 = a3[9];
  v7 = *((_QWORD *)a3 + 20);
  v8 = a3[4];
  v9 = a3[5];
  v11 = a3[6];
  v10 = a3[7];
  v12 = *a3;
  v13 = a3[1];
  v15 = a3[2];
  v14 = a3[3];
  *(_QWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 48) = v13;
  *(_OWORD *)(a1 + 32) = v12;
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 192) = v7;
  *(_OWORD *)(a1 + 176) = v6;
  *(_OWORD *)(a1 + 160) = v5;
  *(_OWORD *)(a1 + 144) = v10;
  sub_100270E34(a1 + 208, a4);
  v19[0] = off_10219EE68;
  v19[1] = a1;
  v20 = v19;
  sub_1008FFFD0(a1 + 240, v19);
  v16 = v20;
  if (v20 == v19)
  {
    v17 = 4;
    v16 = v19;
    goto LABEL_5;
  }
  if (v20)
  {
    v17 = 5;
LABEL_5:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }
  *(_BYTE *)(a1 + 296) = 1;
  *(_QWORD *)(a1 + 304) = 0;
  return a1;
}

void sub_1010A7F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  uint64_t ***v14;
  _QWORD *v15;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v17 = a13;
  if (a13 == &a10)
  {
    v18 = 4;
    v17 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  v19 = *(_QWORD **)(v13 + 232);
  if (v19 == v15)
  {
    v20 = 4;
  }
  else
  {
    if (!v19)
      goto LABEL_11;
    v20 = 5;
    v15 = *(_QWORD **)(v13 + 232);
  }
  (*(void (**)(_QWORD *))(*v15 + 8 * v20))(v15);
LABEL_11:
  sub_1010A9BA0(v14, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1010A7FCC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;

  sub_1010A8088(a1);
  v2 = *(_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 304) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD **)(a1 + 288);
  if (v3 == (_QWORD *)(a1 + 264))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 264);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  v5 = *(void **)(a1 + 240);
  if (v5)
  {
    *(_QWORD *)(a1 + 248) = v5;
    operator delete(v5);
  }
  v6 = *(_QWORD **)(a1 + 232);
  if (v6 == (_QWORD *)(a1 + 208))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 208);
    goto LABEL_14;
  }
  if (v6)
  {
    v7 = 5;
LABEL_14:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  sub_1010A9BA0((uint64_t ***)(a1 + 200), 0);
  return a1;
}

_QWORD *sub_1010A8088(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10219EE38);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[resume reminders] tearing down controller", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10219EE38);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "[resume reminders] tearing down controller", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutResumeReminders::Controller::teardown()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  if (*(_QWORD *)(a1 + 200))
    sub_1010A9BA0((uint64_t ***)(a1 + 200), 0);
  sub_10090020C(a1 + 240);
  return sub_1010A9BDC((_QWORD *)a1);
}

double *sub_1010A8240(uint64_t a1)
{
  double *result;
  unsigned int v3;
  NSObject *v4;
  int v5;
  std::string::size_type v6;
  std::string *v7;
  std::string *v8;
  uint64_t v9;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  std::string *p_buf;
  std::string *v14;
  std::string *v15;
  std::string v16;
  _OWORD v17[2];
  _OWORD v18[2];
  std::string buf;
  int v20;
  std::string *v21;
  __int16 v22;
  std::string *v23;
  std::string __p[68];

  result = *(double **)(a1 + 200);
  if (result)
  {
    v3 = *(unsigned __int8 *)(a1 + 16);
    sub_1005542A4(result, (uint64_t)v18);
    v17[0] = v18[0];
    *(_OWORD *)((char *)v17 + 12) = *(_OWORD *)((char *)v18 + 12);
    sub_10023195C(a1, 1, (uint64_t)v17);
    if (v3 != *(unsigned __int8 *)(a1 + 16))
    {
      sub_1010A8538(a1, v3, &v16);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10219EE38);
      v4 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
      {
        v5 = SHIBYTE(v16.__r_.__value_.__r.__words[2]);
        v6 = v16.__r_.__value_.__r.__words[0];
        sub_1010A8538(a1, *(unsigned __int8 *)(a1 + 16), __p);
        v7 = &v16;
        if (v5 < 0)
          v7 = (std::string *)v6;
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v8 = __p;
        else
          v8 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v8;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[resume reminders] detection, %s, %s", (uint8_t *)&buf, 0x16u);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_10219EE38);
        v9 = qword_10229FE68;
        v10 = SHIBYTE(v16.__r_.__value_.__r.__words[2]);
        v11 = v16.__r_.__value_.__r.__words[0];
        sub_1010A8538(a1, *(unsigned __int8 *)(a1 + 16), &buf);
        v12 = &v16;
        if (v10 < 0)
          v12 = (std::string *)v11;
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_buf = &buf;
        else
          p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        v20 = 136315394;
        v21 = v12;
        v22 = 2080;
        v23 = p_buf;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 0, "[resume reminders] detection, %s, %s", (const char *)&v20, 22);
        v15 = v14;
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        sub_100512490("Generic", 1, 0, 2, "void CLWorkoutResumeReminders::Controller::update()", "%s\n", (const char *)v15);
        if (v15 != __p)
          free(v15);
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
    }
    return (double *)sub_1010A8704(a1);
  }
  return result;
}

void sub_1010A8508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1010A8538(uint64_t a1@<X0>, unsigned int a2@<W1>, std::string *a3@<X8>)
{
  char *v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  std::string::size_type size;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;
  void *v17[2];
  char v18;

  if (a2 > 3)
    v5 = "unknown";
  else
    v5 = (&off_10219EED8)[(char)a2];
  sub_1015A2E04(v17, v5);
  std::to_string(&v16, *(_QWORD *)(a1 + 80));
  std::operator+<char>(&v13, "[state = ", v17);
  v6 = std::string::append(&v13, ", workout = ");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v16;
  else
    v8 = (std::string *)v16.__r_.__value_.__r.__words[0];
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  else
    size = v16.__r_.__value_.__l.__size_;
  v10 = std::string::append(&v14, (const std::string::value_type *)v8, size);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v15, "]");
  *a3 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (v18 < 0)
    operator delete(v17[0]);
}

void sub_1010A8688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v28 - 41) < 0)
    operator delete(*(void **)(v28 - 64));
  if (*(char *)(v28 - 17) < 0)
    operator delete(*(void **)(v28 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010A8704(uint64_t result)
{
  unint64_t v1;
  _DWORD *v2;
  uint64_t v6;

  if (*(_QWORD *)(result + 192) != 1)
  {
    v1 = *(_QWORD *)(result + 80);
    v2 = *(_DWORD **)(result + 24);
    if (v1 <= 0x18 && ((0xFD7FFFu >> v1) & 1) == 0 && v2[92] == 0 && *(_BYTE *)(result + 16) == 2)
    {
      v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v2 + 16))(*(_QWORD *)v2);
      return sub_1000E4778(v6);
    }
  }
  return result;
}

void sub_1010A876C(uint64_t a1, double a2)
{
  NSObject *v4;
  int v5;
  std::string::size_type v6;
  std::string *v7;
  std::string *v8;
  uint64_t v9;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  std::string *p_buf;
  std::string *v14;
  std::string *v15;
  _QWORD v16[2];
  std::string v17;
  std::string buf;
  int v19;
  std::string *v20;
  __int16 v21;
  std::string *v22;
  std::string __p[68];

  sub_1010A8538(a1, *(unsigned __int8 *)(a1 + 16), &v17);
  v16[0] = 0;
  *(double *)&v16[1] = a2;
  sub_10023195C(a1, 2, (uint64_t)v16);
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10219EE38);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v5 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
    v6 = v17.__r_.__value_.__r.__words[0];
    sub_1010A8538(a1, *(unsigned __int8 *)(a1 + 16), __p);
    v7 = &v17;
    if (v5 < 0)
      v7 = (std::string *)v6;
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = __p;
    else
      v8 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[resume reminders] manual pause, prev, %s, current, %s", (uint8_t *)&buf, 0x16u);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10219EE38);
    v9 = qword_10229FE68;
    v10 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
    v11 = v17.__r_.__value_.__r.__words[0];
    sub_1010A8538(a1, *(unsigned __int8 *)(a1 + 16), &buf);
    v12 = &v17;
    if (v10 < 0)
      v12 = (std::string *)v11;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_buf = &buf;
    else
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    v19 = 136315394;
    v20 = v12;
    v21 = 2080;
    v22 = p_buf;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 0, "[resume reminders] manual pause, prev, %s, current, %s", (const char *)&v19, 22);
    v15 = v14;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutResumeReminders::Controller::feedManualPause(CFAbsoluteTime)", "%s\n", (const char *)v15);
    if (v15 != __p)
      free(v15);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_1010A8A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1010A8A38(uint64_t a1, double a2)
{
  NSObject *v4;
  int v5;
  std::string::size_type v6;
  std::string *v7;
  std::string *v8;
  uint64_t v9;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  std::string *p_buf;
  std::string *v14;
  std::string *v15;
  _QWORD v16[2];
  std::string v17;
  std::string buf;
  int v19;
  std::string *v20;
  __int16 v21;
  std::string *v22;
  std::string __p[68];

  sub_1010A8538(a1, *(unsigned __int8 *)(a1 + 16), &v17);
  v16[0] = 1;
  *(double *)&v16[1] = a2;
  sub_10023195C(a1, 2, (uint64_t)v16);
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10219EE38);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v5 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
    v6 = v17.__r_.__value_.__r.__words[0];
    sub_1010A8538(a1, *(unsigned __int8 *)(a1 + 16), __p);
    v7 = &v17;
    if (v5 < 0)
      v7 = (std::string *)v6;
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = __p;
    else
      v8 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[resume reminders] manual resume, prev, %s, current, %s", (uint8_t *)&buf, 0x16u);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10219EE38);
    v9 = qword_10229FE68;
    v10 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
    v11 = v17.__r_.__value_.__r.__words[0];
    sub_1010A8538(a1, *(unsigned __int8 *)(a1 + 16), &buf);
    v12 = &v17;
    if (v10 < 0)
      v12 = (std::string *)v11;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_buf = &buf;
    else
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    v19 = 136315394;
    v20 = v12;
    v21 = 2080;
    v22 = p_buf;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 0, "[resume reminders] manual resume, prev, %s, current, %s", (const char *)&v19, 22);
    v15 = v14;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutResumeReminders::Controller::feedManualResume(CFAbsoluteTime)", "%s\n", (const char *)v15);
    if (v15 != __p)
      free(v15);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_1010A8CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1010A8D0C(uint64_t a1, double a2)
{
  NSObject *v4;
  int v5;
  std::string::size_type v6;
  std::string *v7;
  std::string *v8;
  uint64_t v9;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  std::string *p_buf;
  std::string *v14;
  std::string *v15;
  _QWORD v16[2];
  std::string v17;
  std::string buf;
  int v19;
  std::string *v20;
  __int16 v21;
  std::string *v22;
  std::string __p[68];

  sub_1010A8538(a1, *(unsigned __int8 *)(a1 + 16), &v17);
  v16[0] = 2;
  *(double *)&v16[1] = a2;
  sub_10023195C(a1, 2, (uint64_t)v16);
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10219EE38);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v5 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
    v6 = v17.__r_.__value_.__r.__words[0];
    sub_1010A8538(a1, *(unsigned __int8 *)(a1 + 16), __p);
    v7 = &v17;
    if (v5 < 0)
      v7 = (std::string *)v6;
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = __p;
    else
      v8 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[resume reminders] alert dismissed, prev, %s, current, %s", (uint8_t *)&buf, 0x16u);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10219EE38);
    v9 = qword_10229FE68;
    v10 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
    v11 = v17.__r_.__value_.__r.__words[0];
    sub_1010A8538(a1, *(unsigned __int8 *)(a1 + 16), &buf);
    v12 = &v17;
    if (v10 < 0)
      v12 = (std::string *)v11;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_buf = &buf;
    else
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    v19 = 136315394;
    v20 = v12;
    v21 = 2080;
    v22 = p_buf;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 0, "[resume reminders] alert dismissed, prev, %s, current, %s", (const char *)&v19, 22);
    v15 = v14;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutResumeReminders::Controller::feedAlertDismiss(CFAbsoluteTime)", "%s\n", (const char *)v15);
    if (v15 != __p)
      free(v15);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_1010A8FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010A8FE0(uint64_t result, int a2)
{
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (*(unsigned __int8 *)(result + 296) != a2)
  {
    v3 = result;
    *(_BYTE *)(result + 296) = a2;
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10219EE38);
    v4 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v9 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[resume reminder] toggling enablement to %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10219EE38);
      v7[0] = 67109120;
      v7[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "[resume reminder] toggling enablement to %d", v7);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutResumeReminders::Controller::toggle(BOOL)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    if (*(_BYTE *)(v3 + 296))
    {
      if (*(_BYTE *)(v3 + 16) == 1)
      {
        CFAbsoluteTimeGetCurrent();
        sub_1010A91DC(v3);
      }
    }
    else
    {
      sub_1010A8088(v3);
    }
    buf[0] = a2;
    return sub_10023195C(v3, 3, (uint64_t)buf);
  }
  return result;
}

void sub_1010A91DC(uint64_t a1)
{
  uint64_t ***v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  const char *v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  _WORD v12[8];
  uint8_t buf[1640];

  v2 = (uint64_t ***)(a1 + 200);
  if (*(_QWORD *)(a1 + 200))
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10219EE38);
    v3 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[resume reminders] resetting detector", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10219EE38);
      v12[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "[resume reminders] resetting detector", v12, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutResumeReminders::Controller::bringupDetector(CFAbsoluteTime)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    sub_1010A9BA0(v2, 0);
  }
  if (*(_QWORD *)(a1 + 192) == 1 || *(_DWORD *)(*(_QWORD *)(a1 + 24) + 368))
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10219EE38);
    v4 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[resume reminders] workout isn't eligible", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10219EE38);
    v12[0] = 0;
    LODWORD(v11) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "[resume reminders] workout isn't eligible", v12, v11);
    v7 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutResumeReminders::Controller::bringupDetector(CFAbsoluteTime)", "%s\n", v8);
LABEL_29:
    if (v7 != buf)
      free(v7);
    return;
  }
  if (*(_BYTE *)(a1 + 296))
    operator new();
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10219EE38);
  v5 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[resume reminders] reminders aren't enabled", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10219EE38);
    v12[0] = 0;
    LODWORD(v11) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "[resume reminders] reminders aren't enabled", v12, v11);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutResumeReminders::Controller::bringupDetector(CFAbsoluteTime)", "%s\n", v6);
    goto LABEL_29;
  }
}

void sub_1010A964C()
{
  operator delete();
}

_QWORD *sub_1010A9678(_QWORD *result)
{
  uint64_t v1;

  v1 = result[10];
  if (v1 == 19 || v1 == 4)
    return (_QWORD *)sub_100900424((uint64_t)(result + 30), v1, result[11], result[12], result[13]);
  return result;
}

_QWORD *sub_1010A96A0(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v3;

  v1 = result[10];
  if (v1 == 19 || v1 == 4)
  {
    v3 = result + 30;
    sub_100900120((uint64_t)(result + 30), v1, result[11], result[12], result[13]);
    return sub_1009004D0(v3);
  }
  return result;
}

uint64_t sub_1010A96EC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v15[4];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  *(double *)&v4 = CFAbsoluteTimeGetCurrent();
  v16 = 0u;
  v17 = 0u;
  v5 = a2[2];
  v15[3] = v4;
  v15[0] = v5;
  v15[1] = v4;
  v15[2] = 22;
  v6 = *(_OWORD *)(a1 + 176);
  v26 = *(_OWORD *)(a1 + 160);
  v27 = v6;
  v28 = *(_QWORD *)(a1 + 192);
  v7 = *(_OWORD *)(a1 + 112);
  v22 = *(_OWORD *)(a1 + 96);
  v23 = v7;
  v8 = *(_OWORD *)(a1 + 144);
  v24 = *(_OWORD *)(a1 + 128);
  v25 = v8;
  v9 = *(_OWORD *)(a1 + 48);
  v18 = *(_OWORD *)(a1 + 32);
  v19 = v9;
  v10 = *(_OWORD *)(a1 + 80);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = v10;
  v11 = *a2;
  v12 = *(_QWORD *)(a1 + 80);
  v13 = *((_DWORD *)a2 + 2);
  if (*a2 == v12 && v13 == 2)
  {
    if (*((_DWORD *)a2 + 6) == 2)
      *(_QWORD *)&v21 = 25;
  }
  else if (v11 == v12 && v13 == 1)
  {
    v21 = xmmword_101C3E970;
  }
  else if (v11 != v12)
  {
    v21 = 0uLL;
  }
  return sub_1010A9938(a1, v15);
}

void sub_1010A9804(uint64_t a1, uint64_t *a2)
{
  uint64_t **v3;

  sub_1010A96EC(a1, a2);
  v3 = *(uint64_t ***)(a1 + 200);
  if (v3)
    sub_1005543A4(v3, 1);
}

void sub_1010A983C(uint64_t a1, uint64_t *a2)
{
  uint64_t **v3;

  sub_1010A96EC(a1, a2);
  sub_10090020C(a1 + 240);
  v3 = *(uint64_t ***)(a1 + 200);
  if (v3)
    sub_1005543A4(v3, 0);
}

uint64_t sub_1010A987C(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7[4];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  sub_1010A91DC(a1);
  sub_10090020C(a1 + 240);
  v7[0] = CFAbsoluteTimeGetCurrent();
  v7[1] = v7[0];
  v7[2] = 22;
  v7[3] = v7[0];
  v8 = 0u;
  v9 = 0u;
  v2 = *(_OWORD *)(a1 + 176);
  v18 = *(_OWORD *)(a1 + 160);
  v19 = v2;
  v20 = *(_QWORD *)(a1 + 192);
  v3 = *(_OWORD *)(a1 + 112);
  v14 = *(_OWORD *)(a1 + 96);
  v15 = v3;
  v4 = *(_OWORD *)(a1 + 144);
  v16 = *(_OWORD *)(a1 + 128);
  v17 = v4;
  v5 = *(_OWORD *)(a1 + 48);
  v10 = *(_OWORD *)(a1 + 32);
  v11 = v5;
  v12 = *(_OWORD *)(a1 + 64);
  v13 = 0uLL;
  return sub_1010A9938(a1, v7);
}

uint64_t sub_1010A9938(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;

  if (*(_QWORD *)(result + 232))
  {
    v3 = result;
    result = _os_feature_enabled_impl("Workout", "ResumeReminder");
    if ((_DWORD)result)
    {
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10219EE38);
      v4 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
      {
        v5 = a2[14];
        v6 = *a2;
        v7 = a2[2];
        v8 = a2[3];
        *(_DWORD *)buf = 134218752;
        v25 = v7;
        v26 = 2048;
        v27 = v5;
        v28 = 2048;
        v29 = v6;
        v30 = 2048;
        v31 = v8;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[resume reminders] notifying event %zu, workout, %zu, detectionTime, %f, currentTime, %f", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_10219EE38);
        v10 = a2[14];
        v11 = *a2;
        v12 = a2[2];
        v13 = a2[3];
        v16 = 134218752;
        v17 = v12;
        v18 = 2048;
        v19 = v10;
        v20 = 2048;
        v21 = v11;
        v22 = 2048;
        v23 = v13;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "[resume reminders] notifying event %zu, workout, %zu, detectionTime, %f, currentTime, %f", (size_t)&v16, 42);
        v15 = (uint8_t *)v14;
        sub_100512490("Generic", 1, 0, 2, "void CLWorkoutResumeReminders::Controller::notifyEvent(const CLMotionStateMediator_Type::WorkoutEvent &) const", "%s\n", v14);
        if (v15 != buf)
          free(v15);
      }
      v9 = *(_QWORD *)(v3 + 232);
      if (!v9)
        sub_10025FD1C();
      return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 48))(v9, a2);
    }
  }
  return result;
}

_QWORD *sub_1010A9B70(_QWORD *a1)
{
  uint64_t ***v2;
  uint64_t v3;

  v3 = a1[25];
  v2 = (uint64_t ***)(a1 + 25);
  if (v3)
    sub_1010A9BA0(v2, 0);
  return sub_1010A9BDC(a1);
}

uint64_t **sub_1010A9BA0(uint64_t ***a1, uint64_t **a2)
{
  uint64_t **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1005542A0(result);
    operator delete();
  }
  return result;
}

_QWORD *sub_1010A9BDC(_QWORD *result)
{
  _QWORD *v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (result[38])
  {
    v1 = result;
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10219EE38);
    v2 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[resume reminders] releasing power assertion", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10219EE38);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "[resume reminders] releasing power assertion", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutResumeReminders::Controller::releasePowerAssertion()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    sub_100E3E6F0(v1[38]);
    result = (_QWORD *)v1[38];
    v1[38] = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_1010A9D94(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  void *__p[2];
  uint64_t v10;
  _WORD v11[8];
  uint8_t buf[16];
  uint64_t v13;

  if (!*(_BYTE *)(a1 + 296) || *(_QWORD *)(a1 + 192) == 1 || *(_DWORD *)(*(_QWORD *)(a1 + 24) + 368))
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10219EE38);
    v2 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[resume reminder] destroying power assertion because it shouldn't be running", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10219EE38);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "[resume reminder] destroying power assertion because it shouldn't be running", v11, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutResumeReminders::Controller::takePowerAsertion()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    sub_1010A9BDC((_QWORD *)a1);
  }
  else
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10219EE38);
    v3 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[resume reminders] taking power assertion", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10219EE38);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "[resume reminders] taking power assertion", v11, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutResumeReminders::Controller::takePowerAsertion()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    v4 = *(_QWORD *)(a1 + 304);
    if (!v4)
      operator new();
    sub_1015A2E04(__p, "Running Resume Controller");
    if (*(int *)(v4 + 8) <= 0)
    {
      if (SHIBYTE(v10) < 0)
      {
        sub_100115CE4(buf, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        *(_OWORD *)buf = *(_OWORD *)__p;
        v13 = v10;
      }
      sub_10002B684(v4, (uint64_t *)buf);
      if (SHIBYTE(v13) < 0)
        operator delete(*(void **)buf);
    }
    if (SHIBYTE(v10) < 0)
      operator delete(__p[0]);
  }
}

void sub_1010AA13C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1010AA198(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_1010AA1C8()
{
  operator delete();
}

_QWORD *sub_1010AA1DC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10219EE68;
  result[1] = v3;
  return result;
}

uint64_t sub_1010AA210(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10219EE68;
  a2[1] = v2;
  return result;
}

uint64_t sub_1010AA22C(uint64_t a1, uint64_t *a2)
{
  return sub_1010A9938(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_1010AA234(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010AA270()
{
}

uint64_t *sub_1010AA27C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  _BYTE v8[24];
  _BYTE *v9;
  char v10;

  *a1 = a2;
  a1[1] = a3;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  sub_1010AABE0(v8, a4);
  sub_1010AA448(a1, (uint64_t)v8);
  if (v10)
  {
    v5 = v9;
    if (v9 == v8)
    {
      v6 = 4;
      v5 = v8;
      goto LABEL_6;
    }
    if (v9)
    {
      v6 = 5;
LABEL_6:
      (*(void (**)(void))(*v5 + 8 * v6))();
    }
  }
  return a1;
}

void sub_1010AA330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, char a11, uint64_t a12, uint64_t a13, char *a14, char a15)
{
  char *v16;
  uint64_t v17;

  if (a15)
  {
    v16 = a14;
    if (a14 == &a11)
    {
      v17 = 4;
      v16 = &a11;
    }
    else
    {
      if (!a14)
        goto LABEL_7;
      v17 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
  }
LABEL_7:
  sub_1010AAC3C(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_1010AA388(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  _BYTE v7[24];
  _BYTE *v8;
  char v9;

  v7[0] = 0;
  v9 = 0;
  sub_1010AA27C(a1, a2, a3, (uint64_t)v7);
  if (v9)
  {
    v4 = v8;
    if (v8 == v7)
    {
      v5 = 4;
      v4 = v7;
      goto LABEL_6;
    }
    if (v8)
    {
      v5 = 5;
LABEL_6:
      (*(void (**)(void))(*v4 + 8 * v5))();
    }
  }
  return a1;
}

void sub_1010AA424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a13)
    sub_10193DA20(&a9);
  _Unwind_Resume(exception_object);
}

void **sub_1010AA448(uint64_t *a1, uint64_t a2)
{
  CFStringRef v4;
  int v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  NSObject *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  const char *v19;
  char *v20;
  uint64_t v21[2];
  uint64_t v22[2];
  const char *v23[2];
  uint64_t v24[2];
  void *v25;
  _BYTE v26[24];
  _BYTE *v27;
  char v28;
  __int128 buf;
  char v30;
  _QWORD v31[2];
  _BYTE v32[24];
  _BYTE *v33;
  char v34;
  char v35[16];

  sub_1001E4804(&buf);
  LODWORD(v31[0]) = 0;
  v4 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsMaintenanceInterval", 0x8000100u, kCFAllocatorNull);
  v5 = sub_1000B1180(buf, (uint64_t)v4, v31);
  CFRelease(v4);
  v6 = LODWORD(v31[0]);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v5)
    v10 = v6;
  else
    v10 = 86400;
  sub_100343390(v24, v10);
  sub_1003433A4(v23, (uint64_t)XPC_ACTIVITY_PRIORITY_MAINTENANCE);
  sub_100343360((uint64_t)v22, 0);
  sub_100343378((uint64_t)v21, 1);
  sub_1010AACEC(&v25, v24[0], v24[1], v23[0], v23[1], v22[0], v22[1], v11, v21[0], v21[1]);
  v12 = *a1;
  sub_1010AABE0(v26, a2);
  v31[0] = v12;
  v31[1] = a1;
  v13 = v32;
  sub_1010AABE0(v32, (uint64_t)v26);
  if (!v28)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10219EEF8);
    v14 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "MicroLocationMaintenance";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Registering for XPC Activity %s", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10219EEF8);
      *(_DWORD *)v35 = 136315138;
      *(_QWORD *)&v35[4] = "MicroLocationMaintenance";
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00F8, 2, "Registering for XPC Activity %s", v35);
      v20 = (char *)v19;
      sub_100512490("Generic", 1, 0, 2, "void (anonymous namespace)::registerActivity(const XPCCriteria &, CLMicroLocationBackgroundActivities::IBackgroundActivitiesDelegate &, std::vector<std::unique_ptr<XPCRegistration>> &, std::optional<ObserverRegistrationFunction>, RunActivity) [WorkT = CLMicroLocationMaintenance, RunActivity = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationBackgroundActivities.mm:100:15)]", "%s\n", v19);
      if (v20 != (char *)&buf)
        free(v20);
    }
    operator new();
  }
  sub_1015A2E04(&buf, "MicroLocationMaintenance");
  if (!v27)
    sub_10025FD1C();
  (*(void (**)(_BYTE *, __int128 *, void **))(*(_QWORD *)v27 + 48))(v27, &buf, &v25);
  if (v30 < 0)
    operator delete((void *)buf);
  if (v34)
  {
    if (v33 == v32)
    {
      v15 = 4;
    }
    else
    {
      if (!v33)
        goto LABEL_25;
      v15 = 5;
      v13 = v33;
    }
    (*(void (**)(_QWORD *))(*v13 + 8 * v15))(v13);
  }
LABEL_25:
  if (v28)
  {
    v16 = v27;
    if (v27 == v26)
    {
      v17 = 4;
      v16 = v26;
      goto LABEL_30;
    }
    if (v27)
    {
      v17 = 5;
LABEL_30:
      (*(void (**)(void))(*v16 + 8 * v17))();
    }
  }
  return sub_1003433E8(&v25);
}

void sub_1010AAA08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,char *a30,char a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;

  if (*(_BYTE *)(v49 - 136))
  {
    v51 = *(_QWORD **)(v49 - 144);
    if (v51 == v48)
    {
      v52 = 4;
    }
    else
    {
      if (!v51)
        goto LABEL_7;
      v52 = 5;
      v48 = *(_QWORD **)(v49 - 144);
    }
    (*(void (**)(_QWORD *))(*v48 + 8 * v52))(v48);
  }
LABEL_7:
  if (!a31)
    goto LABEL_13;
  v53 = a30;
  if (a30 == &a27)
  {
    v54 = 4;
    v53 = &a27;
  }
  else
  {
    if (!a30)
      goto LABEL_13;
    v54 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v53 + 8 * v54))();
LABEL_13:
  sub_1003433E8(&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1010AABA8(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 16);
  sub_1010AAC3C(&v3);
  return a1;
}

_BYTE *sub_1010AABE0(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[32] = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    sub_100270E34((uint64_t)a1, a2);
    a1[32] = 1;
  }
  return a1;
}

void sub_1010AAC20(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 32))
    sub_10193DA54((_QWORD *)v1);
  _Unwind_Resume(exception_object);
}

void sub_1010AAC3C(void ***a1)
{
  void **v1;
  const char **v2;
  const char **v4;
  void *v5;

  v1 = *a1;
  v2 = (const char **)**a1;
  if (v2)
  {
    v4 = (const char **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_1010AACB0(--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

const char *sub_1010AACB0(const char **a1, const char *a2)
{
  const char *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10034395C(result);
    operator delete();
  }
  return result;
}

xpc_object_t *sub_1010AACEC(xpc_object_t *a1, uint64_t a2, uint64_t a3, const char *a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  xpc_object_t v11;
  _QWORD v13[2];
  _QWORD v14[2];
  const char *v15[2];
  _QWORD v16[2];

  v16[0] = a2;
  v16[1] = a3;
  v15[0] = a4;
  v15[1] = a5;
  v14[0] = a6;
  v14[1] = a7;
  v13[0] = a9;
  v13[1] = a10;
  v11 = xpc_dictionary_create(0, 0, 0);
  *a1 = v11;
  sub_100343340((uint64_t)v16, v11);
  sub_100343350(v15, *a1);
  sub_10034332C((uint64_t)v14, *a1);
  sub_10034332C((uint64_t)v13, *a1);
  return a1;
}

void sub_1010AAD6C(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_1010AAD98(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    sub_1010AACB0((const char **)(i - 8), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1010AADE8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_10219EF28;
  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(_QWORD **)(a1 + 48);
    if (v2 == (_QWORD *)(a1 + 24))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 24);
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  return a1;
}

void sub_1010AAE4C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_10219EF28;
  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(_QWORD **)(a1 + 48);
    if (v2 == (_QWORD *)(a1 + 24))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 24);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  operator delete();
}

char *sub_1010AAEC0(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = off_10219EF28;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  sub_1010AABE0(v2 + 24, a1 + 24);
  return v2;
}

void sub_1010AAF0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_1010AAF20(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_10219EF28;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return sub_1010AABE0((_BYTE *)(a2 + 24), a1 + 24);
}

uint64_t sub_1010AAF44(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(result + 56))
  {
    v1 = result + 24;
    result = *(_QWORD *)(result + 48);
    if (result == v1)
    {
      v2 = 4;
      result = v1;
      return (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v2))();
    }
    if (result)
    {
      v2 = 5;
      return (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v2))();
    }
  }
  return result;
}

void sub_1010AAF80(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;

  if (*((_BYTE *)__p + 56))
  {
    v2 = (_QWORD *)__p[6];
    if (v2 == __p + 3)
    {
      v3 = 4;
      v2 = __p + 3;
      goto LABEL_6;
    }
    if (v2)
    {
      v3 = 5;
LABEL_6:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  operator delete(__p);
}

id sub_1010AAFD8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  _QWORD v7[7];

  v3 = *a2;
  v4 = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3321888768;
  v7[2] = sub_1010AB0FC;
  v7[3] = &unk_10219EF98;
  v5 = *(_QWORD *)(a1 + 16);
  v7[4] = *(_QWORD *)(a1 + 8);
  v7[5] = v3;
  v7[6] = v5;
  return objc_msgSend(v4, "async:", v7);
}

uint64_t sub_1010AB050(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010AB08C()
{
}

uint64_t sub_1010AB098(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_1010AB0FC(uint64_t a1)
{
  uint64_t v1;
  void **v2[2];
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 40);
  sub_1002AD0B4(&v3, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8));
  sub_1010AB18C((uint64_t)v2, v1, (uint64_t)&v3);
  sub_1010AB4FC((uint64_t)v2);
  v2[0] = (void **)&v4;
  sub_1002AE76C(v2);
}

void sub_1010AB158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  a10 = (void **)(v10 + 8);
  sub_1002AE76C(&a10);
  _Unwind_Resume(a1);
}

__n128 sub_1010AB174(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[2];
  a1[3].n128_u64[0] = a2[3].n128_u64[0];
  a1[2] = result;
  return result;
}

uint64_t sub_1010AB18C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  std::chrono::steady_clock::time_point v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::chrono::steady_clock::time_point v13;
  NSObject *v14;
  int v15;
  int v17;
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  _QWORD v22[2];
  _QWORD v23[3];
  _QWORD *v24;

  *(_QWORD *)a1 = a2;
  *(_WORD *)(a1 + 8) = 0;
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10219EEF8);
  v5 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    v17 = 68289282;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 2082;
    v22[0] = "MicroLocationMaintenance";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Activity runner: starting activty\", \"Activity\":%{public, location:escape_only}s}", (uint8_t *)&v17, 0x1Cu);
  }
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v7 = (uint64_t *)sub_1000DCFC0(a3);
  v8 = *v7;
  v9 = v7[1];
  if (*v7 != v9)
  {
    while (1)
    {
      if (sub_100343B44((xpc_activity_t *)a1))
      {
        *(_WORD *)(a1 + 8) = 1;
        return a1;
      }
      v23[0] = off_10219EFD8;
      v23[1] = a1;
      v24 = v23;
      v10 = *(_QWORD *)(v8 + 24);
      if (!v10)
        sub_10025FD1C();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 48))(v10, v23);
      v11 = v24;
      if (v24 == v23)
        break;
      if (v24)
      {
        v12 = 5;
LABEL_12:
        (*(void (**)(void))(*v11 + 8 * v12))();
      }
      v8 += 32;
      if (v8 == v9)
        goto LABEL_14;
    }
    v11 = v23;
    v12 = 4;
    goto LABEL_12;
  }
LABEL_14:
  *(_WORD *)(a1 + 8) = 2;
  v13.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10219EEF8);
  v14 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    v15 = *(unsigned __int16 *)(a1 + 8);
    v17 = 68289538;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 1026;
    LODWORD(v22[0]) = v15;
    WORD2(v22[0]) = 1026;
    *(_DWORD *)((char *)v22 + 6) = (v13.__d_.__rep_ - v6.__d_.__rep_) / 1000000;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Activity runner: activity finished\", \"State\":%{public}u, \"Time elapsed (ms)\":%{public}u}", (uint8_t *)&v17, 0x1Eu);
  }
  return a1;
}

void sub_1010AB40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;

  v18 = a17;
  if (a17 == &a14)
  {
    v19 = 4;
    v18 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1010AB454(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10219EFD8;
  result[1] = v3;
  return result;
}

uint64_t sub_1010AB48C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10219EFD8;
  a2[1] = v2;
  return result;
}

BOOL sub_1010AB4AC(uint64_t a1)
{
  return sub_100343B44(*(xpc_activity_t **)(a1 + 8));
}

uint64_t sub_1010AB4B4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010AB4F0()
{
}

uint64_t sub_1010AB4FC(uint64_t a1)
{
  int v2;
  NSObject *v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  const char *v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;

  v2 = *(unsigned __int16 *)(a1 + 8);
  if (v2 == 2)
  {
LABEL_15:
    sub_100343B4C((xpc_activity_t *)a1);
    return a1;
  }
  if (v2 == 1)
  {
    sub_100343B54((xpc_activity_t *)a1);
    return a1;
  }
  if (!*(_WORD *)(a1 + 8))
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10219EEF8);
    v3 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Activity runner: Activity didn't complete before the runner was destroyed. Most likely this means there was an exception during the activity. Please check the logs.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10219EEF8);
      LOWORD(v10) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Activity runner: Activity didn't complete before the runner was destroyed. Most likely this means there was an exception during the activity. Please check the logs.", &v10, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "CLMicroLocationBackgroundActivities::ActivityRunner<CLMicroLocationXPCActivityHelpers::XPCActivity, CLMicroLocationMaintenance>::~ActivityRunner() [ActivityT = CLMicroLocationXPCActivityHelpers::XPCActivity, WorkT = CLMicroLocationMaintenance]", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219F048);
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315650;
      v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationBackgroundActivities.h";
      v18 = 1024;
      v19 = 92;
      v20 = 2080;
      v21 = "false";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10219F048);
      v10 = 136315650;
      v11 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationBackgroundActivities.h";
      v12 = 1024;
      v13 = 92;
      v14 = 2080;
      v15 = "false";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assert Failed, %s, %d, %s", (const char *)&v10, 28);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "CLMicroLocationBackgroundActivities::ActivityRunner<CLMicroLocationXPCActivityHelpers::XPCActivity, CLMicroLocationMaintenance>::~ActivityRunner() [ActivityT = CLMicroLocationXPCActivityHelpers::XPCActivity, WorkT = CLMicroLocationMaintenance]", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    sub_100512450();
    goto LABEL_15;
  }
  return a1;
}

void sub_1010AB860(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_1010AB86C(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_1010AB898@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(*a1 + 8 * a2))();
}

BOOL sub_1010AB8A4(uint64_t a1, const char *a2)
{
  const char *v4;
  uint64_t *v5;
  NSDictionary *v6;
  NSDictionary *v7;
  NSObject *v8;
  const char *v9;
  _BOOL8 result;
  NSObject *v11;
  const char *v12;
  const char *v13;
  double v14;
  uint8_t *v15;
  uint8_t *v16;
  NSObject *v17;
  const char *v18;
  _BOOL4 v19;
  const char *v20;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  double v24;
  uint8_t *v25;
  int v26;
  const char *v27;
  uint8_t buf[4];
  const char *v29;

  if (a2[23] >= 0)
    v4 = a2;
  else
    v4 = *(const char **)a2;
  if (!sub_1000B78B0(v4))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219F250);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      if (a2[23] >= 0)
        v12 = a2;
      else
        v12 = *(const char **)a2;
      *(_DWORD *)buf = 136315138;
      v29 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "The handsfree whitelist file %s does not exist.", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219F250);
    if (a2[23] >= 0)
      v13 = a2;
    else
      v13 = *(const char **)a2;
    v26 = 136315138;
    v27 = v13;
    v14 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "The handsfree whitelist file %s does not exist.", (const char *)&v26);
    v16 = v15;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBTHandsfreeWhitelist::load(const std::string &)", "%s\n", v14);
LABEL_54:
    if (v16 != buf)
      free(v16);
    return 0;
  }
  if (a2[23] >= 0)
    v5 = (uint64_t *)a2;
  else
    v5 = *(uint64_t **)a2;
  v6 = +[NSDictionary dictionaryWithContentsOfFile:](NSDictionary, "dictionaryWithContentsOfFile:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5));
  if (v6)
  {
    v7 = v6;
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219F250);
    v8 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      if (a2[23] >= 0)
        v9 = a2;
      else
        v9 = *(const char **)a2;
      *(_DWORD *)buf = 136315138;
      v29 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Loaded handsfree whitelist file from file %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10219F250);
      if (a2[23] >= 0)
        v20 = a2;
      else
        v20 = *(const char **)a2;
      v26 = 136315138;
      v27 = v20;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Loaded handsfree whitelist file from file %s", (const char *)&v26);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLBTHandsfreeWhitelist::load(const std::string &)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    return sub_1010ABD98(a1, v7);
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10219F250);
  v17 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    if (a2[23] >= 0)
      v18 = a2;
    else
      v18 = *(const char **)a2;
    *(_DWORD *)buf = 136446210;
    v29 = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "The handsfree whitelist file %{public}s is malformed.", buf, 0xCu);
  }
  v19 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v19)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219F250);
    if (a2[23] >= 0)
      v23 = a2;
    else
      v23 = *(const char **)a2;
    v26 = 136446210;
    v27 = v23;
    v24 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "The handsfree whitelist file %{public}s is malformed.", &v26, 12);
    v16 = v25;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLBTHandsfreeWhitelist::load(const std::string &)", "%s\n", v24);
    goto LABEL_54;
  }
  return result;
}

BOOL sub_1010ABD98(uint64_t a1, void *a2)
{
  id v4;
  signed int v5;
  NSObject *v6;
  int v7;
  uint64_t **v8;
  char *v9;
  NSObject *v10;
  signed int v11;
  _BOOL8 result;
  int v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSScanner *v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *i;
  void *v25;
  id v26;
  uint64_t **v27;
  uint64_t *v28;
  id v29;
  uint64_t v30;
  void *j;
  int v32;
  const char *v33;
  uint8_t *v34;
  uint64_t **v35;
  id obj;
  id v37;
  id v38;
  uint64_t v39;
  id v40;
  uint64_t **v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  unsigned int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint8_t *v56;
  _BYTE v57[128];
  std::string __str;
  _BYTE v59[128];
  uint8_t v60[128];
  uint8_t buf[8];
  __int16 v62;
  signed int v63;
  char v64;

  if (!a2)
    return 0;
  v4 = objc_msgSend(a2, "objectForKey:", CFSTR("version"));
  if (v4)
    v5 = objc_msgSend(v4, "intValue");
  else
    v5 = 1;
  if (*(_DWORD *)(a1 + 80) < v5)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219F250);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_DWORD *)(a1 + 80);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v7;
      v62 = 1024;
      v63 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Handsfree whitelist current version,%d,new version,%d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10219F250);
      v32 = *(_DWORD *)(a1 + 80);
      LODWORD(__str.__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(__str.__r_.__value_.__r.__words[0]) = v32;
      LOWORD(__str.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Handsfree whitelist current version,%d,new version,%d", &__str, 14);
      v34 = (uint8_t *)v33;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLBTHandsfreeWhitelist::load(NSDictionary *)", "%s\n", v33);
      if (v34 != buf)
        free(v34);
    }
    *(_DWORD *)(a1 + 80) = v5;
    v35 = (uint64_t **)(a1 + 8);
    sub_100008848(a1 + 8, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 8) = a1 + 16;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v8 = (uint64_t **)(a1 + 56);
    sub_1010B6B9C(a1 + 56, *(_QWORD **)(a1 + 64));
    *(_QWORD *)(a1 + 56) = a1 + 64;
    *(_QWORD *)(a1 + 64) = 0;
    v9 = *(char **)(a1 + 40);
    *(_QWORD *)(a1 + 72) = 0;
    v41 = (uint64_t **)(a1 + 32);
    sub_100090AE4(a1 + 32, v9);
    *(_QWORD *)(a1 + 32) = a1 + 40;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    if (*(_DWORD *)(a1 + 80) == 1)
      obj = objc_msgSend(a2, "allKeys");
    else
      obj = objc_msgSend(a2, "objectForKey:", CFSTR("addresses"));
    if (*(_DWORD *)(a1 + 80) == 1)
      v38 = 0;
    else
      v38 = objc_msgSend(a2, "objectForKey:", CFSTR("filters"));
    v37 = objc_msgSend(a2, "objectForKey:", CFSTR("btNames"));
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v52, v60, 16);
    if (v40)
    {
      v39 = *(_QWORD *)v53;
      do
      {
        v16 = 0;
        do
        {
          if (*(_QWORD *)v53 != v39)
          {
            v17 = v16;
            objc_enumerationMutation(obj);
            v16 = v17;
          }
          v42 = v16;
          v18 = *(_QWORD *)(*((_QWORD *)&v52 + 1) + 8 * v16);
          v19 = +[NSScanner scannerWithString:](NSScanner, "scannerWithString:", v18);
          v51 = 0;
          if (-[NSScanner scanHexInt:](v19, "scanHexInt:", &v51))
          {
            v51 &= 0xFFFFFFu;
            if (v38)
            {
              v20 = objc_msgSend(v38, "objectForKey:", v18);
              v21 = v20;
              if (v20)
              {
                v49 = 0u;
                v50 = 0u;
                v47 = 0u;
                v48 = 0u;
                v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v47, v59, 16);
                if (v22)
                {
                  v23 = *(_QWORD *)v48;
                  do
                  {
                    for (i = 0; i != v22; i = (char *)i + 1)
                    {
                      if (*(_QWORD *)v48 != v23)
                        objc_enumerationMutation(v21);
                      v25 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * (_QWORD)i);
                      v26 = objc_msgSend(v21, "objectForKey:", v25);
                      sub_1015A2E04(buf, (char *)objc_msgSend(v25, "UTF8String"));
                      sub_1015A2E04(&__str, (char *)objc_msgSend(v26, "UTF8String"));
                      v56 = (uint8_t *)&v51;
                      v27 = sub_1010B7554(v8, &v51, (uint64_t)&unk_101B9EB60, (_DWORD **)&v56);
                      v56 = buf;
                      v28 = sub_1010B7620(v27 + 5, (const void **)buf, (uint64_t)&unk_101B9EB60, (__int128 **)&v56);
                      std::string::operator=((std::string *)(v28 + 7), &__str);
                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__str.__r_.__value_.__l.__data_);
                      if (v64 < 0)
                        operator delete(*(void **)buf);
                    }
                    v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v47, v59, 16);
                  }
                  while (v22);
                }
              }
            }
            sub_1010B775C(v35, &v51, &v51);
          }
          v16 = v42 + 1;
        }
        while ((id)(v42 + 1) != v40);
        v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v52, v60, 16);
      }
      while (v40);
    }
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v29 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v43, v57, 16);
    if (v29)
    {
      v30 = *(_QWORD *)v44;
      do
      {
        for (j = 0; j != v29; j = (char *)j + 1)
        {
          if (*(_QWORD *)v44 != v30)
            objc_enumerationMutation(v37);
          sub_1015A2E04(buf, (char *)objc_msgSend(*(id *)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)j), "UTF8String"));
          sub_1006751D8(v41, (const void **)buf, (uint64_t)buf);
          if (v64 < 0)
            operator delete(*(void **)buf);
        }
        v29 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v43, v57, 16);
      }
      while (v29);
    }
    return 1;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10219F250);
  v10 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v11 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v5;
    v62 = 1024;
    v63 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Will not load older handsfree whitelist version %d than the current version %d", buf, 0xEu);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219F250);
    v13 = *(_DWORD *)(a1 + 80);
    LODWORD(__str.__r_.__value_.__l.__data_) = 67109376;
    HIDWORD(__str.__r_.__value_.__r.__words[0]) = v5;
    LOWORD(__str.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Will not load older handsfree whitelist version %d than the current version %d", &__str, 14);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBTHandsfreeWhitelist::load(NSDictionary *)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
    return 0;
  }
  return result;
}

void sub_1010AC4B0(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x2E7]) < 0)
    operator delete((void *)STACK[0x2D0]);
  _Unwind_Resume(a1);
}

uint64_t sub_1010AC4F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  __objc2_class *v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v26;
  const char *v27;
  uint8_t *v28;
  uint64_t v29;
  const char *v30;
  uint8_t *v31;
  const char *v32;
  uint8_t *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  __int16 v37;
  unsigned int v38;
  __int16 v39;
  _BOOL4 v40;
  __int16 v41;
  int v42;
  __int16 v43;
  unsigned int v44;
  __int16 v45;
  int v46;
  uint8_t buf[4];
  uint64_t v48;
  __int16 v49;
  unsigned int v50;
  __int16 v51;
  _BOOL4 v52;
  __int16 v53;
  int v54;
  __int16 v55;
  unsigned int v56;
  __int16 v57;
  int v58;

  v4 = a2 + 8;
  v5 = sub_100C0FFF0((const char *)(a2 + 8));
  if (v5)
  {
    v6 = v5;
    v8 = a1 + 16;
    v7 = *(_QWORD *)(a1 + 16);
    if (!v7)
      goto LABEL_13;
    v9 = a1 + 16;
    do
    {
      v10 = *(_DWORD *)(v7 + 28);
      v11 = v10 >= v5;
      if (v10 >= v5)
        v12 = (uint64_t *)v7;
      else
        v12 = (uint64_t *)(v7 + 8);
      if (v11)
        v9 = v7;
      v7 = *v12;
    }
    while (*v12);
    if (v9 == v8 || *(_DWORD *)(v9 + 28) > v5)
LABEL_13:
      v9 = a1 + 16;
    v13 = sub_1010ACAA0(a1, v5);
    v14 = sub_1010ACC80(a1, a2 + 32);
    v15 = v14;
    v16 = *(_DWORD *)(a2 + 84);
    v17 = DefaultObserver;
    if (v16 == 22)
    {
      v19 = v13 ^ 1u;
    }
    else if (v16 == 17)
    {
      v18 = v13 ^ 1;
      if (v9 == v8)
        v18 = 0;
      v19 = v18 | v14;
    }
    else
    {
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_10219F270);
      v22 = qword_10229FCB8;
      if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#Warning Unexpected device type in handsfree check.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCB0 != -1)
          dispatch_once(&qword_10229FCB0, &stru_10219F270);
        LOWORD(v35) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "#Warning Unexpected device type in handsfree check.", &v35, 2);
        v33 = (uint8_t *)v32;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLBTHandsfreeWhitelist::isHandsfree(const CLBTDeviceEntry &) const", "%s\n", v32);
        if (v33 != buf)
          free(v33);
        v19 = 0;
        v17 = DefaultObserver;
      }
      else
      {
        v19 = 0;
      }
    }
    if (v17[81].superclass != (__objc2_class *)-1)
      dispatch_once(&qword_10229FCB0, &stru_10219F270);
    v23 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a2 + 31) >= 0)
        v24 = v4;
      else
        v24 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)buf = 136316418;
      v48 = v24;
      v49 = 1026;
      v50 = v6;
      v51 = 1026;
      v52 = v9 != v8;
      v53 = 1026;
      v54 = v13;
      v55 = 1026;
      v56 = v15;
      v57 = 1026;
      v58 = v19;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#fmc BT device,address,%s,oui,%{public}d,on whitelist,%{public}d,on denylist,%{public}d,isNameWhitelisted,%{public}d,ishandsfree,%{public}d", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_10219F270);
      if (*(char *)(a2 + 31) >= 0)
        v26 = v4;
      else
        v26 = *(_QWORD *)(a2 + 8);
      v35 = 136316418;
      v36 = v26;
      v37 = 1026;
      v38 = v6;
      v39 = 1026;
      v40 = v9 != v8;
      v41 = 1026;
      v42 = v13;
      v43 = 1026;
      v44 = v15;
      v45 = 1026;
      v46 = v19;
      LODWORD(v34) = 42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "#fmc BT device,address,%s,oui,%{public}d,on whitelist,%{public}d,on denylist,%{public}d,isNameWhitelisted,%{public}d,ishandsfree,%{public}d", &v35, v34);
      v28 = (uint8_t *)v27;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLBTHandsfreeWhitelist::isHandsfree(const CLBTDeviceEntry &) const", "%s\n", v27);
      if (v28 != buf)
        free(v28);
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219F250);
    v20 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a2 + 31) >= 0)
        v21 = v4;
      else
        v21 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)buf = 136315138;
      v48 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning Input BT MAC address %s is malformed.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10219F250);
      if (*(char *)(a2 + 31) >= 0)
        v29 = v4;
      else
        v29 = *(_QWORD *)(a2 + 8);
      v35 = 136315138;
      v36 = v29;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Input BT MAC address %s is malformed.", (const char *)&v35);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLBTHandsfreeWhitelist::isHandsfree(const CLBTDeviceEntry &) const", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
    return 0;
  }
  return v19;
}

uint64_t sub_1010ACAA0(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  _QWORD **v10;
  void *__p[2];
  char v12;
  std::locale v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = *(_QWORD *)(a1 + 64);
  v2 = a1 + 64;
  v3 = v4;
  if (v4)
  {
    v5 = v2;
    do
    {
      v6 = *(_DWORD *)(v3 + 32);
      v7 = v6 >= a2;
      if (v6 >= a2)
        v8 = (uint64_t *)v3;
      else
        v8 = (uint64_t *)(v3 + 8);
      if (v7)
        v5 = v3;
      v3 = *v8;
    }
    while (*v8);
    if (v5 != v2 && *(_DWORD *)(v5 + 32) <= a2)
    {
      sub_1010B7814(&v14, (const void ***)(v5 + 40));
      sub_1015A2E04(__p, "Name");
      v10 = (_QWORD **)sub_10019C4C0((uint64_t)&v14, (const void **)__p);
      if (v12 < 0)
        operator delete(__p[0]);
      if (&v15 != v10)
        sub_100F8F6B0(&v13, (uint64_t)(v10 + 7), 0);
      sub_100D43C24((uint64_t)&v14, v15);
    }
  }
  return 0;
}

void sub_1010ACC20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (__p)
    operator delete(__p);
  sub_100261F44(v14 - 64);
  std::locale::~locale((std::locale *)(v14 - 104));
  sub_100D43C24(v14 - 40, *(_QWORD **)(v14 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_1010ACC80(uint64_t a1, uint64_t a2)
{
  void **v3;
  char *v4;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  std::string __p;
  std::locale v10;
  void *v11[2];
  uint64_t v12;
  void *__dst[2];
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a2;
    v14 = *(_QWORD *)(a2 + 16);
  }
  if (v14 >= 0)
    v3 = __dst;
  else
    v3 = (void **)__dst[0];
  if (v14 >= 0)
    v4 = (char *)HIBYTE(v14);
  else
    v4 = (char *)__dst[1];
  for (; v4; --v4)
  {
    *(_BYTE *)v3 = __toupper(*(char *)v3);
    v3 = (void **)((char *)v3 + 1);
  }
  v5 = *(_QWORD *)(a1 + 32);
  if (v5 != a1 + 40)
  {
    if (*(char *)(v5 + 55) < 0)
    {
      sub_100115CE4(v11, *(void **)(v5 + 32), *(_QWORD *)(v5 + 40));
    }
    else
    {
      *(_OWORD *)v11 = *(_OWORD *)(v5 + 32);
      v12 = *(_QWORD *)(v5 + 48);
    }
    std::operator+<char>(&__p, "\\b", v11);
    v6 = std::string::append(&__p, "\\b");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    *(_QWORD *)&v16 = *((_QWORD *)&v6->__r_.__value_.__l + 2);
    v15 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    sub_100F8F6B0(&v10, (uint64_t)&v15, 0);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
  return 0;
}

void sub_1010ACF58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::locale a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1010AD0A0(id a1)
{
  qword_10230C3F0 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLVehicleConnectionNotifierSilo"));
}

uint64_t sub_1010AD154(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1010AD928;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230C400 != -1)
    dispatch_once(&qword_10230C400, block);
  return qword_102311C88;
}

void sub_1010AD3C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1010AD414(uint64_t a1, char a2)
{
  int v4;
  NSObject *v5;
  const char *v6;
  __int128 *p_p;
  void *v8;
  _QWORD *v9;
  NSString *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  const char *v20;
  uint8_t *v21;
  void *__dst[2];
  uint64_t v23;
  __int128 __p;
  uint64_t v25;
  int v26;
  int v27;
  const char *v28;
  __int16 v29;
  int v30;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  int v34;

  v4 = a2 & 3;
  if (qword_10229FCB0 != -1)
    dispatch_once(&qword_10229FCB0, &stru_10219F270);
  v5 = qword_10229FCB8;
  if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = "answered";
    if ((~a2 & 3) == 0)
      v6 = "timeout";
    *(_DWORD *)buf = 136315394;
    v32 = v6;
    v33 = 1024;
    v34 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#fmc IsVehicleConnectedDialog dismissed with state (%s), %u", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_10219F270);
    v16 = "answered";
    if ((~a2 & 3) == 0)
      v16 = "timeout";
    v27 = 136315394;
    v28 = v16;
    v29 = 1024;
    v30 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "#fmc IsVehicleConnectedDialog dismissed with state (%s), %u", (const char *)&v27, 18);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::onConfirmationPopupDialogCb(CFOptionFlags)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  if ((v4 - 1) >= 2)
  {
    if (v4)
      goto LABEL_27;
  }
  else
  {
    if (*(char *)(a1 + 895) < 0)
    {
      sub_100115CE4(__dst, *(void **)(a1 + 872), *(_QWORD *)(a1 + 880));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)(a1 + 872);
      v23 = *(_QWORD *)(a1 + 888);
    }
    p_p = &__p;
    if (*(char *)(a1 + 919) < 0)
    {
      p_p = (__int128 *)sub_100115CE4(&__p, *(void **)(a1 + 896), *(_QWORD *)(a1 + 904));
    }
    else
    {
      __p = *(_OWORD *)(a1 + 896);
      v25 = *(_QWORD *)(a1 + 912);
    }
    v26 = *(_DWORD *)(a1 + 920);
    sub_1010B3514((uint64_t)p_p, (std::string::size_type)__dst, (a2 & 3) == 1);
    if (SHIBYTE(v25) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v23) < 0)
      operator delete(__dst[0]);
  }
  v8 = objc_autoreleasePoolPush();
  v9 = (_QWORD *)(a1 + 872);
  if (*(char *)(a1 + 895) < 0)
    v9 = (_QWORD *)*v9;
  v10 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9);
  if ((a2 & 3) == 1)
    v11 = &__kCFBooleanTrue;
  else
    v11 = &__kCFBooleanFalse;
  objc_msgSend(*(id *)(a1 + 928), "setObject:forKeyedSubscript:", v11, v10);
  v12 = sub_1001FD94C();
  sub_10023EC14(v12);
  v13 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 944))(v13);
  objc_autoreleasePoolPop(v8);
LABEL_27:
  CFRelease(*(CFTypeRef *)(a1 + 936));
  *(_QWORD *)(a1 + 936) = 0;
  sub_1010B3A64((int64x2_t *)(a1 + 824));
  if (qword_10229FCB0 != -1)
    dispatch_once(&qword_10229FCB0, &stru_10219F270);
  v14 = qword_10229FCB8;
  if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEBUG))
  {
    v15 = *(const char **)(a1 + 864);
    *(_DWORD *)buf = 134217984;
    v32 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#fmc fToBePromptedBTDevices.size(), %lu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_10219F270);
    v19 = *(const char **)(a1 + 864);
    v27 = 134217984;
    v28 = v19;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 2, "#fmc fToBePromptedBTDevices.size(), %lu", &v27);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::onConfirmationPopupDialogCb(CFOptionFlags)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
}

void sub_1010AD8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1010AD928()
{
  operator new();
}

void sub_1010AD970()
{
  operator delete();
}

void sub_1010AD994(uint64_t a1, void *a2)
{
  uint64_t v3;

  v3 = sub_1010AEADC(a1, "CLVehicleConnectionNotifier", a2);
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)v3 = off_10219F0A8;
  *(_QWORD *)(v3 + 120) = v3 + 128;
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 144) = off_10219F2C0;
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 152) = v3 + 160;
  *(_QWORD *)(v3 + 184) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *(_QWORD *)(v3 + 176) = v3 + 184;
  *(_QWORD *)(v3 + 208) = 0;
  *(_QWORD *)(v3 + 192) = 0;
  *(_QWORD *)(v3 + 200) = v3 + 208;
  *(_DWORD *)(v3 + 224) = -1;
  *(_QWORD *)(v3 + 216) = 0;
  sub_1015A2E04((_QWORD *)(v3 + 232), "https://configuration.apple.com/configurations/internetservices/bt/bcwv.plist");
  sub_100602438(a1 + 256, *(void **)(a1 + 32), (uint64_t)sub_1010AEB78, a1);
}

void sub_1010AE938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;
  uint64_t *v59;
  void **v60;
  void **v61;
  _QWORD *v62;
  uint64_t v64;
  uint64_t v65;

  if (a42 < 0)
    operator delete(__p);
  if (a49 < 0)
    operator delete(a44);
  sub_100261F44((uint64_t)&a26);
  v64 = *(_QWORD *)(v58 + 2568);
  *(_QWORD *)(v58 + 2568) = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  v65 = *v59;
  *v59 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  sub_1002FDAA0(v58 + 872);
  sub_1010B7980(v62);
  sub_100602508(a13);
  if (*(char *)(v58 + 535) < 0)
    operator delete(*v61);
  sub_100602508(a14);
  if (*(char *)(v58 + 255) < 0)
    operator delete(*v60);
  sub_1010B6B4C(a11);
  sub_100C12538(a12, *(_QWORD **)(v58 + 128));
  sub_1010B0794(v58);
  _Unwind_Resume(a1);
}

void sub_1010AEACC()
{
  JUMPOUT(0x1010AEA78);
}

uint64_t sub_1010AEADC(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_10219F310;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_1010AEB5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1010AEB78(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  os_activity_scope_state_s state;
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;

  CLProfilingIdentify("CLVehicleConnectionNotifier::onBluetoothWhitelistFileUpdated");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10219F290);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v9 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLVehicleConnectionNotifier::onBluetoothWhitelistFileUpdated", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219F290);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "activity";
      v16 = 2050;
      v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLVehicleConnectionNotifier::onBluetoothWhitelistFileUpdated\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v9 = 0;
  }
  sub_1010B1FD8(a3, a1, a2);
  if (v9)
    os_activity_scope_leave(&state);
}

void sub_1010AED30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1010AED50(uint64_t a1, int *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLVehicleConnectionNotifier::onBluetoothNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10219F290);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLVehicleConnectionNotifier::onBluetoothNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219F290);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLVehicleConnectionNotifier::onBluetoothNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1010B4530(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1010AEF08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1010AEF28(uint64_t a1, _DWORD *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLVehicleConnectionNotifier::onMotionStateNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10219F290);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLVehicleConnectionNotifier::onMotionStateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219F290);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLVehicleConnectionNotifier::onMotionStateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1010B4CF4(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1010AF0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010AF100(uint64_t a1)
{
  uint64_t result;

  sub_100197040();
  result = sub_1001B7910();
  if ((result & 0x80000000) != 0)
  {
    *(_BYTE *)(a1 + 960) = 1;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 2568) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 2568) + 8), 2, 0);
    return (uint64_t)sub_1010B119C((id)a1);
  }
  return result;
}

void sub_1010AF154(_DWORD *a1, int a2, void *a3, void *a4, void *a5)
{
  NSObject *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10219F250);
  v10 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v11 = a1[238];
    v12 = a1[239];
    *(_DWORD *)buf = 67109632;
    v23 = a2;
    v24 = 1024;
    v25 = v11;
    v26 = 1024;
    v27 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CarKitConnectionStatus,%d,HandsfreeConnectionStatus,%d,current VehicleConnectionStatus,%d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219F250);
    v13 = a1[238];
    v14 = a1[239];
    v18 = 1024;
    v19 = v13;
    v20 = 1024;
    v21 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CarKitConnectionStatus,%d,HandsfreeConnectionStatus,%d,current VehicleConnectionStatus,%d", &v17, 20, 67109632);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::setCarKitConnectionStatus(ConnectionStatus, NSString *, NSString *, NSString *)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  if (a1[237] != a2)
  {
    a1[237] = a2;
    sub_1010B0C10((uint64_t)a1, a2, a1[238], a3, a4, a5);
  }
}

id sub_1010AF380(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v6;
  _QWORD v8[8];
  char v9;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(v5 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1010AF3E0;
  v8[3] = &unk_1021543F8;
  v9 = a2;
  v8[4] = a3;
  v8[5] = a4;
  v8[6] = a5;
  v8[7] = v5;
  return objc_msgSend(v6, "async:", v8);
}

void sub_1010AF3E0(uint64_t a1)
{
  _DWORD *v2;
  NSObject *v3;
  int v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  v2 = *(_DWORD **)(a1 + 56);
  if (qword_10229FCB0 != -1)
    dispatch_once(&qword_10229FCB0, &stru_10219F270);
  v3 = qword_10229FCB8;
  if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(a1 + 64);
    *(_DWORD *)buf = 67240192;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#fmc CarKit connection status, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_10219F270);
    v5 = *(unsigned __int8 *)(a1 + 64);
    v8[0] = 67240192;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "#fmc CarKit connection status, %{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "CLVehicleConnectionNotifier::CLVehicleConnectionNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  sub_1010AF154(v2, *(unsigned __int8 *)(a1 + 64), *(void **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48));
}

void sub_1010AF5A8(uint64_t a1)
{
  sub_1010AF5B0(*(_QWORD *)(a1 + 32));
}

void sub_1010AF5B0(uint64_t a1)
{
  unint64_t v2;
  std::string::size_type *v3;
  const std::string::value_type *v4;
  NSObject *v5;
  std::string::size_type v6;
  std::string *v7;
  __int128 v8;
  void **v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  std::string *p_p;
  std::string::size_type size;
  std::string *v15;
  __int128 v16;
  void **v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  __CFDictionary *Mutable;
  void **v22;
  CFStringRef v23;
  __CFUserNotification *v24;
  __CFUserNotification *v25;
  CFRunLoopSourceRef RunLoopSource;
  __CFRunLoop *v27;
  NSObject *v28;
  const char *v29;
  std::string *v30;
  const char *v31;
  std::string *v32;
  void *v33[2];
  unsigned __int8 v34;
  void *v35[2];
  unsigned __int8 v36;
  std::string v37;
  std::string v38;
  void *v39[2];
  int64_t v40;
  std::string v41;
  std::string __p;
  std::string buf[68];

  if (*(_BYTE *)(a1 + 792))
  {
    if (*(_QWORD *)(a1 + 936))
    {
      objc_msgSend(*(id *)(a1 + 800), "setNextFireDelay:", 5.0);
    }
    else if (*(_QWORD *)(a1 + 864))
    {
      v2 = *(_QWORD *)(*(_QWORD *)(a1 + 832) + 8 * (*(_QWORD *)(a1 + 856) / 0x49uLL))
         + 56 * (*(_QWORD *)(a1 + 856) % 0x49uLL);
      v3 = (std::string::size_type *)(a1 + 872);
      std::string::operator=((std::string *)(a1 + 872), (const std::string *)v2);
      v4 = (const std::string::value_type *)(a1 + 896);
      std::string::operator=((std::string *)(a1 + 896), (const std::string *)(v2 + 24));
      *(_DWORD *)(a1 + 920) = *(_DWORD *)(v2 + 48);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_10219F270);
      v5 = qword_10229FCB8;
      if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
      {
        v6 = a1 + 872;
        if (*(char *)(a1 + 895) < 0)
          v6 = *v3;
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#fmc Ask user to confirm BT device %s", (uint8_t *)buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCB0 != -1)
          dispatch_once(&qword_10229FCB0, &stru_10219F270);
        if (*(char *)(a1 + 895) < 0)
          v3 = (std::string::size_type *)*v3;
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "#fmc Ask user to confirm BT device %s", (const char *)&__p);
        v30 = (std::string *)v29;
        sub_100512490("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::showConfirmationDialogIfNeeded()", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      memset(&__p, 0, sizeof(__p));
      switch(*(_DWORD *)(a1 + 920))
      {
        case 0x10:
          sub_1015A2E04(buf, "headset");
          break;
        case 0x13:
          sub_1015A2E04(buf, "speaker");
          break;
        case 0x14:
          sub_1015A2E04(buf, "headphone");
          break;
        default:
          sub_1015A2E04(buf, "vehicle");
          break;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = buf[0];
      sub_1015A2E04(&v37, "Is BT device \"");
      if (*(char *)(a1 + 919) < 0)
        v4 = *(const std::string::value_type **)v4;
      v7 = std::string::append(&v37, v4);
      v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v38.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      sub_1015A2E04(v35, "\" a ");
      if ((v36 & 0x80u) == 0)
        v9 = v35;
      else
        v9 = (void **)v35[0];
      if ((v36 & 0x80u) == 0)
        v10 = v36;
      else
        v10 = (std::string::size_type)v35[1];
      v11 = std::string::append(&v38, (const std::string::value_type *)v9, v10);
      v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v41.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v15 = std::string::append(&v41, (const std::string::value_type *)p_p, size);
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      buf[0].__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      sub_1015A2E04(v33, "?\n\n With your answer, we collect the accessory name and device type to improve Bluetooth accessory detection. \n\n");
      if ((v34 & 0x80u) == 0)
        v17 = v33;
      else
        v17 = (void **)v33[0];
      if ((v34 & 0x80u) == 0)
        v18 = v34;
      else
        v18 = (std::string::size_type)v33[1];
      v19 = std::string::append(buf, (const std::string::value_type *)v17, v18);
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v40 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)v39 = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      if ((char)v34 < 0)
        operator delete(v33[0]);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      if ((char)v36 < 0)
        operator delete(v35[0]);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      LODWORD(v38.__r_.__value_.__l.__data_) = 0;
      Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      CFDictionaryAddValue(Mutable, kCFUserNotificationAlertHeaderKey, CFSTR("Apple Internal Data Collection"));
      if (v40 >= 0)
        v22 = v39;
      else
        v22 = (void **)v39[0];
      v23 = CFStringCreateWithCStringNoCopy(kCFAllocatorDefault, (const char *)v22, 0x8000100u, kCFAllocatorNull);
      CFDictionaryAddValue(Mutable, kCFUserNotificationAlertMessageKey, v23);
      CFDictionaryAddValue(Mutable, kCFUserNotificationDefaultButtonTitleKey, CFSTR("Cancel"));
      CFDictionaryAddValue(Mutable, kCFUserNotificationAlternateButtonTitleKey, CFSTR("Yes"));
      CFDictionaryAddValue(Mutable, kCFUserNotificationOtherButtonTitleKey, CFSTR("No"));
      v24 = CFUserNotificationCreate(kCFAllocatorDefault, 20.0, 2uLL, (SInt32 *)&v38, Mutable);
      v25 = v24;
      if (!LODWORD(v38.__r_.__value_.__l.__data_))
      {
        if (v24)
        {
          RunLoopSource = CFUserNotificationCreateRunLoopSource(kCFAllocatorDefault, v24, (CFUserNotificationCallBack)sub_1010B32CC, 0);
          *(_QWORD *)(a1 + 936) = RunLoopSource;
          if (RunLoopSource)
          {
            sub_1010B3250(a1, v25);
            v27 = (__CFRunLoop *)sub_100193530();
            CFRunLoopAddSource(v27, *(CFRunLoopSourceRef *)(a1 + 936), kCFRunLoopCommonModes);
          }
        }
      }
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_10219F270);
      v28 = qword_10229FCB8;
      if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v38.__r_.__value_.__l.__data_;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#fmc In vehicle confirmation dialog shown. %d", (uint8_t *)buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCB0 != -1)
          dispatch_once(&qword_10229FCB0, &stru_10219F270);
        LODWORD(v41.__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(v41.__r_.__value_.__r.__words[0]) = v38.__r_.__value_.__l.__data_;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "#fmc In vehicle confirmation dialog shown. %d", &v41);
        v32 = (std::string *)v31;
        sub_100512490("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::showConfirmationDialogIfNeeded()", "%s\n", v31);
        if (v32 != buf)
          free(v32);
      }
      if (v25)
        CFRelease(v25);
      CFRelease(v23);
      CFRelease(Mutable);
      if (SHIBYTE(v40) < 0)
        operator delete(v39[0]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1010AFD2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a42 < 0)
    operator delete(__p);
  if (a56 < 0)
    operator delete(a51);
  _Unwind_Resume(exception_object);
}

void sub_1010AFE28(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10219F250);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Timed out waiting to attach to BTServer", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219F250);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Timed out waiting to attach to BTServer", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 0, "CLVehicleConnectionNotifier::CLVehicleConnectionNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_1010AFFC0(v1);
}

void sub_1010AFFC0(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[2];
  __int16 v11;
  int v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  int v16;

  if (*(_BYTE *)(a1 + 816))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219F250);
    v2 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v3 = *(_DWORD *)(a1 + 948);
      v4 = *(_DWORD *)(a1 + 952);
      *(_DWORD *)buf = 67109376;
      v14 = v3;
      v15 = 1024;
      v16 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "BT is initializing,fCarKitConnectionStatus,%d,fHandsfreeConnectionStatus,%d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10219F250);
      v6 = *(_DWORD *)(a1 + 948);
      v7 = *(_DWORD *)(a1 + 952);
      v10[0] = 67109376;
      v10[1] = v6;
      v11 = 1024;
      v12 = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "BT is initializing,fCarKitConnectionStatus,%d,fHandsfreeConnectionStatus,%d", v10, 14);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::BTInitialized()", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    *(_BYTE *)(a1 + 816) = 0;
    v5 = *(_DWORD *)(a1 + 952);
    if (v5 == -1)
    {
      v5 = 0;
      *(_DWORD *)(a1 + 952) = 0;
    }
    sub_1010B0C10(a1, *(_DWORD *)(a1 + 948), v5, 0, 0, 0);
  }
}

uint64_t sub_1010B01C8(uint64_t a1)
{
  std::string *v2;
  __int128 v3;
  int v4;
  int v5;
  uint64_t (***v6)();
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  std::string *v11;
  NSObject *v12;
  int v13;
  uint64_t v14;
  CFTypeID v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CFTypeID v19;
  char *v20;
  int v22;
  const char *v23;
  uint64_t (**v24)();
  unsigned int *v25;
  _QWORD v26[2];
  _QWORD *v27;
  _QWORD v28[2];
  uint64_t *v29;
  uint64_t v30[2];
  int v31;
  uint64_t (**v32)();
  unsigned int *v33;
  _QWORD v34[2];
  _QWORD *v35;
  _QWORD v36[2];
  uint64_t *v37;
  uint64_t v38[2];
  int v39;
  std::string __p[68];
  __int128 v41;
  std::string::size_type v42;

  v34[0] = 0;
  v34[1] = 0;
  v32 = off_10219F2C0;
  v33 = (unsigned int *)v34;
  v35 = v36;
  v36[0] = 0;
  v38[0] = 0;
  v38[1] = 0;
  v36[1] = 0;
  v37 = v38;
  v39 = -1;
  sub_1010B1EB4(__p);
  sub_1010AB8A4((uint64_t)&v32, (const char *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v26[0] = 0;
  v26[1] = 0;
  v24 = off_10219F2C0;
  v25 = (unsigned int *)v26;
  v27 = v28;
  v28[0] = 0;
  v30[0] = 0;
  v30[1] = 0;
  v28[1] = 0;
  v29 = v30;
  v31 = -1;
  sub_100584F4C(0, __p);
  v2 = std::string::append(__p, "bluetooth-carkit-whitelist.plist");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v42 = v2->__r_.__value_.__r.__words[2];
  v41 = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  sub_1010AB8A4((uint64_t)&v24, (const char *)&v41);
  if (SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  v4 = v39;
  v5 = v31;
  v6 = (uint64_t (***)())(a1 + 144);
  if (v39 >= v31)
  {
    if (v6 != &v32)
    {
      sub_1010B6BE8((uint64_t **)(a1 + 152), v33, (unsigned int *)v34);
      sub_100793670((uint64_t **)(a1 + 176), v35, v36);
      sub_1010B6E40((uint64_t **)(a1 + 200), v37, v38);
      v4 = v39;
    }
    *(_DWORD *)(a1 + 224) = v4;
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219F250);
    v12 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v13 = *(_DWORD *)(a1 + 224);
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(__p[0].__r_.__value_.__r.__words[0]) = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Use framework's handsfree whitelist, version = %d", (uint8_t *)__p, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10219F250);
      v22 = *(_DWORD *)(a1 + 224);
      LODWORD(v41) = 67109120;
      DWORD1(v41) = v22;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Use framework's handsfree whitelist, version = %d", &v41);
      v11 = (std::string *)v23;
      sub_100512490("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::loadHandsfreeWhitelist()", "%s\n", v23);
      goto LABEL_38;
    }
  }
  else
  {
    if (v6 != &v24)
    {
      sub_1010B6BE8((uint64_t **)(a1 + 152), v25, (unsigned int *)v26);
      sub_100793670((uint64_t **)(a1 + 176), v27, v28);
      sub_1010B6E40((uint64_t **)(a1 + 200), v29, v30);
      v5 = v31;
    }
    *(_DWORD *)(a1 + 224) = v5;
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219F250);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_DWORD *)(a1 + 224);
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(__p[0].__r_.__value_.__r.__words[0]) = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Use cached handsfree whitelist, version = %d", (uint8_t *)__p, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10219F250);
      v9 = *(_DWORD *)(a1 + 224);
      LODWORD(v41) = 67109120;
      DWORD1(v41) = v9;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Use cached handsfree whitelist, version = %d", &v41);
      v11 = (std::string *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::loadHandsfreeWhitelist()", "%s\n", v10);
LABEL_38:
      if (v11 != __p)
        free(v11);
    }
  }
  __p[0].__r_.__value_.__r.__words[0] = 0;
  v14 = sub_1001FD94C();
  if (sub_100219F40(v14, (uint64_t)CFSTR("InVehiclePromptedAddress"), (CFTypeRef *)&__p[0].__r_.__value_.__l.__data_))
  {
    v15 = CFGetTypeID(__p[0].__r_.__value_.__l.__data_);
    if (v15 == CFDictionaryGetTypeID())
    {
      v16 = sub_1001FD94C();
      sub_1005254E4(v16);
      v17 = sub_1001FD94C();
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 944))(v17);
    }
  }
  v18 = sub_1001FD94C();
  if (sub_100219F40(v18, (uint64_t)CFSTR("InVehicleRepromptedAddress"), (CFTypeRef *)&__p[0].__r_.__value_.__l.__data_)&& (v19 = CFGetTypeID(__p[0].__r_.__value_.__l.__data_), v19 == CFDictionaryGetTypeID()))
  {
    v20 = __p[0].__r_.__value_.__l.__data_;
  }
  else
  {
    v20 = (char *)objc_alloc_init((Class)NSMutableDictionary);
  }
  *(_QWORD *)(a1 + 928) = v20;
  if (*(int *)(a1 + 224) >= 1)
    sub_1010B1610(a1);
  sub_1010B6B4C((uint64_t)&v24);
  return sub_1010B6B4C((uint64_t)&v32);
}

void sub_1010B0718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  sub_1010B6B4C((uint64_t)&a11);
  sub_1010B6B4C((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_1010B0794(uint64_t a1)
{
  *(_QWORD *)a1 = off_10219F310;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_1010B0808(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  *(_QWORD *)a1 = off_10219F0A8;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10219F250);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLVehicleConnectionNotifier is shutting down", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219F250);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CLVehicleConnectionNotifier is shutting down", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual CLVehicleConnectionNotifier::~CLVehicleConnectionNotifier()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  objc_msgSend(*(id *)(a1 + 112), "setConnectionUpdateHandler:", 0);

  objc_msgSend(*(id *)(a1 + 808), "invalidate");
  *(_QWORD *)(a1 + 808) = 0;
  objc_msgSend(*(id *)(a1 + 968), "invalidate");

  *(_QWORD *)(a1 + 968) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v3 = *(_QWORD *)(a1 + 2568);
  *(_QWORD *)(a1 + 2568) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 2560);
  *(_QWORD *)(a1 + 2560) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 919) < 0)
    operator delete(*(void **)(a1 + 896));
  if (*(char *)(a1 + 895) < 0)
    operator delete(*(void **)(a1 + 872));
  sub_1010B7980((_QWORD *)(a1 + 824));
  sub_100602508(a1 + 536);
  if (*(char *)(a1 + 535) < 0)
    operator delete(*(void **)(a1 + 512));
  sub_100602508(a1 + 256);
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  sub_1010B6B4C(a1 + 144);
  sub_100C12538(a1 + 120, *(_QWORD **)(a1 + 128));
  sub_1010B0794(a1);
  return a1;
}

void sub_1010B0AA8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_1010B0AB8(uint64_t a1)
{
  sub_1010B0808(a1);
  operator delete();
}

_QWORD *sub_1010B0ADC@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_1010B0B54(double *a1)
{
  void *v2;
  int v4;
  _BYTE __dst[792];

  if (a1[221] > 0.0)
  {
    v2 = a1 + 221;
    memcpy(__dst, a1 + 122, sizeof(__dst));
    v4 = 0;
    (*(void (**)(double *, int *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v4, __dst, 1, 0xFFFFFFFFLL, 0);
    memcpy(v2, __dst, 0x318uLL);
  }
  return 1;
}

uint64_t sub_1010B0C08()
{
  return 1;
}

void sub_1010B0C10(uint64_t a1, int a2, int a3, void *a4, void *a5, void *a6)
{
  int v10;
  _BOOL4 v11;

  if (sub_1010B3D58((_DWORD *)a1, a2, a3))
  {
    v10 = *(_DWORD *)(a1 + 956);
    v11 = *(double *)(a1 + 976) > 0.0;
    if (*(double *)(a1 + 984) >= 0.0)
      v11 = 0;
    if ((v10 == 1) != v11)
      sub_1010B3F88(a1, v10 == 1, a4, a5, a6);
  }
}

void sub_1010B0C9C(uint64_t a1)
{
  NSObject *v2;
  __CFNotificationCenter *DarwinNotifyCenter;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  double v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint8_t buf[1640];

  sub_1010B102C(a1);
  if (qword_10229FCB0 != -1)
    dispatch_once(&qword_10229FCB0, &stru_10219F270);
  v2 = qword_10229FCB8;
  if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#fmc Posting notification upon vehicle exit", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_10219F270);
    LOWORD(v17) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "#fmc Posting notification upon vehicle exit", &v17, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::postVehicleExitNotification()", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, kCMVehicleExitNotification, 0, 0, 0);
  *(CFAbsoluteTime *)(a1 + 1760) = CFAbsoluteTimeGetCurrent();
  sub_1010B107C(v4, (double *)(a1 + 976));
  memcpy(buf, (const void *)(a1 + 976), 0x318uLL);
  v17 = 0;
  (*(void (**)(uint64_t, int *, uint8_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v17, buf, 1, 0xFFFFFFFFLL, 0);
  memcpy((void *)(a1 + 1768), buf, 0x318uLL);
  if (qword_10229FCB0 != -1)
    dispatch_once(&qword_10229FCB0, &stru_10219F270);
  v5 = qword_10229FCB8;
  if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 976);
    v7 = *(_QWORD *)(a1 + 984);
    v8 = *(_QWORD *)(a1 + 1760);
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = v6;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v7;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#fmc startTime,%f,endTime,%f,exitTime,%f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_10219F270);
    v11 = *(_QWORD *)(a1 + 976);
    v12 = *(_QWORD *)(a1 + 984);
    v13 = *(_QWORD *)(a1 + 1760);
    v17 = 134218496;
    v18 = v11;
    v19 = 2048;
    v20 = v12;
    v21 = 2048;
    v22 = v13;
    LODWORD(v16) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "#fmc startTime,%f,endTime,%f,exitTime,%f", COERCE_DOUBLE(&v17), v16);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::postVehicleExitNotification()", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
}

void sub_1010B102C(uint64_t a1)
{
  sub_100197040();
  if ((sub_1001B7910() & 0x80000000) != 0)
  {
    *(_BYTE *)(a1 + 960) = 0;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 2568) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 2568) + 8), 2);
    objc_msgSend(*(id *)(a1 + 968), "invalidate");

    *(_QWORD *)(a1 + 968) = 0;
  }
}

void sub_1010B107C(uint64_t a1, double *a2)
{
  void *v3;
  NSMutableArray *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_autoreleasePoolPush();
  v4 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 6);
  -[NSMutableArray setObject:atIndexedSubscript:](v4, "setObject:atIndexedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *a2), 0);
  -[NSMutableArray setObject:atIndexedSubscript:](v4, "setObject:atIndexedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a2[1]), 1);
  -[NSMutableArray setObject:atIndexedSubscript:](v4, "setObject:atIndexedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2 + 2), 2);
  -[NSMutableArray setObject:atIndexedSubscript:](v4, "setObject:atIndexedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2 + 34), 3);
  -[NSMutableArray setObject:atIndexedSubscript:](v4, "setObject:atIndexedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2 + 66), 4);
  -[NSMutableArray setObject:atIndexedSubscript:](v4, "setObject:atIndexedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a2[98]), 5);
  v5 = sub_1001FD94C();
  sub_10023EC14(v5);
  v6 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 944))(v6);
  objc_autoreleasePoolPop(v3);
}

id sub_1010B119C(id result)
{
  id *v1;
  CMActivityAlarmLocal *v2;
  id v3;
  _QWORD v4[5];

  if (*((_BYTE *)result + 960))
  {
    v1 = (id *)result;
    result = (id)+[CMActivityAlarmLocal activityAlarmAvailable](CMActivityAlarmLocal, "activityAlarmAvailable");
    if ((_DWORD)result)
    {
      v2 = [CMActivityAlarmLocal alloc];
      v3 = objc_msgSend(v1[5], "queue");
      v4[0] = _NSConcreteStackBlock;
      v4[1] = 3221225472;
      v4[2] = sub_1010B451C;
      v4[3] = &unk_102142BD0;
      v4[4] = v1;
      result = -[CMActivityAlarmLocal initWithTrigger:duration:onQueue:withHandler:](v2, "initWithTrigger:duration:onQueue:withHandler:", 13, v3, v4, 1.0);
      v1[121] = result;
    }
  }
  return result;
}

void sub_1010B1238(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  int v8;
  uint64_t *v9;
  void **v10;
  void **v11;
  char v12;
  void **v13;
  int v14;
  int v15;
  int v16;
  uint64_t *v17;
  int v18;
  int v19;
  uint64_t *v20;
  CFAbsoluteTime Current;
  void **v22;
  __int128 v23;
  uint64_t v24;
  __int128 __p;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  void *__dst[2];
  uint64_t v34;
  void **v35;

  *(_BYTE *)(a1 + 816) = 0;
  if (a3 != -1)
  {
    if (*(char *)(a2 + 31) < 0)
    {
      sub_100115CE4(__dst, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)(a2 + 8);
      v34 = *(_QWORD *)(a2 + 24);
    }
    if (!sub_1001876D0(a1 + 120, (const void **)__dst))
    {
      sub_100985590((uint64_t)&v22, a2);
      v8 = *(_DWORD *)(a2 + 84);
      LODWORD(v31) = 0;
      DWORD1(v31) = v8;
      BYTE8(v31) = 0;
      v32 = 0x7FEFFFFFFFFFFFFFLL;
      v35 = __dst;
      v9 = sub_1010B7ABC((uint64_t **)(a1 + 120), (const void **)__dst, (uint64_t)&unk_101B9EB60, (__int128 **)&v35);
      v9[7] = (uint64_t)v22;
      v10 = (void **)(v9 + 8);
      if (*((char *)v9 + 87) < 0)
        operator delete(*v10);
      v9[10] = v24;
      *(_OWORD *)v10 = v23;
      HIBYTE(v24) = 0;
      LOBYTE(v23) = 0;
      v11 = (void **)(v9 + 11);
      if (*((char *)v9 + 111) < 0)
        operator delete(*v11);
      v12 = 0;
      v9[13] = v26;
      *(_OWORD *)v11 = __p;
      HIBYTE(v26) = 0;
      LOBYTE(__p) = 0;
      v13 = (void **)(v9 + 14);
      if (*((char *)v9 + 135) < 0)
      {
        operator delete(*v13);
        v12 = HIBYTE(v26);
      }
      v9[16] = v28;
      *(_OWORD *)v13 = v27;
      HIBYTE(v28) = 0;
      LOBYTE(v27) = 0;
      *(_OWORD *)(v9 + 17) = v29;
      *((_BYTE *)v9 + 152) = v30;
      v9[22] = v32;
      *((_OWORD *)v9 + 10) = v31;
      if (v12 < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v24) < 0)
        operator delete((void *)v23);
    }
    v22 = __dst;
    v14 = *((_DWORD *)sub_1010B7ABC((uint64_t **)(a1 + 120), (const void **)__dst, (uint64_t)&unk_101B9EB60, (__int128 **)&v22)+ 40);
    v15 = *a4;
    if (*a4 == 11)
    {
      v22 = __dst;
      v17 = sub_1010B7ABC((uint64_t **)(a1 + 120), (const void **)__dst, (uint64_t)&unk_101B9EB60, (__int128 **)&v22);
      v18 = 0;
    }
    else
    {
      v22 = __dst;
      if (v15 == 10)
      {
        v16 = *((_DWORD *)sub_1010B7ABC((uint64_t **)(a1 + 120), (const void **)__dst, (uint64_t)&unk_101B9EB60, (__int128 **)&v22)+ 40);
        v22 = __dst;
        v17 = sub_1010B7ABC((uint64_t **)(a1 + 120), (const void **)__dst, (uint64_t)&unk_101B9EB60, (__int128 **)&v22);
        v18 = v16 | a3;
      }
      else
      {
        v19 = *((_DWORD *)sub_1010B7ABC((uint64_t **)(a1 + 120), (const void **)__dst, (uint64_t)&unk_101B9EB60, (__int128 **)&v22)+ 40);
        v22 = __dst;
        v17 = sub_1010B7ABC((uint64_t **)(a1 + 120), (const void **)__dst, (uint64_t)&unk_101B9EB60, (__int128 **)&v22);
        v18 = v19 & ~a3;
      }
    }
    *((_DWORD *)v17 + 40) = v18;
    if (v14)
    {
      v22 = __dst;
      if (*((_DWORD *)sub_1010B7ABC((uint64_t **)(a1 + 120), (const void **)__dst, (uint64_t)&unk_101B9EB60, (__int128 **)&v22)+ 40))goto LABEL_27;
      v22 = __dst;
      v20 = sub_1010B7ABC((uint64_t **)(a1 + 120), (const void **)__dst, (uint64_t)&unk_101B9EB60, (__int128 **)&v22);
      Current = 1.79769313e308;
    }
    else
    {
      v22 = __dst;
      if (!*((_DWORD *)sub_1010B7ABC((uint64_t **)(a1 + 120), (const void **)__dst, (uint64_t)&unk_101B9EB60, (__int128 **)&v22)+ 40))goto LABEL_27;
      Current = CFAbsoluteTimeGetCurrent();
      v22 = __dst;
      v20 = sub_1010B7ABC((uint64_t **)(a1 + 120), (const void **)__dst, (uint64_t)&unk_101B9EB60, (__int128 **)&v22);
    }
    *((CFAbsoluteTime *)v20 + 22) = Current;
LABEL_27:
    sub_1010B1610(a1);
    if (SHIBYTE(v34) < 0)
      operator delete(__dst[0]);
  }
}

void sub_1010B15DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_100C0FC30((uint64_t)&a9);
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1010B1610(uint64_t a1)
{
  int v2;
  std::string *p_p;
  std::string __p;

  if (!*(_BYTE *)(a1 + 816))
  {
    memset(&__p, 0, sizeof(__p));
    v2 = sub_1010B16DC(a1, (_QWORD *)(a1 + 120), &__p);
    if (*(_DWORD *)(a1 + 952) != v2)
    {
      *(_DWORD *)(a1 + 952) = v2;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      sub_1010B0C10(a1, *(_DWORD *)(a1 + 948), v2, 0, 0, +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", p_p, 4));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1010B16C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010B16DC(uint64_t a1, _QWORD *a2, std::string *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  double v7;
  _QWORD *v8;
  double v9;
  int v10;
  BOOL v11;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  int v23;
  int v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v28;
  int v30;
  _QWORD *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  uint8_t buf[4];
  _QWORD *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;

  v3 = a2 + 1;
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v6 = 0;
    v7 = 1.79769313e308;
    while (1)
    {
      v8 = v4 + 4;
      if (*((_DWORD *)v4 + 40))
      {
        v9 = *((double *)v4 + 22);
        if (v9 != 1.79769313e308)
        {
          v10 = *((_DWORD *)v4 + 41);
          v11 = v10 == 22 || v10 == 17;
          if (v11)
          {
            if (sub_1010B19F4(a1, (uint64_t)(v4 + 4)))
            {
              v9 = *((double *)v4 + 22);
LABEL_32:
              v6 = 1;
              *((_BYTE *)v4 + 168) = 1;
              if (v9 < v7)
              {
                std::string::operator=(a3, (const std::string *)(v4 + 4));
                v7 = v9;
              }
              goto LABEL_18;
            }
          }
          else if (v10 == 16 && *(_BYTE *)(a1 + 944) != 0)
          {
            goto LABEL_32;
          }
        }
      }
      *((_BYTE *)v4 + 168) = 0;
LABEL_18:
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_10219F270);
      v13 = qword_10229FCB8;
      if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_INFO))
      {
        v14 = v4 + 4;
        if (*((char *)v4 + 55) < 0)
          v14 = (_QWORD *)*v8;
        v15 = sub_100C0FFF0((const char *)v4 + 32);
        v16 = *((_DWORD *)v4 + 40);
        v17 = *((_DWORD *)v4 + 41);
        *(_DWORD *)buf = 136315906;
        v39 = v14;
        v40 = 1026;
        v41 = v15;
        v42 = 1026;
        v43 = v16;
        v44 = 1026;
        v45 = v17;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#fmc address,%s,oui,%{public}d,mask,0x%{public}x,type,%{public}d", buf, 0x1Eu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCB0 != -1)
          dispatch_once(&qword_10229FCB0, &stru_10219F270);
        v20 = qword_10229FCB8;
        v21 = v4 + 4;
        if (*((char *)v4 + 55) < 0)
          v21 = (_QWORD *)*v8;
        v22 = sub_100C0FFF0((const char *)v4 + 32);
        v23 = *((_DWORD *)v4 + 40);
        v24 = *((_DWORD *)v4 + 41);
        v30 = 136315906;
        v31 = v21;
        v32 = 1026;
        v33 = v22;
        v34 = 1026;
        v35 = v23;
        v36 = 1026;
        v37 = v24;
        LODWORD(v28) = 30;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 1, "#fmc address,%s,oui,%{public}d,mask,0x%{public}x,type,%{public}d", &v30, v28);
        v26 = (uint8_t *)v25;
        sub_100512490("Generic", 1, 0, 2, "CLVehicleConnectionNotifier::ConnectionStatus CLVehicleConnectionNotifier::updateHandsfreeConnectionState(std::map<std::string, CLBTDeviceEntry> &, std::string &)", "%s\n", v25);
        if (v26 != buf)
          free(v26);
      }
      v18 = (_QWORD *)v4[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v4[2];
          v11 = *v19 == (_QWORD)v4;
          v4 = v19;
        }
        while (!v11);
      }
      v4 = v19;
      if (v19 == v3)
        return v6;
    }
  }
  return 0;
}

uint64_t sub_1010B19F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v6;
  const void *v7;
  const void *v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  const void *v12;
  uint8_t buf[4];
  const void *v14;

  v4 = sub_10019C4C0(a1 + 120, (const void **)a2);
  if (a1 + 128 != v4)
    return sub_1010AC4F0(a1 + 144, v4 + 56);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10219F250);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a2 + 23) >= 0)
      v7 = (const void *)a2;
    else
      v7 = *(const void **)a2;
    *(_DWORD *)buf = 136315138;
    v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Cannot find the corresponding device entry for BT address %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219F250);
    if (*(char *)(a2 + 23) >= 0)
      v8 = (const void *)a2;
    else
      v8 = *(const void **)a2;
    v11 = 136315138;
    v12 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Cannot find the corresponding device entry for BT address %s", (const char *)&v11);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLVehicleConnectionNotifier::isHandsfreeDevice(const std::string &) const", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  return 0;
}

BOOL sub_1010B1C14(uint64_t a1, const char *a2)
{
  _BOOL8 v3;
  int v4;
  int v5;
  NSObject *v6;
  int v7;
  int v9;
  const char *v10;
  uint8_t *v11;
  uint64_t (**v12)();
  unsigned int *v13;
  _QWORD v14[2];
  _QWORD *v15;
  _QWORD v16[2];
  uint64_t *v17;
  uint64_t v18[2];
  int v19;
  _DWORD v20[2];
  __int16 v21;
  int v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  int v26;

  v14[0] = 0;
  v14[1] = 0;
  v12 = off_10219F2C0;
  v13 = (unsigned int *)v14;
  v15 = v16;
  v16[0] = 0;
  v18[0] = 0;
  v18[1] = 0;
  v16[1] = 0;
  v17 = v18;
  v19 = -1;
  v3 = sub_1010AB8A4((uint64_t)&v12, a2);
  if (v3)
  {
    v4 = *(_DWORD *)(a1 + 224);
    v5 = v19;
    if (v4 < v19)
    {
      if ((uint64_t (***)())(a1 + 144) != &v12)
      {
        sub_1010B6BE8((uint64_t **)(a1 + 152), v13, (unsigned int *)v14);
        sub_100793670((uint64_t **)(a1 + 176), v15, v16);
        sub_1010B6E40((uint64_t **)(a1 + 200), v17, v18);
        v5 = v19;
      }
      *(_DWORD *)(a1 + 224) = v5;
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10219F250);
      v6 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v7 = *(_DWORD *)(a1 + 224);
        *(_DWORD *)buf = 67109376;
        v24 = v4;
        v25 = 1024;
        v26 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Use cache handsfree whitelist, old version = %d, new version = %d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10219F250);
        v9 = *(_DWORD *)(a1 + 224);
        v20[0] = 67109376;
        v20[1] = v4;
        v21 = 1024;
        v22 = v9;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Use cache handsfree whitelist, old version = %d, new version = %d", v20, 14);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLVehicleConnectionNotifier::loadHandsfreeWhitelist(const std::string &)", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
    }
    sub_1010B1610(a1);
  }
  sub_1010B6B4C((uint64_t)&v12);
  return v3;
}

void sub_1010B1E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1010B6B4C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1010B1EB4(std::string *a1@<X8>)
{
  std::string *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  std::string v7;
  std::string v8;
  std::string v9;

  sub_100584C48(&v7);
  v2 = std::string::append(&v7, off_1022A6298);
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v8.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v8.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v8, "/");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v9.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v9, "bluetooth-carkit-whitelist.plist");
  *a1 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
}

void sub_1010B1F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 25) < 0)
    operator delete(*(void **)(v21 - 48));
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_1010B1FD8(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  std::string *v7;
  std::string *v8;
  char v9;
  std::string::size_type size;
  std::string::size_type v11;
  int v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  char v21;
  _BOOL4 v22;
  std::string *v23;
  NSDictionary *v24;
  NSDictionary *v25;
  std::string *v26;
  char v27;
  std::string::size_type v28;
  std::string::size_type v29;
  int v30;
  std::string *v31;
  uint64_t v32;
  std::string *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  char v38;
  _BOOL4 v39;
  id v40;
  signed int v41;
  NSObject *v42;
  int v43;
  NSObject *v44;
  NSObject *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  NSObject *v49;
  std::string *v50;
  int v51;
  std::string::size_type v52;
  std::string *v53;
  std::string *v54;
  BOOL v55;
  std::string *v56;
  _BOOL4 v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  const std::__fs::filesystem::path *v61;
  std::string *v62;
  std::error_code *v63;
  __int128 v64;
  const std::__fs::filesystem::path *v65;
  NSObject *v66;
  std::string *v67;
  uint64_t v68;
  std::string *v69;
  std::string *v70;
  std::string *v71;
  std::string *v72;
  NSObject *v73;
  NSObject *v74;
  _QWORD *v75;
  uint64_t v76;
  std::string *p_buf;
  std::string *v78;
  std::string *v79;
  uint64_t v80;
  std::string *v81;
  std::string *v82;
  std::string *v83;
  int v84;
  const char *v85;
  std::string *v86;
  const char *v87;
  std::string *v88;
  const char *v89;
  std::string *v90;
  const char *v91;
  uint64_t v92;
  std::string v93;
  std::string buf;
  std::string __p[68];

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10219F250);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_100605D40(a2, (uint64_t)__p);
    v7 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? __p
       : (std::string *)__p[0].__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Handsfree whitelist,%s,update,%d", (uint8_t *)&buf, 0x12u);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219F250);
    v76 = qword_1022A02D8;
    sub_100605D40(a2, (uint64_t)&buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_buf = &buf;
    else
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    LODWORD(v93.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v93.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
    WORD2(v93.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&v93.__r_.__value_.__r.__words[1] + 6) = a3;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v76, 2, "Handsfree whitelist,%s,update,%d", (const char *)&v93, 18);
    v79 = v78;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::onBluetoothWhitelistFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", (const char *)v79);
    if (v79 != __p)
      free(v79);
  }
  if (a3 != 2)
    return;
  sub_100605D40(a2, (uint64_t)&buf);
  sub_100584F4C(0, __p);
  v8 = std::string::append(__p, "bluetooth-carkit-whitelist-version.plist");
  v93 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v9 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  else
    size = buf.__r_.__value_.__l.__size_;
  v11 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
  v12 = SHIBYTE(v93.__r_.__value_.__r.__words[2]);
  if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = v93.__r_.__value_.__l.__size_;
  if (size == v11)
  {
    if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v93;
    else
      v13 = (std::string *)v93.__r_.__value_.__r.__words[0];
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      v22 = memcmp(buf.__r_.__value_.__l.__data_, v13, buf.__r_.__value_.__l.__size_) == 0;
      if ((v12 & 0x80000000) == 0)
        goto LABEL_31;
    }
    else if (*((_BYTE *)&buf.__r_.__value_.__s + 23))
    {
      v14 = HIBYTE(buf.__r_.__value_.__r.__words[2]) - 1;
      v15 = &buf;
      do
      {
        v17 = v15->__r_.__value_.__s.__data_[0];
        v15 = (std::string *)((char *)v15 + 1);
        v16 = v17;
        v19 = v13->__r_.__value_.__s.__data_[0];
        v13 = (std::string *)((char *)v13 + 1);
        v18 = v19;
        v20 = v14-- != 0;
        v21 = v20;
        v22 = v16 == v18;
      }
      while (v16 == v18 && (v21 & 1) != 0);
      if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_31:
        if ((v9 & 0x80) == 0)
          goto LABEL_32;
        goto LABEL_41;
      }
    }
    else
    {
      v22 = 1;
      if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_31;
    }
  }
  else
  {
    v22 = 0;
    if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_31;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if ((*((_BYTE *)&buf.__r_.__value_.__s + 23) & 0x80) == 0)
  {
LABEL_32:
    if (v22)
      goto LABEL_33;
    goto LABEL_42;
  }
LABEL_41:
  operator delete(buf.__r_.__value_.__l.__data_);
  if (v22)
  {
LABEL_33:
    sub_100605D40(a2, (uint64_t)__p);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = __p;
    else
      v23 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    v24 = +[NSDictionary dictionaryWithContentsOfFile:](NSDictionary, "dictionaryWithContentsOfFile:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v23));
    v25 = v24;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p[0].__r_.__value_.__l.__data_);
      if (!v25)
        return;
    }
    else if (!v24)
    {
      return;
    }
    v40 = -[NSDictionary objectForKey:](v25, "objectForKey:", CFSTR("version"));
    if (v40)
    {
      v41 = objc_msgSend(v40, "intValue");
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10219F250);
      v42 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v43 = *(_DWORD *)(a1 + 224);
        LODWORD(__p[0].__r_.__value_.__l.__data_) = 67109376;
        HIDWORD(__p[0].__r_.__value_.__r.__words[0]) = v43;
        LOWORD(__p[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 2) = v41;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "Handsfree whitelist current version,%d,new version,%d", (uint8_t *)__p, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10219F250);
        v84 = *(_DWORD *)(a1 + 224);
        LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
        HIDWORD(buf.__r_.__value_.__r.__words[0]) = v84;
        LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v41;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Handsfree whitelist current version,%d,new version,%d", &buf, 14);
        v86 = (std::string *)v85;
        sub_100512490("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::onBluetoothWhitelistFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v85);
        if (v86 != __p)
          free(v86);
      }
      if (v41 > *(_DWORD *)(a1 + 224))
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10219F250);
        v44 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "Scheduling downloading handsfree whitelist", (uint8_t *)__p, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_10219F250);
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          LODWORD(v92) = 2;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Scheduling downloading handsfree whitelist", &buf, v92);
          v88 = (std::string *)v87;
          sub_100512490("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::onBluetoothWhitelistFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v87);
          if (v88 != __p)
            free(v88);
        }
        if ((sub_10060538C(a1 + 536, (double *)(a1 + 784), (double *)(a1 + 784)) & 1) == 0)
        {
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_10219F250);
          v45 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
          {
            v46 = (_QWORD *)(a1 + 512);
            if (*(char *)(a1 + 535) < 0)
              v46 = (_QWORD *)*v46;
            LODWORD(__p[0].__r_.__value_.__l.__data_) = 136446210;
            *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v46;
            _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_FAULT, "could not start handsfree whitelist file download from %{public}s", (uint8_t *)__p, 0xCu);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1022A02D0 != -1)
              dispatch_once(&qword_1022A02D0, &stru_10219F250);
            v47 = qword_1022A02D8;
            v48 = (_QWORD *)(a1 + 512);
            if (*(char *)(a1 + 535) < 0)
              v48 = (_QWORD *)*v48;
            goto LABEL_220;
          }
        }
      }
    }
    return;
  }
LABEL_42:
  sub_100605D40(a2, (uint64_t)&buf);
  sub_1010B3154(__p);
  v26 = std::string::append(__p, ".gz");
  v93 = *v26;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v27 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  else
    v28 = buf.__r_.__value_.__l.__size_;
  v29 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
  v30 = SHIBYTE(v93.__r_.__value_.__r.__words[2]);
  if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v29 = v93.__r_.__value_.__l.__size_;
  if (v28 != v29)
  {
    v39 = 0;
    if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_98;
    goto LABEL_63;
  }
  if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = &v93;
  else
    v31 = (std::string *)v93.__r_.__value_.__r.__words[0];
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    v39 = memcmp(buf.__r_.__value_.__l.__data_, v31, buf.__r_.__value_.__l.__size_) == 0;
    goto LABEL_97;
  }
  if (*((_BYTE *)&buf.__r_.__value_.__s + 23))
  {
    v32 = HIBYTE(buf.__r_.__value_.__r.__words[2]) - 1;
    v33 = &buf;
    do
    {
      v35 = v33->__r_.__value_.__s.__data_[0];
      v33 = (std::string *)((char *)v33 + 1);
      v34 = v35;
      v37 = v31->__r_.__value_.__s.__data_[0];
      v31 = (std::string *)((char *)v31 + 1);
      v36 = v37;
      v20 = v32-- != 0;
      v38 = v20;
      v39 = v34 == v36;
    }
    while (v34 == v36 && (v38 & 1) != 0);
LABEL_97:
    if ((v30 & 0x80000000) == 0)
      goto LABEL_98;
LABEL_63:
    operator delete(v93.__r_.__value_.__l.__data_);
    if ((*((_BYTE *)&buf.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_99;
LABEL_64:
    operator delete(buf.__r_.__value_.__l.__data_);
    if (!v39)
      return;
    goto LABEL_100;
  }
  v39 = 1;
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_63;
LABEL_98:
  if (v27 < 0)
    goto LABEL_64;
LABEL_99:
  if (!v39)
    return;
LABEL_100:
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10219F250);
  v49 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_100605D40(a2, (uint64_t)__p);
    v50 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? __p
        : (std::string *)__p[0].__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v50;
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "Uncompressing handsfree white list file %s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219F250);
    v80 = qword_1022A02D8;
    sub_100605D40(a2, (uint64_t)&buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v81 = &buf;
    else
      v81 = (std::string *)buf.__r_.__value_.__r.__words[0];
    LODWORD(v93.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v93.__r_.__value_.__r.__words + 4) = (std::string::size_type)v81;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v80, 2, "Uncompressing handsfree white list file %s", (const char *)&v93);
    v83 = v82;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::onBluetoothWhitelistFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", (const char *)v83);
    if (v83 != __p)
      free(v83);
  }
  sub_100605D40(a2, (uint64_t)__p);
  v51 = SHIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  v52 = __p[0].__r_.__value_.__r.__words[0];
  sub_1010B3154(&buf);
  if (v51 >= 0)
    v53 = __p;
  else
    v53 = (std::string *)v52;
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v54 = &buf;
  else
    v54 = (std::string *)buf.__r_.__value_.__r.__words[0];
  v55 = sub_100513F8C((char *)v53, (const char *)v54);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v55)
      goto LABEL_119;
LABEL_147:
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219F250);
    v66 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_100605D40(a2, (uint64_t)__p);
      v67 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? __p
          : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v67;
      _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_FAULT, "Failed to decompress handsfree whitelist file %{public}s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10219F250);
      v68 = qword_1022A02D8;
      sub_100605D40(a2, (uint64_t)&buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v69 = &buf;
      else
        v69 = (std::string *)buf.__r_.__value_.__r.__words[0];
      LODWORD(v93.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v93.__r_.__value_.__r.__words + 4) = (std::string::size_type)v69;
      LODWORD(v92) = 12;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v68, 17, "Failed to decompress handsfree whitelist file %{public}s", &v93, v92);
      v71 = v70;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 0, "void CLVehicleConnectionNotifier::onBluetoothWhitelistFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", (const char *)v71);
      if (v71 != __p)
        goto LABEL_221;
    }
    return;
  }
  operator delete(__p[0].__r_.__value_.__l.__data_);
  if (!v55)
    goto LABEL_147;
LABEL_119:
  sub_100605D40(a2, (uint64_t)__p);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v56 = __p;
  else
    v56 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  sub_100512FA8((const char *)v56);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  sub_1010B3154(__p);
  v57 = sub_1010B1C14(a1, (const char *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (v57)
  {
    sub_100584F4C(0, __p);
    v58 = std::string::append(__p, "bluetooth-carkit-whitelist.plist");
    v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v60 = &buf;
    else
      v60 = (std::string *)buf.__r_.__value_.__r.__words[0];
    sub_1005164F0((const char *)v60);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    v61 = (const std::__fs::filesystem::path *)&buf;
    sub_1010B3154(&buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v61 = (const std::__fs::filesystem::path *)buf.__r_.__value_.__r.__words[0];
    sub_100584F4C(0, __p);
    v62 = std::string::append(__p, "bluetooth-carkit-whitelist.plist");
    v64 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v93.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v64;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v65 = (const std::__fs::filesystem::path *)&v93;
    else
      v65 = (const std::__fs::filesystem::path *)v93.__r_.__value_.__r.__words[0];
    sub_100512FE0(v61, v65, v63);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v93.__r_.__value_.__l.__data_);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    sub_100605848(a1 + 536);
    return;
  }
  sub_1010B3154(__p);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v72 = __p;
  else
    v72 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  sub_1005164F0((const char *)v72);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10219F250);
  v73 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "Downloaded handsfree whitelist file appeared to be corrupt, schedule another download", (uint8_t *)__p, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219F250);
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    LODWORD(v92) = 2;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Downloaded handsfree whitelist file appeared to be corrupt, schedule another download", &buf, v92);
    v90 = (std::string *)v89;
    sub_100512490("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::onBluetoothWhitelistFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v89);
    if (v90 != __p)
      free(v90);
  }
  if ((sub_10060538C(a1 + 536, (double *)(a1 + 784), (double *)(a1 + 784)) & 1) == 0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219F250);
    v74 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v75 = (_QWORD *)(a1 + 512);
      if (*(char *)(a1 + 535) < 0)
        v75 = (_QWORD *)*v75;
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v75;
      _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_FAULT, "could not start handsfree whitelist file download from %{public}s", (uint8_t *)__p, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10219F250);
      v47 = qword_1022A02D8;
      v48 = (_QWORD *)(a1 + 512);
      if (*(char *)(a1 + 535) < 0)
        v48 = (_QWORD *)*v48;
LABEL_220:
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v48;
      LODWORD(v92) = 12;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v47, 17, "could not start handsfree whitelist file download from %{public}s", &buf, v92);
      v71 = (std::string *)v91;
      sub_100512490("Generic", 1, 0, 0, "void CLVehicleConnectionNotifier::onBluetoothWhitelistFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v91);
      if (v71 != __p)
LABEL_221:
        free(v71);
    }
  }
}

void sub_1010B30B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1010B3154(std::string *a1@<X8>)
{
  std::string *v2;
  __int128 v3;
  std::string *v4;
  std::string v5;
  std::string v6;

  sub_100584F4C(0, &v5);
  v2 = std::string::append(&v5, "Download_");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v6, "bluetooth-carkit-whitelist.plist");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_1010B31F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010B3228(uint64_t a1)
{
  sub_100008848(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t *sub_1010B3250(uint64_t a1, const void *a2)
{
  id v3;
  id v4;
  uint64_t *result;
  const void *v6;
  unint64_t *v7;

  v6 = a2;
  v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLVehicleConnectionNotifier"));
  CFRetain(a2);
  v4 = v3;
  v7 = (unint64_t *)&v6;
  result = sub_10006221C((uint64_t **)&qword_10230C408, (unint64_t *)&v6, (uint64_t)&unk_101B9EB60, (uint64_t **)&v7);
  result[5] = (uint64_t)v4;
  return result;
}

void sub_1010B32CC(const void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  BOOL v7;
  uint64_t *v8;
  NSObject *v9;
  void *v10;
  const char *v11;
  uint8_t *v12;
  _WORD v13[8];
  uint8_t buf[1640];

  CFRetain(a1);
  v4 = qword_10230C410;
  if (!qword_10230C410)
    goto LABEL_12;
  v5 = &qword_10230C410;
  do
  {
    v6 = *(_QWORD *)(v4 + 32);
    v7 = v6 >= (unint64_t)a1;
    if (v6 >= (unint64_t)a1)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (v7)
      v5 = (uint64_t *)v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 != &qword_10230C410 && v5[4] <= (unint64_t)a1)
  {
    v10 = (void *)v5[5];
    objc_msgSend(v10, "deliverAndReleaseNotification:withFlags:", a1, a2);

    CFRelease((CFTypeRef)v5[4]);
    sub_10008A9F0((uint64_t **)&qword_10230C408, v5);
    operator delete(v5);
  }
  else
  {
LABEL_12:
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219F250);
    v9 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "CFUserNotification event delivery for unknown notification", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10219F250);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "CFUserNotification event delivery for unknown notification", v13, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "void thunkDeliverCFUserNotification(CFUserNotificationRef, CFOptionFlags)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

void sub_1010B3514(uint64_t a1, std::string::size_type a2, char a3)
{
  NSObject *v5;
  std::string::size_type v6;
  int v7;
  unsigned int v8;
  int v9;
  NSObject *v10;
  std::string *v11;
  std::string::size_type v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  std::string *v16;
  const char *v17;
  uint8_t *v18;
  _QWORD v19[4];
  std::string v20;
  __int128 v21;
  uint64_t v22;
  __int128 __p;
  uint64_t v24;
  int v25;
  char v26;
  int v27;
  std::string *v28;
  __int16 v29;
  int v30;
  std::string v31;
  uint8_t buf[4];
  std::string *v33;
  __int16 v34;
  int v35;

  if (qword_10229FCB0 != -1)
    dispatch_once(&qword_10229FCB0, &stru_10219F270);
  v5 = qword_10229FCB8;
  if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = a2;
    if (*(char *)(a2 + 23) < 0)
      v6 = *(_QWORD *)a2;
    v7 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)buf = 136315394;
    v33 = (std::string *)v6;
    v34 = 1024;
    v35 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#fmc logBTConnection, deviceAddr, %s, deviceType, %u", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_10219F270);
    v12 = a2;
    if (*(char *)(a2 + 23) < 0)
      v12 = *(_QWORD *)a2;
    v13 = *(_DWORD *)(a2 + 48);
    LODWORD(v31.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v31.__r_.__value_.__r.__words + 4) = v12;
    WORD2(v31.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&v31.__r_.__value_.__r.__words[1] + 6) = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "#fmc logBTConnection, deviceAddr, %s, deviceType, %u", (const char *)&v31, 18);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::logBTConnection(CLBTDialogDeviceInfo, BOOL) const", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  if ((a3 & 1) != 0 || (v8 = *(_DWORD *)(a2 + 48), v8 <= 0x16) && ((1 << v8) & 0x5B0000) != 0)
  {
    std::string::basic_string(&v31, (const std::string *)a2, 0, 8uLL, (std::allocator<char> *)buf);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3321888768;
    v19[2] = sub_1010B3AD8;
    v19[3] = &unk_10219F198;
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      sub_100115CE4(&v20, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
    else
      v20 = v31;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_100115CE4(&v21, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      v21 = *(_OWORD *)a2;
      v22 = *(_QWORD *)(a2 + 16);
    }
    if (*(char *)(a2 + 47) < 0)
    {
      sub_100115CE4(&__p, *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
    }
    else
    {
      __p = *(_OWORD *)(a2 + 24);
      v24 = *(_QWORD *)(a2 + 40);
    }
    v25 = *(_DWORD *)(a2 + 48);
    v26 = a3;
    v9 = off_1022FD068((uint64_t)CFSTR("212"), (uint64_t)CFSTR("VehicleConnection_NOT_A_CRASH"), 0, 0, (uint64_t)v19);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_10219F270);
    v10 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = &v31;
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v11 = (std::string *)v31.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315394;
      v33 = v11;
      v34 = 1024;
      v35 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#fmc logBTConnection, btOUI, %s,success,%u", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_10219F270);
      v16 = &v31;
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v16 = (std::string *)v31.__r_.__value_.__r.__words[0];
      v27 = 136315394;
      v28 = v16;
      v29 = 1024;
      v30 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "#fmc logBTConnection, btOUI, %s,success,%u", (const char *)&v27, 18);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::logBTConnection(CLBTDialogDeviceInfo, BOOL) const", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    if (SHIBYTE(v24) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v22) < 0)
      operator delete((void *)v21);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
  }
}

void sub_1010B39F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  sub_1002FDAA0(v42);
  if (a21 < 0)
    operator delete(__p);
  if (a42 < 0)
    operator delete(a37);
  _Unwind_Resume(a1);
}

uint64_t sub_1010B3A64(int64x2_t *a1)
{
  sub_100302B68((uint64_t)&a1[2].i64[1], *(_QWORD *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x49uLL)) + 56 * (a1[2].i64[0] % 0x49uLL));
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_101B9DFC0);
  return sub_100AAFEC0((uint64_t)a1, 1);
}

id sub_1010B3AD8(uint64_t a1, void *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  const __CFString *v7;
  const __CFString *v8;
  const __CFString *v9;
  _QWORD v10[4];

  v7 = CFSTR("btOUI");
  v4 = (_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v4 = (_QWORD *)*v4;
  v10[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4);
  v8 = CFSTR("btDeviceName");
  v5 = (_QWORD *)(a1 + 80);
  if (*(char *)(a1 + 103) < 0)
    v5 = (_QWORD *)*v5;
  v10[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5);
  v10[2] = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u"), *(unsigned int *)(a1 + 104), v7, v8, CFSTR("btDeviceType"));
  v9 = CFSTR("isCorrectlyAdvertised");
  v10[3] = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u"), *(unsigned __int8 *)(a1 + 112));
  return objc_msgSend(a2, "writeData:", +[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v10, &v7, 4), 0, 0));
}

_BYTE *sub_1010B3C14(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *result;
  __int128 v7;

  if (*(char *)(a2 + 55) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 32), *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  if (*(char *)(a2 + 79) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 56), *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v5;
  }
  result = (_BYTE *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    result = sub_100115CE4(result, *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)result = v7;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  return result;
}

void sub_1010B3CD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 79) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1010B3D04(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

uint64_t sub_1010B3D58(_DWORD *a1, int a2, int a3)
{
  int v4;
  uint64_t result;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  int v15;
  int v16;
  __int16 v17;
  int v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;

  v4 = 1;
  if (a2 != 1 && a3 != 1)
  {
    result = 0;
    if (a3 | a2)
      return result;
    v4 = 0;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10219F250);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v7 = a1[237];
    v8 = a1[238];
    v9 = a1[239];
    *(_DWORD *)buf = 67109888;
    v20 = v7;
    v21 = 1024;
    v22 = v8;
    v23 = 1024;
    v24 = v9;
    v25 = 1024;
    v26 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CarKitConnectionStatus,%d,HandsfreeConnectionStatus,%d,current VehicleConnectionStatus,%d,new VehicleConnectionStatus,%d", buf, 0x1Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219F250);
    v10 = a1[238];
    v11 = a1[239];
    LOWORD(v15) = 1024;
    HIWORD(v15) = v10;
    v16 = v11;
    v17 = 1024;
    v18 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CarKitConnectionStatus,%d,HandsfreeConnectionStatus,%d,current VehicleConnectionStatus,%d,new VehicleConnectionStatus,%d", &v14, 26, 67109888, v15);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLVehicleConnectionNotifier::setVehicleConnectionStatus(ConnectionStatus, ConnectionStatus)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  if (a1[239] == v4)
    return 0;
  a1[239] = v4;
  return 1;
}

void sub_1010B3F88(uint64_t a1, int a2, void *a3, void *a4, void *a5)
{
  NSObject *v9;
  __CFNotificationCenter *DarwinNotifyCenter;
  NSObject *v11;
  __CFNotificationCenter *v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  _WORD v17[8];
  uint8_t buf[1640];

  if (a2)
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_10219F270);
    v9 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#fmc Posting notification upon vehicle connect", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_10219F270);
      v17[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "#fmc Posting notification upon vehicle connect", v17, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::postStatus(BOOL, NSString *, NSString *, NSString *)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, kCMVehicleConnectedNotification, 0, 0, 0);
    sub_1010B42D8(a1, 1, a3, a4, a5);
    sub_1010B102C(a1);
  }
  else
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_10219F270);
    v11 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#fmc Posting notification upon vehicle disconnect", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_10219F270);
      v17[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "#fmc Posting notification upon vehicle disconnect", v17, 2);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::postStatus(BOOL, NSString *, NSString *, NSString *)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    v12 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(v12, kCMVehicleDisconnectedNotification, 0, 0, 0);
    sub_1010B42D8(a1, 0, a3, a4, a5);
    sub_1010AF100(a1);
  }
}

void *sub_1010B42D8(uint64_t a1, int a2, void *a3, void *a4, void *a5)
{
  char *v10;
  double Current;
  int v13;
  _BYTE __dst[792];

  Current = CFAbsoluteTimeGetCurrent();
  if (a2)
  {
    *(double *)(a1 + 976) = Current;
    *(_QWORD *)(a1 + 984) = 0xBFF0000000000000;
    *(_QWORD *)(a1 + 1760) = 0xBFF0000000000000;
    if (a3 && (v10 = (char *)objc_msgSend(a3, "UTF8String")) != 0)
    {
      v10 = strncpy((char *)(a1 + 992), (const char *)objc_msgSend(a3, "UTF8String"), 0x100uLL);
      if (!a4)
        goto LABEL_11;
    }
    else
    {
      *(_OWORD *)(a1 + 1232) = 0u;
      *(_OWORD *)(a1 + 1216) = 0u;
      *(_OWORD *)(a1 + 1200) = 0u;
      *(_OWORD *)(a1 + 1184) = 0u;
      *(_OWORD *)(a1 + 1168) = 0u;
      *(_OWORD *)(a1 + 1152) = 0u;
      *(_OWORD *)(a1 + 1136) = 0u;
      *(_OWORD *)(a1 + 1120) = 0u;
      *(_OWORD *)(a1 + 1104) = 0u;
      *(_OWORD *)(a1 + 1088) = 0u;
      *(_OWORD *)(a1 + 1072) = 0u;
      *(_OWORD *)(a1 + 1056) = 0u;
      *(_OWORD *)(a1 + 1040) = 0u;
      *(_OWORD *)(a1 + 1008) = 0u;
      *(_OWORD *)(a1 + 1024) = 0u;
      *(_OWORD *)(a1 + 992) = 0u;
      if (!a4)
        goto LABEL_11;
    }
    v10 = (char *)objc_msgSend(a4, "UTF8String");
    if (v10)
    {
      v10 = strncpy((char *)(a1 + 1248), (const char *)objc_msgSend(a4, "UTF8String"), 0x100uLL);
      if (!a5)
        goto LABEL_14;
LABEL_12:
      v10 = (char *)objc_msgSend(a5, "UTF8String");
      if (v10)
      {
        v10 = strncpy((char *)(a1 + 1504), (const char *)objc_msgSend(a5, "UTF8String"), 0x100uLL);
        goto LABEL_15;
      }
LABEL_14:
      *(_OWORD *)(a1 + 1744) = 0u;
      *(_OWORD *)(a1 + 1728) = 0u;
      *(_OWORD *)(a1 + 1712) = 0u;
      *(_OWORD *)(a1 + 1696) = 0u;
      *(_OWORD *)(a1 + 1680) = 0u;
      *(_OWORD *)(a1 + 1664) = 0u;
      *(_OWORD *)(a1 + 1648) = 0u;
      *(_OWORD *)(a1 + 1632) = 0u;
      *(_OWORD *)(a1 + 1616) = 0u;
      *(_OWORD *)(a1 + 1600) = 0u;
      *(_OWORD *)(a1 + 1584) = 0u;
      *(_OWORD *)(a1 + 1568) = 0u;
      *(_OWORD *)(a1 + 1552) = 0u;
      *(_OWORD *)(a1 + 1536) = 0u;
      *(_OWORD *)(a1 + 1520) = 0u;
      *(_OWORD *)(a1 + 1504) = 0u;
      goto LABEL_15;
    }
LABEL_11:
    *(_OWORD *)(a1 + 1488) = 0u;
    *(_OWORD *)(a1 + 1472) = 0u;
    *(_OWORD *)(a1 + 1456) = 0u;
    *(_OWORD *)(a1 + 1440) = 0u;
    *(_OWORD *)(a1 + 1424) = 0u;
    *(_OWORD *)(a1 + 1408) = 0u;
    *(_OWORD *)(a1 + 1392) = 0u;
    *(_OWORD *)(a1 + 1376) = 0u;
    *(_OWORD *)(a1 + 1360) = 0u;
    *(_OWORD *)(a1 + 1344) = 0u;
    *(_OWORD *)(a1 + 1328) = 0u;
    *(_OWORD *)(a1 + 1312) = 0u;
    *(_OWORD *)(a1 + 1296) = 0u;
    *(_OWORD *)(a1 + 1280) = 0u;
    *(_OWORD *)(a1 + 1264) = 0u;
    *(_OWORD *)(a1 + 1248) = 0u;
    if (!a5)
      goto LABEL_14;
    goto LABEL_12;
  }
  *(double *)(a1 + 984) = Current;
LABEL_15:
  sub_1010B107C((uint64_t)v10, (double *)(a1 + 976));
  memcpy(__dst, (const void *)(a1 + 976), sizeof(__dst));
  v13 = 0;
  (*(void (**)(uint64_t, int *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v13, __dst, 1, 0xFFFFFFFFLL, 0);
  return memcpy((void *)(a1 + 1768), __dst, 0x318uLL);
}

void sub_1010B451C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 960))
    sub_1010B0C9C(v1);
}

void sub_1010B4530(uint64_t a1, uint64_t a2, int *a3, unsigned __int8 *a4)
{
  int *v5;
  NSObject *v7;
  int v8;
  _BOOL4 v9;
  _BOOL4 v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  int *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 **v25;
  unsigned __int8 *v26;
  unint64_t v27;
  unsigned __int8 **v28;
  unsigned __int8 *v29;
  NSObject *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  _BOOL4 v39;
  _BOOL4 v41;
  int v42;
  int v43;
  int v44;
  unsigned __int8 *v45;
  int v46;
  int v47;
  const char *v48;
  uint8_t *v49;
  int v50;
  int v51;
  const char *v52;
  uint8_t *v53;
  unsigned __int8 *v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  __int16 v59;
  _BOOL4 v60;
  __int16 v61;
  _BOOL4 v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  unsigned __int8 *v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;
  uint8_t buf[16];
  void *__p[2];
  __int128 v77;
  _BYTE v78[6];
  __int16 v79;
  int v80;

  v5 = a3;
  if (*a3)
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_10219F270);
    v7 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *v5;
      v9 = *v5 == 10;
      v11 = *v5 == 5 || v8 == 11;
      v13 = a4 + 16;
      v12 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
      v14 = v5;
      v15 = a4;
      v16 = a1;
      v17 = *((_DWORD *)v13 + 19);
      v18 = v13[88];
      v55 = *((_DWORD *)v13 + 25);
      if ((v13[23] & 0x80u) == 0)
        v12 = v13;
      v54 = v12;
      v19 = sub_100C0FFF0((const char *)v13);
      v20 = *((_DWORD *)v13 + 26);
      *(_DWORD *)buf = 67242242;
      *(_DWORD *)&buf[4] = v8;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v9;
      *(_WORD *)&buf[14] = 1024;
      LODWORD(__p[0]) = v11;
      WORD2(__p[0]) = 1026;
      *(_DWORD *)((char *)__p + 6) = v17;
      a1 = v16;
      a4 = v15;
      v5 = v14;
      WORD1(__p[1]) = 1024;
      HIDWORD(__p[1]) = v18;
      LOWORD(v77) = 1026;
      *(_DWORD *)((char *)&v77 + 2) = v55;
      WORD3(v77) = 2080;
      *((_QWORD *)&v77 + 1) = v54;
      *(_WORD *)v78 = 1026;
      *(_DWORD *)&v78[2] = v19;
      v79 = 1024;
      v80 = v20;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#fmc Received BT notification, %{public}d. Connect,%d,Disconnect,%d,DeviceType,%{public}d,isAppleAudio,%d,Services,0x%{public}x,Address,%s,Oui,%{public}d,BTResult,%d", buf, 0x3Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_10219F270);
      v56 = qword_10229FCB8;
      v38 = *v5;
      v39 = *v5 == 10;
      v41 = *v5 == 5 || v38 == 11;
      v42 = *((_DWORD *)a4 + 23);
      v43 = a4[104];
      v44 = *((_DWORD *)a4 + 29);
      if ((a4[39] & 0x80u) == 0)
        v45 = a4 + 16;
      else
        v45 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
      v46 = sub_100C0FFF0((const char *)a4 + 16);
      v47 = *((_DWORD *)a4 + 30);
      v57 = 67242242;
      v58 = v38;
      v59 = 1024;
      v60 = v39;
      v61 = 1024;
      v62 = v41;
      v63 = 1026;
      v64 = v42;
      v65 = 1024;
      v66 = v43;
      v67 = 1026;
      v68 = v44;
      v69 = 2080;
      v70 = v45;
      v71 = 1026;
      v72 = v46;
      v73 = 1024;
      v74 = v47;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v56, 0, "#fmc Received BT notification, %{public}d. Connect,%d,Disconnect,%d,DeviceType,%{public}d,isAppleAudio,%d,Services,0x%{public}x,Address,%s,Oui,%{public}d,BTResult,%d", &v57, 60);
      v49 = (uint8_t *)v48;
      sub_100512490("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::onBluetoothNotification(int, const CLBluetoothService_Type::Notification &, const CLBluetoothService_Type::NotificationData &)", "%s\n", v48);
      if (v49 != buf)
        free(v49);
    }
    if (!*((_DWORD *)a4 + 30) && *v5 <= 0xB && ((1 << *v5) & 0xC20) != 0)
    {
      if (*(_BYTE *)(a1 + 792))
      {
        if (!a4[104])
        {
          v21 = *((_DWORD *)a4 + 23);
          if (v21 <= 0x14 && ((1 << v21) & 0x1B0000) != 0)
          {
            v22 = (a4[39] & 0x80u) == 0 ? (uint64_t)(a4 + 16) : *((_QWORD *)a4 + 2);
            if (!objc_msgSend(*(id *)(a1 + 928), "objectForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v22))|| *(_BYTE *)(a1 + 793))
            {
              *(_OWORD *)__p = 0u;
              v77 = 0u;
              *(_OWORD *)buf = 0u;
              std::string::operator=((std::string *)buf, (const std::string *)(a4 + 16));
              std::string::operator=((std::string *)&__p[1], (const std::string *)(a4 + 40));
              *(_DWORD *)v78 = *((_DWORD *)a4 + 23);
              v23 = *(_QWORD *)(a1 + 832);
              v24 = *(_QWORD *)(a1 + 856);
              v25 = (unsigned __int8 **)(v23 + 8 * (v24 / 0x49));
              if (*(_QWORD *)(a1 + 840) == v23)
              {
                v26 = 0;
                v29 = 0;
                v28 = (unsigned __int8 **)(v23
                                         + (((unint64_t)(((*(_QWORD *)(a1 + 864) + v24)
                                                               * (unsigned __int128)0x70381C0E070381C1uLL) >> 64) >> 2) & 0x1FFFFFFFFFFFFFF8));
              }
              else
              {
                v26 = (unsigned __int8 *)(*(_QWORD *)(v23 + 8 * (v24 / 0x49)) + 56 * (v24 % 0x49));
                v27 = *(_QWORD *)(a1 + 864) + v24;
                v28 = (unsigned __int8 **)(v23 + 8 * (v27 / 0x49));
                v29 = &(*v28)[56 * (v27 % 0x49)];
              }
              sub_1010B8A18(v25, v26, v28, v29, buf);
              v34 = *(_QWORD *)(a1 + 832);
              if (*(_QWORD *)(a1 + 840) == v34)
              {
                v36 = 0;
              }
              else
              {
                v35 = *(_QWORD *)(a1 + 864) + *(_QWORD *)(a1 + 856);
                v36 = *(_QWORD *)(v34 + 8 * (v35 / 0x49)) + 56 * (v35 % 0x49);
              }
              if (v36 == v33)
                sub_1010B4C2C((_QWORD *)(a1 + 824), (__int128 *)buf);
              sub_1010AF5B0(a1);
              if (SHIBYTE(v77) < 0)
                operator delete(__p[1]);
              if (SHIBYTE(__p[0]) < 0)
                operator delete(*(void **)buf);
            }
          }
        }
      }
      v37 = *((_DWORD *)a4 + 23);
      if (v37 == 17
        || v37 == 22
        || v37 == 16 && *(_BYTE *)(a1 + 944)
        || a1 + 128 != sub_10019C4C0(a1 + 120, (const void **)a4 + 2))
      {
        sub_1010B1238(a1, (uint64_t)(a4 + 8), *((_DWORD *)a4 + 29), v5);
      }
    }
  }
  else
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_10219F270);
    v30 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
    {
      v31 = *v5;
      v32 = *a4;
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = v31;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v32;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#fmc Received BT notification, %{public}d. Ready,%{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_10219F270);
      v50 = *v5;
      v51 = *a4;
      v57 = 67240448;
      v58 = v50;
      v59 = 1026;
      v60 = v51;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "#fmc Received BT notification, %{public}d. Ready,%{public}d", &v57, 14);
      v53 = (uint8_t *)v52;
      sub_100512490("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::onBluetoothNotification(int, const CLBluetoothService_Type::Notification &, const CLBluetoothService_Type::NotificationData &)", "%s\n", v52);
      if (v53 != buf)
        free(v53);
    }
    if (*a4)
    {
      objc_msgSend(*(id *)(a1 + 808), "invalidate");

      *(_QWORD *)(a1 + 808) = 0;
      sub_1010AFFC0(a1);
    }
  }
}

void sub_1010B4C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_1002FDAA0((uint64_t)va);
  _Unwind_Resume(a1);
}

_BYTE *sub_1010B4C2C(_QWORD *a1, __int128 *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _BYTE *result;

  v4 = a1 + 5;
  v5 = a1[1];
  v6 = a1[2];
  v7 = 73 * ((v6 - v5) >> 3) - 1;
  if (v6 == v5)
    v7 = 0;
  if (v7 == a1[5] + a1[4])
  {
    sub_1010B8BC0(a1);
    v5 = a1[1];
    v6 = a1[2];
  }
  if (v6 == v5)
  {
    v9 = 0;
  }
  else
  {
    v8 = a1[5] + a1[4];
    v9 = (_QWORD *)(*(_QWORD *)(v5 + 8 * (v8 / 0x49)) + 56 * (v8 % 0x49));
  }
  result = sub_1010B8ED4((int)v4, v9, a2);
  ++*v4;
  return result;
}

void sub_1010B4CF4(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int *a4)
{
  if (*a3 == 2 && CLMotionActivity::isTypePedestrian(*a4))
  {
    if (*(_BYTE *)(a1 + 960))
      sub_1010B0C9C(a1);
  }
}

uint64_t sub_1010B4D40(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_10219F460;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_1010B4E14()
{
  operator new();
}

void sub_1010B4EC0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_1010B4EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10219F290);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_10219F290);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_1010B5170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FD070);
}

uint64_t sub_1010B5184(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  _BYTE buf[12];
  __int16 v46;
  int v47;

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        bzero(buf, 0x318uLL);
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_1010B8FCC();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022FD071;
        HIDWORD(v39) = v17;
        *(_QWORD *)buf = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10219F290);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    v46 = 1026;
    v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219F290);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != buf)
      free(v38);
    return 0;
  }
  return result;
}

BOOL sub_1010B55E8(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219F290);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10219F290);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_1010B5868(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10219F290);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10219F290);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_1010B5BF0(uint64_t a1, int *a2, void *__dst)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  const void *v11;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(const void **)(v7 + 64);
  if (!v11)
    return 0;
  memcpy(__dst, v11, 0x318uLL);
  return 1;
}

uint64_t sub_1010B5C60(uint64_t a1, int *a2, const void *a3)
{
  _QWORD *v6;
  uint64_t **v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int v12;
  __int128 v13;
  int *v14;

  v6 = operator new(0x330uLL);
  v6[2] = 0;
  *v6 = off_10219F3F0;
  v6[1] = 0;
  memcpy(v6 + 3, a3, 0x318uLL);
  *(_QWORD *)&v13 = v6 + 3;
  *((_QWORD *)&v13 + 1) = v6;
  v12 = *a2;
  v14 = &v12;
  v7 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v12, (uint64_t)&unk_101B9EB60, &v14);
  sub_1002B7674((uint64_t)(v7 + 8), &v13);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return 1;
}

void sub_1010B5D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010B5D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE v9[792];

  bzero(v9, 0x318uLL);
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v9, a3, a4, 0);
}

void sub_1010B5DF8(uint64_t a1, signed __int32 *a2, const void *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v30[20];
  __int16 v31;
  _QWORD *v32;
  __int16 v33;
  std::__shared_weak_count *v34;
  _QWORD **v35;
  _QWORD *v36[3];
  std::__shared_weak_count *v37;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219F290);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v30 = 2082;
      *(_QWORD *)&v30[2] = "";
      *(_WORD *)&v30[10] = 2082;
      *(_QWORD *)&v30[12] = "activity";
      v31 = 2082;
      v32 = v10;
      v33 = 2050;
      v34 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v35 = v36;
      memset(v36, 0, sizeof(v36));
      v37 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v35);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v30, *(_QWORD **)&v30[8]);
      v21 = v37;
      if (v37)
      {
        v22 = (unint64_t *)&v37->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v35, v36[0]);
    }
    if (a4)
    {
      v24 = operator new(0x330uLL);
      v24[2] = 0;
      *v24 = off_10219F3F0;
      v24[1] = 0;
      memcpy(v24 + 3, a3, 0x318uLL);
      *(_QWORD *)buf = v24 + 3;
      *(_QWORD *)v30 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v25 = *(std::__shared_weak_count **)v30;
      if (*(_QWORD *)v30)
      {
        v26 = (unint64_t *)(*(_QWORD *)v30 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_1010B7C14();
    os_activity_scope_leave(&state);
  }
}

void sub_1010B643C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1010B6488(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219F290);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10219F290);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData>::listClients() [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219F290);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10219F290);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData>::listClients() [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10219F290);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10219F290);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData>::listClients() [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_1010B6A34(uint64_t a1)
{
  sub_1010B8F6C(a1);
  operator delete();
}

id sub_1010B6A58(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_1010B81CC(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_1010B6AA4(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1010B6AD0(id a1)
{
  qword_10229FCB8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

void sub_1010B6AFC(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1010B6B28(uint64_t a1)
{
  sub_1010B6B4C(a1);
  operator delete();
}

uint64_t sub_1010B6B4C(uint64_t a1)
{
  *(_QWORD *)a1 = off_10219F2C0;
  sub_1010B6B9C(a1 + 56, *(_QWORD **)(a1 + 64));
  sub_100090AE4(a1 + 32, *(char **)(a1 + 40));
  sub_100008848(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void sub_1010B6B9C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1010B6B9C(a1, *a2);
    sub_1010B6B9C(a1, a2[1]);
    sub_100D43C24((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

uint64_t **sub_1010B6BE8(uint64_t **result, unsigned int *a2, unsigned int *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned int *v9;
  unsigned int *v10;
  BOOL v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = sub_10036C1BC((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_DWORD *)v8 + 7) = v9[7];
          sub_1010B6D48(v5, (uint64_t)v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = sub_10036C1BC((uint64_t)v15);
          v10 = (unsigned int *)*((_QWORD *)v9 + 1);
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = *(unsigned int **)v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (unsigned int *)*((_QWORD *)v9 + 2);
              v11 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)sub_10036C210((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_1010B6DB4(v5, a2 + 7);
      v12 = (unsigned int *)*((_QWORD *)a2 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(unsigned int **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (unsigned int *)*((_QWORD *)a2 + 2);
          v11 = *(_QWORD *)v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1010B6D34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10036C210((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010B6D48(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 28) >= *((_DWORD *)v4 + 7))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  sub_1000145B0(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

uint64_t *sub_1010B6DB4(uint64_t **a1, unsigned int *a2)
{
  uint64_t *v4;
  unsigned int v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (uint64_t *)operator new(0x20uLL);
  v5 = *a2;
  *((_DWORD *)v4 + 7) = *a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (v5 >= *((_DWORD *)v7 + 7))
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  sub_1000145B0(a1, (uint64_t)v6, v8, v4);
  return v4;
}

uint64_t **sub_1010B6E40(uint64_t **result, uint64_t *a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = sub_10036C1BC((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          if (v8 != v9)
          {
            sub_1010B7028((uint64_t **)v8 + 5, (__int128 *)v9[5], (__int128 *)v9 + 3);
            v8 = v16;
          }
          sub_1010B6FBC(v5, (uint64_t)v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = sub_10036C1BC((uint64_t)v15);
          v10 = (uint64_t *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (uint64_t *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (uint64_t *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)sub_1010B72F0((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_1010B7344((uint64_t)v5, (uint64_t)(a2 + 4));
      v12 = (uint64_t *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (uint64_t *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1010B6FA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1010B72F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010B6FBC(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 32) >= *((_DWORD *)v4 + 8))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  sub_1000145B0(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

uint64_t **sub_1010B7028(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t **v10;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = sub_10036C1BC((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::string::operator=((std::string *)(v8 + 7), (const std::string *)((char *)v9 + 56));
          v10 = (uint64_t **)sub_10031C1B0((uint64_t)v5, &v18, v17 + 4);
          sub_1000145B0(v5, v18, v10, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = sub_10036C1BC((uint64_t)v16);
          v11 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = *(__int128 **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v12 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)sub_1010B71B4((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_1010B7208(v5, a2 + 2);
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (__int128 *)*((_QWORD *)a2 + 2);
          v12 = *(_QWORD *)v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1010B71A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1010B71B4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1010B71B4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_100D43C24(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_100D43C24(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *sub_1010B7208(uint64_t **a1, __int128 *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  sub_1010B7288((uint64_t)a1, a2, (uint64_t)v7);
  v3 = (uint64_t **)sub_10031C1B0((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  sub_1000145B0(a1, v6, v3, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  sub_100D43FA4((uint64_t)v7, 0);
  return v4;
}

void sub_1010B7270(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100D43FA4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *sub_1010B7288@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_100A92AE8(v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1010B72D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100D43FA4(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1010B72F0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_1010B6B9C(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_1010B6B9C(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *sub_1010B7344(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v7;

  sub_1010B73C4(a1, a2, (uint64_t)&v7);
  v3 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*((_DWORD *)v7 + 8) >= *((_DWORD *)v4 + 8))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  sub_1000145B0((uint64_t **)a1, (uint64_t)v3, v5, v7);
  return v7;
}

uint64_t *sub_1010B73C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *(_DWORD *)a2;
  result = sub_1010B7814((uint64_t *)v6 + 5, (const void ***)(a2 + 8));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1010B7430(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1010B744C(v3, v2);
  _Unwind_Resume(a1);
}

void sub_1010B744C(uint64_t a1, _QWORD **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    sub_100D43C24((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t sub_1010B7494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_10230C420 != -1)
    dispatch_once(&qword_10230C420, &stru_10219F2E0);
  off_1022FD068 = (uint64_t (*)())dlsym((void *)qword_10230C428, "OSAWriteLogForSubmission");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))off_1022FD068)(a1, a2, a3, a4, a5);
}

void sub_1010B752C(id a1)
{
  qword_10230C428 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CrashReporterSupport.framework/CrashReporterSupport", 2);
}

uint64_t **sub_1010B7554(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 5) = v11 + 12;
    sub_1000145B0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *sub_1010B7620(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_10019C424((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_1010B76C8((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000145B0(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_100D43FA4((uint64_t)v10, 0);
  }
  return v7;
}

_BYTE *sub_1010B76C8@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 4;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_100115CE4(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1010B7744(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100D43FA4(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t **sub_1010B775C(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    sub_1000145B0(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *sub_1010B7814(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1010B7868(a1, *a2, a2 + 1);
  return a1;
}

void sub_1010B7850(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100D43C24(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1010B7868(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_1010B78EC(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1010B78EC(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = sub_1006754A0(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    sub_1010B7288((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000145B0(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_100D43FA4((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t sub_1010B7980(_QWORD *a1)
{
  _QWORD *v2;
  void **v3;
  void **v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = a1 + 5;
  v3 = (void **)a1[1];
  v4 = (void **)a1[2];
  if (v4 == v3)
  {
    v4 = (void **)a1[1];
  }
  else
  {
    v5 = a1[4];
    v6 = &v3[v5 / 0x49];
    v7 = (uint64_t)*v6 + 56 * (v5 % 0x49);
    v8 = (unint64_t)v3[(a1[5] + v5) / 0x49] + 56 * ((a1[5] + v5) % 0x49);
    if (v7 != v8)
    {
      do
      {
        sub_100302B68((uint64_t)v2, v7);
        v7 += 56;
        if (v7 - (_QWORD)*v6 == 4088)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v3 = (void **)a1[1];
      v4 = (void **)a1[2];
    }
  }
  *v2 = 0;
  v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v4 = (void **)a1[2];
      v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 36;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 73;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    v13 = *v3++;
    operator delete(v13);
  }
  return sub_10002E778((uint64_t)a1);
}

uint64_t *sub_1010B7ABC(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_10019C424((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_1010B7B64((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000145B0(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_100C1342C((uint64_t)v10, 0);
  }
  return v7;
}

double sub_1010B7B64@<D0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _BYTE *v7;
  __int128 *v8;
  __int128 v9;
  double result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0xB8uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = v6 + 32;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_100115CE4(v7, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)v7 = v9;
  }
  result = 0.0;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1010B7BFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100C1342C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1010B7C14()
{
  operator new();
}

void sub_1010B7CAC(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_1010B81CC(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_1010B8080(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10219F290);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10219F290);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_1010B8080(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_1010B81CC(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

void sub_1010B815C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10219F3F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1010B8170(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10219F3F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1010B81AC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

id sub_1010B81CC(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_1010B8244(a1);
  v6 = objc_opt_class(CLCppContainer, v4);
  if ((objc_opt_isKindOfClass(a1, v6) & 1) != 0)
    return sub_1010B85CC(a1);
  else
    return 0;
}

id sub_1010B8244(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  id v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return sub_1010B8978((uint64_t)&v8 + 7, a1);
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10219F430);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101C3F501 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10219F430);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10219F430);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101C3F501 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10219F430);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLVehicleConnectionNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_1010B85CC(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10219F430);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C3F501 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10219F430);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10219F430);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C3F501 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10219F430);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLVehicleConnectionNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_1010B8978(uint64_t a1, void *a2)
{
  if (!objc_msgSend(a2, "cppObjectPtr")
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221CE18))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)792)
      sub_10193DC0C();
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }
  return objc_msgSend(a2, "cppObjectPtr");
}

void sub_1010B89EC(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

unsigned __int8 **sub_1010B8A18(unsigned __int8 **a1, unsigned __int8 *a2, unsigned __int8 **a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  unsigned __int8 *v7;
  unsigned __int8 **v8;
  unsigned __int8 **v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 **v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;

  v7 = a2;
  v8 = a1;
  if (a1 == a3)
  {
    if (a2 != a4)
    {
      while (!sub_10071C384(v7, a5))
      {
        v7 += 56;
        if (v7 == a4)
        {
          v7 = a4;
          break;
        }
      }
    }
    if (!v8)
      return 0;
    v9 = v8;
    if (*v8 + 4088 == v7)
      return v8 + 1;
  }
  else
  {
    v9 = a3;
    v10 = (uint64_t)(*a1 + 4088);
    if ((unsigned __int8 *)v10 == a2)
      goto LABEL_21;
    while (!sub_10071C384(v7, a5))
    {
      v7 += 56;
      if (v7 == (unsigned __int8 *)v10)
        goto LABEL_21;
    }
    if (v7 == (unsigned __int8 *)v10)
    {
LABEL_21:
      v14 = (uint64_t *)(v8 + 1);
      if (v8 + 1 == v9)
      {
        v15 = *v9;
        if (*v9 == a4)
        {
          v16 = *v9;
        }
        else
        {
          while (!sub_10071C384(v15, a5))
          {
            v15 += 56;
            if (v15 == a4)
            {
              v15 = a4;
              break;
            }
          }
          v16 = v15;
          v15 = *v9;
        }
        if (v15 + 4088 == v16)
          return v8 + 2;
      }
      else
      {
        v11 = 0;
        v12 = v8++;
        v13 = *v14;
        while (!sub_10071C384((unsigned __int8 *)(v13 + v11), a5))
        {
          v11 += 56;
          if (v11 == 4088)
            goto LABEL_21;
        }
        v9 = v8;
        if ((unsigned __int8 *)(v13 + v11) == *v8 + 4088)
          return v12 + 2;
      }
    }
    else
    {
      v9 = v8;
      if (v7 == *v8 + 4088)
        return v8 + 1;
    }
  }
  return v9;
}

void sub_1010B8BC0(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x49;
  v4 = v2 - 73;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF8uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF8uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF8uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1010B8E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_BYTE *sub_1010B8ED4(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v5;
  _BYTE *result;
  __int128 v7;

  if (*((char *)a3 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    __dst[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)__dst = v5;
  }
  result = __dst + 3;
  if (*((char *)a3 + 47) < 0)
  {
    result = sub_100115CE4(result, *((void **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v7 = *(__int128 *)((char *)a3 + 24);
    __dst[5] = *((_QWORD *)a3 + 5);
    *(_OWORD *)result = v7;
  }
  *((_DWORD *)__dst + 12) = *((_DWORD *)a3 + 12);
  return result;
}

void sub_1010B8F50(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010B8F6C(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_10219F460;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_1010B8FCC()
{
  operator new();
}

uint64_t sub_1010B9064(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

uint64_t sub_1010B9084()
{
  qword_10230C418 = 0;
  qword_10230C410 = 0;
  qword_10230C408 = (uint64_t)&qword_10230C410;
  return __cxa_atexit((void (*)(void *))sub_1010B3228, &qword_10230C408, (void *)&_mh_execute_header);
}

_QWORD *sub_1010B90B0(_QWORD *result)
{
  *result = off_10219F488;
  return result;
}

void sub_1010B90C4()
{
  operator delete();
}

unsigned __int8 *sub_1010B90D8()
{
  unsigned __int8 v1;
  unsigned __int8 v2[3];

  v1 = 1;
  return sub_1018BF25C(v2, "ShouldWriteTimeInDaylightToHealthKit", &v1, 0);
}

double sub_1010B9110(double a1, double a2)
{
  double result;

  if (a1 < 0.0)
    a1 = a1 + 360.0;
  if (a2 < 0.0)
    a2 = a2 + 360.0;
  result = a2 - a1;
  if (result > 180.0)
    return result + -360.0;
  if (result < -180.0)
    return result + 360.0;
  return result;
}

long double sub_1010B916C(double a1, double a2, double a3, double a4)
{
  double v4;
  long double result;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  long double v14;
  long double v15;
  long double v16;
  double v17;
  double v18;
  __double2 v19;
  __double2 v20;
  unsigned int v21;
  double v22;
  double v23;
  __double2 v24;
  double v25;
  double v26;
  double v27;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v38;
  double v39;
  double v40;
  BOOL v41;
  double v42;
  double v43;
  double v44;

  v4 = a3;
  result = 0.0;
  if (a3 > 90.0 || a1 < -90.0 || a1 > 90.0 || a3 < -90.0)
    return result;
  v7 = a4 + 360.0;
  if (a4 >= 0.0)
    v7 = a4;
  v8 = a2 + 360.0;
  if (a2 >= 0.0)
    v8 = a2;
  v9 = v8 - v7;
  if (v9 <= 180.0)
  {
    if (v9 < -180.0)
      v9 = v9 + 360.0;
  }
  else
  {
    v9 = v9 + -360.0;
  }
  if (fabs(a1 + v4) >= 0.0001)
  {
    v42 = a2;
    v43 = a4;
LABEL_18:
    v11 = v9;
    goto LABEL_19;
  }
  v10 = fabs(a1);
  if (v10 < 0.0001 && 180.0 - fabs(v9) < 0.0001)
    return 20037508.3;
  v41 = fabs(v10 + -90.0) < 0.0001;
  if (v41)
    v11 = 0.0;
  else
    v11 = v9;
  v42 = a2;
  v43 = a4;
  if (!v41 && 180.0 - fabs(v9) >= 0.0001)
    goto LABEL_18;
  if (a1 <= v4)
    v4 = v4 + -0.0001;
  else
    a1 = a1 + -0.0001;
LABEL_19:
  v12 = v11 * 0.0174532925;
  v44 = a1;
  v13 = tan(a1 * 0.0174532925);
  v14 = tan(v4 * 0.0174532925);
  v15 = v13 * 0.996647189;
  v16 = v14 * 0.996647189;
  v17 = atan(v15);
  v18 = atan(v16);
  v19 = __sincos_stret(v17);
  v20 = __sincos_stret(v18);
  v21 = 0;
  v22 = v19.__cosval * v20.__cosval;
  v23 = v12;
  while (1)
  {
    v24 = __sincos_stret(v23);
    v25 = sqrt((-(v19.__sinval * v20.__cosval) * v24.__cosval + v19.__cosval * v20.__sinval)* (-(v19.__sinval * v20.__cosval) * v24.__cosval + v19.__cosval * v20.__sinval)+ v20.__cosval * v24.__sinval * (v20.__cosval * v24.__sinval));
    if (v25 < 2.22044605e-15)
      break;
    v26 = v22 * v24.__cosval + v19.__sinval * v20.__sinval;
    v27 = fabs(v26);
    if (fabs(v25) > 1.0 || v27 > 1.0)
      break;
    v29 = atan2(v25, v26);
    v30 = v22 * v24.__sinval / v25;
    if (v30 > 1.0)
      break;
    v31 = 1.0 - v30 * v30;
    if (fabs(v31) >= 2.22044605e-15)
    {
      v33 = v26 - (v19.__sinval + v19.__sinval) * v20.__sinval / v31;
      v32 = v31 * 0.000209550667 * ((v31 * -3.0 + 4.0) * 0.00335281066 + 4.0);
    }
    else
    {
      v32 = 0.0;
      v33 = -1.0;
    }
    v34 = v30 * ((1.0 - v32) * 0.00335281066);
    v35 = v33 * v33 * 2.0 + -1.0;
    v36 = v12 + v34 * (v29 + v25 * v32 * (v33 + v26 * v32 * v35));
    if (vabdd_f64(v36, v23) > 0.000000001)
    {
      v23 = v36;
      if (v21++ < 0x31)
        continue;
    }
    v38 = v31 * 2.72331606e11 / 4.04083e13;
    v39 = v38 * 0.0000610351562 * (v38 * (v38 * (v38 * -175.0 + 320.0) + -768.0) + 4096.0) + 1.0;
    v40 = v38 * 0.0009765625 * (v38 * (v38 * (v38 * -47.0 + 74.0) + -128.0) + 256.0);
    return v39
         * 6356752.31
         * (v29 - v25 * v40 * (v33 + v40 * 0.25 * ((v33 * v33 * 4.0 + -3.0) * (v33 * (v40 / 6.0) * 3.0) + v26 * v35)));
  }
  return sub_1010B95B0(v44, v42, v4, v43);
}

long double sub_1010B95B0(double a1, double a2, double a3, double a4)
{
  double v5;
  double v6;
  double v7;
  double v8;
  long double v9;
  long double v10;
  __double2 v11;
  long double v12;
  long double v13;
  double v14;
  double v15;
  long double v16;

  v5 = 360.0;
  if (a2 < 0.0)
    a2 = a2 + 360.0;
  if (a4 < 0.0)
    a4 = a4 + 360.0;
  v6 = a4 - a2;
  if (v6 <= 180.0)
  {
    if (v6 >= -180.0)
      goto LABEL_9;
  }
  else
  {
    v5 = -360.0;
  }
  v6 = v6 + v5;
LABEL_9:
  v7 = a1 * 0.0174532925;
  v8 = v6 * 0.0174532925;
  v9 = sin((a3 - a1) * 0.0174532925 * 0.5);
  v10 = v9 * v9;
  v11 = __sincos_stret(v7);
  v12 = v11.__cosval * cos(a3 * 0.0174532925);
  v13 = sin(v8 * 0.5);
  v14 = v10 + v12 * (v13 * v13);
  v15 = 1.0 - v14;
  if (v14 < 0.0)
    v14 = 0.0;
  if (v15 < 0.0)
    v15 = 0.0;
  v16 = atan2(sqrt(v14), sqrt(v15));
  return (fabs(v11.__sinval) * -21000.0 + 6378160.0) * (v16 + v16);
}

long double sub_1010B96D4(double *a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  double v15;
  double v16;
  double v17;

  v16 = 0.0;
  v17 = 0.0;
  v15 = 0.0;
  if (sub_10011E6FC(a2, a3, a5, a6) || !sub_10011E780(a1, &v17, &v16, &v15, a2, a3, a4, a5, a6, a7))
    return sub_1010B916C(a2, a3, a5, a6);
  else
    return sqrt(v16 * v16 + v17 * v17 + v15 * v15);
}

long double sub_1010B97B4(double *a1, uint64_t a2, double a3, double a4)
{
  double v4;

  if (*(double *)(a2 + 36) <= 0.0)
    v4 = 0.0;
  else
    v4 = *(double *)(a2 + 28);
  return sub_10011E634(a1, *(double *)(a2 + 4), *(double *)(a2 + 12), a3, a4, v4);
}

BOOL sub_1010B97DC(double *a1, double *a2, double *a3, double *a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  double v15;
  double v16;
  double v17;
  int v18;
  double v19;
  double v20;
  _BOOL4 v21;
  _BOOL8 v22;
  double v23;
  double v24;
  double v26;
  double v27;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;

  v33 = a6;
  v34 = a5;
  *a2 = 0.0;
  *a3 = 0.0;
  *a4 = 0.0;
  v31 = fabs(a8);
  v32 = a7;
  v30 = fabs(a9);
  v15 = -49000.0;
  if (a8 >= 0.0)
    v16 = 49000.0;
  else
    v16 = -49000.0;
  v27 = v16;
  if (a9 >= 0.0)
    v15 = 49000.0;
  v26 = v15;
  v17 = 0.0;
  v18 = 21;
  v19 = 0.0;
  v20 = 0.0;
  while (1)
  {
    v21 = fabs(v17) >= v31;
    v22 = fabs(v19) >= v30 && (unint64_t)v21;
    if (v22)
      break;
    if (vabdd_f64(a8, v17) >= 49000.0)
      v23 = v27;
    else
      v23 = a8 - v17;
    if (vabdd_f64(a9, v19) >= 49000.0)
      v24 = v26;
    else
      v24 = a9 - v19;
    if (sub_10008111C(a1, &v34, &v33, &v32, v34, v33, v32, v23, v24, a10 - v20))
    {
      v20 = v20 + a10 - v20;
      v17 = v17 + v23;
      v19 = v19 + v24;
      if (--v18)
        continue;
    }
    return v22;
  }
  *a2 = v34;
  *a3 = v33;
  *a4 = v32;
  return v22;
}

double sub_1010B9950(double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v12;
  long double v13;
  __double2 v14;
  double result;
  double v16;
  double v17;
  double v18;

  v17 = 0.0;
  v18 = 0.0;
  sub_10011E780(a1, &v18, &v17, &v16, a4, a5, a6, a8, a9, a6);
  v12 = sqrt(v17 * v17 + v18 * v18);
  v13 = atan2(v17, v18);
  v14 = __sincos_stret(v13 + a7 * -0.0174532925);
  *a3 = v12 * v14.__cosval;
  result = v12 * v14.__sinval;
  *a2 = v12 * v14.__sinval;
  return result;
}

void sub_1010B99DC(double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v18;
  __double2 v19;
  double v20;
  double v21;
  double v22;
  __double2 v23;
  double v24;
  double v25;
  double v26;

  v18 = a1[3];
  if (v18 == 0.0 || vabdd_f64(a4, v18) > 0.005)
  {
    a1[2] = a4 * 0.0174532925;
    a1[3] = a4;
    v19 = __sincos_stret(a4 * 0.0174532925);
    v20 = v19.__sinval * -0.00669437999 * v19.__sinval + 1.0;
    v21 = sqrt(v20);
    *a1 = 6335439.33 / (v20 * v21);
    a1[1] = 6378137.0 / v21;
    a1[4] = v19.__cosval;
  }
  *a2 = a4;
  *a3 = a5;
  if (a4 < 90.0 && a4 > -90.0 && a7 > 0.0 && a8 > 0.0 && a9 >= 0.0)
  {
    v22 = a7 * a8;
    v23 = __sincos_stret(a9 * 0.0174532925);
    v24 = a5 * 0.0174532925 + v22 * v23.__sinval / ((a1[1] + a6) * a1[4]);
    *a2 = (a4 * 0.0174532925 + v22 * v23.__cosval / (*a1 + a6)) * 57.2957795;
    v25 = v24 * 57.2957795;
    *a3 = v25;
    v26 = *a2;
    if (*a2 > 90.0)
    {
      *a2 = 180.0 - v26;
      v25 = *a3 + 180.0;
      *a3 = v25;
      v26 = *a2;
    }
    if (v26 < -90.0)
    {
      *a2 = -180.0 - v26;
      v25 = *a3 + 180.0;
      *a3 = v25;
    }
    if (v25 > -180.0)
    {
      if (v25 <= 180.0)
        return;
    }
    else
    {
      v25 = v25 + 360.0;
    }
    if (v25 > 180.0)
      v25 = v25 + -360.0;
    *a3 = v25;
  }
}

double sub_1010B9BE4(double *a1, double a2, double a3, double a4, double a5)
{
  NSObject *v5;
  _BOOL4 v6;
  double result;
  const char *v8;
  uint8_t *v9;
  _BOOL4 v10;
  double v11;
  double v12;
  double __y[2];
  uint8_t buf[8];

  if (vabdd_f64(a2, a4) >= 0.00000001 || vabdd_f64(a3, a5) >= 0.00000001)
  {
    *(_QWORD *)buf = 0;
    __y[0] = 0.0;
    v10 = sub_10011E780(a1, (double *)buf, __y, &v12, a2, a3, 0.0, a4, a5, 0.0);
    result = -1.0;
    if (v10)
    {
      v11 = atan2(__y[0], *(long double *)buf);
      if (v11 < 0.0)
        v11 = v11 + 6.28318531;
      return v11 * 57.2957795;
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219F4D0);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning, same coordinates input", buf, 2u);
    }
    v6 = sub_1001BFF7C(115, 2);
    result = -1.0;
    if (v6)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10219F4D0);
      LOWORD(__y[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning, same coordinates input", __y, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "double CLDistanceCalc::calculateAzimuth(double, double, double, double)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
      return -1.0;
    }
  }
  return result;
}

void sub_1010B9DEC(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1010B9EBC(id a1)
{
  qword_10230C448 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLMotionSyncStoreSilo"));
}

uint64_t sub_1010B9F70(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1010BADB8;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230C458 != -1)
    dispatch_once(&qword_10230C458, block);
  return qword_102311C90;
}

void sub_1010BA278(uint64_t a1, void *a2)
{
  uint64_t v2;

  v2 = sub_1010BA440(a1, "CLMotionSyncStore", a2);
  *(_QWORD *)v2 = off_10219F520;
  *(_BYTE *)(v2 + 109) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 120) = 0;
  sub_100E35814();
}

void sub_1010BA3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v8;
  va_list va;

  va_start(va, a6);
  sub_100261F44((uint64_t)va);
  v8 = *(_QWORD *)(v6 + 120);
  *(_QWORD *)(v6 + 120) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  sub_1010BACDC(v6);
  _Unwind_Resume(a1);
}

uint64_t sub_1010BA440(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_10219F6D0;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_1010BA4C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1010BA4DC(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMotionSyncStore::onDataProtectionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10219F660);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionSyncStore::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219F660);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionSyncStore::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1010BAF14((_BYTE *)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1010BA694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1010BA6B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  _WORD v17[8];
  uint64_t v18;
  uint64_t v19;
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(v1 + 32), "vendor"), "proxyForService:", CFSTR("CLNatalimetryNotifier")), "refreshMetrics");
  v2 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 936))(v2);
  v3 = objc_msgSend(objc_msgSend(*(id *)(v1 + 32), "vendor"), "proxyForService:", CFSTR("CLStepCountNotifier"));
  v19 = 0;
  v4 = sub_1001FD94C();
  if (sub_100525C58(v4, (const char *)objc_msgSend(CFSTR("RawSpeedToKValueTable"), "UTF8String"), (CFTypeRef *)&v19, 0xFFFFFFFFLL))
  {
    v5 = sub_1010BAA8C(v19);
    v6 = objc_msgSend(v3, "syncgetCopyRawSpeedToKValueBins");
    if ((objc_msgSend(v6, "isEqualToArray:", v5) & 1) == 0)
    {
      if (qword_10229FDC0 != -1)
        dispatch_once(&qword_10229FDC0, &stru_10219F6A0);
      v7 = qword_10229FDC8;
      if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Forcing a raw speed to kValue bins update.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDC0 != -1)
          dispatch_once(&qword_10229FDC0, &stru_10219F6A0);
        LOWORD(v18) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 2, "Forcing a raw speed to kValue bins update.", &v18, 2);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "CLMotionSyncStore::CLMotionSyncStore(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
      objc_msgSend(v3, "setRawSpeedToKValueBins:", v5);
    }

  }
  v18 = 0;
  v8 = sub_1001FD94C();
  if (sub_100525C58(v8, (const char *)objc_msgSend(CFSTR("StepCadenceToStrideLengthTable"), "UTF8String"), (CFTypeRef *)&v18, 0xFFFFFFFFLL))
  {
    v9 = sub_1010BAA8C(v18);
    v10 = objc_msgSend(v3, "syncgetCopyStepCadenceToStrideLengthBins");
    if ((objc_msgSend(v10, "isEqualToArray:", v9) & 1) == 0)
    {
      if (qword_10229FDC0 != -1)
        dispatch_once(&qword_10229FDC0, &stru_10219F6A0);
      v11 = qword_10229FDC8;
      if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Forcing a step cadence to stride length bins update.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDC0 != -1)
          dispatch_once(&qword_10229FDC0, &stru_10219F6A0);
        v17[0] = 0;
        LODWORD(v16) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 2, "Forcing a step cadence to stride length bins update.", v17, v16);
        v15 = (uint8_t *)v14;
        sub_100512490("Generic", 1, 0, 2, "CLMotionSyncStore::CLMotionSyncStore(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v14);
        if (v15 != buf)
          free(v15);
      }
      objc_msgSend(v3, "setStepCadenceToStrideLengthBins:", v9);
    }

  }
}

id sub_1010BAA8C(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v1 = objc_msgSend(objc_alloc((Class)NSKeyedUnarchiver), "initForReadingFromData:error:", a1, 0);
  v3 = objc_opt_class(CMPedometerBin, v2);
  v5 = objc_msgSend(v1, "decodeObjectOfClasses:forKey:", +[NSSet setWithObjects:](NSSet, "setWithObjects:", v3, objc_opt_class(NSArray, v4), 0), NSKeyedArchiveRootObjectKey);
  objc_msgSend(v1, "finishDecoding");

  return v5;
}

void sub_1010BAB78(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1010BACDC(uint64_t a1)
{
  *(_QWORD *)a1 = off_10219F6D0;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_1010BAD50(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10219F520;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v2 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_1010BACDC(a1);
}

uint64_t sub_1010BADB8()
{
  uint64_t result;

  sub_100197040();
  if (sub_100195F08())
    operator new();
  sub_100197040();
  result = sub_1000C4240();
  if ((_DWORD)result)
    operator new();
  return result;
}

void sub_1010BAE40()
{
  operator delete();
}

uint64_t sub_1010BAE78(uint64_t result)
{
  *(_BYTE *)(result + 108) = 1;
  return result;
}

_QWORD *sub_1010BAE84@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_1010BAEFC()
{
  return 1;
}

uint64_t sub_1010BAF04()
{
  return 1;
}

uint64_t sub_1010BAF0C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 109);
}

void sub_1010BAF14(_BYTE *a1, uint64_t a2, int *a3, int *a4)
{
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v14[2];
  __int16 v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;

  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_10219F6A0);
  v7 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEBUG))
  {
    v8 = *a3;
    v9 = *a4;
    *(_DWORD *)buf = 67109376;
    v18 = v8;
    v19 = 1024;
    v20 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Received CLDataProtectionManager_Type %d, data availability %d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_10219F6A0);
    v10 = *a3;
    v11 = *a4;
    v14[0] = 67109376;
    v14[1] = v10;
    v15 = 1024;
    v16 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 2, "Received CLDataProtectionManager_Type %d, data availability %d", v14, 14);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStore::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  if (!*a3)
  {
    if (*a4 == 1)
    {
      a1[109] = 1;
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 264))(a1);
    }
    else
    {
      a1[109] = 0;
    }
  }
}

uint64_t sub_1010BB124@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  double v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  const char *v17;
  size_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  const char *v22;
  size_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  const char *v27;
  size_t v28;
  _QWORD *v29;
  _QWORD *v30;
  id v31;
  const char *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  id v36;
  const char *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  const char *v41;
  size_t v42;
  _QWORD *v43;
  _QWORD *v44;
  const char *v45;
  size_t v46;
  _QWORD *v47;
  uint64_t v48;
  void *__p[2];
  unsigned __int8 v51;
  _QWORD v52[2];
  uint64_t v53;
  _QWORD v54[10];
  char v55;
  uint64_t v56;

  sub_100263E50((uint64_t)v52);
  sub_100263F7C(&v53, (uint64_t)"(", 1);
  v4 = sub_100263F7C(&v53, (uint64_t)"CalibrationVersion,", 19);
  if (objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("CalibrationVersion")))
    v5 = (uint64_t)objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("CalibrationVersion")), "intValue");
  else
    v5 = 0xFFFFFFFFLL;
  v6 = (_QWORD *)std::ostream::operator<<(v4, v5);
  sub_100263F7C(v6, (uint64_t)",", 1);
  v7 = sub_100263F7C(&v53, (uint64_t)"CalibrationUDID,", 16);
  sub_1010BB710(a1, __p);
  if ((v51 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v51 & 0x80u) == 0)
    v9 = v51;
  else
    v9 = (uint64_t)__p[1];
  v10 = sub_100263F7C(v7, (uint64_t)v8, v9);
  sub_100263F7C(v10, (uint64_t)",", 1);
  if ((char)v51 < 0)
    operator delete(__p[0]);
  v11 = sub_100263F7C(&v53, (uint64_t)"CalibrationTimestamp,", 21);
  v12 = *v11;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 8) = *(_DWORD *)((_BYTE *)v11 + *(_QWORD *)(*v11 - 24) + 8) & 0xFFFFFEFB | 4;
  *(uint64_t *)((char *)v11 + *(_QWORD *)(v12 - 24) + 16) = 2;
  if (objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("CalibrationTimestamp")))
    objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("CalibrationTimestamp")), "doubleValue");
  else
    v13 = 0.0;
  v14 = (_QWORD *)std::ostream::operator<<(v11, v13);
  sub_100263F7C(v14, (uint64_t)",", 1);
  v15 = sub_100263F7C(&v53, (uint64_t)"CMNatalimeterSetUserPal,", 24);
  v16 = CMNatalimeterSetUserPal;
  if (objc_msgSend(a1, "objectForKeyedSubscript:", CMNatalimeterSetUserPal))
    v17 = (const char *)objc_msgSend(objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", v16), "stringValue"), "UTF8String");
  else
    v17 = "na";
  v18 = strlen(v17);
  v19 = sub_100263F7C(v15, (uint64_t)v17, v18);
  sub_100263F7C(v19, (uint64_t)",", 1);
  v20 = sub_100263F7C(&v53, (uint64_t)"CMNatalimeterSetUserVo2max,", 27);
  v21 = CMNatalimeterSetUserVo2max;
  if (objc_msgSend(a1, "objectForKeyedSubscript:", CMNatalimeterSetUserVo2max))
    v22 = (const char *)objc_msgSend(objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", v21), "stringValue"), "UTF8String");
  else
    v22 = "na";
  v23 = strlen(v22);
  v24 = sub_100263F7C(v20, (uint64_t)v22, v23);
  sub_100263F7C(v24, (uint64_t)",", 1);
  v25 = sub_100263F7C(&v53, (uint64_t)"CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold,", 52);
  v26 = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
  if (objc_msgSend(a1, "objectForKeyedSubscript:", CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold))
    v27 = (const char *)objc_msgSend(objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", v26), "stringValue"), "UTF8String");
  else
    v27 = "na";
  v28 = strlen(v27);
  v29 = sub_100263F7C(v25, (uint64_t)v27, v28);
  sub_100263F7C(v29, (uint64_t)",", 1);
  v30 = sub_100263F7C(&v53, (uint64_t)"RawSpeedToKValueTable,", 22);
  v31 = objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("RawSpeedToKValueTable"));
  if (v31)
    v32 = "avail";
  else
    v32 = "na";
  if (v31)
    v33 = 5;
  else
    v33 = 2;
  v34 = sub_100263F7C(v30, (uint64_t)v32, v33);
  sub_100263F7C(v34, (uint64_t)",", 1);
  v35 = sub_100263F7C(&v53, (uint64_t)"StepCadenceToStrideLengthTable,", 31);
  v36 = objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("StepCadenceToStrideLengthTable"));
  if (v36)
    v37 = "avail";
  else
    v37 = "na";
  if (v36)
    v38 = 5;
  else
    v38 = 2;
  v39 = sub_100263F7C(v35, (uint64_t)v37, v38);
  sub_100263F7C(v39, (uint64_t)",", 1);
  v40 = sub_100263F7C(&v53, (uint64_t)"CalibrationResetRequested,", 26);
  if (objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("CalibrationResetRequested")))
    v41 = (const char *)objc_msgSend(objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("CalibrationResetRequested")), "stringValue"), "UTF8String");
  else
    v41 = "na";
  v42 = strlen(v41);
  v43 = sub_100263F7C(v40, (uint64_t)v41, v42);
  sub_100263F7C(v43, (uint64_t)",", 1);
  v44 = sub_100263F7C(&v53, (uint64_t)"HasSavedInitialMotionCalsToDisk,", 32);
  if (objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("HasSavedInitialMotionCalsToDisk")))
    v45 = (const char *)objc_msgSend(objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("HasSavedInitialMotionCalsToDisk")), "stringValue"), "UTF8String");
  else
    v45 = "na";
  v46 = strlen(v45);
  v47 = sub_100263F7C(v44, (uint64_t)v45, v46);
  sub_100263F7C(v47, (uint64_t)",", 1);
  sub_100263F7C(&v53, (uint64_t)")", 1);
  std::stringbuf::str(a2, v54);
  *(_QWORD *)((char *)v52
  v53 = v48;
  if (v55 < 0)
    operator delete((void *)v54[8]);
  std::streambuf::~streambuf(v54);
  return std::ios::~ios(&v56);
}

void sub_1010BB690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_1018B38B4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1010BB6C4(void *a1)
{
  if (objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("CalibrationVersion")))
    return (uint64_t)objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("CalibrationVersion")), "intValue");
  else
    return 0xFFFFFFFFLL;
}

_QWORD *sub_1010BB710@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;

  if (objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("CalibrationUDID")))
    v4 = (char *)objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("CalibrationUDID")), "UTF8String");
  else
    v4 = "unset";
  return sub_1015A2E04(a2, v4);
}

double sub_1010BB768(void *a1)
{
  double result;

  if (!objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("CalibrationTimestamp")))
    return 0.0;
  objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("CalibrationTimestamp")), "doubleValue");
  return result;
}

id sub_1010BB7B4(void *a1, uint64_t a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_10219F6A0);
  v4 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Setting the current Motion Cals version to, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_10219F6A0);
    v8[0] = 67109120;
    v8[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 1, "Setting the current Motion Cals version to, %d", v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "static void CLMotionSyncStore::setCurrentVersion(NSMutableDictionary *, int)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return objc_msgSend(a1, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2), CFSTR("CalibrationVersion"));
}

id sub_1010BB984(void *a1)
{
  id result;

  result = objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("CalibrationResetRequested"));
  if (result)
    return objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("CalibrationResetRequested")), "BOOLValue");
  return result;
}

uint64_t sub_1010BB9CC(int a1, int a2)
{
  _BOOL4 v3;

  v3 = a1 == 2 && a2 > 1;
  return a1 > 2 || v3;
}

BOOL sub_1010BB9E8(void *a1)
{
  return !objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("CalibrationUDID"))
      || objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("HasSavedInitialMotionCalsToDisk")) != 0;
}

id sub_1010BBA34(void *a1)
{
  id result;

  if (objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("HasSavedInitialMotionCalsToDisk")))
    objc_msgSend(a1, "removeObjectForKey:", CFSTR("HasSavedInitialMotionCalsToDisk"));
  if (objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("CalibrationResetRequested")))
    objc_msgSend(a1, "removeObjectForKey:", CFSTR("CalibrationResetRequested"));
  result = objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("StrideCalibrationDataBins"));
  if (result)
  {
    objc_msgSend(a1, "setObject:forKeyedSubscript:", +[CMPedometerTable convertToCMPedometerBins:](CMPedometerTableRawSpeedToKValue, "convertToCMPedometerBins:", objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("StrideCalibrationDataBins"))), CFSTR("RawSpeedToKValueTable"));
    return objc_msgSend(a1, "removeObjectForKey:", CFSTR("StrideCalibrationDataBins"));
  }
  return result;
}

uint64_t sub_1010BBB04(void *a1, void *a2)
{
  NSArray *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v13;
  float v15;
  float v16;
  float v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  _QWORD v28[3];

  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v28[0] = CMNatalimeterSetUserPal;
  v28[1] = CMNatalimeterSetUserVo2max;
  v28[2] = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
  v4 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v28, 3, 0);
  v5 = -[NSArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v24;
LABEL_3:
    v8 = 0;
    while (1)
    {
      if (*(_QWORD *)v24 != v7)
        objc_enumerationMutation(v4);
      v9 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * v8);
      v10 = (unint64_t)objc_msgSend(a1, "objectForKeyedSubscript:", v9);
      v11 = (unint64_t)objc_msgSend(a2, "objectForKeyedSubscript:", v9);
      if (!v10 && v11 != 0)
        return 0;
      v13 = (void *)v11;
      if (v10 && v11 == 0)
        return 0;
      if (v10 | v11)
      {
        objc_msgSend((id)v10, "floatValue");
        v16 = v15;
        objc_msgSend(v13, "floatValue");
        if (vabds_f32(v16, v17) >= 0.000001)
          return 0;
      }
      if (v6 == (id)++v8)
      {
        v6 = -[NSArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
        if (v6)
          goto LABEL_3;
        break;
      }
    }
  }
  v18 = (unint64_t)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("RawSpeedToKValueTable"));
  v19 = (unint64_t)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("RawSpeedToKValueTable"));
  if (!v18 && v19 || v18 && !v19)
    return 0;
  if (!(v18 | v19) || (result = (uint64_t)objc_msgSend((id)v18, "isEqualToArray:", v19), (_DWORD)result))
  {
    v21 = (unint64_t)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("StepCadenceToStrideLengthTable"));
    v22 = (unint64_t)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("StepCadenceToStrideLengthTable"));
    if (!v21 && v22 || v21 && !v22)
      return 0;
    if (v21 | v22)
      return (uint64_t)objc_msgSend((id)v21, "isEqualToArray:", v22);
    else
      return 1;
  }
  return result;
}

void sub_1010BBD4C(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1010BBD78(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_1010BBDA4(id a1)
{
  qword_10229FDC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MotionSync");
}

uint64_t sub_1010BBDD0()
{
  sub_1015A2E04(qword_10230C430, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230C430, (void *)&_mh_execute_header);
}

void sub_1010BBEB8(id a1)
{
  qword_10230C460 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLLocationAwarenessProviderSilo"));
}

uint64_t sub_1010BBF6C(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1010BC810;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230C470 != -1)
    dispatch_once(&qword_10230C470, block);
  return qword_10230C478;
}

void sub_1010BC0CC()
{
  operator new();
}

void sub_1010BC178(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_1010BC1B4(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_10219F978;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_1010BC4CC(uint64_t a1, int a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  if (*(unsigned __int8 *)(a1 + 152) != a2)
  {
    *(_BYTE *)(a1 + 152) = a2;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10219F948);
    v3 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(unsigned __int8 *)(a1 + 152);
      v5[0] = 68289282;
      v5[1] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 1026;
      v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Awareness Settled state changed\", \"isSettled\":%{public}hhd}", (uint8_t *)v5, 0x18u);
    }
    sub_100139A0C(a1);
  }
}

uint64_t sub_1010BC5CC(BOOL *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  v4 = sub_1001FD98C(a2, "SettledLatencyBudget", a1);
  v5 = sub_1001FD98C(a2, "UnsettledLatencyBudget", a1 + 24);
  v6 = sub_1001FD98C(a2, "SettledRetryRate", a1 + 8);
  v7 = sub_1001FD98C(a2, "UnsettledRetryRate", a1 + 32);
  v8 = sub_1001E4874(a2, "SettledQueryALS", a1 + 16);
  return sub_1001E4874(a2, "UnsettledQueryALS", a1 + 40) | v8 | v7 | v6 | v5 | v4;
}

BOOL sub_1010BC6BC(double *a1, void *a2)
{
  double v4;
  double v5;
  int v6;
  double v7;
  double v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  int v18;

  v4 = *a1;
  v5 = a1[1];
  v6 = *((unsigned __int8 *)a1 + 16);
  v8 = a1[3];
  v7 = a1[4];
  v9 = *((unsigned __int8 *)a1 + 40);
  objc_msgSend(a2, "doubleForKey:defaultValue:", CFSTR("SettledLatencyBudget"), *a1);
  *(_QWORD *)a1 = v10;
  objc_msgSend(a2, "doubleForKey:defaultValue:", CFSTR("UnsettledLatencyBudget"), a1[3]);
  *((_QWORD *)a1 + 3) = v11;
  objc_msgSend(a2, "doubleForKey:defaultValue:", CFSTR("SettledRetryRate"), a1[1]);
  *((_QWORD *)a1 + 1) = v12;
  objc_msgSend(a2, "doubleForKey:defaultValue:", CFSTR("UnsettledRetryRate"), a1[4]);
  *((_QWORD *)a1 + 4) = v13;
  if (*((_BYTE *)a1 + 16))
    v14 = 1.0;
  else
    v14 = 0.0;
  objc_msgSend(a2, "doubleForKey:defaultValue:", CFSTR("SettledQueryALS"), v14);
  *((_BYTE *)a1 + 16) = v15 != 0.0;
  if (*((_BYTE *)a1 + 40))
    v16 = 1.0;
  else
    v16 = 0.0;
  objc_msgSend(a2, "doubleForKey:defaultValue:", CFSTR("UnsettledQueryALS"), v16);
  v18 = v17 != 0.0;
  *((_BYTE *)a1 + 40) = v18;
  return *a1 != v4 || a1[1] != v5 || *((unsigned __int8 *)a1 + 16) != v6 || a1[3] != v8 || a1[4] != v7 || v9 != v18;
}

void sub_1010BC810()
{
  operator new();
}

void sub_1010BC858()
{
  operator delete();
}

void sub_1010BC87C(uint64_t a1, void *a2)
{
  uint64_t v3;
  _QWORD v4[5];
  void *__p;
  char v6;

  v3 = sub_1010BCD24(a1, "Awareness", a2);
  *(_QWORD *)v3 = off_10219F7F8;
  *(int64x2_t *)(v3 + 112) = vdupq_n_s64(0x405E000000000000uLL);
  *(int64x2_t *)(v3 + 128) = vdupq_n_s64(0x7FF0000000000000uLL);
  *(_BYTE *)(v3 + 144) = 0;
  *(_WORD *)(v3 + 152) = 0;
  *(int64x2_t *)(v3 + 160) = vdupq_n_s64(0xFFF0000000000000);
  *(_OWORD *)(v3 + 176) = xmmword_101C3F670;
  sub_1015A2E04(&__p, "Awareness");
  sub_100986564(a1 + 192, &__p, sub_1010BCDC0, a1, *(_QWORD *)(a1 + 40), 1, 1.79769313e308, 1.79769313e308, 0.9);
  if (v6 < 0)
    operator delete(__p);
  *(_WORD *)(a1 + 248) = sub_10019CFA0() == 1;
  *(_QWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_WORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 304) = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "newTimer");
  *(_DWORD *)(a1 + 312) = 48;
  *(_QWORD *)(a1 + 320) = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:forClient:", CFSTR("CLWifiLocationProvider"), CFSTR("CLLocationAwarenessProvider"));
  *(_QWORD *)(a1 + 328) = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:forClient:", CFSTR("CLRoutineMonitor"), CFSTR("CLLocationAwarenessProvider"));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1010BCF80;
  v4[3] = &unk_10212ECA0;
  v4[4] = a1;
  objc_msgSend(*(id *)(a1 + 304), "setHandler:", v4);
  sub_1001B7DEC();
}

void sub_1010BCC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  sub_100261F44((uint64_t)&__p);
  v23 = v19[37];
  v19[37] = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = v19[35];
  v19[35] = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = v19[34];
  v19[34] = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = v19[33];
  v19[33] = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = *v21;
  *v21 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  sub_1009865B8(v20);
  sub_1010BD41C((uint64_t)v19);
  _Unwind_Resume(a1);
}

uint64_t sub_1010BCD24(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_10219F9A0;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_1010BCDA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1010BCDC0(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  os_activity_scope_state_s state;
  char v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;

  CLProfilingIdentify("CLLocationAwarenessProvider::onWakeTimer");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10219F928);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v6 = 1;
    v3 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationAwarenessProvider::onWakeTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219F928);
    v4 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2082;
      v12 = "activity";
      v13 = 2050;
      v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationAwarenessProvider::onWakeTimer\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v6 = 0;
  }
  sub_1010BE764(a2);
  if (v6)
    os_activity_scope_leave(&state);
}

void sub_1010BCF60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1010BCF80(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10219F948);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    v4 = 2082;
    v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Awareness Active location request has timed out\"}", (uint8_t *)v3, 0x12u);
  }
  sub_100139E48(v1);
  sub_100139A0C(v1);
}

void sub_1010BD068(uint64_t a1, int *a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLLocationAwarenessProvider::onWifiNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10219F928);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationAwarenessProvider::onWifiNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219F928);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationAwarenessProvider::onWifiNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1010BEBE0(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1010BD220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1010BD244(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLLocationAwarenessProvider::onClientManagerNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10219F928);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationAwarenessProvider::onClientManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219F928);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationAwarenessProvider::onClientManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1010BE970((_BYTE *)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1010BD3FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010BD41C(uint64_t a1)
{
  *(_QWORD *)a1 = off_10219F9A0;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_1010BD490(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_10219F7F8;

  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  objc_msgSend(*(id *)(a1 + 304), "invalidate");

  v2 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_1009865B8(a1 + 192);
  return sub_1010BD41C(a1);
}

void sub_1010BD56C(uint64_t a1)
{
  sub_1010BD490(a1);
  operator delete();
}

id sub_1010BD590(uint64_t a1)
{
  NSObject *v2;
  id result;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  uint64_t v8;

  sub_1010BD690(a1);
  sub_10016E3C4(a1 + 192);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10219F948);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289282;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    v7 = 2050;
    v8 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Awareness shutting down provider\", \"self\":\"%{public}p\"}", (uint8_t *)v4, 0x1Cu);
  }
  result = objc_msgSend(*(id *)(a1 + 304), "invalidate");
  *(_BYTE *)(a1 + 108) = 1;
  return result;
}

uint64_t sub_1010BD690(uint64_t a1)
{
  int v3;

  sub_100139E48(a1);
  *(int64x2_t *)(a1 + 160) = vdupq_n_s64(0xFFF0000000000000);
  if (*(_DWORD *)(a1 + 312) != 48)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 264) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8));
    *(_DWORD *)(a1 + 312) = 48;
  }
  sub_100139DB4(a1, 0);
  sub_100139F7C((double *)a1, INFINITY);
  v3 = 0;
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)a1 + 120))(a1, &v3);
}

BOOL sub_1010BD718(uint64_t a1, int a2, int *a3, double *a4)
{
  double v4;
  NSObject *v7;
  double v8;
  _BOOL8 result;
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  NSObject *v14;
  NSObject *v15;
  double v16;
  uint64_t v17;
  double v18;
  int v19;
  uint8_t buf[8];
  __int16 v21;
  const char *v22;
  __int16 v23;
  double v24;

  v19 = a2;
  if (*a4 >= a4[3])
    v4 = a4[3];
  else
    v4 = *a4;
  if (v4 <= 0.0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10219F948);
    v10 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v21 = 2082;
      v22 = "";
      v23 = 2050;
      v24 = v4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Awareness Attempting to set a non-positive latency budget\", \"budget\":\"%{public}f\"}", buf, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10219F948);
    }
    v11 = qword_1022A01D8;
    result = os_signpost_enabled((os_log_t)qword_1022A01D8);
    if (result)
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v21 = 2082;
      v22 = "";
      v23 = 2050;
      v24 = v4;
      v12 = "#Awareness Attempting to set a non-positive latency budget";
      v13 = "{\"msg%{public}.0s\":\"#Awareness Attempting to set a non-positive latency budget\", \"budget\":\"%{public}f\"}";
      v14 = v11;
LABEL_25:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v12, v13, buf, 0x1Cu);
      return 0;
    }
  }
  else
  {
    if ((sub_1010BDAB8(a1, a2, a3, (__int128 *)a4) & 1) != 0)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10219F948);
      v7 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        *(_QWORD *)buf = &v19;
        v8 = COERCE_DOUBLE(objc_msgSend(objc_msgSend(sub_1000823D0((uint64_t **)(a1 + 80), &v19, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[8], "description"), "UTF8String"));
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        v21 = 2082;
        v22 = "";
        v23 = 2082;
        v24 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Awareness New registration\", \"client\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      sub_100139A0C(a1);
      return 1;
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10219F948);
    v15 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_QWORD *)&v16 = *a3;
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v21 = 2082;
      v22 = "";
      v23 = 2050;
      v24 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Awareness failed to register\", \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld}", buf, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10219F948);
    }
    v17 = qword_1022A01D8;
    result = os_signpost_enabled((os_log_t)qword_1022A01D8);
    if (result)
    {
      *(_QWORD *)&v18 = *a3;
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v21 = 2082;
      v22 = "";
      v23 = 2050;
      v24 = v18;
      v12 = "#Awareness failed to register";
      v13 = "{\"msg%{public}.0s\":\"#Awareness failed to register\", \"notification\":%{public, location:CLLocationProvid"
            "er_Type::Notification}lld}";
      v14 = v17;
      goto LABEL_25;
    }
  }
  return result;
}

uint64_t sub_1010BDAB8(uint64_t a1, int a2, int *a3, __int128 *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  uint64_t **v32;
  uint64_t **v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t **v37;
  __int128 v38;
  __int128 v39;
  _QWORD *v45;
  const char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _BYTE v51[12];
  __int16 v52;
  int v53;
  _BYTE buf[12];
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;

  v50 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v51 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v49 = v26;
        v36 = *(_QWORD *)(v26 + 56);
        *(_QWORD *)buf = &v50;
        v37 = sub_10008DF48((uint64_t **)(v26 + 40), &v50, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        v38 = *a4;
        v39 = a4[1];
        *(_OWORD *)(v37 + 9) = a4[2];
        *(_OWORD *)(v37 + 7) = v39;
        *(_OWORD *)(v37 + 5) = v38;
        *(_DWORD *)buf = 0xFFFF;
        v55 = 0;
        *(_QWORD *)&buf[4] = 0;
        v56 = xmmword_101BAFC90;
        __asm { FMOV            V0.2D, #-1.0 }
        v57 = _Q0;
        v58 = _Q0;
        v59 = _Q0;
        v62 = 0;
        v63 = 0;
        v61 = 0xBFF0000000000000;
        v60 = 0;
        v64 = 0;
        v65 = 0xBFF0000000000000;
        v66 = 0x7FFFFFFF;
        v68 = 0;
        v69 = 0;
        v67 = 0;
        v70 = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_1010BFC6C();
        }
        if (v36)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v49 = a1 + 64;
        v30 = byte_1022FD1F8;
        HIDWORD(v48) = v17;
        *(_QWORD *)buf = (char *)&v48 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v48 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v48) = *a3;
        *(_QWORD *)buf = (char *)&v48 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v48 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        HIDWORD(v48) = *a3;
        *(_QWORD *)buf = (char *)&v48 + 4;
        v32 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v48 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v50;
        v33 = sub_10008DF48(v32 + 5, &v50, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        v34 = *a4;
        v35 = a4[1];
        *(_OWORD *)(v33 + 9) = a4[2];
        *(_OWORD *)(v33 + 7) = v35;
        *(_OWORD *)(v33 + 5) = v34;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v51 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10219F928);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    LOWORD(v55) = 1026;
    *(_DWORD *)((char *)&v55 + 2) = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219F928);
    v45 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v45 = (_QWORD *)*v45;
    *(_DWORD *)v51 = 136446466;
    *(_QWORD *)&v51[4] = v45;
    v52 = 1026;
    v53 = a2;
    LODWORD(v48) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v51,
      v48);
    v47 = (char *)v46;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLLocationAwarenessProvider_Type::Notification, NotificationData_T = CLLocationAwarenessProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationAwarenessProvider_Type::RegInfo]", "%s\n", v46);
    if (v47 != buf)
      free(v47);
    return 0;
  }
  return result;
}

BOOL sub_1010BDF84(uint64_t a1, int a2, int *a3)
{
  _BOOL8 v5;
  NSObject *v6;
  id v7;
  NSObject *v8;
  unint64_t v9;
  NSObject *v10;
  unint64_t v11;
  int v13;
  uint8_t buf[8];
  __int16 v15;
  const char *v16;
  __int16 v17;
  unint64_t v18;

  v13 = a2;
  v5 = sub_1010BE1F0((char *)a1, a2, a3);
  if (v5)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10219F948);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      *(_QWORD *)buf = &v13;
      v7 = objc_msgSend(objc_msgSend(sub_1000823D0((uint64_t **)(a1 + 80), &v13, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[8], "description"), "UTF8String");
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = (unint64_t)v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Awareness Removed registration\", \"client\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    sub_100139A0C(a1);
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10219F948);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v9 = *a3;
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2050;
      v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Awareness failed to unregister\", \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld}", buf, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10219F948);
    }
    v10 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v11 = *a3;
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2050;
      v18 = v11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Awareness failed to unregister", "{\"msg%{public}.0s\":\"#Awareness failed to unregister\", \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld}", buf, 0x1Cu);
    }
  }
  return v5;
}

BOOL sub_1010BE1F0(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000B072C((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10219F928);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10219F928);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLLocationAwarenessProvider_Type::Notification, NotificationData_T = CLLocationAwarenessProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationAwarenessProvider_Type::RegInfo]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_1010BE578(uint64_t result)
{
  uint64_t v1;

  if (!*(_BYTE *)(result + 289))
  {
    v1 = result;
    *(_BYTE *)(result + 289) = 1;
    objc_msgSend(*(id *)(*(_QWORD *)(result + 272) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(result + 272) + 8), 1, 0);
    objc_msgSend(*(id *)(v1 + 304), "setNextFireDelay:", 10.0);
    operator new();
  }
  return result;
}

void sub_1010BE710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void sub_1010BE764(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  int v5;
  int v6;
  __int16 v7;
  const char *v8;

  v5 = 0;
  if (sub_1001B7864(a1, &v5, 1))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10219F948);
    v2 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v5 = 68289026;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Awareness Awakened\"}", (uint8_t *)&v5, 0x12u);
    }
    sub_100139A0C(a1);
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10219F948);
    v3 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v5 = 68289026;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Awareness #warning Awakened with no clients\"}", (uint8_t *)&v5, 0x12u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10219F948);
    }
    v4 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v5 = 68289026;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Awareness #warning Awakened with no clients", "{\"msg%{public}.0s\":\"#Awareness #warning Awakened with no clients\"}", (uint8_t *)&v5, 0x12u);
    }
  }
}

void sub_1010BE970(_BYTE *a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v5;
  int v6;
  NSObject *v8;
  int v9;
  NSObject *v10;
  int v11;
  int v12;
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;

  if (*a3 == 4)
  {
    a1[248] = *(_DWORD *)(a4 + 188) == 1;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10219F948);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = a1[248];
      v12 = 68289282;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 1026;
      v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Awareness New big switch state\", \"enabled\":%{public}d}", (uint8_t *)&v12, 0x18u);
    }
    if (!a1[248])
    {
      v12 = 0;
      (*(void (**)(_BYTE *, int *))(*(_QWORD *)a1 + 120))(a1, &v12);
    }
    sub_100139A0C((uint64_t)a1);
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10219F948);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v9 = *a3;
      v12 = 68289282;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 1026;
      v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Awareness Unexpected client manager notification\", \"notification\":%{public}d}", (uint8_t *)&v12, 0x18u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10219F948);
    }
    v10 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v11 = *a3;
      v12 = 68289282;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 1026;
      v17 = v11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Awareness Unexpected client manager notification", "{\"msg%{public}.0s\":\"#Awareness Unexpected client manager notification\", \"notification\":%{public}d}", (uint8_t *)&v12, 0x18u);
    }
  }
}

void sub_1010BEBE0(uint64_t a1, uint64_t a2, int *a3, _BYTE *a4)
{
  NSObject *v6;
  int v7;
  NSObject *v9;
  int v10;
  NSObject *v11;
  int v12;
  int v13;
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;

  if (*a3 == 1)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10219F948);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *a4;
      v13 = 68289282;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 1026;
      v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Awareness Wifi power state changed\", \"powered\":%{public}hhd}", (uint8_t *)&v13, 0x18u);
    }
    *(_BYTE *)(a1 + 249) = *a4;
    sub_100139A0C(a1);
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10219F948);
    v9 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v10 = *a3;
      v13 = 68289282;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 1026;
      v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Awareness Unexpected wifi notification\", \"notification\":%{public}d}", (uint8_t *)&v13, 0x18u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10219F948);
    }
    v11 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v12 = *a3;
      v13 = 68289282;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 1026;
      v18 = v12;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Awareness Unexpected wifi notification", "{\"msg%{public}.0s\":\"#Awareness Unexpected wifi notification\", \"notification\":%{public}d}", (uint8_t *)&v13, 0x18u);
    }
  }
}

void sub_1010BEE24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10219F928);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_10219F928);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::removeClient(int) [Notification_T = CLLocationAwarenessProvider_Type::Notification, NotificationData_T = CLLocationAwarenessProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationAwarenessProvider_Type::RegInfo]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_1010BF098(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7;
  int v9;
  int v10;

  v7 = sub_1010BFF80(a4, a2);
  if (v7)
  {
    v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(_QWORD *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_1010BF118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FD200);
}

BOOL sub_1010BF12C(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219F928);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10219F928);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::clientRegistered(int, const Notification_T &) [Notification_T = CLLocationAwarenessProvider_Type::Notification, NotificationData_T = CLLocationAwarenessProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationAwarenessProvider_Type::RegInfo]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1010BF3AC(uint64_t a1, int *a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(_OWORD **)(v7 + 64);
  if (!v11)
    return 0;
  v12 = v11[1];
  *a3 = *v11;
  a3[1] = v12;
  v13 = v11[2];
  v14 = v11[3];
  v15 = v11[5];
  a3[4] = v11[4];
  a3[5] = v15;
  a3[2] = v13;
  a3[3] = v14;
  v16 = v11[6];
  v17 = v11[7];
  v18 = v11[8];
  *(_OWORD *)((char *)a3 + 140) = *(_OWORD *)((char *)v11 + 140);
  a3[7] = v17;
  a3[8] = v18;
  a3[6] = v16;
  return 1;
}

uint64_t sub_1010BF434(uint64_t a1, int *a2, _OWORD *a3)
{
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int v16;
  __int128 v17;
  int *v18;

  v6 = (char *)operator new(0xB8uLL);
  v7 = a3[7];
  *(_OWORD *)(v6 + 120) = a3[6];
  *(_OWORD *)(v6 + 136) = v7;
  *(_OWORD *)(v6 + 152) = a3[8];
  *(_OWORD *)(v6 + 164) = *(_OWORD *)((char *)a3 + 140);
  v8 = a3[3];
  *(_OWORD *)(v6 + 56) = a3[2];
  *(_OWORD *)(v6 + 72) = v8;
  v9 = a3[5];
  *(_OWORD *)(v6 + 88) = a3[4];
  *(_OWORD *)(v6 + 104) = v9;
  v10 = a3[1];
  *(_OWORD *)(v6 + 24) = *a3;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_10219FAA0;
  *((_QWORD *)v6 + 1) = 0;
  *(_OWORD *)(v6 + 40) = v10;
  *(_QWORD *)&v17 = v6 + 24;
  *((_QWORD *)&v17 + 1) = v6;
  v16 = *a2;
  v18 = &v16;
  v11 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v16, (uint64_t)&unk_101B9EB60, &v18);
  sub_1002B7674((uint64_t)(v11 + 8), &v17);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return 1;
}

void sub_1010BF540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010BF554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v10 = 0xFFFF;
  v11 = 0;
  v12 = 0;
  v13 = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  v14 = _Q0;
  v15 = _Q0;
  v16 = _Q0;
  v17 = 0;
  v20 = 0;
  v18 = 0xBFF0000000000000;
  v19 = 0;
  v21 = 0;
  v22 = 0xBFF0000000000000;
  v23 = 0x7FFFFFFF;
  v26 = 0;
  v24 = 0;
  v25 = 0;
  v27 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, &v10, a3, a4, 0);
}

void sub_1010BF5E4(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219F928);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10219F928);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::listClients() [Notification_T = CLLocationAwarenessProvider_Type::Notification, NotificationData_T = CLLocationAwarenessProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationAwarenessProvider_Type::RegInfo]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219F928);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10219F928);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::listClients() [Notification_T = CLLocationAwarenessProvider_Type::Notification, NotificationData_T = CLLocationAwarenessProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationAwarenessProvider_Type::RegInfo]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10219F928);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10219F928);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::listClients() [Notification_T = CLLocationAwarenessProvider_Type::Notification, NotificationData_T = CLLocationAwarenessProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationAwarenessProvider_Type::RegInfo]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_1010BFB90(uint64_t a1)
{
  sub_1010BFC0C(a1);
  operator delete();
}

void sub_1010BFBB4(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1010BFBE0(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_1010BFC0C(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_10219F978;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_1010BFC6C()
{
  operator new();
}

uint64_t sub_1010BFD24(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

void sub_1010BFD44(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_1010BFD70(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  *(_DWORD *)a1 = *a2;
  sub_1010BFDCC(a1 + 8, a3);
  v5 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a3 + 40);
  return a1;
}

uint64_t sub_1010BFDCC(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  sub_1010BFE20((_OWORD *)a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1010BFE08(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_1010BFE20(_OWORD *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t *)result + 1;
    do
    {
      result = sub_1010BFEA4(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_OWORD *sub_1010BFEA4(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  __int128 v9;
  uint64_t v11;
  uint64_t *v12;

  v6 = sub_10034258C(a1, a2, &v12, &v11, a3);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x58uLL);
    v9 = *(_OWORD *)(a4 + 16);
    v7[2] = *(_OWORD *)a4;
    v7[3] = v9;
    v7[4] = *(_OWORD *)(a4 + 32);
    *((_QWORD *)v7 + 10) = *(_QWORD *)(a4 + 48);
    sub_1000145B0(a1, (uint64_t)v12, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_1010BFF38(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10219FAA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1010BFF4C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10219FAA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

id sub_1010BFF80(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_1010BFFCC(a1);
  else
    return 0;
}

id sub_1010BFFCC(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10219FA70);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C3F83DLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10219FA70);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10219FA70);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C3F83DLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10219FA70);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLLocationAwarenessProvider_Type::RegInfo, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_1010C0378()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_1010C0414(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_1010C042C()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_1010C04B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

void sub_1010C0A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void sub_1010C0D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  sub_100114750((uint64_t)&a30);
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

id sub_1010C0D7C(uint64_t a1)
{
  id v1;
  _QWORD v3[4];
  _BYTE v4[120];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768;
  v3[2] = sub_1010C17C8;
  v3[3] = &unk_10219FB00;
  sub_1004E5FB0((uint64_t)v4, a1);
  v1 = objc_msgSend(v3, "copy");
  sub_100114750((uint64_t)v4);
  return v1;
}

void sub_1010C0DF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100114750(v1);
  _Unwind_Resume(a1);
}

void sub_1010C0FE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_100114750((uint64_t)va);
  sub_100114750((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1010C1758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_100114750((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1010C179C(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_1010C17C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004E5FB0(a2, a1 + 32);
}

uint64_t sub_1010C17D4(uint64_t a1, uint64_t a2)
{
  return sub_1004E5FB0(a1 + 32, a2 + 32);
}

uint64_t sub_1010C17E0(uint64_t a1)
{
  return sub_100114750(a1 + 32);
}

void sub_1010C188C(id a1)
{
  qword_10230C480 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CMHealthColdStorageCompanionSyncServiceSilo"));
}

void sub_1010C1940(id a1)
{
  sub_100197040();
  if (sub_1000C4240())
    byte_10230C490 = 1;
}

void sub_1010C21E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23)
{
  uint64_t i;

  sub_1002A3684(&a21);
  for (i = 48; i != -16; i -= 16)
    sub_100261F44((uint64_t)&a23 + i);
  _Unwind_Resume(a1);
}

id sub_1010C2298(uint64_t a1)
{
  id result;
  void *v2;

  result = objc_loadWeak((id *)(a1 + 32));
  if (result)
  {
    v2 = result;
    objc_msgSend(result, "sendAnalytics");
    return objc_msgSend(v2, "resetAnalytics");
  }
  return result;
}

void sub_1010C263C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010C2650(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (qword_10229FF60 != -1)
    dispatch_once(&qword_10229FF60, &stru_10219FB90);
  v2 = qword_10229FF68;
  if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Aggregating HRRecovery db records", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_10219FB90);
    v10[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 0, "Aggregating HRRecovery db records", v10, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "-[CMHealthColdStorageCompanionSyncService setUpAggregationOnTimer]_block_invoke", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_1004E84D8(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
  sub_1004E8A4C(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48));
  sub_1004E8FC0(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 72));
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_10219FBB0);
  v3 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Aggregating ElevationGrade db records", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10219FBB0);
    v10[0] = 0;
    LODWORD(v9) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "Aggregating ElevationGrade db records", v10, v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "-[CMHealthColdStorageCompanionSyncService setUpAggregationOnTimer]_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return sub_1006116B4(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 120));
}

uint64_t sub_1010C40F0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void sub_1010C4260(id a1)
{
  qword_10229FFA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HealthColdStorage");
}

void sub_1010C428C(id a1)
{
  qword_10229FF68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HRRecovery");
}

void sub_1010C42B8(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_1010C4388(id a1)
{
  qword_10230C4B8 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLFitnessMachineNotifierSilo"));
}

uint64_t sub_1010C443C(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1010C4CE8;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230C4D8 != -1)
    dispatch_once(&qword_10230C4D8, block);
  return qword_102311C98;
}

__n128 sub_1010C4620(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __n128 result;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  if (*(double *)(a2 + 112) != 1.79769313e308 && *(double *)(a2 + 120) != 1.79769313e308)
  {
    *(_QWORD *)&v21 = sub_100BF9554(a2);
    *((_QWORD *)&v21 + 1) = v4;
    sub_100BF956C((uint64_t *)(a1 + 304), (double *)&v21);
    *(_QWORD *)(a2 + 112) = v5;
  }
  if (*(double *)(a2 + 64) != 1.79769313e308 && *(double *)(a2 + 72) != 1.79769313e308)
  {
    *(_QWORD *)&v21 = sub_100BF955C(a2);
    *((_QWORD *)&v21 + 1) = v6;
    sub_100BF964C(a1 + 304, (double *)&v21);
    *(_QWORD *)(a2 + 64) = v7;
  }
  if (*(double *)(a2 + 88) != 1.79769313e308 && *(double *)(a2 + 96) != 1.79769313e308)
  {
    *(_QWORD *)&v21 = sub_100BF9564(a2);
    *((_QWORD *)&v21 + 1) = v8;
    sub_100BF9654(a1 + 304, (double *)&v21);
    *(_QWORD *)(a2 + 88) = v9;
  }
  v10 = *(_OWORD *)(a2 + 144);
  v29 = *(_OWORD *)(a2 + 128);
  v30 = v10;
  v31 = *(_QWORD *)(a2 + 160);
  v11 = *(_OWORD *)(a2 + 80);
  v25 = *(_OWORD *)(a2 + 64);
  v26 = v11;
  v12 = *(_OWORD *)(a2 + 112);
  v27 = *(_OWORD *)(a2 + 96);
  v28 = v12;
  v13 = *(_OWORD *)(a2 + 16);
  v21 = *(_OWORD *)a2;
  v22 = v13;
  v14 = *(__n128 *)(a2 + 48);
  v23 = *(_OWORD *)(a2 + 32);
  v24 = v14;
  sub_1010C4F10((uint64_t)&v21, a1 + 112);
  if (BYTE4(v31))
  {
    v20 = 0;
    (*(void (**)(uint64_t, int *, __int128 *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v20, &v21, 0, 0xFFFFFFFFLL, 0);
  }
  v15 = v30;
  *(_OWORD *)(a1 + 240) = v29;
  *(_OWORD *)(a1 + 256) = v15;
  *(_QWORD *)(a1 + 272) = v31;
  v16 = v26;
  *(_OWORD *)(a1 + 176) = v25;
  *(_OWORD *)(a1 + 192) = v16;
  v17 = v28;
  *(_OWORD *)(a1 + 208) = v27;
  *(_OWORD *)(a1 + 224) = v17;
  v18 = v22;
  *(_OWORD *)(a1 + 112) = v21;
  *(_OWORD *)(a1 + 128) = v18;
  result = v24;
  *(_OWORD *)(a1 + 144) = v23;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

void sub_1010C4800(id a1)
{
  sub_100197040();
  if (sub_1000C4240())
  {
    sub_100197040();
    if (sub_100195F08())
      byte_10230C4C8 = 1;
  }
}

void sub_1010C4834(_QWORD *a1, void *a2)
{
  uint64_t v3;

  v3 = sub_1010C4978((uint64_t)a1, "CLFitnessMachineNotifier", a2);
  *(_QWORD *)v3 = off_10219FC20;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 272) = 0u;
  sub_1011A1EAC((_QWORD *)(v3 + 288), 0);
  a1[38] = a1 + 38;
  a1[39] = a1 + 38;
  a1[40] = 0;
  a1[41] = a1 + 41;
  a1[42] = a1 + 41;
  a1[43] = 0;
  a1[44] = a1 + 44;
  a1[45] = a1 + 44;
  a1[46] = 0;
  sub_1006CB5B4();
}

void sub_1010C4930(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;

  sub_1010C4C3C(v3);
  sub_100261F44(v2);
  v5 = *(_QWORD *)(v1 + 280);
  *(_QWORD *)(v1 + 280) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_1010C4C74(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010C4978(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_10219FDA8;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_1010C49F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1010C4A14(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLFitnessMachineNotifier::onMotionStateMediatorNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10219FD78);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFitnessMachineNotifier::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219FD78);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFitnessMachineNotifier::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  if (*a2 == 2 && !*(_QWORD *)(a3 + 16))
  {
    *(_QWORD *)(a4 + 244) = 0;
    v9 = a4 + 244;
    *(_OWORD *)(v9 - 68) = 0u;
    *(_OWORD *)(v9 - 84) = 0u;
    *(_OWORD *)(v9 - 100) = 0u;
    *(_OWORD *)(v9 - 116) = 0u;
    *(_OWORD *)(v9 - 132) = 0u;
    *(_QWORD *)(v9 - 48) = 0;
    *(_QWORD *)(v9 - 40) = 0;
    *(_QWORD *)(v9 - 24) = 0;
    *(_QWORD *)(v9 - 16) = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = 0x200000000;
    *(_BYTE *)(v9 + 32) = 1;
    *(_BYTE *)(v9 + 35) = 0;
    *(_WORD *)(v9 + 33) = 0;
    *(_DWORD *)(v9 - 52) = -1;
    *(_DWORD *)(v9 - 32) = 0;
    *(_DWORD *)(v9 - 28) = -1;
    *(_DWORD *)(v9 - 8) = 0;
    *(_DWORD *)(v9 - 4) = -1;
  }
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1010C4C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1010C4C3C(_QWORD *a1)
{
  sub_1000F34E0(a1 + 6);
  sub_1000F34E0(a1 + 3);
  sub_1000F34E0(a1);
  return a1;
}

uint64_t sub_1010C4C74(uint64_t a1)
{
  *(_QWORD *)a1 = off_10219FDA8;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1010C4CE8()
{
  operator new();
}

void sub_1010C4D30()
{
  operator delete();
}

uint64_t sub_1010C4D54(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1010C4DC8;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230C4E8 != -1)
    dispatch_once(&qword_10230C4E8, block);
  return byte_10230C4E0;
}

id sub_1010C4DC8(uint64_t a1)
{
  id result;

  result = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "isServiceEnabled:", CFSTR("CLFitnessMachineNotifier"));
  byte_10230C4E0 = (char)result;
  return result;
}

uint64_t sub_1010C4DF4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_10219FC20;
  *(_BYTE *)(a1 + 108) = 1;
  v2 = (_QWORD *)(a1 + 304);
  sub_1000F34E0((_QWORD *)(a1 + 352));
  sub_1000F34E0((_QWORD *)(a1 + 328));
  sub_1000F34E0(v2);
  sub_100261F44(a1 + 288);
  v3 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_1010C4C74(a1);
}

void sub_1010C4E68(uint64_t a1)
{
  sub_1010C4DF4(a1);
  operator delete();
}

uint64_t sub_1010C4E8C(uint64_t result)
{
  *(_BYTE *)(result + 108) = 1;
  return result;
}

_QWORD *sub_1010C4E98@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_1010C4F10(uint64_t result, uint64_t a2)
{
  double v2;
  double v3;
  double v5;
  double v6;
  double v7;
  double v8;
  double v10;
  double v11;
  double v12;
  double v14;
  double v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v24;

  if (*(double *)(result + 72) == 1.79769313e308)
  {
    *(_QWORD *)(result + 72) = *(_QWORD *)(a2 + 72);
    *(_DWORD *)(result + 80) = *(_DWORD *)(a2 + 80);
  }
  if (*(double *)(result + 96) == 1.79769313e308)
  {
    *(_QWORD *)(result + 96) = *(_QWORD *)(a2 + 96);
    *(_DWORD *)(result + 104) = *(_DWORD *)(a2 + 104);
  }
  if (*(double *)(result + 120) == 1.79769313e308)
  {
    *(_QWORD *)(result + 120) = *(_QWORD *)(a2 + 120);
    *(_DWORD *)(result + 128) = *(_DWORD *)(a2 + 128);
  }
  v2 = *(double *)a2;
  v3 = *(double *)(result + 8);
  if (*(double *)result >= *(double *)a2 && *(double *)result != 1.79769313e308)
    v2 = *(double *)result;
  *(double *)result = v2;
  v5 = *(double *)(result + 88);
  if (v5 == 1.79769313e308)
    v5 = *(double *)(a2 + 88);
  *(double *)(result + 88) = v5;
  v6 = *(double *)(result + 112);
  if (v6 == 1.79769313e308)
    v6 = *(double *)(a2 + 112);
  *(double *)(result + 112) = v6;
  v7 = *(double *)(result + 64);
  if (v7 == 1.79769313e308)
    v7 = *(double *)(a2 + 64);
  *(double *)(result + 64) = v7;
  v8 = *(double *)(a2 + 8);
  if (v3 >= v8 && v3 != 1.79769313e308)
    v8 = v3;
  *(double *)(result + 8) = v8;
  v10 = *(double *)(a2 + 16);
  v11 = *(double *)(result + 16);
  v12 = *(double *)(result + 24);
  if (v11 >= v10 && v11 != 1.79769313e308)
    v10 = *(double *)(result + 16);
  *(double *)(result + 16) = v10;
  v14 = *(double *)(a2 + 24);
  if (v12 >= v14 && v12 != 1.79769313e308)
    v14 = v12;
  *(double *)(result + 24) = v14;
  v16 = *(double *)(result + 32);
  if (v16 < *(double *)(a2 + 32) || v16 == 1.79769313e308)
    v16 = *(double *)(a2 + 32);
  *(double *)(result + 32) = v16;
  v18 = *(_QWORD *)(a2 + 40);
  v19 = *(_QWORD *)(result + 40);
  v20 = *(_QWORD *)(result + 48);
  if (v19 >= v18 && v19 != 0x7FFFFFFFFFFFFFFFLL)
    v18 = *(_QWORD *)(result + 40);
  *(_QWORD *)(result + 40) = v18;
  v22 = *(_QWORD *)(a2 + 48);
  if (v20 >= v22 && v20 != 0x7FFFFFFFFFFFFFFFLL)
    v22 = v20;
  *(_QWORD *)(result + 48) = v22;
  v24 = *(_QWORD *)(result + 56);
  if (v24 < *(_QWORD *)(a2 + 56) || v24 == 0x7FFFFFFFFFFFFFFFLL)
    v24 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 56) = v24;
  if (*(double *)(result + 136) == 1.79769313e308)
    *(_QWORD *)(result + 136) = *(_QWORD *)(a2 + 136);
  if (*(double *)(result + 144) == 1.79769313e308)
    *(_QWORD *)(result + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(result + 164) = 1;
  return result;
}

void sub_1010C50B4()
{
  operator new();
}

void sub_1010C5160(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_1010C519C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_10219FEF8;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_1010C5270(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10219FD78);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_10219FD78);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLFitnessMachineNotifier_Type::Notification, NotificationData_T = CLFitnessMachineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_1010C54E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FD410);
}

uint64_t sub_1010C54F8(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  _OWORD buf[10];
  uint64_t v46;

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)&buf[0] = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        v46 = 0;
        memset(buf, 0, sizeof(buf));
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _OWORD *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_1010C7968();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022FD411;
        HIDWORD(v39) = v17;
        *(_QWORD *)&buf[0] = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)&buf[0] = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)&buf[0] = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)&buf[0] = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        LODWORD(buf[0]) = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10219FD78);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    LODWORD(buf[0]) = 136446466;
    *(_QWORD *)((char *)buf + 4) = v15;
    WORD6(buf[0]) = 1026;
    *(_DWORD *)((char *)buf + 14) = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      (uint8_t *)buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219FD78);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLFitnessMachineNotifier_Type::Notification, NotificationData_T = CLFitnessMachineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != (char *)buf)
      free(v38);
    return 0;
  }
  return result;
}

BOOL sub_1010C5974(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219FD78);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10219FD78);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLFitnessMachineNotifier_Type::Notification, NotificationData_T = CLFitnessMachineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_1010C5BF4(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10219FD78);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10219FD78);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLFitnessMachineNotifier_Type::Notification, NotificationData_T = CLFitnessMachineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_1010C5F7C(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(__int128 **)(v7 + 64);
  if (!v11)
    return 0;
  v12 = *v11;
  v13 = v11[2];
  *(_OWORD *)(a3 + 16) = v11[1];
  *(_OWORD *)(a3 + 32) = v13;
  *(_OWORD *)a3 = v12;
  v14 = v11[3];
  v15 = v11[4];
  v16 = v11[6];
  *(_OWORD *)(a3 + 80) = v11[5];
  *(_OWORD *)(a3 + 96) = v16;
  *(_OWORD *)(a3 + 48) = v14;
  *(_OWORD *)(a3 + 64) = v15;
  v17 = v11[7];
  v18 = v11[8];
  v19 = v11[9];
  *(_QWORD *)(a3 + 160) = *((_QWORD *)v11 + 20);
  *(_OWORD *)(a3 + 128) = v18;
  *(_OWORD *)(a3 + 144) = v19;
  *(_OWORD *)(a3 + 112) = v17;
  return 1;
}

uint64_t sub_1010C600C(uint64_t a1, int *a2, uint64_t a3)
{
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t **v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  int v17;
  __int128 v18;
  int *v19;

  v6 = (char *)operator new(0xC0uLL);
  v7 = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(v6 + 136) = *(_OWORD *)(a3 + 112);
  v8 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(v6 + 152) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(v6 + 168) = v8;
  v9 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v6 + 72) = *(_OWORD *)(a3 + 48);
  v10 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v6 + 88) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v6 + 104) = v10;
  *(_OWORD *)(v6 + 120) = v7;
  v11 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 40) = v11;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_10219FE88;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 23) = *(_QWORD *)(a3 + 160);
  *(_OWORD *)(v6 + 56) = v9;
  *(_QWORD *)&v18 = v6 + 24;
  *((_QWORD *)&v18 + 1) = v6;
  v17 = *a2;
  v19 = &v17;
  v12 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v17, (uint64_t)&unk_101B9EB60, &v19);
  sub_1002B7674((uint64_t)(v12 + 8), &v18);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return 1;
}

void sub_1010C611C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010C6130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD v5[10];
  uint64_t v6;

  v6 = 0;
  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_1010C6180(uint64_t a1, signed __int32 *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v35[20];
  __int16 v36;
  _QWORD *v37;
  __int16 v38;
  std::__shared_weak_count *v39;
  _QWORD **v40;
  _QWORD *v41[3];
  std::__shared_weak_count *v42;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219FD78);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v35 = 2082;
      *(_QWORD *)&v35[2] = "";
      *(_WORD *)&v35[10] = 2082;
      *(_QWORD *)&v35[12] = "activity";
      v36 = 2082;
      v37 = v10;
      v38 = 2050;
      v39 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v40 = v41;
      memset(v41, 0, sizeof(v41));
      v42 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v40);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v39;
      if (v39)
      {
        p_shared_owners = (unint64_t *)&v39->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v35, *(_QWORD **)&v35[8]);
      v21 = v42;
      if (v42)
      {
        v22 = (unint64_t *)&v42->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v40, v41[0]);
    }
    if (a4)
    {
      v24 = (char *)operator new(0xC0uLL);
      v25 = *(_OWORD *)(a3 + 96);
      *(_OWORD *)(v24 + 136) = *(_OWORD *)(a3 + 112);
      v26 = *(_OWORD *)(a3 + 144);
      *(_OWORD *)(v24 + 152) = *(_OWORD *)(a3 + 128);
      *(_OWORD *)(v24 + 168) = v26;
      v27 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(v24 + 72) = *(_OWORD *)(a3 + 48);
      v28 = *(_OWORD *)(a3 + 80);
      *(_OWORD *)(v24 + 88) = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(v24 + 104) = v28;
      *(_OWORD *)(v24 + 120) = v25;
      v29 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(v24 + 24) = *(_OWORD *)a3;
      *(_OWORD *)(v24 + 40) = v29;
      *((_QWORD *)v24 + 2) = 0;
      *(_QWORD *)v24 = off_10219FE88;
      *((_QWORD *)v24 + 1) = 0;
      *((_QWORD *)v24 + 23) = *(_QWORD *)(a3 + 160);
      *(_OWORD *)(v24 + 56) = v27;
      *(_QWORD *)buf = v24 + 24;
      *(_QWORD *)v35 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v30 = *(std::__shared_weak_count **)v35;
      if (*(_QWORD *)v35)
      {
        v31 = (unint64_t *)(*(_QWORD *)v35 + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_1010C6E8C();
    os_activity_scope_leave(&state);
  }
}

void sub_1010C67F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1010C6844(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219FD78);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10219FD78);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData>::listClients() [Notification_T = CLFitnessMachineNotifier_Type::Notification, NotificationData_T = CLFitnessMachineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219FD78);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10219FD78);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData>::listClients() [Notification_T = CLFitnessMachineNotifier_Type::Notification, NotificationData_T = CLFitnessMachineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10219FD78);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10219FD78);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData>::listClients() [Notification_T = CLFitnessMachineNotifier_Type::Notification, NotificationData_T = CLFitnessMachineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_1010C6DF0(uint64_t a1)
{
  sub_1010C7908(a1);
  operator delete();
}

id sub_1010C6E14(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_1010C7464(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_1010C6E60(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1010C6E8C()
{
  operator new();
}

void sub_1010C6F44(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_1010C7464(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_1010C7318(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10219FD78);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10219FD78);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLFitnessMachineNotifier_Type::Notification, NotificationData_T = CLFitnessMachineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_1010C7318(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_1010C7464(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

void sub_1010C73F4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10219FE88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1010C7408(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10219FE88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1010C7444(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

id sub_1010C7464(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_1010C74DC(a1);
  v6 = objc_opt_class(CLCppContainer, v4);
  if ((objc_opt_isKindOfClass(a1, v6) & 1) != 0)
    return sub_1010C7694(a1);
  else
    return 0;
}

id sub_1010C74DC(void *a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v7;
  char v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return sub_1010C7868((uint64_t)&v8, a1);
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10219FEC8);
    v3 = qword_10229FC38;
    if (!os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 134218498;
    v10 = v2;
    v11 = 2048;
    v12 = 0;
    v13 = 2080;
    v14 = 0x8000000101C3F9C9 & 0x7FFFFFFFFFFFFFFFLL;
    v4 = v3;
    v5 = OS_LOG_TYPE_ERROR;
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10219FEC8);
    v7 = qword_10229FC38;
    if (!os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
      return 0;
    *(_DWORD *)buf = 134218498;
    v10 = v2;
    v11 = 2048;
    v12 = 0;
    v13 = 2080;
    v14 = 0x8000000101C3F9C9 & 0x7FFFFFFFFFFFFFFFLL;
    v4 = v7;
    v5 = OS_LOG_TYPE_FAULT;
  }
  _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  return 0;
}

id sub_1010C7694(void *a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v7;
  int v8;
  id v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10219FEC8);
    v3 = qword_10229FC38;
    if (!os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
      return 0;
    v8 = 134218498;
    v9 = v2;
    v10 = 2048;
    v11 = 0;
    v12 = 2080;
    v13 = 0x8000000101C3F9C9 & 0x7FFFFFFFFFFFFFFFLL;
    v4 = v3;
    v5 = OS_LOG_TYPE_ERROR;
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10219FEC8);
    v7 = qword_10229FC38;
    if (!os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
      return 0;
    v8 = 134218498;
    v9 = v2;
    v10 = 2048;
    v11 = 0;
    v12 = 2080;
    v13 = 0x8000000101C3F9C9 & 0x7FFFFFFFFFFFFFFFLL;
    v4 = v7;
    v5 = OS_LOG_TYPE_FAULT;
  }
  _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", (uint8_t *)&v8, 0x20u);
  return 0;
}

id sub_1010C7868(uint64_t a1, void *a2)
{
  if (!objc_msgSend(a2, "cppObjectPtr")
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221CE48))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)168)
      sub_10193E320();
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }
  return objc_msgSend(a2, "cppObjectPtr");
}

void sub_1010C78DC(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_1010C7908(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_10219FEF8;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_1010C7968()
{
  operator new();
}

uint64_t sub_1010C7A20(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

uint64_t sub_1010C7A40()
{
  sub_1015A2E04(qword_10230C4A0, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230C4A0, (void *)&_mh_execute_header);
}

uint64_t sub_1010C7A84(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, _QWORD *a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  int *v36;
  char v37;
  char v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  NSObject *v48;
  int v49;
  NSObject *v50;
  uint64_t v51;
  char v53;
  __int128 v54[3];
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint8_t buf[8];
  _BYTE v62[10];
  __int16 v63;
  _BYTE v64[10];
  uint64_t v65;

  v12 = (std::__shared_weak_count *)a4[1];
  v59 = *a4;
  v60 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = (std::__shared_weak_count *)a5[1];
  v57 = *a5;
  v58 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = (std::__shared_weak_count *)a6[1];
  v55 = *a6;
  v56 = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v54[0] = xmmword_10230C4F0;
  v54[1] = unk_10230C500;
  v54[2] = xmmword_10230C510;
  sub_100D04860(a1, a2, 0, &v59, &v57, &v55, a9, a8, v54);
  v21 = v56;
  if (v56)
  {
    v22 = (unint64_t *)&v56->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v58;
  if (v58)
  {
    v25 = (unint64_t *)&v58->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v60;
  if (v60)
  {
    v28 = (unint64_t *)&v60->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  *(_QWORD *)a1 = off_10219FF20;
  *(_QWORD *)(a1 + 352) = *a3;
  v30 = a3[1];
  *(_QWORD *)(a1 + 360) = v30;
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  *(_QWORD *)(a1 + 368) = *a7;
  v33 = a7[1];
  *(_QWORD *)(a1 + 376) = v33;
  if (v33)
  {
    v34 = (unint64_t *)(v33 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  *(_DWORD *)(a1 + 392) = 500;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_DWORD *)(a1 + 415) = 0;
  *(_QWORD *)(a1 + 424) = objc_opt_new(NSMutableArray);
  *(_QWORD *)(a1 + 432) = objc_opt_new(NSMutableArray);
  *(_QWORD *)(a1 + 440) = objc_opt_new(NSMutableArray);
  *(_QWORD *)(a1 + 448) = objc_opt_new(NSMutableArray);
  *(_QWORD *)(a1 + 456) = objc_opt_new(NSMutableArray);
  sub_1001E4804(buf);
  v36 = (int *)(a1 + 392);
  v37 = sub_1001E4B84(*(uint64_t *)buf, "MaxHarvestCells", (_DWORD *)(a1 + 392));
  v38 = v37;
  v39 = *(std::__shared_weak_count **)v62;
  if (*(_QWORD *)v62)
  {
    v40 = (unint64_t *)(*(_QWORD *)v62 + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
      if ((v38 & 1) != 0)
        goto LABEL_37;
      goto LABEL_36;
    }
  }
  if ((v37 & 1) == 0)
LABEL_36:
    *v36 = 500;
LABEL_37:
  v53 = 0;
  sub_1001E4804(buf);
  sub_1001E4874(*(uint64_t *)buf, "EnableCellHarvesterLegacy", (BOOL *)&v53);
  v42 = *(std::__shared_weak_count **)v62;
  if (*(_QWORD *)v62)
  {
    v43 = (unint64_t *)(*(_QWORD *)v62 + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  sub_1001E4804(buf);
  sub_1001E4874(*(uint64_t *)buf, "EnableCellHarvesterLegacyForMultiSim", (BOOL *)(a1 + 418));
  v45 = *(std::__shared_weak_count **)v62;
  if (*(_QWORD *)v62)
  {
    v46 = (unint64_t *)(*(_QWORD *)v62 + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021A0000);
  v48 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    v49 = *(unsigned __int8 *)(a1 + 418);
    *(_QWORD *)buf = 68289538;
    *(_WORD *)v62 = 2082;
    *(_QWORD *)&v62[2] = "";
    v63 = 1026;
    *(_DWORD *)v64 = v53;
    *(_WORD *)&v64[4] = 1026;
    *(_DWORD *)&v64[6] = v49;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Defaults #legacy for CellHarvesterLegacy\", \"EnableCellHarvesterLegacy\":%{public}hhd, \"EnableCellHarvesterLegacyForMultiSim\":%{public}hhd}", buf, 0x1Eu);
  }
  sub_1011E7A64((_BYTE *)(a1 + 280), v53);
  *(_QWORD *)(a1 + 384) = objc_msgSend(*(id *)(a1 + 72), "classifyingStoreForHarvester:", 0);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021A0000);
  v50 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v51 = *v36;
    *(_QWORD *)buf = 68289539;
    *(_WORD *)v62 = 2082;
    *(_QWORD *)&v62[2] = "";
    v63 = 2050;
    *(_QWORD *)v64 = 0;
    *(_WORD *)&v64[8] = 2049;
    v65 = v51;
    _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"construction\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"maxHarvestPointCount\":%{private}lu}", buf, 0x26u);
  }
  return a1;
}

void sub_1010C7F70(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100261F44(v2 - 96);
  sub_100261F44(v1 + 368);
  sub_100261F44(v1 + 352);
  sub_100429668(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010C7FE0(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, _QWORD *a7, uint64_t a8, uint64_t a9)
{
  return sub_1010C7A84(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_1010C7FEC(id *a1)
{

}

id sub_1010C802C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 384), "count");
}

uint64_t sub_1010C8034(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  void *__p[2];
  char v8;
  _QWORD v9[2];
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  void **v17;

  sub_100119F3C(v9);
  if (sub_100006BB4(a2, "Cell", v9))
    sub_1011E7A6C(a1 + 280, (uint64_t)v9);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021A0000);
  v4 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    sub_1011E7898((double *)(a1 + 280), __p);
    if (v8 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 68289539;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2050;
    v15 = 0;
    v16 = 2081;
    v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"harvest-apply-rules\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"rules\":%{private, location:escape_only}s}", buf, 0x26u);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  return sub_10011A5A8(v9);
}

void sub_1010C8190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010C81B0()
{
  unsigned __int8 v0;
  unsigned int v2;

  v0 = atomic_load((unsigned __int8 *)&qword_10230C528);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10230C528))
  {
    sub_100197040();
    if ((sub_1001B796C() & 1) != 0)
    {
      sub_100197040();
      v2 = (sub_1001B796C() >> 3) & 1;
    }
    else
    {
      LOBYTE(v2) = 0;
    }
    byte_10230C520 = v2;
    __cxa_guard_release(&qword_10230C528);
  }
  return byte_10230C520;
}

void sub_1010C8224(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230C528);
  _Unwind_Resume(a1);
}

void sub_1010C823C()
{
  NSObject *v0;
  _DWORD v1[2];
  __int16 v2;
  const char *v3;
  __int16 v4;
  uint64_t v5;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021A0000);
  v0 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v1[0] = 68289282;
    v1[1] = 0;
    v2 = 2082;
    v3 = "";
    v4 = 2050;
    v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"uploading is disabled\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v1, 0x1Cu);
  }
}

uint64_t sub_1010C831C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 24))(v2, v3, 5);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, v5, 2);
  return 1;
}

uint64_t sub_1010C8380(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 32))(v2, v3, 5);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = sub_100201404(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, v5, 2);
}

uint64_t sub_1010C83DC(uint64_t a1)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  int v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int *v20;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 352) + 16))(*(_QWORD *)(a1 + 352));
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 224))(*(_QWORD *)(a1 + 56));
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021A0000);
  v3 = (v6 != 1) & ~v2;
  v4 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68290307;
    v9 = 2082;
    v8 = 0;
    v10 = "";
    v11 = 2050;
    v12 = 0;
    v13 = 1025;
    v14 = (v6 != 1) & ~v2;
    v15 = 1025;
    v16 = v2;
    v17 = 1040;
    v18 = 4;
    v19 = 2097;
    v20 = &v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"cellHarvestingAllowed\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"isOkToHarvestCells\":%{private}hhd, \"hasActiveOrHeldCalls\":%{private}hhd, \"transmitStatus\":%{private, location:CLTelephonyService_Type::CellTransmitStatus}.*P}", buf, 0x38u);
  }
  return v3;
}

void sub_1010C8538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v6;
  double v7;
  double v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  double v12;
  unsigned int v13;
  NSObject *v14;
  int v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  double v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;

  v6 = *(double *)(a4 + 76);
  v7 = *(double *)(a1 + 400);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021A0000);
  v8 = v6 - v7;
  v9 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    sub_100204BE4(a1 + 280);
    v10 = *(unsigned __int8 *)(a1 + 417);
    v15 = 68290050;
    v17 = 2082;
    v16 = 0;
    v18 = "";
    v19 = 2050;
    v20 = 0;
    v21 = 2050;
    v22 = v8;
    v23 = 2050;
    v24 = v11;
    v25 = 1026;
    v26 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#legacy onGpsNotification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"timeSinceLastHarvest_s\":\"%{public}.09f\", \"harvestInterval_s\":\"%{public}.09f\", \"cellMonitoringEnabled\":%{public}hhd}", (uint8_t *)&v15, 0x36u);
  }
  if (*(_BYTE *)(a1 + 417))
  {
    sub_100204BE4(a1 + 280);
    if (v8 >= v12)
    {
      v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 352) + 24))(*(_QWORD *)(a1 + 352));
      if (v13 <= 7)
      {
        if (((1 << v13) & 0xF0) != 0)
        {
          sub_1010C8764(a1, (_OWORD *)a4);
        }
        else if (((1 << v13) & 5) != 0)
        {
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_1021A0000);
          v14 = qword_1022A0208;
          if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
          {
            v15 = 68289282;
            v16 = 0;
            v17 = 2082;
            v18 = "";
            v19 = 2050;
            v20 = 0;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"not harvesting since the device is in a transient state.\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v15, 0x1Cu);
          }
        }
        else
        {
          sub_1010C88CC(a1, (_OWORD *)a4);
        }
      }
    }
  }
}

void sub_1010C8764(uint64_t a1, _OWORD *a2)
{
  unsigned int v4;
  NSObject *v5;
  BOOL v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;

  if (sub_1010C83DC(a1))
  {
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 352) + 48))(*(_QWORD *)(a1 + 352));
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 352) + 136))(*(_QWORD *)(a1 + 352)))
      *(_BYTE *)(a1 + 416) = 1;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021A0000);
    v5 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v7[0] = 68289539;
      v7[1] = 0;
      v8 = 2082;
      v9 = "";
      v10 = 2050;
      v11 = 0;
      v12 = 2049;
      v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"harvestCell\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"rat\":%{private, location:CLTelephonyService_Type::RadioAccessTechnology}lld}", (uint8_t *)v7, 0x26u);
    }
    v6 = v4 > 9 || ((1 << v4) & 0x287) == 0;
    if (!v6 && !*(_BYTE *)(a1 + 416))
      sub_1010CC444(a1, a2);
  }
}

void sub_1010C88CC(uint64_t a1, _OWORD *a2)
{
  id v4;
  id v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  id v33;
  void **v34;
  NSObject *v35;
  void *__p[2];
  uint64_t v37;
  _OWORD v38[8];
  uint64_t v39;
  _OWORD v40[8];
  uint64_t v41;
  _OWORD v42[8];
  uint64_t v43;
  _OWORD v44[8];
  _OWORD v45[2];
  uint64_t buf;
  __int16 v47;
  const char *v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  const char *v52;
  __int16 v53;
  id v54;

  if (sub_1010C83DC(a1))
  {
    v4 = objc_alloc_init((Class)CLPCellOutOfServiceInfo);
    v5 = objc_alloc((Class)CLPLocation);
    v6 = a2[5];
    v44[4] = a2[4];
    v44[5] = v6;
    v7 = a2[3];
    v44[2] = a2[2];
    v44[3] = v7;
    *(_OWORD *)((char *)v45 + 12) = *(_OWORD *)((char *)a2 + 140);
    v8 = a2[8];
    v9 = a2[6];
    v44[7] = a2[7];
    v45[0] = v8;
    v44[6] = v9;
    v10 = a2[1];
    v44[0] = *a2;
    v44[1] = v10;
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 80))(*(_QWORD *)(a1 + 56));
    v42[0] = *(_OWORD *)v11;
    v13 = *(_OWORD *)(v11 + 16);
    v12 = *(_OWORD *)(v11 + 32);
    v14 = *(_OWORD *)(v11 + 64);
    v42[3] = *(_OWORD *)(v11 + 48);
    v42[4] = v14;
    v42[1] = v13;
    v15 = *(_OWORD *)(v11 + 80);
    v16 = *(_OWORD *)(v11 + 96);
    v17 = *(_OWORD *)(v11 + 112);
    v43 = *(_QWORD *)(v11 + 128);
    v42[6] = v16;
    v42[7] = v17;
    v42[5] = v15;
    v42[2] = v12;
    v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 88))(*(_QWORD *)(a1 + 56));
    v40[0] = *(_OWORD *)v18;
    v19 = *(_OWORD *)(v18 + 16);
    v20 = *(_OWORD *)(v18 + 32);
    v21 = *(_OWORD *)(v18 + 64);
    v40[3] = *(_OWORD *)(v18 + 48);
    v40[4] = v21;
    v40[1] = v19;
    v40[2] = v20;
    v22 = *(_OWORD *)(v18 + 80);
    v23 = *(_OWORD *)(v18 + 96);
    v24 = *(_OWORD *)(v18 + 112);
    v41 = *(_QWORD *)(v18 + 128);
    v40[6] = v23;
    v40[7] = v24;
    v40[5] = v22;
    v25 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 96))(*(_QWORD *)(a1 + 56));
    v38[0] = *(_OWORD *)v25;
    v26 = *(_OWORD *)(v25 + 64);
    v28 = *(_OWORD *)(v25 + 16);
    v27 = *(_OWORD *)(v25 + 32);
    v38[3] = *(_OWORD *)(v25 + 48);
    v38[4] = v26;
    v38[1] = v28;
    v38[2] = v27;
    v30 = *(_OWORD *)(v25 + 96);
    v29 = *(_OWORD *)(v25 + 112);
    v31 = *(_OWORD *)(v25 + 80);
    v39 = *(_QWORD *)(v25 + 128);
    v38[7] = v29;
    v38[5] = v31;
    v38[6] = v30;
    v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 216))(*(_QWORD *)(a1 + 56));
    v33 = objc_msgSend(v5, "initWithDaemonLocation:rawMotionActivity:motionActivity:dominantMotionActivity:vehicleConnected:vehicleConnectionStateChanged:", v44, v42, v40, v38, v32, (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 208))(*(_QWORD *)(a1 + 56)));
    objc_msgSend(v4, "setLocation:", v33);

    __p[0] = 0;
    __p[1] = 0;
    v37 = 0;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 352) + 96))(*(_QWORD *)(a1 + 352), __p);
    if (v37 >= 0)
      v34 = __p;
    else
      v34 = (void **)__p[0];
    objc_msgSend(v4, "setServiceProviderName:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v34));
    objc_msgSend(*(id *)(a1 + 384), "writeSecondaryObject:collectedAt:toField:", v4, objc_msgSend(v4, "location"), 7);
    ++*(_DWORD *)(a1 + 208);
    *(double *)(a1 + 400) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021A0000);
    v35 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      buf = 68289795;
      v47 = 2082;
      v48 = "";
      v49 = 2050;
      v50 = 0;
      v51 = 2081;
      v52 = "OutOfService";
      v53 = 2113;
      v54 = v4;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s, \"harvest\":%{private, location:escape_only}@}", (uint8_t *)&buf, 0x30u);
    }
    if (SHIBYTE(v37) < 0)
      operator delete(__p[0]);
  }
}

void sub_1010C8C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(exception_object);
}

void sub_1010C8C28(uint64_t a1, uint64_t a2, int *a3, id *a4)
{
  NSObject *v7;
  const __CFString *v8;
  void **v9;
  int v10;
  const void *v11;
  id v12;
  id v13;
  _BOOL4 v14;
  _OWORD *v15;
  const void *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  NSObject *v52;
  NSObject *v53;
  NSObject *v54;
  BOOL v55;
  NSObject *v56;
  const void *v57;
  const void *v58;
  NSObject *v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  void **v91;
  void **v92;
  NSObject *log;
  NSObject *loga;
  uint64_t v95;
  unint64_t v96;
  void *v97[2];
  char v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *__p;
  __int16 v109;
  const char *v110;
  __int16 v111;
  uint64_t v112;
  __int16 v113;
  void **v114;
  _BYTE buf[76];
  int v116;
  void *v117;
  void *v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  _OWORD v131[2];
  __int128 v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  int v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  int v156;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021A0000);
  v7 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v8 = (const __CFString *)sub_1001DEC98(a3);
    sub_1001A486C(v8, (uint64_t)&__p);
    v9 = (v112 & 0x80000000) == 0 ? &__p : (void **)__p;
    v10 = *(unsigned __int8 *)(a1 + 417);
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = 0;
    *(_WORD *)&buf[28] = 2082;
    *(_QWORD *)&buf[30] = v9;
    *(_WORD *)&buf[38] = 1026;
    *(_DWORD *)&buf[40] = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#legacy onTelephonyNotification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"notification\":%{public, location:escape_only}s, \"cellMonitoringEnabled\":%{public}hhd}", buf, 0x2Cu);
    if (SBYTE3(v112) < 0)
      operator delete(__p);
  }
  v11 = (const void *)sub_1001DEC98(a3);
  if (CFEqual(v11, CFSTR("kSubscriptionsInUseNotification")))
  {
    v12 = objc_msgSend(*a4, "valueForKey:", CFSTR("kSubscriptionsInUseKey"));
    v13 = objc_msgSend(v12, "count");
    v14 = (unint64_t)v13 >= 2 && *(_BYTE *)(a1 + 418) == 0;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021A0000);
    v54 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68290050;
      *(_WORD *)&buf[8] = 2082;
      *(_DWORD *)&buf[4] = 0;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = 0;
      *(_WORD *)&buf[28] = 2050;
      *(_QWORD *)&buf[30] = v13;
      *(_WORD *)&buf[38] = 1026;
      *(_DWORD *)&buf[40] = v12 == 0;
      *(_WORD *)&buf[44] = 1026;
      *(_DWORD *)&buf[46] = v14;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#legacy updated InUseSubscriptions\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"inUseSubCount\":%{public}ld, \"hasError\":%{public}hhd, \"disbaledDueToInvalidSubscriptionCount\":%{public}hhd}", buf, 0x32u);
    }
    v55 = !v14;
    if (!v12)
      v55 = 0;
    *(_BYTE *)(a1 + 417) = v55;
    return;
  }
  if (!*(_BYTE *)(a1 + 417))
    return;
  v15 = (_OWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 56))(*(_QWORD *)(a1 + 368));
  ++*(_DWORD *)(a1 + 204);
  if (((*(uint64_t (**)(_QWORD, _OWORD *))(**(_QWORD **)(a1 + 56) + 184))(*(_QWORD *)(a1 + 56), v15) & 1) != 0)
  {
    v16 = (const void *)sub_1001DEC98(a3);
    if (CFEqual(v16, kCTCellMonitorUpdateNotification))
    {
      if (!*(_BYTE *)(a1 + 416))
        return;
      *(_BYTE *)(a1 + 416) = 0;
      if (!sub_1010C83DC(a1))
        return;
      v105 = 0;
      v106 = 0;
      v107 = 0;
      if (!(*(unsigned int (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 352) + 64))(*(_QWORD *)(a1 + 352), &v105, 1)|| (v17 = v105, v95 = v106, v105 == v106))
      {
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_1021A0000);
        v59 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2050;
          *(_QWORD *)&buf[20] = 0;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning: could not retrieve current serving cell info\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
        }
      }
      else
      {
        v102 = 0;
        v103 = 0;
        v104 = 0;
        v99 = 0;
        v100 = 0;
        v101 = 0;
        do
        {
          *(_OWORD *)buf = *(_OWORD *)v17;
          v18 = *(_OWORD *)(v17 + 16);
          v19 = *(_OWORD *)(v17 + 32);
          v20 = *(_OWORD *)(v17 + 48);
          *(_OWORD *)&buf[60] = *(_OWORD *)(v17 + 60);
          *(_OWORD *)&buf[32] = v19;
          *(_OWORD *)&buf[48] = v20;
          *(_OWORD *)&buf[16] = v18;
          v116 = *(_DWORD *)(v17 + 80);
          v118 = 0;
          v119 = 0;
          v117 = 0;
          sub_10027205C(&v117, *(const void **)(v17 + 88), *(_QWORD *)(v17 + 96), (uint64_t)(*(_QWORD *)(v17 + 96) - *(_QWORD *)(v17 + 88)) >> 2);
          v120 = *(_OWORD *)(v17 + 112);
          v21 = *(_OWORD *)(v17 + 128);
          v22 = *(_OWORD *)(v17 + 144);
          v23 = *(_OWORD *)(v17 + 176);
          v123 = *(_OWORD *)(v17 + 160);
          v124 = v23;
          v121 = v21;
          v122 = v22;
          v24 = *(_OWORD *)(v17 + 192);
          v25 = *(_OWORD *)(v17 + 208);
          v26 = *(_OWORD *)(v17 + 240);
          v127 = *(_OWORD *)(v17 + 224);
          v128 = v26;
          v125 = v24;
          v126 = v25;
          v27 = *(_OWORD *)(v17 + 256);
          v28 = *(_OWORD *)(v17 + 272);
          v29 = *(_OWORD *)(v17 + 288);
          *(_OWORD *)((char *)v131 + 12) = *(_OWORD *)(v17 + 300);
          v130 = v28;
          v131[0] = v29;
          v129 = v27;
          if (*(char *)(v17 + 343) < 0)
          {
            sub_100115CE4(&v132, *(void **)(v17 + 320), *(_QWORD *)(v17 + 328));
          }
          else
          {
            v30 = *(_OWORD *)(v17 + 320);
            v133 = *(_QWORD *)(v17 + 336);
            v132 = v30;
          }
          v31 = *(_OWORD *)(v17 + 344);
          v32 = *(_OWORD *)(v17 + 376);
          v135 = *(_OWORD *)(v17 + 360);
          v136 = v32;
          v134 = v31;
          v33 = *(_OWORD *)(v17 + 392);
          v34 = *(_OWORD *)(v17 + 408);
          v35 = *(_OWORD *)(v17 + 440);
          v139 = *(_OWORD *)(v17 + 424);
          v140 = v35;
          v137 = v33;
          v138 = v34;
          v36 = *(_OWORD *)(v17 + 456);
          v37 = *(_OWORD *)(v17 + 472);
          v38 = *(_OWORD *)(v17 + 488);
          v144 = *(_DWORD *)(v17 + 504);
          v142 = v37;
          v143 = v38;
          v141 = v36;
          v39 = *(_OWORD *)(v17 + 512);
          v40 = *(_OWORD *)(v17 + 528);
          v41 = *(_OWORD *)(v17 + 560);
          v147 = *(_OWORD *)(v17 + 544);
          v148 = v41;
          v145 = v39;
          v146 = v40;
          v42 = *(_OWORD *)(v17 + 576);
          v43 = *(_OWORD *)(v17 + 592);
          v44 = *(_OWORD *)(v17 + 624);
          v151 = *(_OWORD *)(v17 + 608);
          v152 = v44;
          v149 = v42;
          v150 = v43;
          v45 = *(_OWORD *)(v17 + 640);
          v46 = *(_OWORD *)(v17 + 656);
          v47 = *(_OWORD *)(v17 + 672);
          v156 = *(_DWORD *)(v17 + 688);
          v154 = v46;
          v155 = v47;
          v153 = v45;
          if (*(_DWORD *)&buf[4])
          {
            if (*(_DWORD *)&buf[4] == 1)
            {
              v48 = v100;
              if (v100 >= v101)
              {
                v49 = sub_1005A9E3C(&v99, (uint64_t)buf);
              }
              else
              {
                sub_1005A9F60((uint64_t)&v101, v100, (uint64_t)buf);
                v49 = v48 + 696;
              }
              v100 = v49;
            }
            else
            {
              if (qword_1022A0200 != -1)
                dispatch_once(&qword_1022A0200, &stru_1021A0000);
              v52 = qword_1022A0208;
              if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_FAULT))
              {
                __p = (void *)68289539;
                v109 = 2082;
                v110 = "";
                v111 = 2050;
                v112 = 0;
                v113 = 1025;
                LODWORD(v114) = *(_DWORD *)&buf[4];
                _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unexpected cell type\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"cellType\":%{private}d}", (uint8_t *)&__p, 0x22u);
                if (qword_1022A0200 != -1)
                  dispatch_once(&qword_1022A0200, &stru_1021A0000);
              }
              v53 = qword_1022A0208;
              if (os_signpost_enabled((os_log_t)qword_1022A0208))
              {
                __p = (void *)68289539;
                v109 = 2082;
                v110 = "";
                v111 = 2050;
                v112 = 0;
                v113 = 1025;
                LODWORD(v114) = *(_DWORD *)&buf[4];
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v53, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unexpected cell type", "{\"msg%{public}.0s\":\"Unexpected cell type\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"cellType\":%{private}d}", (uint8_t *)&__p, 0x22u);
              }
            }
          }
          else
          {
            v50 = v103;
            if (v103 >= v104)
            {
              v51 = sub_1005A9E3C(&v102, (uint64_t)buf);
            }
            else
            {
              sub_1005A9F60((uint64_t)&v104, v103, (uint64_t)buf);
              v51 = v50 + 696;
            }
            v103 = v51;
          }
          if (SHIBYTE(v133) < 0)
            operator delete((void *)v132);
          if (v117)
          {
            v118 = v117;
            operator delete(v117);
          }
          v17 += 696;
        }
        while (v17 != v95);
        v60 = v102;
        v96 = v103;
        while (v60 != v96)
        {
          *(_OWORD *)buf = *(_OWORD *)v60;
          v61 = *(_OWORD *)(v60 + 16);
          v62 = *(_OWORD *)(v60 + 32);
          v63 = *(_OWORD *)(v60 + 48);
          *(_OWORD *)&buf[60] = *(_OWORD *)(v60 + 60);
          *(_OWORD *)&buf[32] = v62;
          *(_OWORD *)&buf[48] = v63;
          *(_OWORD *)&buf[16] = v61;
          v116 = *(_DWORD *)(v60 + 80);
          v118 = 0;
          v119 = 0;
          v117 = 0;
          sub_10027205C(&v117, *(const void **)(v60 + 88), *(_QWORD *)(v60 + 96), (uint64_t)(*(_QWORD *)(v60 + 96) - *(_QWORD *)(v60 + 88)) >> 2);
          v120 = *(_OWORD *)(v60 + 112);
          v64 = *(_OWORD *)(v60 + 128);
          v65 = *(_OWORD *)(v60 + 144);
          v66 = *(_OWORD *)(v60 + 176);
          v123 = *(_OWORD *)(v60 + 160);
          v124 = v66;
          v121 = v64;
          v122 = v65;
          v67 = *(_OWORD *)(v60 + 192);
          v68 = *(_OWORD *)(v60 + 208);
          v69 = *(_OWORD *)(v60 + 240);
          v127 = *(_OWORD *)(v60 + 224);
          v128 = v69;
          v125 = v67;
          v126 = v68;
          v70 = *(_OWORD *)(v60 + 256);
          v71 = *(_OWORD *)(v60 + 272);
          v72 = *(_OWORD *)(v60 + 288);
          *(_OWORD *)((char *)v131 + 12) = *(_OWORD *)(v60 + 300);
          v130 = v71;
          v131[0] = v72;
          v129 = v70;
          if (*(char *)(v60 + 343) < 0)
          {
            sub_100115CE4(&v132, *(void **)(v60 + 320), *(_QWORD *)(v60 + 328));
          }
          else
          {
            v73 = *(_OWORD *)(v60 + 320);
            v133 = *(_QWORD *)(v60 + 336);
            v132 = v73;
          }
          v74 = *(_OWORD *)(v60 + 344);
          v75 = *(_OWORD *)(v60 + 376);
          v135 = *(_OWORD *)(v60 + 360);
          v136 = v75;
          v134 = v74;
          v76 = *(_OWORD *)(v60 + 392);
          v77 = *(_OWORD *)(v60 + 408);
          v78 = *(_OWORD *)(v60 + 440);
          v139 = *(_OWORD *)(v60 + 424);
          v140 = v78;
          v137 = v76;
          v138 = v77;
          v79 = *(_OWORD *)(v60 + 456);
          v80 = *(_OWORD *)(v60 + 472);
          v81 = *(_OWORD *)(v60 + 488);
          v144 = *(_DWORD *)(v60 + 504);
          v142 = v80;
          v143 = v81;
          v141 = v79;
          v82 = *(_OWORD *)(v60 + 512);
          v83 = *(_OWORD *)(v60 + 528);
          v84 = *(_OWORD *)(v60 + 560);
          v147 = *(_OWORD *)(v60 + 544);
          v148 = v84;
          v145 = v82;
          v146 = v83;
          v85 = *(_OWORD *)(v60 + 576);
          v86 = *(_OWORD *)(v60 + 592);
          v87 = *(_OWORD *)(v60 + 624);
          v151 = *(_OWORD *)(v60 + 608);
          v152 = v87;
          v149 = v85;
          v150 = v86;
          v88 = *(_OWORD *)(v60 + 640);
          v89 = *(_OWORD *)(v60 + 656);
          v90 = *(_OWORD *)(v60 + 672);
          v156 = *(_DWORD *)(v60 + 688);
          v154 = v89;
          v155 = v90;
          v153 = v88;
          if (*(_DWORD *)&buf[8] >= 3u)
          {
            if (*(_DWORD *)&buf[8] == 9)
            {
              sub_1010CA0BC(a1, v15, (uint64_t)buf, &v99);
              goto LABEL_76;
            }
            if (*(_DWORD *)&buf[8] != 7)
            {
              if ((*(_DWORD *)&buf[8] - 3) > 2)
              {
                if (*(_DWORD *)&buf[8] == 10)
                {
                  sub_1010CBB04(a1, v15, (uint64_t)buf, &v99);
                }
                else if (*(_DWORD *)&buf[8] == 6)
                {
                  sub_1010CB220(a1, v15, (uint64_t)buf, &v99);
                }
                else
                {
                  if (qword_1022A0200 != -1)
                    dispatch_once(&qword_1022A0200, &stru_1021A0000);
                  log = qword_1022A0208;
                  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_FAULT))
                  {
                    sub_101347C78((unsigned int *)buf, v97);
                    v91 = v97;
                    if (v98 < 0)
                      v91 = (void **)v97[0];
                    __p = (void *)68289539;
                    v109 = 2082;
                    v110 = "";
                    v111 = 2050;
                    v112 = 0;
                    v113 = 2081;
                    v114 = v91;
                    _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"failed to harvest cell\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"cell\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x26u);
                    if (v98 < 0)
                      operator delete(v97[0]);
                    if (qword_1022A0200 != -1)
                      dispatch_once(&qword_1022A0200, &stru_1021A0000);
                  }
                  loga = qword_1022A0208;
                  if (os_signpost_enabled((os_log_t)qword_1022A0208))
                  {
                    sub_101347C78((unsigned int *)buf, v97);
                    v92 = v97;
                    if (v98 < 0)
                      v92 = (void **)v97[0];
                    __p = (void *)68289539;
                    v109 = 2082;
                    v110 = "";
                    v111 = 2050;
                    v112 = 0;
                    v113 = 2081;
                    v114 = v92;
                    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, loga, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "failed to harvest cell", "{\"msg%{public}.0s\":\"failed to harvest cell\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"cell\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x26u);
                    if (v98 < 0)
                      operator delete(v97[0]);
                  }
                }
              }
              else
              {
                sub_1010CA908(a1, v15, (uint64_t)buf, &v99);
              }
              goto LABEL_76;
            }
          }
          sub_1010C98C8(a1, v15, (uint64_t)buf, &v99);
LABEL_76:
          if (SHIBYTE(v133) < 0)
            operator delete((void *)v132);
          if (v117)
          {
            v118 = v117;
            operator delete(v117);
          }
          v60 += 696;
        }
        *(_QWORD *)buf = &v99;
        sub_10087B4F8((void ***)buf);
        *(_QWORD *)buf = &v102;
        sub_10087B4F8((void ***)buf);
      }
      *(_QWORD *)buf = &v105;
      sub_10087B4F8((void ***)buf);
      return;
    }
    v57 = (const void *)sub_1001DEC98(a3);
    if (CFEqual(v57, kCTRegistrationCellChangedNotification)
      || (v58 = (const void *)sub_1001DEC98(a3), CFEqual(v58, kCTRegistrationNewServingNetworkNotification)))
    {
      sub_1010C8764(a1, v15);
    }
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021A0000);
    v56 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"not harvesting eligible - skipping\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
    }
  }
}

void sub_1010C9828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47)
{
  sub_1005A1100((uint64_t)&a35);
  a35 = &a20;
  sub_10087B4F8((void ***)&a35);
  a35 = &a23;
  sub_10087B4F8((void ***)&a35);
  a35 = &a26;
  sub_10087B4F8((void ***)&a35);
  _Unwind_Resume(a1);
}

void sub_1010C98C8(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t *a4)
{
  unsigned int *v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  id v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  id v40;
  _QWORD *v41;
  void **v42;
  void **v43;
  void **v44;
  void *v45;
  unint64_t v46;
  id v47;
  uint64_t v48;
  void *i;
  void *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  id v55;
  uint64_t v56;
  NSObject *v57;
  const char *v58;
  uint8_t *v59;
  _QWORD v60[6];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  void *__p[2];
  uint64_t v66;
  void *v67[2];
  uint64_t v68;
  void *v69[2];
  uint64_t v70;
  unsigned int v71;
  _OWORD v72[8];
  uint64_t v73;
  _OWORD v74[8];
  uint64_t v75;
  _OWORD v76[8];
  uint64_t v77;
  _OWORD v78[8];
  _OWORD v79[2];
  uint8_t v80[128];
  uint8_t buf[4];
  int v82;
  __int16 v83;
  const char *v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  const char *v88;

  v7 = (unsigned int *)sub_1007057DC(a3);
  v8 = *(_QWORD *)(a1 + 368);
  if (v8 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 64))(v8))
  {
    (*(void (**)(_QWORD, unsigned int *, _OWORD *))(**(_QWORD **)(a1 + 352) + 168))(*(_QWORD *)(a1 + 352), v7, a2);
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021A0000);
    v9 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Legacy GSM local harvesting not done", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021A0000);
      LOWORD(v69[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 2, "Legacy GSM local harvesting not done", v69, 2);
      v59 = (uint8_t *)v58;
      sub_100512490("Generic", 1, 0, 2, "void CLSubHarvesterCellLegacy::harvestCellGSM(const CLDaemonLocation &, const CLCell &, const std::vector<CLCell> &)", "%s\n", v58);
      if (v59 != buf)
        free(v59);
    }
  }
  v10 = objc_alloc_init((Class)CLPCellTowerLocation);
  v11 = objc_alloc((Class)CLPLocation);
  v12 = a2[5];
  v78[4] = a2[4];
  v78[5] = v12;
  v13 = a2[3];
  v78[2] = a2[2];
  v78[3] = v13;
  *(_OWORD *)((char *)v79 + 12) = *(_OWORD *)((char *)a2 + 140);
  v14 = a2[8];
  v15 = a2[6];
  v78[7] = a2[7];
  v79[0] = v14;
  v78[6] = v15;
  v16 = a2[1];
  v78[0] = *a2;
  v78[1] = v16;
  v17 = (_QWORD *)(a1 + 56);
  v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 80))(*(_QWORD *)(a1 + 56));
  v76[0] = *(_OWORD *)v18;
  v19 = *(_OWORD *)(v18 + 16);
  v20 = *(_OWORD *)(v18 + 32);
  v21 = *(_OWORD *)(v18 + 64);
  v76[3] = *(_OWORD *)(v18 + 48);
  v76[4] = v21;
  v76[1] = v19;
  v76[2] = v20;
  v22 = *(_OWORD *)(v18 + 80);
  v23 = *(_OWORD *)(v18 + 96);
  v24 = *(_OWORD *)(v18 + 112);
  v77 = *(_QWORD *)(v18 + 128);
  v76[6] = v23;
  v76[7] = v24;
  v76[5] = v22;
  v25 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v17 + 88))(*v17);
  v74[0] = *(_OWORD *)v25;
  v26 = *(_OWORD *)(v25 + 16);
  v27 = *(_OWORD *)(v25 + 32);
  v28 = *(_OWORD *)(v25 + 64);
  v74[3] = *(_OWORD *)(v25 + 48);
  v74[4] = v28;
  v74[1] = v26;
  v74[2] = v27;
  v29 = *(_OWORD *)(v25 + 80);
  v30 = *(_OWORD *)(v25 + 96);
  v31 = *(_OWORD *)(v25 + 112);
  v75 = *(_QWORD *)(v25 + 128);
  v74[6] = v30;
  v74[7] = v31;
  v74[5] = v29;
  v32 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v17 + 96))(*v17);
  v72[0] = *(_OWORD *)v32;
  v33 = *(_OWORD *)(v32 + 16);
  v34 = *(_OWORD *)(v32 + 32);
  v35 = *(_OWORD *)(v32 + 64);
  v72[3] = *(_OWORD *)(v32 + 48);
  v72[4] = v35;
  v72[1] = v33;
  v72[2] = v34;
  v36 = *(_OWORD *)(v32 + 80);
  v37 = *(_OWORD *)(v32 + 96);
  v38 = *(_OWORD *)(v32 + 112);
  v73 = *(_QWORD *)(v32 + 128);
  v72[6] = v37;
  v72[7] = v38;
  v72[5] = v36;
  v39 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v17 + 216))(*v17);
  v40 = objc_msgSend(v11, "initWithDaemonLocation:rawMotionActivity:motionActivity:dominantMotionActivity:vehicleConnected:vehicleConnectionStateChanged:", v78, v76, v74, v72, v39, (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v17 + 208))(*v17));
  objc_msgSend(v10, "setLocation:", v40);

  objc_msgSend(v10, "setMcc:", *v7);
  objc_msgSend(v10, "setMnc:", v7[1]);
  objc_msgSend(v10, "setLac:", v7[2]);
  objc_msgSend(v10, "setCi:", v7[3]);
  objc_msgSend(v10, "setArfcn:", v7[4]);
  objc_msgSend(v10, "setPsc:", v7[5]);
  objc_msgSend(v10, "setRat:", (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 352) + 48))(*(_QWORD *)(a1 + 352)));
  v41 = (_QWORD *)(a1 + 352);
  objc_msgSend(v10, "setTransmit:", (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 352) + 16))(*(_QWORD *)(a1 + 352)));
  v71 = 0;
  (*(void (**)(_QWORD, unsigned int *))(*(_QWORD *)*v41 + 112))(*v41, &v71);
  objc_msgSend(v10, "setRssi:", v71);
  v69[0] = 0;
  v69[1] = 0;
  v70 = 0;
  (*(void (**)(_QWORD, void **))(*(_QWORD *)*v41 + 80))(*v41, v69);
  if (v70 >= 0)
    v42 = v69;
  else
    v42 = (void **)v69[0];
  objc_msgSend(v10, "setOperatorName:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v42));
  v67[0] = 0;
  v67[1] = 0;
  v68 = 0;
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 352) + 96))(*(_QWORD *)(a1 + 352), v67);
  if (v68 >= 0)
    v43 = v67;
  else
    v43 = (void **)v67[0];
  objc_msgSend(v10, "setServiceProviderName:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v43));
  objc_msgSend(v10, "setIsLimitedService:", (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 352) + 24))(*(_QWORD *)(a1 + 352)) == 6);
  __p[0] = 0;
  __p[1] = 0;
  v66 = 0;
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 352) + 160))(*(_QWORD *)(a1 + 352), __p);
  if (v66 >= 0)
    v44 = __p;
  else
    v44 = (void **)__p[0];
  objc_msgSend(v10, "setAppBundleId:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v44));
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v45 = *(void **)(a1 + 456);
  v46 = 0;
  v47 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v61, v80, 16);
  if (v47)
  {
    v48 = *(_QWORD *)v62;
    do
    {
      for (i = 0; i != v47; i = (char *)i + 1)
      {
        if (*(_QWORD *)v62 != v48)
          objc_enumerationMutation(v45);
        v50 = *(void **)(*((_QWORD *)&v61 + 1) + 8 * (_QWORD)i);
        v51 = objc_msgSend(v10, "mcc");
        if (v51 == objc_msgSend(v50, "mcc"))
        {
          v52 = objc_msgSend(v10, "mnc");
          if (v52 == objc_msgSend(v50, "mnc"))
          {
            v53 = objc_msgSend(v10, "lac");
            if (v53 == objc_msgSend(v50, "lac"))
            {
              v54 = objc_msgSend(v10, "ci");
              v46 += v54 == objc_msgSend(v50, "ci");
            }
          }
        }
      }
      v47 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v61, v80, 16);
    }
    while (v47);
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24)) & 0x80000000) != 0
    || v46 < (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24)))
  {
    v55 = sub_1010CC684(a4);
    objc_msgSend(v10, "setNeighborGroup:", v55);

    ++*(_DWORD *)(a1 + 208);
    *(double *)(a1 + 400) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
    sub_100D05194(a1);
    v56 = *(_QWORD *)(a1 + 352);
    v60[0] = _NSConcreteStackBlock;
    v60[1] = 3221225472;
    v60[2] = sub_1010CCEEC;
    v60[3] = &unk_1021925A0;
    v60[4] = v10;
    v60[5] = a1;
    (*(void (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v56 + 128))(v56, 0, v60);
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021A0000);
    v57 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289539;
      v82 = 0;
      v83 = 2082;
      v84 = "";
      v85 = 2050;
      v86 = 0;
      v87 = 2081;
      v88 = "SCDMA";
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Dropping point - maximum point count per reached\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s}", buf, 0x26u);
    }

  }
  if (SHIBYTE(v66) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v68) < 0)
    operator delete(v67[0]);
  if (SHIBYTE(v70) < 0)
    operator delete(v69[0]);
}

void sub_1010CA050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a30 < 0)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  if (a42 < 0)
    operator delete(a37);
  _Unwind_Resume(exception_object);
}

void sub_1010CA0BC(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t *a4)
{
  unsigned int *v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  id v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  id v40;
  void **v41;
  void **v42;
  void **v43;
  void *v44;
  unint64_t v45;
  id v46;
  uint64_t v47;
  void *i;
  void *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  id v54;
  NSObject *v55;
  NSObject *v56;
  const char *v57;
  uint8_t *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  void *__p[2];
  uint64_t v64;
  void *v65[2];
  uint64_t v66;
  void *v67[2];
  uint64_t v68;
  unsigned int v69;
  _OWORD v70[8];
  uint64_t v71;
  _OWORD v72[8];
  uint64_t v73;
  _OWORD v74[8];
  uint64_t v75;
  _OWORD v76[8];
  _OWORD v77[2];
  uint8_t v78[128];
  uint8_t buf[4];
  int v80;
  __int16 v81;
  const char *v82;
  __int16 v83;
  uint64_t v84;
  __int16 v85;
  const char *v86;
  __int16 v87;
  id v88;

  v7 = (unsigned int *)sub_100706590(a3);
  v8 = *(_QWORD *)(a1 + 368);
  if (v8 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 64))(v8))
  {
    (*(void (**)(_QWORD, unsigned int *, _OWORD *))(**(_QWORD **)(a1 + 352) + 176))(*(_QWORD *)(a1 + 352), v7, a2);
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021A0000);
    v9 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Legacy SCDMA local harvesting not done", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021A0000);
      LOWORD(v67[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 2, "Legacy SCDMA local harvesting not done", v67, 2);
      v58 = (uint8_t *)v57;
      sub_100512490("Generic", 1, 0, 2, "void CLSubHarvesterCellLegacy::harvestCellScdma(const CLDaemonLocation &, const CLCell &, const std::vector<CLCell> &)", "%s\n", v57);
      if (v58 != buf)
        free(v58);
    }
  }
  v10 = objc_alloc_init((Class)CLPSCdmaCellTowerLocation);
  v11 = objc_alloc((Class)CLPLocation);
  v12 = a2[5];
  v76[4] = a2[4];
  v76[5] = v12;
  v13 = a2[3];
  v76[2] = a2[2];
  v76[3] = v13;
  *(_OWORD *)((char *)v77 + 12) = *(_OWORD *)((char *)a2 + 140);
  v14 = a2[8];
  v15 = a2[6];
  v76[7] = a2[7];
  v77[0] = v14;
  v76[6] = v15;
  v16 = a2[1];
  v76[0] = *a2;
  v76[1] = v16;
  v17 = (_QWORD *)(a1 + 56);
  v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 80))(*(_QWORD *)(a1 + 56));
  v74[0] = *(_OWORD *)v18;
  v19 = *(_OWORD *)(v18 + 16);
  v20 = *(_OWORD *)(v18 + 32);
  v21 = *(_OWORD *)(v18 + 64);
  v74[3] = *(_OWORD *)(v18 + 48);
  v74[4] = v21;
  v74[1] = v19;
  v74[2] = v20;
  v22 = *(_OWORD *)(v18 + 80);
  v23 = *(_OWORD *)(v18 + 96);
  v24 = *(_OWORD *)(v18 + 112);
  v75 = *(_QWORD *)(v18 + 128);
  v74[6] = v23;
  v74[7] = v24;
  v74[5] = v22;
  v25 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v17 + 88))(*v17);
  v72[0] = *(_OWORD *)v25;
  v26 = *(_OWORD *)(v25 + 16);
  v27 = *(_OWORD *)(v25 + 32);
  v28 = *(_OWORD *)(v25 + 64);
  v72[3] = *(_OWORD *)(v25 + 48);
  v72[4] = v28;
  v72[1] = v26;
  v72[2] = v27;
  v29 = *(_OWORD *)(v25 + 80);
  v30 = *(_OWORD *)(v25 + 96);
  v31 = *(_OWORD *)(v25 + 112);
  v73 = *(_QWORD *)(v25 + 128);
  v72[6] = v30;
  v72[7] = v31;
  v72[5] = v29;
  v32 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v17 + 96))(*v17);
  v70[0] = *(_OWORD *)v32;
  v33 = *(_OWORD *)(v32 + 16);
  v34 = *(_OWORD *)(v32 + 32);
  v35 = *(_OWORD *)(v32 + 64);
  v70[3] = *(_OWORD *)(v32 + 48);
  v70[4] = v35;
  v70[1] = v33;
  v70[2] = v34;
  v36 = *(_OWORD *)(v32 + 80);
  v37 = *(_OWORD *)(v32 + 96);
  v38 = *(_OWORD *)(v32 + 112);
  v71 = *(_QWORD *)(v32 + 128);
  v70[6] = v37;
  v70[7] = v38;
  v70[5] = v36;
  v39 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v17 + 216))(*v17);
  v40 = objc_msgSend(v11, "initWithDaemonLocation:rawMotionActivity:motionActivity:dominantMotionActivity:vehicleConnected:vehicleConnectionStateChanged:", v76, v74, v72, v70, v39, (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v17 + 208))(*v17));
  objc_msgSend(v10, "setLocation:", v40);

  objc_msgSend(v10, "setMcc:", *v7);
  objc_msgSend(v10, "setMnc:", v7[1]);
  objc_msgSend(v10, "setLac:", v7[2]);
  objc_msgSend(v10, "setCi:", v7[3]);
  objc_msgSend(v10, "setEcn0:", v7[7]);
  objc_msgSend(v10, "setRscp:", v7[6]);
  v69 = 0;
  (*(void (**)(_QWORD, unsigned int *))(**(_QWORD **)(a1 + 352) + 112))(*(_QWORD *)(a1 + 352), &v69);
  objc_msgSend(v10, "setRssi:", v69);
  v67[0] = 0;
  v67[1] = 0;
  v68 = 0;
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 352) + 80))(*(_QWORD *)(a1 + 352), v67);
  if (v68 >= 0)
    v41 = v67;
  else
    v41 = (void **)v67[0];
  objc_msgSend(v10, "setOperatorName:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v41));
  v65[0] = 0;
  v65[1] = 0;
  v66 = 0;
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 352) + 96))(*(_QWORD *)(a1 + 352), v65);
  if (v66 >= 0)
    v42 = v65;
  else
    v42 = (void **)v65[0];
  objc_msgSend(v10, "setServiceProviderName:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v42));
  objc_msgSend(v10, "setIsLimitedService:", (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 352) + 24))(*(_QWORD *)(a1 + 352)) == 6);
  __p[0] = 0;
  __p[1] = 0;
  v64 = 0;
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 352) + 160))(*(_QWORD *)(a1 + 352), __p);
  if (v64 >= 0)
    v43 = __p;
  else
    v43 = (void **)__p[0];
  objc_msgSend(v10, "setAppBundleId:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v43));
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v44 = *(void **)(a1 + 448);
  v45 = 0;
  v46 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v59, v78, 16);
  if (v46)
  {
    v47 = *(_QWORD *)v60;
    do
    {
      for (i = 0; i != v46; i = (char *)i + 1)
      {
        if (*(_QWORD *)v60 != v47)
          objc_enumerationMutation(v44);
        v49 = *(void **)(*((_QWORD *)&v59 + 1) + 8 * (_QWORD)i);
        v50 = objc_msgSend(v10, "mcc");
        if (v50 == objc_msgSend(v49, "mcc"))
        {
          v51 = objc_msgSend(v10, "mnc");
          if (v51 == objc_msgSend(v49, "mnc"))
          {
            v52 = objc_msgSend(v10, "lac");
            if (v52 == objc_msgSend(v49, "lac"))
            {
              v53 = objc_msgSend(v10, "ci");
              v45 += v53 == objc_msgSend(v49, "ci");
            }
          }
        }
      }
      v46 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v59, v78, 16);
    }
    while (v46);
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24)) & 0x80000000) != 0
    || v45 < (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24)))
  {
    v54 = sub_1010CC684(a4);
    objc_msgSend(v10, "setNeighborGroup:", v54);

    objc_msgSend(*(id *)(a1 + 384), "writeSecondaryObject:collectedAt:toField:", v10, objc_msgSend(v10, "location"), 6);
    ++*(_DWORD *)(a1 + 208);
    *(double *)(a1 + 400) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
    sub_100D05194(a1);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021A0000);
    v55 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289795;
      v80 = 0;
      v81 = 2082;
      v82 = "";
      v83 = 2050;
      v84 = 0;
      v85 = 2081;
      v86 = "SCDMA";
      v87 = 2113;
      v88 = v10;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s, \"harvest\":%{private, location:escape_only}@}", buf, 0x30u);
    }
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021A0000);
    v56 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289539;
      v80 = 0;
      v81 = 2082;
      v82 = "";
      v83 = 2050;
      v84 = 0;
      v85 = 2081;
      v86 = "SCDMA";
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Dropping point - maximum point count per reached\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s}", buf, 0x26u);
    }
  }

  if (SHIBYTE(v64) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v66) < 0)
    operator delete(v65[0]);
  if (SHIBYTE(v68) < 0)
    operator delete(v67[0]);
}

void sub_1010CA89C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a24 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (a36 < 0)
    operator delete(a31);
  _Unwind_Resume(exception_object);
}

void sub_1010CA908(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t *a4)
{
  double *v8;
  uint64_t v9;
  NSObject *v10;
  id v11;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  id v41;
  unsigned int *v42;
  void **v43;
  void **v44;
  void **v45;
  void *v46;
  unint64_t v47;
  id v48;
  uint64_t v49;
  void *i;
  void *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  id v57;
  NSObject *v58;
  NSObject *v59;
  const char *v60;
  uint8_t *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  void *__p[2];
  uint64_t v67;
  void *v68[2];
  uint64_t v69;
  void *v70[2];
  uint64_t v71;
  _OWORD v72[8];
  uint64_t v73;
  _OWORD v74[8];
  uint64_t v75;
  _OWORD v76[8];
  uint64_t v77;
  _OWORD v78[8];
  _OWORD v79[2];
  uint8_t v80[128];
  uint8_t buf[4];
  int v82;
  __int16 v83;
  const char *v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  const char *v88;
  __int16 v89;
  id v90;

  v8 = (double *)sub_100704A28(a3);
  if (*(_DWORD *)(a3 + 8) == 3)
  {
    v9 = *(_QWORD *)(a1 + 368);
    if (v9 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 64))(v9))
    {
      (*(void (**)(_QWORD, double *, _OWORD *))(**(_QWORD **)(a1 + 352) + 192))(*(_QWORD *)(a1 + 352), v8, a2);
    }
    else
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021A0000);
      v10 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Legacy CDMA local harvesting not done", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_1021A0000);
        LOWORD(v70[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 2, "Legacy CDMA local harvesting not done", v70, 2);
        v61 = (uint8_t *)v60;
        sub_100512490("Generic", 1, 0, 2, "void CLSubHarvesterCellLegacy::harvestCellCdma(const CLDaemonLocation &, const CLCell &, const std::vector<CLCell> &)", "%s\n", v60);
        if (v61 != buf)
          free(v61);
      }
    }
  }
  v11 = objc_alloc_init((Class)CLPCdmaCellTowerLocation);
  v12 = objc_alloc((Class)CLPLocation);
  v13 = a2[5];
  v78[4] = a2[4];
  v78[5] = v13;
  v14 = a2[3];
  v78[2] = a2[2];
  v78[3] = v14;
  *(_OWORD *)((char *)v79 + 12) = *(_OWORD *)((char *)a2 + 140);
  v15 = a2[8];
  v16 = a2[6];
  v78[7] = a2[7];
  v79[0] = v15;
  v78[6] = v16;
  v17 = a2[1];
  v78[0] = *a2;
  v78[1] = v17;
  v18 = (_QWORD *)(a1 + 56);
  v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 80))(*(_QWORD *)(a1 + 56));
  v76[0] = *(_OWORD *)v19;
  v20 = *(_OWORD *)(v19 + 16);
  v21 = *(_OWORD *)(v19 + 32);
  v22 = *(_OWORD *)(v19 + 64);
  v76[3] = *(_OWORD *)(v19 + 48);
  v76[4] = v22;
  v76[1] = v20;
  v76[2] = v21;
  v23 = *(_OWORD *)(v19 + 80);
  v24 = *(_OWORD *)(v19 + 96);
  v25 = *(_OWORD *)(v19 + 112);
  v77 = *(_QWORD *)(v19 + 128);
  v76[6] = v24;
  v76[7] = v25;
  v76[5] = v23;
  v26 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v18 + 88))(*v18);
  v74[0] = *(_OWORD *)v26;
  v27 = *(_OWORD *)(v26 + 16);
  v28 = *(_OWORD *)(v26 + 32);
  v29 = *(_OWORD *)(v26 + 64);
  v74[3] = *(_OWORD *)(v26 + 48);
  v74[4] = v29;
  v74[1] = v27;
  v74[2] = v28;
  v30 = *(_OWORD *)(v26 + 80);
  v31 = *(_OWORD *)(v26 + 96);
  v32 = *(_OWORD *)(v26 + 112);
  v75 = *(_QWORD *)(v26 + 128);
  v74[6] = v31;
  v74[7] = v32;
  v74[5] = v30;
  v33 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v18 + 96))(*v18);
  v72[0] = *(_OWORD *)v33;
  v34 = *(_OWORD *)(v33 + 16);
  v35 = *(_OWORD *)(v33 + 32);
  v36 = *(_OWORD *)(v33 + 64);
  v72[3] = *(_OWORD *)(v33 + 48);
  v72[4] = v36;
  v72[1] = v34;
  v72[2] = v35;
  v37 = *(_OWORD *)(v33 + 80);
  v38 = *(_OWORD *)(v33 + 96);
  v39 = *(_OWORD *)(v33 + 112);
  v73 = *(_QWORD *)(v33 + 128);
  v72[6] = v38;
  v72[7] = v39;
  v72[5] = v37;
  v40 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v18 + 216))(*v18);
  v41 = objc_msgSend(v12, "initWithDaemonLocation:rawMotionActivity:motionActivity:dominantMotionActivity:vehicleConnected:vehicleConnectionStateChanged:", v78, v76, v74, v72, v40, (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v18 + 208))(*v18));
  objc_msgSend(v11, "setLocation:", v41);

  objc_msgSend(v11, "setMcc:", *(unsigned int *)v8);
  objc_msgSend(v11, "setMnc:", *((unsigned int *)v8 + 58));
  objc_msgSend(v11, "setSid:", *((unsigned int *)v8 + 8));
  objc_msgSend(v11, "setNid:", *((unsigned int *)v8 + 9));
  objc_msgSend(v11, "setBsid:", *((unsigned int *)v8 + 11));
  objc_msgSend(v11, "setBsLatitude:", v8[9]);
  objc_msgSend(v11, "setBsLongitude:", v8[10]);
  objc_msgSend(v11, "setZoneid:", *((unsigned int *)v8 + 10));
  if (*((char *)v8 + 263) >= 0)
    v42 = (unsigned int *)(v8 + 30);
  else
    v42 = (unsigned int *)*((_QWORD *)v8 + 30);
  objc_msgSend(v11, "setSectorid:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v42));
  objc_msgSend(v11, "setSectorLatitude:", *(double *)((char *)v8 + 268));
  objc_msgSend(v11, "setSectorLongitude:", *(double *)((char *)v8 + 276));
  objc_msgSend(v11, "setBandclass:", *((unsigned int *)v8 + 12));
  objc_msgSend(v11, "setRat:", *((unsigned int *)v8 + 56));
  objc_msgSend(v11, "setCelltype:", *((unsigned int *)v8 + 57));
  objc_msgSend(v11, "setPnoffset:", *((unsigned int *)v8 + 14));
  objc_msgSend(v11, "setRscp:", *((unsigned int *)v8 + 15));
  objc_msgSend(v11, "setEcn0:", *((unsigned int *)v8 + 16));
  objc_msgSend(v11, "setChannel:", *((unsigned int *)v8 + 13));
  objc_msgSend(v11, "setLtmOffset:", *((unsigned int *)v8 + 105));
  objc_msgSend(v11, "setDayLightSavings:", *((unsigned int *)v8 + 106));
  v70[0] = 0;
  v70[1] = 0;
  v71 = 0;
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 352) + 80))(*(_QWORD *)(a1 + 352), v70);
  if (v71 >= 0)
    v43 = v70;
  else
    v43 = (void **)v70[0];
  objc_msgSend(v11, "setOperatorName:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v43));
  v68[0] = 0;
  v68[1] = 0;
  v69 = 0;
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 352) + 96))(*(_QWORD *)(a1 + 352), v68);
  if (v69 >= 0)
    v44 = v68;
  else
    v44 = (void **)v68[0];
  objc_msgSend(v11, "setServiceProviderName:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v44));
  objc_msgSend(v11, "setIsLimitedService:", (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 352) + 24))(*(_QWORD *)(a1 + 352)) == 6);
  __p[0] = 0;
  __p[1] = 0;
  v67 = 0;
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 352) + 160))(*(_QWORD *)(a1 + 352), __p);
  if (v67 >= 0)
    v45 = __p;
  else
    v45 = (void **)__p[0];
  objc_msgSend(v11, "setAppBundleId:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v45));
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v46 = *(void **)(a1 + 440);
  v47 = 0;
  v48 = objc_msgSend(v46, "countByEnumeratingWithState:objects:count:", &v62, v80, 16);
  if (v48)
  {
    v49 = *(_QWORD *)v63;
    do
    {
      for (i = 0; i != v48; i = (char *)i + 1)
      {
        if (*(_QWORD *)v63 != v49)
          objc_enumerationMutation(v46);
        v51 = *(void **)(*((_QWORD *)&v62 + 1) + 8 * (_QWORD)i);
        v52 = objc_msgSend(v11, "mcc");
        if (v52 == objc_msgSend(v51, "mcc"))
        {
          v53 = objc_msgSend(v11, "mnc");
          if (v53 == objc_msgSend(v51, "mnc"))
          {
            v54 = objc_msgSend(v11, "sid");
            if (v54 == objc_msgSend(v51, "sid"))
            {
              v55 = objc_msgSend(v11, "nid");
              if (v55 == objc_msgSend(v51, "nid"))
              {
                v56 = objc_msgSend(v11, "bsid");
                v47 += v56 == objc_msgSend(v51, "bsid");
              }
            }
          }
        }
      }
      v48 = objc_msgSend(v46, "countByEnumeratingWithState:objects:count:", &v62, v80, 16);
    }
    while (v48);
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24)) & 0x80000000) != 0
    || v47 < (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24)))
  {
    v57 = sub_1010CC684(a4);
    objc_msgSend(v11, "setNeighborGroup:", v57);

    objc_msgSend(*(id *)(a1 + 384), "writeSecondaryObject:collectedAt:toField:", v11, objc_msgSend(v11, "location"), 4);
    ++*(_DWORD *)(a1 + 208);
    *(double *)(a1 + 400) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
    sub_100D05194(a1);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021A0000);
    v58 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289795;
      v82 = 0;
      v83 = 2082;
      v84 = "";
      v85 = 2050;
      v86 = 0;
      v87 = 2081;
      v88 = "CDMA";
      v89 = 2113;
      v90 = v11;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s, \"harvest\":%{private, location:escape_only}@}", buf, 0x30u);
    }
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021A0000);
    v59 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289539;
      v82 = 0;
      v83 = 2082;
      v84 = "";
      v85 = 2050;
      v86 = 0;
      v87 = 2081;
      v88 = "CDMA";
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Dropping point - maximum point count per reached\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s}", buf, 0x26u);
    }
  }

  if (SHIBYTE(v67) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v69) < 0)
    operator delete(v68[0]);
  if (SHIBYTE(v71) < 0)
    operator delete(v70[0]);
}

void sub_1010CB1B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a24 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (a36 < 0)
    operator delete(a31);
  _Unwind_Resume(exception_object);
}

void sub_1010CB220(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t *a4)
{
  unsigned int *v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  id v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  id v40;
  void **v41;
  void **v42;
  void **v43;
  void *v44;
  unint64_t v45;
  id v46;
  uint64_t v47;
  void *i;
  void *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  id v54;
  uint64_t v55;
  NSObject *v56;
  NSObject *v57;
  const char *v58;
  uint8_t *v59;
  _QWORD v60[6];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  void *__p[2];
  uint64_t v66;
  void *v67[2];
  uint64_t v68;
  void *v69[2];
  uint64_t v70;
  unsigned int v71;
  _OWORD v72[8];
  uint64_t v73;
  _OWORD v74[8];
  uint64_t v75;
  _OWORD v76[8];
  uint64_t v77;
  _OWORD v78[8];
  _OWORD v79[2];
  uint8_t v80[128];
  uint8_t buf[4];
  int v82;
  __int16 v83;
  const char *v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  const char *v88;

  v7 = (unsigned int *)sub_1001E3CA4(a3);
  v8 = *(_QWORD *)(a1 + 368);
  if (v8 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 64))(v8))
  {
    (*(void (**)(_QWORD, unsigned int *, _OWORD *))(**(_QWORD **)(a1 + 352) + 184))(*(_QWORD *)(a1 + 352), v7, a2);
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021A0000);
    v9 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Legacy LTE local harvesting not done", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021A0000);
      LOWORD(v69[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 2, "Legacy LTE local harvesting not done", v69, 2);
      v59 = (uint8_t *)v58;
      sub_100512490("Generic", 1, 0, 2, "void CLSubHarvesterCellLegacy::harvestCellLTE(const CLDaemonLocation &, const CLCell &, const std::vector<CLCell> &)", "%s\n", v58);
      if (v59 != buf)
        free(v59);
    }
  }
  if (*(_DWORD *)(a1 + 392))
  {
    v10 = objc_alloc_init((Class)CLPLteCellTowerLocation);
    v11 = objc_alloc((Class)CLPLocation);
    v12 = a2[5];
    v78[4] = a2[4];
    v78[5] = v12;
    v13 = a2[3];
    v78[2] = a2[2];
    v78[3] = v13;
    *(_OWORD *)((char *)v79 + 12) = *(_OWORD *)((char *)a2 + 140);
    v14 = a2[8];
    v15 = a2[6];
    v78[7] = a2[7];
    v79[0] = v14;
    v78[6] = v15;
    v16 = a2[1];
    v78[0] = *a2;
    v78[1] = v16;
    v17 = (_QWORD *)(a1 + 56);
    v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 80))(*(_QWORD *)(a1 + 56));
    v76[0] = *(_OWORD *)v18;
    v19 = *(_OWORD *)(v18 + 16);
    v20 = *(_OWORD *)(v18 + 32);
    v21 = *(_OWORD *)(v18 + 64);
    v76[3] = *(_OWORD *)(v18 + 48);
    v76[4] = v21;
    v76[1] = v19;
    v76[2] = v20;
    v22 = *(_OWORD *)(v18 + 80);
    v23 = *(_OWORD *)(v18 + 96);
    v24 = *(_OWORD *)(v18 + 112);
    v77 = *(_QWORD *)(v18 + 128);
    v76[6] = v23;
    v76[7] = v24;
    v76[5] = v22;
    v25 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v17 + 88))(*v17);
    v74[0] = *(_OWORD *)v25;
    v26 = *(_OWORD *)(v25 + 16);
    v27 = *(_OWORD *)(v25 + 32);
    v28 = *(_OWORD *)(v25 + 64);
    v74[3] = *(_OWORD *)(v25 + 48);
    v74[4] = v28;
    v74[1] = v26;
    v74[2] = v27;
    v29 = *(_OWORD *)(v25 + 80);
    v30 = *(_OWORD *)(v25 + 96);
    v31 = *(_OWORD *)(v25 + 112);
    v75 = *(_QWORD *)(v25 + 128);
    v74[6] = v30;
    v74[7] = v31;
    v74[5] = v29;
    v32 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v17 + 96))(*v17);
    v72[0] = *(_OWORD *)v32;
    v33 = *(_OWORD *)(v32 + 16);
    v34 = *(_OWORD *)(v32 + 32);
    v35 = *(_OWORD *)(v32 + 64);
    v72[3] = *(_OWORD *)(v32 + 48);
    v72[4] = v35;
    v72[1] = v33;
    v72[2] = v34;
    v36 = *(_OWORD *)(v32 + 80);
    v37 = *(_OWORD *)(v32 + 96);
    v38 = *(_OWORD *)(v32 + 112);
    v73 = *(_QWORD *)(v32 + 128);
    v72[6] = v37;
    v72[7] = v38;
    v72[5] = v36;
    v39 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v17 + 216))(*v17);
    v40 = objc_msgSend(v11, "initWithDaemonLocation:rawMotionActivity:motionActivity:dominantMotionActivity:vehicleConnected:vehicleConnectionStateChanged:", v78, v76, v74, v72, v39, (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v17 + 208))(*v17));
    objc_msgSend(v10, "setLocation:", v40);

    objc_msgSend(v10, "setMcc:", *v7);
    objc_msgSend(v10, "setMnc:", v7[1]);
    objc_msgSend(v10, "setTac:", v7[2]);
    objc_msgSend(v10, "setCi:", v7[3]);
    objc_msgSend(v10, "setUarfcn:", v7[4]);
    objc_msgSend(v10, "setPid:", v7[5]);
    objc_msgSend(v10, "setBandwidth:", v7[15]);
    if ((v7[14] & 0x80000000) == 0)
      objc_msgSend(v10, "setDeploymentType:");
    objc_msgSend(v10, "setPmax:", v7[16]);
    objc_msgSend(v10, "setMaxThroughput:", v7[17]);
    objc_msgSend(v10, "setCsgIndication:", v7[18]);
    objc_msgSend(v10, "setCsgId:", v7[19]);
    objc_msgSend(v10, "setBandInfo:", v7[6]);
    objc_msgSend(v10, "setCellLatitude:", *((double *)v7 + 4));
    objc_msgSend(v10, "setCellLongitude:", *((double *)v7 + 5));
    v71 = 0;
    (*(void (**)(_QWORD, unsigned int *))(**(_QWORD **)(a1 + 352) + 112))(*(_QWORD *)(a1 + 352), &v71);
    objc_msgSend(v10, "setRssi:", v71);
    v69[0] = 0;
    v69[1] = 0;
    v70 = 0;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 352) + 80))(*(_QWORD *)(a1 + 352), v69);
    if (v70 >= 0)
      v41 = v69;
    else
      v41 = (void **)v69[0];
    objc_msgSend(v10, "setOperatorName:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v41));
    v67[0] = 0;
    v67[1] = 0;
    v68 = 0;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 352) + 96))(*(_QWORD *)(a1 + 352), v67);
    if (v68 >= 0)
      v42 = v67;
    else
      v42 = (void **)v67[0];
    objc_msgSend(v10, "setServiceProviderName:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v42));
    objc_msgSend(v10, "setIsLimitedService:", (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 352) + 24))(*(_QWORD *)(a1 + 352)) == 6);
    __p[0] = 0;
    __p[1] = 0;
    v66 = 0;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 352) + 160))(*(_QWORD *)(a1 + 352), __p);
    if (v66 >= 0)
      v43 = __p;
    else
      v43 = (void **)__p[0];
    objc_msgSend(v10, "setAppBundleId:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v43));
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v44 = *(void **)(a1 + 424);
    v45 = 0;
    v46 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v61, v80, 16);
    if (v46)
    {
      v47 = *(_QWORD *)v62;
      do
      {
        for (i = 0; i != v46; i = (char *)i + 1)
        {
          if (*(_QWORD *)v62 != v47)
            objc_enumerationMutation(v44);
          v49 = *(void **)(*((_QWORD *)&v61 + 1) + 8 * (_QWORD)i);
          v50 = objc_msgSend(v10, "mcc");
          if (v50 == objc_msgSend(v49, "mcc"))
          {
            v51 = objc_msgSend(v10, "mnc");
            if (v51 == objc_msgSend(v49, "mnc"))
            {
              v52 = objc_msgSend(v10, "tac");
              if (v52 == objc_msgSend(v49, "tac"))
              {
                v53 = objc_msgSend(v10, "ci");
                v45 += v53 == objc_msgSend(v49, "ci");
              }
            }
          }
        }
        v46 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v61, v80, 16);
      }
      while (v46);
    }
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24)) & 0x80000000) != 0
      || v45 < (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24)))
    {
      v54 = sub_1010CC684(a4);
      objc_msgSend(v10, "setNeighborGroup:", v54);

      ++*(_DWORD *)(a1 + 208);
      *(double *)(a1 + 400) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
      sub_100D05194(a1);
      v55 = *(_QWORD *)(a1 + 352);
      v60[0] = _NSConcreteStackBlock;
      v60[1] = 3221225472;
      v60[2] = sub_1010CD06C;
      v60[3] = &unk_1021925A0;
      v60[4] = v10;
      v60[5] = a1;
      (*(void (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v55 + 128))(v55, 0, v60);
    }
    else
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021A0000);
      v57 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289539;
        v82 = 0;
        v83 = 2082;
        v84 = "";
        v85 = 2050;
        v86 = 0;
        v87 = 2081;
        v88 = "LTE";
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Dropping point - maximum point count per reached\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s}", buf, 0x26u);
      }

    }
    if (SHIBYTE(v66) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v68) < 0)
      operator delete(v67[0]);
    if (SHIBYTE(v70) < 0)
      operator delete(v69[0]);
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021A0000);
    v56 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289539;
      v82 = 0;
      v83 = 2082;
      v84 = "";
      v85 = 2050;
      v86 = 0;
      v87 = 2081;
      v88 = "LTE";
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Dropping point - maximum point count reached\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s}", buf, 0x26u);
    }
  }
}

void sub_1010CBA98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a30 < 0)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  if (a42 < 0)
    operator delete(a37);
  _Unwind_Resume(exception_object);
}

void sub_1010CBB04(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t *a4)
{
  unsigned int *v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  id v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  id v40;
  void **v41;
  void **v42;
  void **v43;
  void *v44;
  unint64_t v45;
  id v46;
  uint64_t v47;
  void *i;
  void *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  id v53;
  id v54;
  uint64_t v55;
  NSObject *v56;
  NSObject *v57;
  const char *v58;
  uint8_t *v59;
  _QWORD v60[6];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  void *__p[2];
  uint64_t v66;
  void *v67[2];
  uint64_t v68;
  void *v69[2];
  uint64_t v70;
  unsigned int v71;
  _OWORD v72[8];
  uint64_t v73;
  _OWORD v74[8];
  uint64_t v75;
  _OWORD v76[8];
  uint64_t v77;
  _OWORD v78[8];
  _OWORD v79[2];
  uint8_t v80[128];
  uint8_t buf[4];
  int v82;
  __int16 v83;
  const char *v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  const char *v88;

  v7 = (unsigned int *)sub_1007073B4(a3);
  v8 = *(_QWORD *)(a1 + 368);
  if (v8 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 64))(v8))
  {
    (*(void (**)(_QWORD, unsigned int *, _OWORD *))(**(_QWORD **)(a1 + 352) + 200))(*(_QWORD *)(a1 + 352), v7, a2);
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021A0000);
    v9 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Legacy NR local harvesting not done", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021A0000);
      LOWORD(v69[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 2, "Legacy NR local harvesting not done", v69, 2);
      v59 = (uint8_t *)v58;
      sub_100512490("Generic", 1, 0, 2, "void CLSubHarvesterCellLegacy::harvestCellNR(const CLDaemonLocation &, const CLCell &, const std::vector<CLCell> &)", "%s\n", v58);
      if (v59 != buf)
        free(v59);
    }
  }
  if (*(_DWORD *)(a1 + 392))
  {
    v10 = objc_alloc_init((Class)CLPNRCellTowerLocation);
    v11 = objc_alloc((Class)CLPLocation);
    v12 = a2[5];
    v78[4] = a2[4];
    v78[5] = v12;
    v13 = a2[3];
    v78[2] = a2[2];
    v78[3] = v13;
    *(_OWORD *)((char *)v79 + 12) = *(_OWORD *)((char *)a2 + 140);
    v14 = a2[8];
    v15 = a2[6];
    v78[7] = a2[7];
    v79[0] = v14;
    v78[6] = v15;
    v16 = a2[1];
    v78[0] = *a2;
    v78[1] = v16;
    v17 = (_QWORD *)(a1 + 56);
    v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 80))(*(_QWORD *)(a1 + 56));
    v76[0] = *(_OWORD *)v18;
    v19 = *(_OWORD *)(v18 + 16);
    v20 = *(_OWORD *)(v18 + 32);
    v21 = *(_OWORD *)(v18 + 64);
    v76[3] = *(_OWORD *)(v18 + 48);
    v76[4] = v21;
    v76[1] = v19;
    v76[2] = v20;
    v22 = *(_OWORD *)(v18 + 80);
    v23 = *(_OWORD *)(v18 + 96);
    v24 = *(_OWORD *)(v18 + 112);
    v77 = *(_QWORD *)(v18 + 128);
    v76[6] = v23;
    v76[7] = v24;
    v76[5] = v22;
    v25 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v17 + 88))(*v17);
    v74[0] = *(_OWORD *)v25;
    v26 = *(_OWORD *)(v25 + 16);
    v27 = *(_OWORD *)(v25 + 32);
    v28 = *(_OWORD *)(v25 + 64);
    v74[3] = *(_OWORD *)(v25 + 48);
    v74[4] = v28;
    v74[1] = v26;
    v74[2] = v27;
    v29 = *(_OWORD *)(v25 + 80);
    v30 = *(_OWORD *)(v25 + 96);
    v31 = *(_OWORD *)(v25 + 112);
    v75 = *(_QWORD *)(v25 + 128);
    v74[6] = v30;
    v74[7] = v31;
    v74[5] = v29;
    v32 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v17 + 96))(*v17);
    v72[0] = *(_OWORD *)v32;
    v33 = *(_OWORD *)(v32 + 16);
    v34 = *(_OWORD *)(v32 + 32);
    v35 = *(_OWORD *)(v32 + 64);
    v72[3] = *(_OWORD *)(v32 + 48);
    v72[4] = v35;
    v72[1] = v33;
    v72[2] = v34;
    v36 = *(_OWORD *)(v32 + 80);
    v37 = *(_OWORD *)(v32 + 96);
    v38 = *(_OWORD *)(v32 + 112);
    v73 = *(_QWORD *)(v32 + 128);
    v72[6] = v37;
    v72[7] = v38;
    v72[5] = v36;
    v39 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v17 + 216))(*v17);
    v40 = objc_msgSend(v11, "initWithDaemonLocation:rawMotionActivity:motionActivity:dominantMotionActivity:vehicleConnected:vehicleConnectionStateChanged:", v78, v76, v74, v72, v39, (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v17 + 208))(*v17));
    objc_msgSend(v10, "setLocation:", v40);

    objc_msgSend(v10, "setMcc:", *v7);
    objc_msgSend(v10, "setMnc:", v7[1]);
    objc_msgSend(v10, "setTac:", v7[2]);
    objc_msgSend(v10, "setCi:", *((_QWORD *)v7 + 2));
    objc_msgSend(v10, "setNrarfcn:", v7[6]);
    objc_msgSend(v10, "setPid:", v7[7]);
    objc_msgSend(v10, "setScs:", v7[16]);
    objc_msgSend(v10, "setGscn:", v7[17]);
    objc_msgSend(v10, "setBandInfo:", v7[8]);
    objc_msgSend(v10, "setCellLatitude:", *((double *)v7 + 5));
    objc_msgSend(v10, "setCellLongitude:", *((double *)v7 + 6));
    objc_msgSend(v10, "setBandwidth:", v7[18]);
    objc_msgSend(v10, "setPmax:", v7[19]);
    objc_msgSend(v10, "setMaxThroughput:", v7[20]);
    objc_msgSend(v10, "setBwpSupport:", v7[22]);
    v71 = 0;
    (*(void (**)(_QWORD, unsigned int *))(**(_QWORD **)(a1 + 352) + 112))(*(_QWORD *)(a1 + 352), &v71);
    objc_msgSend(v10, "setRssi:", v71);
    v69[0] = 0;
    v69[1] = 0;
    v70 = 0;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 352) + 80))(*(_QWORD *)(a1 + 352), v69);
    if (v70 >= 0)
      v41 = v69;
    else
      v41 = (void **)v69[0];
    objc_msgSend(v10, "setOperatorName:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v41));
    v67[0] = 0;
    v67[1] = 0;
    v68 = 0;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 352) + 96))(*(_QWORD *)(a1 + 352), v67);
    if (v68 >= 0)
      v42 = v67;
    else
      v42 = (void **)v67[0];
    objc_msgSend(v10, "setServiceProviderName:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v42));
    objc_msgSend(v10, "setIsLimitedService:", (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 352) + 24))(*(_QWORD *)(a1 + 352)) == 6);
    __p[0] = 0;
    __p[1] = 0;
    v66 = 0;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 352) + 160))(*(_QWORD *)(a1 + 352), __p);
    if (v66 >= 0)
      v43 = __p;
    else
      v43 = (void **)__p[0];
    objc_msgSend(v10, "setAppBundleId:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v43));
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v44 = *(void **)(a1 + 432);
    v45 = 0;
    v46 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v61, v80, 16);
    if (v46)
    {
      v47 = *(_QWORD *)v62;
      do
      {
        for (i = 0; i != v46; i = (char *)i + 1)
        {
          if (*(_QWORD *)v62 != v47)
            objc_enumerationMutation(v44);
          v49 = *(void **)(*((_QWORD *)&v61 + 1) + 8 * (_QWORD)i);
          v50 = objc_msgSend(v10, "mcc");
          if (v50 == objc_msgSend(v49, "mcc"))
          {
            v51 = objc_msgSend(v10, "mnc");
            if (v51 == objc_msgSend(v49, "mnc"))
            {
              v52 = objc_msgSend(v10, "tac");
              if (v52 == objc_msgSend(v49, "tac"))
              {
                v53 = objc_msgSend(v10, "ci");
                v45 += v53 == objc_msgSend(v49, "ci");
              }
            }
          }
        }
        v46 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v61, v80, 16);
      }
      while (v46);
    }
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24)) & 0x80000000) != 0
      || v45 < (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24)))
    {
      v54 = sub_1010CC684(a4);
      objc_msgSend(v10, "setNeighborGroup:", v54);

      ++*(_DWORD *)(a1 + 208);
      *(double *)(a1 + 400) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
      sub_100D05194(a1);
      v55 = *(_QWORD *)(a1 + 352);
      v60[0] = _NSConcreteStackBlock;
      v60[1] = 3221225472;
      v60[2] = sub_1010CD50C;
      v60[3] = &unk_1021925A0;
      v60[4] = v10;
      v60[5] = a1;
      (*(void (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v55 + 128))(v55, 0, v60);
    }
    else
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021A0000);
      v57 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289539;
        v82 = 0;
        v83 = 2082;
        v84 = "";
        v85 = 2050;
        v86 = 0;
        v87 = 2081;
        v88 = "NR5G";
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Dropping point - maximum point count per reached\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s}", buf, 0x26u);
      }

    }
    if (SHIBYTE(v66) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v68) < 0)
      operator delete(v67[0]);
    if (SHIBYTE(v70) < 0)
      operator delete(v69[0]);
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021A0000);
    v56 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289539;
      v82 = 0;
      v83 = 2082;
      v84 = "";
      v85 = 2050;
      v86 = 0;
      v87 = 2081;
      v88 = "NR";
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Dropping point - maximum point count reached\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s}", buf, 0x26u);
    }
  }
}

void sub_1010CC378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a30 < 0)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  if (a42 < 0)
    operator delete(a37);
  _Unwind_Resume(exception_object);
}

id sub_1010CC3E4(uint64_t a1)
{
  double v2;
  double v3;

  v2 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
  v3 = v2 - (*(double (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  return _objc_msgSend(*(id *)(a1 + 72), "pruneSecondaryDataOlderThan:forHarvester:", 0, v3);
}

id sub_1010CC438(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 72), "clearDataForHarvester:", 0);
}

void sub_1010CC444(uint64_t a1, _OWORD *a2)
{
  __int128 v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  uint64_t v8[4];
  _OWORD v9[2];
  uint8_t buf[8];
  void *v11;
  void *v12;
  void *__p;
  char v14;

  *(_QWORD *)&v4 = -1;
  *((_QWORD *)&v4 + 1) = -1;
  v9[0] = v4;
  v9[1] = v4;
  if (((*(uint64_t (**)(_QWORD, _OWORD *))(**(_QWORD **)(a1 + 352) + 72))(*(_QWORD *)(a1 + 352), v9) & 1) != 0)
  {
    memset(v8, 0, 24);
    sub_101347FF0(buf, v9, 0);
    sub_1010C98C8(a1, a2, (uint64_t)buf, v8);
    if (v14 < 0)
      operator delete(__p);
    if (v11)
    {
      v12 = v11;
      operator delete(v11);
    }
    *(_QWORD *)buf = v8;
    sub_10087B4F8((void ***)buf);
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021A0000);
    v5 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#warning could not retrieve serving cell info", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021A0000);
      LOWORD(v8[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 0, "#warning could not retrieve serving cell info", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLSubHarvesterCellLegacy::harvestCell2G(const CLDaemonLocation &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_1010CC650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  sub_1005A1100((uint64_t)&a19);
  a19 = (void **)&a11;
  sub_10087B4F8(&a19);
  _Unwind_Resume(a1);
}

id sub_1010CC684(uint64_t *a1)
{
  id v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  id v71;
  void *v72;
  unsigned int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  NSObject *v79;
  void **v80;
  NSObject *v81;
  void **v82;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  id v92;
  void *v93[2];
  char v94;
  _OWORD v95[3];
  _BYTE v96[28];
  int v97;
  void *v98;
  void *v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  _OWORD v112[2];
  __int128 __p;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  int v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  int v137;
  uint8_t buf[4];
  int v139;
  _BYTE v140[40];
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  _OWORD v151[2];
  __int128 v152;
  uint64_t v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  int v164;

  v2 = objc_alloc_init((Class)CLPCellNeighborsGroup);
  v3 = *a1;
  v91 = a1[1];
  v92 = v2;
  if (*a1 != v91)
  {
    do
    {
      v95[0] = *(_OWORD *)v3;
      v4 = *(_OWORD *)(v3 + 16);
      v5 = *(_OWORD *)(v3 + 32);
      v6 = *(_OWORD *)(v3 + 48);
      *(_OWORD *)&v96[12] = *(_OWORD *)(v3 + 60);
      v95[2] = v5;
      *(_OWORD *)v96 = v6;
      v95[1] = v4;
      v97 = *(_DWORD *)(v3 + 80);
      v99 = 0;
      v100 = 0;
      v98 = 0;
      sub_10027205C(&v98, *(const void **)(v3 + 88), *(_QWORD *)(v3 + 96), (uint64_t)(*(_QWORD *)(v3 + 96) - *(_QWORD *)(v3 + 88)) >> 2);
      v101 = *(_OWORD *)(v3 + 112);
      v7 = *(_OWORD *)(v3 + 128);
      v8 = *(_OWORD *)(v3 + 144);
      v9 = *(_OWORD *)(v3 + 176);
      v104 = *(_OWORD *)(v3 + 160);
      v105 = v9;
      v102 = v7;
      v103 = v8;
      v10 = *(_OWORD *)(v3 + 192);
      v11 = *(_OWORD *)(v3 + 208);
      v12 = *(_OWORD *)(v3 + 240);
      v108 = *(_OWORD *)(v3 + 224);
      v109 = v12;
      v106 = v10;
      v107 = v11;
      v13 = *(_OWORD *)(v3 + 256);
      v14 = *(_OWORD *)(v3 + 272);
      v15 = *(_OWORD *)(v3 + 288);
      *(_OWORD *)((char *)v112 + 12) = *(_OWORD *)(v3 + 300);
      v111 = v14;
      v112[0] = v15;
      v110 = v13;
      if (*(char *)(v3 + 343) < 0)
      {
        sub_100115CE4(&__p, *(void **)(v3 + 320), *(_QWORD *)(v3 + 328));
      }
      else
      {
        v16 = *(_OWORD *)(v3 + 320);
        v114 = *(_QWORD *)(v3 + 336);
        __p = v16;
      }
      v17 = *(_OWORD *)(v3 + 344);
      v18 = *(_OWORD *)(v3 + 376);
      v116 = *(_OWORD *)(v3 + 360);
      v117 = v18;
      v115 = v17;
      v19 = *(_OWORD *)(v3 + 392);
      v20 = *(_OWORD *)(v3 + 408);
      v21 = *(_OWORD *)(v3 + 440);
      v120 = *(_OWORD *)(v3 + 424);
      v121 = v21;
      v118 = v19;
      v119 = v20;
      v22 = *(_OWORD *)(v3 + 456);
      v23 = *(_OWORD *)(v3 + 472);
      v24 = *(_OWORD *)(v3 + 488);
      v125 = *(_DWORD *)(v3 + 504);
      v123 = v23;
      v124 = v24;
      v122 = v22;
      v25 = *(_OWORD *)(v3 + 512);
      v26 = *(_OWORD *)(v3 + 528);
      v27 = *(_OWORD *)(v3 + 560);
      v128 = *(_OWORD *)(v3 + 544);
      v129 = v27;
      v126 = v25;
      v127 = v26;
      v28 = *(_OWORD *)(v3 + 576);
      v29 = *(_OWORD *)(v3 + 592);
      v30 = *(_OWORD *)(v3 + 624);
      v132 = *(_OWORD *)(v3 + 608);
      v133 = v30;
      v130 = v28;
      v131 = v29;
      v31 = *(_OWORD *)(v3 + 640);
      v32 = *(_OWORD *)(v3 + 656);
      v33 = *(_OWORD *)(v3 + 672);
      v137 = *(_DWORD *)(v3 + 688);
      v135 = v32;
      v136 = v33;
      v134 = v31;
      if (DWORD1(v95[0]) != 1)
      {
        sub_10193E490();
        abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Harvester/Subharvesters/Cell/CLSubHarvesterCellLegacy.mm", 59, "CLCopyNeighborsGroupForCells");
        __break(1u);
      }
      if (DWORD2(v95[0]) < 3)
        goto LABEL_9;
      if (DWORD2(v95[0]) == 9)
      {
        v40 = (unsigned int *)sub_100706590((uint64_t)v95);
        v41 = v40[4];
        v42 = v40[5];
        v43 = v40[6];
        v44 = v40[7];
        v45 = objc_alloc_init((Class)CLPCellNeighbor);
        objc_msgSend(v45, "setEcn0:", v44);
        objc_msgSend(v45, "setPsc:", v42);
        objc_msgSend(v45, "setRscp:", v43);
        objc_msgSend(v45, "setRssi:", 0xFFFFFFFFLL);
        objc_msgSend(v45, "setUarfcn:", v41);
        objc_msgSend(v92, "addScdmaNeighbors:", v45);

        goto LABEL_10;
      }
      if (DWORD2(v95[0]) == 7)
      {
LABEL_9:
        v34 = (unsigned int *)sub_1007057DC((uint64_t)v95);
        v35 = v34[4];
        v36 = v34[5];
        v37 = v34[6];
        v38 = v34[7];
        v39 = objc_alloc_init((Class)CLPCellNeighbor);
        objc_msgSend(v39, "setEcn0:", v38);
        objc_msgSend(v39, "setPsc:", v36);
        objc_msgSend(v39, "setRscp:", v37);
        objc_msgSend(v39, "setRssi:", 0xFFFFFFFFLL);
        objc_msgSend(v39, "setUarfcn:", v35);
        objc_msgSend(v92, "addGsmNeighbors:", v39);

      }
      else
      {
        if ((DWORD2(v95[0]) - 3) <= 2)
        {
          v46 = sub_100704A28((uint64_t)v95);
          *(_DWORD *)buf = *(_DWORD *)v46;
          memset(v140, 0, 24);
          sub_10027205C(v140, *(const void **)(v46 + 8), *(_QWORD *)(v46 + 16), (uint64_t)(*(_QWORD *)(v46 + 16) - *(_QWORD *)(v46 + 8)) >> 2);
          *(_OWORD *)&v140[24] = *(_OWORD *)(v46 + 32);
          v47 = *(_OWORD *)(v46 + 48);
          v48 = *(_OWORD *)(v46 + 64);
          v49 = *(_OWORD *)(v46 + 96);
          v143 = *(_OWORD *)(v46 + 80);
          v144 = v49;
          v141 = v47;
          v142 = v48;
          v50 = *(_OWORD *)(v46 + 112);
          v51 = *(_OWORD *)(v46 + 128);
          v52 = *(_OWORD *)(v46 + 160);
          v147 = *(_OWORD *)(v46 + 144);
          v148 = v52;
          v145 = v50;
          v146 = v51;
          v53 = *(_OWORD *)(v46 + 176);
          v54 = *(_OWORD *)(v46 + 192);
          v55 = *(_OWORD *)(v46 + 208);
          *(_OWORD *)((char *)v151 + 12) = *(_OWORD *)(v46 + 220);
          v150 = v54;
          v151[0] = v55;
          v149 = v53;
          if (*(char *)(v46 + 263) < 0)
          {
            sub_100115CE4(&v152, *(void **)(v46 + 240), *(_QWORD *)(v46 + 248));
          }
          else
          {
            v56 = *(_OWORD *)(v46 + 240);
            v153 = *(_QWORD *)(v46 + 256);
            v152 = v56;
          }
          v63 = *(_OWORD *)(v46 + 264);
          v64 = *(_OWORD *)(v46 + 296);
          v155 = *(_OWORD *)(v46 + 280);
          v156 = v64;
          v154 = v63;
          v65 = *(_OWORD *)(v46 + 312);
          v66 = *(_OWORD *)(v46 + 328);
          v67 = *(_OWORD *)(v46 + 360);
          v159 = *(_OWORD *)(v46 + 344);
          v160 = v67;
          v157 = v65;
          v158 = v66;
          v68 = *(_OWORD *)(v46 + 376);
          v69 = *(_OWORD *)(v46 + 392);
          v70 = *(_OWORD *)(v46 + 408);
          v164 = *(_DWORD *)(v46 + 424);
          v162 = v69;
          v163 = v70;
          v161 = v68;
          v71 = objc_alloc_init((Class)CLPCdmaCellNeighbor);
          objc_msgSend(v71, "setEcn0:", v142);
          objc_msgSend(v71, "setPilotPhase:", 0xFFFFFFFFLL);
          objc_msgSend(v71, "setPnoffset:", DWORD2(v141));
          objc_msgSend(v71, "setRscp:", HIDWORD(v141));
          objc_msgSend(v71, "setChannel:", DWORD1(v141));
          objc_msgSend(v92, "addCdmaNeighbors:", v71);

          if (SHIBYTE(v153) < 0)
            operator delete((void *)v152);
          v72 = *(void **)v140;
          if (!*(_QWORD *)v140)
            goto LABEL_10;
          *(_QWORD *)&v140[8] = *(_QWORD *)v140;
          goto LABEL_28;
        }
        if (DWORD2(v95[0]) == 10)
        {
          v73 = (unsigned int *)sub_1007073B4((uint64_t)v95);
          v74 = v73[6];
          v75 = v73[7];
          v76 = v73[14];
          v77 = v73[15];
          v88 = v73[21];
          v90 = v73[18];
          v84 = v73[22];
          v86 = v73[20];
          v78 = objc_alloc_init((Class)CLPNRCellNeighbor);
          objc_msgSend(v78, "setEcn0:", v77);
          objc_msgSend(v78, "setPid:", v75);
          objc_msgSend(v78, "setRscp:", v76);
          objc_msgSend(v78, "setRssi:", 0xFFFFFFFFLL);
          objc_msgSend(v78, "setNrarfcn:", v74);
          objc_msgSend(v78, "setBandwidth:", v90);
          objc_msgSend(v78, "setNeighborType:", v88);
          objc_msgSend(v78, "setMaxThroughput:", v86);
          objc_msgSend(v78, "setBwpSupport:", v84);
          objc_msgSend(v92, "addNrNeighbors:", v78);

          goto LABEL_10;
        }
        if (DWORD2(v95[0]) != 6)
        {
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_1021A0000);
          v79 = qword_1022A0208;
          if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_FAULT))
          {
            sub_101347C78((unsigned int *)v95, v93);
            v80 = v93;
            if (v94 < 0)
              v80 = (void **)v93[0];
            *(_DWORD *)buf = 68289539;
            v139 = 0;
            *(_WORD *)v140 = 2082;
            *(_QWORD *)&v140[2] = "";
            *(_WORD *)&v140[10] = 2050;
            *(_QWORD *)&v140[12] = 0;
            *(_WORD *)&v140[20] = 2081;
            *(_QWORD *)&v140[22] = v80;
            _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"failed to harvest cell\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"cell\":%{private, location:escape_only}s}", buf, 0x26u);
            if (v94 < 0)
              operator delete(v93[0]);
            if (qword_1022A0200 != -1)
              dispatch_once(&qword_1022A0200, &stru_1021A0000);
          }
          v81 = qword_1022A0208;
          if (!os_signpost_enabled((os_log_t)qword_1022A0208))
            goto LABEL_10;
          sub_101347C78((unsigned int *)v95, v93);
          v82 = v93;
          if (v94 < 0)
            v82 = (void **)v93[0];
          *(_DWORD *)buf = 68289539;
          v139 = 0;
          *(_WORD *)v140 = 2082;
          *(_QWORD *)&v140[2] = "";
          *(_WORD *)&v140[10] = 2050;
          *(_QWORD *)&v140[12] = 0;
          *(_WORD *)&v140[20] = 2081;
          *(_QWORD *)&v140[22] = v82;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v81, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "failed to harvest cell", "{\"msg%{public}.0s\":\"failed to harvest cell\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"cell\":%{private, location:escape_only}s}", buf, 0x26u);
          if ((v94 & 0x80000000) == 0)
            goto LABEL_10;
          v72 = v93[0];
LABEL_28:
          operator delete(v72);
          goto LABEL_10;
        }
        v57 = (unsigned int *)sub_1001E3CA4((uint64_t)v95);
        v58 = v57[4];
        v59 = v57[5];
        v60 = v57[12];
        v61 = v57[13];
        v85 = v57[17];
        v87 = v57[20];
        v89 = v57[15];
        v62 = objc_alloc_init((Class)CLPLteCellNeighbor);
        objc_msgSend(v62, "setEcn0:", v61);
        objc_msgSend(v62, "setPid:", v59);
        objc_msgSend(v62, "setRscp:", v60);
        objc_msgSend(v62, "setRssi:", 0xFFFFFFFFLL);
        objc_msgSend(v62, "setUarfcn:", v58);
        objc_msgSend(v62, "setBandwidth:", v89);
        objc_msgSend(v62, "setNeighborType:", v87);
        objc_msgSend(v62, "setMaxThroughput:", v85);
        objc_msgSend(v92, "addLteNeighbors:", v62);

      }
LABEL_10:
      if (SHIBYTE(v114) < 0)
        operator delete((void *)__p);
      if (v98)
      {
        v99 = v98;
        operator delete(v98);
      }
      v3 += 696;
    }
    while (v3 != v91);
  }
  return v92;
}

void sub_1010CCE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_1005A1100((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_1010CCEEC(uint64_t a1, void *a2)
{
  uint64_t v3;
  NSObject *v5;
  uint64_t v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  v3 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "setRscp:", objc_msgSend(objc_msgSend(a2, "rscp"), "intValue"));
    objc_msgSend(*(id *)(a1 + 32), "setEcn0:", objc_msgSend(objc_msgSend(a2, "ecn0"), "intValue"));
  }
  objc_msgSend(*(id *)(v3 + 384), "writeSecondaryObject:collectedAt:toField:", *(_QWORD *)(a1 + 32), objc_msgSend(*(id *)(a1 + 32), "location"), 2);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021A0000);
  v5 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7[0] = 68289795;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2050;
    v11 = 0;
    v12 = 2081;
    v13 = "GSM";
    v14 = 2113;
    v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s, \"harvest\":%{private, location:escape_only}@}", (uint8_t *)v7, 0x30u);
  }

}

void sub_1010CD06C(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  _QWORD v9[6];
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  v3 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "setRscp:", objc_msgSend(objc_msgSend(a2, "rsrp"), "intValue"));
    objc_msgSend(*(id *)(a1 + 32), "setEcn0:", objc_msgSend(objc_msgSend(a2, "snr"), "intValue"));
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 56) + 152))(*(_QWORD *)(v3 + 56)) & 1) != 0)
  {
    v5 = *(_QWORD *)(v3 + 352);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1010CD2E0;
    v9[3] = &unk_1021925C8;
    v9[4] = *(_QWORD *)(a1 + 32);
    v9[5] = v3;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 152))(v5, v9);
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021A0000);
    v6 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2050;
      v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"DiagnosticsSubmission is not allowed\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
    }
    objc_msgSend(*(id *)(v3 + 384), "writeSecondaryObject:collectedAt:toField:", *(_QWORD *)(a1 + 32), objc_msgSend(*(id *)(a1 + 32), "location"), 5);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021A0000);
    v7 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 68289795;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2050;
      v15 = 0;
      v16 = 2081;
      v17 = "LTE";
      v18 = 2113;
      v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s, \"harvest\":%{private, location:escape_only}@}", buf, 0x30u);
    }

  }
}

void sub_1010CD2E0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  _BYTE v19[10];
  const char *v20;
  _DWORD v21[4];

  v10 = *(_QWORD *)(a1 + 40);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021A0000);
  v11 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v14 = 68290050;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 1026;
    *(_DWORD *)v19 = a2;
    *(_WORD *)&v19[4] = 1026;
    *(_DWORD *)&v19[6] = a3;
    LOWORD(v20) = 1026;
    *(_DWORD *)((char *)&v20 + 2) = a4;
    HIWORD(v20) = 1026;
    v21[0] = a5;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#irat streamingInfo\", \"isValidMetrics\":%{public}hhd, \"downlinkBandwidth\":%{public}d, \"isStalled\":%{public}hhd, \"latency\":%{public}d}", (uint8_t *)&v14, 0x2Au);
  }
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "setDownlinkBandwidth:", a3);
    objc_msgSend(*(id *)(a1 + 32), "setIsStalled:", a4);
    objc_msgSend(*(id *)(a1 + 32), "setLatency:", a5);
  }
  objc_msgSend(*(id *)(v10 + 384), "writeSecondaryObject:collectedAt:toField:", *(_QWORD *)(a1 + 32), objc_msgSend(*(id *)(a1 + 32), "location"), 5);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021A0000);
  v12 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v13 = *(_QWORD *)(a1 + 32);
    v14 = 68289795;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2050;
    *(_QWORD *)v19 = 0;
    *(_WORD *)&v19[8] = 2081;
    v20 = "LTE";
    LOWORD(v21[0]) = 2113;
    *(_QWORD *)((char *)v21 + 2) = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s, \"harvest\":%{private, location:escape_only}@}", (uint8_t *)&v14, 0x30u);
  }

}

void sub_1010CD50C(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  _QWORD v9[6];
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  v3 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "setRscp:", objc_msgSend(objc_msgSend(a2, "rsrp"), "intValue"));
    objc_msgSend(*(id *)(a1 + 32), "setEcn0:", objc_msgSend(objc_msgSend(a2, "snr"), "intValue"));
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 56) + 152))(*(_QWORD *)(v3 + 56)) & 1) != 0)
  {
    v5 = *(_QWORD *)(v3 + 352);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1010CD780;
    v9[3] = &unk_1021925C8;
    v9[4] = *(_QWORD *)(a1 + 32);
    v9[5] = v3;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 152))(v5, v9);
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021A0000);
    v6 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2050;
      v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"DiagnosticsSubmission is not allowed\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
    }
    objc_msgSend(*(id *)(v3 + 384), "writeSecondaryObject:collectedAt:toField:", *(_QWORD *)(a1 + 32), objc_msgSend(*(id *)(a1 + 32), "location"), 8);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021A0000);
    v7 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 68289795;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2050;
      v15 = 0;
      v16 = 2081;
      v17 = "NR5G";
      v18 = 2113;
      v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s, \"harvest\":%{private, location:escape_only}@}", buf, 0x30u);
    }

  }
}

void sub_1010CD780(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  _BYTE v19[10];
  const char *v20;
  _DWORD v21[4];

  v10 = *(_QWORD *)(a1 + 40);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021A0000);
  v11 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v14 = 68290050;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 1026;
    *(_DWORD *)v19 = a2;
    *(_WORD *)&v19[4] = 1026;
    *(_DWORD *)&v19[6] = a3;
    LOWORD(v20) = 1026;
    *(_DWORD *)((char *)&v20 + 2) = a4;
    HIWORD(v20) = 1026;
    v21[0] = a5;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#irat streamingInfo\", \"isValidMetrics\":%{public}hhd, \"downlinkBandwidth\":%{public}d, \"isStalled\":%{public}hhd, \"latency\":%{public}d}", (uint8_t *)&v14, 0x2Au);
  }
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "setDownlinkBandwidth:", a3);
    objc_msgSend(*(id *)(a1 + 32), "setIsStalled:", a4);
    objc_msgSend(*(id *)(a1 + 32), "setLatency:", a5);
  }
  objc_msgSend(*(id *)(v10 + 384), "writeSecondaryObject:collectedAt:toField:", *(_QWORD *)(a1 + 32), objc_msgSend(*(id *)(a1 + 32), "location"), 8);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021A0000);
  v12 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v13 = *(_QWORD *)(a1 + 32);
    v14 = 68289795;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2050;
    *(_QWORD *)v19 = 0;
    *(_WORD *)&v19[8] = 2081;
    v20 = "NR5G";
    LOWORD(v21[0]) = 2113;
    *(_QWORD *)((char *)v21 + 2) = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s, \"harvest\":%{private, location:escape_only}@}", (uint8_t *)&v14, 0x30u);
  }

}

uint64_t sub_1010CD9AC(_QWORD *a1)
{
  *a1 = off_10219FF20;
  sub_100261F44((uint64_t)(a1 + 46));
  sub_100261F44((uint64_t)(a1 + 44));
  return sub_100429668((uint64_t)a1);
}

void sub_1010CD9E8(_QWORD *a1)
{
  *a1 = off_10219FF20;
  sub_100261F44((uint64_t)(a1 + 46));
  sub_100261F44((uint64_t)(a1 + 44));
  sub_100429668((uint64_t)a1);
  operator delete();
}

void sub_1010CDA38(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_1010CDA64()
{
  return sub_1011E780C((uint64_t)&xmmword_10230C4F0, 0, 2, 2, 1, 60.0, 43200.0, 43200.0);
}

void sub_1010CDAA4(unsigned int a1@<W0>, char a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  std::string __str;

  sub_1015A2E04(&__str, "CLGeoMapFeatureAccessGeometryVehicle");
  if (a1 < 4)
    std::string::assign(&__str, (&off_1021A00F8)[a1]);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 32) = 0x3FE0000000000000;
  *(_WORD *)(a4 + 40) = 0;
  *(_OWORD *)(a4 + 48) = xmmword_101BDB710;
  *(_WORD *)(a4 + 64) = 1;
  *(_OWORD *)(a4 + 72) = xmmword_101BDB720;
  *(_WORD *)(a4 + 88) = 1;
  *(_DWORD *)(a4 + 92) = 0;
  std::string::operator=((std::string *)a4, &__str);
  *(_DWORD *)(a4 + 24) = a1;
  *(_QWORD *)(a4 + 32) = 0x3FE0000000000000;
  *(_BYTE *)(a4 + 41) = a2;
  *(_BYTE *)(a4 + 40) = 1;
  *(double *)(a4 + 48) = (double)a3;
  *(_WORD *)(a4 + 88) = 256;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1010CDB8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010CDBC0(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t i;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  *(_QWORD *)a1 = off_1021A0030;
  *(_QWORD *)(a1 + 8) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 31) = 0;
  *(_QWORD *)(a1 + 48) = 0xBFF0000000000000;
  sub_1002433B8(a1 + 56);
  v2 = 5489;
  *(_DWORD *)(a1 + 96) = 5489;
  v3 = 1;
  for (i = 25; i != 648; ++i)
  {
    v5 = 1812433253 * (v2 ^ (v2 >> 30));
    v2 = v5 + v3;
    *(_DWORD *)(a1 + 4 * i) = i + v5 - 24;
    ++v3;
  }
  v6 = 0;
  *(_QWORD *)(a1 + 2632) = 0;
  *(_QWORD *)(a1 + 2624) = 0;
  *(_QWORD *)(a1 + 2592) = 0;
  *(_QWORD *)(a1 + 2608) = 0;
  *(_QWORD *)(a1 + 2600) = 0;
  *(_QWORD *)(a1 + 2616) = a1 + 2624;
  *(_QWORD *)(a1 + 2640) = 0xBFF0000000000000;
  v7 = 1;
  v8 = 25;
  *(_DWORD *)(a1 + 96) = 0;
  do
  {
    v9 = 1812433253 * (v6 ^ (v6 >> 30));
    v6 = v9 + v7;
    *(_DWORD *)(a1 + 4 * v8) = v8 + v9 - 24;
    ++v7;
    ++v8;
  }
  while (v8 != 648);
  *(_QWORD *)(a1 + 2592) = 0;
  sub_100EF4184();
  return a1;
}

void sub_1010CDCC4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  char **v3;

  sub_10083C674(v2, *v3);
  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010CDCEC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  *(_QWORD *)a1 = off_1021A0030;
  if (!*(_BYTE *)(a1 + 33))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A00D8);
    v2 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLMM,CLGCZ,destroy geocodec malloc zone,~CLGeoMapFeatureAccessGeometry()", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A00D8);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 0, "CLMM,CLGCZ,destroy geocodec malloc zone,~CLGeoMapFeatureAccessGeometry()", v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "virtual CLMapGeometry::~CLMapGeometry()", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
      sub_1010CF6F8(v3);
    v4 = *(id *)(a1 + 2600);
    if (v4)
      v4 = objc_msgSend(v4, "clearAllTiles");
    v5 = *(void **)(a1 + 2608);
    if (v5)
    {

      *(_QWORD *)(a1 + 2608) = 0;
    }
    v6 = *(void **)(a1 + 2600);
    if (v6)
    {

      *(_QWORD *)(a1 + 2600) = 0;
    }
    GEOResetGeoCodecsAllocator(v4);
  }
  sub_10083C674(a1 + 2616, *(char **)(a1 + 2624));
  sub_100261F44(a1 + 16);
  return a1;
}

void sub_1010CDEE4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

id sub_1010CDEF0(uint64_t a1, int a2)
{
  uint64_t v4;
  id result;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    sub_1010CF6F8(v4);
  result = *(id *)(a1 + 2600);
  switch(a2)
  {
    case 0:
      result = objc_msgSend(result, "clearRoadTiles");
      break;
    case 1:
      result = objc_msgSend(result, "clearBuildingTiles");
      break;
    case 2:
      result = _objc_msgSend(result, "clearTransitTiles");
      break;
    case 3:
      result = objc_msgSend(result, "clearRunningTrackTiles");
      break;
    case 4:
      result = objc_msgSend(result, "clearAllTiles");
      break;
    default:
      return result;
  }
  return result;
}

void sub_1010CDF8C(uint64_t a1, int a2, int a3, int a4)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  std::string *p_str;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::string *v15;
  const char *v16;
  uint8_t *v17;
  std::string __str;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  std::string *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  uint8_t buf[4];
  _BYTE v33[14];
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;

  if (!*(_BYTE *)(a1 + 32) || *(unsigned __int8 *)(a1 + 33) != a2 || *(unsigned __int8 *)(a1 + 34) != a3)
  {
    *(_BYTE *)(a1 + 32) = 1;
    *(_BYTE *)(a1 + 33) = a2;
    *(_BYTE *)(a1 + 34) = a3;
    if (a2)
    {
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      sub_1010CDAA4(v6, *(_BYTE *)(a1 + 34), a4, (uint64_t)&__str);
      v9 = *(_QWORD *)(a1 + 16);
      v7 = a1 + 16;
      v8 = v9;
      if (v9)
      {
        std::string::operator=((std::string *)(v8 + 128), &__str);
        *(_OWORD *)(v8 + 168) = v20;
        *(_OWORD *)(v8 + 184) = v21;
        *(_OWORD *)(v8 + 200) = v22;
        *(_QWORD *)(v8 + 216) = v23;
        *(_OWORD *)(v8 + 152) = v19;
      }
      else
      {
        sub_10083C2D8((uint64_t **)&__str, buf);
        sub_1002B7674(v7, (__int128 *)buf);
        v12 = *(std::__shared_weak_count **)&v33[4];
        if (*(_QWORD *)&v33[4])
        {
          v13 = (unint64_t *)(*(_QWORD *)&v33[4] + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
      }
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A00D8);
      v10 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEFAULT))
      {
        p_str = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)v33 = p_str;
        *(_WORD *)&v33[8] = 1026;
        *(_DWORD *)&v33[10] = BYTE1(v20);
        v34 = 1026;
        v35 = v23;
        v36 = 1026;
        v37 = a4;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CLMM,%{public}s,initialized maps buffer,xpc,%{public}d,waitForQueryComplete,%{public}d,radius,%{public}d", buf, 0x1Eu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A00D8);
        v15 = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v15 = (std::string *)__str.__r_.__value_.__r.__words[0];
        v24 = 136446978;
        v25 = v15;
        v26 = 1026;
        v27 = BYTE1(v20);
        v28 = 1026;
        v29 = v23;
        v30 = 1026;
        v31 = a4;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 0, "CLMM,%{public}s,initialized maps buffer,xpc,%{public}d,waitForQueryComplete,%{public}d,radius,%{public}d", &v24, 30);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "void CLMapGeometry::initialize(const BOOL, const BOOL, const int)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    }
  }
}

void sub_1010CE2E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_1010CE30C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  std::string __p;

  v4 = *a2;
  if (*(char *)(*a2 + 71) < 0)
    sub_100115CE4(&__p, *(void **)(v4 + 48), *(_QWORD *)(v4 + 56));
  else
    __p = *(std::string *)(v4 + 48);
  std::string::operator=((std::string *)(a1 + 128), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v5 = *a2;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)*a2;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(v5 + 20);
  *(_OWORD *)(a1 + 152) = *((_OWORD *)a2 + 2);
  result = *((float *)a2 + 6);
  *(double *)(a1 + 168) = result;
  return result;
}

void sub_1010CE3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1010CE3C0(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[2];
  __int16 v10;
  int v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  int v15;

  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021A00D8);
  v2 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_DWORD *)(a1 + 36);
    v4 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 67240448;
    v13 = v3;
    v14 = 1026;
    v15 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLMM,MapsAPICallCount,%{public}d,MapsAPIQueryContinuousFailCount,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A00D8);
    v5 = *(_DWORD *)(a1 + 36);
    v6 = *(_DWORD *)(a1 + 40);
    v9[0] = 67240448;
    v9[1] = v5;
    v10 = 1026;
    v11 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,MapsAPICallCount,%{public}d,MapsAPIQueryContinuousFailCount,%{public}d", v9, 14);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLMapGeometry::logMapsAPICallCount() const", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

BOOL sub_1010CE588(uint64_t a1)
{
  uint64_t v2;
  int *v3;
  int v4;
  double v5;
  double v6;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  _BOOL8 result;
  uint64_t v12;
  int v13;
  int v14;
  const char *v15;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  int v19;
  int v20;
  const char *v21;
  uint64_t v22;
  int v23;
  int v24;
  const char *v25;
  const char *v26;
  uint8_t *v27;
  int v28;
  int v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  double v35;
  uint8_t buf[4];
  int v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  double v43;

  if (*(_BYTE *)(a1 + 33) && (v2 = *(_QWORD *)(a1 + 16)) != 0)
    v3 = (int *)(v2 + 124);
  else
    v3 = (int *)(a1 + 40);
  v4 = *v3;
  if (*v3 < 6)
    goto LABEL_9;
  v5 = *(double *)(a1 + 48);
  if (v5 < 0.0)
  {
    v5 = sub_1001FCBB4();
    *(double *)(a1 + 48) = v5;
  }
  v6 = vabdd_f64(v5, sub_1001FCBB4());
  if (v6 < 60.0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A00D8);
    v18 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
      v21 = "road";
      *(_DWORD *)buf = 67240962;
      v37 = v19;
      v38 = 2082;
      if (v20)
        v21 = "building";
      v39 = v21;
      v40 = 1026;
      v41 = v4;
      v42 = 2050;
      v43 = v6;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLMM,shouldBackOffFromNetworkAccess,1,geometryType,%{public}d,type,%{public}s,failCount,%{public}d,timeSinceLastFail,%{public}.1lf", buf, 0x22u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A00D8);
      v22 = qword_1022A00D8;
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
      v25 = "road";
      v28 = 67240962;
      v29 = v23;
      v30 = 2082;
      if (v24)
        v25 = "building";
      v31 = v25;
      v32 = 1026;
      v33 = v4;
      v34 = 2050;
      v35 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 2, "CLMM,shouldBackOffFromNetworkAccess,1,geometryType,%{public}d,type,%{public}s,failCount,%{public}d,timeSinceLastFail,%{public}.1lf", &v28, 34);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMapGeometry::shouldBackOffFromNetworkAccess()", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
    return 1;
  }
  else
  {
LABEL_9:
    *(_QWORD *)(a1 + 48) = 0xBFF0000000000000;
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A00D8);
    v7 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
      v10 = "road";
      *(_DWORD *)buf = 67240706;
      v37 = v8;
      if (v9)
        v10 = "building";
      v38 = 2082;
      v39 = v10;
      v40 = 1026;
      v41 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLMM,shouldBackOffFromNetworkAccess,0,geometryType,%{public}d,type,%{public}s,failCount,%{public}d", buf, 0x18u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A00D8);
      v12 = qword_1022A00D8;
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
      v15 = "road";
      v28 = 67240706;
      v29 = v13;
      if (v14)
        v15 = "building";
      v30 = 2082;
      v31 = v15;
      v32 = 1026;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 2, "CLMM,shouldBackOffFromNetworkAccess,0,geometryType,%{public}d,type,%{public}s,failCount,%{public}d", &v28, 24);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMapGeometry::shouldBackOffFromNetworkAccess()", "%s\n", v16);
      if (v17 != buf)
        free(v17);
      return 0;
    }
  }
  return result;
}

_QWORD *sub_1010CEA60(_QWORD *result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;

  v2 = (uint64_t)result;
  if (*((_BYTE *)result + 33))
  {
    v3 = result[2];
    if (v3)
      *(_BYTE *)(v3 + 192) = a2;
  }
  else
  {
    result = (_QWORD *)result[325];
    if (result)
    {
      if (a2)
      {
        v4 = !sub_1010CE588(v2);
        result = *(_QWORD **)(v2 + 2600);
      }
      else
      {
        v4 = 0;
      }
      return objc_msgSend(result, "setAllowNetworkTileLoad:", v4);
    }
  }
  return result;
}

uint64_t sub_1010CEAC4(uint64_t a1, double a2, CLLocationDegrees a3, CLLocationDegrees a4)
{
  uint64_t v5;
  _BOOL4 v9;

  if (!*(_BYTE *)(a1 + 33))
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return 0;
  if (*(_BYTE *)(v5 + 192))
  {
    v9 = sub_1010CE588(a1);
    v5 = *(_QWORD *)(a1 + 16);
    if (v9)
      *(_BYTE *)(v5 + 192) = 0;
  }
  return sub_100CC3880(v5, 0, 0, 1, a2, a3, a4, *(double *)(v5 + 176));
}

BOOL sub_1010CEB60(uint64_t a1, uint64_t a2, double **a3, char a4, double *a5, int a6)
{
  uint64_t v10;
  double v11;
  double v12;
  std::__shared_weak_count *v13;
  double *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  char v20;
  NSObject *v21;
  const char *v22;
  std::string *v23;
  NSObject *v24;
  const char *v25;
  uint64_t v26;
  double *v27;
  double *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  NSObject *v34;
  unint64_t *v35;
  unint64_t v36;
  BOOL v37;
  double v38;
  double *v39;
  NSObject *v40;
  _BOOL8 result;
  const char *v42;
  std::string *v43;
  double *v44;
  double *v45;
  double *v46;
  double v47;
  int v48;
  uint64_t v49;
  double v50;
  NSObject *v51;
  const char *v52;
  uint64_t v53;
  double v54;
  double *v55;
  double v56;
  double v57;
  long double v58;
  long double v59;
  uint64_t v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double *v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double *v73;
  double v74;
  double v75;
  double v76;
  double v77;
  NSObject *v78;
  const char *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  double __y[2];
  std::string buf[68];

  if (!a6)
    return 0;
  v10 = 8 * a6;
  v11 = 0.0;
  do
  {
    v12 = *a5++;
    v11 = v11 + v12;
    v10 -= 8;
  }
  while (v10);
  v14 = *a3;
  v13 = (std::__shared_weak_count *)a3[1];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = v11 / (double)a6;
  if (!v14)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A00D8);
    v21 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "CLMM, NULL road", (uint8_t *)buf, 2u);
    }
    v19 = 0.0;
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_38;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A00D8);
    LOWORD(__y[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM, NULL road", __y, 2);
    v23 = (std::string *)v22;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v22);
    goto LABEL_106;
  }
  v18 = (*((_QWORD *)v14 + 18) - *((_QWORD *)v14 + 17)) >> 4;
  if ((int)v18 <= 0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A00D8);
    v24 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,CoordinateCount is 0", (uint8_t *)buf, 2u);
    }
    v19 = 0.0;
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_38;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A00D8);
    LOWORD(__y[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,interpolateProjections,CoordinateCount is 0", __y, 2);
    v23 = (std::string *)v25;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v25);
    goto LABEL_106;
  }
  v19 = 0.0;
  if ((_DWORD)v18 == 1)
  {
    v20 = 1;
    goto LABEL_39;
  }
  sub_1004078E0(v14);
  v26 = (uint64_t)(*((_QWORD *)v14 + 21) - *((_QWORD *)v14 + 20)) >> 3;
  if (v26 != (_DWORD)v18 - 1)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A00D8);
    v34 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,inconsistent array size", (uint8_t *)buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_38;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A00D8);
    LOWORD(__y[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,interpolateProjections,inconsistent array size", __y, 2);
    v23 = (std::string *)v80;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v80);
    goto LABEL_106;
  }
  sub_1004078E0(v14);
  v27 = (double *)(a1 + 56);
  if (v17 < 0.000001)
  {
    v28 = (double *)*((_QWORD *)v14 + 17);
    v30 = *v28;
    v29 = v28[1];
    v31 = v28[2];
    v32 = v28[3];
    buf[0].__r_.__value_.__r.__words[0] = 0;
    v82 = 0;
    __y[0] = 0.0;
    sub_10011E780(v27, (double *)buf, __y, (double *)&v82, v30, v29, 0.0, v31, v32, 0.0);
LABEL_30:
    v33 = atan2(__y[0], *(long double *)&buf[0].__r_.__value_.__l.__data_);
    if (v33 < 0.0)
      v33 = v33 + 6.28318531;
    v19 = v33 * 57.2957795;
LABEL_86:
    v20 = 1;
    if (!v13)
      goto LABEL_44;
    goto LABEL_40;
  }
  if (v17 >= 0.999999)
  {
    v53 = *((_QWORD *)v14 + 17) + 16 * v26;
    v30 = *(double *)v53;
    v29 = *(double *)(v53 + 8);
    v54 = sub_10073C714(v27, *(double *)(v53 - 16), *(double *)(v53 - 8), *(double *)v53, v29);
LABEL_85:
    v19 = v54;
    goto LABEL_86;
  }
  v45 = (double *)*((_QWORD *)v14 + 20);
  v46 = (double *)*((_QWORD *)v14 + 21);
  if (v45 == v46)
  {
LABEL_76:
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A00D8);
    v51 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,Could not interpolate to intended projection", (uint8_t *)buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_38;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A00D8);
    LOWORD(__y[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,interpolateProjections,Could not interpolate to intended projection", __y, 2);
    v23 = (std::string *)v52;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v52);
    goto LABEL_106;
  }
  v47 = 0.0;
  v48 = 2;
  v49 = 24;
  while (1)
  {
    v50 = *v45 / v14[5];
    if (vabdd_f64(v17, v47 + v50) < 0.000001)
      break;
    if (v47 + v50 > v17)
    {
      v66 = (double *)(*((_QWORD *)v14 + 17) + v49);
      v68 = *(v66 - 3);
      v67 = *(v66 - 2);
      v69 = *(v66 - 1);
      v70 = sub_1010B9110(v67, *v66);
      v71 = (v17 - v47) / v50;
      sub_100080DCC(v67 + v70 * v71);
      v29 = v72;
      v73 = (double *)(*((_QWORD *)v14 + 17) + v49);
      v74 = *(v73 - 3);
      v75 = *(v73 - 2);
      v76 = *(v73 - 1);
      v77 = *v73;
      buf[0].__r_.__value_.__r.__words[0] = 0;
      v82 = 0;
      __y[0] = 0.0;
      sub_10011E780(v27, (double *)buf, __y, (double *)&v82, v74, v75, 0.0, v76, v77, 0.0);
      v30 = v68 + (v69 - v68) * v71;
      goto LABEL_30;
    }
    ++v45;
    v49 += 16;
    ++v48;
    v47 = v47 + v50;
    if (v45 == v46)
      goto LABEL_76;
  }
  if (v48 < (int)v18)
  {
    v55 = (double *)(*((_QWORD *)v14 + 17) + v49);
    v30 = *(v55 - 1);
    v29 = *v55;
    v56 = *(v55 - 3);
    v57 = *(v55 - 2);
    buf[0].__r_.__value_.__r.__words[0] = 0;
    v82 = 0;
    __y[0] = 0.0;
    sub_10011E780(v27, (double *)buf, __y, (double *)&v82, v56, v57, 0.0, v30, v29, 0.0);
    v58 = __y[0];
    v59 = *(double *)&buf[0].__r_.__value_.__l.__data_;
    v60 = *((_QWORD *)v14 + 17) + v49;
    v61 = *(double *)(v60 + 8);
    v62 = *(double *)(v60 + 16);
    buf[0].__r_.__value_.__r.__words[0] = 0;
    v82 = 0;
    __y[0] = 0.0;
    sub_10011E780(v27, (double *)buf, __y, (double *)&v82, v30, v29, 0.0, v61, v62, 0.0);
    v63 = atan2(v58, v59);
    if (v63 < 0.0)
      v63 = v63 + 6.28318531;
    v64 = v63 * 57.2957795;
    v65 = atan2(__y[0], *(long double *)&buf[0].__r_.__value_.__l.__data_);
    if (v65 < 0.0)
      v65 = v65 + 6.28318531;
    sub_100512AA0(v64, v65 * 57.2957795);
    goto LABEL_85;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021A00D8);
  v78 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_ERROR, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", (uint8_t *)buf, 2u);
  }
  v19 = 0.0;
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A00D8);
    LOWORD(__y[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", __y, 2);
    v23 = (std::string *)v79;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v79);
LABEL_106:
    if (v23 != buf)
      free(v23);
  }
LABEL_38:
  v20 = 0;
LABEL_39:
  v30 = 0.0;
  v29 = 0.0;
  if (!v13)
    goto LABEL_44;
LABEL_40:
  v35 = (unint64_t *)&v13->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_44:
  if ((v20 & 1) != 0)
  {
    if ((a4 & 1) == 0)
    {
      v37 = v19 >= 360.0 || v19 < 0.0;
      v38 = dbl_101C3FA20[v19 > 180.0];
      if (v37)
        v38 = -0.0;
      v19 = v19 + v38;
    }
    v39 = *a3;
    if (*((char *)*a3 + 71) < 0)
      sub_100115CE4(buf, *((void **)v39 + 6), *((_QWORD *)v39 + 7));
    else
      buf[0] = *(std::string *)((_BYTE *)v39 + 2);
    std::string::operator=((std::string *)(a2 + 128), buf);
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    v44 = *a3;
    *(double *)(a2 + 112) = **a3;
    *(double *)(a2 + 120) = *(double *)((char *)v44 + 20);
    *(double *)(a2 + 152) = v30;
    *(double *)(a2 + 160) = v29;
    *(double *)(a2 + 168) = v19;
    *(double *)(a2 + 272) = v17;
    return 1;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021A00D8);
  v40 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "CLMM,interpolateOnRoad,interpolateProjections returned false", (uint8_t *)buf, 2u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A00D8);
    LOWORD(__y[0]) = 0;
    LODWORD(v81) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,interpolateOnRoad,interpolateProjections returned false", __y, v81);
    v43 = (std::string *)v42;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLMapGeometry::interpolateOnRoad(CLMapCrumb &, const CLMapRoadPtr &, BOOL, const double *, int) const", "%s\n", v42);
    if (v43 != buf)
      free(v43);
    return 0;
  }
  return result;
}

void sub_1010CF6C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010CF6F8(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  sub_100CC2F20(a1);
  sub_10083C6DC(a1 + 240, *(_QWORD **)(a1 + 248));
  *(_QWORD *)(a1 + 240) = a1 + 248;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  sub_10083C6DC(a1 + 264, *(_QWORD **)(a1 + 272));
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 264) = a1 + 272;
  sub_10083C674(a1 + 288, *(char **)(a1 + 296));
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = a1 + 296;
  *(_QWORD *)(a1 + 320) = 0;
  v3 = *(_QWORD *)(a1 + 328);
  for (result = *(_QWORD *)(a1 + 336); result != v3; result = sub_100261F44(result - 16))
    ;
  *(_QWORD *)(a1 + 336) = v3;
  return result;
}

uint64_t sub_1010CF788(uint64_t a1, uint64_t a2, double a3)
{
  return (*(uint64_t (**)(uint64_t, double, double, double))(*(_QWORD *)a1 + 40))(a1, *(double *)(a2 + 56), *(double *)(a2 + 64), a3);
}

void sub_1010CF79C(uint64_t a1, double a2, double a3, double a4)
{
  void *v5;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  if (!*(_BYTE *)(a1 + 33))
  {
    v5 = *(void **)(a1 + 2600);
    if (v5)
    {
      if (objc_msgSend(v5, "allowNetworkTileLoad"))
      {
        ++*(_DWORD *)(a1 + 36);
        _objc_msgSend(*(id *)(a1 + 2600), "preloadRoadTilesNear:radius:completionHandler:", &stru_1021A00A8, a2, a3, a4);
      }
    }
    else
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A00D8);
      v9 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "CLMM,provideCacheHint,fGEOMapFeatureAccess is unexpectedly nil", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021A00D8);
        v12[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,provideCacheHint,fGEOMapFeatureAccess is unexpectedly nil", v12, 2);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLMapGeometry::provideCacheHint(double, double, double)", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
    }
  }
}

void sub_1010CF9B0(id a1, NSError *a2)
{
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  NSInteger v8;
  __int16 v9;
  NSString *v10;
  __int16 v11;
  NSString *v12;
  uint8_t buf[4];
  NSInteger v14;
  __int16 v15;
  NSString *v16;
  __int16 v17;
  NSString *v18;

  if (a2)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A00D8);
    v3 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349571;
      v14 = -[NSError code](a2, "code");
      v15 = 2114;
      v16 = -[NSError domain](a2, "domain");
      v17 = 2113;
      v18 = -[NSError localizedDescription](a2, "localizedDescription");
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CLMM,Warning,provideCacheHint reported error:%{public}lld (%{public}@) \"%{private}@\"", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A00D8);
      v4 = qword_1022A00D8;
      v7 = 134349571;
      v8 = -[NSError code](a2, "code");
      v9 = 2114;
      v10 = -[NSError domain](a2, "domain");
      v11 = 2113;
      v12 = -[NSError localizedDescription](a2, "localizedDescription");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v4, 2, "CLMM,Warning,provideCacheHint reported error:%{public}lld (%{public}@) \"%{private}@\"", &v7, 32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMapGeometry::provideCacheHint(double, double, double)_block_invoke", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
}

uint64_t sub_1010CFBD8()
{
  NSObject *v0;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021A00D8);
  v0 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Base function called for moveOnRouteRoads", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A00D8);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "Base function called for moveOnRouteRoads", v4, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLMapGeometry::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
  return 0;
}

void sub_1010CFD60(id a1)
{
  qword_1022A00D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

double sub_1010CFD8C(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 512) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 704) = xmmword_101C3FAB0;
  *(_OWORD *)(a1 + 720) = unk_101C3FAC0;
  *(_OWORD *)(a1 + 736) = xmmword_101C3FAD0;
  *(_OWORD *)(a1 + 748) = *(__int128 *)((char *)&xmmword_101C3FAD0 + 12);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 552) = 0xFFF0000000000000;
  *(_QWORD *)(a1 + 600) = 0xFFF0000000000000;
  *(int64x2_t *)(a1 + 608) = vdupq_n_s64(0xFFF0000000000000);
  *(_QWORD *)(a1 + 624) = 0xFFF0000000000000;
  *(_QWORD *)(a1 + 560) = 0x3F747AE147AE147BLL;
  *(_QWORD *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_BYTE *)(a1 + 352) = 0;
  *(_WORD *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_DWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 568) = xmmword_101C3FAF0;
  *(_OWORD *)(a1 + 584) = unk_101C3FB00;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 695) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  return result;
}

void *sub_1010CFE98(double *a1, uint64_t a2)
{
  double v4;
  NSObject *v5;
  double v6;
  double v7;
  double v8;
  _BOOL4 v9;
  int v10;
  NSObject *v11;
  _BOOL4 v12;
  double v13;
  NSObject *v14;
  int v15;
  double v16;
  double v17;
  double v18;
  float64x2_t v19;
  double v20;
  NSObject *v21;
  uint64_t v22;
  int v23;
  void **v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  NSObject *v29;
  int v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double Current;
  uint64_t v36;
  uint64_t v37;
  char v38;
  double v39;
  float64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  char v48;
  char v49;
  char v50;
  const char *v52;
  uint8_t *v53;
  const char *v54;
  uint8_t *v55;
  const char *v56;
  uint8_t *v57;
  int v58;
  const char *v59;
  uint8_t *v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  char v67;
  int v68;
  float64_t v69;
  double v70;
  int v71;
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  double v76;
  uint8_t buf[4];
  _BYTE v78[34];
  __int16 v79;
  int v80;
  __int16 v81;
  int v82;
  __int16 v83;
  int v84;

  v69 = 0.0;
  v70 = 0.0;
  v4 = *(double *)(a2 + 24);
  if (v4 <= 0.0)
  {
    v4 = a1[30];
    if (v4 <= 0.0)
    {
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021A0118);
      v5 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[RunningSpeedKF] feedStepCountEntry - firstStepTime & previous step count unset. Assuming 1 epoch prior", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021A0118);
        LOWORD(v71) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "[RunningSpeedKF] feedStepCountEntry - firstStepTime & previous step count unset. Assuming 1 epoch prior", &v71, 2);
        v57 = (uint8_t *)v56;
        sub_100512490("Generic", 1, 0, 2, "void CLPedometer::RunningSpeedKF::feedStepCountEntry(const CLExtendedStepCountEntry &)", "%s\n", v56);
        if (v57 != buf)
          free(v57);
      }
      v4 = *(double *)(a2 + 16) + -2.56;
    }
  }
  v6 = *(double *)(a2 + 232);
  v7 = *(double *)(a2 + 48);
  v65 = v6 - v4;
  v66 = *(double *)(a2 + 256);
  if (v7 <= 0.0)
    v8 = a1[66];
  else
    v8 = *(double *)(a2 + 280) / v7;
  v63 = *(double *)(a2 + 232);
  v64 = vabdd_f64(a1[64], v4);
  v68 = 0;
  v67 = 0;
  v9 = v7 <= 0.0;
  if (v66 <= 0.0)
    v9 = 1;
  v10 = v65 <= 0.0 || v9;
  if (v10 == 1)
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021A0118);
    v11 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218496;
      *(double *)v78 = v7;
      *(_WORD *)&v78[8] = 2048;
      *(double *)&v78[10] = v66;
      *(_WORD *)&v78[18] = 2048;
      *(double *)&v78[20] = v65;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[RunningSpeedKF] feedStepCountEntry - zero deltaPedDist (%.2f), deltaCalPedDist (%.2f) and/or deltaTime (%.2f)", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021A0118);
      v71 = 134218496;
      v72 = v7;
      v73 = 2048;
      v74 = v66;
      v75 = 2048;
      v76 = v65;
      LODWORD(v61) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "[RunningSpeedKF] feedStepCountEntry - zero deltaPedDist (%.2f), deltaCalPedDist (%.2f) and/or deltaTime (%.2f)", COERCE_DOUBLE(&v71), v61, v62);
      v53 = (uint8_t *)v52;
      sub_100512490("Generic", 1, 0, 2, "void CLPedometer::RunningSpeedKF::feedStepCountEntry(const CLExtendedStepCountEntry &)", "%s\n", v52);
      if (v53 != buf)
        free(v53);
    }
    v12 = 0;
    goto LABEL_37;
  }
  if (!*(_BYTE *)(*(_QWORD *)a1 + 80))
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021A0118);
    v14 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
    {
      v15 = *(unsigned __int8 *)(*(_QWORD *)a1 + 80);
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)v78 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "[RunningSpeedKF] feedStepCountEntry - odometerSpeed is unavailable (isActive=%{public}d)", buf, 8u);
    }
    v13 = 2.96714;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021A0118);
      v58 = *(unsigned __int8 *)(*(_QWORD *)a1 + 80);
      v71 = 67240192;
      LODWORD(v72) = v58;
      LODWORD(v61) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "[RunningSpeedKF] feedStepCountEntry - odometerSpeed is unavailable (isActive=%{public}d)", &v71, *(_QWORD *)&v61);
      v60 = (uint8_t *)v59;
      sub_100512490("Generic", 1, 0, 2, "void CLPedometer::RunningSpeedKF::feedStepCountEntry(const CLExtendedStepCountEntry &)", "%s\n", v59);
      if (v60 != buf)
        free(v60);
    }
    goto LABEL_33;
  }
  v13 = 2.96714;
  if (!sub_1010D09BC(a1, &v68, &v67, v6) || !sub_1010D0D00((_QWORD **)a1, &v69, v4, v63))
  {
LABEL_33:
    v12 = 0;
    goto LABEL_34;
  }
  sub_1010D1598((uint64_t)a1, &v69, v68, v66);
  v12 = a1[71] < 100.0;
  v13 = dbl_101C3FA90[a1[71] < 100.0];
LABEL_34:
  v16 = 0.148357;
  if (v64 < 8.25)
    v16 = v13;
  a1[74] = v16;
LABEL_37:
  a1[69] = a1[69] + a1[70];
  v17 = sub_1010D17AC(a1);
  v18 = sub_1010D1E04(a1);
  if (*(_BYTE *)(a2 + 248))
  {
    if (v8 > 0.0)
    {
      if (*(_BYTE *)(a2 + 288))
      {
        v20 = v18;
        if (vabdd_f64(v8, a1[66]) > 0.001 && vabdd_f64(v18, v17) > 0.1)
        {
          if (qword_10229FCD0 != -1)
            dispatch_once(&qword_10229FCD0, &stru_1021A0118);
          v21 = qword_10229FCD8;
          if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
          {
            v22 = *((_QWORD *)a1 + 66);
            v23 = *(unsigned __int8 *)(a2 + 288);
            *(_DWORD *)buf = 68290306;
            *(_DWORD *)v78 = 0;
            *(_WORD *)&v78[4] = 2082;
            *(_QWORD *)&v78[6] = "";
            *(_WORD *)&v78[14] = 2050;
            *(double *)&v78[16] = v8;
            *(_WORD *)&v78[24] = 2050;
            *(_QWORD *)&v78[26] = v22;
            v79 = 1026;
            v80 = v23;
            v81 = 1026;
            v82 = (int)v17;
            v83 = 1026;
            v84 = (int)v20;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"[RunningSpeedKF] Reset fDistanceBuffer\", \"currentkValue\":\"%{public}f\", \"previouskValue\":\"%{public}f\", \"energyIsCalibrated\":%{public}u, \"biasFactor\":%{public}d, \"biasFactorInstantaneous\":%{public}d}", buf, 0x38u);
          }
          v24 = (void **)*((_QWORD *)a1 + 80);
          v25 = *((_QWORD *)a1 + 81);
          a1[84] = 0.0;
          v26 = v25 - (_QWORD)v24;
          if (v26 >= 0x11)
          {
            do
            {
              operator delete(*v24);
              v24 = (void **)(*((_QWORD *)a1 + 80) + 8);
              *((_QWORD *)a1 + 80) = v24;
              v26 = *((_QWORD *)a1 + 81) - (_QWORD)v24;
            }
            while (v26 > 0x10);
          }
          v17 = 0.0;
          if (v26 >> 3 == 1)
          {
            v27 = 85;
          }
          else
          {
            if (v26 >> 3 != 2)
              goto LABEL_53;
            v27 = 170;
          }
          *((_QWORD *)a1 + 83) = v27;
        }
      }
    }
  }
LABEL_53:
  a1[66] = v8;
  if ((v10 & 1) != 0)
  {
    v28 = *((_DWORD *)a1 + 130);
    *((_DWORD *)a1 + 130) = v28 + 1;
    if (v28 < 1)
    {
      v30 = 1;
      v31 = -INFINITY;
      v32 = -INFINITY;
    }
    else
    {
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021A0118);
      v29 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "[RunningSpeedKF] feedStepCountEntry - no valid non-zero measurements for 2 epochs, resetting KF", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021A0118);
        LOWORD(v71) = 0;
        LODWORD(v61) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "[RunningSpeedKF] feedStepCountEntry - no valid non-zero measurements for 2 epochs, resetting KF", &v71, *(_QWORD *)&v61);
        v55 = (uint8_t *)v54;
        sub_100512490("Generic", 1, 0, 2, "void CLPedometer::RunningSpeedKF::feedStepCountEntry(const CLExtendedStepCountEntry &)", "%s\n", v54);
        if (v55 != buf)
          free(v55);
      }
      v30 = 0;
      *(_OWORD *)(a1 + 1) = 0u;
      *((int64x2_t *)a1 + 38) = vdupq_n_s64(0xFFF0000000000000);
      *(_OWORD *)(a1 + 71) = xmmword_101C3FAF0;
      *(_OWORD *)(a1 + 73) = unk_101C3FB00;
      *((_OWORD *)a1 + 21) = 0u;
      *((_OWORD *)a1 + 24) = 0u;
      *((_OWORD *)a1 + 25) = 0u;
      *((_OWORD *)a1 + 26) = 0u;
      *((_OWORD *)a1 + 27) = 0u;
      *((_OWORD *)a1 + 28) = 0u;
      *((_OWORD *)a1 + 29) = 0u;
      *((_OWORD *)a1 + 30) = 0u;
      *((_OWORD *)a1 + 31) = 0u;
      *(_DWORD *)((char *)a1 + 695) = 0;
      *(_OWORD *)(a1 + 37) = 0u;
      *(_OWORD *)(a1 + 39) = 0u;
      *(_OWORD *)(a1 + 33) = 0u;
      *(_OWORD *)(a1 + 35) = 0u;
      *(_OWORD *)(a1 + 29) = 0u;
      *(_OWORD *)(a1 + 31) = 0u;
      *(_OWORD *)(a1 + 25) = 0u;
      *(_OWORD *)(a1 + 27) = 0u;
      *(_OWORD *)(a1 + 21) = 0u;
      *(_OWORD *)(a1 + 23) = 0u;
      *(_OWORD *)(a1 + 17) = 0u;
      *(_OWORD *)(a1 + 19) = 0u;
      *(_OWORD *)(a1 + 13) = 0u;
      *(_OWORD *)(a1 + 15) = 0u;
      *(_OWORD *)(a1 + 9) = 0u;
      *(_OWORD *)(a1 + 11) = 0u;
      *(_OWORD *)(a1 + 5) = 0u;
      *(_OWORD *)(a1 + 7) = 0u;
      *(_OWORD *)(a1 + 3) = 0u;
      *(_OWORD *)(a1 + 67) = 0u;
      a1[75] = -INFINITY;
      a1[78] = -INFINITY;
      *(_OWORD *)(a1 + 69) = xmmword_101C3FAA0;
      a1[41] = 0.0;
      *((_BYTE *)a1 + 352) = 0;
      *(_OWORD *)(a1 + 45) = 0u;
      *((_WORD *)a1 + 188) = 0;
      *((_DWORD *)a1 + 130) = 0;
      *(_OWORD *)(a1 + 85) = 0u;
      v31 = -INFINITY;
      v32 = -INFINITY;
      a1[66] = 0.0;
    }
  }
  else
  {
    v33 = v7 * v17;
    if (v17 <= 0.0)
      v33 = v66;
    v31 = v33 / v65;
    if (v12)
    {
      v34 = v69;
      v19.f64[0] = v7;
      sub_1010D1EB8(a1, v4, v19, v69);
      v32 = v34 / v70;
      sub_1010D1F2C((uint64_t)a1, v68, v32, v31);
    }
    else
    {
      sub_1010D2068((uint64_t)a1, v33 / v65);
      v32 = -INFINITY;
    }
    v30 = 0;
    *((_DWORD *)a1 + 130) = 0;
  }
  sub_1010D20F8(a1, v4);
  Current = CFAbsoluteTimeGetCurrent();
  v36 = *((_QWORD *)a1 + 68);
  v38 = sub_1010D2464(v37, (uint64_t)(a1 + 67), v30);
  v40 = v69;
  v39 = v70;
  v41 = *(_OWORD *)(a1 + 69);
  v42 = *((_QWORD *)a1 + 77);
  v43 = *((_QWORD *)a1 + 78);
  v44 = *((_QWORD *)a1 + 71);
  v45 = *((_OWORD *)a1 + 37);
  v46 = *((_QWORD *)a1 + 76);
  v47 = v68;
  if (v64 >= 8.25)
  {
    v48 = 0;
    v49 = 0;
  }
  else
  {
    v48 = *((_BYTE *)a1 + 696);
    v49 = *((_BYTE *)a1 + 697);
  }
  v50 = v67;
  a1[41] = v4;
  a1[42] = v63;
  *((_QWORD *)a1 + 43) = v36;
  *((_BYTE *)a1 + 352) = v38;
  a1[45] = v31;
  a1[46] = v32;
  *((_BYTE *)a1 + 376) = v12;
  *((_BYTE *)a1 + 377) = v10 ^ 1;
  a1[48] = v7;
  a1[49] = v66;
  a1[50] = v40;
  a1[51] = v65;
  a1[52] = v39;
  a1[53] = Current - v63;
  a1[54] = v17;
  *(_OWORD *)(a1 + 55) = v41;
  *((_QWORD *)a1 + 57) = v42;
  *((_QWORD *)a1 + 58) = v43;
  *((_QWORD *)a1 + 59) = v44;
  *((_OWORD *)a1 + 30) = v45;
  *((_QWORD *)a1 + 62) = v46;
  *((_DWORD *)a1 + 126) = v47;
  *((_BYTE *)a1 + 508) = v48;
  *((_BYTE *)a1 + 509) = v49;
  *((_BYTE *)a1 + 510) = v64 < 8.25;
  *((_BYTE *)a1 + 511) = v50;
  return memcpy(a1 + 1, (const void *)a2, 0x140uLL);
}

BOOL sub_1010D09BC(_QWORD *a1, _DWORD *a2, _BYTE *a3, double a4)
{
  _BOOL8 result;
  NSObject *v8;
  double v9;
  uint8_t *v10;
  uint8_t *v11;
  NSObject *v12;
  _BOOL4 v13;
  double v14;
  uint8_t *v15;
  char v16[48];
  double v17;
  int v18;
  char v19;
  int v20;
  double v21;
  uint8_t buf[4];
  double v23;

  *a2 = 0;
  if (((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*a1 + 24))(*a1, v16) & 1) == 0)
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021A0118);
    v8 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      v23 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[RunningSpeedKF] No recent odometer value (%{public}.2f)", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021A0118);
    v20 = 134349056;
    v21 = a4;
    v9 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "[RunningSpeedKF] No recent odometer value (%{public}.2f)", &v20, 12);
    v11 = v10;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPedometer::RunningSpeedKF::getOdometerProperties(CFAbsoluteTime, CLOdometerQuality::Quality &, BOOL &) const", "%s\n", v9);
LABEL_21:
    if (v11 != buf)
      free(v11);
    return 0;
  }
  *a3 = v19;
  *a2 = v18;
  if (v17 > 0.0)
    return 1;
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021A0118);
  v12 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    v23 = v17;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "[RunningSpeedKF] invalid odometer value: %.2f", buf, 0xCu);
  }
  v13 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v13)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021A0118);
    v20 = 134217984;
    v21 = v17;
    v14 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 16, "[RunningSpeedKF] invalid odometer value: %.2f", COERCE_DOUBLE(&v20));
    v11 = v15;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLPedometer::RunningSpeedKF::getOdometerProperties(CFAbsoluteTime, CLOdometerQuality::Quality &, BOOL &) const", "%s\n", v14);
    goto LABEL_21;
  }
  return result;
}

BOOL sub_1010D0D00(_QWORD **a1, double *a2, double a3, double a4)
{
  NSObject *v6;
  _BOOL4 v7;
  _BOOL8 result;
  uint8_t *v9;
  double v10;
  NSObject *v11;
  _BOOL4 v12;
  uint8_t *v13;
  _BOOL4 v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  NSObject *v22;
  uint8_t *v23;
  double v24;
  NSObject *v25;
  NSObject *v26;
  _BOOL4 v27;
  NSObject *v28;
  const char *v29;
  uint8_t *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  int v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;
  uint8_t buf[4];
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;
  __int16 v57;
  double v58;

  *a2 = 0.0;
  a2[1] = 0.0;
  if (a3 > a4)
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021A0118);
    v6 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349312;
      v48 = a3;
      v49 = 2050;
      v50 = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[RunningSpeedKF] calculateDeltaOdometer - time rollback! t1,%{public}f,t2,%{public}f", buf, 0x16u);
    }
    v7 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v7)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021A0118);
      v35 = 134349312;
      v36 = a3;
      v37 = 2050;
      v38 = a4;
      v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 16, "[RunningSpeedKF] calculateDeltaOdometer - time rollback! t1,%{public}f,t2,%{public}f", &v35, 22);
LABEL_20:
      v13 = v9;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLPedometer::RunningSpeedKF::calculateDeltaOdometer(CFAbsoluteTime, CFAbsoluteTime, DeltaOdometerResult &) const", "%s\n", v10);
LABEL_21:
      if (v13 != buf)
        free(v13);
      return 0;
    }
    return result;
  }
  if (a3 == a4)
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021A0118);
    v11 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      v48 = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "[RunningSpeedKF] calculateDeltaOdometer - time did not advance! t=%{public}f", buf, 0xCu);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021A0118);
      v35 = 134349056;
      v36 = a3;
      v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 16, "[RunningSpeedKF] calculateDeltaOdometer - time did not advance! t=%{public}f", &v35, 12);
      goto LABEL_20;
    }
    return result;
  }
  v33 = 0.0;
  v34 = 0.0;
  v31 = 0.0;
  v32 = 0.0;
  v16 = sub_1010D2810(a1, &v34, &v32, a3);
  if (!v16 || !sub_1010D2810(a1, &v33, &v31, a4))
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021A0118);
    v25 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349312;
      v48 = a3;
      v49 = 2050;
      v50 = a4;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "[RunningSpeedKF] calculateDeltaOdometer - #warning: failed to interpolate odometer between (startTime, %{public}f, endTime, %{public}f)", buf, 0x16u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021A0118);
    v35 = 134349312;
    v36 = a3;
    v37 = 2050;
    v38 = a4;
    v24 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "[RunningSpeedKF] calculateDeltaOdometer - #warning: failed to interpolate odometer between (startTime, %{public}f, endTime, %{public}f)", &v35, 22);
LABEL_61:
    v13 = v23;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPedometer::RunningSpeedKF::calculateDeltaOdometer(CFAbsoluteTime, CFAbsoluteTime, DeltaOdometerResult &) const", "%s\n", v24);
    goto LABEL_21;
  }
  v18 = v33;
  v17 = v34;
  v19 = v33 - v34;
  v21 = v31;
  v20 = v32;
  if (v33 - v34 >= 0.0 && v31 - v32 >= 0.0)
  {
    if (v31 - v32 != 0.0)
    {
      if (v19 == 0.0)
      {
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021A0118);
        v28 = qword_10229FCD8;
        if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134349569;
          v48 = a3;
          v49 = 2050;
          v50 = a4;
          v51 = 2049;
          v52 = v17;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "[RunningSpeedKF] calculateDeltaOdometer - No change in odometer distance (startTime=%{public}.2f, endTime=%{public}.2f, outDist=%{private}.2f)", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FCD0 != -1)
            dispatch_once(&qword_10229FCD0, &stru_1021A0118);
          v35 = 134349569;
          v36 = a3;
          v37 = 2050;
          v38 = a4;
          v39 = 2049;
          v40 = v17;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "[RunningSpeedKF] calculateDeltaOdometer - No change in odometer distance (startTime=%{public}.2f, endTime=%{public}.2f, outDist=%{private}.2f)", &v35, 32);
          v30 = (uint8_t *)v29;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLPedometer::RunningSpeedKF::calculateDeltaOdometer(CFAbsoluteTime, CFAbsoluteTime, DeltaOdometerResult &) const", "%s\n", v29);
          if (v30 != buf)
            free(v30);
        }
      }
      *a2 = v19;
      a2[1] = v21 - v20;
      return 1;
    }
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021A0118);
    v22 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349568;
      v48 = a3;
      v49 = 2050;
      v50 = a4;
      v51 = 2050;
      v52 = v20;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "[RunningSpeedKF] calculateDeltaOdometer - #warning: No change in time (startTime=%{public}.2f, endTime=%{public}.2f, outTime=%{public}.2f)", buf, 0x20u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021A0118);
    v35 = 134349568;
    v36 = a3;
    v37 = 2050;
    v38 = a4;
    v39 = 2050;
    v40 = v20;
    v24 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "[RunningSpeedKF] calculateDeltaOdometer - #warning: No change in time (startTime=%{public}.2f, endTime=%{public}.2f, outTime=%{public}.2f)", &v35, 32);
    goto LABEL_61;
  }
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021A0118);
  v26 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134350336;
    v48 = a3;
    v49 = 2050;
    v50 = a4;
    v51 = 2048;
    v52 = v17;
    v53 = 2048;
    v54 = v18;
    v55 = 2050;
    v56 = v20;
    v57 = 2050;
    v58 = v21;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "[RunningSpeedKF] calculateDeltaOdometer - negative interpolation error startTime,%{public}.2f,endTime,%{public}.2f,dist1,%f,dist2,%f,outTime1,%{public}f,outTime2,%{public}f", buf, 0x3Eu);
  }
  v27 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v27)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021A0118);
    v35 = 134350336;
    v36 = a3;
    v37 = 2050;
    v38 = a4;
    v39 = 2048;
    v40 = v17;
    v41 = 2048;
    v42 = v18;
    v43 = 2050;
    v44 = v20;
    v45 = 2050;
    v46 = v21;
    v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 16, "[RunningSpeedKF] calculateDeltaOdometer - negative interpolation error startTime,%{public}.2f,endTime,%{public}.2f,dist1,%f,dist2,%f,outTime1,%{public}f,outTime2,%{public}f", &v35, 62);
    goto LABEL_20;
  }
  return result;
}

void sub_1010D1598(uint64_t a1, double *a2, int a3, double a4)
{
  uint64_t v7;
  NSObject *v8;
  _BOOL4 v9;
  const char *v10;
  uint8_t *v11;
  _WORD v13[8];
  uint8_t buf[1640];

  if (a3)
  {
    if (a3 == 3)
    {
      v7 = 0x3FEF1FE21D96E9BCLL;
    }
    else if (a3 == 2)
    {
      v7 = 0x3FE4BFEC13B9F128;
    }
    else
    {
      v7 = 0x3FC4BFEC13B9F128;
    }
  }
  else
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021A0118);
    v8 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[RunningSpeedKF] updateOdoMeasurementNoise - #warning unexpected kUnknown odometer quality", buf, 2u);
    }
    v9 = sub_1001BFF7C(115, 2);
    v7 = 0x4059400000000000;
    if (v9)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021A0118);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "[RunningSpeedKF] updateOdoMeasurementNoise - #warning unexpected kUnknown odometer quality", v13, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLPedometer::RunningSpeedKF::updateOdoMeasurementNoise(const DeltaOdometerResult &, double, CLOdometerQuality::Quality)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
      v7 = 0x4059400000000000;
    }
  }
  if (*a2 > a4 * 1.75 || *a2 < a4 * 0.25)
    v7 = 0x4059400000000000;
  *(_QWORD *)(a1 + 568) = v7;
}

double sub_1010D17AC(_QWORD *a1)
{
  unint64_t v1;
  double v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  double v11;
  NSObject *v12;
  double v13;
  uint8_t *v14;
  double v15;
  NSObject *v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  NSObject *v22;
  double v23;
  uint8_t *v24;
  NSObject *v25;
  unint64_t v26;
  double v27;
  double v29;
  int v30;
  double v31;
  __int16 v32;
  double v33;
  uint8_t buf[4];
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;

  v1 = a1[84];
  if (v1)
  {
    v3 = (double)v1;
    v4 = a1[83];
    v5 = v1 + v4 - 1;
    v6 = a1[80];
    v7 = *(_QWORD *)(v6 + 8 * (v5 / 0xAA));
    v8 = v5 % 0xAA;
    v9 = *(_QWORD *)(v6 + 8 * (v4 / 0xAA));
    v10 = v4 % 0xAA;
    v11 = *(double *)(v7 + 24 * v8) - *(double *)(v9 + 24 * v10) + 2.56;
    if (v3 * 2.56 / v11 >= 0.5)
    {
      v18 = v7 + 24 * v8;
      v19 = v9 + 24 * v10;
      v20 = *(double *)(v18 + 8) - *(double *)(v19 + 8);
      v21 = *(double *)(v18 + 16) - *(double *)(v19 + 16);
      if (v21 <= 0.0 || v20 <= 0.0)
      {
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021A0118);
        v22 = qword_10229FCD8;
        if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          v35 = v20;
          v36 = 2048;
          v37 = v21;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "[RunningSpeedKF] calcBiasFactor - invalid (ped, ref) buffer distance: %.2f, %.2f", buf, 0x16u);
        }
        v13 = 0.0;
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FCD0 != -1)
            dispatch_once(&qword_10229FCD0, &stru_1021A0118);
          v30 = 134218240;
          v31 = v20;
          v32 = 2048;
          v33 = v21;
          LODWORD(v29) = 22;
          v23 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 16, "[RunningSpeedKF] calcBiasFactor - invalid (ped, ref) buffer distance: %.2f, %.2f", COERCE_DOUBLE(&v30), v29);
          v17 = v24;
          sub_100512490("Generic", 1, 0, 0, "double CLPedometer::RunningSpeedKF::calcBiasFactor() const", "%s\n", v23);
          goto LABEL_20;
        }
      }
      else
      {
        if (v21 > 20.0 && v20 > 0.0)
          return v21 / v20;
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021A0118);
        v25 = qword_10229FCD8;
        if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
        {
          v26 = a1[84] + a1[83] - 1;
          v27 = *(double *)(*(_QWORD *)(a1[80] + 8 * (v26 / 0xAA)) + 24 * (v26 % 0xAA));
          *(_DWORD *)buf = 134218496;
          v35 = v27;
          v36 = 2048;
          v37 = v20;
          v38 = 2048;
          v39 = v21;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "[RunningSpeedKF] calcBiasFactor - insufficient distance (latest time, ped, odo): %.2f, %.2f, %.2f", buf, 0x20u);
        }
        v13 = 0.0;
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FCD0 != -1)
            dispatch_once(&qword_10229FCD0, &stru_1021A0118);
          v15 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "[RunningSpeedKF] calcBiasFactor - insufficient distance (latest time, ped, odo): %.2f, %.2f, %.2f");
          goto LABEL_19;
        }
      }
    }
    else
    {
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021A0118);
      v12 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134218240;
        v35 = v3;
        v36 = 2048;
        v37 = v11;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "[RunningSpeedKF] calcBiasFactor - fDistanceBuffer has too many gaps (buffer size, buffer duration): %.2f, %.2f", buf, 0x16u);
      }
      v13 = 0.0;
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021A0118);
        v15 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "[RunningSpeedKF] calcBiasFactor - fDistanceBuffer has too many gaps (buffer size, buffer duration): %.2f, %.2f");
LABEL_19:
        v17 = v14;
        sub_100512490("Generic", 1, 0, 2, "double CLPedometer::RunningSpeedKF::calcBiasFactor() const", "%s\n", v15);
LABEL_20:
        if (v17 != buf)
          free(v17);
      }
    }
  }
  else
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021A0118);
    v16 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "[RunningSpeedKF] calcBiasFactor - empty distance buffer", buf, 2u);
    }
    v13 = 0.0;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021A0118);
      v15 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "[RunningSpeedKF] calcBiasFactor - empty distance buffer");
      goto LABEL_19;
    }
  }
  return v13;
}

double sub_1010D1E04(_QWORD *a1)
{
  unint64_t v1;
  double result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  double v11;

  v1 = a1[84];
  result = 0.0;
  if ((int)v1 >= 2)
  {
    v3 = (v1 - 2);
    if (v1 <= v3)
      sub_100263950("deque");
    v4 = a1[80];
    v5 = a1[83];
    v6 = v1 + v5 - 1;
    v7 = *(_QWORD *)(v4 + 8 * (v6 / 0xAA));
    v8 = v6 % 0xAA;
    v9 = v5 + v3;
    v10 = *(_QWORD *)(v4 + 8 * (v9 / 0xAA));
    v11 = *(double *)(v7 + 24 * v8 + 8) - *(double *)(v10 + 24 * (v9 % 0xAA) + 8);
    if (v11 > 0.0)
      return (*(double *)(v7 + 24 * v8 + 16) - *(double *)(v10 + 24 * (v9 % 0xAA) + 16)) / v11;
  }
  return result;
}

double sub_1010D1EB8(_QWORD *a1, double a2, float64x2_t a3, float64_t a4)
{
  uint64_t v4;
  double result;
  double v6;
  float64x2_t v7;

  v4 = a1[84];
  a3.f64[1] = a4;
  if (v4)
    a3 = vaddq_f64(*(float64x2_t *)(*(_QWORD *)(a1[80] + 8 * ((v4 + a1[83] - 1) / 0xAAuLL))+ 24 * ((v4 + a1[83] - 1) % 0xAAuLL)+ 8), a3);
  v6 = a2;
  v7 = a3;
  *(_QWORD *)&result = sub_1010D32AC(a1 + 79, (__n128 *)&v6).n128_u64[0];
  return result;
}

void sub_1010D1F2C(uint64_t a1, int a2, double a3, double a4)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;

  v8 = *(double *)(a1 + 592);
  v9 = *(double *)(a1 + 568);
  if (*(_BYTE *)(a1 + 536))
    v10 = *(double *)(a1 + 544);
  else
    v10 = (a3 + a4) * 0.5;
  if (*(_BYTE *)(a1 + 536))
    v11 = *(double *)(a1 + 552);
  else
    v11 = (v8 + v9) * 0.25;
  v12 = sub_1010D30B0(v11, a1, (double *)(a1 + 568));
  v13 = a4 - v10;
  *(double *)(a1 + 544) = v10 + v14 * (a4 - v10) + 0.0 + v12 * (a3 - v10);
  v15 = v11 * (1.0 - (v12 + v14 + 0.0));
  *(double *)(a1 + 552) = v15;
  *(double *)(a1 + 600) = v12;
  *(double *)(a1 + 608) = v14;
  v16 = -(a3 - v10);
  if (a3 - v10 >= 0.0)
    v16 = a3 - v10;
  v17 = v16 / (v9 + v15);
  *(double *)(a1 + 616) = v17;
  v18 = -v13;
  if (v13 >= 0.0)
    v18 = a4 - v10;
  v19 = v18 / (v8 + v15);
  *(double *)(a1 + 624) = v19;
  if (a2 == 1)
  {
    if (v17 >= v19)
      v17 = v19;
    if (v17 > 2.0)
      goto LABEL_15;
LABEL_17:
    v20 = 0x3F747AE147AE147BLL;
    goto LABEL_18;
  }
  if (v19 <= 2.0)
    goto LABEL_17;
LABEL_15:
  v20 = 0x4024000000000000;
LABEL_18:
  *(_QWORD *)(a1 + 560) = v20;
  *(_BYTE *)(a1 + 536) = 1;
}

uint64_t sub_1010D2068(uint64_t result, double a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  BOOL v9;
  double v10;

  v2 = *(double *)(result + 544);
  v3 = *(double *)(result + 552);
  v4 = *(double *)(result + 592);
  if (!*(_BYTE *)(result + 536))
  {
    v3 = *(double *)(result + 592);
    v2 = a2;
  }
  v5 = v3 / (v4 + v3);
  v6 = a2 - v2;
  *(double *)(result + 544) = v2 + v5 * v6;
  v7 = v3 * (1.0 - v5);
  *(double *)(result + 552) = v7;
  *(_QWORD *)(result + 600) = 0;
  *(double *)(result + 608) = v5;
  *(_QWORD *)(result + 616) = 0xFFF0000000000000;
  if (v6 < 0.0)
    v6 = -v6;
  v8 = v6 / (v4 + v7);
  *(double *)(result + 624) = v8;
  v9 = v8 <= 2.0;
  v10 = 0.005;
  if (!v9)
    v10 = 10.0;
  *(double *)(result + 560) = v10;
  *(_BYTE *)(result + 536) = 1;
  return result;
}

void sub_1010D20F8(_QWORD *a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double v8;
  uint64_t v9;
  double i;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  double v16;
  int v17;
  double v18;
  __int16 v19;
  double v20;
  uint8_t buf[4];
  double v22;
  __int16 v23;
  double v24;

  v2 = a1[84];
  if (v2)
  {
    v5 = (uint64_t)(a1 + 79);
    v6 = a1[80];
    v7 = a1[83];
    v8 = a2 - *(double *)(*(_QWORD *)(v6 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
    if (v8 <= 111.846818)
    {
LABEL_6:
      for (i = *(double *)(*(_QWORD *)(v6 + 8 * ((v2 + v7 - 1) / 0xAA)) + 24 * ((v2 + v7 - 1) % 0xAA) + 16)
              - *(double *)(*(_QWORD *)(v6 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA) + 16);
            i > 150.0 && v2 != 0;
            i = *(double *)(*(_QWORD *)(a1[80] + 8 * ((v2 + v7 - 1) / 0xAA)) + 24 * ((v2 + v7 - 1) % 0xAA) + 16)
              - *(double *)(*(_QWORD *)(a1[80] + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA) + 16))
      {
        a1[84] = v2 - 1;
        a1[83] = v7 + 1;
        sub_10047FDC4(v5, 1);
        v2 = a1[84];
        v7 = a1[83];
      }
      if (v8 <= 0.0 || i <= 0.0)
      {
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021A0118);
        v13 = qword_10229FCD8;
        if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          v22 = v8;
          v23 = 2048;
          v24 = i;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[RunningSpeedKF] trimDistanceBuffer - invalid buffer timeDiff or odoDistDiff: %.2f, %.2f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FCD0 != -1)
            dispatch_once(&qword_10229FCD0, &stru_1021A0118);
          v17 = 134218240;
          v18 = v8;
          v19 = 2048;
          v20 = i;
          LODWORD(v16) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 16, "[RunningSpeedKF] trimDistanceBuffer - invalid buffer timeDiff or odoDistDiff: %.2f, %.2f", COERCE_DOUBLE(&v17), v16);
          v15 = (uint8_t *)v14;
          sub_100512490("Generic", 1, 0, 0, "void CLPedometer::RunningSpeedKF::trimDistanceBuffer(CFAbsoluteTime)", "%s\n", v14);
          if (v15 != buf)
            free(v15);
        }
      }
    }
    else
    {
      while (1)
      {
        v9 = a1[84];
        if (!v9)
          break;
        a1[84] = v9 - 1;
        a1[83] = v7 + 1;
        sub_10047FDC4(v5, 1);
        v6 = a1[80];
        v7 = a1[83];
        v8 = a2 - *(double *)(*(_QWORD *)(v6 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
        if (v8 <= 111.846818)
        {
          v2 = a1[84];
          if (!v2)
            return;
          goto LABEL_6;
        }
      }
    }
  }
}

uint64_t sub_1010D2464(uint64_t a1, uint64_t a2, int a3)
{
  double v3;
  NSObject *v5;
  _BOOL4 v6;
  uint64_t result;
  const char *v8;
  uint8_t *v9;
  int v10;
  double v11;
  uint8_t buf[4];
  double v13;

  if (!*(_BYTE *)a2)
    return 0;
  v3 = *(double *)(a2 + 8);
  if (v3 >= 0.0 && v3 <= 13.0)
    return a3 ^ 1u;
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021A0118);
  v5 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    v13 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[RunningSpeedKF] Running speed out of range %.2f", buf, 0xCu);
  }
  v6 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021A0118);
    v10 = 134217984;
    v11 = v3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 16, "[RunningSpeedKF] Running speed out of range %.2f", COERCE_DOUBLE(&v10));
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLPedometer::RunningSpeedKF::isRunningSpeedValid(const KalmanParams &, BOOL) const", "%s\n", v8);
    if (v9 != buf)
      free(v9);
    return 0;
  }
  return result;
}

void sub_1010D2634(uint64_t a1, __int128 *a2)
{
  double v4;
  BOOL v5;
  int v6;
  int v7;
  BOOL v9;
  _BOOL4 v10;
  _BOOL4 v11;
  __int128 v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  _DWORD v21[2];
  __int16 v22;
  const char *v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;

  v4 = *(double *)(a1 + 344);
  if (v4 <= 0.0)
  {
    v11 = 0;
    if (*((_BYTE *)a2 + 16) == 3 && *((_BYTE *)a2 + 17) == 4)
      goto LABEL_24;
    goto LABEL_23;
  }
  v5 = sub_10009DDEC(1.0 / v4, *(float *)(a1 + 712));
  v6 = *((unsigned __int8 *)a2 + 16);
  v7 = *((unsigned __int8 *)a2 + 17);
  v9 = v6 == 3 && v7 == 4;
  if (!v5)
  {
    v10 = (v7 & 0xFE) == 2;
    v11 = (v6 & 0xFE) == 2 && v10;
    if (v9)
      goto LABEL_24;
LABEL_23:
    if (!v11)
      goto LABEL_25;
    goto LABEL_24;
  }
  v11 = 0;
  if (!v9)
    goto LABEL_23;
LABEL_24:
  *(_QWORD *)(a1 + 512) = *(_QWORD *)a2;
  v14 = *a2;
  *(_DWORD *)(a1 + 695) = *(_DWORD *)((char *)a2 + 15);
  *(_OWORD *)(a1 + 680) = v14;
LABEL_25:
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021A0118);
  v15 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
  {
    v16 = *(_QWORD *)a2;
    v17 = *((_QWORD *)a2 + 1);
    v18 = *((unsigned __int8 *)a2 + 16);
    v19 = *((unsigned __int8 *)a2 + 17);
    v20 = *((unsigned __int8 *)a2 + 18);
    v21[0] = 68290306;
    v21[1] = 0;
    v22 = 2082;
    v23 = "";
    v24 = 2050;
    v25 = v16;
    v26 = 2050;
    v27 = v17;
    v28 = 1026;
    v29 = v18;
    v30 = 1026;
    v31 = v19;
    v32 = 1026;
    v33 = v20;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[RunningSpeedKF] feedWakeGesture\", \"receivedTime\":\"%{public}.2f\", \"timestampPossible\":%{public}llu, \"state\":%{public}d, \"gestureType\":%{public}d, \"hostPowerState\":%{public}d}", (uint8_t *)v21, 0x38u);
  }
}

__n128 sub_1010D27F0(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 748) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 720) = v3;
  *(_OWORD *)(a1 + 736) = v4;
  *(__n128 *)(a1 + 704) = result;
  return result;
}

BOOL sub_1010D2810(_QWORD **a1, double *a2, double *a3, double a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  double v30;
  _BOOL4 v31;
  _BOOL8 result;
  double v33;
  uint64_t v34;
  double v35;
  uint8_t *v36;
  double v37;
  uint8_t *v38;
  NSObject *v39;
  double v40;
  uint8_t *v41;
  uint64_t v42;
  NSObject *v43;
  double v44;
  double v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  double v53;
  _BOOL4 v54;
  double v55;
  uint64_t v56;
  double v57;
  double v58;
  double v59;
  const char *v60;
  uint8_t *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  int v66;
  double v67;
  __int16 v68;
  double v69;
  __int16 v70;
  double v71;
  uint8_t buf[4];
  double v73;
  __int16 v74;
  double v75;
  __int16 v76;
  double v77;

  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  if (!sub_100AD19A8(*a1, (uint64_t)&v64, &v62, a4))
  {
    v17 = *((_QWORD *)&v65 + 1);
    if (*((_QWORD *)&v65 + 1) != *((_QWORD *)&v63 + 1))
    {
      if (*(_QWORD *)v65 == *((_QWORD *)&v65 + 1))
      {
        v42 = *(_QWORD *)(v65 - 8);
        v18 = (double *)(v42 + 3888);
        v17 = v42 + 4032;
      }
      else
      {
        v18 = (double *)(*((_QWORD *)&v65 + 1) - 144);
      }
      *a2 = *v18;
      *a3 = *(double *)(v17 - 192);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021A0118);
      v43 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
      {
        v44 = *a2;
        v45 = *a3;
        *(_DWORD *)buf = 134349568;
        v73 = a4;
        v74 = 2048;
        v75 = v44;
        v76 = 2048;
        v77 = v45;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "[RunningSpeedKF] interpolateOdometry - Unable to find odometer entry after %{public}.2f. Nearest=(%.2f, %.2f)", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021A0118);
        v58 = *a2;
        v59 = *a3;
        v66 = 134349568;
        v67 = a4;
        v68 = 2048;
        v69 = v58;
        v70 = 2048;
        v71 = v59;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "[RunningSpeedKF] interpolateOdometry - Unable to find odometer entry after %{public}.2f. Nearest=(%.2f, %.2f)", &v66, 32);
        v61 = (uint8_t *)v60;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLPedometer::RunningSpeedKF::interpolateOdometry(CFAbsoluteTime, double &, CFAbsoluteTime &) const", "%s\n", v60);
        if (v61 != buf)
          free(v61);
      }
      return 1;
    }
LABEL_38:
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021A0118);
    v39 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349056;
      v73 = a4;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "[RunningSpeedKF] interpolateOdometry - #warning did not find odometer after t=(%{public}.2f)", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021A0118);
      v66 = 134349056;
      v67 = a4;
      v40 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "[RunningSpeedKF] interpolateOdometry - #warning did not find odometer after t=(%{public}.2f)", &v66, 12);
      v38 = v41;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLPedometer::RunningSpeedKF::interpolateOdometry(CFAbsoluteTime, double &, CFAbsoluteTime &) const", "%s\n", v40);
      goto LABEL_46;
    }
    return result;
  }
  v7 = *((_QWORD *)&v65 + 1);
  v8 = *(_QWORD *)v65;
  v9 = *((_QWORD *)&v65 + 1) - *(_QWORD *)v65;
  v10 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 6);
  if (v9 < 193)
  {
    v19 = 21 - v10;
    v20 = ((21 - v10) * (unsigned __int128)0x8618618618618619) >> 64;
    v21 = (v20 + ((v19 - v20) >> 1)) >> 4;
    v14 = (uint64_t *)(v65 - 8 * v21);
    v15 = *v14;
    v16 = *v14 + 192 * (21 * v21 - v19) + 3840;
  }
  else
  {
    v11 = v10 - 1;
    v12 = ((v10 - 1) * (unsigned __int128)0x8618618618618619) >> 64;
    v13 = (v12 + ((v11 - v12) >> 1)) >> 4;
    v14 = (uint64_t *)(v65 + 8 * v13);
    v15 = *v14;
    v16 = *v14 + 192 * (v11 - 21 * v13);
  }
  if (v16 == *((_QWORD *)&v63 + 1))
    goto LABEL_38;
  v22 = v16;
  if (v16 == v15)
    v22 = *(v14 - 1) + 4032;
  if (*(double *)(v22 - 192) > a4)
    goto LABEL_38;
  v23 = *((_QWORD *)&v65 + 1);
  if (*((_QWORD *)&v65 + 1) == v8)
    v23 = *(_QWORD *)(v65 - 8) + 4032;
  if (*(double *)(v23 - 192) <= a4)
    goto LABEL_38;
  v24 = v16;
  if (v16 == v15)
    v24 = *(v14 - 1) + 4032;
  if (*(double *)(v24 - 192) > a4)
    goto LABEL_21;
  v25 = *((_QWORD *)&v65 + 1);
  if (*((_QWORD *)&v65 + 1) == v8)
    v25 = *(_QWORD *)(v65 - 8) + 4032;
  if (*(double *)(v25 - 192) < a4)
  {
LABEL_21:
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021A0118);
    v26 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_ERROR))
    {
      v27 = v16;
      if (v16 == *v14)
        v27 = *(v14 - 1) + 4032;
      v28 = *(double *)(v27 - 192);
      v29 = *((_QWORD *)&v65 + 1);
      if (*((_QWORD *)&v65 + 1) == *(_QWORD *)v65)
        v29 = *(_QWORD *)(v65 - 8) + 4032;
      v30 = *(double *)(v29 - 192);
      *(_DWORD *)buf = 134349568;
      v73 = v28;
      v74 = 2050;
      v75 = a4;
      v76 = 2050;
      v77 = v30;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "[RunningSpeedKF] interpolateOdometry time error, t_0, %{public}.2f, t_int, %{public}.2f, t_1, %{public}.2f", buf, 0x20u);
    }
    v31 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v31)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021A0118);
      if (v16 == *v14)
        v16 = *(v14 - 1) + 4032;
      v33 = *(double *)(v16 - 192);
      v34 = *((_QWORD *)&v65 + 1);
      if (*((_QWORD *)&v65 + 1) == *(_QWORD *)v65)
        v34 = *(_QWORD *)(v65 - 8) + 4032;
      v35 = *(double *)(v34 - 192);
      v66 = 134349568;
      v67 = v33;
      v68 = 2050;
      v69 = a4;
      v70 = 2050;
      v71 = v35;
      v37 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 16, "[RunningSpeedKF] interpolateOdometry time error, t_0, %{public}.2f, t_int, %{public}.2f, t_1, %{public}.2f", &v66, 32);
LABEL_37:
      v38 = v36;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLPedometer::RunningSpeedKF::interpolateOdometry(CFAbsoluteTime, double &, CFAbsoluteTime &) const", "%s\n", v37);
LABEL_46:
      if (v38 != buf)
        free(v38);
      return 0;
    }
    return result;
  }
  v46 = v16;
  if (v16 == v15)
    v46 = *(v14 - 1) + 4032;
  v47 = *(double *)(v46 - 144);
  v48 = *((_QWORD *)&v65 + 1);
  if (*((_QWORD *)&v65 + 1) == v8)
    v48 = *(_QWORD *)(v65 - 8) + 4032;
  if (v47 <= *(double *)(v48 - 144))
  {
    if (v16 == v15)
      v16 = *(v14 - 1) + 4032;
    if (*((_QWORD *)&v65 + 1) == v8)
      v7 = *(_QWORD *)(v65 - 8) + 4032;
    *a2 = sub_1002446AC(*(double *)(v16 - 192), *(double *)(v16 - 144), *(double *)(v7 - 192), *(double *)(v7 - 144), a4);
    *a3 = a4;
    return 1;
  }
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021A0118);
  v49 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_ERROR))
  {
    v50 = v16;
    if (v16 == *v14)
      v50 = *(v14 - 1) + 4032;
    v51 = *(double *)(v50 - 144);
    v52 = *((_QWORD *)&v65 + 1);
    if (*((_QWORD *)&v65 + 1) == *(_QWORD *)v65)
      v52 = *(_QWORD *)(v65 - 8) + 4032;
    v53 = *(double *)(v52 - 144);
    *(_DWORD *)buf = 134349312;
    v73 = v51;
    v74 = 2050;
    v75 = v53;
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "[RunningSpeedKF] interpolateOdometry odometer error, y_0, %{public}.4f, y_1, %{public}.4f", buf, 0x16u);
  }
  v54 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v54)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021A0118);
    if (v16 == *v14)
      v16 = *(v14 - 1) + 4032;
    v55 = *(double *)(v16 - 144);
    v56 = *((_QWORD *)&v65 + 1);
    if (*((_QWORD *)&v65 + 1) == *(_QWORD *)v65)
      v56 = *(_QWORD *)(v65 - 8) + 4032;
    v57 = *(double *)(v56 - 144);
    v66 = 134349312;
    v67 = v55;
    v68 = 2050;
    v69 = v57;
    v37 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 16, "[RunningSpeedKF] interpolateOdometry odometer error, y_0, %{public}.4f, y_1, %{public}.4f", &v66, 22);
    goto LABEL_37;
  }
  return result;
}

double sub_1010D30B0(double a1, uint64_t a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  NSObject *v6;
  double v7;
  float64x2_t v8;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  v4 = a3[2];
  v3 = a3[3];
  v5 = *a3 * v3 + a1 * (*a3 + v3 + v4 * -2.0) - v4 * v4;
  if (v5 == 0.0)
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021A0118);
    v6 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[RunningSpeedKF] kalmanGain - determinant is zero, logical error?", buf, 2u);
    }
    v7 = 0.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_1021A0118);
      v12[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 16, "[RunningSpeedKF] kalmanGain - determinant is zero, logical error?", v12, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "RunningSpeedKF::Measurement CLPedometer::RunningSpeedKF::kalmanGain(double, const RunningSpeedKF::MeasurementNoise &) const", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  else
  {
    v8.f64[0] = v3 + a1;
    v8.f64[1] = -(v4 + a1);
    return vaddvq_f64(vmulq_n_f64(v8, 1.0 / v5)) * a1;
  }
  return v7;
}

__n128 sub_1010D32AC(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1010D3384(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (__n128 *)(*(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *v8 = result;
  ++a1[5];
  return result;
}

void sub_1010D3358(id a1)
{
  qword_10229FCD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_1010D3384(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1010D364C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1010D3698(uint64_t a1, void *a2)
{
  int v2;

  objc_msgSend(a2, "count");
  v2 = 0;
  operator new();
}

