__n128 sub_100D055B8(uint64_t a1, __int128 *a2)
{
  __n128 result;
  __int128 v3;

  result.n128_u64[0] = *(_QWORD *)a2;
  if (*(double *)a2 != *(double *)(a1 + 104)
    || *((unsigned __int8 *)a2 + 8) != *(unsigned __int8 *)(a1 + 112)
    || *((unsigned __int8 *)a2 + 9) != *(unsigned __int8 *)(a1 + 113)
    || *((_DWORD *)a2 + 3) != *(_DWORD *)(a1 + 116))
  {
    v3 = *a2;
    *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 104) = v3;
    sub_100D05194(a1);
  }
  return result;
}

void sub_100D05614(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 128) != a2)
  {
    *(_DWORD *)(a1 + 128) = a2;
    sub_100D05194(a1);
  }
}

uint64_t sub_100D0562C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

BOOL sub_100D0563C(uint64_t a1, uint64_t a2)
{
  return sub_100D05644(a1, *(double *)(a2 + 76));
}

BOOL sub_100D05644(uint64_t a1, double a2)
{
  double v4;
  double v5;
  NSObject *v6;
  uint64_t v7;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;

  v4 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
  v5 = v4 - (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  if (v5 > a2)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102180480);
    v6 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(unsigned int *)(a1 + 16);
      v9[0] = 68289283;
      v9[1] = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2049;
      v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"contains invalid harvest point that exceeds maximum age\", \"subHarvester\":%{private, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v9, 0x1Cu);
    }
  }
  return v5 <= a2;
}

void sub_100D05770(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;

  v2 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 160))(a1);
  (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 168))(a1);
  v3 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 160))(a1);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102180480);
  v4 = v2 - v3;
  v5 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
  {
    v6 = a1[4];
    v7[0] = 68289539;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2049;
    v11 = v6;
    v12 = 2049;
    v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"pruned harvest points\", \"subHarvester\":%{private, location:CLSubHarvesterIdentifier}lld, \"prunedPointsCount\":%{private}lu}", (uint8_t *)v7, 0x26u);
  }
  a1[53] += v4;
  sub_100D05194((uint64_t)a1);
}

void sub_100D058B4(unsigned int *a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;

  v2 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 160))(a1);
  (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 176))(a1);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102180480);
  v3 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
  {
    v4 = a1[4];
    v5[0] = 68289539;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2049;
    v9 = v4;
    v10 = 2049;
    v11 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"cleared harvest points\", \"subHarvester\":%{private, location:CLSubHarvesterIdentifier}lld, \"clearedPointsCount\":%{private}lu}", (uint8_t *)v5, 0x26u);
  }
  a1[54] += v2;
  sub_100D05194((uint64_t)a1);
}

void sub_100D059E0(uint64_t a1)
{
  int v2;
  double v3;
  uint64_t v4;
  NSObject *v5;
  void **v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *i;
  NSObject *v15;
  void **v16;
  int v17;
  int v18;
  int v19;
  void **v20;
  void **v21;
  __int128 v22;
  void *v23;
  int v24;
  void *__p[2];
  char v26;
  _BYTE buf[40];
  _BYTE v28[24];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;

  v2 = *(unsigned __int8 *)(a1 + 344);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
  v4 = 224;
  if (!v2)
    v4 = 232;
  *(double *)(a1 + v4) = v3 - *(double *)(a1 + 336) + *(double *)(a1 + v4);
  *(double *)(a1 + 336) = v3;
  *(double *)(a1 + 144) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102180480);
  v5 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    sub_100B6ADE8(*(_DWORD *)(a1 + 200));
    v6 = v26 >= 0 ? __p : (void **)__p[0];
    v7 = *(_DWORD *)(a1 + 204);
    v8 = *(_DWORD *)(a1 + 208);
    v9 = *(_DWORD *)(a1 + 212);
    v10 = *(_DWORD *)(a1 + 216);
    v11 = *(_QWORD *)(a1 + 224);
    v12 = *(_QWORD *)(a1 + 232);
    *(_DWORD *)buf = 68290819;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2081;
    *(_QWORD *)&buf[20] = v6;
    *(_WORD *)&buf[28] = 1025;
    *(_DWORD *)&buf[30] = v7;
    *(_WORD *)&buf[34] = 1025;
    *(_DWORD *)&buf[36] = v8;
    *(_WORD *)v28 = 1025;
    *(_DWORD *)&v28[2] = v9;
    *(_WORD *)&v28[6] = 1025;
    *(_DWORD *)&v28[8] = v10;
    *(_WORD *)&v28[12] = 2049;
    *(_QWORD *)&v28[14] = v11;
    *(_WORD *)&v28[22] = 2049;
    *(_QWORD *)&v29 = v12;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"SubHarvesterMetrics\", \"subHarvesterIdentifier\":%{private, location:escape_only}s, \"pointsReceived\":%{private}d, \"pointsSaved\":%{private}d, \"pointsPruned\":%{private}d, \"pointsCleared\":%{private}d, \"durationUploadCapable\":\"%{private}f\", \"durationUploadIncapable\":\"%{private}f\"}", buf, 0x48u);
    if (v26 < 0)
      operator delete(__p[0]);
  }
  v13 = *(unsigned __int8 **)(a1 + 240);
  for (i = *(unsigned __int8 **)(a1 + 248); v13 != i; v13 += 12)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102180480);
    v15 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      sub_100B6ADE8(*(_DWORD *)(a1 + 200));
      v16 = __p;
      if (v26 < 0)
        v16 = (void **)__p[0];
      v17 = *v13;
      v18 = *((_DWORD *)v13 + 1);
      v19 = *((_DWORD *)v13 + 2);
      *(_DWORD *)buf = 68290051;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v16;
      *(_WORD *)&buf[28] = 1025;
      *(_DWORD *)&buf[30] = v17;
      *(_WORD *)&buf[34] = 1025;
      *(_DWORD *)&buf[36] = v18;
      *(_WORD *)v28 = 1025;
      *(_DWORD *)&v28[2] = v19;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"SubHarvesterUploadAttempt\", \"subHarvesterIdentifier\":%{private, location:escape_only}s, \"uploadSucceeded\":%{private}d, \"errorCode\":%{private}d, \"pointsAttached\":%{private}d}", buf, 0x2Eu);
      if (v26 < 0)
        operator delete(__p[0]);
    }
  }
  sub_100D04A0C(a1, (uint64_t)buf);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)buf;
  v20 = (void **)(a1 + 152);
  if (*(char *)(a1 + 175) < 0)
    operator delete(*v20);
  *(_OWORD *)v20 = *(_OWORD *)&buf[16];
  *(_QWORD *)(a1 + 168) = *(_QWORD *)&buf[32];
  buf[39] = 0;
  buf[16] = 0;
  v21 = (void **)(a1 + 176);
  if (*(char *)(a1 + 199) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = *(_OWORD *)v28;
  v22 = v30;
  *(_OWORD *)(a1 + 200) = v29;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)&v28[16];
  v28[23] = 0;
  v28[0] = 0;
  *(_OWORD *)(a1 + 216) = v22;
  *(_QWORD *)(a1 + 232) = v31;
  v23 = *(void **)(a1 + 240);
  if (v23)
  {
    *(_QWORD *)(a1 + 248) = v23;
    operator delete(v23);
    v24 = v28[23];
    *(_OWORD *)(a1 + 240) = v32;
    *(_QWORD *)(a1 + 256) = v33;
    v33 = 0;
    v32 = 0uLL;
    if (v24 < 0)
      operator delete(*(void **)v28);
  }
  else
  {
    *(_OWORD *)(a1 + 240) = v32;
    *(_QWORD *)(a1 + 256) = v33;
    v33 = 0;
    v32 = 0uLL;
  }
  if ((buf[39] & 0x80000000) != 0)
    operator delete(*(void **)&buf[16]);
}

void sub_100D05DBC(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

_QWORD *sub_100D05DE8(_QWORD *a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_100D05EB4((uint64_t)a1, "CLCyclingDevice", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = off_1021804B0;
  a1[9] = off_102180568;
  sub_100E81598(a1 + 47, 0, 0);
  (*(void (**)(_QWORD *))(*a1 + 112))(a1);
  return a1;
}

void sub_100D05E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D05EB4(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_102138DD8;
  *(_QWORD *)a1 = off_102180768;
  *(_QWORD *)(a1 + 72) = off_102180810;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_102180768;
  *(_QWORD *)(a1 + 72) = off_102180810;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = 12000;
  *(_QWORD *)(a1 + 304) = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 312));
  *(_QWORD *)(a1 + 312) = &off_102138DD8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_100D0626C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;

  sub_10187E514((uint64_t)&a19);
  v24[38] = off_102138DA8;
  sub_100427950(v28);
  sub_100D06624(v27);
  sub_100D08A50(v26);
  sub_101138068(a12);
  *v24 = off_102138DA8;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_100D06318()
{
  JUMPOUT(0x100D062F8);
}

uint64_t sub_100D06320(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 72) = off_102180810;
  v2 = a1 + 72;
  *(_QWORD *)a1 = off_102180768;
  *(_QWORD *)(a1 + 304) = off_102138DA8;
  sub_100427950((_QWORD *)(a1 + 312));
  if (*(char *)(a1 + 295) < 0)
    operator delete(*(void **)(a1 + 272));
  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  sub_100D08A50((_QWORD *)(a1 + 176));
  sub_101138068(v2);
  *(_QWORD *)a1 = off_102138DA8;
  sub_100427950((_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_100D063C4(uint64_t a1)
{
  return sub_100D06320(a1 - 72);
}

void sub_100D063CC(uint64_t a1)
{
  sub_100D06320(a1);
  operator delete();
}

void sub_100D063F0(uint64_t a1)
{
  sub_100D06320(a1 - 72);
  operator delete();
}

uint64_t sub_100D06418()
{
  CFAbsoluteTimeGetCurrent();
  return -1;
}

uint64_t sub_100D06430()
{
  CFAbsoluteTimeGetCurrent();
  return -1;
}

uint64_t sub_100D06448(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 112;
  v3 = a1 + 72;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 112) + 16))(a1 + 112);
  if (sub_10008950C(v3))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT COUNT(*) FROM CLCyclingDevice");
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return 0xFFFFFFFFLL;
}

void sub_100D0651C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D06558(uint64_t a1)
{
  return sub_100D06448(a1 - 72);
}

uint64_t sub_100D06560(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  const unsigned __int8 *v10;
  sqlite3_stmt *v11;
  const unsigned __int8 *v12;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)a2 = sqlite3_column_int64(v6, 0);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v7, 1);
  v8 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 16) = sqlite3_column_int(v8, 2);
  v9 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v10 = sqlite3_column_text(v9, 3);
  std::string::assign((std::string *)(a2 + 24), (const std::string::value_type *)v10);
  v11 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v12 = sqlite3_column_text(v11, 4);
  std::string::assign((std::string *)(a2 + 48), (const std::string::value_type *)v12);
  return 0;
}

uint64_t sub_100D06624(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_100D06664(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  __int16 v11;

  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v6 = a1 + 72;
  v10 = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v11 = 256;
  if (sub_10008950C(v6))
  {
    v8 = *a2;
    v7 = a2[1];
    if (v7 != *a2)
    {
      do
      {
        v7 -= 72;
        sub_100D08B8C((uint64_t)(a2 + 2), v7);
      }
      while (v7 != v8);
    }
    a2[1] = v8;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from CLCyclingDevice ORDER BY start_time ASC");
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
}

void sub_100D067C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  sub_100D06624((uint64_t)va);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_10187E514(v3 - 72);
  _Unwind_Resume(a1);
}

uint64_t sub_100D0681C(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1000CC4F4(a1[10]);
  if ((_DWORD)result)
  {
    sub_100634364(a1[10], "CLCyclingDevice", (const char **)&off_1021805F8, (const std::string::value_type **)&off_1022FAF10, 0);
    result = sub_10063D314(a1[10], "DELETE FROM CLCyclingDevice WHERE power_meter_id < 0");
    a1[47] = result;
    a1[48] = v3;
  }
  return result;
}

uint64_t sub_100D0687C(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM CLCyclingDevice");
  return result;
}

void sub_100D06910(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D06930(uint64_t a1)
{
  return sub_100D0687C(a1 - 72);
}

void sub_100D06940(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  _DWORD buf[3];
  __int16 v30;
  int v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;

  if ((sub_10008950C(a1 + 72) & 1) != 0)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "INSERT INTO CLCyclingDevice (start_time, power_meter_id, manufacturer, serial_number) VALUES (?, ?, ?, ?)");
  if (qword_10229FF90 != -1)
    dispatch_once(&qword_10229FF90, &stru_102180718);
  v4 = qword_10229FF98;
  if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_ERROR))
  {
    v5 = *(_QWORD *)(a2 + 24);
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_DWORD *)(a2 + 16);
    if (*(char *)(a2 + 47) >= 0)
      v5 = a2 + 24;
    v8 = a2 + 48;
    if (*(char *)(a2 + 71) < 0)
      v8 = *(_QWORD *)(a2 + 48);
    buf[0] = 134349826;
    *(_QWORD *)&buf[1] = v6;
    v30 = 1026;
    v31 = v7;
    v32 = 2082;
    v33 = v5;
    v34 = 2082;
    v35 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "CLCyclingDeviceDb, database isn't available for entry with startTime, %{public}f, power meter id, %{public}d, manufacturer, %{public}s, serial number, %{public}s", (uint8_t *)buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_102180718);
    v11 = *(_QWORD *)(a2 + 24);
    v10 = a2 + 24;
    v9 = v11;
    v12 = *(_QWORD *)(v10 - 16);
    v13 = *(_DWORD *)(v10 - 8);
    if (*(char *)(v10 + 23) >= 0)
      v9 = v10;
    v14 = *(char *)(v10 + 47);
    v17 = *(_QWORD *)(v10 + 24);
    v16 = v10 + 24;
    v15 = v17;
    if (v14 >= 0)
      v18 = v16;
    else
      v18 = v15;
    v21 = 134349826;
    v22 = v12;
    v23 = 1026;
    v24 = v13;
    v25 = 2082;
    v26 = v9;
    v27 = 2082;
    v28 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 16, "CLCyclingDeviceDb, database isn't available for entry with startTime, %{public}f, power meter id, %{public}d, manufacturer, %{public}s, serial number, %{public}s", &v21, 38);
    v20 = (char *)v19;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLCyclingDeviceDb::insertRecordUL(const CLCyclingDeviceDbRow &, BOOL)", "%s\n", v19);
    if (v20 != (char *)buf)
      free(v20);
  }
}

void sub_100D06D84(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D06DB0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 120))(a1, a2, 0);
}

uint64_t sub_100D06DC0()
{
  return 0;
}

uint64_t sub_100D06DC8(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM CLCyclingDevice ORDER BY id DESC LIMIT 1");
  return 2;
}

void sub_100D06E48(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D06E68(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17) < 0)
  {
    v1 = v16[1];
    operator delete(v16[0]);
    if (v1)
    {
LABEL_3:
      if (sub_10008950C(a1 + 9))
      {
        sub_100263E50((uint64_t)v16);
        v5 = sub_100263F7C(&v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        if ((v14 & 0x80u) == 0)
          v7 = v14;
        else
          v7 = (uint64_t)__p[1];
        v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
        sub_100263F7C(v8, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0)
          operator delete(__p[0]);
        v9 = a1[10];
        std::stringbuf::str(__p, v18);
        if ((v14 & 0x80u) == 0)
          v10 = (char *)__p;
        else
          v10 = (char *)__p[0];
        sub_1000CDA68(v9, v10);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17))
  {
    goto LABEL_3;
  }
  sub_101926BC0(v4);
  v15 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(void **)((char *)v16
  v17 = v11;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf(v1);
  std::ios::~ios(&v20);
  return 2;
}

void sub_100D070F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_100D07170(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102180850);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102180850);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102180850);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLCyclingDeviceDbRow, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = CLCyclingDeviceDbRow, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_100D077F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_100D07828(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;

  v5 = *a3;
  *(_DWORD *)(a2 + 16) = *((_DWORD *)a3 + 4);
  *(_OWORD *)a2 = v5;
  std::string::operator=((std::string *)(a2 + 24), (const std::string *)a3 + 1);
  return std::string::operator=((std::string *)(a2 + 48), (const std::string *)a3 + 2);
}

uint64_t sub_100D0786C(uint64_t a1)
{
  return sub_100D07170(a1 - 72);
}

void sub_100D07874(id a1)
{
  qword_10229FF98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CyclingPower");
}

void sub_100D078A0(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100D078CC(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  void *v14;
  _Unwind_Exception *v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  void *v20[2];
  uint64_t v21;
  _QWORD v22[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v20);
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
    if (HIBYTE(v21))
      goto LABEL_3;
LABEL_20:
    v15 = (_Unwind_Exception *)sub_101926D2C(v4);
    sub_100D06624((uint64_t)__p);
    v16 = v19;
    v19 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    sub_1018B38B4((uint64_t)v20);
    _Unwind_Resume(v15);
  }
  v14 = v20[1];
  operator delete(v20[0]);
  if (!v14)
    goto LABEL_20;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    v7 = *a2;
    v6 = a2[1];
    if (v6 != *a2)
    {
      do
      {
        v6 -= 72;
        sub_100D08B8C((uint64_t)(a2 + 2), v6);
      }
      while (v6 != v7);
    }
    a2[1] = v7;
    sub_100263E50((uint64_t)v20);
    v8 = sub_100263F7C(&v21, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v18 & 0x80u) == 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    if ((v18 & 0x80u) == 0)
      v10 = v18;
    else
      v10 = (uint64_t)__p[1];
    v11 = sub_100263F7C(v8, (uint64_t)v9, v10);
    sub_100263F7C(v11, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v18 < 0)
      operator delete(__p[0]);
    v12 = a1[10];
    std::stringbuf::str(__p, v22);
    if ((v18 & 0x80u) == 0)
      v13 = (char *)__p;
    else
      v13 = (char *)__p[0];
    sub_1000CDA68(v12, v13);
  }
  return result;
}

id *sub_100D07BB8(uint64_t *a1, __int128 *a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  uint64_t v23;
  const char *v24;
  uint8_t *v25;
  double v26;
  const char *v27;
  uint8_t *v28;
  const char *v29;
  uint8_t *v30;
  double v31;
  char v32[8];
  double v33;
  void *v34[2];
  void *__p[2];
  __int128 v36;
  id v37[2];
  int v38;
  double v39;
  __int16 v40;
  uint64_t v41;
  uint8_t buf[4];
  double v43;
  __int16 v44;
  uint64_t v45;

  v37[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v37[1] = 0;
  if (*((double *)a1 + 29) <= 0.0
    || !(*(unsigned int (**)(uint64_t *, uint64_t *, __int128 *))(*a1 + 136))(a1, a1 + 28, a2))
  {
    if ((a3 & 1) == 0)
      sub_10001E638(a1[10]);
    *(_OWORD *)__p = 0u;
    v36 = 0u;
    *(_OWORD *)v34 = 0u;
    v6 = (*(uint64_t (**)(uint64_t *, char *))(*a1 + 104))(a1, v32);
    if (v6 != 1)
    {
      if (v6)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102180850);
        v14 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_102180850);
          LOWORD(v38) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v38, 2);
          v16 = (uint8_t *)v15;
          sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLCyclingDeviceDbRow, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCyclingDeviceDbRow, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
          if (v16 != buf)
            free(v16);
        }
LABEL_43:
        if (SHIBYTE(v36) < 0)
          operator delete(__p[1]);
        if (SHIBYTE(__p[0]) < 0)
        {
          operator delete(v34[0]);
          if ((a3 & 1) != 0)
            return sub_100131740(v37);
        }
        else if ((a3 & 1) != 0)
        {
          return sub_100131740(v37);
        }
        sub_10001E99C(a1[10]);
        return sub_100131740(v37);
      }
      v7 = *((double *)a2 + 1);
      v8 = v33;
      v9 = v7 - v33;
      if (v7 - v33 < 0.0)
        v9 = -(v7 - v33);
      if (v9 > 604800.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102180850);
        v10 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
        {
          v11 = *((_QWORD *)a2 + 1);
          *(_DWORD *)buf = 134349312;
          v43 = v33;
          v44 = 2050;
          v45 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_102180850);
          v23 = *((_QWORD *)a2 + 1);
          v38 = 134349312;
          v39 = v33;
          v40 = 2050;
          v41 = v23;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v38, 22);
          v25 = (uint8_t *)v24;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLCyclingDeviceDbRow, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCyclingDeviceDbRow, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v24);
          if (v25 != buf)
            free(v25);
        }
        CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
        v7 = *((double *)a2 + 1);
        v8 = v33;
      }
      if (v7 < v8)
      {
        if (v8 - v7 < 10.0)
        {
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_102180850);
          v12 = qword_10229FC78;
          if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
          {
            v13 = *((double *)a2 + 1);
            *(_DWORD *)buf = 134217984;
            v43 = v13;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC70 != -1)
              dispatch_once(&qword_10229FC70, &stru_102180850);
            v26 = *((double *)a2 + 1);
            v38 = 134217984;
            v39 = v26;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v38));
            v28 = (uint8_t *)v27;
            sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLCyclingDeviceDbRow, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCyclingDeviceDbRow, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v27);
            if (v28 != buf)
              free(v28);
          }
          (*(void (**)(uint64_t *, __int128 *))(*a1 + 88))(a1, a2);
          goto LABEL_42;
        }
        v17 = v7 - v8;
        v18 = *((float *)a1 + 34);
        if (qword_10229FC70 != -1)
        {
          v31 = *((float *)a1 + 34);
          dispatch_once(&qword_10229FC70, &stru_102180850);
          v18 = v31;
        }
        v19 = v17 - v18;
        v20 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          v43 = v19;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_102180850);
          v38 = 134217984;
          v39 = v19;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v38));
          v30 = (uint8_t *)v29;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLCyclingDeviceDbRow, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCyclingDeviceDbRow, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v29);
          if (v30 != buf)
            free(v30);
        }
        (*(void (**)(uint64_t *, double))(*a1 + 96))(a1, v19);
      }
      (*(void (**)(uint64_t *, char *, uint64_t *, __int128 *))(*a1 + 144))(a1, v32, a1 + 28, a2);
    }
    (*(void (**)(uint64_t *, __int128 *, uint64_t))(*a1 + 120))(a1, a2, 1);
LABEL_42:
    v21 = *a2;
    *((_DWORD *)a1 + 60) = *((_DWORD *)a2 + 4);
    *((_OWORD *)a1 + 14) = v21;
    std::string::operator=((std::string *)(a1 + 31), (const std::string *)a2 + 1);
    std::string::operator=((std::string *)(a1 + 34), (const std::string *)a2 + 2);
    goto LABEL_43;
  }
  (*(void (**)(uint64_t *, uint64_t *, __int128 *))(*a1 + 72))(a1, a1 + 28, a2);
  return sub_100131740(v37);
}

void sub_100D0832C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_100D06624((uint64_t)va);
  sub_100131740((id *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100D08364(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_101926E98(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_100D085C4(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_101927004(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_100D087FC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_101927170(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_100D08A24(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100D08A50(_QWORD *a1)
{
  _QWORD *v2;
  void **v3;
  void **v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = a1 + 5;
  v3 = (void **)a1[1];
  v4 = (void **)a1[2];
  if (v4 == v3)
  {
    v4 = (void **)a1[1];
  }
  else
  {
    v5 = a1[4];
    v6 = &v3[v5 / 0x38];
    v7 = (uint64_t)*v6 + 72 * (v5 % 0x38);
    v8 = (unint64_t)v3[(a1[5] + v5) / 0x38] + 72 * ((a1[5] + v5) % 0x38);
    if (v7 != v8)
    {
      do
      {
        sub_100D08B8C((uint64_t)v2, v7);
        v7 += 72;
        if (v7 - (_QWORD)*v6 == 4032)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v3 = (void **)a1[1];
      v4 = (void **)a1[2];
    }
  }
  *v2 = 0;
  v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v4 = (void **)a1[2];
      v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 28;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 56;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    v13 = *v3++;
    operator delete(v13);
  }
  return sub_10002E778((uint64_t)a1);
}

void sub_100D08B8C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 71) < 0)
    operator delete(*(void **)(a2 + 48));
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
}

_BYTE *sub_100D08BD0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  _BYTE *v6;
  __int128 v7;
  _BYTE *result;
  __int128 v9;

  v5 = *a3;
  *(_DWORD *)(a2 + 16) = *((_DWORD *)a3 + 4);
  *(_OWORD *)a2 = v5;
  v6 = (_BYTE *)(a2 + 24);
  if (*((char *)a3 + 47) < 0)
  {
    sub_100115CE4(v6, *((void **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v7 = *(__int128 *)((char *)a3 + 24);
    *(_QWORD *)(a2 + 40) = *((_QWORD *)a3 + 5);
    *(_OWORD *)v6 = v7;
  }
  result = (_BYTE *)(a2 + 48);
  if (*((char *)a3 + 71) < 0)
    return sub_100115CE4(result, *((void **)a3 + 6), *((_QWORD *)a3 + 7));
  v9 = a3[3];
  *(_QWORD *)(a2 + 64) = *((_QWORD *)a3 + 8);
  *(_OWORD *)result = v9;
  return result;
}

void sub_100D08C64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D08C80(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL)
    sub_100259694();
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7)
    v6 = 0x38E38E38E38E38ELL;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_10029D26C((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[72 * v3];
  v13 = &v7[72 * v6];
  sub_100D08BD0((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 72;
  sub_100D08DA4(a1, &v10);
  v8 = a1[1];
  sub_100D08F60(&v10);
  return v8;
}

void sub_100D08D90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100D08F60((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D08DA4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100D08E18((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100D08E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 72);
      *(_DWORD *)(v9 - 56) = *(_DWORD *)(a3 - 56);
      *(_OWORD *)(v9 - 72) = v10;
      v11 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v11;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v12 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v12;
      v9 -= 72;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    *((_QWORD *)&v17 + 1) = v9;
  }
  v15 = 1;
  sub_100D08EDC((uint64_t)v14);
  return a6;
}

uint64_t sub_100D08EDC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100D08F10((uint64_t *)a1);
  return a1;
}

void sub_100D08F10(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_100D08B8C(v3, v1);
      v1 += 72;
    }
    while (v1 != v2);
  }
}

void **sub_100D08F60(void **a1)
{
  sub_100D08F90(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_100D08F90(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 72;
    sub_100D08B8C(v4, i - 72);
  }
}

void sub_100D09078(id a1)
{
  qword_102307C60 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLDMVisionServiceSilo"));
}

void sub_100D090E8(id a1)
{
  BOOL v1;

  sub_100197040();
  if (sub_1000C4240())
    v1 = sub_1002433D4() != 0;
  else
    v1 = 0;
  byte_102307C70 = v1;
}

void sub_100D099E8()
{
  operator delete();
}

id sub_100D09A14(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "handleDeviceMotionData:", a1);
}

void sub_100D09A20(uint64_t a1, _DWORD *a2, uint64_t a3, void *a4)
{
  if (!*a2)
    _objc_msgSend(a4, "handleGeomagneticModelData:");
}

_QWORD *sub_100D09F5C(_QWORD *result)
{
  *result = off_1021808E0;
  return result;
}

void sub_100D09FB8(id a1)
{
  qword_10229FD28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

void sub_100D09FE4(_QWORD *a1)
{
  *a1 = off_1021808E0;
  operator delete();
}

void sub_100D0A0D8(id a1)
{
  if (NSClassFromString(CFSTR("RTRoutineManager"))
    && -[NSFileManager fileExistsAtPath:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "fileExistsAtPath:", +[CLRoutineMonitor bundlePath](CLRoutineMonitor, "bundlePath"))&& (sub_10075F4B4() & 1) == 0)
  {
    byte_102307C98 = 1;
  }
}

void sub_100D0A1E4(id a1)
{
  qword_102307CA8 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLRoutineMonitorSilo"));
}

void sub_100D0A254(id a1)
{
  NSFileManager *v1;
  NSArray *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  id v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  id v16;
  uint8_t buf[4];
  id v18;
  _BYTE v19[128];

  v1 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
  v2 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 0x408uLL, 0);
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = -[NSArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v11, v19, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v12;
    while (2)
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v12 != v5)
          objc_enumerationMutation(v2);
        v7 = objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i), "stringByAppendingPathComponent:", CFSTR("LocationBundles/Routine.bundle"));
        if (-[NSFileManager fileExistsAtPath:](v1, "fileExistsAtPath:", v7))
        {
          if (qword_1022A01F0 != -1)
            dispatch_once(&qword_1022A01F0, &stru_102180AC0);
          v8 = qword_1022A01F8;
          if (os_log_type_enabled((os_log_t)qword_1022A01F8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v18 = v7;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Bundle path for LocationBundles/Routine.bundle found %@", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01F0 != -1)
              dispatch_once(&qword_1022A01F0, &stru_102180AC0);
            v15 = 138412290;
            v16 = v7;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01F8, 1, "Bundle path for LocationBundles/Routine.bundle found %@", &v15, 12);
            v10 = (uint8_t *)v9;
            sub_100512490("Generic", 1, 0, 2, "+[CLRoutineMonitor bundlePath]_block_invoke", "%s\n", v9);
            if (v10 != buf)
              free(v10);
          }
          qword_102307CB8 = (uint64_t)objc_msgSend(v7, "copy");
          return;
        }
      }
      v4 = -[NSArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v11, v19, 16);
      if (v4)
        continue;
      break;
    }
  }
}

void sub_100D0ABEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_10011A5A8(&a9);
  if (a16 < 0)
    operator delete(__p);
  _Block_object_dispose(&a22, 8);
  _Unwind_Resume(a1);
}

id sub_100D0AC9C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "onWakeRoutinedTimer");
}

id sub_100D0ACAC(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  __int128 v5;
  _OWORD v7[3];
  uint64_t v8;

  v4 = *a2;
  v5 = *(_OWORD *)(a3 + 16);
  v7[0] = *(_OWORD *)a3;
  v7[1] = v5;
  v7[2] = *(_OWORD *)(a3 + 32);
  v8 = *(_QWORD *)(a3 + 48);
  return objc_msgSend(a4, "onVdrNotification:data:", v4, v7);
}

void sub_100D0ACF0(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  void *v7[2];
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *__p;
  char v20;
  uint64_t v21;

  v6 = *a2;
  sub_1001AF190((char *)v7, (__int128 *)a3);
  v21 = *(_QWORD *)(a3 + 184);
  objc_msgSend(a4, "onClientManagerNotification:data:", v6, v7);
  if (v20 < 0)
    operator delete(__p);
  if (v18 < 0)
    operator delete(v17);
  if (v16 < 0)
    operator delete(v15);
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(v11);
  if (v10 < 0)
    operator delete(v9);
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_100D0ADB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100010174((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_100D0AF94(uint64_t a1, void *a2)
{
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "routineManager"), "stopMonitoringScenarioTriggerOfType:", objc_msgSend(a2, "unsignedIntegerValue"));
}

id sub_100D0B1C4(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  _QWORD v7[6];

  v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100D0B234;
  v7[3] = &unk_10212BB30;
  v5 = *(_QWORD *)(a1 + 32);
  v7[4] = a2;
  v7[5] = v5;
  return objc_msgSend(v4, "async:", v7);
}

id sub_100D0B234(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;

  if (qword_1022A01F0 != -1)
    dispatch_once(&qword_1022A01F0, &stru_102180AC0);
  v2 = qword_1022A01F8;
  if (os_log_type_enabled((os_log_t)qword_1022A01F8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v5[0] = 68289283;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2113;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"received place inferences for cache\", \"placeInferences\":%{private, location:escape_only}@}", (uint8_t *)v5, 0x1Cu);
  }
  objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "cachedPlaceInferences"), "removeAllObjects");
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "cachedPlaceInferences"), "addObjectsFromArray:", *(_QWORD *)(a1 + 32));
}

id sub_100D0B5A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  _QWORD v8[7];

  v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100D0B628;
  v8[3] = &unk_10212BBA8;
  v8[4] = a2;
  v8[5] = a3;
  v8[6] = *(_QWORD *)(a1 + 32);
  return objc_msgSend(v6, "async:", v8);
}

void sub_100D0B628(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  int v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  uint64_t v27;

  if (qword_1022A01F0 != -1)
    dispatch_once(&qword_1022A01F0, &stru_102180AC0);
  v2 = qword_1022A01F8;
  if (os_log_type_enabled((os_log_t)qword_1022A01F8, OS_LOG_TYPE_INFO))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    v25 = v3;
    v26 = 2112;
    v27 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#slv received visit from routined, visit, %@, error, %@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01F0 != -1)
      dispatch_once(&qword_1022A01F0, &stru_102180AC0);
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    v20 = 138412546;
    v21 = v11;
    v22 = 2112;
    v23 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01F8, 1, "#slv received visit from routined, visit, %@, error, %@", &v20, 22);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "-[CLRoutineMonitor startMonitoringVisitsForClient:]_block_invoke", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  if (!*(_QWORD *)(a1 + 40))
  {
    if (*(_QWORD *)(a1 + 32))
    {
      v5 = objc_msgSend(objc_alloc((Class)CLVisit), "initWithVisit:", *(_QWORD *)(a1 + 32));
      v15 = 0u;
      v16 = 0u;
      v17 = 0u;
      v18 = 0u;
      v6 = objc_msgSend(*(id *)(a1 + 48), "visitClients");
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      if (v7)
      {
        v8 = v7;
        v9 = *(_QWORD *)v16;
        do
        {
          for (i = 0; i != v8; i = (char *)i + 1)
          {
            if (*(_QWORD *)v16 != v9)
              objc_enumerationMutation(v6);
            objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i), "onVisit:", v5);
          }
          v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
        }
        while (v8);
      }
    }
  }
}

id sub_100D0BCAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  _QWORD v8[7];

  v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100D0BD2C;
  v8[3] = &unk_10212BBA8;
  v8[4] = a2;
  v8[5] = a3;
  v8[6] = *(_QWORD *)(a1 + 32);
  return objc_msgSend(v6, "async:", v8);
}

void sub_100D0BD2C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  int v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  uint64_t v27;

  if (qword_1022A01F0 != -1)
    dispatch_once(&qword_1022A01F0, &stru_102180AC0);
  v2 = qword_1022A01F8;
  if (os_log_type_enabled((os_log_t)qword_1022A01F8, OS_LOG_TYPE_INFO))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    v25 = v3;
    v26 = 2112;
    v27 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#slv Received leeched visit from routined, visit, %@, error, %@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01F0 != -1)
      dispatch_once(&qword_1022A01F0, &stru_102180AC0);
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    v20 = 138412546;
    v21 = v11;
    v22 = 2112;
    v23 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01F8, 1, "#slv Received leeched visit from routined, visit, %@, error, %@", &v20, 22);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "-[CLRoutineMonitor startLeechingVisitsForClient:]_block_invoke", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  if (!*(_QWORD *)(a1 + 40))
  {
    if (*(_QWORD *)(a1 + 32))
    {
      v5 = objc_msgSend(objc_alloc((Class)CLVisit), "initWithVisit:", *(_QWORD *)(a1 + 32));
      v15 = 0u;
      v16 = 0u;
      v17 = 0u;
      v18 = 0u;
      v6 = objc_msgSend(*(id *)(a1 + 48), "leechClients");
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      if (v7)
      {
        v8 = v7;
        v9 = *(_QWORD *)v16;
        do
        {
          for (i = 0; i != v8; i = (char *)i + 1)
          {
            if (*(_QWORD *)v16 != v9)
              objc_enumerationMutation(v6);
            objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i), "onVisit:", v5);
          }
          v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
        }
        while (v8);
      }
    }
  }
}

id sub_100D0C378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  _QWORD v8[7];

  v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100D0C3F8;
  v8[3] = &unk_10212BBA8;
  v8[4] = a2;
  v8[5] = a3;
  v8[6] = *(_QWORD *)(a1 + 32);
  return objc_msgSend(v6, "async:", v8);
}

void sub_100D0C3F8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  int v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  uint64_t v35;

  if (qword_1022A01F0 != -1)
    dispatch_once(&qword_1022A01F0, &stru_102180AC0);
  v2 = qword_1022A01F8;
  if (os_log_type_enabled((os_log_t)qword_1022A01F8, OS_LOG_TYPE_INFO))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    v33 = v3;
    v34 = 2112;
    v35 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#slv Received leeched low confidence visit from routined, visit, %@, error, %@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01F0 != -1)
      dispatch_once(&qword_1022A01F0, &stru_102180AC0);
    v18 = *(_QWORD *)(a1 + 32);
    v19 = *(_QWORD *)(a1 + 40);
    v28 = 138412546;
    v29 = v18;
    v30 = 2112;
    v31 = v19;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01F8, 1, "#slv Received leeched low confidence visit from routined, visit, %@, error, %@", &v28, 22);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "-[CLRoutineMonitor startLeechingLowConfidenceVisitsForClient:]_block_invoke", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  v5 = *(void **)(a1 + 40);
  if (v5)
  {
    v6 = objc_msgSend(v5, "domain");
    if (objc_msgSend(v6, "isEqualToString:", RTErrorDomain)
      && objc_msgSend(*(id *)(a1 + 40), "code") != (id)1)
    {
      if (qword_1022A01F0 != -1)
        dispatch_once(&qword_1022A01F0, &stru_102180AC0);
      v7 = qword_1022A01F8;
      if (os_log_type_enabled((os_log_t)qword_1022A01F8, OS_LOG_TYPE_ERROR))
      {
        v8 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 138412290;
        v33 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#slv Got unexpceted error from routined, error, %@", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01F0 != -1)
          dispatch_once(&qword_1022A01F0, &stru_102180AC0);
        v9 = *(_QWORD *)(a1 + 40);
        v28 = 138412290;
        v29 = v9;
        LODWORD(v22) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01F8, 16, "#slv Got unexpceted error from routined, error, %@", &v28, v22);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 0, "-[CLRoutineMonitor startLeechingLowConfidenceVisitsForClient:]_block_invoke", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
    }
  }
  else
  {
    v12 = objc_msgSend(objc_alloc((Class)CLVisit), "initWithVisit:", *(_QWORD *)(a1 + 32));
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v13 = objc_msgSend(*(id *)(a1 + 48), "lowConfidenceVisitLeechClients");
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v24;
      do
      {
        for (i = 0; i != v15; i = (char *)i + 1)
        {
          if (*(_QWORD *)v24 != v16)
            objc_enumerationMutation(v13);
          objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i), "onLowConfidenceVisit:", v12);
        }
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
      }
      while (v15);
    }
  }
}

void sub_100D0D40C(id a1)
{
  int v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  int v8;

  sub_1001E4804(&v6);
  v8 = 0;
  v1 = sub_1001E4B84(v6, "CLTSPBatchSizeInertialDataSent", &v8);
  v2 = v8;
  if (!v1)
    v2 = 60;
  qword_1022FB040 = v2;
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100D0D4A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100D0E3BC(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
  if (qword_1022A01F0 != -1)
    dispatch_once(&qword_1022A01F0, &stru_102180AC0);
  v2 = qword_1022A01F8;
  if (os_log_type_enabled((os_log_t)qword_1022A01F8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Connection interrupted", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01F0 != -1)
      dispatch_once(&qword_1022A01F0, &stru_102180AC0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01F8, 1, "Connection interrupted", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "-[CLRoutineMonitor listener:shouldAcceptNewConnection:]_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  objc_msgSend(*(id *)(a1 + 32), "setUpdating:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "setConnection:", 0);
}

id sub_100D0E570(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
  if (qword_1022A01F0 != -1)
    dispatch_once(&qword_1022A01F0, &stru_102180AC0);
  v2 = qword_1022A01F8;
  if (os_log_type_enabled((os_log_t)qword_1022A01F8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Connection invalidated", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01F0 != -1)
      dispatch_once(&qword_1022A01F0, &stru_102180AC0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01F8, 1, "Connection invalidated", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "-[CLRoutineMonitor listener:shouldAcceptNewConnection:]_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  objc_msgSend(*(id *)(a1 + 32), "setUpdating:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "setConnection:", 0);
}

uint64_t sub_100D0EC20(uint64_t a1)
{
  NSObject *v2;
  uint64_t result;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  if (qword_1022A01F0 != -1)
    dispatch_once(&qword_1022A01F0, &stru_102180AC0);
  v2 = qword_1022A01F8;
  if (os_log_type_enabled((os_log_t)qword_1022A01F8, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#location #routine sendLocations replied\"}", (uint8_t *)v4, 0x12u);
  }
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_100D0F8CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  _QWORD v8[6];
  __int128 v9;

  v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100D0F94C;
  v8[3] = &unk_102150F38;
  v8[4] = a2;
  v8[5] = a3;
  v9 = *(_OWORD *)(a1 + 32);
  return objc_msgSend(v6, "async:", v8);
}

void sub_100D0F94C(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  const char *v10;
  uint8_t *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *i;
  uint64_t v17;
  id v18;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  int v28;
  id v29;
  __int16 v30;
  uint64_t v31;
  uint8_t buf[4];
  id v33;
  __int16 v34;
  uint64_t v35;

  if (qword_1022A01F0 != -1)
    dispatch_once(&qword_1022A01F0, &stru_102180AC0);
  v2 = qword_1022A01F8;
  if (os_log_type_enabled((os_log_t)qword_1022A01F8, OS_LOG_TYPE_INFO))
  {
    v3 = objc_msgSend(*(id *)(a1 + 32), "type");
    v4 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 134218242;
    v33 = v3;
    v34 = 2112;
    v35 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#scenarioTrigger Received trigger of type %lu from routined, error %@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01F0 != -1)
      dispatch_once(&qword_1022A01F0, &stru_102180AC0);
    v17 = qword_1022A01F8;
    v18 = objc_msgSend(*(id *)(a1 + 32), "type");
    v19 = *(_QWORD *)(a1 + 40);
    v28 = 134218242;
    v29 = v18;
    v30 = 2112;
    v31 = v19;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v17, 1, "#scenarioTrigger Received trigger of type %lu from routined, error %@", &v28, 22);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "-[CLRoutineMonitor startMonitoringScenarioTriggerOfType:forClient:]_block_invoke", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  v5 = *(void **)(a1 + 40);
  if (v5)
  {
    v6 = objc_msgSend(v5, "domain");
    if (objc_msgSend(v6, "isEqualToString:", RTErrorDomain)
      && objc_msgSend(*(id *)(a1 + 40), "code") != (id)1)
    {
      if (qword_1022A01F0 != -1)
        dispatch_once(&qword_1022A01F0, &stru_102180AC0);
      v7 = qword_1022A01F8;
      if (os_log_type_enabled((os_log_t)qword_1022A01F8, OS_LOG_TYPE_ERROR))
      {
        v8 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 138412290;
        v33 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#scenarioTrigger Got error from routined, error, %@", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01F0 != -1)
          dispatch_once(&qword_1022A01F0, &stru_102180AC0);
        v9 = *(void **)(a1 + 40);
        v28 = 138412290;
        v29 = v9;
        LODWORD(v22) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01F8, 16, "#scenarioTrigger Got error from routined, error, %@", &v28, v22);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 0, "-[CLRoutineMonitor startMonitoringScenarioTriggerOfType:forClient:]_block_invoke", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
    }
  }
  else
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v12 = objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "scenarioTriggerClients"), "objectForKey:", *(_QWORD *)(a1 + 56));
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v24;
      do
      {
        for (i = 0; i != v14; i = (char *)i + 1)
        {
          if (*(_QWORD *)v24 != v15)
            objc_enumerationMutation(v12);
          objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i), "onScenarioTrigger:", *(_QWORD *)(a1 + 32));
        }
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
      }
      while (v14);
    }
  }
}

id sub_100D1024C(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  id v13;
  uint64_t v15;
  _BYTE v16[24];

  if (a3)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102180AE0);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      v15 = 68289282;
      *(_WORD *)v16 = 2082;
      *(_QWORD *)&v16[2] = "";
      *(_WORD *)&v16[10] = 2114;
      *(_QWORD *)&v16[12] = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#storedLocations: CoreRoutine error while getting stored visits.\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v15, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102180AE0);
    }
    v7 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v15 = 68289282;
      *(_WORD *)v16 = 2082;
      *(_QWORD *)&v16[2] = "";
      *(_WORD *)&v16[10] = 2114;
      *(_QWORD *)&v16[12] = a3;
      v8 = "#storedLocations: CoreRoutine error while getting stored visits.";
      v9 = "{\"msg%{public}.0s\":\"#storedLocations: CoreRoutine error while getting stored visits.\", \"Error\":%{public"
           ", location:escape_only}@}";
      v10 = v7;
LABEL_17:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v8, v9, (uint8_t *)&v15, 0x1Cu);
    }
  }
  else if (a2)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102180AE0);
    v11 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      v15 = 68289282;
      *(_WORD *)v16 = 2082;
      *(_QWORD *)&v16[2] = "";
      *(_WORD *)&v16[10] = 2050;
      *(_QWORD *)&v16[12] = objc_msgSend(a2, "count");
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#storedLocations: CoreRoutine returned.\", \"Visits\":%{public}ld}", (uint8_t *)&v15, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102180AE0);
    }
    v12 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v13 = objc_msgSend(a2, "count");
      v15 = 68289282;
      *(_WORD *)v16 = 2082;
      *(_QWORD *)&v16[2] = "";
      *(_WORD *)&v16[10] = 2050;
      *(_QWORD *)&v16[12] = v13;
      v8 = "#storedLocations: CoreRoutine returned.";
      v9 = "{\"msg%{public}.0s\":\"#storedLocations: CoreRoutine returned.\", \"Visits\":%{public}ld}";
      v10 = v12;
      goto LABEL_17;
    }
  }
  return objc_msgSend(*(id *)(a1 + 32), "zipperedStoredLocationsBetweenStartTime:endTime:apartFromEachOther:lyingWithinTimeIntervals:custeredWithVisits:withReply:", *(_QWORD *)(a1 + 40), a2, *(_QWORD *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), v15, *(_OWORD *)v16, *(_QWORD *)&v16[16]);
}

void sub_100D10990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v51 - 224), 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a51, 8);
  _Unwind_Resume(a1);
}

void sub_100D109F4(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  NSObject *v5;
  NSObject *v6;
  NSObject *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  int v21;
  double v22;
  uint64_t v23;
  void *v24;
  id v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  void *v35;
  unint64_t v36;
  double v37;
  id v38;
  id v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v45;
  double v46;
  id v47;
  CLUsageReportCoordinate *v48;
  double v49;
  double v50;
  double v51;
  CLUsageReportCoordinate *v52;
  double v53;
  double v54;
  CLUsageReportCoordinate *v55;
  NSObject *v56;
  int v57;
  int v58;
  __int16 v59;
  const char *v60;
  __int16 v61;
  id v62;

  if (a3)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102180AE0);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      v57 = 68289282;
      v58 = 0;
      v59 = 2082;
      v60 = "";
      v61 = 2114;
      v62 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#storedLocations: CoreRoutine error while getting stored locations.\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v57, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102180AE0);
    }
    v6 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v57 = 68289282;
      v58 = 0;
      v59 = 2082;
      v60 = "";
      v61 = 2114;
      v62 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#storedLocations: CoreRoutine error while getting stored locations.", "{\"msg%{public}.0s\":\"#storedLocations: CoreRoutine error while getting stored locations.\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v57, 0x1Cu);
    }
    return;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102180AE0);
  v10 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v57 = 68289282;
    v58 = 0;
    v59 = 2082;
    v60 = "";
    v61 = 2050;
    v62 = objc_msgSend(a2, "count");
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#storedLocations: enumerateStoredLocationsWithOptions\", \"LocationCount\":%{public}ld}", (uint8_t *)&v57, 0x1Cu);
  }
  if (objc_msgSend(a2, "count"))
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
      if ((unint64_t)objc_msgSend(*(id *)(a1 + 32), "count") <= v13)
        goto LABEL_66;
      objc_msgSend(objc_msgSend(a2, "objectAtIndexedSubscript:", v11), "horizontalAccuracy");
      v15 = v14;
      objc_msgSend(objc_msgSend(objc_msgSend(a2, "objectAtIndexedSubscript:", v11), "timestamp"), "timeIntervalSinceReferenceDate");
      v17 = v16;
      objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24)), "start");
      v19 = v18;
      objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24)), "end");
      if (v17 <= v20)
        break;
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
      {
        v21 = -2;
        v22 = 0.0;
      }
      else
      {
        v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40);
        if (v23)
          v22 = v20;
        else
          v22 = 0.0;
        if (v23)
          v21 = -1;
        else
          v21 = -2;
      }
      ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 0;
LABEL_41:
      if (v21 >= -1)
      {
        *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = v22;
        while (1)
        {
          v36 = *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24);
          if ((unint64_t)objc_msgSend(*(id *)(a1 + 40), "count") <= v36)
            break;
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40) = objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 96)+ 8)+ 24));
          if (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40), "entry"))
          {
            if (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40), "exit"))
            {
              objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40), "exit"), "timeIntervalSinceReferenceDate");
              if (v37 + *(double *)(a1 + 120) >= v22)
                break;
            }
          }
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24) = 0;
          ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24);
        }
        v38 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40), "entry");
        v39 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40), "exit");
        if (v38)
        {
          objc_msgSend(v38, "timeIntervalSinceReferenceDate");
          v41 = v40 - *(double *)(a1 + 120);
          if (v39)
            goto LABEL_50;
LABEL_52:
          -[NSDate timeIntervalSinceReferenceDate](+[NSDate distantFuture](NSDate, "distantFuture"), "timeIntervalSinceReferenceDate");
        }
        else
        {
          -[NSDate timeIntervalSinceReferenceDate](+[NSDate distantFuture](NSDate, "distantFuture"), "timeIntervalSinceReferenceDate");
          v41 = v43;
          if (!v39)
            goto LABEL_52;
LABEL_50:
          objc_msgSend(v39, "timeIntervalSinceReferenceDate");
          v20 = v42 + *(double *)(a1 + 120);
        }
        if (v22 > v41 && v22 < v20)
        {
          if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24))
          {
            v48 = [CLUsageReportCoordinate alloc];
            objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40), "location"), "latitude");
            v50 = v49;
            objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40), "location"), "longitude");
            v52 = -[CLUsageReportCoordinate initWithLatitude:longitude:](v48, "initWithLatitude:longitude:", v50, v51);
            if (v52)
            {
              objc_msgSend(*(id *)(a1 + 48), "addObject:", v52);
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24) = 1;
            }
          }
        }
        else
        {
          if (v21 < 0)
          {
            objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), "coordinate", v20);
            v46 = v53;
            v47 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40);
          }
          else
          {
            objc_msgSend(objc_msgSend(a2, "objectAtIndexedSubscript:", v21, v20), "coordinate");
            v46 = v45;
            v47 = objc_msgSend(a2, "objectAtIndexedSubscript:", v21);
          }
          objc_msgSend(v47, "coordinate");
          v55 = -[CLUsageReportCoordinate initWithLatitude:longitude:]([CLUsageReportCoordinate alloc], "initWithLatitude:longitude:", v46, v54);
          if (v55)
            objc_msgSend(*(id *)(a1 + 56), "addObject:", v55);
        }
      }
      v11 = v12;
      if ((unint64_t)objc_msgSend(a2, "count", v20) <= v12)
        goto LABEL_66;
    }
    v20 = v17 + 8.0;
    v22 = 0.0;
    if (v17 + 8.0 >= v19
      && (v20 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) + *(double *)(a1 + 120), v17 >= v20))
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
      v22 = v17;
      v21 = v12;
    }
    else
    {
      v21 = -2;
    }
    v24 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40);
    if (v15 <= 300.0)
    {
      if (!v24)
        goto LABEL_40;
      objc_msgSend(objc_msgSend(v24, "timestamp", v20), "timeIntervalSinceReferenceDate");
      v20 = v17 - v26;
      if (v20 <= 600.0)
        goto LABEL_40;
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), "coordinate");
      v28 = v27;
      v30 = v29;
      objc_msgSend(objc_msgSend(a2, "objectAtIndexedSubscript:", v11), "coordinate");
      v33 = sub_100124100(v28, v30, v31, v32);
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), "horizontalAccuracy");
      v20 = v34 + v34;
      if (v33 <= v20)
        goto LABEL_40;
      v35 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40);
      if (!v35)
        goto LABEL_40;

      v25 = 0;
    }
    else
    {
      if (v24)

      v25 = objc_msgSend(a2, "objectAtIndexedSubscript:", v11, v20);
    }
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40) = v25;
LABEL_40:
    ++v12;
    goto LABEL_41;
  }
LABEL_66:
  if (objc_msgSend(*(id *)(a1 + 32), "count") == (id)*(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
    *a4 = 1;
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102180AE0);
  v56 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v57 = 68289026;
    v58 = 0;
    v59 = 2082;
    v60 = "";
    _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#storedLocations: enumerateStoredLocationsWithOptions<finsihed>\"}", (uint8_t *)&v57, 0x12u);
  }
}

id sub_100D11174(void *a1, unsigned int a2)
{
  NSObject *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  double v9;
  double v10;
  void *i;
  void *v12;
  double v13;
  double v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *j;
  void *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  NSNumber *v28;
  NSObject *v29;
  id v30;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[128];
  _BYTE v41[128];
  uint64_t buf;
  __int16 v43;
  const char *v44;
  __int16 v45;
  id v46;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102180AE0);
  v4 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    buf = 68289282;
    v43 = 2082;
    v44 = "";
    v45 = 2050;
    v46 = objc_msgSend(a1, "count");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#storedLocations: dedupe\", \"locationCount\":%{public}ld}", (uint8_t *)&buf, 0x1Cu);
  }
  v5 = objc_alloc_init((Class)NSMutableDictionary);
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v6 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v37;
    v9 = 90.0;
    v10 = 360.0;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v37 != v8)
          objc_enumerationMutation(a1);
        v12 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v12, "latitude");
        v9 = fmin(v9, v13);
        objc_msgSend(v12, "longitude");
        v10 = fmin(v10, v14);
      }
      v7 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
    }
    while (v7);
  }
  else
  {
    v9 = 90.0;
    v10 = 360.0;
  }
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v15 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
  if (v15)
  {
    v16 = v15;
    v17 = fmax((double)a2, 50.0);
    v18 = *(_QWORD *)v33;
    do
    {
      for (j = 0; j != v16; j = (char *)j + 1)
      {
        if (*(_QWORD *)v33 != v18)
          objc_enumerationMutation(a1);
        v20 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)j);
        objc_msgSend(v20, "latitude");
        v22 = sub_100124100(v9, 0.0, v21, 0.0);
        objc_msgSend(v20, "latitude");
        v24 = v23;
        objc_msgSend(v20, "latitude");
        v26 = v25;
        objc_msgSend(v20, "longitude");
        v28 = +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", 50000000 * (uint64_t)(v22 / (double)v17) / v17+ (uint64_t)(sub_100124100(v24, v10, v26, v27) / (double)v17));
        if (!objc_msgSend(v5, "objectForKey:", v28))
          objc_msgSend(v5, "setObject:forKey:", v20, v28);
      }
      v16 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
    }
    while (v16);
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102180AE0);
  v29 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v30 = objc_msgSend(objc_msgSend(v5, "allValues"), "count");
    buf = 68289282;
    v43 = 2082;
    v44 = "";
    v45 = 2050;
    v46 = v30;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#storedLocations: dedupe\", \"deduppedCount\":%{public}ld}", (uint8_t *)&buf, 0x1Cu);
  }
  return objc_msgSend(v5, "allValues");
}

void sub_100D117EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100D11808(uint64_t a1)
{
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  if (qword_1022A01F0 != -1)
    dispatch_once(&qword_1022A01F0, &stru_102180AC0);
  v2 = qword_1022A01F8;
  if (os_log_type_enabled((os_log_t)qword_1022A01F8, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#location #routine sendLocations complete\"}", (uint8_t *)v4, 0x12u);
  }
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "routineManager"), "fetchEstimatedLocationAtDate:handler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_100D11B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100D11BB0(uint64_t a1)
{
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  if (qword_1022A01F0 != -1)
    dispatch_once(&qword_1022A01F0, &stru_102180AC0);
  v2 = qword_1022A01F8;
  if (os_log_type_enabled((os_log_t)qword_1022A01F8, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#location #routine sendLocations complete for options\"}", (uint8_t *)v4, 0x12u);
  }
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "routineManager"), "fetchEstimatedLocationAtDate:options:handler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

uint64_t sub_100D11D94(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100D120A8(id a1)
{
  qword_1022A01F8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Routine");
}

void sub_100D120D4(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100D12100()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100D1219C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100D121B4()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100D12240(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_100D12258()
{
  sub_1015A2E04(&qword_102307C80, "RoutineMonitor");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102307C80, (void *)&_mh_execute_header);
}

void sub_100D1229C()
{
  operator new();
}

void sub_100D12324()
{
  operator delete();
}

uint64_t sub_100D12348(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  id v11;
  void **v12;
  id v13;
  id v14;
  void *__p[2];
  uint64_t v17;
  __objc2_prot *v18;
  __objc2_prot *v19;

  *(_QWORD *)a1 = off_102181198;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  objc_msgSend(a3, "silo");
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
  v19 = &OBJC_PROTOCOL___CLIntersiloServiceProtocol;
  objc_msgSend(+[CLIntersiloInterface sharedInterface](CLIntersiloInterface, "sharedInterface"), "extendSelectorInfoWithProtocol:bases:", &OBJC_PROTOCOL___CLNotifierServiceProtocol, +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v19, 1));
  v18 = &OBJC_PROTOCOL___CLIntersiloClientProtocol;
  objc_msgSend(+[CLIntersiloInterface sharedInterface](CLIntersiloInterface, "sharedInterface"), "extendSelectorInfoWithProtocol:bases:", &OBJC_PROTOCOL___CLNotifierServiceClientProtocol, +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v18, 1));
  v11 = objc_msgSend(a3, "silo");
  if (*(char *)(a2 + 31) < 0)
  {
    sub_100115CE4(__p, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a2 + 8);
    v17 = *(_QWORD *)(a2 + 24);
  }
  if (v17 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  v13 = +[CLIntersiloProxy proxyForRecipientObject:inSilo:recipientName:](CLIntersiloProxy, "proxyForRecipientObject:inSilo:recipientName:", v10, v11, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12, __p[0], __p[1], v17));
  *(_QWORD *)(a1 + 16) = v13;
  if (SHIBYTE(v17) < 0)
  {
    operator delete(__p[0]);
    v13 = *(id *)(a1 + 16);
  }
  v14 = v13;
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a3, "silo"));
  return a1;
}

void sub_100D12544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100D12604(uint64_t a1, void *a2)
{
  NSObject *v4;
  double Current;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;

  if (a2)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v4 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 68289283;
      v9 = 2082;
      v10 = "";
      v11 = 2113;
      v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Fence: Received visit from routined\", \"visit\":%{private, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
    }
    Current = CFAbsoluteTimeGetCurrent();
    sub_100D620D0(a1 + 120, a2, Current);
    if (*(_QWORD *)(a1 + 2960))
    {
      sub_100166054(&v8);
      sub_100ABC720(a2, (uint64_t)&v8, Current);
      sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)&v8);
      sub_100166004(&v8);
    }
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v6 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
    {
      v8 = 68289026;
      v9 = 2082;
      v10 = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Fence: Attempting to notify nil visit\"}", (uint8_t *)&v8, 0x12u);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
    }
    v7 = qword_1022A0068;
    if (os_signpost_enabled((os_log_t)qword_1022A0068))
    {
      v8 = 68289026;
      v9 = 2082;
      v10 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Fence: Attempting to notify nil visit", "{\"msg%{public}.0s\":\"Fence: Attempting to notify nil visit\"}", (uint8_t *)&v8, 0x12u);
    }
  }
}

void sub_100D1285C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100166004(&a9);
  _Unwind_Resume(a1);
}

void sub_100D128B8(uint64_t a1, void *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  double Current;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  id v12;
  uint8_t buf[4];
  id v14;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181148);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136380675;
    v14 = objc_msgSend(objc_msgSend(a2, "description"), "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: received scenario trigger, %{private}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v8 = qword_1022A0068;
    v11 = 136380675;
    v12 = objc_msgSend(objc_msgSend(a2, "description"), "UTF8String");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 2, "Fence: received scenario trigger, %{private}s", &v11, 12);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onScenarioTrigger(RTScenarioTrigger *)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  v6 = objc_opt_class(RTScenarioTriggerSettled, v5);
  if ((objc_opt_isKindOfClass(a2, v6) & 1) != 0)
  {
    Current = CFAbsoluteTimeGetCurrent();
    sub_100D56EFC(a1 + 120, Current);
    if (*(_QWORD *)(a1 + 2960))
    {
      sub_100166054(buf);
      sub_100ABCBD0(a2, (uint64_t)buf, Current);
      sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)buf);
      sub_100166004(buf);
    }
  }
}

void sub_100D12AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_100D12B24(uint64_t a1, void *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  _QWORD v8[5];
  _BYTE v9[24];
  _BYTE *v10;

  *(_QWORD *)a1 = off_102180F58;
  sub_100D13E94(a1 + 8, "FenceMonitorNotifier", a2);
  *(_QWORD *)a1 = off_102180B38;
  *(_QWORD *)(a1 + 8) = off_102180D38;
  sub_100887CB8(a1 + 117);
  sub_100D4A614(a1 + 120, a1, 0);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = operator new(0x20uLL);
  *v4 = off_1021812A0;
  v4[1] = sub_10000ECB4;
  v4[2] = 0;
  v4[3] = a1;
  v10 = v4;
  sub_10148007C(a1 + 2064, v3, v9);
  v5 = v10;
  if (v10 == v9)
  {
    v6 = 4;
    v5 = v9;
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  *(_OWORD *)(a1 + 2296) = 0u;
  *(_OWORD *)(a1 + 2312) = 0u;
  *(_OWORD *)(a1 + 2264) = 0u;
  *(_OWORD *)(a1 + 2280) = 0u;
  *(_OWORD *)(a1 + 2232) = 0u;
  *(_OWORD *)(a1 + 2248) = 0u;
  *(_OWORD *)(a1 + 2216) = 0u;
  *(_QWORD *)(a1 + 2328) = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)objc_msgSend(*(id *)(a1 + 48), "queue"));
  *(_QWORD *)(a1 + 2336) = 0;
  *(_QWORD *)(a1 + 2352) = 0;
  *(_QWORD *)(a1 + 2344) = 0;
  *(_QWORD *)(a1 + 2360) = objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "silo"), "newTimer");
  *(_QWORD *)(a1 + 2368) = 0;
  sub_10023CFD8(a1 + 2376, (uint64_t)"FenceMonitorAlwaysOn", a1, 0.0);
  sub_10023CFD8(a1 + 2424, (uint64_t)"FenceMonitorWatchdog", a1, 90.0);
  sub_10023CFD8(a1 + 2472, (uint64_t)"CLFenceMonitorWifi", a1, 300.0);
  v7 = sub_10108CCAC();
  sub_10023CFD8(a1 + 2520, (uint64_t)"FenceMonitorConvergingState", a1, *((double *)v7 + 9));
  *(_QWORD *)(a1 + 2568) = 0;
  *(_BYTE *)(a1 + 2584) = 0;
  *(_OWORD *)(a1 + 2600) = 0u;
  *(_DWORD *)(a1 + 2615) = 0;
  *(_BYTE *)(a1 + 2619) = 1;
  *(_QWORD *)(a1 + 2624) = 0;
  *(_BYTE *)(a1 + 2632) = 0;
  *(_QWORD *)(a1 + 2960) = 0;
  *(_QWORD *)(a1 + 2912) = 0;
  *(_QWORD *)(a1 + 2928) = 0;
  *(_QWORD *)(a1 + 2920) = 0;
  *(_DWORD *)(a1 + 2936) = 0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100D13F30;
  v8[3] = &unk_10212ECA0;
  v8[4] = a1;
  objc_msgSend(*(id *)(a1 + 2360), "setHandler:", v8);
  sub_100C10C08();
}

void sub_100D13B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v44 = v41[370];
  v41[370] = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  sub_100E3E6C8(a11);
  sub_100E3E6C8(a12);
  sub_100E3E6C8(a13);
  sub_100E3E6C8(a14);
  v45 = v41[289];
  v41[289] = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = v41[288];
  v41[288] = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = v41[285];
  v41[285] = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v48 = v41[284];
  v41[284] = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = v41[283];
  v41[283] = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = v41[282];
  v41[282] = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = v41[281];
  v41[281] = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = v41[280];
  v41[280] = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  v53 = v41[279];
  v41[279] = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = v41[278];
  v41[278] = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  v55 = *v40;
  *v40 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  sub_101480134(v42);
  sub_100D4A6DC(a15);
  nullsub_34(a16);
  sub_100D161D0(a17);
  _Unwind_Resume(a1);
}

uint64_t sub_100D13E94(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_1021811C0;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100D13F14(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_100D13F30(uint64_t a1)
{
  uint64_t v1;
  double Current;

  v1 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v1 + 2616) = 0;
  Current = CFAbsoluteTimeGetCurrent();
  sub_100D54FB4(v1 + 120, Current);
}

void sub_100D13F58(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLFenceMonitorNotifier::onBluetoothNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 40), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102181128);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onBluetoothNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102181128);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onBluetoothNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100D18260(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100D14110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100D14130(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLFenceMonitorNotifier::onMotionStateNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 40), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102181128);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onMotionStateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102181128);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onMotionStateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100D18D04(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100D142E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100D14308(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLFenceMonitorNotifier::onDataProtectionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 40), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102181128);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102181128);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100D215CC(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100D144C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100D144E0(uint64_t a1, int *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLFenceMonitorNotifier::onStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 40), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102181128);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102181128);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100D1962C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100D14698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100D146B8(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLFenceMonitorNotifier::onSignalEnvironmentNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 40), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102181128);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onSignalEnvironmentNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102181128);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onSignalEnvironmentNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100D196CC(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100D14870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100D14890(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLFenceMonitorNotifier::onMobileAssetNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 40), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102181128);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102181128);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100D1976C((char *)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100D14A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100D14A68(uint64_t a1, int *a2, char *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLFenceMonitorNotifier::onCompanionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 40), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102181128);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102181128);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100D18554(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100D14C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100D14C40(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLFenceMonitorNotifier::onDarwinNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 40), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102181128);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onDarwinNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102181128);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onDarwinNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  sub_100D193F4(a4, v6, a2);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_100D14DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100D14E10(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  os_activity_scope_state_s state;
  char v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;

  CLProfilingIdentify("CLFenceMonitorNotifier::onDelayedTriggerTimer");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 40), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102181128);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v6 = 1;
    v3 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onDelayedTriggerTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102181128);
    v4 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2082;
      v12 = "activity";
      v13 = 2050;
      v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onDelayedTriggerTimer\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v6 = 0;
  }
  sub_100D1CF10(a2);
  if (v6)
    os_activity_scope_leave(&state);
}

void sub_100D14FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100D14FD0(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  os_activity_scope_state_s state;
  char v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;

  CLProfilingIdentify("CLFenceMonitorNotifier::onDeAssTriggerTimer");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 40), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102181128);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v6 = 1;
    v3 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onDeAssTriggerTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102181128);
    v4 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2082;
      v12 = "activity";
      v13 = 2050;
      v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onDeAssTriggerTimer\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v6 = 0;
  }
  sub_100D1CFD4(a2);
  if (v6)
    os_activity_scope_leave(&state);
}

void sub_100D15170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100D15190(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  os_activity_scope_state_s state;
  char v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;

  CLProfilingIdentify("CLFenceMonitorNotifier::onContinousTrackingTimer");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 40), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102181128);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v6 = 1;
    v3 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onContinousTrackingTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102181128);
    v4 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2082;
      v12 = "activity";
      v13 = 2050;
      v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onContinousTrackingTimer\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v6 = 0;
  }
  sub_100D1D098(a2);
  if (v6)
    os_activity_scope_leave(&state);
}

void sub_100D15330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100D15350(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  os_activity_scope_state_s state;
  char v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;

  CLProfilingIdentify("CLFenceMonitorNotifier::onSettledTimerExpired");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 40), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102181128);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v6 = 1;
    v3 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onSettledTimerExpired", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102181128);
    v4 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2082;
      v12 = "activity";
      v13 = 2050;
      v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onSettledTimerExpired\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v6 = 0;
  }
  sub_100D20050(a2);
  if (v6)
    os_activity_scope_leave(&state);
}

void sub_100D154F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100D15510(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  os_activity_scope_state_s state;
  char v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;

  CLProfilingIdentify("CLFenceMonitorNotifier::onMiLoLocalizerWaitTimerExpired");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 40), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102181128);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v6 = 1;
    v3 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onMiLoLocalizerWaitTimerExpired", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102181128);
    v4 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2082;
      v12 = "activity";
      v13 = 2050;
      v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onMiLoLocalizerWaitTimerExpired\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v6 = 0;
  }
  sub_100D1CCD4(a2);
  if (v6)
    os_activity_scope_leave(&state);
}

void sub_100D156B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100D156D0(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  os_activity_scope_state_s state;
  char v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;

  CLProfilingIdentify("CLFenceMonitorNotifier::onMiLoMetircsGpsWaitTimerExpired");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 40), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102181128);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v6 = 1;
    v3 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onMiLoMetircsGpsWaitTimerExpired", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102181128);
    v4 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2082;
      v12 = "activity";
      v13 = 2050;
      v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onMiLoMetircsGpsWaitTimerExpired\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v6 = 0;
  }
  sub_100D1B298(a2);
  if (v6)
    os_activity_scope_leave(&state);
}

void sub_100D15870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100D15890(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  os_activity_scope_state_s state;
  char v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;

  CLProfilingIdentify("CLFenceMonitorNotifier::onConvergingStateChangeTimerFired");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 40), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102181128);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v6 = 1;
    v3 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onConvergingStateChangeTimerFired", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102181128);
    v4 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2082;
      v12 = "activity";
      v13 = 2050;
      v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onConvergingStateChangeTimerFired\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v6 = 0;
  }
  sub_100D1CA9C(a2);
  if (v6)
    os_activity_scope_leave(&state);
}

void sub_100D15A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100D15A50(uint64_t a1)
{
  sub_100D15A58(*(_QWORD *)(a1 + 32));
}

void sub_100D15A58(uint64_t a1)
{
  NSObject *v2;
  double Current;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  std::string __p;
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 2568))
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v2 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: onConsolidatedTrigger, calling triggerReceivedNow", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: onConsolidatedTrigger, calling triggerReceivedNow", &__p, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onConsolidatedTrigger()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    if (*(_QWORD *)(a1 + 2960))
    {
      sub_100166054(buf);
      Current = CFAbsoluteTimeGetCurrent();
      sub_1015A2E04(&__p, "ConsolidatedTimer");
      sub_100ABDE4C(&__p, 1u, (uint64_t)buf, Current, -1.0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)buf);
      sub_100166004(buf);
    }
    objc_msgSend(*(id *)(a1 + 2568), "setNextFireDelay:", 1.79769313e308);
    sub_100D19C18(a1);
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v4 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: ignore, onConsolidatedTrigger, shutdown?", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: ignore, onConsolidatedTrigger, shutdown?", &__p, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onConsolidatedTrigger()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
}

void sub_100D15DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0)
    operator delete(__p);
  sub_100166004(&a18);
  _Unwind_Resume(a1);
}

void sub_100D15DD8(uint64_t a1)
{
  sub_100D15DE0(*(_QWORD *)(a1 + 32));
}

void sub_100D15DE0(uint64_t a1)
{
  double Current;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 2328))
  {
    Current = CFAbsoluteTimeGetCurrent();
    sub_100D4E25C(a1 + 120, Current);
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v3 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Fence: ignoring recalculateNow, shut down?", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: ignoring recalculateNow, shut down?", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::recalculateNow()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

id sub_100D15FA4(uint64_t a1, uint64_t a2)
{
  id result;
  NSObject *v4;
  id v5;
  const char *v6;
  uint8_t *v7;
  _QWORD v8[5];
  _WORD v9[8];
  uint8_t buf[1640];

  result = (id)objc_opt_class(BMLocationMicroLocationVisit, a2);
  if (result)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v4 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Fence: MiLo, registering to Biome to receive MicroLocation event update", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Fence: MiLo, registering to Biome to receive MicroLocation event update", v9, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::registerToBiomeForMicroLocation()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    *(_QWORD *)(a1 + 2952) = objc_msgSend(objc_alloc((Class)BMBiomeScheduler), "initWithIdentifier:targetQueue:", CFSTR("com.apple.locationd"), objc_msgSend(*(id *)(a1 + 48), "queue"));
    v5 = objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend((id)BiomeLibrary(), "Location"), "MicroLocationVisit"), "DSLPublisher"), "subscribeOn:", *(_QWORD *)(a1 + 2952));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100D167C8;
    v8[3] = &unk_102131588;
    v8[4] = a1;
    result = objc_msgSend(v5, "sinkWithCompletion:receiveInput:", &stru_102180E08, v8);
    *(_QWORD *)(a1 + 2944) = result;
  }
  return result;
}

uint64_t sub_100D161D0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021811C0;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1007F8C14(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_100D16248(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)a1 = off_102180B38;
  *(_QWORD *)(a1 + 8) = off_102180D38;
  v2 = a1 + 8;
  sub_10016D6AC(a1, (uint64_t)"~CLFenceMonitor");
  v3 = *(_QWORD *)(a1 + 2264);
  *(_QWORD *)(a1 + 2264) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 2280);
  *(_QWORD *)(a1 + 2280) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(int *)(a1 + 2384) >= 1)
    sub_100E3E6F0(a1 + 2376);
  objc_msgSend(*(id *)(a1 + 2568), "invalidate");

  *(_QWORD *)(a1 + 2568) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
  v5 = *(_QWORD *)(a1 + 2336);
  if (v5)
  {
    sub_1009865B8(v5);
    operator delete();
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  v6 = *(_QWORD *)(a1 + 2352);
  if (v6)
  {
    sub_1009865B8(v6);
    operator delete();
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 280))(a1);
  v7 = *(_QWORD *)(a1 + 2344);
  if (v7)
  {
    sub_1009865B8(v7);
    operator delete();
  }
  objc_msgSend(*(id *)(a1 + 2360), "invalidate");

  *(_QWORD *)(a1 + 2360) = 0;
  *(_BYTE *)(a1 + 2616) = 0;
  v8 = *(_QWORD *)(a1 + 2920);
  if (v8)
  {
    sub_10016E3C4(v8);
    v9 = *(_QWORD *)(a1 + 2920);
    if (v9)
    {
      sub_1009865B8(v9);
      operator delete();
    }
    *(_QWORD *)(a1 + 2920) = 0;
  }
  v10 = *(_QWORD *)(a1 + 2928);
  if (v10)
  {
    sub_10016E3C4(v10);
    v11 = *(_QWORD *)(a1 + 2928);
    if (v11)
    {
      sub_1009865B8(v11);
      operator delete();
    }
    *(_QWORD *)(a1 + 2928) = 0;
  }

  *(_QWORD *)(a1 + 2288) = 0;
  *(_QWORD *)(a1 + 2296) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 320))(a1);
  v12 = *(_QWORD *)(a1 + 2368);
  if (v12)
  {
    sub_1009865B8(v12);
    operator delete();
  }
  objc_msgSend(*(id *)(a1 + 2912), "setValid:", 0);
  objc_msgSend(*(id *)(a1 + 2944), "cancel");
  *(_QWORD *)(a1 + 2944) = 0;

  *(_QWORD *)(a1 + 2952) = 0;
  v13 = *(_QWORD *)(a1 + 2960);
  if (v13)
  {
    sub_10048842C(v13);
    v14 = *(_QWORD *)(a1 + 2960);
    *(_QWORD *)(a1 + 2960) = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  else
  {
    *(_QWORD *)(a1 + 2960) = 0;
  }
  sub_100E3E6C8(a1 + 2520);
  sub_100E3E6C8(a1 + 2472);
  sub_100E3E6C8(a1 + 2424);
  sub_100E3E6C8(a1 + 2376);
  v15 = *(_QWORD *)(a1 + 2312);
  *(_QWORD *)(a1 + 2312) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *(_QWORD *)(a1 + 2304);
  *(_QWORD *)(a1 + 2304) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *(_QWORD *)(a1 + 2280);
  *(_QWORD *)(a1 + 2280) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(_QWORD *)(a1 + 2272);
  *(_QWORD *)(a1 + 2272) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *(_QWORD *)(a1 + 2264);
  *(_QWORD *)(a1 + 2264) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *(_QWORD *)(a1 + 2256);
  *(_QWORD *)(a1 + 2256) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *(_QWORD *)(a1 + 2248);
  *(_QWORD *)(a1 + 2248) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *(_QWORD *)(a1 + 2240);
  *(_QWORD *)(a1 + 2240) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *(_QWORD *)(a1 + 2232);
  *(_QWORD *)(a1 + 2232) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *(_QWORD *)(a1 + 2224);
  *(_QWORD *)(a1 + 2224) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = *(_QWORD *)(a1 + 2216);
  *(_QWORD *)(a1 + 2216) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  sub_101480134(a1 + 2064);
  sub_100D4A6DC(a1 + 120);
  nullsub_34(a1 + 117);
  sub_100D161D0(v2);
  return a1;
}

uint64_t sub_100D165F0(uint64_t a1)
{
  return sub_100D16248(a1 - 8);
}

void sub_100D165F8(uint64_t a1)
{
  sub_100D16248(a1);
  operator delete();
}

void sub_100D1661C(uint64_t a1)
{
  sub_100D16248(a1 - 8);
  operator delete();
}

void sub_100D16644(id a1, BPSCompletion *a2)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181148);
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: MiLo, registeration completed", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: MiLo, registeration completed", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::registerToBiomeForMicroLocation()_block_invoke", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
}

void sub_100D167C8(uint64_t a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v3 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181148);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: MiLo, MicroLocation event updated", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: MiLo, MicroLocation event updated", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::registerToBiomeForMicroLocation()_block_invoke", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_100D16968(v3, a2);
}

void sub_100D16968(uint64_t a1, void *a2)
{
  double Current;
  const char *v4;
  void *v5;
  void *v6;
  int v7;
  NSObject *v8;
  id v9;
  id v10;
  double v11;
  uint64_t v12;
  void *i;
  void *v14;
  double v15;
  double v16;
  double v17;
  id v18;
  int v19;
  int v20;
  int v21;
  id v22;
  uint64_t v23;
  void *j;
  void *v25;
  const char *v26;
  char *v27;
  char v28;
  __int128 v30[2];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  _BYTE v40[128];
  void *__s1[2];
  unsigned __int8 v42;

  Current = CFAbsoluteTimeGetCurrent();
  sub_1015A2E04(__s1, (char *)objc_msgSend(objc_msgSend(objc_msgSend(a2, "eventBody"), "domain"), "UTF8String"));
  if (byte_1023104B7 >= 0)
    v4 = (const char *)&qword_1023104A0;
  else
    v4 = (const char *)qword_1023104A0;
  v5 = (void *)strlen(v4);
  if ((char)v42 < 0)
  {
    if (v5 != __s1[1])
    {
      operator delete(__s1[0]);
      return;
    }
    if (v5 != (void *)-1)
    {
      v6 = __s1[0];
      v7 = memcmp(__s1[0], v4, (size_t)v5);
      operator delete(v6);
      if (v7)
        return;
      goto LABEL_12;
    }
LABEL_48:
    sub_10035AD9C();
  }
  if (v5 != (void *)v42)
    return;
  if (v5 == (void *)-1)
    goto LABEL_48;
  if (memcmp(__s1, v4, (size_t)v5))
    return;
LABEL_12:
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181148);
  v8 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__s1[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Fence: MiLo, new homeLoi event from microlocation", (uint8_t *)__s1, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__s1, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    LOWORD(v30[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, __s1, 1628, &_mh_execute_header, qword_1022A0068, 0, "Fence: MiLo, new homeLoi event from microlocation", v30, 2);
    v27 = (char *)v26;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onMicroLocationNotification(BMStoreEvent<BMLocationMicroLocationVisit *> *)", "%s\n", v26);
    if (v27 != (char *)__s1)
      free(v27);
  }
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v9 = objc_msgSend(objc_msgSend(a2, "eventBody"), "probabilityVector");
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
  v11 = 0.0;
  if (v10)
  {
    v12 = *(_QWORD *)v36;
    while (2)
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(_QWORD *)v36 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(objc_msgSend(v14, "microLocationIdentifier"), "isEqualToString:", CFSTR("00000000-0000-0000-0000-000000000000")))
        {
          objc_msgSend(v14, "probability");
          v11 = 1.0 - v15;
          goto LABEL_28;
        }
      }
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
      if (v10)
        continue;
      break;
    }
  }
LABEL_28:
  v28 = objc_msgSend(objc_msgSend(a2, "eventBody"), "isStable");
  objc_msgSend(a2, "timestamp");
  v17 = v16;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v18 = objc_msgSend(objc_msgSend(a2, "eventBody"), "numDevicesVector");
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
  if (v22)
  {
    v23 = *(_QWORD *)v32;
    do
    {
      for (j = 0; j != v22; j = (char *)j + 1)
      {
        if (*(_QWORD *)v32 != v23)
          objc_enumerationMutation(v18);
        v25 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)j);
        if (objc_msgSend(objc_msgSend(v25, "technology"), "isEqualToString:", CFSTR("numberOfWifiDevices")))
        {
          v19 = objc_msgSend(v25, "numDevices");
        }
        else if (objc_msgSend(objc_msgSend(v25, "technology"), "isEqualToString:", CFSTR("numberOfBleDevices")))
        {
          v20 = objc_msgSend(v25, "numDevices");
        }
        else if (objc_msgSend(objc_msgSend(v25, "technology"), "isEqualToString:", CFSTR("numberOfUwbDevices")))
        {
          v21 = objc_msgSend(v25, "numDevices");
        }
      }
      v22 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
    }
    while (v22);
  }
  sub_100D4A704((uint64_t)v30, v28, v19, v20, v21, v17, v11);
  *(_DWORD *)(a1 + 2936) = 0;
  sub_100D50420(a1 + 120, v30, Current);
  if (*(_QWORD *)(a1 + 2960))
  {
    sub_100166054(__s1);
    sub_100ABBAB4((uint64_t)v30, (uint64_t)__s1, Current);
    sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)__s1);
    sub_100166004(__s1);
  }
}

void sub_100D16E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  sub_100166004(&a65);
  _Unwind_Resume(a1);
}

uint64_t sub_100D16E6C(uint64_t a1, _DWORD *a2)
{
  if (!*a2)
    sub_100D578E8(a1 + 120);
  return 1;
}

uint64_t sub_100D16E90(uint64_t a1, _DWORD *a2)
{
  if (!*a2)
    sub_100D578E8(a1 + 112);
  return 1;
}

uint64_t sub_100D16EB4()
{
  return 1;
}

uint64_t sub_100D16EBC()
{
  return 1;
}

_QWORD *sub_100D16EC4@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

_QWORD *sub_100D16F3C@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

void sub_100D16FB4(uint64_t a1, int a2)
{
  sub_100D4AB60(a1 + 120, a2);
}

uint64_t sub_100D16FBC(uint64_t a1, char a2)
{
  return sub_100D4ACB4(a1 + 120, a2);
}

void sub_100D16FC4(uint64_t a1, char a2)
{
  sub_100D4A8D8(a1 + 120, a2);
}

id *sub_100D16FCC(uint64_t *a1, uint64_t *a2)
{
  double Current;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[7];
  id v9[2];

  sub_100131938(v9, (uint64_t)"CLFenceMonitorNotifier.startMonitoringFences", 0);
  Current = CFAbsoluteTimeGetCurrent();
  sub_100D4B1F8((uint64_t)(a1 + 15), a2, Current);
  if (sub_100D4C168((uint64_t)(a1 + 15)) && sub_100D4C160((uint64_t)(a1 + 15)))
    (*(void (**)(uint64_t *, uint64_t *))(*a1 + 400))(a1, a2);
  if (a1[370])
  {
    v6 = *a2;
    v5 = a2[1];
    while (v6 != v5)
    {
      sub_100166054(v8);
      sub_100ABA7CC(1, v6, (uint64_t)v8, Current);
      sub_100158284(a1[370], (uint64_t)v8);
      sub_100166004(v8);
      v6 += 248;
    }
  }
  return sub_100131740(v9);
}

void sub_100D170B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

void sub_100D170D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  double v5;
  NSObject *v6;
  _BOOL4 v7;
  uint64_t v8;
  _BOOL4 v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[2];
  __int16 v13;
  double v14;
  uint8_t buf[4];
  _BOOL4 v16;
  __int16 v17;
  double v18;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    while (*(_QWORD *)(v2 + 232) == *(_QWORD *)(v2 + 224))
    {
      v5 = sub_10016F694(v2);
      if (v5 > *((double *)sub_10016F688() + 5))
        break;
      sub_100D1731C(a1, v2);
      v2 += 248;
      if (v2 == v3)
        return;
    }
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v6 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_QWORD *)(v2 + 232) != *(_QWORD *)(v2 + 224);
      *(_DWORD *)buf = 67240448;
      v16 = v7;
      v17 = 2050;
      v18 = sub_10016F694(v2);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Skip finding LOI type,poly,%{public}d,radius,%{public}.01lf", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      v8 = qword_1022A0068;
      v9 = *(_QWORD *)(v2 + 232) != *(_QWORD *)(v2 + 224);
      v12[0] = 67240448;
      v12[1] = v9;
      v13 = 2050;
      v14 = sub_10016F694(v2);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 2, "Skip finding LOI type,poly,%{public}d,radius,%{public}.01lf", v12, 18);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::findAndSetLoiTypeForFences(const std::vector<CLFenceManager_Type::Fence> &)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
}

void sub_100D1731C(uint64_t a1, uint64_t a2)
{
  id v4;
  CLLocationCoordinate2D v5;
  _QWORD v6[6];
  _QWORD v7[6];
  void *v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  id v16;
  void *__p;
  void *v18;

  v7[0] = 0;
  v7[1] = v7;
  v7[2] = 0x12812000000;
  v7[3] = sub_1002071A8;
  v7[4] = sub_100207CA8;
  v7[5] = "/!0";
  sub_1004E5748((char *)&v8, (__int128 *)a2);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100D1E3C8;
  v6[3] = &unk_102180E30;
  v6[4] = v7;
  v6[5] = a1;
  v4 = objc_alloc((Class)CLCircularRegion);
  v5 = CLLocationCoordinate2DMake(*(CLLocationDegrees *)(a2 + 72), *(CLLocationDegrees *)(a2 + 80));
  objc_msgSend(*(id *)(a1 + 2288), "fetchLocationOfInterestForRegion:withReply:", objc_msgSend(v4, "initWithCenter:radius:identifier:", CFSTR("GeoFence"), v5.latitude, v5.longitude, *((double *)sub_10016F688() + 5)), v6);
  _Block_object_dispose(v7, 8);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }

  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12);
  if (v11 < 0)
    operator delete(v10);
  if (v9 < 0)
    operator delete(v8);
}

void sub_100D17488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  sub_1004E2BD0(v8);
  _Unwind_Resume(a1);
}

id *sub_100D174A8(uint64_t a1, unsigned __int8 **a2, int a3)
{
  double Current;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  _QWORD v10[7];
  id v11[2];

  sub_100131938(v11, (uint64_t)"CLFenceMonitorNotifier.stopMonitoringFences", 0);
  Current = CFAbsoluteTimeGetCurrent();
  sub_100D4B758(a1 + 120, a2, a3, Current);
  if (*(_QWORD *)(a1 + 2960))
  {
    v7 = *a2;
    v8 = a2[1];
    while (v7 != v8)
    {
      sub_100166054(v10);
      sub_100ABA7CC(0, (uint64_t)v7, (uint64_t)v10, Current);
      sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)v10);
      sub_100166004(v10);
      v7 += 248;
    }
  }
  return sub_100131740(v11);
}

void sub_100D17564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

void sub_100D1758C(uint64_t a1)
{
  double Current;
  int v3;
  _QWORD v4[7];

  Current = CFAbsoluteTimeGetCurrent();
  sub_100D4BA50(a1 + 120, Current);
  if (*(_QWORD *)(a1 + 2960))
  {
    sub_100166054(v4);
    v3 = 0;
    sub_100ABBC6C(&v3, (uint64_t)v4, Current);
    sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)v4);
    sub_100488434(*(_QWORD *)(a1 + 2960));
    sub_100166004(v4);
  }
}

void sub_100D17608(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

BOOL sub_100D17620(uint64_t a1, uint64_t *a2)
{
  _BOOL8 v4;
  double Current;
  double v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  _QWORD v11[7];

  v4 = sub_100D4BB5C(a1 + 120, a2);
  Current = CFAbsoluteTimeGetCurrent();
  if (*(_QWORD *)(a1 + 2960))
  {
    v6 = Current;
    sub_100166054(v11);
    v10 = 0;
    sub_100ABBC6C(&v10, (uint64_t)v11, v6);
    sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)v11);
    sub_100166004(v11);
    v8 = *a2;
    v7 = a2[1];
    while (v8 != v7)
    {
      sub_100166054(v11);
      sub_100ABA7CC(1, v8, (uint64_t)v11, v6);
      sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)v11);
      sub_100166004(v11);
      v8 += 248;
    }
  }
  return v4;
}

void sub_100D176EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D17708(uint64_t a1, uint64_t a2, int a3)
{
  return sub_100D4BD18(a1 + 120, a2, a3);
}

uint64_t sub_100D17710(uint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  char *v11;
  const char *v12;
  char *v13;
  const char *v14;
  char *v15;
  const char *v16;
  char *v17;
  uint64_t v18;
  void *__p[2];
  uint64_t v20;
  int v21;
  unint64_t v22;
  __int16 v23;
  unint64_t v24;
  _BYTE buf[1632];

  if (a2 != a3)
  {
    v3 = result;
    if (*(_QWORD *)(result + 2224))
    {
      if (a2 || !a3)
      {
        if (!a2 || a3)
        {
          if (a3 < a2)
          {
            result = sub_100D4C170(result + 120);
            if ((result & 1) == 0)
              return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 336))(v3);
          }
        }
        else
        {
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_102181148);
          v7 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134283777;
            *(_QWORD *)&buf[4] = a2;
            *(_WORD *)&buf[12] = 2049;
            *(_QWORD *)&buf[14] = 0;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Fence: unregisterForNotification, location, numOfFencesOld, %{private}lu, numOfFenceNew, %{private}lu", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_102181148);
            v21 = 134283777;
            v22 = a2;
            v23 = 2049;
            v24 = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Fence: unregisterForNotification, location, numOfFencesOld, %{private}lu, numOfFenceNew, %{private}lu", &v21, 22);
            v13 = (char *)v12;
            sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::updateSubscriptions(const size_t, const size_t)", "%s\n", v12);
            if (v13 != buf)
              free(v13);
          }
          if (_os_feature_enabled_impl("CoreLocation", "Nautilus_AlwaysOn"))
          {
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_102181168);
            v8 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#wigo,off,FenceAlwaysOn", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_102181168);
              LOWORD(v21) = 0;
              LODWORD(v18) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#wigo,off,FenceAlwaysOn", &v21, v18);
              v17 = (char *)v16;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::updateSubscriptions(const size_t, const size_t)", "%s\n", v16);
              if (v17 != buf)
                free(v17);
            }
            objc_msgSend(*(id *)(*(_QWORD *)(v3 + 2224) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(v3 + 2224) + 8), 0);
            if (*(int *)(v3 + 2384) >= 1)
              sub_100E3E6F0(v3 + 2376);
          }
          objc_msgSend(*(id *)(*(_QWORD *)(v3 + 2224) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(v3 + 2224) + 8), 22);
          objc_msgSend(*(id *)(*(_QWORD *)(v3 + 2224) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(v3 + 2224) + 8), 3);
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 336))(v3);
        }
      }
      else
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102181148);
        v6 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134283777;
          *(_QWORD *)&buf[4] = 0;
          *(_WORD *)&buf[12] = 2049;
          *(_QWORD *)&buf[14] = a3;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Fence: registerForNotification, location, numOfFencesOld, %{private}lu, numOfFenceNew, %{private}lu", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_102181148);
          v21 = 134283777;
          v22 = 0;
          v23 = 2049;
          v24 = a3;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Fence: registerForNotification, location, numOfFencesOld, %{private}lu, numOfFenceNew, %{private}lu", &v21, 22);
          v11 = (char *)v10;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::updateSubscriptions(const size_t, const size_t)", "%s\n", v10);
          if (v11 != buf)
            free(v11);
        }
        objc_msgSend(*(id *)(*(_QWORD *)(v3 + 2224) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(v3 + 2224) + 8), 3, 0);
        objc_msgSend(*(id *)(*(_QWORD *)(v3 + 2224) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(v3 + 2224) + 8), 22, 0);
        result = _os_feature_enabled_impl("CoreLocation", "Nautilus_AlwaysOn");
        if ((_DWORD)result)
        {
          sub_1015A2E04(__p, "none");
          if (*(int *)(v3 + 2384) <= 0)
          {
            if (SHIBYTE(v20) < 0)
            {
              sub_100115CE4(buf, __p[0], (unint64_t)__p[1]);
            }
            else
            {
              *(_OWORD *)buf = *(_OWORD *)__p;
              *(_QWORD *)&buf[16] = v20;
            }
            sub_10002B684(v3 + 2376, (uint64_t *)buf);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
          }
          if (SHIBYTE(v20) < 0)
            operator delete(__p[0]);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102181168);
          v9 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#wigo,on,FenceAlwaysOn", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_102181168);
            LOWORD(v21) = 0;
            LODWORD(v18) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#wigo,on,FenceAlwaysOn", &v21, v18);
            v15 = (char *)v14;
            sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::updateSubscriptions(const size_t, const size_t)", "%s\n", v14);
            if (v15 != buf)
              free(v15);
          }
          return (uint64_t)objc_msgSend(*(id *)(*(_QWORD *)(v3 + 2224) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(v3 + 2224) + 8), 0, 0);
        }
      }
    }
  }
  return result;
}

void sub_100D17E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100D17E80(uint64_t a1)
{
  NSObject *v2;
  int v3;
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  uint8_t *v10;
  uint64_t v11;
  _QWORD v12[2];
  uint8_t buf[4];
  int v14;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181148);
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(unsigned __int8 *)(a1 + 2618);
    *(_DWORD *)buf = 67240192;
    v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Start emergency acquisition, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v7 = *(unsigned __int8 *)(a1 + 2618);
    LODWORD(v12[0]) = 67240192;
    HIDWORD(v12[0]) = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Start emergency acquisition, %{public}d", v12, 8);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::startEmergencyAcquisition()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  if (!*(_BYTE *)(a1 + 2618))
  {
    *(_BYTE *)(a1 + 2618) = 1;
    if (_os_feature_enabled_impl("CoreLocation", "Nautilus_AlwaysOn"))
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      v4 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Stopped emergency acquisition", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102181148);
        LOWORD(v12[0]) = 0;
        LODWORD(v11) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Stopped emergency acquisition", v12, v11, v12[0]);
LABEL_29:
        v10 = (uint8_t *)v5;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::startEmergencyAcquisition()", "%s\n", v5);
        if (v10 != buf)
          free(v10);
      }
    }
    else
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 2224) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 2224) + 8), 0, 0);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      v6 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Started emergency acquisition", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102181148);
        LOWORD(v12[0]) = 0;
        LODWORD(v11) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Started emergency acquisition", v12, v11, v12[0]);
        goto LABEL_29;
      }
    }
  }
}

void sub_100D18260(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  double Current;
  _QWORD v8[7];

  Current = CFAbsoluteTimeGetCurrent();
  sub_100D4E264(a1 + 120, a3, a4, Current);
  if (*(_QWORD *)(a1 + 2960))
  {
    sub_100166054(v8);
    sub_100ABADA0(a3, a4, (uint64_t)v8, Current);
    sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)v8);
    sub_100166004(v8);
  }
}

void sub_100D182EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_100D18300(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double Current;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint8_t *v20;
  _OWORD v21[8];
  _OWORD v22[2];
  int v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint8_t buf[4];
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181148);
  v7 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(_QWORD *)(a4 + 4);
    v9 = *(_QWORD *)(a4 + 12);
    v10 = *(_QWORD *)(a4 + 20);
    *(_DWORD *)buf = 134284033;
    v30 = v8;
    v31 = 2049;
    v32 = v9;
    v33 = 2049;
    v34 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Fence: got gps notification, %{private}.8lf, %{private}.8lf, %{private}.1lf", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v16 = *(_QWORD *)(a4 + 4);
    v17 = *(_QWORD *)(a4 + 12);
    v18 = *(_QWORD *)(a4 + 20);
    v23 = 134284033;
    v24 = v16;
    v25 = 2049;
    v26 = v17;
    v27 = 2049;
    v28 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: got gps notification, %{private}.8lf, %{private}.8lf, %{private}.1lf", &v23, 32);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onGpsNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  if (*(_DWORD *)(a4 + 96) == 1 && !*a3)
  {
    Current = CFAbsoluteTimeGetCurrent();
    v12 = *(_OWORD *)(a4 + 112);
    v21[6] = *(_OWORD *)(a4 + 96);
    v21[7] = v12;
    v22[0] = *(_OWORD *)(a4 + 128);
    *(_OWORD *)((char *)v22 + 12) = *(_OWORD *)(a4 + 140);
    v13 = *(_OWORD *)(a4 + 48);
    v21[2] = *(_OWORD *)(a4 + 32);
    v21[3] = v13;
    v14 = *(_OWORD *)(a4 + 80);
    v21[4] = *(_OWORD *)(a4 + 64);
    v21[5] = v14;
    v15 = *(_OWORD *)(a4 + 16);
    v21[0] = *(_OWORD *)a4;
    v21[1] = v15;
    sub_100D60410(a1 + 120, (uint64_t)v21, 1, Current);
  }
}

void sub_100D18554(uint64_t a1, uint64_t a2, int *a3, char *a4)
{
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  int v11;
  int v12;
  const char *v13;
  NSObject *v14;
  int v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  int v19;
  const char *v20;
  const char *v21;
  const char *v22;
  NSObject *v23;
  int v24;
  const char *v25;
  const char *v26;
  _BOOL4 v27;
  double v28;
  NSObject *v29;
  int v30;
  int v31;
  double Current;
  double v33;
  double v34;
  uint64_t v35;
  int v36;
  const char *v37;
  const char *v38;
  const char *v39;
  uint8_t *v40;
  int v41;
  const char *v42;
  __int16 v43;
  const char *v44;
  uint8_t buf[4];
  _BYTE v46[20];
  __int16 v47;
  int v48;

  if (*a3 == 5)
  {
    sub_100197040();
    if ((sub_100195F08() & 1) != 0)
    {
      if (_os_feature_enabled_impl("CoreLocation", "cl_fence_handoff"))
      {
        if (*a4)
        {
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_102181148);
          v7 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Companion is nearby but not yet ready for handoff", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_102181148);
            LOWORD(v41) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Companion is nearby but not yet ready for handoff", &v41, 2);
            v9 = (uint8_t *)v8;
            sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v8);
LABEL_39:
            if (v9 != buf)
              free(v9);
          }
        }
        else
        {
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_102181148);
          v29 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
          {
            v30 = sub_100D4C158(a1 + 120);
            v31 = *a4;
            *(_DWORD *)buf = 68289538;
            *(_DWORD *)v46 = 0;
            *(_WORD *)&v46[4] = 2082;
            *(_QWORD *)&v46[6] = "";
            *(_WORD *)&v46[14] = 1026;
            *(_DWORD *)&v46[16] = v30;
            v47 = 1026;
            v48 = v31;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Connected state of watch changed\", \"from\":%{public}hhd, \"to\":%{public}hhd}", buf, 0x1Eu);
          }
          Current = CFAbsoluteTimeGetCurrent();
          sub_100D4C1D0(a1 + 120, 0, Current);
        }
      }
      else
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102181148);
        v23 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
        {
          v24 = sub_100D4C158(a1 + 120);
          v25 = "No";
          if (v24)
            v26 = "Yes";
          else
            v26 = "No";
          if (*a4)
            v25 = "Yes";
          *(_DWORD *)buf = 136380931;
          *(_QWORD *)v46 = v26;
          *(_WORD *)&v46[8] = 2081;
          *(_QWORD *)&v46[10] = v25;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Connected state changed from %{private}s to %{private}s", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_102181148);
          v35 = qword_1022A0068;
          v36 = sub_100D4C158(a1 + 120);
          v37 = "No";
          if (v36)
            v38 = "Yes";
          else
            v38 = "No";
          if (*a4)
            v37 = "Yes";
          v41 = 136380931;
          v42 = v38;
          v43 = 2081;
          v44 = v37;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v35, 1, "Connected state changed from %{private}s to %{private}s", &v41, 22);
          v40 = (uint8_t *)v39;
          sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v39);
          if (v40 != buf)
            free(v40);
        }
        v27 = *a4 != 0;
        v28 = CFAbsoluteTimeGetCurrent();
        sub_100D4C1D0(a1 + 120, v27, v28);
      }
    }
    else
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      v14 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
      {
        v15 = sub_100D4C158(a1 + 120);
        v16 = "No";
        if (v15)
          v17 = "Yes";
        else
          v17 = "No";
        if (*a4)
          v16 = "Yes";
        *(_DWORD *)buf = 136380931;
        *(_QWORD *)v46 = v17;
        *(_WORD *)&v46[8] = 2081;
        *(_QWORD *)&v46[10] = v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Connected state changed from %{private}s to %{private}s", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102181148);
        v18 = qword_1022A0068;
        v19 = sub_100D4C158(a1 + 120);
        v20 = "No";
        if (v19)
          v21 = "Yes";
        else
          v21 = "No";
        if (*a4)
          v20 = "Yes";
        v41 = 136380931;
        v42 = v21;
        v43 = 2081;
        v44 = v20;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 0, "Connected state changed from %{private}s to %{private}s", &v41, 22);
        v9 = (uint8_t *)v22;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v22);
        goto LABEL_39;
      }
    }
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v10 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *a3;
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)v46 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning Unhandled notification %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      v12 = *a3;
      v41 = 67240192;
      LODWORD(v42) = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#Warning Unhandled notification %{public}d", &v41, 8);
      v9 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v13);
      goto LABEL_39;
    }
  }
  v33 = CFAbsoluteTimeGetCurrent();
  if (*(_QWORD *)(a1 + 2960))
  {
    v34 = v33;
    sub_100166054(buf);
    sub_100ABB08C(a3, a4, (uint64_t)buf, v34);
    sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)buf);
    sub_100166004(buf);
  }
}

void sub_100D18CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_100D18D04(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  NSObject *v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  NSObject *v23;
  double Current;
  NSObject *v25;
  int v26;
  uint64_t v27;
  const char *v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  int v32;
  _BYTE v33[10];
  _BYTE v34[6];
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  uint8_t buf[4];
  _BYTE v42[10];
  _BYTE v43[6];
  __int16 v44;
  int v45;
  __int16 v46;
  int isRunning;
  __int16 v48;
  int isCycling;

  if (*a3 == 3)
  {
    *(_OWORD *)(a1 + 2776) = *(_OWORD *)a4;
    v17 = *(_OWORD *)(a4 + 16);
    v18 = *(_OWORD *)(a4 + 32);
    v19 = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a1 + 2824) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a1 + 2840) = v19;
    *(_OWORD *)(a1 + 2792) = v17;
    *(_OWORD *)(a1 + 2808) = v18;
    v20 = *(_OWORD *)(a4 + 80);
    v21 = *(_OWORD *)(a4 + 96);
    v22 = *(_OWORD *)(a4 + 112);
    *(_QWORD *)(a1 + 2904) = *(_QWORD *)(a4 + 128);
    *(_OWORD *)(a1 + 2872) = v21;
    *(_OWORD *)(a1 + 2888) = v22;
    *(_OWORD *)(a1 + 2856) = v20;
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v23 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67175937;
      *(_DWORD *)v42 = CLMotionActivity::isStatic((CLMotionActivity *)(a1 + 2640));
      *(_WORD *)&v42[4] = 1025;
      *(_DWORD *)&v42[6] = CLMotionActivity::isWalking((CLMotionActivity *)(a1 + 2640));
      *(_WORD *)v43 = 1025;
      *(_DWORD *)&v43[2] = CLMotionActivity::isDriving((CLMotionActivity *)(a1 + 2640));
      v44 = 1025;
      v45 = CLMotionActivity::isInVehicle((CLMotionActivity *)(a1 + 2640));
      v46 = 1025;
      isRunning = CLMotionActivity::isRunning((CLMotionActivity *)(a1 + 2640));
      v48 = 1025;
      isCycling = CLMotionActivity::isCycling((CLMotionActivity *)(a1 + 2640));
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "Received dominant motion state,static,%{private}d,walking,%{private}d,driving,%{private}d,inVehicle,%{private}d,running,%{private}d,cycling,%{private}d", buf, 0x26u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_17;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v27 = qword_1022A0068;
    v32 = 67175937;
    *(_DWORD *)v33 = CLMotionActivity::isStatic((CLMotionActivity *)(a1 + 2640));
    *(_WORD *)&v33[4] = 1025;
    *(_DWORD *)&v33[6] = CLMotionActivity::isWalking((CLMotionActivity *)(a1 + 2640));
    *(_WORD *)v34 = 1025;
    *(_DWORD *)&v34[2] = CLMotionActivity::isDriving((CLMotionActivity *)(a1 + 2640));
    v35 = 1025;
    v36 = CLMotionActivity::isInVehicle((CLMotionActivity *)(a1 + 2640));
    v37 = 1025;
    v38 = CLMotionActivity::isRunning((CLMotionActivity *)(a1 + 2640));
    v39 = 1025;
    v40 = CLMotionActivity::isCycling((CLMotionActivity *)(a1 + 2640));
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v27, 2, "Received dominant motion state,static,%{private}d,walking,%{private}d,driving,%{private}d,inVehicle,%{private}d,running,%{private}d,cycling,%{private}d", &v32, 38);
    v16 = (uint8_t *)v28;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onMotionStateNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v28);
    if (v16 == buf)
      goto LABEL_17;
LABEL_28:
    free(v16);
LABEL_17:
    if (*(_QWORD *)(a1 + 2960))
    {
      Current = CFAbsoluteTimeGetCurrent();
      sub_100166054(buf);
      sub_100ABB384(a3, a4, (uint64_t)buf, Current);
      sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)buf);
      sub_100166004(buf);
    }
    return;
  }
  if (*a3 == 2)
  {
    *(_OWORD *)(a1 + 2640) = *(_OWORD *)a4;
    v7 = *(_OWORD *)(a4 + 16);
    v8 = *(_OWORD *)(a4 + 32);
    v9 = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a1 + 2704) = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a1 + 2688) = v9;
    *(_OWORD *)(a1 + 2672) = v8;
    *(_OWORD *)(a1 + 2656) = v7;
    v10 = *(_OWORD *)(a4 + 80);
    v11 = *(_OWORD *)(a4 + 96);
    v12 = *(_OWORD *)(a4 + 112);
    *(_QWORD *)(a1 + 2768) = *(_QWORD *)(a4 + 128);
    *(_OWORD *)(a1 + 2752) = v12;
    *(_OWORD *)(a1 + 2736) = v11;
    *(_OWORD *)(a1 + 2720) = v10;
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v13 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67175425;
      *(_DWORD *)v42 = CLMotionActivity::isStatic((CLMotionActivity *)(a1 + 2640));
      *(_WORD *)&v42[4] = 1025;
      *(_DWORD *)&v42[6] = CLMotionActivity::isWalking((CLMotionActivity *)(a1 + 2640));
      *(_WORD *)v43 = 1025;
      *(_DWORD *)&v43[2] = CLMotionActivity::isDriving((CLMotionActivity *)(a1 + 2640));
      v44 = 1025;
      v45 = CLMotionActivity::isInVehicle((CLMotionActivity *)(a1 + 2640));
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Received motion state,static,%{private}d,walking,%{private}d,driving,%{private}d,inVehicle,%{private}d", buf, 0x1Au);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_17;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v14 = qword_1022A0068;
    v32 = 67175425;
    *(_DWORD *)v33 = CLMotionActivity::isStatic((CLMotionActivity *)(a1 + 2640));
    *(_WORD *)&v33[4] = 1025;
    *(_DWORD *)&v33[6] = CLMotionActivity::isWalking((CLMotionActivity *)(a1 + 2640));
    *(_WORD *)v34 = 1025;
    *(_DWORD *)&v34[2] = CLMotionActivity::isDriving((CLMotionActivity *)(a1 + 2640));
    v35 = 1025;
    v36 = CLMotionActivity::isInVehicle((CLMotionActivity *)(a1 + 2640));
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 2, "Received motion state,static,%{private}d,walking,%{private}d,driving,%{private}d,inVehicle,%{private}d", &v32, 26);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onMotionStateNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v15);
    if (v16 == buf)
      goto LABEL_17;
    goto LABEL_28;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181148);
  v25 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_ERROR))
  {
    v26 = *a3;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)v42 = "onMotionStateNotification";
    *(_WORD *)&v42[8] = 1026;
    *(_DWORD *)v43 = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%s, Unhandled notification %{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v29 = *a3;
    v32 = 136315394;
    *(_QWORD *)v33 = "onMotionStateNotification";
    *(_WORD *)&v33[8] = 1026;
    *(_DWORD *)v34 = v29;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 16, "%s, Unhandled notification %{public}d", &v32, 18);
    v31 = (uint8_t *)v30;
    sub_100512490("Generic", 1, 0, 0, "void CLFenceMonitorNotifier::onMotionStateNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
}

void sub_100D193D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D193F4(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (*a3 == 11)
  {
    v3 = result;
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v4 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#significantRegion model change event", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#significantRegion model change event", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onDarwinNotification(int, const CLDarwinNotifier_Type::Notification &, const CLDarwinNotifier_Type::NotificationData &)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    CFAbsoluteTimeGetCurrent();
    return sub_100D56DF8(v3 + 120);
  }
  return result;
}

void sub_100D1959C(uint64_t a1, uint64_t a2)
{
  double Current;
  double v4;
  int v5;
  _QWORD v6[7];

  sub_100D56BE0(a1 + 120, a2);
  Current = CFAbsoluteTimeGetCurrent();
  if (*(_QWORD *)(a1 + 2960))
  {
    v4 = Current;
    sub_100166054(v6);
    v5 = 1;
    sub_100ABBC6C(&v5, (uint64_t)v6, v4);
    sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)v6);
    sub_100166004(v6);
  }
}

void sub_100D19614(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_100D1962C(uint64_t a1, uint64_t a2, int *a3, unsigned __int8 *a4)
{
  double Current;
  _QWORD v8[7];

  Current = CFAbsoluteTimeGetCurrent();
  sub_100D53CC0(a1 + 120, a3, a4, Current);
  if (*(_QWORD *)(a1 + 2960))
  {
    sub_100166054(v8);
    sub_100ABB640(a3, (char *)a4, (uint64_t)v8, Current);
    sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)v8);
    sub_100166004(v8);
  }
}

void sub_100D196B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_100D196CC(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  double Current;
  _QWORD v8[7];

  Current = CFAbsoluteTimeGetCurrent();
  sub_100D54C84(a1 + 120, a3, a4);
  if (*(_QWORD *)(a1 + 2960))
  {
    sub_100166054(v8);
    sub_100ABB7DC(a3, a4, (uint64_t)v8, Current);
    sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)v8);
    sub_100166004(v8);
  }
}

void sub_100D19758(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

char *sub_100D1976C(char *result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  char *v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  uint64_t v11;
  uint8_t buf[4];
  uint64_t v13;

  if (*a3 == 5)
  {
    v5 = result;
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v6 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138477827;
      v13 = sub_10011A5AC(a4);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#Mobile Asset Geofence Settings notification data: %{private}@, updating OTA dependant params", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      v7 = qword_1022A0068;
      v10 = 138477827;
      v11 = sub_10011A5AC(a4);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 2, "#Mobile Asset Geofence Settings notification data: %{private}@, updating OTA dependant params", &v10, 12);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    sub_100887CBC((uint64_t)(v5 + 117), a4);
    return sub_100D4A564((uint64_t)(v5 + 120));
  }
  return result;
}

uint64_t sub_100D1994C(uint64_t a1, char *a2, double a3)
{
  uint64_t result;
  NSObject *v7;
  uint64_t v8;
  int v9;
  double v10;
  std::string::size_type v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  std::string __p;
  int v16;
  __int16 v17;
  double v18;
  uint8_t buf[4];
  char *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  __int16 v25;
  double v26;

  *(CFAbsoluteTime *)(a1 + 2592) = CFAbsoluteTimeGetCurrent();
  result = sub_10016E59C(a1 + 120);
  if ((_DWORD)result)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v7 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
    {
      v8 = *(_QWORD *)(a1 + 2568);
      v9 = *(unsigned __int8 *)(a1 + 2584);
      *(_DWORD *)buf = 136381443;
      v20 = a2;
      v21 = 2049;
      v22 = v8;
      v23 = 1025;
      v24 = v9;
      v25 = 2049;
      v26 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Fence: triggerReceived, reason, %{private}s, schedule, %{private}p, pending, %{private}d, interval, %{private}lf", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      v11 = *(_QWORD *)(a1 + 2568);
      v12 = *(unsigned __int8 *)(a1 + 2584);
      LODWORD(__p.__r_.__value_.__l.__data_) = 136381443;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2049;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v11;
      HIWORD(__p.__r_.__value_.__r.__words[2]) = 1025;
      v16 = v12;
      v17 = 2049;
      v18 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: triggerReceived, reason, %{private}s, schedule, %{private}p, pending, %{private}d, interval, %{private}lf", &__p, 38);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::triggerReceived(const char *, CFTimeInterval)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    result = *(_QWORD *)(a1 + 2568);
    if (result && !*(_BYTE *)(a1 + 2584))
    {
      result = (uint64_t)objc_msgSend((id)result, "setNextFireDelay:", a3);
      *(_BYTE *)(a1 + 2584) = 1;
    }
    if (*(_QWORD *)(a1 + 2960))
    {
      sub_100166054(buf);
      v10 = *(double *)(a1 + 2592);
      sub_1015A2E04(&__p, a2);
      sub_100ABD6D0(&__p, (uint64_t)buf, v10, a3);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)buf);
      return sub_100166004(buf);
    }
  }
  return result;
}

void sub_100D19BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  sub_100166004(&a20);
  _Unwind_Resume(a1);
}

void sub_100D19C18(uint64_t a1)
{
  double Current;
  _QWORD v3[7];

  Current = CFAbsoluteTimeGetCurrent();
  sub_100D4D654(a1 + 120, Current);
  *(_BYTE *)(a1 + 2584) = 0;
  if (*(_QWORD *)(a1 + 2960))
  {
    sub_100166054(v3);
    sub_100ABD984((uint64_t)v3, Current);
    sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)v3);
    sub_100166004(v3);
  }
}

void sub_100D19C88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

id sub_100D19C9C(uint64_t a1)
{
  NSObject *v2;
  id result;
  double Current;
  const char *v5;
  uint8_t *v6;
  std::string __p;
  uint8_t buf[1640];

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181148);
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: cancelTriggerWake", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: cancelTriggerWake", &__p, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::cancelTriggerWake()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  result = *(id *)(a1 + 2336);
  if (result)
  {
    result = sub_10016E3C4((uint64_t)result);
    if (*(_QWORD *)(a1 + 2960))
    {
      sub_100166054(buf);
      Current = CFAbsoluteTimeGetCurrent();
      sub_1009865BC(*(_QWORD *)(a1 + 2336), (uint64_t)&__p);
      sub_100ABDE4C(&__p, 3u, (uint64_t)buf, Current, -1.0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)buf);
      return (id)sub_100166004(buf);
    }
  }
  return result;
}

void sub_100D19EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0)
    operator delete(__p);
  sub_100166004(&a18);
  _Unwind_Resume(a1);
}

_QWORD *sub_100D19ED8(_QWORD *result, double *a2)
{
  _QWORD *v3;
  double Current;
  std::string __p;
  _QWORD v6[7];

  if (result[292])
  {
    v3 = result;
    Current = CFAbsoluteTimeGetCurrent();
    result = sub_1001F40D0(v3[292], Current + *a2);
    if (v3[370])
    {
      sub_100166054(v6);
      sub_1009865BC(v3[292], (uint64_t)&__p);
      sub_100ABDE4C(&__p, 2u, (uint64_t)v6, Current, *a2);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_100158284(v3[370], (uint64_t)v6);
      return (_QWORD *)sub_100166004(v6);
    }
  }
  return result;
}

void sub_100D19F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_100166004(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100D19FB0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 2616);
}

void sub_100D19FB8(uint64_t a1, double *a2)
{
  NSObject *v4;
  const char *v5;
  char *v6;
  double Current;
  NSObject *v8;
  double v9;
  double v10;
  std::string::size_type v11;
  double v12;
  const char *v13;
  char *v14;
  void *__p[2];
  uint64_t v16;
  std::string v17;
  _BYTE buf[1632];

  if (*(_QWORD *)(a1 + 2360))
  {
    *(_BYTE *)(a1 + 2616) = 1;
    sub_1015A2E04(__p, "onLocationWatchdog");
    if (*(int *)(a1 + 2432) <= 0)
    {
      if (SHIBYTE(v16) < 0)
      {
        sub_100115CE4(buf, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        *(_OWORD *)buf = *(_OWORD *)__p;
        *(_QWORD *)&buf[16] = v16;
      }
      sub_10002B684(a1 + 2424, (uint64_t *)buf);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    if (SHIBYTE(v16) < 0)
      operator delete(__p[0]);
    sub_100D57DC4(a1 + 120);
    Current = CFAbsoluteTimeGetCurrent();
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v8 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v9 = *a2;
      v10 = Current + *a2;
      *(_DWORD *)buf = 134283777;
      *(double *)&buf[4] = v10;
      *(_WORD *)&buf[12] = 2049;
      *(double *)&buf[14] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Fence: scheduleLocationWatchdog, at %{private}.1lf, in, %{private}.1lf, seconds", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      v11 = *(_QWORD *)a2;
      v12 = Current + *a2;
      LODWORD(v17.__r_.__value_.__l.__data_) = 134283777;
      *(double *)((char *)v17.__r_.__value_.__r.__words + 4) = v12;
      WORD2(v17.__r_.__value_.__r.__words[1]) = 2049;
      *(std::string::size_type *)((char *)&v17.__r_.__value_.__r.__words[1] + 6) = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: scheduleLocationWatchdog, at %{private}.1lf, in, %{private}.1lf, seconds", &v17, 22);
      v14 = (char *)v13;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::scheduleLocationWatchdog(const CFTimeInterval &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    objc_msgSend(*(id *)(a1 + 2360), "setNextFireDelay:", *a2);
    sub_100D57DB4(a1 + 120);
    if (*(_QWORD *)(a1 + 2960))
    {
      sub_100166054(buf);
      sub_1015A2E04(&v17, "NoLocationWatchdog");
      sub_100ABDE4C(&v17, 2u, (uint64_t)buf, Current, *a2);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
      sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)buf);
      sub_100166004(buf);
    }
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v4 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: scheduleLocationWatchdog, ignore, shutdown?", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      LOWORD(v17.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: scheduleLocationWatchdog, ignore, shutdown?", &v17, 2);
      v6 = (char *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::scheduleLocationWatchdog(const CFTimeInterval &)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
}

void sub_100D1A3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100D1A438(uint64_t a1, double *a2)
{
  double Current;
  NSObject *v5;
  double v6;
  double v7;
  NSObject *v8;
  std::string::size_type v9;
  double v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  std::string __p;
  uint8_t buf[4];
  double v17;
  __int16 v18;
  double v19;

  if (*(_QWORD *)(a1 + 2920))
  {
    Current = CFAbsoluteTimeGetCurrent();
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v5 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v6 = *a2;
      v7 = Current + *a2;
      *(_DWORD *)buf = 134283777;
      v17 = v7;
      v18 = 2049;
      v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Fence: MiLo, scheduleMiLoLocalizerWaitTimer, at %{private}.1lf, in, %{private}.1lf, seconds", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      v9 = *(_QWORD *)a2;
      v10 = Current + *a2;
      LODWORD(__p.__r_.__value_.__l.__data_) = 134283777;
      *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = v10;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2049;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: MiLo, scheduleMiLoLocalizerWaitTimer, at %{private}.1lf, in, %{private}.1lf, seconds", &__p, 22);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::scheduleMiLoLocalizerWaitTimer(const CFTimeInterval &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    sub_1001F40D0(*(_QWORD *)(a1 + 2920), Current + *a2);
    if (*(_QWORD *)(a1 + 2960))
    {
      sub_100166054(buf);
      sub_1009865BC(*(_QWORD *)(a1 + 2920), (uint64_t)&__p);
      sub_100ABDE4C(&__p, 2u, (uint64_t)buf, Current, *a2);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)buf);
      sub_100166004(buf);
    }
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v8 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Fence: MiLo, scheduleMiLoLocalizerWaitTimer, ignore, shutdown?", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: MiLo, scheduleMiLoLocalizerWaitTimer, ignore, shutdown?", &__p, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::scheduleMiLoLocalizerWaitTimer(const CFTimeInterval &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
}

void sub_100D1A7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  sub_100166004(&a18);
  _Unwind_Resume(a1);
}

void sub_100D1A7F8(uint64_t a1)
{
  NSObject *v2;
  double Current;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  std::string __p;
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 2920))
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v2 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: MiLo, cancelMiLoLocalizerWaitTimer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: MiLo, cancelMiLoLocalizerWaitTimer", &__p, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::cancelMiLoLocalizerWaitTimer()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    sub_10016E3C4(*(_QWORD *)(a1 + 2920));
    if (*(_QWORD *)(a1 + 2960))
    {
      sub_100166054(buf);
      Current = CFAbsoluteTimeGetCurrent();
      sub_1009865BC(*(_QWORD *)(a1 + 2920), (uint64_t)&__p);
      sub_100ABDE4C(&__p, 3u, (uint64_t)buf, Current, -1.0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)buf);
      sub_100166004(buf);
    }
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v4 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: MiLo, cancelMiLoLocalizerWaitTimer, ignore, shutdown?", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: MiLo, cancelMiLoLocalizerWaitTimer, ignore, shutdown?", &__p, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::cancelMiLoLocalizerWaitTimer()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  *(_DWORD *)(a1 + 2936) = 0;
}

void sub_100D1AB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0)
    operator delete(__p);
  sub_100166004(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_100D1AB64(uint64_t a1)
{
  return *(unsigned int *)(a1 + 2936);
}

void sub_100D1AB6C(uint64_t a1, double *a2)
{
  double Current;
  NSObject *v5;
  double v6;
  double v7;
  NSObject *v8;
  std::string::size_type v9;
  double v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  std::string __p;
  uint8_t buf[4];
  double v17;
  __int16 v18;
  double v19;

  if (*(_QWORD *)(a1 + 2928))
  {
    Current = CFAbsoluteTimeGetCurrent();
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v5 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v6 = *a2;
      v7 = Current + *a2;
      *(_DWORD *)buf = 134283777;
      v17 = v7;
      v18 = 2049;
      v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Fence: MiLo, scheduleMiLoMetricsGpsWaitTimer, at %{private}.1lf, in, %{private}.1lf, seconds", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      v9 = *(_QWORD *)a2;
      v10 = Current + *a2;
      LODWORD(__p.__r_.__value_.__l.__data_) = 134283777;
      *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = v10;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2049;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: MiLo, scheduleMiLoMetricsGpsWaitTimer, at %{private}.1lf, in, %{private}.1lf, seconds", &__p, 22);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::scheduleMiLoMetricsGpsWaitTimer(const CFTimeInterval &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    sub_1001F40D0(*(_QWORD *)(a1 + 2928), Current + *a2);
    if (*(_QWORD *)(a1 + 2960))
    {
      sub_100166054(buf);
      sub_1009865BC(*(_QWORD *)(a1 + 2928), (uint64_t)&__p);
      sub_100ABDE4C(&__p, 2u, (uint64_t)buf, Current, *a2);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)buf);
      sub_100166004(buf);
    }
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v8 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Fence: MiLo, scheduleMiLoMetricsGpsWaitTimer, ignore, shutdown?", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: MiLo, scheduleMiLoMetricsGpsWaitTimer, ignore, shutdown?", &__p, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::scheduleMiLoMetricsGpsWaitTimer(const CFTimeInterval &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
}

void sub_100D1AEF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  sub_100166004(&a18);
  _Unwind_Resume(a1);
}

void sub_100D1AF2C(uint64_t a1)
{
  NSObject *v2;
  double Current;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  std::string __p;
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 2928))
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v2 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: MiLo, cancelMiLoMetricsGpsWaitTimer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: MiLo, cancelMiLoMetricsGpsWaitTimer", &__p, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::cancelMiLoMetricsGpsWaitTimer()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    sub_10016E3C4(*(_QWORD *)(a1 + 2928));
    if (*(_QWORD *)(a1 + 2960))
    {
      sub_100166054(buf);
      Current = CFAbsoluteTimeGetCurrent();
      sub_1009865BC(*(_QWORD *)(a1 + 2928), (uint64_t)&__p);
      sub_100ABDE4C(&__p, 3u, (uint64_t)buf, Current, -1.0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)buf);
      sub_100166004(buf);
    }
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v4 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: MiLo, cancelMiLoMetricsGpsWaitTimer, ignore, shutdown?", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: MiLo, cancelMiLoMetricsGpsWaitTimer, ignore, shutdown?", &__p, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::cancelMiLoMetricsGpsWaitTimer()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
}

void sub_100D1B260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0)
    operator delete(__p);
  sub_100166004(&a18);
  _Unwind_Resume(a1);
}

void sub_100D1B298(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  double Current;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  std::string __p;
  uint8_t buf[1640];

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181148);
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: MiLo, onMiLoMetircsGpsWaitTimerExpired", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: MiLo, onMiLoMetircsGpsWaitTimerExpired", &__p, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onMiLoMetircsGpsWaitTimerExpired(CLPersistentTimer *)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_100D60640(a1 + 120);
  if (!*(_BYTE *)(a1 + 2616))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 384))(a1);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v3 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Fence: MiLo, onMiLoMetircsGpsWaitTimerExpired, stopGps", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      LODWORD(v9) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: MiLo, onMiLoMetircsGpsWaitTimerExpired, stopGps", &__p, v9);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onMiLoMetircsGpsWaitTimerExpired(CLPersistentTimer *)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  if (*(_QWORD *)(a1 + 2960))
  {
    sub_100166054(buf);
    Current = CFAbsoluteTimeGetCurrent();
    sub_1009865BC(*(_QWORD *)(a1 + 2928), (uint64_t)&__p);
    sub_100ABDE4C(&__p, 1u, (uint64_t)buf, Current, -1.0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)buf);
    sub_100166004(buf);
  }
}

void sub_100D1B5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0)
    operator delete(__p);
  sub_100166004(&a18);
  _Unwind_Resume(a1);
}

id sub_100D1B610(uint64_t a1)
{
  NSObject *v2;
  id result;
  double Current;
  const char *v5;
  uint8_t *v6;
  std::string __p;
  uint8_t buf[1640];

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181148);
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: cancelDeassociationDelayedTrigger", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: cancelDeassociationDelayedTrigger", &__p, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::cancelDeassociationDelayedTrigger()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  result = *(id *)(a1 + 2344);
  if (result)
  {
    result = sub_10016E3C4((uint64_t)result);
    if (*(_QWORD *)(a1 + 2960))
    {
      sub_100166054(buf);
      Current = CFAbsoluteTimeGetCurrent();
      sub_1009865BC(*(_QWORD *)(a1 + 2344), (uint64_t)&__p);
      sub_100ABDE4C(&__p, 3u, (uint64_t)buf, Current, -1.0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)buf);
      return (id)sub_100166004(buf);
    }
  }
  return result;
}

void sub_100D1B814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0)
    operator delete(__p);
  sub_100166004(&a18);
  _Unwind_Resume(a1);
}

_QWORD *sub_100D1B84C(_QWORD *result, double *a2)
{
  _QWORD *v3;
  CFAbsoluteTime Current;
  double v5;
  std::string __p;
  _QWORD v7[7];

  if (result[293])
  {
    v3 = result;
    Current = CFAbsoluteTimeGetCurrent();
    result = sub_1001F40D0(v3[293], Current + *a2);
    if (v3[370])
    {
      sub_100166054(v7);
      v5 = CFAbsoluteTimeGetCurrent();
      sub_1009865BC(v3[293], (uint64_t)&__p);
      sub_100ABDE4C(&__p, 2u, (uint64_t)v7, v5, *a2);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_100158284(v3[370], (uint64_t)v7);
      return (_QWORD *)sub_100166004(v7);
    }
  }
  return result;
}

void sub_100D1B8F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_100166004(&a15);
  _Unwind_Resume(a1);
}

double sub_100D1B928(uint64_t a1, double *a2)
{
  double Current;
  uint64_t v5;
  double v6;
  double v7;
  NSObject *v8;
  const char *v10;
  uint8_t *v11;
  std::string __p;
  uint8_t buf[1640];

  Current = CFAbsoluteTimeGetCurrent();
  v5 = *(_QWORD *)(a1 + 2352);
  if (v5)
  {
    v6 = Current;
    v7 = Current + *a2;
    sub_1001F40D0(v5, v7);
    if (*(_QWORD *)(a1 + 2960))
    {
      sub_100166054(buf);
      sub_1009865BC(*(_QWORD *)(a1 + 2352), (uint64_t)&__p);
      sub_100ABDE4C(&__p, 2u, (uint64_t)buf, v6, *a2);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)buf);
      sub_100166004(buf);
    }
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v8 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Fence: ignoring, setNextTrackingWake, shutdown?", buf, 2u);
    }
    v7 = 0.0;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: ignoring, setNextTrackingWake, shutdown?", &__p, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "virtual CFAbsoluteTime CLFenceMonitorNotifier::setNextTrackingWake(const CFTimeInterval &)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  return v7;
}

void sub_100D1BB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  sub_100166004(&a18);
  _Unwind_Resume(a1);
}

void sub_100D1BB78(uint64_t a1, double a2)
{
  double Current;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  double v8;
  std::string __p;
  uint8_t buf[4];
  double v11;
  __int16 v12;
  double v13;

  Current = CFAbsoluteTimeGetCurrent();
  sub_1001F40D0(*(_QWORD *)(a1 + 2576), Current + a2);
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181148);
  v5 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    v11 = a2;
    v12 = 2048;
    v13 = Current + a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "converging state change timer, scheduled, interval, %.2f, fireTime, %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    LODWORD(__p.__r_.__value_.__l.__data_) = 134218240;
    *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = a2;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = Current + a2;
    LODWORD(v8) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "converging state change timer, scheduled, interval, %.2f, fireTime, %f", COERCE_DOUBLE(&__p), v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::scheduleConvergingStateChangeTimer(CFTimeInterval)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  if (*(_QWORD *)(a1 + 2960))
  {
    sub_100166054(buf);
    sub_1009865BC(*(_QWORD *)(a1 + 2576), (uint64_t)&__p);
    sub_100ABDE4C(&__p, 2u, (uint64_t)buf, Current, a2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)buf);
    sub_100166004(buf);
  }
}

void sub_100D1BDBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  sub_100166004(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_100D1BDF4(uint64_t *a1)
{
  NSObject *v2;
  double Current;
  uint64_t result;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  std::string __p;
  uint8_t buf[1640];

  sub_10016E3C4(a1[322]);
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181148);
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "converging state change timer, canceled", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "converging state change timer, canceled", &__p, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::cancelConvergingStateChangeTimer()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  if (a1[370])
  {
    sub_100166054(buf);
    Current = CFAbsoluteTimeGetCurrent();
    sub_1009865BC(a1[322], (uint64_t)&__p);
    sub_100ABDE4C(&__p, 3u, (uint64_t)buf, Current, -1.0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_100158284(a1[370], (uint64_t)buf);
    sub_100166004(buf);
  }
  result = (*(uint64_t (**)(uint64_t *))(*a1 + 176))(a1);
  if ((_DWORD)result)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v5 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "converging state change timer, gnss session ended", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      LODWORD(v10) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "converging state change timer, gnss session ended", &__p, v10);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::cancelConvergingStateChangeTimer()", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    return (*(uint64_t (**)(uint64_t *))(*a1 + 192))(a1);
  }
  return result;
}

void sub_100D1C140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0)
    operator delete(__p);
  sub_100166004(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_100D1C178(uint64_t result, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  double Current;
  _QWORD v9[7];

  if (*(_QWORD *)(result + 2960))
  {
    v7 = result;
    sub_100166054(v9);
    Current = CFAbsoluteTimeGetCurrent();
    sub_100ABE130(a2, a3, a4, (uint64_t)v9, Current);
    sub_100158284(*(_QWORD *)(v7 + 2960), (uint64_t)v9);
    return sub_100166004(v9);
  }
  return result;
}

void sub_100D1C1EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

BOOL sub_100D1C200(uint64_t a1)
{
  return *(_QWORD *)(a1 + 2272) != 0;
}

void sub_100D1C210(uint64_t a1)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  void *__p[2];
  char v6;
  void *v7;
  uint8_t buf[1640];

  if (*(int *)(a1 + 2528) < 1)
  {
    sub_1015A2E04(__p, "none");
    sub_10002B684(a1 + 2520, (uint64_t *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    sub_100E087CC();
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181148);
  v1 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "converging state, GNSS already started", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    LOWORD(v7) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 16, "converging state, GNSS already started", &v7, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLFenceMonitorNotifier::startConvergingStateGNSS()", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
}

void sub_100D1C620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  if (a23 < 0)
    operator delete(__p);
  sub_100166004(&a25);
  _Unwind_Resume(a1);
}

void sub_100D1C670(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLFenceMonitorNotifier::onGpsNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 40), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102181128);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onGpsNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102181128);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onGpsNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100D18300(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100D1C828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D1C848(uint64_t a1)
{
  NSObject *v2;
  uint64_t result;
  double Current;
  const char *v5;
  uint8_t *v6;
  std::string __p;
  uint8_t buf[1640];

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181148);
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "converging state, cancelling GNSS", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "converging state, cancelling GNSS", &__p, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::cancelConvergingStateGNSS()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_100E3E6F0(a1 + 2520);
  result = *(_QWORD *)(a1 + 2272);
  *(_QWORD *)(a1 + 2272) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (*(_QWORD *)(a1 + 2960))
  {
    sub_100166054(buf);
    Current = CFAbsoluteTimeGetCurrent();
    sub_1015A2E04(&__p, "ConvergingState");
    sub_100ABC868(0, 0, &__p, (uint64_t)buf, Current);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)buf);
    return sub_100166004(buf);
  }
  return result;
}

void sub_100D1CA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0)
    operator delete(__p);
  sub_100166004(&a18);
  _Unwind_Resume(a1);
}

void sub_100D1CA9C(uint64_t a1)
{
  NSObject *v2;
  double Current;
  const char *v4;
  uint8_t *v5;
  std::string __p;
  uint8_t buf[1640];

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181148);
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "converging state, onConvergingStateChangeTimerFired", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "converging state, onConvergingStateChangeTimerFired", &__p, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onConvergingStateChangeTimerFired(CLPersistentTimer *)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  Current = CFAbsoluteTimeGetCurrent();
  sub_100D560E8(a1 + 120, Current);
  if (*(_QWORD *)(a1 + 2960))
  {
    sub_100166054(buf);
    sub_1009865BC(*(_QWORD *)(a1 + 2576), (uint64_t)&__p);
    sub_100ABDE4C(&__p, 1u, (uint64_t)buf, Current, -1.0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)buf);
    sub_100166004(buf);
  }
}

void sub_100D1CC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  sub_100166004(&a18);
  _Unwind_Resume(a1);
}

void sub_100D1CCD4(uint64_t a1)
{
  NSObject *v2;
  double Current;
  const char *v4;
  uint8_t *v5;
  std::string __p;
  uint8_t buf[1640];

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181148);
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: MiLo, onMiLoLocalizerWaitTimerExpired", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: MiLo, onMiLoLocalizerWaitTimerExpired", &__p, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onMiLoLocalizerWaitTimerExpired(CLPersistentTimer *)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  Current = CFAbsoluteTimeGetCurrent();
  *(_DWORD *)(a1 + 2936) = 0;
  sub_100D560E0(a1 + 120, Current);
  if (*(_QWORD *)(a1 + 2960))
  {
    sub_100166054(buf);
    sub_1009865BC(*(_QWORD *)(a1 + 2920), (uint64_t)&__p);
    sub_100ABDE4C(&__p, 1u, (uint64_t)buf, Current, -1.0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)buf);
    sub_100166004(buf);
  }
}

void sub_100D1CED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  sub_100166004(&a18);
  _Unwind_Resume(a1);
}

void sub_100D1CF10(uint64_t a1)
{
  double Current;
  std::string __p;
  _QWORD v4[7];

  Current = CFAbsoluteTimeGetCurrent();
  sub_100D566F4(a1 + 120, Current);
  if (*(_QWORD *)(a1 + 2960))
  {
    sub_100166054(v4);
    sub_1009865BC(*(_QWORD *)(a1 + 2336), (uint64_t)&__p);
    sub_100ABDE4C(&__p, 1u, (uint64_t)v4, Current, -1.0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)v4);
    sub_100166004(v4);
  }
}

void sub_100D1CFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_100166004(&a15);
  _Unwind_Resume(a1);
}

void sub_100D1CFD4(uint64_t a1)
{
  double Current;
  std::string __p;
  _QWORD v4[7];

  Current = CFAbsoluteTimeGetCurrent();
  sub_100D56458(a1 + 120, Current);
  if (*(_QWORD *)(a1 + 2960))
  {
    sub_100166054(v4);
    sub_1009865BC(*(_QWORD *)(a1 + 2344), (uint64_t)&__p);
    sub_100ABDE4C(&__p, 1u, (uint64_t)v4, Current, -1.0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)v4);
    sub_100166004(v4);
  }
}

void sub_100D1D068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_100166004(&a15);
  _Unwind_Resume(a1);
}

void sub_100D1D098(uint64_t a1)
{
  double Current;
  std::string __p;
  _QWORD v4[7];

  Current = CFAbsoluteTimeGetCurrent();
  sub_100D56990(a1 + 120, Current);
  if (*(_QWORD *)(a1 + 2960))
  {
    sub_100166054(v4);
    sub_1009865BC(*(_QWORD *)(a1 + 2352), (uint64_t)&__p);
    sub_100ABDE4C(&__p, 1u, (uint64_t)v4, Current, -1.0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)v4);
    sub_100166004(v4);
  }
}

void sub_100D1D12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_100166004(&a15);
  _Unwind_Resume(a1);
}

NSObject *sub_100D1D15C(uint64_t a1)
{
  NSObject *v2;
  double Current;
  NSObject *result;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181148);
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Fence: CLFenceMonitor, shutdown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: CLFenceMonitor, shutdown", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::shutdown()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  Current = CFAbsoluteTimeGetCurrent();
  sub_100D57938(a1 + 120, Current);
  result = *(NSObject **)(a1 + 2328);
  if (result)
  {
    dispatch_source_cancel(result);
    v5 = *(NSObject **)(a1 + 2328);
    *(_QWORD *)(a1 + 2328) = 0;
    dispatch_release(v5);
    return objc_msgSend(*(id *)(a1 + 2296), "clearExitAndEntryScanNetworks:", 1);
  }
  return result;
}

NSObject *sub_100D1D320(uint64_t a1)
{
  return sub_100D1D15C(a1 - 8);
}

void sub_100D1D328(uint64_t a1, char *a2)
{
  NSObject *v4;
  double Current;
  id v6;
  const char *v7;
  char *v8;
  std::string v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[2];
  __int128 v18;
  uint64_t v19;
  void *__p[2];
  char v21;
  int v22;
  char *v23;
  _BYTE buf[12];
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[2];
  __int128 v31;
  uint64_t v32;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181148);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136380675;
    *(_QWORD *)&buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Fence: request update, reason, %{private}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v22 = 136380675;
    v23 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: request update, reason, %{private}s", &v22, 12);
    v8 = (char *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::requestWifiLocationUpdate(const char *)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  sub_100D57DBC(a1 + 120);
  Current = CFAbsoluteTimeGetCurrent();
  sub_1015A2E04(__p, "geofence");
  sub_100225558((uint64_t)buf, 4, 0, (__int128 *)__p, Current);
  if (v21 < 0)
    operator delete(__p[0]);
  v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "vendor"), "proxyForService:", CFSTR("CLWifiLocationProvider"));
  v10 = *(_QWORD *)buf;
  v11 = buf[8];
  if (SHIBYTE(v26) < 0)
  {
    sub_100115CE4(&v12, (void *)v25, *((unint64_t *)&v25 + 1));
  }
  else
  {
    v12 = v25;
    v13 = v26;
  }
  v15 = v28;
  v16 = v29;
  v17[0] = v30[0];
  *(_OWORD *)((char *)v17 + 12) = *(_OWORD *)((char *)v30 + 12);
  v14 = v27;
  if (SHIBYTE(v32) < 0)
  {
    sub_100115CE4(&v18, (void *)v31, *((unint64_t *)&v31 + 1));
  }
  else
  {
    v18 = v31;
    v19 = v32;
  }
  objc_msgSend(v6, "requestLocationUpdateWithParameters:", sub_10061AB3C((uint64_t)&v10));
  if (SHIBYTE(v19) < 0)
    operator delete((void *)v18);
  if (SHIBYTE(v13) < 0)
    operator delete((void *)v12);
  if (*(_QWORD *)(a1 + 2960))
  {
    sub_100166054(&v22);
    sub_1015A2E04(&v9, a2);
    sub_100ABC868(1u, 1, &v9, (uint64_t)&v22, Current);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
    sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)&v22);
    sub_100166004(&v22);
  }
  if (SHIBYTE(v32) < 0)
    operator delete((void *)v31);
  if (SHIBYTE(v26) < 0)
    operator delete((void *)v25);
}

void sub_100D1D688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  if (a24 < 0)
    operator delete(__p);
  sub_10055A600((uint64_t)&a52);
  _Unwind_Resume(a1);
}

void sub_100D1D714(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  _QWORD v11[5];
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181148);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a1 + 2624);
    v6 = *(unsigned __int8 *)(a1 + 2619);
    *(_DWORD *)buf = 136381187;
    v19 = a2;
    v20 = 2049;
    v21 = v5;
    v22 = 1025;
    v23 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: createActivityAlarm, %{private}s, %{private}p, fIsUseActivityAlarm, %{private}d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v7 = *(_QWORD *)(a1 + 2624);
    v8 = *(unsigned __int8 *)(a1 + 2619);
    v12 = 136381187;
    v13 = a2;
    v14 = 2049;
    v15 = v7;
    v16 = 1025;
    v17 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: createActivityAlarm, %{private}s, %{private}p, fIsUseActivityAlarm, %{private}d", &v12, 28);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::createActivityAlarm(const char *)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (*(_BYTE *)(a1 + 2619))
  {
    if (!*(_QWORD *)(a1 + 2624))
    {
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_100D1D978;
      v11[3] = &unk_102142BD0;
      v11[4] = a1;
      *(_QWORD *)(a1 + 2624) = -[CMActivityAlarmLocal initWithTrigger:duration:onQueue:withHandler:]([CMActivityAlarmLocal alloc], "initWithTrigger:duration:onQueue:withHandler:", 6, objc_msgSend(*(id *)(a1 + 48), "queue"), v11, 900.0);
    }
  }
}

void sub_100D1D978(uint64_t a1, void *a2, void *a3)
{
  uint64_t *v5;
  double Current;
  char *v7;
  NSObject *v8;
  int v9;
  std::string::size_type v10;
  unsigned int v11;
  std::string *p_p;
  uint64_t v13;
  int v14;
  std::string::size_type v15;
  unsigned int v16;
  std::string *v17;
  const char *v18;
  uint8_t *v19;
  std::string __p;
  double v21;
  int v22;
  void *v23;
  __int16 v24;
  std::string *v25;
  __int16 v26;
  unsigned int v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  std::string *v31;
  __int16 v32;
  unsigned int v33;

  v5 = *(uint64_t **)(a1 + 32);
  Current = CFAbsoluteTimeGetCurrent();
  v21 = Current;
  if (a3)
    v7 = (char *)objc_msgSend(objc_msgSend(a3, "description"), "UTF8String");
  else
    v7 = "ok";
  sub_1015A2E04(&__p, v7);
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181148);
  v8 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
  {
    v9 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v10 = __p.__r_.__value_.__r.__words[0];
    v11 = objc_msgSend(a2, "trigger");
    p_p = &__p;
    *(_DWORD *)buf = 134284035;
    if (v9 < 0)
      p_p = (std::string *)v10;
    v29 = a2;
    v30 = 2081;
    v31 = p_p;
    v32 = 1025;
    v33 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Fence: activityAlarmHandler, %{private}p, %{private}s, trigger, %{private}d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v13 = qword_1022A0068;
    v14 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v15 = __p.__r_.__value_.__r.__words[0];
    v16 = objc_msgSend(a2, "trigger");
    v17 = &__p;
    v22 = 134284035;
    if (v14 < 0)
      v17 = (std::string *)v15;
    v23 = a2;
    v24 = 2081;
    v25 = v17;
    v26 = 1025;
    v27 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 1, "Fence: activityAlarmHandler, %{private}p, %{private}s, trigger, %{private}d", &v22, 28);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::createActivityAlarm(const char *)_block_invoke", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  sub_100D56E84((uint64_t)(v5 + 15), Current);
  sub_100D4E764((uint64_t)(v5 + 15), (uint64_t)"kNotificationDelayTriggerReceived", 0, &v21);
  (*(void (**)(uint64_t *, const char *))(*v5 + 312))(v5, "createActivityAlarm-cleanup");
  if (v5[370])
  {
    sub_100166054(buf);
    sub_100ABDAD0(a2, &__p, (uint64_t)buf, v21);
    sub_100158284(v5[370], (uint64_t)buf);
    sub_100166004(buf);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_100D1DC60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_100D1DCA4(uint64_t a1)
{
  NSObject *v2;
  id result;
  double Current;
  const char *v5;
  uint8_t *v6;
  std::string __p;
  uint8_t buf[1640];

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181148);
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: cancelSettledTimer", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: cancelSettledTimer", &__p, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::cancelSettledTimer()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  result = *(id *)(a1 + 2368);
  if (result)
  {
    result = sub_10016E3C4((uint64_t)result);
    if (*(_QWORD *)(a1 + 2960))
    {
      sub_100166054(buf);
      Current = CFAbsoluteTimeGetCurrent();
      sub_1009865BC(*(_QWORD *)(a1 + 2368), (uint64_t)&__p);
      sub_100ABDE4C(&__p, 3u, (uint64_t)buf, Current, -1.0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)buf);
      return (id)sub_100166004(buf);
    }
  }
  return result;
}

void sub_100D1DEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0)
    operator delete(__p);
  sub_100166004(&a18);
  _Unwind_Resume(a1);
}

void sub_100D1DEE0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  CFAbsoluteTime Current;
  double v5;
  const char *v6;
  uint8_t *v7;
  std::string __p;
  uint8_t buf[4];
  uint64_t v10;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181148);
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134283521;
    v10 = 0x4072C00000000000;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: scheduleNextSettledTimer in, %{private}.1lf", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    LODWORD(__p.__r_.__value_.__l.__data_) = 134283521;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = 0x4072C00000000000;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: scheduleNextSettledTimer in, %{private}.1lf", &__p, 12);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::scheduleSettledTimer()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  v3 = *(_QWORD *)(a1 + 2368);
  if (v3)
  {
    Current = CFAbsoluteTimeGetCurrent();
    sub_1001F40D0(v3, Current + 300.0);
    if (*(_QWORD *)(a1 + 2960))
    {
      sub_100166054(buf);
      v5 = CFAbsoluteTimeGetCurrent();
      sub_1009865BC(*(_QWORD *)(a1 + 2368), (uint64_t)&__p);
      sub_100ABDE4C(&__p, 2u, (uint64_t)buf, v5, 300.0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)buf);
      sub_100166004(buf);
    }
  }
}

void sub_100D1E120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0)
    operator delete(__p);
  sub_100166004(&a18);
  _Unwind_Resume(a1);
}

void sub_100D1E158(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;
  double Current;
  double v8;
  _QWORD v9[7];

  v6 = a1 + 8;
  (*(void (**)(uint64_t, _DWORD *, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 8) + 152))(a1 + 8, a2, a3, 0, 0xFFFFFFFFLL, 0);
  Current = CFAbsoluteTimeGetCurrent();
  if (*(_QWORD *)(v6 + 2952))
  {
    v8 = Current;
    sub_100166054(v9);
    sub_100ABA9FC(a2, a3, (uint64_t)v9, v8);
    sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)v9);
    sub_100166004(v9);
  }
}

void sub_100D1E1F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

BOOL sub_100D1E208(uint64_t a1)
{
  return *(_QWORD *)(a1 + 2288) != 0;
}

void sub_100D1E218(uint64_t a1)
{
  double Current;
  double v3;
  std::string __p;
  _QWORD v5[7];

  objc_msgSend(*(id *)(a1 + 2288), "startMonitoringScenarioTriggerOfType:forClient:", 1, CLISP_ME_TOKEN);
  Current = CFAbsoluteTimeGetCurrent();
  if (*(_QWORD *)(a1 + 2960))
  {
    v3 = Current;
    sub_100166054(v5);
    sub_1015A2E04(&__p, "");
    sub_100ABC868(4u, 1, &__p, (uint64_t)v5, v3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)v5);
    sub_100166004(v5);
  }
}

void sub_100D1E2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_100166004(&a15);
  _Unwind_Resume(a1);
}

void sub_100D1E2F0(uint64_t a1)
{
  double Current;
  double v3;
  std::string __p;
  _QWORD v5[7];

  objc_msgSend(*(id *)(a1 + 2288), "stopMonitoringScenarioTriggerOfType:forClient:", 1, CLISP_ME_TOKEN);
  Current = CFAbsoluteTimeGetCurrent();
  if (*(_QWORD *)(a1 + 2960))
  {
    v3 = Current;
    sub_100166054(v5);
    sub_1015A2E04(&__p, "");
    sub_100ABC868(4u, 0, &__p, (uint64_t)v5, v3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)v5);
    sub_100166004(v5);
  }
}

void sub_100D1E398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_100166004(&a15);
  _Unwind_Resume(a1);
}

void sub_100D1E3C8(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  double Current;
  id v10;
  int v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  const char *v17;
  uint8_t *v18;
  NSObject *v19;
  uint64_t v20;
  _QWORD *v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  int v27;
  id v28;
  uint8_t buf[4];
  id v30;

  if (a3)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v4 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v6 = (_QWORD *)(v5 + 72);
      if (*(char *)(v5 + 95) < 0)
        v6 = (_QWORD *)*v6;
      *(_DWORD *)buf = 136380675;
      v30 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning, error requesting LOI for fence %{private}s", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v21 = (_QWORD *)(v20 + 72);
    if (*(char *)(v20 + 95) < 0)
      v21 = (_QWORD *)*v21;
    v27 = 136380675;
    v28 = v21;
    LODWORD(v26) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#Warning, error requesting LOI for fence %{private}s", &v27, v26);
    v18 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::findAndSetLoiTypeForFence(const CLFenceManager_Type::Fence &)_block_invoke", "%s\n", v22);
LABEL_42:
    if (v18 != buf)
      free(v18);
    return;
  }
  if (a2)
  {
    v8 = *(_QWORD *)(a1 + 40);
    Current = CFAbsoluteTimeGetCurrent();
    HIDWORD(v26) = 0;
    v10 = a2;
    switch((unint64_t)objc_msgSend(v10, "type"))
    {
      case 0xFFFFFFFFFFFFFFFFLL:
      case 3uLL:
        v11 = 4;
        goto LABEL_34;
      case 0uLL:
        v11 = 1;
        goto LABEL_34;
      case 1uLL:
        v11 = 2;
        goto LABEL_34;
      case 2uLL:
        v11 = 3;
LABEL_34:
        HIDWORD(v26) = v11;
        break;
      default:
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102181148);
        v19 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 134349056;
          v30 = objc_msgSend(v10, "type");
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "Unhandled LOI type, %{public}ld", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_102181148);
          v23 = qword_1022A0068;
          v27 = 134349056;
          v28 = objc_msgSend(v10, "type");
          LODWORD(v26) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 17, "Unhandled LOI type, %{public}ld", &v27, v26);
          v25 = (uint8_t *)v24;
          sub_100512490("Generic", 1, 0, 0, "void CLFenceMonitorNotifier::findAndSetLoiTypeForFence(const CLFenceManager_Type::Fence &)_block_invoke", "%s\n", v24);
          if (v25 != buf)
            free(v25);
        }
        v11 = 0;
        break;
    }

    sub_100D4ACBC(v8 + 120, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48, v11);
    if (*(_QWORD *)(v8 + 2960))
    {
      sub_100166054(buf);
      sub_100ABBF34(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48, (unsigned int *)&v26 + 1, (uint64_t)buf, Current);
      sub_100158284(*(_QWORD *)(v8 + 2960), (uint64_t)buf);
      sub_100166004(buf);
    }
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v12 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v14 = (_QWORD *)(v13 + 72);
      if (*(char *)(v13 + 95) < 0)
        v14 = (_QWORD *)*v14;
      *(_DWORD *)buf = 136380675;
      v30 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "No LOI info for fence %{private}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v16 = (_QWORD *)(v15 + 72);
      if (*(char *)(v15 + 95) < 0)
        v16 = (_QWORD *)*v16;
      v27 = 136380675;
      v28 = v16;
      LODWORD(v26) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "No LOI info for fence %{private}s", &v27, v26);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::findAndSetLoiTypeForFence(const CLFenceManager_Type::Fence &)_block_invoke", "%s\n", v17);
      goto LABEL_42;
    }
  }
}

void sub_100D1E94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_100D1E97C(uint64_t a1, uint64_t a2, char a3)
{
  id v6;
  CLLocationCoordinate2D v7;
  id v8;
  _QWORD v9[7];
  _QWORD v10[3];
  char v11;
  _QWORD v12[6];
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  id v21;
  void *__p;
  void *v23;

  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x12812000000;
  v12[3] = sub_1002071A8;
  v12[4] = sub_100207CA8;
  v12[5] = "/!0";
  sub_1004E5748((char *)&v13, (__int128 *)a2);
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2020000000;
  v11 = a3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100D1EB50;
  v9[3] = &unk_102180E58;
  v9[5] = v10;
  v9[6] = a1;
  v9[4] = v12;
  v6 = objc_alloc((Class)CLCircularRegion);
  v7 = CLLocationCoordinate2DMake(*(CLLocationDegrees *)(a2 + 72), *(CLLocationDegrees *)(a2 + 80));
  v8 = objc_msgSend(v6, "initWithCenter:radius:identifier:", CFSTR("SignificantRegion"), v7.latitude, v7.longitude, sub_10016F694(a2), _NSConcreteStackBlock, 3221225472, sub_100D1EB50, &unk_102180E58, v12, v10, a1);
  sub_100D62BD8(a1 + 120);
  objc_msgSend(*(id *)(a1 + 2288), "fetchLocationOfInterestForRegion:withReply:", v8, v9);
  _Block_object_dispose(v10, 8);
  _Block_object_dispose(v12, 8);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }

  if (v20 < 0)
    operator delete(v19);
  if (v18 < 0)
    operator delete(v17);
  if (v16 < 0)
    operator delete(v15);
  if (v14 < 0)
    operator delete(v13);
}

void sub_100D1EB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  sub_1004E2BD0(v8);
  _Unwind_Resume(a1);
}

void sub_100D1EB50(_QWORD *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  double Current;
  NSObject *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  void *v17;
  id v18;
  NSObject *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  std::string __p;
  std::string __dst;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::string v42;
  uint64_t buf;
  __int16 v44;
  const char *v45;
  __int16 v46;
  id v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  int v51;
  __int16 v52;
  uint64_t v53;

  v6 = a1[6];
  Current = CFAbsoluteTimeGetCurrent();
  if (a3)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v8 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_ERROR))
    {
      v9 = *(_QWORD *)(a1[4] + 8);
      v10 = (int)*(double *)(v9 + 144);
      v12 = *(void **)(v9 + 120);
      v11 = *(_QWORD *)(v9 + 128);
      buf = 68290051;
      v44 = 2082;
      v45 = "";
      v46 = 2049;
      v47 = v12;
      v48 = 2049;
      v49 = v11;
      v50 = 1026;
      v51 = v10;
      v52 = 2114;
      v53 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#significantRegion: fetching LOI - error\", \"latitude\":\"%{private}f\", \"longitude\":\"%{private}f\", \"radius\":%{public}d, \"error\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x36u);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
    }
    v13 = qword_1022A0068;
    if (os_signpost_enabled((os_log_t)qword_1022A0068))
    {
      v14 = *(_QWORD *)(a1[4] + 8);
      v15 = (int)*(double *)(v14 + 144);
      v17 = *(void **)(v14 + 120);
      v16 = *(_QWORD *)(v14 + 128);
      buf = 68290051;
      v44 = 2082;
      v45 = "";
      v46 = 2049;
      v47 = v17;
      v48 = 2049;
      v49 = v16;
      v50 = 1026;
      v51 = v15;
      v52 = 2114;
      v53 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#significantRegion: fetching LOI - error", "{\"msg%{public}.0s\":\"#significantRegion: fetching LOI - error\", \"latitude\":\"%{private}f\", \"longitude\":\"%{private}f\", \"radius\":%{public}d, \"error\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x36u);
    }
    sub_100D62BE0(v6 + 120);
    if (!*(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24))
    {
      sub_100D61F5C(v6 + 120, (_BYTE *)(*(_QWORD *)(a1[4] + 8) + 48), 1, Current);
      if (*(_QWORD *)(v6 + 2960))
      {
        sub_100166054(&buf);
        sub_100ABC188(1, *(_QWORD *)(a1[4] + 8) + 48, (uint64_t)&buf, Current);
        sub_100158284(*(_QWORD *)(v6 + 2960), (uint64_t)&buf);
LABEL_12:
        sub_100166004(&buf);
      }
    }
  }
  else if (a2)
  {
    v18 = a2;
    sub_1015A2E04(&v42, (char *)objc_msgSend(objc_msgSend(objc_msgSend(v18, "identifier"), "UUIDString"), "UTF8String"));
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      sub_100115CE4(&__p, v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
    else
      __p = v42;
    objc_msgSend(objc_msgSend(v18, "location", __p.__r_.__value_.__r.__words[0]), "latitude");
    v25 = v24;
    objc_msgSend(objc_msgSend(v18, "location"), "longitude");
    v27 = v26;
    objc_msgSend(objc_msgSend(v18, "location"), "horizontalUncertainty");
    v29 = v28;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_100115CE4(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      v39 = v25;
      v40 = v27;
      v41 = v29;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      __dst = __p;
      v39 = v25;
      v40 = v27;
      v41 = v28;
    }
    sub_100D60B10((uint64_t **)(v6 + 120), (uint64_t)&__dst, (unsigned __int8 *)(*(_QWORD *)(a1[4] + 8) + 48), Current, *(unsigned __int8 *)(*(_QWORD *)(a1[5] + 8) + 24));
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v30 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(objc_msgSend(v18, "location"), "horizontalUncertainty");
      buf = 68289539;
      v44 = 2082;
      v45 = "";
      v46 = 2113;
      v47 = v18;
      v48 = 1026;
      LODWORD(v49) = (int)v31;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#significantRegion: fetching LOI - match\", \"loi\":%{private, location:escape_only}@, \"radius\":%{public}d}", (uint8_t *)&buf, 0x22u);
    }
    objc_msgSend(objc_msgSend(v18, "location"), "horizontalUncertainty");
    v33 = v32;
    objc_msgSend(objc_msgSend(v18, "location"), "latitude");
    v35 = v34;
    objc_msgSend(objc_msgSend(v18, "location"), "longitude");
    sub_100D62BF0(v6 + 120, v33, v35, v36, *(double *)(*(_QWORD *)(a1[4] + 8) + 120), *(double *)(*(_QWORD *)(a1[4] + 8) + 128));
    if (*(_QWORD *)(v6 + 2960))
    {
      sub_100166054(&buf);
      sub_100ABC444(&__dst, *(_QWORD *)(a1[4] + 8) + 48, (uint64_t)&buf, Current);
      sub_100158284(*(_QWORD *)(v6 + 2960), (uint64_t)&buf);
      sub_100166004(&buf);
    }

    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v19 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      v20 = *(_QWORD *)(a1[4] + 8);
      v21 = (int)*(double *)(v20 + 144);
      v23 = *(void **)(v20 + 120);
      v22 = *(_QWORD *)(v20 + 128);
      buf = 68289795;
      v44 = 2082;
      v45 = "";
      v46 = 2049;
      v47 = v23;
      v48 = 2049;
      v49 = v22;
      v50 = 1026;
      v51 = v21;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#significantRegion: fetching LOI - no match\", \"latitude\":\"%{private}f\", \"longitude\":\"%{private}f\", \"radius\":%{public}d}", (uint8_t *)&buf, 0x2Cu);
    }
    sub_100D62BE8(v6 + 120);
    if (!*(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24))
    {
      sub_100D61F5C(v6 + 120, (_BYTE *)(*(_QWORD *)(a1[4] + 8) + 48), 0, Current);
      if (*(_QWORD *)(v6 + 2960))
      {
        sub_100166054(&buf);
        sub_100ABC188(0, *(_QWORD *)(a1[4] + 8) + 48, (uint64_t)&buf, Current);
        sub_100158284(*(_QWORD *)(v6 + 2960), (uint64_t)&buf);
        goto LABEL_12;
      }
    }
  }
}

void sub_100D1F170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  sub_100166004(&a32);
  _Unwind_Resume(a1);
}

void sub_100D1F1EC(uint64_t a1, int *a2, uint64_t a3, __int128 *a4)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  NSObject *v20;
  const char *v21;
  id v22;
  CLLocationCoordinate2D v23;
  __int16 v24;
  _QWORD v25[8];
  _QWORD v26[6];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[2];
  _QWORD v36[3];
  int v37;
  _QWORD v38[6];
  void *v39;
  char v40;
  void *v41;
  char v42;
  void *v43;
  char v44;
  void *v45;
  char v46;
  id v47;
  void *__p;
  void *v49;
  uint8_t buf[1640];

  v38[0] = 0;
  v38[1] = v38;
  v38[2] = 0x12812000000;
  v38[3] = sub_1002071A8;
  v38[4] = sub_100207CA8;
  v38[5] = "/!0";
  sub_1004E5748((char *)&v39, (__int128 *)a3);
  v36[2] = 0x2020000000;
  v26[2] = 0xD012000000;
  v8 = a4[6];
  v9 = a4[8];
  v34 = a4[7];
  v35[0] = v9;
  *(_OWORD *)((char *)v35 + 12) = *(__int128 *)((char *)a4 + 140);
  v10 = a4[2];
  v11 = a4[4];
  v12 = a4[5];
  v30 = a4[3];
  v31 = v11;
  v32 = v12;
  v33 = v8;
  v13 = a4[1];
  v27 = *a4;
  v36[0] = 0;
  v36[1] = v36;
  v37 = *a2;
  v26[0] = 0;
  v26[1] = v26;
  v26[3] = sub_100D1F84C;
  v26[4] = nullsub_1107;
  v26[5] = 0;
  v28 = v13;
  v29 = v10;
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_100D1F884;
  v25[3] = &unk_102180E80;
  v25[4] = v38;
  v25[5] = v36;
  v25[6] = v26;
  v25[7] = a1;
  switch(v37)
  {
    case -1:
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      v14 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "#significantRegion: unknown status", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102181148);
        v24 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "#significantRegion: unknown status", &v24, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLFenceMonitorNotifier::sendLoiFenceEventHint(const CLFenceManager_Type::FenceStatus &, const CLFenceManager_Type::Fence &, const CLDaemonLocation &)", "%s\n", v15);
        goto LABEL_27;
      }
      break;
    case 0:
      v19 = 1;
      goto LABEL_31;
    case 1:
      v19 = 2;
      goto LABEL_31;
    case 2:
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      v20 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "#significantRegion: invalid status", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        break;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      v24 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "#significantRegion: invalid status", &v24, 2);
      v16 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLFenceMonitorNotifier::sendLoiFenceEventHint(const CLFenceManager_Type::FenceStatus &, const CLFenceManager_Type::Fence &, const CLDaemonLocation &)", "%s\n", v21);
      goto LABEL_27;
    case 3:
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      v17 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "#significantRegion: not set status", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        break;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      v24 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "#significantRegion: not set status", &v24, 2);
      v16 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLFenceMonitorNotifier::sendLoiFenceEventHint(const CLFenceManager_Type::FenceStatus &, const CLFenceManager_Type::Fence &, const CLDaemonLocation &)", "%s\n", v18);
LABEL_27:
      if (v16 != buf)
        free(v16);
      break;
    default:
      v19 = 0;
LABEL_31:
      v22 = objc_alloc((Class)CLCircularRegion);
      v23 = CLLocationCoordinate2DMake(*(CLLocationDegrees *)(a3 + 72), *(CLLocationDegrees *)(a3 + 80));
      objc_msgSend(*(id *)(a1 + 2288), "setHintForRegionState:significantRegion:withReply:", v19, objc_msgSend(v22, "initWithCenter:radius:identifier:", CFSTR("SignificantRegion"), v23.latitude, v23.longitude, sub_10016F694(a3)), v25);
      break;
  }
  _Block_object_dispose(v26, 8);
  _Block_object_dispose(v36, 8);
  _Block_object_dispose(v38, 8);
  if (__p)
  {
    v49 = __p;
    operator delete(__p);
  }

  if (v46 < 0)
    operator delete(v45);
  if (v44 < 0)
    operator delete(v43);
  if (v42 < 0)
    operator delete(v41);
  if (v40 < 0)
    operator delete(v39);
}

void sub_100D1F7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  uint64_t v50;

  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a46, 8);
  _Block_object_dispose(&a50, 8);
  sub_1004E2BD0(v50);
  _Unwind_Resume(a1);
}

__n128 sub_100D1F84C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v2;
  v3 = *(_OWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 96);
  v5 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v5;
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 96) = v4;
  result = *(__n128 *)(a2 + 144);
  v7 = *(_OWORD *)(a2 + 160);
  v8 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 188) = *(_OWORD *)(a2 + 188);
  *(_OWORD *)(a1 + 160) = v7;
  *(_OWORD *)(a1 + 176) = v8;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

void sub_100D1F884(_QWORD *a1, int a2, uint64_t a3)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  double Current;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *__p[2];
  char v16;
  _WORD v17[8];
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  if (a2)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v3 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#significantRegion: successfully sent hint", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      v17[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#significantRegion: successfully sent hint", v17, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::sendLoiFenceEventHint(const CLFenceManager_Type::FenceStatus &, const CLFenceManager_Type::Fence &, const CLDaemonLocation &)_block_invoke", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
  else
  {
    v8 = a1[7];
    if (sub_10016F688()[2])
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      v9 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68289282;
        v19 = 0;
        v20 = 2082;
        v21 = "";
        v22 = 2114;
        v23 = a3;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#significantRegion: could not deliver hint\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102181148);
      }
      v10 = qword_1022A0068;
      if (os_signpost_enabled((os_log_t)qword_1022A0068))
      {
        *(_DWORD *)buf = 68289282;
        v19 = 0;
        v20 = 2082;
        v21 = "";
        v22 = 2114;
        v23 = a3;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#significantRegion: could not deliver hint", "{\"msg%{public}.0s\":\"#significantRegion: could not deliver hint\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
      Current = CFAbsoluteTimeGetCurrent();
      v12 = *(_QWORD *)(a1[4] + 8);
      v13 = *(_QWORD *)(a1[5] + 8);
      v14 = *(_QWORD *)(a1[6] + 8);
      sub_1015A2E04(__p, "HintError");
      sub_100D4CCD0(v8 + 120, v12 + 48, (int *)(v13 + 24), v14 + 48, (uint64_t *)__p, Current);
      if (v16 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_100D1FBC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100D1FBE4(uint64_t a1)
{
  NSObject *v1;
  NSObject *v3;
  double Current;
  std::string __p;
  uint64_t buf;
  __int16 v7;
  const char *v8;

  if (*(_BYTE *)(a1 + 2632))
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v1 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      buf = 68289026;
      v7 = 2082;
      v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#significantRegion: already monitoring\"}", (uint8_t *)&buf, 0x12u);
    }
  }
  else if (sub_100D60B00(a1 + 120))
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v3 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      buf = 68289026;
      v7 = 2082;
      v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#significantRegion: start monitoring\"}", (uint8_t *)&buf, 0x12u);
    }
    objc_msgSend(*(id *)(a1 + 2288), "startMonitoringVisitsForClient:", CLISP_ME_TOKEN);
    *(_BYTE *)(a1 + 2632) = 1;
    if (*(_QWORD *)(a1 + 2960))
    {
      Current = CFAbsoluteTimeGetCurrent();
      sub_100166054(&buf);
      sub_1015A2E04(&__p, "");
      sub_100ABC868(3u, 1, &__p, (uint64_t)&buf, Current);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)&buf);
      sub_100166004(&buf);
    }
  }
}

void sub_100D1FDE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_100166004(&a16);
  _Unwind_Resume(a1);
}

void sub_100D1FE1C(uint64_t a1)
{
  NSObject *v2;
  double Current;
  NSObject *v4;
  std::string __p;
  uint64_t buf;
  __int16 v7;
  const char *v8;

  if (*(_BYTE *)(a1 + 2632))
  {
    if (!sub_100D60B00(a1 + 120))
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      v2 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289026;
        v7 = 2082;
        v8 = "";
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#significantRegion: stop monitoring\"}", (uint8_t *)&buf, 0x12u);
      }
      objc_msgSend(*(id *)(a1 + 2288), "stopMonitoringVisitsForClient:", CLISP_ME_TOKEN);
      *(_BYTE *)(a1 + 2632) = 0;
      if (*(_QWORD *)(a1 + 2960))
      {
        Current = CFAbsoluteTimeGetCurrent();
        sub_100166054(&buf);
        sub_1015A2E04(&__p, "");
        sub_100ABC868(3u, 0, &__p, (uint64_t)&buf, Current);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)&buf);
        sub_100166004(&buf);
      }
    }
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v4 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      buf = 68289026;
      v7 = 2082;
      v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#significantRegion: already stopped monitoring\"}", (uint8_t *)&buf, 0x12u);
    }
  }
}

void sub_100D20018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_100166004(&a16);
  _Unwind_Resume(a1);
}

void sub_100D20050(uint64_t a1)
{
  NSObject *v2;
  double Current;
  const char *v4;
  uint8_t *v5;
  std::string __p;
  uint8_t buf[1640];

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181148);
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: settled timer expired", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: settled timer expired", &__p, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onSettledTimerExpired(CLPersistentTimer *)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  Current = CFAbsoluteTimeGetCurrent();
  sub_100D56EFC(a1 + 120, Current);
  if (*(_QWORD *)(a1 + 2960))
  {
    sub_100166054(buf);
    sub_1009865BC(*(_QWORD *)(a1 + 2368), (uint64_t)&__p);
    sub_100ABDE4C(&__p, 1u, (uint64_t)buf, Current, -1.0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)buf);
    sub_100166004(buf);
  }
}

void sub_100D20250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  sub_100166004(&a18);
  _Unwind_Resume(a1);
}

BOOL sub_100D20288(uint64_t a1, int a2)
{
  _BOOL8 result;
  NSObject *v4;
  const char *v5;
  void **v6;
  void *v7[2];
  uint64_t v8;
  int v9;
  void *v10;
  void *__p[2];
  uint64_t v12;

  v9 = a2;
  result = +[CLGnssProviderAdapter isSupported](CLGnssProviderAdapter, "isSupported");
  if (result)
  {
    sub_1015A2E04(v7, "onLocationWatchdogExpire");
    if (*(int *)(a1 + 2432) <= 0)
    {
      if (SHIBYTE(v8) < 0)
      {
        sub_100115CE4(__p, v7[0], (unint64_t)v7[1]);
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)v7;
        v12 = v8;
      }
      sub_10002B684(a1 + 2424, (uint64_t *)__p);
      if (SHIBYTE(v12) < 0)
        operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0)
      operator delete(v7[0]);
    sub_100D57DC4(a1 + 120);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v4 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: onLocationWatchdogExpired, start gps", (uint8_t *)__p, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      LOWORD(v10) = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: onLocationWatchdogExpired, start gps", &v10, 2);
      v6 = (void **)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual CFAbsoluteTime CLFenceMonitorNotifier::startGps(int, int)", "%s\n", v5);
      if (v6 != __p)
        free(v6);
    }
    if (sub_1001DFAE8())
    {
      sub_100119F3C(__p);
      sub_10011B4E4((uint64_t)__p, "WatchdogExpiredStartGps", &v9);
      sub_1001DFAF4((uint64_t)__p, (uint64_t)"locationd");
      sub_10011A5A8(__p);
    }
    sub_100E087CC();
  }
  return result;
}

void sub_100D20B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100D20BA0()
{
  NSObject *v0;
  _BOOL8 result;
  const char *v2;
  uint8_t *v3;
  void *__p;
  uint8_t buf[1640];

  if (+[CLGnssProviderAdapter isSupported](CLGnssProviderAdapter, "isSupported"))
    sub_100E087CC();
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181148);
  v0 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Fence: MiLo, failed to start GPS, not supported", buf, 2u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    LOWORD(__p) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: MiLo, failed to start GPS, not supported", &__p, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLFenceMonitorNotifier::startGpsForMiLoHomeLoiMetrics()", "%s\n", v2);
    if (v3 != buf)
      free(v3);
    return 0;
  }
  return result;
}

void sub_100D211F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  sub_100166004(&a18);
  _Unwind_Resume(a1);
}

void sub_100D21230(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  double Current;
  double v7;
  std::string::size_type v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  std::string __p;
  uint8_t buf[4];
  uint64_t v16;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181148);
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 2248);
    *(_DWORD *)buf = 134283521;
    v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Fence: unregister gps client, %{private}p", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v8 = *(_QWORD *)(a1 + 2248);
    LODWORD(__p.__r_.__value_.__l.__data_) = 134283521;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Fence: unregister gps client, %{private}p", &__p, 12);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::stopGps()", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102181168);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#wigo,off,Fence", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102181168);
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    LODWORD(v13) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#wigo,off,Fence", &__p, v13);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::stopGps()", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v5 = *(_QWORD *)(a1 + 2248);
  *(_QWORD *)(a1 + 2248) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  Current = CFAbsoluteTimeGetCurrent();
  if (*(_QWORD *)(a1 + 2960))
  {
    v7 = Current;
    sub_100166054(buf);
    sub_1015A2E04(&__p, "");
    sub_100ABC868(0, 0, &__p, (uint64_t)buf, v7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)buf);
    sub_100166004(buf);
  }
}

void sub_100D21594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  sub_100166004(&a18);
  _Unwind_Resume(a1);
}

void sub_100D215CC(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v14[2];
  __int16 v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;

  if (*a3 == 1)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v6 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v7 = sub_100D4C160(a1 + 120);
      v8 = *(unsigned __int8 *)(a4 + 4);
      *(_DWORD *)buf = 67240448;
      v18 = v7;
      v19 = 1026;
      v20 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Fence: state kNotificationDeviceUnlockedSinceBoot, from, %{public}d, to, %{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      v9 = qword_1022A0068;
      v10 = sub_100D4C160(a1 + 120);
      v11 = *(unsigned __int8 *)(a4 + 4);
      v14[0] = 67240448;
      v14[1] = v10;
      v15 = 1026;
      v16 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 2, "Fence: state kNotificationDeviceUnlockedSinceBoot, from, %{public}d, to, %{public}d", v14, 14);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    if (*(_BYTE *)(a4 + 4))
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 2304) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 2304) + 8), 1);
      CFAbsoluteTimeGetCurrent();
      sub_100D577A0(a1 + 120, *(unsigned __int8 *)(a4 + 4));
    }
  }
}

_BYTE *sub_100D217E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1014801C4(a1 + 2064, a2);
}

void sub_100D217E8(uint64_t a1)
{
  double Current;
  double v3;
  void **v4[3];
  uint64_t v5[3];
  _QWORD v6[7];
  void ***v7;

  objc_msgSend(*(id *)(a1 + 2296), "clearExitAndEntryScanNetworks:", 0);
  Current = CFAbsoluteTimeGetCurrent();
  if (*(_QWORD *)(a1 + 2960))
  {
    v3 = Current;
    sub_100166054(v6);
    memset(v5, 0, sizeof(v5));
    memset(v4, 0, sizeof(v4));
    sub_100ABD010(v5, (uint64_t *)v4, (uint64_t)v6, v3);
    v7 = v4;
    sub_100279AA4((void ***)&v7);
    v4[0] = (void **)v5;
    sub_100279AA4(v4);
    sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)v6);
    sub_100166004(v6);
  }
}

void sub_100D21898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_100D218CC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  void *v6;
  id v7;
  double Current;
  double v9;
  void **v10[7];
  uint64_t v11[3];
  uint64_t v12[3];

  v6 = *(void **)(a1 + 2296);
  memset(v12, 0, sizeof(v12));
  sub_10055A7B8(v12, *a2, a2[1], 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3));
  v7 = sub_100D21A30(v12);
  memset(v11, 0, sizeof(v11));
  sub_10055A7B8(v11, *a3, a3[1], 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 3));
  objc_msgSend(v6, "programEntryScanNetworks:andExitScanNetworks:", v7, sub_100D21A30(v11));
  v10[0] = (void **)v11;
  sub_100279AA4(v10);
  v10[0] = (void **)v12;
  sub_100279AA4(v10);
  Current = CFAbsoluteTimeGetCurrent();
  if (*(_QWORD *)(a1 + 2960))
  {
    v9 = Current;
    sub_100166054(v10);
    sub_100ABD010(a2, a3, (uint64_t)v10, v9);
    sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)v10);
    sub_100166004(v10);
  }
}

void sub_100D219F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

id sub_100D21A30(uint64_t *a1)
{
  id v1;
  _QWORD v3[4];
  _QWORD v4[3];
  void **v5;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768;
  v3[2] = sub_100D24D34;
  v3[3] = &unk_102181398;
  memset(v4, 0, sizeof(v4));
  sub_10055A7B8(v4, *a1, a1[1], 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3));
  v1 = objc_msgSend(v3, "copy");
  v5 = (void **)v4;
  sub_100279AA4(&v5);
  return v1;
}

void sub_100D21AD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = v1;
  sub_100279AA4((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100D21AEC(uint64_t a1)
{
  double Current;
  id v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  char *v8;
  const char *v9;
  std::string __p;
  uint8_t buf[1640];

  Current = CFAbsoluteTimeGetCurrent();
  v3 = -[CLServiceVendor proxyForService:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "proxyForService:", CFSTR("CLMicroLocationNotifier"));
  objc_msgSend(v3, "requestCurrentMicroLocationForClient:withAdditionalInformation:", CFSTR("geofence"), 0);
  if (v3)
  {
    ++*(_DWORD *)(a1 + 2936);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v4 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Fence: MiLo, microlocation localizer triggered", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Fence: MiLo, microlocation localizer triggered", &__p, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::triggerMicroLocationLocalizer()", "%s\n", v5);
LABEL_25:
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v7 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Fence: MiLo, proxy not available", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 16, "Fence: MiLo, proxy not available", &__p, 2);
      v6 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLFenceMonitorNotifier::triggerMicroLocationLocalizer()", "%s\n", v9);
      goto LABEL_25;
    }
  }

  if (*(_QWORD *)(a1 + 2960))
  {
    if (v3)
      v8 = "";
    else
      v8 = "error";
    sub_1015A2E04(&__p, v8);
    sub_100166054(buf);
    sub_100ABC868(2u, 1, &__p, (uint64_t)buf, Current);
    sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)buf);
    sub_100166004(buf);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_100D21E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_100D21E90(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 2296), "setBackgroundExitScanCount:", a2);
}

void sub_100D21E9C(uint64_t a1, char *a2)
{
  double Current;
  double v5;
  std::string __str;
  void *__p[2];
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  sub_1015A2E04(&v9, a2);
  if (*(int *)(a1 + 2480) <= 0)
  {
    if (SHIBYTE(v10) < 0)
    {
      sub_100115CE4(__p, (void *)v9, *((unint64_t *)&v9 + 1));
    }
    else
    {
      *(_OWORD *)__p = v9;
      v8 = v10;
    }
    sub_10002B684(a1 + 2472, (uint64_t *)__p);
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
  if (SHIBYTE(v10) < 0)
    operator delete((void *)v9);
  Current = CFAbsoluteTimeGetCurrent();
  if (*(_QWORD *)(a1 + 2960))
  {
    v5 = Current;
    sub_100166054(__p);
    sub_1015A2E04(&__str, a2);
    sub_100ABD36C(&__str, (uint64_t)__p, v5);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)__p);
    sub_100166004(__p);
  }
}

void sub_100D21F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 33) < 0)
    operator delete(*(void **)(v21 - 56));
  _Unwind_Resume(exception_object);
}

void sub_100D21FEC(uint64_t a1)
{
  double Current;
  double v3;
  _QWORD v4[7];

  sub_100E3E6F0(a1 + 2472);
  Current = CFAbsoluteTimeGetCurrent();
  if (*(_QWORD *)(a1 + 2960))
  {
    v3 = Current;
    sub_100166054(v4);
    sub_100ABD588((uint64_t)v4, v3);
    sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)v4);
    sub_100166004(v4);
  }
}

void sub_100D22058(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_100D2206C(uint64_t a1)
{
  NSObject *v1;
  dispatch_time_t v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v1 = *(NSObject **)(a1 + 2328);
  if (v1)
  {
    v2 = dispatch_time(0, 5000000000);
    dispatch_source_set_timer(v1, v2, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v3 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Fence: ignore recalculation, shut down?", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: ignore recalculation, shut down?", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::scheduleRecalculate()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

void sub_100D2224C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102181128);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_102181128);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::string>::removeClient(int) [Notification_T = CLFenceMonitor_Type::Notification, NotificationData_T = CLFenceMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_100D224C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v3 = atomic_load((unsigned __int8 *)&qword_1022FB128);
  if ((v3 & 1) == 0)
  {
    v9 = a1;
    v8 = a3;
    v7 = a2;
    v5 = __cxa_guard_acquire(&qword_1022FB128);
    a2 = v7;
    a3 = v8;
    v6 = v5;
    a1 = v9;
    if (v6)
    {
      qword_1022FB110 = 0;
      *(_QWORD *)algn_1022FB118 = 0;
      qword_1022FB120 = 0;
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1022FB110, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022FB128);
      a1 = v9;
      a2 = v7;
      a3 = v8;
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &qword_1022FB110);
}

BOOL sub_100D22568(uint64_t a1, int a2, int *a3, const std::string *a4)
{
  _BOOL8 result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  char v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t **v32;
  uint64_t v33;
  uint64_t **v34;
  __n128 v35;
  _QWORD *v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  _BYTE buf[12];
  __int16 v46;
  int v47;
  char v48;
  void *v49;
  char v50;
  void *__p;
  char v52;
  void *v53;
  char v54;
  id v55;
  void *v56;
  void *v57;

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      v40 = v10;
      v16 = *a3;
      v19 = *(_QWORD *)(v10 + 48);
      v18 = v10 + 48;
      v17 = v19;
      if (!v19)
        goto LABEL_31;
      v20 = v18;
      do
      {
        v21 = *(_DWORD *)(v17 + 28);
        v22 = v21 < v16;
        if (v21 >= v16)
          v23 = (uint64_t *)v17;
        else
          v23 = (uint64_t *)(v17 + 8);
        if (!v22)
          v20 = v17;
        v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28))
LABEL_31:
        v20 = v18;
      v24 = *(_QWORD *)(a1 + 64);
      if (!v24)
        goto LABEL_42;
      v25 = a1 + 64;
      do
      {
        v26 = *(_DWORD *)(v24 + 32);
        v27 = v26 < v16;
        if (v26 >= v16)
          v28 = (uint64_t *)v24;
        else
          v28 = (uint64_t *)(v24 + 8);
        if (!v27)
          v25 = v24;
        v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(_QWORD *)v42 = v25;
        v33 = *(_QWORD *)(v25 + 56);
        *(_QWORD *)buf = &v41;
        v34 = sub_1000BC378((uint64_t **)(v25 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        std::string::operator=((std::string *)(v34 + 5), a4);
        v35 = sub_100D24E84(buf);
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *, __n128))(*(_QWORD *)a1 + 128))(a1, a3, buf, v35))
        {
          sub_100D24DBC();
        }
        if (v56)
        {
          v57 = v56;
          operator delete(v56);
        }

        if (v54 < 0)
          operator delete(v53);
        if (v52 < 0)
          operator delete(__p);
        if (v50 < 0)
          operator delete(v49);
        if (v48 < 0)
          operator delete(*(void **)buf);
        if (v33)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        *(_QWORD *)v42 = a1 + 64;
        v29 = byte_1022FB130;
        HIDWORD(v39) = v16;
        *(_QWORD *)buf = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v29;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v30 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v30 + 8);
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v41;
        v32 = sub_1000BC378(v31 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        std::string::operator=((std::string *)(v32 + 5), a4);
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v20 == v18)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(v40 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102181128);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    v46 = 1026;
    v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102181128);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = v41;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::string>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLFenceMonitor_Type::Notification, NotificationData_T = CLFenceMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v37);
    if (v38 != buf)
      free(v38);
    return 0;
  }
  return result;
}

void sub_100D22A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1004E2BD0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100D22A68(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102181128);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102181128);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::string>::clientRegistered(int, const Notification_T &) [Notification_T = CLFenceMonitor_Type::Notification, NotificationData_T = CLFenceMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_100D22CE8(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009B8B8((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102181128);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102181128);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::string>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLFenceMonitor_Type::Notification, NotificationData_T = CLFenceMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100D23070(uint64_t a1, int *a2, std::string *this)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  std::string::size_type v18;
  std::string::pointer data;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v7 = *a2;
  v8 = v3;
  do
  {
    v9 = *(_DWORD *)(v4 + 32);
    v10 = v9 < v7;
    if (v9 >= v7)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (!v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v3)
    return 0;
  if (v7 < *(_DWORD *)(v8 + 32))
    return 0;
  v12 = *(_QWORD *)(v8 + 64);
  if (!v12)
    return 0;
  std::string::operator=(this, *(const std::string **)(v8 + 64));
  std::string::operator=(this + 1, (const std::string *)(v12 + 24));
  std::string::operator=(this + 2, (const std::string *)(v12 + 48));
  v13 = *(_OWORD *)(v12 + 88);
  v14 = *(_OWORD *)(v12 + 104);
  v15 = *(_OWORD *)(v12 + 120);
  *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = *(_OWORD *)(v12 + 72);
  *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v15;
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = v14;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = v13;
  v16 = *(_OWORD *)(v12 + 152);
  v17 = *(_OWORD *)(v12 + 168);
  v18 = *(_QWORD *)(v12 + 181);
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[2] = *(_OWORD *)(v12 + 136);
  *(std::string::size_type *)((char *)&this[7].__r_.__value_.__r.__words[1] + 5) = v18;
  *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = v17;
  *(_OWORD *)&this[6].__r_.__value_.__r.__words[1] = v16;
  std::string::operator=(this + 8, (const std::string *)(v12 + 192));
  data = this[9].__r_.__value_.__l.__data_;
  this[9].__r_.__value_.__r.__words[0] = (std::string::size_type)*(id *)(v12 + 216);

  if ((std::string *)v12 != this)
    sub_1002F3538(&this[9].__r_.__value_.__s.__data_[8], *(char **)(v12 + 224), *(_QWORD *)(v12 + 232), (uint64_t)(*(_QWORD *)(v12 + 232) - *(_QWORD *)(v12 + 224)) >> 4);
  memcpy(&this[10].__r_.__value_.__r.__words[1], (const void *)(v12 + 248), 0x460uLL);
  return 1;
}

uint64_t sub_100D23198(uint64_t a1, int *a2, __int128 *a3)
{
  uint64_t **v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int v10;
  __int128 v11;
  int *v12;

  sub_100D246CC(a3, &v11);
  v10 = *a2;
  v12 = &v10;
  v5 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101B9EB60, &v12);
  sub_1002B7674((uint64_t)(v5 + 8), &v11);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_100D23244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100D23258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 v8;
  void *v9[2];
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  id v17;
  void *__p;
  void *v19;

  v8 = sub_100D24E84((char *)v9);
  (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t, _QWORD, __n128))(*(_QWORD *)a1 + 152))(a1, a2, v9, a3, a4, 0, v8);
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }

  if (v16 < 0)
    operator delete(v15);
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(v11);
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_100D23320(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E2BD0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100D23334(uint64_t a1, signed __int32 *a2, __int128 *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  os_activity_scope_state_s state;
  uint64_t buf;
  _BYTE v29[20];
  __int16 v30;
  _QWORD *v31;
  __int16 v32;
  std::__shared_weak_count *v33;
  char **v34;
  char *v35[3];
  std::__shared_weak_count *v36;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102181128);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      buf = 68289794;
      *(_WORD *)v29 = 2082;
      *(_QWORD *)&v29[2] = "";
      *(_WORD *)&v29[10] = 2082;
      *(_QWORD *)&v29[12] = "activity";
      v30 = 2082;
      v31 = v10;
      v32 = 2050;
      v33 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", (uint8_t *)&buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v34 = v35;
      memset(v35, 0, sizeof(v35));
      v36 = 0;
      sub_1007A2608((uint64_t)&buf, a2, (uint64_t)&v34);
      v14 = sub_1007A24CC((uint64_t **)(a1 + 56), (__n128 *)&buf);
      v18 = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_1007A28B0((uint64_t)v29, *(char **)&v29[8]);
      v21 = v36;
      if (v36)
      {
        v22 = (unint64_t *)&v36->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_1007A28B0((uint64_t)&v34, v35[0]);
    }
    if (a4)
    {
      sub_100D246CC(a3, &buf);
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)&buf);
      v24 = *(std::__shared_weak_count **)v29;
      if (*(_QWORD *)v29)
      {
        v25 = (unint64_t *)(*(_QWORD *)v29 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_100D24154();
    os_activity_scope_leave(&state);
  }
}

void sub_100D23950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100D2399C(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102181128);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102181128);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::string>::listClients() [Notification_T = CLFenceMonitor_Type::Notification, NotificationData_T = CLFenceMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102181128);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102181128);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::string>::listClients() [Notification_T = CLFenceMonitor_Type::Notification, NotificationData_T = CLFenceMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_102181128);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102181128);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::string>::listClients() [Notification_T = CLFenceMonitor_Type::Notification, NotificationData_T = CLFenceMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_100D23F48(uint64_t a1)
{
  sub_100D2403C(a1);
  operator delete();
}

id sub_100D23F6C(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_100D24910(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_100D23FB8(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100D23FE4(id a1)
{
  qword_1022A0068 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_100D24010(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_100D2403C(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_102181198;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

__n128 sub_100D2409C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_1021812A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_100D240E0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021812A0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100D2410C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100D24148()
{
}

void sub_100D24154()
{
  operator new();
}

void sub_100D241F8()
{
  operator delete();
}

void sub_100D2421C(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_100D24910(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 8);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_100D245F0(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 32);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 8))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 32);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102181128);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 8);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102181128);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 8);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::string>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLFenceMonitor_Type::Notification, NotificationData_T = CLFenceMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_100D245F0(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_100D24910(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1000BC378(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 5);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

uint64_t sub_100D246CC@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x570uLL);
  result = sub_100D24724((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_100D24710(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100D24724(uint64_t a1, __int128 *a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_102181338;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1004E5748((char *)(a1 + 24), a2);
  memcpy((void *)(a1 + 272), (char *)a2 + 248, 0x460uLL);
  return a1;
}

void sub_100D24770(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100D24784(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102181338;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100D24798(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102181338;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100D247CC(uint64_t a1)
{
  char v1;

  sub_100D247F4((uint64_t)&v1, a1 + 24);
}

void sub_100D247F4(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 224);
  if (v3)
  {
    *(_QWORD *)(a2 + 232) = v3;
    operator delete(v3);
  }

  if (*(char *)(a2 + 215) < 0)
    operator delete(*(void **)(a2 + 192));
  if (*(char *)(a2 + 71) < 0)
    operator delete(*(void **)(a2 + 48));
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t sub_100D24874(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    v2 = *(void **)(v1 + 224);
    if (v2)
    {
      *(_QWORD *)(v1 + 232) = v2;
      operator delete(v2);
    }

    if (*(char *)(v1 + 215) < 0)
      operator delete(*(void **)(v1 + 192));
    if (*(char *)(v1 + 71) < 0)
      operator delete(*(void **)(v1 + 48));
    if (*(char *)(v1 + 47) < 0)
      operator delete(*(void **)(v1 + 24));
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete();
  }
  return result;
}

id sub_100D24910(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_100D2495C(a1);
  else
    return 0;
}

id sub_100D2495C(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102181378);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C2229ELL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102181378);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102181378);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C2229ELL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102181378);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLFenceMonitor_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_100D24D08(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

_QWORD *sub_100D24D34@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_10055A7B8(a2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3));
}

_QWORD *sub_100D24D64(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v2 = (_QWORD *)(a1 + 32);
  v2[2] = 0;
  return sub_10055A7B8(v2, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
}

void sub_100D24D94(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 32);
  sub_100279AA4(&v1);
}

void sub_100D24DBC()
{
  operator new();
}

void sub_100D24E60()
{
  operator delete();
}

__n128 sub_100D24E84(char *a1)
{
  char *v1;
  char *v2;
  __n128 result;

  v1 = a1 + 340;
  v2 = sub_1001157C0(a1);
  *((_QWORD *)v2 + 31) = 0xFFFFFFFFFFFFLL;
  *((_QWORD *)v2 + 32) = 0;
  *((_QWORD *)v2 + 33) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)v2 + 17) = xmmword_101BAFC90;
  *((__n128 *)v2 + 18) = result;
  *((__n128 *)v2 + 19) = result;
  *((__n128 *)v2 + 20) = result;
  *((_DWORD *)v2 + 84) = 0;
  *(_QWORD *)v1 = 0xBFF0000000000000;
  *(_QWORD *)(v2 + 348) = 0;
  *(_QWORD *)(v2 + 356) = 0;
  *((_DWORD *)v2 + 91) = 0;
  *((_QWORD *)v2 + 46) = 0xBFF0000000000000;
  *((_DWORD *)v2 + 94) = 0x7FFFFFFF;
  *(_QWORD *)(v2 + 388) = 0;
  *(_QWORD *)(v2 + 396) = 0;
  *(_QWORD *)(v2 + 380) = 0;
  v2[404] = 0;
  v2[412] = 0;
  *((_QWORD *)v2 + 52) = 0xBFF0000000000000;
  v2[432] = 1;
  *((_QWORD *)v2 + 55) = 0xBFF0000000000000;
  *((__n128 *)v2 + 28) = result;
  *((__n128 *)v2 + 29) = result;
  *((__n128 *)v2 + 30) = result;
  *((__n128 *)v2 + 31) = result;
  *((__n128 *)v2 + 32) = result;
  *((__n128 *)v2 + 33) = result;
  *((_QWORD *)v2 + 68) = 0xBFF0000000000000;
  *((_DWORD *)v2 + 140) = 0xFFFF;
  *(_QWORD *)(v2 + 572) = 0;
  *(_QWORD *)(v2 + 564) = 0;
  *((_OWORD *)v1 + 15) = xmmword_101BAFC90;
  *((__n128 *)v1 + 16) = result;
  *((__n128 *)v1 + 17) = result;
  *((__n128 *)v1 + 18) = result;
  *((_DWORD *)v2 + 161) = 0;
  *((_QWORD *)v2 + 81) = 0xBFF0000000000000;
  *((_QWORD *)v2 + 83) = 0;
  *((_QWORD *)v2 + 82) = 0;
  *((_DWORD *)v2 + 168) = 0;
  *((_QWORD *)v1 + 42) = 0xBFF0000000000000;
  *((_DWORD *)v2 + 171) = 0x7FFFFFFF;
  v2[712] = 0;
  *((_QWORD *)v2 + 88) = 0;
  *((_QWORD *)v2 + 86) = 0;
  *((_QWORD *)v2 + 87) = 0;
  *((_DWORD *)v2 + 179) = 0xFFFF;
  *((_QWORD *)v2 + 91) = 0;
  *((_QWORD *)v2 + 90) = 0;
  *((_OWORD *)v2 + 46) = xmmword_101BAFC90;
  *((__n128 *)v2 + 47) = result;
  *((__n128 *)v2 + 48) = result;
  *((__n128 *)v2 + 49) = result;
  *((_DWORD *)v2 + 200) = 0;
  *((_QWORD *)v1 + 58) = 0xBFF0000000000000;
  *(_QWORD *)(v2 + 812) = 0;
  *(_QWORD *)(v2 + 820) = 0;
  *((_DWORD *)v2 + 207) = 0;
  *((_QWORD *)v2 + 104) = 0xBFF0000000000000;
  *((_DWORD *)v2 + 210) = 0x7FFFFFFF;
  *(_QWORD *)(v2 + 844) = 0;
  *(_QWORD *)(v2 + 852) = 0;
  v2[868] = 0;
  *(_QWORD *)(v2 + 860) = 0;
  *((_DWORD *)v2 + 218) = 0xFFFF;
  *(_QWORD *)(v2 + 884) = 0;
  *(_QWORD *)(v2 + 876) = 0;
  *(_OWORD *)(v2 + 892) = xmmword_101BAFC90;
  *(__n128 *)(v2 + 908) = result;
  *(__n128 *)(v2 + 924) = result;
  *(__n128 *)(v2 + 940) = result;
  *((_DWORD *)v2 + 239) = 0;
  *((_QWORD *)v2 + 120) = 0xBFF0000000000000;
  *((_QWORD *)v2 + 122) = 0;
  *((_QWORD *)v2 + 121) = 0;
  *((_DWORD *)v2 + 246) = 0;
  *((_QWORD *)v1 + 81) = 0xBFF0000000000000;
  *((_DWORD *)v2 + 249) = 0x7FFFFFFF;
  *((_QWORD *)v2 + 126) = 0;
  *((_QWORD *)v2 + 125) = 0;
  v2[1024] = 0;
  *((_QWORD *)v2 + 127) = 0;
  return result;
}

uint64_t sub_100D24FF8(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    v2 = *(void **)(v1 + 224);
    if (v2)
    {
      *(_QWORD *)(v1 + 232) = v2;
      operator delete(v2);
    }

    if (*(char *)(v1 + 215) < 0)
      operator delete(*(void **)(v1 + 192));
    if (*(char *)(v1 + 71) < 0)
      operator delete(*(void **)(v1 + 48));
    if (*(char *)(v1 + 47) < 0)
      operator delete(*(void **)(v1 + 24));
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete();
  }
  return result;
}

void sub_100D25094()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C21E58;
      v1[3] = unk_101C21E68;
      v1[4] = xmmword_101C21E78;
      v1[0] = xmmword_101C21E38;
      v1[1] = unk_101C21E48;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100D25168(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

void sub_100D25180()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100D2521C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100D25234()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100D252C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

_QWORD *sub_100D252D8(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = off_1021813D8;
  result[3] = a3;
  result[4] = a2;
  result[2] = 0;
  return result;
}

uint64_t sub_100D252F0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021813D8;

  return a1;
}

void sub_100D2532C(uint64_t a1)
{
  sub_100D252F0(a1);
  operator delete();
}

uint64_t sub_100D25350(uint64_t a1, double a2)
{
  uint64_t v4;
  id v5;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 80))(*(_QWORD *)(a1 + 32));
  if ((_DWORD)v4 && !*(_QWORD *)(a1 + 16))
  {
    v5 = objc_msgSend(*(id *)(a1 + 24), "archiveWithIdentifier:", CFSTR("TraceHarvestOnDiskOnly"));
    *(_QWORD *)(a1 + 16) = v5;
    objc_msgSend(v5, "eraseAllData");
    objc_msgSend(*(id *)(a1 + 16), "setRotationInterval:", -1.0);
    objc_msgSend(*(id *)(a1 + 16), "writeSecondaryObject:toField:", +[CLPMeta meta](CLPMeta, "meta"), 1);
    *(double *)(a1 + 8) = a2;
  }
  return v4;
}

uint64_t sub_100D253F4()
{
  return 0;
}

uint64_t sub_100D25400(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void sub_100D25410(uint64_t a1)
{

  *(_QWORD *)(a1 + 16) = 0;
}

uint64_t sub_100D25438()
{
  return 1;
}

const __CFString *sub_100D25440()
{
  return CFSTR("On Disk");
}

void sub_100D2544C(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_102307CE0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_102307CE0))
  {
    __cxa_atexit((void (*)(void *))sub_100D25504, &qword_102307CD0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102307CE0);
  }
  if (qword_102307CE8 != -1)
    dispatch_once(&qword_102307CE8, &stru_102181470);
  v3 = *(_QWORD *)algn_102307CD8;
  *a1 = qword_102307CD0;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
}

void sub_100D25508(id a1)
{
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v3;
  __int128 v4;

  sub_100D25D70(&v4);
  sub_1002B7674((uint64_t)&qword_102307CD0, &v4);
  v1 = (std::__shared_weak_count *)*((_QWORD *)&v4 + 1);
  if (*((_QWORD *)&v4 + 1))
  {
    v2 = (unint64_t *)(*((_QWORD *)&v4 + 1) + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t sub_100D2557C(uint64_t a1)
{
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;

  *(CFAbsoluteTime *)a1 = CFAbsoluteTimeGetCurrent();
  sub_10087DD74((_QWORD *)(a1 + 8));
  sub_1015A2E04(v5, "CLWifiAssociatedApHarvestDatabase");
  sub_1015A2E04(__p, "CLWifiAssociatedApWifiHarvester");
  sub_10136E244(a1 + 24, v5, __p);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
  return a1;
}

void sub_100D25614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  sub_100261F44(v20);
  _Unwind_Resume(a1);
}

void sub_100D25658(uint64_t a1)
{
  uint64_t v1;
  _BOOL4 v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  char *v6;
  NSObject *v7;
  void **v8;
  void **v9;
  char *v10;
  void *__p[2];
  char v12;
  int v13;
  void **v14;
  uint8_t buf[1640];

  v1 = a1 + 8;
  v2 = sub_1000CC504(*(_QWORD *)(a1 + 8));
  sub_1000CE11C(v1 + 16, v2);
  sub_1000CC970((double *)(v1 + 16));
  if (!sub_1000CC504(*(_QWORD *)v1))
  {
    sub_10087DD74(buf);
    sub_1002B7674(v1, (__int128 *)buf);
    v3 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v4 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    if (sub_1000CC504(*(_QWORD *)v1))
      v6 = "success";
    else
      v6 = "fail";
    sub_1015A2E04(__p, v6);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102181490);
    v7 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v8 = __p;
      if (v12 < 0)
        v8 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLWifiAssociatedApWifiHarvester, re-initialize database: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102181490);
      v9 = __p;
      if (v12 < 0)
        v9 = (void **)__p[0];
      v13 = 136315138;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "CLWifiAssociatedApWifiHarvester, re-initialize database: %s", (const char *)&v13);
      sub_100512490("Generic", 1, 0, 2, "void CLWifiAssociatedApWifiHarvester::reinitializeWifiAssociatedApHarvestDatabaseIfInvalid()", "%s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
    if (v12 < 0)
      operator delete(__p[0]);
  }
}

void sub_100D258D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D258F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  uint64_t result;
  _OWORD v9[8];
  _OWORD v10[2];
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[3];

  v6 = *(double *)(a2 + 76) - *(double *)a1;
  result = (uint64_t)sub_1000A3224();
  if (v6 >= *(double *)(result + 24) && *(_BYTE *)(a2 + 180) == 0)
  {
    sub_100ED9F0C((uint64_t)&v11, a3, (_OWORD *)a2, -1);
    v9[6] = v18;
    v9[7] = v19;
    v10[0] = v20[0];
    *(_OWORD *)((char *)v10 + 12) = *(_OWORD *)((char *)v20 + 12);
    v9[2] = v14;
    v9[3] = v15;
    v9[4] = v16;
    v9[5] = v17;
    v9[0] = v12;
    v9[1] = v13;
    result = sub_100182290((uint64_t)v9);
    if ((_DWORD)result)
    {
      sub_100D25658(a1);
      result = sub_100880774(*(_QWORD *)(a1 + 8), &v11);
      *(_QWORD *)a1 = *(_QWORD *)(a2 + 76);
    }
  }
  return result;
}

void sub_100D259E0(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102181490);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Clearing associated AP harvest data in WifiAssociatedApHarvestDatabase [Wifi Harvest]", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102181490);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "Clearing associated AP harvest data in WifiAssociatedApHarvestDatabase [Wifi Harvest]", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiAssociatedApWifiHarvester::clearHarvest()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_10067F6A0(*(_QWORD *)(a1 + 8));
}

void sub_100D25B78(uint64_t a1)
{
  uint64_t *v2;
  double v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  double v7;
  int v8;
  double v9;
  uint8_t buf[4];
  double v11;

  v2 = sub_1000A3224();
  v3 = sub_1000A14F8(v2);
  v7 = v3;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102181490);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134283521;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Purging Wifi harvest samples older than %{private}.1fs in WifiAssociatedApHarvestDatabase", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102181490);
    v8 = 134283521;
    v9 = v3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "Purging Wifi harvest samples older than %{private}.1fs in WifiAssociatedApHarvestDatabase", &v8, 12);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiAssociatedApWifiHarvester::purgeOlderWifiHarvestSamples()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_10067D760(*(_QWORD *)(a1 + 8), (uint64_t)&v7);
}

void sub_100D25D44(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

_QWORD *sub_100D25D70@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x90uLL);
  result = sub_100D25DB8(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100D25DA4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100D25DB8(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_1021814C0;
  a1[1] = 0;
  sub_100D2557C((uint64_t)(a1 + 3));
  return a1;
}

void sub_100D25DF0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100D25E04(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021814C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100D25E18(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021814C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100D25E4C(uint64_t a1)
{
  char v2;

  return sub_100D25E74((uint64_t)&v2, a1 + 24);
}

uint64_t sub_100D25E74(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 24) = off_1021B19E0;
  if (*(char *)(a2 + 111) < 0)
    operator delete(*(void **)(a2 + 88));
  if (*(char *)(a2 + 87) < 0)
    operator delete(*(void **)(a2 + 64));
  return sub_100261F44(a2 + 8);
}

void sub_100D25EC4()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100D25F60(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100D25F78()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100D26004(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

std::string::size_type *sub_100D2601C(std::string::size_type *a1, int a2)
{
  double v4;
  void *__p[2];
  char v7;

  sub_1015A2E04(__p, "");
  sub_100D26114((uint64_t)a1, "CyclingSessionSummary", a2, (uint64_t)__p, 1, 30.0);
  if (v7 < 0)
    operator delete(__p[0]);
  *a1 = (std::string::size_type)off_102181510;
  a1[9] = (std::string::size_type)off_1021815C8;
  sub_100E81598(a1 + 50, 0, 0);
  v4 = sub_100D26568(a1 + 52);
  (*(void (**)(std::string::size_type *, double))(*a1 + 112))(a1, v4);
  return a1;
}

void sub_100D260D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void **v16;

  if (*(char *)(v15 + 439) < 0)
    operator delete(*v16);
  sub_100D26824((_QWORD *)v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100D26114(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_102138DD8;
  *(_QWORD *)a1 = off_1021818C8;
  *(_QWORD *)(a1 + 72) = off_102181970;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_1021818C8;
  *(_QWORD *)(a1 + 72) = off_102181970;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 320) = 12000;
  *(_QWORD *)(a1 + 328) = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 336));
  *(_QWORD *)(a1 + 336) = &off_102138DD8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 248) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_100D264BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[41] = off_102138DA8;
  sub_100427950(v27);
  sub_100D2C264(v26);
  sub_101138068(a12);
  *v24 = off_102138DA8;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_100D26560()
{
  JUMPOUT(0x100D26540);
}

double sub_100D26568@<D0>(std::string::size_type *a1@<X8>)
{
  uint64_t i;
  char *v3;
  size_t v4;
  size_t v5;
  std::string *v6;
  const void *v7;
  char *v8;
  std::string *v9;
  std::string::size_type v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  size_t v16;
  std::string *v17;
  const void *v18;
  double result;
  std::string v20;
  _QWORD v21[2];

  sub_1015A2E04(a1, "SELECT ");
  for (i = 0; i != 72; i += 6)
  {
    v3 = (&off_102181678)[i];
    if (v3)
    {
      if (*((char *)a1 + 23) >= 0)
        v4 = *((unsigned __int8 *)a1 + 23);
      else
        v4 = a1[1];
      v5 = strlen((&off_102181678)[i]);
      sub_100259584((uint64_t)&v20, v4 + v5);
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v6 = &v20;
      else
        v6 = (std::string *)v20.__r_.__value_.__r.__words[0];
      if (v4)
      {
        if (*((char *)a1 + 23) >= 0)
          v7 = a1;
        else
          v7 = (const void *)*a1;
        memmove(v6, v7, v4);
      }
      v8 = (char *)v6 + v4;
      if (v5)
        memmove(v8, v3, v5);
      v8[v5] = 0;
      v9 = std::string::append(&v20, ", ");
      v10 = v9->__r_.__value_.__r.__words[0];
      v21[0] = v9->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v21 + 7) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
      v11 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      if (*((char *)a1 + 23) < 0)
        operator delete((void *)*a1);
      *a1 = v10;
      a1[1] = v21[0];
      *(std::string::size_type *)((char *)a1 + 15) = *(_QWORD *)((char *)v21 + 7);
      *((_BYTE *)a1 + 23) = v11;
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
  if (*((char *)a1 + 23) < 0)
  {
    v13 = (uint64_t *)*a1;
    v12 = a1[1] - 1;
    a1[1] = v12;
  }
  else
  {
    v12 = *((unsigned __int8 *)a1 + 23) - 1;
    *((_BYTE *)a1 + 23) = v12 & 0x7F;
    v13 = (uint64_t *)a1;
  }
  *((_BYTE *)v13 + v12) = 0;
  if (*((char *)a1 + 23) < 0)
  {
    v15 = (uint64_t *)*a1;
    v14 = a1[1] - 1;
    a1[1] = v14;
  }
  else
  {
    v14 = *((unsigned __int8 *)a1 + 23) - 1;
    *((_BYTE *)a1 + 23) = v14 & 0x7F;
    v15 = (uint64_t *)a1;
  }
  *((_BYTE *)v15 + v14) = 0;
  if (*((char *)a1 + 23) >= 0)
    v16 = *((unsigned __int8 *)a1 + 23);
  else
    v16 = a1[1];
  v17 = &v20;
  sub_100259584((uint64_t)&v20, v16 + 27);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v17 = (std::string *)v20.__r_.__value_.__r.__words[0];
  if (v16)
  {
    if (*((char *)a1 + 23) >= 0)
      v18 = a1;
    else
      v18 = (const void *)*a1;
    memmove(v17, v18, v16);
  }
  strcpy((char *)v17 + v16, " from CyclingSessionSummary");
  if (*((char *)a1 + 23) < 0)
    operator delete((void *)*a1);
  result = *(double *)&v20.__r_.__value_.__l.__data_;
  *(std::string *)a1 = v20;
  return result;
}

void sub_100D267EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100D26824(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_102181970;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_1021818C8;
  a1[41] = off_102138DA8;
  sub_100427950(a1 + 42);
  sub_100D2C264(a1 + 22);
  sub_101138068(v2);
  *a1 = off_102138DA8;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_100D268A0(uint64_t a1)
{
  *(_QWORD *)a1 = off_102181510;
  *(_QWORD *)(a1 + 72) = off_1021815C8;
  if (*(char *)(a1 + 439) < 0)
    operator delete(*(void **)(a1 + 416));
  return sub_100D26824((_QWORD *)a1);
}

_QWORD *sub_100D268E8(uint64_t a1)
{
  return sub_100D268A0(a1 - 72);
}

void sub_100D268F0(uint64_t a1)
{
  sub_100D268A0(a1);
  operator delete();
}

void sub_100D26914(uint64_t a1)
{
  sub_100D268A0(a1 - 72);
  operator delete();
}

uint64_t sub_100D2693C(uint64_t *a1, uint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t *v7;
  sqlite3_stmt *v8;
  uint64_t v9;
  sqlite3_stmt *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16[3];
  __int16 v17;

  v7 = a1 + 14;
  v6 = a1[14];
  v16[1] = (uint64_t)(a1 + 14);
  (*(void (**)(uint64_t *))(v6 + 16))(a1 + 14);
  v17 = 256;
  if (*(double *)(*(_QWORD *)(a2 + 8) - 16) == 1.79769313e308 && sub_10008950C(a1 + 9))
  {
    sub_10001E638(a1[10]);
    sub_100087AF4(a1 + 50, v16);
    v8 = (sqlite3_stmt *)sub_100026CC8(v16[0]);
    if (sub_1000890C4(v8, 1, a3 - *(double *)(*(_QWORD *)(a2 + 8) - 24)))
    {
      v9 = a1[10];
      v10 = (sqlite3_stmt *)sub_100026CC8(v16[0]);
      sub_10023C9B0(v9, v10);
      v11 = (*(int (**)(uint64_t *))(*a1 + 152))(a1);
    }
    else
    {
      v11 = -1;
    }
    sub_10001E99C(a1[10]);
    v12 = a1[10];
    if (*(uint64_t *)(v12 + 88) <= 0)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = *(_QWORD *)(v12 + 88);
    sub_100053048(v12, v13);
    v14 = v16[0];
    v16[0] = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  else
  {
    v11 = -1;
  }
  (*(void (**)(uint64_t *))(*v7 + 24))(v7);
  return v11;
}

void sub_100D26A78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D26AB4(uint64_t *a1, uint64_t a2)
{
  double Current;

  Current = CFAbsoluteTimeGetCurrent();
  return sub_100D2693C(a1, a2, Current);
}

uint64_t sub_100D26AE0(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  double Current;

  v3 = (uint64_t *)(a1 - 72);
  Current = CFAbsoluteTimeGetCurrent();
  return sub_100D2693C(v3, a2, Current);
}

uint64_t sub_100D26B0C(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT COUNT(*) FROM CyclingSessionSummary");
  return 0xFFFFFFFFLL;
}

void sub_100D26BAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D26BD0(uint64_t a1)
{
  return sub_100D26B0C(a1 - 72);
}

uint64_t sub_100D26BDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  NSObject *v8;
  _QWORD *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  NSObject *v14;
  const char *v16;
  uint8_t *v17;
  _WORD v18[8];
  double v19[3];
  __int16 v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  _QWORD *v28;

  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v6 = a1 + 72;
  *(_QWORD *)&v19[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v20 = 256;
  v19[0] = *(double *)(a2 + 24);
  if (sub_100013184(v6, v19))
  {
    if (sub_10008950C(v6))
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(a1, a2, 0);
    }
    else if (!*(_BYTE *)(a1 + 128))
    {
      v12 = (_QWORD *)(a1 + 176);
      v13 = *(_QWORD *)(a1 + 216);
      if (v13 > *(int *)(a1 + 320))
      {
        ++*(_QWORD *)(a1 + 208);
        *(_QWORD *)(a1 + 216) = v13 - 1;
        sub_1005C9C0C(a1 + 176, 1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021819B0);
        v14 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Maximum number of entries exceeded, throwing out oldest entry.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021819B0);
          v18[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "Maximum number of entries exceeded, throwing out oldest entry.", v18, 2);
          v17 = (uint8_t *)v16;
          sub_100512490("Generic", 1, 0, 2, "void CLActivityRecorderDb<CLCyclingSessionSummaryDbRow, CLActivityDB::ClassBDataProtectionPolicy>::addSuspectRecord(const T &) [T = CLCyclingSessionSummaryDbRow, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v16);
          if (v17 != buf)
            free(v17);
        }
      }
      v7 = sub_100D2C2F8(v12, a2);
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021819B0);
    v8 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      v9 = (_QWORD *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0)
        v9 = (_QWORD *)*v9;
      *(_DWORD *)buf = 68289538;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 1026;
      v26 = (int)v19[0];
      v27 = 2082;
      v28 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021819B0);
    }
    v10 = qword_10229FC78;
    if (os_signpost_enabled((os_log_t)qword_10229FC78))
    {
      v11 = (_QWORD *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 68289538;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 1026;
      v26 = (int)v19[0];
      v27 = 2082;
      v28 = v11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CL database error, record contains invalid time", "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
    }
  }
  return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v5 + 24))(v5, v7);
}

void sub_100D26FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D26FCC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  size_t v5;
  void **v6;
  const void *v7;
  char *v8;
  void *__p[2];
  char v10;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    if (*(char *)(a1 + 439) >= 0)
      v5 = *(unsigned __int8 *)(a1 + 439);
    else
      v5 = *(_QWORD *)(a1 + 424);
    v6 = __p;
    sub_100259584((uint64_t)__p, v5 + 22);
    if (v10 < 0)
      v6 = (void **)__p[0];
    if (v5)
    {
      if (*(char *)(a1 + 439) >= 0)
        v7 = (const void *)(a1 + 416);
      else
        v7 = *(const void **)(a1 + 416);
      memmove(v6, v7, v5);
    }
    strcpy((char *)v6 + v5, "  where session_id = ?");
    if (v10 >= 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(*(_QWORD *)(a1 + 80), v8);
  }
  *a2 = 0;
  a2[96] = 0;
  return result;
}

void sub_100D27188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D271CC(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  sqlite3_stmt *v11;
  const unsigned __int8 *v12;
  sqlite3_stmt *v13;
  double v14;
  sqlite3_stmt *v16;
  double v17;
  sqlite3_stmt *v19;
  float v20;
  sqlite3_stmt *v21;
  sqlite3_stmt *v22;
  double v23;
  uint64_t result;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)a2 = sqlite3_column_int64(v6, 0);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 24) = sqlite3_column_double(v7, 1);
  v8 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 32) = sqlite3_column_double(v8, 2);
  v9 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)(a2 + 40) = sqlite3_column_int(v9, 3);
  v10 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)(a2 + 48) = sqlite3_column_int(v10, 4);
  v11 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v12 = sqlite3_column_text(v11, 5);
  uuid_parse((const char *)v12, (unsigned __int8 *)(a2 + 8));
  v13 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v14 = sqlite3_column_double(v13, 6);
  if (v14 == 0.0 || v14 == 5.0)
    v14 = -1.0;
  *(double *)(a2 + 56) = v14;
  v16 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v17 = sqlite3_column_double(v16, 7);
  if (v17 == 0.0 || v17 == 5.0)
    v17 = -1.0;
  *(double *)(a2 + 64) = v17;
  v19 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v20 = sqlite3_column_double(v19, 8);
  *(float *)(a2 + 72) = v20;
  v21 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 80) = sqlite3_column_double(v21, 9);
  v22 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v23 = sqlite3_column_double(v22, 10);
  result = 0;
  *(float *)&v23 = v23;
  *(_DWORD *)(a2 + 88) = LODWORD(v23);
  return result;
}

uint64_t sub_100D27348(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  void **v8;
  const void *v9;
  char *v10;
  void *__p[2];
  char v13;
  uint64_t v14;
  __int16 v15;

  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v6 = a1 + 72;
  v14 = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v15 = 256;
  if (sub_10008950C(v6))
  {
    a2[1] = *a2;
    if (*(char *)(a1 + 439) >= 0)
      v7 = *(unsigned __int8 *)(a1 + 439);
    else
      v7 = *(_QWORD *)(a1 + 424);
    v8 = __p;
    sub_100259584((uint64_t)__p, v7 + 24);
    if (v13 < 0)
      v8 = (void **)__p[0];
    if (v7)
    {
      if (*(char *)(a1 + 439) >= 0)
        v9 = (const void *)(a1 + 416);
      else
        v9 = *(const void **)(a1 + 416);
      memmove(v8, v9, v7);
    }
    strcpy((char *)v8 + v7, " ORDER BY start_time ASC");
    if (v13 >= 0)
      v10 = (char *)__p;
    else
      v10 = (char *)__p[0];
    sub_1000CDA68(*(_QWORD *)(a1 + 80), v10);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
}

void sub_100D27620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a16 < 0)
    operator delete(__p);
  sub_10187E514((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_100D27688(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _OWORD *v4;
  _OWORD *v5;
  _OWORD *v7;
  double v8;
  double v9;
  double v10;
  int v11;
  _BOOL4 v12;
  __int32 *v13;
  __int32 *v14;
  uint64_t v15;
  __int32 *v16;
  __int32 *v17;
  BOOL v18;
  _QWORD *v19;
  _QWORD *v20;
  _BOOL4 v21;
  _OWORD *v23;
  _OWORD *v24;
  double v25;
  double v26;
  double v27;
  int v28;
  _BOOL4 v29;
  __int32 *v30;
  __int32 *v31;
  uint64_t v32;
  __int32 *v33;
  __int32 *v34;
  BOOL v35;
  _QWORD *v36;
  _QWORD *v37;
  _BOOL4 v38;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v5 = (_OWORD *)*a2;
  v4 = (_OWORD *)a2[1];
  if ((_OWORD *)*a2 == v4)
    goto LABEL_65;
  v7 = (_OWORD *)a2[1];
  while (1)
  {
    v9 = *((double *)v5 + 3);
    v8 = *((double *)v5 + 4);
    v10 = *(double *)a3;
    v11 = *(_DWORD *)(a3 + 32);
    if (v11 == 2)
    {
      v12 = *((_QWORD *)v5 + 6) == -1;
    }
    else if (v11 == 1)
    {
      v13 = *(__int32 **)(a3 + 40);
      v14 = *(__int32 **)(a3 + 48);
      if (v13 == v14)
      {
        v18 = *((_QWORD *)v5 + 6) == -1;
      }
      else
      {
        v15 = *((_QWORD *)v5 + 6);
        v16 = *(__int32 **)(a3 + 48);
        if (v15 == (int)v15)
        {
          v17 = wmemchr(v13, v15, v14 - v13);
          if (v17)
            v16 = v17;
          else
            v16 = v14;
          v14 = *(__int32 **)(a3 + 48);
        }
        v18 = v16 == v14;
      }
      v12 = !v18;
    }
    else
    {
      v12 = v11 == 0;
    }
    v20 = *(_QWORD **)(a3 + 8);
    v19 = *(_QWORD **)(a3 + 16);
    if (v20 == v19)
    {
      v21 = 1;
    }
    else
    {
      while (*v20 != *((_QWORD *)v5 + 5))
      {
        if (++v20 == v19)
        {
          v20 = *(_QWORD **)(a3 + 16);
          break;
        }
      }
      v21 = v20 != v19;
    }
    if (v8 - v9 < v10)
      v12 = 0;
    if (!v12 || !v21)
      break;
    v5 += 6;
    if (v5 == v4)
      goto LABEL_66;
  }
  if (v5 != v4)
  {
    v23 = v5 + 6;
    if (v5 + 6 != v4)
    {
      v7 = v5;
      do
      {
        v24 = v23;
        v26 = *((double *)v5 + 15);
        v25 = *((double *)v5 + 16);
        v27 = *(double *)a3;
        v28 = *(_DWORD *)(a3 + 32);
        if (v28 == 2)
        {
          v29 = *((_QWORD *)v5 + 18) == -1;
        }
        else if (v28 == 1)
        {
          v30 = *(__int32 **)(a3 + 40);
          v31 = *(__int32 **)(a3 + 48);
          if (v30 == v31)
          {
            v35 = *((_QWORD *)v5 + 18) == -1;
          }
          else
          {
            v32 = *((_QWORD *)v5 + 18);
            v33 = *(__int32 **)(a3 + 48);
            if (v32 == (int)v32)
            {
              v34 = wmemchr(v30, v32, v31 - v30);
              if (v34)
                v33 = v34;
              else
                v33 = v31;
              v31 = *(__int32 **)(a3 + 48);
            }
            v35 = v33 == v31;
          }
          v29 = !v35;
        }
        else
        {
          v29 = v28 == 0;
        }
        v37 = *(_QWORD **)(a3 + 8);
        v36 = *(_QWORD **)(a3 + 16);
        if (v37 == v36)
        {
          v38 = 1;
        }
        else
        {
          while (*v37 != *((_QWORD *)v5 + 17))
          {
            if (++v37 == v36)
            {
              v37 = *(_QWORD **)(a3 + 16);
              break;
            }
          }
          v38 = v37 != v36;
        }
        if (v25 - v26 < v27)
          v29 = 0;
        if (v29 && v38)
        {
          v40 = v24[1];
          *v7 = *v24;
          v7[1] = v40;
          v41 = v24[2];
          v42 = v24[3];
          v43 = v24[5];
          v7[4] = v24[4];
          v7[5] = v43;
          v7[2] = v41;
          v7[3] = v42;
          v7 += 6;
        }
        v23 = v24 + 6;
        v5 = v24;
      }
      while (v24 + 6 != v4);
      goto LABEL_66;
    }
LABEL_65:
    v7 = v5;
  }
LABEL_66:
  if (v7 != (_OWORD *)a2[1])
    a2[1] = v7;
}

uint64_t sub_100D27920(uint64_t a1, uint64_t a2, _QWORD *a3, double a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  const char *v20;
  uint8_t *v21;
  _WORD v22[8];
  uint8_t buf[1640];

  a3[1] = *a3;
  if ((sub_10008950C(a1 + 72) & 1) != 0)
  {
    v10 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 40))(a1, a3);
    sub_100D27688(v10, a3, a2);
    v12 = *a3;
    v11 = a3[1];
    if (*a3 != v11)
    {
      while (*(double *)(v12 + 32) >= a4 && *(double *)(v12 + 24) <= a5)
      {
        v12 += 96;
        if (v12 == v11)
          return 100;
      }
    }
    if (v12 != v11)
    {
      v15 = v12 + 96;
      if (v12 + 96 != v11)
      {
        do
        {
          if (*(double *)(v15 + 32) >= a4 && *(double *)(v15 + 24) <= a5)
          {
            v16 = *(_OWORD *)(v15 + 16);
            *(_OWORD *)v12 = *(_OWORD *)v15;
            *(_OWORD *)(v12 + 16) = v16;
            v17 = *(_OWORD *)(v15 + 32);
            v18 = *(_OWORD *)(v15 + 48);
            v19 = *(_OWORD *)(v15 + 80);
            *(_OWORD *)(v12 + 64) = *(_OWORD *)(v15 + 64);
            *(_OWORD *)(v12 + 80) = v19;
            *(_OWORD *)(v12 + 32) = v17;
            *(_OWORD *)(v12 + 48) = v18;
            v12 += 96;
          }
          v15 += 96;
        }
        while (v15 != v11);
        v11 = a3[1];
      }
    }
    if (v12 != v11)
      a3[1] = v12;
    return 100;
  }
  else
  {
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_102181658);
    v13 = qword_10229FF98;
    if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CyclingSessionSummary, DB not accessible", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF90 != -1)
        dispatch_once(&qword_10229FF90, &stru_102181658);
      v22[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 2, "CyclingSessionSummary, DB not accessible", v22, 2);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "CMError CLCyclingSessionSummaryDb::queryInTimeRange(CFAbsoluteTime, CFAbsoluteTime, const CLCyclingSessionSummaryDb::QueryRules &, std::vector<CLCyclingSessionSummaryDbRow> &) const", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    return 109;
  }
}

uint64_t sub_100D27BBC(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1000CC4F4(a1[10]);
  if ((_DWORD)result)
  {
    sub_100D27C24((uint64_t)a1);
    sub_100634364(a1[10], "CyclingSessionSummary", (const char **)&off_102181678, (const std::string::value_type **)&off_1022FB138, 0);
    result = sub_10063D314(a1[10], "DELETE FROM CyclingSessionSummary WHERE start_time < ?");
    a1[50] = result;
    a1[51] = v3;
  }
  return result;
}

BOOL sub_100D27C24(uint64_t a1)
{
  _BOOL8 result;
  const char *v3;
  int v4;
  __int16 v5;
  char v6;
  char v7;

  result = sub_100635B3C(*(_QWORD *)(a1 + 80), "CyclingSessionSummary");
  if (result)
  {
    v3 = "session_id";
    v4 = 5;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    sub_10063A8D4(*(_QWORD *)(a1 + 80), "CyclingSessionSummary", (uint64_t)"session_id", (uint64_t)&v3);
  }
  return result;
}

void sub_100D27FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;

  if (a19 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a21);
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  sub_1018B38B4((uint64_t)&a59);
  _Unwind_Resume(a1);
}

uint64_t sub_100D28060(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM CyclingSessionSummary");
  return result;
}

void sub_100D280F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D28114(uint64_t a1)
{
  return sub_100D28060(a1 - 72);
}

void sub_100D28124(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  char *v16;
  _DWORD buf[3];
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  char *v21;
  char out[40];

  memset(out, 0, 37);
  uuid_unparse((const unsigned __int8 *)(a2 + 8), out);
  if ((sub_10008950C(a1 + 72) & 1) != 0)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "INSERT INTO CyclingSessionSummary (start_time, end_time, workout_type, power_meter_id, session_id, hr_max, hr_min, ftp, ftp_calculation_average_time, ftp_raw) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
  if (qword_10229FF90 != -1)
    dispatch_once(&qword_10229FF90, &stru_102181658);
  v4 = qword_10229FF98;
  if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_ERROR))
  {
    v5 = *(_QWORD *)(a2 + 24);
    v6 = *(_QWORD *)(a2 + 32);
    buf[0] = 134349570;
    *(_QWORD *)&buf[1] = v5;
    v18 = 2050;
    v19 = v6;
    v20 = 2082;
    v21 = out;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "CyclingSessionSummary, database isn't available for entry with startTime, %{public}f, endTime, %{public}f, sessionId, %{public}s", (uint8_t *)buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_102181658);
    v7 = *(_QWORD *)(a2 + 24);
    v8 = *(_QWORD *)(a2 + 32);
    v11 = 134349570;
    v12 = v7;
    v13 = 2050;
    v14 = v8;
    v15 = 2082;
    v16 = out;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 16, "CyclingSessionSummary, database isn't available for entry with startTime, %{public}f, endTime, %{public}f, sessionId, %{public}s", &v11, 32);
    v10 = (char *)v9;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLCyclingSessionSummaryDb::insertRecordUL(const CLCyclingSessionSummaryDbRow &, BOOL)", "%s\n", v9);
    if (v10 != (char *)buf)
      free(v10);
  }
}

void sub_100D285A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D285D4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 120))(a1, a2, 0);
}

uint64_t sub_100D285E4()
{
  return 0;
}

uint64_t sub_100D285EC(uint64_t a1)
{
  size_t v2;
  void **v3;
  const void *v4;
  char *v5;
  void *__p[2];
  char v8;

  if (sub_10008950C(a1 + 72))
  {
    if (*(char *)(a1 + 439) >= 0)
      v2 = *(unsigned __int8 *)(a1 + 439);
    else
      v2 = *(_QWORD *)(a1 + 424);
    sub_100259584((uint64_t)__p, v2 + 25);
    if (v8 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    if (v2)
    {
      if (*(char *)(a1 + 439) >= 0)
        v4 = (const void *)(a1 + 416);
      else
        v4 = *(const void **)(a1 + 416);
      memmove(v3, v4, v2);
    }
    strcpy((char *)v3 + v2, " ORDER BY id DESC LIMIT 1");
    if (v8 >= 0)
      v5 = (char *)__p;
    else
      v5 = (char *)__p[0];
    sub_1000CDA68(*(_QWORD *)(a1 + 80), v5);
  }
  return 2;
}

void sub_100D28710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D28748(uint64_t a1, void *a2)
{
  NSObject *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  size_t v8;
  std::string *v9;
  void **v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  void *v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v20;
  std::string *v21;
  void *v22[2];
  int64_t v23;
  std::string v24;
  void *__p[4];
  std::string buf[68];

  if (!sub_100635E80(*(_QWORD *)(a1 + 80), (char *)a2))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021819B0);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021819B0);
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice %{public}s needs autoincrement migration", __p, 12);
      v21 = (std::string *)v20;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<CLCyclingSessionSummaryDbRow, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLCyclingSessionSummaryDbRow, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    memset(__p, 0, 24);
    sub_1015A2E04(buf, (char *)a2);
    v5 = std::string::append(buf, "AutoIncr");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v23 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)v22 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_1015A2E04(buf, (char *)a2);
    v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_10001E638(*(_QWORD *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0)
      v8 = HIBYTE(__p[2]);
    else
      v8 = (size_t)__p[1];
    v9 = buf;
    sub_100259584((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v23 >= 0)
      v11 = v22;
    else
      v11 = (void **)v22[0];
    if (v23 >= 0)
      v12 = HIBYTE(v23);
    else
      v12 = (std::string::size_type)v22[1];
    v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v24.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    __p[0] = v14;
    __p[1] = v24.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v24.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      v15 = HIBYTE(__p[2]);
      v14 = __p[0];
    }
    if (v15 >= 0)
      v16 = (char *)__p;
    else
      v16 = (char *)v14;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), v16);
  }
  v17 = *(_QWORD *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = *(_QWORD *)(v17 + 88);
  sub_100053048(v17, v18);
  return 0;
}

void sub_100D298E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a60 < 0)
    operator delete(a55);
  _Unwind_Resume(a1);
}

uint64_t sub_100D29C00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char out[40];

  v4 = a1 + 112;
  v5 = a1 + 72;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 112) + 16))(a1 + 112);
  if (sub_10008950C(v5))
  {
    memset(out, 0, 37);
    uuid_unparse((const unsigned __int8 *)(a2 + 8), out);
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "UPDATE CyclingSessionSummary SET end_time = ?, hr_min = ?, hr_max = ? where session_id = ?;");
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return 0;
}

void sub_100D29D80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D29DC8(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  char out[40];

  v4 = a1 + 112;
  v5 = a1 + 72;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 112) + 16))(a1 + 112);
  if (sub_10008950C(v5))
  {
    memset(out, 0, 37);
    uuid_unparse(a2, out);
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "UPDATE CyclingSessionSummary SET power_meter_id = ? where session_id = ?;");
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return 0;
}

void sub_100D29F24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D29F6C(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  char out[40];

  v4 = a1 + 112;
  v5 = a1 + 72;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 112) + 16))(a1 + 112);
  if (sub_10008950C(v5))
  {
    memset(out, 0, 37);
    uuid_unparse(a2, out);
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "UPDATE CyclingSessionSummary SET ftp = ?, ftp_calculation_average_time = ?, ftp_raw = ? where session_id = ?;");
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return 0;
}

void sub_100D2A108(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_100D2A150(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  void **v6;
  const void *v7;
  char *v8;
  void *__p[2];
  char v11;
  uint64_t v12;
  __int16 v13;

  v3 = a1 + 112;
  v2 = *(_QWORD *)(a1 + 112);
  v4 = a1 + 72;
  v12 = a1 + 112;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 112);
  v13 = 256;
  if (sub_10008950C(v4))
  {
    if (*(char *)(a1 + 439) >= 0)
      v5 = *(unsigned __int8 *)(a1 + 439);
    else
      v5 = *(_QWORD *)(a1 + 424);
    v6 = __p;
    sub_100259584((uint64_t)__p, v5 + 102);
    if (v11 < 0)
      v6 = (void **)__p[0];
    if (v5)
    {
      if (*(char *)(a1 + 439) >= 0)
        v7 = (const void *)(a1 + 416);
      else
        v7 = *(const void **)(a1 + 416);
      memmove(v6, v7, v5);
    }
    strcpy((char *)v6 + v5, " WHERE ftp > 0 and ftp_calculation_average_time < ? ORDER BY ftp_calculation_average_time DESC LIMIT 1");
    if (v11 >= 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(*(_QWORD *)(a1 + 80), v8);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  return 0.0;
}

void sub_100D2A338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (a15 < 0)
    operator delete(__p);
  sub_10187E514((uint64_t)&a16);
  _Unwind_Resume(a1);
}

double sub_100D2A398(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  void **v6;
  const void *v7;
  char *v8;
  void *__p[2];
  char v11;
  uint64_t v12;
  __int16 v13;

  v3 = a1 + 112;
  v2 = *(_QWORD *)(a1 + 112);
  v4 = a1 + 72;
  v12 = a1 + 112;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 112);
  v13 = 256;
  if (sub_10008950C(v4))
  {
    if (*(char *)(a1 + 439) >= 0)
      v5 = *(unsigned __int8 *)(a1 + 439);
    else
      v5 = *(_QWORD *)(a1 + 424);
    v6 = __p;
    sub_100259584((uint64_t)__p, v5 + 66);
    if (v11 < 0)
      v6 = (void **)__p[0];
    if (v5)
    {
      if (*(char *)(a1 + 439) >= 0)
        v7 = (const void *)(a1 + 416);
      else
        v7 = *(const void **)(a1 + 416);
      memmove(v6, v7, v5);
    }
    strcpy((char *)v6 + v5, " WHERE ftp > 0 and start_time < ? ORDER BY start_time DESC LIMIT 1");
    if (v11 >= 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(*(_QWORD *)(a1 + 80), v8);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  return 0.0;
}

void sub_100D2A578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (a15 < 0)
    operator delete(__p);
  sub_10187E514((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_100D2A5D8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v11[2];
  uint64_t v12;
  _QWORD v13[8];
  void *v14[2];
  unsigned __int8 v15;

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12))
      goto LABEL_3;
LABEL_18:
    sub_1019272DC(v2);
    __break(1u);
  }
  v9 = v11[1];
  operator delete(v11[0]);
  if (!v9)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v11);
    v3 = sub_100263F7C(&v12, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(v14, a1);
    if ((v15 & 0x80u) == 0)
      v4 = v14;
    else
      v4 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v5 = v15;
    else
      v5 = (uint64_t)v14[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
    if ((char)v15 < 0)
      operator delete(v14[0]);
    v7 = a1[10];
    std::stringbuf::str(v14, v13);
    if ((v15 & 0x80u) == 0)
      v8 = (char *)v14;
    else
      v8 = (char *)v14[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_100D2A964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  if (*(char *)(v4 - 185) < 0)
    operator delete(*(void **)(v4 - 208));
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D2A9D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021819B0);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021819B0);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021819B0);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLCyclingSessionSummaryDbRow, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = CLCyclingSessionSummaryDbRow, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_100D2AFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_100D2AFFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v3 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v3;
  result = *(__n128 *)(a3 + 32);
  v5 = *(_OWORD *)(a3 + 48);
  v6 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 80) = v6;
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v5;
  return result;
}

uint64_t sub_100D2B018(uint64_t a1)
{
  return sub_100D2A9D4(a1 - 72);
}

void sub_100D2B020(id a1)
{
  qword_10229FF98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CyclingPower");
}

uint64_t sub_100D2B04C(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  _QWORD v15[8];
  void *v16[2];
  unsigned __int8 v17;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (HIBYTE(v14))
      goto LABEL_3;
LABEL_18:
    sub_101927448(v4);
    __break(1u);
  }
  v12 = v13[1];
  operator delete(v13[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v13);
    v6 = sub_100263F7C(&v14, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(v16, a1);
    if ((v17 & 0x80u) == 0)
      v7 = v16;
    else
      v7 = (void **)v16[0];
    if ((v17 & 0x80u) == 0)
      v8 = v17;
    else
      v8 = (uint64_t)v16[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v17 < 0)
      operator delete(v16[0]);
    v10 = a1[10];
    std::stringbuf::str(v16, v15);
    if ((v17 & 0x80u) == 0)
      v11 = (char *)v16;
    else
      v11 = (char *)v16[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_100D2B390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_100D2B400(uint64_t a1, uint64_t a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v26;
  const char *v27;
  uint8_t *v28;
  double v29;
  const char *v30;
  uint8_t *v31;
  const char *v32;
  uint8_t *v33;
  double v34;
  id v35[2];
  int v36;
  double v37;
  __int16 v38;
  uint64_t v39;
  uint8_t buf[4];
  double v41;
  __int16 v42;
  uint64_t v43;
  _BYTE v44[24];
  double v45;

  v35[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v35[1] = 0;
  if (*(double *)(a1 + 248) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v35);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v6 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v44);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021819B0);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021819B0);
        LOWORD(v36) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v36, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLCyclingSessionSummaryDbRow, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCyclingSessionSummaryDbRow, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *(double *)(a2 + 24);
    v8 = v45;
    v9 = v7 - v45;
    if (v7 - v45 < 0.0)
      v9 = -(v7 - v45);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021819B0);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD *)(a2 + 24);
        *(_DWORD *)buf = 134349312;
        v41 = v45;
        v42 = 2050;
        v43 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021819B0);
        v26 = *(_QWORD *)(a2 + 24);
        v36 = 134349312;
        v37 = v45;
        v38 = 2050;
        v39 = v26;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v36, 22);
        v28 = (uint8_t *)v27;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLCyclingSessionSummaryDbRow, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCyclingSessionSummaryDbRow, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v27);
        if (v28 != buf)
          free(v28);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *(double *)(a2 + 24);
      v8 = v45;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021819B0);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *(double *)(a2 + 24);
          *(_DWORD *)buf = 134217984;
          v41 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021819B0);
          v29 = *(double *)(a2 + 24);
          v36 = 134217984;
          v37 = v29;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v36));
          v31 = (uint8_t *)v30;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLCyclingSessionSummaryDbRow, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCyclingSessionSummaryDbRow, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v30);
          if (v31 != buf)
            free(v31);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v34 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_1021819B0);
        v18 = v34;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v41 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021819B0);
        v36 = 134217984;
        v37 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v36));
        v33 = (uint8_t *)v32;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLCyclingSessionSummaryDbRow, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCyclingSessionSummaryDbRow, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v32);
        if (v33 != buf)
          free(v33);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v44, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
  v22 = *(_OWORD *)(a2 + 32);
  v23 = *(_OWORD *)(a2 + 48);
  v24 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 304) = v24;
  *(_OWORD *)(a1 + 256) = v22;
  *(_OWORD *)(a1 + 272) = v23;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v35);
}

void sub_100D2BB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D2BB78(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_1019275B4(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_100D2BDD8(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_101927720(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_100D2C010(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10192788C(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_100D2C238(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100D2C264(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 21;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 42;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10002E778((uint64_t)a1);
}

__n128 sub_100D2C2F8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100D2C3B8(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  result = *(__n128 *)(a2 + 32);
  v11 = *(_OWORD *)(a2 + 48);
  v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 80) = v12;
  *(__n128 *)(v8 + 32) = result;
  *(_OWORD *)(v8 + 48) = v11;
  ++a1[5];
  return result;
}

void sub_100D2C3B8(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100D2C680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_100D2C6CC(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  int v3;

  v3 = 2;
  result = (_QWORD *)sub_10080E4E4(a1, &v3, qword_102307CF0, a2);
  *result = off_1021819E0;
  return result;
}

uint64_t sub_100D2C70C(uint64_t a1)
{
  NSObject *v2;
  void **v3;
  uint64_t v5;
  _BYTE *v6;
  char *v7;
  char *v8;
  _BYTE buf[12];
  char v10;
  int v11;
  _BYTE *v12;
  void *__p[2];
  char v14;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102181AA8);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
    v3 = v14 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TILE: clear, tile, %sd", buf, 0xCu);
    if (v14 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102181AA8);
    v5 = qword_1022A02D8;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(buf, a1);
    if (v10 >= 0)
      v6 = buf;
    else
      v6 = *(_BYTE **)buf;
    v11 = 136315138;
    v12 = v6;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v5, 2, "TILE: clear, tile, %sd", (const char *)&v11);
    v8 = v7;
    if (v10 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLHRSETile::clear()", "%s\n", v8);
    if (v8 != (char *)__p)
      free(v8);
  }
  return sub_100FA0654(a1);
}

void sub_100D2C934(uint64_t a1, uint64_t a2)
{
  sub_100811580(a1, a2);
  *(_BYTE *)(a1 + 296) = 0;
}

void sub_100D2C95C(uint64_t a1)
{
  sub_100FA05F0(a1);
  operator delete();
}

uint64_t sub_100D2C980()
{
  return 90;
}

void sub_100D2C988(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100D2C9B4()
{
  operator new();
}

void sub_100D2CA04()
{
  operator delete();
}

void sub_100D2CA28(uint64_t a1, void *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)sub_100D2CD80(a1, "CLFenceDataDownloadManager", a2);
  *v3 = off_102181AD8;
  v3[14] = 0;
  v3[15] = 0;
  v3[16] = 0;
  sub_10022142C(v3 + 17);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = a1 + 160;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = a1 + 160;
  *(_WORD *)(a1 + 192) = 0;
  sub_1001157C0((char *)(a1 + 200));
  *(_BYTE *)(a1 + 448) = 0;
  sub_10071A314();
}

void sub_100D2CCA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  operator delete();
}

uint64_t sub_100D2CD80(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_102181C80;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100D2CE00(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_100D2CE1C(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLFenceDataDownloadManager::onNetworkLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102181C30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceDataDownloadManager::onNetworkLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102181C30);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceDataDownloadManager::onNetworkLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100D31074(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100D2CFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100D2CFF4(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLFenceDataDownloadManager::onStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102181C30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceDataDownloadManager::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102181C30);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceDataDownloadManager::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100D3165C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100D2D1AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100D2D1CC(uint64_t a1, _DWORD *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLFenceDataDownloadManager::onCompanionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102181C30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceDataDownloadManager::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102181C30);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceDataDownloadManager::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100D31B40(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100D2D384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100D2D3A4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLFenceDataDownloadManager::onFenceDownloadTimer");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102181C30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceDataDownloadManager::onFenceDownloadTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102181C30);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceDataDownloadManager::onFenceDownloadTimer\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_100D31288(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_100D2D554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D2D574(uint64_t a1)
{
  *(_QWORD *)a1 = off_102181C80;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_100D2D5EC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  *(_QWORD *)a1 = off_102181AD8;
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181C50);
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Fence: delete CLFenceDataDownloadManager", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181C50);
    v12[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: delete CLFenceDataDownloadManager", v12, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "virtual CLFenceDataDownloadManager::~CLFenceDataDownloadManager()", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
  {
    sub_10016E3C4(v3);
    v4 = *(_QWORD *)(a1 + 152);
    if (v4)
    {
      sub_1009865B8(v4);
      operator delete();
    }
    *(_QWORD *)(a1 + 152) = 0;
  }
  v5 = *(void **)(a1 + 424);
  if (v5)
  {
    *(_QWORD *)(a1 + 432) = v5;
    operator delete(v5);
  }

  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  if (*(char *)(a1 + 247) < 0)
    operator delete(*(void **)(a1 + 224));
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  sub_100D33D04((uint64_t *)(a1 + 160));
  sub_100261F44(a1 + 136);
  v6 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  sub_100D2D574(a1);
  return a1;
}

void sub_100D2D874(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

void sub_100D2D888(uint64_t a1)
{
  sub_100D2D5EC(a1);
  operator delete();
}

uint64_t sub_100D2D8AC()
{
  return 1;
}

uint64_t sub_100D2D8B4()
{
  return 1;
}

_QWORD *sub_100D2D8BC@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

void sub_100D2D934(_QWORD *a1, __int128 **a2)
{
  NSObject *v4;
  unint64_t v5;
  double Current;
  __int128 *v7;
  __int128 *v8;
  void *v9;
  NSObject *v10;
  __int128 *p_buf;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  CFAbsoluteTime v15;
  uint64_t v16;
  CFAbsoluteTime v17;
  const char *v18;
  char *v19;
  NSObject *v20;
  __int128 *v21;
  uint64_t v22;
  _BYTE *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _BYTE *v27;
  char *v28;
  NSObject *v29;
  unint64_t v30;
  const char *v31;
  char *v32;
  const char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *context;
  CLOSTransaction *v38;
  _BYTE v39[12];
  char v40;
  int v41;
  _BYTE *v42;
  _BYTE __dst[12];
  char v44;
  void *v45;
  char v46;
  void *v47;
  char v48;
  double v49;
  int v50;
  void *__p;
  char v52;
  id v53;
  void *v54;
  void *v55;
  __int128 buf;
  char v57;

  if (qword_1022A0060 != -1)
LABEL_79:
    dispatch_once(&qword_1022A0060, &stru_102181C50);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
  {
    v5 = 0xEF7BDEF7BDEF7BDFLL * (((char *)a2[1] - (char *)*a2) >> 3);
    LODWORD(buf) = 134349056;
    *(_QWORD *)((char *)&buf + 4) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Fence: Adding %{public}ld fences for download", (uint8_t *)&buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181C50);
    v30 = 0xEF7BDEF7BDEF7BDFLL * (((char *)a2[1] - (char *)*a2) >> 3);
    *(_DWORD *)__dst = 134349056;
    *(_QWORD *)&__dst[4] = v30;
    LODWORD(v35) = 12;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: Adding %{public}ld fences for download", __dst, v35);
    v32 = (char *)v31;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceDataDownloadManager::addFencesForDataDownload(const std::vector<CLFenceManager_Type::Fence> &)", "%s\n", v31);
    if (v32 != (char *)&buf)
      free(v32);
  }
  v38 = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "CLFenceDataDownloadManager.AddFenceForDataDownload");
  context = objc_autoreleasePoolPush();
  Current = CFAbsoluteTimeGetCurrent();
  v36 = a1[22];
  v8 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    a2 = (__int128 **)(a1 + 20);
    while (1)
    {
      sub_1004E5748(__dst, v8);
      v9 = v54;
      if (v55 == v54)
        break;
      if (v54)
        goto LABEL_9;
LABEL_10:

      if (v52 < 0)
        operator delete(__p);
      if (v48 < 0)
        operator delete(v47);
      if (v46 < 0)
        operator delete(v45);
      if (v44 < 0)
        operator delete(*(void **)__dst);
      v8 = (__int128 *)((char *)v8 + 248);
      if (v8 == v7)
        goto LABEL_68;
    }
    if (v50 == -1)
    {
      sub_1019279F8(qword_1022A0060 == -1);
      abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLFenceDataDownloadManager.mm", 128, "addFencesForDataDownload");
      __break(1u);
      goto LABEL_79;
    }
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181C50);
    v10 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      sub_100C3B9BC((uint64_t)__dst, &buf);
      p_buf = &buf;
      if (v57 < 0)
        p_buf = (__int128 *)buf;
      *(_DWORD *)v39 = 136380675;
      *(_QWORD *)&v39[4] = p_buf;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Adding fence to download, %{private}s", v39, 0xCu);
      if (v57 < 0)
        operator delete((void *)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181C50);
      v22 = qword_1022A0068;
      sub_100C3B9BC((uint64_t)__dst, v39);
      v23 = v39;
      if (v40 < 0)
        v23 = *(_BYTE **)v39;
      v41 = 136380675;
      v42 = v23;
      LODWORD(v35) = 12;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v22, 2, "Adding fence to download, %{private}s", &v41, v35);
      v25 = v24;
      if (v40 < 0)
        operator delete(*(void **)v39);
      sub_100512490("Generic", 1, 0, 2, "void CLFenceDataDownloadManager::addFencesForDataDownload(const std::vector<CLFenceManager_Type::Fence> &)", "%s\n", v25);
      if (v25 != (char *)&buf)
        free(v25);
    }
    v12 = a1[17];
    sub_100C3C344((uint64_t)__dst);
    sub_101368128(v12, &buf);
    v13 = (void *)buf;
    if ((_QWORD)buf == *((_QWORD *)&buf + 1))
    {
      if (v49 >= 0.0)
      {
        v49 = Current + -172800.0 + 900.0;
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102181C50);
        v20 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          sub_100C3B9BC((uint64_t)__dst, &buf);
          v21 = &buf;
          if (v57 < 0)
            v21 = (__int128 *)buf;
          *(_DWORD *)v39 = 136380675;
          *(_QWORD *)&v39[4] = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Fence: Adding fence to download, restored fence, %{private}s", v39, 0xCu);
          if (v57 < 0)
            operator delete((void *)buf);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_102181C50);
          v26 = qword_1022A0068;
          sub_100C3B9BC((uint64_t)__dst, v39);
          v27 = v39;
          if (v40 < 0)
            v27 = *(_BYTE **)v39;
          v41 = 136380675;
          v42 = v27;
          LODWORD(v35) = 12;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v26, 2, "Fence: Adding fence to download, restored fence, %{private}s", &v41, v35);
          v19 = v28;
          if (v40 < 0)
            operator delete(*(void **)v39);
          sub_100512490("Generic", 1, 0, 2, "void CLFenceDataDownloadManager::addFencesForDataDownload(const std::vector<CLFenceManager_Type::Fence> &)", "%s\n", v19);
          goto LABEL_66;
        }
      }
    }
    else
    {
      v49 = *(double *)(buf + 64);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181C50);
      v14 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        v15 = CFAbsoluteTimeGetCurrent();
        LODWORD(buf) = 134283521;
        *(double *)((char *)&buf + 4) = v15 - v49;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Fence: Already have fence data, download age %{private}.1f", (uint8_t *)&buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102181C50);
        v16 = qword_1022A0068;
        v17 = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)v39 = 134283521;
        *(double *)&v39[4] = v17 - v49;
        LODWORD(v35) = 12;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v16, 2, "Fence: Already have fence data, download age %{private}.1f", v39, v35);
        v19 = (char *)v18;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceDataDownloadManager::addFencesForDataDownload(const std::vector<CLFenceManager_Type::Fence> &)", "%s\n", v18);
LABEL_66:
        if (v19 != (char *)&buf)
          free(v19);
      }
    }
    sub_1009EE2A4(a1 + 20, (uint64_t)__dst, 0);
    if (v13)
      operator delete(v13);
    v9 = v54;
    if (!v54)
      goto LABEL_10;
LABEL_9:
    v55 = v9;
    operator delete(v9);
    goto LABEL_10;
  }
LABEL_68:
  if (!v36 && a1[22] && a1[19])
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181C50);
    v29 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "Fence: first fence added, enable download timer", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181C50);
      *(_WORD *)__dst = 0;
      LODWORD(v35) = 2;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: first fence added, enable download timer", __dst, v35);
      v34 = (char *)v33;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceDataDownloadManager::addFencesForDataDownload(const std::vector<CLFenceManager_Type::Fence> &)", "%s\n", v33);
      if (v34 != (char *)&buf)
        free(v34);
    }
    sub_1001F40D0(a1[19], Current + 43200.0);
  }
  sub_100D2E364((uint64_t)a1);
  objc_autoreleasePoolPop(context);

}

void sub_100D2E2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;

  if (v25)
    operator delete(v25);
  sub_1004E2BD0((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_100D2E364(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  NSObject *v5;
  const char *v6;
  char *v7;
  double Current;
  double v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  CFAbsoluteTime v15;
  uint64_t v16;
  int v17;
  NSObject *v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  char *v22;
  char *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  NSObject *v28;
  _BYTE *v29;
  int v30;
  unsigned int v31;
  NSObject *v32;
  _BYTE *v33;
  id v34;
  double v35;
  double v36;
  NSObject *v37;
  _BYTE *v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  _BYTE *v43;
  int v44;
  int v45;
  int v46;
  char *v47;
  NSObject *v48;
  _BYTE *v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  _BYTE *v54;
  int v55;
  int v56;
  int v57;
  char *v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  _BYTE *v63;
  int v64;
  int v65;
  int v66;
  id v67;
  double v68;
  double v69;
  NSObject *v70;
  const char *v71;
  uint64_t v72;
  _BYTE *v73;
  char *v74;
  char *v75;
  int v76;
  _BYTE *v77;
  int v78;
  int v79;
  int v80;
  char *v81;
  char *v82;
  uint64_t v83;
  _BYTE *v84;
  char *v85;
  char *v86;
  NSObject *v87;
  const char *v88;
  NSObject *v89;
  uint64_t v90;
  int v91;
  NSObject *v92;
  NSObject *v93;
  const char *v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  const char *v99;
  char *v100;
  const char *v101;
  const char *v102;
  char *v103;
  uint64_t v104;
  NSObject *log;
  os_log_t loga;
  int v107;
  uint64_t v108;
  unint64_t v109;
  __int16 v110;
  char v111;
  int v112;
  char v113;
  unint64_t v114;
  int v115;
  CFAbsoluteTime v116;
  __int16 v117;
  int v118;
  __int16 v119;
  __int16 v120;
  char v121;
  int v122;
  char v123;
  unint64_t v124;
  int v125;
  CFAbsoluteTime v126;
  __int16 v127;
  int v128;
  __int16 v129;
  double v130[5];
  int v131;
  __int16 v132;
  int v133;
  char v134;
  _BYTE v135[20];
  _BYTE v136[6];
  _BYTE v137[6];
  _BYTE v138[20];
  __int16 v139;
  int v140;
  __int16 v141;
  int v142;
  _BYTE __p[12];
  char v144;
  _BYTE buf[20];
  _BYTE v146[6];
  _BYTE v147[6];
  _BYTE v148[20];
  __int16 v149;
  int v150;
  __int16 v151;
  int v152;

  if (sub_10019CFA0() != 1)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181C50);
    v5 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Fence: avoid download check, isLocationServicesEnabled, %{public}d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181C50);
    *(_DWORD *)v135 = 67240192;
    *(_DWORD *)&v135[4] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: avoid download check, isLocationServicesEnabled, %{public}d", v135, 8);
    v7 = (char *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceDataDownloadManager::checkDownloadState()", "%s\n", v6);
LABEL_217:
    if (v7 != buf)
      free(v7);
    return;
  }
  if (!*(_BYTE *)(a1 + 193) && !*(_BYTE *)(a1 + 192) && !*(_BYTE *)(a1 + 448))
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181C50);
    v93 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEBUG, "Fence: no reachability, download not possible", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181C50);
    *(_WORD *)v135 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: no reachability, download not possible", v135, 2);
    v7 = (char *)v94;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceDataDownloadManager::checkDownloadState()", "%s\n", v94);
    goto LABEL_217;
  }
  v2 = a1 + 160;
  v3 = *(_QWORD *)(a1 + 168);
  if (v3 == a1 + 160)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v4 += *(_DWORD *)(v3 + 320) >= 0;
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
  }
  Current = CFAbsoluteTimeGetCurrent();
  v9 = Current - *(double *)(a1 + 184);
  if (v9 <= 900.0)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181C50);
    v87 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134283521;
      *(double *)&buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEBUG, "Download error too fresh, avoid new downloads, dt, %{private}.1lf", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181C50);
    *(_DWORD *)v135 = 134283521;
    *(double *)&v135[4] = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Download error too fresh, avoid new downloads, dt, %{private}.1lf", v135, 12);
    v7 = (char *)v88;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceDataDownloadManager::checkDownloadState()", "%s\n", v88);
    goto LABEL_217;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181C50);
  v10 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v11 = *(_QWORD *)(a1 + 176);
    v12 = *(unsigned __int8 *)(a1 + 193);
    v13 = *(unsigned __int8 *)(a1 + 192);
    v14 = *(unsigned __int8 *)(a1 + 448);
    *(_DWORD *)buf = 67175681;
    *(_DWORD *)&buf[4] = v4;
    *(_WORD *)&buf[8] = 2049;
    *(_QWORD *)&buf[10] = v11;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)v146 = v12;
    *(_WORD *)&v146[4] = 1026;
    *(_DWORD *)v147 = v13;
    *(_WORD *)&v147[4] = 1026;
    *(_DWORD *)v148 = v14;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "checkDownloadState, currentQueries, %{private}d, numCombined, %{private}lu, reachability, %{public}d,%{public}d,%{public}d", buf, 0x24u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181C50);
    v95 = *(_QWORD *)(a1 + 176);
    v96 = *(unsigned __int8 *)(a1 + 193);
    v97 = *(unsigned __int8 *)(a1 + 192);
    v98 = *(unsigned __int8 *)(a1 + 448);
    *(_DWORD *)v135 = 67175681;
    *(_DWORD *)&v135[4] = v4;
    *(_WORD *)&v135[8] = 2049;
    *(_QWORD *)&v135[10] = v95;
    *(_WORD *)&v135[18] = 1026;
    *(_DWORD *)v136 = v96;
    *(_WORD *)&v136[4] = 1026;
    *(_DWORD *)v137 = v97;
    *(_WORD *)&v137[4] = 1026;
    *(_DWORD *)v138 = v98;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "checkDownloadState, currentQueries, %{private}d, numCombined, %{private}lu, reachability, %{public}d,%{public}d,%{public}d", v135, 36);
    v100 = (char *)v99;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceDataDownloadManager::checkDownloadState()", "%s\n", v99);
    if (v100 != buf)
      free(v100);
  }
  v15 = CFAbsoluteTimeGetCurrent();
  sub_1002433B8((uint64_t)v130);
  v16 = *(_QWORD *)(a1 + 168);
  if (v16 == v2)
  {
    v109 = 0;
    v17 = 0;
    goto LABEL_191;
  }
  v17 = 0;
  v109 = 0;
  v108 = a1 + 200;
  while ((v17 + v4) < 6)
  {
    if ((*(_DWORD *)(v16 + 320) & 0x80000000) == 0)
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181C50);
      v18 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        sub_100C3B9BC(v16 + 16, buf);
        v19 = buf;
        if (v146[3] < 0)
          v19 = *(_BYTE **)buf;
        *(_DWORD *)v135 = 136380675;
        *(_QWORD *)&v135[4] = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "already downloading fence, %{private}s", v135, 0xCu);
        if ((v146[3] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_83;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181C50);
      v20 = qword_1022A0068;
      sub_100C3B9BC(v16 + 16, v135);
      v21 = v135;
      if (v136[3] < 0)
        v21 = *(_BYTE **)v135;
      *(_DWORD *)__p = 136380675;
      *(_QWORD *)&__p[4] = v21;
      LODWORD(v104) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 2, "already downloading fence, %{private}s", __p, v104);
      v23 = v22;
      if ((v136[3] & 0x80000000) != 0)
        operator delete(*(void **)v135);
      goto LABEL_42;
    }
    v24 = vabdd_f64(Current, *(double *)(v16 + 128));
    v25 = *(double *)(v16 + 112);
    if (v25 > 400.0
      || *(_BYTE *)(v16 + 204)
      || *(_DWORD *)(v16 + 196) == 2
      || *(_QWORD *)(v16 + 248) != *(_QWORD *)(v16 + 240)
      || (*(_BYTE *)(v16 + 176) & 0x20) != 0)
    {
      if (v25 < 7000.0 && v24 >= 3600.0)
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102181C50);
        v32 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
        {
          sub_100C3B9BC(v16 + 16, buf);
          v33 = buf;
          if (v146[3] < 0)
            v33 = *(_BYTE **)buf;
          *(_DWORD *)v135 = 136380675;
          *(_QWORD *)&v135[4] = v33;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "Fence: request tile download, %{private}s", v135, 0xCu);
          if ((v146[3] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_102181C50);
          v72 = qword_1022A0068;
          sub_100C3B9BC(v16 + 16, v135);
          v73 = v135;
          if (v136[3] < 0)
            v73 = *(_BYTE **)v135;
          *(_DWORD *)__p = 136380675;
          *(_QWORD *)&__p[4] = v73;
          LODWORD(v104) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v72, 1, "Fence: request tile download, %{private}s", __p, v104);
          v75 = v74;
          if ((v136[3] & 0x80000000) != 0)
            operator delete(*(void **)v135);
          sub_100512490("Generic", 1, 0, 2, "void CLFenceDataDownloadManager::checkDownloadState()", "%s\n", v75);
          if (v75 != buf)
            free(v75);
        }
        v34 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLWifiTilesManager"));
        v35 = *(double *)(v16 + 88);
        v36 = *(double *)(v16 + 96);
        v120 = 0;
        v121 = 0;
        v122 = v133;
        v123 = v134;
        v124 = 0xBFF0000000000000;
        v125 = 0;
        v126 = v15;
        v127 = 257;
        v128 = v131;
        v129 = v132;
        objc_msgSend(v34, "requestTileDownloadForLat:lon:details:", &v120, v35, v36);
        *(double *)(v16 + 128) = Current;
      }
      goto LABEL_83;
    }
    if (*(double *)(a1 + 296) <= 0.0 || v24 < 43200.0)
    {
      if ((*(_BYTE *)(a1 + 192) || *(_BYTE *)(a1 + 448)) && v24 < 345600.0)
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102181C50);
        v37 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          sub_100C3B9BC(v16 + 16, v135);
          v38 = v135;
          if (v136[3] < 0)
            v38 = *(_BYTE **)v135;
          v39 = *(unsigned __int8 *)(a1 + 193);
          v40 = *(unsigned __int8 *)(a1 + 192);
          v41 = *(unsigned __int8 *)(a1 + 448);
          *(_DWORD *)buf = 136381955;
          *(_QWORD *)&buf[4] = v38;
          *(_WORD *)&buf[12] = 1026;
          *(_DWORD *)&buf[14] = v39;
          *(_WORD *)&buf[18] = 1026;
          *(_DWORD *)v146 = v40;
          *(_WORD *)&v146[4] = 1026;
          *(_DWORD *)v147 = v41;
          *(_WORD *)&v147[4] = 2050;
          *(double *)v148 = v24;
          *(_WORD *)&v148[8] = 2050;
          *(_QWORD *)&v148[10] = 0x4115180000000000;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "fence, %{private}s, is fresh for reachability, %{public}d,%{public}d,%{public}d, age, %{public}.1lf, thresh, %{public}.1lf", buf, 0x32u);
          if ((v136[3] & 0x80000000) != 0)
            operator delete(*(void **)v135);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_83;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102181C50);
        v42 = qword_1022A0068;
        sub_100C3B9BC(v16 + 16, __p);
        v43 = __p;
        if (v144 < 0)
          v43 = *(_BYTE **)__p;
        v44 = *(unsigned __int8 *)(a1 + 193);
        v45 = *(unsigned __int8 *)(a1 + 192);
        v46 = *(unsigned __int8 *)(a1 + 448);
        *(_DWORD *)v135 = 136381955;
        *(_QWORD *)&v135[4] = v43;
        *(_WORD *)&v135[12] = 1026;
        *(_DWORD *)&v135[14] = v44;
        *(_WORD *)&v135[18] = 1026;
        *(_DWORD *)v136 = v45;
        *(_WORD *)&v136[4] = 1026;
        *(_DWORD *)v137 = v46;
        *(_WORD *)&v137[4] = 2050;
        *(double *)v138 = v24;
        *(_WORD *)&v138[8] = 2050;
        *(_QWORD *)&v138[10] = 0x4115180000000000;
        LODWORD(v104) = 50;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v42, 2, "fence, %{private}s, is fresh for reachability, %{public}d,%{public}d,%{public}d, age, %{public}.1lf, thresh, %{public}.1lf", v135, v104);
        v23 = v47;
        if (v144 < 0)
          operator delete(*(void **)__p);
        goto LABEL_42;
      }
      if (*(_BYTE *)(a1 + 193) && v24 < 172800.0)
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102181C50);
        v48 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          sub_100C3B9BC(v16 + 16, v135);
          v49 = v135;
          if (v136[3] < 0)
            v49 = *(_BYTE **)v135;
          v50 = *(unsigned __int8 *)(a1 + 193);
          v51 = *(unsigned __int8 *)(a1 + 192);
          v52 = *(unsigned __int8 *)(a1 + 448);
          *(_DWORD *)buf = 136381955;
          *(_QWORD *)&buf[4] = v49;
          *(_WORD *)&buf[12] = 1026;
          *(_DWORD *)&buf[14] = v50;
          *(_WORD *)&buf[18] = 1026;
          *(_DWORD *)v146 = v51;
          *(_WORD *)&v146[4] = 1026;
          *(_DWORD *)v147 = v52;
          *(_WORD *)&v147[4] = 2050;
          *(double *)v148 = v24;
          *(_WORD *)&v148[8] = 2050;
          *(_QWORD *)&v148[10] = 0x4105180000000000;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "fence, %{private}s, is fresh for reachability, %{public}d,%{public}d,%{public}d, age, %{public}.1lf, thresh, %{public}.1lf", buf, 0x32u);
          if ((v136[3] & 0x80000000) != 0)
            operator delete(*(void **)v135);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_83;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102181C50);
        v53 = qword_1022A0068;
        sub_100C3B9BC(v16 + 16, __p);
        v54 = __p;
        if (v144 < 0)
          v54 = *(_BYTE **)__p;
        v55 = *(unsigned __int8 *)(a1 + 193);
        v56 = *(unsigned __int8 *)(a1 + 192);
        v57 = *(unsigned __int8 *)(a1 + 448);
        *(_DWORD *)v135 = 136381955;
        *(_QWORD *)&v135[4] = v54;
        *(_WORD *)&v135[12] = 1026;
        *(_DWORD *)&v135[14] = v55;
        *(_WORD *)&v135[18] = 1026;
        *(_DWORD *)v136 = v56;
        *(_WORD *)&v136[4] = 1026;
        *(_DWORD *)v137 = v57;
        *(_WORD *)&v137[4] = 2050;
        *(double *)v138 = v24;
        *(_WORD *)&v138[8] = 2050;
        *(_QWORD *)&v138[10] = 0x4105180000000000;
        LODWORD(v104) = 50;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v53, 2, "fence, %{private}s, is fresh for reachability, %{public}d,%{public}d,%{public}d, age, %{public}.1lf, thresh, %{public}.1lf", v135, v104);
        v23 = v58;
        if (v144 < 0)
          operator delete(*(void **)__p);
LABEL_42:
        sub_100512490("Generic", 1, 0, 2, "void CLFenceDataDownloadManager::checkDownloadState()", "%s\n", v23);
LABEL_43:
        if (v23 != buf)
          free(v23);
        goto LABEL_83;
      }
    }
    else
    {
      v26 = sub_10011E634(v130, *(double *)(a1 + 272), *(double *)(a1 + 280), *(double *)(v16 + 88), *(double *)(v16 + 96), 0.0);
      v27 = *(double *)(a1 + 296);
      if (v27 <= 400.0
        && !*(_BYTE *)(a1 + 388)
        && *(_DWORD *)(a1 + 380) != 2
        && *(_QWORD *)(a1 + 432) == *(_QWORD *)(a1 + 424)
        && (*(_BYTE *)(a1 + 360) & 0x20) == 0
        && v26 - *(double *)(v16 + 112) - v27 <= 0.0)
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102181C50);
        v28 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
        {
          sub_100C3B9BC(v108, buf);
          v29 = buf;
          if (v146[3] < 0)
            v29 = *(_BYTE **)buf;
          *(_DWORD *)v135 = 136380675;
          *(_QWORD *)&v135[4] = v29;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "Fence: Urgent refresh, %{private}s", v135, 0xCu);
          if ((v146[3] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_102181C50);
          v83 = qword_1022A0068;
          sub_100C3B9BC(v108, v135);
          v84 = v135;
          if (v136[3] < 0)
            v84 = *(_BYTE **)v135;
          *(_DWORD *)__p = 136380675;
          *(_QWORD *)&__p[4] = v84;
          LODWORD(v104) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v83, 1, "Fence: Urgent refresh, %{private}s", __p, v104);
          v86 = v85;
          if ((v136[3] & 0x80000000) != 0)
            operator delete(*(void **)v135);
          sub_100512490("Generic", 1, 0, 2, "void CLFenceDataDownloadManager::checkDownloadState()", "%s\n", v86);
          if (v86 != buf)
            free(v86);
        }
        *(_QWORD *)(a1 + 296) = 0xBFF0000000000000;
        if (v24 < 345600.0)
          v30 = HIDWORD(v109) + 1;
        else
          v30 = HIDWORD(v109) + 2;
        v31 = v109;
        if (v24 >= 172800.0)
          v31 = v109 + 1;
        v109 = __PAIR64__(v30, v31);
        v107 = 1;
        goto LABEL_134;
      }
    }
    if (v24 < 172800.0)
      v59 = v109;
    else
      v59 = v109 + 1;
    if (v24 < 345600.0)
      v60 = HIDWORD(v109);
    else
      v60 = HIDWORD(v109) + 1;
    if (v24 >= 345600.0 && ((++HIDWORD(v109), *(_BYTE *)(a1 + 192)) || *(_BYTE *)(a1 + 193) || *(_BYTE *)(a1 + 448)))
    {
      v107 = 0;
      LODWORD(v109) = v59;
    }
    else
    {
      if (v24 < 172800.0 || (LODWORD(v109) = v109 + 1, !*(_BYTE *)(a1 + 193)))
      {
        HIDWORD(v109) = v60;
        goto LABEL_83;
      }
      v107 = 0;
      HIDWORD(v109) = v60;
    }
LABEL_134:
    *(_DWORD *)(v16 + 320) = sub_100D30738(a1, v16 + 16);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181C50);
    v61 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
    {
      log = v61;
      v62 = *(_DWORD *)(v16 + 320);
      sub_100C3B9BC(v16 + 16, v135);
      v63 = v135;
      if (v136[3] < 0)
        v63 = *(_BYTE **)v135;
      v64 = *(unsigned __int8 *)(a1 + 193);
      v65 = *(unsigned __int8 *)(a1 + 192);
      v66 = *(unsigned __int8 *)(a1 + 448);
      *(_DWORD *)buf = 67242243;
      *(_DWORD *)&buf[4] = v62;
      *(_WORD *)&buf[8] = 2081;
      *(_QWORD *)&buf[10] = v63;
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)v146 = v64;
      *(_WORD *)&v146[4] = 1026;
      *(_DWORD *)v147 = v65;
      *(_WORD *)&v147[4] = 1026;
      *(_DWORD *)v148 = v66;
      *(_WORD *)&v148[4] = 2050;
      *(double *)&v148[6] = v24;
      *(_WORD *)&v148[14] = 1026;
      *(_DWORD *)&v148[16] = HIDWORD(v109);
      v149 = 1026;
      v150 = v109;
      v151 = 1026;
      v152 = v107;
      _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_INFO, "Fence: request ALS/tile download, tag, %{public}d, %{private}s, need refresh, %{public}d,%{public}d,%{public}d, age, %{public}.1lf, num %{public}d, %{public}d, isUrgentDownload, %{public}d", buf, 0x40u);
      if ((v136[3] & 0x80000000) != 0)
        operator delete(*(void **)v135);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181C50);
      loga = (os_log_t)qword_1022A0068;
      v76 = *(_DWORD *)(v16 + 320);
      sub_100C3B9BC(v16 + 16, __p);
      v77 = __p;
      if (v144 < 0)
        v77 = *(_BYTE **)__p;
      v78 = *(unsigned __int8 *)(a1 + 193);
      v79 = *(unsigned __int8 *)(a1 + 192);
      v80 = *(unsigned __int8 *)(a1 + 448);
      *(_DWORD *)v135 = 67242243;
      *(_DWORD *)&v135[4] = v76;
      *(_WORD *)&v135[8] = 2081;
      *(_QWORD *)&v135[10] = v77;
      *(_WORD *)&v135[18] = 1026;
      *(_DWORD *)v136 = v78;
      *(_WORD *)&v136[4] = 1026;
      *(_DWORD *)v137 = v79;
      *(_WORD *)&v137[4] = 1026;
      *(_DWORD *)v138 = v80;
      *(_WORD *)&v138[4] = 2050;
      *(double *)&v138[6] = v24;
      *(_WORD *)&v138[14] = 1026;
      *(_DWORD *)&v138[16] = HIDWORD(v109);
      v139 = 1026;
      v140 = v109;
      v141 = 1026;
      v142 = v107;
      LODWORD(v104) = 64;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, loga, 1, "Fence: request ALS/tile download, tag, %{public}d, %{private}s, need refresh, %{public}d,%{public}d,%{public}d, age, %{public}.1lf, num %{public}d, %{public}d, isUrgentDownload, %{public}d", v135, v104);
      v82 = v81;
      if (v144 < 0)
        operator delete(*(void **)__p);
      sub_100512490("Generic", 1, 0, 2, "void CLFenceDataDownloadManager::checkDownloadState()", "%s\n", v82);
      if (v82 != buf)
        free(v82);
    }
    if ((*(_DWORD *)(v16 + 320) & 0x80000000) != 0)
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181C50);
      v70 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_INFO, "#Warning Fence: can't start query", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_83;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181C50);
      *(_WORD *)v135 = 0;
      LODWORD(v104) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "#Warning Fence: can't start query", v135, v104);
      v23 = (char *)v71;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceDataDownloadManager::checkDownloadState()", "%s\n", v71);
      goto LABEL_43;
    }
    v67 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLWifiTilesManager"));
    v68 = *(double *)(v16 + 88);
    v69 = *(double *)(v16 + 96);
    v110 = 0;
    v111 = 0;
    v112 = v133;
    v113 = v134;
    v114 = 0xBFF0000000000000;
    v115 = 0;
    v116 = v15;
    v117 = 257;
    v118 = v131;
    v119 = v132;
    objc_msgSend(v67, "requestTileDownloadForLat:lon:details:", &v110, v68, v69);
    ++v17;
LABEL_83:
    v16 = *(_QWORD *)(v16 + 8);
    if (v16 == v2)
      goto LABEL_191;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181C50);
  v89 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67174913;
    *(_DWORD *)&buf[4] = v17 + v4;
    *(_WORD *)&buf[8] = 1025;
    *(_DWORD *)&buf[10] = 5;
    _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEBUG, "avoiding more concurrent downloads, %{private}d, max, %{private}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181C50);
    *(_DWORD *)v135 = 67174913;
    *(_DWORD *)&v135[4] = v17 + v4;
    *(_WORD *)&v135[8] = 1025;
    *(_DWORD *)&v135[10] = 5;
    LODWORD(v104) = 14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "avoiding more concurrent downloads, %{private}d, max, %{private}d", v135, v104);
    v103 = (char *)v102;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceDataDownloadManager::checkDownloadState()", "%s\n", v102);
    if (v103 != buf)
      free(v103);
  }
LABEL_191:
  v90 = *(_QWORD *)(a1 + 168);
  if (v90 == v2)
  {
    v91 = 0;
  }
  else
  {
    v91 = 0;
    do
    {
      v91 += *(_DWORD *)(v90 + 320) >= 0;
      v90 = *(_QWORD *)(v90 + 8);
    }
    while (v90 != v2);
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181C50);
  v92 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67241216;
    *(_DWORD *)&buf[4] = v4;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v91;
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)&buf[16] = v17;
    *(_WORD *)v146 = 1026;
    *(_DWORD *)&v146[2] = HIDWORD(v109);
    *(_WORD *)v147 = 1026;
    *(_DWORD *)&v147[2] = v109;
    _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEBUG, "checkDownloadState, currentNumOfQueries, %{public}d, newNumOfQueries, %{public}d, numOfStartedQueries, %{public}d, nSmall, %{public}d, nLarge, %{public}d", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181C50);
    *(_DWORD *)v135 = 67241216;
    *(_DWORD *)&v135[4] = v4;
    *(_WORD *)&v135[8] = 1026;
    *(_DWORD *)&v135[10] = v91;
    *(_WORD *)&v135[14] = 1026;
    *(_DWORD *)&v135[16] = v17;
    *(_WORD *)v136 = 1026;
    *(_DWORD *)&v136[2] = HIDWORD(v109);
    *(_WORD *)v137 = 1026;
    *(_DWORD *)&v137[2] = v109;
    LODWORD(v104) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "checkDownloadState, currentNumOfQueries, %{public}d, newNumOfQueries, %{public}d, numOfStartedQueries, %{public}d, nSmall, %{public}d, nLarge, %{public}d", v135, v104);
    v7 = (char *)v101;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceDataDownloadManager::checkDownloadState()", "%s\n", v101);
    goto LABEL_217;
  }
}

void sub_100D2FD00(uint64_t *a1, uint64_t *a2)
{
  NSObject *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  const char *v15;
  uint8_t *v16;
  NSObject *v17;
  unint64_t v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  _QWORD *v30;
  uint8_t buf[4];
  _QWORD *v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  _QWORD *v36;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181C50);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
  {
    v5 = 0xEF7BDEF7BDEF7BDFLL * ((a2[1] - *a2) >> 3);
    *(_DWORD *)buf = 134349056;
    v32 = (_QWORD *)v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Fence: Removing %{public}ld fences for download", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181C50);
    v18 = 0xEF7BDEF7BDEF7BDFLL * ((a2[1] - *a2) >> 3);
    v25 = 134349056;
    v26 = (_QWORD *)v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: Removing %{public}ld fences for download", &v25, 12);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceDataDownloadManager::removeFencesForDataDownload(const std::vector<CLFenceManager_Type::Fence> &)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  v24 = a1[22];
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      if (*(_QWORD *)(v6 + 232) == *(_QWORD *)(v6 + 224))
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102181C50);
        v8 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          v9 = (_QWORD *)(v6 + 48);
          if (*(char *)(v6 + 71) < 0)
            v9 = (_QWORD *)*v9;
          v10 = v6;
          if (*(char *)(v6 + 23) < 0)
            v10 = *(_QWORD *)v6;
          v11 = (_QWORD *)(v6 + 24);
          if (*(char *)(v6 + 47) < 0)
            v11 = (_QWORD *)*v11;
          *(_DWORD *)buf = 136381187;
          v32 = v9;
          v33 = 2081;
          v34 = v10;
          v35 = 2081;
          v36 = v11;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Removing fence from download, [%{private}s]/%{private}s/%{private}s", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_102181C50);
          v12 = (_QWORD *)(v6 + 48);
          if (*(char *)(v6 + 71) < 0)
            v12 = (_QWORD *)*v12;
          v13 = v6;
          if (*(char *)(v6 + 23) < 0)
            v13 = *(_QWORD *)v6;
          v14 = (_QWORD *)(v6 + 24);
          if (*(char *)(v6 + 47) < 0)
            v14 = (_QWORD *)*v14;
          v25 = 136381187;
          v26 = v12;
          v27 = 2081;
          v28 = v13;
          v29 = 2081;
          v30 = v14;
          LODWORD(v23) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Removing fence from download, [%{private}s]/%{private}s/%{private}s", &v25, v23);
          v16 = (uint8_t *)v15;
          sub_100512490("Generic", 1, 0, 2, "void CLFenceDataDownloadManager::removeFencesForDataDownload(const std::vector<CLFenceManager_Type::Fence> &)", "%s\n", v15);
          if (v16 != buf)
            free(v16);
        }
        sub_1009ED928(a1 + 20, v6, v6 + 24);
      }
      v6 += 248;
    }
    while (v6 != v7);
  }
  if (v24 && !a1[22] && a1[19])
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181C50);
    v17 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Fence: last fence removed, disabled download timer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181C50);
      LOWORD(v25) = 0;
      LODWORD(v23) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: last fence removed, disabled download timer", &v25, v23);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceDataDownloadManager::removeFencesForDataDownload(const std::vector<CLFenceManager_Type::Fence> &)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    sub_1001F40D0(a1[19], 1.79769313e308);
  }
  sub_100D2E364((uint64_t)a1);
}

void sub_100D30264(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  BOOL v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void *v14;
  uint64_t v15;
  _BYTE *v16;
  char *v17;
  char *v18;
  _BYTE buf[12];
  char v20;
  int v21;
  _BYTE *v22;
  void *__p[2];
  char v24;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181C50);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
  {
    sub_100C3B9BC(a2, __p);
    v5 = v24 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136380675;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Fence: refreshDataForFence, %{private}s", buf, 0xCu);
    if (v24 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181C50);
    v15 = qword_1022A0068;
    sub_100C3B9BC(a2, buf);
    if (v20 >= 0)
      v16 = buf;
    else
      v16 = *(_BYTE **)buf;
    v21 = 136380675;
    v22 = v16;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v15, 1, "Fence: refreshDataForFence, %{private}s", &v21, 12);
    v18 = v17;
    if (v20 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLFenceDataDownloadManager::refreshDataForFence(const CLFenceManager_Type::Fence &)", "%s\n", v18);
    if (v18 != (char *)__p)
      free(v18);
  }
  v7 = *(double *)(a2 + 96) > 400.0 || *(_BYTE *)(a2 + 188) != 0 || *(_DWORD *)(a2 + 180) == 2;
  if (!v7 && *(_QWORD *)(a2 + 232) == *(_QWORD *)(a2 + 224) && (*(_BYTE *)(a2 + 160) & 0x20) == 0)
  {
    std::string::operator=((std::string *)(a1 + 200), (const std::string *)a2);
    std::string::operator=((std::string *)(a1 + 224), (const std::string *)(a2 + 24));
    std::string::operator=((std::string *)(a1 + 248), (const std::string *)(a2 + 48));
    v8 = *(_OWORD *)(a2 + 72);
    v9 = *(_OWORD *)(a2 + 88);
    v10 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 320) = v10;
    *(_OWORD *)(a1 + 272) = v8;
    *(_OWORD *)(a1 + 288) = v9;
    v11 = *(_OWORD *)(a2 + 136);
    v12 = *(_OWORD *)(a2 + 152);
    v13 = *(_OWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 381) = *(_QWORD *)(a2 + 181);
    *(_OWORD *)(a1 + 352) = v12;
    *(_OWORD *)(a1 + 368) = v13;
    *(_OWORD *)(a1 + 336) = v11;
    std::string::operator=((std::string *)(a1 + 392), (const std::string *)(a2 + 192));
    v14 = *(void **)(a1 + 416);
    *(_QWORD *)(a1 + 416) = *(id *)(a2 + 216);

    if (a1 + 200 != a2)
      sub_1002F3538((char *)(a1 + 424), *(char **)(a2 + 224), *(_QWORD *)(a2 + 232), (uint64_t)(*(_QWORD *)(a2 + 232) - *(_QWORD *)(a2 + 224)) >> 4);
    sub_100D2E364(a1);
  }
}

void sub_100D30564(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181C50);
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
  {
    v3 = a1[22];
    *(_DWORD *)buf = 134349056;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Fence: Removing all fences for download, fences, %{public}lu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181C50);
    v5 = a1[22];
    v8 = 134349056;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: Removing all fences for download, fences, %{public}lu", &v8, 12);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceDataDownloadManager::removeAllFencesForDataDownload()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  sub_100D33D04(a1 + 20);
  v4 = a1[19];
  if (v4)
    sub_1001F40D0(v4, 1.79769313e308);
  sub_100D2E364((uint64_t)a1);
}

uint64_t sub_100D30738(uint64_t a1, uint64_t a2)
{
  int v9;
  _DWORD *v10;
  uint64_t v11;
  id v12;
  void *__p;
  void *v15;
  _DWORD *v16;
  int v17;
  __int128 v18;
  double v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;

  v17 = 0xFFFF;
  __asm { FMOV            V0.2D, #-1.0 }
  v20 = xmmword_101BAFEE0;
  v21 = _Q0;
  v22 = _Q0;
  v23 = 0xBFF0000000000000;
  v24 = 0;
  v27 = 0;
  v25 = 0xBFF0000000000000;
  v26 = 0;
  v29 = 0xBFF0000000000000;
  v28 = 0;
  v30 = 0x7FFFFFFF;
  v32 = 0;
  v33 = 0;
  v31 = 0;
  v34 = 0;
  v18 = *(_OWORD *)(a2 + 72);
  v19 = *(double *)(a2 + 96) + 200.0;
  if (sub_10019CFA0() != 1)
    return 0xFFFFFFFFLL;
  v16 = 0;
  v9 = sub_100C3C344(a2);
  v10 = sub_100260634((uint64_t)&v16, 1uLL);
  *v10 = v9;
  __p = v10;
  v15 = v10 + 1;
  v16 = &v10[v11];
  v15 = v10 + 1;
  v12 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLNetworkLocationProvider")), "syncgetQueryNearbys:forFenceKeys:", &v17, &__p);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return (uint64_t)v12;
}

void sub_100D30884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100D308A4(uint64_t a1, int a2, int a3, int a4, int a5)
{
  double Current;
  uint64_t v9;
  uint64_t v10;
  double v11;
  int v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  id v19;
  NSObject *v20;
  int v21;
  _QWORD *v22;
  int v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  unsigned __int8 *v36;
  double v37;
  NSObject *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  const char *v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t *v48;
  _QWORD *v49;
  uint64_t v50;
  _DWORD v51[2];
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  _QWORD *v63;
  uint8_t buf[4];
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  _QWORD *v77;
  std::string v78;
  std::string v79;
  std::string v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _BYTE v87[21];
  std::string v88;
  id v89;
  void *__p[3];
  BOOL v91;

  Current = CFAbsoluteTimeGetCurrent();
  v9 = a1 + 160;
  v10 = *(_QWORD *)(a1 + 168);
  if (v10 == a1 + 160)
  {
LABEL_5:
    v12 = 0;
    v13 = 0;
  }
  else
  {
    v11 = Current;
    while (*(_DWORD *)(v10 + 320) != a2)
    {
      v10 = *(_QWORD *)(v10 + 8);
      if (v10 == v9)
        goto LABEL_5;
    }
    *(_DWORD *)(v10 + 320) = -1;
    v49 = 0;
    v50 = 0;
    v48 = (uint64_t *)&v49;
    v14 = *(_QWORD **)(v10 + 264);
    if (v14 != (_QWORD *)(v10 + 272))
    {
      do
      {
        sub_1001157C0((char *)&v78);
        std::string::operator=(&v78, (const std::string *)(v14 + 4));
        v15 = v14 + 7;
        std::string::operator=(&v79, (const std::string *)(v14 + 7));
        std::string::operator=(&v80, (const std::string *)(v14 + 10));
        v16 = *(_OWORD *)(v14 + 23);
        v85 = *(_OWORD *)(v14 + 21);
        v86 = v16;
        *(_OWORD *)v87 = *(_OWORD *)(v14 + 25);
        *(_QWORD *)&v87[13] = *(_QWORD *)((char *)v14 + 213);
        v17 = *(_OWORD *)(v14 + 15);
        v81 = *(_OWORD *)(v14 + 13);
        v82 = v17;
        v18 = *(_OWORD *)(v14 + 19);
        v83 = *(_OWORD *)(v14 + 17);
        v84 = v18;
        std::string::operator=(&v88, (const std::string *)(v14 + 28));
        v19 = v89;
        v89 = (id)v14[31];

        if (&v78 != (std::string *)(v14 + 4))
          sub_1002F3538((char *)__p, (char *)v14[32], v14[33], (uint64_t)(v14[33] - v14[32]) >> 4);
        v91 = *(double *)(v10 + 128) < 0.0;
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102181C50);
        v20 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          v21 = sub_100C3C344((uint64_t)(v14 + 4));
          v22 = v14 + 7;
          if (*((char *)v14 + 79) < 0)
            v22 = (_QWORD *)*v15;
          v23 = *((_DWORD *)v14 + 54);
          *(_DWORD *)buf = 67241731;
          v65 = a2;
          v66 = 1026;
          v67 = a3;
          v68 = 1026;
          v69 = a4;
          v70 = 1026;
          v71 = a5;
          v72 = 1026;
          v73 = v21;
          v74 = 1026;
          v75 = v23;
          v76 = 2081;
          v77 = v22;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Fence: networkQueryDone,tag,%{public}d,isSuccess,%{public}d,numOfAps,%{public}d,numOfCells,%{public}d,key,%{public}d,%{public}d,%{private}s", buf, 0x30u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_102181C50);
          v27 = qword_1022A0068;
          v28 = sub_100C3C344((uint64_t)(v14 + 4));
          if (*((char *)v14 + 79) < 0)
            v15 = (_QWORD *)*v15;
          v29 = *((_DWORD *)v14 + 54);
          v51[0] = 67241731;
          v51[1] = a2;
          v52 = 1026;
          v53 = a3;
          v54 = 1026;
          v55 = a4;
          v56 = 1026;
          v57 = a5;
          v58 = 1026;
          v59 = v28;
          v60 = 1026;
          v61 = v29;
          v62 = 2081;
          v63 = v15;
          LODWORD(v45) = 48;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v27, 2, "Fence: networkQueryDone,tag,%{public}d,isSuccess,%{public}d,numOfAps,%{public}d,numOfCells,%{public}d,key,%{public}d,%{public}d,%{private}s", v51, v45);
          v31 = (uint8_t *)v30;
          sub_100512490("Generic", 1, 0, 2, "void CLFenceDataDownloadManager::networkQueryDone(int, BOOL, int, int)", "%s\n", v30);
          if (v31 != buf)
            free(v31);
        }
        if (a3)
        {
          *(double *)(v10 + 128) = v11;
          *((double *)&v83 + 1) = v11;
          if (v11 < 0.0)
            *(_QWORD *)(v10 + 128) = 0;
          sub_1009EFDC0(&v48, (unsigned __int8 *)&v78, (__int128 *)&v78);
          *(_DWORD *)buf = 0;
          (*(void (**)(uint64_t, uint8_t *, std::string *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, &v78, 0, 0xFFFFFFFFLL, 0);
        }
        else
        {
          *(_DWORD *)buf = 1;
          (*(void (**)(uint64_t, uint8_t *, std::string *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, &v78, 0, 0xFFFFFFFFLL, 0);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }

        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__r_.__value_.__l.__data_);
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v80.__r_.__value_.__l.__data_);
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v79.__r_.__value_.__l.__data_);
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v78.__r_.__value_.__l.__data_);
        v24 = (_QWORD *)v14[1];
        if (v24)
        {
          do
          {
            v25 = v24;
            v24 = (_QWORD *)*v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            v25 = (_QWORD *)v14[2];
            v26 = *v25 == (_QWORD)v14;
            v14 = v25;
          }
          while (!v26);
        }
        v14 = v25;
      }
      while (v25 != (_QWORD *)(v10 + 272));
      if (v50)
      {
        v32 = v48;
        if (v48 == (uint64_t *)&v49)
        {
          v36 = (unsigned __int8 *)&v49;
          v33 = (uint64_t *)(v10 + 264);
        }
        else
        {
          v33 = (uint64_t *)(v10 + 264);
          do
          {
            sub_1009EFD68((uint64_t **)(v10 + 264), (unsigned __int8 *)v32 + 32);
            v34 = (uint64_t *)v32[1];
            if (v34)
            {
              do
              {
                v35 = v34;
                v34 = (uint64_t *)*v34;
              }
              while (v34);
            }
            else
            {
              do
              {
                v35 = (uint64_t *)v32[2];
                v26 = *v35 == (_QWORD)v32;
                v32 = v35;
              }
              while (!v26);
            }
            v32 = v35;
          }
          while (v35 != (uint64_t *)&v49);
          v36 = (unsigned __int8 *)v48;
        }
        sub_1009EFA20(v33, v36, (unsigned __int8 *)&v49);
      }
    }
    sub_1009EF82C((uint64_t)&v48, v49);
    v37 = 0.0;
    if (!a3)
      v37 = v11;
    v12 = a3 ^ 1;
    *(double *)(a1 + 184) = v37;
    v13 = 1;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181C50);
  v38 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v39 = *(_QWORD *)(a1 + 168);
    if (v39 == v9)
    {
      v40 = 0;
    }
    else
    {
      v40 = 0;
      do
      {
        v40 += *(_DWORD *)(v39 + 320) >= 0;
        v39 = *(_QWORD *)(v39 + 8);
      }
      while (v39 != v9);
    }
    *(_DWORD *)buf = 67240704;
    v65 = v40;
    v66 = 1026;
    v67 = v12;
    v68 = 1026;
    v69 = v13;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "networkQueryDone, newNumOfQueries, %{public}u, isAvoidUpcomingFenceDownloads, %{public}d, doesTagBelongToFence, %{public}d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181C50);
    v41 = *(_QWORD *)(a1 + 168);
    if (v41 == v9)
    {
      v42 = 0;
    }
    else
    {
      v42 = 0;
      do
      {
        v42 += *(_DWORD *)(v41 + 320) >= 0;
        v41 = *(_QWORD *)(v41 + 8);
      }
      while (v41 != v9);
    }
    LODWORD(v78.__r_.__value_.__l.__data_) = 67240704;
    HIDWORD(v78.__r_.__value_.__r.__words[0]) = v42;
    LOWORD(v78.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&v78.__r_.__value_.__r.__words[1] + 2) = v12;
    HIWORD(v78.__r_.__value_.__r.__words[1]) = 1026;
    LODWORD(v78.__r_.__value_.__r.__words[2]) = v13;
    LODWORD(v45) = 20;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "networkQueryDone, newNumOfQueries, %{public}u, isAvoidUpcomingFenceDownloads, %{public}d, doesTagBelongToFence, %{public}d", &v78, v45);
    v44 = (uint8_t *)v43;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceDataDownloadManager::networkQueryDone(int, BOOL, int, int)", "%s\n", v43);
    if (v44 != buf)
      free(v44);
  }
  sub_100D2E364(a1);
}

void sub_100D31018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,_QWORD *a23)
{
  sub_1004E2BD0((uint64_t)&STACK[0x710]);
  sub_1009EF82C((uint64_t)&a22, a23);
  _Unwind_Resume(a1);
}

void sub_100D31074(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  int v4;
  int v5;
  int v6;
  NSObject *v8;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[4];
  uint8_t buf[4];
  int v15;

  v4 = *a3;
  if (*a3 == 3)
  {
    v5 = 0;
    v6 = 0;
    goto LABEL_5;
  }
  if (v4 == 2)
  {
    v6 = a4[1];
    v5 = a4[2];
LABEL_5:
    sub_100D308A4(a1, *a4, v4 != 3, v6, v5);
    return;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181C50);
  v8 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *a3;
    *(_DWORD *)buf = 67240192;
    v15 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Got unknown notification %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181C50);
    v10 = *a3;
    v13[0] = 67240192;
    v13[1] = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#Warning Got unknown notification %{public}d", v13, 8);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceDataDownloadManager::onNetworkLocationNotification(int, const CLNetworkLocationProvider_Type::Notification &, const CLNetworkLocationProvider_Type::NotificationData &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
}

void sub_100D31288(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  unsigned __int8 v6;
  double Current;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  double v12;
  uint8_t buf[4];
  double v14;

  if (a2 && *(_QWORD *)(a1 + 152) == a2)
  {
    v6 = atomic_load((unsigned __int8 *)&qword_102307D00);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_102307D00))
    {
      qword_102307CF8 = CFAbsoluteTimeGetCurrent();
      __cxa_guard_release(&qword_102307D00);
    }
    Current = CFAbsoluteTimeGetCurrent();
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181C50);
    v8 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134283521;
      v14 = Current - *(double *)&qword_102307CF8;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Fence: onFenceDownloadTimer, since last, %{private}.1lf", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181C50);
      v11 = 134283521;
      v12 = Current - *(double *)&qword_102307CF8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Fence: onFenceDownloadTimer, since last, %{private}.1lf", &v11, 12);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceDataDownloadManager::onFenceDownloadTimer(CLPersistentTimer *)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    sub_100D31600(a1);
    sub_100D2E364(a1);
    qword_102307CF8 = *(_QWORD *)&Current;
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181C50);
    v3 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Fence: ignore onFenceDownloadTimer, shutdown?", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181C50);
      LOWORD(v11) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: ignore onFenceDownloadTimer, shutdown?", &v11, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceDataDownloadManager::onFenceDownloadTimer(CLPersistentTimer *)", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

void sub_100D315E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102307D00);
  _Unwind_Resume(a1);
}

id sub_100D31600(uint64_t a1)
{
  id result;
  int v3;
  double v4;

  result = (id)sub_10019CFA0();
  if (*(_QWORD *)(a1 + 152))
  {
    v3 = (int)result;
    v4 = CFAbsoluteTimeGetCurrent() + 43200.0;
    if (v3 != 1)
      v4 = 1.79769313e308;
    return sub_1001F40D0(*(_QWORD *)(a1 + 152), v4);
  }
  return result;
}

void sub_100D3165C(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  int v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  _DWORD v24[2];
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;

  if (*a3 != 9)
  {
    if (*a3 != 6)
      return;
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181C50);
    v7 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v8 = *a3;
      v9 = *a4;
      v10 = a4[1];
      *(_DWORD *)buf = 67175169;
      v30 = v8;
      v31 = 1025;
      v32 = v9;
      v33 = 1025;
      v34 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Fence: kNotificationReachability, notification, %{private}d, reachability, from, %{private}d, to, %{private}d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181C50);
      v16 = *a3;
      v17 = *a4;
      v18 = a4[1];
      v24[0] = 67175169;
      v24[1] = v16;
      v25 = 1025;
      v26 = v17;
      v27 = 1025;
      v28 = v18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: kNotificationReachability, notification, %{private}d, reachability, from, %{private}d, to, %{private}d", v24, 20);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceDataDownloadManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    v11 = a4[1];
    if (v11 == 2)
    {
      if (*(_BYTE *)(a1 + 193))
        return;
      *(_WORD *)(a1 + 192) = 256;
    }
    else
    {
      if (v11 != 1)
      {
        if (v11)
        {
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_102181C50);
          v13 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Unhandled reachability notification", buf, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_102181C50);
            LOWORD(v24[0]) = 0;
            LODWORD(v23) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 16, "Unhandled reachability notification", v24, v23);
            v15 = (uint8_t *)v14;
            sub_100512490("Generic", 1, 0, 0, "void CLFenceDataDownloadManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v14);
            if (v15 != buf)
              free(v15);
          }
        }
        else
        {
          *(_WORD *)(a1 + 192) = 0;
        }
        return;
      }
      if (*(_BYTE *)(a1 + 192))
        return;
      *(_WORD *)(a1 + 192) = 1;
      if (*a4 != 1000)
        return;
    }
    sub_100D2E364(a1);
    return;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181C50);
  v12 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Fence: kNotificationMigration", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181C50);
    LOWORD(v24[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: kNotificationMigration", v24, 2);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceDataDownloadManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  sub_100D2E364(a1);
  *(_DWORD *)buf = 2;
  (*(void (**)(uint64_t, uint8_t *, _QWORD, uint64_t))(*(_QWORD *)a1 + 144))(a1, buf, 0, 0xFFFFFFFFLL);
}

void sub_100D31B40(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned __int8 *a4)
{
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v14[2];
  __int16 v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;

  if (*a3 == 5)
  {
    sub_100197040();
    if (sub_100195F08())
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181C50);
      v6 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        v7 = *(unsigned __int8 *)(a1 + 448);
        v8 = *a4;
        *(_DWORD *)buf = 67240448;
        v18 = v7;
        v19 = 1026;
        v20 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Fence: kNotificationCompanionConnectionUpdate, isNearby, from, %{public}d, to, %{public}d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102181C50);
        v10 = *(unsigned __int8 *)(a1 + 448);
        v11 = *a4;
        v14[0] = 67240448;
        v14[1] = v10;
        v15 = 1026;
        v16 = v11;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: kNotificationCompanionConnectionUpdate, isNearby, from, %{public}d, to, %{public}d", v14, 14);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceDataDownloadManager::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
      v9 = *a4;
      *(_BYTE *)(a1 + 448) = v9;
      if (v9)
        sub_100D2E364(a1);
    }
  }
}

void sub_100D31D40()
{
  operator new();
}

void sub_100D31DC0()
{
  operator delete();
}

uint64_t sub_100D31DE4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  id v11;
  void **v12;
  id v13;
  id v14;
  void *__p[2];
  uint64_t v17;
  __objc2_prot *v18;
  __objc2_prot *v19;

  *(_QWORD *)a1 = &off_102181DD0;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  objc_msgSend(a3, "silo");
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
  v19 = &OBJC_PROTOCOL___CLIntersiloServiceProtocol;
  objc_msgSend(+[CLIntersiloInterface sharedInterface](CLIntersiloInterface, "sharedInterface"), "extendSelectorInfoWithProtocol:bases:", &OBJC_PROTOCOL___CLNotifierServiceProtocol, +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v19, 1));
  v18 = &OBJC_PROTOCOL___CLIntersiloClientProtocol;
  objc_msgSend(+[CLIntersiloInterface sharedInterface](CLIntersiloInterface, "sharedInterface"), "extendSelectorInfoWithProtocol:bases:", &OBJC_PROTOCOL___CLNotifierServiceClientProtocol, +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v18, 1));
  v11 = objc_msgSend(a3, "silo");
  if (*(char *)(a2 + 31) < 0)
  {
    sub_100115CE4(__p, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a2 + 8);
    v17 = *(_QWORD *)(a2 + 24);
  }
  if (v17 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  v13 = +[CLIntersiloProxy proxyForRecipientObject:inSilo:recipientName:](CLIntersiloProxy, "proxyForRecipientObject:inSilo:recipientName:", v10, v11, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12, __p[0], __p[1], v17));
  *(_QWORD *)(a1 + 16) = v13;
  if (SHIBYTE(v17) < 0)
  {
    operator delete(__p[0]);
    v13 = *(id *)(a1 + 16);
  }
  v14 = v13;
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a3, "silo"));
  return a1;
}

void sub_100D31FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100D32004(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102181C30);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_102181C30);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLFenceDataDownloadManager_Type::Notification, NotificationData_T = CLFenceDataDownloadManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_100D32278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FB148);
}

BOOL sub_100D3228C(uint64_t a1, int a2, int *a3, char *a4)
{
  _BOOL8 result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  char v29;
  uint64_t **v30;
  char v31;
  uint64_t **v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  const char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _BYTE v41[12];
  __int16 v42;
  int v43;
  _BYTE buf[12];
  __int16 v45;
  int v46;
  char v47;
  void *v48;
  char v49;
  void *__p;
  char v51;
  void *v52;
  char v53;
  id v54;
  void *v55;
  void *v56;
  char v57;

  v40 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      v39 = v10;
      v16 = *a3;
      v19 = *(_QWORD *)(v10 + 48);
      v18 = v10 + 48;
      v17 = v19;
      if (!v19)
        goto LABEL_31;
      v20 = v18;
      do
      {
        v21 = *(_DWORD *)(v17 + 28);
        v22 = v21 < v16;
        if (v21 >= v16)
          v23 = (uint64_t *)v17;
        else
          v23 = (uint64_t *)(v17 + 8);
        if (!v22)
          v20 = v17;
        v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28))
LABEL_31:
        v20 = v18;
      v24 = *(_QWORD *)(a1 + 64);
      if (!v24)
        goto LABEL_42;
      v25 = a1 + 64;
      do
      {
        v26 = *(_DWORD *)(v24 + 32);
        v27 = v26 < v16;
        if (v26 >= v16)
          v28 = (uint64_t *)v24;
        else
          v28 = (uint64_t *)(v24 + 8);
        if (!v27)
          v25 = v24;
        v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(_QWORD *)v41 = v25;
        v33 = *(_QWORD *)(v25 + 56);
        v34 = *a4;
        *(_QWORD *)buf = &v40;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v25 + 40), &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v34;
        sub_1001157C0(buf);
        v57 = 0;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_100D349D4();
        }
        if (v55)
        {
          v56 = v55;
          operator delete(v55);
        }

        if (v53 < 0)
          operator delete(v52);
        if (v51 < 0)
          operator delete(__p);
        if (v49 < 0)
          operator delete(v48);
        if (v47 < 0)
          operator delete(*(void **)buf);
        if (v33)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        *(_QWORD *)v41 = a1 + 64;
        v29 = byte_1022FB149;
        HIDWORD(v38) = v16;
        *(_QWORD *)buf = (char *)&v38 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v29;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v30 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v30 + 8);
        v31 = *a4;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v32 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v40;
        *((_BYTE *)sub_1001AFE94(v32 + 5, &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v31;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v20 == v18)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(v39 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102181C30);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    v45 = 1026;
    v46 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102181C30);
    v35 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v35 = (_QWORD *)*v35;
    *(_DWORD *)v41 = 136446466;
    *(_QWORD *)&v41[4] = v35;
    v42 = 1026;
    v43 = v40;
    LODWORD(v38) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v41,
      v38);
    v37 = (char *)v36;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLFenceDataDownloadManager_Type::Notification, NotificationData_T = CLFenceDataDownloadManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v36);
    if (v37 != buf)
      free(v37);
    return 0;
  }
  return result;
}

void sub_100D32758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1004E2BD0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100D32788(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102181C30);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102181C30);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLFenceDataDownloadManager_Type::Notification, NotificationData_T = CLFenceDataDownloadManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_100D32A08(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102181C30);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102181C30);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLFenceDataDownloadManager_Type::Notification, NotificationData_T = CLFenceDataDownloadManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100D32D90(uint64_t a1, int *a2, std::string *this)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  std::string::size_type v18;
  std::string::pointer data;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v7 = *a2;
  v8 = v3;
  do
  {
    v9 = *(_DWORD *)(v4 + 32);
    v10 = v9 < v7;
    if (v9 >= v7)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (!v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v3)
    return 0;
  if (v7 < *(_DWORD *)(v8 + 32))
    return 0;
  v12 = *(_QWORD *)(v8 + 64);
  if (!v12)
    return 0;
  std::string::operator=(this, *(const std::string **)(v8 + 64));
  std::string::operator=(this + 1, (const std::string *)(v12 + 24));
  std::string::operator=(this + 2, (const std::string *)(v12 + 48));
  v13 = *(_OWORD *)(v12 + 88);
  v14 = *(_OWORD *)(v12 + 104);
  v15 = *(_OWORD *)(v12 + 120);
  *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = *(_OWORD *)(v12 + 72);
  *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v15;
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = v14;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = v13;
  v16 = *(_OWORD *)(v12 + 152);
  v17 = *(_OWORD *)(v12 + 168);
  v18 = *(_QWORD *)(v12 + 181);
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[2] = *(_OWORD *)(v12 + 136);
  *(std::string::size_type *)((char *)&this[7].__r_.__value_.__r.__words[1] + 5) = v18;
  *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = v17;
  *(_OWORD *)&this[6].__r_.__value_.__r.__words[1] = v16;
  std::string::operator=(this + 8, (const std::string *)(v12 + 192));
  data = this[9].__r_.__value_.__l.__data_;
  this[9].__r_.__value_.__r.__words[0] = (std::string::size_type)*(id *)(v12 + 216);

  if ((std::string *)v12 != this)
    sub_1002F3538(&this[9].__r_.__value_.__s.__data_[8], *(char **)(v12 + 224), *(_QWORD *)(v12 + 232), (uint64_t)(*(_QWORD *)(v12 + 232) - *(_QWORD *)(v12 + 224)) >> 4);
  this[10].__r_.__value_.__s.__data_[8] = *(_BYTE *)(v12 + 248);
  return 1;
}

uint64_t sub_100D32EB0(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t **v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int v10;
  __int128 v11;
  int *v12;

  sub_100D34314(a3, &v11);
  v10 = *a2;
  v12 = &v10;
  v5 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101B9EB60, &v12);
  sub_1002B7674((uint64_t)(v5 + 8), &v11);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_100D32F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100D32F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8[2];
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  id v16;
  void *__p;
  void *v18;
  char v19;

  sub_1001157C0((char *)v8);
  v19 = 0;
  (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v8, a3, a4, 0);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }

  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12);
  if (v11 < 0)
    operator delete(v10);
  if (v9 < 0)
    operator delete(v8[0]);
}

void sub_100D3303C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1004E2BD0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100D33050(uint64_t a1, signed __int32 *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  os_activity_scope_state_s state;
  uint64_t buf;
  _BYTE v29[20];
  __int16 v30;
  _QWORD *v31;
  __int16 v32;
  std::__shared_weak_count *v33;
  _QWORD **v34;
  _QWORD *v35[3];
  std::__shared_weak_count *v36;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102181C30);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      buf = 68289794;
      *(_WORD *)v29 = 2082;
      *(_QWORD *)&v29[2] = "";
      *(_WORD *)&v29[10] = 2082;
      *(_QWORD *)&v29[12] = "activity";
      v30 = 2082;
      v31 = v10;
      v32 = 2050;
      v33 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", (uint8_t *)&buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v34 = v35;
      memset(v35, 0, sizeof(v35));
      v36 = 0;
      sub_1004A6D60((uint64_t)&buf, a2, (uint64_t)&v34);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)&buf);
      v18 = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v29, *(_QWORD **)&v29[8]);
      v21 = v36;
      if (v36)
      {
        v22 = (unint64_t *)&v36->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v34, v35[0]);
    }
    if (a4)
    {
      sub_100D34314(a3, &buf);
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)&buf);
      v24 = *(std::__shared_weak_count **)v29;
      if (*(_QWORD *)v29)
      {
        v25 = (unint64_t *)(*(_QWORD *)v29 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_100D33DA0();
    os_activity_scope_leave(&state);
  }
}

void sub_100D3366C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100D336B8(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102181C30);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102181C30);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLFenceDataDownloadManager_Type::Notification, NotificationData_T = CLFenceDataDownloadManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102181C30);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102181C30);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLFenceDataDownloadManager_Type::Notification, NotificationData_T = CLFenceDataDownloadManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_102181C30);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102181C30);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLFenceDataDownloadManager_Type::Notification, NotificationData_T = CLFenceDataDownloadManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_100D33C68(uint64_t a1)
{
  sub_100D34974(a1);
  operator delete();
}

id sub_100D33C8C(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_100D34550(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_100D33CD8(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100D33D04(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        sub_1009EF7A4((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_100D33D74(id a1)
{
  qword_1022A0068 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_100D33DA0()
{
  operator new();
}

void sub_100D33E3C()
{
  operator delete();
}

void sub_100D33E60(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_100D34550(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_100D34238(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102181C30);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102181C30);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLFenceDataDownloadManager_Type::Notification, NotificationData_T = CLFenceDataDownloadManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_100D34238(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_100D34550(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

uint64_t sub_100D34314@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x118uLL);
  result = sub_100D3436C((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_100D34358(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100D3436C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_102181D60;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1004E5748((char *)(a1 + 24), (__int128 *)a2);
  *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 248);
  return a1;
}

void sub_100D343B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100D343C4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102181D60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100D343D8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102181D60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100D3440C(uint64_t a1)
{
  char v1;

  sub_100D34434((uint64_t)&v1, a1 + 24);
}

void sub_100D34434(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 224);
  if (v3)
  {
    *(_QWORD *)(a2 + 232) = v3;
    operator delete(v3);
  }

  if (*(char *)(a2 + 215) < 0)
    operator delete(*(void **)(a2 + 192));
  if (*(char *)(a2 + 71) < 0)
    operator delete(*(void **)(a2 + 48));
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t sub_100D344B4(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    v2 = *(void **)(v1 + 224);
    if (v2)
    {
      *(_QWORD *)(v1 + 232) = v2;
      operator delete(v2);
    }

    if (*(char *)(v1 + 215) < 0)
      operator delete(*(void **)(v1 + 192));
    if (*(char *)(v1 + 71) < 0)
      operator delete(*(void **)(v1 + 48));
    if (*(char *)(v1 + 47) < 0)
      operator delete(*(void **)(v1 + 24));
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete();
  }
  return result;
}

id sub_100D34550(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_100D3459C(a1);
  else
    return 0;
}

id sub_100D3459C(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102181DA0);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C22571 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102181DA0);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102181DA0);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C22571 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102181DA0);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLFenceDataDownloadManager_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_100D34948(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_100D34974(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = &off_102181DD0;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_100D349D4()
{
  operator new();
}

void sub_100D34A70()
{
  operator delete();
}

uint64_t sub_100D34A94(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    v2 = *(void **)(v1 + 224);
    if (v2)
    {
      *(_QWORD *)(v1 + 232) = v2;
      operator delete(v2);
    }

    if (*(char *)(v1 + 215) < 0)
      operator delete(*(void **)(v1 + 192));
    if (*(char *)(v1 + 71) < 0)
      operator delete(*(void **)(v1 + 48));
    if (*(char *)(v1 + 47) < 0)
      operator delete(*(void **)(v1 + 24));
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete();
  }
  return result;
}

void sub_100D34BD4(id a1)
{
  qword_102307E28 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLPressureStatsCollectorSilo"));
}

void sub_100D34C44(id a1)
{
  char v1;

  if ((sub_1001E4BF4() & 0x10) != 0)
  {
    sub_100197040();
    v1 = sub_100195F08();
  }
  else
  {
    v1 = 0;
  }
  byte_102307E38 = v1;
}

void sub_100D34FFC()
{
  operator delete();
}

id sub_100D35020(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _objc_msgSend(a4, "onDaemonStatus:data:", a2, a3);
}

id sub_100D35030(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "onPressureData:", a1);
}

void sub_100D35958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,void *a56,uint64_t a57)
{
  void *v57;
  int v58;

  if (v58 < 0)
    operator delete(v57);
  sub_10047F25C(&a47);
  if (__p)
  {
    a54 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a56)
  {
    a57 = (uint64_t)a56;
    operator delete(a56);
  }
  _Unwind_Resume(a1);
}

float sub_100D35A10(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  float v3;
  float *v4;
  float v5;
  float *v7;
  float *v8;
  uint64_t v9;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  sub_10027205C(&v7, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v1 = v8 - v7;
  if (v8 != v7)
  {
    if (v1 <= 1)
      v2 = 1;
    else
      v2 = v8 - v7;
    v3 = 0.0;
    v4 = v7;
    do
    {
      v5 = *v4++;
      v3 = v3 + v5;
      --v2;
    }
    while (v2);
    goto LABEL_9;
  }
  v3 = 0.0;
  if (v7)
  {
LABEL_9:
    v8 = v7;
    operator delete(v7);
  }
  return v3 / (float)v1;
}

void sub_100D368BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100D370F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  sub_100D37540((uint64_t)&a27);
  if (*(char *)(v27 - 161) < 0)
    operator delete(*(void **)(v27 - 184));
  _Unwind_Resume(a1);
}

uint64_t sub_100D37428(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void sub_100D37514(id a1)
{
  qword_10229FD78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

uint64_t sub_100D37540(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void **v10;

  v10 = (void **)(a1 + 208);
  sub_100259608(&v10);
  v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(_QWORD *)(a1 + 192) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 160);
  if (v3)
  {
    *(_QWORD *)(a1 + 168) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 136);
  if (v4)
  {
    *(_QWORD *)(a1 + 144) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 112);
  if (v5)
  {
    *(_QWORD *)(a1 + 120) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 88);
  if (v6)
  {
    *(_QWORD *)(a1 + 96) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 64);
  if (v7)
  {
    *(_QWORD *)(a1 + 72) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 40);
  if (v8)
  {
    *(_QWORD *)(a1 + 48) = v8;
    operator delete(v8);
  }
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_100D375F8(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

unsigned __int8 *sub_100D37624(unsigned __int8 *a1, const char *a2, _QWORD *a3, unsigned __int8 a4)
{
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  int v12;
  int v13;
  const char *v14;
  char *v15;
  NSObject *v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  int v20;
  void **v21;
  char *v22;
  NSObject *v23;
  int v24;
  int v25;
  const char *v26;
  NSObject *v27;
  int v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v32;
  int v33;
  void **v34;
  char *v35;
  void *v36[2];
  char v37;
  _QWORD v38[2];
  uint64_t v39;
  _QWORD v40[10];
  char v41;
  uint64_t v42;
  _BYTE __p[12];
  __int16 v44;
  int v45;
  __int16 v46;
  void **v47;
  _BYTE buf[18];
  __int16 v49;
  _BYTE *v50;

  *a1 = 0;
  *((_QWORD *)a1 + 1) = *a3;
  v6 = a1 + 8;
  a1[16] = a4;
  v7 = sub_100127B9C();
  sub_100081C10(v7, buf);
  *a1 = sub_10052655C(*(uint64_t *)buf, a2, v6);
  v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  sub_100263E50((uint64_t)v38);
  std::ostream::operator<<(&v39, *v6);
  if (!a1[16])
  {
    if (*a1)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102181E48);
      v16 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *a1;
        std::stringbuf::str(__p, v40);
        v18 = SBYTE3(v47) >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = a2;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v17;
        v49 = 2080;
        v50 = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v47) < 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_53;
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102181E48);
      v19 = qword_10229FC78;
      v20 = *a1;
      std::stringbuf::str(v36, v40);
      if (v37 >= 0)
        v21 = v36;
      else
        v21 = (void **)v36[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = a2;
      v44 = 1024;
      v45 = v20;
      v46 = 2080;
      v47 = v21;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v19, 0, "motion default,%s,set,%d,value,%s", __p, 28, (const char *)v36[0]);
      v15 = v22;
      if (v37 < 0)
        operator delete(v36[0]);
    }
    else
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102181E48);
      v27 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        v28 = *a1;
        std::stringbuf::str(__p, v40);
        v29 = SBYTE3(v47) >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = a2;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v28;
        v49 = 2080;
        v50 = v29;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v47) < 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_53;
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102181E48);
      v32 = qword_10229FC78;
      v33 = *a1;
      std::stringbuf::str(v36, v40);
      if (v37 >= 0)
        v34 = v36;
      else
        v34 = (void **)v36[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = a2;
      v44 = 1024;
      v45 = v33;
      v46 = 2080;
      v47 = v34;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v32, 1, "motion default,%s,set,%d,value,%s", __p, 28, (const char *)v36[0]);
      v15 = v35;
      if (v37 < 0)
        operator delete(v36[0]);
    }
    sub_100512490("Generic", 1, 0, 2, "CLMotionDefaultsWrite<long>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = long]", "%s\n", v15);
    if (v15 == buf)
      goto LABEL_53;
    goto LABEL_64;
  }
  if (*a1)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102181E48);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *a1;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102181E48);
      v13 = *a1;
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = a2;
      v44 = 1024;
      v45 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "motion default,%s,set,%d", __p, 18);
      v15 = (char *)v14;
      sub_100512490("Generic", 1, 0, 2, "CLMotionDefaultsWrite<long>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = long]", "%s\n", v14);
      goto LABEL_42;
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102181E48);
    v23 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      v24 = *a1;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102181E48);
      v25 = *a1;
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = a2;
      v44 = 1024;
      v45 = v25;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "motion default,%s,set,%d", __p, 18);
      v15 = (char *)v26;
      sub_100512490("Generic", 1, 0, 2, "CLMotionDefaultsWrite<long>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = long]", "%s\n", v26);
LABEL_42:
      if (v15 == buf)
        goto LABEL_53;
LABEL_64:
      free(v15);
    }
  }
LABEL_53:
  *(_QWORD *)((char *)v38
  v39 = v30;
  if (v41 < 0)
    operator delete((void *)v40[8]);
  std::streambuf::~streambuf(v40);
  std::ios::~ios(&v42);
  return a1;
}

void sub_100D37DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D37E40()
{
  size_t v0;
  uint64_t v1;
  void *v2;
  uint64_t *v3;
  size_t v4;
  uint64_t v5;
  void *v6;
  uint64_t *v7;
  size_t v8;
  uint64_t v9;
  void *v10;
  uint64_t *v11;
  size_t v12;
  uint64_t v13;
  void *v14;
  uint64_t *v15;
  size_t v16;
  uint64_t v17;
  void *v18;
  uint64_t *v19;
  size_t v20;
  uint64_t v21;
  void *v22;
  uint64_t *v23;
  size_t v24;
  uint64_t v25;
  void *v26;
  uint64_t *v27;
  size_t v28;
  uint64_t v29;
  void *v30;
  uint64_t *v31;
  size_t v32;
  uint64_t v33;
  void *v34;
  uint64_t *v35;
  size_t v36;
  uint64_t v37;
  void *v38;
  uint64_t *v39;
  size_t v40;
  uint64_t v41;
  void *v42;
  uint64_t *v43;

  sub_1015A2E04(&qword_102307D08, "CLPressureStatsCollector");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102307D08, (void *)&_mh_execute_header);
  if (byte_102307D1F >= 0)
    v0 = byte_102307D1F;
  else
    v0 = qword_102307D10;
  v1 = sub_100259584((uint64_t)&qword_102307D20, v0 + 11);
  if (*(char *)(v1 + 23) >= 0)
    v2 = (void *)v1;
  else
    v2 = *(void **)v1;
  if (v0)
  {
    if (byte_102307D1F >= 0)
      v3 = &qword_102307D08;
    else
      v3 = (uint64_t *)qword_102307D08;
    memmove(v2, v3, v0);
  }
  strcpy((char *)v2 + v0, "_LastUpdate");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102307D20, (void *)&_mh_execute_header);
  if (byte_102307D1F >= 0)
    v4 = byte_102307D1F;
  else
    v4 = qword_102307D10;
  v5 = sub_100259584((uint64_t)&qword_102307D38, v4 + 12);
  if (*(char *)(v5 + 23) >= 0)
    v6 = (void *)v5;
  else
    v6 = *(void **)v5;
  if (v4)
  {
    if (byte_102307D1F >= 0)
      v7 = &qword_102307D08;
    else
      v7 = (uint64_t *)qword_102307D08;
    memmove(v6, v7, v4);
  }
  strcpy((char *)v6 + v4, "_MeanAbsPErr");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102307D38, (void *)&_mh_execute_header);
  if (byte_102307D1F >= 0)
    v8 = byte_102307D1F;
  else
    v8 = qword_102307D10;
  v9 = sub_100259584((uint64_t)&qword_102307D50, v8 + 8);
  if (*(char *)(v9 + 23) >= 0)
    v10 = (void *)v9;
  else
    v10 = *(void **)v9;
  if (v8)
  {
    if (byte_102307D1F >= 0)
      v11 = &qword_102307D08;
    else
      v11 = (uint64_t *)qword_102307D08;
    memmove(v10, v11, v8);
  }
  strcpy((char *)v10 + v8, "_VarPErr");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102307D50, (void *)&_mh_execute_header);
  if (byte_102307D1F >= 0)
    v12 = byte_102307D1F;
  else
    v12 = qword_102307D10;
  v13 = sub_100259584((uint64_t)&qword_102307D68, v12 + 14);
  if (*(char *)(v13 + 23) >= 0)
    v14 = (void *)v13;
  else
    v14 = *(void **)v13;
  if (v12)
  {
    if (byte_102307D1F >= 0)
      v15 = &qword_102307D08;
    else
      v15 = (uint64_t *)qword_102307D08;
    memmove(v14, v15, v12);
  }
  strcpy((char *)v14 + v12, "_DeltaPressure");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102307D68, (void *)&_mh_execute_header);
  if (byte_102307D1F >= 0)
    v16 = byte_102307D1F;
  else
    v16 = qword_102307D10;
  v17 = sub_100259584((uint64_t)&qword_102307D80, v16 + 17);
  if (*(char *)(v17 + 23) >= 0)
    v18 = (void *)v17;
  else
    v18 = *(void **)v17;
  if (v16)
  {
    if (byte_102307D1F >= 0)
      v19 = &qword_102307D08;
    else
      v19 = (uint64_t *)qword_102307D08;
    memmove(v18, v19, v16);
  }
  strcpy((char *)v18 + v16, "_DeltaTemperature");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102307D80, (void *)&_mh_execute_header);
  if (byte_102307D1F >= 0)
    v20 = byte_102307D1F;
  else
    v20 = qword_102307D10;
  v21 = sub_100259584((uint64_t)&qword_102307D98, v20 + 4);
  if (*(char *)(v21 + 23) >= 0)
    v22 = (void *)v21;
  else
    v22 = *(void **)v21;
  if (v20)
  {
    if (byte_102307D1F >= 0)
      v23 = &qword_102307D08;
    else
      v23 = (uint64_t *)qword_102307D08;
    memmove(v22, v23, v20);
  }
  strcpy((char *)v22 + v20, "_TCO");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102307D98, (void *)&_mh_execute_header);
  if (byte_102307D1F >= 0)
    v24 = byte_102307D1F;
  else
    v24 = qword_102307D10;
  v25 = sub_100259584((uint64_t)&qword_102307DB0, v24 + 18);
  if (*(char *)(v25 + 23) >= 0)
    v26 = (void *)v25;
  else
    v26 = *(void **)v25;
  if (v24)
  {
    if (byte_102307D1F >= 0)
      v27 = &qword_102307D08;
    else
      v27 = (uint64_t *)qword_102307D08;
    memmove(v26, v27, v24);
  }
  strcpy((char *)v26 + v24, "_MedianAbsDevOfTCO");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102307DB0, (void *)&_mh_execute_header);
  if (byte_102307D1F >= 0)
    v28 = byte_102307D1F;
  else
    v28 = qword_102307D10;
  v29 = sub_100259584((uint64_t)&qword_102307DC8, v28 + 15);
  if (*(char *)(v29 + 23) >= 0)
    v30 = (void *)v29;
  else
    v30 = *(void **)v29;
  if (v28)
  {
    if (byte_102307D1F >= 0)
      v31 = &qword_102307D08;
    else
      v31 = (uint64_t *)qword_102307D08;
    memmove(v30, v31, v28);
  }
  strcpy((char *)v30 + v28, "_FlightOfStairs");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102307DC8, (void *)&_mh_execute_header);
  if (byte_102307D1F >= 0)
    v32 = byte_102307D1F;
  else
    v32 = qword_102307D10;
  v33 = sub_100259584((uint64_t)&qword_102307DE0, v32 + 12);
  if (*(char *)(v33 + 23) >= 0)
    v34 = (void *)v33;
  else
    v34 = *(void **)v33;
  if (v32)
  {
    if (byte_102307D1F >= 0)
      v35 = &qword_102307D08;
    else
      v35 = (uint64_t *)qword_102307D08;
    memmove(v34, v35, v32);
  }
  strcpy((char *)v34 + v32, "_FactoryTime");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102307DE0, (void *)&_mh_execute_header);
  if (byte_102307D1F >= 0)
    v36 = byte_102307D1F;
  else
    v36 = qword_102307D10;
  v37 = sub_100259584((uint64_t)&qword_102307DF8, v36 + 18);
  if (*(char *)(v37 + 23) >= 0)
    v38 = (void *)v37;
  else
    v38 = *(void **)v37;
  if (v36)
  {
    if (byte_102307D1F >= 0)
      v39 = &qword_102307D08;
    else
      v39 = (uint64_t *)qword_102307D08;
    memmove(v38, v39, v36);
  }
  strcpy((char *)v38 + v36, "_LastAwdSubmission");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102307DF8, (void *)&_mh_execute_header);
  if (byte_102307D1F >= 0)
    v40 = byte_102307D1F;
  else
    v40 = qword_102307D10;
  v41 = sub_100259584((uint64_t)&qword_102307E10, v40 + 19);
  if (*(char *)(v41 + 23) >= 0)
    v42 = (void *)v41;
  else
    v42 = *(void **)v41;
  if (v40)
  {
    if (byte_102307D1F >= 0)
      v43 = &qword_102307D08;
    else
      v43 = (uint64_t *)qword_102307D08;
    memmove(v42, v43, v40);
  }
  strcpy((char *)v42 + v40, "_CAEnabledTimestamp");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102307E10, (void *)&_mh_execute_header);
}

void sub_100D384F8(uint64_t a1, void *a2)
{
  _QWORD *v3;
  id v4;
  _QWORD *v5;

  v3 = (_QWORD *)sub_100D388E8(a1, "FenceAuthorizationManager", a2);
  *v3 = off_102181E78;
  v3[14] = 0;
  sub_10022142C(v3 + 15);
  *(_OWORD *)(a1 + 144) = 0u;
  *(_BYTE *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 184) = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:forClient:", CFSTR("CLClientAuthorizationCache"), CFSTR("CLFenceManager"));
  v4 = objc_alloc_init((Class)NSMutableDictionary);
  *(_QWORD *)(a1 + 208) = off_102141E98;
  *(_QWORD *)(a1 + 192) = v4;
  *(_QWORD *)(a1 + 200) = 0;
  v5 = operator new(0x20uLL);
  v5[2] = 0;
  *((_DWORD *)v5 + 6) = 31337;
  *v5 = off_102141ED0;
  v5[1] = 0;
  *(_QWORD *)(a1 + 216) = v5 + 3;
  *(_QWORD *)(a1 + 224) = v5;
  sub_1001B6A0C();
}

void sub_100D38808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  uint64_t v16;
  id *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (a15 < 0)
    operator delete(__p);
  sub_100090A0C(v18);
  sub_1004E591C(v17);
  v21 = v15[21];
  v15[21] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = v15[20];
  v15[20] = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = v15[19];
  v15[19] = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *v19;
  *v19 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  sub_100261F44(v16);
  sub_100D395FC((uint64_t)v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100D388E8(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_1021820C0;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100D38968(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_100D38984(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLFenceAuthorizationManager::onStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102182030);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceAuthorizationManager::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102182030);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceAuthorizationManager::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  sub_100D39808(a4, v6, a2);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_100D38B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100D38B54(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLFenceAuthorizationManager::onDataProtectionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102182030);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceAuthorizationManager::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102182030);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceAuthorizationManager::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100D3BB8C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100D38D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100D38D2C(uint64_t a1, _DWORD *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLFenceAuthorizationManager::onFenceManagerNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102182030);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceAuthorizationManager::onFenceManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102182030);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceAuthorizationManager::onFenceManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100D3AC04(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100D38EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100D38F04(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a1 + 112);
    v6 = *(unsigned __int8 *)(a1 + 136);
    *(_DWORD *)buf = 134284035;
    v18 = v5;
    v19 = 1026;
    v20 = v6;
    v21 = 2082;
    v22 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: createFenceDatabase, fFenceDatabase, %{private}p, fWasUnlockedSinceBoot, %{public}d, reason, %{public}s", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v7 = *(_QWORD *)(a1 + 112);
    v8 = *(unsigned __int8 *)(a1 + 136);
    v11 = 134284035;
    v12 = v7;
    v13 = 1026;
    v14 = v8;
    v15 = 2082;
    v16 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: createFenceDatabase, fFenceDatabase, %{private}p, fWasUnlockedSinceBoot, %{public}d, reason, %{public}s", &v11, 28);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceAuthorizationManager::createFenceDatabase(const char *)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (!*(_QWORD *)(a1 + 112))
  {
    if (*(_BYTE *)(a1 + 136))
      operator new();
  }
}

void sub_100D39148()
{
  operator delete();
}

void sub_100D39174(uint64_t a1)
{
  BOOL v1;
  NSObject *v4;
  uint64_t v5[3];
  uint8_t buf[8];
  _WORD v7[5];

  if (&NRPairedDeviceRegistryDeviceDidBecomeInactive)
    v1 = &NRPairedDeviceRegistryDeviceDidBecomeActive == 0;
  else
    v1 = 1;
  if (!v1 && &NRPairedDeviceRegistryDeviceDidUnpairNotification != 0)
  {
    memset(v5, 0, sizeof(v5));
    sub_100D4124C();
    if (*(_BYTE *)(a1 + 136))
      sub_100948F48(*(_QWORD *)(a1 + 112), v5);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v4 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      v7[0] = 2082;
      *(_QWORD *)&v7[1] = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Fence: #FenceHandoff initHandoffFenceMonitoring, no region monitoring before the first unlock\"}", buf, 0x12u);
    }
    *(_QWORD *)buf = v5;
    sub_100D44344((void ***)buf);
  }
}

void sub_100D39590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, char a18, uint64_t a19, uint64_t a20,char *a21,std::__shared_weak_count *a22)
{
  a21 = &a18;
  sub_100D44344((void ***)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_100D395FC(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021820C0;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_100D39674(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_102181E78;

  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  -[NSNotificationCenter removeObserver:](+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"), "removeObserver:", *(_QWORD *)(a1 + 200));

  *(_QWORD *)(a1 + 200) = 0;
  sub_100090A0C((_QWORD *)(a1 + 208));

  v2 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_100261F44(a1 + 120);
  return sub_100D395FC(a1);
}

void sub_100D3975C(uint64_t a1)
{
  sub_100D39674(a1);
  operator delete();
}

uint64_t sub_100D39780()
{
  return 1;
}

uint64_t sub_100D39788()
{
  return 1;
}

_QWORD *sub_100D39790@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

void sub_100D39808(uint64_t a1, uint64_t a2, int *a3)
{
  uint8_t *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v8;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  int v18;
  const char *v19;
  uint8_t buf[4];
  const char *v21;

  if (*a3 == 9)
  {
    if (*(_QWORD *)(a1 + 112))
      goto LABEL_9;
    v4 = (uint8_t *)&qword_1022A0000;
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v5 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      v21 = "kNotificationMigration";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Fence: sMessage, %{public}s, fFenceDatabase is NULL", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102182050);
      v18 = 136446210;
      v19 = "kNotificationMigration";
      v4 = buf;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Fence: sMessage, %{public}s, fFenceDatabase is NULL", &v18, 12);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "void CLFenceAuthorizationManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    if (*(_QWORD *)(a1 + 112))
    {
LABEL_9:
      v4 = (uint8_t *)&qword_1022A0000;
      if (qword_1022A0060 == -1)
      {
LABEL_10:
        v6 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Fence: Got kNotificationMigration", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (*((_QWORD *)v4 + 12) != -1)
            dispatch_once(&qword_1022A0060, &stru_102182050);
          LOWORD(v18) = 0;
          LODWORD(v17) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: Got kNotificationMigration", &v18, v17);
          v14 = (uint8_t *)v13;
          sub_100512490("Generic", 1, 0, 2, "void CLFenceAuthorizationManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v13);
          if (v14 != buf)
            free(v14);
        }
        sub_100D39C70(a1);
        return;
      }
    }
    else
    {
      sub_101927B84();
    }
    dispatch_once(&qword_1022A0060, &stru_102182050);
    goto LABEL_10;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  v8 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *a3;
    *(_DWORD *)buf = 67240192;
    LODWORD(v21) = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Fence: unknown notification, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v10 = *a3;
    v18 = 67240192;
    LODWORD(v19) = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#Warning Fence: unknown notification, %{public}d", &v18, 8);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceAuthorizationManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
}

void sub_100D39C70(uint64_t a1)
{
  int v2;
  NSObject *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  _QWORD v9[4];
  uint8_t buf[8];

  if (*(_QWORD *)(a1 + 112))
  {
    v2 = sub_10019CFA0();
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v3 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v2 == 1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Fence: updateAuthorizedClients, locationServicesEnabled, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102182050);
      LODWORD(v9[0]) = 67240192;
      HIDWORD(v9[0]) = v2 == 1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: updateAuthorizedClients, locationServicesEnabled, %{public}d", v9, 8);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceAuthorizationManager::updateAuthorizedClients()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    memset(v9, 0, 24);
    sub_100945690(*(_QWORD *)(a1 + 112));
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Fence: updateAuthorizedClients, can't add fence before the first unlock", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    LOWORD(v9[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Fence: updateAuthorizedClients, can't add fence before the first unlock", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "void CLFenceAuthorizationManager::updateAuthorizedClients()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

void sub_100D3A160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a15;
  sub_100259608(&a19);
  _Unwind_Resume(a1);
}

void sub_100D3A18C(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[8];
  __int16 v11;
  const char *v12;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    v11 = 2082;
    v12 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLFenceAuthorizationManager::reinitFenceMonitoring\"}", buf, 0x12u);
  }
  if (*(_QWORD *)(a1 + 112))
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v3 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Fetching all fences for reinit", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102182050);
      LOWORD(v6) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Fetching all fences for reinit", &v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceAuthorizationManager::reinitFenceMonitoring()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    v7 = 0;
    v8 = 0;
    v9 = 0;
    sub_10093DF44(*(_QWORD *)(a1 + 112));
  }
}

void sub_100D3A6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void **a25)
{
  a25 = (void **)&a22;
  sub_10091BBB0(&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_100D3A758(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  NSObject *v16;
  int v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  id v23;
  __int16 v24;
  id v25;

  if (!sub_100D3DB14(a1, (uint64_t *)a2))
    goto LABEL_27;
  v4 = sub_100D3BA34(a1, (uint64_t *)(a2 + 48));
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  v5 = qword_1022A0068;
  if (!os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    if (v4)
      goto LABEL_8;
LABEL_27:
    v6 = 0;
    goto LABEL_28;
  }
  v18 = 68289282;
  v19 = 0;
  v20 = 2082;
  v21 = "";
  v22 = 1026;
  LODWORD(v23) = v4;
  _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#FenceHandoff isOnBehalfBundleAuthorized\", \"isAuthorized\":%{public}hhd}", (uint8_t *)&v18, 0x18u);
  v6 = 0;
  if ((v4 & 1) == 0)
    goto LABEL_28;
LABEL_8:
  v7 = *(void **)(a2 + 216);
  if (!v7)
    goto LABEL_33;
  v6 = (uint64_t)objc_msgSend(v7, "isEqual:", *(_QWORD *)(a1 + 176));
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  v8 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v9 = objc_msgSend(objc_msgSend(*(id *)(a2 + 216), "UUIDString"), "UTF8String");
    v10 = objc_msgSend(objc_msgSend(*(id *)(a1 + 176), "UUIDString"), "UTF8String");
    v18 = 68289538;
    v19 = 0;
    v20 = 2082;
    v21 = "";
    v22 = 2082;
    v23 = v9;
    v24 = 2082;
    v25 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#FenceHandoff deviceId\", \"fenceDeviceId\":%{public, location:escape_only}s, \"fActiveDeviceId\":%{public, location:escape_only}s}", (uint8_t *)&v18, 0x26u);
  }
  if (!(_DWORD)v6)
    goto LABEL_28;
  v11 = *(unsigned __int8 *)(a2 + 215);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a2 + 200);
  if (!v11)
  {
LABEL_33:
    v6 = 1;
    goto LABEL_28;
  }
  v12 = objc_msgSend(*(id *)(a1 + 192), "objectForKeyedSubscript:", *(_QWORD *)(a2 + 216));
  if (*(char *)(a2 + 215) >= 0)
    v13 = a2 + 192;
  else
    v13 = *(_QWORD *)(a2 + 192);
  v6 = (uint64_t)objc_msgSend(objc_msgSend(v12, "objectForKeyedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13)), "BOOLValue");
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  v14 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a2 + 215) >= 0)
      v15 = (void *)(a2 + 192);
    else
      v15 = *(void **)(a2 + 192);
    v18 = 68289538;
    v19 = 0;
    v20 = 2082;
    v21 = "";
    v22 = 2082;
    v23 = v15;
    v24 = 1026;
    LODWORD(v25) = v6;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#FenceHandoff handoffTag\", \"fenceHandoffTag\":%{public, location:escape_only}s, \"dictHandoffTagValue\":%{public}hhd}", (uint8_t *)&v18, 0x22u);
LABEL_28:
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
  }
  v16 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v18 = 68289282;
    v19 = 0;
    v20 = 2082;
    v21 = "";
    v22 = 1026;
    LODWORD(v23) = v6;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Fence: isFenceAuthorized\", \"isAuthorized\":%{public}hhd}", (uint8_t *)&v18, 0x18u);
  }
  return v6;
}

void sub_100D3AAE4(uint64_t a1, __int128 *a2, char a3)
{
  void *v5;
  _QWORD v6[5];
  __int128 __p;
  uint64_t v8;
  char v9;
  __int128 __dst;
  uint64_t v11;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(&__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    __dst = *a2;
    v11 = *((_QWORD *)a2 + 2);
  }
  v5 = *(void **)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3321888768;
  v6[2] = sub_100D40FA4;
  v6[3] = &unk_102181F48;
  v6[4] = a1;
  if (SHIBYTE(v11) < 0)
  {
    sub_100115CE4(&__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    __p = __dst;
    v8 = v11;
  }
  v9 = a3;
  objc_msgSend(v5, "async:", v6);
  if (SHIBYTE(v8) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v11) < 0)
    operator delete((void *)__dst);
}

void sub_100D3ABD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (*(char *)(v20 - 41) < 0)
    operator delete(*(void **)(v20 - 64));
  _Unwind_Resume(exception_object);
}

void sub_100D3AC04(uint64_t a1, uint64_t a2, _DWORD *a3, __int128 *a4)
{
  NSObject *v6;
  _BYTE *v7;
  NSObject *v8;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  const char *v13;
  char *v14;
  _BYTE buf[12];
  char v16;
  int v17;
  _BYTE *v18;
  _BYTE __p[12];
  char v20;

  if (*a3 == 10)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v6 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      sub_100C3B9BC((uint64_t)a4, __p);
      v7 = v20 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Received notification to remove failed fence, %s", buf, 0xCu);
      if (v20 < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102182050);
      v9 = qword_1022A0068;
      sub_100C3B9BC((uint64_t)a4, buf);
      if (v16 >= 0)
        v10 = buf;
      else
        v10 = *(_BYTE **)buf;
      v17 = 136315138;
      v18 = v10;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 2, "Received notification to remove failed fence, %s", (const char *)&v17);
      v12 = v11;
      if (v16 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "void CLFenceAuthorizationManager::onFenceManagerNotification(int, const CLFenceManager_Type::Notification &, const CLFenceManager_Type::NotificationData &)", "%s\n", v12);
      if (v12 != __p)
        free(v12);
    }
    if ((sub_100D3AF8C(a1, a4) & 1) == 0)
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102182050);
      v8 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__p = 136315138;
        *(_QWORD *)&__p[4] = "onFenceManagerNotification";
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%s, failed to remove fence without centroid", __p, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102182050);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "onFenceManagerNotification";
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0068, 0, "%s, failed to remove fence without centroid", buf);
        v14 = (char *)v13;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceAuthorizationManager::onFenceManagerNotification(int, const CLFenceManager_Type::Notification &, const CLFenceManager_Type::NotificationData &)", "%s\n", v13);
        if (v14 != __p)
          free(v14);
      }
    }
  }
}

uint64_t sub_100D3AF8C(uint64_t a1, __int128 *a2)
{
  NSObject *v4;
  uint64_t *v5;
  uint64_t *v6;
  NSObject *v7;
  uint64_t *v9;
  uint64_t *v10;
  const char *v11;
  char *v12;
  const char *v13;
  char *v14;
  int v15;
  uint64_t *v16;
  __int16 v17;
  uint64_t *v18;
  _BYTE buf[12];
  __int16 v20;
  uint64_t *v21;
  int v22;

  if (*(_QWORD *)(a1 + 112))
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v4 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a2 + 23) >= 0)
        v5 = (uint64_t *)a2;
      else
        v5 = *(uint64_t **)a2;
      if (*((char *)a2 + 47) >= 0)
        v6 = (uint64_t *)a2 + 3;
      else
        v6 = (uint64_t *)*((_QWORD *)a2 + 3);
      *(_DWORD *)buf = 136446467;
      *(_QWORD *)&buf[4] = v5;
      v20 = 2081;
      v21 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Removing fence %{public}s/%{private}s", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102182050);
      if (*((char *)a2 + 23) >= 0)
        v9 = (uint64_t *)a2;
      else
        v9 = *(uint64_t **)a2;
      if (*((char *)a2 + 47) >= 0)
        v10 = (uint64_t *)a2 + 3;
      else
        v10 = (uint64_t *)*((_QWORD *)a2 + 3);
      v15 = 136446467;
      v16 = v9;
      v17 = 2081;
      v18 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Removing fence %{public}s/%{private}s", &v15, 22);
      v12 = (char *)v11;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceAuthorizationManager::removeFence(const CLFenceManager_Type::Fence &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    sub_1004E5748(buf, a2);
    v22 = sub_100115D70((uint64_t)buf);
    sub_10093C638(*(_QWORD *)(a1 + 112), (uint64_t *)buf);
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  v7 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Fence: removeFence, can't remove fence before the first unlock", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    LOWORD(v15) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Fence: removeFence, can't remove fence before the first unlock", &v15, 2);
    v14 = (char *)v13;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLFenceAuthorizationManager::removeFence(const CLFenceManager_Type::Fence &)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  return 0;
}

void sub_100D3B3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D3B430(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  const char *v9;
  char *v10;
  const char *v11;
  const char *v12;
  char *v13;
  const char *v14;
  char *v15;
  int __p;
  const char *__p_4;
  __int128 buf;
  uint64_t v19;
  __int16 v20;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = "removeFences";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    __p = 136315138;
    __p_4 = "removeFences";
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "%s", (const char *)&__p);
    v10 = (char *)v9;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceAuthorizationManager::removeFences(const std::string &)", "%s\n", v9);
    if (v10 != (char *)&buf)
      free(v10);
  }
  if (*(_QWORD *)(a1 + 112))
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v5 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(a2 + 23) >= 0)
        v6 = a2;
      else
        v6 = *(_QWORD *)a2;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Removing all fences for %{public}s", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102182050);
      if (*(char *)(a2 + 23) >= 0)
        v11 = (const char *)a2;
      else
        v11 = *(const char **)a2;
      __p = 136446210;
      __p_4 = v11;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Removing all fences for %{public}s", &__p, 12);
      v13 = (char *)v12;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceAuthorizationManager::removeFences(const std::string &)", "%s\n", v12);
      if (v13 != (char *)&buf)
        free(v13);
    }
    buf = 0uLL;
    v20 = 0;
    v19 = 0;
    sub_1000C8140(*(_QWORD *)(a1 + 112), a2, (uint64_t *)&buf);
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  v7 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Fence: removeFences, can't remove fence before the first unlock", (uint8_t *)&buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    LOWORD(__p) = 0;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Fence: removeFences, can't remove fence before the first unlock", &__p, 2);
    v15 = (char *)v14;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLFenceAuthorizationManager::removeFences(const std::string &)", "%s\n", v14);
    if (v15 != (char *)&buf)
      free(v15);
  }
  return 0;
}

void sub_100D3B9EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, char *a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    a12 = __p;
    operator delete(__p);
  }
  __p = &a15;
  sub_10091BBB0((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100D3BA34(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t *v6;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t *v12;
  __int16 v13;
  int v14;

  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    v3 = a2;
    if (!*((_BYTE *)a2 + 23))
      goto LABEL_7;
LABEL_6:
    v4 = (uint64_t)objc_msgSend(objc_msgSend(*(id *)(a1 + 184), "syncgetAuthorizationContextIfClientIsNonZonal:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3)), "isAuthorizedForServiceType:", 14);
    goto LABEL_8;
  }
  if (a2[1])
  {
    v3 = (uint64_t *)*a2;
    goto LABEL_6;
  }
LABEL_7:
  v4 = 1;
LABEL_8:
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  v5 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0)
      v6 = a2;
    else
      v6 = (uint64_t *)*a2;
    v8[0] = 68289538;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2082;
    v12 = v6;
    v13 = 1026;
    v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Fence: isOnBehalfBundleAuthorized\", \"key\":%{public, location:escape_only}s, \"authorized\":%{public}hhd}", (uint8_t *)v8, 0x22u);
  }
  return v4;
}

void sub_100D3BB8C(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  int v6;
  BOOL v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  uint8_t *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  _BOOL4 v22;
  __int16 v23;
  int v24;
  uint8_t buf[8];
  uint64_t v26;
  _QWORD v27[203];

  if (!*a3)
  {
    v6 = *a4;
    if (*(_QWORD *)(a1 + 112))
      v7 = 0;
    else
      v7 = v6 == 1;
    v8 = v7;
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v9 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v10 = *a4;
      v11 = *(unsigned __int8 *)(a1 + 136);
      *(_DWORD *)buf = 67240960;
      *(_DWORD *)&buf[4] = v10;
      LOWORD(v26) = 1026;
      *(_DWORD *)((char *)&v26 + 2) = v11;
      HIWORD(v26) = 1026;
      LODWORD(v27[0]) = v6 == 1;
      WORD2(v27[0]) = 1026;
      *(_DWORD *)((char *)v27 + 6) = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Fence: notification, kNotificationEncryptedDataAvailability, data.availability, %{public}d, unlockedSinceBoot, from, %{public}d, to, %{public}d, isStartMonitoring, %{public}d", buf, 0x1Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102182050);
      v14 = *a4;
      v15 = *(unsigned __int8 *)(a1 + 136);
      LODWORD(v18) = 67240960;
      HIDWORD(v18) = v14;
      v19 = 1026;
      v20 = v15;
      v21 = 1026;
      v22 = v6 == 1;
      v23 = 1026;
      v24 = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: notification, kNotificationEncryptedDataAvailability, data.availability, %{public}d, unlockedSinceBoot, from, %{public}d, to, %{public}d, isStartMonitoring, %{public}d", &v18, 26);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceAuthorizationManager::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    if (*(_BYTE *)(a1 + 136))
      v12 = 1;
    else
      v12 = v6 == 1;
    v13 = v12;
    *(_BYTE *)(a1 + 136) = v13;
    if (!*(_QWORD *)(a1 + 112) && v13)
      sub_100D38F04(a1, (uint64_t)"kNotificationEncryptedDataAvailability");
    if (v8)
    {
      *(_QWORD *)buf = 0;
      v26 = 0;
      memset(v27, 0, 10);
      BYTE1(v27[1]) = sub_10019CFA0() == 1;
      LODWORD(v18) = 3;
      (*(void (**)(uint64_t, uint8_t **, uint8_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v18, buf, 0, 0xFFFFFFFFLL, 0);
      sub_100D39C70(a1);
      v18 = buf;
      sub_10091BBB0((void ***)&v18);
    }
  }
}

void sub_100D3BE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  a11 = (void **)&a15;
  sub_10091BBB0(&a11);
  _Unwind_Resume(a1);
}

void sub_100D3BE70(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  NSObject *v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;

  v3 = objc_msgSend(a2, "userInfo");
  v4 = objc_msgSend(v3, "valueForKey:", NRPairedDeviceRegistryDevice);
  v5 = objc_msgSend(v4, "valueForProperty:", _NRDevicePropertyBluetoothIdentifier);
  if (v5)
  {
    v6 = v5;
    if (objc_msgSend(v5, "isEqual:", *(_QWORD *)(a1 + 176)))
      sub_100D3BFBC(a1);
    sub_100D3BFFC(a1, v6);
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v7 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      v8[0] = 68289026;
      v8[1] = 0;
      v9 = 2082;
      v10 = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Fence: #FenceHandoff #Warning deviceId is null in unpair notification\"}", (uint8_t *)v8, 0x12u);
    }
  }
}

void sub_100D3BFBC(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;

}

void sub_100D3BFEC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

BOOL sub_100D3BFFC(uint64_t a1, void *a2)
{
  _BOOL8 result;
  NSObject *v5;
  _BOOL4 v6;
  const char *v7;
  _BOOL4 v8;
  NSObject *v9;
  NSObject *v10;
  id v11;
  const char *v12;
  const char *v13;
  NSObject *v14;
  id v15;
  int v16;
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  id v21;

  if (!a2)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v5 = qword_1022A0068;
    v6 = os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v6)
      return result;
    v16 = 68289026;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v7 = "{\"msg%{public}.0s\":\"Fence: #FenceHandoff null deviceId\"}";
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v16, 0x12u);
    return 0;
  }
  if (!*(_BYTE *)(a1 + 136))
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v5 = qword_1022A0068;
    v8 = os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v8)
      return result;
    v16 = 68289026;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v7 = "{\"msg%{public}.0s\":\"Fence: #FenceHandoff removeFencesFromDeviceId, no region monitoring before the first unlock\"}";
    goto LABEL_14;
  }
  if ((sub_100D3C404(a1, a2, 1) & 1) != 0)
  {
    if ((sub_10093D524(*(_QWORD *)(a1 + 112), (uint64_t)a2) & 1) != 0)
      return 1;
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v14 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
    {
      v16 = 68289282;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = objc_msgSend(objc_msgSend(a2, "UUIDString"), "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Fence: #FenceHandoff unable remove fences from deviceId\", \"deviceId\":%{public, location:escape_only}s}", (uint8_t *)&v16, 0x1Cu);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102182050);
    }
    v10 = qword_1022A0068;
    result = os_signpost_enabled((os_log_t)qword_1022A0068);
    if (result)
    {
      v15 = objc_msgSend(objc_msgSend(a2, "UUIDString"), "UTF8String");
      v16 = 68289282;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = v15;
      v12 = "Fence: #FenceHandoff unable remove fences from deviceId";
      v13 = "{\"msg%{public}.0s\":\"Fence: #FenceHandoff unable remove fences from deviceId\", \"deviceId\":%{public, loc"
            "ation:escape_only}s}";
      goto LABEL_29;
    }
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v9 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
    {
      v16 = 68289282;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = objc_msgSend(objc_msgSend(a2, "UUIDString"), "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Fence: #FenceHandoff unable to stop monitoring fences for deviceId\", \"deviceId\":%{public, location:escape_only}s}", (uint8_t *)&v16, 0x1Cu);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102182050);
    }
    v10 = qword_1022A0068;
    result = os_signpost_enabled((os_log_t)qword_1022A0068);
    if (result)
    {
      v11 = objc_msgSend(objc_msgSend(a2, "UUIDString"), "UTF8String");
      v16 = 68289282;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = v11;
      v12 = "Fence: #FenceHandoff unable to stop monitoring fences for deviceId";
      v13 = "{\"msg%{public}.0s\":\"Fence: #FenceHandoff unable to stop monitoring fences for deviceId\", \"deviceId\":%{"
            "public, location:escape_only}s}";
LABEL_29:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v12, v13, (uint8_t *)&v16, 0x1Cu);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100D3C404(uint64_t a1, void *a2, char a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  NSObject *v13;
  id v14;
  uint64_t v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  id v20;
  uint8_t buf[8];
  _BYTE v22[20];

  if (a2)
  {
    if (objc_msgSend(objc_msgSend(a2, "UUIDString"), "isEqual:", objc_msgSend(*(id *)(a1 + 176), "UUIDString")))
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102182050);
      v6 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v22 = 2082;
        *(_QWORD *)&v22[2] = "";
        *(_WORD *)&v22[10] = 2082;
        *(_QWORD *)&v22[12] = objc_msgSend(objc_msgSend(a2, "UUIDString"), "UTF8String");
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Fence: #FenceHandoff clearing currently active device\", \"activeDeviceId\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      sub_100D3BFBC(a1);
    }
    if (*(_BYTE *)(a1 + 136))
    {
      v7 = *(_QWORD *)(a1 + 112);
      if (v7)
      {
        *(_QWORD *)buf = 0;
        memset(v22, 0, 18);
        v8 = sub_100941108(v7, (uint64_t)a2, (uint64_t)buf);
        if ((v8 & 1) != 0)
        {
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_102182050);
          v9 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
          {
            v16 = 68289282;
            v17 = 2082;
            v18 = "";
            v19 = 2082;
            v20 = objc_msgSend(objc_msgSend(a2, "UUIDString"), "UTF8String");
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Fence: #FenceHandoff stopped monitoring fences from device\", \"deviceId\":%{public, location:escape_only}s}", (uint8_t *)&v16, 0x1Cu);
          }
          if (*(_QWORD *)v22 != *(_QWORD *)buf)
          {
            sub_1009450E0(*(_QWORD *)(a1 + 112), a2);
            v22[16] = a3;
            LODWORD(v16) = 1;
            (*(void (**)(uint64_t, uint64_t *, uint8_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v16, buf, 0, 0xFFFFFFFFLL, 0);
            sub_100D3AAE4(a1, *(__int128 **)buf, 0);
          }
        }
        else
        {
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_102182050);
          v12 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
          {
            v16 = 68289282;
            v17 = 2082;
            v18 = "";
            v19 = 2082;
            v20 = objc_msgSend(objc_msgSend(a2, "UUIDString"), "UTF8String");
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Fence: #FenceHandoff unable get Fences from deviceId\", \"deviceId\":%{public, location:escape_only}s}", (uint8_t *)&v16, 0x1Cu);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_102182050);
          }
          v13 = qword_1022A0068;
          if (os_signpost_enabled((os_log_t)qword_1022A0068))
          {
            v14 = objc_msgSend(objc_msgSend(a2, "UUIDString"), "UTF8String");
            v16 = 68289282;
            v17 = 2082;
            v18 = "";
            v19 = 2082;
            v20 = v14;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Fence: #FenceHandoff unable get Fences from deviceId", "{\"msg%{public}.0s\":\"Fence: #FenceHandoff unable get Fences from deviceId\", \"deviceId\":%{public, location:escape_only}s}", (uint8_t *)&v16, 0x1Cu);
          }
        }
        v16 = (uint64_t)buf;
        sub_10091BBB0((void ***)&v16);
        return v8;
      }
    }
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v10 = qword_1022A0068;
    v8 = 0;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v22 = 2082;
      *(_QWORD *)&v22[2] = "";
      v11 = "{\"msg%{public}.0s\":\"Fence: #FenceHandoff stopMonitoringFencesFromDeviceId, no region monitoring before th"
            "e first unlock\"}";
LABEL_25:
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v11, buf, 0x12u);
      return 0;
    }
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v10 = qword_1022A0068;
    v8 = 0;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v22 = 2082;
      *(_QWORD *)&v22[2] = "";
      v11 = "{\"msg%{public}.0s\":\"Fence: #FenceHandoff null deviceId\"}";
      goto LABEL_25;
    }
  }
  return v8;
}

void sub_100D3C8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  a9 = (void **)&a13;
  sub_10091BBB0(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100D3C8EC(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  id v13;
  NSObject *v14;
  id v15;
  NSObject *v16;
  id v17;
  __int128 *v19;
  __int128 *v20;
  uint64_t v21;
  uint8_t v22[8];
  __int16 v23;
  const char *v24;
  __int16 v25;
  id v26;
  uint8_t buf[8];
  __int128 v28;
  __int16 v29;

  if (a2)
  {
    sub_100D4120C(a1, a2);
    if (*(_BYTE *)(a1 + 136))
    {
      v4 = *(_QWORD *)(a1 + 112);
      if (v4)
      {
        *(_QWORD *)buf = 0;
        v28 = 0uLL;
        v29 = 0;
        v19 = 0;
        v20 = 0;
        v21 = 0;
        v5 = sub_100941108(v4, (uint64_t)a2, (uint64_t)&v19);
        if ((v5 & 1) != 0)
        {
          v6 = v19;
          v7 = v20;
          while (v6 != v7)
          {
            if (sub_100D3A758(a1, (uint64_t)v6))
            {
              v8 = v28;
              if ((unint64_t)v28 >= *((_QWORD *)&v28 + 1))
              {
                v9 = sub_10091D4EC((uint64_t *)buf, v6);
              }
              else
              {
                sub_1004E5748((char *)v28, v6);
                v9 = v8 + 248;
              }
              *(_QWORD *)&v28 = v9;
            }
            v6 = (__int128 *)((char *)v6 + 248);
          }
          if ((_QWORD)v28 != *(_QWORD *)buf)
          {
            *(_DWORD *)v22 = 0;
            (*(void (**)(uint64_t, uint8_t *, uint8_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, v22, buf, 0, 0xFFFFFFFFLL, 0);
            sub_100D3AAE4(a1, *(__int128 **)buf, 1);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_102182050);
            v16 = qword_1022A0068;
            if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
            {
              v17 = objc_msgSend(objc_msgSend(a2, "UUIDString"), "UTF8String");
              *(_DWORD *)v22 = 68289282;
              *(_DWORD *)&v22[4] = 0;
              v23 = 2082;
              v24 = "";
              v25 = 2082;
              v26 = v17;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Fence: #FenceHandoff monitoring fences from device\", \"deviceId\":%{public, location:escape_only}s}", v22, 0x1Cu);
            }
          }
        }
        else
        {
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_102182050);
          v12 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
          {
            v13 = objc_msgSend(objc_msgSend(a2, "UUIDString"), "UTF8String");
            *(_DWORD *)v22 = 68289282;
            *(_DWORD *)&v22[4] = 0;
            v23 = 2082;
            v24 = "";
            v25 = 2082;
            v26 = v13;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Fence: #FenceHandoff unable retrieve Fences from database\", \"deviceId\":%{public, location:escape_only}s}", v22, 0x1Cu);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_102182050);
          }
          v14 = qword_1022A0068;
          if (os_signpost_enabled((os_log_t)qword_1022A0068))
          {
            v15 = objc_msgSend(objc_msgSend(a2, "UUIDString"), "UTF8String");
            *(_DWORD *)v22 = 68289282;
            *(_DWORD *)&v22[4] = 0;
            v23 = 2082;
            v24 = "";
            v25 = 2082;
            v26 = v15;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Fence: #FenceHandoff unable retrieve Fences from database", "{\"msg%{public}.0s\":\"Fence: #FenceHandoff unable retrieve Fences from database\", \"deviceId\":%{public, location:escape_only}s}", v22, 0x1Cu);
          }
        }
        *(_QWORD *)v22 = &v19;
        sub_10091BBB0((void ***)v22);
        *(_QWORD *)v22 = buf;
        sub_10091BBB0((void ***)v22);
        return v5;
      }
    }
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v10 = qword_1022A0068;
    v5 = 0;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      LOWORD(v28) = 2082;
      *(_QWORD *)((char *)&v28 + 2) = "";
      v11 = "{\"msg%{public}.0s\":\"Fence: #FenceHandoff startMonitoringFencesFromDeviceId, no region monitoring before t"
            "he first unlock\"}";
LABEL_21:
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v11, buf, 0x12u);
      return 0;
    }
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v10 = qword_1022A0068;
    v5 = 0;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      LOWORD(v28) = 2082;
      *(_QWORD *)((char *)&v28 + 2) = "";
      v11 = "{\"msg%{public}.0s\":\"Fence: #FenceHandoff null deviceId\"}";
      goto LABEL_21;
    }
  }
  return v5;
}

void sub_100D3CD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  a13 = (void **)&a10;
  sub_10091BBB0(&a13);
  a13 = (void **)&a17;
  sub_10091BBB0(&a13);
  _Unwind_Resume(a1);
}

void sub_100D3CD88(uint64_t *a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  const char *v5;
  char *v6;
  const char *v7;
  char *v8;
  const char *v9;
  char *v10;
  uint64_t v11;
  std::string *v12;
  char *v13;
  uint64_t v14;
  int v15;
  const char *v16;
  __int16 v17;
  unint64_t v18;
  _QWORD v19[3];
  __int16 v20;
  _DWORD buf[3];
  __int16 v22;
  unint64_t v23;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    buf[0] = 136315138;
    *(_QWORD *)&buf[1] = "cleanUpFenceDatabaseOnReinit";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    LODWORD(v19[0]) = 136315138;
    *(_QWORD *)((char *)v19 + 4) = "cleanUpFenceDatabaseOnReinit";
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "%s", (const char *)v19);
    v6 = (char *)v5;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceAuthorizationManager::cleanUpFenceDatabaseOnReinit()", "%s\n", v5);
    if (v6 != (char *)buf)
      free(v6);
  }
  v12 = 0;
  v13 = 0;
  v14 = 0;
  sub_100D3D4D4((uint64_t)a1, (uint64_t *)&v12);
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  v3 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    buf[0] = 136315394;
    *(_QWORD *)&buf[1] = "cleanUpFenceDatabaseOnReinit";
    v22 = 2048;
    v23 = 0xEF7BDEF7BDEF7BDFLL * ((v13 - (char *)v12) >> 3);
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%s, found %lu authorized fences without centroids", (uint8_t *)buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    LODWORD(v19[0]) = 136315394;
    *(_QWORD *)((char *)v19 + 4) = "cleanUpFenceDatabaseOnReinit";
    WORD2(v19[1]) = 2048;
    *(_QWORD *)((char *)&v19[1] + 6) = 0xEF7BDEF7BDEF7BDFLL * ((v13 - (char *)v12) >> 3);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "%s, found %lu authorized fences without centroids", (const char *)v19, 22);
    v8 = (char *)v7;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceAuthorizationManager::cleanUpFenceDatabaseOnReinit()", "%s\n", v7);
    if (v8 != (char *)buf)
      free(v8);
  }
  memset(v19, 0, sizeof(v19));
  v20 = 0;
  sub_100D43FE8((uint64_t)v19, v12, (__int128 *)v13, 0xEF7BDEF7BDEF7BDFLL * ((v13 - (char *)v12) >> 3));
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    buf[0] = 136315394;
    *(_QWORD *)&buf[1] = "cleanUpFenceDatabaseOnReinit";
    v22 = 2048;
    v23 = 0xEF7BDEF7BDEF7BDFLL * ((v13 - (char *)v12) >> 3);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s, placed %lu authorized fences without centroids in notification", (uint8_t *)buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v15 = 136315394;
    v16 = "cleanUpFenceDatabaseOnReinit";
    v17 = 2048;
    v18 = 0xEF7BDEF7BDEF7BDFLL * ((v13 - (char *)v12) >> 3);
    LODWORD(v11) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "%s, placed %lu authorized fences without centroids in notification", (const char *)&v15, v11);
    v10 = (char *)v9;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceAuthorizationManager::cleanUpFenceDatabaseOnReinit()", "%s\n", v9);
    if (v10 != (char *)buf)
      free(v10);
  }
  buf[0] = 4;
  (*(void (**)(uint64_t *, _DWORD *, _QWORD *, _QWORD, uint64_t, _QWORD))(*a1 + 152))(a1, buf, v19, 0, 0xFFFFFFFFLL, 0);
  sub_1009421CC(a1[14]);
}

void sub_100D3D484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  a23 = (void **)&a19;
  sub_10091BBB0(&a23);
  a23 = (void **)&a12;
  sub_10091BBB0(&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_100D3D4D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  const char *v15;
  char *v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const char *v23;
  _BYTE buf[1632];

  v5 = *a2;
  v4 = a2[1];
  if (v4 != *a2)
  {
    do
    {
      v4 -= 248;
      sub_10091BC34((uint64_t)(a2 + 2), v4);
    }
    while (v4 != v5);
  }
  a2[1] = v5;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  if ((sub_100D3D910(a1, &v19) & 1) == 0)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v6 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "getCurrentlyMonitoredInvalidFences";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%s, Failed to retrieve fences without centroids", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102182050);
      v22 = 136315138;
      v23 = "getCurrentlyMonitoredInvalidFences";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 16, "%s, Failed to retrieve fences without centroids", (const char *)&v22);
      v16 = (char *)v15;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLFenceAuthorizationManager::getCurrentlyMonitoredInvalidFences(std::vector<CLFenceManager_Type::Fence> &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  v7 = v19;
  if (v20 != v19)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      if (sub_100D3DB14(a1, (uint64_t *)(v7 + v8)))
      {
        v10 = (__int128 *)(v19 + v8);
        v11 = a2[1];
        if (v11 >= a2[2])
        {
          v12 = sub_10091D4EC(a2, v10);
        }
        else
        {
          sub_1004E5748((char *)a2[1], v10);
          v12 = v11 + 248;
          a2[1] = v11 + 248;
        }
        a2[1] = v12;
      }
      ++v9;
      v7 = v19;
      v8 += 248;
    }
    while (0xEF7BDEF7BDEF7BDFLL * ((v20 - v19) >> 3) > v9);
  }
  if (a2[1] == *a2)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v13 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "getCurrentlyMonitoredInvalidFences";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%s no authorized fences without centroids", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102182050);
      v22 = 136315138;
      v23 = "getCurrentlyMonitoredInvalidFences";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "%s no authorized fences without centroids", (const char *)&v22);
      v18 = (char *)v17;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceAuthorizationManager::getCurrentlyMonitoredInvalidFences(std::vector<CLFenceManager_Type::Fence> &)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
  }
  *(_QWORD *)buf = &v19;
  sub_10091BBB0((void ***)buf);
  return 1;
}

void sub_100D3D8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = (void **)&a12;
  sub_10091BBB0(&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_100D3D910(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  v5 = *a2;
  v4 = a2[1];
  if (v4 != *a2)
  {
    do
    {
      v4 -= 248;
      sub_10091BC34((uint64_t)(a2 + 2), v4);
    }
    while (v4 != v5);
  }
  a2[1] = v5;
  v6 = *(_QWORD *)(a1 + 112);
  if (v6)
    sub_10094257C(v6, a2);
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  v7 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Fence: getAllFencesWithoutCentroids, can't fetch fences before the first unlock", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v11[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Fence: getAllFencesWithoutCentroids, can't fetch fences before the first unlock", v11, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLFenceAuthorizationManager::getAllFencesWithoutCentroids(std::vector<CLFenceManager_Type::Fence> &)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  return 0;
}

id sub_100D3DB14(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  id v4;
  NSObject *v5;
  uint64_t *v6;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t *v12;
  __int16 v13;
  int v14;

  if (*((char *)a2 + 23) >= 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 184), "syncgetAuthorizationContextIfClientIsNonZonal:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3)), "isAuthorizedForServiceType:", 1);
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  v5 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0)
      v6 = a2;
    else
      v6 = (uint64_t *)*a2;
    v8[0] = 68289538;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2082;
    v12 = v6;
    v13 = 1026;
    v14 = (int)v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Fence: isClientAuthorized\", \"key\":%{public, location:escape_only}s, \"authorized\":%{public}hhd}", (uint8_t *)v8, 0x22u);
  }
  return v4;
}

uint64_t sub_100D3DC54(uint64_t *a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  NSObject *v13;
  _BYTE *v14;
  NSObject *v15;
  const char *v17;
  char *v18;
  const char *v19;
  char *v20;
  uint64_t v21;
  __int128 *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  char *v31;
  __int128 v32;
  double v33;
  const char *v34;
  _BYTE v35[12];
  _BYTE __dst[12];
  __int16 v37;
  int v38;
  __int16 v39;
  _BYTE v40[18];
  __int16 v41;
  uint64_t v42;
  _BYTE __p[10];
  __int16 v44;
  uint64_t v45;
  char v46;
  int v47;
  void *v48;
  char v49;
  id v50;
  void *v51;
  void *v52;
  _BYTE buf[28];
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "addFence";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    *(_DWORD *)__dst = 136315138;
    *(_QWORD *)&__dst[4] = "addFence";
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "%s", __dst);
    v18 = (char *)v17;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceAuthorizationManager::addFence(const CLFenceManager_Type::Fence &)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  if (a1[14])
  {
    if (*(_QWORD *)(a2 + 232) == *(_QWORD *)(a2 + 224))
    {
      if (qword_1022A02F0 != -1)
        dispatch_once(&qword_1022A02F0, &stru_102182070);
      v5 = qword_1022A02F8;
      if (os_log_type_enabled((os_log_t)qword_1022A02F8, OS_LOG_TYPE_DEBUG))
      {
        v6 = *(_QWORD *)(a2 + 72);
        v7 = *(_QWORD *)(a2 + 80);
        v8 = *(_QWORD *)(a2 + 96);
        if (*(char *)(a2 + 23) >= 0)
          v9 = a2;
        else
          v9 = *(_QWORD *)a2;
        if (*(char *)(a2 + 47) >= 0)
          v10 = a2 + 24;
        else
          v10 = *(_QWORD *)(a2 + 24);
        *(_DWORD *)buf = 136316674;
        *(_QWORD *)&buf[4] = "Fence";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v6;
        v54 = 2048;
        v55 = v7;
        v56 = 2048;
        v57 = v8;
        v58 = 2080;
        v59 = v9;
        v60 = 2080;
        v61 = v10;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Add,1,BundleId,%s,Name,%s,", buf, 0x44u);
      }
      if (sub_1001BFF7C(117, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02F0 != -1)
          dispatch_once(&qword_1022A02F0, &stru_102182070);
        v25 = *(_QWORD *)(a2 + 72);
        v26 = *(_QWORD *)(a2 + 80);
        v27 = *(_QWORD *)(a2 + 96);
        if (*(char *)(a2 + 23) >= 0)
          v28 = a2;
        else
          v28 = *(_QWORD *)a2;
        if (*(char *)(a2 + 47) >= 0)
          v29 = a2 + 24;
        else
          v29 = *(_QWORD *)(a2 + 24);
        *(_DWORD *)__dst = 136316674;
        *(_QWORD *)&__dst[4] = "Fence";
        v37 = 1024;
        v38 = 1;
        v39 = 2048;
        *(_QWORD *)v40 = v25;
        *(_WORD *)&v40[8] = 2048;
        *(_QWORD *)&v40[10] = v26;
        v41 = 2048;
        v42 = v27;
        *(_WORD *)__p = 2080;
        *(_QWORD *)&__p[2] = v28;
        v44 = 2080;
        v45 = v29;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02F8, 2, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Add,1,BundleId,%s,Name,%s,", __dst, 68, *(double *)&v32, *((double *)&v32 + 1), v33, v34, *(const char **)v35);
        v31 = (char *)v30;
        sub_100512490("LOCATION", 1, 0, 2, "BOOL CLFenceAuthorizationManager::addFence(const CLFenceManager_Type::Fence &)", "%s\n", v30);
        if (v31 != buf)
          free(v31);
      }
    }
    v11 = sub_100115D70(a2);
    v12 = sub_10093B548(a1[14], a2, v11);
    if ((_DWORD)v12)
    {
      sub_1004E5748(__dst, (__int128 *)a2);
      v47 = v11;
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102182050);
      v13 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        sub_100C3B9BC(a2, buf);
        v14 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
        LODWORD(v32) = 136380675;
        *(_QWORD *)((char *)&v32 + 4) = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Adding fence to db, %{private}s", (uint8_t *)&v32, 0xCu);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102182050);
        v21 = qword_1022A0068;
        sub_100C3B9BC(a2, &v32);
        if (v33 >= 0.0)
          v22 = &v32;
        else
          v22 = (__int128 *)v32;
        *(_DWORD *)v35 = 136380675;
        *(_QWORD *)&v35[4] = v22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 2, "Adding fence to db, %{private}s", v35, 12);
        v24 = v23;
        if (SHIBYTE(v33) < 0)
          operator delete((void *)v32);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceAuthorizationManager::addFence(const CLFenceManager_Type::Fence &)", "%s\n", v24);
        if (v24 != buf)
          free(v24);
      }
      memset(buf, 0, 26);
      *(_QWORD *)&buf[8] = sub_10091D4EC((uint64_t *)buf, (__int128 *)__dst);
      buf[25] = sub_10019CFA0() == 1;
      LODWORD(v32) = 0;
      (*(void (**)(uint64_t *, __int128 *, _BYTE *, _QWORD, uint64_t, _QWORD))(*a1 + 152))(a1, &v32, buf, 0, 0xFFFFFFFFLL, 0);
      sub_100D3AAE4((uint64_t)a1, (__int128 *)a2, 1);
      *(_QWORD *)&v32 = buf;
      sub_10091BBB0((void ***)&v32);
      if (v51)
      {
        v52 = v51;
        operator delete(v51);
      }

      if (v49 < 0)
        operator delete(v48);
      if (v46 < 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v42) < 0)
        operator delete(*(void **)&v40[4]);
      if ((v40[3] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
    }
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v15 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Fence: addFence, can't add fence before the first unlock", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102182050);
      *(_WORD *)__dst = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Fence: addFence, can't add fence before the first unlock", __dst, 2);
      v20 = (char *)v19;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLFenceAuthorizationManager::addFence(const CLFenceManager_Type::Fence &)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    return 0;
  }
  return v12;
}

void sub_100D3E44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1004E2BD0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D3E4A0(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 112);
  if (v1)
    sub_10093F038(v1);
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Fence: getFence, can't add/remove fence before the first unlock", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Fence: getFence, can't add/remove fence before the first unlock", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLFenceAuthorizationManager::getFence(const std::string &, const std::string &, const std::string &, CLFenceManager_Type::Fence &)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return 0;
}

void sub_100D3E66C(uint64_t a1)
{
  uint64_t v2;
  uint8_t *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  uint64_t v7;
  int v8;
  const char *v9;
  uint8_t buf[4];
  const char *v11;

  v2 = *(_QWORD *)(a1 + 112);
  if (!v2)
  {
    v3 = (uint8_t *)&qword_1022A0000;
    if (qword_1022A0060 != -1)
      goto LABEL_9;
    while (1)
    {
      v4 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446210;
        v11 = "numFences";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Fence: sMessage, %{public}s, fFenceDatabase is NULL", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (*((_QWORD *)v3 + 12) != -1)
          dispatch_once(&qword_1022A0060, &stru_102182050);
        v8 = 136446210;
        v9 = "numFences";
        LODWORD(v7) = 12;
        v3 = buf;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Fence: sMessage, %{public}s, fFenceDatabase is NULL", &v8, v7);
        v6 = (uint8_t *)v5;
        sub_100512490("Generic", 1, 0, 0, "int CLFenceAuthorizationManager::numFences(const std::string &, BOOL)", "%s\n", v5);
        if (v6 != buf)
          free(v6);
      }
      v2 = *(_QWORD *)(a1 + 112);
      if (v2)
        break;
      sub_1019286FC();
LABEL_9:
      dispatch_once(&qword_1022A0060, &stru_102182050);
    }
  }
  sub_100943AE4(v2);
}

void sub_100D3E844(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  NSObject *v9;
  const char *v10;
  int v11;
  uint8_t buf[4];

  v5 = *a2;
  v4 = a2[1];
  if (v4 != *a2)
  {
    do
    {
      v4 -= 248;
      sub_10091BC34((uint64_t)(a2 + 2), v4);
    }
    while (v4 != v5);
  }
  a2[1] = v5;
  if (a1[14])
  {
    if (sub_10019CFA0() == 1)
      sub_100D3CD88(a1);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v9 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Location services are disabled; no monitored fences",
        buf,
        2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    LOWORD(v11) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Location services are disabled; no monitored fences",
      &v11,
      2);
    v8 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceAuthorizationManager::getAuthorizedFences(std::vector<CLFenceManager_Type::Fence> &, BOOL)", "%s\n", v10);
LABEL_23:
    if (v8 != buf)
      free(v8);
    return;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  v6 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Fence: getAuthorizedFences, no region monitoring before the first unlock", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    LOWORD(v11) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: getAuthorizedFences, no region monitoring before the first unlock", &v11, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceAuthorizationManager::getAuthorizedFences(std::vector<CLFenceManager_Type::Fence> &, BOOL)", "%s\n", v7);
    goto LABEL_23;
  }
}

void sub_100D3EF64(uint64_t a1)
{
  sub_100D3A18C(*(_QWORD *)(a1 + 32));
}

uint64_t sub_100D3EF6C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  int v6;
  int v7;
  __int16 v8;
  const char *v9;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
  {
    v6 = 68289026;
    v7 = 0;
    v8 = 2082;
    v9 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Fence: getCountOfAllFencesForBundle\"}", (uint8_t *)&v6, 0x12u);
  }
  v3 = *(_QWORD *)(a1 + 112);
  if (v3)
    sub_100943E94(v3);
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v6 = 68289026;
    v7 = 0;
    v8 = 2082;
    v9 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Fence: getCountOfAllFencesForBundle, no region monitoring before the first unlock\"}", (uint8_t *)&v6, 0x12u);
  }
  return 0x7FFFFFFFLL;
}

void sub_100D3F0F0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  const char *v16;
  uint8_t buf[4];
  const char *v18;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  v6 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v18 = "getAllFencesForBundle";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v15 = 136315138;
    v16 = "getAllFencesForBundle";
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "%s", (const char *)&v15);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceAuthorizationManager::getAllFencesForBundle(const std::string &, std::vector<CLFenceManager_Type::Fence> &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v8 = *a3;
  v7 = a3[1];
  if (v7 != *a3)
  {
    do
    {
      v7 -= 248;
      sub_10091BC34((uint64_t)(a3 + 2), v7);
    }
    while (v7 != v8);
  }
  a3[1] = v8;
  v9 = *(_QWORD *)(a1 + 112);
  if (v9)
    sub_1000C8140(v9, a2, a3);
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  v10 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Fence: getAllFencesForBundle, no region monitoring before the first unlock", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    LOWORD(v15) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: getAllFencesForBundle, no region monitoring before the first unlock", &v15, 2);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceAuthorizationManager::getAllFencesForBundle(const std::string &, std::vector<CLFenceManager_Type::Fence> &)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
}

void sub_100D3F430(uint64_t a1, uint64_t a2, _BYTE *a3, _BYTE *a4)
{
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t buf[4];

  v4 = *(_QWORD *)(a1 + 112);
  if (v4)
  {
    *a3 = 0;
    *a4 = 0;
    sub_100943258(v4);
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  v5 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Fence: isFenceRegisteredAndAuthorized, no region monitoring before the first unlock", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    LOWORD(v8) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: isFenceRegisteredAndAuthorized, no region monitoring before the first unlock", &v8, 2, v8, v9, v10, v11, v12);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceAuthorizationManager::isFenceRegisteredAndAuthorized(const CLFenceManager_Type::Fence &, BOOL &, BOOL &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
}

void sub_100D3F7CC(uint64_t a1, void *a2, void *a3)
{
  void *v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id v19;

  if (*(_QWORD *)(a1 + 112))
  {
    if (a3)
    {
      v6 = *(void **)(a1 + 176);
      v7 = objc_msgSend(a3, "UUIDString");
      if (objc_msgSend(a2, "objectForKeyedSubscript:", v7)
        && objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", v7), "isEqualToString:", CFSTR("inactive")))
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102182090);
        v8 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          v14 = 68289282;
          v15 = 0;
          v16 = 2082;
          v17 = "";
          v18 = 2082;
          v19 = objc_msgSend(v7, "UTF8String");
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#FenceHandoff stop monitoring from inactive device\", \"deviceId\":%{public, location:escape_only}s}", (uint8_t *)&v14, 0x1Cu);
        }
        sub_100D3C404(a1, a3, 1);
        objc_msgSend(*(id *)(a1 + 192), "setObject:forKeyedSubscript:", 0, a3);
      }
      else
      {
        if ((objc_msgSend(objc_msgSend(v6, "UUIDString"), "isEqualToString:", objc_msgSend(a3, "UUIDString")) & 1) == 0)sub_100D3C404(a1, v6, 1);
        if (objc_msgSend(*(id *)(a1 + 192), "objectForKeyedSubscript:", a3))
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102182090);
          v10 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
          {
            v14 = 68289282;
            v15 = 0;
            v16 = 2082;
            v17 = "";
            v18 = 2082;
            v19 = objc_msgSend(objc_msgSend(v6, "UUIDString"), "UTF8String");
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#FenceHandoff appending handoff dictionary\", \"deviceId\":%{public, location:escape_only}s}", (uint8_t *)&v14, 0x1Cu);
          }
          objc_msgSend(objc_msgSend(*(id *)(a1 + 192), "objectForKeyedSubscript:", a3), "addEntriesFromDictionary:", a2);
          sub_100D3FC98(a1);
        }
        else
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102182090);
          v13 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
          {
            v14 = 68289282;
            v15 = 0;
            v16 = 2082;
            v17 = "";
            v18 = 2082;
            v19 = objc_msgSend(objc_msgSend(a3, "UUIDString"), "UTF8String");
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#FenceHandoff adding handoff dictionary\", \"deviceId\":%{public, location:escape_only}s}", (uint8_t *)&v14, 0x1Cu);
          }
          objc_msgSend(*(id *)(a1 + 192), "setObject:forKeyedSubscript:", +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", a2), a3);
          sub_100D3C8EC(a1, a3);
        }
      }
    }
    else
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102182050);
      v11 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
      {
        v14 = 68289026;
        v15 = 0;
        v16 = 2082;
        v17 = "";
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#FenceHandoff deviceId is nil\"}", (uint8_t *)&v14, 0x12u);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102182050);
      }
      v12 = qword_1022A0068;
      if (os_signpost_enabled((os_log_t)qword_1022A0068))
      {
        v14 = 68289026;
        v15 = 0;
        v16 = 2082;
        v17 = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#FenceHandoff deviceId is nil", "{\"msg%{public}.0s\":\"#FenceHandoff deviceId is nil\"}", (uint8_t *)&v14, 0x12u);
      }
    }
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v9 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v14 = 68289026;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Warn #FenceHandoff: handleChangeFencesStateMatchingHandoffTags, no region monitoring before the first unlock\"}", (uint8_t *)&v14, 0x12u);
    }
  }
}

uint64_t sub_100D3FC98(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  __int128 *v5;
  __int128 *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  NSObject *v11;
  NSObject *v12;
  id v13;
  NSObject *v14;
  NSObject *v15;
  const char *v17;
  char *v18;
  const char *v19;
  char *v20;
  uint64_t v21;
  __int128 *v22;
  __int128 *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  __int16 v28;
  char *v29;
  char *v30;
  unint64_t v31;
  __int16 v32;
  int v33;
  unint64_t v34;
  _BYTE buf[18];
  __int16 v36;
  id v37;

  if (*(_BYTE *)(a1 + 136) && (v2 = *(_QWORD *)(a1 + 112)) != 0)
  {
    v29 = 0;
    v30 = 0;
    v32 = 0;
    v31 = 0;
    v25 = 0;
    v26 = 0;
    v28 = 0;
    v27 = 0;
    v3 = *(void **)(a1 + 176);
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v4 = sub_100941108(v2, (uint64_t)v3, (uint64_t)&v22);
    if ((v4 & 1) != 0)
    {
      v5 = v22;
      v6 = v23;
      while (v5 != v6)
      {
        if (!sub_100D3A758(a1, (uint64_t)v5))
        {
          v9 = v26;
          if ((unint64_t)v26 >= v27)
          {
            v10 = (char *)sub_10091D4EC((uint64_t *)&v25, v5);
          }
          else
          {
            sub_1004E5748(v26, v5);
            v10 = v9 + 248;
          }
          v26 = v10;
          sub_100944B6C(*(_QWORD *)(a1 + 112), (uint64_t *)v5);
        }
        v7 = v30;
        if ((unint64_t)v30 >= v31)
        {
          v8 = (char *)sub_10091D4EC((uint64_t *)&v29, v5);
        }
        else
        {
          sub_1004E5748(v30, v5);
          v8 = v7 + 248;
        }
        v30 = v8;
        sub_100D3AAE4(a1, v5, 1);
        v5 = (__int128 *)((char *)v5 + 248);
      }
      if (v30 != v29)
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102182050);
        v14 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)&buf[4] = 0xEF7BDEF7BDEF7BDFLL * ((v30 - v29) >> 3);
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#FenceHandoff: sending notification for adding fences: %{public}lu", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_102182050);
          v33 = 134349056;
          v34 = 0xEF7BDEF7BDEF7BDFLL * ((v30 - v29) >> 3);
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "#FenceHandoff: sending notification for adding fences: %{public}lu", &v33, 12);
          v18 = (char *)v17;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceAuthorizationManager::reconcileMonitoredHandoffFencesForActiveDeviceId(NSDictionary *)", "%s\n", v17);
          if (v18 != buf)
            free(v18);
        }
        *(_DWORD *)buf = 0;
        (*(void (**)(uint64_t, _BYTE *, char **, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, &v29, 0, 0xFFFFFFFFLL, 0);
      }
      if (v26 != v25)
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102182050);
        v15 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)&buf[4] = 0xEF7BDEF7BDEF7BDFLL * ((v26 - v25) >> 3);
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#FenceHandoff: sending notification for removing fences: %{public}lu", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_102182050);
          v33 = 134349056;
          v34 = 0xEF7BDEF7BDEF7BDFLL * ((v26 - v25) >> 3);
          LODWORD(v21) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "#FenceHandoff: sending notification for removing fences: %{public}lu", &v33, v21);
          v20 = (char *)v19;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceAuthorizationManager::reconcileMonitoredHandoffFencesForActiveDeviceId(NSDictionary *)", "%s\n", v19);
          if (v20 != buf)
            free(v20);
        }
        *(_DWORD *)buf = 1;
        (*(void (**)(uint64_t, _BYTE *, char **, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, &v25, 0, 0xFFFFFFFFLL, 0);
      }
    }
    else
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102182050);
      v12 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
      {
        v13 = objc_msgSend(objc_msgSend(v3, "UUIDString"), "UTF8String");
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        v36 = 2082;
        v37 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warn #FenceHandoff: unable retrieve Fences from database\", \"deviceId\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
    }
    *(_QWORD *)buf = &v22;
    sub_10091BBB0((void ***)buf);
    *(_QWORD *)buf = &v25;
    sub_10091BBB0((void ***)buf);
    *(_QWORD *)buf = &v29;
    sub_10091BBB0((void ***)buf);
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v11 = qword_1022A0068;
    v4 = 0;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Fence: #FenceHandoff reconcileMonitoredHandoffFencesForActiveDeviceId, no region monitoring before the first unlock\"}", buf, 0x12u);
      return 0;
    }
  }
  return v4;
}

void sub_100D402DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  a25 = (void **)&a12;
  sub_10091BBB0(&a25);
  a25 = (void **)&a15;
  sub_10091BBB0(&a25);
  a25 = (void **)&a19;
  sub_10091BBB0(&a25);
  _Unwind_Resume(a1);
}

void sub_100D40348(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, double *a5)
{
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  v5 = *(_QWORD *)(a1 + 112);
  if (v5)
    sub_1009441C4(v5, a2, a3, a4, *a5);
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  v6 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Fence: lastDownloadTimeChanged, no region monitoring before the first unlock", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: lastDownloadTimeChanged, no region monitoring before the first unlock", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceAuthorizationManager::lastDownloadTimeChanged(const std::string &, const std::string &, const std::string &, const double &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

void sub_100D40504(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 112);
  if (v1)
    sub_100944858(v1);
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: markDataDownloadInvalid, no region monitoring before the first unlock", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: markDataDownloadInvalid, no region monitoring before the first unlock", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceAuthorizationManager::markDataDownloadInvalid()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
}

uint64_t sub_100D406BC(uint64_t a1)
{
  NSObject *v1;
  const char *v3;
  uint8_t *v4;
  int v5;
  uint8_t buf[4];

  if (*(_QWORD *)(a1 + 112))
    sub_100D3E66C(a1);
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  v1 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "Fence: hasMonitoredFences, no region monitoring before the first unlock", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    LOWORD(v5) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: hasMonitoredFences, no region monitoring before the first unlock", &v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceAuthorizationManager::hasMonitoredFences(const std::string &)", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  return 0;
}

void sub_100D40A24(uint64_t a1, std::string *a2, int a3)
{
  int v6;
  NSObject *v7;
  std::string *v8;
  NSObject *v9;
  std::string *v10;
  std::string *v11;
  const char *v12;
  uint8_t *v13;
  NSObject *v14;
  std::string *v15;
  std::string *v16;
  const char *v17;
  uint8_t *v18;
  std::string *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  int v23;
  std::string *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  std::string *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;

  sub_100204320(a2, (uint64_t)&v22);
  v6 = sub_100D406BC(a1);
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  v7 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = a2;
    else
      v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136446722;
    v30 = v8;
    v31 = 1026;
    v32 = v6;
    v33 = 1026;
    v34 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%{public}s: hasMonitoredFences %{public}d, monitoringAdded %{public}d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = a2;
    else
      v16 = (std::string *)a2->__r_.__value_.__r.__words[0];
    v23 = 136446722;
    v24 = v16;
    v25 = 1026;
    v26 = v6;
    v27 = 1026;
    v28 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "%{public}s: hasMonitoredFences %{public}d, monitoringAdded %{public}d", &v23, 24);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceAuthorizationManager::checkClientStatusInternal(const std::string &, BOOL)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  if (v6)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v9 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = a2;
      else
        v10 = (std::string *)a2->__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446210;
      v30 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%{public}s is now a fence client", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102182050);
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = a2;
      else
        v11 = (std::string *)a2->__r_.__value_.__r.__words[0];
      v23 = 136446210;
      v24 = v11;
      LODWORD(v21) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "%{public}s is now a fence client", &v23, v21);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceAuthorizationManager::checkClientStatusInternal(const std::string &, BOOL)", "%s\n", v12);
LABEL_46:
      if (v13 != buf)
        free(v13);
    }
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v14 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = a2;
      else
        v15 = (std::string *)a2->__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446210;
      v30 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%{public}s is no longer a fence client", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102182050);
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = a2;
      else
        v19 = (std::string *)a2->__r_.__value_.__r.__words[0];
      v23 = 136446210;
      v24 = v19;
      LODWORD(v21) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "%{public}s is no longer a fence client", &v23, v21);
      v13 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceAuthorizationManager::checkClientStatusInternal(const std::string &, BOOL)", "%s\n", v20);
      goto LABEL_46;
    }
  }
  sub_1007E683C();
}

void sub_100D40F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100010174((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100D40FA4(uint64_t a1)
{
  sub_100D40A24(*(_QWORD *)(a1 + 32), (std::string *)(a1 + 40), *(unsigned __int8 *)(a1 + 64));
}

uint64_t sub_100D40FB8(uint64_t a1)
{
  uint64_t result;
  uint64_t v2[3];

  result = *(_QWORD *)(a1 + 112);
  if (result)
  {
    memset(v2, 0, sizeof(v2));
    sub_100948F48(result, v2);
  }
  return result;
}

void sub_100D411C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = (void **)&a12;
  sub_100D44344(&a15);
  _Unwind_Resume(a1);
}

void sub_100D4120C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;

  v3 = a2;
  v4 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v3;

}

void sub_100D4123C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

id sub_100D4124C()
{
  id v0;
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v0 = -[NRPairedDeviceRegistry getPairedDevices](+[NRPairedDeviceRegistry sharedInstance](NRPairedDeviceRegistry, "sharedInstance"), "getPairedDevices");
  v1 = objc_alloc_init((Class)NSMutableSet);
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v9;
    v5 = _NRDevicePropertyBluetoothIdentifier;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(v0);
        objc_msgSend(v1, "addObject:", objc_msgSend(objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v6), "valueForProperty:", v5), "UUIDString"));
        v6 = (char *)v6 + 1;
      }
      while (v3 != v6);
      v3 = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v3);
  }
  return v1;
}

void sub_100D4137C(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(v2 + 8) != -1)
      sub_100D3BE70(v3, a2);
  }
}

void sub_100D4139C()
{
  operator new();
}

void sub_100D4141C()
{
  operator delete();
}

uint64_t sub_100D41440(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  id v11;
  void **v12;
  id v13;
  id v14;
  void *__p[2];
  uint64_t v17;
  __objc2_prot *v18;
  __objc2_prot *v19;

  *(_QWORD *)a1 = &off_102182210;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  objc_msgSend(a3, "silo");
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
  v19 = &OBJC_PROTOCOL___CLIntersiloServiceProtocol;
  objc_msgSend(+[CLIntersiloInterface sharedInterface](CLIntersiloInterface, "sharedInterface"), "extendSelectorInfoWithProtocol:bases:", &OBJC_PROTOCOL___CLNotifierServiceProtocol, +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v19, 1));
  v18 = &OBJC_PROTOCOL___CLIntersiloClientProtocol;
  objc_msgSend(+[CLIntersiloInterface sharedInterface](CLIntersiloInterface, "sharedInterface"), "extendSelectorInfoWithProtocol:bases:", &OBJC_PROTOCOL___CLNotifierServiceClientProtocol, +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v18, 1));
  v11 = objc_msgSend(a3, "silo");
  if (*(char *)(a2 + 31) < 0)
  {
    sub_100115CE4(__p, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a2 + 8);
    v17 = *(_QWORD *)(a2 + 24);
  }
  if (v17 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  v13 = +[CLIntersiloProxy proxyForRecipientObject:inSilo:recipientName:](CLIntersiloProxy, "proxyForRecipientObject:inSilo:recipientName:", v10, v11, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12, __p[0], __p[1], v17));
  *(_QWORD *)(a1 + 16) = v13;
  if (SHIBYTE(v17) < 0)
  {
    operator delete(__p[0]);
    v13 = *(id *)(a1 + 16);
  }
  v14 = v13;
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a3, "silo"));
  return a1;
}

void sub_100D4163C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100D41660(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102182030);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_102182030);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData>::removeClient(int) [Notification_T = CLFenceAuthorizationManager_Type::Notification, NotificationData_T = CLFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_100D418D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FB210);
}

BOOL sub_100D418E8(uint64_t a1, int a2, int *a3, char *a4)
{
  _BOOL8 result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  char v29;
  uint64_t **v30;
  char v31;
  uint64_t **v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  const char *v36;
  uint8_t *v37;
  uint64_t v38;
  int v39;
  _BYTE v40[12];
  __int16 v41;
  int v42;
  uint8_t buf[24];
  __int16 v44;

  v39 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      v38 = v10;
      v16 = *a3;
      v19 = *(_QWORD *)(v10 + 48);
      v18 = v10 + 48;
      v17 = v19;
      if (!v19)
        goto LABEL_31;
      v20 = v18;
      do
      {
        v21 = *(_DWORD *)(v17 + 28);
        v22 = v21 < v16;
        if (v21 >= v16)
          v23 = (uint64_t *)v17;
        else
          v23 = (uint64_t *)(v17 + 8);
        if (!v22)
          v20 = v17;
        v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28))
LABEL_31:
        v20 = v18;
      v24 = *(_QWORD *)(a1 + 64);
      if (!v24)
        goto LABEL_42;
      v25 = a1 + 64;
      do
      {
        v26 = *(_DWORD *)(v24 + 32);
        v27 = v26 < v16;
        if (v26 >= v16)
          v28 = (uint64_t *)v24;
        else
          v28 = (uint64_t *)(v24 + 8);
        if (!v27)
          v25 = v24;
        v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        v33 = *(_QWORD *)(v25 + 56);
        v34 = *a4;
        *(_QWORD *)buf = &v39;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v25 + 40), &v39, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v34;
        memset(buf, 0, sizeof(buf));
        v44 = 0;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, uint8_t *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_100D443E4();
        }
        *(_QWORD *)v40 = buf;
        sub_10091BBB0((void ***)v40);
        if (v33)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v29 = byte_1022FB211;
        *(_DWORD *)v40 = *a3;
        *(_QWORD *)buf = v40;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v29;
        *(_DWORD *)v40 = *a3;
        *(_QWORD *)buf = v40;
        v30 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v30 + 8);
        v31 = *a4;
        *(_DWORD *)v40 = *a3;
        *(_QWORD *)buf = v40;
        v32 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v39;
        *((_BYTE *)sub_1001AFE94(v32 + 5, &v39, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v31;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v20 == v18)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(v38 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102182030);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102182030);
    v35 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v35 = (_QWORD *)*v35;
    *(_DWORD *)v40 = 136446466;
    *(_QWORD *)&v40[4] = v35;
    v41 = 1026;
    v42 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v40,
      18);
    v37 = (uint8_t *)v36;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLFenceAuthorizationManager_Type::Notification, NotificationData_T = CLFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v36);
    if (v37 != buf)
      free(v37);
    return 0;
  }
  return result;
}

void sub_100D41D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  a15 = (void **)&a19;
  sub_10091BBB0(&a15);
  _Unwind_Resume(a1);
}

BOOL sub_100D41D8C(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102182030);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102182030);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLFenceAuthorizationManager_Type::Notification, NotificationData_T = CLFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_100D4200C(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102182030);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102182030);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLFenceAuthorizationManager_Type::Notification, NotificationData_T = CLFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100D42394(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v7 = *a2;
  v8 = v3;
  do
  {
    v9 = *(_DWORD *)(v4 + 32);
    v10 = v9 < v7;
    if (v9 >= v7)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (!v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v3)
    return 0;
  if (v7 < *(_DWORD *)(v8 + 32))
    return 0;
  v12 = *(_QWORD *)(v8 + 64);
  if (!v12)
    return 0;
  if (v12 != a3)
    sub_100D43FE8(a3, *(std::string **)v12, *(__int128 **)(v12 + 8), 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 3));
  *(_WORD *)(a3 + 24) = *(_WORD *)(v12 + 24);
  return 1;
}

uint64_t sub_100D4243C(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t **v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int v10;
  __int128 v11;
  int *v12;

  sub_100D43838(a3, &v11);
  v10 = *a2;
  v12 = &v10;
  v5 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101B9EB60, &v12);
  sub_1002B7674((uint64_t)(v5 + 8), &v11);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_100D424E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100D424FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v4[3];
  __int16 v5;
  void **v6;

  memset(v4, 0, sizeof(v4));
  v5 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v4, a3, a4, 0);
  v6 = (void **)v4;
  sub_10091BBB0(&v6);
}

void sub_100D42554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  *(_QWORD *)(v10 - 24) = &a10;
  sub_10091BBB0((void ***)(v10 - 24));
  _Unwind_Resume(a1);
}

void sub_100D42570(uint64_t a1, signed __int32 *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  os_activity_scope_state_s state;
  uint64_t buf;
  _BYTE v29[20];
  __int16 v30;
  _QWORD *v31;
  __int16 v32;
  std::__shared_weak_count *v33;
  _QWORD **v34;
  _QWORD *v35[3];
  std::__shared_weak_count *v36;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102182030);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      buf = 68289794;
      *(_WORD *)v29 = 2082;
      *(_QWORD *)&v29[2] = "";
      *(_WORD *)&v29[10] = 2082;
      *(_QWORD *)&v29[12] = "activity";
      v30 = 2082;
      v31 = v10;
      v32 = 2050;
      v33 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", (uint8_t *)&buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v34 = v35;
      memset(v35, 0, sizeof(v35));
      v36 = 0;
      sub_1004A6D60((uint64_t)&buf, a2, (uint64_t)&v34);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)&buf);
      v18 = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v29, *(_QWORD **)&v29[8]);
      v21 = v36;
      if (v36)
      {
        v22 = (unint64_t *)&v36->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v34, v35[0]);
    }
    if (a4)
    {
      sub_100D43838(a3, &buf);
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)&buf);
      v24 = *(std::__shared_weak_count **)v29;
      if (*(_QWORD *)v29)
      {
        v25 = (unint64_t *)(*(_QWORD *)v29 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_100D432A4();
    os_activity_scope_leave(&state);
  }
}

void sub_100D42B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100D42BD8(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102182030);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102182030);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData>::listClients() [Notification_T = CLFenceAuthorizationManager_Type::Notification, NotificationData_T = CLFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102182030);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102182030);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData>::listClients() [Notification_T = CLFenceAuthorizationManager_Type::Notification, NotificationData_T = CLFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_102182030);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102182030);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData>::listClients() [Notification_T = CLFenceAuthorizationManager_Type::Notification, NotificationData_T = CLFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_100D43184(uint64_t a1)
{
  sub_100D44384(a1);
  operator delete();
}

id sub_100D431A8(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_100D439D8(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_100D431F4(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100D43220(id a1)
{
  qword_1022A0068 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_100D4324C(id a1)
{
  qword_1022A02F8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Location_deprecated");
}

void sub_100D43278(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100D432A4()
{
  operator new();
}

void sub_100D43364()
{
  operator delete();
}

void sub_100D43388(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_100D439D8(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_100D4375C(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102182030);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102182030);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLFenceAuthorizationManager_Type::Notification, NotificationData_T = CLFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_100D4375C(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_100D439D8(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

uint64_t sub_100D43838@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x38uLL);
  result = sub_100D43890((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_100D4387C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100D43890(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = off_1021821A0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 24) = 0;
  sub_10091C98C((char *)(a1 + 24), *(__int128 **)a2, *(__int128 **)(a2 + 8), 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 24);
  return a1;
}

void sub_100D43904(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100D43918(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021821A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100D4392C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021821A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100D43960(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  sub_10091BBB0(&v1);
}

uint64_t sub_100D4398C(uint64_t result)
{
  void **v1;

  if (*(_QWORD *)(result + 32))
  {
    v1 = *(void ***)(result + 32);
    sub_10091BBB0(&v1);
    operator delete();
  }
  return result;
}

id sub_100D439D8(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_100D43A24(a1);
  else
    return 0;
}

id sub_100D43A24(void *a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v7;
  int v8;
  id v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021821E0);
    v3 = qword_10229FC38;
    if (!os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
      return 0;
    v8 = 134218498;
    v9 = v2;
    v10 = 2048;
    v11 = 0;
    v12 = 2080;
    v13 = 0x8000000101C2275ALL & 0x7FFFFFFFFFFFFFFFLL;
    v4 = v3;
    v5 = OS_LOG_TYPE_ERROR;
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021821E0);
    v7 = qword_10229FC38;
    if (!os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
      return 0;
    v8 = 134218498;
    v9 = v2;
    v10 = 2048;
    v11 = 0;
    v12 = 2080;
    v13 = 0x8000000101C2275ALL & 0x7FFFFFFFFFFFFFFFLL;
    v4 = v7;
    v5 = OS_LOG_TYPE_FAULT;
  }
  _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", (uint8_t *)&v8, 0x20u);
  return 0;
}

void sub_100D43BF8(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_100D43C24(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100D43C24(a1, *a2);
    sub_100D43C24(a1, a2[1]);
    sub_100356E88((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_100D43C6C(uint64_t a1, const void **a2)
{
  const void **v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    v4 = a1 + 16;
    v5 = 1;
    do
    {
      if ((sub_100D43CE8(v4, a2, v2 + 4) & 1) == 0)
      {
        if (!sub_100D43CE8(v4, v2 + 4, a2))
          return v5;
        ++v2;
      }
      v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t sub_100D43CE8(uint64_t a1, const void **a2, const void **a3)
{
  int v5;
  int v6;
  size_t v7;
  const void *v8;
  size_t v9;
  const void *v10;
  size_t v11;
  int v12;
  BOOL v13;
  int v15;
  BOOL v16;
  const void **v17;
  const void **v18;
  const void **v19;
  int v20;
  const void **v21;
  const void **v22;
  const void **v23;
  int v24;
  size_t v25;
  const void **v26;
  size_t v27;
  const void **v28;
  size_t v29;
  int v30;

  v5 = *((char *)a3 + 23);
  v6 = *((char *)a2 + 23);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)a2 + 23);
  else
    v7 = (size_t)a2[1];
  if (v6 >= 0)
    v8 = a2;
  else
    v8 = *a2;
  if (v5 >= 0)
    v9 = *((unsigned __int8 *)a3 + 23);
  else
    v9 = (size_t)a3[1];
  if (v5 >= 0)
    v10 = a3;
  else
    v10 = *a3;
  if (v9 >= v7)
    v11 = v7;
  else
    v11 = v9;
  v12 = memcmp(v8, v10, v11);
  v13 = v7 < v9;
  if (v12)
    v13 = v12 < 0;
  if (v13)
    return 1;
  v15 = memcmp(v10, v8, v11);
  v16 = v9 < v7;
  if (v15)
    v16 = v15 < 0;
  if (v16)
    return 0;
  v19 = (const void **)a3[3];
  v18 = a3 + 3;
  v17 = v19;
  v20 = *((char *)v18 + 23);
  v23 = (const void **)a2[3];
  v22 = a2 + 3;
  v21 = v23;
  v24 = *((char *)v22 + 23);
  if (v24 >= 0)
    v25 = *((unsigned __int8 *)v22 + 23);
  else
    v25 = (size_t)v22[1];
  if (v24 >= 0)
    v26 = v22;
  else
    v26 = v21;
  if (v20 >= 0)
    v27 = *((unsigned __int8 *)v18 + 23);
  else
    v27 = (size_t)v18[1];
  if (v20 >= 0)
    v28 = v18;
  else
    v28 = v17;
  if (v27 >= v25)
    v29 = v25;
  else
    v29 = v27;
  v30 = memcmp(v26, v28, v29);
  if (v30)
    return v30 < 0;
  else
    return v25 < v27;
}

uint64_t *sub_100D43E10(uint64_t **a1, const void **a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)sub_100D43EA0((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    sub_100D43F3C((uint64_t)a1, a3, (uint64_t)v9);
    sub_1000145B0(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    sub_100D43FA4((uint64_t)v9, 0);
  }
  return v6;
}

_QWORD *sub_100D43EA0(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!sub_100D43CE8(v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!sub_100D43CE8(v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

char *sub_100D43F3C@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_1003B0668(v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100D43F8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100D43FA4(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100D43FA4(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100356E88((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_100D43FE8(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_100D44188((void **)a1);
    if (a4 > 0x108421084210842)
      sub_100259694();
    v10 = 0xDEF7BDEF7BDEF7BELL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x84210842108421)
      v11 = 0x108421084210842;
    else
      v11 = v10;
    sub_10091CA10((_QWORD *)a1, v11);
    v12 = sub_10091CAAC(v8, (__int128 *)__str, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3));
    sub_100D441F4((int)&v17, __str, v13, v9);
    v12 = sub_10091CAAC(v8, (__int128 *)v13, a3, *(char **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  sub_100D441F4((int)&v18, __str, (std::string *)a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 248;
      sub_10091BC34(v8, v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_100D44178(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100D44180(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100D44188(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 248;
        sub_10091BC34((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *sub_100D441F4(int a1, std::string *__str, std::string *a3, std::string *this)
{
  std::string *v5;
  std::string *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  std::string::size_type v12;
  std::string::pointer data;

  v5 = __str;
  if (__str == a3)
    return __str;
  v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    std::string::operator=(this + 1, v5 + 1);
    std::string::operator=(this + 2, v5 + 2);
    v7 = *(_OWORD *)&v5[3].__r_.__value_.__r.__words[2];
    v8 = *(_OWORD *)&v5[4].__r_.__value_.__r.__words[1];
    v9 = *(_OWORD *)&v5[5].__r_.__value_.__l.__data_;
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = *(_OWORD *)&v5[3].__r_.__value_.__l.__data_;
    *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v9;
    *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = v8;
    *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = v7;
    v10 = *(_OWORD *)&v5[6].__r_.__value_.__r.__words[1];
    v11 = *(_OWORD *)&v5[7].__r_.__value_.__l.__data_;
    v12 = *(std::string::size_type *)((char *)&v5[7].__r_.__value_.__r.__words[1] + 5);
    *(_OWORD *)&this[5].__r_.__value_.__r.__words[2] = *(_OWORD *)&v5[5].__r_.__value_.__r.__words[2];
    *(std::string::size_type *)((char *)&this[7].__r_.__value_.__r.__words[1] + 5) = v12;
    *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = v11;
    *(_OWORD *)&this[6].__r_.__value_.__r.__words[1] = v10;
    std::string::operator=(this + 8, v5 + 8);
    data = this[9].__r_.__value_.__l.__data_;
    this[9].__r_.__value_.__r.__words[0] = (std::string::size_type)v5[9].__r_.__value_.__l.__data_;

    if (this != v5)
      sub_1002F3538(&this[9].__r_.__value_.__s.__data_[8], (char *)v5[9].__r_.__value_.__l.__size_, v5[9].__r_.__value_.__r.__words[2], (uint64_t)(v5[9].__r_.__value_.__r.__words[2] - v5[9].__r_.__value_.__l.__size_) >> 4);
    this = (std::string *)((char *)this + 248);
    v5 = (std::string *)((char *)v5 + 248);
  }
  while (v5 != v6);
  return v6;
}

__int128 *sub_100D442E8(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_10091478C(a3, v4);
      v4 = (__int128 *)((char *)v4 + 248);
      a3 += 248;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void sub_100D44344(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_100949880((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

uint64_t sub_100D44384(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = &off_102182210;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_100D443E4()
{
  operator new();
}

void sub_100D444A4()
{
  operator delete();
}

uint64_t sub_100D444C8(uint64_t result)
{
  void **v1;

  if (*(_QWORD *)(result + 32))
  {
    v1 = *(void ***)(result + 32);
    sub_10091BBB0(&v1);
    operator delete();
  }
  return result;
}

BOOL sub_100D44514()
{
  return os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT);
}

BOOL sub_100D44534()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 104), OS_LOG_TYPE_INFO);
}

BOOL sub_100D44544()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 104));
}

uint64_t sub_100D44550()
{
  sub_1015A2E04(qword_102307E48, "FenceAuthorizationManager");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307E48, (void *)&_mh_execute_header);
}

void sub_100D447D0(id a1)
{
  qword_10229FF38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "RunningForm");
}

_QWORD *sub_100D447FC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE v16[24];
  _BYTE *v17;
  _BYTE v18[24];
  _BYTE *v19;
  _BYTE v20[24];
  _BYTE *v21;

  sub_100270E34((uint64_t)v20, a3);
  sub_100270E34((uint64_t)v18, a4);
  sub_100270E34((uint64_t)v16, a5);
  sub_100D6C128((uint64_t)a1, a2, CFSTR("Geofence"), 0, 1, (uint64_t)v20, (uint64_t)v18, (uint64_t)v16);
  v9 = v17;
  if (v17 == v16)
  {
    v10 = 4;
    v9 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  v11 = v19;
  if (v19 == v18)
  {
    v12 = 4;
    v11 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_11;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_11:
  v13 = v21;
  if (v21 == v20)
  {
    v14 = 4;
    v13 = v20;
    goto LABEL_15;
  }
  if (v21)
  {
    v14 = 5;
LABEL_15:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  *a1 = off_102182258;
  sub_100119F3C(a1 + 17);
  return a1;
}

void sub_100D44954(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100D6C25C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100D44A18(_QWORD *a1)
{
  *a1 = off_102182258;
  sub_10011A5A8(a1 + 17);
  return sub_100D6C25C((uint64_t)a1);
}

void sub_100D44A48(_QWORD *a1)
{
  *a1 = off_102182258;
  sub_10011A5A8(a1 + 17);
  sub_100D6C25C((uint64_t)a1);
  operator delete();
}

uint64_t sub_100D44A8C(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v5;
  id v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  id v10;
  uint8_t buf[4];
  id v12;

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021822F8);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    *(_DWORD *)buf = 136446210;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,clearOutAssetData", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021822F8);
    v5 = qword_1022A02A8;
    v6 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v9 = 136446210;
    v10 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 0, "#CLConfig,%{public}s,clearOutAssetData", &v9, 12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGeofenceConfigAsset::clearOutAssetData()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  sub_100119F3C(buf);
  sub_10052502C(a1 + 136, (uint64_t)buf);
  return sub_10011A5A8(buf);
}

void sub_100D44C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_100D44C80(uint64_t a1)
{
  NSObject *v2;
  id v3;
  int v4;
  int v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  void *v11;
  unint64_t size;
  int v13;
  void *v14;
  uint64_t v15;
  id v16;
  int v17;
  int v18;
  const char *v19;
  std::string *v20;
  __int128 __dst;
  _BYTE v22[7];
  char v23;
  void *__p[2];
  unsigned __int8 v25;
  _DWORD v26[2];
  std::string v27;
  std::string buf[68];

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021822F8);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v4 = sub_1007FA8FC(*(void **)(a1 + 128));
    v5 = sub_1007FA8C8(*(void **)(a1 + 128));
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v4;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,sending kNotificationGeofenceSettings for asset,compatibilityVersion,%{public}d,contentVersion,%{public}d", (uint8_t *)buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021822F8);
    v15 = qword_1022A02A8;
    v16 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v17 = sub_1007FA8FC(*(void **)(a1 + 128));
    v18 = sub_1007FA8C8(*(void **)(a1 + 128));
    LODWORD(v27.__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)v27.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
    WORD2(v27.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&v27.__r_.__value_.__r.__words[1] + 6) = v17;
    WORD1(v27.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(v27.__r_.__value_.__r.__words[2]) = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 0, "#CLConfig,%{public}s,sending kNotificationGeofenceSettings for asset,compatibilityVersion,%{public}d,contentVersion,%{public}d", &v27, 24);
    v20 = (std::string *)v19;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGeofenceConfigAsset::sendNotifications()", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  sub_1015A2E04(&v27, "#CLConfig,");
  v6 = std::string::append(&v27, (const std::string::value_type *)objc_msgSend(*(id *)(a1 + 16), "UTF8String"));
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  buf[0].__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  sub_1015A2E04(__p, ",kNotificationGeofenceSettings,");
  if ((v25 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v25 & 0x80u) == 0)
    v9 = v25;
  else
    v9 = (std::string::size_type)__p[1];
  v10 = std::string::append(buf, (const std::string::value_type *)v8, v9);
  v11 = (void *)v10->__r_.__value_.__r.__words[0];
  size = v10->__r_.__value_.__l.__size_;
  v26[0] = v10->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v26 + 3) = *(_DWORD *)((char *)&v10->__r_.__value_.__r.__words[2] + 3);
  v13 = SHIBYTE(v10->__r_.__value_.__r.__words[2]);
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if ((char)v25 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v27.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_18;
  }
  else if ((v13 & 0x80000000) == 0)
  {
LABEL_18:
    *(_QWORD *)&__dst = v11;
    *((_QWORD *)&__dst + 1) = size;
    *(_DWORD *)v22 = v26[0];
    *(_DWORD *)&v22[3] = *(_DWORD *)((char *)v26 + 3);
    v23 = v13;
    goto LABEL_21;
  }
  sub_100115CE4(&__dst, v11, size);
LABEL_21:
  v14 = (void *)sub_10011A5AC(a1 + 136);
  sub_1007FA930(&__dst, v14);
  if (v23 < 0)
    operator delete((void *)__dst);
  sub_100D6EF24(a1, 5, a1 + 136);
  if (v13 < 0)
    operator delete(v11);
}

void sub_100D44FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a23 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D45054(uint64_t a1)
{
  sub_100D6D640(a1, CFSTR("settings.plist"), a1 + 136);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
}

void sub_100D4508C(id a1)
{
  qword_1022A02A8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

uint64_t sub_100D457FC(uint64_t a1, __int128 *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  NSObject *v10;
  const char *v12;
  uint8_t *v13;
  _WORD v14[8];
  uint8_t buf[1640];

  v6 = sub_10067D0DC(a1, a3, a4);
  *(_QWORD *)v6 = off_102182328;
  v7 = (char *)(v6 + 232);
  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)(v6 + 232), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v6 + 248) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
  }
  nullsub_34(a1 + 256);
  if (sub_1000CC4F4(a1 + 64))
  {
    v9 = v7;
    if (*(char *)(a1 + 255) < 0)
      v9 = *(char **)v7;
    sub_100634364(a1 + 64, v9, (const char **)&qword_102307E78, 0, 0);
    sub_10067D20C(a1);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102182368);
    v10 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#Warning CLWifiAssociatedApCentroidDatabase is not valid, not initializing. Please re-initialize if needed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102182368);
      v14[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "#Warning CLWifiAssociatedApCentroidDatabase is not valid, not initializing. Please re-initialize if needed", v14, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "CLWifiAssociatedApCentroidDatabase::CLWifiAssociatedApCentroidDatabase(const std::string &, const CLSqliteDatabase::SqliteProperties &, const CFTimeInterval &)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
  return a1;
}

void sub_100D45A24(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 255) < 0)
    operator delete(*v2);
  sub_10067D1C4(v1);
  _Unwind_Resume(a1);
}

char *sub_100D45A54@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0x100000002;
  *(_WORD *)(a2 + 8) = 256;
  v3 = a2 + 16;
  if (result[23] < 0)
  {
    result = (char *)sub_100115CE4((_BYTE *)v3, *(void **)result, *((_QWORD *)result + 1));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)result;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)result + 2);
  }
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100D45AB4(uint64_t a1, char *a2)
{
  unint64_t v4;
  uint64_t v5[4];
  char v6;

  sub_100D45A54(a2, (uint64_t)v5);
  v4 = 0xBFF0000000000000;
  sub_100D457FC(a1, &xmmword_102307E60, v5, &v4);
  if (v6 < 0)
    operator delete((void *)v5[2]);
  return a1;
}

void sub_100D45B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D45B34(uint64_t a1)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;
  _QWORD *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  size_t v19;
  _QWORD *v20;
  _QWORD *v21;
  size_t v22;
  _QWORD *v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  NSObject *v40;
  const char *v42;
  uint8_t *v43;
  void *v44[2];
  char v45;
  _WORD v46[8];
  uint64_t v47;
  _QWORD v48[8];
  uint8_t buf[23];

  if (sub_1000CC504(a1))
  {
    sub_100263E50((uint64_t)v46);
    v2 = sub_100263F7C(&v47, (uint64_t)"INSERT OR REPLACE INTO ", 23);
    v3 = *(char *)(a1 + 255);
    if (v3 >= 0)
      v4 = a1 + 232;
    else
      v4 = *(_QWORD *)(a1 + 232);
    if (v3 >= 0)
      v5 = *(unsigned __int8 *)(a1 + 255);
    else
      v5 = *(_QWORD *)(a1 + 240);
    v6 = sub_100263F7C(v2, v4, v5);
    v7 = sub_100263F7C(v6, (uint64_t)"(", 3);
    v8 = sub_100263F7C(v7, (uint64_t)"MAC", 3);
    v9 = sub_100263F7C(v8, (uint64_t)",", 1);
    v10 = strlen("Latitude");
    v11 = sub_100263F7C(v9, (uint64_t)"Latitude", v10);
    v12 = sub_100263F7C(v11, (uint64_t)",", 1);
    v13 = strlen("Longitude");
    v14 = sub_100263F7C(v12, (uint64_t)"Longitude", v13);
    v15 = sub_100263F7C(v14, (uint64_t)",", 1);
    v16 = strlen("HorizontalAccuracy");
    v17 = sub_100263F7C(v15, (uint64_t)"HorizontalAccuracy", v16);
    v18 = sub_100263F7C(v17, (uint64_t)",", 1);
    v19 = strlen("Altitude");
    v20 = sub_100263F7C(v18, (uint64_t)"Altitude", v19);
    v21 = sub_100263F7C(v20, (uint64_t)",", 1);
    v22 = strlen("VerticalAccuracy");
    v23 = sub_100263F7C(v21, (uint64_t)"VerticalAccuracy", v22);
    v24 = sub_100263F7C(v23, (uint64_t)",", 1);
    v25 = strlen("Reach");
    v26 = sub_100263F7C(v24, (uint64_t)"Reach", v25);
    v27 = sub_100263F7C(v26, (uint64_t)",", 1);
    v28 = sub_100263F7C(v27, (uint64_t)"LastUpdatedTimestamp", 20);
    v29 = sub_100263F7C(v28, (uint64_t)",", 1);
    v30 = sub_100263F7C(v29, (uint64_t)"StationaryTimeInSeconds", 23);
    v31 = sub_100263F7C(v30, (uint64_t)",", 1);
    v32 = sub_100263F7C(v31, (uint64_t)"LoiType", 7);
    v33 = sub_100263F7C(v32, (uint64_t)",", 1);
    v34 = sub_100263F7C(v33, (uint64_t)"CKRecordName", 12);
    v35 = sub_100263F7C(v34, (uint64_t)",", 1);
    v36 = sub_100263F7C(v35, (uint64_t)"CKSystemFields", 14);
    v37 = sub_100263F7C(v36, (uint64_t)") VALUES ", 9);
    sub_100263F7C(v37, (uint64_t)"(?,?,?,?,?,?,?,?,?,?,?,?);", 26);
    std::stringbuf::str(v44, v48);
    v38 = a1 + 64;
    if (v45 >= 0)
      v39 = (char *)v44;
    else
      v39 = (char *)v44[0];
    sub_1000CDA68(v38, v39);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102182368);
  v40 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call insertOrReplace() without a backing database in CLWifiAssociatedApCentroidDatabase!", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102182368);
    v46[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "#Warning Attempt to call insertOrReplace() without a backing database in CLWifiAssociatedApCentroidDatabase!", v46, 2);
    v43 = (uint8_t *)v42;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiAssociatedApCentroidDatabase::insertOrReplace(const CLWifiAssociatedApCentroidDatabaseEntry &)", "%s\n", v42);
    if (v43 != buf)
      free(v43);
  }
  return 0;
}

void sub_100D4658C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a16 < 0)
    operator delete(__p);
  if (a18)
    (*(void (**)(uint64_t))(*(_QWORD *)a18 + 8))(a18);
  if (a24 < 0)
    operator delete(a19);
  sub_1018B38B4((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_100D46618(uint64_t a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void **v9;
  uint64_t v10;
  int v11;
  int v12;
  void *v14;
  int v15;
  void *__p[2];
  uint64_t v17;
  void *v18[2];
  uint64_t v19;
  char v20[8];
  int v21[8];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  _BYTE v26[32];

  sub_1015A2E04(v18, (char *)objc_msgSend(objc_msgSend(a2, "recordName"), "UTF8String"));
  if (SHIBYTE(v19) < 0)
  {
    sub_100115CE4(&v23, v18[0], (unint64_t)v18[1]);
  }
  else
  {
    v23 = *(_OWORD *)v18;
    v24 = v19;
  }
  LODWORD(v22) = 1;
  v25 = 0;
  sub_1000A0C9C((uint64_t)v26, (uint64_t)&v22);
  v25 = 1;
  sub_1000A0BC4((uint64_t)&v22);
  v20[0] = 0;
  if (v25)
  {
    sub_1000A0C08(v21, (uint64_t)v26);
    v20[0] = 1;
  }
  sub_1000CB370(a1, (uint64_t)v20, &v22);
  if (v20[0])
  {
    sub_1000A0BC4((uint64_t)v21);
    v20[0] = 0;
  }
  v5 = v22;
  v6 = v23;
  if (v22 == (_QWORD)v23)
  {
LABEL_35:
    __p[0] = &v22;
    sub_100B04710((void ***)__p);
    *a3 = 0;
    a3[112] = 0;
    goto LABEL_37;
  }
  while (1)
  {
    if (*(char *)(v5 + 103) < 0)
    {
      sub_100115CE4(__p, *(void **)(v5 + 80), *(_QWORD *)(v5 + 88));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v5 + 80);
      v17 = *(_QWORD *)(v5 + 96);
    }
    if (v17 >= 0)
      v7 = (void *)HIBYTE(v17);
    else
      v7 = __p[1];
    v8 = (void *)HIBYTE(v19);
    if (v19 < 0)
      v8 = v18[1];
    if (v7 != v8)
    {
      if (v17 < 0)
        operator delete(__p[0]);
      goto LABEL_34;
    }
    v9 = v19 >= 0 ? v18 : (void **)v18[0];
    if ((v17 & 0x8000000000000000) == 0)
      break;
    v14 = __p[0];
    v15 = memcmp(__p[0], v9, (size_t)__p[1]);
    operator delete(v14);
    if (!v15)
      goto LABEL_36;
LABEL_34:
    v5 += 112;
    if (v5 == v6)
      goto LABEL_35;
  }
  if (HIBYTE(v17))
  {
    v10 = 0;
    do
    {
      v11 = *((unsigned __int8 *)__p + v10);
      v12 = *((unsigned __int8 *)v9 + v10);
    }
    while (v11 == v12 && HIBYTE(v17) - 1 != v10++);
    if (v11 != v12)
      goto LABEL_34;
  }
LABEL_36:
  sub_100D48060((uint64_t)a3, v5);
  __p[0] = &v22;
  sub_100B04710((void ***)__p);
LABEL_37:
  if (v25)
    sub_1000A0BC4((uint64_t)v26);
  if (SHIBYTE(v19) < 0)
    operator delete(v18[0]);
}

void sub_100D46888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  a9 = &a24;
  sub_100B04710((void ***)&a9);
  if (a28)
    sub_1000A0BC4(v28);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100D46900(uint64_t a1)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  NSObject *v10;
  const char *v12;
  uint8_t *v13;
  void *__p[2];
  char v15;
  uint8_t buf[16];
  uint64_t v17;
  _QWORD v18[8];

  if (sub_1000CC504(a1))
  {
    sub_100263E50((uint64_t)buf);
    v2 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    v3 = *(char *)(a1 + 255);
    if (v3 >= 0)
      v4 = a1 + 232;
    else
      v4 = *(_QWORD *)(a1 + 232);
    if (v3 >= 0)
      v5 = *(unsigned __int8 *)(a1 + 255);
    else
      v5 = *(_QWORD *)(a1 + 240);
    v6 = sub_100263F7C(v2, v4, v5);
    v7 = sub_100263F7C(v6, (uint64_t)" WHERE ", 7);
    v8 = sub_100263F7C(v7, (uint64_t)"MAC", 3);
    sub_100263F7C(v8, (uint64_t)" = ?;", 5);
    std::stringbuf::str(__p, v18);
    if (v15 >= 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(a1 + 64, v9);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102182368);
  v10 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call deleteByMac() without a backing database in CLWifiAssociatedApCentroidDatabase!", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102182368);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "#Warning Attempt to call deleteByMac() without a backing database in CLWifiAssociatedApCentroidDatabase!", __p, 2);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiAssociatedApCentroidDatabase::deleteByMac(const CLMacAddress &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  return 0;
}

void sub_100D46C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a18 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_100D46C98(uint64_t a1)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  NSObject *v10;
  const char *v12;
  uint8_t *v13;
  void *v14[2];
  char v15;
  uint8_t buf[16];
  uint64_t v17;
  _QWORD v18[8];

  if (sub_1000CC504(a1))
  {
    sub_100263E50((uint64_t)buf);
    v2 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    v3 = *(char *)(a1 + 255);
    if (v3 >= 0)
      v4 = a1 + 232;
    else
      v4 = *(_QWORD *)(a1 + 232);
    if (v3 >= 0)
      v5 = *(unsigned __int8 *)(a1 + 255);
    else
      v5 = *(_QWORD *)(a1 + 240);
    v6 = sub_100263F7C(v2, v4, v5);
    v7 = sub_100263F7C(v6, (uint64_t)" WHERE ", 7);
    v8 = sub_100263F7C(v7, (uint64_t)"CKRecordName", 12);
    sub_100263F7C(v8, (uint64_t)" = ?;", 5);
    std::stringbuf::str(v14, v18);
    if (v15 >= 0)
      v9 = (char *)v14;
    else
      v9 = (char *)v14[0];
    sub_1000CDA68(a1 + 64, v9);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102182368);
  v10 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call deleteByCKRecordID() without a backing database in CLWifiAssociatedApCentroidDatabase!", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102182368);
    LOWORD(v14[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "#Warning Attempt to call deleteByCKRecordID() without a backing database in CLWifiAssociatedApCentroidDatabase!", v14, 2);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiAssociatedApCentroidDatabase::deleteByCKRecordID(CKRecordID *)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  return 0;
}

void sub_100D46FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  if (a23 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_100D47064(uint64_t a1)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  NSObject *v8;
  const char *v10;
  uint8_t *v11;
  void *__p[2];
  char v13;
  uint8_t buf[16];
  uint64_t v15;
  _QWORD v16[8];

  if (sub_1000CC504(a1))
  {
    sub_100263E50((uint64_t)buf);
    v2 = sub_100263F7C(&v15, (uint64_t)"DELETE FROM ", 12);
    v3 = *(char *)(a1 + 255);
    if (v3 >= 0)
      v4 = a1 + 232;
    else
      v4 = *(_QWORD *)(a1 + 232);
    if (v3 >= 0)
      v5 = *(unsigned __int8 *)(a1 + 255);
    else
      v5 = *(_QWORD *)(a1 + 240);
    v6 = sub_100263F7C(v2, v4, v5);
    sub_100263F7C(v6, (uint64_t)";", 1);
    std::stringbuf::str(__p, v16);
    if (v13 >= 0)
      v7 = (char *)__p;
    else
      v7 = (char *)__p[0];
    sub_1000CDA68(a1 + 64, v7);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102182368);
  v8 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call deleteAllRecords() without a backing database in CLWifiAssociatedApCentroidDatabase!", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102182368);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "#Warning Attempt to call deleteAllRecords() without a backing database in CLWifiAssociatedApCentroidDatabase!", __p, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiAssociatedApCentroidDatabase::deleteAllRecords()", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  return 0;
}

void sub_100D47348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a18 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a20);
  _Unwind_Resume(a1);
}

id sub_100D4739C(uint64_t a1, void *a2)
{
  NSObject *v3;
  _BYTE *v4;
  id v5;
  NSObject *v6;
  uint64_t v8;
  _BYTE *v9;
  char *v10;
  char *v11;
  const char *v12;
  char *v13;
  _BYTE v14[80];
  void *v15;
  char v16;
  char v17;
  _BYTE buf[12];
  __int16 v19;
  void *v20;
  char v21;
  int v22;
  _BYTE *v23;
  __int16 v24;
  void *v25;
  _BYTE __p[12];
  char v27;

  sub_100D46618(a1, a2, v14);
  if (v17)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102182368);
    v3 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      sub_1008BB1F0((uint64_t)v14, __p);
      v4 = v27 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136380931;
      *(_QWORD *)&buf[4] = v4;
      v19 = 2113;
      v20 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CLWifiAssociatedApCentroidDatabase, found entry %{private}s for record ID %{private}@", buf, 0x16u);
      if (v27 < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102182368);
      v8 = qword_1022A0048;
      sub_1008BB1F0((uint64_t)v14, buf);
      if (v21 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v22 = 136380931;
      v23 = v9;
      v24 = 2113;
      v25 = a2;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v8, 2, "CLWifiAssociatedApCentroidDatabase, found entry %{private}s for record ID %{private}@", &v22, 22);
      v11 = v10;
      if (v21 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "CKRecord *CLWifiAssociatedApCentroidDatabase::ckRecordForRecordID(CKRecordID *) const", "%s\n", v11);
      if (v11 != __p)
        free(v11);
    }
    v5 = sub_1008BAABC((uint64_t)v14);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102182368);
    v6 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__p = 138477827;
      *(_QWORD *)&__p[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLWifiAssociatedApCentroidDatabase, warning, entry is not found, no CKRecord is provided for record ID %{private}@", __p, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102182368);
      *(_DWORD *)buf = 138477827;
      *(_QWORD *)&buf[4] = a2;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 0, "CLWifiAssociatedApCentroidDatabase, warning, entry is not found, no CKRecord is provided for record ID %{private}@", buf, 12);
      v13 = (char *)v12;
      sub_100512490("Generic", 1, 0, 2, "CKRecord *CLWifiAssociatedApCentroidDatabase::ckRecordForRecordID(CKRecordID *) const", "%s\n", v12);
      if (v13 != __p)
        free(v13);
    }
    v5 = 0;
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  return v5;
}

void sub_100D47748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29)
{
  if (a29)
  {
    if (a27 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D47784(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  _BYTE v7[80];
  void *__p;
  char v9;
  char v10;

  sub_100D46618(a1, a2, v7);
  if (!v10)
    return 0;
  sub_1008BB1BC((uint64_t)v7, a3);
  if (!v10)
    sub_10028DF3C();
  v5 = sub_100D45B34(a1);
  if (v10 && v9 < 0)
    operator delete(__p);
  return v5;
}

void sub_100D4780C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  if (a27)
  {
    if (a25 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D47830(uint64_t a1)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  NSObject *v8;
  const char *v10;
  uint8_t *v11;
  void *__p[2];
  char v13;
  _WORD v14[8];
  uint64_t v15;
  _QWORD v16[8];
  uint8_t buf[1640];

  if (sub_1000CC504(a1))
  {
    sub_100263E50((uint64_t)v14);
    v2 = sub_100263F7C(&v15, (uint64_t)"SELECT COUNT(*) FROM ", 21);
    v3 = *(char *)(a1 + 255);
    if (v3 >= 0)
      v4 = a1 + 232;
    else
      v4 = *(_QWORD *)(a1 + 232);
    if (v3 >= 0)
      v5 = *(unsigned __int8 *)(a1 + 255);
    else
      v5 = *(_QWORD *)(a1 + 240);
    v6 = sub_100263F7C(v2, v4, v5);
    sub_100263F7C(v6, (uint64_t)";", 1);
    std::stringbuf::str(__p, v16);
    if (v13 >= 0)
      v7 = (char *)__p;
    else
      v7 = (char *)__p[0];
    sub_1000CDA68(a1 + 64, v7);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102182368);
  v8 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call count() without a backing database in CLWifiAssociatedApCentroidDatabase!", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102182368);
    v14[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "#Warning Attempt to call count() without a backing database in CLWifiAssociatedApCentroidDatabase!", v14, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "uint32_t CLWifiAssociatedApCentroidDatabase::count() const", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  return 0;
}

void sub_100D47C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (a17 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_100D47C9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  void **v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t *v15[3];
  _BYTE buf[12];
  char v17;
  int v18;
  _BYTE *v19;
  void *__p[2];
  char v21;

  v4 = a1 + 256;
  if (sub_10127BCB0())
  {
    sub_1000A11BC(a1, __p);
    sub_1000A1248(v15, (__int128 **)__p);
    *(_QWORD *)buf = __p;
    sub_100B04710((void ***)buf);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102182368);
    v5 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      sub_1000A1298(v15, __p);
      v6 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136380675;
      *(_QWORD *)&buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLWifiAssociatedApCentroidDatabase, metrics, %{private}s", buf, 0xCu);
      if (v21 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102182368);
      v11 = qword_1022A0048;
      sub_1000A1298(v15, buf);
      if (v17 >= 0)
        v12 = buf;
      else
        v12 = *(_BYTE **)buf;
      v18 = 136380675;
      v19 = v12;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v11, 2, "CLWifiAssociatedApCentroidDatabase, metrics, %{private}s", &v18, 12);
      v14 = v13;
      if (v17 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "void CLWifiAssociatedApCentroidDatabase::submitMetricsIfPossible(const BOOL)", "%s\n", v14);
      if (v14 != (char *)__p)
        free(v14);
    }
    v7 = sub_100B56B28(v15);
    sub_100B5671C((uint64_t *)v15);
    v9 = v8;
    v10 = sub_100B567B4((uint64_t *)v15);
    sub_10127BCEC(v9, v10, v4, v7, a2);
    __p[0] = v15;
    sub_100B04710((void ***)__p);
  }
}

void sub_100D47F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  a22 = (void **)&a12;
  sub_100B04710(&a22);
  _Unwind_Resume(a1);
}

char *sub_100D47F7C@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[255] < 0)
    return (char *)sub_100115CE4((_BYTE *)a2, *((void **)result + 29), *((_QWORD *)result + 30));
  *(_OWORD *)a2 = *(_OWORD *)(result + 232);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 31);
  return result;
}

uint64_t sub_100D47FA8(uint64_t a1)
{
  *(_QWORD *)a1 = off_102182328;
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  return sub_10067D1C4(a1);
}

void sub_100D47FE4(uint64_t a1)
{
  *(_QWORD *)a1 = off_102182328;
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  sub_10067D1C4(a1);
  operator delete();
}

void sub_100D48034(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_100D48060(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  v7 = a1 + 80;
  if (*(char *)(a2 + 103) < 0)
  {
    sub_100115CE4((_BYTE *)v7, *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)v7 = v8;
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = 1;
  return a1;
}

void sub_100D480D8(const std::logic_error *a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_100D4812C((uint64_t)exception, a1);
}

void sub_100D48114(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100D4812C(uint64_t a1, const std::logic_error *a2)
{
  *(_QWORD *)a1 = &off_10212A310;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &off_1021823F8;
  *(_QWORD *)(a1 + 8) = off_102182428;
  *(_QWORD *)(a1 + 24) = off_102182450;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t sub_100D48188(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &off_10212A340;
  sub_1002693D0((uint64_t *)(a1 + 32));
  std::logic_error::~logic_error((std::logic_error *)(a1 + 8));
  return a1;
}

void sub_100D481C8()
{
  operator new();
}

void sub_100D482A0()
{
  std::logic_error *v0;

  std::logic_error::~logic_error(v0);
  operator delete();
}

void sub_100D482E4(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_100D484C0((uint64_t)exception, a1);
}

void sub_100D48320(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100D48334(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &off_10212A340;
  sub_1002693D0((uint64_t *)(a1 + 32));
  std::logic_error::~logic_error((std::logic_error *)(a1 + 8));
  operator delete();
}

void sub_100D48384(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &off_10212A340;
  sub_1002693D0((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
}

void sub_100D483BC(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &off_10212A340;
  sub_1002693D0((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
  operator delete();
}

void sub_100D48410(_QWORD *a1)
{
  *a1 = &off_10212A340;
  sub_1002693D0(a1 + 1);
  std::logic_error::~logic_error((std::logic_error *)a1 - 1);
}

void sub_100D48448(_QWORD *a1)
{
  *a1 = &off_10212A340;
  sub_1002693D0(a1 + 1);
  std::logic_error::~logic_error((std::logic_error *)a1 - 1);
  operator delete();
}

void sub_100D4849C(std::logic_error *a1)
{
  std::logic_error::~logic_error(a1);
  operator delete();
}

uint64_t sub_100D484C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &off_10212A310;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = &off_102182470;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &off_10212A340;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &off_1021823F8;
  *(_QWORD *)(a1 + 8) = off_102182428;
  *(_QWORD *)(a1 + 24) = off_102182450;
  return a1;
}

void sub_100D4856C(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

void sub_100D48580()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x38uLL);
  exception[4] = 0;
  exception[5] = 0;
  *((_DWORD *)exception + 12) = -1;
  *exception = &off_1021824F8;
  exception[1] = off_102182528;
  exception[2] = off_102182550;
  exception[3] = 0;
}

void sub_100D485CC()
{
  operator new();
}

void sub_100D48698()
{
  std::exception *v0;

  std::exception::~exception(v0);
  operator delete();
}

void sub_100D486DC(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x38uLL);
  sub_100D48738((uint64_t)exception, a1);
}

void sub_100D48718(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const char *sub_100D4872C()
{
  return "boost::bad_get: failed value get using boost::get";
}

uint64_t sub_100D48738(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &off_10212A310;
  *(_QWORD *)(a1 + 8) = &off_102182570;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &off_10212A340;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &off_1021824F8;
  *(_QWORD *)(a1 + 8) = off_102182528;
  *(_QWORD *)(a1 + 16) = off_102182550;
  return a1;
}

void sub_100D487D8(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_100D487EC(int *a1)
{
  _DWORD *v1;

  v1 = 0;
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      return v1;
    case 1:
      v1 = a1 + 2;
      break;
    default:
      sub_10055A5D8();
  }
  return v1;
}

uint64_t sub_100D48834()
{
  uint64_t result;

  sub_1015A2E04(&xmmword_102307E60, "WifiAssociatedApCentroidTable");
  result = __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102307E60, (void *)&_mh_execute_header);
  qword_102307E78 = (uint64_t)"MAC";
  dword_102307E80 = 1;
  word_102307E84 = 1;
  byte_102307E88 = 0;
  byte_102307EA0 = 0;
  qword_102307EA8 = (uint64_t)"Latitude";
  dword_102307EB0 = 2;
  word_102307EB4 = 0;
  byte_102307EB8 = 0;
  byte_102307ED0 = 0;
  qword_102307ED8 = (uint64_t)"Longitude";
  dword_102307EE0 = 2;
  word_102307EE4 = 0;
  byte_102307EE8 = 0;
  byte_102307F00 = 0;
  qword_102307F08 = (uint64_t)"HorizontalAccuracy";
  dword_102307F10 = 2;
  word_102307F14 = 0;
  byte_102307F18 = 0;
  byte_102307F30 = 0;
  qword_102307F38 = (uint64_t)"Altitude";
  dword_102307F40 = 2;
  word_102307F44 = 0;
  byte_102307F48 = 0;
  byte_102307F60 = 0;
  qword_102307F68 = (uint64_t)"VerticalAccuracy";
  dword_102307F70 = 2;
  word_102307F74 = 0;
  byte_102307F78 = 0;
  byte_102307F90 = 0;
  qword_102307F98 = (uint64_t)"Reach";
  dword_102307FA0 = 1;
  word_102307FA4 = 0;
  byte_102307FA8 = 0;
  byte_102307FC0 = 0;
  qword_102307FC8 = (uint64_t)"LastUpdatedTimestamp";
  dword_102307FD0 = 2;
  word_102307FD4 = 0;
  byte_102307FD8 = 0;
  byte_102307FF0 = 0;
  qword_102307FF8 = (uint64_t)"StationaryTimeInSeconds";
  dword_102308000 = 2;
  word_102308004 = 0;
  byte_102308008 = 0;
  byte_102308020 = 0;
  qword_102308028 = (uint64_t)"LoiType";
  dword_102308030 = 1;
  word_102308034 = 0;
  byte_102308038 = 0;
  byte_102308050 = 0;
  qword_102308058 = (uint64_t)"CKRecordName";
  dword_102308060 = 3;
  word_102308064 = 0;
  byte_102308068 = 0;
  byte_102308080 = 0;
  qword_102308088 = (uint64_t)"CKSystemFields";
  dword_102308090 = 4;
  word_102308094 = 0;
  byte_102308098 = 0;
  byte_1023080B0 = 0;
  qword_1023080B8 = 0;
  dword_1023080C0 = 5;
  word_1023080C4 = 0;
  byte_1023080C8 = 0;
  byte_1023080E0 = 0;
  return result;
}

uint64_t sub_100D48A10(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  unsigned __int8 *v12;
  uint64_t *v13;
  unsigned int v14;
  int v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  NSObject *v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  NSObject *v36;
  int v37;
  unsigned __int8 *v38;
  int v39;
  int v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  NSObject *v44;
  int v45;
  unsigned __int8 *v46;
  int v47;
  int v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  NSObject *v52;
  int v53;
  unsigned __int8 *v54;
  int v55;
  int v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  NSObject *v60;
  int v61;
  uint64_t *v62;
  int v63;
  int v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  NSObject *v68;
  uint64_t v69;
  int *v70;
  int v71;
  int v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  NSObject *v76;
  int v77;
  int v78;
  int v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  NSObject *v83;
  uint64_t v84;
  uint64_t *v85;
  int v86;
  int v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  NSObject *v91;
  uint64_t v92;
  unsigned __int8 *v93;
  int v94;
  int v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  NSObject *v99;
  int v100;
  unsigned __int8 *v101;
  int v102;
  int v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  NSObject *v107;
  int v108;
  unsigned __int8 *v109;
  int v110;
  int v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  NSObject *v115;
  int v116;
  int v118;
  const char *v119;
  char *v120;
  int v121;
  const char *v122;
  char *v123;
  int v124;
  const char *v125;
  char *v126;
  int v127;
  const char *v128;
  char *v129;
  int v130;
  const char *v131;
  char *v132;
  int v133;
  const char *v134;
  char *v135;
  uint64_t v136;
  const char *v137;
  char *v138;
  int v139;
  const char *v140;
  char *v141;
  uint64_t v142;
  const char *v143;
  char *v144;
  uint64_t v145;
  const char *v146;
  char *v147;
  int v148;
  const char *v149;
  char *v150;
  int v151;
  const char *v152;
  char *v153;
  int v154;
  const char *v155;
  char *v156;
  uint64_t v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  _OWORD buf[102];

  *(_QWORD *)a1 = off_102182598;
  v6 = a1 + 48;
  sub_1002433B8(a1 + 8);
  LODWORD(v159) = *((_DWORD *)sub_10108CCAC() + 13);
  *((_QWORD *)&v159 + 1) = *((_QWORD *)sub_10108CCAC() + 7);
  v160 = *((_QWORD *)sub_10108CCAC() + 8);
  sub_1009AEAC0(v6, &v159);
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 240) = a1 + 248;
  *(_QWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 264) = a1 + 272;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 288) = 0xFFFF;
  *(_QWORD *)(a1 + 300) = 0;
  *(_QWORD *)(a1 + 292) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 308) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 324) = _Q1;
  *(_OWORD *)(a1 + 340) = _Q1;
  *(_OWORD *)(a1 + 356) = _Q1;
  *(_DWORD *)(a1 + 372) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 376) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 404) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 412) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_BYTE *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 444) = 0xFFFF00000000;
  *(_QWORD *)(a1 + 452) = 0;
  *(_QWORD *)(a1 + 460) = 0;
  *(_OWORD *)(a1 + 468) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 484) = _Q1;
  *(_OWORD *)(a1 + 500) = _Q1;
  *(_OWORD *)(a1 + 516) = _Q1;
  v158 = _Q1;
  *(_DWORD *)(a1 + 532) = 0;
  *(_DWORD *)(a1 + 560) = 0;
  *(_QWORD *)(a1 + 536) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 564) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 572) = 0x7FFFFFFF;
  *(_BYTE *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 604) = 0;
  *(_BYTE *)(a1 + 612) = sub_10019CFA0() == 1;
  *(_WORD *)(a1 + 613) = 0;
  v12 = (unsigned __int8 *)(a1 + 615);
  *(_DWORD *)(a1 + 615) = 16843009;
  *(_BYTE *)(a1 + 619) = sub_10016F688()[2];
  *(_BYTE *)(a1 + 620) = 1;
  sub_100197040();
  *(_BYTE *)(a1 + 621) = sub_100195F08() ^ 1;
  v13 = (uint64_t *)(a1 + 712);
  *(_QWORD *)(a1 + 680) = 0;
  *(_DWORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 622) = 0u;
  *(_DWORD *)(a1 + 637) = 0;
  *(_QWORD *)(a1 + 648) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_QWORD *)(a1 + 704) = 0x300000000;
  *(_OWORD *)(a1 + 712) = xmmword_101C22900;
  *(_DWORD *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_WORD *)(a1 + 752) = 257;
  *(_OWORD *)(a1 + 760) = xmmword_101C22910;
  *(_QWORD *)(a1 + 776) = 0;
  *(_BYTE *)(a1 + 784) = 0;
  *(_QWORD *)(a1 + 808) = 0;
  *(_QWORD *)(a1 + 800) = 0;
  *(_QWORD *)(a1 + 792) = a1 + 800;
  *(_QWORD *)(a1 + 832) = 0;
  *(_QWORD *)(a1 + 824) = 0;
  *(_QWORD *)(a1 + 816) = a1 + 824;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  sub_100197040();
  v14 = sub_1001B796C();
  sub_100D70180(a1 + 904, a1, (v14 >> 15) & 1);
  sub_100ED1810(a1 + 1312);
  *(_BYTE *)(a1 + 1648) = 1;
  *(_QWORD *)(a1 + 1656) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 1664) = v158;
  *(_OWORD *)(a1 + 1680) = v158;
  *(_OWORD *)(a1 + 1696) = v158;
  *(_OWORD *)(a1 + 1712) = v158;
  *(_OWORD *)(a1 + 1728) = v158;
  *(_OWORD *)(a1 + 1744) = v158;
  *(_QWORD *)(a1 + 1760) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 1768) = a2;
  sub_1002433B8(a1 + 1776);
  *(_DWORD *)(a1 + 1816) = a3;
  *(_QWORD *)(a1 + 1824) = 0;
  *(_WORD *)(a1 + 1872) = 0;
  *(_OWORD *)(a1 + 1888) = 0u;
  *(_QWORD *)(a1 + 1880) = a1 + 1888;
  *(_OWORD *)(a1 + 1912) = 0u;
  *(_QWORD *)(a1 + 1904) = a1 + 1912;
  *(_OWORD *)(a1 + 1928) = 0u;
  sub_1001E4804(buf);
  v15 = sub_1001E4874(*(uint64_t *)&buf[0], "FenceUseCellPositioning", (BOOL *)(a1 + 615));
  v16 = v15;
  v17 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_5;
  v18 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if (!v16)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    if (!v15)
      goto LABEL_11;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v20 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    v21 = *v12;
    LODWORD(buf[0]) = 67174657;
    DWORD1(buf[0]) = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Fence: Overriding cell positioning usage to %{private}d", (uint8_t *)buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v118 = *v12;
    v161 = 67174657;
    LODWORD(v162) = v118;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Fence: Overriding cell positioning usage to %{private}d", &v161, 8, a1 + 1904, a1 + 824, a1 + 800, a1 + 240, a1 + 1888);
    v120 = (char *)v119;
    sub_100512490("Generic", 1, 0, 2, "CLFenceMonitor::CLFenceMonitor(CLFenceMonitorClientProtocol *, CLFenceMonitor::DatabaseType)", "%s\n", v119);
    if (v120 != (char *)buf)
      free(v120);
  }
LABEL_11:
  sub_1001E4804(buf);
  v22 = (unsigned __int8 *)(a1 + 616);
  v23 = sub_1001E4874(*(uint64_t *)&buf[0], "FenceUseWifiPositioning", (BOOL *)(a1 + 616));
  v24 = v23;
  v25 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_15;
  v26 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    if (!v24)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    if (!v23)
      goto LABEL_21;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v28 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    v29 = *v22;
    LODWORD(buf[0]) = 67174657;
    DWORD1(buf[0]) = v29;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Fence: Overriding WiFi positioning usage to %{private}d", (uint8_t *)buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v121 = *v22;
    v161 = 67174657;
    LODWORD(v162) = v121;
    LODWORD(v157) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Fence: Overriding WiFi positioning usage to %{private}d", &v161, v157);
    v123 = (char *)v122;
    sub_100512490("Generic", 1, 0, 2, "CLFenceMonitor::CLFenceMonitor(CLFenceMonitorClientProtocol *, CLFenceMonitor::DatabaseType)", "%s\n", v122);
    if (v123 != (char *)buf)
      free(v123);
  }
LABEL_21:
  sub_1001E4804(buf);
  v30 = (unsigned __int8 *)(a1 + 617);
  v31 = sub_1001E4874(*(uint64_t *)&buf[0], "FenceUseGpsPositioning", (BOOL *)(a1 + 617));
  v32 = v31;
  v33 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_25;
  v34 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
    if (!v32)
      goto LABEL_31;
  }
  else
  {
LABEL_25:
    if (!v31)
      goto LABEL_31;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v36 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    v37 = *v30;
    LODWORD(buf[0]) = 67174657;
    DWORD1(buf[0]) = v37;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Fence: Overriding GPS positioning usage to %{private}d", (uint8_t *)buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v124 = *v30;
    v161 = 67174657;
    LODWORD(v162) = v124;
    LODWORD(v157) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Fence: Overriding GPS positioning usage to %{private}d", &v161, v157);
    v126 = (char *)v125;
    sub_100512490("Generic", 1, 0, 2, "CLFenceMonitor::CLFenceMonitor(CLFenceMonitorClientProtocol *, CLFenceMonitor::DatabaseType)", "%s\n", v125);
    if (v126 != (char *)buf)
      free(v126);
  }
LABEL_31:
  sub_1001E4804(buf);
  v38 = (unsigned __int8 *)(a1 + 618);
  v39 = sub_1001E4874(*(uint64_t *)&buf[0], "FenceUsePipelinePositioning", (BOOL *)(a1 + 618));
  v40 = v39;
  v41 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_35;
  v42 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
    if (!v40)
      goto LABEL_41;
  }
  else
  {
LABEL_35:
    if (!v39)
      goto LABEL_41;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v44 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    v45 = *v38;
    LODWORD(buf[0]) = 67174657;
    DWORD1(buf[0]) = v45;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "Fence: Overriding Pipeline positioning usage to %{private}d", (uint8_t *)buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v127 = *v38;
    v161 = 67174657;
    LODWORD(v162) = v127;
    LODWORD(v157) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Fence: Overriding Pipeline positioning usage to %{private}d", &v161, v157);
    v129 = (char *)v128;
    sub_100512490("Generic", 1, 0, 2, "CLFenceMonitor::CLFenceMonitor(CLFenceMonitorClientProtocol *, CLFenceMonitor::DatabaseType)", "%s\n", v128);
    if (v129 != (char *)buf)
      free(v129);
  }
LABEL_41:
  sub_1001E4804(buf);
  v46 = (unsigned __int8 *)(a1 + 619);
  v47 = sub_1001E4874(*(uint64_t *)&buf[0], "FenceUseVisitEventsForSignificantMonitoring", (BOOL *)(a1 + 619));
  v48 = v47;
  v49 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_45;
  v50 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v51 = __ldaxr(v50);
  while (__stlxr(v51 - 1, v50));
  if (!v51)
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
    if (!v48)
      goto LABEL_51;
  }
  else
  {
LABEL_45:
    if (!v47)
      goto LABEL_51;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v52 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    v53 = *v46;
    LODWORD(buf[0]) = 67174657;
    DWORD1(buf[0]) = v53;
    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "Fence: Overriding Visit event usage to %{private}d", (uint8_t *)buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v130 = *v46;
    v161 = 67174657;
    LODWORD(v162) = v130;
    LODWORD(v157) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Fence: Overriding Visit event usage to %{private}d", &v161, v157);
    v132 = (char *)v131;
    sub_100512490("Generic", 1, 0, 2, "CLFenceMonitor::CLFenceMonitor(CLFenceMonitorClientProtocol *, CLFenceMonitor::DatabaseType)", "%s\n", v131);
    if (v132 != (char *)buf)
      free(v132);
  }
LABEL_51:
  sub_1001E4804(buf);
  v54 = (unsigned __int8 *)(a1 + 620);
  v55 = sub_1001E4874(*(uint64_t *)&buf[0], "FenceIssueDelayedTriggers", (BOOL *)(a1 + 620));
  v56 = v55;
  v57 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_55;
  v58 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v59 = __ldaxr(v58);
  while (__stlxr(v59 - 1, v58));
  if (!v59)
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
    if (!v56)
      goto LABEL_61;
  }
  else
  {
LABEL_55:
    if (!v55)
      goto LABEL_61;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v60 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    v61 = *v54;
    LODWORD(buf[0]) = 67174657;
    DWORD1(buf[0]) = v61;
    _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "Fence: Overriding FenceIssueDelayedTriggers to %{private}d", (uint8_t *)buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v133 = *v54;
    v161 = 67174657;
    LODWORD(v162) = v133;
    LODWORD(v157) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Fence: Overriding FenceIssueDelayedTriggers to %{private}d", &v161, v157);
    v135 = (char *)v134;
    sub_100512490("Generic", 1, 0, 2, "CLFenceMonitor::CLFenceMonitor(CLFenceMonitorClientProtocol *, CLFenceMonitor::DatabaseType)", "%s\n", v134);
    if (v135 != (char *)buf)
      free(v135);
  }
LABEL_61:
  sub_1001E4804(buf);
  v62 = (uint64_t *)(a1 + 720);
  v63 = sub_1001FD98C(*(uint64_t *)&buf[0], "FenceContinousTrackingInterval", (void *)(a1 + 720));
  v64 = v63;
  v65 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_65;
  v66 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v67 = __ldaxr(v66);
  while (__stlxr(v67 - 1, v66));
  if (!v67)
  {
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
    if (!v64)
      goto LABEL_71;
  }
  else
  {
LABEL_65:
    if (!v63)
      goto LABEL_71;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v68 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    v69 = *v62;
    LODWORD(buf[0]) = 134283521;
    *(_QWORD *)((char *)buf + 4) = v69;
    _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "Fence: Overriding fWakeIntervalSeconds, %{private}.1lf", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v136 = *v62;
    v161 = 134283521;
    v162 = v136;
    LODWORD(v157) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Fence: Overriding fWakeIntervalSeconds, %{private}.1lf", &v161, v157);
    v138 = (char *)v137;
    sub_100512490("Generic", 1, 0, 2, "CLFenceMonitor::CLFenceMonitor(CLFenceMonitorClientProtocol *, CLFenceMonitor::DatabaseType)", "%s\n", v137);
    if (v138 != (char *)buf)
      free(v138);
  }
LABEL_71:
  sub_1001E4804(buf);
  v70 = (int *)(a1 + 708);
  v71 = sub_1001E4B84(*(uint64_t *)&buf[0], "FenceMonitorDelayedTriggerCountMax", (_DWORD *)(a1 + 708));
  v72 = v71;
  v73 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_75;
  v74 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v75 = __ldaxr(v74);
  while (__stlxr(v75 - 1, v74));
  if (!v75)
  {
    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
    std::__shared_weak_count::__release_weak(v73);
    if (!v72)
      goto LABEL_81;
  }
  else
  {
LABEL_75:
    if (!v71)
      goto LABEL_81;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v76 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    v77 = *v70;
    LODWORD(buf[0]) = 67174657;
    DWORD1(buf[0]) = v77;
    _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "Fence: Overriding fDelayedTriggerCountMax, %{private}d", (uint8_t *)buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v139 = *v70;
    v161 = 67174657;
    LODWORD(v162) = v139;
    LODWORD(v157) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Fence: Overriding fDelayedTriggerCountMax, %{private}d", &v161, v157);
    v141 = (char *)v140;
    sub_100512490("Generic", 1, 0, 2, "CLFenceMonitor::CLFenceMonitor(CLFenceMonitorClientProtocol *, CLFenceMonitor::DatabaseType)", "%s\n", v140);
    if (v141 != (char *)buf)
      free(v141);
  }
LABEL_81:
  sub_1001E4804(buf);
  v78 = sub_1001FD98C(*(uint64_t *)&buf[0], "FenceMonitorDelayedTriggerIntervalSeconds", (void *)(a1 + 712));
  v79 = v78;
  v80 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_85;
  v81 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v82 = __ldaxr(v81);
  while (__stlxr(v82 - 1, v81));
  if (!v82)
  {
    ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
    std::__shared_weak_count::__release_weak(v80);
    if (!v79)
      goto LABEL_91;
  }
  else
  {
LABEL_85:
    if (!v78)
      goto LABEL_91;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v83 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    v84 = *v13;
    LODWORD(buf[0]) = 134283521;
    *(_QWORD *)((char *)buf + 4) = v84;
    _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "Fence: Overriding fDelayedTriggerIntervalSeconds, %{private}.1lf", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v142 = *v13;
    v161 = 134283521;
    v162 = v142;
    LODWORD(v157) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Fence: Overriding fDelayedTriggerIntervalSeconds, %{private}.1lf", &v161, v157);
    v144 = (char *)v143;
    sub_100512490("Generic", 1, 0, 2, "CLFenceMonitor::CLFenceMonitor(CLFenceMonitorClientProtocol *, CLFenceMonitor::DatabaseType)", "%s\n", v143);
    if (v144 != (char *)buf)
      free(v144);
  }
LABEL_91:
  sub_1001E4804(buf);
  v85 = (uint64_t *)(a1 + 768);
  v86 = sub_1001FD98C(*(uint64_t *)&buf[0], "FenceMonitorConsolidatedTriggersTimeInterval", (void *)(a1 + 768));
  v87 = v86;
  v88 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_95;
  v89 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v90 = __ldaxr(v89);
  while (__stlxr(v90 - 1, v89));
  if (!v90)
  {
    ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
    std::__shared_weak_count::__release_weak(v88);
    if (!v87)
      goto LABEL_101;
  }
  else
  {
LABEL_95:
    if (!v86)
      goto LABEL_101;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v91 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    v92 = *v85;
    LODWORD(buf[0]) = 134283521;
    *(_QWORD *)((char *)buf + 4) = v92;
    _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEFAULT, "Fence: Overriding fConsolidatedTriggersTimeInterval, %{private}.1lf", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v145 = *v85;
    v161 = 134283521;
    v162 = v145;
    LODWORD(v157) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Fence: Overriding fConsolidatedTriggersTimeInterval, %{private}.1lf", &v161, v157);
    v147 = (char *)v146;
    sub_100512490("Generic", 1, 0, 2, "CLFenceMonitor::CLFenceMonitor(CLFenceMonitorClientProtocol *, CLFenceMonitor::DatabaseType)", "%s\n", v146);
    if (v147 != (char *)buf)
      free(v147);
  }
LABEL_101:
  sub_1001E4804(buf);
  v93 = (unsigned __int8 *)(a1 + 752);
  v94 = sub_1001E4874(*(uint64_t *)&buf[0], "FenceMonitorIsScheduleContTrackingWakes", (BOOL *)(a1 + 752));
  v95 = v94;
  v96 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_105;
  v97 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v98 = __ldaxr(v97);
  while (__stlxr(v98 - 1, v97));
  if (!v98)
  {
    ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
    std::__shared_weak_count::__release_weak(v96);
    if (!v95)
      goto LABEL_111;
  }
  else
  {
LABEL_105:
    if (!v94)
      goto LABEL_111;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v99 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    v100 = *v93;
    LODWORD(buf[0]) = 67174657;
    DWORD1(buf[0]) = v100;
    _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEFAULT, "Fence: Overriding fIsScheduleContTrackingWakes, %{private}d", (uint8_t *)buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v148 = *v93;
    v161 = 67174657;
    LODWORD(v162) = v148;
    LODWORD(v157) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Fence: Overriding fIsScheduleContTrackingWakes, %{private}d", &v161, v157);
    v150 = (char *)v149;
    sub_100512490("Generic", 1, 0, 2, "CLFenceMonitor::CLFenceMonitor(CLFenceMonitorClientProtocol *, CLFenceMonitor::DatabaseType)", "%s\n", v149);
    if (v150 != (char *)buf)
      free(v150);
  }
LABEL_111:
  sub_1001E4804(buf);
  v101 = (unsigned __int8 *)(a1 + 753);
  v102 = sub_1001E4874(*(uint64_t *)&buf[0], "FenceMonitorIsTriggerOnTether", (BOOL *)(a1 + 753));
  v103 = v102;
  v104 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_115;
  v105 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v106 = __ldaxr(v105);
  while (__stlxr(v106 - 1, v105));
  if (!v106)
  {
    ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
    std::__shared_weak_count::__release_weak(v104);
    if (!v103)
      goto LABEL_121;
  }
  else
  {
LABEL_115:
    if (!v102)
      goto LABEL_121;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v107 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    v108 = *v101;
    LODWORD(buf[0]) = 67174657;
    DWORD1(buf[0]) = v108;
    _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEFAULT, "Fence: Overriding fIsTriggerOnTether, %{private}d", (uint8_t *)buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v151 = *v101;
    v161 = 67174657;
    LODWORD(v162) = v151;
    LODWORD(v157) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Fence: Overriding fIsTriggerOnTether, %{private}d", &v161, v157);
    v153 = (char *)v152;
    sub_100512490("Generic", 1, 0, 2, "CLFenceMonitor::CLFenceMonitor(CLFenceMonitorClientProtocol *, CLFenceMonitor::DatabaseType)", "%s\n", v152);
    if (v153 != (char *)buf)
      free(v153);
  }
LABEL_121:
  sub_1001E4804(buf);
  v109 = (unsigned __int8 *)(a1 + 621);
  v110 = sub_1001E4874(*(uint64_t *)&buf[0], "FenceWiFiScanOnWake", (BOOL *)(a1 + 621));
  v111 = v110;
  v112 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_125;
  v113 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v114 = __ldaxr(v113);
  while (__stlxr(v114 - 1, v113));
  if (!v114)
  {
    ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
    std::__shared_weak_count::__release_weak(v112);
    if (!v111)
      goto LABEL_131;
  }
  else
  {
LABEL_125:
    if (!v110)
      goto LABEL_131;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v115 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    v116 = *v109;
    LODWORD(buf[0]) = 67174657;
    DWORD1(buf[0]) = v116;
    _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_DEFAULT, "WIFI_LOC: Overriding fPerformScanOnWake = %{private}d", (uint8_t *)buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v154 = *v109;
    v161 = 67174657;
    LODWORD(v162) = v154;
    LODWORD(v157) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "WIFI_LOC: Overriding fPerformScanOnWake = %{private}d", &v161, v157);
    v156 = (char *)v155;
    sub_100512490("Generic", 1, 0, 2, "CLFenceMonitor::CLFenceMonitor(CLFenceMonitorClientProtocol *, CLFenceMonitor::DatabaseType)", "%s\n", v155);
    if (v156 != (char *)buf)
      free(v156);
  }
LABEL_131:
  sub_100D4A564(a1);
  sub_100D70374(a1 + 904, *(unsigned __int8 *)(a1 + 612));
  *(_QWORD *)(a1 + 1832) = objc_alloc_init((Class)GEOLocationShifter);
  return a1;
}

void sub_100D4A3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD **a12, _QWORD **a13, uint64_t a14, _QWORD **a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD **v18;
  uint64_t v19;
  void *v21;
  void *v22;

  sub_100D63F94(a11, *v18);
  sub_100D63ECC(v15 + 1880, *a15);
  sub_1007A1E58((uint64_t *)(v15 + 1824), 0);
  sub_100D70370(v17);
  sub_100D63DF8(v15 + 816, *a12);
  sub_100D63D14(v15 + 792, *a13);
  sub_1009EF82C(v16, *(_QWORD **)(v15 + 272));
  sub_100D63C4C(a14, *(_QWORD **)(v15 + 248));
  v21 = *(void **)(v15 + 216);
  if (v21)
  {
    *(_QWORD *)(v15 + 224) = v21;
    operator delete(v21);
  }
  sub_10047F6F4((_QWORD *)(v19 + 24));
  v22 = *(void **)v19;
  if (*(_QWORD *)v19)
  {
    *(_QWORD *)(v15 + 152) = v22;
    operator delete(v22);
  }
  sub_1006F0FB8((_QWORD *)(v15 + 72));
  _Unwind_Resume(a1);
}

char *sub_100D4A564(uint64_t a1)
{
  char v2;
  char v3;
  BOOL v4;
  char v5;
  char *result;
  char v7;

  if (sub_10016F688()[377])
  {
    sub_100197040();
    v2 = sub_10075D288();
  }
  else
  {
    v2 = 0;
  }
  v3 = _os_feature_enabled_impl("CoreLocation", "cl_fence_home_loi_exit_metrics");
  v4 = 1;
  if ((v3 & 1) == 0 && (v2 & 1) == 0)
    v4 = sub_10016F688()[378] != 0;
  *(_BYTE *)(a1 + 1874) = v4;
  sub_100197040();
  v5 = sub_100760428();
  result = sub_10016F688();
  if (result[376])
  {
    v7 = 1;
  }
  else
  {
    result = (char *)_os_feature_enabled_impl("CoreLocation", "cl_fence_milo_home");
    v7 = result | v5 ^ 1;
  }
  *(_BYTE *)(a1 + 1875) = v7;
  return result;
}

uint64_t sub_100D4A618(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = off_102182598;

  sub_100D63F94(a1 + 1904, *(_QWORD **)(a1 + 1912));
  sub_100D63ECC(a1 + 1880, *(_QWORD **)(a1 + 1888));
  sub_1007A1E58((uint64_t *)(a1 + 1824), 0);
  sub_100D70370(a1 + 904);
  sub_100D63DF8(a1 + 816, *(_QWORD **)(a1 + 824));
  sub_100D63D14(a1 + 792, *(_QWORD **)(a1 + 800));
  sub_1009EF82C(a1 + 264, *(_QWORD **)(a1 + 272));
  sub_100D63C4C(a1 + 240, *(_QWORD **)(a1 + 248));
  v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(_QWORD *)(a1 + 224) = v2;
    operator delete(v2);
  }
  sub_10047F6F4((_QWORD *)(a1 + 168));
  v3 = *(void **)(a1 + 144);
  if (v3)
  {
    *(_QWORD *)(a1 + 152) = v3;
    operator delete(v3);
  }
  sub_1006F0FB8((_QWORD *)(a1 + 72));
  return a1;
}

void sub_100D4A6E0(uint64_t a1)
{
  sub_100D4A618(a1);
  operator delete();
}

uint64_t sub_100D4A704(uint64_t result, char a2, int a3, int a4, int a5, double a6, double a7)
{
  *(double *)result = a6;
  *(double *)(result + 8) = a7;
  *(_BYTE *)(result + 16) = a2;
  *(_DWORD *)(result + 20) = a3;
  *(_DWORD *)(result + 24) = a4;
  *(_DWORD *)(result + 28) = a5;
  return result;
}

BOOL sub_100D4A718(double *a1, double a2)
{
  double v3;
  double v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  int v9;
  double v10;
  uint8_t buf[4];
  double v12;

  v3 = *a1;
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v4 = vabdd_f64(a2, v3);
  v5 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134283521;
    v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Fence: MiLo, miLoEventAge, %{private}.1f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v9 = 134283521;
    v10 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: MiLo, miLoEventAge, %{private}.1f", &v9, 12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceMonitor::MicroLocationEvent::isMicroLocationEventRecent(const CFAbsoluteTime) const", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return v4 <= *((double *)sub_10016F688() + 48);
}

void sub_100D4A8D8(uint64_t a1, char a2)
{
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  _WORD v13[8];
  uint8_t buf[1640];

  *(_DWORD *)(a1 + 288) = 0xFFFF;
  *(_QWORD *)(a1 + 300) = 0;
  *(_QWORD *)(a1 + 292) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 308) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 324) = _Q1;
  *(_OWORD *)(a1 + 340) = _Q1;
  *(_OWORD *)(a1 + 356) = _Q1;
  *(_DWORD *)(a1 + 372) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 376) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 404) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 412) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_BYTE *)(a1 + 440) = 0;
  *(_DWORD *)(a1 + 448) = 0xFFFF;
  *(_QWORD *)(a1 + 460) = 0;
  *(_QWORD *)(a1 + 452) = 0;
  *(_OWORD *)(a1 + 468) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 484) = _Q1;
  *(_OWORD *)(a1 + 500) = _Q1;
  *(_OWORD *)(a1 + 516) = _Q1;
  *(_DWORD *)(a1 + 532) = 0;
  *(_QWORD *)(a1 + 536) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 560) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 564) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 572) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  *(_BYTE *)(a1 + 600) = 0;
  nullsub_34(a1 + 1312);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a1 + 144);
  if ((a2 & 1) == 0)
  {
    v9 = *(_QWORD *)(a1 + 1824);
    if (v9)
    {
      sub_10064BB8C(v9);
    }
    else
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v10 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Fence: Warning data can't be cleared yet", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v13[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Fence: Warning data can't be cleared yet", v13, 2);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::clearLocationData(BOOL)", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
      *(_BYTE *)(a1 + 614) = 1;
    }
  }
}

void sub_100D4AB60(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 612) != a2)
  {
    *(_BYTE *)(a1 + 612) = a2;
    sub_100D70374(a1 + 904, a2);
    sub_100D4ABA4(a1);
  }
}

void sub_100D4ABA4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  char *v4;
  __int128 *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  void **v12;

  if (*(_BYTE *)(a1 + 612) && *(_BYTE *)(a1 + 613))
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v2 = *(_QWORD **)(a1 + 240);
    v3 = (_QWORD *)(a1 + 248);
    if (v2 != (_QWORD *)(a1 + 248))
    {
      v4 = 0;
      do
      {
        v5 = (__int128 *)(v2 + 4);
        if ((unint64_t)v4 >= v11)
        {
          v4 = (char *)sub_10091D4EC(&v9, v5);
        }
        else
        {
          sub_1004E5748(v4, v5);
          v4 += 248;
        }
        v10 = v4;
        v6 = (_QWORD *)v2[1];
        if (v6)
        {
          do
          {
            v7 = v6;
            v6 = (_QWORD *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v7 = (_QWORD *)v2[2];
            v8 = *v7 == (_QWORD)v2;
            v2 = v7;
          }
          while (!v8);
        }
        v2 = v7;
      }
      while (v7 != v3);
    }
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 1768) + 400))(*(_QWORD *)(a1 + 1768), &v9);
    v12 = (void **)&v9;
    sub_10091BBB0(&v12);
  }
}

void sub_100D4AC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_10091BBB0(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_100D4ACB4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1313) = a2;
  return result;
}

void sub_100D4ACBC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  _BYTE v20[24];
  uint64_t v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;

  v6 = sub_10016FC40(a1 + 240, (unsigned __int8 *)a2);
  if (a1 + 248 == v6)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v14 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v15 = a2 + 24;
      if (*(char *)(a2 + 47) < 0)
        v15 = *(_QWORD *)(a2 + 24);
      *(_DWORD *)buf = 136380675;
      v23 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#Warning didn't find fence for location type, %{private}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v18 = *(_QWORD *)(a2 + 24);
      v17 = a2 + 24;
      v16 = v18;
      if (*(char *)(v17 + 23) >= 0)
        v16 = v17;
      *(_DWORD *)v20 = 136380675;
      *(_QWORD *)&v20[4] = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "#Warning didn't find fence for location type, %{private}s", v20, 12, *(_OWORD *)v20, *(_QWORD *)&v20[16], v21);
      goto LABEL_28;
    }
  }
  else
  {
    v7 = *(int *)(v6 + 204);
    if ((_DWORD)v7 != a3)
    {
      *(_DWORD *)(v6 + 204) = a3;
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v8 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        v9 = a2 + 24;
        if (*(char *)(a2 + 47) < 0)
          v9 = *(_QWORD *)(a2 + 24);
        *(_DWORD *)buf = 134284035;
        v23 = v7;
        v24 = 2049;
        v25 = a3;
        v26 = 2081;
        v27 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Setting fence location type from %{private}lu to %{private}lu for %{private}s", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v12 = *(_QWORD *)(a2 + 24);
        v11 = a2 + 24;
        v10 = v12;
        if (*(char *)(v11 + 23) >= 0)
          v10 = v11;
        *(_DWORD *)v20 = 134284035;
        *(_QWORD *)&v20[4] = v7;
        *(_WORD *)&v20[12] = 2049;
        *(_QWORD *)&v20[14] = a3;
        *(_WORD *)&v20[22] = 2081;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Setting fence location type from %{private}lu to %{private}lu for %{private}s", v20, 32, *(_OWORD *)v20, *(_QWORD *)&v20[16], v10);
LABEL_28:
        v19 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::setFenceLocationTypeForFence(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, const CLFenceManager_Type::FenceLocationType)", "%s\n", v13);
        if (v19 != buf)
          free(v19);
      }
    }
  }
}

void sub_100D4B008(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;

  v6 = sub_10016FC40(a1 + 240, (unsigned __int8 *)a2);
  if (a1 + 248 == v6)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v7 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v8 = a2 + 24;
      if (*(char *)(a2 + 47) < 0)
        v8 = *(_QWORD *)(a2 + 24);
      *(_DWORD *)buf = 136380675;
      v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#Warning didn't find fence for environment type, %{private}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v11 = *(_QWORD *)(a2 + 24);
      v10 = a2 + 24;
      v9 = v11;
      if (*(char *)(v10 + 23) >= 0)
        v9 = v10;
      v14 = 136380675;
      v15 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "#Warning didn't find fence for environment type, %{private}s", &v14, 12);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::setEnvironmentTypeForFence(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, CLFenceManager_Type::FenceEnvironmentType)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
  else
  {
    *(_DWORD *)(v6 + 200) = a3;
  }
}

void sub_100D4B1F8(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _BYTE v19[88];
  _BYTE buf[12];
  __int16 v21;
  void **v22;
  char v23;
  int v24;
  unint64_t v25;
  __int16 v26;
  _BYTE *v27;
  void *__p[2];
  char v29;

  sub_100B6D7B8((uint64_t)v19);
  v6 = (uint64_t)&qword_1022A0000;
  if (qword_1022A0060 != -1)
    goto LABEL_15;
  while (1)
  {
    v7 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v9 = *a2;
      v8 = a2[1];
      sub_100B6D7F8((uint64_t)v19, __p);
      v10 = v29 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 134349315;
      *(_QWORD *)&buf[4] = 0xEF7BDEF7BDEF7BDFLL * ((v8 - v9) >> 3);
      v21 = 2081;
      v22 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Fence: startMonitoringFences, fences, %{public}lu, status, %{private}s", buf, 0x16u);
      if (v29 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (*(_QWORD *)(v6 + 96) != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v12 = qword_1022A0068;
      v14 = *a2;
      v13 = a2[1];
      sub_100B6D7F8((uint64_t)v19, buf);
      if (v23 >= 0)
        v15 = buf;
      else
        v15 = *(_BYTE **)buf;
      v24 = 134349315;
      v25 = 0xEF7BDEF7BDEF7BDFLL * ((v13 - v14) >> 3);
      v26 = 2081;
      v27 = v15;
      LODWORD(v18) = 22;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v12, 2, "Fence: startMonitoringFences, fences, %{public}lu, status, %{private}s", &v24, v18);
      v17 = v16;
      if (v23 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::startMonitoringFences(const CFAbsoluteTime, const std::vector<CLFenceManager_Type::Fence> &)", "%s\n", v17);
      if (v17 != (char *)__p)
        free(v17);
    }
    v11 = *a2;
    a2 = (uint64_t *)a2[1];
    if ((uint64_t *)v11 == a2)
      break;
    v6 = 0xFFFFFFFFLL;
    while (*(_DWORD *)(v11 + 184) != -1)
    {
      sub_100D4B4D8(a1, v11, (uint64_t)v19, a3);
      v11 += 248;
      if ((uint64_t *)v11 == a2)
        return;
    }
    sub_101928A1C();
    __break(1u);
LABEL_15:
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  }
}

uint64_t sub_100D4B4D8(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  NSObject *v8;
  void **v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  _BYTE buf[12];
  char v17;
  int v18;
  _BYTE *v19;
  void *__p[2];
  char v21;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v8 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    sub_100C3B9BC(a2, __p);
    v9 = v21 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136380675;
    *(_QWORD *)&buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Fence: startMonitoring, fence, %{private}s", buf, 0xCu);
    if (v21 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v12 = qword_1022A0068;
    sub_100C3B9BC(a2, buf);
    if (v17 >= 0)
      v13 = buf;
    else
      v13 = *(_BYTE **)buf;
    v18 = 136380675;
    v19 = v13;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v12, 2, "Fence: startMonitoring, fence, %{private}s", &v18, 12);
    v15 = v14;
    if (v17 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::startMonitoring(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &, BOOL)", "%s\n", v15);
    if (v15 != (char *)__p)
      free(v15);
  }
  if (*(_DWORD *)(a2 + 184) == -1)
  {
    sub_101928B84();
    __break(1u);
  }
  v10 = *(_QWORD *)(a1 + 256);
  sub_100D59308(a1, a2, a3, a4);
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 1768) + 104))(*(_QWORD *)(a1 + 1768), v10, *(_QWORD *)(a1 + 256));
}

void sub_100D4B758(uint64_t a1, unsigned __int8 **a2, int a3, double a4)
{
  NSObject *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  unint64_t v18;
  uint8_t buf[4];
  unint64_t v20;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v8 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v9 = 0xEF7BDEF7BDEF7BDFLL * ((a2[1] - *a2) >> 3);
    *(_DWORD *)buf = 134349056;
    v20 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Fence: stopMonitoringFences, fences, %{public}lu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v14 = 0xEF7BDEF7BDEF7BDFLL * ((a2[1] - *a2) >> 3);
    v17 = 134349056;
    v18 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: stopMonitoringFences, fences, %{public}lu", &v17, 12);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::stopMonitoringFences(const CFAbsoluteTime, const std::vector<CLFenceManager_Type::Fence> &, BOOL)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  v10 = *a2;
  v11 = a2[1];
  if (*a2 != v11)
  {
    do
    {
      v12 = sub_10016FC40(a1 + 240, v10);
      if (a1 + 248 == v12)
      {
        if (a3)
        {
          v13 = *(_QWORD *)(a1 + 1824);
          if (v13)
            sub_10064C6EC(v13, (uint64_t)v10);
        }
      }
      else
      {
        sub_100D4B9D4(a1, (unsigned __int8 *)(v12 + 32), a3, a4);
      }
      v10 += 248;
    }
    while (v10 != v11);
    if (a2[1] != *a2)
      sub_10016CFF8(a1, a4);
  }
}

uint64_t sub_100D4B9D4(uint64_t a1, unsigned __int8 *a2, int a3, double a4)
{
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 256);
  if ((a2[160] & 0x80) != 0)
    sub_100D5B210((uint64_t **)a1, a2, a4);
  sub_100D5B5B4(a1, (uint64_t)a2, a3, a4);
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 1768) + 104))(*(_QWORD *)(a1 + 1768), v8, *(_QWORD *)(a1 + 256));
}

void sub_100D4BA50(uint64_t a1, double a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  __int128 *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  unsigned __int8 *v11;
  char *v12;
  unint64_t v13;
  unsigned __int8 **v14;

  v11 = 0;
  v12 = 0;
  v13 = 0;
  v4 = *(_QWORD **)(a1 + 240);
  v5 = (_QWORD *)(a1 + 248);
  if (v4 != (_QWORD *)(a1 + 248))
  {
    v6 = 0;
    do
    {
      v7 = (__int128 *)(v4 + 4);
      if ((unint64_t)v6 >= v13)
      {
        v6 = (char *)sub_10091D4EC((uint64_t *)&v11, v7);
      }
      else
      {
        sub_1004E5748(v6, v7);
        v6 += 248;
      }
      v12 = v6;
      v8 = (_QWORD *)v4[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v4[2];
          v10 = *v9 == (_QWORD)v4;
          v4 = v9;
        }
        while (!v10);
      }
      v4 = v9;
    }
    while (v9 != v5);
  }
  sub_100D4B758(a1, &v11, 1, a2);
  v14 = &v11;
  sub_10091BBB0((void ***)&v14);
}

void sub_100D4BB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_10091BBB0(&a12);
  _Unwind_Resume(a1);
}

BOOL sub_100D4BB5C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v2 = *(_QWORD *)(a1 + 1824);
  if (v2)
    return sub_10064CF08(v2, a2);
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning Fence: state scrub prior unlock", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#Warning Fence: state scrub prior unlock", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceMonitor::scrubFenceStates(const std::vector<CLFenceManager_Type::Fence> &)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  return 0;
}

uint64_t sub_100D4BD18(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  const char *v27;
  uint8_t *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  _BOOL4 v35;
  __int16 v36;
  int v37;
  uint8_t buf[4];
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  _BOOL4 v43;
  __int16 v44;
  int v45;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v6 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a2 + 23) >= 0)
      v7 = a2;
    else
      v7 = *(_QWORD *)a2;
    if (*(char *)(a2 + 47) >= 0)
      v8 = a2 + 24;
    else
      v8 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)buf = 136380931;
    v39 = v7;
    v40 = 2081;
    v41 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Fence: requestRegionState, %{private}s/%{private}s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    if (*(char *)(a2 + 23) >= 0)
      v16 = a2;
    else
      v16 = *(_QWORD *)a2;
    if (*(char *)(a2 + 47) >= 0)
      v17 = a2 + 24;
    else
      v17 = *(_QWORD *)(a2 + 24);
    v30 = 136380931;
    v31 = v16;
    v32 = 2081;
    v33 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: requestRegionState, %{private}s/%{private}s", &v30, 22);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "CLFenceManager_Type::FenceStatus CLFenceMonitor::getCurrentFenceState(const CLFenceManager_Type::Fence &, const BOOL)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  v9 = sub_10016FC40(a1 + 240, (unsigned __int8 *)a2);
  if (a1 + 248 != v9)
    return *(unsigned int *)(v9 + 280);
  v11 = *(_QWORD *)(a1 + 1824);
  if (v11 && a3 && (!*(_BYTE *)(a1 + 730) || *(_BYTE *)(a1 + 731)))
    return sub_10064D5E4(v11, a2);
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v12 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a2 + 23) >= 0)
      v13 = a2;
    else
      v13 = *(_QWORD *)a2;
    v14 = a2 + 24;
    if (*(char *)(a2 + 47) < 0)
      v14 = *(_QWORD *)(a2 + 24);
    v15 = *(_QWORD *)(a1 + 1824) != 0;
    *(_DWORD *)buf = 136446978;
    v39 = v13;
    v40 = 2082;
    v41 = v14;
    v42 = 1026;
    v43 = v15;
    v44 = 1026;
    v45 = a3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Fence: requestRegionState, %{public}s/%{public}s, NOT FOUND, %{public}d, %{public}d", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    if (*(char *)(a2 + 23) >= 0)
      v20 = a2;
    else
      v20 = *(_QWORD *)a2;
    v21 = *(char *)(a2 + 47);
    v24 = *(_QWORD *)(a2 + 24);
    v23 = a2 + 24;
    v22 = v24;
    if (v21 >= 0)
      v25 = v23;
    else
      v25 = v22;
    v26 = *(_QWORD *)(a1 + 1824) != 0;
    v30 = 136446978;
    v31 = v20;
    v32 = 2082;
    v33 = v25;
    v34 = 1026;
    v35 = v26;
    v36 = 1026;
    v37 = a3;
    LODWORD(v29) = 34;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#Warning Fence: requestRegionState, %{public}s/%{public}s, NOT FOUND, %{public}d, %{public}d", &v30, v29);
    v28 = (uint8_t *)v27;
    sub_100512490("Generic", 1, 0, 2, "CLFenceManager_Type::FenceStatus CLFenceMonitor::getCurrentFenceState(const CLFenceManager_Type::Fence &, const BOOL)", "%s\n", v27);
    if (v28 != buf)
      free(v28);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_100D4C158(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 730);
}

uint64_t sub_100D4C160(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 613);
}

uint64_t sub_100D4C168(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 612);
}

uint64_t sub_100D4C170(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v1 = *(_QWORD **)(a1 + 240);
  v2 = (_QWORD *)(a1 + 248);
  if (v1 == (_QWORD *)(a1 + 248))
    return 0;
  do
  {
    v3 = v1[24];
    result = (v3 >> 4) & 1;
    if ((v3 & 0x10) != 0)
      break;
    v5 = (_QWORD *)v1[1];
    if (v5)
    {
      do
      {
        v6 = v5;
        v5 = (_QWORD *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        v6 = (_QWORD *)v1[2];
        v7 = *v6 == (_QWORD)v1;
        v1 = v6;
      }
      while (!v7);
    }
    v1 = v6;
  }
  while (v6 != v2);
  return result;
}

uint64_t sub_100D4C1D0(uint64_t result, int a2, double a3)
{
  uint64_t v5;
  NSObject *v6;
  int v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;

  if (*(unsigned __int8 *)(result + 730) != a2)
  {
    v5 = result;
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v6 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
    {
      v7 = *(unsigned __int8 *)(v5 + 730);
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 1026;
      v17 = v7;
      v18 = 1026;
      v19 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Connected state of watch changed\", \"from\":%{public}hhd, \"to\":%{public}hhd}", buf, 0x1Eu);
    }
    *(_BYTE *)(v5 + 730) = a2;
    sub_100D70388(v5 + 904, a2);
    if (*(_BYTE *)(v5 + 730) && !*(_BYTE *)(v5 + 731))
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v8 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Stop monitoring, nearby", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v11[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Stop monitoring, nearby", v11, 2);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::updateCompanionConnectedState(const CFAbsoluteTime, BOOL)", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
      (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 1768) + 336))(*(_QWORD *)(v5 + 1768));
      (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 1768) + 272))(*(_QWORD *)(v5 + 1768));
      *(double *)(v5 + 624) = (*(double (**)(_QWORD))(**(_QWORD **)(v5 + 1768) + 144))(*(_QWORD *)(v5 + 1768));
      (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 1768) + 208))(*(_QWORD *)(v5 + 1768));
      (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 1768) + 280))(*(_QWORD *)(v5 + 1768));
      (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 1768) + 320))(*(_QWORD *)(v5 + 1768));
      return sub_100D4C4C4(v5);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, const char *, uint64_t, double))(*(_QWORD *)v5 + 96))(v5, "kNotificationCompanionConnectionUpdate", 1, a3);
    }
  }
  return result;
}

uint64_t sub_100D4C4C4(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  BOOL v4;

  v1 = *(_QWORD **)(result + 240);
  if (v1 != (_QWORD *)(result + 248))
  {
    do
    {
      v1[40] = 0xBFF0000000000000;
      *((_DWORD *)v1 + 82) = 0;
      v2 = (_QWORD *)v1[1];
      if (v2)
      {
        do
        {
          v3 = v2;
          v2 = (_QWORD *)*v2;
        }
        while (v2);
      }
      else
      {
        do
        {
          v3 = (_QWORD *)v1[2];
          v4 = *v3 == (_QWORD)v1;
          v1 = v3;
        }
        while (!v4);
      }
      v1 = v3;
    }
    while (v3 != (_QWORD *)(result + 248));
  }
  return result;
}

void sub_100D4C51C(_BYTE *a1, int a2, double a3)
{
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v6 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240192;
    v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Fence: Got kNotificationAirplaneMode, airplaneMode, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v9[0] = 67240192;
    v9[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: Got kNotificationAirplaneMode, airplaneMode, %{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::updateAirplaneMode(const CFAbsoluteTime, BOOL)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  a1[728] = a2;
  sub_100ED2B84((uint64_t)(a1 + 1312), a2);
  sub_100D70734((uint64_t)(a1 + 904), a1[728]);
  sub_10016CFF8((uint64_t)a1, a3);
  if ((a2 & 1) == 0)
    (*(void (**)(_BYTE *, const char *, uint64_t, double))(*(_QWORD *)a1 + 96))(a1, "kNotificationAirplaneMode", 1, a3);
}

void sub_100D4C720(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  __int128 v11;
  __int128 v12;
  id v13;
  NSObject *v14;
  uint64_t *v15;
  const char *v16;
  char *v17;
  std::string v18;
  std::string v19;
  std::string v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[21];
  std::string v28;
  id v29;
  void *__p[3];
  int v31;
  int v32;
  int v33;
  uint64_t *v34;
  _BYTE buf[1632];

  *(_QWORD *)buf = a2;
  v8 = sub_100D6405C((uint64_t **)(a1 + 240), (unsigned __int8 *)a2, (uint64_t)&unk_101B9EB60, (__int128 **)buf);
  v9 = v8;
  v10 = *((_DWORD *)v8 + 70);
  if (*a3 != -1)
    *((_DWORD *)v8 + 70) = *a3;
  *((_DWORD *)v8 + 87) = 1;
  sub_100D24E84((char *)&v18);
  std::string::operator=(&v18, (const std::string *)a2);
  std::string::operator=(&v19, (const std::string *)(a2 + 24));
  std::string::operator=(&v20, (const std::string *)(a2 + 48));
  v25 = *(_OWORD *)(a2 + 136);
  v26 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)v27 = *(_OWORD *)(a2 + 168);
  *(_QWORD *)&v27[13] = *(_QWORD *)(a2 + 181);
  v11 = *(_OWORD *)(a2 + 88);
  v21 = *(_OWORD *)(a2 + 72);
  v22 = v11;
  v12 = *(_OWORD *)(a2 + 120);
  v23 = *(_OWORD *)(a2 + 104);
  v24 = v12;
  std::string::operator=(&v28, (const std::string *)(a2 + 192));
  v13 = v29;
  v29 = *(id *)(a2 + 216);

  if (&v18 != (std::string *)a2)
    sub_1002F3538((char *)__p, *(char **)(a2 + 224), *(_QWORD *)(a2 + 232), (uint64_t)(*(_QWORD *)(a2 + 232) - *(_QWORD *)(a2 + 224)) >> 4);
  v31 = *((_DWORD *)v9 + 70);
  v32 = v10;
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v14 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    v15 = a4;
    if (*((char *)a4 + 23) < 0)
      v15 = (uint64_t *)*a4;
    *(_DWORD *)buf = 136380675;
    *(_QWORD *)&buf[4] = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#significantRegion: notify state, reason, %{private}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    if (*((char *)a4 + 23) < 0)
      a4 = (uint64_t *)*a4;
    v33 = 136380675;
    v34 = a4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#significantRegion: notify state, reason, %{private}s", &v33, 12);
    v17 = (char *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::notifySignificantRegionState(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, const CLFenceManager_Type::FenceStatus &, const std::string)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  *(_DWORD *)buf = 1;
  sub_100D4CA98(a1, buf, (uint64_t)&v18);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
}

void sub_100D4CA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1004E2BD0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100D4CA98(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  if (*a2)
  {
    if (!*(_DWORD *)(a3 + 248))
      goto LABEL_8;
LABEL_6:
    sub_100ED2DD8(a1 + 1312);
    goto LABEL_11;
  }
  v6 = *(_DWORD *)(a3 + 136);
  if (*(_DWORD *)(a3 + 248))
  {
    if ((v6 & 0x2000) == 0)
      goto LABEL_6;
    sub_100ED2DF8(a1 + 1312);
  }
  else
  {
    if ((v6 & 0x2000) == 0)
    {
LABEL_8:
      sub_100ED2DC8(a1 + 1312);
      goto LABEL_11;
    }
    sub_100ED2DE8(a1 + 1312);
  }
LABEL_11:
  (*(void (**)(_QWORD, _DWORD *, uint64_t))(**(_QWORD **)(a1 + 1768) + 96))(*(_QWORD *)(a1 + 1768), a2, a3);
  v7 = *(_QWORD *)(a1 + 1824);
  if (v7)
  {
    sub_10064BE8C(v7, a3, *(_DWORD *)(a3 + 248));
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v8 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Fence: state changed before first unlock", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#Warning Fence: state changed before first unlock", v11, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::notifyClientsWithFenceEvent(const CLFenceMonitor_Type::Notification &, const CLFenceMonitor_Type::NotificationData &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
}

void sub_100D4CCD0(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t *a5, double a6)
{
  uint64_t *v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  double v17;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __n128 v36;
  int v37;
  int *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  int v42;
  id v43;
  int v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  double v50;
  BOOL v51;
  double v52;
  NSObject *v53;
  uint64_t *v54;
  char v55;
  const char *v56;
  uint8_t *v57;
  const char *v58;
  uint8_t *v59;
  uint64_t v60;
  std::string v61;
  std::string v62;
  std::string v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _BYTE v70[21];
  std::string v71;
  id v72;
  void *v73[3];
  int v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _BYTE v83[28];
  int v84;
  _BYTE v85[944];
  _OWORD __src[59];
  CLMotionActivity v87;
  uint8_t buf[16];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  void *__p;
  void *v98;
  std::__shared_weak_count *v99;

  *(_QWORD *)buf = a2;
  v12 = sub_100D6405C((uint64_t **)(a1 + 240), (unsigned __int8 *)a2, (uint64_t)&unk_101B9EB60, (__int128 **)buf);
  if (!*a3 && sub_1009AEB64((_QWORD *)(a1 + 48)))
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v13 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "converging state, declaring entry during attempt", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      LOWORD(v61.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "converging state, declaring entry during attempt", &v61, 2);
      v59 = (uint8_t *)v58;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::notifySignificantRegionTransition(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, const CLFenceManager_Type::FenceStatus &, const CLDaemonLocation &, const std::string)", "%s\n", v58);
      if (v59 != buf)
        free(v59);
    }
    sub_1009AEAFC((_QWORD *)(a1 + 48), buf);
    v14 = *(std::__shared_weak_count **)&buf[8];
    *(_BYTE *)(*(_QWORD *)buf + 56) = 1;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  v17 = sub_10016F4A8((double *)(a4 + 4), a2, (double *)(a1 + 1776));
  __asm { FMOV            V0.2D, #-1.0 }
  __src[1] = _Q0;
  __src[2] = _Q0;
  __src[3] = _Q0;
  __src[4] = _Q0;
  __src[5] = _Q0;
  __src[6] = _Q0;
  __src[7] = _Q0;
  *(_QWORD *)((char *)&__src[9] + 4) = 0;
  *(_QWORD *)((char *)&__src[8] + 12) = 0;
  *(_OWORD *)((char *)&__src[9] + 12) = xmmword_101BAFC90;
  *(_OWORD *)((char *)&__src[10] + 12) = _Q0;
  *(_OWORD *)((char *)&__src[11] + 12) = _Q0;
  *(_OWORD *)((char *)&__src[12] + 12) = _Q0;
  DWORD2(__src[8]) = 0xFFFF;
  HIDWORD(__src[13]) = 0;
  *(_QWORD *)&__src[14] = 0xBFF0000000000000;
  __src[20] = xmmword_101BAFEE0;
  __src[21] = _Q0;
  v23 = *(_OWORD *)(a1 + 288);
  v24 = *(_OWORD *)(a1 + 304);
  __src[22] = _Q0;
  *(_OWORD *)((char *)&__src[17] + 4) = *(_OWORD *)(a4 + 140);
  *(_OWORD *)((char *)&__src[16] + 8) = *(_OWORD *)(a4 + 128);
  v25 = *(_OWORD *)(a4 + 96);
  *(_OWORD *)((char *)&__src[15] + 8) = *(_OWORD *)(a4 + 112);
  *(_OWORD *)((char *)&__src[14] + 8) = v25;
  v26 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)((char *)&__src[10] + 8) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)((char *)&__src[11] + 8) = v26;
  v27 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)((char *)&__src[12] + 8) = *(_OWORD *)(a4 + 64);
  v28 = *(_OWORD *)a4;
  *(_OWORD *)((char *)&__src[9] + 8) = *(_OWORD *)(a4 + 16);
  DWORD1(__src[18]) = 0xFFFF;
  *(_QWORD *)&__src[19] = 0;
  *((_QWORD *)&__src[18] + 1) = 0;
  *((_QWORD *)&__src[19] + 1) = 0xBFF0000000000000;
  *(_OWORD *)((char *)&__src[8] + 8) = v28;
  *(_OWORD *)((char *)&__src[13] + 8) = v27;
  v29 = *(_OWORD *)(a1 + 560);
  *(_OWORD *)((char *)&__src[24] + 4) = *(_OWORD *)(a1 + 544);
  *(_OWORD *)((char *)&__src[25] + 4) = v29;
  *(_OWORD *)((char *)&__src[26] + 4) = *(_OWORD *)(a1 + 576);
  v30 = *(_OWORD *)(a1 + 496);
  *(_OWORD *)((char *)&__src[20] + 4) = *(_OWORD *)(a1 + 480);
  *(_OWORD *)((char *)&__src[21] + 4) = v30;
  v31 = *(_OWORD *)(a1 + 528);
  *(_OWORD *)((char *)&__src[22] + 4) = *(_OWORD *)(a1 + 512);
  *(_OWORD *)((char *)&__src[23] + 4) = v31;
  v32 = *(_OWORD *)(a1 + 464);
  *(_OWORD *)((char *)&__src[18] + 4) = *(_OWORD *)(a1 + 448);
  *(_OWORD *)((char *)&__src[19] + 4) = v32;
  *(_OWORD *)((char *)&__src[36] + 12) = *(_OWORD *)(a1 + 428);
  v33 = *(_OWORD *)(a1 + 400);
  __src[34] = *(_OWORD *)(a1 + 384);
  __src[35] = v33;
  __src[36] = *(_OWORD *)(a1 + 416);
  v34 = *(_OWORD *)(a1 + 336);
  __src[30] = *(_OWORD *)(a1 + 320);
  __src[31] = v34;
  v35 = *(_OWORD *)(a1 + 368);
  __src[32] = *(_OWORD *)(a1 + 352);
  __src[33] = v35;
  BYTE8(__src[0]) = 1;
  *(double *)&__src[8] = a6;
  __src[28] = v23;
  __src[27] = *(_OWORD *)(a1 + 588);
  __src[29] = v24;
  DWORD1(__src[38]) = *(_DWORD *)(a1 + 604);
  (*(void (**)(uint8_t *__return_ptr))(**(_QWORD **)(a1 + 1768) + 128))(buf);
  __src[48] = v94;
  __src[49] = v95;
  *(_QWORD *)&__src[50] = v96;
  __src[44] = v90;
  __src[45] = v91;
  __src[47] = v93;
  __src[46] = v92;
  __src[43] = v89;
  __src[42] = *(_OWORD *)buf;
  (*(void (**)(uint8_t *__return_ptr))(**(_QWORD **)(a1 + 1768) + 136))(buf);
  *(_OWORD *)((char *)&__src[56] + 8) = v94;
  *(_OWORD *)((char *)&__src[57] + 8) = v95;
  *(_OWORD *)((char *)&__src[52] + 8) = v90;
  *(_OWORD *)((char *)&__src[53] + 8) = v91;
  *(_OWORD *)((char *)&__src[54] + 8) = v92;
  *(_OWORD *)((char *)&__src[55] + 8) = v93;
  *(_OWORD *)((char *)&__src[50] + 8) = *(_OWORD *)buf;
  *(_OWORD *)((char *)&__src[51] + 8) = v89;
  *((_QWORD *)&__src[58] + 1) = v96;
  v36 = sub_10012A33C(buf);
  v37 = (*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 1768) + 16))(*(_QWORD *)(a1 + 1768), v36);
  v38 = (int *)(v12 + 35);
  sub_100B6F304(a4, v17, (uint64_t)buf, a2, (int *)v12 + 70, v37, (uint64_t)__src);
  v39 = v99;
  if (v99)
  {
    v40 = (unint64_t *)&v99->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = *v38;
  if (*a3 != -1)
    *v38 = *a3;
  *((_DWORD *)v12 + 87) = 1;
  sub_100D24E84((char *)&v61);
  std::string::operator=(&v61, (const std::string *)a2);
  std::string::operator=(&v62, (const std::string *)(a2 + 24));
  std::string::operator=(&v63, (const std::string *)(a2 + 48));
  v68 = *(_OWORD *)(a2 + 136);
  v69 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)v70 = *(_OWORD *)(a2 + 168);
  *(_QWORD *)&v70[13] = *(_QWORD *)(a2 + 181);
  v64 = *(_OWORD *)(a2 + 72);
  v65 = *(_OWORD *)(a2 + 88);
  v66 = *(_OWORD *)(a2 + 104);
  v67 = *(_OWORD *)(a2 + 120);
  std::string::operator=(&v71, (const std::string *)(a2 + 192));
  v43 = v72;
  v72 = *(id *)(a2 + 216);

  if (&v61 != (std::string *)a2)
    sub_1002F3538((char *)v73, *(char **)(a2 + 224), *(_QWORD *)(a2 + 232), (uint64_t)(*(_QWORD *)(a2 + 232) - *(_QWORD *)(a2 + 224)) >> 4);
  *((_QWORD *)&v67 + 1) = v12[40];
  memcpy(v85, __src, sizeof(v85));
  v44 = *((_DWORD *)v12 + 70);
  *(_OWORD *)&v83[12] = *(_OWORD *)(a4 + 140);
  v45 = *(_OWORD *)(a4 + 128);
  v82 = *(_OWORD *)(a4 + 112);
  *(_OWORD *)v83 = v45;
  v46 = *(_OWORD *)(a4 + 96);
  v80 = *(_OWORD *)(a4 + 80);
  v81 = v46;
  v47 = *(_OWORD *)(a4 + 64);
  v78 = *(_OWORD *)(a4 + 48);
  v79 = v47;
  v48 = *(_OWORD *)(a4 + 32);
  v49 = *(_OWORD *)a4;
  v76 = *(_OWORD *)(a4 + 16);
  v77 = v48;
  v75 = v49;
  v74 = v44;
  v84 = v42;
  *(_QWORD *)&v45 = v12[42];
  v50 = a6 - *(double *)&v45;
  v51 = *(double *)&v45 <= 0.0;
  v52 = -1.0;
  if (!v51)
    v52 = v50;
  *(double *)&v69 = v52;
  DWORD2(v68) = sub_100D713D4(a1 + 904, (unsigned __int8 *)a2);
  DWORD1(v68) = sub_100D71410(a1 + 904);
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v53 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    v54 = a5;
    if (*((char *)a5 + 23) < 0)
      v54 = (uint64_t *)*a5;
    *(_DWORD *)buf = 136380675;
    *(_QWORD *)&buf[4] = v54;
    _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "#significantRegion: notify event, reason, %{private}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    if (*((char *)a5 + 23) < 0)
      a5 = (uint64_t *)*a5;
    v87.type = 136380675;
    *(_QWORD *)&v87.confidence = a5;
    LODWORD(v60) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#significantRegion: notify event, reason, %{private}s", &v87, v60);
    v57 = (uint8_t *)v56;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::notifySignificantRegionTransition(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, const CLFenceManager_Type::FenceStatus &, const CLDaemonLocation &, const std::string)", "%s\n", v56);
    if (v57 != buf)
      free(v57);
  }
  *(_DWORD *)buf = 0;
  sub_100D4CA98(a1, buf, (uint64_t)&v61);
  *(_DWORD *)buf = 6;
  sub_100D4CA98(a1, buf, (uint64_t)&v61);
  if (*(_BYTE *)(a1 + 1312) && !*(_BYTE *)(a1 + 1313))
  {
    (*(void (**)(CLMotionActivity *__return_ptr))(**(_QWORD **)(a1 + 1768) + 128))(&v87);
    v55 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 16))(*(_QWORD *)(a1 + 1768));
    sub_100ED3934((uint64_t)buf, (uint64_t)&v61, (double *)v12 + 35, (__int128 *)(a1 + 1648), &v87, a4, a1 + 144, v55, a6, *(_BYTE *)(a1 + 613), *(_BYTE *)(a1 + 728));
    sub_100ED3948((uint64_t)buf);
    if (__p)
    {
      v98 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v89) < 0)
      operator delete(*(void **)&buf[8]);
  }
  *((double *)v12 + 42) = a6;
  *((_DWORD *)v12 + 86) = *(_DWORD *)(a4 + 96);
  if (v73[0])
  {
    v73[1] = v73[0];
    operator delete(v73[0]);
  }

  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
}

void sub_100D4D5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1004E2BD0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D4D614(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 240);
  if (v2)
  {
    *(_QWORD *)(a1 + 248) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_100D4D654(uint64_t a1, double a2)
{
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  double v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  const char *v27;
  uint8_t *v28;
  const char *v29;
  uint8_t *v30;
  const char *v31;
  uint8_t *v32;
  const char *v33;
  uint8_t *v34;
  uint64_t v35;
  int v36;
  _BYTE v37[10];
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;
  uint8_t buf[4];
  _BYTE v53[10];
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  double v65;
  __int16 v66;
  double v67;

  v4 = *(_QWORD *)(a1 + 256);
  v5 = vabdd_f64(a2, *(double *)(a1 + 744));
  v6 = *(double *)(a1 + 736) + v5 * -45.0;
  if (v5 >= 855.0)
    v6 = 0.0;
  if (v6 > 0.0)
    v7 = v6;
  else
    v7 = 0.0;
  v8 = *(double *)(a1 + 720);
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v9 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
  {
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 16))(*(_QWORD *)(a1 + 1768));
    v11 = *(unsigned __int8 *)(a1 + 612);
    v12 = *(unsigned __int8 *)(a1 + 728);
    v13 = *(unsigned __int8 *)(a1 + 730);
    v14 = *(unsigned __int8 *)(a1 + 640);
    v15 = *(_QWORD *)(a1 + 736);
    *(_DWORD *)buf = 67242241;
    *(_DWORD *)v53 = v10;
    *(_WORD *)&v53[4] = 1026;
    *(_DWORD *)&v53[6] = v11;
    v54 = 2050;
    v55 = v4;
    v56 = 1026;
    v57 = v12;
    v58 = 1025;
    v59 = v13;
    v60 = 1025;
    v61 = v14;
    v62 = 2049;
    v63 = v15;
    v64 = 2049;
    v65 = v7;
    v66 = 2049;
    v67 = v7 + v8 * -45.0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Fence: triggerReceivedNow, isWifiPowered, %{public}d, isLocationEnabled, %{public}d, numOfFences, %{public}lu, airplane, %{public}d, connected, %{private}d, watchdogNeeded, %{private}d, minDist, %{private}.1lf, %{private}.1lf, minDistNextWake, %{private}.1lf", buf, 0x48u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v20 = qword_1022A0068;
    v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 16))(*(_QWORD *)(a1 + 1768));
    v22 = *(unsigned __int8 *)(a1 + 612);
    v23 = *(unsigned __int8 *)(a1 + 728);
    v24 = *(unsigned __int8 *)(a1 + 730);
    v25 = *(unsigned __int8 *)(a1 + 640);
    v26 = *(_QWORD *)(a1 + 736);
    v36 = 67242241;
    *(_DWORD *)v37 = v21;
    *(_WORD *)&v37[4] = 1026;
    *(_DWORD *)&v37[6] = v22;
    v38 = 2050;
    v39 = v4;
    v40 = 1026;
    v41 = v23;
    v42 = 1025;
    v43 = v24;
    v44 = 1025;
    v45 = v25;
    v46 = 2049;
    v47 = v26;
    v48 = 2049;
    v49 = v7;
    v50 = 2049;
    v51 = v7 + v8 * -45.0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 1, "Fence: triggerReceivedNow, isWifiPowered, %{public}d, isLocationEnabled, %{public}d, numOfFences, %{public}lu, airplane, %{public}d, connected, %{private}d, watchdogNeeded, %{private}d, minDist, %{private}.1lf, %{private}.1lf, minDistNextWake, %{private}.1lf", &v36, 72);
    v28 = (uint8_t *)v27;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::triggerReceivedNow(const CFAbsoluteTime)", "%s\n", v27);
    if (v28 != buf)
      free(v28);
  }
  if (v7 + v8 * -45.0 > 0.0 || !*(_BYTE *)(a1 + 612) || *(_BYTE *)(a1 + 730) && !*(_BYTE *)(a1 + 731) || !v4)
    goto LABEL_32;
  v16 = *(double *)(a1 + 648);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 16))(*(_QWORD *)(a1 + 1768)))
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v17 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134283521;
      *(double *)v53 = v7;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Fence: Trigger received; performing WiFi scan, minDistanceToFence, %{private}.1lf",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v36 = 134283521;
      *(double *)v37 = v7;
      LODWORD(v35) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: Trigger received; performing WiFi scan, minDistanceToFence, %{private}.1lf",
        &v36,
        v35);
      v32 = (uint8_t *)v31;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::triggerReceivedNow(const CFAbsoluteTime)", "%s\n", v31);
      if (v32 != buf)
        free(v32);
    }
    sub_100D4DDB8(a1, a2);
    return;
  }
  if (+[CLGnssProviderAdapter isSupported](CLGnssProviderAdapter, "isSupported")
    && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 392))(*(_QWORD *)(a1 + 1768)) & 1) == 0
    && vabdd_f64(a2, v16) > 756.0)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v18 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134283521;
      *(double *)v53 = v7;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Fence: Trigger received; schedule watchdog for GPS, minDistanceToFence, %{private}.1lf",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v36 = 134283521;
      *(double *)v37 = v7;
      LODWORD(v35) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: Trigger received; schedule watchdog for GPS, minDistanceToFence, %{private}.1lf",
        &v36,
        v35);
      v34 = (uint8_t *)v33;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::triggerReceivedNow(const CFAbsoluteTime)", "%s\n", v33);
      if (v34 != buf)
        free(v34);
    }
    *(double *)(a1 + 648) = a2;
    *(_QWORD *)(a1 + 684) = 0x300000001;
    (*(void (**)(_QWORD, void *))(**(_QWORD **)(a1 + 1768) + 232))(*(_QWORD *)(a1 + 1768), &unk_101C229A8);
  }
  else
  {
LABEL_32:
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v19 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Fence: ignoring trigger event", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      LOWORD(v36) = 0;
      LODWORD(v35) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: ignoring trigger event", &v36, v35);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::triggerReceivedNow(const CFAbsoluteTime)", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    if (sub_10016F6EC((double *)(a1 + 904), a2))
      sub_100ED2AAC(a1 + 1312);
  }
}

void sub_100D4DDB8(uint64_t a1, double a2)
{
  _BOOL4 v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  NSObject *v13;
  int v14;
  int v15;
  int v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD v23[2];
  __int16 v24;
  int v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  uint8_t buf[4];
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  int v45;

  if (*(_QWORD *)(a1 + 256))
  {
    if (*(_BYTE *)(a1 + 730))
      v4 = *(_BYTE *)(a1 + 731) != 0;
    else
      v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  v5 = *(double *)(a1 + 632);
  v6 = vabdd_f64(a2, *(double *)(a1 + 696));
  v7 = 0x403E000000000000;
  v22 = 0x403E000000000000;
  if (v6 <= *(double *)(a1 + 720) * 1.5)
  {
    v7 = 0x4034000000000000;
    v22 = 0x4034000000000000;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v8 = a2 - v5;
  v9 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
  {
    v10 = *(_DWORD *)(a1 + 684);
    v11 = *(_DWORD *)(a1 + 688);
    v12 = *(unsigned __int8 *)(a1 + 640);
    *(_DWORD *)buf = 67241473;
    v35 = v10;
    v36 = 1026;
    v37 = v11;
    v38 = 2049;
    v39 = v8;
    v40 = 2049;
    v41 = v6;
    v42 = 2049;
    v43 = v7;
    v44 = 1026;
    v45 = v12;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Fence: need a scan, count, %{public}d, %{public}d, dt_scan, %{private}.1lf, dt_watchdog, %{private}.1lf, interval, %{private}.1lf, needWatchdog, %{public}d", buf, 0x32u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v14 = *(_DWORD *)(a1 + 684);
    v15 = *(_DWORD *)(a1 + 688);
    v16 = *(unsigned __int8 *)(a1 + 640);
    v23[0] = 67241473;
    v23[1] = v14;
    v24 = 1026;
    v25 = v15;
    v26 = 2049;
    v27 = v8;
    v28 = 2049;
    v29 = v6;
    v30 = 2049;
    v31 = v7;
    v32 = 1026;
    v33 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: need a scan, count, %{public}d, %{public}d, dt_scan, %{private}.1lf, dt_watchdog, %{private}.1lf, interval, %{private}.1lf, needWatchdog, %{public}d", v23, 50);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::requestScan(const CFAbsoluteTime)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  if (v4)
  {
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 16))(*(_QWORD *)(a1 + 1768))
      && (*(int *)(a1 + 684) < 1 || v8 >= 180.0))
    {
      (*(void (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 1768) + 296))(*(_QWORD *)(a1 + 1768), "requestScan");
      *(double *)(a1 + 632) = a2;
      if (*(_BYTE *)(a1 + 640)
        && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 224))(*(_QWORD *)(a1 + 1768)) & 1) == 0
        && sub_10016E59C(a1))
      {
        (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 1768) + 232))(*(_QWORD *)(a1 + 1768), &v22);
        *(_QWORD *)(a1 + 684) = 1;
      }
      *(_BYTE *)(a1 + 640) = 0;
    }
    else if (v8 >= 10.0 && *(int *)(a1 + 684) >= 1 && *(int *)(a1 + 688) >= 2)
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v13 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Fence: startScan, requesting a receovery scan", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        LOWORD(v23[0]) = 0;
        LODWORD(v21) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: startScan, requesting a receovery scan", v23, v21);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::requestScan(const CFAbsoluteTime)", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
      *(double *)(a1 + 632) = a2;
      (*(void (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 1768) + 296))(*(_QWORD *)(a1 + 1768), "requestScan.recovery");
    }
  }
}

void sub_100D4E25C(uint64_t a1, double a2)
{
  sub_100D71418((_QWORD *)(a1 + 904), a2);
}

void sub_100D4E264(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  NSObject *v8;
  int v9;
  int v10;
  NSObject *v11;
  double *v12;
  NSObject *v13;
  int v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  int v21;
  const char *v22;
  uint8_t *v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  double v27;
  int v28;
  int v29;
  uint8_t buf[8];
  std::__shared_weak_count *v31;

  v27 = a4;
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v8 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
  {
    v9 = *a2;
    *(_DWORD *)buf = 67174657;
    *(_DWORD *)&buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Fence: Got bluetooth notification, %{private}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v21 = *a2;
    v28 = 67174657;
    v29 = v21;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: Got bluetooth notification, %{private}d", &v28, 8);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleBluetoothNotification(const CFAbsoluteTime, const CLBluetoothService_Type::Notification &, const CLBluetoothService_Type::NotificationData &)", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  if ((*a2 & 0xFFFFFFFE) == 4)
  {
    v10 = *(_DWORD *)(a3 + 92);
    if (v10 == 22 || v10 == 17)
    {
      *(double *)(a1 + 840) = a4;
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v11 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Fence: Got kNotificationTriggerReceived from Bluetooth", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        LOWORD(v28) = 0;
        LODWORD(v26) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: Got kNotificationTriggerReceived from Bluetooth", &v28, v26);
        v25 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleBluetoothNotification(const CFAbsoluteTime, const CLBluetoothService_Type::Notification &, const CLBluetoothService_Type::NotificationData &)", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
      sub_100D4E764(a1, (uint64_t)"kNotificationConnect / kNotificationDisconnect", 1, &v27);
      sub_1009AEAFC((_QWORD *)(a1 + 48), buf);
      if (*(_QWORD *)buf)
        ++*(_DWORD *)(*(_QWORD *)buf + 160);
      if (*a2 == 5)
      {
        v12 = (double *)(a1 + 1696);
      }
      else
      {
        if (*a2 != 4)
          goto LABEL_30;
        v12 = (double *)(a1 + 1688);
      }
      *v12 = a4;
LABEL_30:
      v18 = v31;
      if (v31)
      {
        p_shared_owners = (unint64_t *)&v31->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      return;
    }
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v13 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v14 = *(_DWORD *)(a3 + 92);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "not a car bluetooth device (%d)", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v15 = *(_DWORD *)(a3 + 92);
      v28 = 67109120;
      v29 = v15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "not a car bluetooth device (%d)", &v28);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleBluetoothNotification(const CFAbsoluteTime, const CLBluetoothService_Type::Notification &, const CLBluetoothService_Type::NotificationData &)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
  }
}

void sub_100D4E764(uint64_t a1, uint64_t a2, int a3, double *a4)
{
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  BOOL v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  int v14;
  NSObject *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  const char *v22;
  NSObject *v23;
  NSObject *v24;
  uint8_t *v25;
  uint64_t v26;
  int v27;
  int v28;
  const char *v29;
  uint8_t *v30;
  uint64_t v31;
  _BYTE v32[24];
  _BYTE v33[20];
  __int16 v34;
  double v35;
  uint8_t buf[4];
  uint64_t v37;
  __int16 v38;
  _BYTE v39[10];
  _BYTE v40[6];
  _BYTE v41[14];
  __int16 v42;
  double v43;

  if (*(_BYTE *)(a1 + 620))
  {
    v6 = vabdd_f64(*a4, *(double *)(a1 + 744));
    v7 = *(double *)(a1 + 736) + v6 * -45.0;
    if (v6 >= 855.0)
      v7 = 0.0;
    if (v7 > 0.0)
      v8 = v7;
    else
      v8 = 0.0;
    v9 = *(_QWORD *)(a1 + 256);
    v10 = v8 + -13500.0 > 0.0 || v9 == 0;
    if (v10 || *(_BYTE *)(a1 + 730) && !*(_BYTE *)(a1 + 731) || !*(_BYTE *)(a1 + 612))
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v15 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        v16 = *(unsigned __int8 *)(a1 + 728);
        v17 = *(unsigned __int8 *)(a1 + 730);
        v18 = *(unsigned __int8 *)(a1 + 612);
        *(_DWORD *)buf = 134350081;
        v37 = v9;
        v38 = 1026;
        *(_DWORD *)v39 = v16;
        *(_WORD *)&v39[4] = 1026;
        *(_DWORD *)&v39[6] = v17;
        *(_WORD *)v40 = 1026;
        *(_DWORD *)&v40[2] = v18;
        *(_WORD *)v41 = 2049;
        *(double *)&v41[2] = v8;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Fence: ignore delayed trigger, numOfFences, %{public}zu, airplane, %{public}d, cConnected, %{public}d, location services, %{public}d, minDistanceToFence, %{private}.1lf", buf, 0x28u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v19 = *(unsigned __int8 *)(a1 + 728);
        v20 = *(unsigned __int8 *)(a1 + 730);
        v21 = *(unsigned __int8 *)(a1 + 612);
        *(_DWORD *)v32 = 134350081;
        *(_QWORD *)&v32[4] = v9;
        *(_WORD *)&v32[12] = 1026;
        *(_DWORD *)&v32[14] = v19;
        *(_WORD *)&v32[18] = 1026;
        *(_DWORD *)&v32[20] = v20;
        *(_WORD *)v33 = 1026;
        *(_DWORD *)&v33[2] = v21;
        *(_WORD *)&v33[6] = 2049;
        *(double *)&v33[8] = v8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: ignore delayed trigger, numOfFences, %{public}zu, airplane, %{public}d, cConnected, %{public}d, location services, %{public}d, minDistanceToFence, %{private}.1lf", v32, 40, *(_OWORD *)v32, *(_QWORD *)&v32[16], *(_OWORD *)v33);
        goto LABEL_48;
      }
    }
    else
    {
      if (a3)
        *(_DWORD *)(a1 + 704) = 0;
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v11 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        v12 = *(_QWORD *)(a1 + 712);
        v13 = *(_DWORD *)(a1 + 704);
        v14 = *(_DWORD *)(a1 + 708);
        *(_DWORD *)buf = 134284803;
        v37 = v12;
        v38 = 2081;
        *(_QWORD *)v39 = a2;
        *(_WORD *)&v39[8] = 1026;
        *(_DWORD *)v40 = v13;
        *(_WORD *)&v40[4] = 1026;
        *(_DWORD *)v41 = v14;
        *(_WORD *)&v41[4] = 2049;
        *(double *)&v41[6] = v8;
        v42 = 2049;
        v43 = v8 + -13500.0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Fence: scheduleNextTriggerWake in, %{private}.1lf, reason, %{private}s, count, %{public}d, %{public}d, minDistanceToFence, %{private}.1lf, minDistanceToFencesOnNextWake, %{private}.1lf", buf, 0x36u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v26 = *(_QWORD *)(a1 + 712);
        v27 = *(_DWORD *)(a1 + 704);
        v28 = *(_DWORD *)(a1 + 708);
        *(_DWORD *)v32 = 134284803;
        *(_QWORD *)&v32[4] = v26;
        *(_WORD *)&v32[12] = 2081;
        *(_QWORD *)&v32[14] = a2;
        *(_WORD *)&v32[22] = 1026;
        *(_DWORD *)v33 = v27;
        *(_WORD *)&v33[4] = 1026;
        *(_DWORD *)&v33[6] = v28;
        *(_WORD *)&v33[10] = 2049;
        *(double *)&v33[12] = v8;
        v34 = 2049;
        v35 = v8 + -13500.0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: scheduleNextTriggerWake in, %{private}.1lf, reason, %{private}s, count, %{public}d, %{public}d, minDistanceToFence, %{private}.1lf, minDistanceToFencesOnNextWake, %{private}.1lf", v32, 54);
        v30 = (uint8_t *)v29;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::scheduleNextTriggerWake(const char *, BOOL, const CFTimeInterval &)", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      if (*(_DWORD *)(a1 + 704) < *(_DWORD *)(a1 + 708))
      {
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 1768) + 216))(*(_QWORD *)(a1 + 1768), a1 + 712);
        return;
      }
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v24 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Fence: scheduleNextTriggerWake, no more delayed triggers", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        *(_WORD *)v32 = 0;
        LODWORD(v31) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: scheduleNextTriggerWake, no more delayed triggers", v32, v31, *(_OWORD *)v32, *(_QWORD *)&v32[16], *(_OWORD *)v33);
LABEL_48:
        v25 = (uint8_t *)v22;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::scheduleNextTriggerWake(const char *, BOOL, const CFTimeInterval &)", "%s\n", v22);
        if (v25 != buf)
          free(v25);
      }
    }
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v23 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136380675;
      v37 = a2;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "Fence: avoid scheduleNextTriggerWake, reason, %{private}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      *(_DWORD *)v32 = 136380675;
      *(_QWORD *)&v32[4] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: avoid scheduleNextTriggerWake, reason, %{private}s", v32, 12, *(_OWORD *)v32, *(_QWORD *)&v32[16], *(_OWORD *)v33);
      goto LABEL_48;
    }
  }
}

void sub_100D4EDA4(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  NSObject *v11;
  _BYTE *v12;
  int v13;
  int v14;
  int v15;
  NSObject *v16;
  uint64_t v17;
  const char *v18;
  NSObject *v19;
  int v20;
  double v21;
  double v22;
  unsigned int v23;
  int v24;
  BOOL v25;
  char v26;
  int v27;
  double v28;
  BOOL v29;
  uint64_t v30;
  NSObject *v31;
  unint64_t v32;
  unint64_t v33;
  _DWORD *v34;
  _QWORD *v35;
  int v36;
  char v37;
  char v38;
  double v39;
  uint64_t v40;
  double v41;
  int v42;
  double v43;
  BOOL v44;
  int v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _QWORD *v50;
  _QWORD *v51;
  NSObject *v52;
  NSObject *v53;
  double v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  double v58;
  NSObject *v59;
  uint64_t v60;
  NSObject *v61;
  double v62;
  NSObject *v63;
  char v64;
  char v65;
  uint64_t v66;
  void *v67;
  int v68;
  int v69;
  int v70;
  char *v71;
  char *v72;
  const char *v73;
  char *v74;
  const char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  const char *v80;
  char *v81;
  const char *v82;
  char *v83;
  const char *v84;
  char *v85;
  uint64_t v86;
  const char *v87;
  char *v88;
  const char *v89;
  char *v90;
  const char *v91;
  char *v92;
  uint64_t v93;
  BOOL v94;
  char v95;
  char v96;
  BOOL v97;
  _BOOL4 v98;
  int v99;
  _BOOL4 v100;
  int v101;
  BOOL v102;
  double v104;
  void *v105;
  std::__shared_weak_count *v106;
  char v107;
  _BYTE v108[32];
  __int128 v109;
  __int128 v110;
  _BYTE v111[32];
  __int128 v112;
  __int128 v113;
  _OWORD v114[2];
  _BYTE __p[24];
  uint64_t v116;
  __int16 v117;
  uint64_t v118;
  _BYTE buf[32];
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  _OWORD v126[94];

  v7 = *(_OWORD *)(a2 + 112);
  v112 = *(_OWORD *)(a2 + 96);
  v113 = v7;
  v114[0] = *(_OWORD *)(a2 + 128);
  *(_OWORD *)((char *)v114 + 12) = *(_OWORD *)(a2 + 140);
  v8 = *(_OWORD *)(a2 + 48);
  v109 = *(_OWORD *)(a2 + 32);
  v110 = v8;
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)v111 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)&v111[16] = v9;
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v108 = *(_OWORD *)a2;
  *(_OWORD *)&v108[16] = v10;
  sub_10016CFDC((uint64_t)v108);
  sub_10016CF30(a1 + 904, (__int128 *)v108);
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v11 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    sub_100071A00((uint64_t)v108, __p);
    v12 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
    v13 = *(unsigned __int8 *)(a1 + 612);
    v14 = *(unsigned __int8 *)(a1 + 728);
    v15 = *(unsigned __int8 *)(a1 + 730);
    *(_DWORD *)buf = 136381443;
    *(_QWORD *)&buf[4] = v12;
    *(_WORD *)&buf[12] = 1025;
    *(_DWORD *)&buf[14] = v13;
    *(_WORD *)&buf[18] = 1025;
    *(_DWORD *)&buf[20] = v14;
    *(_WORD *)&buf[24] = 1025;
    *(_DWORD *)&buf[26] = v15;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Fence: handleLocation, location, %{private}s, services, %{private}d, airplane, %{private}d, connected, %{private}d", buf, 0x1Eu);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v66 = qword_1022A0068;
    sub_100071A00((uint64_t)v108, &v105);
    if (v107 >= 0)
      v67 = &v105;
    else
      v67 = v105;
    v68 = *(unsigned __int8 *)(a1 + 612);
    v69 = *(unsigned __int8 *)(a1 + 728);
    v70 = *(unsigned __int8 *)(a1 + 730);
    *(_DWORD *)__p = 136381443;
    *(_QWORD *)&__p[4] = v67;
    *(_WORD *)&__p[12] = 1025;
    *(_DWORD *)&__p[14] = v68;
    *(_WORD *)&__p[18] = 1025;
    *(_DWORD *)&__p[20] = v69;
    LOWORD(v116) = 1025;
    *(_DWORD *)((char *)&v116 + 2) = v70;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v66, 2, "Fence: handleLocation, location, %{private}s, services, %{private}d, airplane, %{private}d, connected, %{private}d", __p, 30);
    v72 = v71;
    if (v107 < 0)
      operator delete(v105);
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocation(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v72);
    if (v72 != buf)
      free(v72);
  }
  if (!*(_BYTE *)(a1 + 612) || *(_BYTE *)(a1 + 730) && !*(_BYTE *)(a1 + 731))
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 336))(*(_QWORD *)(a1 + 1768));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 272))(*(_QWORD *)(a1 + 1768));
    return;
  }
  sub_10016CF74((_QWORD *)(a1 + 1312), a2);
  if ((sub_10016E600(a1, (uint64_t)v108, a4) & 1) != 0)
    return;
  *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 76);
  if (!*(_QWORD *)(a1 + 256) || sub_100B6ED04((uint64_t)v108))
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v16 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v17 = *(_QWORD *)(a1 + 256);
      v18 = sub_10014D1E0(v112);
      *(_DWORD *)buf = 134349315;
      *(_QWORD *)&buf[4] = v17;
      *(_WORD *)&buf[12] = 2081;
      *(_QWORD *)&buf[14] = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Fence: cancelLocationWatchdog, num fences, %{public}lu, location type, %{private}s", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v77 = qword_1022A0068;
      v78 = *(_QWORD *)(a1 + 256);
      v79 = sub_10014D1E0(v112);
      *(_DWORD *)__p = 134349315;
      *(_QWORD *)&__p[4] = v78;
      *(_WORD *)&__p[12] = 2081;
      *(_QWORD *)&__p[14] = v79;
      LODWORD(v93) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v77, 2, "Fence: cancelLocationWatchdog, num fences, %{public}lu, location type, %{private}s", __p, v93);
      v81 = (char *)v80;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocation(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v80);
      if (v81 != buf)
        free(v81);
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 336))(*(_QWORD *)(a1 + 1768));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 272))(*(_QWORD *)(a1 + 1768));
    *(_QWORD *)(a1 + 684) = 0;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v19 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134284289;
    *(_QWORD *)&buf[4] = *(_QWORD *)&v108[4];
    *(_WORD *)&buf[12] = 2049;
    *(_QWORD *)&buf[14] = *(_QWORD *)&v108[12];
    *(_WORD *)&buf[22] = 2049;
    *(_QWORD *)&buf[24] = *(_QWORD *)&v108[20];
    LOWORD(v120) = 2049;
    *(_QWORD *)((char *)&v120 + 2) = *(_QWORD *)&v111[12];
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Fence: Handling location, %{private}+.8f, %{private}+.8f, acc, %{private}.2f, timestamp, %{private}.1lf\n", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    *(_DWORD *)__p = 134284289;
    *(_QWORD *)&__p[4] = *(_QWORD *)&v108[4];
    *(_WORD *)&__p[12] = 2049;
    *(_QWORD *)&__p[14] = *(_QWORD *)&v108[12];
    *(_WORD *)&__p[22] = 2049;
    v116 = *(_QWORD *)&v108[20];
    v117 = 2049;
    v118 = *(_QWORD *)&v111[12];
    LODWORD(v93) = 42;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: Handling location, %{private}+.8f, %{private}+.8f, acc, %{private}.2f, timestamp, %{private}.1lf\n", __p, v93);
    v74 = (char *)v73;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocation(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v73);
    if (v74 != buf)
      free(v74);
  }
  v20 = *(unsigned __int8 *)(a1 + 623);
  sub_10011E258((double *)(a1 + 1776), a1 + 448, (uint64_t)v108);
  v22 = v21;
  v100 = sub_100B6ECD4((uint64_t)v108);
  v23 = v112;
  v98 = sub_100B6ECF0((uint64_t)v108);
  v97 = sub_100B6ECD4(a1 + 448);
  v24 = *(_DWORD *)(a1 + 544);
  v25 = v24 == 4 || v24 == 11;
  v26 = v25;
  v96 = v26;
  if (v98)
    *(double *)(a1 + 880) = a4;
  if (v23 == 11 || v23 == 4)
    *(double *)(a1 + 888) = a4;
  v27 = v100;
  if (v23 == 10)
    v27 = 1;
  v95 = v27;
  if (v27 == 1)
    *(double *)(a1 + 896) = a4;
  v99 = v112;
  if (vabdd_f64(a4, *(double *)(a1 + 524)) >= *((double *)sub_10016F688() + 27)
    || v22 >= *((double *)sub_10016F688() + 28))
  {
    v29 = 1;
LABEL_49:
    v94 = v29;
    goto LABEL_50;
  }
  v28 = *(double *)(a1 + 468);
  if (v28 >= *((double *)sub_10016F688() + 29))
  {
    v62 = *(double *)&v108[20];
    v29 = v62 < *((double *)sub_10016F688() + 29);
    goto LABEL_49;
  }
  v94 = 0;
LABEL_50:
  v104 = 5000000.0;
  if (*sub_10108CCAC() && *(double *)&v108[20] <= 250.0)
  {
    v30 = *(_QWORD *)(a1 + 208);
    if (v30
      && *(double *)&v111[12] <= *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 176)
                                                       + 8 * ((v30 + *(_QWORD *)(a1 + 200) - 1) / 0x1AuLL))
                                           + 156 * ((v30 + *(_QWORD *)(a1 + 200) - 1) % 0x1AuLL)
                                           + 76)
                               + 10.0)
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v31 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "not caching location newer than threshold", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        *(_WORD *)__p = 0;
        LODWORD(v93) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "not caching location newer than threshold", __p, v93);
        v85 = (char *)v84;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocation(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v84);
        if (v85 != buf)
          free(v85);
      }
    }
    else
    {
      sub_100D5FC68((_QWORD *)(a1 + 168), (uint64_t)v108);
    }
    v32 = *(_QWORD *)(a1 + 208);
    if (v32 >= *((int *)sub_10108CCAC() + 12))
    {
      do
      {
        *(int64x2_t *)(a1 + 200) = vaddq_s64(*(int64x2_t *)(a1 + 200), (int64x2_t)xmmword_101B9DFC0);
        sub_10047F918(a1 + 168, 1);
        v33 = *(_QWORD *)(a1 + 208);
      }
      while (v33 >= *((int *)sub_10108CCAC() + 12));
    }
  }
  sub_1009AEAFC((_QWORD *)(a1 + 48), &v105);
  v34 = v105;
  if (v105)
  {
    ++*((_DWORD *)v105 + 13);
    if ((v112 - 6) > 2)
    {
      if ((_DWORD)v112 == 11 || (_DWORD)v112 == 4)
      {
        ++v34[25];
      }
      else if ((v112 & 0xFFFFFFF7) == 1)
      {
        ++v34[26];
      }
    }
    else
    {
      ++v34[24];
    }
  }
  v35 = *(_QWORD **)(a1 + 240);
  v102 = v20 != 0;
  if (v35 != (_QWORD *)(a1 + 248))
  {
    v36 = 0;
    v101 = 0;
    v37 = (v24 != 10) & ~(v97 | v96);
    if (v24 == 13)
      v37 = 0;
    v38 = v37 | v95 ^ 1 | v94;
    v39 = 5000000.0;
    while (1)
    {
      if (*((_BYTE *)v35 + 284))
      {
        if (!*(_BYTE *)(a1 + 730))
          goto LABEL_80;
        if (v35[33] == v35[32])
        {
          if ((_os_feature_enabled_impl("CoreLocation", "cl_fence_handoff") & 1) != 0)
            goto LABEL_101;
          v40 = 64;
        }
        else
        {
          v40 = 8;
        }
        if ((v35[24] & v40) != 0)
        {
LABEL_80:
          v124 = v112;
          v125 = v113;
          v126[0] = v114[0];
          *(_OWORD *)((char *)v126 + 12) = *(_OWORD *)((char *)v114 + 12);
          v120 = v109;
          v121 = v110;
          v122 = *(_OWORD *)v111;
          v123 = *(_OWORD *)&v111[16];
          *(_OWORD *)buf = *(_OWORD *)v108;
          *(_OWORD *)&buf[16] = *(_OWORD *)&v108[16];
          if (*((_DWORD *)v35 + 53) == 2)
            sub_100D5D1A0(a1, (uint64_t)(v35 + 4), (uint64_t)buf);
          v41 = sub_10016CEDC((uint64_t)buf, (uint64_t)(v35 + 4), (double *)(a1 + 1776));
          v104 = fmin(v41, v104);
          v42 = *((_DWORD *)v35 + 70);
          v43 = fmin(v41, v39);
          if (v42)
            v39 = v43;
          if (v42 == -1
            || (v42 != 1 || !v100 && (v23 > 0xB || ((1 << v23) & 0xC10) == 0) && v99 != 13 || v41 < 50000.0)
            && ((v38 & 1) != 0 || *(_DWORD *)(a1 + 684) || sub_1009AEB64((_QWORD *)(a1 + 48))))
          {
            if ((v35[24] & 0x20) == 0)
            {
              v44 = v41 <= 25000.0 || *((_DWORD *)v35 + 70) == -1;
              v45 = v101;
              if (v44)
                v45 = v101 + 1;
              v101 = v45;
            }
            v46 = v113;
            *(_OWORD *)(a1 + 544) = v112;
            *(_OWORD *)(a1 + 560) = v46;
            *(_OWORD *)(a1 + 576) = v114[0];
            *(_OWORD *)(a1 + 588) = *(_OWORD *)((char *)v114 + 12);
            v47 = v110;
            *(_OWORD *)(a1 + 480) = v109;
            *(_OWORD *)(a1 + 496) = v47;
            v48 = *(_OWORD *)&v111[16];
            *(_OWORD *)(a1 + 512) = *(_OWORD *)v111;
            *(_OWORD *)(a1 + 528) = v48;
            v49 = *(_OWORD *)&v108[16];
            *(_OWORD *)(a1 + 448) = *(_OWORD *)v108;
            *(_OWORD *)(a1 + 464) = v49;
            sub_100D57358(a1, (uint64_t)v108, a3, (unsigned __int8 *)v35 + 32, a4);
            ++v36;
            v102 = 1;
          }
        }
      }
LABEL_101:
      v50 = (_QWORD *)v35[1];
      if (v50)
      {
        do
        {
          v51 = v50;
          v50 = (_QWORD *)*v50;
        }
        while (v50);
      }
      else
      {
        do
        {
          v51 = (_QWORD *)v35[2];
          v25 = *v51 == (_QWORD)v35;
          v35 = v51;
        }
        while (!v25);
      }
      v35 = v51;
      if (v51 == (_QWORD *)(a1 + 248))
        goto LABEL_111;
    }
  }
  v101 = 0;
  v36 = 0;
  v39 = 5000000.0;
LABEL_111:
  sub_100D5E45C(a1, a4);
  if (v99 == 13 || v23 == 11 || v23 == 4)
  {
    *(_QWORD *)(a1 + 696) = 0;
  }
  else if (v98 && *(_QWORD *)(a1 + 256))
  {
    v58 = *(double *)(a1 + 648);
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 16))(*(_QWORD *)(a1 + 1768)))
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v59 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        v60 = *(_QWORD *)(a1 + 256);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v60;
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "request a scan to comfirm cell location, fences, %{public}lu", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v86 = *(_QWORD *)(a1 + 256);
        *(_DWORD *)__p = 134349056;
        *(_QWORD *)&__p[4] = v86;
        LODWORD(v93) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "request a scan to comfirm cell location, fences, %{public}lu", __p, v93);
        v88 = (char *)v87;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocation(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v87);
        if (v88 != buf)
          free(v88);
      }
      if (*(double *)&v108[20] > 1400.0 && v101)
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v61 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67240449;
          *(_DWORD *)&buf[4] = v101;
          *(_WORD *)&buf[8] = 2049;
          *(double *)&buf[10] = v104;
          _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "Fence: requesting a scan, numOfFencesNeedScan, %{public}d, minDistanceToFence, %{private}.1lf", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          *(_DWORD *)__p = 67240449;
          *(_DWORD *)&__p[4] = v101;
          *(_WORD *)&__p[8] = 2049;
          *(double *)&__p[10] = v104;
          LODWORD(v93) = 18;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: requesting a scan, numOfFencesNeedScan, %{public}d, minDistanceToFence, %{private}.1lf", __p, v93);
          v92 = (char *)v91;
          sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocation(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v91);
          if (v92 != buf)
            free(v92);
        }
        (*(void (**)(uint64_t, const char *, _QWORD, double))(*(_QWORD *)a1 + 96))(a1, "handleLocation.cell2wifi", 0, a4);
        goto LABEL_120;
      }
    }
    else if (v39 <= 25000.0)
    {
      v64 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 392))(*(_QWORD *)(a1 + 1768));
      if (vabdd_f64(a4, v58) <= 756.0)
        v65 = 1;
      else
        v65 = v64;
      if ((v65 & 1) == 0 && sub_10016E59C(a1))
      {
        *(double *)(a1 + 648) = a4;
        *(_QWORD *)(a1 + 684) = 0x300000001;
        (*(void (**)(_QWORD, void *))(**(_QWORD **)(a1 + 1768) + 232))(*(_QWORD *)(a1 + 1768), &unk_101C229A8);
      }
    }
    else
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v63 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134283521;
        *(double *)&buf[4] = v39;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "cancelLocationWatchdog, wifi off, minDistance, %{private}lf", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        *(_DWORD *)__p = 134283521;
        *(double *)&__p[4] = v39;
        LODWORD(v93) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "cancelLocationWatchdog, wifi off, minDistance, %{private}lf", __p, v93);
        v90 = (char *)v89;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocation(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v89);
        if (v90 != buf)
          free(v90);
      }
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 272))(*(_QWORD *)(a1 + 1768));
      *(_QWORD *)(a1 + 684) = 0;
    }
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v52 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240449;
    *(_DWORD *)&buf[4] = v101;
    *(_WORD *)&buf[8] = 2049;
    *(double *)&buf[10] = v104;
    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "Fence: avoid a scan, numOfFencesNeedScan, %{public}d, minDistanceToFence, %{private}.1lf", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    *(_DWORD *)__p = 67240449;
    *(_DWORD *)&__p[4] = v101;
    *(_WORD *)&__p[8] = 2049;
    *(double *)&__p[10] = v104;
    LODWORD(v93) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: avoid a scan, numOfFencesNeedScan, %{public}d, minDistanceToFence, %{private}.1lf", __p, v93);
    v76 = (char *)v75;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocation(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v75);
    if (v76 != buf)
      free(v76);
  }
LABEL_120:
  if (sub_1001DFAE8())
  {
    sub_100119F3C(buf);
    *(_DWORD *)__p = *(_QWORD *)(a1 + 256);
    sub_10011B4E4((uint64_t)buf, "fenceUpdate", __p);
    sub_10018A4CC((uint64_t)buf, "horizontalAccuracy", &v108[20]);
    *(_DWORD *)__p = v36;
    sub_10011B4E4((uint64_t)buf, "numOfDispatchedChecks", __p);
    sub_10018A4CC((uint64_t)buf, "minDistanceToFence", &v104);
    sub_1001DFAF4((uint64_t)buf, (uint64_t)"locationd");
    sub_10011A5A8(buf);
  }
  if (v102)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v53 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "Fence: Dispatch continuous engagement", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      *(_WORD *)__p = 0;
      LODWORD(v93) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: Dispatch continuous engagement", __p, v93);
      v83 = (char *)v82;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocation(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v82);
      if (v83 != buf)
        free(v83);
    }
    v54 = v104 - *(double *)&v108[20];
    if (v104 - *(double *)&v108[20] < 0.0)
      v54 = 0.0;
    *(double *)(a1 + 736) = v54;
    *(_QWORD *)(a1 + 744) = *(_QWORD *)&v111[12];
    sub_10016CFF8(a1, a4);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 120))(*(_QWORD *)(a1 + 1768));
  }
  if (!v36 && *(_DWORD *)(a1 + 684) && sub_10016F6EC((double *)(a1 + 904), a4))
    sub_100ED2AAC(a1 + 1312);
  v55 = v106;
  if (v106)
  {
    p_shared_owners = (unint64_t *)&v106->__shared_owners_;
    do
      v57 = __ldaxr(p_shared_owners);
    while (__stlxr(v57 - 1, p_shared_owners));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
}

void sub_100D503C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100D50420(uint64_t a1, __int128 *a2, double a3)
{
  __int128 v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  uint64_t v33;
  uint8_t buf[4];
  uint64_t v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  uint64_t v45;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 256))(*(_QWORD *)(a1 + 1768));
  v6 = *a2;
  *(_OWORD *)(a1 + 1856) = a2[1];
  *(_OWORD *)(a1 + 1840) = v6;
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v7 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(a1 + 1840);
    v9 = *(unsigned __int8 *)(a1 + 1856);
    v10 = *(_DWORD *)(a1 + 1860);
    v11 = *(_DWORD *)(a1 + 1864);
    v12 = *(_DWORD *)(a1 + 1868);
    v13 = *(_QWORD *)(a1 + 1848);
    *(_DWORD *)buf = 134284801;
    v35 = v8;
    v36 = 1025;
    v37 = v9;
    v38 = 1025;
    v39 = v10;
    v40 = 1025;
    v41 = v11;
    v42 = 1025;
    v43 = v12;
    v44 = 2049;
    v45 = v13;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Fence: MiLo, MicroLocation event updated at CLFenceMonitor, timestamp, %{private}.1f, isModelStable, %{private}d, numWifiAPs, %{private}u, numBleDevices, %{private}u, numUwbDevices, %{private}u, homeLoiProbability, %{private}.2f", buf, 0x2Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v14 = *(_QWORD *)(a1 + 1840);
    v15 = *(unsigned __int8 *)(a1 + 1856);
    v16 = *(_DWORD *)(a1 + 1860);
    v17 = *(_DWORD *)(a1 + 1864);
    v18 = *(_DWORD *)(a1 + 1868);
    v19 = *(_QWORD *)(a1 + 1848);
    v22 = 134284801;
    v23 = v14;
    v24 = 1025;
    v25 = v15;
    v26 = 1025;
    v27 = v16;
    v28 = 1025;
    v29 = v17;
    v30 = 1025;
    v31 = v18;
    v32 = 2049;
    v33 = v19;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Fence: MiLo, MicroLocation event updated at CLFenceMonitor, timestamp, %{private}.1f, isModelStable, %{private}d, numWifiAPs, %{private}u, numBleDevices, %{private}u, numUwbDevices, %{private}u, homeLoiProbability, %{private}.2f", &v22, 46);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleMicroLocationEventUpdate(const CFAbsoluteTime, const MicroLocationEvent &)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  sub_100D50694(a1, 1, a3);
}

void sub_100D50694(uint64_t a1, int a2, double a3)
{
  NSObject *v6;
  int v7;
  uint64_t v8;
  uint64_t **v9;
  unsigned __int8 *v10;
  uint64_t v11;
  NSObject *v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  BOOL v19;
  _QWORD *v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  uint64_t v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v27;
  int v28;
  _BYTE v29[10];
  _DWORD v30[4];
  uint8_t buf[4];
  _BYTE v32[10];
  _DWORD v33[128];
  std::__shared_weak_count *v34;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v6 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(unsigned __int8 *)(a1 + 1872);
    v8 = *(_QWORD *)(a1 + 1896);
    *(_DWORD *)buf = 67175169;
    *(_DWORD *)v32 = v7;
    *(_WORD *)&v32[4] = 1025;
    *(_DWORD *)&v32[6] = v8;
    LOWORD(v33[0]) = 1025;
    *(_DWORD *)((char *)v33 + 2) = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Fence: MiLo, handleFencesPendingMiLoEventUpdate, fIsPendingMicroLocationEventUpdate, %{private}d, numFences, %{private}d, useMiLoEvent, %{private}d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v23 = *(unsigned __int8 *)(a1 + 1872);
    v24 = *(_QWORD *)(a1 + 1896);
    v28 = 67175169;
    *(_DWORD *)v29 = v23;
    *(_WORD *)&v29[4] = 1025;
    *(_DWORD *)&v29[6] = v24;
    LOWORD(v30[0]) = 1025;
    *(_DWORD *)((char *)v30 + 2) = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: MiLo, handleFencesPendingMiLoEventUpdate, fIsPendingMicroLocationEventUpdate, %{private}d, numFences, %{private}d, useMiLoEvent, %{private}d", &v28, 20);
    v26 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleFencesPendingMiLoEventUpdate(const CFAbsoluteTime, const BOOL)", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  if (*(_BYTE *)(a1 + 1872))
  {
    v9 = (uint64_t **)(a1 + 1880);
    v10 = *(unsigned __int8 **)(a1 + 1880);
    if (v10 != (unsigned __int8 *)(a1 + 1888))
    {
      do
      {
        v11 = sub_10016FC40(a1 + 240, v10 + 32);
        if (a1 + 248 != v11)
        {
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          v12 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
          {
            v13 = (_QWORD *)(v11 + 56);
            if (*(char *)(v11 + 79) < 0)
              v13 = (_QWORD *)*v13;
            *(_DWORD *)buf = 136380931;
            *(_QWORD *)v32 = v13;
            *(_WORD *)&v32[8] = 1025;
            v33[0] = a2;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Fence: MiLo, Processing fencePendingMiLo, %{private}s, useMiLoEvent, %{private}d", buf, 0x12u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_1021826B0);
            v20 = (_QWORD *)(v11 + 56);
            if (*(char *)(v11 + 79) < 0)
              v20 = (_QWORD *)*v20;
            v28 = 136380931;
            *(_QWORD *)v29 = v20;
            *(_WORD *)&v29[8] = 1025;
            v30[0] = a2;
            LODWORD(v27) = 18;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: MiLo, Processing fencePendingMiLo, %{private}s, useMiLoEvent, %{private}d", &v28, v27);
            v22 = (uint8_t *)v21;
            sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleFencesPendingMiLoEventUpdate(const CFAbsoluteTime, const BOOL)", "%s\n", v21);
            if (v22 != buf)
              free(v22);
          }
          sub_10012A33C(buf);
          sub_100D50B40(a1, v10 + 280, (uint64_t)buf, v11 + 32, v11 + 280, a2, 0, a3);
          v14 = v34;
          if (v34)
          {
            p_shared_owners = (unint64_t *)&v34->__shared_owners_;
            do
              v16 = __ldaxr(p_shared_owners);
            while (__stlxr(v16 - 1, p_shared_owners));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
        }
        v17 = (unsigned __int8 *)*((_QWORD *)v10 + 1);
        if (v17)
        {
          do
          {
            v18 = v17;
            v17 = *(unsigned __int8 **)v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            v18 = (unsigned __int8 *)*((_QWORD *)v10 + 2);
            v19 = *(_QWORD *)v18 == (_QWORD)v10;
            v10 = v18;
          }
          while (!v19);
        }
        v10 = v18;
      }
      while (v18 != (unsigned __int8 *)(a1 + 1888));
      v9 = (uint64_t **)(a1 + 1880);
      v10 = *(unsigned __int8 **)(a1 + 1880);
    }
    *(_BYTE *)(a1 + 1872) = 0;
    sub_100D64224(v9, (uint64_t *)v10, (uint64_t *)(a1 + 1888));
  }
}

void sub_100D50B20(_Unwind_Exception *a1)
{
  sub_100261F44((uint64_t)&STACK[0x258]);
  _Unwind_Resume(a1);
}

void sub_100D50B40(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, double a8)
{
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  double v17;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  double v40;
  std::string *v41;
  uint64_t *v42;
  uint64_t *v43;
  int v44;
  int v45;
  NSObject *v46;
  std::string::pointer v47;
  std::string *v48;
  std::string::pointer data;
  std::string *v50;
  const char *v51;
  int v52;
  int v56;
  _BOOL4 v57;
  _BOOL4 v58;
  uint64_t v59;
  NSObject *v61;
  std::string *v62;
  std::string *v63;
  uint64_t v64;
  int v65;
  NSObject *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  const void **v73;
  void **v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  uint64_t v81;
  int v82;
  int v83;
  NSObject *v84;
  _QWORD *v85;
  int v86;
  void **v87;
  int v88;
  uint64_t v89;
  double v90;
  void **v91;
  uint64_t *v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  int v97;
  void **v98;
  int v99;
  std::string::pointer v100;
  double v101;
  void **v102;
  const char *v103;
  char *v104;
  __int128 v105;
  __int128 v106;
  char v107;
  uint64_t *v108;
  uint64_t *v109;
  unint64_t v110;
  _BYTE *v111;
  const char *i;
  NSObject *v113;
  std::string *v114;
  int v115;
  std::string::size_type size;
  std::string::pointer v117;
  double v118;
  NSObject *v119;
  void *v120;
  _BOOL4 v121;
  NSObject *v122;
  _BOOL4 v123;
  uint64_t v124;
  double v125;
  NSObject *v126;
  std::string *v127;
  uint64_t v128;
  uint64_t *v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  char *v136;
  NSObject *v137;
  std::string *v138;
  int v139;
  uint64_t v140;
  std::string *v141;
  int v142;
  uint64_t v143;
  const char *v144;
  char *v145;
  _BOOL4 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  const char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _BYTE *v154;
  const char *v155;
  int v156;
  unint64_t v157;
  unint64_t v158;
  double v159;
  double v160;
  double v161;
  BOOL v162;
  double v163;
  unsigned int v164;
  char *v165;
  const char *v166;
  const char *v167;
  std::string::pointer v168;
  int v169;
  int v170;
  int v171;
  int v172;
  const char *v173;
  int v174;
  double v175;
  double v176;
  double v177;
  _BOOL4 v178;
  int v179;
  uint64_t v180;
  int v181;
  NSObject *v182;
  void *v183;
  double v184;
  double v185;
  double v186;
  NSObject *v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  NSObject *v191;
  char v192;
  NSObject *v193;
  uint64_t v194;
  int v195;
  int v196;
  std::string *v197;
  std::string *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  CLMotionActivity *v202;
  int v203;
  const char *v204;
  int v205;
  unint64_t v206;
  unint64_t v207;
  double v208;
  double v209;
  double v210;
  double v211;
  unsigned int v212;
  char *v213;
  const char *v214;
  char *v215;
  const char *v216;
  const char *v217;
  std::string::pointer v218;
  int v219;
  int v220;
  int v221;
  int v222;
  const char *v223;
  int v224;
  double v225;
  double v226;
  double v227;
  char *v228;
  char *v229;
  const char *v230;
  char *v231;
  const char *v232;
  char *v233;
  uint64_t v234;
  _BOOL4 v235;
  uint64_t v236;
  const char *v237;
  char *v238;
  std::string *v239;
  const char *v240;
  std::string *v241;
  std::string *v242;
  const char *v243;
  char *v244;
  const char *v245;
  char *v246;
  uint64_t v247;
  std::string *v248;
  int v249;
  std::string::size_type v250;
  std::string::pointer v251;
  double v252;
  const char *v253;
  char *v254;
  const char *v255;
  char *v256;
  uint64_t v257;
  _BYTE *v258;
  const char *v259;
  const char *v260;
  char *v261;
  std::string *v262;
  uint64_t v263;
  const char *v264;
  char *v265;
  const char *v266;
  char *v267;
  char *v268;
  char *v269;
  uint64_t v270;
  const char *v271;
  const char *v272;
  uint64_t v273;
  uint64_t v274;
  std::string *v275;
  _QWORD *v276;
  std::string::size_type v277;
  uint64_t v278;
  std::string *v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  uint64_t v284;
  uint64_t v285;
  int v286;
  NSObject *log;
  int v288;
  uint64_t v289;
  unsigned int v290;
  _BOOL4 v291;
  unint64_t v292;
  _BOOL4 v293;
  std::string *__str;
  void *v296[2];
  char v297;
  uint64_t v298[2];
  char v299;
  _OWORD v300[5];
  uint64_t v301;
  uint64_t v302[2];
  char v303;
  uint64_t v304[2];
  char v305;
  void *__dst[2];
  int64_t v307;
  int v308;
  _OWORD __src[59];
  _BYTE v310[32];
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  _OWORD v317[2];
  _BYTE v318[62];
  __int16 v319;
  double v320;
  _BYTE v321[32];
  __int128 v322;
  _BYTE v323[32];
  __int128 v324;
  _BYTE v325[22];
  __int16 v326;
  void *v327;
  __int16 v328;
  const char *v329;
  __int16 v330;
  _BYTE v331[20];
  _BYTE v332[14];
  __int16 v333;
  int v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  _BYTE v343[28];
  unsigned int v344;
  _QWORD v345[118];
  CLMotionActivity v346;
  _BYTE buf[64];
  _BYTE v348[48];
  _BYTE v349[28];
  __int16 v350;
  std::string::pointer v351;
  __int16 v352;
  int v353;
  __int16 v354;
  int v355;
  __int16 v356;
  int v357;
  __int16 v358;
  int v359;
  __int16 v360;
  double v361;
  __int16 v362;
  int v363;
  __int16 v364;
  void *v365;
  __int16 v366;
  const char *v367;
  __int16 v368;
  _BYTE v369[20];
  __int128 v370;
  _BYTE v371[10];
  __int16 v372;
  uint64_t v373;
  __int16 v374;
  int v375;
  __int16 v376;
  int v377;

  LODWORD(log) = a6;
  v13 = a2[7];
  v315 = a2[6];
  v316 = v13;
  v317[0] = a2[8];
  *(_OWORD *)((char *)v317 + 12) = *(_OWORD *)((char *)a2 + 140);
  v14 = a2[3];
  v311 = a2[2];
  v312 = v14;
  v15 = a2[5];
  v313 = a2[4];
  v314 = v15;
  v16 = a2[1];
  *(_OWORD *)v310 = *a2;
  *(_OWORD *)&v310[16] = v16;
  __str = (std::string *)a4;
  if (*(_DWORD *)(a4 + 180) == 2)
  {
    v288 = sub_100D5D1A0(a1, a4, (uint64_t)v310) ^ 1;
    a4 = (uint64_t)__str;
  }
  else
  {
    v288 = 0;
  }
  v17 = sub_10016F4A8((double *)&v310[4], a4, (double *)(a1 + 1776));
  sub_10016FA6C(a1, (int *)&v315, 0, a8);
  __asm { FMOV            V0.2D, #-1.0 }
  __src[1] = _Q0;
  __src[2] = _Q0;
  __src[3] = _Q0;
  __src[4] = _Q0;
  __src[5] = _Q0;
  __src[6] = _Q0;
  __src[7] = _Q0;
  *(_QWORD *)((char *)&__src[9] + 4) = 0;
  *(_QWORD *)((char *)&__src[8] + 12) = 0;
  *(_OWORD *)((char *)&__src[9] + 12) = xmmword_101BAFC90;
  *(_OWORD *)((char *)&__src[10] + 12) = _Q0;
  *(_OWORD *)((char *)&__src[11] + 12) = _Q0;
  *(_OWORD *)((char *)&__src[12] + 12) = _Q0;
  DWORD2(__src[8]) = 0xFFFF;
  HIDWORD(__src[13]) = 0;
  *(_QWORD *)&__src[14] = 0xBFF0000000000000;
  __src[20] = xmmword_101BAFEE0;
  __src[21] = _Q0;
  v22 = *(_OWORD *)(a1 + 288);
  v23 = *(_OWORD *)(a1 + 304);
  __src[22] = _Q0;
  *(_OWORD *)((char *)&__src[17] + 4) = *(_OWORD *)((char *)a2 + 140);
  *(_OWORD *)((char *)&__src[16] + 8) = a2[8];
  v24 = a2[6];
  *(_OWORD *)((char *)&__src[15] + 8) = a2[7];
  *(_OWORD *)((char *)&__src[14] + 8) = v24;
  v25 = a2[3];
  *(_OWORD *)((char *)&__src[10] + 8) = a2[2];
  *(_OWORD *)((char *)&__src[11] + 8) = v25;
  v26 = a2[5];
  *(_OWORD *)((char *)&__src[12] + 8) = a2[4];
  v27 = *a2;
  *(_OWORD *)((char *)&__src[9] + 8) = a2[1];
  DWORD1(__src[18]) = 0xFFFF;
  *(_QWORD *)&__src[19] = 0;
  *((_QWORD *)&__src[18] + 1) = 0;
  *((_QWORD *)&__src[19] + 1) = 0xBFF0000000000000;
  *(_OWORD *)((char *)&__src[8] + 8) = v27;
  *(_OWORD *)((char *)&__src[13] + 8) = v26;
  v28 = *(_OWORD *)(a1 + 560);
  *(_OWORD *)((char *)&__src[24] + 4) = *(_OWORD *)(a1 + 544);
  *(_OWORD *)((char *)&__src[25] + 4) = v28;
  *(_OWORD *)((char *)&__src[26] + 4) = *(_OWORD *)(a1 + 576);
  v29 = *(_OWORD *)(a1 + 496);
  *(_OWORD *)((char *)&__src[20] + 4) = *(_OWORD *)(a1 + 480);
  *(_OWORD *)((char *)&__src[21] + 4) = v29;
  v30 = *(_OWORD *)(a1 + 528);
  *(_OWORD *)((char *)&__src[22] + 4) = *(_OWORD *)(a1 + 512);
  *(_OWORD *)((char *)&__src[23] + 4) = v30;
  v31 = *(_OWORD *)(a1 + 464);
  *(_OWORD *)((char *)&__src[18] + 4) = *(_OWORD *)(a1 + 448);
  *(_OWORD *)((char *)&__src[19] + 4) = v31;
  *(_OWORD *)((char *)&__src[36] + 12) = *(_OWORD *)(a1 + 428);
  v32 = *(_OWORD *)(a1 + 400);
  __src[34] = *(_OWORD *)(a1 + 384);
  __src[35] = v32;
  __src[36] = *(_OWORD *)(a1 + 416);
  v33 = *(_OWORD *)(a1 + 336);
  __src[30] = *(_OWORD *)(a1 + 320);
  __src[31] = v33;
  v34 = *(_OWORD *)(a1 + 368);
  __src[32] = *(_OWORD *)(a1 + 352);
  __src[33] = v34;
  BYTE8(__src[0]) = 1;
  *(double *)&__src[8] = a8;
  __src[27] = *(_OWORD *)(a1 + 588);
  __src[28] = v22;
  __src[29] = v23;
  DWORD1(__src[38]) = *(_DWORD *)(a1 + 604);
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(a1 + 1768) + 128))(buf);
  __src[48] = *(_OWORD *)&v348[32];
  __src[49] = *(_OWORD *)v349;
  *(_QWORD *)&__src[50] = *(_QWORD *)&v349[16];
  __src[44] = *(_OWORD *)&buf[32];
  __src[45] = *(_OWORD *)&buf[48];
  __src[47] = *(_OWORD *)&v348[16];
  __src[46] = *(_OWORD *)v348;
  __src[43] = *(_OWORD *)&buf[16];
  __src[42] = *(_OWORD *)buf;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(a1 + 1768) + 136))(buf);
  *(_OWORD *)((char *)&__src[56] + 8) = *(_OWORD *)&v348[32];
  *(_OWORD *)((char *)&__src[57] + 8) = *(_OWORD *)v349;
  *(_OWORD *)((char *)&__src[52] + 8) = *(_OWORD *)&buf[32];
  *(_OWORD *)((char *)&__src[53] + 8) = *(_OWORD *)&buf[48];
  *(_OWORD *)((char *)&__src[54] + 8) = *(_OWORD *)v348;
  *(_OWORD *)((char *)&__src[55] + 8) = *(_OWORD *)&v348[16];
  *(_OWORD *)((char *)&__src[50] + 8) = *(_OWORD *)buf;
  *(_OWORD *)((char *)&__src[51] + 8) = *(_OWORD *)&buf[16];
  *((_QWORD *)&__src[58] + 1) = *(_QWORD *)&v349[16];
  v35 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 16))(*(_QWORD *)(a1 + 1768));
  sub_100B6F304((uint64_t)v310, v17, a3, (uint64_t)__str, (int *)a5, v35, (uint64_t)__src);
  v36 = __src[0];
  v308 = __src[0];
  v37 = *(_DWORD *)(a1 + 604);
  v38 = *(_DWORD *)a5;
  v39 = *(_DWORD *)(a5 + 68);
  v290 = *(_DWORD *)a5;
  v292 = v39;
  v289 = v37;
  if (v288)
  {
    if (v38)
      return;
    v40 = sub_10016F694((uint64_t)__str);
    v38 = v290;
    v41 = __str;
    if (v17 <= v40 + *((double *)sub_10016F688() + 42))
      return;
    v36 = 1;
    v308 = 1;
    if (!a7)
      goto LABEL_14;
    goto LABEL_10;
  }
  v41 = __str;
  if (a7)
  {
LABEL_10:
    v42 = (uint64_t *)sub_10016FC40(a1 + 1880, (unsigned __int8 *)v41);
    v36 = v308;
    if (v308)
    {
      v38 = v290;
      v41 = __str;
    }
    else
    {
      v43 = v42;
      v38 = v290;
      v41 = __str;
      if ((uint64_t *)(a1 + 1888) != v42)
      {
        sub_10008A9F0((uint64_t **)(a1 + 1880), v42);
        sub_100D63F14((uint64_t)(v43 + 4));
        operator delete(v43);
        v36 = v308;
      }
    }
  }
LABEL_14:
  if (v36 == -1 || v36 == v38)
  {
    v291 = 0;
    v52 = v36 | v38;
    _ZF = (~LODWORD(v41[6].__r_.__value_.__r.__words[2]) & 5) == 0 && v52 == 0;
    v56 = _ZF && v39 == 1 && v37 == 2;
    v293 = v56;
    goto LABEL_48;
  }
  if (v38 == -1 || v36)
  {
    v44 = 0;
    if (v38 != -1 && v36 == 1)
    {
      if ((v41[6].__r_.__value_.__s.__data_[16] & 2) != 0)
      {
        if (*(double *)(a1 + 656) <= 0.0)
        {
          v44 = 1;
        }
        else
        {
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          v66 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "Fence: invalidate EPNO exit trigger time", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_1021826B0);
            *(_WORD *)v318 = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: invalidate EPNO exit trigger time", v318, 2);
            v267 = (char *)v266;
            sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationMonitoredFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, const BOOL, const BOOL)", "%s\n", v266);
            if (v267 != buf)
              free(v267);
          }
          *(_QWORD *)(a1 + 656) = 0;
          v44 = 1;
          v41 = __str;
        }
      }
      else
      {
        v44 = 0;
      }
    }
  }
  else
  {
    v44 = v41[6].__r_.__value_.__s.__data_[16] & 1;
  }
  v291 = v44 == 0;
  if ((~LODWORD(v41[6].__r_.__value_.__r.__words[2]) & 5) != 0)
  {
    v293 = v44 != 0;
    goto LABEL_48;
  }
  v45 = v44 ^ 1;
  if (!v308 && v37 != 2)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v46 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      data = v41[1].__r_.__value_.__l.__data_;
      v48 = v41 + 1;
      v47 = data;
      if ((v48->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v50 = v48;
      else
        v50 = (std::string *)v47;
      if ((v308 + 1) > 4)
        v51 = "---";
      else
        v51 = off_102182880[v308 + 1];
      *(_DWORD *)buf = 136380931;
      *(_QWORD *)&buf[4] = v50;
      *(_WORD *)&buf[12] = 2081;
      *(_QWORD *)&buf[14] = v51;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "Fence: %{private}s, filtering unwanted, %{private}s, nofitication, has not achieved settled state yet", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v239 = __str + 1;
      if ((__str[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v239 = (std::string *)__str[1].__r_.__value_.__l.__data_;
      if ((v308 + 1) > 4)
        v240 = "---";
      else
        v240 = off_102182880[v308 + 1];
      *(_DWORD *)v318 = 136380931;
      *(_QWORD *)&v318[4] = v239;
      *(_WORD *)&v318[12] = 2081;
      *(_QWORD *)&v318[14] = v240;
      LODWORD(v270) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: %{private}s, filtering unwanted, %{private}s, nofitication, has not achieved settled state yet", v318, v270);
      v256 = (char *)v255;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationMonitoredFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, const BOOL, const BOOL)", "%s\n", v255);
      if (v256 != buf)
        free(v256);
    }
    v45 = 0;
    v44 = 0;
    v41 = __str;
  }
  v291 = v45 != 0;
  v293 = v44 != 0;
  if (v308 != 1 || v39 == 2 || (v41[6].__r_.__value_.__s.__data_[16] & 2) == 0)
    goto LABEL_48;
  v108 = &qword_1022A0000;
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v109 = &qword_1022A0000;
  v110 = qword_1022A0068;
  if (!os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    goto LABEL_392;
  sub_100914D68((const void **)&v41->__r_.__value_.__l.__data_, (std::string *)buf);
  if (buf[23] >= 0)
    v111 = buf;
  else
    v111 = *(_BYTE **)buf;
  if ((v308 + 1) > 4)
    goto LABEL_389;
  for (i = off_102182880[v308 + 1]; ; i = "---")
  {
    *(_DWORD *)v318 = 136380931;
    *(_QWORD *)&v318[4] = v111;
    *(_WORD *)&v318[12] = 2081;
    *(_QWORD *)&v318[14] = i;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v110, OS_LOG_TYPE_DEBUG, "Fence: %{private}s, filtering unwanted, %{private}s, nofitication, never achieved settled state for entry notification", v318, 0x16u);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
LABEL_392:
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v108[12] != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v257 = v109[13];
      sub_100914D68((const void **)&__str->__r_.__value_.__l.__data_, (std::string *)v318);
      if (v318[23] >= 0)
        v258 = v318;
      else
        v258 = *(_BYTE **)v318;
      if ((v308 + 1) > 4)
        v259 = "---";
      else
        v259 = off_102182880[v308 + 1];
      v346.type = 136380931;
      *(_QWORD *)&v346.confidence = v258;
      LOWORD(v346.mountedState) = 2081;
      *(_QWORD *)((char *)&v346.mountedState + 2) = v259;
      LODWORD(v270) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v257, 2, "Fence: %{private}s, filtering unwanted, %{private}s, nofitication, never achieved settled state for entry notification", &v346, v270);
      v269 = v268;
      if ((v318[23] & 0x80000000) != 0)
        operator delete(*(void **)v318);
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationMonitoredFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, const BOOL, const BOOL)", "%s\n", v269);
      if (v269 != buf)
        free(v269);
    }
    v291 = 0;
    v293 = 0;
LABEL_48:
    v286 = sub_10016FAC4(a1, a8);
    if (!v291 && !v293)
    {
      v280 = 0;
      v283 = 0;
      v291 = 0;
      v293 = 0;
LABEL_69:
      v59 = (uint64_t)__str;
      goto LABEL_226;
    }
    if (__str[6].__r_.__value_.__s.__data_[16] < 0)
    {
      if (a1 + 824 != sub_10016FC40(a1 + 816, (unsigned __int8 *)__str))
      {
        sub_1001157C0(buf);
        if (sub_100D5E27C(a1, (unsigned __int8 *)__str, (uint64_t)buf))
        {
          v64 = sub_10016FC40(a1 + 240, buf);
          if (a1 + 248 == v64)
          {
            sub_1004E2BD0((uint64_t)buf);
          }
          else
          {
            v65 = *(_DWORD *)(v64 + 280);
            sub_1004E2BD0((uint64_t)buf);
            if (v65 != -1)
              goto LABEL_213;
          }
        }
        else
        {
          if (*(_QWORD *)&v369[12])
          {
            *(_QWORD *)&v370 = *(_QWORD *)&v369[12];
            operator delete(*(void **)&v369[12]);
          }

          if ((v369[3] & 0x80000000) != 0)
            operator delete(v365);
          if ((v348[7] & 0x80000000) != 0)
            operator delete(*(void **)&buf[48]);
          if ((buf[47] & 0x80000000) != 0)
            operator delete(*(void **)&buf[24]);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
      }
      if (v290 == -1)
      {
        if (v293)
        {
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          v119 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_ERROR, "#significantFence, state init on transition", buf, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_1021826B0);
            *(_WORD *)v318 = 0;
            LODWORD(v270) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 16, "#significantFence, state init on transition", v318, v270);
            v261 = (char *)v260;
            sub_100512490("Generic", 1, 0, 0, "void CLFenceMonitor::handleLocationMonitoredFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, const BOOL, const BOOL)", "%s\n", v260);
            if (v261 != buf)
              free(v261);
          }
        }
        sub_1015A2E04(v298, "SigFence");
        v59 = (uint64_t)__str;
        sub_100D4C720(a1, (uint64_t)__str, &v308, v298);
        if ((v299 & 0x80000000) == 0)
          goto LABEL_225;
        v120 = (void *)v298[0];
      }
      else
      {
        v59 = (uint64_t)__str;
        if (!v293)
          goto LABEL_225;
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v113 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
        {
          if ((__str[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v114 = __str + 1;
          else
            v114 = (std::string *)__str[1].__r_.__value_.__l.__data_;
          v115 = *(unsigned __int8 *)(a1 + 619);
          v117 = __str[3].__r_.__value_.__l.__data_;
          size = __str[3].__r_.__value_.__l.__size_;
          v118 = sub_10016F694((uint64_t)__str);
          *(_DWORD *)buf = 136381699;
          *(_QWORD *)&buf[4] = v114;
          *(_WORD *)&buf[12] = 1026;
          *(_DWORD *)&buf[14] = v115;
          *(_WORD *)&buf[18] = 2049;
          *(_QWORD *)&buf[20] = v117;
          *(_WORD *)&buf[28] = 2049;
          *(_QWORD *)&buf[30] = size;
          *(_WORD *)&buf[38] = 2050;
          *(double *)&buf[40] = v118;
          _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_DEFAULT, "#significantRegion: fence, %{private}s, fence event, hint, %{public}d, latLon, %{private}.6lf,%{private}.6lf, radius, %{public}.1lf", buf, 0x30u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          v247 = qword_1022A0068;
          if ((__str[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v248 = __str + 1;
          else
            v248 = (std::string *)__str[1].__r_.__value_.__l.__data_;
          v249 = *(unsigned __int8 *)(a1 + 619);
          v251 = __str[3].__r_.__value_.__l.__data_;
          v250 = __str[3].__r_.__value_.__l.__size_;
          v252 = sub_10016F694((uint64_t)__str);
          *(_DWORD *)v318 = 136381699;
          *(_QWORD *)&v318[4] = v248;
          *(_WORD *)&v318[12] = 1026;
          *(_DWORD *)&v318[14] = v249;
          *(_WORD *)&v318[18] = 2049;
          *(_QWORD *)&v318[20] = v251;
          *(_WORD *)&v318[28] = 2049;
          *(_QWORD *)&v318[30] = v250;
          *(_WORD *)&v318[38] = 2050;
          *(double *)&v318[40] = v252;
          LODWORD(v270) = 48;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v247, 0, "#significantRegion: fence, %{private}s, fence event, hint, %{public}d, latLon, %{private}.6lf,%{private}.6lf, radius, %{public}.1lf", v318, v270);
          v254 = (char *)v253;
          sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationMonitoredFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, const BOOL, const BOOL)", "%s\n", v253);
          if (v254 != buf)
            free(v254);
        }
        (*(void (**)(_QWORD, int *, std::string *, _BYTE *))(**(_QWORD **)(a1 + 1768) + 416))(*(_QWORD *)(a1 + 1768), &v308, __str, v310);
        if (*(_BYTE *)(a1 + 619))
        {
LABEL_213:
          v283 = 0;
          v291 = 0;
          v293 = 0;
          v280 = 1;
          goto LABEL_69;
        }
        sub_1015A2E04(v296, "SigFence");
        v59 = (uint64_t)__str;
        sub_100D4CCD0(a1, (uint64_t)__str, &v308, (uint64_t)v310, (uint64_t *)v296, a8);
        if ((v297 & 0x80000000) == 0)
        {
LABEL_225:
          v283 = 0;
          v291 = 0;
          v293 = 0;
          v280 = 1;
          goto LABEL_226;
        }
        v120 = v296[0];
      }
      operator delete(v120);
      goto LABEL_225;
    }
    v57 = sub_100D5FD3C(a1, (__int128 *)&__str[1], (__int128 *)__str);
    v58 = v57;
    v59 = (uint64_t)__str;
    if (__str[7].__r_.__value_.__s.__data_[8] || !v57)
      goto LABEL_65;
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v61 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
    {
      if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v62 = __str;
      else
        v62 = (std::string *)__str->__r_.__value_.__r.__words[0];
      if ((__str[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v63 = __str + 1;
      else
        v63 = (std::string *)__str[1].__r_.__value_.__l.__data_;
      *(_DWORD *)buf = 136446467;
      *(_QWORD *)&buf[4] = v62;
      *(_WORD *)&buf[12] = 2081;
      *(_QWORD *)&buf[14] = v63;
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_FAULT, "LOI helper fence %{public}s/%{private}s has isHelperFence=false", buf, 0x16u);
    }
    v59 = (uint64_t)__str;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v241 = __str;
      else
        v241 = (std::string *)__str->__r_.__value_.__r.__words[0];
      if ((__str[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v242 = __str + 1;
      else
        v242 = (std::string *)__str[1].__r_.__value_.__l.__data_;
      *(_DWORD *)v318 = 136446467;
      *(_QWORD *)&v318[4] = v241;
      *(_WORD *)&v318[12] = 2081;
      *(_QWORD *)&v318[14] = v242;
      LODWORD(v270) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "LOI helper fence %{public}s/%{private}s has isHelperFence=false", v318, v270);
      v244 = (char *)v243;
      sub_100512490("Generic", 1, 0, 0, "void CLFenceMonitor::handleLocationMonitoredFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, const BOOL, const BOOL)", "%s\n", v243);
      if (v244 != buf)
        free(v244);
      v59 = (uint64_t)__str;
    }
    else
    {
LABEL_65:
      if (!v58)
      {
        v280 = 0;
        v283 = 0;
        goto LABEL_226;
      }
    }
    if (*(char *)(v59 + 47) < 0)
    {
      sub_100115CE4(__dst, *(void **)(v59 + 24), *(_QWORD *)(v59 + 32));
      v59 = (uint64_t)__str;
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)&__str[1].__r_.__value_.__l.__data_;
      v307 = __str[1].__r_.__value_.__r.__words[2];
    }
    v67 = *(_QWORD **)(a1 + 816);
    if (v67 != (_QWORD *)(a1 + 824))
    {
      v68 = a1 + 240;
      v69 = a1 + 248;
      do
      {
        v70 = *((unsigned __int8 *)v67 + 303);
        if ((v70 & 0x80u) == 0)
          v71 = (void *)*((unsigned __int8 *)v67 + 303);
        else
          v71 = (void *)v67[36];
        v72 = (void *)HIBYTE(v307);
        if (v307 < 0)
          v72 = __dst[1];
        if (v71 != v72)
          goto LABEL_149;
        v73 = (const void **)(v67 + 35);
        if (v307 >= 0)
          v74 = __dst;
        else
          v74 = (void **)__dst[0];
        if ((v70 & 0x80) != 0)
        {
          if (memcmp(*v73, v74, v67[36]))
            goto LABEL_149;
        }
        else if (*((_BYTE *)v67 + 303))
        {
          while (*(unsigned __int8 *)v73 == *(unsigned __int8 *)v74)
          {
            v73 = (const void **)((char *)v73 + 1);
            v74 = (void **)((char *)v74 + 1);
            if (!--v70)
              goto LABEL_111;
          }
          goto LABEL_149;
        }
LABEL_111:
        v75 = *((unsigned __int8 *)v67 + 55);
        if ((v75 & 0x80u) == 0)
          v76 = *((unsigned __int8 *)v67 + 55);
        else
          v76 = v67[5];
        v77 = *(unsigned __int8 *)(v59 + 23);
        v78 = (char)v77;
        if ((v77 & 0x80u) != 0)
          v77 = *(_QWORD *)(v59 + 8);
        if (v76 != v77)
          goto LABEL_149;
        if (v78 >= 0)
          v79 = (unsigned __int8 *)v59;
        else
          v79 = *(unsigned __int8 **)v59;
        if ((v75 & 0x80) != 0)
        {
          if (memcmp((const void *)v67[4], v79, v67[5]))
            goto LABEL_149;
        }
        else if (*((_BYTE *)v67 + 55))
        {
          v80 = (unsigned __int8 *)(v67 + 4);
          while (*v80 == *v79)
          {
            ++v80;
            ++v79;
            if (!--v75)
              goto LABEL_127;
          }
          goto LABEL_149;
        }
LABEL_127:
        v81 = sub_10016FC40(v68, (unsigned __int8 *)v67 + 32);
        if (v69 != v81)
        {
          v82 = *(_DWORD *)(v81 + 280);
          if (v82 != -1)
          {
            _ZF = v308 == v82;
            v83 = v293;
            if (!_ZF)
              v83 = 1;
            if (v308 == -1 || !v83)
              goto LABEL_149;
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_1021826B0);
            v84 = qword_1022A0068;
            if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
            {
              v85 = v67 + 7;
              v281 = v69;
              v284 = v68;
              if (*((char *)v67 + 79) < 0)
                v85 = (_QWORD *)*v85;
              v86 = SHIBYTE(v307);
              v87 = (void **)__dst[0];
              v88 = *(unsigned __int8 *)(a1 + 619);
              v89 = *(_QWORD *)(v59 + 72);
              v273 = *(_QWORD *)(v59 + 80);
              v276 = v85;
              v90 = sub_10016F694(v59);
              *(_DWORD *)buf = 136381955;
              if (v86 >= 0)
                v91 = __dst;
              else
                v91 = v87;
              *(_QWORD *)&buf[4] = v276;
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v91;
              *(_WORD *)&buf[22] = 1026;
              *(_DWORD *)&buf[24] = v88;
              *(_WORD *)&buf[28] = 2049;
              *(_QWORD *)&buf[30] = v89;
              *(_WORD *)&buf[38] = 2049;
              *(_QWORD *)&buf[40] = v273;
              *(_WORD *)&buf[48] = 2050;
              *(double *)&buf[50] = v90;
              _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "#significantRegion: fence, %{private}s, loi fence event, id, %{public}s, hint, %{public}d, latLon, %{private}.6lf,%{private}.6lf, radius, %{public}.1lf", buf, 0x3Au);
              v69 = v281;
              v68 = v284;
            }
            if (sub_1001BFF7C(115, 2))
            {
              v282 = v69;
              v285 = v68;
              bzero(buf, 0x65CuLL);
              if (qword_1022A0060 != -1)
                dispatch_once(&qword_1022A0060, &stru_1021826B0);
              v95 = qword_1022A0068;
              v96 = v67 + 7;
              if (*((char *)v67 + 79) < 0)
                v96 = (_QWORD *)*v96;
              v97 = SHIBYTE(v307);
              v98 = (void **)__dst[0];
              v99 = *(unsigned __int8 *)(a1 + 619);
              v100 = __str[3].__r_.__value_.__l.__data_;
              v277 = __str[3].__r_.__value_.__l.__size_;
              v101 = sub_10016F694((uint64_t)__str);
              *(_DWORD *)v318 = 136381955;
              v102 = __dst;
              if (v97 < 0)
                v102 = v98;
              *(_QWORD *)&v318[4] = v96;
              *(_WORD *)&v318[12] = 2082;
              *(_QWORD *)&v318[14] = v102;
              *(_WORD *)&v318[22] = 1026;
              *(_DWORD *)&v318[24] = v99;
              *(_WORD *)&v318[28] = 2049;
              *(_QWORD *)&v318[30] = v100;
              *(_WORD *)&v318[38] = 2049;
              *(_QWORD *)&v318[40] = v277;
              *(_WORD *)&v318[48] = 2050;
              *(double *)&v318[50] = v101;
              LODWORD(v270) = 58;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v95, 0, "#significantRegion: fence, %{private}s, loi fence event, id, %{public}s, hint, %{public}d, latLon, %{private}.6lf,%{private}.6lf, radius, %{public}.1lf", v318, v270);
              v104 = (char *)v103;
              sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationMonitoredFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, const BOOL, const BOOL)", "%s\n", v103);
              if (v104 != buf)
                free(v104);
              v69 = v282;
              v68 = v285;
              v59 = (uint64_t)__str;
            }
            (*(void (**)(_QWORD, int *, _QWORD *, _BYTE *))(**(_QWORD **)(a1 + 1768) + 416))(*(_QWORD *)(a1 + 1768), &v308, v67 + 4, v310);
            if (*(_BYTE *)(a1 + 619))
              goto LABEL_149;
            sub_1015A2E04(v302, "LoiFence");
            sub_100D4CCD0(a1, (uint64_t)(v67 + 4), &v308, (uint64_t)v310, v302, a8);
            if ((v303 & 0x80000000) == 0)
              goto LABEL_149;
            v92 = v302;
            goto LABEL_148;
          }
        }
        sub_1015A2E04(v304, "LoiFence");
        sub_100D4C720(a1, (uint64_t)(v67 + 4), &v308, v304);
        if (v305 < 0)
        {
          v92 = v304;
LABEL_148:
          operator delete((void *)*v92);
        }
LABEL_149:
        v93 = (_QWORD *)v67[1];
        if (v93)
        {
          do
          {
            v94 = v93;
            v93 = (_QWORD *)*v93;
          }
          while (v93);
        }
        else
        {
          do
          {
            v94 = (_QWORD *)v67[2];
            _ZF = *v94 == (_QWORD)v67;
            v67 = v94;
          }
          while (!_ZF);
        }
        v67 = v94;
      }
      while (v94 != (_QWORD *)(a1 + 824));
    }
    if (v293 && *(_BYTE *)(a1 + 1312) && !*(_BYTE *)(a1 + 1313))
    {
      sub_1004E5748(v318, (__int128 *)v59);
      *(_DWORD *)&v323[24] = sub_100D713D4(a1 + 904, (unsigned __int8 *)v59);
      *(_DWORD *)&v323[20] = sub_100D71410(a1 + 904);
      v105 = *(_OWORD *)(a5 + 48);
      v300[2] = *(_OWORD *)(a5 + 32);
      v300[3] = v105;
      v300[4] = *(_OWORD *)(a5 + 64);
      v301 = *(_QWORD *)(a5 + 80);
      v106 = *(_OWORD *)(a5 + 16);
      v300[0] = *(_OWORD *)a5;
      v300[1] = v106;
      LODWORD(v300[0]) = v308;
      (*(void (**)(CLMotionActivity *__return_ptr))(**(_QWORD **)(a1 + 1768) + 128))(&v346);
      v107 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 16))(*(_QWORD *)(a1 + 1768));
      sub_100ED3934((uint64_t)buf, (uint64_t)v318, (double *)v300, (__int128 *)(a1 + 1648), &v346, (uint64_t)v310, a1 + 144, v107, a8, *(_BYTE *)(a1 + 613), *(_BYTE *)(a1 + 728));
      sub_100ED3948((uint64_t)buf);
      *(double *)(a5 + 56) = a8;
      *(_DWORD *)(a5 + 64) = v315;
      if (*((_QWORD *)&v370 + 1))
      {
        *(_QWORD *)v371 = *((_QWORD *)&v370 + 1);
        operator delete(*((void **)&v370 + 1));
      }
      if ((buf[31] & 0x80000000) != 0)
        operator delete(*(void **)&buf[8]);
      if (*(_QWORD *)&v331[12])
      {
        *(_QWORD *)v332 = *(_QWORD *)&v331[12];
        operator delete(*(void **)&v331[12]);
      }

      if ((v331[3] & 0x80000000) != 0)
        operator delete(v327);
      if (SHIBYTE(v320) < 0)
        operator delete(*(void **)&v318[48]);
      if ((v318[47] & 0x80000000) != 0)
        operator delete(*(void **)&v318[24]);
      if ((v318[23] & 0x80000000) != 0)
        operator delete(*(void **)v318);
    }
    if (SHIBYTE(v307) < 0)
      operator delete(__dst[0]);
    v280 = 0;
    v291 = 0;
    v293 = 0;
    v283 = 1;
LABEL_226:
    if ((_DWORD)log && (*(_BYTE *)(a1 + 1875) || *(_BYTE *)(a1 + 1874)))
    {
      v121 = v293;
      if (v308 != 1)
        v121 = 0;
      if (v121 && (_DWORD)v315 == 4 && *(_DWORD *)(v59 + 172) == 1)
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v122 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          v123 = sub_100D4A718((double *)(a1 + 1840), a8);
          v124 = *(_QWORD *)(a1 + 1848);
          *(_DWORD *)buf = 67174913;
          *(_DWORD *)&buf[4] = v123;
          *(_WORD *)&buf[8] = 2049;
          *(_QWORD *)&buf[10] = v124;
          _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_DEBUG, "Fence: MiLo, homeLoi exit detected, isMicroLocationEventRecent, %{private}d, homeLoiProbability, %{private}.2f", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          v234 = qword_1022A0068;
          v235 = sub_100D4A718((double *)(a1 + 1840), a8);
          v236 = *(_QWORD *)(a1 + 1848);
          *(_DWORD *)v318 = 67174913;
          *(_DWORD *)&v318[4] = v235;
          *(_WORD *)&v318[8] = 2049;
          *(_QWORD *)&v318[10] = v236;
          LODWORD(v270) = 18;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v234, 2, "Fence: MiLo, homeLoi exit detected, isMicroLocationEventRecent, %{private}d, homeLoiProbability, %{private}.2f", v318, v270);
          v238 = (char *)v237;
          sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationMonitoredFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, const BOOL, const BOOL)", "%s\n", v237);
          if (v238 != buf)
            free(v238);
        }
        if (!sub_100D4A718((double *)(a1 + 1840), a8))
        {
          *(_QWORD *)buf = __str;
          v129 = sub_100D647B0((uint64_t **)(a1 + 1880), (unsigned __int8 *)__str, (uint64_t)&unk_101B9EB60, (__int128 **)buf);
          v130 = v314;
          *(_OWORD *)(v129 + 43) = v313;
          *(_OWORD *)(v129 + 45) = v130;
          v131 = v312;
          *(_OWORD *)(v129 + 39) = v311;
          *(_OWORD *)(v129 + 41) = v131;
          *(_OWORD *)((char *)v129 + 420) = *(_OWORD *)((char *)v317 + 12);
          v132 = v317[0];
          v133 = v315;
          *(_OWORD *)(v129 + 49) = v316;
          *(_OWORD *)(v129 + 51) = v132;
          *(_OWORD *)(v129 + 47) = v133;
          v134 = *(_OWORD *)&v310[16];
          *(_OWORD *)(v129 + 35) = *(_OWORD *)v310;
          *(_OWORD *)(v129 + 37) = v134;
          if (!*(_BYTE *)(a1 + 1872))
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 440))(*(_QWORD *)(a1 + 1768));
            v135 = *(_QWORD *)(a1 + 1768);
            v136 = sub_10016F688();
            (*(void (**)(uint64_t, char *))(*(_QWORD *)v135 + 240))(v135, v136 + 400);
            *(_BYTE *)(a1 + 1872) = 1;
          }
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          v137 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
          {
            v138 = __str + 1;
            if ((__str[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v138 = (std::string *)__str[1].__r_.__value_.__l.__data_;
            v139 = *(unsigned __int8 *)(a1 + 1872);
            v140 = *(_QWORD *)(a1 + 1896);
            *(_DWORD *)buf = 136381187;
            *(_QWORD *)&buf[4] = v138;
            *(_WORD *)&buf[12] = 1025;
            *(_DWORD *)&buf[14] = v139;
            *(_WORD *)&buf[18] = 1025;
            *(_DWORD *)&buf[20] = v140;
            _os_log_impl((void *)&_mh_execute_header, v137, OS_LOG_TYPE_DEFAULT, "Fence: MiLo, Added fencePendingMiloLocalizer, %{private}s, fIsPendingMicroLocationEventUpdate, %{private}d, fFenceToLocationPendingMiLoLocalizer size, %{private}d", buf, 0x18u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_1021826B0);
            v141 = (std::string *)__str[1].__r_.__value_.__l.__data_;
            if ((__str[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v141 = __str + 1;
            v142 = *(unsigned __int8 *)(a1 + 1872);
            v143 = *(_QWORD *)(a1 + 1896);
            *(_DWORD *)v318 = 136381187;
            *(_QWORD *)&v318[4] = v141;
            *(_WORD *)&v318[12] = 1025;
            *(_DWORD *)&v318[14] = v142;
            *(_WORD *)&v318[18] = 1025;
            *(_DWORD *)&v318[20] = v143;
            LODWORD(v270) = 24;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Fence: MiLo, Added fencePendingMiloLocalizer, %{private}s, fIsPendingMicroLocationEventUpdate, %{private}d, fFenceToLocationPendingMiLoLocalizer size, %{private}d", v318, v270);
            v145 = (char *)v144;
            sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationMonitoredFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, const BOOL, const BOOL)", "%s\n", v144);
            if (v145 != buf)
              free(v145);
          }
          return;
        }
        v125 = *(double *)(a1 + 1848);
        if (v125 >= *((double *)sub_10016F688() + 49) && *(_BYTE *)(a1 + 1856))
        {
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          v126 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
          {
            v127 = __str + 1;
            if ((__str[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v127 = (std::string *)__str[1].__r_.__value_.__l.__data_;
            v128 = *(_QWORD *)(a1 + 1848);
            *(_DWORD *)buf = 136380931;
            *(_QWORD *)&buf[4] = v127;
            *(_WORD *)&buf[12] = 2049;
            *(_QWORD *)&buf[14] = v128;
            _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_DEFAULT, "#Warning Fence: MiLo, false exit detected, fence, %{private}s, homeLoiProbability, %{private}.2f", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_1021826B0);
            v262 = __str + 1;
            if ((__str[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v262 = (std::string *)__str[1].__r_.__value_.__l.__data_;
            v263 = *(_QWORD *)(a1 + 1848);
            *(_DWORD *)v318 = 136380931;
            *(_QWORD *)&v318[4] = v262;
            *(_WORD *)&v318[12] = 2049;
            *(_QWORD *)&v318[14] = v263;
            LODWORD(v270) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#Warning Fence: MiLo, false exit detected, fence, %{private}s, homeLoiProbability, %{private}.2f", v318, v270);
            v265 = (char *)v264;
            sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationMonitoredFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, const BOOL, const BOOL)", "%s\n", v264);
            if (v265 != buf)
              free(v265);
          }
          v293 = *(_BYTE *)(a1 + 1875) == 0;
          if (*(_BYTE *)(a1 + 1875))
          {
            v291 = 0;
            v308 = 0;
          }
          if (*(_BYTE *)(a1 + 1874))
          {
            sub_100ED2E08(a1 + 1312);
            sub_100D5FDB8(a1, (uint64_t)__str, a8, *(double *)(a1 + 1848));
          }
        }
        else
        {
          if (*(_BYTE *)(a1 + 1874))
            sub_100ED2E18(a1 + 1312);
          v293 = 1;
        }
        v59 = (uint64_t)__str;
      }
    }
    if (*(_BYTE *)(a1 + 1874))
    {
      v146 = v293;
      if (v308 != 1)
        v146 = 0;
      if (v146)
      {
        sub_100ED2E38(a1 + 1312);
        v59 = (uint64_t)__str;
        if (HIDWORD(__str[7].__r_.__value_.__r.__words[0]) == 1)
        {
          sub_100ED2E28(a1 + 1312);
          v59 = (uint64_t)__str;
          if ((_DWORD)v315 == 4 && HIDWORD(__str[7].__r_.__value_.__r.__words[0]) == 1)
          {
            sub_100ED2E48(a1 + 1312);
            v59 = (uint64_t)__str;
          }
        }
      }
    }
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v147 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      log = v147;
      if (*(char *)(v59 + 47) >= 0)
        v148 = v59 + 24;
      else
        v148 = *(_QWORD *)(v59 + 24);
      if (*(char *)(v59 + 23) >= 0)
        v149 = v59;
      else
        v149 = *(_QWORD *)v59;
      v274 = v149;
      v278 = v148;
      v150 = sub_10014D1E0(v315);
      v151 = *(_QWORD *)&v310[4];
      v152 = *(_QWORD *)&v310[12];
      v153 = *(_QWORD *)&v310[20];
      sub_10016F544(*(_DWORD *)(a5 + 8), (std::string *)v318);
      if (v318[23] >= 0)
        v154 = v318;
      else
        v154 = *(_BYTE **)v318;
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 16))(*(_QWORD *)(a1 + 1768)))
        v155 = "+";
      else
        v155 = "-";
      v156 = *(unsigned __int8 *)(a1 + 623);
      if (__str[9].__r_.__value_.__r.__words[2] == __str[9].__r_.__value_.__l.__size_)
        v157 = __str[3].__r_.__value_.__r.__words[0];
      else
        v157 = 0xBFF0000000000000;
      if (__str[9].__r_.__value_.__r.__words[2] == __str[9].__r_.__value_.__l.__size_)
        v158 = __str[3].__r_.__value_.__l.__size_;
      else
        v158 = 0xBFF0000000000000;
      v159 = sub_10016F694((uint64_t)__str);
      v160 = *(double *)(a5 + 40);
      v161 = a8 - v160;
      v162 = v160 <= 0.0;
      v163 = -1.0;
      if (!v162)
        v163 = v161;
      v164 = *(_DWORD *)a5 + 1;
      if (v164 > 4)
        v165 = "---";
      else
        v165 = off_102182880[v164];
      if ((v308 + 1) > 4)
        v166 = "---";
      else
        v166 = off_102182880[v308 + 1];
      if (v292 > 2)
        v167 = "---";
      else
        v167 = off_1021828A8[v292];
      v168 = __str[5].__r_.__value_.__l.__data_;
      v169 = *(_DWORD *)(a1 + 684);
      v170 = *(_DWORD *)(a1 + 688);
      v171 = *(_DWORD *)(a1 + 704);
      v172 = *(_DWORD *)(a1 + 708);
      if (v289 > 2)
        v173 = "---";
      else
        v173 = off_1021828A8[v289];
      v373 = *(_QWORD *)(a5 + 72);
      v174 = *(_DWORD *)(a5 + 84);
      v375 = *(_DWORD *)(a5 + 80);
      *(_QWORD *)&buf[4] = v278;
      *(_QWORD *)&buf[14] = v274;
      *(_QWORD *)&buf[24] = v150;
      *(_QWORD *)&buf[34] = v151;
      *(_QWORD *)&buf[44] = v152;
      *(_WORD *)&buf[52] = 2050;
      *(_QWORD *)&buf[54] = v153;
      *(_QWORD *)&v348[10] = v154;
      *(_QWORD *)&v348[20] = v155;
      *(_DWORD *)&v348[42] = v156;
      *(_QWORD *)v349 = v157;
      *(_QWORD *)&v349[10] = v158;
      v351 = v168;
      v353 = v169;
      v355 = v170;
      v357 = v171;
      v359 = v172;
      v365 = v165;
      v367 = v166;
      *(_QWORD *)v369 = v167;
      *(_WORD *)&buf[12] = 2081;
      *(_WORD *)&buf[22] = 2081;
      *(_WORD *)&v348[8] = 2081;
      *(_WORD *)&v348[18] = 2081;
      v364 = 2081;
      v366 = 2081;
      v368 = 2081;
      *(_WORD *)&v369[8] = 2081;
      *(_QWORD *)&v369[10] = v173;
      *(_WORD *)&v348[28] = 1025;
      *(_WORD *)&v348[34] = 1025;
      *(_WORD *)&v348[40] = 1025;
      v352 = 1025;
      v354 = 1025;
      v356 = 1025;
      v358 = 1025;
      v362 = 1025;
      *(_WORD *)&v369[18] = 1025;
      *(_WORD *)&buf[32] = 2049;
      *(_WORD *)&buf[42] = 2049;
      *(_WORD *)&buf[62] = 2049;
      *(_WORD *)&v348[46] = 2049;
      *(_WORD *)&v349[8] = 2049;
      *(_WORD *)&v349[18] = 2049;
      v350 = 2049;
      v360 = 2049;
      WORD2(v370) = 2049;
      v372 = 2048;
      HIWORD(v370) = 1024;
      *(_WORD *)&v371[4] = 1024;
      v374 = 1024;
      v376 = 1024;
      v377 = v174;
      v175 = *(double *)(a5 + 56);
      v176 = a8 - v175;
      v162 = v175 <= 0.0;
      v177 = -1.0;
      if (!v162)
        v177 = v176;
      *(_DWORD *)buf = 136388867;
      *(double *)v348 = v17;
      *(_DWORD *)&v348[30] = v293;
      *(_DWORD *)&v348[36] = v291;
      *(double *)&v349[20] = v159;
      v361 = v163;
      v363 = v286;
      LODWORD(v370) = v288;
      *(double *)((char *)&v370 + 6) = v177;
      *(_DWORD *)v371 = v280;
      *(_DWORD *)&v371[6] = v283;
      _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "Fence: fenceUpdate, %{private}s, bundle, %{private}s, type, %{private}-16s, loc, %{private}12.7lf, %{private}12.7lf, acc, %{public}4.0lf, distance, %{private}9.0lf, tech, %{private}4s%{private}s, trans, %{private}d, state, %{private}d, cont, %{private}d, fence, %{private}12.8lf, %{private}12.8lf, %{private}.1lf, %{private}.1lf, sCount, %{private}d, %{private}d, trig, %{private}d, %{private}d, sinceLastLoc, %{private}.1lf, events, 0x%{private}08x, status, %{private}-10s => %{private}-10s, settled state, %{private}s ==> %{private}s, cantShiftButNeedTo, %{private}d, sinceLastTransition, %{private}.1lf, significant, %d, loi, %d, lastProximityStateTimestamp, %f, lastProximityState, %d, lastApproachingState, %d", buf, 0x118u);
      if ((v318[23] & 0x80000000) != 0)
        operator delete(*(void **)v318);
    }
    v178 = sub_1001BFF7C(115, 2);
    v108 = (uint64_t *)v318;
    v109 = (uint64_t *)v290;
    v110 = v292;
    v179 = v289;
    v180 = (uint64_t)__str;
    if (v178)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      log = qword_1022A0068;
      if ((__str[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v197 = __str + 1;
      else
        v197 = (std::string *)__str[1].__r_.__value_.__l.__data_;
      if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v198 = __str;
      else
        v198 = (std::string *)__str->__r_.__value_.__r.__words[0];
      v275 = v198;
      v279 = v197;
      v272 = sub_10014D1E0(v315);
      v199 = *(_QWORD *)&v310[4];
      v200 = *(_QWORD *)&v310[12];
      v201 = *(_QWORD *)&v310[20];
      v202 = &v346;
      sub_10016F544(*(_DWORD *)(a5 + 8), (std::string *)&v346);
      if (v346.conservativeMountedState < 0)
        v202 = *(CLMotionActivity **)&v346.type;
      v203 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 16))(*(_QWORD *)(a1 + 1768));
      v204 = "-";
      if (v203)
        v204 = "+";
      v271 = v204;
      v205 = *(unsigned __int8 *)(a1 + 623);
      if (__str[9].__r_.__value_.__r.__words[2] == __str[9].__r_.__value_.__l.__size_)
        v206 = __str[3].__r_.__value_.__r.__words[0];
      else
        v206 = 0xBFF0000000000000;
      if (__str[9].__r_.__value_.__r.__words[2] == __str[9].__r_.__value_.__l.__size_)
        v207 = __str[3].__r_.__value_.__l.__size_;
      else
        v207 = 0xBFF0000000000000;
      v208 = sub_10016F694((uint64_t)__str);
      v209 = *(double *)(a5 + 40);
      v210 = a8 - v209;
      v162 = v209 <= 0.0;
      v211 = -1.0;
      if (!v162)
        v211 = v210;
      v212 = *(_DWORD *)a5 + 1;
      if (v212 > 4)
        v213 = "---";
      else
        v213 = off_102182880[v212];
      if ((v308 + 1) > 4)
        v216 = "---";
      else
        v216 = off_102182880[v308 + 1];
      if (v292 > 2)
        v217 = "---";
      else
        v217 = off_1021828A8[v292];
      v218 = __str[5].__r_.__value_.__l.__data_;
      v219 = *(_DWORD *)(a1 + 684);
      v220 = *(_DWORD *)(a1 + 688);
      v221 = *(_DWORD *)(a1 + 704);
      v222 = *(_DWORD *)(a1 + 708);
      if (v289 > 2)
        v223 = "---";
      else
        v223 = off_1021828A8[v289];
      *((_QWORD *)&v335 + 1) = *(_QWORD *)(a5 + 72);
      v224 = *(_DWORD *)(a5 + 84);
      *(_DWORD *)((char *)&v336 + 2) = *(_DWORD *)(a5 + 80);
      *(_QWORD *)&v318[4] = v279;
      *(_QWORD *)&v318[14] = v275;
      *(_QWORD *)&v318[24] = v272;
      *(_QWORD *)&v318[34] = v199;
      *(_QWORD *)&v318[44] = v200;
      *(_WORD *)&v318[52] = 2050;
      *(_QWORD *)&v318[54] = v201;
      *(_QWORD *)&v321[2] = v202;
      *(_QWORD *)&v321[12] = v271;
      *(_DWORD *)((char *)&v322 + 2) = v205;
      *((_QWORD *)&v322 + 1) = v206;
      *(_QWORD *)&v323[2] = v207;
      *(_QWORD *)&v323[22] = v218;
      LODWORD(v324) = v219;
      *(_DWORD *)((char *)&v324 + 6) = v220;
      HIDWORD(v324) = v221;
      *(_DWORD *)&v325[2] = v222;
      v327 = v213;
      v329 = v216;
      *(_QWORD *)v331 = v217;
      *(_WORD *)&v318[12] = 2081;
      *(_WORD *)&v318[22] = 2081;
      *(_WORD *)v321 = 2081;
      *(_WORD *)&v321[10] = 2081;
      v326 = 2081;
      v328 = 2081;
      v330 = 2081;
      *(_WORD *)&v331[8] = 2081;
      *(_QWORD *)&v331[10] = v223;
      *(_WORD *)&v321[20] = 1025;
      *(_WORD *)&v321[26] = 1025;
      LOWORD(v322) = 1025;
      *(_WORD *)&v323[30] = 1025;
      WORD2(v324) = 1025;
      WORD5(v324) = 1025;
      *(_WORD *)v325 = 1025;
      *(_WORD *)&v325[16] = 1025;
      *(_WORD *)&v331[18] = 1025;
      *(_DWORD *)v332 = v288;
      *(_WORD *)&v318[32] = 2049;
      *(_WORD *)&v318[42] = 2049;
      v319 = 2049;
      WORD3(v322) = 2049;
      *(_WORD *)v323 = 2049;
      *(_WORD *)&v323[10] = 2049;
      *(_WORD *)&v323[20] = 2049;
      *(_WORD *)&v325[6] = 2049;
      *(_WORD *)&v332[4] = 2049;
      v334 = v280;
      *(_DWORD *)((char *)&v335 + 2) = v283;
      WORD3(v335) = 2048;
      v333 = 1024;
      LOWORD(v335) = 1024;
      LOWORD(v336) = 1024;
      WORD3(v336) = 1024;
      DWORD2(v336) = v224;
      v225 = *(double *)(a5 + 56);
      v226 = a8 - v225;
      v162 = v225 <= 0.0;
      v227 = -1.0;
      if (!v162)
        v227 = v226;
      *(_DWORD *)v318 = 136388867;
      v320 = v17;
      *(_DWORD *)&v321[22] = v293;
      *(_DWORD *)&v321[28] = v291;
      *(double *)&v323[12] = v208;
      *(double *)&v325[8] = v211;
      *(_DWORD *)&v325[18] = v286;
      *(double *)&v332[6] = v227;
      LODWORD(v270) = 280;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, log, 0, "Fence: fenceUpdate, %{private}s, bundle, %{private}s, type, %{private}-16s, loc, %{private}12.7lf, %{private}12.7lf, acc, %{public}4.0lf, distance, %{private}9.0lf, tech, %{private}4s%{private}s, trans, %{private}d, state, %{private}d, cont, %{private}d, fence, %{private}12.8lf, %{private}12.8lf, %{private}.1lf, %{private}.1lf, sCount, %{private}d, %{private}d, trig, %{private}d, %{private}d, sinceLastLoc, %{private}.1lf, events, 0x%{private}08x, status, %{private}-10s => %{private}-10s, settled state, %{private}s ==> %{private}s, cantShiftButNeedTo, %{private}d, sinceLastTransition, %{private}.1lf, significant, %d, loi, %d, lastProximityStateTimestamp, %f, lastProximityState, %d, lastApproachingState, %d", v318, v270);
      v229 = v228;
      if (SHIBYTE(v346.conservativeMountedState) < 0)
        operator delete(*(void **)&v346.type);
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationMonitoredFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, const BOOL, const BOOL)", "%s\n", v229);
      if (v229 != buf)
        free(v229);
      v109 = (uint64_t *)v290;
      v110 = v292;
      v179 = v289;
      v180 = (uint64_t)__str;
    }
    v181 = v308;
    if (v308 != -1)
    {
      *(_DWORD *)a5 = v308;
      if ((_DWORD)v109 == 1 && !v181)
      {
        v179 = 1;
LABEL_327:
        *(_DWORD *)(a5 + 68) = v179;
        goto LABEL_328;
      }
      if (!v181 && (_DWORD)v110 != 2 && v179 == 2)
        goto LABEL_327;
    }
LABEL_328:
    if (v293 || v291)
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v182 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "handleLocationMonitoredFence";
        _os_log_impl((void *)&_mh_execute_header, v182, OS_LOG_TYPE_DEFAULT, "%s, issuing state/transition", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        *(_DWORD *)v318 = 136315138;
        *(_QWORD *)&v318[4] = "handleLocationMonitoredFence";
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "%s, issuing state/transition", v318);
        v215 = (char *)v214;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationMonitoredFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, const BOOL, const BOOL)", "%s\n", v214);
        if (v215 != buf)
          free(v215);
      }
      sub_100D24E84(v318);
      v180 = (uint64_t)__str;
      std::string::operator=((std::string *)v318, __str);
      v109 = (uint64_t *)v290;
      std::string::operator=((std::string *)&v318[24], __str + 1);
      std::string::operator=((std::string *)&v318[48], __str + 2);
      *(_OWORD *)&v323[16] = *(_OWORD *)&__str[5].__r_.__value_.__r.__words[2];
      v324 = *(_OWORD *)&__str[6].__r_.__value_.__r.__words[1];
      *(_OWORD *)v325 = *(_OWORD *)&__str[7].__r_.__value_.__l.__data_;
      *(_QWORD *)&v325[13] = *(std::string::size_type *)((char *)&__str[7].__r_.__value_.__r.__words[1] + 5);
      *(_OWORD *)v321 = *(_OWORD *)&__str[3].__r_.__value_.__l.__data_;
      *(_OWORD *)&v321[16] = *(_OWORD *)&__str[3].__r_.__value_.__r.__words[2];
      v322 = *(_OWORD *)&__str[4].__r_.__value_.__r.__words[1];
      *(_OWORD *)v323 = *(_OWORD *)&__str[5].__r_.__value_.__l.__data_;
      std::string::operator=((std::string *)&v327, __str + 8);
      v183 = *(void **)&v331[4];
      *(_QWORD *)&v331[4] = __str[9].__r_.__value_.__l.__data_;

      if (v318 != (_BYTE *)__str)
        sub_1002F3538(&v331[12], (char *)__str[9].__r_.__value_.__l.__size_, __str[9].__r_.__value_.__r.__words[2], (uint64_t)(__str[9].__r_.__value_.__r.__words[2] - __str[9].__r_.__value_.__l.__size_) >> 4);
      *(_QWORD *)&v323[8] = *(_QWORD *)(a5 + 40);
      v342 = v316;
      *(_OWORD *)v343 = v317[0];
      *(_OWORD *)&v343[12] = *(_OWORD *)((char *)v317 + 12);
      v338 = v312;
      v339 = v313;
      *(_DWORD *)&v323[16] = v286;
      v340 = v314;
      v341 = v315;
      v336 = *(_OWORD *)&v310[16];
      v337 = v311;
      v335 = *(_OWORD *)v310;
      v184 = *(double *)(a5 + 56);
      v185 = a8 - v184;
      v162 = v184 <= 0.0;
      v334 = v308;
      v344 = v290;
      v186 = -1.0;
      if (!v162)
        v186 = v185;
      *(double *)&v324 = v186;
      *(_DWORD *)&v323[24] = sub_100D713D4(a1 + 904, (unsigned __int8 *)__str);
      *(_DWORD *)&v323[20] = sub_100D71410(a1 + 904);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v187 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "handleLocationMonitoredFence";
        _os_log_impl((void *)&_mh_execute_header, v187, OS_LOG_TYPE_DEFAULT, "%s, collecting state change metrics", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v346.type = 136315138;
        *(_QWORD *)&v346.confidence = "handleLocationMonitoredFence";
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "%s, collecting state change metrics", (const char *)&v346);
        v231 = (char *)v230;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationMonitoredFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, const BOOL, const BOOL)", "%s\n", v230);
        if (v231 != buf)
          free(v231);
      }
      memcpy(v345, __src, sizeof(v345));
      v188 = *(_OWORD *)(a1 + 1728);
      *(_OWORD *)&v345[9] = *(_OWORD *)(a1 + 1712);
      *(_OWORD *)&v345[11] = v188;
      *(_OWORD *)&v345[13] = *(_OWORD *)(a1 + 1744);
      v345[15] = *(_QWORD *)(a1 + 1760);
      v189 = *(_OWORD *)(a1 + 1664);
      *(_OWORD *)&v345[1] = *(_OWORD *)(a1 + 1648);
      *(_OWORD *)&v345[3] = v189;
      v190 = *(_OWORD *)(a1 + 1696);
      *(_OWORD *)&v345[5] = *(_OWORD *)(a1 + 1680);
      *(_OWORD *)&v345[7] = v190;
      *(_DWORD *)buf = 6;
      sub_100D4CA98(a1, buf, (uint64_t)v318);
      v110 = v292;
      if (v293)
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v191 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = "handleLocationMonitoredFence";
          _os_log_impl((void *)&_mh_execute_header, v191, OS_LOG_TYPE_DEFAULT, "%s, issuing transition", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          v346.type = 136315138;
          *(_QWORD *)&v346.confidence = "handleLocationMonitoredFence";
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "%s, issuing transition", (const char *)&v346);
          v233 = (char *)v232;
          sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationMonitoredFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, const BOOL, const BOOL)", "%s\n", v232);
          if (v233 != buf)
            free(v233);
          v109 = (uint64_t *)v290;
          v180 = (uint64_t)__str;
        }
        *(_DWORD *)buf = 0;
        sub_100D4CA98(a1, buf, (uint64_t)v318);
        v110 = v292;
        if (*(_BYTE *)(a1 + 1312) && !*(_BYTE *)(a1 + 1313))
        {
          (*(void (**)(CLMotionActivity *__return_ptr))(**(_QWORD **)(a1 + 1768) + 128))(&v346);
          v192 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 16))(*(_QWORD *)(a1 + 1768));
          sub_100ED3934((uint64_t)buf, (uint64_t)v318, (double *)a5, (__int128 *)(a1 + 1648), &v346, (uint64_t)v310, a1 + 144, v192, a8, *(_BYTE *)(a1 + 613), *(_BYTE *)(a1 + 728));
          sub_100ED3948((uint64_t)buf);
          if (*((_QWORD *)&v370 + 1))
          {
            *(_QWORD *)v371 = *((_QWORD *)&v370 + 1);
            operator delete(*((void **)&v370 + 1));
          }
          if ((buf[31] & 0x80000000) != 0)
            operator delete(*(void **)&buf[8]);
        }
        *(double *)(a5 + 56) = a8;
        *(_DWORD *)(a5 + 64) = v315;
      }
      else if (v291)
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v193 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = "handleLocationMonitoredFence";
          _os_log_impl((void *)&_mh_execute_header, v193, OS_LOG_TYPE_DEFAULT, "%s, issuing state", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          v346.type = 136315138;
          *(_QWORD *)&v346.confidence = "handleLocationMonitoredFence";
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "%s, issuing state", (const char *)&v346);
          v246 = (char *)v245;
          sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationMonitoredFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, const BOOL, const BOOL)", "%s\n", v245);
          if (v246 != buf)
            free(v246);
          v109 = (uint64_t *)v290;
          v180 = (uint64_t)__str;
        }
        *(_DWORD *)buf = 1;
        sub_100D4CA98(a1, buf, (uint64_t)v318);
        v110 = v292;
      }
      if (*(_QWORD *)&v331[12])
      {
        *(_QWORD *)v332 = *(_QWORD *)&v331[12];
        operator delete(*(void **)&v331[12]);
      }

      if ((v331[3] & 0x80000000) != 0)
        operator delete(v327);
      if (SHIBYTE(v320) < 0)
        operator delete(*(void **)&v318[48]);
      if ((v318[47] & 0x80000000) != 0)
        operator delete(*(void **)&v318[24]);
      if ((v318[23] & 0x80000000) != 0)
        operator delete(*(void **)v318);
      v181 = v308;
    }
    v194 = a5;
    if (*(double *)(a5 + 32) < 0.0
      || vabdd_f64(*(double *)(a5 + 24), v17) >= 100.0
      || v181 != (_DWORD)v109
      || *(_DWORD *)(a5 + 68) != (_DWORD)v110)
    {
      v110 = v181 != (_DWORD)v109;
      v195 = sub_100D5C8E8(a1, v180, (_DWORD *)a5, (uint64_t)v310);
      sub_100D5BCA4(a1, (const void **)&__str->__r_.__value_.__l.__data_, (_DWORD *)a5, v195, v110, a8);
      v194 = a5;
      v180 = (uint64_t)__str;
      *(double *)(a5 + 24) = v17;
      *(double *)(a5 + 32) = a8;
    }
    v196 = v315;
    if (v315 > 0xD)
      goto LABEL_384;
    if (((1 << v315) & 0x2E1E) != 0)
      break;
    if ((_DWORD)v315 != 5)
      goto LABEL_384;
    sub_101928CEC();
    __break(1u);
LABEL_389:
    ;
  }
  *(double *)(v194 + 40) = a8;
  *(_DWORD *)(v194 + 48) = v196;
  *(double *)(v194 + 16) = v17;
  if ((*(_BYTE *)(v180 + 160) & 0x80) != 0 || *(_BYTE *)(v180 + 176))
  {
    *(_DWORD *)(a5 + 80) = sub_1007919F4((uint64_t)v310, v180, (_DWORD *)v194);
    *(_DWORD *)(a5 + 84) = 0;
    *(double *)(a5 + 72) = a8;
  }
LABEL_384:
  if (sub_10016F6EC((double *)(a1 + 904), a8))
    sub_100ED2AAC(a1 + 1312);
}

void sub_100D53B5C(_Unwind_Exception *a1)
{
  sub_1004E2BD0((uint64_t)&STACK[0x5D0]);
  _Unwind_Resume(a1);
}

void sub_100D53CC0(uint64_t a1, int *a2, unsigned __int8 *a3, double a4)
{
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  int v11;
  int v12;
  const char *v13;
  char *v14;
  int v15;
  NSObject *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  NSObject *v26;
  int v27;
  int v28;
  _BYTE *v29;
  char v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  float64x2_t v34;
  double v35;
  double v36;
  unint64_t v37;
  NSObject *v38;
  NSObject *v39;
  NSObject *v40;
  const char *v41;
  char *v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  const char *v47;
  char *v48;
  int v49;
  int v50;
  const char *v51;
  char *v52;
  const char *v53;
  char *v54;
  const char *v55;
  uint64_t v56;
  float64x2_t v57;
  uint64x2_t v58;
  double v59;
  _QWORD v60[4];
  BOOL v61;
  _QWORD v62[4];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  unint64_t v67;
  unint64_t v68;
  uint64x2_t v69;
  unint64_t v70;
  double v71;
  _OWORD v72[2];
  __int128 v73;
  __int128 v74;
  _BYTE buf[18];
  __int16 v76;
  _BYTE v77[10];
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  uint64_t v84;
  __int16 v85;
  unint64_t v86;
  __int16 v87;
  unint64_t v88;
  __int16 v89;
  uint64_t v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  unint64_t v94;

  v71 = a4;
  switch(*a2)
  {
    case 2:
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v8 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Fence: Device is about to go to sleep", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        LOWORD(v72[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: Device is about to go to sleep", v72, 2);
        v42 = (char *)v41;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleStatusNotification(const CFAbsoluteTime, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v41);
        if (v42 != buf)
          free(v42);
      }
      *(_BYTE *)(a1 + 622) = 1;
      *(double *)(a1 + 1664) = a4;
      *(_BYTE *)(a1 + 1648) = 1;
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a1 + 144);
      break;
    case 3:
      if (*(_BYTE *)(a1 + 621) && *(_BYTE *)(a1 + 622))
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v9 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Fence: Device woke; sending trigger",
            buf,
            2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          LOWORD(v72[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: Device woke; sending trigger",
            v72,
            2);
          v54 = (char *)v53;
          sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleStatusNotification(const CFAbsoluteTime, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v53);
          if (v54 != buf)
            free(v54);
        }
        (*(void (**)(uint64_t, const char *, uint64_t, double))(*(_QWORD *)a1 + 96))(a1, "wake", 1, a4);
      }
      sub_100ED2ADC(a1 + 1312);
      *(_BYTE *)(a1 + 622) = 0;
      *(double *)(a1 + 1656) = a4;
      break;
    case 6:
      *(_DWORD *)(a1 + 444) = *((_DWORD *)a3 + 1);
      sub_100D73D00((double *)(a1 + 904), (int *)a3, a4);
      v15 = *((_DWORD *)a3 + 1);
      if (*(_DWORD *)a3 != 2 || v15 == 2)
      {
        if (*(_DWORD *)a3 != 2 && v15 == 2)
          *(double *)(a1 + 1672) = a4;
      }
      else
      {
        *(double *)(a1 + 1680) = a4;
      }
      break;
    case 7:
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v17 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
      {
        v18 = *(_QWORD *)a3;
        v19 = a3[8];
        v20 = a3[9];
        v21 = a3[16];
        *(_DWORD *)buf = 134284289;
        *(_QWORD *)&buf[4] = v18;
        *(_WORD *)&buf[12] = 1025;
        *(_DWORD *)&buf[14] = v19;
        v76 = 1025;
        *(_DWORD *)v77 = v20;
        *(_WORD *)&v77[4] = 1025;
        *(_DWORD *)&v77[6] = v21;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Fence: Got kNotificationBattery, level, %{private}lf, charged, %{private}d, connected, %{private}d, wasConnected, %{private}d", buf, 0x1Eu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v43 = *(_QWORD *)a3;
        v44 = a3[8];
        v45 = a3[9];
        v46 = a3[16];
        LODWORD(v72[0]) = 134284289;
        *(_QWORD *)((char *)v72 + 4) = v43;
        WORD6(v72[0]) = 1025;
        *(_DWORD *)((char *)v72 + 14) = v44;
        WORD1(v72[1]) = 1025;
        DWORD1(v72[1]) = v45;
        WORD4(v72[1]) = 1025;
        *(_DWORD *)((char *)&v72[1] + 10) = v46;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: Got kNotificationBattery, level, %{private}lf, charged, %{private}d, connected, %{private}d, wasConnected, %{private}d", v72, 30);
        v48 = (char *)v47;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleStatusNotification(const CFAbsoluteTime, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v47);
        if (v48 != buf)
          free(v48);
      }
      *(_BYTE *)(a1 + 1873) = a3[9];
      if (*(_BYTE *)(a1 + 753))
      {
        if (a3[16] != a3[9])
        {
          *(double *)(a1 + 872) = a4;
          (*(void (**)(uint64_t, const char *, uint64_t, double))(*(_QWORD *)a1 + 96))(a1, "kNotificationBattery", 1, a4);
          sub_100D4E764(a1, (uint64_t)"kNotificationBattery", 1, &v71);
          sub_1009AEAFC((_QWORD *)(a1 + 48), buf);
          if (*(_QWORD *)buf)
            ++*(_DWORD *)(*(_QWORD *)buf + 168);
          v22 = 1704;
          if (!*(_BYTE *)(a1 + 1873))
            v22 = 1712;
          *(double *)(a1 + v22) = a4;
          v23 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v24 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
        }
      }
      else
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v40 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "Fence: tether triggers are disabled", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          LOWORD(v72[0]) = 0;
          LODWORD(v56) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: tether triggers are disabled", v72, v56);
          v14 = (char *)v55;
          sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleStatusNotification(const CFAbsoluteTime, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v55);
          goto LABEL_98;
        }
      }
      break;
    case 8:
      sub_100D4C51C((_BYTE *)a1, *a3, a4);
      break;
    case 15:
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v26 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
      {
        v27 = *(unsigned __int8 *)(a1 + 729);
        v28 = *a3;
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v27;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v28;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Fence: got kNotificationBatterySaverMode, wasEnabled, %d, isEnabled, %d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v49 = *(unsigned __int8 *)(a1 + 729);
        v50 = *a3;
        LODWORD(v72[0]) = 67109376;
        DWORD1(v72[0]) = v49;
        WORD4(v72[0]) = 1024;
        *(_DWORD *)((char *)v72 + 10) = v50;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Fence: got kNotificationBatterySaverMode, wasEnabled, %d, isEnabled, %d", v72, 14);
        v52 = (char *)v51;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleStatusNotification(const CFAbsoluteTime, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v51);
        if (v52 != buf)
          free(v52);
      }
      *(_BYTE *)(a1 + 729) = *a3;
      break;
    case 16:
      v29 = (_BYTE *)(a1 + 1312);
      v30 = *(_BYTE *)(a1 + 612);
      v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 16))(*(_QWORD *)(a1 + 1768));
      sub_100ED1DD4((_BYTE *)(a1 + 1312), v30, v31, *(_BYTE *)(a1 + 728), (_QWORD *)(a1 + 240));
      if (*(_BYTE *)(a1 + 1874))
      {
        *(_QWORD *)&v74 = 0;
        v73 = 0u;
        memset(v72, 0, sizeof(v72));
        DWORD2(v74) = -1;
        sub_100ED2E58(a1 + 1312, (uint64_t)v72);
        sub_100ED2E74(a1 + 1312);
        v32 = *((_QWORD *)&v72[0] + 1) + *(_QWORD *)&v72[0];
        if (*((_QWORD *)&v72[0] + 1) + *(_QWORD *)&v72[0])
        {
          *(double *)&v33 = (double)*(unint64_t *)&v72[0] * 100.0;
          v34 = vdivq_f64((float64x2_t)vdupq_lane_s64(v33, 0), vcvtq_f64_u64((uint64x2_t)v72[1]));
          v35 = *(double *)&v33 / (double)v32;
          v36 = *(double *)&v33 / (double)(unint64_t)v73;
          if (qword_1022A0060 != -1)
          {
            v59 = v36;
            v57 = v34;
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
            v34 = v57;
            v36 = v59;
          }
          v58 = vcvtq_u64_f64(v34);
          v37 = (unint64_t)v36;
          v38 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68291587;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = "";
            v76 = 2049;
            *(_QWORD *)v77 = *(_QWORD *)&v72[0];
            *(_WORD *)&v77[8] = 2049;
            v78 = *((_QWORD *)&v72[0] + 1);
            v79 = 2049;
            v80 = v73;
            v81 = 2049;
            v82 = *(_QWORD *)&v72[1];
            v83 = 2049;
            v84 = *((_QWORD *)&v72[1] + 1);
            v85 = 2049;
            v86 = v32;
            v87 = 2049;
            v88 = v37;
            v89 = 2049;
            v90 = v58.i64[0];
            v91 = 2049;
            v92 = v58.i64[1];
            v93 = 2049;
            v94 = (unint64_t)v35;
            _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"FenceMetric, heartbeat, MiLo,\", \"homeLoiExitsRejectedByMiLo\":%{private}lld, \"homeLoiExitsNotRejectedByMiLo\":%{private}lld, \"totalFenceExits\":%{private}lld, \"totalHomeLoiExits\":%{private}lld, \"totalHomeLoiExitsWithWifiFix\":%{private}lld, \"totalHomeLoiExitsWithMiLo\":%{private}lld, \"homeLoiExitsRejectedByMiLoToAllFenceExitsPercentage\":%{private}lld, \"homeLoiExitsRejectedByMiLoToAllHomeLoiExitsPercentage\":%{private}lld, \"homeLoiExitsRejectedByMiLoToAllHomeLoiExitsWithWifiFixPercentage\":%{private}lld, \"homeLoiExitsRejectedByMiLoToAllHomeLoiExitsWithMiLoEventPercentage\":%{private}lld}", buf, 0x76u);
          }
          if (*v29 && !*(_BYTE *)(a1 + 1313))
          {
            v62[0] = _NSConcreteStackBlock;
            v62[1] = 3221225472;
            v62[2] = sub_100D54A80;
            v62[3] = &unk_10215F810;
            v63 = v72[0];
            v64 = v72[1];
            v65 = v73;
            v66 = v74;
            v67 = v32;
            v68 = v37;
            v69 = v58;
            v70 = (unint64_t)v35;
            AnalyticsSendEventLazy(CFSTR("com.apple.clx.geofence.heartbeatMiLoHomeLoiExit"), v62);
          }
        }
        if (*(_QWORD *)&v72[1] && *v29 && !*(_BYTE *)(a1 + 1313))
        {
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          v39 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68289283;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = "";
            v76 = 1025;
            *(_DWORD *)v77 = v32 != 0;
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"FenceMetric, heartbeat, MiLo,\", \"isMiLoUsedInHomeLoiExit\":%{private}hhd}", buf, 0x18u);
          }
          v60[0] = _NSConcreteStackBlock;
          v60[1] = 3221225472;
          v60[2] = sub_100D54C04;
          v60[3] = &unk_102182630;
          v61 = v32 != 0;
          AnalyticsSendEventLazy(CFSTR("com.apple.clx.geofence.heartbeatMiLoUsedInHomeLoiExit"), v60);
        }
      }
      break;
    default:
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v10 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *a2;
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&buf[4] = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning Fence: unknown notification, %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v12 = *a2;
        LODWORD(v72[0]) = 67240192;
        DWORD1(v72[0]) = v12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#Warning Fence: unknown notification, %{public}d", v72, 8);
        v14 = (char *)v13;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleStatusNotification(const CFAbsoluteTime, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v13);
LABEL_98:
        if (v14 != buf)
          free(v14);
      }
      break;
  }
}

NSDictionary *sub_100D54A80(_QWORD *a1)
{
  _QWORD v3[10];
  _QWORD v4[10];

  v3[0] = CFSTR("homeLoiExitsRejectedByMiLo");
  v4[0] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a1[4]);
  v3[1] = CFSTR("homeLoiExitsNotRejectedByMiLo");
  v4[1] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a1[5]);
  v3[2] = CFSTR("totalFenceExits");
  v4[2] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a1[8]);
  v3[3] = CFSTR("totalHomeLoiExits");
  v4[3] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a1[6]);
  v3[4] = CFSTR("totalHomeLoiExitsWithWifiFix");
  v4[4] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a1[7]);
  v3[5] = CFSTR("totalHomeLoiExitsWithMiLo");
  v4[5] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a1[12]);
  v3[6] = CFSTR("homeLoiExitsRejectedByMiLoToAllFenceExitsPercentage");
  v4[6] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a1[13]);
  v3[7] = CFSTR("homeLoiExitsRejectedByMiLoToAllHomeLoiExitsPercentage");
  v4[7] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a1[14]);
  v3[8] = CFSTR("homeLoiExitsRejectedByMiLoToAllHomeLoiExitsWithWifiFixPercentage");
  v4[8] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a1[15]);
  v3[9] = CFSTR("homeLoiExitsRejectedByMiLoToAllHomeLoiExitsWithMiLoEventPercentage");
  v4[9] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a1[16]);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 10);
}

NSDictionary *sub_100D54C04(uint64_t a1)
{
  const __CFString *v2;
  NSNumber *v3;

  v2 = CFSTR("isMiLoUsedInHomeLoiExit");
  v3 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int8 *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v3, &v2, 1);
}

void sub_100D54C84(uint64_t a1, _DWORD *a2, int *a3)
{
  NSObject *v5;
  unsigned int v6;
  char *v7;
  void **v8;
  int v9;
  int v10;
  _QWORD *v11;
  double v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  _BYTE buf[12];
  char v21;
  int v22;
  _BYTE *v23;
  void *__p[2];
  char v25;

  if (!*a2)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v5 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *a3 - 1;
      v7 = v6 > 5 ? "Unavailable" : off_1021828C0[v6];
      sub_1015A2E04(__p, v7);
      v8 = v25 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136380675;
      *(_QWORD *)&buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Signal environment %{private}s", buf, 0xCu);
      if (v25 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v16 = qword_1022A0068;
      sub_100D54F84(*a3, buf);
      if (v21 >= 0)
        v17 = buf;
      else
        v17 = *(_BYTE **)buf;
      v22 = 136380675;
      v23 = v17;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v16, 0, "Signal environment %{private}s", &v22, 12);
      v19 = v18;
      if (v21 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleSignalEnvironmentNotification(const CFAbsoluteTime, const CLSignalEnvironmentProvider_Type::Notification &, const CLSignalEnvironmentProvider_Type::NotificationData &)", "%s\n", v19);
      if (v19 != (char *)__p)
        free(v19);
    }
    v9 = *a3 - 1;
    if (v9 <= 5 && ((0x2Fu >> v9) & 1) != 0)
    {
      v10 = dword_101C22E74[v9];
      *(_DWORD *)(a1 + 608) = v10;
      v11 = *(_QWORD **)(a1 + 240);
      if (v11 != (_QWORD *)(a1 + 248))
      {
        do
        {
          if (v11[33] == v11[32])
          {
            v12 = sub_10016F694((uint64_t)(v11 + 4));
            if (v12 <= *((double *)sub_10016F688() + 6))
              sub_100D4B008(a1, (uint64_t)(v11 + 4), v10);
          }
          v13 = (_QWORD *)v11[1];
          if (v13)
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              v14 = (_QWORD *)v11[2];
              v15 = *v14 == (_QWORD)v11;
              v11 = v14;
            }
            while (!v15);
          }
          v11 = v14;
        }
        while (v14 != (_QWORD *)(a1 + 248));
      }
    }
  }
}

_QWORD *sub_100D54F84@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if ((a1 - 1) > 5)
    v2 = "Unavailable";
  else
    v2 = off_1021828C0[a1 - 1];
  return sub_1015A2E04(a2, v2);
}

void sub_100D54FB4(uint64_t a1, double a2)
{
  unsigned __int8 v4;
  NSObject *v5;
  int v6;
  int v7;
  double v8;
  double v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  double v16;
  _BOOL4 v17;
  int v18;
  NSObject *v19;
  const char *v20;
  uint8_t *v21;
  int v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  const char *v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  int v37;
  _BYTE v38[10];
  _BYTE v39[14];
  __int16 v40;
  int v41;
  __int16 v42;
  double v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  double v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  int v51;
  uint8_t buf[4];
  _BYTE v53[10];
  _BYTE v54[14];
  __int16 v55;
  int v56;
  __int16 v57;
  double v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  double v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  int v66;

  v4 = atomic_load((unsigned __int8 *)&qword_1023080F0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1023080F0))
  {
    qword_1023080E8 = *(_QWORD *)&a2;
    __cxa_guard_release(&qword_1023080F0);
  }
  *(double *)(a1 + 856) = a2;
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v5 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
  {
    v6 = *(_DWORD *)(a1 + 684);
    v7 = *(_DWORD *)(a1 + 688);
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)v53 = v6;
    *(_WORD *)&v53[4] = 1026;
    *(_DWORD *)&v53[6] = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "loc watchdog expired, count, %{public}d, %{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v22 = *(_DWORD *)(a1 + 684);
    v23 = *(_DWORD *)(a1 + 688);
    v37 = 67240448;
    *(_DWORD *)v38 = v22;
    *(_WORD *)&v38[4] = 1026;
    *(_DWORD *)&v38[6] = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "loc watchdog expired, count, %{public}d, %{public}d", &v37, 14);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationWatchdogExpired(const CFAbsoluteTime)", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  sub_100ED2B48(a1 + 1312, a2 - *(double *)&qword_1023080E8);
  v8 = a2 - *(double *)(a1 + 864);
  v9 = a2 - *(double *)(a1 + 848);
  v35 = v9;
  v36 = v8;
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v10 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v11 = *(unsigned __int8 *)(a1 + 612);
    v12 = *(_QWORD *)(a1 + 632);
    v13 = *(_DWORD *)(a1 + 684);
    v14 = *(_QWORD *)(a1 + 760);
    v15 = *(_DWORD *)(a1 + 688);
    *(_DWORD *)buf = 134285569;
    *(double *)v53 = a2 - *(double *)&qword_1023080E8;
    *(_WORD *)&v53[8] = 1026;
    *(_DWORD *)v54 = v11;
    *(_WORD *)&v54[4] = 2049;
    *(_QWORD *)&v54[6] = v12;
    v55 = 1026;
    v56 = v13;
    v57 = 2049;
    v58 = v36;
    v59 = 2049;
    v60 = 0x4087A00000000000;
    v61 = 2049;
    v62 = v9;
    v63 = 2049;
    v64 = v14;
    v65 = 1026;
    v66 = v15;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Fence: onLocationWatchdogExpired, since last, %{private}.1lf, isLocationEnabled, %{public}d, last scan, %{private}.1lf, fIsWaitingForLocationCount, %{public}d, sinceLastGpsSession, %{private}.1lf, %{private}.1lf, sinceLastContTimer, %{private}.1lf, %{private}.1lf, fScanRetryCounter, %{public}d", buf, 0x50u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v26 = *(unsigned __int8 *)(a1 + 612);
    v27 = *(_QWORD *)(a1 + 632);
    v28 = *(_DWORD *)(a1 + 684);
    v29 = *(_QWORD *)(a1 + 760);
    v30 = *(_DWORD *)(a1 + 688);
    v37 = 134285569;
    *(double *)v38 = a2 - *(double *)&qword_1023080E8;
    *(_WORD *)&v38[8] = 1026;
    *(_DWORD *)v39 = v26;
    *(_WORD *)&v39[4] = 2049;
    *(_QWORD *)&v39[6] = v27;
    v40 = 1026;
    v41 = v28;
    v42 = 2049;
    v43 = v36;
    v44 = 2049;
    v45 = 0x4087A00000000000;
    v46 = 2049;
    v47 = v9;
    v48 = 2049;
    v49 = v29;
    v50 = 1026;
    v51 = v30;
    LODWORD(v33) = 80;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: onLocationWatchdogExpired, since last, %{private}.1lf, isLocationEnabled, %{public}d, last scan, %{private}.1lf, fIsWaitingForLocationCount, %{public}d, sinceLastGpsSession, %{private}.1lf, %{private}.1lf, sinceLastContTimer, %{private}.1lf, %{private}.1lf, fScanRetryCounter, %{public}d", &v37, v33);
    v32 = (uint8_t *)v31;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationWatchdogExpired(const CFAbsoluteTime)", "%s\n", v31);
    if (v32 != buf)
      free(v32);
  }
  if (sub_1001DFAE8())
  {
    sub_100119F3C(buf);
    v37 = *(_DWORD *)(a1 + 684);
    sub_10011B4E4((uint64_t)buf, "onLocationWatchdogExpired", &v37);
    sub_10018A4CC((uint64_t)buf, "sinceLastGpsSession", &v36);
    sub_10018A4CC((uint64_t)buf, "kSecondsBetweenGPSSessions", &unk_101C229B0);
    sub_10018A4CC((uint64_t)buf, "sinceLastContTimer", &v35);
    sub_1001DFAF4((uint64_t)buf, (uint64_t)"locationd");
    sub_10011A5A8(buf);
  }
  if (*(_BYTE *)(a1 + 612) && *(_DWORD *)(a1 + 684) == 1)
  {
    v34 = 0x403E000000000000;
    v16 = sub_100D5573C(a1, a2, v36, v35);
    if (v16 > 0.0 && v16 < 30.0)
      v34 = *(_QWORD *)&v16;
    v17 = v16 > 0.0;
    *(double *)(a1 + 696) = a2;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 1768) + 232))(*(_QWORD *)(a1 + 1768), &v34);
    (*(void (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 1768) + 296))(*(_QWORD *)(a1 + 1768), "onLocationWatchdogExpired");
    if (v17)
    {
      *(double *)(a1 + 864) = (*(double (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 1768) + 376))(*(_QWORD *)(a1 + 1768), *(unsigned int *)(a1 + 684), *(unsigned int *)(a1 + 688));
    }
    else
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v19 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134283777;
        *(double *)v53 = v36;
        *(_WORD *)&v53[8] = 2049;
        *(_QWORD *)v54 = 0x4087A00000000000;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Fence: onLocationWatchdogExpired, not starting GPS, sinceLastGpsSession, %{private}.1lf, %{private}.1lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v37 = 134283777;
        *(double *)v38 = v36;
        *(_WORD *)&v38[8] = 2049;
        *(_QWORD *)v39 = 0x4087A00000000000;
        LODWORD(v33) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: onLocationWatchdogExpired, not starting GPS, sinceLastGpsSession, %{private}.1lf, %{private}.1lf", &v37, v33);
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationWatchdogExpired(const CFAbsoluteTime)", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
    }
  }
  else
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 272))(*(_QWORD *)(a1 + 1768));
  }
  v18 = *(_DWORD *)(a1 + 684);
  if (v18 == 1)
  {
    *(_QWORD *)(a1 + 684) = 2;
  }
  else if (v18 == 2 && *(_BYTE *)(a1 + 612))
  {
    *(_QWORD *)(a1 + 684) = 0;
    sub_100D55A50(a1, a2);
    sub_100D55C68((_QWORD *)a1, a2, v36);
  }
  qword_1023080E8 = *(_QWORD *)&a2;
}

void sub_100D5571C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

double sub_100D5573C(uint64_t a1, double a2, double a3, double a4)
{
  double v4;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  NSObject *v19;
  const char *v21;
  uint8_t *v22;
  int v23;
  double v24;
  uint8_t buf[4];
  double v26;

  v4 = 0.0;
  if (!dword_1022FB218
    || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 392))(*(_QWORD *)(a1 + 1768)) & 1) != 0)
  {
    return v4;
  }
  sub_100197040();
  if (!sub_100195F08())
  {
    v4 = 30.0;
    if (a3 >= 756.0 || *(double *)(a1 + 760) >= a4)
      goto LABEL_27;
    goto LABEL_26;
  }
  v9 = *(_QWORD *)(a1 + 216);
  v10 = *(_QWORD *)(a1 + 224);
  if (v10 == v9)
  {
    v11 = 0.0;
  }
  else
  {
    v11 = 0.0;
    v12 = *(_QWORD *)(a1 + 224);
    v13 = v12;
    do
    {
      v14 = *(double *)(v13 - 16);
      v13 -= 16;
      if (v14 < a2 + -86400.0)
        break;
      v11 = v11 + *(double *)(v12 - 8);
      v12 = v13;
    }
    while (v13 != v9);
  }
  v15 = *(double *)(a1 + 656);
  if (v15 <= 0.0 || vabdd_f64(a2, v15) >= 300.0 || v11 >= 720.0)
  {
    if (a3 < 756.0)
    {
LABEL_26:
      sub_100ED2B0C(a1 + 1312);
      v4 = 0.0;
      goto LABEL_27;
    }
    v18 = 720.0;
  }
  else
  {
    if (v10 == v9)
    {
      v11 = 0.0;
    }
    else
    {
      v11 = 0.0;
      v16 = *(_QWORD *)(a1 + 224);
      do
      {
        v17 = *(double *)(v16 - 16);
        v16 -= 16;
        if (v17 < a2 + -14400.0)
          break;
        v11 = v11 + *(double *)(v10 - 8);
        v10 = v16;
      }
      while (v16 != v9);
    }
    v18 = 240.0;
  }
  v4 = v18 - v11;
  if (v18 - v11 < 10.0)
    goto LABEL_26;
LABEL_27:
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v19 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134283521;
    v26 = v4;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Fence: allowed gps time %{private}.1lf", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v23 = 134283521;
    v24 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: allowed gps time %{private}.1lf", &v23, 12);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "CFTimeInterval CLFenceMonitor::shouldStartGps(const CFAbsoluteTime, const CFTimeInterval, const CFTimeInterval)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  return v4;
}

void sub_100D55A50(uint64_t a1, double a2)
{
  _BOOL4 v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[2];
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint8_t buf[4];
  _BOOL4 v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;

  v4 = sub_10016F6EC((double *)(a1 + 904), a2);
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v5 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(_QWORD *)(a1 + 736);
    v7 = *(_QWORD *)(a1 + 744);
    *(_DWORD *)buf = 67240705;
    v18 = v4;
    v19 = 2049;
    v20 = v6;
    v21 = 2049;
    v22 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Fence: handleNoWifiApsArea, recalculated, %{public}d, fMinDistanceToFence, %{private}.1lf, fMinDistanceToFenceTimestamp, %{private}.1lf", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v8 = *(_QWORD *)(a1 + 736);
    v9 = *(_QWORD *)(a1 + 744);
    v12[0] = 67240705;
    v12[1] = v4;
    v13 = 2049;
    v14 = v8;
    v15 = 2049;
    v16 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: handleNoWifiApsArea, recalculated, %{public}d, fMinDistanceToFence, %{private}.1lf, fMinDistanceToFenceTimestamp, %{private}.1lf", v12, 28);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleNoWifiApsArea(const CFAbsoluteTime)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if (v4)
    sub_100ED2AAC(a1 + 1312);
  *(_OWORD *)(a1 + 736) = 0u;
  sub_10016CFF8(a1, a2);
}

void sub_100D55C68(_QWORD *a1, double a2, double a3)
{
  _QWORD *v3;
  _QWORD *v4;
  double v8;
  double v9;
  id v10;
  NSObject *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  std::string v19;
  std::string v20;
  std::string v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[21];
  std::string v29;
  id v30;
  void *__p[24];
  double v32;
  std::string __str;
  std::string v34;
  std::string v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[21];
  std::string v43;
  id v44;
  void *__src;
  _BYTE *v46;
  int v47;
  double v48;
  __int16 v49;
  double v50;
  uint8_t buf[4];
  double v52;
  __int16 v53;
  double v54;

  v3 = (_QWORD *)a1[30];
  v4 = a1 + 31;
  if (v3 != a1 + 31)
  {
    do
    {
      sub_1004E5748((char *)&__str, (__int128 *)v3 + 2);
      if ((BYTE8(v41) & 0x10) != 0)
      {
        v8 = *((double *)v3 + 40);
        if (v8 > 0.0)
        {
          v9 = a2 - v8;
          if (a2 - v8 > 420.0 && *((double *)v3 + 37) + v9 * -45.0 < 0.0)
          {
            sub_100D24E84((char *)&v19);
            std::string::operator=(&v19, &__str);
            std::string::operator=(&v20, &v34);
            std::string::operator=(&v21, &v35);
            v26 = v40;
            v27 = v41;
            *(_OWORD *)v28 = *(_OWORD *)v42;
            *(_QWORD *)&v28[13] = *(_QWORD *)&v42[13];
            v22 = v36;
            v23 = v37;
            v24 = v38;
            v25 = v39;
            std::string::operator=(&v29, &v43);
            v10 = v30;
            v30 = v44;

            sub_1002F3538((char *)__p, (char *)__src, (uint64_t)v46, (v46 - (_BYTE *)__src) >> 4);
            v32 = v9;
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_1021826B0);
            v11 = qword_1022A0068;
            if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134283777;
              v52 = v32;
              v53 = 2049;
              v54 = a3;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Fence: watchdog fired: %{private}.1lf, %{private}.1lf", buf, 0x16u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0060 != -1)
                dispatch_once(&qword_1022A0060, &stru_1021826B0);
              v47 = 134283777;
              v48 = v32;
              v49 = 2049;
              v50 = a3;
              LODWORD(v18) = 22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#Warning Fence: watchdog fired: %{private}.1lf, %{private}.1lf", &v47, v18);
              v17 = (uint8_t *)v16;
              sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleNoLocationForExtendedDuration(const CFAbsoluteTime, const CFTimeInterval)", "%s\n", v16);
              if (v17 != buf)
                free(v17);
            }
            v12 = a1[221];
            *(_DWORD *)buf = 5;
            (*(void (**)(uint64_t, uint8_t *, std::string *))(*(_QWORD *)v12 + 96))(v12, buf, &v19);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }

            if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v29.__r_.__value_.__l.__data_);
            if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v21.__r_.__value_.__l.__data_);
            if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v20.__r_.__value_.__l.__data_);
            if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v19.__r_.__value_.__l.__data_);
          }
        }
      }
      if (__src)
      {
        v46 = __src;
        operator delete(__src);
      }

      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v13 = (_QWORD *)v3[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v3[2];
          v15 = *v14 == (_QWORD)v3;
          v3 = v14;
        }
        while (!v15);
      }
      v3 = v14;
    }
    while (v14 != v4);
  }
}

void sub_100D56098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1004E2BD0((uint64_t)va);
  sub_1004E2BD0((uint64_t)&STACK[0x598]);
  _Unwind_Resume(a1);
}

void sub_100D560E0(uint64_t a1, double a2)
{
  sub_100D50694(a1, 0, a2);
}

void sub_100D560E8(uint64_t a1, double a2)
{
  NSObject *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  _WORD v13[8];
  uint8_t buf[8];
  std::__shared_weak_count *v15;

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 176))(*(_QWORD *)(a1 + 1768)))
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v4 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "converging state, timer expired, cancelling gnss session", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "converging state, timer expired, cancelling gnss session", v13, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleConvergingStateTimerFired(const CFAbsoluteTime)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 192))(*(_QWORD *)(a1 + 1768));
    sub_1009AEAFC((_QWORD *)(a1 + 48), buf);
    if (*(_QWORD *)buf)
      sub_1009AE8E0(*(uint64_t *)buf, a2);
    v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v8 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "converging state, timer expired, requesting location", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "converging state, timer expired, requesting location", v13, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleConvergingStateTimerFired(const CFAbsoluteTime)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    (*(void (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 1768) + 296))(*(_QWORD *)(a1 + 1768), "ConvergingState");
  }
}

void sub_100D5643C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100D56458(uint64_t a1, double a2)
{
  double v4;
  double v5;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  double v15;
  _DWORD v16[2];
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  double v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  double v30;

  v15 = a2;
  if (*(_BYTE *)(a1 + 612))
  {
    v4 = *(double *)(a1 + 776);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v5 = a2 - v4;
    v6 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(unsigned __int8 *)(a1 + 612);
      v8 = *(_DWORD *)(a1 + 704);
      v9 = *(_DWORD *)(a1 + 708);
      *(_DWORD *)buf = 67240961;
      v24 = v7;
      v25 = 1026;
      v26 = v8;
      v27 = 1026;
      v28 = v9;
      v29 = 2049;
      v30 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Fence: onDeAssTriggerTimer, isLocationEnabled, %{public}d, count, %{public}d, %{public}d, sinceLastTrigger, %{private}.1lf", buf, 0x1Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v10 = *(unsigned __int8 *)(a1 + 612);
      v11 = *(_DWORD *)(a1 + 704);
      v12 = *(_DWORD *)(a1 + 708);
      v16[0] = 67240961;
      v16[1] = v10;
      v17 = 1026;
      v18 = v11;
      v19 = 1026;
      v20 = v12;
      v21 = 2049;
      v22 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: onDeAssTriggerTimer, isLocationEnabled, %{public}d, count, %{public}d, %{public}d, sinceLastTrigger, %{private}.1lf", v16, 30);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleDeAssTriggerTimer(const CFAbsoluteTime)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    if (v5 >= 20.0)
      (*(void (**)(uint64_t, const char *, uint64_t, double))(*(_QWORD *)a1 + 96))(a1, "handleDeAssTriggerTimer", 1, a2);
    sub_100D4E764(a1, (uint64_t)"onDeAssTriggerTimer", 1, &v15);
    *(double *)(a1 + 1752) = a2;
    if (fabs(sub_100D63A24(a1 + 1648, &v15, (double *)(a1 + 1656))) < 2.0)
      *(_BYTE *)(a1 + 1648) = 0;
    ++*(_DWORD *)(a1 + 704);
  }
}

void sub_100D566F4(uint64_t a1, double a2)
{
  double v4;
  double v5;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  double v15;
  _DWORD v16[2];
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  double v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  double v30;

  v15 = a2;
  if (*(_BYTE *)(a1 + 612))
  {
    v4 = *(double *)(a1 + 776);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v5 = a2 - v4;
    v6 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(unsigned __int8 *)(a1 + 612);
      v8 = *(_DWORD *)(a1 + 704);
      v9 = *(_DWORD *)(a1 + 708);
      *(_DWORD *)buf = 67240961;
      v24 = v7;
      v25 = 1026;
      v26 = v8;
      v27 = 1026;
      v28 = v9;
      v29 = 2049;
      v30 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Fence: onDelayedTriggerTimer, isLocationEnabled, %{public}d, count, %{public}d, %{public}d, sinceLastTrigger, %{private}.1lf", buf, 0x1Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v10 = *(unsigned __int8 *)(a1 + 612);
      v11 = *(_DWORD *)(a1 + 704);
      v12 = *(_DWORD *)(a1 + 708);
      v16[0] = 67240961;
      v16[1] = v10;
      v17 = 1026;
      v18 = v11;
      v19 = 1026;
      v20 = v12;
      v21 = 2049;
      v22 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: onDelayedTriggerTimer, isLocationEnabled, %{public}d, count, %{public}d, %{public}d, sinceLastTrigger, %{private}.1lf", v16, 30);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleDelayedTriggerTimer(const CFAbsoluteTime)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    if (v5 >= 20.0)
      (*(void (**)(uint64_t, const char *, uint64_t, double))(*(_QWORD *)a1 + 96))(a1, "handleDelayedTriggerTimer", 1, a2);
    ++*(_DWORD *)(a1 + 704);
    sub_100D4E764(a1, (uint64_t)"onDelayedTriggerTimer", 0, &v15);
    *(double *)(a1 + 1752) = a2;
    if (fabs(sub_100D63A24(a1 + 1648, &v15, (double *)(a1 + 1656))) < 2.0)
      *(_BYTE *)(a1 + 1648) = 0;
  }
}

void sub_100D56990(uint64_t a1, double a2)
{
  double v4;
  double v5;
  NSObject *v6;
  int v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  double v11;
  _DWORD v12[2];
  __int16 v13;
  double v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  double v18;

  v11 = a2;
  v4 = *(double *)(a1 + 776);
  *(double *)(a1 + 848) = a2;
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v5 = a2 - v4;
  v6 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(unsigned __int8 *)(a1 + 612);
    *(_DWORD *)buf = 67240449;
    v16 = v7;
    v17 = 2049;
    v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Fence: onContinousTrackingTimer, isLocationEnabled, %{public}d, sinceLastTrigger, %{private}.1lf", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v8 = *(unsigned __int8 *)(a1 + 612);
    v12[0] = 67240449;
    v12[1] = v8;
    v13 = 2049;
    v14 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: onContinousTrackingTimer, isLocationEnabled, %{public}d, sinceLastTrigger, %{private}.1lf", v12, 18);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleContinousTrackingTimer(const CFAbsoluteTime)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (*(_BYTE *)(a1 + 612))
  {
    if (v5 >= 20.0)
      (*(void (**)(uint64_t, const char *, uint64_t, double))(*(_QWORD *)a1 + 96))(a1, "handleContinousTrackingTimer", 1, a2);
    sub_10016D898(a1, a2);
    *(double *)(a1 + 1752) = a2;
    if (fabs(sub_100D63A24(a1 + 1648, &v11, (double *)(a1 + 1656))) < 2.0)
      *(_BYTE *)(a1 + 1648) = 0;
  }
}

uint64_t sub_100D56BE0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  uint64_t v19;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a2 + 23) >= 0)
      v5 = a2;
    else
      v5 = *(_QWORD *)a2;
    if (*(char *)(a2 + 47) >= 0)
      v6 = a2 + 24;
    else
      v6 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)buf = 136380931;
    v17 = v5;
    v18 = 2081;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: Got monitoring data changed for %{private}s/%{private}s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    if (*(char *)(a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = *(_QWORD *)a2;
    if (*(char *)(a2 + 47) >= 0)
      v9 = a2 + 24;
    else
      v9 = *(_QWORD *)(a2 + 24);
    v12 = 136380931;
    v13 = v8;
    v14 = 2081;
    v15 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: Got monitoring data changed for %{private}s/%{private}s", &v12, 22);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleMonitoringDataChanged(const CLFenceManager_Type::Fence &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  return sub_100D70FF8((_QWORD *)(a1 + 904), (uint64_t *)a2);
}

uint64_t sub_100D56DF8(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  v1 = *(_QWORD **)(result + 240);
  v2 = (_QWORD *)(result + 248);
  if (v1 != (_QWORD *)(result + 248))
  {
    v3 = result;
    do
    {
      if ((v1[24] & 0x80) != 0)
        result = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(v3 + 1768) + 408))(*(_QWORD *)(v3 + 1768), v1 + 4, 0);
      v4 = (_QWORD *)v1[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)v1[2];
          v6 = *v5 == (_QWORD)v1;
          v1 = v5;
        }
        while (!v6);
      }
      v1 = v5;
    }
    while (v5 != v2);
  }
  return result;
}

void sub_100D56E84(uint64_t a1, double a2)
{
  double v4;

  v4 = a2;
  (*(void (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 96))(a1, "activityAlarmHandler", 1);
  *(double *)(a1 + 1736) = a2;
  if (fabs(sub_100D63A24(a1 + 1648, &v4, (double *)(a1 + 1656))) < 2.0)
    *(_BYTE *)(a1 + 1648) = 0;
}

void sub_100D56EFC(uint64_t a1, double a2)
{
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  NSObject *v9;
  size_t v10;
  uint64_t *v11;
  std::string *v12;
  const void *v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  _BYTE *v19;
  int v20;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t v28;
  std::string *p_p;
  int v30;
  int v31;
  std::string *v32;
  std::string *v33;
  uint64_t v34;
  std::string __p;
  std::string v36;
  std::__shared_weak_count *v37;
  _BYTE v38[24];

  *(_DWORD *)(a1 + 604) = 2;
  v3 = a1 + 448;
  if (*(double *)(a1 + 468) > 0.0)
  {
    v5 = *(_QWORD **)(a1 + 240);
    v6 = (_QWORD *)(a1 + 248);
    if (v5 != (_QWORD *)(a1 + 248))
    {
      v7 = &qword_1022A0000;
      do
      {
        if (*((_BYTE *)v5 + 285))
        {
          if (!*(_BYTE *)(a1 + 730))
            goto LABEL_11;
          if (v5[33] == v5[32])
          {
            if ((_os_feature_enabled_impl("CoreLocation", "cl_fence_handoff") & 1) != 0)
              goto LABEL_43;
            v8 = 64;
          }
          else
          {
            v8 = 8;
          }
          if ((v5[24] & v8) != 0)
          {
LABEL_11:
            if (v7[12] != -1)
              dispatch_once(&qword_1022A0060, &stru_1021826B0);
            v9 = qword_1022A0068;
            if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
            {
              if (*((char *)v5 + 55) >= 0)
                v10 = *((unsigned __int8 *)v5 + 55);
              else
                v10 = v5[5];
              sub_100259584((uint64_t)&v36, v10 + 1);
              v11 = v7;
              if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v12 = &v36;
              else
                v12 = (std::string *)v36.__r_.__value_.__r.__words[0];
              if (v10)
              {
                if (*((char *)v5 + 55) >= 0)
                  v13 = v5 + 4;
                else
                  v13 = (const void *)v5[4];
                memmove(v12, v13, v10);
              }
              *(_WORD *)((char *)&v12->__r_.__value_.__l.__data_ + v10) = 47;
              v14 = *((char *)v5 + 79);
              if (v14 >= 0)
                v15 = (const std::string::value_type *)(v5 + 7);
              else
                v15 = (const std::string::value_type *)v5[7];
              if (v14 >= 0)
                v16 = *((unsigned __int8 *)v5 + 79);
              else
                v16 = v5[8];
              v17 = std::string::append(&v36, v15, v16);
              v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
              *(_QWORD *)&v38[16] = *((_QWORD *)&v17->__r_.__value_.__l + 2);
              *(_OWORD *)v38 = v18;
              v17->__r_.__value_.__l.__size_ = 0;
              v17->__r_.__value_.__r.__words[2] = 0;
              v17->__r_.__value_.__r.__words[0] = 0;
              v7 = v11;
              if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v36.__r_.__value_.__l.__data_);
              v19 = v38;
              if (v38[23] < 0)
                v19 = *(_BYTE **)v38;
              v20 = *((unsigned __int8 *)v5 + 284);
              v21 = *((unsigned __int8 *)v5 + 285);
              LODWORD(v36.__r_.__value_.__l.__data_) = 136381187;
              *(std::string::size_type *)((char *)v36.__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
              WORD2(v36.__r_.__value_.__r.__words[1]) = 1026;
              *(_DWORD *)((char *)&v36.__r_.__value_.__r.__words[1] + 6) = v20;
              WORD1(v36.__r_.__value_.__r.__words[2]) = 1026;
              HIDWORD(v36.__r_.__value_.__r.__words[2]) = v21;
              _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Fence: dispatch, handleSettled, fence, %{private}s, monitoringStarted, %{public}d, monitoringSettled, %{public}d", (uint8_t *)&v36, 0x18u);
              if ((v38[23] & 0x80000000) != 0)
                operator delete(*(void **)v38);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(&v36, 0x65CuLL);
              if (v7[12] != -1)
                dispatch_once(&qword_1022A0060, &stru_1021826B0);
              v28 = qword_1022A0068;
              sub_100914D68((const void **)v5 + 4, &__p);
              p_p = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              v30 = *((unsigned __int8 *)v5 + 284);
              v31 = *((unsigned __int8 *)v5 + 285);
              *(_DWORD *)v38 = 136381187;
              *(_QWORD *)&v38[4] = p_p;
              *(_WORD *)&v38[12] = 1026;
              *(_DWORD *)&v38[14] = v30;
              *(_WORD *)&v38[18] = 1026;
              *(_DWORD *)&v38[20] = v31;
              LODWORD(v34) = 24;
              _os_log_send_and_compose_impl(2, 0, &v36, 1628, &_mh_execute_header, v28, 2, "Fence: dispatch, handleSettled, fence, %{private}s, monitoringStarted, %{public}d, monitoringSettled, %{public}d", v38, v34);
              v33 = v32;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleSettled(const CFAbsoluteTime)", "%s\n", (const char *)v33);
              if (v33 != &v36)
                free(v33);
            }
            sub_10012A33C(&v36);
            sub_100D57358(a1, v3, (uint64_t)&v36, (unsigned __int8 *)v5 + 32, a2);
            v22 = v37;
            if (v37)
            {
              p_shared_owners = (unint64_t *)&v37->__shared_owners_;
              do
                v24 = __ldaxr(p_shared_owners);
              while (__stlxr(v24 - 1, p_shared_owners));
              if (!v24)
              {
                ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                std::__shared_weak_count::__release_weak(v22);
              }
            }
          }
        }
LABEL_43:
        v25 = (_QWORD *)v5[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v5[2];
            v27 = *v26 == (_QWORD)v5;
            v5 = v26;
          }
          while (!v27);
        }
        v5 = v26;
      }
      while (v26 != v6);
    }
  }
}

void sub_100D57320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100D57358(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  const char *v30;
  uint8_t *v31;
  NSObject *v32;
  const char *v33;
  uint8_t *v34;
  int v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t *v42;
  __int16 v43;
  uint64_t *v44;
  uint8_t buf[4];
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t *v52;
  __int16 v53;
  uint64_t *v54;

  v10 = sub_10016FC40(a1 + 240, a4);
  if (a1 + 248 != v10)
  {
    v11 = v10;
    v12 = v10 + 32;
    v13 = v10 + 280;
    if (*(_BYTE *)(a1 + 730))
    {
      if (*(_QWORD *)(v10 + 264) == *(_QWORD *)(v10 + 256))
      {
        if ((_os_feature_enabled_impl("CoreLocation", "cl_fence_handoff") & 1) != 0)
        {
LABEL_29:
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          v32 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "Processing location when not supposed to", buf, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_1021826B0);
            LOWORD(v35) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 16, "Processing location when not supposed to", &v35, 2);
            v34 = (uint8_t *)v33;
            sub_100512490("Generic", 1, 0, 0, "void CLFenceMonitor::handleLocationFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &)", "%s\n", v33);
            if (v34 != buf)
              free(v34);
          }
          goto LABEL_34;
        }
        v14 = 64;
      }
      else
      {
        v14 = 8;
      }
      if ((*(_QWORD *)(v11 + 192) & v14) == 0)
        goto LABEL_29;
    }
LABEL_34:
    sub_100D50B40(a1, (_OWORD *)a2, a3, v12, v13, 1, 1, a5);
    return;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v15 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    v16 = *(_QWORD *)(a2 + 4);
    v17 = *(_QWORD *)(a2 + 12);
    v18 = *(_QWORD *)(a2 + 20);
    if ((a4[23] & 0x80u) == 0)
      v19 = (uint64_t *)a4;
    else
      v19 = *(uint64_t **)a4;
    if ((a4[47] & 0x80u) == 0)
      v20 = (uint64_t *)(a4 + 24);
    else
      v20 = (uint64_t *)*((_QWORD *)a4 + 3);
    *(_DWORD *)buf = 134284547;
    v46 = v16;
    v47 = 2049;
    v48 = v17;
    v49 = 2050;
    v50 = v18;
    v51 = 2082;
    v52 = v19;
    v53 = 2081;
    v54 = v20;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning Fence: Attempt to handle location <%{private}+.8f,%{private}+.8f> acc %{public}.2f for non-present fence %{public}s/%{private}s", buf, 0x34u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v21 = *(_QWORD *)(a2 + 4);
    v22 = *(_QWORD *)(a2 + 12);
    v23 = *(_QWORD *)(a2 + 20);
    if ((a4[23] & 0x80u) == 0)
      v24 = (uint64_t *)a4;
    else
      v24 = *(uint64_t **)a4;
    v25 = (char)a4[47];
    v28 = (uint64_t *)*((_QWORD *)a4 + 3);
    v27 = (uint64_t *)(a4 + 24);
    v26 = v28;
    if (v25 >= 0)
      v29 = v27;
    else
      v29 = v26;
    v35 = 134284547;
    v36 = v21;
    v37 = 2049;
    v38 = v22;
    v39 = 2050;
    v40 = v23;
    v41 = 2082;
    v42 = v24;
    v43 = 2081;
    v44 = v29;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#Warning Fence: Attempt to handle location <%{private}+.8f,%{private}+.8f> acc %{public}.2f for non-present fence %{public}s/%{private}s", &v35, 52);
    v31 = (uint8_t *)v30;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &)", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
}

void sub_100D577A0(uint64_t a1, int a2)
{
  if (a2)
  {
    *(_BYTE *)(a1 + 613) = 1;
    sub_100D577DC((_QWORD *)a1);
    sub_100D56DF8(a1);
    sub_100D4ABA4(a1);
  }
}

void sub_100D577DC(_QWORD *a1)
{
  _QWORD *v2;
  char *v3;
  __int128 *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  void **v11;

  sub_100D58E70((uint64_t)a1, (uint64_t)"kNotificationDeviceUnlockedSinceBoot");
  if (a1[32])
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v2 = (_QWORD *)a1[30];
    if (v2 != a1 + 31)
    {
      v3 = 0;
      do
      {
        v4 = (__int128 *)(v2 + 4);
        if ((unint64_t)v3 >= v10)
        {
          v3 = (char *)sub_10091D4EC(&v8, v4);
        }
        else
        {
          sub_1004E5748(v3, v4);
          v3 += 248;
        }
        v9 = v3;
        v5 = (_QWORD *)v2[1];
        if (v5)
        {
          do
          {
            v6 = v5;
            v5 = (_QWORD *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            v6 = (_QWORD *)v2[2];
            v7 = *v6 == (_QWORD)v2;
            v2 = v6;
          }
          while (!v7);
        }
        v2 = v6;
      }
      while (v6 != a1 + 31);
    }
    sub_10064CF08(a1[228], &v8);
    v11 = (void **)&v8;
    sub_10091BBB0(&v11);
  }
}

void sub_100D578BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_10091BBB0(&a12);
  _Unwind_Resume(a1);
}

double sub_100D578E8(uint64_t a1)
{
  uint64_t v2;
  char v3;
  char v4;
  double result;

  v2 = a1 + 1312;
  v3 = *(_BYTE *)(a1 + 612);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 16))(*(_QWORD *)(a1 + 1768));
  *(_QWORD *)&result = sub_100ED23CC(v2, v3, v4, *(_BYTE *)(a1 + 728), (_QWORD *)(a1 + 240)).n128_u64[0];
  return result;
}

uint64_t sub_100D57938(uint64_t a1, double a2)
{
  double *v4;
  void **v5;
  double *v6;
  NSObject *v7;
  double v8;
  char *v9;
  int64_t v10;
  double v11;
  char *v12;
  __n128 v13;
  double v14;
  double v15;
  NSObject *v16;
  unint64_t v17;
  double *v18;
  double *v19;
  double *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  double *v26;
  char *v27;
  char *v29;
  uint64_t v30;
  int v31;
  double v32;
  uint8_t buf[4];
  double v34;

  v6 = *(double **)(a1 + 216);
  v4 = *(double **)(a1 + 224);
  v5 = (void **)(a1 + 216);
  while (v6 != v4)
  {
    if (vabdd_f64(a2, *v6) <= 86400.0)
    {
      v6 += 2;
    }
    else
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v7 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        v8 = *v6;
        *(_DWORD *)buf = 134349056;
        v34 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Fence: discarding old gps session, %{public}.1lf", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v11 = *v6;
        v31 = 134349056;
        v32 = v11;
        LODWORD(v30) = 12;
        v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: discarding old gps session, %{public}.1lf", &v31, v30);
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::stopGps(const CFAbsoluteTime)", "%s\n", v12);
        if (v12 != (char *)buf)
          free(v12);
      }
      v9 = *(char **)(a1 + 224);
      v10 = v9 - (char *)(v6 + 2);
      if (v9 != (char *)(v6 + 2))
        memmove(v6, v6 + 2, v9 - (char *)(v6 + 2));
      v4 = (double *)((char *)v6 + v10);
      *(_QWORD *)(a1 + 224) = (char *)v6 + v10;
    }
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 392))(*(_QWORD *)(a1 + 1768)))
  {
    v14 = *(double *)(a1 + 864);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v15 = a2 - v14;
    v16 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      v34 = v15;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Fence: adding gps session, %{public}.1lf", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v31 = 134349056;
      v32 = v15;
      LODWORD(v30) = 12;
      v29 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: adding gps session, %{public}.1lf", &v31, v30);
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::stopGps(const CFAbsoluteTime)", "%s\n", v29);
      if (v29 != (char *)buf)
        free(v29);
    }
    v17 = *(_QWORD *)(a1 + 232);
    v18 = *(double **)(a1 + 224);
    if ((unint64_t)v18 >= v17)
    {
      v20 = (double *)*v5;
      v21 = ((char *)v18 - (_BYTE *)*v5) >> 4;
      v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 60)
        sub_100259694();
      v23 = v17 - (_QWORD)v20;
      if (v23 >> 3 > v22)
        v22 = v23 >> 3;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
        v24 = 0xFFFFFFFFFFFFFFFLL;
      else
        v24 = v22;
      if (v24)
      {
        v25 = (char *)sub_10028E224(a1 + 232, v24);
        v20 = *(double **)(a1 + 216);
        v18 = *(double **)(a1 + 224);
      }
      else
      {
        v25 = 0;
      }
      v26 = (double *)&v25[16 * v21];
      v27 = &v25[16 * v24];
      *v26 = a2;
      v26[1] = v15;
      v19 = v26 + 2;
      if (v18 != v20)
      {
        do
        {
          *((_OWORD *)v26 - 1) = *((_OWORD *)v18 - 1);
          v26 -= 2;
          v18 -= 2;
        }
        while (v18 != v20);
        v20 = (double *)*v5;
      }
      *(_QWORD *)(a1 + 216) = v26;
      *(_QWORD *)(a1 + 224) = v19;
      *(_QWORD *)(a1 + 232) = v27;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v18 = a2;
      v18[1] = v15;
      v19 = v18 + 2;
    }
    *(_QWORD *)(a1 + 224) = v19;
    v13.n128_f64[0] = sub_100ED2B1C(a1 + 1312, v15);
  }
  return (*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 1768) + 384))(*(_QWORD *)(a1 + 1768), v13);
}

uint64_t sub_100D57DB4(uint64_t a1)
{
  return sub_100ED2B38(a1 + 1312);
}

uint64_t sub_100D57DBC(uint64_t a1)
{
  return sub_100345F50(a1 + 1312);
}

uint64_t sub_100D57DC4(uint64_t a1)
{
  return sub_100ED2AEC(a1 + 1312);
}

uint64_t sub_100D57DCC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 16))(*(_QWORD *)(a1 + 1768));
}

uint64_t sub_100D57DDC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 24))(*(_QWORD *)(a1 + 1768));
}

uint64_t sub_100D57DEC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 32))(*(_QWORD *)(a1 + 1768));
}

uint64_t sub_100D57DFC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 40))(*(_QWORD *)(a1 + 1768));
}

void sub_100D57E0C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  _QWORD v5[3];
  _QWORD v6[3];
  void **v7;

  v4 = *(_QWORD *)(a1 + 1768);
  memset(v6, 0, sizeof(v6));
  sub_10055A7B8(v6, *a2, a2[1], 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3));
  memset(v5, 0, sizeof(v5));
  sub_10055A7B8(v5, *a3, a3[1], 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 3));
  (*(void (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v4 + 48))(v4, v6, v5);
  v7 = (void **)v5;
  sub_100279AA4(&v7);
  v7 = (void **)v6;
  sub_100279AA4(&v7);
}

void sub_100D57EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v14 - 40) = v13;
  sub_100279AA4((void ***)(v14 - 40));
  *(_QWORD *)(v14 - 40) = &a13;
  sub_100279AA4((void ***)(v14 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_100D57EF8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 56))(*(_QWORD *)(a1 + 1768));
}

uint64_t sub_100D57F08(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 64))(*(_QWORD *)(a1 + 1768));
}

uint64_t sub_100D57F18(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 72))(*(_QWORD *)(a1 + 1768));
}

uint64_t sub_100D57F28(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 88))(*(_QWORD *)(a1 + 1768));
}

void sub_100D57F38(uint64_t a1, uint64_t a2, char a3, double a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  *(_BYTE *)(a1 + 640) |= a3;
  *(double *)(a1 + 776) = a4;
  if (sub_10016E59C(a1))
  {
    sub_1009AEAFC((_QWORD *)(a1 + 48), &v10);
    if (v10)
      ++*(_DWORD *)(v10 + 116);
    (*(void (**)(_QWORD, uint64_t, double))(**(_QWORD **)(a1 + 1768) + 112))(*(_QWORD *)(a1 + 1768), a2, *(double *)(a1 + 768));
    *(double *)(a1 + 1744) = a4;
    v7 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_100D57FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100D5800C(uint64_t a1, double a2)
{
  double v5;

  v5 = a2;
  sub_100ED2ABC(a1 + 1312);
  *(double *)(a1 + 1720) = a2;
  if (fabs(sub_100D63A24(a1 + 1648, &v5, (double *)(a1 + 1656))) < 2.0)
    *(_BYTE *)(a1 + 1648) = 0;
  return (*(uint64_t (**)(uint64_t, const char *, uint64_t, double))(*(_QWORD *)a1 + 96))(a1, "epnoEntry", 1, v5);
}

uint64_t sub_100D58094(uint64_t a1, double a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  __int16 v8;
  double v9;
  uint8_t buf[1640];

  v9 = a2;
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: setting EPNO exit trigger time", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v8 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: setting EPNO exit trigger time", &v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitor::triggerEpnoExitReceived(const CFAbsoluteTime)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  *(double *)(a1 + 656) = a2;
  sub_100ED2ACC(a1 + 1312);
  *(double *)(a1 + 1728) = a2;
  if (fabs(sub_100D63A24(a1 + 1648, &v9, (double *)(a1 + 1656))) < 2.0)
    *(_BYTE *)(a1 + 1648) = 0;
  return (*(uint64_t (**)(uint64_t, const char *, uint64_t, double))(*(_QWORD *)a1 + 96))(a1, "epnoExit", 1, v9);
}

void sub_100D5828C(uint64_t a1, double a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  const char *v7;
  uint8_t *v8;
  __int16 v9;
  double v10;
  uint8_t buf[8];
  std::__shared_weak_count *v12;

  v10 = a2;
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v3 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Fence: Got kNotificationDelayTriggerReceived from WIFI", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v9 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: Got kNotificationDelayTriggerReceived from WIFI", &v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitor::delayTriggerReceived(const CFAbsoluteTime)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  sub_100D58484(a1, &v10);
  sub_1009AEAFC((_QWORD *)(a1 + 48), buf);
  if (*(_QWORD *)buf)
    ++*(_DWORD *)(*(_QWORD *)buf + 164);
  v4 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100D58484(uint64_t a1, double *a2)
{
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  BOOL v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  const char *v21;
  NSObject *v22;
  uint8_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  const char *v29;
  uint8_t *v30;
  _BYTE v31[24];
  uint64_t v32;
  uint64_t v33;
  uint8_t buf[4];
  uint64_t v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  double v43;

  if (*(_BYTE *)(a1 + 620))
  {
    v3 = vabdd_f64(*a2, *(double *)(a1 + 744));
    v4 = *(double *)(a1 + 736) + v3 * -45.0;
    if (v3 >= 855.0)
      v4 = 0.0;
    if (v4 > 0.0)
      v5 = v4;
    else
      v5 = 0.0;
    v6 = *(_QWORD *)(a1 + 256);
    v7 = v5 + -13500.0 > 0.0 || v6 == 0;
    if (!v7 && (!*(_BYTE *)(a1 + 730) || *(_BYTE *)(a1 + 731)) && *(_BYTE *)(a1 + 612))
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v8 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        v9 = *(_QWORD *)(a1 + 712);
        v10 = *(_DWORD *)(a1 + 704);
        v11 = *(_DWORD *)(a1 + 708);
        v12 = *(unsigned __int8 *)(a1 + 728);
        v13 = *(unsigned __int8 *)(a1 + 730);
        *(_DWORD *)buf = 134284545;
        v35 = v9;
        v36 = 1026;
        v37 = v10;
        v38 = 1026;
        v39 = v11;
        v40 = 1026;
        v41 = v12;
        v42 = 1026;
        LODWORD(v43) = v13;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Fence: scheduleNextDeassociationDelayedTrigger in, %{private}.1lf, count, %{public}d, %{public}d, airplane, %{public}d, cConnected, %{public}d", buf, 0x24u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v24 = *(_QWORD *)(a1 + 712);
        v25 = *(_DWORD *)(a1 + 704);
        v26 = *(_DWORD *)(a1 + 708);
        v27 = *(unsigned __int8 *)(a1 + 728);
        v28 = *(unsigned __int8 *)(a1 + 730);
        *(_DWORD *)v31 = 134284545;
        *(_QWORD *)&v31[4] = v24;
        *(_WORD *)&v31[12] = 1026;
        *(_DWORD *)&v31[14] = v25;
        *(_WORD *)&v31[18] = 1026;
        *(_DWORD *)&v31[20] = v26;
        LOWORD(v32) = 1026;
        *(_DWORD *)((char *)&v32 + 2) = v27;
        HIWORD(v32) = 1026;
        LODWORD(v33) = v28;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: scheduleNextDeassociationDelayedTrigger in, %{private}.1lf, count, %{public}d, %{public}d, airplane, %{public}d, cConnected, %{public}d", v31, 36);
        v30 = (uint8_t *)v29;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::scheduleNextDeassociationDelayedTrigger(const CFAbsoluteTime &)", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      if (!*(_BYTE *)(a1 + 730) || *(_BYTE *)(a1 + 731))
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 1768) + 288))(*(_QWORD *)(a1 + 1768), a1 + 712);
      return;
    }
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v14 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v15 = *(unsigned __int8 *)(a1 + 728);
      v16 = *(unsigned __int8 *)(a1 + 730);
      v17 = *(unsigned __int8 *)(a1 + 612);
      *(_DWORD *)buf = 134350081;
      v35 = v6;
      v36 = 1026;
      v37 = v15;
      v38 = 1026;
      v39 = v16;
      v40 = 1026;
      v41 = v17;
      v42 = 2049;
      v43 = v5;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Fence: ignore de association trigger, numOfFences, %{public}zu, airplane, %{public}d, cConnected, %{public}d, location services, %{public}d, minDistanceToFence, %{private}.1lf", buf, 0x28u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v18 = *(unsigned __int8 *)(a1 + 728);
      v19 = *(unsigned __int8 *)(a1 + 730);
      v20 = *(unsigned __int8 *)(a1 + 612);
      *(_DWORD *)v31 = 134350081;
      *(_QWORD *)&v31[4] = v6;
      *(_WORD *)&v31[12] = 1026;
      *(_DWORD *)&v31[14] = v18;
      *(_WORD *)&v31[18] = 1026;
      *(_DWORD *)&v31[20] = v19;
      LOWORD(v32) = 1026;
      *(_DWORD *)((char *)&v32 + 2) = v20;
      HIWORD(v32) = 2049;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: ignore de association trigger, numOfFences, %{public}zu, airplane, %{public}d, cConnected, %{public}d, location services, %{public}d, minDistanceToFence, %{private}.1lf", v31, 40, *(_OWORD *)v31, *(_QWORD *)&v31[16], v32, *(_QWORD *)&v5);
LABEL_39:
      v23 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::scheduleNextDeassociationDelayedTrigger(const CFAbsoluteTime &)", "%s\n", v21);
      if (v23 != buf)
        free(v23);
    }
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v22 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Fence: avoid scheduleNextDeassociationDelayedTrigger", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      *(_WORD *)v31 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: avoid scheduleNextDeassociationDelayedTrigger", v31, 2, *(_OWORD *)v31, *(_QWORD *)&v31[16], v32, v33);
      goto LABEL_39;
    }
  }
}

uint64_t sub_100D589C4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 280))(*(_QWORD *)(a1 + 1768));
}

void sub_100D589D4(uint64_t a1, double a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: Got kNotificationReCheckContinuousEngagement", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: Got kNotificationReCheckContinuousEngagement", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitor::reCheckContinuousEngagment(const CFAbsoluteTime)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_10016CFF8(a1, a2);
}

void sub_100D58B7C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  id v5;
  uint64_t v6;
  const char *v7;
  std::string *v8;
  _DWORD v9[4];
  std::string buf;
  std::string v11;
  std::string v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[21];
  std::string v20;
  id v21;
  void *__p[177];

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: Got kNotificationFenceDownloadRequest", (uint8_t *)&buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    LOWORD(v9[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: Got kNotificationFenceDownloadRequest", v9, 2);
    v8 = (std::string *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitor::fenceDownloadRequest(const CLFenceManager_Type::Fence &)", "%s\n", v7);
    if (v8 != &buf)
      free(v8);
  }
  sub_100D24E84((char *)&buf);
  std::string::operator=(&buf, (const std::string *)a2);
  std::string::operator=(&v11, (const std::string *)(a2 + 24));
  std::string::operator=(&v12, (const std::string *)(a2 + 48));
  v17 = *(_OWORD *)(a2 + 136);
  v18 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)v19 = *(_OWORD *)(a2 + 168);
  *(_QWORD *)&v19[13] = *(_QWORD *)(a2 + 181);
  v13 = *(_OWORD *)(a2 + 72);
  v14 = *(_OWORD *)(a2 + 88);
  v15 = *(_OWORD *)(a2 + 104);
  v16 = *(_OWORD *)(a2 + 120);
  std::string::operator=(&v20, (const std::string *)(a2 + 192));
  v5 = v21;
  v21 = *(id *)(a2 + 216);

  if (&buf != (std::string *)a2)
    sub_1002F3538((char *)__p, *(char **)(a2 + 224), *(_QWORD *)(a2 + 232), (uint64_t)(*(_QWORD *)(a2 + 232) - *(_QWORD *)(a2 + 224)) >> 4);
  v6 = *(_QWORD *)(a1 + 1768);
  v9[0] = 4;
  (*(void (**)(uint64_t, _DWORD *, std::string *))(*(_QWORD *)v6 + 96))(v6, v9, &buf);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
}

void sub_100D58E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_100D58E70(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  const char *v10;
  char *v11;
  const char *v12;
  char *v13;
  uint64_t v14;
  _BYTE __p[28];
  _BYTE buf[12];
  __int16 v17;
  _BYTE v18[18];
  uint64_t v19;
  uint64_t v20;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a1 + 1824);
    v6 = *(unsigned __int8 *)(a1 + 613);
    *(_DWORD *)buf = 134284035;
    *(_QWORD *)&buf[4] = v5;
    v17 = 1026;
    *(_DWORD *)v18 = v6;
    *(_WORD *)&v18[4] = 2082;
    *(_QWORD *)&v18[6] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: createStateDatabase, fStateDatabase, %{private}p, fDeviceUnlockedSinceBoot, %{public}d, reason, %{public}s", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v8 = *(_QWORD *)(a1 + 1824);
    v9 = *(unsigned __int8 *)(a1 + 613);
    *(_DWORD *)__p = 134284035;
    *(_QWORD *)&__p[4] = v8;
    *(_WORD *)&__p[12] = 1026;
    *(_DWORD *)&__p[14] = v9;
    *(_WORD *)&__p[18] = 2082;
    *(_QWORD *)&__p[20] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: createStateDatabase, fStateDatabase, %{private}p, fDeviceUnlockedSinceBoot, %{public}d, reason, %{public}s", __p, 28);
    v11 = (char *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::createStateDatabase(const char *)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if (!*(_QWORD *)(a1 + 1824) && *(_BYTE *)(a1 + 613))
  {
    if (*(_DWORD *)(a1 + 1816) == 1)
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v7 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Fence: createStateDatabase in memory", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        *(_WORD *)__p = 0;
        LODWORD(v14) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: createStateDatabase in memory", __p, v14);
        v13 = (char *)v12;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::createStateDatabase(const char *)", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
      sub_1015A2E04(__p, "");
      *(_QWORD *)buf = 3;
      *(_WORD *)&buf[8] = 0;
      if ((__p[23] & 0x80000000) != 0)
      {
        sub_100115CE4(&v18[2], *(void **)__p, *(unint64_t *)&__p[8]);
        v20 = 0;
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      else
      {
        *(_OWORD *)&v18[2] = *(_OWORD *)__p;
        v19 = *(_QWORD *)&__p[16];
        v20 = 0;
      }
      operator new();
    }
    operator new();
  }
}

void sub_100D59290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100D59308(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  std::string *v4;
  uint64_t v5;
  NSObject *v10;
  size_t v11;
  std::string *v12;
  const void *v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *p_p;
  std::string *v20;
  NSObject *v21;
  size_t v22;
  std::string *v23;
  const void *v24;
  int v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  uint64_t v31;
  std::string *v32;
  std::string *v33;
  std::string *v34;
  uint64_t *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  size_t v43;
  std::string *v44;
  const void *v45;
  int v46;
  const std::string::value_type *v47;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  uint64_t v52;
  std::string *v53;
  std::string *v54;
  std::string *v55;
  NSObject *v56;
  const char *v57;
  NSObject *v58;
  _QWORD *v59;
  _QWORD *v60;
  int *v61;
  uint64_t v62;
  NSObject *v63;
  int v64;
  _BOOL4 v65;
  uint64_t v66;
  int v67;
  const char *v68;
  std::string *v69;
  NSObject *v70;
  double v71;
  double *v72;
  NSObject *v73;
  NSObject *v74;
  int v75;
  std::string::size_type v76;
  std::string *v77;
  std::string *v78;
  NSObject *v79;
  const void *v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t v83;
  double v84;
  int v85;
  uint64_t v86;
  int v87;
  unint64_t v88;
  int v89;
  int v90;
  std::string::size_type *v91;
  int v92;
  int v93;
  int v94;
  NSObject *v95;
  std::string::size_type v96;
  std::string *v97;
  uint64_t v98;
  std::string::size_type v99;
  _BYTE *v100;
  std::string *v101;
  std::string *v102;
  double v103;
  double v104;
  NSObject *v105;
  std::string *v106;
  NSObject *v107;
  std::string *v108;
  uint64_t v109;
  std::string::size_type v110;
  std::string *v111;
  _BYTE *v112;
  NSObject *v113;
  _QWORD *v114;
  _QWORD *v115;
  const char *v116;
  uint64_t v117;
  int v118;
  std::string::size_type v119;
  std::string *v120;
  _BYTE *v121;
  std::string *v122;
  std::string *v123;
  void *v124;
  _QWORD *v125;
  unint64_t v126;
  unint64_t v127;
  const char *v128;
  std::string *v129;
  const char *v130;
  std::string *v131;
  uint64_t v132;
  double v133;
  int v134;
  uint64_t v135;
  int v136;
  const char *v137;
  std::string *v138;
  uint64_t v139;
  std::string *v140;
  std::string *v141;
  uint64_t v142;
  std::string *v143;
  std::string *v144;
  std::string *v145;
  uint64_t v146;
  unint64_t v147;
  const void **v148;
  uint64_t v149;
  std::string __p;
  unint64_t v151;
  _BYTE v152[10];
  __int16 v153;
  double v154;
  __int16 v155;
  int v156;
  __int16 v157;
  uint64_t v158;
  __int16 v159;
  int v160;
  _BYTE buf[12];
  __int16 v162;
  std::string *v163;
  char v164;
  int v165;
  std::string *v166;
  __int16 v167;
  _BYTE *v168;
  std::string v169;
  unint64_t v170;
  _BYTE v171[10];
  __int16 v172;
  double v173;
  __int16 v174;
  int v175;
  __int16 v176;
  uint64_t v177;
  __int16 v178;
  int v179;
  uint64_t v180;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v10 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a2 + 23) >= 0)
      v11 = *(unsigned __int8 *)(a2 + 23);
    else
      v11 = *(_QWORD *)(a2 + 8);
    v12 = &v169;
    sub_100259584((uint64_t)&v169, v11 + 1);
    if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v12 = (std::string *)v169.__r_.__value_.__r.__words[0];
    if (v11)
    {
      if (*(char *)(a2 + 23) >= 0)
        v13 = (const void *)a2;
      else
        v13 = *(const void **)a2;
      memmove(v12, v13, v11);
    }
    *(_WORD *)((char *)&v12->__r_.__value_.__l.__data_ + v11) = 47;
    v14 = *(char *)(a2 + 47);
    if (v14 >= 0)
      v15 = (const std::string::value_type *)(a2 + 24);
    else
      v15 = *(const std::string::value_type **)(a2 + 24);
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(a2 + 47);
    else
      v16 = *(_QWORD *)(a2 + 32);
    v17 = std::string::append(&v169, v15, v16);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v169.__r_.__value_.__l.__data_);
    v4 = (std::string *)SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    sub_100B6D7F8(a3, &v169);
    p_p = &__p;
    if ((int)v4 < 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v169;
    else
      v20 = (std::string *)v169.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136380931;
    *(_QWORD *)&buf[4] = p_p;
    v162 = 2081;
    v163 = v20;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Fence: startMonitoringNow, fence, %{private}s, status, %{private}s", buf, 0x16u);
    if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v169.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v169, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v109 = qword_1022A0068;
    sub_100914D68((const void **)a2, &__p);
    v4 = (std::string *)SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v110 = __p.__r_.__value_.__r.__words[0];
    sub_100B6D7F8(a3, buf);
    v111 = &__p;
    if ((int)v4 < 0)
      v111 = (std::string *)v110;
    if (v164 >= 0)
      v112 = buf;
    else
      v112 = *(_BYTE **)buf;
    v165 = 136380931;
    v166 = v111;
    v167 = 2081;
    v168 = v112;
    _os_log_send_and_compose_impl(2, 0, &v169, 1628, &_mh_execute_header, v109, 2, "Fence: startMonitoringNow, fence, %{private}s, status, %{private}s", &v165, 22);
    v10 = v113;
    if (v164 < 0)
      operator delete(*(void **)buf);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::startMonitoringNow(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &)", "%s\n", (const char *)v10);
    if (v10 != &v169)
      free(v10);
  }
  if (*(_DWORD *)(a2 + 184) == -1)
  {
    sub_101928E7C();
    __break(1u);
    goto LABEL_254;
  }
  v10 = (a1 + 240);
  v4 = &v169;
  v5 = a1 + 248;
  if (a1 + 248 != sub_10016FC40(a1 + 240, (unsigned __int8 *)a2))
  {
    if (qword_1022A0060 == -1)
    {
LABEL_35:
      v21 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        if (*(char *)(a2 + 23) >= 0)
          v22 = *(unsigned __int8 *)(a2 + 23);
        else
          v22 = *(_QWORD *)(a2 + 8);
        v23 = &v169;
        sub_100259584((uint64_t)&v169, v22 + 1);
        if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v23 = (std::string *)v169.__r_.__value_.__r.__words[0];
        if (v22)
        {
          if (*(char *)(a2 + 23) >= 0)
            v24 = (const void *)a2;
          else
            v24 = *(const void **)a2;
          memmove(v23, v24, v22);
        }
        *(_WORD *)((char *)&v23->__r_.__value_.__l.__data_ + v22) = 47;
        v25 = *(char *)(a2 + 47);
        if (v25 >= 0)
          v26 = (const std::string::value_type *)(a2 + 24);
        else
          v26 = *(const std::string::value_type **)(a2 + 24);
        if (v25 >= 0)
          v27 = *(unsigned __int8 *)(a2 + 47);
        else
          v27 = *(_QWORD *)(a2 + 32);
        v28 = std::string::append(&v169, v26, v27);
        v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v169.__r_.__value_.__l.__data_);
        v30 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
        LODWORD(v169.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)v4->__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Fence: startMonitoringNow, fence, %{private}s, is already in fMonitoredFences", (uint8_t *)&v169, 0xCu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&v169, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v31 = qword_1022A0068;
        sub_100914D68((const void **)a2, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v32 = &__p;
        else
          v32 = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136380675;
        *(_QWORD *)&buf[4] = v32;
        LODWORD(v146) = 12;
        _os_log_send_and_compose_impl(2, 0, &v169, 1628, &_mh_execute_header, v31, 2, "Fence: startMonitoringNow, fence, %{private}s, is already in fMonitoredFences", buf, v146);
        v34 = v33;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::startMonitoringNow(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &)", "%s\n", (const char *)v34);
        if (v34 != &v169)
          free(v34);
      }
      goto LABEL_74;
    }
LABEL_254:
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
    goto LABEL_35;
  }
  v169.__r_.__value_.__r.__words[0] = a2;
  v35 = sub_100D6405C((uint64_t **)(a1 + 240), (unsigned __int8 *)a2, (uint64_t)&unk_101B9EB60, (__int128 **)&v169);
  v36 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v35 + 35) = *(_OWORD *)a3;
  *(_OWORD *)(v35 + 37) = v36;
  v37 = *(_OWORD *)(a3 + 32);
  v38 = *(_OWORD *)(a3 + 48);
  v39 = *(_OWORD *)(a3 + 64);
  v35[45] = *(_QWORD *)(a3 + 80);
  *(_OWORD *)(v35 + 41) = v38;
  *(_OWORD *)(v35 + 43) = v39;
  *(_OWORD *)(v35 + 39) = v37;
  if (*(_QWORD *)(a2 + 232) == *(_QWORD *)(a2 + 224))
  {
    if ((_os_feature_enabled_impl("CoreLocation", "cl_fence_handoff") & 1) != 0)
      goto LABEL_74;
    v40 = 64;
  }
  else
  {
    v40 = 8;
  }
  if ((*(_QWORD *)(a2 + 160) & v40) != 0)
  {
    *(_BYTE *)(a1 + 731) = 1;
    sub_1009EFDC0((uint64_t **)(a1 + 264), (unsigned __int8 *)a2, (__int128 *)a2);
  }
LABEL_74:
  v149 = sub_10016FC40((uint64_t)v10, (unsigned __int8 *)a2);
  v41 = v149;
  if (v5 == v149)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v56 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v169.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_FAULT, "Fence: crirital error!", (uint8_t *)&v169, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(&v169, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    LODWORD(v146) = 2;
    _os_log_send_and_compose_impl(2, 0, &v169, 1628, &_mh_execute_header, qword_1022A0068, 17, "Fence: crirital error!", &__p, v146);
    v55 = (std::string *)v57;
    sub_100512490("Generic", 1, 0, 0, "void CLFenceMonitor::startMonitoringNow(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &)", "%s\n", v57);
LABEL_262:
    if (v55 == &v169)
      return;
    goto LABEL_263;
  }
  if (*(_BYTE *)(a1 + 612))
  {
    if ((*(_BYTE *)(a2 + 160) & 0x80) != 0)
    {
      sub_100D5AFE8(a1, a2);
      v41 = v149;
    }
    v148 = (const void **)(v41 + 32);
    *(_OWORD *)(v41 + 304) = xmmword_101C22920;
    if (*(_BYTE *)(v41 + 284))
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v42 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        if (*(char *)(v41 + 55) >= 0)
          v43 = *(unsigned __int8 *)(v41 + 55);
        else
          v43 = *(_QWORD *)(v41 + 40);
        sub_100259584((uint64_t)&v169, v43 + 1);
        if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v44 = &v169;
        else
          v44 = (std::string *)v169.__r_.__value_.__r.__words[0];
        if (v43)
        {
          if (*(char *)(v149 + 55) >= 0)
            v45 = (const void *)(v41 + 32);
          else
            v45 = *(const void **)(v149 + 32);
          memmove(v44, v45, v43);
        }
        *(_WORD *)((char *)&v44->__r_.__value_.__l.__data_ + v43) = 47;
        v46 = *(char *)(v149 + 79);
        if (v46 >= 0)
          v47 = (const std::string::value_type *)(v149 + 56);
        else
          v47 = *(const std::string::value_type **)(v149 + 56);
        if (v46 >= 0)
          v48 = *(unsigned __int8 *)(v149 + 79);
        else
          v48 = *(_QWORD *)(v149 + 64);
        v49 = std::string::append(&v169, v47, v48);
        v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v169.__r_.__value_.__l.__data_);
        v51 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v51 = (std::string *)__p.__r_.__value_.__r.__words[0];
        LODWORD(v169.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)v4->__r_.__value_.__r.__words + 4) = (std::string::size_type)v51;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "Fence: fence is already monitored, %{private}s", (uint8_t *)&v169, 0xCu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(&v169, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v52 = qword_1022A0068;
      sub_100914D68(v148, &__p);
      v53 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136380675;
      *(_QWORD *)&buf[4] = v53;
      LODWORD(v146) = 12;
      _os_log_send_and_compose_impl(2, 0, &v169, 1628, &_mh_execute_header, v52, 2, "Fence: fence is already monitored, %{private}s", buf, v146);
      v55 = v54;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::startMonitoringNow(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &)", "%s\n", (const char *)v55);
      if (v55 == &v169)
        return;
LABEL_263:
      free(v55);
      return;
    }
    *(_BYTE *)(v41 + 284) = 1;
    sub_100D4B008(a1, a2, *(_DWORD *)(a1 + 608));
    sub_100ED2B94((int64x2_t *)(a1 + 1312), (uint64_t)v148);
    v61 = (int *)(v149 + 280);
    v62 = *(_QWORD *)(a1 + 1824);
    if (v62)
    {
      *v61 = sub_10064D5E4(v62, a2);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v63 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        v64 = *v61;
        LODWORD(v169.__r_.__value_.__l.__data_) = 67174657;
        HIDWORD(v169.__r_.__value_.__r.__words[0]) = v64;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "Fence: state, retrieved %{private}d", (uint8_t *)&v169, 8u);
      }
      v65 = sub_1001BFF7C(115, 2);
      v66 = v149;
      if (!v65)
      {
LABEL_150:
        *(_DWORD *)(v66 + 348) = 0;
        if ((*(_BYTE *)(v66 + 192) & 0x10) != 0)
          v71 = 30.0;
        else
          v71 = 300.0;
        if (*(_QWORD *)(a1 + 256) >= 2uLL
          && (v72 = (double *)(a1 + 308), *(double *)(a1 + 308) >= 0.0)
          && vabdd_f64(a4, *(double *)(a1 + 364)) <= v71)
        {
          sub_10016CFDC(a1 + 288);
          v103 = vabdd_f64(a4, *(double *)(a1 + 364));
          v104 = *v72;
          if (*v72 >= 0.0 && v103 <= v71)
          {
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_1021826B0);
            v105 = qword_1022A0068;
            if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
            {
              sub_100071A00(a1 + 288, &v169);
              v106 = (v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                   ? &v169
                   : (std::string *)v169.__r_.__value_.__r.__words[0];
              LODWORD(__p.__r_.__value_.__l.__data_) = 136380675;
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v106;
              _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_DEBUG, "Fence: filtered fLastLocation, %{private}s", (uint8_t *)&__p, 0xCu);
              if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v169.__r_.__value_.__l.__data_);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(&v169, 0x65CuLL);
              if (qword_1022A0060 != -1)
                dispatch_once(&qword_1022A0060, &stru_1021826B0);
              v142 = qword_1022A0068;
              sub_100071A00(a1 + 288, &__p);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v143 = &__p;
              else
                v143 = (std::string *)__p.__r_.__value_.__r.__words[0];
              *(_DWORD *)buf = 136380675;
              *(_QWORD *)&buf[4] = v143;
              LODWORD(v146) = 12;
              _os_log_send_and_compose_impl(2, 0, &v169, 1628, &_mh_execute_header, v142, 2, "Fence: filtered fLastLocation, %{private}s", buf, v146);
              v145 = v144;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::startMonitoringNow(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &)", "%s\n", (const char *)v145);
              if (v145 != &v169)
                free(v145);
            }
            sub_100D5B1B0(a1, v148, a1 + 288, v61, 0, a4);
            sub_10012A33C(&v169);
            sub_100D50B40(a1, (_OWORD *)(a1 + 288), (uint64_t)&v169, (uint64_t)v148, (uint64_t)v61, 1, 1, a4);
            sub_100261F44((uint64_t)&v180);
            v104 = *v72;
          }
          if (v104 >= 0.0 && !sub_100B6ECF0(a1 + 288) && v103 <= v71)
            goto LABEL_163;
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          v107 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
          {
            sub_100071A00(a1 + 288, &v169);
            v108 = (v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                 ? &v169
                 : (std::string *)v169.__r_.__value_.__r.__words[0];
            LODWORD(__p.__r_.__value_.__l.__data_) = 136380675;
            *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v108;
            _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEBUG, "Fence: request scan, current location, %{private}s", (uint8_t *)&__p, 0xCu);
            if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v169.__r_.__value_.__l.__data_);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_161;
          bzero(&v169, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          v139 = qword_1022A0068;
          sub_100071A00(a1 + 288, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v140 = &__p;
          else
            v140 = (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136380675;
          *(_QWORD *)&buf[4] = v140;
          LODWORD(v146) = 12;
          _os_log_send_and_compose_impl(2, 0, &v169, 1628, &_mh_execute_header, v139, 2, "Fence: request scan, current location, %{private}s", buf, v146);
          v129 = v141;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::startMonitoringNow(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &)", "%s\n", (const char *)v129);
          if (v129 == &v169)
          {
LABEL_161:
            sub_100D4DDB8(a1, a4);
            if ((*(_BYTE *)(v149 + 192) & 0x10) != 0)
              (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 328))(*(_QWORD *)(a1 + 1768));
LABEL_163:
            sub_10016CFF8(a1, a4);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_1021826B0);
            v74 = qword_1022A0068;
            if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
            {
              sub_100C3B9BC((uint64_t)v148, &v169);
              v75 = SHIBYTE(v169.__r_.__value_.__r.__words[2]);
              v76 = v169.__r_.__value_.__r.__words[0];
              sub_100B6D7F8((uint64_t)v61, &__p);
              v77 = &v169;
              if (v75 < 0)
                v77 = (std::string *)v76;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v78 = &__p;
              else
                v78 = (std::string *)__p.__r_.__value_.__r.__words[0];
              *(_DWORD *)buf = 136380931;
              *(_QWORD *)&buf[4] = v77;
              v162 = 2081;
              v163 = v78;
              _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "Started monitoring, %{private}s, monitoringStatus, %{private}s", buf, 0x16u);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v169.__r_.__value_.__l.__data_);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(&v169, 0x65CuLL);
              if (qword_1022A0060 != -1)
                dispatch_once(&qword_1022A0060, &stru_1021826B0);
              v117 = qword_1022A0068;
              sub_100C3B9BC((uint64_t)v148, &__p);
              v118 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
              v119 = __p.__r_.__value_.__r.__words[0];
              sub_100B6D7F8((uint64_t)v61, buf);
              v120 = &__p;
              if (v118 < 0)
                v120 = (std::string *)v119;
              if (v164 >= 0)
                v121 = buf;
              else
                v121 = *(_BYTE **)buf;
              v165 = 136380931;
              v166 = v120;
              v167 = 2081;
              v168 = v121;
              LODWORD(v146) = 22;
              _os_log_send_and_compose_impl(2, 0, &v169, 1628, &_mh_execute_header, v117, 2, "Started monitoring, %{private}s, monitoringStatus, %{private}s", &v165, v146);
              v123 = v122;
              if (v164 < 0)
                operator delete(*(void **)buf);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::startMonitoringNow(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &)", "%s\n", (const char *)v123);
              if (v123 != &v169)
                free(v123);
            }
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_1021826B0);
            v79 = qword_1022A0068;
            if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
            {
              v80 = (const void *)(v41 + 32);
              if (*(char *)(v149 + 55) < 0)
                v80 = *v148;
              v81 = (_QWORD *)(v149 + 56);
              if (*(char *)(v149 + 79) < 0)
                v81 = (_QWORD *)*v81;
              if (*(_QWORD *)(v149 + 264) == *(_QWORD *)(v149 + 256))
              {
                v82 = *(_QWORD *)(v149 + 104);
                v83 = *(_QWORD *)(v149 + 112);
              }
              else
              {
                v82 = 0xBFF0000000000000;
                v83 = 0xBFF0000000000000;
              }
              v84 = sub_10016F694((uint64_t)v148);
              v85 = *(_DWORD *)(v149 + 288);
              v86 = *(_QWORD *)(a1 + 256);
              v87 = *(unsigned __int8 *)(a1 + 613);
              LODWORD(v169.__r_.__value_.__l.__data_) = 136448003;
              *(std::string::size_type *)((char *)v169.__r_.__value_.__r.__words + 4) = (std::string::size_type)v80;
              WORD2(v169.__r_.__value_.__r.__words[1]) = 2081;
              *(std::string::size_type *)((char *)&v169.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v81;
              HIWORD(v169.__r_.__value_.__r.__words[2]) = 2049;
              v170 = v82;
              *(_WORD *)v171 = 2049;
              *(_QWORD *)&v171[2] = v83;
              v172 = 2050;
              v173 = v84;
              v174 = 1025;
              v175 = v85;
              v176 = 2050;
              v177 = v86;
              v178 = 1026;
              v179 = v87;
              _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "Fence:Start Started monitoring fence %{public}s/%{private}s (<%{private}+.8f,%{private}+.8f>, radius %{public}.3f, active tech %{private}d), numFences, %{public}zu, unlocked, %{public}d", (uint8_t *)&v169, 0x4Au);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(&v169, 0x65CuLL);
              if (qword_1022A0060 != -1)
                dispatch_once(&qword_1022A0060, &stru_1021826B0);
              v124 = v148;
              if (*(char *)(v149 + 55) < 0)
                v124 = (void *)*v148;
              v125 = (_QWORD *)(v149 + 56);
              if (*(char *)(v149 + 79) < 0)
                v125 = (_QWORD *)*v125;
              if (*(_QWORD *)(v149 + 264) == *(_QWORD *)(v149 + 256))
              {
                v126 = *(_QWORD *)(v149 + 104);
                v127 = *(_QWORD *)(v149 + 112);
              }
              else
              {
                v126 = 0xBFF0000000000000;
                v127 = 0xBFF0000000000000;
              }
              v132 = qword_1022A0068;
              v133 = sub_10016F694((uint64_t)v148);
              v134 = *(_DWORD *)(v149 + 288);
              v135 = *(_QWORD *)(a1 + 256);
              v136 = *(unsigned __int8 *)(a1 + 613);
              LODWORD(__p.__r_.__value_.__l.__data_) = 136448003;
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v124;
              WORD2(__p.__r_.__value_.__r.__words[1]) = 2081;
              *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v125;
              HIWORD(__p.__r_.__value_.__r.__words[2]) = 2049;
              v151 = v126;
              *(_WORD *)v152 = 2049;
              *(_QWORD *)&v152[2] = v127;
              v153 = 2050;
              v154 = v133;
              v155 = 1025;
              v156 = v134;
              v157 = 2050;
              v158 = v135;
              v159 = 1026;
              v160 = v136;
              LODWORD(v146) = 74;
              _os_log_send_and_compose_impl(2, 0, &v169, 1628, &_mh_execute_header, v132, 0, "Fence:Start Started monitoring fence %{public}s/%{private}s (<%{private}+.8f,%{private}+.8f>, radius %{public}.3f, active tech %{private}d), numFences, %{public}zu, unlocked, %{public}d", &__p, v146);
              v138 = (std::string *)v137;
              sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::startMonitoringNow(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &)", "%s\n", v137);
              if (v138 != &v169)
                free(v138);
            }
            v88 = *(_QWORD *)(v149 + 264) - *(_QWORD *)(v149 + 256);
            if (v88)
            {
              v147 = v88 >> 4;
              if ((int)(v88 >> 4) >= -8)
              {
                v89 = 0;
                v90 = ((int)v147 - 1) / 10;
                v91 = (std::string::size_type *)(v149 + 56);
                v92 = -1;
                v93 = v88 >> 4;
                do
                {
                  if (v89 >= v90)
                    v94 = v93;
                  else
                    v94 = 10;
                  if (qword_1022A0060 != -1)
                    dispatch_once(&qword_1022A0060, &stru_1021826B0);
                  ++v89;
                  v95 = qword_1022A0068;
                  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
                  {
                    v96 = v149 + 56;
                    if (*(char *)(v149 + 79) < 0)
                      v96 = *v91;
                    sub_100C3C08C((uint64_t)v148, v92 + 1, v94 + v92, &__p);
                    v97 = &__p;
                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v97 = (std::string *)__p.__r_.__value_.__r.__words[0];
                    LODWORD(v169.__r_.__value_.__l.__data_) = 136447235;
                    *(std::string::size_type *)((char *)v169.__r_.__value_.__r.__words + 4) = v96;
                    WORD2(v169.__r_.__value_.__r.__words[1]) = 1026;
                    *(_DWORD *)((char *)&v169.__r_.__value_.__r.__words[1] + 6) = v147;
                    WORD1(v169.__r_.__value_.__r.__words[2]) = 1026;
                    HIDWORD(v169.__r_.__value_.__r.__words[2]) = v89;
                    LOWORD(v170) = 1024;
                    *(_DWORD *)((char *)&v170 + 2) = v90 + 1;
                    HIWORD(v170) = 2081;
                    *(_QWORD *)v171 = v97;
                    _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "Fence:Poly, %{public}s, %{public}d, %{public}d, %{publice}d, %{private}s", (uint8_t *)&v169, 0x28u);
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  if (sub_1001BFF7C(115, 2))
                  {
                    bzero(&v169, 0x65CuLL);
                    if (qword_1022A0060 != -1)
                      dispatch_once(&qword_1022A0060, &stru_1021826B0);
                    v98 = qword_1022A0068;
                    v99 = v149 + 56;
                    if (*(char *)(v149 + 79) < 0)
                      v99 = *v91;
                    sub_100C3C08C((uint64_t)v148, v92 + 1, v94 + v92, buf);
                    v100 = buf;
                    if (v164 < 0)
                      v100 = *(_BYTE **)buf;
                    LODWORD(__p.__r_.__value_.__l.__data_) = 136447235;
                    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v99;
                    WORD2(__p.__r_.__value_.__r.__words[1]) = 1026;
                    *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v147;
                    WORD1(__p.__r_.__value_.__r.__words[2]) = 1026;
                    HIDWORD(__p.__r_.__value_.__r.__words[2]) = v89;
                    LOWORD(v151) = 1024;
                    *(_DWORD *)((char *)&v151 + 2) = v90 + 1;
                    HIWORD(v151) = 2081;
                    *(_QWORD *)v152 = v100;
                    LODWORD(v146) = 40;
                    _os_log_send_and_compose_impl(2, 0, &v169, 1628, &_mh_execute_header, v98, 0, "Fence:Poly, %{public}s, %{public}d, %{public}d, %{publice}d, %{private}s", &__p, v146);
                    v102 = v101;
                    if (v164 < 0)
                      operator delete(*(void **)buf);
                    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::startMonitoringNow(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &)", "%s\n", (const char *)v102);
                    if (v102 != &v169)
                      free(v102);
                  }
                  v92 += 10;
                  v93 -= 10;
                }
                while ((v90 & ~(v90 >> 31)) + 1 != v89);
              }
            }
            return;
          }
        }
        else
        {
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          v73 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(v169.__r_.__value_.__l.__data_) = 0;
            _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "Fence: request scan, no current location", (uint8_t *)&v169, 2u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_161;
          bzero(&v169, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          LOWORD(__p.__r_.__value_.__l.__data_) = 0;
          LODWORD(v146) = 2;
          _os_log_send_and_compose_impl(2, 0, &v169, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: request scan, no current location", &__p, v146);
          v129 = (std::string *)v128;
          sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::startMonitoringNow(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &)", "%s\n", v128);
          if (v129 == &v169)
            goto LABEL_161;
        }
        free(v129);
        goto LABEL_161;
      }
      bzero(&v169, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v67 = *v61;
      LODWORD(__p.__r_.__value_.__l.__data_) = 67174657;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = v67;
      LODWORD(v146) = 8;
      _os_log_send_and_compose_impl(2, 0, &v169, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: state, retrieved %{private}d", &__p, v146);
      v69 = (std::string *)v68;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::startMonitoringNow(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &)", "%s\n", v68);
      if (v69 != &v169)
        free(v69);
    }
    else
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v70 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v169.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "#Warning Fence: state startMonitoringNow, before first unlock", (uint8_t *)&v169, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&v169, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        LODWORD(v146) = 2;
        _os_log_send_and_compose_impl(2, 0, &v169, 1628, &_mh_execute_header, qword_1022A0068, 0, "#Warning Fence: state startMonitoringNow, before first unlock", &__p, v146);
        v131 = (std::string *)v130;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::startMonitoringNow(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &)", "%s\n", v130);
        if (v131 != &v169)
          free(v131);
      }
      *v61 = -1;
    }
    v66 = v149;
    goto LABEL_150;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v58 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    v59 = (_QWORD *)(v149 + 32);
    if (*(char *)(v149 + 55) < 0)
      v59 = (_QWORD *)*v59;
    v60 = (_QWORD *)(v149 + 56);
    if (*(char *)(v149 + 79) < 0)
      v60 = (_QWORD *)*v60;
    LODWORD(v169.__r_.__value_.__l.__data_) = 136380931;
    *(std::string::size_type *)((char *)v169.__r_.__value_.__r.__words + 4) = (std::string::size_type)v59;
    WORD2(v169.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&v169.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v60;
    _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "Fence: Location services is disabled; not starting monitoring for %{private}s/%{private}s",
      (uint8_t *)&v169,
      0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v169, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v114 = (_QWORD *)(v149 + 32);
    if (*(char *)(v149 + 55) < 0)
      v114 = (_QWORD *)*v114;
    v115 = (_QWORD *)(v149 + 56);
    if (*(char *)(v149 + 79) < 0)
      v115 = (_QWORD *)*v115;
    LODWORD(__p.__r_.__value_.__l.__data_) = 136380931;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v114;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v115;
    LODWORD(v146) = 22;
    _os_log_send_and_compose_impl(2, 0, &v169, 1628, &_mh_execute_header, qword_1022A0068, 0, "Fence: Location services is disabled; not starting monitoring for %{private}s/%{private}s",
      &__p,
      v146);
    v55 = (std::string *)v116;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::startMonitoringNow(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &)", "%s\n", v116);
    goto LABEL_262;
  }
}

void sub_100D5AF8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100D5AFE8(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if ((*(_BYTE *)(a2 + 160) & 0x80) != 0)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 408))(*(_QWORD *)(a1 + 1768));
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v2 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "#ignificantRegion: Attempt to start loi monitoring", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "#ignificantRegion: Attempt to start loi monitoring", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 0, "void CLFenceMonitor::startMonitoringLoiIfNeeded(const CLFenceManager_Type::Fence &)", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
}

void sub_100D5B1B0(uint64_t a1, const void **a2, uint64_t a3, _DWORD *a4, int a5, double a6)
{
  int v11;

  v11 = sub_100D5C8E8(a1, (uint64_t)a2, a4, a3);
  sub_100D5BCA4(a1, a2, a4, v11, a5, a6);
}

void sub_100D5B210(uint64_t **a1, unsigned __int8 *a2, double a3)
{
  uint64_t **v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t *v6;
  double v7;
  NSObject *v8;
  void **v9;
  uint64_t *v10;
  void *v11;
  void **v12;
  uint64_t *v13;
  uint64_t *v14;
  const char *v15;
  char *v16;
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  id v25;
  void *v26;
  void *v27;
  int v28;
  void **v29;
  __int16 v30;
  uint64_t *v31;
  __int16 v32;
  uint64_t *v33;
  _BYTE buf[12];
  __int16 v35;
  uint64_t *v36;
  __int16 v37;
  void *__p;
  char v39;

  if ((a2[160] & 0x80) == 0)
  {
    sub_101928FE4();
    __break(1u);
LABEL_32:
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
    goto LABEL_4;
  }
  v4 = a2;
  v7 = a3;
  v3 = a1;
  sub_1001157C0((char *)v17);
  v5 = sub_100D5E27C((uint64_t)v3, v4, (uint64_t)v17);
  if (!v5)
    goto LABEL_18;
  v6 = &qword_1022A0000;
  if (qword_1022A0060 != -1)
    goto LABEL_32;
LABEL_4:
  v8 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    v9 = v19;
    if (v20 < 0)
      v9 = (void **)v19[0];
    if ((v4[23] & 0x80u) == 0)
      v10 = (uint64_t *)v4;
    else
      v10 = *(uint64_t **)v4;
    v11 = v4 + 24;
    if ((v4[47] & 0x80u) != 0)
      v11 = (void *)*((_QWORD *)v4 + 3);
    *(_DWORD *)buf = 136381187;
    *(_QWORD *)&buf[4] = v9;
    v35 = 2081;
    v36 = v10;
    v37 = 2081;
    __p = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#significantRegion: helper fence stop, %{private}s for [%{private}s/%{private}s", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v6[12] != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v12 = v19;
    if (v20 < 0)
      v12 = (void **)v19[0];
    if ((v4[23] & 0x80u) == 0)
      v13 = (uint64_t *)v4;
    else
      v13 = *(uint64_t **)v4;
    v14 = (uint64_t *)(v4 + 24);
    if ((v4[47] & 0x80u) != 0)
      v14 = (uint64_t *)*((_QWORD *)v4 + 3);
    v28 = 136381187;
    v29 = v12;
    v30 = 2081;
    v31 = v13;
    v32 = 2081;
    v33 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#significantRegion: helper fence stop, %{private}s for [%{private}s/%{private}s", &v28, 32);
    v16 = (char *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::stopMonitoringLoiIfNeeded(const CFAbsoluteTime, const CLFenceManager_Type::Fence &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  sub_100D5B5B4((uint64_t)v3, (uint64_t)v17, 1, v7);
  sub_1000BE57C(buf, (__int128 *)v19, (__int128 *)v17);
  sub_100D65238(v3 + 99, (const void **)buf);
  if (v39 < 0)
    operator delete(__p);
  if (SHIBYTE(v37) < 0)
    operator delete(*(void **)buf);
LABEL_18:
  sub_100D65290(v3 + 102, v4);
  if (v5)
    (*(void (**)(uint64_t *))(*v3[221] + 432))(v3[221]);
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }

  if (v24 < 0)
    operator delete(v23);
  if (v22 < 0)
    operator delete(v21);
  if (v20 < 0)
    operator delete(v19[0]);
  if (v18 < 0)
    operator delete(v17[0]);
}

void sub_100D5B570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1004E2BD0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100D5B5B4(uint64_t a1, uint64_t a2, int a3, double a4)
{
  NSObject *v8;
  std::string::size_type v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  size_t v14;
  std::string *v15;
  const void *v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  std::string *p_p;
  uint64_t v23;
  std::string *v24;
  std::string *v25;
  std::string *v26;
  uint64_t *v27;
  uint64_t v28;
  NSObject *v29;
  std::string::size_type v30;
  std::string::size_type v31;
  const char *v32;
  std::string *v33;
  const char *v34;
  std::string *v35;
  uint64_t v36;
  int v37;
  std::string *v38;
  std::string __p;
  std::string buf[68];

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v8 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *(_QWORD *)a2;
    if (*(char *)(a2 + 47) >= 0)
      v10 = a2 + 24;
    else
      v10 = *(_QWORD *)(a2 + 24);
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446467;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v9;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Fence:Stop stopMonitoringNow, fence, %{public}s/%{private}s", (uint8_t *)buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    if (*(char *)(a2 + 23) >= 0)
      v30 = a2;
    else
      v30 = *(_QWORD *)a2;
    if (*(char *)(a2 + 47) >= 0)
      v31 = a2 + 24;
    else
      v31 = *(_QWORD *)(a2 + 24);
    LODWORD(__p.__r_.__value_.__l.__data_) = 136446467;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v30;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v31;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Fence:Stop stopMonitoringNow, fence, %{public}s/%{private}s", &__p, 22);
    v33 = (std::string *)v32;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::stopMonitoringAFenceNow(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, BOOL)", "%s\n", v32);
    if (v33 != buf)
      free(v33);
  }
  v11 = sub_10016FC40(a1 + 240, (unsigned __int8 *)a2);
  if (a1 + 248 != v11)
  {
    sub_100ED2C24(a1 + 1312);
    sub_100D5BCA4(a1, (const void **)(v11 + 32), (_DWORD *)(v11 + 280), 0, 0, a4);
    if (*(_QWORD *)(v11 + 264) == *(_QWORD *)(v11 + 256))
    {
      if ((_os_feature_enabled_impl("CoreLocation", "cl_fence_handoff") & 1) != 0)
        goto LABEL_55;
      v12 = 64;
    }
    else
    {
      v12 = 8;
    }
    if ((*(_QWORD *)(v11 + 192) & v12) != 0)
    {
      v27 = (uint64_t *)sub_10016FC40(a1 + 264, (unsigned __int8 *)a2);
      if ((uint64_t *)(a1 + 272) == v27)
      {
        sub_10192914C();
        __break(1u);
        goto LABEL_77;
      }
      sub_10008A9F0((uint64_t **)(a1 + 264), v27);
      sub_1009EF874((uint64_t)(v27 + 4));
      operator delete(v27);
    }
LABEL_55:
    if (!*(_QWORD *)(a1 + 280))
      *(_BYTE *)(a1 + 731) = 0;
    *(_WORD *)(v11 + 284) = 0;
    if (!a3)
      goto LABEL_64;
    v28 = *(_QWORD *)(a1 + 1824);
    if (v28)
    {
      sub_10064C6EC(v28, a2);
LABEL_64:
      sub_100B6D7B8(v11 + 280);
      sub_10008A9F0((uint64_t **)(a1 + 240), (uint64_t *)v11);
      sub_100D63C94(v11 + 32);
      operator delete((void *)v11);
      return;
    }
    if (qword_1022A0060 == -1)
    {
LABEL_61:
      v29 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "Fence: state stopMonitoringAFenceNow, before first unlock", (uint8_t *)buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        LODWORD(v36) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 16, "Fence: state stopMonitoringAFenceNow, before first unlock", &__p, v36);
        v35 = (std::string *)v34;
        sub_100512490("Generic", 1, 0, 0, "void CLFenceMonitor::stopMonitoringAFenceNow(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, BOOL)", "%s\n", v34);
        if (v35 != buf)
          free(v35);
      }
      goto LABEL_64;
    }
LABEL_77:
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
    goto LABEL_61;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v13 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a2 + 23) >= 0)
      v14 = *(unsigned __int8 *)(a2 + 23);
    else
      v14 = *(_QWORD *)(a2 + 8);
    v15 = buf;
    sub_100259584((uint64_t)buf, v14 + 1);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v15 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    if (v14)
    {
      if (*(char *)(a2 + 23) >= 0)
        v16 = (const void *)a2;
      else
        v16 = *(const void **)a2;
      memmove(v15, v16, v14);
    }
    *(_WORD *)((char *)&v15->__r_.__value_.__l.__data_ + v14) = 47;
    v17 = *(char *)(a2 + 47);
    if (v17 >= 0)
      v18 = (const std::string::value_type *)(a2 + 24);
    else
      v18 = *(const std::string::value_type **)(a2 + 24);
    if (v17 >= 0)
      v19 = *(unsigned __int8 *)(a2 + 47);
    else
      v19 = *(_QWORD *)(a2 + 32);
    v20 = std::string::append(buf, v18, v19);
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136380675;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Fence: stopMonitoringNow, no such fence, %{private}s", (uint8_t *)buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v23 = qword_1022A0068;
    sub_100914D68((const void **)a2, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &__p;
    else
      v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v37 = 136380675;
    v38 = v24;
    LODWORD(v36) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 1, "Fence: stopMonitoringNow, no such fence, %{private}s", &v37, v36);
    v26 = v25;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::stopMonitoringAFenceNow(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, BOOL)", "%s\n", (const char *)v26);
    if (v26 != buf)
      free(v26);
  }
}

void sub_100D5BC80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100D5BCA4(uint64_t a1, const void **a2, _DWORD *a3, int a4, int a5, double a6)
{
  int v11;
  char v12;
  int v13;
  uint64_t *v14;
  NSObject *v15;
  size_t v16;
  std::string *v17;
  const void *v18;
  int v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  int v24;
  std::string *v25;
  int v26;
  std::string::size_type v27;
  std::string *v28;
  std::string *p_p;
  int v30;
  NSObject *v31;
  int v32;
  void *v33;
  const void **v34;
  unsigned int v35;
  NSObject *v36;
  int v37;
  void *v38;
  const void **v39;
  NSObject *v40;
  size_t v41;
  std::string *v42;
  const void *v43;
  int v44;
  const std::string::value_type *v45;
  std::string::size_type v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  int v50;
  std::string::size_type v51;
  std::string *v52;
  std::string *v53;
  uint64_t v54;
  int v55;
  std::string *v56;
  int v57;
  std::string::size_type v58;
  std::string *v59;
  std::string *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  std::string *v64;
  int v65;
  std::string::size_type v66;
  std::string *v67;
  std::string *v68;
  char *v69;
  char *v70;
  int v71;
  void *v72;
  const void **v73;
  const char *v74;
  uint8_t *v75;
  int v76;
  void *v77;
  const void **v78;
  const char *v79;
  uint8_t *v80;
  uint64_t v81;
  std::string v83;
  std::string __p;
  std::string v85;
  std::string v86;
  _BYTE v87[10];
  int v88;
  uint8_t buf[4];
  _BYTE v90[10];
  _BYTE v91[10];
  _BYTE v92[10];
  int v93;

  v11 = sub_100D5CEC0(a1);
  v12 = v11;
  v13 = v11 & a4;
  v14 = &qword_1022A0000;
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v15 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0)
      v16 = *((unsigned __int8 *)a2 + 23);
    else
      v16 = (size_t)a2[1];
    v17 = &v86;
    sub_100259584((uint64_t)&v86, v16 + 1);
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v17 = (std::string *)v86.__r_.__value_.__r.__words[0];
    if (v16)
    {
      if (*((char *)a2 + 23) >= 0)
        v18 = a2;
      else
        v18 = *a2;
      memmove(v17, v18, v16);
    }
    *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + v16) = 47;
    v19 = *((char *)a2 + 47);
    if (v19 >= 0)
      v20 = (const std::string::value_type *)(a2 + 3);
    else
      v20 = (const std::string::value_type *)a2[3];
    if (v19 >= 0)
      v21 = *((unsigned __int8 *)a2 + 47);
    else
      v21 = (std::string::size_type)a2[4];
    v22 = std::string::append(&v86, v20, v21);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v85.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v86.__r_.__value_.__l.__data_);
    v24 = a5;
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &v85;
    else
      v25 = (std::string *)v85.__r_.__value_.__r.__words[0];
    sub_10016F544(v13, &v86);
    v26 = SHIBYTE(v86.__r_.__value_.__r.__words[2]);
    v27 = v86.__r_.__value_.__r.__words[0];
    sub_10016F544(v12, &__p);
    v28 = &v86;
    if (v26 < 0)
      v28 = (std::string *)v27;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136381443;
    *(_QWORD *)v90 = v25;
    *(_WORD *)&v90[8] = 2081;
    *(_QWORD *)v91 = v28;
    *(_WORD *)&v91[8] = 2081;
    *(_QWORD *)v92 = p_p;
    *(_WORD *)&v92[8] = 1025;
    a5 = v24;
    v93 = v24;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "adjustTechLevel, fence, %{private}s, newOptions, %{private}s, availableTech, %{private}s, statusChanged, %{private}d", buf, 0x26u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v14 = &qword_1022A0000;
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v86.__r_.__value_.__l.__data_);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v54 = qword_1022A0068;
    sub_100914D68(a2, &v85);
    v55 = a5;
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v56 = &v85;
    else
      v56 = (std::string *)v85.__r_.__value_.__r.__words[0];
    sub_10016F544(v13, &__p);
    v57 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v58 = __p.__r_.__value_.__r.__words[0];
    sub_10016F544(v12, &v83);
    v59 = &__p;
    if (v57 < 0)
      v59 = (std::string *)v58;
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v60 = &v83;
    else
      v60 = (std::string *)v83.__r_.__value_.__r.__words[0];
    LODWORD(v86.__r_.__value_.__l.__data_) = 136381443;
    *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 4) = (std::string::size_type)v56;
    WORD2(v86.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&v86.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v59;
    HIWORD(v86.__r_.__value_.__r.__words[2]) = 2081;
    *(_QWORD *)v87 = v60;
    *(_WORD *)&v87[8] = 1025;
    v88 = v55;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v54, 2, "adjustTechLevel, fence, %{private}s, newOptions, %{private}s, availableTech, %{private}s, statusChanged, %{private}d", &v86, 38);
    v62 = v61;
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v83.__r_.__value_.__l.__data_);
    v14 = &qword_1022A0000;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::adjustTechLevel(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, MonitoringTechOptions, BOOL)", "%s\n", v62);
    LOBYTE(a5) = v55;
    if (v62 != (char *)buf)
      free(v62);
  }
  v30 = a3[2] & ~v13;
  if (v30)
  {
    if (v14[12] != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v31 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v32 = a3[2];
      if (*((char *)a2 + 23) >= 0)
        v33 = a2;
      else
        v33 = (void *)*a2;
      if (*((char *)a2 + 47) >= 0)
        v34 = a2 + 3;
      else
        v34 = (const void **)a2[3];
      *(_DWORD *)buf = 67175427;
      *(_DWORD *)v90 = v30;
      *(_WORD *)&v90[4] = 1025;
      *(_DWORD *)&v90[6] = v32;
      *(_WORD *)v91 = 2082;
      *(_QWORD *)&v91[2] = v33;
      *(_WORD *)v92 = 2081;
      *(_QWORD *)&v92[2] = v34;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "Stopping tech 0x%{private}x (active is 0x%{private}x) for %{public}s/%{private}s", buf, 0x22u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v14[12] != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v71 = a3[2];
      if (*((char *)a2 + 23) >= 0)
        v72 = a2;
      else
        v72 = (void *)*a2;
      if (*((char *)a2 + 47) >= 0)
        v73 = a2 + 3;
      else
        v73 = (const void **)a2[3];
      LODWORD(v86.__r_.__value_.__l.__data_) = 67175427;
      HIDWORD(v86.__r_.__value_.__r.__words[0]) = v30;
      LOWORD(v86.__r_.__value_.__r.__words[1]) = 1025;
      *(_DWORD *)((char *)&v86.__r_.__value_.__r.__words[1] + 2) = v71;
      HIWORD(v86.__r_.__value_.__r.__words[1]) = 2082;
      v86.__r_.__value_.__r.__words[2] = (std::string::size_type)v72;
      *(_WORD *)v87 = 2081;
      *(_QWORD *)&v87[2] = v73;
      LODWORD(v81) = 34;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Stopping tech 0x%{private}x (active is 0x%{private}x) for %{public}s/%{private}s", &v86, v81);
      v75 = (uint8_t *)v74;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::adjustTechLevel(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, MonitoringTechOptions, BOOL)", "%s\n", v74);
      if (v75 != buf)
        free(v75);
    }
    if ((v30 & 4) != 0)
    {
      sub_100D70DBC(a1 + 904, (unsigned __int8 *)a2, a6);
      sub_100ED2AAC(a1 + 1312);
    }
    if ((v30 & 0x10) != 0)
      sub_100D5D098(a1, (unsigned __int8 *)a2);
  }
  if ((a5 & ((v13 & 4) >> 2)) != 0)
    v35 = v13 & ~a3[2] | 4;
  else
    v35 = v13 & ~a3[2];
  if (v35)
  {
    if (v14[12] != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v36 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v37 = a3[2];
      if (*((char *)a2 + 23) >= 0)
        v38 = a2;
      else
        v38 = (void *)*a2;
      if (*((char *)a2 + 47) >= 0)
        v39 = a2 + 3;
      else
        v39 = (const void **)a2[3];
      *(_DWORD *)buf = 67175427;
      *(_DWORD *)v90 = v35;
      *(_WORD *)&v90[4] = 1025;
      *(_DWORD *)&v90[6] = v37;
      *(_WORD *)v91 = 2082;
      *(_QWORD *)&v91[2] = v38;
      *(_WORD *)v92 = 2081;
      *(_QWORD *)&v92[2] = v39;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "Starting tech 0x%{private}x (active is 0x%{private}x) for %{public}s/%{private}s", buf, 0x22u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v14[12] != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v76 = a3[2];
      if (*((char *)a2 + 23) >= 0)
        v77 = a2;
      else
        v77 = (void *)*a2;
      if (*((char *)a2 + 47) >= 0)
        v78 = a2 + 3;
      else
        v78 = (const void **)a2[3];
      LODWORD(v86.__r_.__value_.__l.__data_) = 67175427;
      HIDWORD(v86.__r_.__value_.__r.__words[0]) = v35;
      LOWORD(v86.__r_.__value_.__r.__words[1]) = 1025;
      *(_DWORD *)((char *)&v86.__r_.__value_.__r.__words[1] + 2) = v76;
      HIWORD(v86.__r_.__value_.__r.__words[1]) = 2082;
      v86.__r_.__value_.__r.__words[2] = (std::string::size_type)v77;
      *(_WORD *)v87 = 2081;
      *(_QWORD *)&v87[2] = v78;
      LODWORD(v81) = 34;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Starting tech 0x%{private}x (active is 0x%{private}x) for %{public}s/%{private}s", &v86, v81);
      v80 = (uint8_t *)v79;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::adjustTechLevel(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, MonitoringTechOptions, BOOL)", "%s\n", v79);
      if (v80 != buf)
        free(v80);
    }
    if ((v35 & 4) != 0)
    {
      sub_100D70918(a1 + 904, (uint64_t *)a2, *a3 != 0, a6);
      sub_100ED2AAC(a1 + 1312);
    }
    if (v35 >= 0x10)
      sub_100D5D148(a1, (unsigned __int8 *)a2);
  }
  if (v14[12] != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v40 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0)
      v41 = *((unsigned __int8 *)a2 + 23);
    else
      v41 = (size_t)a2[1];
    v42 = &v86;
    sub_100259584((uint64_t)&v86, v41 + 1);
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v42 = (std::string *)v86.__r_.__value_.__r.__words[0];
    if (v41)
    {
      if (*((char *)a2 + 23) >= 0)
        v43 = a2;
      else
        v43 = *a2;
      memmove(v42, v43, v41);
    }
    *(_WORD *)((char *)&v42->__r_.__value_.__l.__data_ + v41) = 47;
    v44 = *((char *)a2 + 47);
    if (v44 >= 0)
      v45 = (const std::string::value_type *)(a2 + 3);
    else
      v45 = (const std::string::value_type *)a2[3];
    if (v44 >= 0)
      v46 = *((unsigned __int8 *)a2 + 47);
    else
      v46 = (std::string::size_type)a2[4];
    v47 = std::string::append(&v86, v45, v46);
    v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v85.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v86.__r_.__value_.__l.__data_);
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = &v85;
    else
      v49 = (std::string *)v85.__r_.__value_.__r.__words[0];
    sub_10016F544(v13, &v86);
    v50 = SHIBYTE(v86.__r_.__value_.__r.__words[2]);
    v51 = v86.__r_.__value_.__r.__words[0];
    sub_100B6D7F8((uint64_t)a3, &__p);
    v52 = &v86;
    if (v50 < 0)
      v52 = (std::string *)v51;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v53 = &__p;
    else
      v53 = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136381187;
    *(_QWORD *)v90 = v49;
    *(_WORD *)&v90[8] = 2081;
    *(_QWORD *)v91 = v52;
    *(_WORD *)&v91[8] = 2081;
    *(_QWORD *)v92 = v53;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "Fence: fence, %{private}s, newTech, %{private}s, status, %{private}s", buf, 0x20u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v86.__r_.__value_.__l.__data_);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v14[12] != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v63 = qword_1022A0068;
    sub_100914D68(a2, &v85);
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v64 = &v85;
    else
      v64 = (std::string *)v85.__r_.__value_.__r.__words[0];
    sub_10016F544(v13, &__p);
    v65 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v66 = __p.__r_.__value_.__r.__words[0];
    sub_100B6D7F8((uint64_t)a3, &v83);
    v67 = &__p;
    if (v65 < 0)
      v67 = (std::string *)v66;
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v68 = &v83;
    else
      v68 = (std::string *)v83.__r_.__value_.__r.__words[0];
    LODWORD(v86.__r_.__value_.__l.__data_) = 136381187;
    *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 4) = (std::string::size_type)v64;
    WORD2(v86.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&v86.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v67;
    HIWORD(v86.__r_.__value_.__r.__words[2]) = 2081;
    *(_QWORD *)v87 = v68;
    LODWORD(v81) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v63, 2, "Fence: fence, %{private}s, newTech, %{private}s, status, %{private}s", &v86, v81);
    v70 = v69;
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v83.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::adjustTechLevel(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, MonitoringTechOptions, BOOL)", "%s\n", v70);
    if (v70 != (char *)buf)
      free(v70);
  }
  a3[2] = v13;
}

void sub_100D5C86C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D5C8E8(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  char v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  NSObject *v17;
  size_t v18;
  std::string *v19;
  const void *v20;
  int v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string *p_p;
  _BOOL4 v27;
  std::string *v28;
  double v29;
  uint64_t v31;
  int v32;
  std::string *v33;
  std::string *v34;
  _BOOL4 v35;
  _BOOL4 v36;
  char *v37;
  char *v38;
  std::string v39;
  std::string __p;
  std::string v41;
  _BOOL4 v42;
  __int16 v43;
  _BOOL4 v44;
  uint8_t buf[4];
  std::string *v46;
  __int16 v47;
  std::string *v48;
  __int16 v49;
  _BOOL4 v50;
  __int16 v51;
  _BOOL4 v52;
  _QWORD v53[3];
  _QWORD *v54;
  _QWORD v55[3];
  _QWORD *v56;
  _QWORD v57[3];
  _QWORD *v58;

  v8 = sub_100D5CEC0(a1);
  v9 = (*(_BYTE *)(a2 + 160) & 0x80) != 0 && a1 + 824 != sub_10016FC40(a1 + 816, (unsigned __int8 *)a2);
  v57[0] = off_102182700;
  v57[1] = a1;
  v58 = v57;
  v55[0] = off_102182790;
  v55[1] = a1;
  v56 = v55;
  v53[0] = off_102182810;
  v54 = v53;
  v10 = sub_100B6DB24(a2, a3, a4, v8, (uint64_t)v57, (uint64_t)v55, (uint64_t)v53, v9);
  v11 = v54;
  if (v54 == v53)
  {
    v12 = 4;
    v11 = v53;
  }
  else
  {
    if (!v54)
      goto LABEL_9;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_9:
  v13 = v56;
  if (v56 == v55)
  {
    v14 = 4;
    v13 = v55;
  }
  else
  {
    if (!v56)
      goto LABEL_14;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_14:
  v15 = v58;
  if (v58 == v57)
  {
    v16 = 4;
    v15 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_19;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_19:
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v17 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a2 + 23) >= 0)
      v18 = *(unsigned __int8 *)(a2 + 23);
    else
      v18 = *(_QWORD *)(a2 + 8);
    v19 = &v41;
    sub_100259584((uint64_t)&v41, v18 + 1);
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v19 = (std::string *)v41.__r_.__value_.__r.__words[0];
    if (v18)
    {
      if (*(char *)(a2 + 23) >= 0)
        v20 = (const void *)a2;
      else
        v20 = *(const void **)a2;
      memmove(v19, v20, v18);
    }
    *(_WORD *)((char *)&v19->__r_.__value_.__l.__data_ + v18) = 47;
    v21 = *(char *)(a2 + 47);
    if (v21 >= 0)
      v22 = (const std::string::value_type *)(a2 + 24);
    else
      v22 = *(const std::string::value_type **)(a2 + 24);
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a2 + 47);
    else
      v23 = *(_QWORD *)(a2 + 32);
    v24 = std::string::append(&v41, v22, v23);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    sub_10016F544(v10, &v41);
    v27 = 0;
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &v41;
    else
      v28 = (std::string *)v41.__r_.__value_.__r.__words[0];
    v29 = *(double *)(a2 + 96);
    if (v29 <= 400.0 && !*(_BYTE *)(a2 + 188) && *(_DWORD *)(a2 + 180) != 2)
      v27 = *(_QWORD *)(a2 + 232) == *(_QWORD *)(a2 + 224) && (*(_BYTE *)(a2 + 160) & 0x20) == 0;
    *(_DWORD *)buf = 136381443;
    v46 = p_p;
    v47 = 2081;
    v48 = v28;
    v49 = 1025;
    v50 = v27;
    v51 = 1025;
    v52 = v29 >= 7000.0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "fence, %{private}s, requiredTech, %{private}s, fine, %{private}d, large, %{private}d", buf, 0x22u);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v31 = qword_1022A0068;
    sub_100914D68((const void **)a2, &__p);
    v32 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v34 = &v39;
    sub_10016F544(v10, &v39);
    if (v32 >= 0)
      v33 = &__p;
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v34 = (std::string *)v39.__r_.__value_.__r.__words[0];
    v35 = sub_1004E458C(a2);
    v36 = *(double *)(a2 + 96) >= 7000.0;
    LODWORD(v41.__r_.__value_.__l.__data_) = 136381443;
    *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = (std::string::size_type)v33;
    WORD2(v41.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&v41.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v34;
    HIWORD(v41.__r_.__value_.__r.__words[2]) = 1025;
    v42 = v35;
    v43 = 1025;
    v44 = v36;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v31, 2, "fence, %{private}s, requiredTech, %{private}s, fine, %{private}d, large, %{private}d", &v41, 34);
    v38 = v37;
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 2, "MonitoringTechOptions CLFenceMonitor::getRequiredTechLevel(const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &, const CLDaemonLocation &)", "%s\n", v38);
    if (v38 != (char *)buf)
      free(v38);
  }
  return v10;
}

void sub_100D5CDF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D5CEC0(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t result;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 612))
  {
    sub_100197040();
    v2 = sub_1001B796C();
    if ((~v2 & 0x10001) != 0)
      v3 = 8;
    else
      v3 = 11;
    if ((v2 & 2) != 0)
    {
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 16))(*(_QWORD *)(a1 + 1768)))
        v3 |= 4u;
    }
    return v3 | 0x10u;
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v5 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Fence: location services is disabled, no tech available", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: location services is disabled, no tech available", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "MonitoringTechOptions CLFenceMonitor::getAvailableTech()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
      return 0;
    }
  }
  return result;
}

BOOL sub_100D5D098(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _BOOL8 v12;

  v3 = (_QWORD *)(a1 + 240);
  v4 = sub_10016FC40(a1 + 240, a2);
  v5 = (_QWORD *)(a1 + 248);
  if (a1 + 248 != v4)
    *(_BYTE *)(v4 + 285) = 0;
  v6 = (_QWORD *)*v3;
  if ((_QWORD *)*v3 == v5)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = *((_BYTE *)v6 + 285) != 0;
      v9 = (_QWORD *)v6[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v6[2];
          v11 = *v10 == (_QWORD)v6;
          v6 = v10;
        }
        while (!v11);
      }
      v7 |= v8;
      v6 = v10;
    }
    while (v10 != v5);
  }
  v12 = v5 != (_QWORD *)v4;
  sub_100D606A0(a1, v7 & 1);
  return v12;
}

BOOL sub_100D5D148(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;

  v3 = sub_10016FC40(a1 + 240, a2);
  if (a1 + 248 != v3)
  {
    sub_100D606A0(a1, 1);
    *(_BYTE *)(v3 + 285) = 1;
  }
  return a1 + 248 != v3;
}

uint64_t sub_100D5D1A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5;
  double v6;
  uint64_t result;
  uint64_t v8;
  __int128 v9;

  if (*(_DWORD *)(a2 + 180) != 2)
    return 1;
  v5 = *(double *)(a3 + 4);
  v6 = *(double *)(a3 + 12);
  result = (uint64_t)+[GEOLocationShifter isLocationShiftRequiredForCoordinate:](GEOLocationShifter, "isLocationShiftRequiredForCoordinate:", v5, v6);
  if (!(_DWORD)result)
    return result;
  v8 = 0;
  if (*(_DWORD *)(a3 + 132) != 2
    && (objc_msgSend(*(id *)(a1 + 1832), "shiftCoordinate:accuracy:shiftedCoordinate:shiftedAccuracy:", &v9, &v8, v5, v6, *(double *)(a3 + 20)) & 1) != 0)
  {
    *(_OWORD *)(a3 + 4) = v9;
    *(_QWORD *)(a3 + 20) = v8;
    *(_DWORD *)(a3 + 132) = 2;
    return 1;
  }
  return 0;
}

uint64_t sub_100D5D250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  __int128 v12;
  __int128 v13;
  uint64_t *v14;
  NSObject *v15;
  std::string::size_type v16;
  _QWORD *v17;
  void **v18;
  void **v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  std::string::size_type v24;
  const char *v25;
  void **v26;
  void **v27;
  int v28;
  _BYTE *v29;
  _BYTE *v30;
  void **v31;
  void **v32;
  void **v33;
  int v34;
  void **v35;
  void **v36;
  void **v37;
  char *v38;
  char *v39;
  uint64_t *v40;
  NSObject *v41;
  std::string::size_type v42;
  _QWORD *v43;
  void **v44;
  void **v45;
  NSObject *v46;
  std::string::size_type v47;
  _QWORD *v48;
  _BYTE *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  void *v58;
  uint64_t *v59;
  NSObject *v60;
  std::string::size_type v61;
  _QWORD *v62;
  double v63;
  _QWORD *v64;
  _QWORD *v65;
  BOOL v66;
  NSObject *v67;
  double v68;
  const char *v69;
  char *v70;
  uint64_t v71;
  std::string::size_type v72;
  NSObject *v73;
  void **v74;
  char *v75;
  char *v76;
  std::string::size_type v77;
  NSObject *v78;
  void **v79;
  void **v80;
  const char *v81;
  char *v82;
  std::string::size_type v83;
  NSObject *v84;
  void **v85;
  void **v86;
  const char *v87;
  char *v88;
  const char *v90;
  const char *v91;
  const char *v92;
  std::string::size_type v93;
  std::string::size_type v94;
  NSObject *log;
  os_log_t loga;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  std::string *__str;
  char v104;
  void *v105[2];
  char v106;
  void *v107[2];
  char v108;
  void *v109[2];
  char v110;
  void *v111[2];
  char v112;
  void *v113;
  char v114;
  char v115;
  void *v116;
  char v117;
  id v118;
  void *v119;
  void *v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  int v126[4];
  _BYTE v127[12];
  __int16 v128;
  os_log_t v129;
  __int16 v130;
  void **v131;
  __int16 v132;
  double v133;
  __int16 v134;
  void **v135;
  __int16 v136;
  void **v137;
  _BYTE buf[32];
  _BYTE v139[32];
  __int128 v140;
  uint64_t v141;
  void *v142;
  char v143;
  id v144;
  void *__p;
  void *v146;

  sub_1001157C0(buf);
  sub_10091478C(a2, (__int128 *)buf);
  if (__p)
  {
    v146 = __p;
    operator delete(__p);
  }

  if (v143 < 0)
    operator delete(v142);
  if (SBYTE7(v140) < 0)
    operator delete(*(void **)&v139[16]);
  if ((v139[15] & 0x80000000) != 0)
    operator delete(*(void **)&buf[24]);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  sub_100B6D7B8((uint64_t)buf);
  v6 = *(_OWORD *)&v139[16];
  *(_OWORD *)(a3 + 32) = *(_OWORD *)v139;
  *(_OWORD *)(a3 + 48) = v6;
  *(_OWORD *)(a3 + 64) = v140;
  *(_QWORD *)(a3 + 80) = v141;
  v7 = *(_OWORD *)&buf[16];
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(_OWORD *)(a3 + 16) = v7;
  if (!*sub_10108CCAC()
    || (v9 = a1 + 240, v8 = *(_QWORD **)(a1 + 240), v10 = (_QWORD *)(a1 + 248), v8 == (_QWORD *)(a1 + 248)))
  {
    v104 = 0;
  }
  else
  {
    v104 = 0;
    v11 = &qword_1022A0000;
    do
    {
      if ((v8[24] & 0xA0) == 0x80
        && *((double *)v8 + 16) <= 400.0
        && !*((_BYTE *)v8 + 220)
        && *((_DWORD *)v8 + 53) != 2
        && v8[33] == v8[32])
      {
        *(_QWORD *)v126 = v8[45];
        v12 = *(_OWORD *)(v8 + 41);
        v123 = *(_OWORD *)(v8 + 39);
        v124 = v12;
        v125 = *(_OWORD *)(v8 + 43);
        v13 = *(_OWORD *)(v8 + 37);
        v121 = *(_OWORD *)(v8 + 35);
        v122 = v13;
        sub_1001157C0((char *)v109);
        __str = (std::string *)(v8 + 4);
        if (sub_100D5E27C(a1, (unsigned __int8 *)v8 + 32, (uint64_t)v109))
        {
          if (!v115)
          {
            v14 = v11;
            if (v11[12] != -1)
              dispatch_once(&qword_1022A0060, &stru_1021826B0);
            v15 = qword_1022A0068;
            if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
            {
              v16 = (std::string::size_type)(v8 + 4);
              if (*((char *)v8 + 55) < 0)
                v16 = __str->__r_.__value_.__r.__words[0];
              v17 = v8 + 7;
              if (*((char *)v8 + 79) < 0)
                v17 = (_QWORD *)*v17;
              v18 = v109;
              if (v110 < 0)
                v18 = (void **)v109[0];
              v19 = v111;
              if (v112 < 0)
                v19 = (void **)v111[0];
              *(_DWORD *)buf = 136381443;
              *(_QWORD *)&buf[4] = v16;
              *(_WORD *)&buf[12] = 2081;
              *(_QWORD *)&buf[14] = v17;
              *(_WORD *)&buf[22] = 2081;
              *(_QWORD *)&buf[24] = v18;
              *(_WORD *)v139 = 2081;
              *(_QWORD *)&v139[2] = v19;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Fence %{private}s/%{private}s has helper fence %{private}s/%{private}s, but isHelperFence isn't set.", buf, 0x2Au);
            }
            v11 = v14;
            if (sub_1001BFF7C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (v14[12] != -1)
                dispatch_once(&qword_1022A0060, &stru_1021826B0);
              v77 = (std::string::size_type)(v8 + 4);
              if (*((char *)v8 + 55) < 0)
                v77 = __str->__r_.__value_.__r.__words[0];
              v78 = (v8 + 7);
              if (*((char *)v8 + 79) < 0)
                v78 = v78->isa;
              v79 = v109;
              if (v110 < 0)
                v79 = (void **)v109[0];
              v80 = v111;
              if (v112 < 0)
                v80 = (void **)v111[0];
              *(_DWORD *)v127 = 136381443;
              *(_QWORD *)&v127[4] = v77;
              v128 = 2081;
              v129 = v78;
              v130 = 2081;
              v131 = v79;
              v132 = 2081;
              v133 = *(double *)&v80;
              LODWORD(v90) = 42;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Fence %{private}s/%{private}s has helper fence %{private}s/%{private}s, but isHelperFence isn't set.", v127, v90);
              v82 = (char *)v81;
              sub_100512490("Generic", 1, 0, 0, "BOOL CLFenceMonitor::getUpdatedProximityState(CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &) const", "%s\n", v81);
              if (v82 != buf)
                free(v82);
              v11 = v14;
            }
          }
          v20 = sub_10016FC40(v9, (unsigned __int8 *)v109);
          if (v10 == (_QWORD *)v20)
          {
            v40 = v11;
            if (v11[12] != -1)
              dispatch_once(&qword_1022A0060, &stru_1021826B0);
            v41 = qword_1022A0068;
            if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
            {
              v42 = (std::string::size_type)(v8 + 4);
              if (*((char *)v8 + 55) < 0)
                v42 = __str->__r_.__value_.__r.__words[0];
              v43 = v8 + 7;
              if (*((char *)v8 + 79) < 0)
                v43 = (_QWORD *)*v43;
              v44 = v109;
              if (v110 < 0)
                v44 = (void **)v109[0];
              v45 = v111;
              if (v112 < 0)
                v45 = (void **)v111[0];
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = v42;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v43;
              *(_WORD *)&buf[22] = 2080;
              *(_QWORD *)&buf[24] = v44;
              *(_WORD *)v139 = 2080;
              *(_QWORD *)&v139[2] = v45;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_FAULT, "Fence %s/%s does not have monitoring status for helper fence %s/%s", buf, 0x2Au);
            }
            v11 = v40;
            if (sub_1001BFF7C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (v40[12] != -1)
                dispatch_once(&qword_1022A0060, &stru_1021826B0);
              v83 = (std::string::size_type)(v8 + 4);
              if (*((char *)v8 + 55) < 0)
                v83 = __str->__r_.__value_.__r.__words[0];
              v84 = (v8 + 7);
              if (*((char *)v8 + 79) < 0)
                v84 = v84->isa;
              v85 = v109;
              if (v110 < 0)
                v85 = (void **)v109[0];
              v86 = v111;
              if (v112 < 0)
                v86 = (void **)v111[0];
              *(_DWORD *)v127 = 136315906;
              *(_QWORD *)&v127[4] = v83;
              v128 = 2080;
              v129 = v84;
              v130 = 2080;
              v131 = v85;
              v132 = 2080;
              v133 = *(double *)&v86;
              LODWORD(v90) = 42;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Fence %s/%s does not have monitoring status for helper fence %s/%s", v127, v90, v91, v92);
              v88 = (char *)v87;
              sub_100512490("Generic", 1, 0, 0, "BOOL CLFenceMonitor::getUpdatedProximityState(CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &) const", "%s\n", v87);
              if (v88 != buf)
                free(v88);
              v11 = v40;
            }
          }
          else
          {
            *(_QWORD *)v126 = *(_QWORD *)(v20 + 360);
            v21 = *(_OWORD *)(v20 + 328);
            v123 = *(_OWORD *)(v20 + 312);
            v124 = v21;
            v125 = *(_OWORD *)(v20 + 344);
            v22 = *(_OWORD *)(v20 + 296);
            v121 = *(_OWORD *)(v20 + 280);
            v122 = v22;
            if (v11[12] != -1)
              dispatch_once(&qword_1022A0060, &stru_1021826B0);
            v23 = qword_1022A0068;
            if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
            {
              v24 = (std::string::size_type)(v8 + 4);
              if (*((char *)v8 + 55) < 0)
                v24 = __str->__r_.__value_.__r.__words[0];
              v25 = (const char *)(v8 + 7);
              v93 = v24;
              log = v23;
              if (*((char *)v8 + 79) < 0)
                v25 = *(const char **)v25;
              v92 = v25;
              v97 = a1;
              v99 = v9;
              if (v110 >= 0)
                v26 = v109;
              else
                v26 = (void **)v109[0];
              if (v112 >= 0)
                v27 = v111;
              else
                v27 = (void **)v111[0];
              sub_100791D10((int *)v8 + 90, v127);
              v28 = SHIBYTE(v130);
              v29 = *(_BYTE **)v127;
              sub_100791D10(v126, v107);
              v30 = v127;
              if (v28 < 0)
                v30 = v29;
              v31 = v107;
              if (v108 < 0)
                v31 = (void **)v107[0];
              *(_DWORD *)buf = 136381955;
              *(_QWORD *)&buf[4] = v93;
              *(_WORD *)&buf[12] = 2081;
              *(_QWORD *)&buf[14] = v92;
              *(_WORD *)&buf[22] = 2081;
              *(_QWORD *)&buf[24] = v26;
              *(_WORD *)v139 = 2081;
              *(_QWORD *)&v139[2] = v27;
              *(_WORD *)&v139[10] = 2081;
              *(_QWORD *)&v139[12] = v30;
              *(_WORD *)&v139[20] = 2081;
              *(_QWORD *)&v139[22] = v31;
              _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "converging state, Fence %{private}s/%{private}s using monitoring status from helper fence %{private}s/%{private}s. Old proximity state: %{private}s, new proximity state: %{private}s", buf, 0x3Eu);
              if (v108 < 0)
                operator delete(v107[0]);
              a1 = v97;
              v9 = v99;
              v11 = &qword_1022A0000;
              if (SHIBYTE(v130) < 0)
                operator delete(*(void **)v127);
            }
            if (sub_1001BFF7C(115, 2))
            {
              v98 = a1;
              v100 = v9;
              bzero(buf, 0x65CuLL);
              if (v11[12] != -1)
                dispatch_once(&qword_1022A0060, &stru_1021826B0);
              v92 = (const char *)qword_1022A0068;
              v94 = (std::string::size_type)(v8 + 4);
              if (*((char *)v8 + 55) < 0)
                v94 = __str->__r_.__value_.__r.__words[0];
              loga = (os_log_t)(v8 + 7);
              if (*((char *)v8 + 79) < 0)
                loga = (os_log_t)loga->isa;
              if (v110 >= 0)
                v32 = v109;
              else
                v32 = (void **)v109[0];
              if (v112 >= 0)
                v33 = v111;
              else
                v33 = (void **)v111[0];
              sub_100791D10((int *)v8 + 90, v107);
              v34 = v108;
              v35 = (void **)v107[0];
              sub_100791D10(v126, v105);
              v36 = v107;
              if (v34 < 0)
                v36 = v35;
              v37 = v105;
              if (v106 < 0)
                v37 = (void **)v105[0];
              *(_DWORD *)v127 = 136381955;
              *(_QWORD *)&v127[4] = v94;
              v128 = 2081;
              v129 = loga;
              v130 = 2081;
              v131 = v32;
              v132 = 2081;
              v133 = *(double *)&v33;
              v134 = 2081;
              v135 = v36;
              v136 = 2081;
              v137 = v37;
              LODWORD(v90) = 62;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v92, 2, "converging state, Fence %{private}s/%{private}s using monitoring status from helper fence %{private}s/%{private}s. Old proximity state: %{private}s, new proximity state: %{private}s", v127, v90);
              v39 = v38;
              if (v106 < 0)
                operator delete(v105[0]);
              if (v108 < 0)
                operator delete(v107[0]);
              sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceMonitor::getUpdatedProximityState(CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &) const", "%s\n", v39);
              if (v39 != buf)
                free(v39);
              a1 = v98;
              v9 = v100;
              v11 = &qword_1022A0000;
            }
          }
        }
        if (*((double *)&v125 + 1) <= *(double *)(a1 + 136))
        {
          v59 = v11;
          if (v11[12] != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          v60 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
          {
            v61 = (std::string::size_type)(v8 + 4);
            if (*((char *)v8 + 55) < 0)
              v61 = __str->__r_.__value_.__r.__words[0];
            v62 = v8 + 7;
            if (*((char *)v8 + 79) < 0)
              v62 = (_QWORD *)*v62;
            v63 = *(double *)(a1 + 136) - *((double *)&v125 + 1);
            *(_DWORD *)buf = 136381443;
            *(_QWORD *)&buf[4] = v61;
            *(_WORD *)&buf[12] = 2081;
            *(_QWORD *)&buf[14] = v62;
            *(_WORD *)&buf[22] = 2049;
            *(_QWORD *)&buf[24] = *((_QWORD *)&v125 + 1);
            *(_WORD *)v139 = 2049;
            *(double *)&v139[2] = v63;
            _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "converging state, Fence %{private}s/%{private}s proximity state is stale. Last update timestamp: %{private}f (%{private}f seconds prior)", buf, 0x2Au);
          }
          v11 = v59;
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (v59[12] != -1)
              dispatch_once(&qword_1022A0060, &stru_1021826B0);
            if (*((char *)v8 + 55) < 0)
              __str = (std::string *)__str->__r_.__value_.__r.__words[0];
            v67 = (v8 + 7);
            if (*((char *)v8 + 79) < 0)
              v67 = v67->isa;
            v68 = *(double *)(a1 + 136) - *((double *)&v125 + 1);
            *(_DWORD *)v127 = 136381443;
            *(_QWORD *)&v127[4] = __str;
            v128 = 2081;
            v129 = v67;
            v130 = 2049;
            v131 = (void **)*((_QWORD *)&v125 + 1);
            v132 = 2049;
            v133 = v68;
            LODWORD(v90) = 42;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "converging state, Fence %{private}s/%{private}s proximity state is stale. Last update timestamp: %{private}f (%{private}f seconds prior)", v127, v90);
            v70 = (char *)v69;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceMonitor::getUpdatedProximityState(CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &) const", "%s\n", v69);
            if (v70 != buf)
              free(v70);
            v11 = v59;
          }
        }
        else if (v126[0] > *(_DWORD *)(a3 + 80))
        {
          if (v11[12] != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          v46 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
          {
            v101 = v9;
            v47 = (std::string::size_type)(v8 + 4);
            if (*((char *)v8 + 55) < 0)
              v47 = __str->__r_.__value_.__r.__words[0];
            v48 = v8 + 7;
            if (*((char *)v8 + 79) < 0)
              v48 = (_QWORD *)*v48;
            sub_100791D10(v126, v127);
            v49 = v127;
            if (v130 < 0)
              v49 = *(_BYTE **)v127;
            *(_DWORD *)buf = 136381443;
            *(_QWORD *)&buf[4] = v47;
            *(_WORD *)&buf[12] = 2081;
            *(_QWORD *)&buf[14] = v48;
            *(_WORD *)&buf[22] = 2081;
            *(_QWORD *)&buf[24] = v49;
            *(_WORD *)v139 = 2049;
            *(_QWORD *)&v139[2] = v122;
            _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "converging state, most energetic updated by fence %{private}s/%{private}s %{private}s. Distance: %{private}f", buf, 0x2Au);
            if (SHIBYTE(v130) < 0)
              operator delete(*(void **)v127);
            v9 = v101;
          }
          v11 = &qword_1022A0000;
          if (sub_1001BFF7C(115, 2))
          {
            v102 = v9;
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_1021826B0);
            v71 = qword_1022A0068;
            v72 = (std::string::size_type)(v8 + 4);
            if (*((char *)v8 + 55) < 0)
              v72 = __str->__r_.__value_.__r.__words[0];
            v73 = (v8 + 7);
            if (*((char *)v8 + 79) < 0)
              v73 = v73->isa;
            sub_100791D10(v126, v107);
            v74 = v107;
            if (v108 < 0)
              v74 = (void **)v107[0];
            *(_DWORD *)v127 = 136381443;
            *(_QWORD *)&v127[4] = v72;
            v128 = 2081;
            v129 = v73;
            v130 = 2081;
            v131 = v74;
            v132 = 2049;
            v133 = *(double *)&v122;
            LODWORD(v90) = 42;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v71, 0, "converging state, most energetic updated by fence %{private}s/%{private}s %{private}s. Distance: %{private}f", v127, v90);
            v76 = v75;
            if (v108 < 0)
              operator delete(v107[0]);
            sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceMonitor::getUpdatedProximityState(CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &) const", "%s\n", v76);
            if (v76 != buf)
              free(v76);
            v9 = v102;
            v11 = &qword_1022A0000;
          }
          v50 = v124;
          *(_OWORD *)(a3 + 32) = v123;
          *(_OWORD *)(a3 + 48) = v50;
          *(_OWORD *)(a3 + 64) = v125;
          *(_QWORD *)(a3 + 80) = *(_QWORD *)v126;
          v51 = v122;
          *(_OWORD *)a3 = v121;
          *(_OWORD *)(a3 + 16) = v51;
          std::string::operator=((std::string *)a2, __str);
          std::string::operator=((std::string *)(a2 + 24), (const std::string *)(v8 + 7));
          std::string::operator=((std::string *)(a2 + 48), (const std::string *)(v8 + 10));
          v52 = *(_OWORD *)(v8 + 13);
          v53 = *(_OWORD *)(v8 + 15);
          v54 = *(_OWORD *)(v8 + 19);
          *(_OWORD *)(a2 + 104) = *(_OWORD *)(v8 + 17);
          *(_OWORD *)(a2 + 120) = v54;
          *(_OWORD *)(a2 + 72) = v52;
          *(_OWORD *)(a2 + 88) = v53;
          v55 = *(_OWORD *)(v8 + 21);
          v56 = *(_OWORD *)(v8 + 23);
          v57 = *(_OWORD *)(v8 + 25);
          *(_QWORD *)(a2 + 181) = *(_QWORD *)((char *)v8 + 213);
          *(_OWORD *)(a2 + 152) = v56;
          *(_OWORD *)(a2 + 168) = v57;
          *(_OWORD *)(a2 + 136) = v55;
          std::string::operator=((std::string *)(a2 + 192), (const std::string *)(v8 + 28));
          v58 = *(void **)(a2 + 216);
          *(_QWORD *)(a2 + 216) = (id)v8[31];

          if (__str != (std::string *)a2)
            sub_1002F3538((char *)(a2 + 224), (char *)v8[32], v8[33], (uint64_t)(v8[33] - v8[32]) >> 4);
          v104 = 1;
        }
        if (v119)
        {
          v120 = v119;
          operator delete(v119);
        }

        if (v117 < 0)
          operator delete(v116);
        if (v114 < 0)
          operator delete(v113);
        if (v112 < 0)
          operator delete(v111[0]);
        if (v110 < 0)
          operator delete(v109[0]);
      }
      v64 = (_QWORD *)v8[1];
      if (v64)
      {
        do
        {
          v65 = v64;
          v64 = (_QWORD *)*v64;
        }
        while (v64);
      }
      else
      {
        do
        {
          v65 = (_QWORD *)v8[2];
          v66 = *v65 == (_QWORD)v8;
          v8 = v65;
        }
        while (!v66);
      }
      v8 = v65;
    }
    while (v65 != v10);
  }
  return v104 & 1;
}

void sub_100D5E1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,char a40)
{
  sub_1004E2BD0((uint64_t)&a40);
  _Unwind_Resume(a1);
}

uint64_t sub_100D5E27C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  void *v19[2];
  char v20;
  void *__p;
  char v22;
  void *__dst[2];
  uint64_t v24;

  v6 = sub_10016FC40(a1 + 816, a2);
  if (a1 + 824 == v6)
    return 0;
  v7 = (__int128 *)(v6 + 280);
  if (*(char *)(v6 + 303) < 0)
  {
    sub_100115CE4(__dst, *(void **)(v6 + 280), *(_QWORD *)(v6 + 288));
  }
  else
  {
    *(_OWORD *)__dst = *v7;
    v24 = *(_QWORD *)(v6 + 296);
  }
  sub_1000BE57C((char *)v19, v7, (__int128 *)a2);
  v8 = sub_100D64EA8(a1 + 792, (const void **)v19);
  v9 = v8;
  if (a1 + 800 == v8)
  {
    if (v22 < 0)
      operator delete(__p);
    if (v20 < 0)
      operator delete(v19[0]);
    if (SHIBYTE(v24) < 0)
      operator delete(__dst[0]);
    return 0;
  }
  v10 = v8 + 80;
  std::string::operator=((std::string *)a3, (const std::string *)(v8 + 80));
  std::string::operator=((std::string *)(a3 + 24), (const std::string *)(v9 + 104));
  std::string::operator=((std::string *)(a3 + 48), (const std::string *)(v9 + 128));
  v11 = *(_OWORD *)(v9 + 152);
  v12 = *(_OWORD *)(v9 + 168);
  v13 = *(_OWORD *)(v9 + 184);
  *(_OWORD *)(a3 + 120) = *(_OWORD *)(v9 + 200);
  *(_OWORD *)(a3 + 104) = v13;
  *(_OWORD *)(a3 + 88) = v12;
  *(_OWORD *)(a3 + 72) = v11;
  v14 = *(_OWORD *)(v9 + 216);
  v15 = *(_OWORD *)(v9 + 232);
  v16 = *(_OWORD *)(v9 + 248);
  *(_QWORD *)(a3 + 181) = *(_QWORD *)(v9 + 261);
  *(_OWORD *)(a3 + 168) = v16;
  *(_OWORD *)(a3 + 152) = v15;
  *(_OWORD *)(a3 + 136) = v14;
  std::string::operator=((std::string *)(a3 + 192), (const std::string *)(v9 + 272));
  v17 = *(void **)(a3 + 216);
  *(_QWORD *)(a3 + 216) = *(id *)(v9 + 296);

  if (v10 != a3)
    sub_1002F3538((char *)(a3 + 224), *(char **)(v9 + 304), *(_QWORD *)(v9 + 312), (uint64_t)(*(_QWORD *)(v9 + 312) - *(_QWORD *)(v9 + 304)) >> 4);
  if (v22 < 0)
    operator delete(__p);
  if (v20 < 0)
    operator delete(v19[0]);
  if (SHIBYTE(v24) < 0)
    operator delete(__dst[0]);
  return 1;
}

void sub_100D5E430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100D5E45C(uint64_t a1, double a2)
{
  int v4;
  uint64_t v5;
  _BOOL4 v6;
  _BOOL4 v7;
  _BOOL4 v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v12;
  NSObject *v13;
  void **v14;
  void **v15;
  int v16;
  NSObject *v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  int v21;
  NSObject *v22;
  unint64_t v23;
  char v24;
  double v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unsigned int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  NSObject *v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  int v38;
  int v39;
  int v40;
  NSObject *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  NSObject *v45;
  void **v46;
  void **v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  int v52;
  const char *v53;
  uint8_t *v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  const char *v58;
  uint8_t *v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  const char *v66;
  uint8_t *v67;
  void **v68;
  void **v69;
  int v70;
  const char *v71;
  uint8_t *v72;
  const char *v73;
  uint8_t *v74;
  void **v75;
  void **v76;
  const char *v77;
  uint8_t *v78;
  double v79;
  void **v80;
  uint64_t v81;
  NSDictionary *(*v82)(uint64_t);
  void *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  _BYTE v88[16];
  double v89;
  uint64_t v90;
  unsigned int v91;
  void *v92[2];
  char v93;
  void *v94[2];
  char v95;
  void *v96;
  char v97;
  double v98;
  double v99;
  void *v100;
  char v101;
  id v102;
  void *__p;
  void *v104;
  int v105;
  unint64_t v106;
  __int16 v107;
  _BYTE v108[10];
  _BYTE v109[6];
  __int16 v110;
  int v111;
  __int16 v112;
  int v113;
  __int16 v114;
  int v115;
  uint8_t buf[4];
  unint64_t v117;
  __int16 v118;
  _BYTE v119[10];
  _BYTE v120[6];
  __int16 v121;
  int v122;
  __int16 v123;
  int v124;
  __int16 v125;
  int v126;

  if (!*sub_10108CCAC())
    return;
  sub_1001157C0((char *)v92);
  sub_100B6D7B8((uint64_t)v88);
  v4 = sub_100D5D250(a1, (uint64_t)v92, (uint64_t)v88);
  v5 = v91;
  sub_1009AEBAC(a1 + 48, a2);
  v6 = sub_1009AEB64((_QWORD *)(a1 + 48));
  if (v6)
  {
    sub_1009AEAFC((_QWORD *)(a1 + 48), &v86);
    sub_100A98770(v86 + 48, (__int128 *)(a1 + 288));
    v7 = sub_1009AEEE4(a1 + 48, a2);
    if (v4)
    {
      sub_100A98730(v86 + 48, v5, a2);
      v8 = v5 < 2;
      v9 = v5 == 4;
    }
    else
    {
      v9 = 0;
      v8 = 0;
    }
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v17 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      v18 = sub_1009AEE84((_QWORD *)(a1 + 48));
      if (!v19)
        sub_10028DF3C();
      v20 = v18;
      v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 176))(*(_QWORD *)(a1 + 1768));
      *(_DWORD *)buf = 134219520;
      v117 = v20;
      v118 = 1024;
      *(_DWORD *)v119 = v7;
      *(_WORD *)&v119[4] = 1024;
      *(_DWORD *)&v119[6] = v8;
      *(_WORD *)v120 = 1024;
      *(_DWORD *)&v120[2] = v9;
      v121 = 1024;
      v122 = v5;
      v123 = 1024;
      v124 = v4;
      v125 = 1024;
      v126 = v21;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "converging state, evaluating ongoing, current attempt, %zu, expired, %d, exited area, %d, reached inside, %d, mostEnergeticProximityState, %d, wasProximityStateUpdated, %d, isConvergingStateGNSSInitialized, %d", buf, 0x30u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v48 = qword_1022A0068;
      v49 = sub_1009AEE84((_QWORD *)(a1 + 48));
      if (!v50)
        sub_10028DF3C();
      v51 = v49;
      v52 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 176))(*(_QWORD *)(a1 + 1768));
      v105 = 134219520;
      v106 = v51;
      v107 = 1024;
      *(_DWORD *)v108 = v7;
      *(_WORD *)&v108[4] = 1024;
      *(_DWORD *)&v108[6] = v8;
      *(_WORD *)v109 = 1024;
      *(_DWORD *)&v109[2] = v9;
      v110 = 1024;
      v111 = v5;
      v112 = 1024;
      v113 = v4;
      v114 = 1024;
      v115 = v52;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v48, 0, "converging state, evaluating ongoing, current attempt, %zu, expired, %d, exited area, %d, reached inside, %d, mostEnergeticProximityState, %d, wasProximityStateUpdated, %d, isConvergingStateGNSSInitialized, %d", (size_t)&v105, 48, (_DWORD)v80, v81, (_DWORD)v82, (_DWORD)v83, v84);
      v54 = (uint8_t *)v53;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::evaluateConvergingState(const CFAbsoluteTime)", "%s\n", v53);
      if (v54 != buf)
        free(v54);
    }
    if (v7 || v8 || v9)
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v22 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
      {
        v23 = sub_1009AEE84((_QWORD *)(a1 + 48));
        if (!v24)
          sub_10028DF3C();
        *(_DWORD *)buf = 134217984;
        v117 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "converging state, current attempt, %zu, ending", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v55 = qword_1022A0068;
        v56 = sub_1009AEE84((_QWORD *)(a1 + 48));
        if (!v57)
          sub_10028DF3C();
        v105 = 134217984;
        v106 = v56;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v55, 0, "converging state, current attempt, %zu, ending", (size_t)&v105);
        v59 = (uint8_t *)v58;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::evaluateConvergingState(const CFAbsoluteTime)", "%s\n", v58);
        if (v59 != buf)
          free(v59);
      }
      v25 = sub_100124100(v98, v99, *(double *)(a1 + 292), *(double *)(a1 + 300));
      *(double *)(v86 + 136) = v25;
      sub_1009AF32C((_QWORD *)(a1 + 48), a2);
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 176))(*(_QWORD *)(a1 + 1768)))
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 192))(*(_QWORD *)(a1 + 1768));
        sub_1009AE8E0(v86, a2);
      }
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 168))(*(_QWORD *)(a1 + 1768));
      v80 = _NSConcreteStackBlock;
      v81 = 3321888768;
      v82 = sub_100D5F34C;
      v83 = &unk_102182650;
      v84 = v86;
      v85 = v87;
      if (v87)
      {
        p_shared_owners = (unint64_t *)&v87->__shared_owners_;
        do
          v27 = __ldxr(p_shared_owners);
        while (__stxr(v27 + 1, p_shared_owners));
      }
      AnalyticsSendEventLazy(CFSTR("com.apple.locationd.GeofenceConvergingState_v3"), &v80);
      if (v9)
        v28 = 2;
      else
        v28 = 0;
      if (v8)
        v28 = 3;
      if (v7)
        v12 = 4;
      else
        v12 = v28;
      v29 = v85;
      if (v85)
      {
        v30 = (unint64_t *)&v85->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
    }
    else
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v32 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
      {
        v33 = sub_1009AEE84((_QWORD *)(a1 + 48));
        if (!v34)
          sub_10028DF3C();
        v35 = v33;
        sub_1009AEF3C(a1 + 48, a2);
        if (!v37)
          sub_10028DF3C();
        *(_DWORD *)buf = 134218240;
        v117 = v35;
        v118 = 2048;
        *(_QWORD *)v119 = v36;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "converging state, current attempt, %zu, remaining time, %f, continuing", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v60 = qword_1022A0068;
        v61 = sub_1009AEE84((_QWORD *)(a1 + 48));
        if (!v62)
          sub_10028DF3C();
        v63 = v61;
        sub_1009AEF3C(a1 + 48, a2);
        if (!v65)
          sub_10028DF3C();
        v105 = 134218240;
        v106 = v63;
        v107 = 2048;
        *(_QWORD *)v108 = v64;
        LODWORD(v79) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v60, 0, "converging state, current attempt, %zu, remaining time, %f, continuing", (size_t)&v105, v79);
        v67 = (uint8_t *)v66;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::evaluateConvergingState(const CFAbsoluteTime)", "%s\n", v66);
        if (v67 != buf)
          free(v67);
      }
      if (v4)
      {
        v38 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 176))(*(_QWORD *)(a1 + 1768));
        v39 = v91;
        if (v91 == 3)
          v40 = 0;
        else
          v40 = v38;
        if (v40 == 1)
        {
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          v41 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "converging state, tearing down gnss session after exiting adjacent", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_1021826B0);
            LOWORD(v105) = 0;
            LODWORD(v79) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "converging state, tearing down gnss session after exiting adjacent", &v105, *(_QWORD *)&v79);
            v74 = (uint8_t *)v73;
            sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::evaluateConvergingState(const CFAbsoluteTime)", "%s\n", v73);
            if (v74 != buf)
              free(v74);
          }
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 192))(*(_QWORD *)(a1 + 1768));
          sub_1009AE8E0(v86, a2);
          v39 = v91;
        }
        sub_100D5F530(a1, v39, a2, v89);
      }
      v12 = 0;
    }
    v42 = v87;
    if (v87)
    {
      v43 = (unint64_t *)&v87->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    goto LABEL_78;
  }
  if (!v4)
  {
    v12 = 0;
    goto LABEL_78;
  }
  v10 = *(_DWORD *)(a1 + 128);
  v11 = sub_1009AEAE8((int *)(a1 + 48));
  v12 = 0;
  if (v10 != 1 || (v5 & 0xFFFFFFFE) != 2)
  {
LABEL_78:
    if (!(_DWORD)v12 && (v4 & v6) == 0)
      goto LABEL_81;
    goto LABEL_80;
  }
  if (v11 && !*(_BYTE *)(a1 + 729))
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v45 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      v46 = (void **)v92[0];
      if (v93 >= 0)
        v46 = v92;
      v47 = v94;
      if (v95 < 0)
        v47 = (void **)v94[0];
      *(_DWORD *)buf = 136380931;
      v117 = (unint64_t)v46;
      v118 = 2081;
      *(_QWORD *)v119 = v47;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "converging state, starting new attempt. fence %{private}s/%{private}s", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v75 = (void **)v92[0];
      if (v93 >= 0)
        v75 = v92;
      v76 = v94;
      if (v95 < 0)
        v76 = (void **)v94[0];
      v105 = 136380931;
      v106 = (unint64_t)v75;
      v107 = 2081;
      *(_QWORD *)v108 = v76;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "converging state, starting new attempt. fence %{private}s/%{private}s", &v105, 22);
      v78 = (uint8_t *)v77;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::evaluateConvergingState(const CFAbsoluteTime)", "%s\n", v77);
      if (v78 != buf)
        free(v78);
    }
    sub_1009AEF9C((_QWORD *)(a1 + 48), (uint64_t *)v92, (uint64_t *)v94, a2);
    sub_100D5F530(a1, v5, a2, v89);
    v12 = 1;
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v13 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      v14 = (void **)v92[0];
      if (v93 >= 0)
        v14 = v92;
      v15 = v94;
      if (v95 < 0)
        v15 = (void **)v94[0];
      v16 = *(unsigned __int8 *)(a1 + 729);
      *(_DWORD *)buf = 136381187;
      v117 = (unint64_t)v14;
      v118 = 2081;
      *(_QWORD *)v119 = v15;
      *(_WORD *)&v119[8] = 1024;
      *(_DWORD *)v120 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "converging state, out-of-budget, cannot start new attempt. fence %{private}s/%{private}s, lowPowerModeEnabled, %d", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v68 = (void **)v92[0];
      if (v93 >= 0)
        v68 = v92;
      v69 = v94;
      if (v95 < 0)
        v69 = (void **)v94[0];
      v70 = *(unsigned __int8 *)(a1 + 729);
      v105 = 136381187;
      v106 = (unint64_t)v68;
      v107 = 2081;
      *(_QWORD *)v108 = v69;
      *(_WORD *)&v108[8] = 1024;
      *(_DWORD *)v109 = v70;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "converging state, out-of-budget, cannot start new attempt. fence %{private}s/%{private}s, lowPowerModeEnabled, %d", &v105, 28);
      v72 = (uint8_t *)v71;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::evaluateConvergingState(const CFAbsoluteTime)", "%s\n", v71);
      if (v72 != buf)
        free(v72);
    }
    v12 = 5;
  }
LABEL_80:
  (*(void (**)(_QWORD, uint64_t, uint64_t, void **))(**(_QWORD **)(a1 + 1768) + 200))(*(_QWORD *)(a1 + 1768), v5, v12, v92);
LABEL_81:
  if (v4)
  {
    *(_DWORD *)(a1 + 128) = v5;
    *(_QWORD *)(a1 + 136) = v90;
  }
  if (__p)
  {
    v104 = __p;
    operator delete(__p);
  }

  if (v101 < 0)
    operator delete(v100);
  if (v97 < 0)
    operator delete(v96);
  if (v95 < 0)
    operator delete(v94[0]);
  if (v93 < 0)
    operator delete(v92[0]);
}

void sub_100D5F2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_1004E2BD0((uint64_t)&a30);
  _Unwind_Resume(a1);
}

NSDictionary *sub_100D5F34C(uint64_t a1)
{
  NSDictionary *v1;
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  int v6;
  NSDictionary *v7;
  uint8_t buf[4];
  NSDictionary *v9;

  v1 = sub_100A983E8((double *)(*(_QWORD *)(a1 + 32) + 48));
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v9 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "converging state, submitting metric, %@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v6 = 138412290;
    v7 = v1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "converging state, submitting metric, %@", &v6, 12);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::evaluateConvergingState(const CFAbsoluteTime)_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return v1;
}

uint64_t sub_100D5F504(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_100D5F528(uint64_t a1)
{
  return sub_100261F44(a1 + 32);
}

void sub_100D5F530(uint64_t a1, int a2, double a3, double a4)
{
  NSObject *v7;
  _BYTE *v8;
  char *v9;
  char *v10;
  __n128 v11;
  double v12;
  NSObject *v13;
  const char *v14;
  char *v15;
  double v16;
  NSObject *v17;
  double v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  NSObject *v22;
  double v23;
  double v24;
  uint64_t v25;
  __int128 *p_buf;
  char *v27;
  char *v28;
  uint64_t v29;
  double v30;
  const char *v31;
  const char *v32;
  char *v33;
  uint64_t v34;
  __int128 buf;
  char v36;
  int v37;
  double v38;
  _BYTE __p[12];
  char v40;

  HIDWORD(v34) = a2;
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v7 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    sub_100791D10((int *)&v34 + 1, __p);
    v8 = v40 >= 0 ? __p : *(_BYTE **)__p;
    LODWORD(buf) = 136380675;
    *(_QWORD *)((char *)&buf + 4) = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "converging state change, setting timer for proximity state, %{private}s", (uint8_t *)&buf, 0xCu);
    if (v40 < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v25 = qword_1022A0068;
    sub_100791D10((int *)&v34 + 1, &buf);
    if (v36 >= 0)
      p_buf = &buf;
    else
      p_buf = (__int128 *)buf;
    v37 = 136380675;
    v38 = *(double *)&p_buf;
    LODWORD(v34) = 12;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v25, 2, "converging state change, setting timer for proximity state, %{private}s", &v37, v34);
    v28 = v27;
    if (v36 < 0)
      operator delete((void *)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::setNextConvergingStateChangeTimer(CFAbsoluteTime, CLFenceProximityState, double)", "%s\n", v28);
    if (v28 != __p)
      free(v28);
  }
  sub_1009AEAFC((_QWORD *)(a1 + 48), &buf);
  v9 = sub_10108CCAC();
  v10 = sub_10108CCAC();
  switch(HIDWORD(v34))
  {
    case 0:
    case 1:
    case 4:
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 168))(*(_QWORD *)(a1 + 1768));
      goto LABEL_34;
    case 2:
      v16 = *((double *)v10 + 1);
      if (v16 >= a4 / 15.0)
        v16 = a4 / 15.0;
      if (a4 / 15.0 >= *((double *)v9 + 2))
        v11.n128_f64[0] = v16;
      else
        v11.n128_u64[0] = *((_QWORD *)v9 + 2);
      (*(void (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 1768) + 160))(*(_QWORD *)(a1 + 1768), v11);
      goto LABEL_34;
    case 3:
      if ((_QWORD)buf && (v12 = sub_1009AEA9C(buf, a3), v12 < *((double *)sub_10108CCAC() + 9)))
      {
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 176))(*(_QWORD *)(a1 + 1768)) & 1) != 0)
        {
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          v13 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)__p = 0;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "converging state, GNSS already initialized", __p, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_1021826B0);
            LOWORD(v37) = 0;
            LODWORD(v34) = 2;
            _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0068, 2, "converging state, GNSS already initialized", &v37, v34);
            v15 = (char *)v14;
            sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::setNextConvergingStateChangeTimer(CFAbsoluteTime, CLFenceProximityState, double)", "%s\n", v14);
LABEL_58:
            if (v15 != __p)
              free(v15);
          }
        }
        else
        {
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          v22 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__p = 0;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "converging state, GNSS not yet initialized, initializing", __p, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_1021826B0);
            LOWORD(v37) = 0;
            LODWORD(v34) = 2;
            _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0068, 0, "converging state, GNSS not yet initialized, initializing", &v37, v34);
            v33 = (char *)v32;
            sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::setNextConvergingStateChangeTimer(CFAbsoluteTime, CLFenceProximityState, double)", "%s\n", v32);
            if (v33 != __p)
              free(v33);
          }
          v23 = *((double *)sub_10108CCAC() + 9);
          v24 = sub_1009AEA9C(buf, a3);
          (*(void (**)(_QWORD, double))(**(_QWORD **)(a1 + 1768) + 160))(*(_QWORD *)(a1 + 1768), v23 - v24);
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 184))(*(_QWORD *)(a1 + 1768));
          sub_1009AE8D0(buf, a3);
        }
      }
      else
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v17 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
        {
          v18 = sub_1009AEA9C(buf, a3);
          *(_DWORD *)__p = 134217984;
          *(double *)&__p[4] = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "converging state, not starting GNSS, exceeded max duration, %f", __p, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          v29 = qword_1022A0068;
          v30 = sub_1009AEA9C(buf, a3);
          v37 = 134217984;
          v38 = v30;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v29, 0, "converging state, not starting GNSS, exceeded max duration, %f", COERCE_DOUBLE(&v37));
          v15 = (char *)v31;
          sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::setNextConvergingStateChangeTimer(CFAbsoluteTime, CLFenceProximityState, double)", "%s\n", v31);
          goto LABEL_58;
        }
      }
LABEL_34:
      v19 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
      if (*((_QWORD *)&buf + 1))
      {
        v20 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      return;
    default:
      goto LABEL_34;
  }
}

void sub_100D5FC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_100D5FC68(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 26 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100D6449C(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x1A)) + 156 * (v7 % 0x1A);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  v10 = *(_OWORD *)(a2 + 32);
  v11 = *(_OWORD *)(a2 + 48);
  v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 80) = v12;
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)(v8 + 48) = v11;
  result = *(__n128 *)(a2 + 96);
  v14 = *(_OWORD *)(a2 + 112);
  v15 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v8 + 140) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(v8 + 112) = v14;
  *(_OWORD *)(v8 + 128) = v15;
  *(__n128 *)(v8 + 96) = result;
  ++a1[5];
  return result;
}

BOOL sub_100D5FD3C(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t v4;
  void *v6[2];
  char v7;
  void *__p;
  char v9;

  sub_1000BE57C((char *)v6, a2, a3);
  v4 = sub_100D64EA8(a1 + 792, (const void **)v6);
  if (v9 < 0)
    operator delete(__p);
  if (v7 < 0)
    operator delete(v6[0]);
  return a1 + 800 != v4;
}

void sub_100D5FDA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002FDAA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100D5FDB8(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t **v8;
  uint64_t *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t *v12;
  double v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  BOOL v17;
  uint64_t *v18;
  double v19;
  double v20;
  double v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  char *v27;
  const char *v28;
  char *v29;
  uint64_t v30;
  _OWORD v31[8];
  _OWORD v32[2];
  _OWORD v33[8];
  _OWORD v34[2];
  _OWORD v35[8];
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[28];
  _BYTE v46[12];
  __int128 buf;
  uint64_t v48;

  v43 = xmmword_101C174D8;
  v44 = xmmword_101C174E8;
  memset(v45, 0, sizeof(v45));
  v39 = xmmword_101C17498;
  v40 = xmmword_101C174A8;
  v41 = xmmword_101C174B8;
  v42 = xmmword_101C174C8;
  v37 = xmmword_101C17478;
  v38 = xmmword_101C17488;
  v8 = (uint64_t **)(a1 + 1904);
  if (!*(_QWORD *)(a1 + 1920))
    *(double *)(a1 + 1936) = a3;
  *(_QWORD *)&buf = a2;
  v9 = sub_100D64978((uint64_t **)(a1 + 1904), (unsigned __int8 *)a2, (uint64_t)&unk_101B9EB60, (__int128 **)&buf);
  *((double *)v9 + 35) = a4;
  *((double *)v9 + 36) = a3;
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v10 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v11 = a2 + 24;
    if (*(char *)(a2 + 47) < 0)
      v11 = *(_QWORD *)(a2 + 24);
    LODWORD(buf) = 136380675;
    *(_QWORD *)((char *)&buf + 4) = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Fence: MiLo, handleFenceMiLoHomeLoiExitMismatchMetrics, fence, %{private}s", (uint8_t *)&buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v25 = *(_QWORD *)(a2 + 24);
    v24 = a2 + 24;
    v23 = v25;
    if (*(char *)(v24 + 23) >= 0)
      v23 = v24;
    *(_DWORD *)v46 = 136380675;
    *(_QWORD *)&v46[4] = v23;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: MiLo, handleFenceMiLoHomeLoiExitMismatchMetrics, fence, %{private}s", v46, 12);
    v27 = (char *)v26;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleFenceMiLoHomeLoiExitMismatchMetrics(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, const double)", "%s\n", v26);
    if (v27 != (char *)&buf)
      free(v27);
  }
  if (vabdd_f64(a3, *(double *)(a1 + 1936)) > *((double *)sub_10016F688() + 51))
  {
    *(double *)(a1 + 1936) = a3;
    v48 = 0;
    *((_QWORD *)&buf + 1) = 0;
    *(_QWORD *)&buf = (char *)&buf + 8;
    v12 = *(uint64_t **)(a1 + 1904);
    if (v12 != (uint64_t *)(a1 + 1912))
    {
      do
      {
        v14 = v12[35];
        v13 = *((double *)v12 + 36);
        if (vabdd_f64(a3, v13) <= *((double *)sub_10016F688() + 51))
        {
          *(_QWORD *)v46 = v12 + 4;
          v18 = sub_100D64978((uint64_t **)&buf, (unsigned __int8 *)v12 + 32, (uint64_t)&unk_101B9EB60, (__int128 **)v46);
          v18[35] = v14;
          *((double *)v18 + 36) = v13;
          v19 = *(double *)(a1 + 1936);
          if (v13 < v19)
            v19 = v13;
          *(double *)(a1 + 1936) = v19;
          v16 = sub_10008A9F0(v8, v12);
          sub_100D63FDC((uint64_t)(v12 + 4));
          operator delete(v12);
        }
        else
        {
          v15 = (uint64_t *)v12[1];
          if (v15)
          {
            do
            {
              v16 = v15;
              v15 = (uint64_t *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              v16 = (uint64_t *)v12[2];
              v17 = *v16 == (_QWORD)v12;
              v12 = v16;
            }
            while (!v17);
          }
        }
        v12 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 1912));
    }
    v35[6] = v43;
    v35[7] = v44;
    v36[0] = *(_OWORD *)v45;
    *(_OWORD *)((char *)v36 + 12) = *(_OWORD *)&v45[12];
    v35[2] = v39;
    v35[3] = v40;
    v35[4] = v41;
    v35[5] = v42;
    v35[0] = v37;
    v35[1] = v38;
    sub_100D60410(a1, (uint64_t)v35, 0, 0.0);
    if (v8 != (uint64_t **)&buf)
      sub_100D64AD4(v8, (_QWORD *)buf, (_QWORD *)&buf + 1);
    sub_100D63F94((uint64_t)&buf, *((_QWORD **)&buf + 1));
  }
  if (*(_QWORD *)(a1 + 1920)
    && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 392))(*(_QWORD *)(a1 + 1768)) & 1) == 0
    && *(_BYTE *)(a1 + 1873)
    && !sub_10016F688()[416])
  {
    v20 = *(double *)(a1 + 1928);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v21 = vabdd_f64(a3, v20);
    v22 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 134283521;
      *(double *)((char *)&buf + 4) = v21;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Fence: MiLo, timeSinceLastMiLoGpsRequested, %{private}.1f", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      *(_DWORD *)v46 = 134283521;
      *(double *)&v46[4] = v21;
      LODWORD(v30) = 12;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: MiLo, timeSinceLastMiLoGpsRequested, %{private}.1f", v46, v30);
      v29 = (char *)v28;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleFenceMiLoHomeLoiExitMismatchMetrics(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, const double)", "%s\n", v28);
      if (v29 != (char *)&buf)
        free(v29);
    }
    if (v21 >= 604800.0)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 392))(*(_QWORD *)(a1 + 1768)) & 1) == 0)
      {
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 456))(*(_QWORD *)(a1 + 1768)))
        {
          (*(void (**)(_QWORD, void *))(**(_QWORD **)(a1 + 1768) + 248))(*(_QWORD *)(a1 + 1768), &unk_101C229C8);
        }
        else
        {
          v31[6] = v43;
          v31[7] = v44;
          v32[0] = *(_OWORD *)v45;
          *(_OWORD *)((char *)v32 + 12) = *(_OWORD *)&v45[12];
          v31[2] = v39;
          v31[3] = v40;
          v31[4] = v41;
          v31[5] = v42;
          v31[0] = v37;
          v31[1] = v38;
          sub_100D60410(a1, (uint64_t)v31, 0, 0.0);
        }
      }
    }
    else
    {
      v33[6] = v43;
      v33[7] = v44;
      v34[0] = *(_OWORD *)v45;
      *(_OWORD *)((char *)v34 + 12) = *(_OWORD *)&v45[12];
      v33[2] = v39;
      v33[3] = v40;
      v33[4] = v41;
      v33[5] = v42;
      v33[0] = v37;
      v33[1] = v38;
      sub_100D60410(a1, (uint64_t)v33, 0, 0.0);
    }
  }
}

void sub_100D603E8(_Unwind_Exception *a1)
{
  sub_100D63F94((uint64_t)&STACK[0x2A0], (_QWORD *)STACK[0x2A8]);
  _Unwind_Resume(a1);
}

void sub_100D60410(uint64_t a1, uint64_t a2, int a3, double a4)
{
  double *v8;
  double *v9;
  double v10;
  double v11;
  unsigned int v12;
  double v13;
  double v14;
  double v15;
  int v16;
  double v17;
  int v18;
  int v19;
  double *v20;
  double *v21;
  BOOL v22;
  uint64_t v23;
  _OWORD v24[2];
  __int128 v25;
  uint64_t v26;
  int v27;

  if (*(_QWORD *)(a1 + 1920))
  {
    v23 = a1 + 1904;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 264))(*(_QWORD *)(a1 + 1768));
    v8 = *(double **)(a1 + 1904);
    v9 = (double *)(a1 + 1912);
    if (v8 != (double *)(a1 + 1912))
    {
      do
      {
        v10 = v8[35];
        v11 = v8[36];
        v25 = 0u;
        v26 = 0;
        memset(v24, 0, sizeof(v24));
        v27 = -1;
        HIDWORD(v25) = (v10 * 100.0);
        v12 = (round(sub_10016F694((uint64_t)(v8 + 4)) / 10.0) * 10.0);
        if (v12 >= 0xC8)
          v12 = 200;
        HIDWORD(v26) = v12;
        if (a3)
        {
          if (*(double *)(a2 + 20) <= 0.0)
          {
            v19 = 1;
          }
          else
          {
            v13 = sub_10016F4A8((double *)(a2 + 4), (uint64_t)(v8 + 4), (double *)(a1 + 1776));
            v14 = sub_10016F694((uint64_t)(v8 + 4));
            v15 = v13 - v14;
            v16 = (int)(round((v13 - v14) / 10.0) * 10.0);
            if (v16 <= -100)
              v16 = -100;
            if (v16 >= 100)
              v16 = 100;
            v17 = *(double *)(a2 + 20);
            v18 = (int)(round(v17 / 10.0) * 10.0);
            if (v18 >= 100)
              v18 = 100;
            LODWORD(v26) = v16;
            v27 = v18;
            if (vabdd_f64(v13, v14) >= v17 && vabdd_f64(a4, v11) <= *((double *)sub_10016F688() + 51))
            {
              if (v15 <= 0.0)
                v19 = 3;
              else
                v19 = 4;
            }
            else
            {
              v19 = 2;
            }
          }
        }
        else
        {
          v19 = 0;
        }
        DWORD2(v25) = v19;
        sub_100ED2E88(v24);
        v20 = (double *)*((_QWORD *)v8 + 1);
        if (v20)
        {
          do
          {
            v21 = v20;
            v20 = *(double **)v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            v21 = (double *)*((_QWORD *)v8 + 2);
            v22 = *(_QWORD *)v21 == (_QWORD)v8;
            v8 = v21;
          }
          while (!v22);
        }
        v8 = v21;
      }
      while (v21 != v9);
    }
    sub_100D63F94(v23, *(_QWORD **)(a1 + 1912));
    *(_QWORD *)(a1 + 1904) = v9;
    *(_OWORD *)v9 = 0u;
  }
}

uint64_t sub_100D60638(uint64_t result, double a2)
{
  *(double *)(result + 1928) = a2;
  return result;
}

void sub_100D60640(uint64_t a1)
{
  _OWORD v1[10];

  v1[6] = xmmword_101C174D8;
  v1[7] = xmmword_101C174E8;
  memset(&v1[8], 0, 28);
  v1[2] = xmmword_101C17498;
  v1[3] = xmmword_101C174A8;
  v1[4] = xmmword_101C174B8;
  v1[5] = xmmword_101C174C8;
  v1[0] = xmmword_101C17478;
  v1[1] = xmmword_101C17488;
  sub_100D60410(a1, (uint64_t)v1, 1, 0.0);
}

void sub_100D606A0(uint64_t a1, int a2)
{
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  _WORD v13[8];
  uint8_t buf[1640];

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 344))(*(_QWORD *)(a1 + 1768)) & 1) != 0)
  {
    if (*(unsigned __int8 *)(a1 + 784) != a2)
    {
      *(_BYTE *)(a1 + 784) = a2;
      if (a2)
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v4 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: start monitoring scenario trigger settled", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          v13[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: start monitoring scenario trigger settled", v13, 2);
          v10 = (uint8_t *)v9;
          sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::monitorSettled(BOOL)", "%s\n", v9);
          if (v10 != buf)
            free(v10);
        }
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 352))(*(_QWORD *)(a1 + 1768));
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 368))(*(_QWORD *)(a1 + 1768));
        *(_DWORD *)(a1 + 604) = 1;
      }
      else
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v8 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Fence: stop monitoring scenario trigger settled", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          v13[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: stop monitoring scenario trigger settled", v13, 2);
          v12 = (uint8_t *)v11;
          sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::monitorSettled(BOOL)", "%s\n", v11);
          if (v12 != buf)
            free(v12);
        }
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 360))(*(_QWORD *)(a1 + 1768));
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 320))(*(_QWORD *)(a1 + 1768));
        *(_DWORD *)(a1 + 604) = 0;
      }
    }
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v5 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Fence: CLRoutineMonitor is not supported", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: CLRoutineMonitor is not supported", v13, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::monitorSettled(BOOL)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

BOOL sub_100D60B00(uint64_t a1)
{
  return *(_QWORD *)(a1 + 832) != 0;
}

void sub_100D60B10(uint64_t **a1, uint64_t a2, unsigned __int8 *a3, double a4, int a5)
{
  if (a5)
    sub_100D60B1C(a1, a2, a3, a4);
  else
    sub_100D6112C((uint64_t)a1, a2, a3, 0, a4);
}

void sub_100D60B1C(uint64_t **a1, uint64_t a2, unsigned __int8 *a3, double a4)
{
  uint64_t *v8;
  char *v9;
  uint64_t *v10;
  void *v11;
  NSObject *v12;
  std::string *v13;
  uint64_t *v14;
  uint64_t *v15;
  std::string *v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  const char *v23;
  char *v24;
  _BYTE v25[88];
  void *v26[2];
  char v27;
  void *v28;
  char v29;
  void *__p;
  char v31;
  void *v32[2];
  uint64_t v33;
  void *v34;
  char v35;
  void *__dst[2];
  uint64_t v37;
  std::string __str;
  std::string v39;
  std::string v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[21];
  std::string v48;
  id v49;
  void *v50;
  _BYTE *v51;
  int v52;
  std::string *v53;
  __int16 v54;
  uint64_t *v55;
  __int16 v56;
  uint64_t *v57;
  _BYTE buf[12];
  __int16 v59;
  uint64_t *v60;
  __int16 v61;
  uint64_t *v62;

  *(_QWORD *)buf = a3;
  v8 = sub_100D64F34(a1 + 102, a3, (uint64_t)&unk_101B9EB60, (__int128 **)buf);
  std::string::operator=((std::string *)(v8 + 35), (const std::string *)a2);
  if (!sub_100D5FD3C((uint64_t)a1, (__int128 *)a2, (__int128 *)a3))
  {
    if ((char)a3[23] < 0)
    {
      sub_100115CE4(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)a3;
      v37 = *((_QWORD *)a3 + 2);
    }
    if (*(char *)(a2 + 23) >= 0)
      v9 = (char *)a2;
    else
      v9 = *(char **)a2;
    sub_1015A2E04(&v34, v9);
    if ((char)a3[71] < 0)
    {
      sub_100115CE4(v32, *((void **)a3 + 6), *((_QWORD *)a3 + 7));
    }
    else
    {
      *(_OWORD *)v32 = *((_OWORD *)a3 + 3);
      v33 = *((_QWORD *)a3 + 8);
    }
    sub_10016F688();
    sub_1015A2E04(&__p, "");
    sub_100C3B6CC(&__str);
    if (v31 < 0)
      operator delete(__p);
    if (SHIBYTE(v33) < 0)
      operator delete(v32[0]);
    if (v35 < 0)
      operator delete(v34);
    if (SHIBYTE(v37) < 0)
      operator delete(__dst[0]);
    *((_QWORD *)&v46 + 1) = 3;
    *(_DWORD *)&v47[16] = sub_100115D70((uint64_t)&__str);
    *(_QWORD *)v47 = *((_QWORD *)a3 + 21);
    sub_1000BE57C((char *)v26, (__int128 *)&v39, (__int128 *)&__str);
    *(_QWORD *)buf = v26;
    v10 = sub_100D65094(a1 + 99, (const void **)v26, (uint64_t)&unk_101B9EB60, (__int128 **)buf);
    std::string::operator=((std::string *)(v10 + 10), &__str);
    std::string::operator=((std::string *)(v10 + 13), &v39);
    std::string::operator=((std::string *)(v10 + 16), &v40);
    *(_OWORD *)(v10 + 27) = v45;
    *(_OWORD *)(v10 + 29) = v46;
    *(_OWORD *)(v10 + 31) = *(_OWORD *)v47;
    *(_OWORD *)(v10 + 19) = v41;
    *(_OWORD *)(v10 + 21) = v42;
    *(_OWORD *)(v10 + 23) = v43;
    *(_OWORD *)(v10 + 25) = v44;
    *(uint64_t *)((char *)v10 + 261) = *(_QWORD *)&v47[13];
    std::string::operator=((std::string *)(v10 + 34), &v48);
    v11 = (void *)v10[37];
    v10[37] = (uint64_t)v49;

    if (v10 + 10 != (uint64_t *)&__str)
      sub_1002F3538((char *)v10 + 304, (char *)v50, (uint64_t)v51, (v51 - (_BYTE *)v50) >> 4);
    sub_100B6D7B8((uint64_t)v25);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v12 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v39;
      else
        v13 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((a3[23] & 0x80u) == 0)
        v14 = (uint64_t *)a3;
      else
        v14 = *(uint64_t **)a3;
      v15 = (uint64_t *)(a3 + 24);
      if ((a3[47] & 0x80u) != 0)
        v15 = (uint64_t *)*((_QWORD *)a3 + 3);
      *(_DWORD *)buf = 136381187;
      *(_QWORD *)&buf[4] = v13;
      v59 = 2081;
      v60 = v14;
      v61 = 2081;
      v62 = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#significantRegion: helper fence start, %{private}s for [%{private}s/%{private}s", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = &v39;
      else
        v16 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((a3[23] & 0x80u) == 0)
        v17 = (uint64_t *)a3;
      else
        v17 = *(uint64_t **)a3;
      v18 = (char)a3[47];
      v21 = (uint64_t *)*((_QWORD *)a3 + 3);
      v20 = (uint64_t *)(a3 + 24);
      v19 = v21;
      if (v18 >= 0)
        v22 = v20;
      else
        v22 = v19;
      v52 = 136381187;
      v53 = v16;
      v54 = 2081;
      v55 = v17;
      v56 = 2081;
      v57 = v22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#significantRegion: helper fence start, %{private}s for [%{private}s/%{private}s", &v52, 32);
      v24 = (char *)v23;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::startMonitoringLoiFence(const CFAbsoluteTime, const CLLocationOfInterestLite &, const CLFenceManager_Type::Fence &)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    sub_100D59308((uint64_t)a1, (uint64_t)&__str, (uint64_t)v25, a4);
    (*(void (**)(uint64_t *))(*a1[221] + 424))(a1[221]);
    if (v29 < 0)
      operator delete(v28);
    if (v27 < 0)
      operator delete(v26[0]);
    if (v50)
    {
      v51 = v50;
      operator delete(v50);
    }

    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_100D61084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52)
{
  sub_1002FDAA0((uint64_t)&a22);
  sub_1004E2BD0((uint64_t)&a52);
  _Unwind_Resume(a1);
}

void sub_100D6112C(uint64_t a1, uint64_t a2, _BYTE *a3, int a4, double a5)
{
  char v5;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  void **p_s1;
  int v18;
  int v19;
  int v20;
  _BOOL4 v21;
  NSObject *v23;
  double v24;
  uint64_t v25;
  NSObject *v26;
  double v27;
  uint64_t v28;
  _BYTE *v29;
  int v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint8_t *v36;
  NSObject *v37;
  double v38;
  uint64_t v39;
  NSObject *v40;
  double v41;
  uint64_t v42;
  double v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint8_t *v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  NSObject *v57;
  double v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  const char *v62;
  uint8_t *v63;
  double v64;
  NSObject *v65;
  void *v66;
  void *v67;
  const char *v68;
  NSObject *v69;
  void *v70;
  _BYTE *v71;
  uint64_t v72;
  const char *v73;
  uint8_t *v74;
  _BYTE *v75;
  uint64_t v76;
  const char *v77;
  uint8_t *v78;
  void *v79;
  const char *v80;
  int v81;
  double v82;
  __int16 v83;
  uint64_t v84;
  __int16 v85;
  double v86;
  __int16 v87;
  double v88;
  uint8_t buf[4];
  double v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  double v94;
  __int16 v95;
  double v96;
  _BYTE v97[12];
  __int16 v98;
  uint64_t v99;
  char v100;
  void *__s1;
  size_t __n;
  unsigned __int8 v103;
  void *v104;
  char v105;
  double v106;
  double v107;
  double v108;
  void *v109;
  char v110;
  id v111;
  void *__p;
  void *v113;

  v5 = a4;
  if ((a3[160] & 0x80) == 0)
  {
    if (*(double *)(a2 + 40) <= 0.0)
    {
      if (!a4)
        return;
      goto LABEL_39;
    }
    goto LABEL_26;
  }
  v10 = sub_10016FC40(a1 + 816, a3);
  v11 = a1 + 824;
  if (*(double *)(a2 + 40) > 0.0)
  {
    if (v11 == v10)
    {
LABEL_26:
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v23 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
      {
        if ((char)a3[23] >= 0)
          v24 = *(double *)&a3;
        else
          v24 = *(double *)a3;
        if (*(char *)(a2 + 23) >= 0)
          v25 = a2;
        else
          v25 = *(_QWORD *)a2;
        *(_DWORD *)buf = 136380931;
        v90 = v24;
        v91 = 2081;
        v92 = v25;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#significantRegion: helper fence start after found, [%{private}s]/%{private}s", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        if ((char)a3[23] >= 0)
          v71 = a3;
        else
          v71 = *(_BYTE **)a3;
        if (*(char *)(a2 + 23) >= 0)
          v72 = a2;
        else
          v72 = *(_QWORD *)a2;
        *(_DWORD *)v97 = 136380931;
        *(_QWORD *)&v97[4] = v71;
        v98 = 2081;
        v99 = v72;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#significantRegion: helper fence start after found, [%{private}s]/%{private}s", v97, 22);
        v74 = (uint8_t *)v73;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::refreshLoiModelForFence(const CFAbsoluteTime, const CLLocationOfInterestLite &, const CLFenceManager_Type::Fence &, const BOOL)", "%s\n", v73);
        if (v74 != buf)
          free(v74);
      }
      sub_100D60B1C((uint64_t **)a1, a2, a3, a5);
      return;
    }
    sub_1001157C0(v97);
    if ((sub_100D5E27C(a1, a3, (uint64_t)v97) & 1) == 0)
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v40 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_ERROR))
      {
        if ((char)a3[23] >= 0)
          v41 = *(double *)&a3;
        else
          v41 = *(double *)a3;
        if ((char)a3[47] >= 0)
          v42 = (uint64_t)(a3 + 24);
        else
          v42 = *((_QWORD *)a3 + 3);
        *(_DWORD *)buf = 136380931;
        v90 = v41;
        v91 = 2081;
        v92 = v42;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "#significantRegion: helper fence not found [%{private}s]/%{private}s", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        if ((char)a3[23] >= 0)
          v43 = *(double *)&a3;
        else
          v43 = *(double *)a3;
        v44 = (char)a3[47];
        v47 = *((_QWORD *)a3 + 3);
        v46 = (uint64_t)(a3 + 24);
        v45 = v47;
        if (v44 >= 0)
          v48 = v46;
        else
          v48 = v45;
        v81 = 136380931;
        v82 = v43;
        v83 = 2081;
        v84 = v48;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 16, "#significantRegion: helper fence not found [%{private}s]/%{private}s", &v81, 22);
        v50 = (uint8_t *)v49;
        sub_100512490("Generic", 1, 0, 0, "void CLFenceMonitor::refreshLoiModelForFence(const CFAbsoluteTime, const CLLocationOfInterestLite &, const CLFenceManager_Type::Fence &, const BOOL)", "%s\n", v49);
        if (v50 != buf)
          free(v50);
      }
      goto LABEL_144;
    }
    if ((v103 & 0x80u) == 0)
      v12 = v103;
    else
      v12 = __n;
    v13 = *(unsigned __int8 *)(a2 + 23);
    v14 = (char)v13;
    if ((v13 & 0x80u) != 0)
      v13 = *(_QWORD *)(a2 + 8);
    if (v12 == v13)
    {
      if (v14 >= 0)
        v15 = (unsigned __int8 *)a2;
      else
        v15 = *(unsigned __int8 **)a2;
      if ((v103 & 0x80) != 0)
      {
        v21 = memcmp(__s1, v15, __n) != 0;
      }
      else if (v103)
      {
        v16 = v103 - 1;
        p_s1 = &__s1;
        do
        {
          v19 = *(unsigned __int8 *)p_s1;
          p_s1 = (void **)((char *)p_s1 + 1);
          v18 = v19;
          v20 = *v15++;
          v21 = v18 != v20;
        }
        while (v18 == v20 && v16-- != 0);
      }
      else
      {
        v21 = 0;
      }
    }
    else
    {
      v21 = 1;
    }
    v51 = *((double *)sub_10016F688() + 4);
    v52 = *(double *)(a2 + 40);
    v53 = v108;
    v54 = sub_10011E634((double *)(a1 + 1776), v106, v107, *(double *)(a2 + 24), *(double *)(a2 + 32), 0.0);
    v55 = v51 * v52;
    v56 = v53 - v51 * v52;
    if (v21)
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v57 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
      {
        if ((v103 & 0x80u) == 0)
          v58 = COERCE_DOUBLE(&__s1);
        else
          v58 = *(double *)&__s1;
        if (*(char *)(a2 + 23) >= 0)
          v59 = a2;
        else
          v59 = *(_QWORD *)a2;
        *(_DWORD *)buf = 136381443;
        v90 = v58;
        v91 = 2081;
        v92 = v59;
        v93 = 2049;
        v94 = v56;
        v95 = 2049;
        v96 = v54;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "#significantRegion: helper fence restart due to changed identifier, %{private}s => %{private}s, dRadius, %{private}.1lf, dCenter, %{private}.1lf", buf, 0x2Au);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_143;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      if ((v103 & 0x80u) == 0)
        v60 = COERCE_DOUBLE(&__s1);
      else
        v60 = *(double *)&__s1;
      if (*(char *)(a2 + 23) >= 0)
        v61 = a2;
      else
        v61 = *(_QWORD *)a2;
      v81 = 136381443;
      v82 = v60;
      v83 = 2081;
      v84 = v61;
      v85 = 2049;
      v86 = v56;
      v87 = 2049;
      v88 = v54;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#significantRegion: helper fence restart due to changed identifier, %{private}s => %{private}s, dRadius, %{private}.1lf, dCenter, %{private}.1lf", &v81, 42);
      v63 = (uint8_t *)v62;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::refreshLoiModelForFence(const CFAbsoluteTime, const CLLocationOfInterestLite &, const CLFenceManager_Type::Fence &, const BOOL)", "%s\n", v62);
    }
    else
    {
      v64 = sub_10016F61C((uint64_t)v97);
      if (v55 <= v64 + *((double *)sub_10016F688() + 25) || fabs(v56) <= *((double *)sub_10016F688() + 25))
      {
        if (v54 <= *((double *)sub_10016F688() + 26))
        {
LABEL_144:
          if (__p)
          {
            v113 = __p;
            operator delete(__p);
          }

          if (v110 < 0)
            operator delete(v109);
          if (v105 < 0)
            operator delete(v104);
          if ((char)v103 < 0)
            operator delete(__s1);
          if (v100 < 0)
            operator delete(*(void **)v97);
          return;
        }
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v69 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
        {
          if ((v103 & 0x80u) == 0)
            v70 = &__s1;
          else
            v70 = __s1;
          *(_DWORD *)buf = 134283779;
          v90 = v54;
          v91 = 2081;
          v92 = (uint64_t)v70;
          _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "#significantRegion: helper fence restart due to changed center, %{private}.1lf, %{private}s", buf, 0x16u);
        }
        if (!sub_1001BFF7C(115, 2))
        {
LABEL_143:
          sub_100D5B210((uint64_t **)a1, a3, a5);
          sub_100D60B1C((uint64_t **)a1, a2, a3, a5);
          goto LABEL_144;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        if ((v103 & 0x80u) == 0)
          v79 = &__s1;
        else
          v79 = __s1;
        v81 = 134283779;
        v82 = v54;
        v83 = 2081;
        v84 = (uint64_t)v79;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#significantRegion: helper fence restart due to changed center, %{private}.1lf, %{private}s", &v81, 22);
        v63 = (uint8_t *)v80;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::refreshLoiModelForFence(const CFAbsoluteTime, const CLLocationOfInterestLite &, const CLFenceManager_Type::Fence &, const BOOL)", "%s\n", v80);
      }
      else
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v65 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
        {
          if ((v103 & 0x80u) == 0)
            v66 = &__s1;
          else
            v66 = __s1;
          *(_DWORD *)buf = 134283779;
          v90 = v56;
          v91 = 2081;
          v92 = (uint64_t)v66;
          _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "#significantRegion: helper fence restart due to changed radius, %{private}.1lf, %{private}s", buf, 0x16u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_143;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        if ((v103 & 0x80u) == 0)
          v67 = &__s1;
        else
          v67 = __s1;
        v81 = 134283779;
        v82 = v56;
        v83 = 2081;
        v84 = (uint64_t)v67;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#significantRegion: helper fence restart due to changed radius, %{private}.1lf, %{private}s", &v81, 22);
        v63 = (uint8_t *)v68;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::refreshLoiModelForFence(const CFAbsoluteTime, const CLLocationOfInterestLite &, const CLFenceManager_Type::Fence &, const BOOL)", "%s\n", v68);
      }
    }
    if (v63 != buf)
      free(v63);
    goto LABEL_143;
  }
  if ((v5 & 1) != 0)
  {
LABEL_39:
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v26 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      if ((char)a3[23] >= 0)
        v27 = *(double *)&a3;
      else
        v27 = *(double *)a3;
      if ((char)a3[47] >= 0)
        v28 = (uint64_t)(a3 + 24);
      else
        v28 = *((_QWORD *)a3 + 3);
      *(_DWORD *)buf = 136380931;
      v90 = v27;
      v91 = 2081;
      v92 = v28;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#Warning #significantRegion: helper fence ambiguity for [%{private}s]/%{private}s]", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      if ((char)a3[23] >= 0)
        v29 = a3;
      else
        v29 = *(_BYTE **)a3;
      v30 = (char)a3[47];
      v33 = *((_QWORD *)a3 + 3);
      v32 = a3 + 24;
      v31 = v33;
      if (v30 >= 0)
        v34 = (uint64_t)v32;
      else
        v34 = v31;
      *(_DWORD *)v97 = 136380931;
      *(_QWORD *)&v97[4] = v29;
      v98 = 2081;
      v99 = v34;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#Warning #significantRegion: helper fence ambiguity for [%{private}s]/%{private}s]", v97, 22);
      v36 = (uint8_t *)v35;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::refreshLoiModelForFence(const CFAbsoluteTime, const CLLocationOfInterestLite &, const CLFenceManager_Type::Fence &, const BOOL)", "%s\n", v35);
      if (v36 != buf)
        free(v36);
    }
    return;
  }
  if (v11 != v10)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v37 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      if ((char)a3[23] >= 0)
        v38 = *(double *)&a3;
      else
        v38 = *(double *)a3;
      if ((char)a3[47] >= 0)
        v39 = (uint64_t)(a3 + 24);
      else
        v39 = *((_QWORD *)a3 + 3);
      *(_DWORD *)buf = 136380931;
      v90 = v38;
      v91 = 2081;
      v92 = v39;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#significantRegion: helper fence stop as disappeared for [%{private}s]/%{private}s", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      if ((char)a3[23] >= 0)
        v75 = a3;
      else
        v75 = *(_BYTE **)a3;
      if ((char)a3[47] >= 0)
        v76 = (uint64_t)(a3 + 24);
      else
        v76 = *((_QWORD *)a3 + 3);
      *(_DWORD *)v97 = 136380931;
      *(_QWORD *)&v97[4] = v75;
      v98 = 2081;
      v99 = v76;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#significantRegion: helper fence stop as disappeared for [%{private}s]/%{private}s", v97, 22);
      v78 = (uint8_t *)v77;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::refreshLoiModelForFence(const CFAbsoluteTime, const CLLocationOfInterestLite &, const CLFenceManager_Type::Fence &, const BOOL)", "%s\n", v77);
      if (v78 != buf)
        free(v78);
    }
    sub_100D5B210((uint64_t **)a1, a3, a5);
  }
}

void sub_100D61F18(_Unwind_Exception *a1)
{
  sub_1004E2BD0((uint64_t)&STACK[0x6A0]);
  _Unwind_Resume(a1);
}

void sub_100D61F5C(uint64_t a1, _BYTE *a2, int a3, double a4)
{
  void *v14[2];
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  void *__p[2];
  uint64_t v19;
  void *__dst[2];
  uint64_t v21;
  __int128 v22;
  unint64_t v23;

  sub_1015A2E04(__p, "");
  if (SHIBYTE(v19) < 0)
  {
    sub_100115CE4(__dst, __p[0], (unint64_t)__p[1]);
    __asm { FMOV            V0.2D, #-1.0 }
    v22 = _Q0;
    v23 = 0xBFF0000000000000;
    if (SHIBYTE(v19) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)__p;
    v21 = v19;
    __asm { FMOV            V0.2D, #-1.0 }
    v22 = _Q0;
    v23 = 0xBFF0000000000000;
  }
  if (SHIBYTE(v21) < 0)
  {
    sub_100115CE4(v14, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)v14 = *(_OWORD *)__dst;
    v15 = v21;
  }
  v16 = v22;
  v17 = v23;
  sub_100D6112C(a1, (uint64_t)v14, a2, a3, a4);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
  if (SHIBYTE(v21) < 0)
    operator delete(__dst[0]);
}

void sub_100D62084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

void sub_100D620D0(uint64_t a1, void *a2, double a3)
{
  NSDate *v6;
  NSDate *v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  std::string *v19;
  const char *v20;
  _QWORD *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  std::string::size_type size;
  const void **v26;
  std::string *v27;
  NSObject *v28;
  std::string *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  std::string *v33;
  _QWORD *v34;
  const char *v35;
  uint8_t *v36;
  NSObject *v37;
  std::string *v38;
  const char *v39;
  _QWORD *v40;
  const char *v41;
  _QWORD *v42;
  _QWORD *v43;
  NSObject *v44;
  std::string *v45;
  _QWORD *v46;
  std::string *v47;
  _QWORD *v48;
  const char *v49;
  uint8_t *v50;
  std::string *v51;
  const char *v52;
  const char *v53;
  uint8_t *v54;
  std::string *v55;
  const char *v56;
  const char *v57;
  uint8_t *v58;
  uint64_t v59;
  void *v60[2];
  char v61;
  void *__p[2];
  char v63;
  std::string v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  unint64_t v72;
  int v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  int v84;
  std::string *v85;
  __int16 v86;
  const char *v87;
  __int16 v88;
  _QWORD *v89;
  uint8_t buf[4];
  std::string *v91;
  __int16 v92;
  const char *v93;
  __int16 v94;
  _QWORD *v95;

  v6 = (NSDate *)objc_msgSend(a2, "departureDate");
  v7 = +[NSDate distantFuture](NSDate, "distantFuture");
  v65 = 0xFFFF;
  __asm { FMOV            V0.2D, #-1.0 }
  v69 = xmmword_101BAFEE0;
  v70 = _Q0;
  v71 = _Q0;
  v72 = 0xBFF0000000000000;
  v74 = 0xBFF0000000000000;
  v73 = 0;
  v75 = 0;
  v78 = 0xBFF0000000000000;
  v79 = 0x7FFFFFFF;
  v81 = 0;
  v82 = 0;
  v80 = 0;
  v83 = 0;
  objc_msgSend(a2, "coordinate");
  v66 = v13;
  objc_msgSend(a2, "coordinate");
  v67 = v14;
  objc_msgSend(a2, "coordinate");
  v76 = v15;
  objc_msgSend(a2, "coordinate");
  v77 = v16;
  objc_msgSend(a2, "horizontalAccuracy");
  v68 = v17;
  memset(&v64, 0, sizeof(v64));
  if (a2 && objc_msgSend(a2, "_placeInference") && objc_msgSend(objc_msgSend(a2, "_placeInference"), "_loiIdentifier"))
  {
    std::string::assign(&v64, (const std::string::value_type *)objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(a2, "_placeInference"), "_loiIdentifier"), "UUIDString"), "UTF8String"));
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v18 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v19 = &v64;
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v19 = (std::string *)v64.__r_.__value_.__r.__words[0];
      v20 = "exit";
      if (v6 == v7)
        v20 = "entry";
      *(_DWORD *)buf = 136380931;
      v91 = v19;
      v92 = 2082;
      v93 = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#significantRegion: visit, id, %{private}s, %{public}s", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v55 = &v64;
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v55 = (std::string *)v64.__r_.__value_.__r.__words[0];
      v56 = "exit";
      if (v6 == v7)
        v56 = "entry";
      v84 = 136380931;
      v85 = v55;
      v86 = 2082;
      v87 = v56;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "#significantRegion: visit, id, %{private}s, %{public}s", &v84, 22);
      v58 = (uint8_t *)v57;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::onVisit(const CFAbsoluteTime, CLVisit *)", "%s\n", v57);
      if (v58 != buf)
        free(v58);
    }
    v21 = *(_QWORD **)(a1 + 816);
    if (v21 != (_QWORD *)(a1 + 824))
    {
      if (v6 == v7)
        v22 = "entry";
      else
        v22 = "exit";
      while (1)
      {
        v23 = *((unsigned __int8 *)v21 + 303);
        if ((v23 & 0x80u) == 0)
          v24 = *((unsigned __int8 *)v21 + 303);
        else
          v24 = v21[36];
        size = HIBYTE(v64.__r_.__value_.__r.__words[2]);
        if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v64.__r_.__value_.__l.__size_;
        if (v24 != size)
          goto LABEL_44;
        v26 = (const void **)(v21 + 35);
        v27 = (v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v64
            : (std::string *)v64.__r_.__value_.__r.__words[0];
        if ((v23 & 0x80) == 0)
          break;
        if (!memcmp(*v26, v27, v21[36]))
          goto LABEL_32;
LABEL_44:
        v31 = (_QWORD *)v21[1];
        if (v31)
        {
          do
          {
            v32 = v31;
            v31 = (_QWORD *)*v31;
          }
          while (v31);
        }
        else
        {
          do
          {
            v32 = (_QWORD *)v21[2];
            _ZF = *v32 == (_QWORD)v21;
            v21 = v32;
          }
          while (!_ZF);
        }
        v21 = v32;
        if (v32 == (_QWORD *)(a1 + 824))
          goto LABEL_102;
      }
      if (*((_BYTE *)v21 + 303))
      {
        while (*(unsigned __int8 *)v26 == v27->__r_.__value_.__s.__data_[0])
        {
          v26 = (const void **)((char *)v26 + 1);
          v27 = (std::string *)((char *)v27 + 1);
          if (!--v23)
            goto LABEL_32;
        }
        goto LABEL_44;
      }
LABEL_32:
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v28 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        v29 = (std::string *)v64.__r_.__value_.__r.__words[0];
        if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v29 = &v64;
        v30 = v21 + 7;
        if (*((char *)v21 + 79) < 0)
          v30 = (_QWORD *)*v30;
        *(_DWORD *)buf = 136381187;
        v91 = v29;
        v92 = 2082;
        v93 = v22;
        v94 = 2081;
        v95 = v30;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "#significantRegion: visit, id, %{private}s, %{public}s, %{private}s", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v33 = (std::string *)v64.__r_.__value_.__r.__words[0];
        if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v33 = &v64;
        v34 = v21 + 7;
        if (*((char *)v21 + 79) < 0)
          v34 = (_QWORD *)*v34;
        v84 = 136381187;
        v85 = v33;
        v86 = 2082;
        v87 = v22;
        v88 = 2081;
        v89 = v34;
        LODWORD(v59) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "#significantRegion: visit, id, %{private}s, %{public}s, %{private}s", &v84, v59);
        v36 = (uint8_t *)v35;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::onVisit(const CFAbsoluteTime, CLVisit *)", "%s\n", v35);
        if (v36 != buf)
          free(v36);
      }
      if (*(_BYTE *)(a1 + 619))
      {
        *(_DWORD *)buf = v6 != v7;
        sub_1015A2E04(__p, "Visit");
        sub_100D4CCD0(a1, (uint64_t)(v21 + 4), (int *)buf, (uint64_t)&v65, (uint64_t *)__p, a3);
        if (v63 < 0)
          operator delete(__p[0]);
      }
      goto LABEL_44;
    }
  }
  else
  {
    std::string::assign(&v64, "n/a");
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v37 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v38 = &v64;
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v38 = (std::string *)v64.__r_.__value_.__r.__words[0];
      v39 = "exit";
      if (v6 == v7)
        v39 = "entry";
      *(_DWORD *)buf = 136380931;
      v91 = v38;
      v92 = 2082;
      v93 = v39;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "#significantRegion: visit, id, %{private}s, %{public}s", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v51 = &v64;
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v51 = (std::string *)v64.__r_.__value_.__r.__words[0];
      v52 = "exit";
      if (v6 == v7)
        v52 = "entry";
      v84 = 136380931;
      v85 = v51;
      v86 = 2082;
      v87 = v52;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "#significantRegion: visit, id, %{private}s, %{public}s", &v84, 22);
      v54 = (uint8_t *)v53;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::onVisit(const CFAbsoluteTime, CLVisit *)", "%s\n", v53);
      if (v54 != buf)
        free(v54);
    }
    v40 = *(_QWORD **)(a1 + 240);
    if (v40 != (_QWORD *)(a1 + 248))
    {
      if (v6 == v7)
        v41 = "entry";
      else
        v41 = "exit";
      do
      {
        if ((v40[24] & 0x80) != 0
          && a1 + 824 != sub_10016FC40(a1 + 816, (unsigned __int8 *)v40 + 32)
          && !*((_DWORD *)v40 + 70))
        {
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          v44 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
          {
            v45 = (std::string *)v64.__r_.__value_.__r.__words[0];
            if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v45 = &v64;
            v46 = v40 + 7;
            if (*((char *)v40 + 79) < 0)
              v46 = (_QWORD *)*v46;
            *(_DWORD *)buf = 136381187;
            v91 = v45;
            v92 = 2082;
            v93 = v41;
            v94 = 2081;
            v95 = v46;
            _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "#significantRegion: visit, id, %{private}s, %{public}s, %{private}s, exit", buf, 0x20u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_1021826B0);
            v47 = (std::string *)v64.__r_.__value_.__r.__words[0];
            if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v47 = &v64;
            v48 = v40 + 7;
            if (*((char *)v40 + 79) < 0)
              v48 = (_QWORD *)*v48;
            v84 = 136381187;
            v85 = v47;
            v86 = 2082;
            v87 = v41;
            v88 = 2081;
            v89 = v48;
            LODWORD(v59) = 32;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "#significantRegion: visit, id, %{private}s, %{public}s, %{private}s, exit", &v84, v59);
            v50 = (uint8_t *)v49;
            sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::onVisit(const CFAbsoluteTime, CLVisit *)", "%s\n", v49);
            if (v50 != buf)
              free(v50);
          }
          if (*(_BYTE *)(a1 + 619))
          {
            *(_DWORD *)buf = 1;
            sub_1015A2E04(v60, "Visit");
            sub_100D4CCD0(a1, (uint64_t)(v40 + 4), (int *)buf, (uint64_t)&v65, (uint64_t *)v60, a3);
            if (v61 < 0)
              operator delete(v60[0]);
          }
        }
        v42 = (_QWORD *)v40[1];
        if (v42)
        {
          do
          {
            v43 = v42;
            v42 = (_QWORD *)*v42;
          }
          while (v42);
        }
        else
        {
          do
          {
            v43 = (_QWORD *)v40[2];
            _ZF = *v43 == (_QWORD)v40;
            v40 = v43;
          }
          while (!_ZF);
        }
        v40 = v43;
      }
      while (v43 != (_QWORD *)(a1 + 248));
    }
  }
LABEL_102:
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
}

void sub_100D62B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D62BD8(uint64_t a1)
{
  return sub_100ED31DC(a1 + 1312);
}

uint64_t sub_100D62BE0(uint64_t a1)
{
  return sub_100ED31F4(a1 + 1312);
}

uint64_t sub_100D62BE8(uint64_t a1)
{
  return sub_100ED320C(a1 + 1312);
}

_QWORD *sub_100D62BF0(uint64_t a1, double a2, double a3, double a4, double a5, double a6)
{
  long double v8;

  v8 = sub_10011E634((double *)(a1 + 1776), a3, a4, a5, a6, 0.0);
  return sub_100ED3224((_QWORD *)(a1 + 1312), (uint64_t)a2, (uint64_t)v8);
}

BOOL sub_100D62C44(std::string *__str, std::string *this)
{
  double v4;
  BOOL v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  std::string::size_type v12;
  std::string::pointer v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  std::string::size_type v19;
  std::string::pointer data;
  NSObject *v21;
  std::string *v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v26;
  std::string *v27;
  std::string::size_type v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  std::string *v32;
  __int16 v33;
  std::string *v34;
  __int16 v35;
  std::string::size_type v36;
  uint8_t buf[4];
  std::string *v38;
  __int16 v39;
  std::string *v40;
  __int16 v41;
  std::string::size_type v42;

  v4 = *(double *)&__str[3].__r_.__value_.__r.__words[2];
  if (v4 > 2128000.0)
  {
    std::string::operator=(this, __str);
    std::string::operator=(this + 1, __str + 1);
    std::string::operator=(this + 2, __str + 2);
    v14 = *(_OWORD *)&__str[3].__r_.__value_.__r.__words[2];
    v15 = *(_OWORD *)&__str[4].__r_.__value_.__r.__words[1];
    v16 = *(_OWORD *)&__str[5].__r_.__value_.__l.__data_;
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = *(_OWORD *)&__str[3].__r_.__value_.__l.__data_;
    *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v16;
    *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = v15;
    *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = v14;
    v17 = *(_OWORD *)&__str[6].__r_.__value_.__r.__words[1];
    v18 = *(_OWORD *)&__str[7].__r_.__value_.__l.__data_;
    v19 = *(std::string::size_type *)((char *)&__str[7].__r_.__value_.__r.__words[1] + 5);
    *(_OWORD *)&this[5].__r_.__value_.__r.__words[2] = *(_OWORD *)&__str[5].__r_.__value_.__r.__words[2];
    *(std::string::size_type *)((char *)&this[7].__r_.__value_.__r.__words[1] + 5) = v19;
    *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = v18;
    *(_OWORD *)&this[6].__r_.__value_.__r.__words[1] = v17;
    std::string::operator=(this + 8, __str + 8);
    data = this[9].__r_.__value_.__l.__data_;
    this[9].__r_.__value_.__r.__words[0] = (std::string::size_type)__str[9].__r_.__value_.__l.__data_;

    if (this != __str)
      sub_1002F3538(&this[9].__r_.__value_.__s.__data_[8], (char *)__str[9].__r_.__value_.__l.__size_, __str[9].__r_.__value_.__r.__words[2], (uint64_t)(__str[9].__r_.__value_.__r.__words[2] - __str[9].__r_.__value_.__l.__size_) >> 4);
    this[3].__r_.__value_.__r.__words[2] = 0x41403C4000000000;
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v21 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
    {
      if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = __str;
      else
        v22 = (std::string *)__str->__r_.__value_.__r.__words[0];
      if ((__str[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = __str + 1;
      else
        v23 = (std::string *)__str[1].__r_.__value_.__l.__data_;
      v24 = this[3].__r_.__value_.__r.__words[2];
      *(_DWORD *)buf = 136446723;
      v38 = v22;
      v39 = 2081;
      v40 = v23;
      v41 = 2049;
      v42 = v24;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "Fence: Cannot monitor %{public}s/%{private}s because the radius is too large, suggesting, %{private}.1lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = __str;
      else
        v26 = (std::string *)__str->__r_.__value_.__r.__words[0];
      if ((__str[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = __str + 1;
      else
        v27 = (std::string *)__str[1].__r_.__value_.__l.__data_;
      v28 = this[3].__r_.__value_.__r.__words[2];
      v31 = 136446723;
      v32 = v26;
      v33 = 2081;
      v34 = v27;
      v35 = 2049;
      v36 = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Fence: Cannot monitor %{public}s/%{private}s because the radius is too large, suggesting, %{private}.1lf", &v31, 32);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 0, "static BOOL CLFenceMonitor::canPerformMonitoringForFence(const CLFenceManager_Type::Fence &, CLFenceManager_Type::Fence &)", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
  }
  else
  {
    v6 = *(double *)&__str[4].__r_.__value_.__l.__data_ > 400.0
      || __str[7].__r_.__value_.__s.__data_[20] != 0
      || HIDWORD(__str[7].__r_.__value_.__r.__words[1]) == 2;
    if (!v6
      && __str[9].__r_.__value_.__r.__words[2] == __str[9].__r_.__value_.__l.__size_
      && (__str[6].__r_.__value_.__s.__data_[16] & 0x20) == 0)
    {
      std::string::operator=(this, __str);
      std::string::operator=(this + 1, __str + 1);
      std::string::operator=(this + 2, __str + 2);
      v7 = *(_OWORD *)&__str[3].__r_.__value_.__r.__words[2];
      v8 = *(_OWORD *)&__str[4].__r_.__value_.__r.__words[1];
      v9 = *(_OWORD *)&__str[5].__r_.__value_.__l.__data_;
      *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = *(_OWORD *)&__str[3].__r_.__value_.__l.__data_;
      *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v9;
      *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = v8;
      *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = v7;
      v10 = *(_OWORD *)&__str[6].__r_.__value_.__r.__words[1];
      v11 = *(_OWORD *)&__str[7].__r_.__value_.__l.__data_;
      v12 = *(std::string::size_type *)((char *)&__str[7].__r_.__value_.__r.__words[1] + 5);
      *(_OWORD *)&this[5].__r_.__value_.__r.__words[2] = *(_OWORD *)&__str[5].__r_.__value_.__r.__words[2];
      *(std::string::size_type *)((char *)&this[7].__r_.__value_.__r.__words[1] + 5) = v12;
      *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = v11;
      *(_OWORD *)&this[6].__r_.__value_.__r.__words[1] = v10;
      std::string::operator=(this + 8, __str + 8);
      v13 = this[9].__r_.__value_.__l.__data_;
      this[9].__r_.__value_.__r.__words[0] = (std::string::size_type)__str[9].__r_.__value_.__l.__data_;

      if (this != __str)
        sub_1002F3538(&this[9].__r_.__value_.__s.__data_[8], (char *)__str[9].__r_.__value_.__l.__size_, __str[9].__r_.__value_.__r.__words[2], (uint64_t)(__str[9].__r_.__value_.__r.__words[2] - __str[9].__r_.__value_.__l.__size_) >> 4);
      this[3].__r_.__value_.__r.__words[2] = 0x4079000000000000;
    }
  }
  return v4 <= 2128000.0;
}

BOOL sub_100D6302C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5;
  double v6;
  double v7;
  NSObject *v8;
  _BOOL8 v9;
  BOOL v11;
  NSObject *v12;
  _BYTE *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  const char *v21;
  char *v22;
  const char *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  char *v31;
  uint64_t v32;
  _BYTE *v33;
  char *v34;
  char *v35;
  const char *v36;
  _BYTE v37[12];
  __int16 v38;
  double v39;
  __int16 v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  __int16 v44;
  _BYTE *v45;
  _BYTE buf[12];
  __int16 v47;
  double v48;
  __int16 v49;
  uint64_t v50;

  v5 = sub_10016F4A8((double *)(a3 + 4), a2, (double *)(a1 + 1776));
  v6 = *(double *)(a2 + 96) + *(double *)(a3 + 20);
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v7 = v6 + 20000.0;
  v8 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218240;
    *(double *)&buf[4] = v5;
    v47 = 2048;
    v48 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "distance = %.2f; compare = %.2f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    *(_DWORD *)v37 = 134218240;
    *(double *)&v37[4] = v5;
    v38 = 2048;
    v39 = v7;
    LODWORD(v36) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "distance = %.2f; compare = %.2f",
      COERCE_DOUBLE(v37),
      *(double *)&v36);
    v22 = (char *)v21;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceMonitor::isCellMonitoringSufficient(const CLFenceManager_Type::Fence &, const CLDaemonLocation &)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  v9 = v5 > v7;
  v11 = *(double *)(a2 + 96) > 400.0 || *(_BYTE *)(a2 + 188) != 0 || *(_DWORD *)(a2 + 180) == 2;
  if (v11 || *(_QWORD *)(a2 + 232) != *(_QWORD *)(a2 + 224) || (*(_BYTE *)(a2 + 160) & 0x20) != 0)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v12 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      sub_100C3B9BC(a2, buf);
      v13 = v49 >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)v37 = 134218242;
      *(_QWORD *)&v37[4] = 0x4079000000000000;
      v38 = 2080;
      v39 = *(double *)&v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Fence: no allowing wifi monitor for, %.1lf, fence, %s", v37, 0x16u);
      if (SHIBYTE(v49) < 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v32 = qword_1022A0068;
      sub_100C3B9BC(a2, v37);
      if (v40 >= 0)
        v33 = v37;
      else
        v33 = *(_BYTE **)v37;
      v42 = 134218242;
      v43 = 0x4079000000000000;
      v44 = 2080;
      v45 = v33;
      LODWORD(v36) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v32, 2, "Fence: no allowing wifi monitor for, %.1lf, fence, %s", COERCE_DOUBLE(&v42), v36);
      v35 = v34;
      if (SHIBYTE(v40) < 0)
        operator delete(*(void **)v37);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceMonitor::isCellMonitoringSufficient(const CLFenceManager_Type::Fence &, const CLDaemonLocation &)", "%s\n", v35);
      if (v35 != buf)
        free(v35);
    }
    v9 = 1;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v14 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v15 = "not ";
    if (v9)
      v15 = "";
    v16 = *(_QWORD *)a2;
    v17 = *(char *)(a2 + 47);
    v18 = *(_QWORD *)(a2 + 24);
    if (*(char *)(a2 + 23) >= 0)
      v16 = a2;
    *(_DWORD *)buf = 136315651;
    if (v17 >= 0)
      v19 = a2 + 24;
    else
      v19 = v18;
    *(_QWORD *)&buf[4] = v15;
    v47 = 2081;
    v48 = *(double *)&v16;
    v49 = 2081;
    v50 = v19;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Cell monitoring is %ssufficient for %{private}s/%{private}s", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v23 = "not ";
    if (v9)
      v23 = "";
    if (*(char *)(a2 + 23) >= 0)
      v24 = a2;
    else
      v24 = *(_QWORD *)a2;
    v25 = *(char *)(a2 + 47);
    v28 = *(_QWORD *)(a2 + 24);
    v27 = a2 + 24;
    v26 = v28;
    if (v25 >= 0)
      v29 = v27;
    else
      v29 = v26;
    *(_DWORD *)v37 = 136315651;
    *(_QWORD *)&v37[4] = v23;
    v38 = 2081;
    v39 = *(double *)&v24;
    v40 = 2081;
    v41 = v29;
    LODWORD(v36) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Cell monitoring is %ssufficient for %{private}s/%{private}s", v37, v36);
    v31 = (char *)v30;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceMonitor::isCellMonitoringSufficient(const CLFenceManager_Type::Fence &, const CLDaemonLocation &)", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
  return v9;
}

BOOL sub_100D63614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5;
  double v6;
  double v7;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint8_t *v26;
  double v27;
  int v28;
  double v29;
  __int16 v30;
  double v31;
  __int16 v32;
  uint64_t v33;
  uint8_t buf[4];
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  uint64_t v39;

  v5 = sub_10016F4A8((double *)(a3 + 4), a2, (double *)(a1 + 1776));
  v6 = *(double *)(a2 + 96) + *(double *)(a3 + 20);
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v7 = v6 + 100000.0;
  v8 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218240;
    v35 = v5;
    v36 = 2048;
    v37 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Fence: distance = %.2f; compare = %.2f",
      buf,
      0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v28 = 134218240;
    v29 = v5;
    v30 = 2048;
    v31 = v7;
    LODWORD(v27) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: distance = %.2f; compare = %.2f",
      COERCE_DOUBLE(&v28),
      v27);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceMonitor::isLacMonitoringSufficient(const CLFenceManager_Type::Fence &, const CLDaemonLocation &)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021826B0);
  v9 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v10 = "not ";
    if (v5 > v7)
      v10 = "";
    v11 = *(_QWORD *)a2;
    v12 = *(char *)(a2 + 47);
    v13 = *(_QWORD *)(a2 + 24);
    if (*(char *)(a2 + 23) >= 0)
      v11 = a2;
    *(_DWORD *)buf = 136315651;
    if (v12 >= 0)
      v14 = a2 + 24;
    else
      v14 = v13;
    v35 = *(double *)&v10;
    v36 = 2081;
    v37 = *(double *)&v11;
    v38 = 2081;
    v39 = v14;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Fence: LAC monitoring is %ssufficient for %{private}s/%{private}s", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v18 = "not ";
    if (v5 > v7)
      v18 = "";
    if (*(char *)(a2 + 23) >= 0)
      v19 = a2;
    else
      v19 = *(_QWORD *)a2;
    v20 = *(char *)(a2 + 47);
    v23 = *(_QWORD *)(a2 + 24);
    v22 = a2 + 24;
    v21 = v23;
    if (v20 >= 0)
      v24 = v22;
    else
      v24 = v21;
    v28 = 136315651;
    v29 = *(double *)&v18;
    v30 = 2081;
    v31 = *(double *)&v19;
    v32 = 2081;
    v33 = v24;
    LODWORD(v27) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: LAC monitoring is %ssufficient for %{private}s/%{private}s", &v28, *(_QWORD *)&v27);
    v26 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceMonitor::isLacMonitoringSufficient(const CLFenceManager_Type::Fence &, const CLDaemonLocation &)", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  return v5 > v7;
}

void sub_100D639F8(id a1)
{
  qword_1022A0068 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

double sub_100D63A24(uint64_t a1, double *a2, double *a3)
{
  double result;
  NSObject *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  double v14;
  __int16 v15;
  double v16;
  uint8_t buf[4];
  double v18;
  __int16 v19;
  double v20;

  result = -1.0;
  if (*a3 != -1.0)
  {
    if (*a2 < *a3)
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v6 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        v7 = *a2;
        v8 = *a3;
        *(_DWORD *)buf = 134349312;
        v18 = v7;
        v19 = 2050;
        v20 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#Warning. Negative age %{public}lf < %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v9 = *a2;
        v10 = *a3;
        v13 = 134349312;
        v14 = v9;
        v15 = 2050;
        v16 = v10;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "#Warning. Negative age %{public}lf < %{public}lf", &v13, 22);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 2, "CFTimeInterval CLFenceAnalyticsGeofenceEventTimes::getAge(const CFAbsoluteTime &, const CFAbsoluteTime &) const", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
    }
    return *a2 - *a3;
  }
  return result;
}

void sub_100D63C20(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100D63C4C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100D63C4C(a1, *a2);
    sub_100D63C4C(a1, a2[1]);
    sub_100D63C94((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_100D63C94(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(_QWORD *)(a1 + 232) = v2;
    operator delete(v2);
  }

  if (*(char *)(a1 + 215) < 0)
    operator delete(*(void **)(a1 + 192));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_100D63D14(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100D63D14(a1, *a2);
    sub_100D63D14(a1, a2[1]);
    sub_100D63D5C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_100D63D5C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 272);
  if (v2)
  {
    *(_QWORD *)(a1 + 280) = v2;
    operator delete(v2);
  }

  if (*(char *)(a1 + 263) < 0)
    operator delete(*(void **)(a1 + 240));
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100D63DF8(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100D63DF8(a1, *a2);
    sub_100D63DF8(a1, a2[1]);
    sub_100D63E40((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_100D63E40(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(_QWORD *)(a1 + 232) = v2;
    operator delete(v2);
  }

  if (*(char *)(a1 + 215) < 0)
    operator delete(*(void **)(a1 + 192));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100D63ECC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100D63ECC(a1, *a2);
    sub_100D63ECC(a1, a2[1]);
    sub_100D63F14((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_100D63F14(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(_QWORD *)(a1 + 232) = v2;
    operator delete(v2);
  }

  if (*(char *)(a1 + 215) < 0)
    operator delete(*(void **)(a1 + 192));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_100D63F94(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100D63F94(a1, *a2);
    sub_100D63F94(a1, a2[1]);
    sub_100D63FDC((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_100D63FDC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(_QWORD *)(a1 + 232) = v2;
    operator delete(v2);
  }

  if (*(char *)(a1 + 215) < 0)
    operator delete(*(void **)(a1 + 192));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *sub_100D6405C(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_10091CC78((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_100D64104((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000145B0(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_100D641E0((uint64_t)v10, 0);
  }
  return v7;
}

char *sub_100D64104@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *result;
  __int128 *v8;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x170uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v8 = *a2;
  result = sub_100D64180(v6 + 32, &v8);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100D64168(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100D641E0(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_100D64180(char *a1, __int128 **a2)
{
  char *v3;

  v3 = sub_1004E5748(a1, *a2);
  sub_100B6D7B8((uint64_t)(v3 + 248));
  return a1;
}

void sub_100D641B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 224);
  if (v3)
  {
    *(_QWORD *)(v1 + 232) = v3;
    operator delete(v3);
  }

  sub_10190DB10(v1);
  _Unwind_Resume(a1);
}

void sub_100D641E0(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100D63C94((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *sub_100D64224(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t *v6;

  if (a2 != a3)
  {
    v4 = a2;
    do
    {
      v6 = sub_10008A9F0(a1, v4);
      sub_100D63F14((uint64_t)(v4 + 4));
      operator delete(v4);
      v4 = v6;
    }
    while (v6 != a3);
  }
  return a3;
}

void sub_100D6428C()
{
  operator delete();
}

_QWORD *sub_100D642A0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102182700;
  result[1] = v3;
  return result;
}

uint64_t sub_100D642D4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102182700;
  a2[1] = v2;
  return result;
}

BOOL sub_100D642F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100D63614(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_100D642F8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100D64334()
{
}

void sub_100D64344()
{
  operator delete();
}

_QWORD *sub_100D64358(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102182790;
  result[1] = v3;
  return result;
}

uint64_t sub_100D6438C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102182790;
  a2[1] = v2;
  return result;
}

BOOL sub_100D643A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100D6302C(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_100D643B0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100D643EC()
{
}

void sub_100D643FC()
{
  operator delete();
}

_QWORD *sub_100D64410()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102182810;
  return result;
}

void sub_100D64434(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102182810;
}

uint64_t sub_100D6444C()
{
  return 1;
}

uint64_t sub_100D64454(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100D64490()
{
}

void sub_100D6449C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x1A;
  v4 = v2 - 26;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFD8uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFD8uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFD8uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100D64764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_100D647B0(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_10091CC78((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_100D64858((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000145B0(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_100D64934((uint64_t)v10, 0);
  }
  return v7;
}

void sub_100D64858(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x1B8uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  sub_100D648C0(v6 + 32, *a2);
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_100D648A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100D64934(v1, 0);
  _Unwind_Resume(a1);
}

double sub_100D648C0(char *a1, __int128 *a2)
{
  char *v2;
  char *v3;
  double result;

  v2 = a1 + 268;
  v3 = sub_1004E5748(a1, a2);
  *((_DWORD *)v3 + 62) = 0xFFFF;
  *(_QWORD *)(v3 + 252) = 0;
  *(_QWORD *)(v3 + 260) = 0;
  result = -1.0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)v2 = xmmword_101BAFC90;
  *((_OWORD *)v2 + 1) = _Q1;
  *((_OWORD *)v2 + 2) = _Q1;
  *((_OWORD *)v2 + 3) = _Q1;
  *((_DWORD *)v3 + 83) = 0;
  *((_QWORD *)v3 + 43) = 0;
  *((_QWORD *)v3 + 44) = 0;
  *((_QWORD *)v3 + 42) = 0xBFF0000000000000;
  *((_DWORD *)v3 + 90) = 0;
  *((_QWORD *)v2 + 12) = 0xBFF0000000000000;
  *((_DWORD *)v3 + 93) = 0x7FFFFFFF;
  *((_QWORD *)v3 + 48) = 0;
  *((_QWORD *)v3 + 49) = 0;
  *((_QWORD *)v3 + 47) = 0;
  v3[400] = 0;
  return result;
}

void sub_100D64934(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100D63F14((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *sub_100D64978(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_10091CC78((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_100D64A20((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000145B0(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_100D64A90((uint64_t)v10, 0);
  }
  return v7;
}

char *sub_100D64A20@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x128uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_1004E5748(v6 + 32, *a2);
  *((_QWORD *)v6 + 35) = 0;
  *((_QWORD *)v6 + 36) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100D64A78(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100D64A90(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100D64A90(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100D63FDC((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t **sub_100D64AD4(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;
  _QWORD v17[2];

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = sub_10036C1BC((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v17[0] = v8 + 4;
          v17[1] = v8 + 35;
          sub_100D64C44((uint64_t)v17, (uint64_t)(v9 + 4));
          sub_100C72998(v5, (uint64_t)v16);
          v16 = v15;
          if (v15)
            v15 = sub_10036C1BC((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          v8 = v16;
          if (v16)
            v11 = a2 == a3;
          else
            v11 = 1;
          v9 = a2;
        }
        while (!v11);
      }
    }
    result = (uint64_t **)sub_100D64D1C((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_100D64D70((uint64_t)v5, (uint64_t)(a2 + 4));
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_100D64C30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100D64D1C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D64C44(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  std::string::size_type v10;
  std::string::pointer data;

  v4 = *(std::string **)a1;
  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  std::string::operator=(v4 + 1, (const std::string *)(a2 + 24));
  std::string::operator=(v4 + 2, (const std::string *)(a2 + 48));
  v5 = *(_OWORD *)(a2 + 88);
  v6 = *(_OWORD *)(a2 + 104);
  v7 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)&v4[3].__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 72);
  *(_OWORD *)&v4[5].__r_.__value_.__l.__data_ = v7;
  *(_OWORD *)&v4[4].__r_.__value_.__r.__words[1] = v6;
  *(_OWORD *)&v4[3].__r_.__value_.__r.__words[2] = v5;
  v8 = *(_OWORD *)(a2 + 152);
  v9 = *(_OWORD *)(a2 + 168);
  v10 = *(_QWORD *)(a2 + 181);
  *(_OWORD *)&v4[5].__r_.__value_.__r.__words[2] = *(_OWORD *)(a2 + 136);
  *(std::string::size_type *)((char *)&v4[7].__r_.__value_.__r.__words[1] + 5) = v10;
  *(_OWORD *)&v4[7].__r_.__value_.__l.__data_ = v9;
  *(_OWORD *)&v4[6].__r_.__value_.__r.__words[1] = v8;
  std::string::operator=(v4 + 8, (const std::string *)(a2 + 192));
  data = v4[9].__r_.__value_.__l.__data_;
  v4[9].__r_.__value_.__r.__words[0] = (std::string::size_type)*(id *)(a2 + 216);

  if (v4 != (std::string *)a2)
    sub_1002F3538(&v4[9].__r_.__value_.__s.__data_[8], *(char **)(a2 + 224), *(_QWORD *)(a2 + 232), (uint64_t)(*(_QWORD *)(a2 + 232) - *(_QWORD *)(a2 + 224)) >> 4);
  *(_OWORD *)*(_QWORD *)(a1 + 8) = *(_OWORD *)(a2 + 248);
  return a1;
}

uint64_t sub_100D64D1C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_100D63F94(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_100D63F94(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *sub_100D64D70(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t **v4;
  unsigned __int8 *v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v9[3];

  sub_100D64E30(a1, a2, (uint64_t)v9);
  v4 = (uint64_t **)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (v3)
  {
    v5 = (unsigned __int8 *)(v9[0] + 4);
    do
    {
      while (1)
      {
        v4 = (uint64_t **)v3;
        if (!sub_10016FCB8(v5, (unsigned __int8 *)v3 + 32))
          break;
        v3 = *v4;
        v6 = v4;
        if (!*v4)
          goto LABEL_9;
      }
      v3 = v4[1];
    }
    while (v3);
    v6 = v4 + 1;
  }
  else
  {
    v6 = (uint64_t **)(a1 + 8);
  }
LABEL_9:
  sub_1000145B0((uint64_t **)a1, (uint64_t)v4, v6, v9[0]);
  v7 = v9[0];
  v9[0] = 0;
  sub_100D64A90((uint64_t)v9, 0);
  return v7;
}

void sub_100D64E18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100D64A90((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

__n128 sub_100D64E30@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  __n128 result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x128uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  sub_1004E5748(v6 + 32, (__int128 *)a2);
  result = *(__n128 *)(a2 + 248);
  *(__n128 *)(v6 + 280) = result;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100D64E90(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100D64A90(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100D64EA8(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = a1 + 8;
  do
  {
    v7 = sub_100D43CE8(v5, (const void **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || sub_100D43CE8(v5, a2, (const void **)(v6 + 32)))
    return v2;
  return v6;
}

uint64_t *sub_100D64F34(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_10091CC78((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_100D64FDC((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000145B0(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_100D65050((uint64_t)v10, 0);
  }
  return v7;
}

char *sub_100D64FDC@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x130uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_1004E5748(v6 + 32, *a2);
  *((_QWORD *)v6 + 35) = 0;
  *((_QWORD *)v6 + 36) = 0;
  *((_QWORD *)v6 + 37) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100D65038(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100D65050(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100D65050(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100D63E40((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *sub_100D65094(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_100D43EA0((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_100D6513C((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000145B0(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_100D651F4((uint64_t)v10, 0);
  }
  return v7;
}

char *sub_100D6513C@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x148uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_100D651A4(v6 + 32, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100D6518C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100D651F4(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_100D651A4(char *a1, __int128 *a2)
{
  char *v3;

  v3 = sub_1003B0668(a1, a2);
  sub_1001157C0(v3 + 48);
  return a1;
}

void sub_100D651D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*(void **)(v1 + 24));
  sub_1018EE63C(v1);
  _Unwind_Resume(a1);
}

void sub_100D651F4(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100D63D5C((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t sub_100D65238(uint64_t **a1, const void **a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)sub_100D64EA8((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  sub_10008A9F0(a1, v3);
  sub_100D63D5C((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t sub_100D65290(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)sub_10016FC40((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  sub_10008A9F0(a1, v3);
  sub_100D63E40((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

void sub_100D652FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  __CFString *v7;
  NSObject *v8;
  NSObject *v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  const char *v15;
  char *v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  _BYTE v20[22];
  _BYTE *v21;
  _BYTE buf[22];
  _BYTE *v23;
  _BYTE v24[24];
  _BYTE *v25;

  sub_100270E34((uint64_t)v24, a3);
  sub_1007F9D00(a1, a2, (uint64_t)v24);
  v5 = v25;
  if (v25 == v24)
  {
    v6 = 4;
    v5 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)a1 = off_102182900;
  *(_QWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 288) = 1065353216;
  *(_BYTE *)(a1 + 296) = sub_1001DC538();
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 56) = CFSTR("CoreLocationConfig");
  *(_QWORD *)(a1 + 64) = CFSTR("com.apple.MobileAsset.CoreLocationConfig");
  *(_DWORD *)(a1 + 72) = 1;
  qword_102311540 = MGCopyAnswer(CFSTR("ProductType"), 0);
  if ((sub_1000C4240() & 1) != 0)
  {
    v7 = CFSTR("iPhone");
  }
  else if ((sub_100081BD0() & 1) != 0)
  {
    v7 = CFSTR("iPad");
  }
  else if ((sub_100195F08() & 1) != 0)
  {
    v7 = CFSTR("watch");
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v8 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#CLConfig,unsupported device type", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      *(_WORD *)v20 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#CLConfig,unsupported device type", v20, 2);
      v18 = (char *)v17;
      sub_100512490("Generic", 1, 0, 0, "CLConfigAsset::CLConfigAsset(id<CLIntersiloUniverse>, SendNotificationCallback)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    v7 = CFSTR("none");
  }
  qword_102311538 = v7;
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102182AB0);
  v9 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v10 = objc_msgSend((id)qword_102311538, "UTF8String");
    v11 = objc_msgSend((id)qword_102311540, "UTF8String");
    *(_DWORD *)buf = 136380931;
    *(_QWORD *)&buf[4] = v10;
    *(_WORD *)&buf[12] = 2081;
    *(_QWORD *)&buf[14] = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#CLConfig,deviceTypeTag,%{private}s,devicesTag,%{private}s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v12 = qword_1022A02A8;
    v13 = objc_msgSend((id)qword_102311538, "UTF8String");
    v14 = objc_msgSend((id)qword_102311540, "UTF8String");
    *(_DWORD *)v20 = 136380931;
    *(_QWORD *)&v20[4] = v13;
    *(_WORD *)&v20[12] = 2081;
    *(_QWORD *)&v20[14] = v14;
    LODWORD(v19) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 0, "#CLConfig,deviceTypeTag,%{private}s,devicesTag,%{private}s", v20, v19);
    v16 = (char *)v15;
    sub_100512490("Generic", 1, 0, 2, "CLConfigAsset::CLConfigAsset(id<CLIntersiloUniverse>, SendNotificationCallback)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  *(_QWORD *)buf = off_102182B00;
  *(_QWORD *)&buf[8] = a1;
  v23 = buf;
  *(_QWORD *)v20 = off_102182B90;
  *(_QWORD *)&v20[8] = a1;
  v21 = v20;
  operator new();
}

void sub_100D66C2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  sub_100090B34(v2);
  v4 = *v3;
  *v3 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_1007F9EF8(v1);
  _Unwind_Resume(a1);
}

void sub_100D67900(const void *a1, uint64_t a2)
{
  __CFNotificationCenter *DarwinNotifyCenter;

  if (objc_opt_class(RDEstimate, a2))
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_100D69020, kRegulatoryDomainUpdateNotification, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  }
}

uint64_t sub_100D67960(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_102182900;

  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;

  qword_102311540 = 0;
  sub_100090B34(a1 + 256);
  v2 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_1007F9EF8(a1);
}

void sub_100D679DC(uint64_t a1)
{
  sub_100D67960(a1);
  operator delete();
}

uint64_t sub_100D67A00(uint64_t a1)
{
  return sub_1007FA424(a1, (uint64_t)CFSTR("Devices"), CFSTR("Generic"));
}

uint64_t sub_100D67A14(void *a1)
{
  uint64_t result;
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  id v9;
  uint8_t buf[4];
  id v11;

  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("EmergencyLocation")) & 1) != 0)
    return 1;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("Nearby")) & 1) != 0)
    return 4;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("GNSS")) & 1) != 0)
    return 2;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("CLX")) & 1) != 0)
    return 3;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("Harvest")) & 1) != 0)
    return 5;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("Geofence")) & 1) != 0
    || (objc_msgSend(a1, "isEqualToString:", CFSTR("Kappa")) & 1) != 0
    || (objc_msgSend(a1, "isEqualToString:", CFSTR("Motion")) & 1) != 0
    || (objc_msgSend(a1, "isEqualToString:", CFSTR("Routine")) & 1) != 0
    || (objc_msgSend(a1, "isEqualToString:", CFSTR("MotionCues")) & 1) != 0)
  {
    return 0;
  }
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102182AB0);
  v3 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446210;
    v11 = objc_msgSend(a1, "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#CLConfig,mapComponentTagToAwdComponent,unmapped component tag,%{public}s", buf, 0xCu);
  }
  v4 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v4)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v5 = qword_1022A02A8;
    v8 = 136446210;
    v9 = objc_msgSend(a1, "UTF8String");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 16, "#CLConfig,mapComponentTagToAwdComponent,unmapped component tag,%{public}s", &v8, 12);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 0, "static CLDaemonStats_Type::AssetComponent CLConfigAsset::mapComponentTagToAwdComponent(NSString *)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
    return 0;
  }
  return result;
}

uint64_t sub_100D67CC8(void *a1)
{
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  id v8;
  uint8_t buf[4];
  id v10;

  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("EmergencyLocation")) & 1) != 0)
    return 0;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("Nearby")) & 1) != 0)
    return 1;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("GNSS")) & 1) != 0)
    return 2;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("CLX")) & 1) != 0)
    return 3;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("Harvest")) & 1) != 0)
    return 4;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("Geofence")) & 1) != 0)
    return 5;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("Kappa")) & 1) != 0)
    return 6;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("Motion")) & 1) != 0)
    return 7;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("Routine")) & 1) != 0)
    return 8;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("MotionCues")) & 1) != 0)
    return 9;
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102182AB0);
  v3 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446210;
    v10 = objc_msgSend(a1, "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#CLConfig,mapComponentTagToAssetDescriptor,unmapped component tag,%{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v4 = qword_1022A02A8;
    v7 = 136446210;
    v8 = objc_msgSend(a1, "UTF8String");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v4, 16, "#CLConfig,mapComponentTagToAssetDescriptor,unmapped component tag,%{public}s", &v7, 12);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 0, "static AssetDescriptor CLConfigAsset::mapComponentTagToAssetDescriptor(NSString *)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  return 0xFFFFFFFFLL;
}

__CFString *sub_100D67F9C(unsigned int a1)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  unsigned int v8;

  if (a1 < 0xA)
    return off_102183080[a1];
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102182AB0);
  v3 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67240192;
    v8 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#CLConfig,mapAssetDescriptorToComponentTag,unmapped asset descriptor,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v6[0] = 67240192;
    v6[1] = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#CLConfig,mapAssetDescriptorToComponentTag,unmapped asset descriptor,%{public}d", v6, 8);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 0, "static NSString *CLConfigAsset::mapAssetDescriptorToComponentTag(AssetDescriptor)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return (__CFString *)+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "UnknownComponent");
}

BOOL sub_100D68170(uint64_t a1, void *a2)
{
  uint64_t *i;
  uint64_t v4;
  NSObject *v5;
  id v6;
  uint64_t v7;
  id v8;
  const char *v9;
  uint8_t *v10;
  NSObject *v11;
  id v12;
  _BOOL8 result;
  NSObject *v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  id v22;
  id v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  int v27;
  id v28;
  __int16 v29;
  id v30;
  uint8_t buf[4];
  id v32;
  __int16 v33;
  id v34;

  for (i = *(uint64_t **)(a1 + 272); i; i = (uint64_t *)*i)
  {
    v4 = i[3];
    if (v4)
    {
      if (((*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v4 + 32))(v4, a2) & 1) == 0)
      {
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102182AB0);
        v14 = qword_1022A02A8;
        if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
        {
          v15 = -[__CFString UTF8String](sub_100D67F9C(*((_DWORD *)i + 4)), "UTF8String");
          v16 = objc_msgSend(objc_msgSend(a2, "assetId"), "UTF8String");
          *(_DWORD *)buf = 136446466;
          v32 = v15;
          v33 = 2082;
          v34 = v16;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,canAssetBePurged,component does not want asset %{public}s to be purged", buf, 0x16u);
        }
        result = sub_1001BFF7C(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_102182AB0);
          v21 = qword_1022A02A8;
          v22 = -[__CFString UTF8String](sub_100D67F9C(*((_DWORD *)i + 4)), "UTF8String");
          v23 = objc_msgSend(objc_msgSend(a2, "assetId"), "UTF8String");
          v27 = 136446466;
          v28 = v22;
          v29 = 2082;
          v30 = v23;
          LODWORD(v26) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 0, "#CLConfig,%{public}s,canAssetBePurged,component does not want asset %{public}s to be purged", &v27, v26);
          v25 = (uint8_t *)v24;
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLConfigAsset::canAssetBePurged(MAAsset *)", "%s\n", v24);
          if (v25 != buf)
            free(v25);
          return 0;
        }
        return result;
      }
    }
    else
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      v5 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        v6 = -[__CFString UTF8String](sub_100D67F9C(*((_DWORD *)i + 4)), "UTF8String");
        *(_DWORD *)buf = 136446210;
        v32 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,canAssetBePurged,pointer for component was null", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102182AB0);
        v7 = qword_1022A02A8;
        v8 = -[__CFString UTF8String](sub_100D67F9C(*((_DWORD *)i + 4)), "UTF8String");
        v27 = 136446210;
        v28 = v8;
        LODWORD(v26) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 16, "#CLConfig,%{public}s,canAssetBePurged,pointer for component was null", &v27, v26);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLConfigAsset::canAssetBePurged(MAAsset *)", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
    }
  }
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102182AB0);
  v11 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v12 = objc_msgSend(objc_msgSend(a2, "assetId"), "UTF8String");
    *(_DWORD *)buf = 136446210;
    v32 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#CLConfig,canAssetBePurged,asset %{public}s can be purged", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v17 = qword_1022A02A8;
    v18 = objc_msgSend(objc_msgSend(a2, "assetId"), "UTF8String");
    v27 = 136446210;
    v28 = v18;
    LODWORD(v26) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v17, 0, "#CLConfig,canAssetBePurged,asset %{public}s can be purged", &v27, v26);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLConfigAsset::canAssetBePurged(MAAsset *)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  return 1;
}

void sub_100D68674(uint64_t a1, uint64_t a2)
{
  uint64_t *i;
  uint64_t v4;
  NSObject *v5;
  id v6;
  uint64_t v7;
  id v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  int v12;
  id v13;
  uint8_t buf[4];
  id v15;

  for (i = *(uint64_t **)(a1 + 272); i; i = (uint64_t *)*i)
  {
    v4 = i[3];
    if (v4)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a2);
    }
    else
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      v5 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        v6 = -[__CFString UTF8String](sub_100D67F9C(*((_DWORD *)i + 4)), "UTF8String");
        *(_DWORD *)buf = 136446210;
        v15 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,handleBundleChange,pointer for component was null", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102182AB0);
        v7 = qword_1022A02A8;
        v8 = -[__CFString UTF8String](sub_100D67F9C(*((_DWORD *)i + 4)), "UTF8String");
        v12 = 136446210;
        v13 = v8;
        LODWORD(v11) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 16, "#CLConfig,%{public}s,handleBundleChange,pointer for component was null", &v12, v11);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 0, "void CLConfigAsset::handleBundleChange(NSDictionary *)", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
    }
  }
}

void sub_100D68884(uint64_t a1, uint64_t a2)
{
  uint64_t *i;
  uint64_t v4;
  NSObject *v5;
  id v6;
  uint64_t v7;
  id v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  int v12;
  id v13;
  uint8_t buf[4];
  id v15;

  for (i = *(uint64_t **)(a1 + 272); i; i = (uint64_t *)*i)
  {
    v4 = i[3];
    if (v4)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
    }
    else
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      v5 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        v6 = -[__CFString UTF8String](sub_100D67F9C(*((_DWORD *)i + 4)), "UTF8String");
        *(_DWORD *)buf = 136446210;
        v15 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,handleDefaultBundleChange,pointer for component was null", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102182AB0);
        v7 = qword_1022A02A8;
        v8 = -[__CFString UTF8String](sub_100D67F9C(*((_DWORD *)i + 4)), "UTF8String");
        v12 = 136446210;
        v13 = v8;
        LODWORD(v11) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 16, "#CLConfig,%{public}s,handleDefaultBundleChange,pointer for component was null", &v12, v11);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 0, "void CLConfigAsset::handleDefaultBundleChange(NSDictionary *)", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
    }
  }
}

void sub_100D68A94(uint64_t a1, int a2, unint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t *i;
  uint64_t v14;
  NSObject *v15;
  id v16;
  uint64_t v17;
  id v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  int v22;
  id v23;
  uint8_t buf[4];
  _BYTE v25[14];
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;

  v8 = HIDWORD(a3);
  v9 = sub_1001E24AC(a2, 0);
  if ((_DWORD)a3 == -1 && (_DWORD)v8 == -1)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v10 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)v25 = 0;
      *(_WORD *)&v25[4] = 2082;
      *(_QWORD *)&v25[6] = "";
      v26 = 1026;
      v27 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLConfig,handleSubscriberMccMncChange,carrier mcc and mnc are invalid\", \"inst\":%{public}d}", buf, 0x18u);
    }
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v11 = a4 & 1;
    v12 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68290050;
      *(_DWORD *)v25 = 0;
      *(_WORD *)&v25[4] = 2082;
      *(_QWORD *)&v25[6] = "";
      v26 = 1026;
      v27 = a2;
      v28 = 1026;
      v29 = a3;
      v30 = 1026;
      v31 = v8;
      v32 = 1026;
      v33 = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLConfig,handleSubscriberMccMncChange,carrier mcc and mnc updated\", \"inst\":%{public}d, \"MCC\":%{public}d, \"MNC\":%{public}d, \"is3DigitMnc\":%{public}hhd}", buf, 0x2Au);
    }
    for (i = *(uint64_t **)(a1 + 272); i; i = (uint64_t *)*i)
    {
      v14 = i[3];
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v14 + 64))(v14, v9, a3, v8, v11);
      }
      else
      {
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102182AB0);
        v15 = qword_1022A02A8;
        if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
        {
          v16 = -[__CFString UTF8String](sub_100D67F9C(*((_DWORD *)i + 4)), "UTF8String");
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)v25 = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,handleSubscriberMccMncChange,pointer for component was null", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_102182AB0);
          v17 = qword_1022A02A8;
          v18 = -[__CFString UTF8String](sub_100D67F9C(*((_DWORD *)i + 4)), "UTF8String");
          v22 = 136446210;
          v23 = v18;
          LODWORD(v21) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v17, 16, "#CLConfig,%{public}s,handleSubscriberMccMncChange,pointer for component was null", &v22, v21);
          v20 = (uint8_t *)v19;
          sub_100512490("Generic", 1, 0, 0, "void CLConfigAsset::handleSubscriberMccMncChange(SimInstance, CLCTMccAndMnc)", "%s\n", v19);
          if (v20 != buf)
            free(v20);
        }
      }
    }
  }
}

void sub_100D68E14(uint64_t a1)
{
  _QWORD *i;
  uint64_t v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  id v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  int v11;
  id v12;
  uint8_t buf[4];
  id v14;

  for (i = *(_QWORD **)(a1 + 272); i; i = (_QWORD *)*i)
  {
    v3 = i[3];
    if (v3)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 72))(v3, *(_QWORD *)(a1 + 304));
    }
    else
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      v4 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        v5 = objc_msgSend(CFSTR("GNSS"), "UTF8String");
        *(_DWORD *)buf = 136446210;
        v14 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,handleRDCountryChange,pointer for component was null or not found", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102182AB0);
        v6 = qword_1022A02A8;
        v7 = objc_msgSend(CFSTR("GNSS"), "UTF8String");
        v11 = 136446210;
        v12 = v7;
        LODWORD(v10) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 16, "#CLConfig,%{public}s,handleRDCountryChange,pointer for component was null or not found", &v11, v10);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 0, "void CLConfigAsset::handleRDCountryChange()", "%s\n", v8);
        if (v9 != buf)
          free(v9);
      }
    }
  }
}

void sub_100D69020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  id v12;
  _QWORD v13[9];
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLConfigAsset::onRegulatoryDomainUpdateNotification");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 48), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102182AD0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLConfigAsset::onRegulatoryDomainUpdateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102182AD0);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLConfigAsset::onRegulatoryDomainUpdateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v12 = objc_msgSend(*(id *)(a2 + 48), "silo");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100D6F0F0;
  v13[3] = &unk_1021382B0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  objc_msgSend(v12, "sync:", v13);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_100D69220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100D69240(uint64_t a1, int a2, CFStringRef theString1)
{
  id v4;
  void *v5;
  NSObject *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  id v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  id v19;
  __int16 v20;
  uint64_t v21;

  if (theString1)
  {
    if (CFStringCompare(theString1, kRegulatoryDomainUpdateNotification, 0) == kCFCompareEqualTo)
    {
      v4 = +[RDEstimate currentEstimates](RDEstimate, "currentEstimates");
      if (v4)
      {
        v5 = v4;
        if (objc_msgSend(v4, "count"))
        {
          if (objc_msgSend(*(id *)(a1 + 304), "isEqualToString:", objc_msgSend(objc_msgSend(v5, "objectAtIndexedSubscript:", 0), "countryCode")))
          {
            if (qword_1022A02A0 != -1)
              dispatch_once(&qword_1022A02A0, &stru_102182AB0);
            v6 = qword_1022A02A8;
            if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
            {
              v7 = objc_msgSend(CFSTR("GNSS"), "UTF8String");
              v8 = *(_QWORD *)(a1 + 304);
              *(_DWORD *)buf = 136446467;
              v19 = v7;
              v20 = 2113;
              v21 = v8;
              _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#CLConfig,%{public}s,onRegulatoryDomainUpdateNotification,no change in current country %{private}@", buf, 0x16u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A02A0 != -1)
                dispatch_once(&qword_1022A02A0, &stru_102182AB0);
              v9 = qword_1022A02A8;
              v10 = objc_msgSend(CFSTR("GNSS"), "UTF8String");
              v11 = *(_QWORD *)(a1 + 304);
              v14 = 136446467;
              v15 = v10;
              v16 = 2113;
              v17 = v11;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 2, "#CLConfig,%{public}s,onRegulatoryDomainUpdateNotification,no change in current country %{private}@", &v14, 22);
              v13 = (uint8_t *)v12;
              sub_100512490("Generic", 1, 0, 2, "void CLConfigAsset::onRegulatoryDomainUpdateNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v12);
              if (v13 != buf)
                free(v13);
            }
          }
          else
          {
            if (*(_QWORD *)(a1 + 304))
              *(_QWORD *)(a1 + 304) = 0;
            *(_QWORD *)(a1 + 304) = objc_msgSend(objc_alloc((Class)NSString), "initWithString:", objc_msgSend(objc_msgSend(v5, "objectAtIndexedSubscript:", 0), "countryCode"));
            sub_100D68E14(a1);
          }
        }
      }
    }
  }
}

void sub_100D694F4(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    *(_DWORD *)(a3 + 48) = sub_100D67A14(objc_msgSend(objc_msgSend(a2, "attributes"), "objectForKey:", CFSTR("Component")));
    *(_DWORD *)(a3 + 52) = sub_1007FA8C8(a2);
    *(_DWORD *)(a3 + 56) = sub_1007FA8FC(a2);
    *(_BYTE *)(a3 + 85) = sub_1007FA424((uint64_t)a2, (uint64_t)CFSTR("Devices"), CFSTR("Generic"));
  }
}

void sub_100D69568(uint64_t a1, uint64_t a2)
{
  uint64_t *i;
  NSObject *v4;
  id v5;
  int v6;
  int v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  id v11;
  const char *v12;
  char *v13;
  uint64_t j;
  void *v15;
  void *v16;
  NSObject *v17;
  void **v18;
  uint64_t v19;
  id v20;
  const char *v21;
  char *v22;
  void **v23;
  const char *v24;
  char *v25;
  uint64_t v26;
  void *__dst[2];
  uint64_t v29;
  uint64_t v30[3];
  char *v31;
  _BYTE *v32;
  char *v33;
  void *v34[2];
  void *v35;
  void **v36;
  char v37;
  _DWORD v38[2];
  void *__p[3];
  __int16 v40;
  int v41;
  __int16 v42;
  void **v43;
  int v44;
  id v45;
  void *v46;
  char v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unsigned __int8 v54;
  void *v55;
  char v56;
  void *v57;
  char v58;
  void *v59;
  char v60;
  void *v61;
  char v62;
  _BYTE buf[14];
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  _BYTE v70[6];
  __int16 v71;
  void **v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  unsigned __int8 v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  __int128 v88;
  void *v89;
  int v90;
  uint64_t v91;

  for (i = *(uint64_t **)(a1 + 272); i; i = (uint64_t *)*i)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v4 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = -[__CFString UTF8String](sub_100D67F9C(*((_DWORD *)i + 4)), "UTF8String");
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,reportVersionInfo,gathering version info for component", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      v19 = qword_1022A02A8;
      v20 = -[__CFString UTF8String](sub_100D67F9C(*((_DWORD *)i + 4)), "UTF8String");
      v44 = 136446210;
      v45 = v20;
      LODWORD(v26) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v19, 0, "#CLConfig,%{public}s,reportVersionInfo,gathering version info for component", &v44, v26);
      v22 = (char *)v21;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLConfigAsset::reportVersionInfo(CLDaemonStats_Type::LocationMobileAssetStatistics &)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (i[3])
    {
      sub_100D6F100((uint64_t)&v44, a2);
      (*(void (**)(uint64_t, int *))(*(_QWORD *)i[3] + 80))(i[3], &v44);
      sub_10080066C(v49, v48, (uint64_t)v34);
      v6 = *((_DWORD *)i + 4);
      *(_DWORD *)buf = 166;
      *(_DWORD *)&buf[8] = v52;
      v75 = 168;
      v76 = v50;
      *(_DWORD *)v70 = 0;
      LODWORD(v72) = 167;
      v73 = v53;
      v74 = 0;
      v77 = 0;
      v78 = 169;
      v79 = v51;
      v80 = 0;
      v81 = 170;
      v82 = v54;
      v83 = 7;
      v84 = 171;
      v85 = v6;
      v86 = 0;
      v38[0] = 172;
      if (SHIBYTE(v35) < 0)
      {
        sub_100115CE4(__p, v34[0], (unint64_t)v34[1]);
        v7 = v38[0];
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)v34;
        __p[2] = v35;
        v7 = 172;
      }
      v88 = *(_OWORD *)__p;
      v89 = __p[2];
      memset(__p, 0, sizeof(__p));
      v87 = v7;
      v90 = 6;
      v32 = 0;
      v33 = 0;
      v31 = 0;
      v36 = (void **)&v31;
      v37 = 0;
      v31 = (char *)operator new(0x118uLL);
      v32 = v31;
      v33 = v31 + 280;
      v32 = (_BYTE *)sub_1006AB40C((uint64_t)&v33, (uint64_t)buf, (uint64_t)&v91, (uint64_t)v31);
      for (j = 248; j != -32; j -= 40)
        sub_1001F8644((uint64_t)&buf[j]);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      v15 = *(void **)(a1 + 240);
      memset(v30, 0, sizeof(v30));
      sub_1006AB68C(v30, (uint64_t)v31, (uint64_t)v32, 0xCCCCCCCCCCCCCCCDLL * ((v32 - v31) >> 3));
      objc_msgSend(v15, "setMeasurements:", sub_1006A7590(v30));
      *(_QWORD *)buf = v30;
      sub_1006AB5A0((void ***)buf);
      v16 = *(void **)(a1 + 240);
      if (byte_1023112CF < 0)
      {
        sub_100115CE4(__dst, (void *)xmmword_1023112B8, *((unint64_t *)&xmmword_1023112B8 + 1));
      }
      else
      {
        *(_OWORD *)__dst = xmmword_1023112B8;
        v29 = unk_1023112C8;
      }
      objc_msgSend(v16, "submitEvent:", sub_1007FE6A8((__int128 *)__dst));
      if (SHIBYTE(v29) < 0)
        operator delete(__dst[0]);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      v17 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        v18 = v34;
        if (SHIBYTE(v35) < 0)
          v18 = (void **)v34[0];
        *(_DWORD *)buf = 67241730;
        *(_DWORD *)&buf[4] = v52;
        *(_WORD *)&buf[8] = 1026;
        *(_DWORD *)&buf[10] = v53;
        v64 = 1026;
        v65 = v50;
        v66 = 1026;
        v67 = v51;
        v68 = 1026;
        v69 = v54;
        *(_WORD *)v70 = 1026;
        *(_DWORD *)&v70[2] = v6;
        v71 = 2082;
        v72 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#CLMA,#careport,VersionReporting,MAVersionReportingDaysSinceLastAssetDownloadAttempt,%{public}d,MAVersionReportingDaysSinceLastAssetDownloadSuccess,%{public}d,MAVersionReportingDaysSinceLastCatalogDownloadAttempt,%{public}d,MAVersionReportingDaysSinceLastCatalogDownloadSuccess,%{public}d,MAVersionReportingGenericAssetUsed,%{public}d,MAVersionReportingAssetComponent,%{public}d,MAVersionReportingAssetVersion,%{public}s", buf, 0x30u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102182AB0);
        v23 = v34;
        if (SHIBYTE(v35) < 0)
          v23 = (void **)v34[0];
        v38[0] = 67241730;
        v38[1] = v52;
        LOWORD(__p[0]) = 1026;
        *(_DWORD *)((char *)__p + 2) = v53;
        HIWORD(__p[0]) = 1026;
        LODWORD(__p[1]) = v50;
        WORD2(__p[1]) = 1026;
        *(_DWORD *)((char *)&__p[1] + 6) = v51;
        WORD1(__p[2]) = 1026;
        HIDWORD(__p[2]) = v54;
        v40 = 1026;
        v41 = v6;
        v42 = 2082;
        v43 = v23;
        LODWORD(v26) = 48;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "#CLMA,#careport,VersionReporting,MAVersionReportingDaysSinceLastAssetDownloadAttempt,%{public}d,MAVersionReportingDaysSinceLastAssetDownloadSuccess,%{public}d,MAVersionReportingDaysSinceLastCatalogDownloadAttempt,%{public}d,MAVersionReportingDaysSinceLastCatalogDownloadSuccess,%{public}d,MAVersionReportingGenericAssetUsed,%{public}d,MAVersionReportingAssetComponent,%{public}d,MAVersionReportingAssetVersion,%{public}s", v38, v26);
        v25 = (char *)v24;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLConfigAsset::reportVersionInfo(CLDaemonStats_Type::LocationMobileAssetStatistics &)", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
      *(_QWORD *)buf = &v31;
      sub_1006AB5A0((void ***)buf);
      if (SHIBYTE(v35) < 0)
        operator delete(v34[0]);
      if (v62 < 0)
        operator delete(v61);
      if (v60 < 0)
        operator delete(v59);
      if (v58 < 0)
        operator delete(v57);
      if (v56 < 0)
        operator delete(v55);
      if (v47 < 0)
        operator delete(v46);
    }
    else
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      v8 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        v9 = -[__CFString UTF8String](sub_100D67F9C(*((_DWORD *)i + 4)), "UTF8String");
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,reportVersionInfo,pointer for component was null", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102182AB0);
        v10 = qword_1022A02A8;
        v11 = -[__CFString UTF8String](sub_100D67F9C(*((_DWORD *)i + 4)), "UTF8String");
        v44 = 136446210;
        v45 = v11;
        LODWORD(v26) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 16, "#CLConfig,%{public}s,reportVersionInfo,pointer for component was null", &v44, v26);
        v13 = (char *)v12;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLConfigAsset::reportVersionInfo(CLDaemonStats_Type::LocationMobileAssetStatistics &)", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
    }
  }
}

void sub_100D69D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  STACK[0x210] = (unint64_t)&a25;
  sub_1006AB5A0((void ***)&STACK[0x210]);
  if (a33 < 0)
    operator delete(__p);
  sub_1007FDDE0((uint64_t)&a42);
  _Unwind_Resume(a1);
}

void sub_100D69E44(uint64_t a1, void *a2, _DWORD *a3)
{
  if (a2)
    *a3 = sub_100D67CC8(objc_msgSend(objc_msgSend(a2, "attributes"), "objectForKey:", CFSTR("Component")));
}

uint64_t sub_100D69E80(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  NSObject *v9;
  id v10;
  uint64_t v11;
  id v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  id v17;
  uint8_t buf[4];
  id v19;

  HIDWORD(v15) = a2;
  v6 = sub_1001F8DEC((_QWORD *)(a1 + 256), (int *)&v15 + 1);
  if (v6)
  {
    v7 = v6[3];
    if (v7)
      return (*(uint64_t (**)(uint64_t, _DWORD *, _DWORD *))(*(_QWORD *)v7 + 16))(v7, a3, a4);
  }
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102182AB0);
  v9 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
  {
    v10 = -[__CFString UTF8String](sub_100D67F9C(HIDWORD(v15)), "UTF8String");
    *(_DWORD *)buf = 136446210;
    v19 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,getAssetVersionInfo,pointer for component was null or not found", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v11 = qword_1022A02A8;
    v12 = -[__CFString UTF8String](sub_100D67F9C(HIDWORD(v15)), "UTF8String");
    v16 = 136446210;
    v17 = v12;
    LODWORD(v15) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 16, "#CLConfig,%{public}s,getAssetVersionInfo,pointer for component was null or not found", &v16, v15);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLConfigAsset::getAssetVersionInfo(AssetDescriptor, int32_t &, int32_t &)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  result = 0;
  *a3 = -1;
  *a4 = -1;
  return result;
}

uint64_t sub_100D6A08C(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v5;
  id v6;
  uint64_t v7;
  id v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  int v12;
  id v13;
  uint8_t buf[4];
  id v15;

  HIDWORD(v11) = a2;
  v2 = sub_1001F8DEC((_QWORD *)(a1 + 256), (int *)&v11 + 1);
  if (v2)
  {
    v3 = v2[3];
    if (v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  }
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102182AB0);
  v5 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
  {
    v6 = -[__CFString UTF8String](sub_100D67F9C(HIDWORD(v11)), "UTF8String");
    *(_DWORD *)buf = 136446210;
    v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,deleteCurrentAsset,pointer for component was null or not found", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v7 = qword_1022A02A8;
    v8 = -[__CFString UTF8String](sub_100D67F9C(HIDWORD(v11)), "UTF8String");
    v12 = 136446210;
    v13 = v8;
    LODWORD(v11) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 16, "#CLConfig,%{public}s,deleteCurrentAsset,pointer for component was null or not found", &v12, v11);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 0, "virtual MobileAssetError CLConfigAsset::deleteCurrentAsset(AssetDescriptor)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  return 3;
}

id sub_100D6A274(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  id v8;
  uint64_t v9;
  uint8_t *v10;
  __int128 v11;
  uint8_t buf[4];
  id v13;

  if (!sub_10075DBD8())
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v5 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#CLConfig,copyNearbyAssetSettings,called on unsupported device", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    LOWORD(v11) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#CLConfig,copyNearbyAssetSettings,called on unsupported device", &v11, 2, v11);
    goto LABEL_22;
  }
  *(_DWORD *)buf = 1;
  v2 = sub_1001F8DEC((_QWORD *)(a1 + 256), (int *)buf);
  if (v2)
  {
    v3 = v2[3];
    if (v3)
      return sub_100FC5AC8(v3);
  }
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102182AB0);
  v7 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
  {
    v8 = objc_msgSend(CFSTR("Nearby"), "UTF8String");
    *(_DWORD *)buf = 136446210;
    v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,copyNearbyAssetSettings,pointer for component was null or not found", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v9 = qword_1022A02A8;
    LODWORD(v11) = 136446210;
    *(_QWORD *)((char *)&v11 + 4) = objc_msgSend(CFSTR("Nearby"), "UTF8String");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 16, "#CLConfig,%{public}s,copyNearbyAssetSettings,pointer for component was null or not found", &v11, 12, v11);
LABEL_22:
    v10 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 0, "NSDictionary *CLConfigAsset::copyNearbyAssetSettings()", "%s\n", v6);
    if (v10 != buf)
      free(v10);
  }
  return 0;
}

id sub_100D6A54C(uint64_t a1, void *a2)
{
  uint64_t *v4;
  uint64_t v5;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  id v10;
  uint64_t v11;
  uint8_t *v12;
  __int128 v13;
  uint8_t buf[4];
  id v15;

  if (!sub_10075DBD8())
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v7 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#CLConfig,copyNearbyAssetSettingsOfAccessoryFile,called on unsupported device", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    LOWORD(v13) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#CLConfig,copyNearbyAssetSettingsOfAccessoryFile,called on unsupported device", &v13, 2, v13);
    goto LABEL_22;
  }
  *(_DWORD *)buf = 1;
  v4 = sub_1001F8DEC((_QWORD *)(a1 + 256), (int *)buf);
  if (v4)
  {
    v5 = v4[3];
    if (v5)
      return sub_100FC6568(v5, a2);
  }
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102182AB0);
  v9 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
  {
    v10 = objc_msgSend(CFSTR("Nearby"), "UTF8String");
    *(_DWORD *)buf = 136446210;
    v15 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,copyNearbyAssetSettingsOfAccessoryFile,pointer for component was null or not found", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v11 = qword_1022A02A8;
    LODWORD(v13) = 136446210;
    *(_QWORD *)((char *)&v13 + 4) = objc_msgSend(CFSTR("Nearby"), "UTF8String");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 16, "#CLConfig,%{public}s,copyNearbyAssetSettingsOfAccessoryFile,pointer for component was null or not found", &v13, 12, v13);
LABEL_22:
    v12 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 0, "NSDictionary *CLConfigAsset::copyNearbyAssetSettingsOfAccessoryFile(NSString *)", "%s\n", v8);
    if (v12 != buf)
      free(v12);
  }
  return 0;
}

id sub_100D6A82C(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t v6;
  NSObject *v8;
  id v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  id v14;
  uint8_t buf[4];
  id v16;

  *(_DWORD *)buf = 8;
  v5 = sub_1001F8DEC((_QWORD *)(a1 + 256), (int *)buf);
  if (v5)
  {
    v6 = v5[3];
    if (v6)
      return sub_100E78254(v6, a2, a3);
  }
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102182AB0);
  v8 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
  {
    v9 = objc_msgSend(CFSTR("Routine"), "UTF8String");
    *(_DWORD *)buf = 136446210;
    v16 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,copyRoutineAssetSettings,pointer for component was null or not found", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v10 = qword_1022A02A8;
    v13 = 136446210;
    v14 = objc_msgSend(CFSTR("Routine"), "UTF8String");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 16, "#CLConfig,%{public}s,copyRoutineAssetSettings,pointer for component was null or not found", &v13, 12);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 0, "NSDictionary *CLConfigAsset::copyRoutineAssetSettings(int32_t &, int32_t &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  return 0;
}

void sub_100D6AA20(uint64_t a1, uint64_t a2)
{
  uint64_t *i;

  for (i = *(uint64_t **)(a1 + 272); i; i = (uint64_t *)*i)
    sub_100D6AA6C(a1, a2, *((_DWORD *)i + 4), 0);
}

void sub_100D6AA6C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t *v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  NSObject *v13;
  id v14;
  uint64_t v15;
  id v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  id v20;
  id v21;
  const char *v22;
  uint8_t *v23;
  _QWORD v24[6];
  unsigned int v25;
  char v26;
  unsigned int v27;
  int v28;
  id v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  id v35;
  uint8_t buf[4];
  id v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  id v43;

  v27 = a3;
  v7 = sub_1001F8DEC((_QWORD *)(a1 + 256), (int *)&v27);
  if (v7 && (v8 = v7, v7[3]))
  {
    v9 = objc_msgSend(objc_alloc((Class)MAAssetQuery), "initWithType:", *(_QWORD *)(a1 + 64));
    objc_msgSend(v9, "returnTypes:", a2);
    objc_msgSend(v9, "setDoNotBlockBeforeFirstUnlock:", 1);
    (*(void (**)(uint64_t, id, uint64_t))(*(_QWORD *)v8[3] + 88))(v8[3], v9, a4);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v10 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = -[__CFString UTF8String](sub_100D67F9C(v27), "UTF8String");
      v12 = objc_msgSend(v9, "queryParams");
      *(_DWORD *)buf = 136446979;
      v37 = v11;
      v38 = 1026;
      v39 = a2;
      v40 = 1026;
      v41 = a4;
      v42 = 2113;
      v43 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,startQuery,returnType,%{public}d,genericDevice,%{public}d,params,%{private}@", buf, 0x22u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      v19 = qword_1022A02A8;
      v20 = -[__CFString UTF8String](sub_100D67F9C(v27), "UTF8String");
      v21 = objc_msgSend(v9, "queryParams");
      v28 = 136446979;
      v29 = v20;
      v30 = 1026;
      v31 = a2;
      v32 = 1026;
      v33 = a4;
      v34 = 2113;
      v35 = v21;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v19, 0, "#CLConfig,%{public}s,startQuery,returnType,%{public}d,genericDevice,%{public}d,params,%{private}@", &v28, 34);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "void CLConfigAsset::createQuery(MAQueryReturnTypes, AssetDescriptor, BOOL)", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_100D6AEB8;
    v24[3] = &unk_102182980;
    v25 = v27;
    v24[4] = v9;
    v24[5] = a1;
    v26 = a4;
    objc_msgSend(v9, "queryMetaData:", v24);
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v13 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      v14 = -[__CFString UTF8String](sub_100D67F9C(v27), "UTF8String");
      *(_DWORD *)buf = 136446210;
      v37 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,createQuery,pointer for component was null or not found", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      v15 = qword_1022A02A8;
      v16 = -[__CFString UTF8String](sub_100D67F9C(v27), "UTF8String");
      v28 = 136446210;
      v29 = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 16, "#CLConfig,%{public}s,createQuery,pointer for component was null or not found", &v28, 12);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 0, "void CLConfigAsset::createQuery(MAQueryReturnTypes, AssetDescriptor, BOOL)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
  }
}

void sub_100D6AEB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  _QWORD v6[7];
  int v7;
  char v8;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = objc_msgSend(objc_msgSend(*(id *)(v4 + 48), "silo"), "queue");
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100D6AF48;
  v6[3] = &unk_102182958;
  v7 = *(_DWORD *)(a1 + 48);
  v6[4] = *(_QWORD *)(a1 + 32);
  v6[5] = v4;
  v8 = *(_BYTE *)(a1 + 52);
  v6[6] = a2;
  dispatch_async(v5, v6);
}

void sub_100D6AF48(uint64_t a1)
{
  sub_100D6AF60(*(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 56), *(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 60), *(_QWORD *)(a1 + 48));
}

void sub_100D6AF60(uint64_t a1, unsigned int a2, void *a3, int a4, unint64_t a5)
{
  NSObject *v10;
  uint64_t *v11;
  uint64_t *v12;
  id v13;
  void *v14;
  NSObject *v15;
  id v16;
  unsigned int v17;
  id v18;
  NSObject *v19;
  id v20;
  NSObject *v21;
  id v22;
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  double v27;
  char *v28;
  char *v29;
  NSObject *v30;
  id v31;
  unsigned int v32;
  id v33;
  uint64_t v34;
  id v35;
  unsigned int v36;
  id v37;
  double v38;
  char *v39;
  NSObject *v40;
  id v41;
  id v42;
  id v43;
  uint64_t v44;
  const char *v45;
  char *v46;
  uint64_t v47;
  id v48;
  const char *v49;
  uint64_t v50;
  id v51;
  unsigned int v52;
  id v53;
  const char *v54;
  char *v55;
  uint64_t v56;
  id v57;
  id v58;
  const char *v59;
  char *v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  int v64;
  id v65;
  __int16 v66;
  unsigned int v67;
  __int16 v68;
  _QWORD v69[3];
  _BYTE buf[12];
  __int16 v71;
  unsigned int v72;
  __int16 v73;
  _QWORD v74[202];

  v63 = a2;
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102182AB0);
  v10 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446979;
    *(_QWORD *)&buf[4] = -[__CFString UTF8String](sub_100D67F9C(a2), "UTF8String");
    v71 = 1026;
    v72 = objc_msgSend(a3, "returnTypes");
    v73 = 1026;
    LODWORD(v74[0]) = a4;
    WORD2(v74[0]) = 2113;
    *(_QWORD *)((char *)v74 + 6) = objc_msgSend(a3, "queryParams");
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,checkQueryResult,returnType,%{public}d,genericDevice,%{public}d,params,%{private}@", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v44 = qword_1022A02A8;
    v64 = 136446979;
    v65 = -[__CFString UTF8String](sub_100D67F9C(v63), "UTF8String");
    v66 = 1026;
    v67 = objc_msgSend(a3, "returnTypes");
    v68 = 1026;
    LODWORD(v69[0]) = a4;
    WORD2(v69[0]) = 2113;
    *(_QWORD *)((char *)v69 + 6) = objc_msgSend(a3, "queryParams");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v44, 0, "#CLConfig,%{public}s,checkQueryResult,returnType,%{public}d,genericDevice,%{public}d,params,%{private}@", &v64, 34);
    v46 = (char *)v45;
    sub_100512490("Generic", 1, 0, 2, "void CLConfigAsset::checkQueryResult(AssetDescriptor, MAAssetQuery *, BOOL, MAQueryResult)", "%s\n", v45);
    if (v46 != buf)
      free(v46);
  }
  v11 = sub_1001F8DEC((_QWORD *)(a1 + 256), (int *)&v63);
  if (v11 && (v12 = v11, v11[3]))
  {
    v62 = -1;
    v13 = sub_1007FE930(a1, a3, a5, &v62);
    if (v13)
    {
      v14 = v13;
      if ((*(unsigned int (**)(uint64_t, id))(*(_QWORD *)v12[3] + 96))(v12[3], v13))
      {
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102182AB0);
        v15 = qword_1022A02A8;
        if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
        {
          v16 = -[__CFString UTF8String](sub_100D67F9C(v63), "UTF8String");
          v17 = sub_1007FA8C8(v14);
          v18 = objc_msgSend(v14, "attributes");
          *(_DWORD *)buf = 136446723;
          *(_QWORD *)&buf[4] = v16;
          v71 = 1026;
          v72 = v17;
          v73 = 2113;
          v74[0] = v18;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,accepted new asset,version,%{public}d,attributes,%{private}@", buf, 0x1Cu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_102182AB0);
          v50 = qword_1022A02A8;
          v51 = -[__CFString UTF8String](sub_100D67F9C(v63), "UTF8String");
          v52 = sub_1007FA8C8(v14);
          v53 = objc_msgSend(v14, "attributes");
          v64 = 136446723;
          v65 = v51;
          v66 = 1026;
          v67 = v52;
          v68 = 2113;
          v69[0] = v53;
          LODWORD(v61) = 28;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v50, 0, "#CLConfig,%{public}s,accepted new asset,version,%{public}d,attributes,%{private}@", &v64, v61);
          v55 = (char *)v54;
          sub_100512490("Generic", 1, 0, 2, "void CLConfigAsset::checkQueryResult(AssetDescriptor, MAAssetQuery *, BOOL, MAQueryResult)", "%s\n", v54);
          if (v55 != buf)
            free(v55);
        }
        sub_1007FF270((char *)a1, v14);
      }
      return;
    }
    if ((v62 + 1) < 2)
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      v30 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        v31 = -[__CFString UTF8String](sub_100D67F9C(v63), "UTF8String");
        v32 = v62;
        v33 = objc_msgSend(a3, "queryParams");
        *(_DWORD *)buf = 136446723;
        *(_QWORD *)&buf[4] = v31;
        v71 = 1026;
        v72 = v32;
        v73 = 2113;
        v74[0] = v33;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,unexpected query failure reason,%{public}d,queryParams,%{private}@", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102182AB0);
        v34 = qword_1022A02A8;
        v35 = -[__CFString UTF8String](sub_100D67F9C(v63), "UTF8String");
        v36 = v62;
        v37 = objc_msgSend(a3, "queryParams");
        v64 = 136446723;
        v65 = v35;
        v66 = 1026;
        v67 = v36;
        v68 = 2113;
        v69[0] = v37;
        LODWORD(v61) = 28;
        v38 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v34, 16, "#CLConfig,%{public}s,unexpected query failure reason,%{public}d,queryParams,%{private}@", &v64, v61);
        v29 = v39;
        sub_100512490("Generic", 1, 0, 0, "void CLConfigAsset::checkQueryResult(AssetDescriptor, MAAssetQuery *, BOOL, MAQueryResult)", "%s\n", v38);
LABEL_41:
        if (v29 == buf)
          return;
LABEL_58:
        free(v29);
      }
    }
    else if (v62 == 2)
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      v40 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        v41 = -[__CFString UTF8String](sub_100D67F9C(v63), "UTF8String");
        v42 = objc_msgSend(a3, "queryParams");
        *(_DWORD *)buf = 136446723;
        *(_QWORD *)&buf[4] = v41;
        v71 = 1026;
        v72 = a5;
        v73 = 2113;
        v74[0] = v42;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,asset query returned no results,result,%{public}d,params,%{private}@", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102182AB0);
        v56 = qword_1022A02A8;
        v57 = -[__CFString UTF8String](sub_100D67F9C(v63), "UTF8String");
        v58 = objc_msgSend(a3, "queryParams");
        v64 = 136446723;
        v65 = v57;
        v66 = 1026;
        v67 = a5;
        v68 = 2113;
        v69[0] = v58;
        LODWORD(v61) = 28;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v56, 0, "#CLConfig,%{public}s,asset query returned no results,result,%{public}d,params,%{private}@", &v64, v61);
        v60 = (char *)v59;
        sub_100512490("Generic", 1, 0, 2, "void CLConfigAsset::checkQueryResult(AssetDescriptor, MAAssetQuery *, BOOL, MAQueryResult)", "%s\n", v59);
        if (v60 != buf)
          free(v60);
      }
      if ((a4 & 1) == 0)
      {
        *(_QWORD *)buf = &v63;
        if (*(_BYTE *)(sub_100D6F470(a1 + 256, (int *)&v63, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[3] + 24))
        {
          v43 = objc_msgSend(a3, "returnTypes");
          sub_100D6AA6C(a1, v43, v63, 1);
        }
      }
    }
    else if (v62 == 1)
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      v21 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        v22 = -[__CFString UTF8String](sub_100D67F9C(v63), "UTF8String");
        v23 = objc_msgSend(a3, "queryParams");
        *(_DWORD *)buf = 136446723;
        *(_QWORD *)&buf[4] = v22;
        v71 = 1026;
        v72 = a5;
        v73 = 2113;
        v74[0] = v23;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,asset query was unsuccessful,result,%{public}d,params,%{private}@", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102182AB0);
        v24 = qword_1022A02A8;
        v25 = -[__CFString UTF8String](sub_100D67F9C(v63), "UTF8String");
        v26 = objc_msgSend(a3, "queryParams");
        v64 = 136446723;
        v65 = v25;
        v66 = 1026;
        v67 = a5;
        v68 = 2113;
        v69[0] = v26;
        LODWORD(v61) = 28;
        v27 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v24, 0, "#CLConfig,%{public}s,asset query was unsuccessful,result,%{public}d,params,%{private}@", &v64, v61);
        v29 = v28;
        sub_100512490("Generic", 1, 0, 2, "void CLConfigAsset::checkQueryResult(AssetDescriptor, MAAssetQuery *, BOOL, MAQueryResult)", "%s\n", v27);
        goto LABEL_41;
      }
    }
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v19 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      v20 = -[__CFString UTF8String](sub_100D67F9C(v63), "UTF8String");
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,checkQueryResult,pointer for component was null", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      v47 = qword_1022A02A8;
      v48 = -[__CFString UTF8String](sub_100D67F9C(v63), "UTF8String");
      v64 = 136446210;
      v65 = v48;
      LODWORD(v61) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v47, 16, "#CLConfig,%{public}s,checkQueryResult,pointer for component was null", &v64, v61);
      v29 = (char *)v49;
      sub_100512490("Generic", 1, 0, 0, "void CLConfigAsset::checkQueryResult(AssetDescriptor, MAAssetQuery *, BOOL, MAQueryResult)", "%s\n", v49);
      if (v29 != buf)
        goto LABEL_58;
    }
  }
}

void sub_100D6BA88(uint64_t a1, void *a2)
{
  uint64_t *v4;
  id *v5;
  NSObject *v6;
  id v7;
  uint64_t v8;
  id v9;
  const char *v10;
  NSObject *v11;
  uint8_t *v12;
  uint64_t v13;
  __int128 v14;
  uint8_t buf[4];
  id v16;

  if (a2)
  {
    HIDWORD(v13) = sub_100D67CC8(objc_msgSend(objc_msgSend(a2, "attributes"), "objectForKey:", CFSTR("Component")));
    v4 = sub_1001F8DEC((_QWORD *)(a1 + 256), (int *)&v13 + 1);
    if (v4)
    {
      v5 = (id *)v4[3];
      if (v5)
      {
        sub_100D6BD74(v5, a2);
        return;
      }
    }
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v6 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      v7 = -[__CFString UTF8String](sub_100D67F9C(HIDWORD(v13)), "UTF8String");
      *(_DWORD *)buf = 136446210;
      v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,readAsset,pointer for component was null or not present", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      v8 = qword_1022A02A8;
      v9 = -[__CFString UTF8String](sub_100D67F9C(HIDWORD(v13)), "UTF8String");
      LODWORD(v14) = 136446210;
      *(_QWORD *)((char *)&v14 + 4) = v9;
      LODWORD(v13) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 16, "#CLConfig,%{public}s,readAsset,pointer for component was null or not present", &v14, v13, v14);
LABEL_22:
      v12 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLConfigAsset::readAsset(MAAsset *)", "%s\n", v10);
      if (v12 != buf)
        free(v12);
    }
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v11 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#CLConfig,readAsset called with nil", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      LOWORD(v14) = 0;
      LODWORD(v13) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#CLConfig,readAsset called with nil", &v14, v13, v14);
      goto LABEL_22;
    }
  }
}

void sub_100D6BD74(id *a1, void *a2)
{
  id v4;
  NSObject *v5;
  id v6;
  int v7;
  id v8;
  NSObject *v9;
  id v10;
  uint64_t v11;
  id v12;
  int v13;
  id v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  id v18;
  const char *v19;
  uint8_t *v20;
  int v21;
  id v22;
  __int16 v23;
  int v24;
  __int16 v25;
  id v26;
  uint8_t buf[4];
  id v28;
  __int16 v29;
  int v30;
  __int16 v31;
  id v32;

  if (a2)
  {
    (*((void (**)(id *))*a1 + 13))(a1);
    a1[16] = a2;
    v4 = a2;
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v5 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = objc_msgSend(a1[2], "UTF8String");
      v7 = sub_1007FA8C8(a1[16]);
      v8 = objc_msgSend(a1[16], "attributes");
      *(_DWORD *)buf = 136446723;
      v28 = v6;
      v29 = 1026;
      v30 = v7;
      v31 = 2113;
      v32 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,reading asset version,%{public}d,attributes,%{private}@", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      v11 = qword_1022A02A8;
      v12 = objc_msgSend(a1[2], "UTF8String");
      v13 = sub_1007FA8C8(a1[16]);
      v14 = objc_msgSend(a1[16], "attributes");
      v21 = 136446723;
      v22 = v12;
      v23 = 1026;
      v24 = v13;
      v25 = 2113;
      v26 = v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 0, "#CLConfig,%{public}s,reading asset version,%{public}d,attributes,%{private}@", &v21, 28);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLConfigAssetComponent::readAsset(MAAsset *)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    (*((void (**)(id *))*a1 + 16))(a1);
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v9 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      v10 = objc_msgSend(a1[2], "UTF8String");
      *(_DWORD *)buf = 136446210;
      v28 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,readAsset called with nil", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      v17 = qword_1022A02A8;
      v18 = objc_msgSend(a1[2], "UTF8String");
      v21 = 136446210;
      v22 = v18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v17, 16, "#CLConfig,%{public}s,readAsset called with nil", &v21, 12);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 0, "void CLConfigAssetComponent::readAsset(MAAsset *)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
  }
}

uint64_t sub_100D6C128(uint64_t a1, uint64_t a2, void *a3, char a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_QWORD *)a1 = off_1021829B0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  sub_100270E34(a1 + 32, a6);
  sub_100270E34(a1 + 64, a7);
  sub_100270E34(a1 + 96, a8);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 16) = a3;
  return a1;
}

void sub_100D6C1B8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v6 = (_QWORD *)v1[15];
  if (v6 == v4)
  {
    v7 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
    v4 = (_QWORD *)v1[15];
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v7))(v4);
LABEL_6:
  v8 = (_QWORD *)v1[11];
  if (v8 == v3)
  {
    v9 = 4;
    v8 = v3;
  }
  else
  {
    if (!v8)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  v10 = (_QWORD *)v1[7];
  if (v10 == v2)
  {
    v11 = 4;
    v10 = v2;
  }
  else
  {
    if (!v10)
      goto LABEL_16;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D6C25C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_1021829B0;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  v2 = *(_QWORD **)(a1 + 120);
  if (v2 == (_QWORD *)(a1 + 96))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 96);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = *(_QWORD **)(a1 + 88);
  if (v4 == (_QWORD *)(a1 + 64))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 64);
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  v6 = *(_QWORD **)(a1 + 56);
  if (v6 == (_QWORD *)(a1 + 32))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 32);
    goto LABEL_15;
  }
  if (v6)
  {
    v7 = 5;
LABEL_15:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

BOOL sub_100D6C33C(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v6;

  *a2 = sub_1007FA8FC(*(void **)(a1 + 128));
  v6 = sub_1007FA8C8(*(void **)(a1 + 128));
  *a3 = v6;
  return *a2 != -1 && v6 != -1;
}

uint64_t sub_100D6C390(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  id v4;
  uint64_t v5;
  uint64_t v7;
  id v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  id v12;
  uint8_t buf[4];
  id v14;

  v2 = *(void **)(a1 + 128);
  if (!v2 || !objc_msgSend(v2, "refreshState") || !sub_1007F9FC0(*(void **)(a1 + 128)))
    return 1;
  if (!sub_1007FA3F0(*(void **)(a1 + 128)))
    return 2;
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102182AB0);
  v3 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    *(_DWORD *)buf = 136446210;
    v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,deleteCurrentAsset,deleting currently loaded asset", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v7 = qword_1022A02A8;
    v8 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v11 = 136446210;
    v12 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 0, "#CLConfig,%{public}s,deleteCurrentAsset,deleting currently loaded asset", &v11, 12);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "virtual MobileAssetError CLConfigAssetComponent::deleteCurrentAsset()", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  buf[0] = 1;
  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    sub_10025FD1C();
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v5 + 48))(v5, buf);
  return 0;
}

uint64_t sub_100D6C5CC(uint64_t a1)
{
  void *v2;
  NSObject *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  char *v9;
  int v10;
  id v11;
  uint8_t buf[4];
  id v13;

  v2 = *(void **)(a1 + 128);
  if (!v2
    || objc_msgSend(v2, "refreshState") && (sub_1007F9FC0(*(void **)(a1 + 128)) & 1) != 0)
  {
    return 1;
  }
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102182AB0);
  v4 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
  {
    v5 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    *(_DWORD *)buf = 136446210;
    v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,verifyAssetIsPresentOnDisk,asset is no longer available on disc", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v7 = qword_1022A02A8;
    v8 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v10 = 136446210;
    v11 = v8;
    v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 16, "#CLConfig,%{public}s,verifyAssetIsPresentOnDisk,asset is no longer available on disc", &v10, 12);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLConfigAssetComponent::verifyAssetIsPresentOnDisk()", "%s\n", v9);
    if (v9 != (char *)buf)
      free(v9);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  buf[0] = 1;
  v6 = *(_QWORD *)(a1 + 88);
  if (!v6)
    sub_10025FD1C();
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v6 + 48))(v6, buf);
  return 0;
}

uint64_t sub_100D6C7F4(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v4;
  uint64_t v6;
  id v7;
  const char *v8;
  char *v9;
  int v10;
  id v11;
  uint8_t buf[1640];

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102182AB0);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,removeCurrentAsset", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v6 = qword_1022A02A8;
    v7 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v10 = 136446210;
    v11 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 0, "#CLConfig,%{public}s,removeCurrentAsset", &v10, 12);
    v9 = (char *)v8;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLConfigAssetComponent::removeCurrentAsset()", "%s\n", v8);
    if (v9 != (char *)buf)
      free(v9);
  }
  objc_msgSend(*(id *)(a1 + 128), "refreshState");
  v4 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)buf = *(_QWORD *)(a1 + 128);
  if (!v4)
    sub_10025FD1C();
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v4 + 48))(v4, buf);

  *(_QWORD *)(a1 + 128) = 0;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
}

uint64_t sub_100D6C9F4(uint64_t a1, void *a2)
{
  if (!sub_1007FA424((uint64_t)a2, (uint64_t)CFSTR("Component"), *(void **)(a1 + 16)))
    return 1;
  if (*(_QWORD *)(a1 + 128))
    return objc_msgSend(objc_msgSend(a2, "assetId"), "isEqualToString:", objc_msgSend(*(id *)(a1 + 128), "assetId")) ^ 1;
  return 0;
}

void sub_100D6CA68(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;
  id v6;
  uint64_t v7;
  id v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  id v12;
  uint8_t buf[4];
  id v14;

  *(_DWORD *)(a2 + 48) = sub_100D67A14(*(void **)(a1 + 16));
  v4 = *(void **)(a1 + 128);
  if (v4)
  {
    *(_DWORD *)(a2 + 52) = sub_1007FA8C8(v4);
    *(_DWORD *)(a2 + 56) = sub_1007FA8FC(*(void **)(a1 + 128));
    *(_BYTE *)(a2 + 85) = sub_1007FA424(*(_QWORD *)(a1 + 128), (uint64_t)CFSTR("Devices"), CFSTR("Generic"));
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v5 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      *(_DWORD *)buf = 136446210;
      v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning #CLConfig,%{public}s,getVersionInfoForAwd,no asset available to report for component", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      v7 = qword_1022A02A8;
      v8 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v11 = 136446210;
      v12 = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 0, "#Warning #CLConfig,%{public}s,getVersionInfoForAwd,no asset available to report for component", &v11, 12);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLConfigAssetComponent::getVersionInfoForAwd(CLDaemonStats_Type::LocationMobileAssetStatistics &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
}

void sub_100D6CC70(uint64_t a1, void *a2, int a3)
{
  __CFString *v6;
  NSObject *v7;
  id v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  id v12;
  unsigned int v13;
  int v14;
  const char *v15;
  NSObject *v16;
  id v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  id v21;
  unsigned int v22;
  int v23;
  uint8_t *v24;
  _BYTE v25[24];
  _BYTE v26[24];
  uint8_t buf[4];
  id v28;
  __int16 v29;
  unsigned int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  id v34;
  __int16 v35;
  id v36;

  objc_msgSend(a2, "addKeyValuePair:with:", CFSTR("Component"), *(_QWORD *)(a1 + 16));
  objc_msgSend(a2, "addKeyValuePair:with:", ASAttributeCompatibilityVersion, +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), *(unsigned int *)(a1 + 28)));
  if (*(_BYTE *)(a1 + 24))
  {
    if (a3)
      v6 = CFSTR("Generic");
    else
      v6 = (__CFString *)qword_102311540;
    objc_msgSend(a2, "addKeyValuePair:with:", CFSTR("DeviceType"), qword_102311538);
    objc_msgSend(a2, "addKeyValuePair:with:", CFSTR("Devices"), v6);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v7 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v9 = objc_msgSend(a2, "returnTypes");
      v10 = *(_DWORD *)(a1 + 28);
      *(_DWORD *)buf = 136447235;
      v28 = v8;
      v29 = 1026;
      v30 = v9;
      v31 = 1026;
      v32 = v10;
      v33 = 2081;
      v34 = objc_msgSend((id)qword_102311538, "UTF8String");
      v35 = 2081;
      v36 = -[__CFString UTF8String](v6, "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,querying assets for assets with,returnType,%{public}d,compatibilityVersion,%{public}d,deviceTypeTag,%{private}s,devicesTag,%{private}s", buf, 0x2Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      v11 = qword_1022A02A8;
      v12 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v13 = objc_msgSend(a2, "returnTypes");
      v14 = *(_DWORD *)(a1 + 28);
      *(_DWORD *)v25 = 136447235;
      *(_QWORD *)&v25[4] = v12;
      *(_WORD *)&v25[12] = 1026;
      *(_DWORD *)&v25[14] = v13;
      *(_WORD *)&v25[18] = 1026;
      *(_DWORD *)&v25[20] = v14;
      *(_WORD *)v26 = 2081;
      *(_QWORD *)&v26[2] = objc_msgSend((id)qword_102311538, "UTF8String");
      *(_WORD *)&v26[10] = 2081;
      *(_QWORD *)&v26[12] = -[__CFString UTF8String](v6, "UTF8String");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 0, "#CLConfig,%{public}s,querying assets for assets with,returnType,%{public}d,compatibilityVersion,%{public}d,deviceTypeTag,%{private}s,devicesTag,%{private}s", v25, 44, *(_OWORD *)v25, *(_QWORD *)&v25[16], *(_OWORD *)v26, *(_QWORD *)&v26[16]);
LABEL_22:
      v24 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLConfigAssetComponent::fillInAssetQueryKeys(MAAssetQuery *, BOOL) const", "%s\n", v15);
      if (v24 != buf)
        free(v24);
    }
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v16 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v17 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v18 = objc_msgSend(a2, "returnTypes");
      v19 = *(_DWORD *)(a1 + 28);
      *(_DWORD *)buf = 136446722;
      v28 = v17;
      v29 = 1026;
      v30 = v18;
      v31 = 1026;
      v32 = v19;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,querying assets for assets with,returnType,%{public}d,compatibilityVersion,%{public}d", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      v20 = qword_1022A02A8;
      v21 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v22 = objc_msgSend(a2, "returnTypes");
      v23 = *(_DWORD *)(a1 + 28);
      *(_DWORD *)v25 = 136446722;
      *(_QWORD *)&v25[4] = v21;
      *(_WORD *)&v25[12] = 1026;
      *(_DWORD *)&v25[14] = v22;
      *(_WORD *)&v25[18] = 1026;
      *(_DWORD *)&v25[20] = v23;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 0, "#CLConfig,%{public}s,querying assets for assets with,returnType,%{public}d,compatibilityVersion,%{public}d", v25, 24, *(_OWORD *)v25, *(_QWORD *)&v25[16], *(_OWORD *)v26, *(_QWORD *)&v26[16]);
      goto LABEL_22;
    }
  }
}

uint64_t sub_100D6D0DC(uint64_t a1, void *a2)
{
  void *v3;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  id v9;
  int v10;
  int v11;
  uint64_t result;
  NSObject *v13;
  id v14;
  _BOOL4 v15;
  uint64_t v16;
  id v17;
  const char *v18;
  uint8_t *v19;
  NSObject *v20;
  id v21;
  uint64_t v22;
  id v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  id v27;
  const char *v28;
  uint8_t *v29;
  int v30;
  id v31;
  uint8_t buf[4];
  id v33;

  if (a2)
  {
    v3 = *(void **)(a1 + 128);
    if (v3)
    {
      if (objc_msgSend(v3, "refreshState")
        && (sub_1007F9FC0(*(void **)(a1 + 128)) & 1) != 0)
      {
        if (!*(_BYTE *)(a1 + 24))
          goto LABEL_45;
        v5 = sub_1007FA424(*(_QWORD *)(a1 + 128), (uint64_t)CFSTR("Devices"), CFSTR("Generic"));
        v6 = sub_1007FA424((uint64_t)a2, (uint64_t)CFSTR("Devices"), CFSTR("Generic"));
        v7 = v5 ^ v6;
        if (v6 && v7)
        {
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_102182AB0);
          v8 = qword_1022A02A8;
          if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
          {
            v9 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
            *(_DWORD *)buf = 136446210;
            v33 = v9;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,shouldDownloadAsset,cached asset is device specific but new asset is generic", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A02A0 != -1)
              dispatch_once(&qword_1022A02A0, &stru_102182AB0);
            v26 = qword_1022A02A8;
            v27 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
            v30 = 136446210;
            v31 = v27;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 16, "#CLConfig,%{public}s,shouldDownloadAsset,cached asset is device specific but new asset is generic", &v30, 12);
            v29 = (uint8_t *)v28;
            sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLConfigAssetComponent::shouldDownloadAsset(MAAsset *)", "%s\n", v28);
            if (v29 != buf)
              free(v29);
          }
        }
        if ((v7 & 1) == 0)
        {
LABEL_45:
          v10 = sub_1007FA8C8(a2);
          v11 = sub_1007FA8C8(*(void **)(a1 + 128));
          if (v10 <= v11)
          {
            if (v10 == v11)
              return objc_msgSend(objc_msgSend(a2, "assetId"), "isEqualToString:", objc_msgSend(*(id *)(a1 + 128), "assetId")) ^ 1;
            return 0;
          }
        }
      }
      else
      {
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102182AB0);
        v20 = qword_1022A02A8;
        if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
        {
          v21 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
          *(_DWORD *)buf = 136446210;
          v33 = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,shouldDownloadAsset,cached asset is no longer available on disc", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_102182AB0);
          v22 = qword_1022A02A8;
          v23 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
          v30 = 136446210;
          v31 = v23;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 16, "#CLConfig,%{public}s,shouldDownloadAsset,cached asset is no longer available on disc", &v30, 12);
          v25 = (uint8_t *)v24;
          sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLConfigAssetComponent::shouldDownloadAsset(MAAsset *)", "%s\n", v24);
          if (v25 != buf)
            free(v25);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
      }
    }
    return 1;
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v13 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      v14 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      *(_DWORD *)buf = 136446210;
      v33 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,shouldDownloadAsset,asset was nil", buf, 0xCu);
    }
    v15 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v15)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      v16 = qword_1022A02A8;
      v17 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v30 = 136446210;
      v31 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 16, "#CLConfig,%{public}s,shouldDownloadAsset,asset was nil", &v30, 12);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLConfigAssetComponent::shouldDownloadAsset(MAAsset *)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
      return 0;
    }
  }
  return result;
}

BOOL sub_100D6D640(uint64_t a1, void *a2, uint64_t a3)
{
  NSURL *v6;
  NSObject *v7;
  id v8;
  NSMutableDictionary *v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  id v13;
  NSMutableDictionary *v14;
  NSObject *v15;
  id v16;
  id v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  unint64_t size;
  void *v26;
  int v27;
  uint64_t v29;
  id v30;
  std::string *v31;
  uint64_t v32;
  id v33;
  id v34;
  std::string *v35;
  uint64_t v36;
  id v37;
  id v38;
  std::string *v39;
  uint64_t v40;
  __int128 __p;
  _BYTE v42[7];
  char v43;
  std::string v44;
  std::string v45;
  _DWORD v46[2];
  uint64_t v47;
  std::string v48;
  uint64_t v49;
  std::string buf;
  uint64_t v51;

  v6 = +[NSURL URLWithString:relativeToURL:](NSURL, "URLWithString:relativeToURL:", a2, objc_msgSend(*(id *)(a1 + 128), "getLocalFileUrl"));
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102182AB0);
  v7 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446467;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)-[NSString UTF8String](-[NSURL absoluteString](v6, "absoluteString"), "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,reading plist from %{private}s", (uint8_t *)&buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v29 = qword_1022A02A8;
    v30 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    LODWORD(v48.__r_.__value_.__l.__data_) = 136446467;
    *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
    WORD2(v48.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&v48.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)-[NSString UTF8String](-[NSURL absoluteString](v6, "absoluteString"), "UTF8String");
    v31 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v29, 0, "#CLConfig,%{public}s,reading plist from %{private}s", &v48, 22);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLConfigAssetComponent::loadPlistFromAsset(NSString *, CLNameValuePair &) const", "%s\n", (const char *)v31);
    if (v31 != &buf)
      free(v31);
  }
  v47 = 0;
  v9 = +[NSMutableDictionary dictionaryWithContentsOfURL:error:](NSMutableDictionary, "dictionaryWithContentsOfURL:error:", v6, &v47);
  v10 = v47;
  if (!v47)
  {
    v14 = v9;
    sub_100524E10(&buf, v9);
    sub_10052502C(a3, (uint64_t)&buf);
    sub_10011A5A8(&buf);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v15 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v16 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v17 = objc_msgSend(a2, "UTF8String");
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446467;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2081;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,plist read successful from %{private}s", (uint8_t *)&buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      v36 = qword_1022A02A8;
      v37 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v38 = objc_msgSend(a2, "UTF8String");
      LODWORD(v48.__r_.__value_.__l.__data_) = 136446467;
      *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 4) = (std::string::size_type)v37;
      WORD2(v48.__r_.__value_.__r.__words[1]) = 2081;
      *(std::string::size_type *)((char *)&v48.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v38;
      LODWORD(v40) = 22;
      v39 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v36, 0, "#CLConfig,%{public}s,plist read successful from %{private}s", &v48, v40);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLConfigAssetComponent::loadPlistFromAsset(NSString *, CLNameValuePair &) const", "%s\n", (const char *)v39);
      if (v39 != &buf)
        free(v39);
    }
    sub_1015A2E04(&v44, "#CLConfig,");
    v18 = std::string::append(&v44, (const std::string::value_type *)objc_msgSend(*(id *)(a1 + 16), "UTF8String"));
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&v45, ",");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = std::string::append(&v48, (const std::string::value_type *)objc_msgSend(a2, "UTF8String"));
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = std::string::append(&buf, ",");
    v26 = (void *)v24->__r_.__value_.__r.__words[0];
    size = v24->__r_.__value_.__l.__size_;
    v46[0] = v24->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v46 + 3) = *(_DWORD *)((char *)&v24->__r_.__value_.__r.__words[2] + 3);
    v27 = SHIBYTE(v24->__r_.__value_.__r.__words[2]);
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v44.__r_.__value_.__l.__data_);
      if ((v27 & 0x80000000) == 0)
        goto LABEL_26;
    }
    else if ((v27 & 0x80000000) == 0)
    {
LABEL_26:
      *(_QWORD *)&__p = v26;
      *((_QWORD *)&__p + 1) = size;
      *(_DWORD *)v42 = v46[0];
      *(_DWORD *)&v42[3] = *(_DWORD *)((char *)v46 + 3);
      v43 = v27;
      goto LABEL_29;
    }
    sub_100115CE4(&__p, v26, size);
LABEL_29:
    sub_1007FA930(&__p, v14);
    if (v43 < 0)
    {
      operator delete((void *)__p);
      if ((v27 & 0x80000000) == 0)
        return v10 == 0;
    }
    else if ((v27 & 0x80000000) == 0)
    {
      return v10 == 0;
    }
    operator delete(v26);
    return v10 == 0;
  }
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102182AB0);
  v11 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v12 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v13 = objc_msgSend(a2, "UTF8String");
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446723;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v13;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2112;
    v51 = v47;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,error reading plist,%{private}s,error,%@", (uint8_t *)&buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v32 = qword_1022A02A8;
    v33 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v34 = objc_msgSend(a2, "UTF8String");
    LODWORD(v48.__r_.__value_.__l.__data_) = 136446723;
    *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 4) = (std::string::size_type)v33;
    WORD2(v48.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&v48.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v34;
    HIWORD(v48.__r_.__value_.__r.__words[2]) = 2112;
    v49 = v47;
    LODWORD(v40) = 32;
    v35 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v32, 0, "#CLConfig,%{public}s,error reading plist,%{private}s,error,%@", &v48, v40);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLConfigAssetComponent::loadPlistFromAsset(NSString *, CLNameValuePair &) const", "%s\n", (const char *)v35);
    if (v35 != &buf)
      free(v35);
  }
  sub_100119F3C(&buf);
  sub_10052502C(a3, (uint64_t)&buf);
  sub_10011A5A8(&buf);
  return v10 == 0;
}

void sub_100D6DD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  void *v44;

  operator delete(v44);
  _Unwind_Resume(a1);
}

uint64_t sub_100D6DE14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  NSObject *v12;
  id v13;
  uint64_t result;
  uint64_t v15;
  id v16;
  char *v17;
  id v18;
  NSObject *v19;
  id v20;
  uint64_t v21;
  id v22;
  int v23;
  id v24;
  uint8_t buf[4];
  id v26;

  sub_100119F3C(buf);
  sub_10052502C(a6, (uint64_t)buf);
  sub_10011A5A8(buf);
  if (sub_10052A950(a2))
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v12 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      v13 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      *(_DWORD *)buf = 136446210;
      v26 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,findCountryBasedInfo,country info dict is empty", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 0);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      v15 = qword_1022A02A8;
      v16 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v23 = 136446210;
      v24 = v16;
      v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 16, "#CLConfig,%{public}s,findCountryBasedInfo,country info dict is empty", &v23, 12);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLConfigAssetComponent::findCountryBasedInfo(CLNameValuePair &, int32_t, int32_t, BOOL, CLNameValuePair &) const", "%s\n", v17);
LABEL_21:
      if (v17 != (char *)buf)
        free(v17);
      return 0;
    }
  }
  else
  {
    v18 = objc_msgSend((id)sub_10011A5AC(a2), "valueForKey:", CFSTR("CountryInfo"));
    if (v18)
      return sub_100D6E1B8(a1, v18, a3, a4, a5, a6);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v19 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      v20 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      *(_DWORD *)buf = 136446210;
      v26 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,findCountryBasedInfo,no country info array in dict", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 0);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      v21 = qword_1022A02A8;
      v22 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v23 = 136446210;
      v24 = v22;
      v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 16, "#CLConfig,%{public}s,findCountryBasedInfo,no country info array in dict", &v23, 12);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLConfigAssetComponent::findCountryBasedInfo(CLNameValuePair &, int32_t, int32_t, BOOL, CLNameValuePair &) const", "%s\n", v17);
      goto LABEL_21;
    }
  }
  return result;
}

void sub_100D6E19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D6E1B8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  NSObject *v12;
  id v13;
  uint64_t v14;
  NSString *v15;
  uint64_t *v16;
  NSObject *v17;
  id v18;
  NSString *v19;
  NSString *v20;
  NSObject *v21;
  id v22;
  const char *v23;
  const char *v24;
  NSObject *v25;
  id v26;
  const char *v27;
  const char *v28;
  NSObject *v30;
  id v31;
  const char *v32;
  const char *v33;
  uint64_t v34;
  id v35;
  char *v36;
  uint64_t v37;
  id v38;
  const char *v39;
  const char *v40;
  char *v41;
  uint64_t v42;
  id v43;
  char *v44;
  uint64_t v45;
  id v46;
  const char *v47;
  const char *v48;
  char *v49;
  uint64_t v50;
  id v51;
  const char *v52;
  const char *v53;
  char *v54;
  uint64_t v55;
  _QWORD v56[9];
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t);
  void (*v61)(uint64_t);
  uint64_t v62;
  int v63;
  id v64;
  __int16 v65;
  const char *v66;
  __int16 v67;
  const char *v68;
  _BYTE v69[24];
  void (*v70)(uint64_t, uint64_t);
  void (*v71)(uint64_t);
  uint64_t v72;
  uint8_t buf[4];
  id v74;
  __int16 v75;
  const char *v76;
  __int16 v77;
  const char *v78;

  sub_100119F3C(buf);
  sub_10052502C(a6, (uint64_t)buf);
  sub_10011A5A8(buf);
  if ((a3 - 1000) > 0xFFFFFC18)
  {
    v15 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%03d"), a3);
    if ((a4 - 1000) > 0xFFFFFC18)
    {
      if (a5)
      {
        v20 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%03d%03d"), a3, a4);
        v16 = &qword_1022A0000;
      }
      else
      {
        v20 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%03d%02d"), a3, a4);
        v16 = &qword_1022A0000;
      }
      v19 = v20;
    }
    else
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      v16 = &qword_1022A0000;
      v17 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        v18 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        *(_DWORD *)buf = 136446466;
        v74 = v18;
        v75 = 1026;
        LODWORD(v76) = a4;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,findCountryBasedInfo,invalid mnc,%{public}d,not searching for PLMN", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102182AB0);
        v42 = qword_1022A02A8;
        v43 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        *(_DWORD *)v69 = 136446466;
        *(_QWORD *)&v69[4] = v43;
        *(_WORD *)&v69[12] = 1026;
        *(_DWORD *)&v69[14] = a4;
        v44 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v42, 0, "#CLConfig,%{public}s,findCountryBasedInfo,invalid mnc,%{public}d,not searching for PLMN", v69, 18);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLConfigAssetComponent::findCountryBasedInfo(NSArray *, int32_t, int32_t, BOOL, CLNameValuePair &) const", "%s\n", v44);
        if (v44 != (char *)buf)
          free(v44);
      }
      v19 = 0;
    }
    *(_QWORD *)v69 = 0;
    *(_QWORD *)&v69[8] = v69;
    *(_QWORD *)&v69[16] = 0x3052000000;
    v70 = sub_1002071B4;
    v71 = sub_100207D28;
    v72 = 0;
    v57 = 0;
    v58 = &v57;
    v59 = 0x3052000000;
    v60 = sub_1002071B4;
    v61 = sub_100207D28;
    v62 = 0;
    v56[0] = _NSConcreteStackBlock;
    v56[1] = 3221225472;
    v56[2] = sub_100D6EC48;
    v56[3] = &unk_102182A68;
    v56[7] = &v57;
    v56[8] = a1;
    v56[4] = v19;
    v56[5] = v15;
    v56[6] = v69;
    objc_msgSend(a2, "enumerateObjectsUsingBlock:", v56);
    if (*(_QWORD *)(*(_QWORD *)&v69[8] + 40))
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      v21 = v16[85];
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        v22 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        v23 = -[NSString UTF8String](v19, "UTF8String");
        v24 = *(const char **)(*(_QWORD *)&v69[8] + 40);
        *(_DWORD *)buf = 136446723;
        v74 = v22;
        v75 = 2082;
        v76 = v23;
        v77 = 2113;
        v78 = v24;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,findCountryBasedInfo,found country info for PLMN,%{public}s,info,%{private}@", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102182AB0);
        v37 = v16[85];
        v38 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        v39 = -[NSString UTF8String](v19, "UTF8String");
        v40 = *(const char **)(*(_QWORD *)&v69[8] + 40);
        v63 = 136446723;
        v64 = v38;
        v65 = 2082;
        v66 = v39;
        v67 = 2113;
        v68 = v40;
        LODWORD(v55) = 32;
        v41 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v37, 0, "#CLConfig,%{public}s,findCountryBasedInfo,found country info for PLMN,%{public}s,info,%{private}@", &v63, v55);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLConfigAssetComponent::findCountryBasedInfo(NSArray *, int32_t, int32_t, BOOL, CLNameValuePair &) const", "%s\n", v41);
        if (v41 != (char *)buf)
          free(v41);
      }
      sub_100524E10(buf, *(CFTypeRef *)(*(_QWORD *)&v69[8] + 40));
      sub_10052502C(a6, (uint64_t)buf);
    }
    else
    {
      if (!v58[5])
      {
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102182AB0);
        v30 = v16[85];
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          v31 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
          v32 = -[NSString UTF8String](v15, "UTF8String");
          v33 = -[NSString UTF8String](v19, "UTF8String");
          *(_DWORD *)buf = 136446722;
          v74 = v31;
          v75 = 2082;
          v76 = v32;
          v77 = 2082;
          v78 = v33;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,findCountryBasedInfo,did not find country info for MCC,%{public}s,PLMN,%{public}s", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_102182AB0);
          v50 = qword_1022A02A8;
          v51 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
          v52 = -[NSString UTF8String](v15, "UTF8String");
          v53 = -[NSString UTF8String](v19, "UTF8String");
          v63 = 136446722;
          v64 = v51;
          v65 = 2082;
          v66 = v52;
          v67 = 2082;
          v68 = v53;
          LODWORD(v55) = 32;
          v54 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v50, 0, "#CLConfig,%{public}s,findCountryBasedInfo,did not find country info for MCC,%{public}s,PLMN,%{public}s", &v63, v55);
          sub_100512490("Generic", 1, 0, 2, "BOOL CLConfigAssetComponent::findCountryBasedInfo(NSArray *, int32_t, int32_t, BOOL, CLNameValuePair &) const", "%s\n", v54);
          if (v54 != (char *)buf)
            free(v54);
        }
        v14 = 0;
        goto LABEL_34;
      }
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      v25 = v16[85];
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        v26 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        v27 = -[NSString UTF8String](v15, "UTF8String");
        v28 = (const char *)v58[5];
        *(_DWORD *)buf = 136446723;
        v74 = v26;
        v75 = 2082;
        v76 = v27;
        v77 = 2113;
        v78 = v28;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,findCountryBasedInfo,found country info for MCC,%{public}s,info,%{private}@", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102182AB0);
        v45 = qword_1022A02A8;
        v46 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
        v47 = -[NSString UTF8String](v15, "UTF8String");
        v48 = (const char *)v58[5];
        v63 = 136446723;
        v64 = v46;
        v65 = 2082;
        v66 = v47;
        v67 = 2113;
        v68 = v48;
        LODWORD(v55) = 32;
        v49 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v45, 0, "#CLConfig,%{public}s,findCountryBasedInfo,found country info for MCC,%{public}s,info,%{private}@", &v63, v55);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLConfigAssetComponent::findCountryBasedInfo(NSArray *, int32_t, int32_t, BOOL, CLNameValuePair &) const", "%s\n", v49);
        if (v49 != (char *)buf)
          free(v49);
      }
      sub_100524E10(buf, (CFTypeRef)v58[5]);
      sub_10052502C(a6, (uint64_t)buf);
    }
    sub_10011A5A8(buf);
    v14 = 1;
LABEL_34:
    _Block_object_dispose(&v57, 8);
    _Block_object_dispose(v69, 8);
    return v14;
  }
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102182AB0);
  v12 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v13 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    *(_DWORD *)buf = 136446466;
    v74 = v13;
    v75 = 1026;
    LODWORD(v76) = a3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,findCountryBasedInfo,invalid mcc,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v34 = qword_1022A02A8;
    v35 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    *(_DWORD *)v69 = 136446466;
    *(_QWORD *)&v69[4] = v35;
    *(_WORD *)&v69[12] = 1026;
    *(_DWORD *)&v69[14] = a3;
    v36 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v34, 0, "#CLConfig,%{public}s,findCountryBasedInfo,invalid mcc,%{public}d", v69, 18);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLConfigAssetComponent::findCountryBasedInfo(NSArray *, int32_t, int32_t, BOOL, CLNameValuePair &) const", "%s\n", v36);
    if (v36 != (char *)buf)
      free(v36);
  }
  return 0;
}

void sub_100D6EBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_100D6EC48(uint64_t a1, void *a2, int a3, _BYTE *a4)
{
  uint64_t v8;
  id v9;
  NSObject *v10;
  id v11;
  uint64_t v12;
  id v13;
  char *v14;
  _QWORD v15[6];
  __int128 v16;
  uint64_t v17;
  int v18;
  id v19;
  __int16 v20;
  int v21;
  uint8_t buf[4];
  id v23;
  __int16 v24;
  int v25;

  v8 = *(_QWORD *)(a1 + 64);
  v9 = objc_msgSend(a2, "valueForKey:", CFSTR("MCCOrPLMNs"));
  if (v9)
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100D6EEA8;
    v15[3] = &unk_102182A40;
    v15[4] = *(_QWORD *)(a1 + 32);
    v15[5] = a2;
    v16 = *(_OWORD *)(a1 + 40);
    v17 = *(_QWORD *)(a1 + 56);
    objc_msgSend(v9, "enumerateObjectsUsingBlock:", v15);
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
      *a4 = 1;
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v10 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      v11 = objc_msgSend(*(id *)(v8 + 16), "UTF8String");
      *(_DWORD *)buf = 136446466;
      v23 = v11;
      v24 = 1026;
      v25 = a3;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,findCountryBasedInfo,no MCC/PLMN list,ind,%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      v12 = qword_1022A02A8;
      v13 = objc_msgSend(*(id *)(v8 + 16), "UTF8String");
      v18 = 136446466;
      v19 = v13;
      v20 = 1026;
      v21 = a3;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 16, "#CLConfig,%{public}s,findCountryBasedInfo,no MCC/PLMN list,ind,%{public}d", &v18, 18);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLConfigAssetComponent::findCountryBasedInfo(NSArray *, int32_t, int32_t, BOOL, CLNameValuePair &) const_block_invoke", "%s\n", v14);
      if (v14 != (char *)buf)
        free(v14);
    }
  }
}

id sub_100D6EEA8(_QWORD *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id result;

  if (a1[4] && (result = objc_msgSend(a2, "isEqualToString:"), (_DWORD)result))
  {
    *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 40) = a1[5];
    *a4 = 1;
  }
  else
  {
    result = objc_msgSend(a2, "isEqualToString:", a1[6]);
    if ((_DWORD)result)
      *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 40) = a1[5];
  }
  return result;
}

uint64_t sub_100D6EF24(uint64_t a1, int a2, uint64_t a3)
{
  const void *v6;
  CFPropertyListRef DeepCopy;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD v11[2];
  _BYTE v12[16];
  uint64_t v13;

  sub_100119F3C(v12);
  v13 = -1;
  LODWORD(v13) = sub_1007FA8C8(*(void **)(a1 + 128));
  HIDWORD(v13) = sub_1007FA8FC(*(void **)(a1 + 128));
  v6 = (const void *)sub_10011A5AC(a3);
  DeepCopy = CFPropertyListCreateDeepCopy(kCFAllocatorDefault, v6, 1uLL);
  sub_100524E10(v11, DeepCopy);
  sub_10052502C((uint64_t)v12, (uint64_t)v11);
  sub_10011A5A8(v11);
  CFRelease(DeepCopy);
  sub_100525028(v10);
  v10[2] = v13;
  LODWORD(v11[0]) = a2;
  v8 = *(_QWORD *)(a1 + 56);
  if (!v8)
    sub_10025FD1C();
  (*(void (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v8 + 48))(v8, v11, v10);
  sub_10011A5A8(v10);
  return sub_10011A5A8(v12);
}

void sub_100D6F018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_10011A5A8((uint64_t *)va);
  sub_10011A5A8(va1);
  _Unwind_Resume(a1);
}

void sub_100D6F050(id a1)
{
  qword_1022A02A8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

void sub_100D6F07C(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100D6F0A8(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 696))
  {
    if (*(char *)(a1 + 343) < 0)
      operator delete(*(void **)(a1 + 320));
    v2 = *(void **)(a1 + 88);
    if (v2)
    {
      *(_QWORD *)(a1 + 96) = v2;
      operator delete(v2);
    }
    *(_BYTE *)(a1 + 696) = 0;
  }
}

void sub_100D6F0F0(uint64_t a1, int a2)
{
  sub_100D69240(*(_QWORD *)(a1 + 32), a2, *(CFStringRef *)(a1 + 48));
}

uint64_t sub_100D6F100(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE *v13;
  __int128 v14;
  __int128 v15;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 16), *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v4;
  }
  v5 = *(_OWORD *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 70) = *(_OWORD *)(a2 + 70);
  *(_OWORD *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 40) = v5;
  if (*(char *)(a2 + 111) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 88), *(void **)(a2 + 88), *(_QWORD *)(a2 + 96));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v7;
  }
  v8 = *(_OWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v8;
  if (*(char *)(a2 + 159) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 136), *(void **)(a2 + 136), *(_QWORD *)(a2 + 144));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = v9;
  }
  v10 = *(_OWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = v10;
  if (*(char *)(a2 + 207) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 184), *(void **)(a2 + 184), *(_QWORD *)(a2 + 192));
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = v11;
  }
  v12 = *(_OWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = v12;
  v13 = (_BYTE *)(a1 + 232);
  if (*(char *)(a2 + 255) < 0)
  {
    sub_100115CE4(v13, *(void **)(a2 + 232), *(_QWORD *)(a2 + 240));
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_OWORD *)v13 = v14;
  }
  v15 = *(_OWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = v15;
  return a1;
}

void sub_100D6F280(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;

  if (v1[207] < 0)
    operator delete(*v5);
  if (v1[159] < 0)
    operator delete(*v4);
  if (v1[111] < 0)
    operator delete(*v3);
  if (v1[39] < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_100D6F2E8()
{
  operator delete();
}

_QWORD *sub_100D6F2FC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102182B00;
  result[1] = v3;
  return result;
}

uint64_t sub_100D6F330(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102182B00;
  a2[1] = v2;
  return result;
}

id sub_100D6F34C(uint64_t a1, void **a2)
{
  return sub_1008007A8(*(_QWORD *)(a1 + 8), *a2);
}

uint64_t sub_100D6F358(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100D6F394()
{
}

void sub_100D6F3A4()
{
  operator delete();
}

_QWORD *sub_100D6F3B8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102182B90;
  result[1] = v3;
  return result;
}

uint64_t sub_100D6F3EC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102182B90;
  a2[1] = v2;
  return result;
}

void sub_100D6F408(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (*a2)
    v3 = 1;
  else
    v3 = 2;
  sub_100D6AA6C(v2, v3, 0, 0);
}

uint64_t sub_100D6F428(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100D6F464()
{
}

_QWORD *sub_100D6F470(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_10012E444(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v11 = *v21;
LABEL_38:
    *v21 = v11;
    goto LABEL_39;
  }
  *v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    v22 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_100D6F6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  sub_100BB2224(v11, v10);
  _Unwind_Resume(a1);
}

void sub_100D6F6C0()
{
  operator delete();
}

_QWORD *sub_100D6F6D4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102182C10;
  result[1] = v3;
  return result;
}

uint64_t sub_100D6F708(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102182C10;
  a2[1] = v2;
  return result;
}

void sub_100D6F724(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (*a2)
    v3 = 1;
  else
    v3 = 2;
  sub_100D6AA6C(v2, v3, 1u, 0);
}

uint64_t sub_100D6F744(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100D6F780()
{
}

void sub_100D6F790()
{
  operator delete();
}

_QWORD *sub_100D6F7A4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102182C90;
  result[1] = v3;
  return result;
}

uint64_t sub_100D6F7D8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102182C90;
  a2[1] = v2;
  return result;
}

void sub_100D6F7F4(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (*a2)
    v3 = 1;
  else
    v3 = 2;
  sub_100D6AA6C(v2, v3, 2u, 0);
}

uint64_t sub_100D6F814(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100D6F850()
{
}

void sub_100D6F860()
{
  operator delete();
}

_QWORD *sub_100D6F874(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102182D10;
  result[1] = v3;
  return result;
}

uint64_t sub_100D6F8A8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102182D10;
  a2[1] = v2;
  return result;
}

void sub_100D6F8C4(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (*a2)
    v3 = 1;
  else
    v3 = 2;
  sub_100D6AA6C(v2, v3, 3u, 0);
}

uint64_t sub_100D6F8E4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100D6F920()
{
}

void sub_100D6F930()
{
  operator delete();
}

_QWORD *sub_100D6F944(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102182D90;
  result[1] = v3;
  return result;
}

uint64_t sub_100D6F978(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102182D90;
  a2[1] = v2;
  return result;
}

void sub_100D6F994(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (*a2)
    v3 = 1;
  else
    v3 = 2;
  sub_100D6AA6C(v2, v3, 4u, 0);
}

uint64_t sub_100D6F9B4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100D6F9F0()
{
}

void sub_100D6FA00()
{
  operator delete();
}

_QWORD *sub_100D6FA14(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102182E10;
  result[1] = v3;
  return result;
}

uint64_t sub_100D6FA48(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102182E10;
  a2[1] = v2;
  return result;
}

void sub_100D6FA64(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (*a2)
    v3 = 1;
  else
    v3 = 2;
  sub_100D6AA6C(v2, v3, 5u, 0);
}

uint64_t sub_100D6FA84(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100D6FAC0()
{
}

void sub_100D6FAD0()
{
  operator delete();
}

_QWORD *sub_100D6FAE4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102182E90;
  result[1] = v3;
  return result;
}

uint64_t sub_100D6FB18(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102182E90;
  a2[1] = v2;
  return result;
}

void sub_100D6FB34(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (*a2)
    v3 = 1;
  else
    v3 = 2;
  sub_100D6AA6C(v2, v3, 6u, 0);
}

uint64_t sub_100D6FB54(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100D6FB90()
{
}

void sub_100D6FBA0()
{
  operator delete();
}

_QWORD *sub_100D6FBB4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102182F10;
  result[1] = v3;
  return result;
}

uint64_t sub_100D6FBE8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102182F10;
  a2[1] = v2;
  return result;
}

void sub_100D6FC04(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (*a2)
    v3 = 1;
  else
    v3 = 2;
  sub_100D6AA6C(v2, v3, 7u, 0);
}

uint64_t sub_100D6FC24(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100D6FC60()
{
}

void sub_100D6FC70()
{
  operator delete();
}

_QWORD *sub_100D6FC84(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102182F90;
  result[1] = v3;
  return result;
}

uint64_t sub_100D6FCB8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102182F90;
  a2[1] = v2;
  return result;
}

void sub_100D6FCD4(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (*a2)
    v3 = 1;
  else
    v3 = 2;
  sub_100D6AA6C(v2, v3, 8u, 0);
}

uint64_t sub_100D6FCF4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100D6FD30()
{
}

void sub_100D6FD40()
{
  operator delete();
}

_QWORD *sub_100D6FD54(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102183010;
  result[1] = v3;
  return result;
}

uint64_t sub_100D6FD88(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102183010;
  a2[1] = v2;
  return result;
}

void sub_100D6FDA4(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (*a2)
    v3 = 1;
  else
    v3 = 2;
  sub_100D6AA6C(v2, v3, 9u, 0);
}

uint64_t sub_100D6FDC4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100D6FE00()
{
}

_QWORD *sub_100D6FE0C(_QWORD *result, uint64_t a2)
{
  *result = off_1021830E0;
  result[1] = a2;
  result[2] = 0;
  return result;
}

uint64_t sub_100D6FE20(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v3 = sub_1001E4B84(v8, "MaxHarvestWifis", a2);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_100D6FEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_100D6FEB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLWifiService")), "syncgetStartScanWithType:lowPriority:passive:requester:", a2, a3, a4, "wifiharvest");
}

double sub_100D6FF0C(uint64_t a1, uint64_t a2)
{
  id v3;
  double result;
  __int128 v5;
  uint64_t v6;

  v3 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLClientManager")), "syncgetNonSystemLocationClientKey");
  if (v3)
  {
    sub_1015A2E04(&v5, (char *)objc_msgSend(v3, "UTF8String"));
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    result = *(double *)&v5;
    *(_OWORD *)a2 = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

const char *sub_100D6FF7C(uint64_t a1, unsigned int a2)
{
  return sub_1000A9998(a2);
}

BOOL sub_100D6FF84(uint64_t a1, int a2)
{
  return sub_1005B636C(a2);
}

_QWORD *sub_100D6FF8C(_QWORD *a1)
{
  *a1 = off_1021830E0;
  sub_10042B248(a1 + 2, 0);
  return a1;
}

void sub_100D6FFC0(_QWORD *a1)
{
  *a1 = off_1021830E0;
  sub_10042B248(a1 + 2, 0);
  operator delete();
}

uint64_t sub_100D70004(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v10;
  __int128 v12;

  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 0xFFFF;
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_OWORD *)(a1 + 28) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 44) = _Q0;
  *(_OWORD *)(a1 + 60) = _Q0;
  v12 = _Q0;
  *(_OWORD *)(a1 + 76) = _Q0;
  *(_DWORD *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 124) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 132) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v10 = a1 + 168;
  *(_BYTE *)(a1 + 160) = 0;
  sub_1012A23BC(a1 + 168, 120.0);
  sub_10022142C((_QWORD *)(a1 + 216));
  *(_QWORD *)(a1 + 248) = a1 + 256;
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 233) = a3;
  *(_DWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 234) = 0;
  *(_QWORD *)(a1 + 272) = a1 + 280;
  *(_QWORD *)(a1 + 288) = 0;
  *(_WORD *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 298) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 328) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 317) = 0;
  sub_1004CF1E0(a1 + 336, 120, 1, 60.0);
  *(_OWORD *)(a1 + 368) = v12;
  *(_OWORD *)(a1 + 384) = v12;
  *(_QWORD *)(a1 + 400) = 0xBFF0000000000000;
  sub_100231BE8(v10);
  return a1;
}

void sub_100D70144(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100126BFC(v1 + 176);
  _Unwind_Resume(a1);
}

uint64_t sub_100D70184(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102183140);
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Fence: CLFenceMonitorWifi, shutdown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102183140);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: CLFenceMonitorWifi, shutdown", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "CLFenceMonitorWifi::~CLFenceMonitorWifi()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  *(_BYTE *)(a1 + 237) = 0;
  sub_100D743BC(a1 + 272, *(_QWORD **)(a1 + 280));
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 272) = a1 + 280;
  *(_DWORD *)(a1 + 240) = 0;
  sub_100D743BC(a1 + 272, 0);
  sub_100D742F4(a1 + 248, *(_QWORD **)(a1 + 256));
  sub_100261F44(a1 + 216);
  sub_100126BFC(a1 + 176);
  return a1;
}

void sub_100D70364(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_100D70374(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 232) != a2)
    *(_BYTE *)(result + 232) = a2;
  return result;
}

uint64_t sub_100D70388(uint64_t result, int a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[2];
  __int16 v10;
  int v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  int v15;

  if (*(unsigned __int8 *)(result + 235) != a2)
  {
    v3 = result;
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102183140);
    v4 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(unsigned __int8 *)(v3 + 235);
      *(_DWORD *)buf = 67240448;
      v13 = a2;
      v14 = 1026;
      v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: companion connected is now, %{public}d, was, %{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102183140);
      v6 = *(unsigned __int8 *)(v3 + 235);
      v9[0] = 67240448;
      v9[1] = a2;
      v10 = 1026;
      v11 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: companion connected is now, %{public}d, was, %{public}d", v9, 14);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::setCompanionConnectedMode(BOOL)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    *(_BYTE *)(v3 + 235) = a2;
    return sub_100D7056C((_QWORD *)v3);
  }
  return result;
}

uint64_t sub_100D7056C(_QWORD *a1)
{
  NSObject *v2;
  uint64_t result;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102183140);
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Fence: recalculate, take power assertion", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102183140);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: recalculate, take power assertion", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::recalculate()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  result = (*(uint64_t (**)(_QWORD, const char *))(*(_QWORD *)*a1 + 64))(*a1, "recalculate");
  if (!*((_BYTE *)a1 + 298))
  {
    *((_BYTE *)a1 + 298) = 1;
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 88))(*a1);
  }
  return result;
}

uint64_t sub_100D70734(uint64_t result, int a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[2];
  __int16 v10;
  int v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  int v15;

  if (*(unsigned __int8 *)(result + 234) != a2)
  {
    v3 = result;
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102183140);
    v4 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(unsigned __int8 *)(v3 + 234);
      *(_DWORD *)buf = 67240448;
      v13 = a2;
      v14 = 1026;
      v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: airplane mode is now, %{public}d, was, %{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102183140);
      v6 = *(unsigned __int8 *)(v3 + 234);
      v9[0] = 67240448;
      v9[1] = a2;
      v10 = 1026;
      v11 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: airplane mode is now, %{public}d, was, %{public}d", v9, 14);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::setAirplaneMode(BOOL)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    *(_BYTE *)(v3 + 234) = a2;
    return sub_100D7056C((_QWORD *)v3);
  }
  return result;
}

uint64_t sub_100D70918(uint64_t a1, uint64_t *a2, int a3, double a4)
{
  NSObject *v8;
  uint64_t *v9;
  uint64_t *v10;
  const char *v11;
  uint64_t *v13;
  uint64_t *v14;
  const char *v15;
  const char *v16;
  char *v17;
  int v18;
  uint64_t *v19;
  __int16 v20;
  uint64_t *v21;
  __int16 v22;
  const char *v23;
  _BYTE buf[12];
  __int16 v25;
  uint64_t *v26;
  __int16 v27;
  const char *v28;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102183140);
  v8 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = (uint64_t *)*a2;
    v10 = a2 + 3;
    if (*((char *)a2 + 47) < 0)
      v10 = (uint64_t *)a2[3];
    v11 = "exit";
    *(_DWORD *)buf = 136381187;
    if (a3)
      v11 = "entry";
    *(_QWORD *)&buf[4] = v9;
    v25 = 2081;
    v26 = v10;
    v27 = 2081;
    v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Fence: Starting to monitor %{private}s/%{private}s for %{private}s", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102183140);
    if (*((char *)a2 + 23) >= 0)
      v13 = a2;
    else
      v13 = (uint64_t *)*a2;
    v14 = a2 + 3;
    if (*((char *)a2 + 47) < 0)
      v14 = (uint64_t *)a2[3];
    v15 = "exit";
    if (a3)
      v15 = "entry";
    v18 = 136381187;
    v19 = v13;
    v20 = 2081;
    v21 = v14;
    v22 = 2081;
    v23 = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: Starting to monitor %{private}s/%{private}s for %{private}s", &v18, 32);
    v17 = (char *)v16;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceMonitorWifi::addFence(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, BOOL)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  if (*((_DWORD *)a2 + 46) == -1)
    sub_101929414();
  *(_QWORD *)buf = a2;
  *((_BYTE *)sub_100D74404((uint64_t **)(a1 + 248), (unsigned __int8 *)a2, (uint64_t)&unk_101B9EB60, (__int128 **)buf)
  + 280) = a3;
  sub_100D70BD4(a1, a4);
  sub_100D7056C((_QWORD *)a1);
  return 1;
}

void sub_100D70BD4(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  int v18;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102183140);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a1 + 312);
    v6 = *(_DWORD *)(a1 + 320);
    *(_DWORD *)buf = 134349312;
    v16 = v5;
    v17 = 1026;
    v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: resetConsecutiveExits start, %{public}.1lf, count, %{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102183140);
    v7 = *(_QWORD *)(a1 + 312);
    v8 = *(_DWORD *)(a1 + 320);
    v11 = 134349312;
    v12 = v7;
    v13 = 1026;
    v14 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: resetConsecutiveExits start, %{public}.1lf, count, %{public}d", &v11, 18);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::resetConsecutiveExits(const CFAbsoluteTime)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  *(double *)(a1 + 312) = a2;
  *(_DWORD *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 324) = 0;
}

uint64_t sub_100D70DBC(uint64_t a1, unsigned __int8 *a2, double a3)
{
  NSObject *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v10;
  uint64_t *v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  uint64_t *v15;
  __int16 v16;
  uint64_t *v17;
  uint8_t buf[4];
  uint64_t *v19;
  __int16 v20;
  uint64_t *v21;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102183140);
  v6 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    if ((a2[23] & 0x80u) == 0)
      v7 = (uint64_t *)a2;
    else
      v7 = *(uint64_t **)a2;
    if ((a2[47] & 0x80u) == 0)
      v8 = (uint64_t *)(a2 + 24);
    else
      v8 = (uint64_t *)*((_QWORD *)a2 + 3);
    *(_DWORD *)buf = 136380931;
    v19 = v7;
    v20 = 2081;
    v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Fence: Stopping monitoring for %{private}s/%{private}s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102183140);
    if ((a2[23] & 0x80u) == 0)
      v10 = (uint64_t *)a2;
    else
      v10 = *(uint64_t **)a2;
    if ((a2[47] & 0x80u) == 0)
      v11 = (uint64_t *)(a2 + 24);
    else
      v11 = (uint64_t *)*((_QWORD *)a2 + 3);
    v14 = 136380931;
    v15 = v10;
    v16 = 2081;
    v17 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: Stopping monitoring for %{private}s/%{private}s", &v14, 22);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceMonitorWifi::removeFence(const CFAbsoluteTime, const CLFenceManager_Type::Fence &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  sub_100D74560((uint64_t **)(a1 + 248), a2);
  sub_100D70BD4(a1, a3);
  sub_100D7056C((_QWORD *)a1);
  return 1;
}

uint64_t sub_100D70FF8(_QWORD *a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  uint64_t *v17;
  __int16 v18;
  uint64_t *v19;
  uint8_t buf[4];
  uint64_t *v21;
  __int16 v22;
  uint64_t *v23;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102183140);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a2 + 23) >= 0)
      v5 = a2;
    else
      v5 = (uint64_t *)*a2;
    if (*((char *)a2 + 47) >= 0)
      v6 = a2 + 3;
    else
      v6 = (uint64_t *)a2[3];
    *(_DWORD *)buf = 136380931;
    v21 = v5;
    v22 = 2081;
    v23 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Fence: Got monitoring data changed for %{private}s/%{private}s; recalculating",
      buf,
      0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102183140);
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    v9 = *((char *)a2 + 47);
    v12 = (uint64_t *)a2[3];
    v11 = a2 + 3;
    v10 = v12;
    if (v9 >= 0)
      v13 = v11;
    else
      v13 = v10;
    v16 = 136380931;
    v17 = v8;
    v18 = 2081;
    v19 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: Got monitoring data changed for %{private}s/%{private}s; recalculating",
      &v16,
      22);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::handleMonitoringDataChanged(const CLFenceManager_Type::Fence &)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  return sub_100D7056C(a1);
}

void sub_100D71208(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, signed int a7, _BYTE *a8)
{
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double v21;
  _QWORD *v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26[3];
  char v27;
  _OWORD v28[8];
  _OWORD v29[2];
  _QWORD v30[3];
  _QWORD *v31;

  v16 = *(_OWORD *)(a1 + 13);
  v17 = *(_OWORD *)(a1 + 17);
  v28[7] = *(_OWORD *)(a1 + 15);
  v29[0] = v17;
  *(_OWORD *)((char *)v29 + 12) = *(_OWORD *)((char *)a1 + 148);
  v18 = *(_OWORD *)(a1 + 5);
  v19 = *(_OWORD *)(a1 + 9);
  v28[3] = *(_OWORD *)(a1 + 7);
  v28[4] = v19;
  v28[5] = *(_OWORD *)(a1 + 11);
  v28[6] = v16;
  v20 = *(_OWORD *)(a1 + 3);
  v28[0] = *(_OWORD *)(a1 + 1);
  v28[1] = v20;
  v28[2] = v18;
  v21 = sub_10016CFDC((uint64_t)v28);
  v22 = (_QWORD *)a1[27];
  v23 = (*(uint64_t (**)(_QWORD, double))(*(_QWORD *)*a1 + 24))(*a1, v21);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)*a1 + 32))(v26);
  v30[0] = off_102183170;
  v30[1] = a1;
  v31 = v30;
  sub_101446ADC(v22, a2, a3, v23, (uint64_t)v26, (uint64_t)v28, a4, a5, a6, a7, a8, (uint64_t)v30);
  v24 = v31;
  if (v31 == v30)
  {
    v25 = 4;
    v24 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_6:
  if (v27 < 0)
    operator delete(v26[1]);
}

void sub_100D7138C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a6);
  v9 = *(_QWORD **)(v7 - 112);
  if (v9 == v6)
  {
    v10 = 4;
    v9 = (_QWORD *)(v7 - 136);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  sub_1019295E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D713D4(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;

  v3 = sub_10016FC40(a1 + 272, a2);
  if (a1 + 280 == v3)
    return 0;
  else
    return *(unsigned int *)(v3 + 280);
}

uint64_t sub_100D71410(uint64_t a1)
{
  return *(unsigned int *)(a1 + 240);
}

void sub_100D71418(_QWORD *a1, double a2)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  _BOOL4 v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  NSObject *v19;
  int v20;
  int v21;
  const char *v22;
  uint64_t v23;
  signed int v24;
  uint64_t v25;
  signed int v26;
  NSObject *v27;
  int v28;
  int v29;
  double v30;
  unsigned int v31;
  NSObject *v32;
  int v33;
  char v34;
  NSObject *v35;
  int v36;
  double v37;
  NSObject *v38;
  uint64_t v39;
  unsigned int v40;
  BOOL v41;
  NSObject *v42;
  NSObject *v43;
  NSObject *v44;
  uint64_t v45;
  NSObject *v46;
  int v47;
  const char *v48;
  uint8_t *v49;
  int v50;
  int v51;
  const char *v52;
  uint8_t *v53;
  const char *v54;
  uint8_t *v55;
  const char *v56;
  uint8_t *v57;
  const char *v58;
  uint8_t *v59;
  const char *v60;
  uint8_t *v61;
  const char *v62;
  uint8_t *v63;
  const char *v64;
  uint8_t *v65;
  int v66;
  const char *v67;
  uint8_t *v68;
  const char *v69;
  uint8_t *v70;
  int v71;
  const char *v72;
  uint8_t *v73;
  uint64_t v74;
  _QWORD v75[3];
  _QWORD v76[3];
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  _BYTE v86[12];
  __int16 v87;
  _BYTE v88[10];
  uint8_t buf[1640];

  v85 = 0;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v77 = 0uLL;
  v78 = 0;
  v4 = a1[33];
  if (!*((_BYTE *)a1 + 233))
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102183140);
    v11 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Fence: isWifiTrackingAvailable is false", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_65;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102183140);
    *(_WORD *)v86 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: isWifiTrackingAvailable is false", v86, 2);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::recalculateNow(const CFAbsoluteTime)", "%s\n", v12);
LABEL_60:
    if (v13 != buf)
      free(v13);
    goto LABEL_65;
  }
  (*(void (**)(void))(*(_QWORD *)*a1 + 40))();
  sub_100D743BC((uint64_t)(a1 + 34), (_QWORD *)a1[35]);
  a1[35] = 0;
  a1[36] = 0;
  a1[34] = a1 + 35;
  *((_DWORD *)a1 + 60) = 0;
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102183140);
  v5 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v6 = *((unsigned __int8 *)a1 + 234);
    v7 = *((unsigned __int8 *)a1 + 235);
    *(_DWORD *)buf = 134284033;
    *(_QWORD *)&buf[4] = v4;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v6;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Fence: Recalculating monitored WiFis for %{private}ld monitored fences, %{public}d,%{public}d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102183140);
    v50 = *((unsigned __int8 *)a1 + 234);
    v51 = *((unsigned __int8 *)a1 + 235);
    *(_DWORD *)v86 = 134284033;
    *(_QWORD *)&v86[4] = v4;
    v87 = 1026;
    *(_DWORD *)v88 = v50;
    *(_WORD *)&v88[4] = 1026;
    *(_DWORD *)&v88[6] = v51;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: Recalculating monitored WiFis for %{private}ld monitored fences, %{public}d,%{public}d", v86, 24);
    v53 = (uint8_t *)v52;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::recalculateNow(const CFAbsoluteTime)", "%s\n", v52);
    if (v53 != buf)
      free(v53);
  }
  sub_1012A28FC((uint64_t)(a1 + 21), (uint64_t *)buf, a2, 120.0);
  sub_1000ADC24((uint64_t *)&v77);
  v77 = *(_OWORD *)buf;
  v78 = *(_QWORD *)&buf[16];
  memset(buf, 0, 24);
  *(_QWORD *)v86 = buf;
  sub_100279AA4((void ***)v86);
  if ((_QWORD)v77 == *((_QWORD *)&v77 + 1))
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102183140);
    v8 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Fence: No visible APs to use for fence calculation", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102183140);
      *(_WORD *)v86 = 0;
      LODWORD(v74) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: No visible APs to use for fence calculation", v86, v74);
      v65 = (uint8_t *)v64;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::recalculateNow(const CFAbsoluteTime)", "%s\n", v64);
      if (v65 != buf)
        free(v65);
    }
    (*(void (**)(_QWORD, const char *, uint64_t, double))(*(_QWORD *)*a1 + 96))(*a1, "refreshVisible", 1, a2);
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102183140);
  v9 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134283521;
    *(_QWORD *)&buf[4] = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)&v77 + 1) - v77) >> 3);
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Fence: Including %{private}ld visible APs in fence calculation", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102183140);
    *(_DWORD *)v86 = 134283521;
    *(_QWORD *)&v86[4] = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)&v77 + 1) - v77) >> 3);
    LODWORD(v74) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: Including %{private}ld visible APs in fence calculation", v86, v74);
    v55 = (uint8_t *)v54;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::recalculateNow(const CFAbsoluteTime)", "%s\n", v54);
    if (v55 != buf)
      free(v55);
  }
  if (*((_BYTE *)sub_10108CC94() + 48))
    v10 = sub_1004CF2B4((double *)a1 + 42, a2);
  else
    v10 = 1;
  if (*((_BYTE *)a1 + 234) || !v4 || !v10)
  {
    if (v10)
      v18 = 2;
    else
      v18 = 0;
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102183140);
    v19 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, (os_log_type_t)v18))
    {
      v20 = *((unsigned __int8 *)a1 + 234);
      *(_DWORD *)buf = 134284033;
      *(_QWORD *)&buf[4] = v4;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v20;
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v10;
      _os_log_impl((void *)&_mh_execute_header, v19, (os_log_type_t)v18, "Fence: avoid fence calculateAPsForFences, numOfFences, %{private}lu, airplane, %{public}d, ePNO allowed by rate limiter, %{public}d", buf, 0x18u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_65;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102183140);
    v21 = *((unsigned __int8 *)a1 + 234);
    *(_DWORD *)v86 = 134284033;
    *(_QWORD *)&v86[4] = v4;
    v87 = 1026;
    *(_DWORD *)v88 = v21;
    *(_WORD *)&v88[4] = 1026;
    *(_DWORD *)&v88[6] = v10;
    LODWORD(v74) = 24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, v18, "Fence: avoid fence calculateAPsForFences, numOfFences, %{private}lu, airplane, %{public}d, ePNO allowed by rate limiter, %{public}d", v86, v74);
    v13 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::recalculateNow(const CFAbsoluteTime)", "%s\n", v22);
    goto LABEL_60;
  }
  if (*((_BYTE *)a1 + 235) && (sub_100197040(), sub_100195F08()))
  {
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&buf[16] = 0;
    *(_QWORD *)buf = &buf[8];
    v14 = (unsigned __int8 *)a1[31];
    if (v14 != (unsigned __int8 *)(a1 + 32))
    {
      while (*((_QWORD *)v14 + 33) == *((_QWORD *)v14 + 32))
      {
        if ((_os_feature_enabled_impl("CoreLocation", "cl_fence_handoff") & 1) == 0)
        {
          v15 = 64;
LABEL_40:
          if ((*((_QWORD *)v14 + 24) & v15) != 0)
            sub_100D7467C((uint64_t **)buf, v14 + 32, (uint64_t)(v14 + 32));
        }
        v16 = (unsigned __int8 *)*((_QWORD *)v14 + 1);
        if (v16)
        {
          do
          {
            v17 = v16;
            v16 = *(unsigned __int8 **)v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (unsigned __int8 *)*((_QWORD *)v14 + 2);
            v41 = *(_QWORD *)v17 == (_QWORD)v14;
            v14 = v17;
          }
          while (!v41);
        }
        v14 = v17;
        if (v17 == (unsigned __int8 *)(a1 + 32))
        {
          v4 = *(_QWORD *)&buf[16];
          goto LABEL_64;
        }
      }
      v15 = 8;
      goto LABEL_40;
    }
    v4 = 0;
LABEL_64:
    v25 = sub_100197040();
    v26 = sub_10075E0FC(v25);
    sub_100D71208(a1, buf, (uint64_t)(a1 + 34), &v82, &v79, (uint64_t *)&v77, v26, &v85);
    sub_100D742F4((uint64_t)buf, *(_QWORD **)&buf[8]);
  }
  else
  {
    v23 = sub_100197040();
    v24 = sub_10075E0FC(v23);
    sub_100D71208(a1, a1 + 31, (uint64_t)(a1 + 34), &v82, &v79, (uint64_t *)&v77, v24, &v85);
  }
LABEL_65:
  if ((_QWORD)v77 == *((_QWORD *)&v77 + 1) && v4 && !*((_BYTE *)a1 + 234))
    v85 = 1;
  *((_BYTE *)a1 + 296) = v85;
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102183140);
  v27 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v28 = *((unsigned __int8 *)a1 + 296);
    *(_DWORD *)buf = 67174657;
    *(_DWORD *)&buf[4] = v28;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "Fence: fIsContinuousMonitoringNeeded, %{private}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102183140);
    v47 = *((unsigned __int8 *)a1 + 296);
    *(_DWORD *)v86 = 67174657;
    *(_DWORD *)&v86[4] = v47;
    LODWORD(v74) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: fIsContinuousMonitoringNeeded, %{private}d", v86, v74);
    v49 = (uint8_t *)v48;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::recalculateNow(const CFAbsoluteTime)", "%s\n", v48);
    if (v49 != buf)
      free(v49);
  }
  if (*((_BYTE *)a1 + 233))
  {
    if (v79 == v80)
    {
      v29 = 2;
    }
    else
    {
      v29 = 2;
      if ((_QWORD)v77 == *((_QWORD *)&v77 + 1))
      {
        if (*((_BYTE *)a1 + 234))
          v29 = 2;
        else
          v29 = 6;
      }
    }
    v30 = *((double *)a1 + 39);
    v31 = *((_DWORD *)a1 + 80);
    if (v79 == v80 || v31 > 1)
    {
      if (!*((_BYTE *)a1 + 237))
      {
LABEL_98:
        if (*((_BYTE *)a1 + 324))
        {
          v37 = a2 - v30;
          if (v37 >= 3600.0)
          {
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_102183140);
            v38 = qword_1022A0068;
            if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134283777;
              *(double *)&buf[4] = v37;
              *(_WORD *)&buf[12] = 2049;
              *(_QWORD *)&buf[14] = 0x40AC200000000000;
              _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "Fence: exit sequence is too long, reset, sinceSequenceStart, %{private}.1lf, %{private}.1lf", buf, 0x16u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0060 != -1)
                dispatch_once(&qword_1022A0060, &stru_102183140);
              *(_DWORD *)v86 = 134283777;
              *(double *)&v86[4] = v37;
              v87 = 2049;
              *(_QWORD *)v88 = 0x40AC200000000000;
              LODWORD(v74) = 22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: exit sequence is too long, reset, sinceSequenceStart, %{private}.1lf, %{private}.1lf", v86, v74);
              v70 = (uint8_t *)v69;
              sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::recalculateNow(const CFAbsoluteTime)", "%s\n", v69);
              if (v70 != buf)
                free(v70);
            }
            sub_100D70BD4((uint64_t)a1, a2);
          }
          else if (v37 >= (double)(v29 + v31 - 1) * 45.0 + -10.0)
          {
            v29 += *((_DWORD *)a1 + 80);
          }
        }
        if (*((_BYTE *)a1 + 234))
        {
          v39 = 0;
        }
        else
        {
          if (v29 >= 10)
            v40 = 10;
          else
            v40 = v29;
          if (v4)
            v41 = 1;
          else
            v41 = *((_BYTE *)a1 + 235) == 0;
          if (v41)
            v39 = v40;
          else
            v39 = 0;
        }
        *((_BYTE *)a1 + 324) = 0;
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102183140);
        v42 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67174657;
          *(_DWORD *)&buf[4] = v39;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "Fence: Setting %{private}d background exit scan count", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_102183140);
          *(_DWORD *)v86 = 67174657;
          *(_DWORD *)&v86[4] = v39;
          LODWORD(v74) = 8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: Setting %{private}d background exit scan count", v86, v74);
          v57 = (uint8_t *)v56;
          sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::recalculateNow(const CFAbsoluteTime)", "%s\n", v56);
          if (v57 != buf)
            free(v57);
        }
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102183140);
        v43 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134283521;
          *(_QWORD *)&buf[4] = 0x2E8BA2E8BA2E8BA3 * ((v83 - v82) >> 3);
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "Fence: Setting %{private}ld background scan entry networks", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_102183140);
          *(_DWORD *)v86 = 134283521;
          *(_QWORD *)&v86[4] = 0x2E8BA2E8BA2E8BA3 * ((v83 - v82) >> 3);
          LODWORD(v74) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: Setting %{private}ld background scan entry networks", v86, v74);
          v59 = (uint8_t *)v58;
          sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::recalculateNow(const CFAbsoluteTime)", "%s\n", v58);
          if (v59 != buf)
            free(v59);
        }
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102183140);
        v44 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134283521;
          *(_QWORD *)&buf[4] = 0x2E8BA2E8BA2E8BA3 * ((v80 - v79) >> 3);
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "Fence: Setting %{private}ld background scan exit networks", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_102183140);
          *(_DWORD *)v86 = 134283521;
          *(_QWORD *)&v86[4] = 0x2E8BA2E8BA2E8BA3 * ((v80 - v79) >> 3);
          LODWORD(v74) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: Setting %{private}ld background scan exit networks", v86, v74);
          v61 = (uint8_t *)v60;
          sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::recalculateNow(const CFAbsoluteTime)", "%s\n", v60);
          if (v61 != buf)
            free(v61);
        }
        *((_DWORD *)a1 + 60) = -1171354717 * ((unint64_t)(v83 - v82) >> 3)
                             - 1171354717 * ((unint64_t)(v80 - v79) >> 3);
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 56))(*a1, v39);
        v45 = *a1;
        memset(v76, 0, sizeof(v76));
        sub_10055A7B8(v76, v82, v83, 0x2E8BA2E8BA2E8BA3 * ((v83 - v82) >> 3));
        memset(v75, 0, sizeof(v75));
        sub_10055A7B8(v75, v79, v80, 0x2E8BA2E8BA2E8BA3 * ((v80 - v79) >> 3));
        (*(void (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v45 + 48))(v45, v76, v75);
        *(_QWORD *)buf = v75;
        sub_100279AA4((void ***)buf);
        *(_QWORD *)buf = v76;
        sub_100279AA4((void ***)buf);
        goto LABEL_135;
      }
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102183140);
      v35 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        v36 = *((_DWORD *)a1 + 80);
        *(_DWORD *)buf = 67174657;
        *(_DWORD *)&buf[4] = v36;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "Fence: considered not in leash, %{private}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102183140);
        v66 = *((_DWORD *)a1 + 80);
        *(_DWORD *)v86 = 67174657;
        *(_DWORD *)&v86[4] = v66;
        LODWORD(v74) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: considered not in leash, %{private}d", v86, v74);
        v68 = (uint8_t *)v67;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::recalculateNow(const CFAbsoluteTime)", "%s\n", v67);
        if (v68 != buf)
          free(v68);
      }
      v34 = 0;
    }
    else
    {
      if (!*((_BYTE *)a1 + 237))
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102183140);
        v32 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          v33 = *((_DWORD *)a1 + 80);
          *(_DWORD *)buf = 67174657;
          *(_DWORD *)&buf[4] = v33;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "Fence: considered in leash, %{private}d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_102183140);
          v71 = *((_DWORD *)a1 + 80);
          *(_DWORD *)v86 = 67174657;
          *(_DWORD *)&v86[4] = v71;
          LODWORD(v74) = 8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: considered in leash, %{private}d", v86, v74);
          v73 = (uint8_t *)v72;
          sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::recalculateNow(const CFAbsoluteTime)", "%s\n", v72);
          if (v73 != buf)
            free(v73);
        }
      }
      v34 = 1;
    }
    *((_BYTE *)a1 + 237) = v34;
    goto LABEL_98;
  }
LABEL_135:
  *(_WORD *)((char *)a1 + 297) = 0;
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 80))(*a1))
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102183140);
    v46 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "Fence: recalculate, release power assertion", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102183140);
      *(_WORD *)v86 = 0;
      LODWORD(v74) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: recalculate, release power assertion", v86, v74);
      v63 = (uint8_t *)v62;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::recalculateNow(const CFAbsoluteTime)", "%s\n", v62);
      if (v63 != buf)
        free(v63);
    }
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 72))(*a1);
  }
  (*(void (**)(_QWORD, double))(*(_QWORD *)*a1 + 136))(*a1, a2);
  *(_QWORD *)buf = &v77;
  sub_100279AA4((void ***)buf);
  *(_QWORD *)buf = &v79;
  sub_100279AA4((void ***)buf);
  *(_QWORD *)buf = &v82;
  sub_100279AA4((void ***)buf);
}

void sub_100D72A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31)
{
  a31 = (void **)&a17;
  sub_100279AA4(&a31);
  a31 = (void **)&a20;
  sub_100279AA4(&a31);
  a31 = (void **)&a23;
  sub_100279AA4(&a31);
  _Unwind_Resume(a1);
}

void sub_100D72B50(_BYTE *a1, int a2, double a3)
{
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  uint64_t v12;
  _DWORD v13[4];
  uint8_t buf[4];
  int v15;

  if (a1[234] || !a1[232])
  {
    sub_100231BE8((uint64_t)(a1 + 168));
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102183140);
    v6 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67240192;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Fence: Got kNotificationPower, isWifiPowered, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102183140);
      v13[0] = 67240192;
      v13[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: Got kNotificationPower, isWifiPowered, %{public}d", v13, 8);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::handleWifiPower(const CFAbsoluteTime, BOOL)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    if ((a2 & 1) == 0 && a1[237])
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102183140);
      v7 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Fence: considered not in leash, power", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102183140);
        LOWORD(v13[0]) = 0;
        LODWORD(v12) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: considered not in leash, power", v13, v12);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::handleWifiPower(const CFAbsoluteTime, BOOL)", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
      a1[237] = 0;
    }
    (*(void (**)(_QWORD, const char *, uint64_t, double))(**(_QWORD **)a1 + 96))(*(_QWORD *)a1, "power", 1, a3);
  }
}

void sub_100D72EB4(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102183140);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67174657;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: Got kNotificationWow, WoW, %{private}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102183140);
    v7[0] = 67174657;
    v7[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: Got kNotificationWow, WoW, %{private}d", v7, 8);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::handleWifiWow(BOOL)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  *(_BYTE *)(a1 + 236) = a2;
}

void sub_100D73064(uint64_t a1, double a2)
{
  *(double *)(a1 + 392) = a2;
  sub_100D70BD4(a1, a2);
}

void sub_100D7306C(double *a1, double a2)
{
  char v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  NSObject *v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  int v18;
  const char *v19;
  uint8_t buf[4];
  const char *v21;

  if (*((_BYTE *)sub_10108CC94() + 48))
    v4 = sub_1004CF1F4((uint64_t)(a1 + 42), a2);
  else
    v4 = 1;
  if (*((_BYTE *)a1 + 234) || !*((_BYTE *)a1 + 232))
  {
    sub_100231BE8((uint64_t)(a1 + 21));
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102183140);
    v5 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136380675;
      v21 = "kNotificationBackgroundExit";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Fence: Got WiFi %{private}s, sending kNotificationTriggerReceived", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102183140);
      v18 = 136380675;
      v19 = "kNotificationBackgroundExit";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: Got WiFi %{private}s, sending kNotificationTriggerReceived", &v18, 12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::handleWifiBackgroundExit(const CFAbsoluteTime)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    sub_100D735A8(a1, v4, (uint64_t)"kNotificationBackgroundExit");
    if ((v4 & 1) == 0)
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102183140);
      v6 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136380675;
        v21 = "kNotificationBackgroundExit";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Fence: Clearing ePNO networks (rate limited): %{private}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102183140);
        v18 = 136380675;
        v19 = "kNotificationBackgroundExit";
        LODWORD(v17) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: Clearing ePNO networks (rate limited): %{private}s", &v18, v17);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::handleWifiBackgroundExit(const CFAbsoluteTime)", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
      (*(void (**)(_QWORD))(**(_QWORD **)a1 + 40))(*(_QWORD *)a1);
    }
    a1[47] = a2;
    v7 = *((_DWORD *)a1 + 80);
    *((_DWORD *)a1 + 80) = v7 + 1;
    *((_BYTE *)a1 + 324) = 1;
    if (v7)
    {
      if ((v7 + 1) >= 2 && *((_BYTE *)a1 + 237))
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102183140);
        v8 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          v9 = *((_DWORD *)a1 + 80);
          *(_DWORD *)buf = 67174657;
          LODWORD(v21) = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Fence: considered not in leash, exit, %{private}d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_102183140);
          v14 = *((_DWORD *)a1 + 80);
          v18 = 67174657;
          LODWORD(v19) = v14;
          LODWORD(v17) = 8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: considered not in leash, exit, %{private}d", &v18, v17);
          v16 = (uint8_t *)v15;
          sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::handleWifiBackgroundExit(const CFAbsoluteTime)", "%s\n", v15);
          if (v16 != buf)
            free(v16);
        }
        *((_BYTE *)a1 + 237) = 0;
      }
    }
    else
    {
      a1[39] = a2;
    }
    (*(void (**)(_QWORD, double))(**(_QWORD **)a1 + 112))(*(_QWORD *)a1, a2);
  }
}

void sub_100D735A8(_QWORD *a1, char a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  NSObject *v13;
  int v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  __int16 v22;
  _BOOL4 v23;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  int v27;
  __int16 v28;
  _BOOL4 v29;

  v5 = a1[33];
  if (*((_BYTE *)a1 + 233))
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102183140);
    v7 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v8 = *((unsigned __int8 *)a1 + 234);
      *(_DWORD *)buf = 136381187;
      v25 = a3;
      v26 = 1025;
      v27 = v8;
      v28 = 1025;
      v29 = v5 != 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Fence: power assertion not needed, reason, %{private}s, airplane, %{private}d, isMonitoringFences, %{private}d", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102183140);
      v9 = *((unsigned __int8 *)a1 + 234);
      v18 = 136381187;
      v19 = a3;
      v20 = 1025;
      v21 = v9;
      v22 = 1025;
      v23 = v5 != 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: power assertion not needed, reason, %{private}s, airplane, %{private}d, isMonitoringFences, %{private}d", &v18, 24);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::takePowerAssertionIfNeeded(BOOL, const char *)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102183140);
    v13 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
    {
      v14 = *((unsigned __int8 *)a1 + 234);
      *(_DWORD *)buf = 136380931;
      v25 = a3;
      v26 = 1025;
      v27 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Fence: take power assertion, reason, %{private}s, airplane, %{private}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102183140);
      v15 = *((unsigned __int8 *)a1 + 234);
      v18 = 136380931;
      v19 = a3;
      v20 = 1025;
      v21 = v15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: take power assertion, reason, %{private}s, airplane, %{private}d", &v18, 18);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::takePowerAssertionIfNeeded(BOOL, const char *)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    if (!*((_BYTE *)a1 + 234))
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 64))(*a1, a3);
    *((_BYTE *)a1 + 297) = a2;
  }
}

void sub_100D73934(double *a1, double a2)
{
  char v4;
  NSObject *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  int v12;
  const char *v13;
  uint8_t buf[4];
  const char *v15;

  if (*((_BYTE *)sub_10108CC94() + 48))
    v4 = sub_1004CF1F4((uint64_t)(a1 + 42), a2);
  else
    v4 = 1;
  if (*((_BYTE *)a1 + 234) || !*((_BYTE *)a1 + 232))
  {
    sub_100231BE8((uint64_t)(a1 + 21));
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102183140);
    v5 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136380675;
      v15 = "kNotificationBackgroundEntry";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Fence: Got WiFi %{private}s, sending kNotificationTriggerReceived", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102183140);
      v12 = 136380675;
      v13 = "kNotificationBackgroundEntry";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: Got WiFi %{private}s, sending kNotificationTriggerReceived", &v12, 12);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::handleWifiBackgroundEntry(const CFAbsoluteTime)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    sub_100D735A8(a1, v4, (uint64_t)"kNotificationBackgroundEntry");
    if ((v4 & 1) == 0)
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102183140);
      v6 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136380675;
        v15 = "kNotificationBackgroundEntry";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Fence: Clearing ePNO networks (rate limited): %{private}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102183140);
        v12 = 136380675;
        v13 = "kNotificationBackgroundEntry";
        LODWORD(v11) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: Clearing ePNO networks (rate limited): %{private}s", &v12, v11);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::handleWifiBackgroundEntry(const CFAbsoluteTime)", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
      (*(void (**)(_QWORD))(**(_QWORD **)a1 + 40))(*(_QWORD *)a1);
    }
    a1[48] = a2;
    sub_100D70BD4((uint64_t)a1, a2);
    (*(void (**)(_QWORD, double))(**(_QWORD **)a1 + 104))(*(_QWORD *)a1, a2);
  }
}

void sub_100D73D00(double *a1, int *a2, double a3)
{
  int v6;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  NSObject *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  uint64_t v32;
  int v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  uint8_t buf[4];
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;

  v6 = a2[1];
  if (*a2 == 2)
  {
    if (v6 != 2)
    {
      a1[46] = a3;
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102183140);
      v7 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        v8 = *a2;
        v9 = a2[1];
        v10 = *((unsigned __int8 *)a2 + 8);
        v11 = *((unsigned __int8 *)a2 + 9);
        *(_DWORD *)buf = 67175425;
        v42 = v8;
        v43 = 1025;
        v44 = v9;
        v45 = 1025;
        v46 = v10;
        v47 = 1025;
        v48 = v11;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Fence: WiFi just lost (from %{private}d to %{private}d); sending trigger, aboutToSleep, %{private}d, recentlyW"
          "oke, %{private}d,",
          buf,
          0x1Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102183140);
        v20 = *a2;
        v21 = a2[1];
        v22 = *((unsigned __int8 *)a2 + 8);
        v23 = *((unsigned __int8 *)a2 + 9);
        v33 = 67175425;
        v34 = v20;
        v35 = 1025;
        v36 = v21;
        v37 = 1025;
        v38 = v22;
        v39 = 1025;
        v40 = v23;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: WiFi just lost (from %{private}d to %{private}d); sending trigger, aboutToSleep, %{private}d, recentlyW"
          "oke, %{private}d,",
          &v33,
          26);
        v25 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::handleReachability(const CFAbsoluteTime, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
      if (*((_BYTE *)a2 + 8) || !*((_BYTE *)a1 + 236) && *((_BYTE *)a2 + 9))
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102183140);
        v12 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Fence: about to sleep or recently woke without WoW, ignoring, kNotificationReachability", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_102183140);
          LOWORD(v33) = 0;
          LODWORD(v32) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: about to sleep or recently woke without WoW, ignoring, kNotificationReachability", &v33, v32);
          v14 = (uint8_t *)v13;
          sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::handleReachability(const CFAbsoluteTime, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v13);
          if (v14 != buf)
            free(v14);
        }
      }
      else
      {
        sub_100D735A8(a1, 1, (uint64_t)"Disconnection");
        (*(void (**)(_QWORD, const char *, uint64_t, double))(**(_QWORD **)a1 + 96))(*(_QWORD *)a1, "disconnected", 1, a3);
        if (!*((_BYTE *)a1 + 233) && vabdd_f64(a3, a1[41]) >= 900.0)
        {
          (*(void (**)(_QWORD, double))(**(_QWORD **)a1 + 120))(*(_QWORD *)a1, a3);
          a1[41] = a3;
        }
      }
    }
  }
  else if (v6 == 2)
  {
    a1[46] = a3;
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102183140);
    v15 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v16 = *a2;
      v17 = a2[1];
      v18 = *((unsigned __int8 *)a2 + 8);
      v19 = *((unsigned __int8 *)a2 + 9);
      *(_DWORD *)buf = 67175425;
      v42 = v16;
      v43 = 1025;
      v44 = v17;
      v45 = 1025;
      v46 = v18;
      v47 = 1025;
      v48 = v19;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Fence: WiFi just connected (from %{private}d to %{private}d); sending trigger, aboutToSleep, %{private}d, recent"
        "lyWoke, %{private}d,",
        buf,
        0x1Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102183140);
      v26 = *a2;
      v27 = a2[1];
      v28 = *((unsigned __int8 *)a2 + 8);
      v29 = *((unsigned __int8 *)a2 + 9);
      v33 = 67175425;
      v34 = v26;
      v35 = 1025;
      v36 = v27;
      v37 = 1025;
      v38 = v28;
      v39 = 1025;
      v40 = v29;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: WiFi just connected (from %{private}d to %{private}d); sending trigger, aboutToSleep, %{private}d, recent"
        "lyWoke, %{private}d,",
        &v33,
        26);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::handleReachability(const CFAbsoluteTime, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
    if (!*((_BYTE *)a2 + 8))
      sub_100D735A8(a1, 1, (uint64_t)"Connection");
    (*(void (**)(_QWORD))(**(_QWORD **)a1 + 128))(*(_QWORD *)a1);
    (*(void (**)(_QWORD, const char *, uint64_t, double))(**(_QWORD **)a1 + 96))(*(_QWORD *)a1, "connected", 1, a3);
  }
}

void sub_100D742C8(id a1)
{
  qword_1022A0068 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_100D742F4(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100D742F4(a1, *a2);
    sub_100D742F4(a1, a2[1]);
    sub_100D7433C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_100D7433C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(_QWORD *)(a1 + 232) = v2;
    operator delete(v2);
  }

  if (*(char *)(a1 + 215) < 0)
    operator delete(*(void **)(a1 + 192));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_100D743BC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100D743BC(a1, *a2);
    sub_100D743BC(a1, a2[1]);
    sub_100C75660((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *sub_100D74404(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_10091CC78((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_100D744AC((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000145B0(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_100D7451C((uint64_t)v10, 0);
  }
  return v7;
}

char *sub_100D744AC@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x120uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_1004E5748(v6 + 32, *a2);
  v6[280] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100D74504(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100D7451C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100D7451C(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100D7433C((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t sub_100D74560(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)sub_10016FC40((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  sub_10008A9F0(a1, v3);
  sub_100D7433C((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

void sub_100D745BC()
{
  operator delete();
}

_QWORD *sub_100D745D0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102183170;
  result[1] = v3;
  return result;
}

uint64_t sub_100D74604(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102183170;
  a2[1] = v2;
  return result;
}

uint64_t sub_100D74620(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 144))(**(_QWORD **)(a1 + 8));
}

uint64_t sub_100D74634(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100D74670()
{
}

uint64_t *sub_100D7467C(uint64_t **a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)sub_10091CC78((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    sub_100D7470C((uint64_t)a1, a3, (uint64_t)v9);
    sub_1000145B0(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    sub_100D7451C((uint64_t)v9, 0);
  }
  return v6;
}

char *sub_100D7470C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x120uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_1004E5748(v6 + 32, (__int128 *)a2);
  v6[280] = *(_BYTE *)(a2 + 248);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100D74768(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100D7451C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100D74780(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100D747AC(sqlite3 **a1)
{
  NSObject *v2;
  NSObject *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  std::runtime_error v7;
  void *v8;
  char v9;
  void *__p;
  char v11;
  _WORD v12[8];
  uint8_t buf[1640];

  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102183210);
  v2 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "rollback #sqlitetransaction", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102183210);
    v12[0] = 0;
    v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_1022A0288, 1, "rollback #sqlitetransaction", v12, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLSqliteTransaction::rollback()", "%s\n", v4);
    if (v4 != (char *)buf)
      free(v4);
  }
  if (sqlite3_exec(*a1, "ROLLBACK TRANSACTION", 0, 0, 0))
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102183210);
    v3 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#sqlitetransaction, rollback transaction failed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102183210);
      v12[0] = 0;
      LODWORD(v6) = 2;
      v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_1022A0288, 16, "#sqlitetransaction, rollback transaction failed", v12, v6);
      sub_100512490("Generic", 1, 0, 0, "void CLSqliteTransaction::rollback()", "%s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
    sub_100D74AD8(a1, *a1, (uint64_t)&v7);
    v7.__vftable = (std::runtime_error_vtbl *)off_10214FD28;
    if (v11 < 0)
      operator delete(__p);
    if (v9 < 0)
      operator delete(v8);
    std::runtime_error::~runtime_error(&v7);
  }
}

void sub_100D74ACC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_100D74AD8(sqlite3 **a1@<X0>, sqlite3 *a2@<X1>, uint64_t a3@<X8>)
{
  int autocommit;
  int v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  int v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  int v27;

  autocommit = sqlite3_get_autocommit(*a1);
  sub_100D74E50(*a1, a3);
  v13 = *(_DWORD *)(a3 + 40);
  v7 = sqlite3_db_readonly(a2, "main");
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102183210);
  v8 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
  {
    v9 = *(char *)(a3 + 71) >= 0 ? a3 + 48 : *(_QWORD *)(a3 + 48);
    *(_DWORD *)buf = 68290307;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2082;
    v19 = v9;
    v20 = 1040;
    v21 = 4;
    v22 = 2098;
    v23 = &v13;
    v24 = 2081;
    v25 = std::runtime_error::what((const std::runtime_error *)a3);
    v26 = 1026;
    v27 = autocommit;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#sqlitetransaction error\", \"path\":%{public, location:escape_only}s, \"rc\":%{public, location:SqliteResult}.*P, \"errmsg\":%{private, location:escape_only}s, \"autocommit\":%{public}d}", buf, 0x3Cu);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102183210);
  }
  v10 = off_1022A0288;
  if (os_signpost_enabled((os_log_t)off_1022A0288))
  {
    if (*(char *)(a3 + 71) >= 0)
      v11 = a3 + 48;
    else
      v11 = *(_QWORD *)(a3 + 48);
    v12 = std::runtime_error::what((const std::runtime_error *)a3);
    *(_DWORD *)buf = 68290307;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2082;
    v19 = v11;
    v20 = 1040;
    v21 = 4;
    v22 = 2098;
    v23 = &v13;
    v24 = 2081;
    v25 = v12;
    v26 = 1026;
    v27 = autocommit;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#sqlitetransaction error", "{\"msg%{public}.0s\":\"#sqlitetransaction error\", \"path\":%{public, location:escape_only}s, \"rc\":%{public, location:SqliteResult}.*P, \"errmsg\":%{private, location:escape_only}s, \"autocommit\":%{public}d}", buf, 0x3Cu);
  }
  sub_1006361F0(a2, (a3 + 48), v7 != 0, v13);
}

void sub_100D74D64(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  sub_1006F6DDC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100D74D7C(uint64_t a1, uint64_t a2, int a3, __int128 *a4)
{
  std::runtime_error *v8;
  std::runtime_error v9;
  _BYTE *v10;
  __int128 v11;

  v8 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::string *)a2);
  v8->__vftable = (std::runtime_error_vtbl *)off_10214FD28;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100115CE4(&v8[1], *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v9 = *(std::runtime_error *)a2;
    v8[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 16);
    v8[1] = v9;
  }
  *(_DWORD *)(a1 + 40) = a3;
  v10 = (_BYTE *)(a1 + 48);
  if (*((char *)a4 + 23) < 0)
  {
    sub_100115CE4(v10, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v11 = *a4;
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a4 + 2);
    *(_OWORD *)v10 = v11;
  }
  return a1;
}

void sub_100D74E24(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  std::runtime_error::~runtime_error((std::runtime_error *)v1);
  _Unwind_Resume(a1);
}

void sub_100D74E50(sqlite3 *a1@<X0>, uint64_t a2@<X8>)
{
  const char *v4;
  char *v5;
  char *v6;
  int v7;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;

  v4 = sqlite3_db_filename(a1, "main");
  if (v4)
    v5 = (char *)v4;
  else
    v5 = "Path unavailable";
  sub_1015A2E04(v10, v5);
  v6 = (char *)sqlite3_errmsg(a1);
  sub_1015A2E04(__p, v6);
  v7 = sqlite3_errcode(a1);
  sub_100D74D7C(a2, (uint64_t)__p, v7, (__int128 *)v10);
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
}

void sub_100D74EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_100D74F20(id a1)
{
  off_1022A0288 = os_log_create("com.apple.locationd.Utility", "Database");
}

uint64_t sub_100D74F4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100B602F8(a1, a2);
  *(_QWORD *)v4 = &off_102183240;
  *(_QWORD *)(v4 + 1544) = 0x7FEFFFFFFFFFFFFFLL;
  *(_BYTE *)(v4 + 1552) = 0;
  sub_1018BEA14((unsigned __int8 *)(v4 + 1816), "SimulateSkiWorkoutInterval", &qword_101C24190, 0);
  *(_QWORD *)(a1 + 32) = a2;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_OWORD *)(a1 + 1576) = 0u;
  *(_OWORD *)(a1 + 1592) = 0u;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_OWORD *)(a1 + 1688) = 0u;
  *(_OWORD *)(a1 + 1704) = 0u;
  *(_OWORD *)(a1 + 1720) = 0u;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(_OWORD *)(a1 + 1784) = 0u;
  *(_OWORD *)(a1 + 1800) = 0u;
  return a1;
}

void sub_100D74FD8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_100B60474(v1);
  _Unwind_Resume(a1);
}

void sub_100D74FF0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double Current;
  double v5;
  int v6;
  double v7;
  double v8;
  std::random_device::result_type v9;
  unsigned int v10;
  double v11;
  double v12;
  unsigned int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint8_t *v26;
  double v27;
  unsigned int v28;
  std::random_device v29;
  int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  _DWORD v35[2];
  __int16 v36;
  int v37;
  __int16 v38;
  double v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  double v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  uint8_t buf[4];
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  double v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  double v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;

  Current = CFAbsoluteTimeGetCurrent();
  v5 = *(double *)(a1 + 1544);
  if (v5 == 1.79769313e308)
  {
    *(double *)(a1 + 1544) = Current;
    v5 = Current;
  }
  if (vabdd_f64(Current, v5) >= *(double *)(a1 + 1824))
  {
    if (*(_BYTE *)(a1 + 1552))
    {
      *(_BYTE *)(a1 + 1552) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 1552) = 1;
      sub_100B60878(a1);
    }
    *(double *)(a1 + 1544) = Current;
  }
  sub_100B60A78(a1, (uint64_t)&v30);
  v6 = v30;
  v7 = *(double *)(a1 + 1568);
  if (v7 == 0.0)
    v8 = 0.0;
  else
    v8 = Current - v7;
  sub_100D75410(&v29);
  v9 = std::random_device::operator()(&v29);
  v10 = v9 + ((v9 / 0x7FFFFFFF) | ((v9 / 0x7FFFFFFF) << 31));
  if (v10 <= 1)
    v10 = 1;
  v28 = v10;
  v11 = sub_100D754D4(&v28) * 20.0 + 40.0;
  v12 = sub_100D754D4(&v28) * 8.0 + 5.0;
  *(double *)(a1 + 1568) = Current;
  *(double *)(a1 + 1624) = Current;
  v13 = (v8 * v11);
  if (*(_BYTE *)(a1 + 1552))
  {
    *(_DWORD *)(a1 + 1580) += v13;
  }
  else
  {
    *(_DWORD *)(a1 + 1576) += v13;
    if (v6 == 3)
      goto LABEL_17;
  }
  sub_100B610B0(a1);
  *(double *)(a1 + 1672) = *(double *)(a1 + 1672) + v12 * v8;
  *(double *)(a1 + 1656) = v12;
  *(double *)(a1 + 1664) = v12;
  sub_100B610C8(a1);
LABEL_17:
  if (qword_10229FE20 != -1)
    dispatch_once(&qword_10229FE20, &stru_102183288);
  v14 = qword_10229FE28;
  if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_DEFAULT))
  {
    v15 = *(unsigned __int8 *)(a1 + 1552);
    v16 = *(_DWORD *)(a1 + 1576);
    v17 = *(_DWORD *)(a1 + 1580);
    v18 = *(_QWORD *)(a1 + 1672);
    v19 = *(_QWORD *)(a1 + 1656);
    *(_DWORD *)buf = 67110912;
    v51 = v15;
    v52 = 1024;
    v53 = v30;
    v54 = 2048;
    v55 = v11;
    v56 = 1024;
    v57 = v16;
    v58 = 1024;
    v59 = v17;
    v60 = 2048;
    v61 = v12;
    v62 = 2048;
    v63 = v18;
    v64 = 2048;
    v65 = v19;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "simulation, tracking, %d, state, %d, generated random vals, elevationCm, %f, totalUp, %u, totalDown, %u, odometerM, %f, totalOdo, %f, speed, %f", buf, 0x42u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_102183288);
    v20 = *(unsigned __int8 *)(a1 + 1552);
    v21 = *(_DWORD *)(a1 + 1576);
    v22 = *(_DWORD *)(a1 + 1580);
    v23 = *(_QWORD *)(a1 + 1672);
    v24 = *(_QWORD *)(a1 + 1656);
    v35[0] = 67110912;
    v35[1] = v20;
    v36 = 1024;
    v37 = v30;
    v38 = 2048;
    v39 = v11;
    v40 = 1024;
    v41 = v21;
    v42 = 1024;
    v43 = v22;
    v44 = 2048;
    v45 = v12;
    v46 = 2048;
    v47 = v23;
    v48 = 2048;
    v49 = v24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 0, "simulation, tracking, %d, state, %d, generated random vals, elevationCm, %f, totalUp, %u, totalDown, %u, odometerM, %f, totalOdo, %f, speed, %f", v35, 66, v27, v28, v30, *(double *)&v31, *((double *)&v31 + 1), *(double *)&v32);
    v26 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "virtual CLSkiController::SkiUpdate CLSkiSimulator::tick()", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  *(_DWORD *)a2 = v30;
  *(_OWORD *)(a2 + 8) = v31;
  *(_OWORD *)(a2 + 24) = v32;
  *(_OWORD *)(a2 + 40) = v33;
  *(_BYTE *)(a2 + 56) = v34;
  std::random_device::~random_device(&v29);
}

void sub_100D753E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, std::random_device a13, std::random_device a14)
{
  std::random_device::~random_device(&a13);
  _Unwind_Resume(a1);
}

std::random_device *sub_100D75410(std::random_device *a1)
{
  std::string __token;

  sub_1015A2E04(&__token, "/dev/urandom");
  std::random_device::random_device(a1, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__token.__r_.__value_.__l.__data_);
  return a1;
}

void sub_100D75464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100D75484(_QWORD *a1)
{
  sub_100B60474(a1);
  operator delete();
}

void sub_100D754A8(id a1)
{
  qword_10229FE28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Skiing");
}

double sub_100D754D4(unsigned int *a1)
{
  unsigned int v1;
  unsigned int v2;
  BOOL v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;

  v1 = 48271 * (*a1 % 0xADC8);
  v2 = 3399 * (*a1 / 0xADC8);
  v3 = v1 >= v2;
  v4 = v1 - v2;
  if (v3)
    v5 = 0;
  else
    v5 = 0x7FFFFFFF;
  v6 = v5 + v4;
  v7 = v6 - 1;
  v8 = v6 / 0xADC8;
  v9 = 48271 * (v6 % 0xADC8);
  v8 *= 3399;
  v3 = v9 >= v8;
  v10 = v9 - v8;
  if (v3)
    v11 = 0;
  else
    v11 = 0x7FFFFFFF;
  v12 = v11 + v10;
  *a1 = v12;
  return ((double)v7 + (double)(v12 - 1) * 2147483650.0) / 4.61168601e18;
}

uint64_t sub_100D75560(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, float a5)
{
  __int16 v6;
  char *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  _WORD *v12;
  uint64_t v13;
  int v14;

  *(_QWORD *)a1 = a2;
  *(_WORD *)(a1 + 8) = a3;
  *(_WORD *)(a1 + 10) = a3;
  *(_WORD *)(a1 + 36) = vcvtps_s32_f32((float)a3 / (float)a4);
  v6 = vcvtps_s32_f32((float)a3 * 0.1);
  *(_WORD *)(a1 + 38) = 1;
  *(_WORD *)(a1 + 56) = v6;
  *(_WORD *)(a1 + 58) = (2 * v6) | 1;
  *(float *)(a1 + 32) = a5;
  *(_QWORD *)(a1 + 16) = malloc_type_malloc(4 * a3, 0x100004052888210uLL);
  *(_QWORD *)(a1 + 24) = malloc_type_malloc(4 * *(__int16 *)(a1 + 58) * (unint64_t)*(unsigned __int16 *)(a1 + 36), 0xCBEF6296uLL);
  *(_QWORD *)(a1 + 48) = malloc_type_malloc(2 * *(unsigned __int16 *)(a1 + 36), 0x1000040BDFB0063uLL);
  *(_QWORD *)(a1 + 72) = malloc_type_malloc(8 * *(unsigned __int16 *)(a1 + 36), 0x100004000313F17uLL);
  v7 = (char *)malloc_type_malloc(4 * *(unsigned __int16 *)(a1 + 10), 0x100004052888210uLL);
  *(_QWORD *)(a1 + 64) = v7;
  v8 = *(unsigned __int16 *)(a1 + 10);
  if (*(_WORD *)(a1 + 10))
  {
    v9 = 0;
    v10 = *(unsigned __int16 *)(a1 + 8);
    v11 = *(__int16 *)(a1 + 56);
    v12 = v7 + 2;
    v13 = *(unsigned __int16 *)(a1 + 10);
    do
    {
      *(v12 - 1) = (v9 / v8 - v11) & ~(unsigned __int16)((int)(v9 / v8 - v11) >> 31);
      v14 = v9 / v8 + v11;
      if (v14 >= v10 - 1)
        LOWORD(v14) = v10 - 1;
      *v12 = v14;
      v12 += 2;
      v9 += v10;
      --v13;
    }
    while (v13);
  }
  *(_BYTE *)(a1 + 82) = 1;
  sub_100D756BC(a1);
  return 1;
}

void sub_100D756BC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 82))
  {
    bzero(*(void **)(a1 + 48), 2 * *(unsigned __int16 *)(a1 + 36));
    *(_WORD *)(a1 + 80) = *(_WORD *)(*(_QWORD *)(a1 + 64) + 2);
    *(_DWORD *)(a1 + 40) = 0;
  }
}

void sub_100D75700(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 56) = 0;
  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    free(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    free(v3);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v4 = *(void **)(a1 + 48);
  if (v4)
  {
    free(v4);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v5 = *(void **)(a1 + 72);
  if (v5)
  {
    free(v5);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v6 = *(void **)(a1 + 64);
  if (v6)
  {
    free(v6);
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_BYTE *)(a1 + 82) = 0;
}

void sub_100D75784(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  _QWORD *v5;

  v5 = (_QWORD *)sub_1001B5A2C(a1, a2, a3, a4, a5);
  *v5 = off_1021832B8;
  v5[6] = 0;
  sub_100539700();
}

void sub_100D75814(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_10002FA68(v1);
  _Unwind_Resume(a1);
}

void sub_100D75840(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLSedentaryTimerSubscription::onSedentaryTimerAlarm");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102183308);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSedentaryTimerSubscription::onSedentaryTimerAlarm", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102183308);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSedentaryTimerSubscription::onSedentaryTimerAlarm\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100D773C8(a4, v6, v7, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100D759F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D75A14(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1021832B8;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = a1[6];
    a1[6] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return sub_10002FA68((uint64_t)a1);
}

void sub_100D75A74(_QWORD *a1)
{
  sub_100D75A14(a1);
  operator delete();
}

_QWORD *sub_100D75A98@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t (***v13)();
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  _QWORD v19[3];
  _QWORD *v20;
  _QWORD v21[3];
  _QWORD *v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t (**v25)();
  _QWORD v26[2];
  uint64_t (***v27)();
  _QWORD v28[3];
  _QWORD *v29;
  _QWORD v30[3];
  uint64_t v31;
  _QWORD v32[3];
  uint64_t v33;
  _QWORD v34[3];
  uint64_t v35;
  _QWORD v36[3];
  uint64_t v37;
  _QWORD v38[3];
  uint64_t v39;
  _QWORD v40[3];
  uint64_t v41;

  v28[0] = off_102183358;
  v28[1] = sub_100D75F9C;
  v28[2] = 0;
  v29 = v28;
  sub_1015A2E04(v30, "kCLConnectionMessageSedentaryTimerAlarm");
  sub_100BB5B9C((uint64_t)&v31, (uint64_t)v28);
  v25 = off_102183408;
  v26[0] = sub_100D76274;
  v26[1] = 0;
  v27 = &v25;
  sub_1015A2E04(v32, "kCLConnectionMessageSedentaryTimerIsAvailable");
  sub_100BB5B9C((uint64_t)&v33, (uint64_t)&v25);
  v23[0] = off_102183408;
  v23[1] = sub_100D76374;
  v23[2] = 0;
  v24 = v23;
  sub_1015A2E04(v34, "kCLConnectionMessageSedentaryTimerIsArmed");
  sub_100BB5B9C((uint64_t)&v35, (uint64_t)v23);
  v21[0] = off_102183408;
  v21[1] = sub_100D764CC;
  v21[2] = 0;
  v22 = v21;
  sub_1015A2E04(v36, "kCLConnectionMessageSedentaryTimerStart");
  sub_100BB5B9C((uint64_t)&v37, (uint64_t)v21);
  v19[0] = off_102183408;
  v19[1] = sub_100D76A30;
  v19[2] = 0;
  v20 = v19;
  sub_1015A2E04(v38, "kCLConnectionMessageSedentaryTimerStop");
  sub_100BB5B9C((uint64_t)&v39, (uint64_t)v19);
  v17[0] = off_102183408;
  v17[1] = sub_100D76E00;
  v17[2] = 0;
  v18 = v17;
  sub_1015A2E04(v40, "kCLConnectionMessageSedentaryTimerQuery");
  sub_100BB5B9C((uint64_t)&v41, (uint64_t)v17);
  sub_100D77FAC(a1, (unsigned __int8 *)v30, 6);
  v2 = 42;
  do
  {
    v3 = (_QWORD *)v30[v2 - 1];
    if (&v28[v2] == v3)
    {
      v3 = &v28[v2];
      v4 = 4;
    }
    else
    {
      if (!v3)
        goto LABEL_7;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE((&v27)[v2]) < 0)
      operator delete((void *)v26[v2]);
    v2 -= 7;
  }
  while (v2 * 8);
  v5 = v18;
  if (v18 == v17)
  {
    v6 = 4;
    v5 = v17;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  else if (v18)
  {
    v6 = 5;
    goto LABEL_14;
  }
  v7 = v20;
  if (v20 == v19)
  {
    v8 = 4;
    v7 = v19;
LABEL_19:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  else if (v20)
  {
    v8 = 5;
    goto LABEL_19;
  }
  v9 = v22;
  if (v22 == v21)
  {
    v10 = 4;
    v9 = v21;
LABEL_24:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  else if (v22)
  {
    v10 = 5;
    goto LABEL_24;
  }
  v11 = v24;
  if (v24 == v23)
  {
    v12 = 4;
    v11 = v23;
LABEL_29:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  else if (v24)
  {
    v12 = 5;
    goto LABEL_29;
  }
  v13 = v27;
  if (v27 == &v25)
  {
    v14 = 4;
    v13 = &v25;
LABEL_34:
    (*v13)[v14]();
  }
  else if (v27)
  {
    v14 = 5;
    goto LABEL_34;
  }
  result = v29;
  if (v29 == v28)
  {
    v16 = 4;
    result = v28;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v16))();
  }
  else if (v29)
  {
    v16 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v16))();
  }
  return result;
}

void sub_100D75DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21,char a22,uint64_t a23,uint64_t a24,char *a25,char a26,uint64_t a27,uint64_t a28,char *a29,char a30,uint64_t a31,uint64_t a32,char *a33)
{
  uint64_t v33;
  uint64_t i;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;

  for (i = 280; i != -56; i -= 56)
    sub_1004E21A4(v33 + i);
  v36 = a13;
  if (a13 == &a10)
  {
    v37 = 4;
    v36 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_8;
    v37 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v36 + 8 * v37))();
LABEL_8:
  v38 = a17;
  if (a17 == &a14)
  {
    v39 = 4;
    v38 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_13;
    v39 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v38 + 8 * v39))();
LABEL_13:
  v40 = a21;
  if (a21 == &a18)
  {
    v41 = 4;
    v40 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_18;
    v41 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v40 + 8 * v41))();
LABEL_18:
  v42 = a25;
  if (a25 == &a22)
  {
    v43 = 4;
    v42 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_23;
    v43 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v42 + 8 * v43))();
LABEL_23:
  v44 = a29;
  if (a29 == &a26)
  {
    v45 = 4;
    v44 = &a26;
  }
  else
  {
    if (!a29)
      goto LABEL_28;
    v45 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v44 + 8 * v45))();
LABEL_28:
  v46 = a33;
  if (a33 == &a30)
  {
    v47 = 4;
    v46 = &a30;
  }
  else
  {
    if (!a33)
      goto LABEL_33;
    v47 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v46 + 8 * v47))();
LABEL_33:
  _Unwind_Resume(a1);
}

void sub_100D75F8C()
{
  JUMPOUT(0x100D75F2CLL);
}

void sub_100D75F9C(uint64_t a1, int a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  NSNumber *v14;
  int v15[2];
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint8_t buf[8];
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102183328);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = a2;
    v21 = 2112;
    v22 = v6;
    v23 = 2048;
    v24 = a1;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "SedentaryAlarm,subscription changed, %d, %@, %p", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102183328);
    v10 = *(_QWORD *)(a1 + 24);
    v15[0] = 67109634;
    v15[1] = a2;
    v16 = 2112;
    v17 = v10;
    v18 = 2048;
    v19 = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "SedentaryAlarm,subscription changed, %d, %@, %p", v15, 28);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLSedentaryTimerSubscription::handleRequestSedentaryTimerAlarm(BOOL, const CLNameValuePair &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v15[0] = 0;
  if ((sub_100D7794C(a1, v15) & 1) != 0)
  {
    sub_1001A638C(a1);
    v7 = *(_QWORD *)(a1 + 48);
    v9 = *(_QWORD *)(v7 + 8);
    v8 = *(void **)(v7 + 16);
    if (a2)
      objc_msgSend(v8, "register:forNotification:registrationInfo:", v9, 0, 0);
    else
      objc_msgSend(v8, "unregister:forNotification:", v9, 0);
  }
  else
  {
    v13 = CMErrorMessage;
    v14 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v15[0]);
    *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1);
    sub_100D779B0(a1, buf);
  }

}

void sub_100D76238(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100D76274(uint64_t a1, _QWORD *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSNumber *v7;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (sub_100D77738(a1))
    v5 = sub_100538564(*(_QWORD *)(a1 + 8));
  else
    v5 = 0;
  v6 = CMAvailable;
  v7 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v5);
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1);
  CLConnectionMessage::sendReply(*a2);

}

void sub_100D76348(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_10024F88C(exception_object);
}

void sub_100D76374(uint64_t a1, _QWORD *a2)
{
  id v4;
  id v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  NSNumber *v9;
  uint64_t v10;
  NSNumber *v11;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v7 = 0;
  if ((sub_100D7794C(a1, (int *)&v7) & 1) != 0)
  {
    v5 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 16), "syncgetIsTimerArmed");
    v8 = CMSedentaryTimerIsArmedKey;
    v9 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v5);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1);
    CLConnectionMessage::sendReply(*a2);
  }
  else
  {
    v6 = *a2;
    v10 = CMErrorMessage;
    v11 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v7);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1);
    CLConnectionMessage::sendReply(v6);
  }

}

void sub_100D7649C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100D764CC(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  NSObject *v5;
  uint64_t Dictionary;
  id v7;
  CLConnectionMessage *v8;
  NSObject *v9;
  CLConnectionMessage *v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  _WORD v19[8];
  int v20[4];
  uint64_t v21;
  NSNumber *v22;
  uint64_t v23;
  NSNumber *v24;
  uint64_t v25;
  NSNumber *v26;
  uint8_t buf[1640];

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102183328);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[SedentaryTimerTriage] SedentaryAlarm, handling SedentaryTimerStart message!", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102183328);
    LOWORD(v20[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "[SedentaryTimerTriage] SedentaryAlarm, handling SedentaryTimerStart message!", v20, 2);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLSedentaryTimerSubscription::handleMessageSedentaryTimerStart(std::shared_ptr<CLConnectionMessage>)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  v20[0] = 0;
  if ((sub_100D7794C(a1, v20) & 1) != 0)
  {
    Dictionary = CLConnectionMessage::getDictionary(*a2);
    if (Dictionary)
    {
      v7 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 16), "syncgetStartTimerForClient:andOptions:", objc_msgSend(*(id *)(a1 + 24), "description"), Dictionary);
      v8 = *a2;
      v21 = CMErrorMessage;
      v22 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v7);
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1);
    }
    else
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102183328);
      v11 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "SedentaryAlarm,Failed to start,nil dictionary", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102183328);
        v19[0] = 0;
        LODWORD(v18) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "SedentaryAlarm,Failed to start,nil dictionary", v19, v18);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 0, "void CLSedentaryTimerSubscription::handleMessageSedentaryTimerStart(std::shared_ptr<CLConnectionMessage>)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
      v8 = *a2;
      v23 = CMErrorMessage;
      v24 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v20[0]);
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v24, &v23, 1);
    }
    CLConnectionMessage::sendReply(v8);
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102183328);
    v9 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[SedentaryTimerTriage] SedentaryAlarm, is not qualified!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102183328);
      v19[0] = 0;
      LODWORD(v18) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "[SedentaryTimerTriage] SedentaryAlarm, is not qualified!", v19, v18);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLSedentaryTimerSubscription::handleMessageSedentaryTimerStart(std::shared_ptr<CLConnectionMessage>)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    v10 = *a2;
    v25 = CMErrorMessage;
    v26 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v20[0]);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1);
    CLConnectionMessage::sendReply(v10);
  }

}

void sub_100D769F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100D76A30(uint64_t a1, uint64_t *a2)
{
  id v4;
  NSObject *v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  _WORD v14[8];
  int v15[4];
  uint64_t v16;
  NSNumber *v17;
  uint64_t v18;
  NSNumber *v19;
  uint8_t buf[1640];

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102183328);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[SedentaryTimerTriage] SedentaryAlarm, handling SedentaryTimerStop message!", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102183328);
    LOWORD(v15[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "[SedentaryTimerTriage] SedentaryAlarm, handling SedentaryTimerStop message!", v15, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLSedentaryTimerSubscription::handleMessageSedentaryTimerStop(std::shared_ptr<CLConnectionMessage>)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  v15[0] = 0;
  if ((sub_100D7794C(a1, v15) & 1) != 0)
  {
    v6 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 16), "syncgetStopTimerForClient:", objc_msgSend(*(id *)(a1 + 24), "description"));
    v7 = *a2;
    v16 = CMErrorMessage;
    v17 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v6);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1);
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102183328);
    v8 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[SedentaryTimerTriage] SedentaryAlarm, is not qualified!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102183328);
      v14[0] = 0;
      LODWORD(v13) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "[SedentaryTimerTriage] SedentaryAlarm, is not qualified!", v14, v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLSedentaryTimerSubscription::handleMessageSedentaryTimerStop(std::shared_ptr<CLConnectionMessage>)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    v7 = *a2;
    v18 = CMErrorMessage;
    v19 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v15[0]);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1);
  }
  CLConnectionMessage::sendReply(v7);

}

void sub_100D76DCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100D76E00(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  char v5;
  CLConnectionMessage *v6;
  void *Dictionary;
  id v8;
  id v9;
  double *v10;
  double *v11;
  id v12;
  NSObject *v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  CLConnectionMessage *v17;
  CLConnectionMessage *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  const char *v24;
  uint8_t *v25;
  void *__p;
  double *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  id v31;
  int v32;
  id v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  NSNumber *v39;
  uint64_t v40;
  NSNumber *v41;
  uint8_t buf[4];
  id v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  NSNumber *v49;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v29 = 0;
  v5 = sub_100D7794C(a1, (int *)&v29);
  v6 = *a2;
  if ((v5 & 1) != 0)
  {
    Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
    if (Dictionary)
    {
      __p = 0;
      v27 = 0;
      v28 = 0;
      objc_msgSend(objc_msgSend(Dictionary, "objectForKeyedSubscript:", CMSedentaryTimerStartTimeKey), "doubleValue");
      v8 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 16), "syncgetSedentaryAlarmData:since:", &__p);
      v29 = v8;
      if ((_DWORD)v8 == 100)
      {
        v9 = objc_alloc_init((Class)NSMutableArray);
        v10 = (double *)__p;
        v11 = v27;
        if (__p != v27)
        {
          do
          {
            v12 = objc_msgSend(objc_alloc((Class)CMSedentaryTimerData), "initWithStartDate:firedDate:alarmType:didWake:", *((int *)v10 + 4), *((_BYTE *)v10 + 20) & 1, *v10, v10[1]);
            objc_msgSend(v9, "addObject:", v12);

            v10 += 4;
          }
          while (v10 != v11);
        }
        if (objc_msgSend(v9, "count"))
        {
          sub_100197040();
          if (sub_10075D288())
          {
            if (qword_10229FC70 != -1)
              dispatch_once(&qword_10229FC70, &stru_102183328);
            v13 = qword_10229FC78;
            if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
            {
              v14 = objc_msgSend(v9, "lastObject");
              v15 = *(_QWORD *)(a1 + 24);
              *(_DWORD *)buf = 138412802;
              v43 = v14;
              v44 = 2112;
              v45 = v15;
              v46 = 2048;
              v47 = a1;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%@, %@, %p", buf, 0x20u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FC70 != -1)
                dispatch_once(&qword_10229FC70, &stru_102183328);
              v21 = qword_10229FC78;
              v22 = objc_msgSend(v9, "lastObject");
              v23 = *(_QWORD *)(a1 + 24);
              v32 = 138412802;
              v33 = v22;
              v34 = 2112;
              v35 = v23;
              v36 = 2048;
              v37 = a1;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 0, "%@, %@, %p", &v32, 32);
              v25 = (uint8_t *)v24;
              sub_100512490("Generic", 1, 0, 2, "void CLSedentaryTimerSubscription::handleMessageSedentaryTimerQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v24);
              if (v25 != buf)
                free(v25);
            }
          }
        }
        v30 = CMSedentaryTimerAlarmDataKey;
        v31 = v9;
        +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1);

        CLConnectionMessage::sendReply(*a2);
      }
      else
      {
        v18 = *a2;
        v38 = CMErrorMessage;
        v39 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v8);
        +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v39, &v38, 1);
        CLConnectionMessage::sendReply(v18);
      }
      if (__p)
      {
        v27 = (double *)__p;
        operator delete(__p);
      }
    }
    else
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102183328);
      v16 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "SedentaryAlarm,Failed to query,nil dictionary", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102183328);
        LOWORD(v32) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "SedentaryAlarm,Failed to query,nil dictionary", &v32, 2);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 0, "void CLSedentaryTimerSubscription::handleMessageSedentaryTimerQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
      v17 = *a2;
      v40 = CMErrorMessage;
      v41 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v29);
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v41, &v40, 1);
      CLConnectionMessage::sendReply(v17);
    }
  }
  else
  {
    v48 = CMErrorMessage;
    v49 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v29);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v49, &v48, 1);
    CLConnectionMessage::sendReply(v6);
  }

}

void sub_100D77368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  void *v12;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_100D773C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  uint64_t v18;
  id v19;
  int v20;
  id v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  _BYTE buf[12];
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;

  v6 = objc_alloc_init((Class)NSMutableArray);
  v7 = *a4;
  v8 = a4[1];
  if (*a4 != v8)
  {
    do
    {
      v9 = objc_msgSend(objc_alloc((Class)CMSedentaryTimerData), "initWithStartDate:firedDate:alarmType:didWake:", *(int *)(v7 + 16), *(_BYTE *)(v7 + 20) & 1, *(double *)v7, *(double *)(v7 + 8));
      objc_msgSend(v6, "addObject:", v9);

      v7 += 32;
    }
    while (v7 != v8);
  }
  if (objc_msgSend(v6, "count"))
  {
    sub_100197040();
    if (sub_10075D288())
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102183328);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = objc_msgSend(v6, "lastObject");
        v12 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)buf = 138412802;
        *(_QWORD *)&buf[4] = v11;
        v27 = 2112;
        v28 = v12;
        v29 = 2048;
        v30 = a1;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%@, %@, %p", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102183328);
        v13 = qword_10229FC78;
        v14 = objc_msgSend(v6, "lastObject");
        v15 = *(_QWORD *)(a1 + 24);
        v20 = 138412802;
        v21 = v14;
        v22 = 2112;
        v23 = v15;
        v24 = 2048;
        v25 = a1;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 0, "%@, %@, %p", &v20, 32);
        v17 = (char *)v16;
        sub_100512490("Generic", 1, 0, 2, "void CLSedentaryTimerSubscription::onSedentaryTimerAlarm(int, const CLSedentaryTimerNotifier_Type::Notification &, const CLSedentaryTimerNotifier_Type::NotificationData &)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
    }
  }
  v18 = CMSedentaryTimerAlarmDataKey;
  v19 = v6;
  *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1);

  sub_100D77690(a1, buf);
}

void sub_100D77690(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(&off_102183478, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100D77724(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D77738(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v7;
  const char *v8;
  char *v9;
  int v10;
  uint64_t v11;
  _BYTE __p[12];
  char v13;

  sub_1015A2E04(__p, "com.apple.locationd.sedentary_timer");
  v2 = sub_1002255E0(a1);
  v3 = v2;
  if (v13 < 0)
  {
    operator delete(*(void **)__p);
    if ((v3 & 1) != 0)
      return v3;
  }
  else if ((v2 & 1) != 0)
  {
    return v3;
  }
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102183328);
  v4 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)__p = 138543362;
    *(_QWORD *)&__p[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning SedentaryAlarm,Failed entitlement check,%{public}@", __p, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102183328);
    v7 = *(_QWORD *)(a1 + 24);
    v10 = 138543362;
    v11 = v7;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning SedentaryAlarm,Failed entitlement check,%{public}@", &v10, 12);
    v9 = (char *)v8;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLSedentaryTimerSubscription::isEntitledForSedentaryTimer()", "%s\n", v8);
    if (v9 != __p)
      free(v9);
  }
  return v3;
}

void sub_100D77928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D7794C(uint64_t a1, int *a2)
{
  uint64_t result;
  int v5;

  if (sub_100D77738(a1))
  {
    if (sub_100538564(*(_QWORD *)(a1 + 8)))
    {
      if ((sub_1001BBC08(a1) & 1) != 0)
        return 1;
      v5 = 105;
    }
    else
    {
      v5 = 109;
    }
  }
  else
  {
    v5 = 110;
  }
  result = 0;
  *a2 = v5;
  return result;
}

void sub_100D779B0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = *(_QWORD *)(a1 + 32);
  sub_1004E6BA4(&off_102183478, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v2 + 24))(v2, &v6, 0);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100D77A3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100D77A50(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100D77A7C(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

__n128 sub_100D77AA8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_102183358;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100D77AE4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102183358;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100D77B08(uint64_t a1, uint64_t a2, __int128 *a3)
{
  sub_100D77B58(a1 + 8, a2, a3);
}

uint64_t sub_100D77B10(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100D77B4C()
{
}

void sub_100D77B58(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100D77BDC(a1, a2, (CLConnectionMessage **)&v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100D77BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_1018FBC0C(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D77BDC(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  NSSet *v6;
  const __CFDictionary *DictionaryOfClasses;
  void (*v8)(_QWORD *, BOOL, uint8_t *);
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  NSObject *v12;
  BOOL v14;
  uint8_t v15[16];
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;

  v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1001C1D6C((int)v15, DictionaryOfClasses);
  v14 = 0;
  if ((sub_1001E4874((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))a1;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = (_QWORD *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0)
      v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))(*v10 + v8);
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021833C8);
    v11 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021833C8);
    }
    v12 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10011A5A8(v15);
}

void sub_100D77DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_100D77DE0(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_100D77E0C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_102183408;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100D77E48(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102183408;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100D77E6C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100D77EBC(a1 + 8, a2, a3);
}

uint64_t sub_100D77E74(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100D77EB0()
{
}

void sub_100D77EBC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, uint64_t *);
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = *a3;
  v3 = (std::__shared_weak_count *)a3[1];
  v15 = v3;
  *a3 = 0;
  a3[1] = 0;
  v5 = *(void (**)(_QWORD *, uint64_t *))a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(void (**)(_QWORD *, uint64_t *))(*v7 + v5);
  v16 = v4;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v5(v7, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_100D77F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100D77FAC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_100D78024(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_100D78010(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100D78024(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_100D782A4(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_100D7828C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100D782A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_100D78318(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100D78300(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100D78318(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100D78370(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_100D7838C(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  void *v4[2];
  char v5;
  uint64_t v6[4];
  char v7;
  void *v8;
  char v9;
  _BYTE v10[16];
  void *v11;
  char v12;
  void *__p;
  char v14;

  sub_100130938(a2, a1);
  if (*(_BYTE *)(a1 + 6448) && *(int *)(a1 + 6472) >= 1)
  {
    sub_1015A2E04(v4, "scanready");
    sub_100225558((uint64_t)v6, 4, 0, (__int128 *)v4, *(double *)(a1 + 6456));
    sub_100221BA8((uint64_t)v10, v6);
    sub_100D784BC((uint64_t)(a2 + 708), (uint64_t)v10);
    if (v14 < 0)
      operator delete(__p);
    if (v12 < 0)
      operator delete(v11);
    if (v9 < 0)
      operator delete(v8);
    if (v7 < 0)
      operator delete((void *)v6[2]);
    if (v5 < 0)
      operator delete(v4[0]);
  }
}

void sub_100D78470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;

  sub_10055A600((uint64_t)&a34);
  sub_10055A600((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  sub_10055829C(v34);
  _Unwind_Resume(a1);
}

uint64_t sub_100D784BC(uint64_t a1, uint64_t a2)
{
  int v4;
  char v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void **v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v4 = *(unsigned __int8 *)(a1 + 144);
  v5 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = a1 + 16;
  v7 = (__int128 *)(a2 + 16);
  if (v4)
  {
    if (*(char *)(a1 + 39) < 0)
      operator delete(*(void **)v6);
    v8 = *v7;
    *(_QWORD *)(v6 + 16) = *((_QWORD *)v7 + 2);
    *(_OWORD *)v6 = v8;
    *(_BYTE *)(a2 + 39) = 0;
    *(_BYTE *)(a2 + 16) = 0;
    v9 = *(_OWORD *)(a2 + 100);
    v10 = *(_OWORD *)(a2 + 88);
    v11 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v11;
    *(_OWORD *)(a1 + 88) = v10;
    *(_OWORD *)(a1 + 100) = v9;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    v12 = (void **)(a1 + 120);
    if (*(char *)(a1 + 143) < 0)
      operator delete(*v12);
    v13 = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_OWORD *)v12 = v13;
    *(_BYTE *)(a2 + 143) = 0;
    *(_BYTE *)(a2 + 120) = 0;
  }
  else
  {
    v14 = *v7;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)v6 = v14;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)v7 = 0;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    v15 = *(_OWORD *)(a2 + 72);
    v16 = *(_OWORD *)(a2 + 88);
    v17 = *(_OWORD *)(a2 + 100);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 100) = v17;
    *(_OWORD *)(a1 + 88) = v16;
    *(_OWORD *)(a1 + 72) = v15;
    v18 = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = v18;
    *(_QWORD *)(a2 + 128) = 0;
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 120) = 0;
    *(_BYTE *)(a1 + 144) = 1;
  }
  return a1;
}

void sub_100D785E8(uint64_t a1@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  void *v6[2];
  char v7;
  uint64_t v8[4];
  char v9;
  void *v10;
  char v11;
  _BYTE v12[16];
  void *v13;
  char v14;
  void *__p;
  char v16;

  sub_100130938(a3, a1);
  if (!*a2 && *(_BYTE *)(a1 + 6244))
  {
    sub_1015A2E04(v6, "emergency");
    sub_100225558((uint64_t)v8, 6, 0, (__int128 *)v6, *(double *)(a1 + 6456));
    sub_100221BA8((uint64_t)v12, v8);
    sub_100D784BC((uint64_t)(a3 + 708), (uint64_t)v12);
    if (v16 < 0)
      operator delete(__p);
    if (v14 < 0)
      operator delete(v13);
    if (v11 < 0)
      operator delete(v10);
    if (v9 < 0)
      operator delete((void *)v8[2]);
    if (v7 < 0)
      operator delete(v6[0]);
  }
}

void sub_100D786D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;

  sub_10055A600((uint64_t)&a34);
  sub_10055A600((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  sub_10055829C(v34);
  _Unwind_Resume(a1);
}

void sub_100D7871C(uint64_t a1@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  void *v6[2];
  char v7;
  uint64_t v8[4];
  char v9;
  void *v10;
  char v11;
  _BYTE v12[16];
  void *v13;
  char v14;
  void *__p;
  char v16;

  sub_100130938(a3, a1);
  if (*a2 == 1 && *(_BYTE *)(a1 + 6244))
  {
    sub_1015A2E04(v6, "emergency");
    sub_100225558((uint64_t)v8, 6, 0, (__int128 *)v6, *(double *)(a1 + 6456));
    sub_100221BA8((uint64_t)v12, v8);
    sub_100D784BC((uint64_t)(a3 + 708), (uint64_t)v12);
    if (v16 < 0)
      operator delete(__p);
    if (v14 < 0)
      operator delete(v13);
    if (v11 < 0)
      operator delete(v10);
    if (v9 < 0)
      operator delete((void *)v8[2]);
    if (v7 < 0)
      operator delete(v6[0]);
  }
}

void sub_100D78804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;

  sub_10055A600((uint64_t)&a34);
  sub_10055A600((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  sub_10055829C(v34);
  _Unwind_Resume(a1);
}

void sub_100D78850(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  _BYTE *v4;
  void *v5[2];
  char v6;
  uint64_t v7[4];
  char v8;
  void *v9;
  char v10;
  _BYTE v11[16];
  void *v12;
  char v13;
  void *__p;
  char v15;

  v4 = (_BYTE *)(a1 + 6244);
  sub_100130938(a2, a1);
  if (v4[207] && *v4)
  {
    sub_1015A2E04(v5, "emergency");
    sub_100225558((uint64_t)v7, 6, 0, (__int128 *)v5, *(double *)(a1 + 6456));
    sub_100221BA8((uint64_t)v11, v7);
    sub_100D784BC((uint64_t)(a2 + 708), (uint64_t)v11);
    if (v15 < 0)
      operator delete(__p);
    if (v13 < 0)
      operator delete(v12);
    if (v10 < 0)
      operator delete(v9);
    if (v8 < 0)
      operator delete((void *)v7[2]);
    if (v6 < 0)
      operator delete(v5[0]);
  }
}

void sub_100D78934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;

  sub_10055A600((uint64_t)&a34);
  sub_10055A600((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  sub_10055829C(v34);
  _Unwind_Resume(a1);
}

void sub_100D78980(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  _BYTE *v4;
  int v5;
  int v6;
  void *v7[2];
  char v8;
  uint64_t v9[4];
  char v10;
  void *v11;
  char v12;
  _BYTE v13[16];
  void *v14;
  char v15;
  void *__p;
  char v17;

  v4 = (_BYTE *)(a1 + 6448);
  sub_100130938(a2, a1);
  if (*v4 && *(int *)(a1 + 6472) >= 1 && v4[3] && !*(_BYTE *)(a1 + 810))
  {
    v5 = *(_DWORD *)(a1 + 6184);
    sub_1015A2E04(v7, "timer");
    if (v5 == 6)
      v6 = 6;
    else
      v6 = 4;
    sub_100225558((uint64_t)v9, v6, 0, (__int128 *)v7, *(double *)(a1 + 6456));
    sub_100221BA8((uint64_t)v13, v9);
    sub_100D784BC((uint64_t)(a2 + 708), (uint64_t)v13);
    if (v17 < 0)
      operator delete(__p);
    if (v15 < 0)
      operator delete(v14);
    if (v12 < 0)
      operator delete(v11);
    if (v10 < 0)
      operator delete((void *)v9[2]);
    if (v8 < 0)
      operator delete(v7[0]);
  }
}

void sub_100D78A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;

  sub_10055A600((uint64_t)&a34);
  sub_10055A600((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  sub_10055829C(v34);
  _Unwind_Resume(a1);
}

void sub_100D78AD0()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100D78B6C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100D78B84()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100D78C10(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_100D78C28(CFStringRef alertHeader, int a2, CFStringRef alertMessage)
{
  return CFUserNotificationDisplayNotice(0.0, 0, 0, 0, 0, alertHeader, alertMessage, 0);
}

void sub_100D78CF0(id a1)
{
  qword_1023080F8 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLGeomagneticModelProviderSilo"));
}

uint64_t sub_100D78ED8(uint64_t result)
{
  *(_BYTE *)(result + 108) = 1;
  return result;
}

_QWORD *sub_100D78EE4(uint64_t a1, void *a2)
{
  _QWORD *result;

  result = (_QWORD *)sub_100D78F10(a1, "CLGeomagneticModelProvider", a2);
  *result = off_1021834B0;
  return result;
}

uint64_t sub_100D78F10(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_102183640;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100D78F90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D78FB0(uint64_t a1)
{
  *(_QWORD *)a1 = off_102183640;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_100D7902C@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

void sub_100D790A4()
{
  operator new();
}

void sub_100D79150(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_100D7918C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_102183720;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

double sub_100D79260@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0xBFF0000000000000;
  return result;
}

void sub_100D7927C(uint64_t a1)
{
  sub_100D792CC(a1);
  operator delete();
}

void sub_100D792A0(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100D792CC(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_102183720;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

double sub_100D79334(uint64_t a1)
{
  double result;

  *(_DWORD *)(a1 + 77240) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 77224) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 100;
  *(_QWORD *)(a1 + 40) = 0x25800000000;
  *(_QWORD *)(a1 + 19248) = 0x25800000000;
  *(_QWORD *)(a1 + 38456) = 0;
  *(_DWORD *)(a1 + 38464) = 0;
  *(_QWORD *)(a1 + 38472) = 0;
  *(_QWORD *)(a1 + 38488) = 0;
  *(_DWORD *)(a1 + 38496) = 0;
  *(_OWORD *)(a1 + 38504) = 0u;
  *(_OWORD *)(a1 + 38520) = 0u;
  *(_DWORD *)(a1 + 38536) = 0;
  *(_QWORD *)(a1 + 38544) = 0x300000000;
  *(_QWORD *)(a1 + 38648) = 0x25800000000;
  *(_QWORD *)(a1 + 57856) = 0x25800000000;
  *(_DWORD *)(a1 + 77088) = 0;
  *(_QWORD *)(a1 + 77080) = 0;
  *(_OWORD *)(a1 + 77064) = 0u;
  *(_OWORD *)(a1 + 77096) = 0u;
  *(_OWORD *)(a1 + 77112) = 0u;
  *(_OWORD *)(a1 + 77128) = 0u;
  *(_OWORD *)(a1 + 77144) = 0u;
  *(_OWORD *)(a1 + 77160) = 0u;
  *(_OWORD *)(a1 + 77176) = 0u;
  *(_OWORD *)(a1 + 77192) = 0u;
  *(_OWORD *)(a1 + 77208) = 0u;
  return result;
}

uint64_t sub_100D793E0(uint64_t a1, uint64_t a2, double a3, double a4, float a5, float a6)
{
  double v9;
  uint64_t result;
  float v14;
  int v15;
  int v16;
  int *v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  int v22;
  _BOOL4 v23;
  _BOOL4 v24;
  int v25;
  _BOOL4 v26;
  _BYTE v28[32];
  int v29;
  float v30[9];

  v9 = *(double *)(a2 + 56);
  if (v9 < *(double *)(a1 + 16))
  {
    result = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_QWORD *)(a1 + 32) = 100;
    *(_DWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 19248) = 0;
    *(_QWORD *)(a1 + 38456) = 0;
    *(_DWORD *)(a1 + 38464) = 0;
    *(_QWORD *)(a1 + 38472) = 0;
    *(_QWORD *)(a1 + 38488) = 0;
    *(_DWORD *)(a1 + 38496) = 0;
    *(_OWORD *)(a1 + 38504) = 0u;
    *(_OWORD *)(a1 + 38520) = 0u;
    *(_DWORD *)(a1 + 38536) = 0;
    *(_DWORD *)(a1 + 38544) = 0;
    *(_DWORD *)(a1 + 38648) = 0;
    *(_DWORD *)(a1 + 57856) = 0;
    *(_QWORD *)(a1 + 77080) = 0;
    *(_DWORD *)(a1 + 77088) = 0;
    *(_OWORD *)(a1 + 77064) = 0u;
    *(_OWORD *)(a1 + 77192) = 0u;
    *(_OWORD *)(a1 + 77208) = 0u;
    *(_OWORD *)(a1 + 77160) = 0u;
    *(_OWORD *)(a1 + 77176) = 0u;
    *(_OWORD *)(a1 + 77128) = 0u;
    *(_OWORD *)(a1 + 77144) = 0u;
    *(_OWORD *)(a1 + 77096) = 0u;
    *(_OWORD *)(a1 + 77112) = 0u;
    return result;
  }
  *(double *)(a1 + 16) = v9;
  sub_100B61F44((float *)(a2 + 36), v30);
  v14 = sub_1011A2C08((uint64_t)v30);
  *(_OWORD *)v28 = *(_OWORD *)(a2 + 56);
  *(float *)&v28[16] = v14;
  *(_DWORD *)&v28[20] = v15;
  *(_DWORD *)&v28[24] = v16;
  sub_100A9B618((unsigned __int16 *)(a1 + 40), (__int128 *)v28);
  if (*(unsigned __int16 *)(a1 + 42) < 0x258u)
    return 0;
  v17 = (int *)(a1 + 77088);
  ++*(_DWORD *)(a1 + 77224);
  if (a5 < 0.03)
    ++*(_DWORD *)(a1 + 77228);
  if (a6 < 0.01)
    ++*(_DWORD *)(a1 + 77232);
  sub_100D79728((float32x2_t *)a1, *(double *)(a2 + 56));
  v18 = *(_QWORD *)(a1 + 32) + 1;
  *(_QWORD *)(a1 + 32) = v18;
  if (v18 >= 0x64)
  {
    sub_100D799B0((float32x2_t *)a1, (uint64_t)v28, *(double *)(a2 + 56));
    *(_OWORD *)(a1 + 38472) = *(_OWORD *)v28;
    *(_OWORD *)(a1 + 38484) = *(_OWORD *)&v28[12];
    *(_QWORD *)(a1 + 32) = 0;
    sub_100D79B3C(a1, (uint64_t)v28);
    if ((_BYTE *)(a1 + 38504) != v28)
    {
      v19 = *(_OWORD *)&v28[16];
      *(_OWORD *)(a1 + 38504) = *(_OWORD *)v28;
      *(_OWORD *)(a1 + 38520) = v19;
      *(_DWORD *)(a1 + 38536) = v29;
    }
  }
  *(double *)(a1 + 24) = a4;
  *(_OWORD *)v28 = *(unint64_t *)&a4;
  v20 = sub_100D7A7EC((unsigned __int16 *)(a1 + 40), 0x12CuLL);
  *(_DWORD *)&v28[16] = sub_1005335A4(a1 + 38504, (float *)(v20 + 16));
  *(_DWORD *)&v28[20] = v21;
  *(_DWORD *)&v28[24] = v22;
  sub_100A9B618((unsigned __int16 *)(a1 + 38544), (__int128 *)v28);
  v23 = sub_100D79D74(a1, 0, a4, a5, a6);
  v24 = sub_100D79D74(a1, 1u, a4, a5, a6);
  if (*v17 != 2 && sub_100D7A2CC(a1) == 2)
  {
    *(_OWORD *)(a1 + 77192) = 0u;
    *(_OWORD *)(a1 + 77208) = 0u;
    *(_OWORD *)(a1 + 77160) = 0u;
    *(_OWORD *)(a1 + 77176) = 0u;
    *(_OWORD *)(a1 + 77128) = 0u;
    *(_OWORD *)(a1 + 77144) = 0u;
    *(_OWORD *)(a1 + 77096) = 0u;
    *(_OWORD *)(a1 + 77112) = 0u;
  }
  v25 = sub_100D7A2CC(a1);
  *v17 = v25;
  if (v25)
    v26 = 0;
  else
    v26 = v23;
  if (v26)
  {
    if ((sub_100D7A39C(a1, 0) & 1) != 0)
      goto LABEL_25;
    v25 = *v17;
  }
  if (v25 != 1 || !v24)
    return 0;
  result = sub_100D7A39C(a1, 1);
  if (!(_DWORD)result)
    return result;
LABEL_25:
  if (a4 - *(double *)a1 > 0.600000024)
  {
    *(double *)a1 = a4;
    *(double *)(a1 + 8) = a3;
    return 1;
  }
  return 0;
}

void sub_100D79728(float32x2_t *a1, double a2)
{
  float32x2_t *v3;
  float32x2_t *v4;
  int v5;
  float32x2_t *v6;
  uint64_t v7;
  float32x2_t *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int16 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  float32x2_t v17;
  unint64_t v18;
  float32x2_t *v19;
  unint64_t v20;
  unint64_t v21;
  float *v22;
  float *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  float32x2_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  float32x2_t *v32;
  float32x2_t v33;

  v3 = a1 + 4807;
  v4 = a1 + 2406;
  v5 = a1[2406].u16[1];
  if (!a1[2406].i16[1])
  {
LABEL_7:
    v12 = a1[5].u16[0] + (unint64_t)a1[5].u16[1] - 1;
    v13 = a1[5].u32[1];
    if (v12 < v13)
      v13 = 0;
    sub_100A9B618((unsigned __int16 *)&a1[2406], (__int128 *)&a1[4 * (v12 - v13) + 6]);
    v14 = v4->u16[0] + (unint64_t)v4->u16[1] - 1;
    v15 = v4->u32[1];
    if (v14 < v15)
      v15 = 0;
    v16 = (uint64_t)&a1[4 * (v14 - v15) + 2409];
    v17 = *(float32x2_t *)v16;
LABEL_12:
    *v3 = vadd_f32(v17, *v3);
    v3[1].f32[0] = *(float *)(v16 + 8) + v3[1].f32[0];
    return;
  }
  v6 = a1 + 2407;
  v7 = v4->u16[0];
  while (a2 - *(double *)&v6[4 * v7] > 6.02)
  {
    v8 = &v6[4 * v7];
    *v3 = vsub_f32(*v3, v8[2]);
    a1[4808].f32[0] = a1[4808].f32[0] - v8[3].f32[0];
    v9 = v7 + 1;
    v10 = a1[2406].u32[1];
    if (v9 < v10)
      LOWORD(v10) = 0;
    v11 = v9 - v10;
    v7 = v11;
    v4->i16[0] = v11;
    a1[2406].i16[1] = --v5;
    if (!(_WORD)v5)
      goto LABEL_7;
  }
  v18 = a1[5].u16[1];
  if (v18 >= 3)
  {
    v19 = a1 + 6;
    v20 = v18 + a1[5].u16[0] - 1;
    v21 = a1[5].u32[1];
    if (v20 < v21)
      v21 = 0;
    v22 = (float *)&v19[4 * (v20 - v21) + 2];
    v23 = (float *)(sub_100D7A7EC((unsigned __int16 *)&a1[5], v18 - 2) + 16);
    v24 = sub_100D7A7EC((unsigned __int16 *)&a1[5], a1[5].u16[1] - 3);
    if (sub_1011A2C48(v22, v23, (float *)(v24 + 16)) <= 0.30103)
    {
      v25 = a1[5].u16[0] + (unint64_t)a1[5].u16[1] - 1;
      v26 = a1[5].u32[1];
      if (v25 < v26)
        v26 = 0;
      if (sub_100D7A774((float *)&v19[4 * (v25 - v26) + 2], (unsigned __int16 *)v4, 0.0349))
      {
        if (v4->i32[1] == v4->u16[1])
        {
          v27 = &v6[4 * v4->u16[0]];
          *v3 = vsub_f32(*v3, v27[2]);
          v3[1].f32[0] = v3[1].f32[0] - v27[3].f32[0];
        }
        v28 = a1[5].u16[0] + (unint64_t)a1[5].u16[1] - 1;
        v29 = a1[5].u32[1];
        if (v28 < v29)
          v29 = 0;
        sub_100A9B618((unsigned __int16 *)v4, (__int128 *)&v19[4 * (v28 - v29)]);
        v30 = v4->u16[0] + (unint64_t)v4->u16[1] - 1;
        v31 = v4->u32[1];
        if (v30 < v31)
          v31 = 0;
        v32 = &v6[4 * (v30 - v31)];
        v33 = v32[2];
        v16 = (uint64_t)&v32[2];
        v17 = v33;
        goto LABEL_12;
      }
    }
  }
}

void sub_100D799B0(float32x2_t *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double v3;
  unsigned __int16 *v5;
  unsigned int v6;
  unint64_t v7;
  float *v8;
  unsigned __int16 *v9;
  float v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  float32x2_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  unsigned __int16 v24[3604];

  v3 = a3;
  v5 = (unsigned __int16 *)&a1[2406] + 1;
  v6 = a1[2406].u16[1];
  if (v6 > 3)
  {
    v7 = 0;
    v8 = (float *)&a1[4807];
    *(float *)&a3 = (float)v6;
    v9 = (unsigned __int16 *)&a1[2406];
    v10 = a1[4808].f32[0] / (float)v6;
    v16 = vdiv_f32(a1[4807], (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0));
    v17 = v10;
    *(_QWORD *)v24 = 0x25800000000;
    do
    {
      v11 = sub_100D7A7EC(v9, v7);
      sub_100687774(v24, v11 + 16);
      ++v7;
    }
    while (v7 < *v5);
    sub_10083D28C(v24, &v16, (uint64_t)&v18);
    v13 = v21;
    v12 = v22;
    v14 = v23;
    if ((float)((float)((float)(v23 * v8[10]) + (float)(v22 * v8[9])) + (float)(v21 * v8[8])) <= 0.0)
    {
      v15 = 0;
      v18 = v21;
      v19 = v22;
      v20 = v23;
      do
      {
        *(float *)((char *)&v18 + v15) = -*(float *)((char *)&v18 + v15);
        v15 += 4;
      }
      while (v15 != 12);
      v13 = v18;
      v12 = v19;
      v14 = v20;
    }
    *(double *)a2 = v3;
    *(_QWORD *)(a2 + 8) = 0;
    *(float *)(a2 + 16) = v13;
    *(float *)(a2 + 20) = v12;
    *(float *)(a2 + 24) = v14;
  }
  else
  {
    *(double *)a2 = a3;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 24) = 1065353216;
  }
}

float *sub_100D79B3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float *v3;
  unint64_t i;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t j;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  __float2 v21;
  _DWORD v23[3];
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  __int128 v33;
  __int128 v34;
  int v35;
  _OWORD v36[2];
  int v37;

  v35 = 1065353216;
  v3 = (float *)(a1 + 38488);
  v33 = xmmword_101C24874;
  v34 = unk_101C24884;
  sub_100821BBC(a1 + 38488, (uint64_t)&v24);
  for (i = 0; i != 9; ++i)
    *((float *)&v33 + i) = *((float *)&v33 + i) - sub_100821C40((uint64_t)&v24, i);
  v36[0] = v33;
  v36[1] = v34;
  v37 = v35;
  v6 = v3[1];
  v5 = v3[2];
  v7 = *v3;
  v8 = v6 + (float)(v5 * -0.0);
  v9 = 0.0;
  v10 = -(float)(*v3 - (float)(v5 * 0.0));
  v11 = (float)(v6 * -0.0) + (float)(*v3 * 0.0);
  *(float *)v23 = v8;
  *(float *)&v23[1] = v10;
  *(float *)&v23[2] = v11;
  v12 = 1.0;
  v13 = 0.0;
  v14 = 0.0;
  v15 = 0.0;
  if ((float)(v8 + (float)(v10 + v11)) != 0.0)
  {
    for (j = 0; j != 3; ++j)
      v15 = v15 + (float)(*(float *)&v23[j] * *(float *)&v23[j]);
    v15 = atan2f(sqrtf(v15), (float)(v5 + (float)(v6 * 0.0)) + (float)(v7 * 0.0));
    v12 = v11;
    v13 = v10;
    v14 = v8;
  }
  v17 = 0;
  v24 = v14;
  v25 = v13;
  v26 = v12;
  do
  {
    v9 = v9 + (float)(*(float *)((char *)&v24 + v17) * *(float *)((char *)&v24 + v17));
    v17 += 4;
  }
  while (v17 != 12);
  if (sqrtf(v9) > 0.00000011921)
  {
    v18 = 0;
    v19 = 0.0;
    do
    {
      v19 = v19 + (float)(*(float *)((char *)&v24 + v18) * *(float *)((char *)&v24 + v18));
      v18 += 4;
    }
    while (v18 != 12);
    v20 = sqrtf(v19);
    v14 = v14 / v20;
    v13 = v13 / v20;
    v12 = v12 / v20;
  }
  v21 = __sincosf_stret(v15);
  v24 = v21.__cosval + (float)((float)(v14 * v14) * (float)(1.0 - v21.__cosval));
  v25 = (float)(v21.__sinval * v12) + (float)((float)(v14 * v13) * (float)(1.0 - v21.__cosval));
  v26 = (float)((float)(v14 * v12) * (float)(1.0 - v21.__cosval)) - (float)(v13 * v21.__sinval);
  v27 = (float)((float)(v14 * v13) * (float)(1.0 - v21.__cosval)) - (float)(v12 * v21.__sinval);
  v28 = v21.__cosval + (float)((float)(v13 * v13) * (float)(1.0 - v21.__cosval));
  v29 = (float)(v21.__sinval * v14) + (float)((float)(v13 * v12) * (float)(1.0 - v21.__cosval));
  v30 = (float)(v21.__sinval * v13) + (float)((float)(v14 * v12) * (float)(1.0 - v21.__cosval));
  v31 = (float)((float)(v13 * v12) * (float)(1.0 - v21.__cosval)) - (float)(v14 * v21.__sinval);
  v32 = v21.__cosval + (float)((float)(v12 * v12) * (float)(1.0 - v21.__cosval));
  return sub_100B27DB0((uint64_t)&v24, (uint64_t)v36, a2);
}

BOOL sub_100D79D74(uint64_t a1, unsigned int a2, double a3, float a4, float a5)
{
  _BOOL8 result;
  unsigned __int16 *v7;
  unsigned int v8;
  uint64_t v11;
  unsigned __int16 *v12;
  float32x2_t *v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  float *v17;
  float v18;
  unint64_t v19;
  unint64_t v20;
  unsigned __int16 v21;
  int32x2_t v22;
  float v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  float32x2_t *v27;
  float v28;
  float32x2_t v29;
  float32x2_t *v30;
  float v31;
  float32x2_t *v32;
  float v33;
  float v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  float v45;
  unint64_t v46;
  unint64_t v47;
  float *v48;
  unint64_t v49;
  unint64_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  unint64_t v57;
  unint64_t v58;
  float v59;
  float v60;
  float v61;
  float v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  float32x2_t *v67;
  float v68;
  unint64_t v69;
  unint64_t v70;
  float32x2_t *v71;
  float v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  float32x2_t *v77;
  float v78;
  float v79;
  float v80;
  float32x2_t v81;
  float v82;
  float32x2_t v83;
  float v84;
  float32x2_t v85;
  float v86;

  result = 0;
  if (a2 > 1)
    return result;
  v7 = (unsigned __int16 *)(a1 + 38544);
  v8 = *(unsigned __int16 *)(a1 + 38546);
  if (v8 < 3)
    return result;
  v11 = a1 + 77064;
  if (a2)
    v12 = (unsigned __int16 *)(a1 + 57856);
  else
    v12 = (unsigned __int16 *)(a1 + 38648);
  if (a2)
    v13 = (float32x2_t *)(a1 + 77076);
  else
    v13 = (float32x2_t *)(a1 + 77064);
  v14 = v12 + 4;
  v15 = v12[1];
  if (v15)
  {
    v16 = *v12;
    while (a3 - *(double *)&v14[16 * v16] > 4.02)
    {
      v17 = (float *)&v14[16 * v16];
      v18 = v13->f32[1];
      v13->f32[0] = v13->f32[0] - v17[4];
      v13->f32[1] = v18 - v17[5];
      v13[1].f32[0] = v13[1].f32[0] - v17[6];
      v19 = v16 + 1;
      v20 = *((unsigned int *)v12 + 1);
      if (v19 < v20)
        LOWORD(v20) = 0;
      v21 = v19 - v20;
      v16 = v21;
      *v12 = v21;
      v12[1] = --v15;
      if (!v15)
      {
        v15 = 0;
        break;
      }
    }
    v8 = *(unsigned __int16 *)(a1 + 38546);
    if (v8 < 3)
      return 0;
    *(float *)v22.i32 = sub_100D7AA60(a4, a5);
    if (*(float *)v22.i32 < 0.0)
      return 0;
    v23 = *(float *)v22.i32;
    if (v15 >= 3u)
    {
      sub_100D7AADC((uint64_t)v12);
      v8 = *(unsigned __int16 *)(a1 + 38546);
      goto LABEL_25;
    }
  }
  else
  {
    *(float *)v22.i32 = sub_100D7AA60(a4, a5);
    if (*(float *)v22.i32 < 0.0)
      return 0;
    v23 = *(float *)v22.i32;
  }
  v22.i32[0] = 1.0;
LABEL_25:
  v24 = a1 + 38552;
  v25 = *v7 + (unint64_t)v8 - 1;
  v26 = *((unsigned int *)v7 + 1);
  if (v25 < v26)
    v26 = 0;
  v27 = (float32x2_t *)(v24 + 32 * (v25 - v26));
  v28 = v27[3].f32[0] / *(float *)v22.i32;
  v80 = *(float *)v22.i32;
  v29 = (float32x2_t)vdup_lane_s32(v22, 0);
  v85 = vdiv_f32(v27[2], v29);
  v86 = v28;
  v30 = (float32x2_t *)sub_100D7A7EC(v7, v8 - 2);
  v31 = v30[3].f32[0] / v80;
  v83 = vdiv_f32(v30[2], v29);
  v84 = v31;
  v32 = (float32x2_t *)sub_100D7A7EC(v7, v7[1] - 3);
  v33 = v32[3].f32[0] / v80;
  v81 = vdiv_f32(v32[2], v29);
  v82 = v33;
  v34 = sub_1011A2C48((float *)&v85, (float *)&v83, (float *)&v81);
  ++*(_DWORD *)(v11 + 172);
  if (v34 > 0.47712)
  {
    result = 0;
    ++*(_DWORD *)(v11 + 176);
    return result;
  }
  v35 = v7[1];
  v36 = *v7 + v35 - 1;
  v37 = *((unsigned int *)v7 + 1);
  if (v36 < v37)
    v37 = 0;
  v38 = v24 + 32 * (v36 - v37);
  v39 = sub_100D7A7EC(v7, v35 - 2);
  v40 = (float)(*(float *)(v38 + 16) * *(float *)(v39 + 20)) - (float)(*(float *)(v38 + 20) * *(float *)(v39 + 16));
  if (a2 == 1)
  {
    if (v40 >= 0.0)
      return 0;
  }
  else if (v40 < 0.0)
  {
    return 0;
  }
  v41 = v12[1];
  if (!v12[1])
  {
LABEL_59:
    v73 = *v7 + (unint64_t)v7[1] - 1;
    v74 = *((unsigned int *)v7 + 1);
    if (v73 < v74)
      v74 = 0;
    sub_100A9B618(v12, (__int128 *)(v24 + 32 * (v73 - v74)));
    v75 = *v7 + (unint64_t)v7[1] - 1;
    v76 = *((unsigned int *)v7 + 1);
    if (v75 < v76)
      v76 = 0;
    v77 = (float32x2_t *)(v24 + 32 * (v75 - v76));
    *v13 = vadd_f32(v77[2], *v13);
    v13[1].f32[0] = v77[3].f32[0] + v13[1].f32[0];
    return 1;
  }
  v42 = (float)v41;
  if (v41 <= 0x63)
    v42 = 100.0;
  v43 = v13->f32[0] / v42;
  v44 = v13->f32[1] / v42;
  v45 = v13[1].f32[0] / v42;
  v46 = *v7 + (unint64_t)v7[1] - 1;
  v47 = *((unsigned int *)v7 + 1);
  if (v46 < v47)
    v47 = 0;
  v48 = (float *)(v24 + 32 * (v46 - v47));
  v49 = v41 + *v12 - 1;
  v50 = *((unsigned int *)v12 + 1);
  if (v49 < v50)
    v50 = 0;
  v52 = v48[4];
  v51 = v48[5];
  v79 = (float)(v52 * *(float *)&v14[16 * (v49 - v50) + 10]) - (float)(v51 * *(float *)&v14[16 * (v49 - v50) + 8]);
  v78 = sub_100D7A9E4(v52 - v43, v51 - v44, v48[6] - v45);
  v54 = v53;
  v56 = v55;
  v57 = *v12 + (unint64_t)v12[1] - 1;
  v58 = *((unsigned int *)v12 + 1);
  if (v57 < v58)
    v58 = 0;
  v59 = sub_100D7A9E4(*(float *)&v14[16 * (v57 - v58) + 8] - v43, *(float *)&v14[16 * (v57 - v58) + 10] - v44, *(float *)&v14[16 * (v57 - v58) + 12] - v45);
  v62 = acosf((float)((float)(v56 * v60) + (float)(v54 * v61)) + (float)(v78 * v59));
  if (v62 <= 0.0)
    v62 = -v62;
  if (a2 == 1)
  {
    if (v79 < 0.0)
      goto LABEL_54;
  }
  else if (v79 >= 0.0)
  {
    goto LABEL_54;
  }
  if (v62 < v23)
  {
    v63 = *v12 + (unint64_t)v12[1] - 1;
    v64 = *((unsigned int *)v12 + 1);
    if (v63 < v64)
      v64 = 0;
    if (a3 - *(double *)&v14[16 * (v63 - v64)] < 3.0)
      return 0;
  }
LABEL_54:
  v65 = *v12 + (unint64_t)v12[1] - 1;
  v66 = *((unsigned int *)v12 + 1);
  if (v65 < v66)
    v66 = 0;
  v67 = (float32x2_t *)&v14[16 * (v65 - v66)];
  v68 = v67[3].f32[0] / v80;
  v85 = vdiv_f32(v67[2], v29);
  v86 = v68;
  v69 = *v7 + (unint64_t)v7[1] - 1;
  v70 = *((unsigned int *)v7 + 1);
  if (v69 < v70)
    v70 = 0;
  v71 = (float32x2_t *)(v24 + 32 * (v69 - v70));
  v72 = v71[3].f32[0] / v80;
  v83 = vdiv_f32(v71[2], v29);
  v84 = v72;
  result = sub_1011A2DE4((float *)&v85, (float *)&v83, 0.017453);
  if (result)
    goto LABEL_59;
  return result;
}

uint64_t sub_100D7A2CC(uint64_t a1)
{
  unsigned __int16 *v1;
  unsigned __int16 *v2;
  uint64_t result;
  int v4;
  unint64_t v5;
  unint64_t v6;

  v1 = (unsigned __int16 *)(a1 + 57858);
  v2 = (unsigned __int16 *)(a1 + 38650);
  result = *(unsigned int *)(a1 + 77088);
  if ((_DWORD)result == 1)
  {
    if (*v1 > 0x87u)
      return 1;
    goto LABEL_5;
  }
  if ((_DWORD)result)
  {
LABEL_5:
    v4 = 0;
    goto LABEL_6;
  }
  if (*v2 > 0x87u)
    return 0;
  v4 = 1;
LABEL_6:
  v5 = *v1;
  if (v5 <= 0x1D && *v2 < 0x1Eu)
    return 2;
  if ((_DWORD)result == 1)
  {
    v6 = *v2;
    if (v6 >= 0x1E && v5 + 40 < v6)
      return 0;
  }
  if (v4 && v5 >= 0x1E && (unint64_t)*v2 + 40 < v5)
    return 1;
  if ((_DWORD)result == 2)
    return v5 > *v2;
  return result;
}

uint64_t sub_100D7A39C(uint64_t a1, int a2)
{
  unsigned __int16 *v4;
  unint64_t v5;
  unint64_t v6;
  unsigned __int16 *v7;
  unint64_t v8;
  unint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  float *v17;
  float v18;
  float v19;
  unint64_t *v20;
  uint64_t v21;
  float v22;
  float v23;
  float *v24;
  uint64_t v25;
  float v26;
  float v27;
  uint64_t v28;
  float v29;
  float v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t *v34;
  float *v35;
  char *v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  unint64_t v44;
  uint64_t v46;
  uint64x2_t v47;
  unint64_t *v48;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;

  if (a2 == 2)
    goto LABEL_57;
  v4 = (unsigned __int16 *)(a2 ? a1 + 57856 : a1 + 38648);
  v5 = v4[1];
  v6 = v5 - 2;
  if (v5 < 2)
    goto LABEL_57;
  v7 = v4 + 4;
  v8 = v5 + *v4 - 1;
  v9 = *((unsigned int *)v4 + 1);
  if (v8 < v9)
    v9 = 0;
  v10 = *(double *)&v7[16 * (v8 - v9)];
  if (v10 - *(double *)sub_100D7A7EC(v4, v6) >= 0.200000003)
  {
LABEL_57:
    v32 = 0;
    return v32 & 1;
  }
  v11 = 0;
  v12 = v4[1];
  v13 = *v4 + v12 - 1;
  v14 = *((unsigned int *)v4 + 1);
  if (v13 < v14)
    v14 = 0;
  v15 = (unint64_t *)(a1 + 77096);
  v16 = (unint64_t *)(a1 + 77160);
  v17 = (float *)&v7[16 * (v13 - v14)];
  v18 = v17[6];
  v53 = v17[4];
  v54 = v17[5];
  v56 = v53;
  v57 = v54;
  v52 = v18;
  v58 = v18;
  v19 = 0.0;
  do
  {
    v19 = v19 + (float)(*(float *)((char *)&v56 + v11) * *(float *)((char *)&v56 + v11));
    v11 += 4;
  }
  while (v11 != 12);
  if (a2)
    v20 = v16;
  else
    v20 = v15;
  if (sqrtf(v19) > 0.00000011921)
  {
    v21 = 0;
    v22 = 0.0;
    do
    {
      v22 = v22 + (float)(*(float *)((char *)&v56 + v21) * *(float *)((char *)&v56 + v21));
      v21 += 4;
    }
    while (v21 != 12);
    v23 = sqrtf(v22);
    v53 = v53 / v23;
    v54 = v54 / v23;
    v52 = v18 / v23;
  }
  v24 = (float *)sub_100D7A7EC(v4, v12 - 2);
  v25 = 0;
  v26 = v24[5];
  v50 = v24[6];
  v51 = v24[4];
  v56 = v51;
  v57 = v26;
  v58 = v50;
  v27 = 0.0;
  do
  {
    v27 = v27 + (float)(*(float *)((char *)&v56 + v25) * *(float *)((char *)&v56 + v25));
    v25 += 4;
  }
  while (v25 != 12);
  if (sqrtf(v27) > 0.00000011921)
  {
    v28 = 0;
    v29 = 0.0;
    do
    {
      v29 = v29 + (float)(*(float *)((char *)&v56 + v28) * *(float *)((char *)&v56 + v28));
      v28 += 4;
    }
    while (v28 != 12);
    v30 = sqrtf(v29);
    v26 = v26 / v30;
    v50 = v50 / v30;
    v51 = v51 / v30;
  }
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = v20;
  do
  {
    v35 = (float *)((char *)&unk_101C2479C + v31);
    if (a2 == 1)
      v36 = (char *)&unk_101C2479C;
    else
      v36 = (char *)&unk_101C247FC;
    if (a2 != 1)
      v35 = (float *)((char *)&unk_101C247FC + v31);
    v37 = *(float *)&v36[v31];
    v39 = v35[1];
    v38 = v35[2];
    v40 = (float)(v37 * (float)-v26) + (float)(v51 * v39);
    v55 = (float)(v37 * (float)-v54) + (float)(v53 * v39);
    v41 = atan2f(v55, (float)((float)(v52 * v38) + (float)(v54 * v39)) + (float)(v53 * v37));
    if (v41 <= 0.0)
      v42 = -v41;
    else
      v42 = v41;
    v43 = atan2f(v40, (float)((float)(v50 * v38) + (float)(v26 * v39)) + (float)(v51 * v37));
    if (v43 <= 0.0)
      v43 = -v43;
    if (v42 < 0.7854 && v43 < 0.7854)
    {
      if (a2 == 1)
      {
        if (v40 > 0.0 && v55 < 0.0)
          goto LABEL_45;
      }
      else if (v40 < 0.0 && v55 > 0.0)
      {
LABEL_45:
        v44 = *v34 + 1;
        *v34 = v44;
        v32 |= v44 > 1;
      }
    }
    if (*v34++)
      ++v33;
    v31 += 12;
  }
  while (v31 != 96);
  if ((v32 & 1) != 0)
  {
    v46 = 0;
    v47 = (uint64x2_t)vdupq_n_s64(1uLL);
    do
    {
      *(uint64x2_t *)&v20[v46] = vqsubq_u64(*(uint64x2_t *)&v20[v46], v47);
      v46 += 2;
    }
    while (v46 != 8);
  }
  if (a2)
    v48 = v15;
  else
    v48 = v16;
  if (v33 < 3)
  {
    *((_OWORD *)v48 + 2) = 0u;
    *((_OWORD *)v48 + 3) = 0u;
    *(_OWORD *)v48 = 0u;
    *((_OWORD *)v48 + 1) = 0u;
  }
  else
  {
    memset_pattern16(v48, &unk_101C248E0, 0x40uLL);
  }
  return v32 & 1;
}

BOOL sub_100D7A774(float *a1, unsigned __int16 *a2, float a3)
{
  unint64_t v6;
  uint64_t v7;
  _BOOL8 result;

  if (!a2[1])
    return 1;
  v6 = 0;
  do
  {
    v7 = sub_100D7A7EC(a2, v6);
    result = sub_1011A2DE4(a1, (float *)(v7 + 16), a3);
    if (!result)
      break;
    ++v6;
  }
  while (v6 < a2[1]);
  return result;
}

uint64_t sub_100D7A7EC(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  unint64_t v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  unint64_t v17;
  __int16 v18;
  int v19;

  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102183770);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v17 = a2;
      v18 = 1024;
      v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102183770);
      v9 = *((_DWORD *)a1 + 1);
      v12 = 134218240;
      v13 = a2;
      v14 = 1024;
      v15 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", (size_t)&v12, 18);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "const T &CMQueue<CLSwimStrokeCounter::VectorSample>::operator[](const size_t) const [T = CLSwimStrokeCounter::VectorSample]", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[16 * (v4 - v5) + 4];
}

float sub_100D7A9E4(float result, float a2, float a3)
{
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  _DWORD v7[3];

  v3 = 0;
  *(float *)v7 = result;
  *(float *)&v7[1] = a2;
  *(float *)&v7[2] = a3;
  v4 = 0.0;
  do
  {
    v4 = v4 + (float)(*(float *)&v7[v3] * *(float *)&v7[v3]);
    ++v3;
  }
  while (v3 != 3);
  if (sqrtf(v4) > 0.00000011921)
  {
    v5 = 0;
    v6 = 0.0;
    do
    {
      v6 = v6 + (float)(*(float *)&v7[v5] * *(float *)&v7[v5]);
      ++v5;
    }
    while (v5 != 3);
    return result / sqrtf(v6);
  }
  return result;
}

float sub_100D7AA60(float a1, float a2)
{
  uint64_t i;
  uint64_t j;

  for (i = 0; i != 3; ++i)
  {
    if (flt_101C24868[i] > a2)
      break;
  }
  for (j = 0; j != 3; ++j)
  {
    if (flt_101C2485C[j] > a1)
      break;
  }
  return flt_101C24898[4 * i + j] * 3.14159265 / 180.0;
}

uint64_t sub_100D7AADC(uint64_t result)
{
  unsigned __int16 *v1;
  unint64_t v2;
  float v3;

  if (*(_WORD *)(result + 2))
  {
    v1 = (unsigned __int16 *)result;
    v2 = 0;
    v3 = 0.0;
    do
    {
      result = sub_100D7A7EC(v1, v2);
      v3 = v3
         + sqrtf((float)((float)(*(float *)(result + 24) * *(float *)(result + 24))+ (float)(*(float *)(result + 20) * *(float *)(result + 20)))+ (float)(*(float *)(result + 16) * *(float *)(result + 16)));
      ++v2;
    }
    while (v2 < v1[1]);
  }
  return result;
}

float32x2_t sub_100D7AB58(uint64_t a1, double a2)
{
  unsigned int v2;

  v2 = *(_DWORD *)(a1 + 77224);
  if (v2)
  {
    *(float *)&a2 = (float)v2;
    return vdiv_f32(vmul_f32(vcvt_f32_u32(*(uint32x2_t *)(a1 + 77228)), (float32x2_t)vdup_n_s32(0x42C80000u)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a2, 0));
  }
  else
  {
    return 0;
  }
}

void sub_100D7ABC4(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

_QWORD *sub_100D7ABF0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE v16[24];
  _BYTE *v17;
  _BYTE v18[24];
  _BYTE *v19;
  _BYTE v20[24];
  _BYTE *v21;

  sub_100270E34((uint64_t)v20, a3);
  sub_100270E34((uint64_t)v18, a4);
  sub_100270E34((uint64_t)v16, a5);
  sub_100D6C128((uint64_t)a1, a2, CFSTR("Motion"), 1, 1, (uint64_t)v20, (uint64_t)v18, (uint64_t)v16);
  v9 = v17;
  if (v17 == v16)
  {
    v10 = 4;
    v9 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  v11 = v19;
  if (v19 == v18)
  {
    v12 = 4;
    v11 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_11;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_11:
  v13 = v21;
  if (v21 == v20)
  {
    v14 = 4;
    v13 = v20;
    goto LABEL_15;
  }
  if (v21)
  {
    v14 = 5;
LABEL_15:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  *a1 = off_1021837A0;
  sub_100119F3C(a1 + 17);
  sub_100119F3C(a1 + 19);
  return a1;
}

void sub_100D7AD54(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10011A5A8(v2);
  sub_100D6C25C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100D7AE28(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = off_1021837A0;
  v2 = a1 + 17;
  sub_10011A5A8(a1 + 19);
  sub_10011A5A8(v2);
  return sub_100D6C25C((uint64_t)a1);
}

void sub_100D7AE6C(_QWORD *a1)
{
  sub_100D7AE28(a1);
  operator delete();
}

uint64_t sub_100D7AE90(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v5;
  id v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  id v10;
  uint8_t buf[4];
  id v12;

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102183840);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    *(_DWORD *)buf = 136446210;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,clearOutAssetData", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102183840);
    v5 = qword_1022A02A8;
    v6 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v9 = 136446210;
    v10 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 0, "#CLConfig,%{public}s,clearOutAssetData", &v9, 12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionConfigAsset::clearOutAssetData()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  sub_100119F3C(buf);
  sub_10052502C(a1 + 136, (uint64_t)buf);
  sub_10011A5A8(buf);
  sub_100119F3C(buf);
  sub_10052502C(a1 + 152, (uint64_t)buf);
  return sub_10011A5A8(buf);
}

void sub_100D7B084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_100D7B0A4(uint64_t a1)
{
  NSObject *v2;
  id v3;
  int v4;
  int v5;
  std::string *v6;
  __int128 v7;
  const std::string::value_type *p_p;
  std::string::size_type v9;
  std::string *v10;
  void *v11;
  unint64_t size;
  int v13;
  void *v14;
  NSObject *v15;
  id v16;
  int v17;
  int v18;
  std::string *v19;
  __int128 v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  void *v25;
  uint64_t v26;
  id v27;
  int v28;
  int v29;
  const char *v30;
  std::string *v31;
  uint64_t v32;
  id v33;
  int v34;
  int v35;
  const char *v36;
  std::string *v37;
  uint64_t v38;
  void *v39[2];
  std::string::size_type v40;
  __int128 __dst;
  _BYTE v42[7];
  char v43;
  void *__p;
  std::string::size_type v45;
  unsigned __int8 v46;
  _DWORD v47[2];
  std::string v48;
  std::string buf[68];

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102183840);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v4 = sub_1007FA8FC(*(void **)(a1 + 128));
    v5 = sub_1007FA8C8(*(void **)(a1 + 128));
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v4;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,sending kNotificationAltimeterSettings for asset,compatibilityVersion,%{public}d,contentVersion,%{public}d", (uint8_t *)buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102183840);
    v26 = qword_1022A02A8;
    v27 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v28 = sub_1007FA8FC(*(void **)(a1 + 128));
    v29 = sub_1007FA8C8(*(void **)(a1 + 128));
    LODWORD(v48.__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
    WORD2(v48.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&v48.__r_.__value_.__r.__words[1] + 6) = v28;
    WORD1(v48.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(v48.__r_.__value_.__r.__words[2]) = v29;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "#CLConfig,%{public}s,sending kNotificationAltimeterSettings for asset,compatibilityVersion,%{public}d,contentVersion,%{public}d", &v48, 24);
    v31 = (std::string *)v30;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionConfigAsset::sendNotifications()", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
  sub_1015A2E04(&v48, "#CLConfig,");
  v6 = std::string::append(&v48, (const std::string::value_type *)objc_msgSend(*(id *)(a1 + 16), "UTF8String"));
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  buf[0].__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  sub_1015A2E04(&__p, ",kNotificationAltimeterSettings,");
  if ((v46 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v46 & 0x80u) == 0)
    v9 = v46;
  else
    v9 = v45;
  v10 = std::string::append(buf, p_p, v9);
  v11 = (void *)v10->__r_.__value_.__r.__words[0];
  size = v10->__r_.__value_.__l.__size_;
  v47[0] = v10->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v47 + 3) = *(_DWORD *)((char *)&v10->__r_.__value_.__r.__words[2] + 3);
  v13 = SHIBYTE(v10->__r_.__value_.__r.__words[2]);
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if ((char)v46 < 0)
    operator delete(__p);
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v48.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_18;
  }
  else if ((v13 & 0x80000000) == 0)
  {
LABEL_18:
    *(_QWORD *)&__dst = v11;
    *((_QWORD *)&__dst + 1) = size;
    *(_DWORD *)v42 = v47[0];
    *(_DWORD *)&v42[3] = *(_DWORD *)((char *)v47 + 3);
    v43 = v13;
    goto LABEL_21;
  }
  sub_100115CE4(&__dst, v11, size);
LABEL_21:
  v14 = (void *)sub_10011A5AC(a1 + 136);
  sub_1007FA930(&__dst, v14);
  if (v43 < 0)
    operator delete((void *)__dst);
  sub_100D6EF24(a1, 7, a1 + 136);
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102183840);
  v15 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v16 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v17 = sub_1007FA8FC(*(void **)(a1 + 128));
    v18 = sub_1007FA8C8(*(void **)(a1 + 128));
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v17;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v18;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,sending kNotificationNoMovementSettings for asset,compatibilityVersion,%{public}d,contentVersion,%{public}d", (uint8_t *)buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102183840);
    v32 = qword_1022A02A8;
    v33 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v34 = sub_1007FA8FC(*(void **)(a1 + 128));
    v35 = sub_1007FA8C8(*(void **)(a1 + 128));
    LODWORD(v48.__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 4) = (std::string::size_type)v33;
    WORD2(v48.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&v48.__r_.__value_.__r.__words[1] + 6) = v34;
    WORD1(v48.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(v48.__r_.__value_.__r.__words[2]) = v35;
    LODWORD(v38) = 24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v32, 0, "#CLConfig,%{public}s,sending kNotificationNoMovementSettings for asset,compatibilityVersion,%{public}d,contentVersion,%{public}d", &v48, v38);
    v37 = (std::string *)v36;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionConfigAsset::sendNotifications()", "%s\n", v36);
    if (v37 != buf)
      free(v37);
  }
  sub_1015A2E04(&v48, "#CLConfig,");
  v19 = std::string::append(&v48, (const std::string::value_type *)objc_msgSend(*(id *)(a1 + 16), "UTF8String"));
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  buf[0].__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  sub_1015A2E04(&__p, ",kNotificationNoMovementSettings,");
  if ((v46 & 0x80u) == 0)
    v21 = (const std::string::value_type *)&__p;
  else
    v21 = (const std::string::value_type *)__p;
  if ((v46 & 0x80u) == 0)
    v22 = v46;
  else
    v22 = v45;
  v23 = std::string::append(buf, v21, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v40 = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)v39 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = (void *)sub_10011A5AC(a1 + 152);
  sub_1007FA930((__int128 *)v39, v25);
  if (SHIBYTE(v40) < 0)
    operator delete(v39[0]);
  if ((char)v46 < 0)
    operator delete(__p);
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  sub_100D6EF24(a1, 10, a1 + 152);
  if (v13 < 0)
    operator delete(v11);
}

void sub_100D7B6A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  void *v42;
  int v43;

  if (v43 < 0)
    operator delete(v42);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D7B788(uint64_t a1)
{
  sub_100D6D640(a1, CFSTR("altimeterSettings.plist"), a1 + 136);
  sub_100D6D640(a1, CFSTR("noMovementSettings.plist"), a1 + 152);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
}

void sub_100D7B7D4(id a1)
{
  qword_1022A02A8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

uint64_t sub_100D7B800(double a1, double a2, double a3)
{
  uint64_t result;
  double v4;

  result = 0;
  if (a1 > 0.0 && a2 > 0.0)
  {
    v4 = a1 * 60.0;
    LODWORD(result) = sub_10009DDEC(a2, a3);
    if (v4 > 100.0)
      return result;
    else
      return 0;
  }
  return result;
}

uint64_t sub_100D7B854(double a1, double a2, double a3)
{
  uint64_t result;
  double v4;

  result = 0;
  if (a1 > 0.0 && a2 > 0.0)
  {
    v4 = a1 * 60.0;
    LODWORD(result) = sub_10009DDEC(a2, a3);
    if (v4 > 140.0)
      return 1;
    else
      return result;
  }
  return result;
}

uint64_t sub_100D7B8A8(double a1, double a2, double a3, double a4)
{
  uint64_t v8;
  double v9;
  _BOOL4 v10;
  int v11;
  _BOOL4 v12;

  v8 = 0;
  if (a1 > 0.0 && a2 > 0.0)
  {
    v9 = a1 * 60.0;
    v10 = sub_10009DDEC(a2, a3);
    v8 = v9 > 140.0 || v10;
  }
  if (a4 > 0.0)
  {
    v11 = 0;
    if (a1 > 0.0 && a2 / a4 > 0.0)
    {
      v12 = sub_10009DDEC(a2 / a4, a3);
      v11 = a1 * 60.0 > 140.0 || v12;
    }
    return v8 | v11;
  }
  return v8;
}

double sub_100D7B970(double a1, double a2)
{
  double result;

  result = 0.0;
  if (a1 >= 0.5)
    return a2 / a1 * 100.0;
  return result;
}

BOOL sub_100D7B998(uint64_t a1)
{
  int v2;
  _BOOL8 result;

  v2 = sub_100F72B18(a1);
  result = 0;
  if (v2 == 1 && *(_QWORD *)(a1 + 224) != 1)
    return *(_QWORD *)(a1 + 112) == 17;
  return result;
}

BOOL sub_100D7B9E0(uint64_t a1)
{
  return a1 == 17;
}

id sub_100D7B9EC(id *a1)
{
  return objc_msgSend(*a1, "count");
}

id sub_100D7BA04@<X0>(id *a1@<X0>, double *a2@<X1>, void **a3@<X8>)
{
  id v6;
  id result;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  double v12;
  double v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _BYTE v26[128];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v6 = objc_msgSend(*a1, "allKeys");
  result = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
  v8 = result;
  if (result)
  {
    v9 = *(_QWORD *)v28;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v28 != v9)
          objc_enumerationMutation(v6);
        v11 = *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)v10);
        sub_100D7BC30(a1, v11, (uint64_t)v26);
        v12 = sub_101245A28((uint64_t)v26);
        v13 = *a2;
        sub_100D7C59C((uint64_t)v26);
        if (v12 > v13)
        {
          v15 = (uint64_t *)a3[1];
          v14 = (unint64_t)a3[2];
          if ((unint64_t)v15 >= v14)
          {
            v17 = ((char *)v15 - (_BYTE *)*a3) >> 3;
            if ((unint64_t)(v17 + 1) >> 61)
              sub_100259694();
            v18 = v14 - (_QWORD)*a3;
            v19 = v18 >> 2;
            if (v18 >> 2 <= (unint64_t)(v17 + 1))
              v19 = v17 + 1;
            if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
              v20 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v20 = v19;
            if (v20)
              v21 = (char *)sub_10025E6A0((uint64_t)(a3 + 2), v20);
            else
              v21 = 0;
            v22 = (uint64_t *)&v21[8 * v17];
            *v22 = v11;
            v16 = v22 + 1;
            v24 = (char *)*a3;
            v23 = (char *)a3[1];
            if (v23 != *a3)
            {
              do
              {
                v25 = *((_QWORD *)v23 - 1);
                v23 -= 8;
                *--v22 = v25;
              }
              while (v23 != v24);
              v23 = (char *)*a3;
            }
            *a3 = v22;
            a3[1] = v16;
            a3[2] = &v21[8 * v20];
            if (v23)
              operator delete(v23);
          }
          else
          {
            *v15 = v11;
            v16 = v15 + 1;
          }
          a3[1] = v16;
        }
        v10 = (char *)v10 + 1;
      }
      while (v10 != v8);
      result = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
      v8 = result;
    }
    while (result);
  }
  return result;
}

void sub_100D7BBF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

id sub_100D7BC30@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id result;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  result = objc_msgSend(*a1, "objectForKey:", a2);
  if (result)
  {
    result = (id)sub_101245A24(&v6, +[NSDictionary dictionaryWithDictionary:](NSDictionary, "dictionaryWithDictionary:", result));
    *(_QWORD *)a3 = v6;
    *(_OWORD *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 24) = v8;
    v5 = v10;
    *(_OWORD *)(a3 + 32) = v9;
    *(_OWORD *)(a3 + 48) = v5;
    *(_OWORD *)(a3 + 64) = v11;
    *(_QWORD *)(a3 + 80) = v12;
    *(_QWORD *)(a3 + 104) = v14;
    *(_OWORD *)(a3 + 88) = v13;
    *(_QWORD *)(a3 + 112) = v15;
    *(_BYTE *)(a3 + 120) = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 120) = 0;
  }
  return result;
}

const __CFString *sub_100D7BCE0(int a1, void *a2)
{
  int v4;
  uint64_t v5;
  id v7;

  if (a1 < 1 || !objc_msgSend(a2, "count"))
    return &stru_1021D8FB8;
  v4 = objc_msgSend(a2, "count");
  if (v4 <= a1)
    LODWORD(v5) = 0;
  else
    LODWORD(v5) = arc4random_uniform(v4 - a1);
  v7 = +[NSMutableArray array](NSMutableArray, "array");
  if ((int)v5 < v4)
  {
    v5 = (int)v5;
    do
    {
      if ((unint64_t)objc_msgSend(v7, "count") >= a1)
        break;
      objc_msgSend(v7, "addObject:", objc_msgSend(a2, "objectAtIndex:", v5++));
    }
    while (v4 != v5);
  }
  return (const __CFString *)objc_msgSend(v7, "componentsJoinedByString:", CFSTR(", "));
}

const __CFString *sub_100D7BDC8(id *a1, int a2)
{
  return sub_100D7BCE0(a2, objc_msgSend(*a1, "allKeys"));
}

double sub_100D7BDF4(id *a1)
{
  id v2;
  id v3;
  uint64_t v4;
  double v5;
  void *i;
  double v7;
  _BYTE v9[128];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = objc_msgSend(*a1, "allKeys");
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (!v3)
    return -1.0;
  v4 = *(_QWORD *)v11;
  v5 = -1.0;
  do
  {
    for (i = 0; i != v3; i = (char *)i + 1)
    {
      if (*(_QWORD *)v11 != v4)
        objc_enumerationMutation(v2);
      sub_100D7BC30(a1, *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)i), (uint64_t)v9);
      v7 = sub_101245A28((uint64_t)v9);
      if (v5 < v7)
        v5 = v7;
      sub_100D7C59C((uint64_t)v9);
    }
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  }
  while (v3);
  return v5;
}

void sub_100D7BF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100D7C59C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100D7BF30@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  void **v7;
  uint64_t v8;
  double v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  unsigned __int8 v16;
  _QWORD v17[2];
  uint64_t v18;
  _QWORD v19[10];
  char v20;
  uint64_t v21;

  sub_100263E50((uint64_t)v17);
  v4 = sub_100263F7C(&v18, (uint64_t)"count: ", 7);
  std::ostream::operator<<(v4, objc_msgSend(*a1, "count"));
  if ((int)objc_msgSend(*a1, "count") >= 1)
  {
    v5 = sub_100263F7C(&v18, (uint64_t)", samples: ", 11);
    v6 = (char *)-[__CFString UTF8String]((id)sub_100D7BCE0(5, objc_msgSend(*a1, "allKeys")), "UTF8String");
    sub_1015A2E04(__p, v6);
    if ((v16 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v16 & 0x80u) == 0)
      v8 = v16;
    else
      v8 = (uint64_t)__p[1];
    sub_100263F7C(v5, (uint64_t)v7, v8);
    if ((char)v16 < 0)
      operator delete(__p[0]);
    v9 = sub_100D7BDF4(a1);
    v10 = sub_100263F7C(&v18, (uint64_t)", oldest age: ", 14);
    v11 = *v10;
    *(uint64_t *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 16) = 2;
    *(_DWORD *)((char *)v10 + *(_QWORD *)(v11 - 24) + 8) = *(_DWORD *)((_BYTE *)v10 + *(_QWORD *)(v11 - 24) + 8) & 0xFFFFFEFB | 4;
    v12 = (_QWORD *)std::ostream::operator<<(v10, v9 / 3600.0);
    sub_100263F7C(v12, (uint64_t)"h", 1);
  }
  std::stringbuf::str(a2, v19);
  *(_QWORD *)((char *)v17
  v18 = v13;
  if (v20 < 0)
    operator delete((void *)v19[8]);
  std::streambuf::~streambuf(v19);
  return std::ios::~ios(&v21);
}

void sub_100D7C108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

id sub_100D7C140(id *a1)
{
  NSObject *v2;
  unsigned int v3;
  id v4;
  id result;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  void **v11;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unsigned int v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  void *__p[2];
  char v26;
  _BYTE v27[12];
  char v28;
  int v29;
  _BYTE *v30;
  uint8_t v31[128];
  uint8_t buf[4];
  unsigned int v33;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102183860);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(*a1, "count");
    *(_DWORD *)buf = 67240192;
    v33 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, %{public}d entries", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102183860);
    v16 = qword_1022A0048;
    v17 = objc_msgSend(*a1, "count");
    LODWORD(__p[0]) = 67240192;
    HIDWORD(__p[0]) = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 0, "WifiAssociatedApCentroidStore, %{public}d entries", __p, 8);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiAssociatedApCentroidKVStoreDictionary::logAllEntries() const", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v4 = *a1;
  result = objc_msgSend(*a1, "countByEnumeratingWithState:objects:count:", &v21, v31, 16);
  v6 = result;
  if (result)
  {
    v7 = *(_QWORD *)v22;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v22 != v7)
          objc_enumerationMutation(v4);
        v9 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)v8);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102183860);
        v10 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          sub_100D7BC30(a1, v9, (uint64_t)buf);
          sub_101245A50((uint64_t)buf, __p);
          v11 = __p;
          if (v26 < 0)
            v11 = (void **)__p[0];
          *(_DWORD *)v27 = 136380675;
          *(_QWORD *)&v27[4] = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, %{private}s", v27, 0xCu);
          if (v26 < 0)
            operator delete(__p[0]);
          sub_100D7C59C((uint64_t)buf);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102183860);
          v12 = qword_1022A0048;
          sub_100D7BC30(a1, v9, (uint64_t)__p);
          sub_101245A50((uint64_t)__p, v27);
          v13 = v27;
          if (v28 < 0)
            v13 = *(_BYTE **)v27;
          v29 = 136380675;
          v30 = v13;
          LODWORD(v20) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 0, "WifiAssociatedApCentroidStore, %{private}s", &v29, v20);
          v15 = v14;
          if (v28 < 0)
            operator delete(*(void **)v27);
          sub_100D7C59C((uint64_t)__p);
          sub_100512490("Generic", 1, 0, 2, "void CLWifiAssociatedApCentroidKVStoreDictionary::logAllEntries() const", "%s\n", v15);
          if (v15 != (char *)buf)
            free(v15);
        }
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v21, v31, 16);
      v6 = result;
    }
    while (result);
  }
  return result;
}

void sub_100D7C574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_100D7C59C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D7C59C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 120))
  {
    if (*(char *)(a1 + 111) < 0)
      operator delete(*(void **)(a1 + 88));
    if (*(char *)(a1 + 31) < 0)
      operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_100D7C5E4(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_100D7C740(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 1)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_BYTE *)(a1 + 16) |= 1u;
      while (1)
      {
        v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          goto LABEL_28;
        v12 += 7;
        v9 = v13++ >= 9;
        if (v9)
        {
          v14 = 0;
          goto LABEL_30;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v14 = 0;
LABEL_30:
      *(_QWORD *)(a1 + 8) = v14;
    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100D7CAF8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  sub_1007B5D48(a2);
  v3 = sub_10009ED0C();
  sub_10134C8C4(v3, (uint64_t)a2);
}

void sub_100D7CBC8(id a1)
{
  qword_102308108 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLSignalEnvironmentProviderSilo"));
}

uint64_t sub_100D7CC7C(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100D7D11C;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102308120 != -1)
    dispatch_once(&qword_102308120, block);
  return qword_102311550;
}

uint64_t sub_100D7CE24(uint64_t a1, double a2, long double a3)
{
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  uint64_t v9;
  char v10;

  v5 = *(_QWORD *)(a1 + 136);
  if (!v5)
    operator new();
  v10 = 0;
  if (*(char *)(a1 + 479) < 0)
  {
    sub_100115CE4(__p, *(void **)(a1 + 456), *(_QWORD *)(a1 + 464));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 456);
    v9 = *(_QWORD *)(a1 + 472);
  }
  v6 = sub_100150C50(v5, (const char *)__p, &v10, a2, a3);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_100D7CF00(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  operator delete();
}

void sub_100D7CF78(id a1)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  _DWORD v4[4];
  uint8_t buf[4];
  int v6;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102183AC8);
  v1 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v6 = 1;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "CLSignalEnvironmentProvider is supported: %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102183AC8);
    v4[0] = 67240192;
    v4[1] = 1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLSignalEnvironmentProvider is supported: %{public}d", v4, 8);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 2, "+[CLSignalEnvironmentProviderAdapter(IsSupported) isSupported]_block_invoke", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
}

void sub_100D7D11C()
{
  operator new();
}

void sub_100D7D164()
{
  operator delete();
}

void sub_100D7D188(uint64_t a1, void *a2)
{
  uint64_t v3;

  v3 = sub_100D7DE88(a1, "CLSignalEnvironmentProvider", a2);
  *(_QWORD *)v3 = off_102183920;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 1;
  *(_BYTE *)(v3 + 156) = 0;
  sub_100602438(v3 + 160, *(void **)(v3 + 32), (uint64_t)sub_100D7DF24, a1);
}

void sub_100D7DD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  char *v22;
  void **v23;
  void **v24;
  uint64_t *v25;
  uint64_t v27;

  if (a19 < 0)
    operator delete(__p);
  if (v22[479] < 0)
    operator delete(*v23);
  if (v22[455] < 0)
    operator delete(*a13);
  if (v22[431] < 0)
    operator delete(*v24);
  sub_100602508(a12);
  v27 = *v25;
  *v25 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  sub_100D7E0FC((uint64_t)v22);
  _Unwind_Resume(a1);
}

uint64_t sub_100D7DE88(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_102183AF8;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100D7DF08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_100D7DF24(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  os_activity_scope_state_s state;
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;

  CLProfilingIdentify("CLSignalEnvironmentProvider::onSignalEnvironmentUpdated");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102183AA8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v9 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSignalEnvironmentProvider::onSignalEnvironmentUpdated", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102183AA8);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "activity";
      v16 = 2050;
      v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSignalEnvironmentProvider::onSignalEnvironmentUpdated\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v9 = 0;
  }
  sub_100D7E6FC(a3, a1, a2);
  if (v9)
    os_activity_scope_leave(&state);
}

void sub_100D7E0DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D7E0FC(uint64_t a1)
{
  *(_QWORD *)a1 = off_102183AF8;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_100D7E170(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_102183920;
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    sub_10055D4D0(v2 + 8);
    operator delete();
  }
  v3 = *(_QWORD *)(a1 + 136);
  if (v3)
  {
    sub_10055D4D0(v3 + 8);
    operator delete();
  }
  v4 = *(_QWORD *)(a1 + 480);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    *(_QWORD *)(a1 + 480) = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*(char *)(a1 + 479) < 0)
    operator delete(*(void **)(a1 + 456));
  if (*(char *)(a1 + 455) < 0)
    operator delete(*(void **)(a1 + 432));
  if (*(char *)(a1 + 431) < 0)
    operator delete(*(void **)(a1 + 408));
  sub_100602508(a1 + 160);
  v5 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return sub_100D7E0FC(a1);
}

void sub_100D7E274(uint64_t a1)
{
  sub_100D7E170(a1);
  operator delete();
}

id sub_100D7E298(uint64_t a1)
{
  *(_BYTE *)(a1 + 108) = 1;
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 112) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8), 5);
}

_QWORD *sub_100D7E2B0@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_100D7E328(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102183AC8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67240192;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLSE, Client registered for notification %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102183AC8);
    v7 = *a2;
    v10[0] = 67240192;
    v10[1] = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLSE, Client registered for notification %{public}d", v10, 8);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSignalEnvironmentProvider::registerForNotificationInternal(const CLSignalEnvironmentProvider_Type::Notification &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  if (!*a2)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 112) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8), 5, 0);
  return 1;
}

uint64_t sub_100D7E4FC(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102183AC8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67240192;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLSE, Client unregistered for notification %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102183AC8);
    v7 = *a2;
    v10[0] = 67240192;
    v10[1] = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLSE, Client unregistered for notification %{public}d", v10, 8);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSignalEnvironmentProvider::unregisterForNotificationInternal(const CLSignalEnvironmentProvider_Type::Notification &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  if (!*a2)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 112) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8), 5);
  return 1;
}

void sub_100D7E6FC(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  const char *v7;
  char *v8;
  NSObject *v9;
  NSObject *v10;
  void **v11;
  void **v12;
  NSObject *v13;
  void **v14;
  NSObject *v15;
  NSObject *v16;
  int v17;
  int v18;
  NSObject *v19;
  void **v20;
  int v21;
  void **v22;
  int v23;
  const char *v24;
  char *v25;
  NSObject *v26;
  NSObject *v27;
  const char *v28;
  const char *v29;
  char *v30;
  const char *v31;
  char *v32;
  const char *v33;
  char *v34;
  void **v35;
  const char *v36;
  char *v37;
  void **v38;
  const char *v39;
  char *v40;
  uint64_t v41;
  _QWORD block[4];
  __int128 v43;
  uint64_t v44;
  __int128 __p;
  uint64_t v46;
  int v47;
  void **v48;
  __int16 v49;
  int v50;
  void *v51[2];
  uint64_t v52;
  _BYTE buf[1632];

  switch(a3)
  {
    case 0:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102183AC8);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "CLSE,download status,NONE", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102183AC8);
        LOWORD(v51[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLSE,download status,NONE", v51, 2);
        v8 = (char *)v7;
        sub_100512490("Generic", 1, 0, 2, "void CLSignalEnvironmentProvider::onSignalEnvironmentUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v7);
        goto LABEL_70;
      }
      break;
    case 1:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102183AC8);
      v26 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "CLSE,download status,STARTED", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102183AC8);
        LOWORD(v51[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLSE,download status,STARTED", v51, 2);
        v34 = (char *)v33;
        sub_100512490("Generic", 1, 0, 2, "void CLSignalEnvironmentProvider::onSignalEnvironmentUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v33);
        if (v34 != buf)
          free(v34);
      }
      *(CFAbsoluteTime *)(a1 + 144) = CFAbsoluteTimeGetCurrent();
      break;
    case 2:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102183AC8);
      v9 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "CLSE,download status,COMPLETED", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102183AC8);
        LOWORD(v51[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLSE,download status,COMPLETED", v51, 2);
        v30 = (char *)v29;
        sub_100512490("Generic", 1, 0, 2, "void CLSignalEnvironmentProvider::onSignalEnvironmentUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      sub_100605D40(a2, (uint64_t)v51);
      *(_DWORD *)(a1 + 152) = 1;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102183AC8);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v11 = v51;
        if (v52 < 0)
          v11 = (void **)v51[0];
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLSE,downloaded,%{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102183AC8);
        v35 = v51;
        if (v52 < 0)
          v35 = (void **)v51[0];
        v47 = 136446210;
        v48 = v35;
        LODWORD(v41) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLSE,downloaded,%{public}s", &v47, v41);
        v37 = (char *)v36;
        sub_100512490("Generic", 1, 0, 2, "void CLSignalEnvironmentProvider::onSignalEnvironmentUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v36);
        if (v37 != buf)
          free(v37);
      }
      if (v52 >= 0)
        v12 = v51;
      else
        v12 = (void **)v51[0];
      if (!sub_1005169DC((const char *)v12, 4))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102183AC8);
        v13 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
        {
          v14 = v51;
          if (v52 < 0)
            v14 = (void **)v51[0];
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#Warning,Cannot set protection class for CLSE downloaded file,%{public}s", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102183AC8);
          v38 = v51;
          if (v52 < 0)
            v38 = (void **)v51[0];
          v47 = 136446210;
          v48 = v38;
          LODWORD(v41) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,Cannot set protection class for CLSE downloaded file,%{public}s", &v47, v41);
          v40 = (char *)v39;
          sub_100512490("Generic", 1, 0, 2, "void CLSignalEnvironmentProvider::onSignalEnvironmentUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v39);
          if (v40 != buf)
            free(v40);
        }
      }
      *(CFAbsoluteTime *)(a1 + 144) = CFAbsoluteTimeGetCurrent();
      v15 = dispatch_queue_create(off_1022FB2E8, 0);
      if (*(char *)(a1 + 479) < 0)
      {
        sub_100115CE4(buf, *(void **)(a1 + 456), *(_QWORD *)(a1 + 464));
      }
      else
      {
        *(_OWORD *)buf = *(_OWORD *)(a1 + 456);
        *(_QWORD *)&buf[16] = *(_QWORD *)(a1 + 472);
      }
      block[0] = _NSConcreteStackBlock;
      block[1] = 3321888768;
      block[2] = sub_100D7F3DC;
      block[3] = &unk_1021839F0;
      if (SHIBYTE(v52) < 0)
      {
        sub_100115CE4(&v43, v51[0], (unint64_t)v51[1]);
      }
      else
      {
        v43 = *(_OWORD *)v51;
        v44 = v52;
      }
      if ((buf[23] & 0x80000000) != 0)
      {
        sub_100115CE4(&__p, *(void **)buf, *(unint64_t *)&buf[8]);
      }
      else
      {
        __p = *(_OWORD *)buf;
        v46 = *(_QWORD *)&buf[16];
      }
      dispatch_async(v15, block);
      dispatch_release(v15);
      if (SHIBYTE(v46) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v44) < 0)
        operator delete((void *)v43);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      goto LABEL_85;
    case 3:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102183AC8);
      v16 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "CLSE,download status,FAILED", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102183AC8);
        LOWORD(v51[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLSE,download status,FAILED", v51, 2);
        v32 = (char *)v31;
        sub_100512490("Generic", 1, 0, 2, "void CLSignalEnvironmentProvider::onSignalEnvironmentUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v31);
        if (v32 != buf)
          free(v32);
      }
      v17 = *(_DWORD *)(a1 + 152);
      if (v17 < 5)
        v18 = v17 + 1;
      else
        v18 = v17 + 10;
      *(_DWORD *)(a1 + 152) = v18;
      sub_100605D40(a2, (uint64_t)v51);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102183AC8);
      v19 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v20 = v51;
        if (v52 < 0)
          v20 = (void **)v51[0];
        v21 = *(_DWORD *)(a1 + 152);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v20;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = v21;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "CLSE,download request failed,%{public}s,retryMultiplier,%{public}d", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102183AC8);
        v22 = v51;
        if (v52 < 0)
          v22 = (void **)v51[0];
        v23 = *(_DWORD *)(a1 + 152);
        v47 = 136446466;
        v48 = v22;
        v49 = 1026;
        v50 = v23;
        LODWORD(v41) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLSE,download request failed,%{public}s,retryMultiplier,%{public}d", &v47, v41);
        v25 = (char *)v24;
        sub_100512490("Generic", 1, 0, 2, "void CLSignalEnvironmentProvider::onSignalEnvironmentUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
LABEL_85:
      if (SHIBYTE(v52) < 0)
        operator delete(v51[0]);
      break;
    default:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102183AC8);
      v27 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&buf[4] = a3;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "CLSE,download status,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102183AC8);
        LODWORD(v51[0]) = 67240192;
        HIDWORD(v51[0]) = a3;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLSE,download status,%{public}d", v51, 8);
        v8 = (char *)v28;
        sub_100512490("Generic", 1, 0, 2, "void CLSignalEnvironmentProvider::onSignalEnvironmentUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v28);
LABEL_70:
        if (v8 != buf)
          free(v8);
      }
      break;
  }
}

void sub_100D7F364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a33 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100D7F3DC(uint64_t a1)
{
  char **v2;
  int v3;
  char *v4;
  const char **v5;
  const char *v6;
  NSObject *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  NSObject *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  int v19;
  void *v20;
  __int16 v21;
  const char *v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  const char *v26;

  v2 = (char **)(a1 + 32);
  v3 = *(char *)(a1 + 55);
  v4 = (char *)(a1 + 32);
  if (v3 < 0)
    v4 = *v2;
  v5 = (const char **)(a1 + 56);
  v6 = (const char *)(a1 + 56);
  if (*(char *)(a1 + 79) < 0)
    v6 = *v5;
  sub_100513F8C(v4, v6);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102183AC8);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v8 = (const char *)v2;
    if (*(char *)(a1 + 55) < 0)
      v8 = *v2;
    v9 = (const char *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0)
      v9 = *v5;
    *(_DWORD *)buf = 136446466;
    v24 = v8;
    v25 = 2082;
    v26 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLSE,decompressed,%{public}s,to,%{public}s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102183AC8);
    if (*(char *)(a1 + 55) < 0)
      v2 = (char **)*v2;
    v13 = (const char *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0)
      v13 = *v5;
    v19 = 136446466;
    v20 = v2;
    v21 = 2082;
    v22 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLSE,decompressed,%{public}s,to,%{public}s", &v19, 22);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLSignalEnvironmentProvider::onSignalEnvironmentUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)_block_invoke", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  v10 = (const char *)(a1 + 56);
  if (*(char *)(a1 + 79) < 0)
    v10 = *v5;
  if (!sub_1005169DC(v10, 4))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102183AC8);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v12 = (const char *)(a1 + 56);
      if (*(char *)(a1 + 79) < 0)
        v12 = *v5;
      *(_DWORD *)buf = 136446210;
      v24 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "#Warning,Cannot set protection class for CLSE decompressed file,%{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102183AC8);
      if (*(char *)(a1 + 79) < 0)
        v5 = (const char **)*v5;
      v19 = 136446210;
      v20 = v5;
      LODWORD(v18) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,Cannot set protection class for CLSE decompressed file,%{public}s", &v19, v18);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLSignalEnvironmentProvider::onSignalEnvironmentUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)_block_invoke", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
  }
}

_BYTE *sub_100D7F784(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _BYTE *result;
  __int128 v6;

  if (*(char *)(a2 + 55) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 32), *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  result = (_BYTE *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
    return sub_100115CE4(result, *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  v6 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)result = v6;
  return result;
}

void sub_100D7F808(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 55) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void sub_100D7F824(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

uint64_t sub_100D7F868(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = &off_102183C48;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_100D7F93C()
{
  operator new();
}

void sub_100D7F9E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_100D7FA24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102183AA8);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_102183AA8);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData>::removeClient(int) [Notification_T = CLSignalEnvironmentProvider_Type::Notification, NotificationData_T = CLSignalEnvironmentProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

BOOL sub_100D7FC98(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102183AA8);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102183AA8);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLSignalEnvironmentProvider_Type::Notification, NotificationData_T = CLSignalEnvironmentProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100D7FF18(uint64_t a1, int *a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v13;
  __int128 v14;
  int *v15;

  v6 = operator new(0x20uLL);
  v6[2] = 0;
  *v6 = off_102183BD8;
  v6[1] = 0;
  v7 = *a3;
  *((_QWORD *)&v14 + 1) = v6;
  v6[3] = v7;
  *(_QWORD *)&v14 = v6 + 3;
  v13 = *a2;
  v15 = &v13;
  v8 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v13, (uint64_t)&unk_101B9EB60, &v15);
  sub_1002B7674((uint64_t)(v8 + 8), &v14);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return 1;
}

void sub_100D7FFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100D80000(uint64_t a1, signed __int32 *a2, _QWORD *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v30[20];
  __int16 v31;
  _QWORD *v32;
  __int16 v33;
  std::__shared_weak_count *v34;
  _QWORD **v35;
  _QWORD *v36[3];
  std::__shared_weak_count *v37;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102183AA8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v30 = 2082;
      *(_QWORD *)&v30[2] = "";
      *(_WORD *)&v30[10] = 2082;
      *(_QWORD *)&v30[12] = "activity";
      v31 = 2082;
      v32 = v10;
      v33 = 2050;
      v34 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v35 = v36;
      memset(v36, 0, sizeof(v36));
      v37 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v35);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v30, *(_QWORD **)&v30[8]);
      v21 = v37;
      if (v37)
      {
        v22 = (unint64_t *)&v37->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v35, v36[0]);
    }
    if (a4)
    {
      v24 = operator new(0x20uLL);
      v24[2] = 0;
      *v24 = off_102183BD8;
      v24[1] = 0;
      v24[3] = *a3;
      *(_QWORD *)buf = v24 + 3;
      *(_QWORD *)v30 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v25 = *(std::__shared_weak_count **)v30;
      if (*(_QWORD *)v30)
      {
        v26 = (unint64_t *)(*(_QWORD *)v30 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_100D80C88();
    os_activity_scope_leave(&state);
  }
}

void sub_100D80638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100D80684(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102183AA8);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102183AA8);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData>::listClients() [Notification_T = CLSignalEnvironmentProvider_Type::Notification, NotificationData_T = CLSignalEnvironmentProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102183AA8);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102183AA8);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData>::listClients() [Notification_T = CLSignalEnvironmentProvider_Type::Notification, NotificationData_T = CLSignalEnvironmentProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_102183AA8);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102183AA8);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData>::listClients() [Notification_T = CLSignalEnvironmentProvider_Type::Notification, NotificationData_T = CLSignalEnvironmentProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_100D80C30(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100D80C5C(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100D80C88()
{
  operator new();
}

void sub_100D80D18(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_100043F7C(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_100244F14(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102183AA8);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102183AA8);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLSignalEnvironmentProvider_Type::Notification, NotificationData_T = CLSignalEnvironmentProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

void sub_100D810EC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102183BD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100D81100(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102183BD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100D8113C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

id sub_100D8115C(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102183C18);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C24B15 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102183C18);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102183C18);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C24B15 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102183C18);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLSignalEnvironmentProvider_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_100D81508(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_100D81534()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C24960;
      v1[3] = unk_101C24970;
      v1[4] = xmmword_101C24980;
      v1[0] = xmmword_101C24940;
      v1[1] = unk_101C24950;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100D81608(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

void sub_100D81620(uint64_t a1)
{
  int v2;
  void *__p[2];
  uint64_t v4;

  sub_1015A2E04(__p, "");
  *(_QWORD *)a1 = &_mh_execute_header;
  *(_WORD *)(a1 + 8) = 257;
  if (SHIBYTE(v4) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 16), __p[0], (unint64_t)__p[1]);
    v2 = SHIBYTE(v4);
    *(_QWORD *)(a1 + 40) = 0;
    if (v2 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 32) = v4;
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_QWORD *)(a1 + 48) = 0;
  operator new();
}

void sub_100D817C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  operator delete();
}

void sub_100D81890(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_100E0989C(*(_QWORD *)(a1 + 56), a2);
}

void sub_100D81898(uint64_t a1)
{
  sub_100E098A4(*(_QWORD *)(a1 + 56));
}

void sub_100D818A0(uint64_t a1, unint64_t a2)
{
  sub_100E098AC(*(_QWORD *)(a1 + 56), a2);
}

uint64_t sub_100D818A8(uint64_t a1)
{
  return sub_100E098B4(*(_QWORD *)(a1 + 56));
}

void sub_100D818D0(uint64_t a1)
{
  sub_10067F6A0(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 32));
}

void sub_100D818DC(uint64_t a1, double a2)
{
  uint64_t v2;
  double v3;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = a2;
  sub_10067D760(*(_QWORD *)(v2 + 32), (uint64_t)&v3);
}

uint64_t sub_100D81908@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100E098C4(*(_QWORD *)(a1 + 56), a2);
}

_BYTE *sub_100D81910(uint64_t a1)
{
  return sub_100D81918(*(_BYTE **)(a1 + 56));
}

_BYTE *sub_100D81918(_BYTE *result)
{
  _QWORD v1[6];

  if (*result)
  {
    v1[0] = 0;
    v1[1] = v1;
    v1[2] = 0x3812000000;
    v1[3] = sub_1002071C4;
    v1[4] = sub_100207D34;
    v1[5] = 0;
    sub_100D81E0C();
  }
  return result;
}

void sub_100D81C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,__int16 a29,uint64_t a30,uint64_t a31,uint64_t a32,uint8_t buf)
{
  uint64_t v34;

  _Block_object_dispose(&a18, 8);
  _Block_object_dispose(&a22, 8);
  v34 = a28;
  a28 = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  _Unwind_Resume(a1);
}

void sub_100D81C88()
{
  JUMPOUT(0x100D81C90);
}

void sub_100D81DD8()
{
  __cxa_end_catch();
  JUMPOUT(0x100D81C50);
}

void sub_100D81DEC(void *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  JUMPOUT(0x100D81C80);
}

uint64_t sub_100D81DFC(uint64_t a1)
{
  return sub_100E098BC(*(_QWORD *)(a1 + 56));
}

void sub_100D81E04(uint64_t a1)
{
  sub_100E098CC(*(_QWORD *)(a1 + 56));
}

void sub_100D81E0C()
{
  operator new();
}

void sub_100D81EA0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void sub_100D81EE0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  NSObject *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint8_t *v15;
  uint64_t v16;
  _BYTE v17[24];
  uint64_t v18;
  uint8_t buf[4];
  _QWORD *v20;
  __int16 v21;
  unint64_t v22;
  __int16 v23;
  uint64_t v24;

  v7 = a1[6];
  ++*(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  v16 = nullsub_34(0);
  if ((sub_1006F7810(a2) & 1) != 0)
  {
    if ((sub_1006F7E70(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 48)) & 1) == 0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102183C60);
      v8 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
      {
        v9 = (_QWORD *)(v7 + 8);
        if (*(char *)(v7 + 31) < 0)
          v9 = (_QWORD *)*v9;
        *(_DWORD *)buf = 136446210;
        v20 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to save entry to persisted database, table %{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102183C60);
        v10 = (_QWORD *)(v7 + 8);
        if (*(char *)(v7 + 31) < 0)
          v10 = (_QWORD *)*v10;
        *(_DWORD *)v17 = 136446210;
        *(_QWORD *)&v17[4] = v10;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "Failed to save entry to persisted database, table %{public}s", v17, 12, v16, -1, 0xFFFFFFFFLL, 0xFFFFFFFFLL, *(_OWORD *)v17, *(_QWORD *)&v17[16], v18);
LABEL_28:
        v15 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 0, "void CLManagedLocationDatabase<CLWifiLocationDatabase, CLWifiLocationDatabase::WifiData>::onDataAvailable() [Database = CLWifiLocationDatabase, DataType = CLWifiLocationDatabase::WifiData]_block_invoke", "%s\n", v11);
        if (v15 != buf)
          free(v15);
      }
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102183C60);
    v12 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      v13 = (_QWORD *)(v7 + 8);
      if (*(char *)(v7 + 31) < 0)
        v13 = (_QWORD *)*v13;
      *(_DWORD *)buf = 136446722;
      v20 = v13;
      v21 = 2082;
      v22 = 0x8000000101C24B60 & 0x7FFFFFFFFFFFFFFFLL;
      v23 = 2050;
      v24 = a4;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Failed to find entry from in-memory database, table, %{public}s, type %{public}s, rowid, %{public}lld", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102183C60);
      v14 = (_QWORD *)(v7 + 8);
      if (*(char *)(v7 + 31) < 0)
        v14 = (_QWORD *)*v14;
      *(_DWORD *)v17 = 136446722;
      *(_QWORD *)&v17[4] = v14;
      *(_WORD *)&v17[12] = 2082;
      *(_QWORD *)&v17[14] = 0x8000000101C24B60 & 0x7FFFFFFFFFFFFFFFLL;
      *(_WORD *)&v17[22] = 2050;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "Failed to find entry from in-memory database, table, %{public}s, type %{public}s, rowid, %{public}lld", v17, 32, v16, -1, 0xFFFFFFFFLL, 0xFFFFFFFFLL, *(_OWORD *)v17, *(_QWORD *)&v17[16], a4);
      goto LABEL_28;
    }
  }
}

void sub_100D82288(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_100D822B4()
{
  sub_1015A2E04(qword_102311558, "");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102311558, (void *)&_mh_execute_header);
}

_QWORD *sub_100D822F8(_QWORD *a1, const std::string *a2)
{
  std::string *v4;

  *a1 = 0;
  v4 = (std::string *)sub_1015A2E04(a1 + 1, "");
  std::string::operator=(v4, a2);
  return a1;
}

void sub_100D82344(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D82364(uint64_t a1)
{
  if (*(_QWORD *)a1)
  {

    *(_QWORD *)a1 = 0;
  }
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_100D823A8(id *a1)
{
  if (*a1)
  {

    *a1 = 0;
  }
}

void sub_100D823D8(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  char *v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  uint8_t buf[4];
  _QWORD *v10;

  if (*(_QWORD *)a1)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102183C80);
    v2 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s,os_transaction already taken, not taking another", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102183C80);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v7 = 136315138;
      v8 = v4;
      v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "%s,os_transaction already taken, not taking another", (const char *)&v7);
      sub_100512490("Generic", 1, 0, 2, "void CLOSTransactionWrapper::Create()", "%s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
  }
  else
  {
    v6 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v6 = (_QWORD *)*v6;
    *(_QWORD *)a1 = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", v6);
  }
}

void sub_100D825D0(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100D82798(id a1)
{
  qword_102308128 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLWeatherServiceSilo"));
}

void sub_100D830F0(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

id sub_100D8311C(double a1, double a2)
{
  int v4;
  id v5;
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[2];
  __int16 v11;
  int v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  int v16;

  v4 = sub_1001133C0(a1, a2);
  if (v4)
    v5 = +[GEOLocationShifter isLocationShiftRequiredForCoordinate:](GEOLocationShifter, "isLocationShiftRequiredForCoordinate:", a1, a2);
  else
    v5 = 0;
  if (qword_1022A0000 != -1)
    dispatch_once(&qword_1022A0000, &stru_102183CE0);
  v6 = qword_1022A0008;
  if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240448;
    v14 = v4;
    v15 = 1026;
    v16 = (int)v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLAccessory,specialCarPlayRegion,%{public}d,isShiftingSupported,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_102183CE0);
    v10[0] = 67240448;
    v10[1] = v4;
    v11 = 1026;
    v12 = (int)v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLAccessory,specialCarPlayRegion,%{public}d,isShiftingSupported,%{public}d", v10, 14);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLAccessoryUtils::isShiftingSupported(double, double)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  return v5;
}

id sub_100D83318()
{
  id v0;
  NSObject *v1;
  char *v3;
  _DWORD v4[4];
  uint8_t buf[4];
  int v6;

  v0 = +[GEOLocationShifter isLocationShiftEnabled](GEOLocationShifter, "isLocationShiftEnabled");
  if (qword_1022A0000 != -1)
    dispatch_once(&qword_1022A0000, &stru_102183CE0);
  v1 = qword_1022A0008;
  if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    v6 = (int)v0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "CLAccessory,isShiftingSupported,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_102183CE0);
    v4[0] = 67240192;
    v4[1] = (_DWORD)v0;
    v3 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLAccessory,isShiftingSupported,%{public}d", v4, 8);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLAccessoryUtils::isShiftingSupportedNoAprioriLocation()", "%s\n", v3);
    if (v3 != (char *)buf)
      free(v3);
  }
  return v0;
}

uint64_t sub_100D834D0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int Count;
  NSObject *v6;
  CFIndex v7;
  const __CFDictionary *ValueAtIndex;
  NSObject *v9;
  _BYTE *v10;
  _BYTE *v11;
  __int128 *v12;
  __int128 *v13;
  char *v14;
  uint64_t *v15;
  NSObject *v16;
  const char *v17;
  char *v18;
  NSObject *v19;
  const char *v20;
  NSObject *v21;
  const char *v22;
  NSObject *v23;
  const char *v24;
  NSObject *v25;
  const char *v26;
  NSObject *v27;
  const char *v28;
  _BYTE *v29;
  __int128 *v30;
  __int128 *v31;
  char *v32;
  const char *v33;
  char *v34;
  const char *v35;
  NSObject *v36;
  NSObject *v37;
  int v38;
  NSObject *v39;
  int v40;
  NSObject *v41;
  int v42;
  NSObject *v43;
  int v44;
  NSObject *v45;
  int v46;
  NSObject *v47;
  int v48;
  double v49;
  NSObject *v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  char *v56;
  NSObject *v57;
  NSObject *v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  int v65;
  const char *v66;
  char *v67;
  int v68;
  const char *v69;
  char *v70;
  int v71;
  const char *v72;
  char *v73;
  int v74;
  const char *v75;
  char *v76;
  int v77;
  const char *v78;
  char *v79;
  int v80;
  const char *v81;
  char *v82;
  const char *v83;
  const char *v84;
  char *v85;
  const char *v86;
  char *v87;
  uint64_t v88;
  double v89;
  BOOL v90;
  int v91;
  int v92;
  int v93;
  BOOL v94;
  BOOL v95;
  double v96[2];
  CFArrayRef theArray;
  int v98;
  const char *v99;
  __int16 v100;
  _BYTE *v101;
  __int16 v102;
  __int128 *v103;
  __int16 v104;
  __int128 *v105;
  __int16 v106;
  char *v107;
  __int16 v108;
  int v109;
  _BYTE __str[32];
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  _BYTE __p[27];
  _BYTE buf[12];
  __int16 v120;
  _BYTE *v121;
  __int16 v122;
  __int128 *v123;
  __int16 v124;
  __int128 *v125;
  __int16 v126;
  char *v127;
  __int16 v128;
  int v129;

  v4 = (_QWORD *)(a1 + 8);
  sub_10065C9EC(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *v4 = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 36) = 180;
  *(_WORD *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 28) = 0xA00000041;
  *(_OWORD *)(a1 + 48) = xmmword_101BB8B70;
  theArray = 0;
  if (sub_100527258(a2, CFSTR("AccessorySetting"), (CFTypeRef *)&theArray))
  {
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_102183CE0);
      v6 = qword_1022A0008;
      if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&buf[4] = Count;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "CLAccessory,MA-OTA,DenyLocation AccessoryList,count,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0000 != -1)
          dispatch_once(&qword_1022A0000, &stru_102183CE0);
        *(_DWORD *)__str = 67240192;
        *(_DWORD *)&__str[4] = Count;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 1, "CLAccessory,MA-OTA,DenyLocation AccessoryList,count,%{public}d", __str, 8);
        v85 = (char *)v84;
        sub_100512490("Generic", 1, 0, 2, "void CLAccessoryUtils::CLAccessoryMobileAssetReader::readConfig(const CLNameValuePair &)", "%s\n", v84);
        if (v85 != buf)
          free(v85);
      }
      if (Count >= 1)
      {
        v7 = 0;
        while (1)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v7);
          sub_1001C1D6C((int)v96, ValueAtIndex);
          v117 = 0u;
          memset(__p, 0, 25);
          v115 = 0u;
          v116 = 0u;
          v113 = 0u;
          v114 = 0u;
          v111 = 0u;
          v112 = 0u;
          memset(__str, 0, sizeof(__str));
          *(_WORD *)&__p[25] = 257;
          if (!sub_1000BCB64((uint64_t)v96, "manufacturer", (std::string *)__str))
            break;
          if (!sub_1000BCB64((uint64_t)v96, "name", (std::string *)&__str[24]))
          {
            if (qword_1022A0000 != -1)
              dispatch_once(&qword_1022A0000, &stru_102183CE0);
            v19 = qword_1022A0008;
            if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "name";
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "CLAccessory,MA-OTA,Unable to read accessory %{public}s", buf, 0xCu);
            }
            if (!sub_1001BFF7C(115, 0))
              goto LABEL_78;
            bzero(buf, 0x65CuLL);
            if (qword_1022A0000 != -1)
              dispatch_once(&qword_1022A0000, &stru_102183CE0);
            v98 = 136446210;
            v99 = "name";
            LODWORD(v88) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 16, "CLAccessory,MA-OTA,Unable to read accessory %{public}s", &v98, v88);
            v18 = (char *)v20;
            sub_100512490("Generic", 1, 0, 0, "void CLAccessoryUtils::CLAccessoryMobileAssetReader::readConfig(const CLNameValuePair &)", "%s\n", v20);
            goto LABEL_112;
          }
          if (!sub_1000BCB64((uint64_t)v96, "model", (std::string *)&v112))
          {
            if (qword_1022A0000 != -1)
              dispatch_once(&qword_1022A0000, &stru_102183CE0);
            v21 = qword_1022A0008;
            if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "model";
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "CLAccessory,MA-OTA,Unable to get accessory %{public}s", buf, 0xCu);
            }
            if (!sub_1001BFF7C(115, 0))
              goto LABEL_78;
            bzero(buf, 0x65CuLL);
            if (qword_1022A0000 != -1)
              dispatch_once(&qword_1022A0000, &stru_102183CE0);
            v98 = 136446210;
            v99 = "model";
            LODWORD(v88) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 16, "CLAccessory,MA-OTA,Unable to get accessory %{public}s", &v98, v88);
            v18 = (char *)v22;
            sub_100512490("Generic", 1, 0, 0, "void CLAccessoryUtils::CLAccessoryMobileAssetReader::readConfig(const CLNameValuePair &)", "%s\n", v22);
            goto LABEL_112;
          }
          if (!sub_1000BCB64((uint64_t)v96, "firmwareversion", (std::string *)&v115))
          {
            if (qword_1022A0000 != -1)
              dispatch_once(&qword_1022A0000, &stru_102183CE0);
            v23 = qword_1022A0008;
            if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "firmwareversion";
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "CLAccessory,MA-OTA,Unable to get accessory %{public}s", buf, 0xCu);
            }
            if (!sub_1001BFF7C(115, 0))
              goto LABEL_78;
            bzero(buf, 0x65CuLL);
            if (qword_1022A0000 != -1)
              dispatch_once(&qword_1022A0000, &stru_102183CE0);
            v98 = 136446210;
            v99 = "firmwareversion";
            LODWORD(v88) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 16, "CLAccessory,MA-OTA,Unable to get accessory %{public}s", &v98, v88);
            v18 = (char *)v24;
            sub_100512490("Generic", 1, 0, 0, "void CLAccessoryUtils::CLAccessoryMobileAssetReader::readConfig(const CLNameValuePair &)", "%s\n", v24);
            goto LABEL_112;
          }
          if (!sub_1000BCB64((uint64_t)v96, "hardwareversion", (std::string *)((char *)&v116 + 8)))
          {
            if (qword_1022A0000 != -1)
              dispatch_once(&qword_1022A0000, &stru_102183CE0);
            v25 = qword_1022A0008;
            if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "hardwareversion";
              _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "CLAccessory,MA-OTA,Unable to get accessory %{public}s", buf, 0xCu);
            }
            if (!sub_1001BFF7C(115, 0))
              goto LABEL_78;
            bzero(buf, 0x65CuLL);
            if (qword_1022A0000 != -1)
              dispatch_once(&qword_1022A0000, &stru_102183CE0);
            v98 = 136446210;
            v99 = "hardwareversion";
            LODWORD(v88) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 16, "CLAccessory,MA-OTA,Unable to get accessory %{public}s", &v98, v88);
            v18 = (char *)v26;
            sub_100512490("Generic", 1, 0, 0, "void CLAccessoryUtils::CLAccessoryMobileAssetReader::readConfig(const CLNameValuePair &)", "%s\n", v26);
            goto LABEL_112;
          }
          if ((sub_1001E4874((uint64_t)v96, "isdenied", &__p[24]) & 1) == 0)
          {
            if (qword_1022A0000 != -1)
              dispatch_once(&qword_1022A0000, &stru_102183CE0);
            v27 = qword_1022A0008;
            if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "isdenied";
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "CLAccessory,MA-OTA,Unable to get accessory %{public}s", buf, 0xCu);
            }
            if (!sub_1001BFF7C(115, 0))
              goto LABEL_78;
            bzero(buf, 0x65CuLL);
            if (qword_1022A0000 != -1)
              dispatch_once(&qword_1022A0000, &stru_102183CE0);
            v98 = 136446210;
            v99 = "isdenied";
            LODWORD(v88) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 16, "CLAccessory,MA-OTA,Unable to get accessory %{public}s", &v98, v88);
            v18 = (char *)v35;
            sub_100512490("Generic", 1, 0, 0, "void CLAccessoryUtils::CLAccessoryMobileAssetReader::readConfig(const CLNameValuePair &)", "%s\n", v35);
            goto LABEL_112;
          }
          if (qword_1022A0000 != -1)
            dispatch_once(&qword_1022A0000, &stru_102183CE0);
          v9 = qword_1022A0008;
          if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_INFO))
          {
            v10 = __str;
            if (__str[23] < 0)
              v10 = *(_BYTE **)__str;
            if (v111 >= 0)
              v11 = &__str[24];
            else
              v11 = *(_BYTE **)&__str[24];
            v12 = &v112;
            if (SBYTE7(v113) < 0)
              v12 = (__int128 *)v112;
            v13 = &v115;
            if (SBYTE7(v116) < 0)
              v13 = (__int128 *)v115;
            v14 = (char *)&v116 + 8;
            if (v117 < 0)
              v14 = (char *)*((_QWORD *)&v116 + 1);
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = v10;
            v120 = 2082;
            v121 = v11;
            v122 = 2082;
            v123 = v12;
            v124 = 2082;
            v125 = v13;
            v126 = 2082;
            v127 = v14;
            v128 = 1026;
            v129 = __p[24];
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "CLAccessory,MA-OTA,Read settings for accessory,manufacturer,%{public}s,name,%{public}s,model,%{public}s,fw,%{public}s,hw,%{public}s,denied,%{public}d", buf, 0x3Au);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0000 != -1)
              dispatch_once(&qword_1022A0000, &stru_102183CE0);
            v28 = __str;
            if (__str[23] < 0)
              v28 = *(const char **)__str;
            if (v111 >= 0)
              v29 = &__str[24];
            else
              v29 = *(_BYTE **)&__str[24];
            v30 = &v112;
            if (SBYTE7(v113) < 0)
              v30 = (__int128 *)v112;
            v31 = &v115;
            if (SBYTE7(v116) < 0)
              v31 = (__int128 *)v115;
            v32 = (char *)&v116 + 8;
            if (v117 < 0)
              v32 = (char *)*((_QWORD *)&v116 + 1);
            v98 = 136447490;
            v99 = v28;
            v100 = 2082;
            v101 = v29;
            v102 = 2082;
            v103 = v30;
            v104 = 2082;
            v105 = v31;
            v106 = 2082;
            v107 = v32;
            v108 = 1026;
            v109 = __p[24];
            LODWORD(v88) = 58;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 1, "CLAccessory,MA-OTA,Read settings for accessory,manufacturer,%{public}s,name,%{public}s,model,%{public}s,fw,%{public}s,hw,%{public}s,denied,%{public}d", &v98, v88);
            v34 = (char *)v33;
            sub_100512490("Generic", 1, 0, 2, "void CLAccessoryUtils::CLAccessoryMobileAssetReader::readConfig(const CLNameValuePair &)", "%s\n", v33);
            if (v34 != buf)
              free(v34);
          }
          *(_QWORD *)buf = &__str[24];
          v15 = sub_100D858E8((uint64_t **)a1, (const void **)&__str[24], (uint64_t)&unk_101B9EB60, (__int128 **)buf);
          std::string::operator=((std::string *)(v15 + 7), (const std::string *)__str);
          std::string::operator=((std::string *)(v15 + 10), (const std::string *)&__str[24]);
          std::string::operator=((std::string *)(v15 + 13), (const std::string *)&v112);
          std::string::operator=((std::string *)(v15 + 16), (const std::string *)((char *)&v113 + 8));
          std::string::operator=((std::string *)(v15 + 19), (const std::string *)&v115);
          std::string::operator=((std::string *)(v15 + 22), (const std::string *)((char *)&v116 + 8));
          std::string::operator=((std::string *)(v15 + 25), (const std::string *)__p);
          *((_WORD *)v15 + 112) = *(_WORD *)&__p[24];
          *((_BYTE *)v15 + 226) = __p[26];
LABEL_78:
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          if (SHIBYTE(v117) < 0)
            operator delete(*((void **)&v116 + 1));
          if (SBYTE7(v116) < 0)
            operator delete((void *)v115);
          if (SHIBYTE(v114) < 0)
            operator delete(*((void **)&v113 + 1));
          if (SBYTE7(v113) < 0)
            operator delete((void *)v112);
          if (SHIBYTE(v111) < 0)
            operator delete(*(void **)&__str[24]);
          if ((__str[23] & 0x80000000) != 0)
            operator delete(*(void **)__str);
          sub_10011A5A8(v96);
          if (Count == ++v7)
            goto LABEL_119;
        }
        if (qword_1022A0000 != -1)
          dispatch_once(&qword_1022A0000, &stru_102183CE0);
        v16 = qword_1022A0008;
        if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "manufacturer";
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "CLAccessory,MA-OTA,Unable to get accessory %{public}s", buf, 0xCu);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_78;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0000 != -1)
          dispatch_once(&qword_1022A0000, &stru_102183CE0);
        v98 = 136446210;
        v99 = "manufacturer";
        LODWORD(v88) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 16, "CLAccessory,MA-OTA,Unable to get accessory %{public}s", &v98, v88);
        v18 = (char *)v17;
        sub_100512490("Generic", 1, 0, 0, "void CLAccessoryUtils::CLAccessoryMobileAssetReader::readConfig(const CLNameValuePair &)", "%s\n", v17);
LABEL_112:
        if (v18 != buf)
          free(v18);
        goto LABEL_78;
      }
    }
    else
    {
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_102183CE0);
      v36 = qword_1022A0008;
      if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "CLAccessory,MA-OTA,NULL accessoryArray", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0000 != -1)
          dispatch_once(&qword_1022A0000, &stru_102183CE0);
        *(_WORD *)__str = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 16, "CLAccessory,MA-OTA,NULL accessoryArray", __str, 2);
        v87 = (char *)v86;
        sub_100512490("Generic", 1, 0, 0, "void CLAccessoryUtils::CLAccessoryMobileAssetReader::readConfig(const CLNameValuePair &)", "%s\n", v86);
        if (v87 != buf)
          free(v87);
      }
    }
  }
LABEL_119:
  v95 = *(_BYTE *)(a1 + 40);
  if (sub_1001E4874(a2, "EnableCourseScreening", &v95))
  {
    *(_BYTE *)(a1 + 40) = v95;
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_102183CE0);
    v37 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_INFO))
    {
      v38 = *(unsigned __int8 *)(a1 + 40);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "EnableCourseScreening";
      v120 = 1026;
      LODWORD(v121) = v38;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "CLAccessory,MA-OTA,Read %{public}s,%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_102183CE0);
      v65 = *(unsigned __int8 *)(a1 + 40);
      *(_DWORD *)__str = 136446466;
      *(_QWORD *)&__str[4] = "EnableCourseScreening";
      *(_WORD *)&__str[12] = 1026;
      *(_DWORD *)&__str[14] = v65;
      LODWORD(v88) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 1, "CLAccessory,MA-OTA,Read %{public}s,%{public}d", __str, v88);
      v67 = (char *)v66;
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryUtils::CLAccessoryMobileAssetReader::readConfig(const CLNameValuePair &)", "%s\n", v66);
      if (v67 != buf)
        free(v67);
    }
  }
  v94 = *(_BYTE *)(a1 + 24);
  if (sub_1001E4874(a2, "EnableAggressiveNMEAScreening", &v94))
  {
    *(_BYTE *)(a1 + 24) = v94;
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_102183CE0);
    v39 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_INFO))
    {
      v40 = *(unsigned __int8 *)(a1 + 24);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "EnableAggressiveNMEAScreening";
      v120 = 1026;
      LODWORD(v121) = v40;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "CLAccessory,MA-OTA,Read %{public}s,%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_102183CE0);
      v68 = *(unsigned __int8 *)(a1 + 24);
      *(_DWORD *)__str = 136446466;
      *(_QWORD *)&__str[4] = "EnableAggressiveNMEAScreening";
      *(_WORD *)&__str[12] = 1026;
      *(_DWORD *)&__str[14] = v68;
      LODWORD(v88) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 1, "CLAccessory,MA-OTA,Read %{public}s,%{public}d", __str, v88);
      v70 = (char *)v69;
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryUtils::CLAccessoryMobileAssetReader::readConfig(const CLNameValuePair &)", "%s\n", v69);
      if (v70 != buf)
        free(v70);
    }
  }
  v93 = *(_DWORD *)(a1 + 28);
  if (sub_1001E4B84(a2, "LocationDiffThresholdForAggressiveScreening", &v93))
  {
    *(_DWORD *)(a1 + 28) = v93;
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_102183CE0);
    v41 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_INFO))
    {
      v42 = *(_DWORD *)(a1 + 28);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "LocationDiffThresholdForAggressiveScreening";
      v120 = 1026;
      LODWORD(v121) = v42;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "CLAccessory,MA-OTA,Read %{public}s,%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_102183CE0);
      v71 = *(_DWORD *)(a1 + 28);
      *(_DWORD *)__str = 136446466;
      *(_QWORD *)&__str[4] = "LocationDiffThresholdForAggressiveScreening";
      *(_WORD *)&__str[12] = 1026;
      *(_DWORD *)&__str[14] = v71;
      LODWORD(v88) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 1, "CLAccessory,MA-OTA,Read %{public}s,%{public}d", __str, v88);
      v73 = (char *)v72;
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryUtils::CLAccessoryMobileAssetReader::readConfig(const CLNameValuePair &)", "%s\n", v72);
      if (v73 != buf)
        free(v73);
    }
  }
  v92 = *(_DWORD *)(a1 + 32);
  if (sub_1001E4B84(a2, "MinContinuousFailureCountForBlockingAccessory", &v92))
  {
    *(_DWORD *)(a1 + 32) = v92;
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_102183CE0);
    v43 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_INFO))
    {
      v44 = *(_DWORD *)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "MinContinuousFailureCountForBlockingAccessory";
      v120 = 1026;
      LODWORD(v121) = v44;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "CLAccessory,MA-OTA,Read %{public}s,%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_102183CE0);
      v74 = *(_DWORD *)(a1 + 32);
      *(_DWORD *)__str = 136446466;
      *(_QWORD *)&__str[4] = "MinContinuousFailureCountForBlockingAccessory";
      *(_WORD *)&__str[12] = 1026;
      *(_DWORD *)&__str[14] = v74;
      LODWORD(v88) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 1, "CLAccessory,MA-OTA,Read %{public}s,%{public}d", __str, v88);
      v76 = (char *)v75;
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryUtils::CLAccessoryMobileAssetReader::readConfig(const CLNameValuePair &)", "%s\n", v75);
      if (v76 != buf)
        free(v76);
    }
  }
  v91 = *(_DWORD *)(a1 + 36);
  if (sub_1001E4B84(a2, "MinContinuousSuccessCountForUnblockingAccessory", &v91))
  {
    *(_DWORD *)(a1 + 36) = v91;
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_102183CE0);
    v45 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_INFO))
    {
      v46 = *(_DWORD *)(a1 + 36);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "MinContinuousSuccessCountForUnblockingAccessory";
      v120 = 1026;
      LODWORD(v121) = v46;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "CLAccessory,MA-OTA,Read %{public}s,%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_102183CE0);
      v77 = *(_DWORD *)(a1 + 36);
      *(_DWORD *)__str = 136446466;
      *(_QWORD *)&__str[4] = "MinContinuousSuccessCountForUnblockingAccessory";
      *(_WORD *)&__str[12] = 1026;
      *(_DWORD *)&__str[14] = v77;
      LODWORD(v88) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 1, "CLAccessory,MA-OTA,Read %{public}s,%{public}d", __str, v88);
      v79 = (char *)v78;
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryUtils::CLAccessoryMobileAssetReader::readConfig(const CLNameValuePair &)", "%s\n", v78);
      if (v79 != buf)
        free(v79);
    }
  }
  v90 = *(_BYTE *)(a1 + 41);
  if (sub_1001E4874(a2, "AllowGPGGAOnlyAccessory", &v90))
  {
    *(_BYTE *)(a1 + 41) = v90;
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_102183CE0);
    v47 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_INFO))
    {
      v48 = *(unsigned __int8 *)(a1 + 41);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "AllowGPGGAOnlyAccessory";
      v120 = 1026;
      LODWORD(v121) = v48;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "CLAccessory,MA-OTA,Read %{public}s,%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_102183CE0);
      v80 = *(unsigned __int8 *)(a1 + 41);
      *(_DWORD *)__str = 136446466;
      *(_QWORD *)&__str[4] = "AllowGPGGAOnlyAccessory";
      *(_WORD *)&__str[12] = 1026;
      *(_DWORD *)&__str[14] = v80;
      LODWORD(v88) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 1, "CLAccessory,MA-OTA,Read %{public}s,%{public}d", __str, v88);
      v82 = (char *)v81;
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryUtils::CLAccessoryMobileAssetReader::readConfig(const CLNameValuePair &)", "%s\n", v81);
      if (v82 != buf)
        free(v82);
    }
  }
  sub_100119F3C(&v98);
  if (sub_100006BB4(a2, "CarplayCourseUncertaintyAtLowSpeeds", &v98))
  {
    v96[0] = 0.0;
    v89 = 0.0;
    if (sub_1001FD98C((uint64_t)&v98, "SpeedThreshold", v96)
      && sub_1001FD98C((uint64_t)&v98, "CourseUncertainty", &v89))
    {
      v49 = v89;
      if (v89 < 1.0 || v89 > 180.0 || v96[0] < 1.0 || v96[0] > 50.0)
      {
        if (qword_1022A0000 != -1)
          dispatch_once(&qword_1022A0000, &stru_102183CE0);
        v59 = qword_1022A0008;
        if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_ERROR))
        {
          v61 = *(_BYTE **)(a1 + 48);
          v60 = *(_QWORD *)(a1 + 56);
          *(_DWORD *)buf = 134349312;
          *(_QWORD *)&buf[4] = v60;
          v120 = 2050;
          v121 = v61;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "CLAccessory,MA-OTA,invalid CarplayCourseUncertaintyAtLowSpeeds,course,%{public}.1lf,speed,%{public}.1lf", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0000 != -1)
            dispatch_once(&qword_1022A0000, &stru_102183CE0);
          v63 = *(_QWORD *)(a1 + 48);
          v62 = *(_QWORD *)(a1 + 56);
          *(_DWORD *)__str = 134349312;
          *(_QWORD *)&__str[4] = v62;
          *(_WORD *)&__str[12] = 2050;
          *(_QWORD *)&__str[14] = v63;
          LODWORD(v88) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 16, "CLAccessory,MA-OTA,invalid CarplayCourseUncertaintyAtLowSpeeds,course,%{public}.1lf,speed,%{public}.1lf", __str, v88);
          v56 = (char *)v64;
          sub_100512490("Generic", 1, 0, 0, "void CLAccessoryUtils::CLAccessoryMobileAssetReader::readConfig(const CLNameValuePair &)", "%s\n", v64);
          goto LABEL_211;
        }
      }
      else
      {
        *(double *)(a1 + 48) = v96[0];
        *(double *)(a1 + 56) = v49;
        if (qword_1022A0000 != -1)
          dispatch_once(&qword_1022A0000, &stru_102183CE0);
        v50 = qword_1022A0008;
        if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_INFO))
        {
          v52 = *(_BYTE **)(a1 + 48);
          v51 = *(_QWORD *)(a1 + 56);
          *(_DWORD *)buf = 134349312;
          *(_QWORD *)&buf[4] = v51;
          v120 = 2050;
          v121 = v52;
          _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "CLAccessory,MA-OTA,Read CarplayCourseUncertaintyAtLowSpeeds,course,%{public}.1lf,speed,%{public}.1lf", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0000 != -1)
            dispatch_once(&qword_1022A0000, &stru_102183CE0);
          v54 = *(_QWORD *)(a1 + 48);
          v53 = *(_QWORD *)(a1 + 56);
          *(_DWORD *)__str = 134349312;
          *(_QWORD *)&__str[4] = v53;
          *(_WORD *)&__str[12] = 2050;
          *(_QWORD *)&__str[14] = v54;
          LODWORD(v88) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 1, "CLAccessory,MA-OTA,Read CarplayCourseUncertaintyAtLowSpeeds,course,%{public}.1lf,speed,%{public}.1lf", __str, v88);
          v56 = (char *)v55;
          sub_100512490("Generic", 1, 0, 2, "void CLAccessoryUtils::CLAccessoryMobileAssetReader::readConfig(const CLNameValuePair &)", "%s\n", v55);
LABEL_211:
          if (v56 != buf)
            free(v56);
        }
      }
    }
    else
    {
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_102183CE0);
      v57 = qword_1022A0008;
      if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "CLAccessory,MA-OTA,Reading failed to read CarplayCourseUncertaintyAtLowSpeeds settings", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0000 != -1)
          dispatch_once(&qword_1022A0000, &stru_102183CE0);
        *(_WORD *)__str = 0;
        LODWORD(v88) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 16, "CLAccessory,MA-OTA,Reading failed to read CarplayCourseUncertaintyAtLowSpeeds settings", __str, v88);
        v56 = (char *)v83;
        sub_100512490("Generic", 1, 0, 0, "void CLAccessoryUtils::CLAccessoryMobileAssetReader::readConfig(const CLNameValuePair &)", "%s\n", v83);
        goto LABEL_211;
      }
    }
  }
  return sub_10011A5A8(&v98);
}

void sub_100D85274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_10011A5A8(&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_100D852D4(uint64_t **a1, unsigned __int8 *a2)
{
  const void **v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  const void **v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  const void **v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  const void **v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  const void **v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  const void **v37;
  unsigned __int8 *v38;
  NSObject *v39;
  const void **v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  int v45;
  const void **v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  int v55;
  const char *v56;
  char *v57;
  int v58;
  const void **v59;
  __int16 v60;
  unsigned __int8 *v61;
  __int16 v62;
  unsigned __int8 *v63;
  __int16 v64;
  unsigned __int8 *v65;
  __int16 v66;
  unsigned __int8 *v67;
  __int16 v68;
  int v69;
  _BYTE buf[12];
  __int16 v71;
  unsigned __int8 *v72;
  __int16 v73;
  unsigned __int8 *v74;
  __int16 v75;
  unsigned __int8 *v76;
  __int16 v77;
  unsigned __int8 *v78;
  __int16 v79;
  int v80;

  v4 = (const void **)(a2 + 24);
  result = sub_1001876D0((uint64_t)a1, (const void **)a2 + 3);
  if (!result)
    return result;
  *(_QWORD *)buf = v4;
  v6 = sub_100D858E8(a1, v4, (uint64_t)&unk_101B9EB60, (__int128 **)buf);
  v7 = *((unsigned __int8 *)v6 + 79);
  if ((v7 & 0x80u) == 0)
    v8 = *((unsigned __int8 *)v6 + 79);
  else
    v8 = v6[8];
  v9 = a2[23];
  v10 = (char)v9;
  if ((v9 & 0x80u) != 0)
    v9 = *((_QWORD *)a2 + 1);
  if (v8 != v9)
    return 0;
  v11 = v6;
  v12 = (const void **)(v6 + 7);
  if (v10 >= 0)
    v13 = a2;
  else
    v13 = *(unsigned __int8 **)a2;
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*v12, v13, v6[8]))
      return 0;
  }
  else if (*((_BYTE *)v6 + 79))
  {
    while (*(unsigned __int8 *)v12 == *v13)
    {
      v12 = (const void **)((char *)v12 + 1);
      ++v13;
      if (!--v7)
        goto LABEL_17;
    }
    return 0;
  }
LABEL_17:
  v14 = *((unsigned __int8 *)v11 + 103);
  if (*((char *)v11 + 103) < 0)
  {
    if (!v11[11])
      goto LABEL_36;
  }
  else if (!*((_BYTE *)v11 + 103))
  {
    goto LABEL_36;
  }
  if ((v14 & 0x80u) == 0)
    v15 = *((unsigned __int8 *)v11 + 103);
  else
    v15 = v11[11];
  v16 = a2[47];
  v17 = (char)v16;
  if ((v16 & 0x80u) != 0)
    v16 = *((_QWORD *)a2 + 4);
  if (v15 != v16)
    return 0;
  v18 = (const void **)(v11 + 10);
  if (v17 >= 0)
    v19 = (unsigned __int8 *)v4;
  else
    v19 = (unsigned __int8 *)*v4;
  if ((v14 & 0x80) != 0)
  {
    if (memcmp(*v18, v19, v11[11]))
      return 0;
  }
  else if (*((_BYTE *)v11 + 103))
  {
    while (*(unsigned __int8 *)v18 == *v19)
    {
      v18 = (const void **)((char *)v18 + 1);
      ++v19;
      if (!--v14)
        goto LABEL_36;
    }
    return 0;
  }
LABEL_36:
  v20 = *((unsigned __int8 *)v11 + 127);
  if (*((char *)v11 + 127) < 0)
  {
    if (!v11[14])
      goto LABEL_55;
  }
  else if (!*((_BYTE *)v11 + 127))
  {
    goto LABEL_55;
  }
  if ((v20 & 0x80u) == 0)
    v21 = *((unsigned __int8 *)v11 + 127);
  else
    v21 = v11[14];
  v22 = a2[71];
  v23 = (char)v22;
  if ((v22 & 0x80u) != 0)
    v22 = *((_QWORD *)a2 + 7);
  if (v21 != v22)
    return 0;
  v24 = (const void **)(v11 + 13);
  if (v23 >= 0)
    v25 = a2 + 48;
  else
    v25 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
  if ((v20 & 0x80) != 0)
  {
    if (memcmp(*v24, v25, v11[14]))
      return 0;
  }
  else if (*((_BYTE *)v11 + 127))
  {
    while (*(unsigned __int8 *)v24 == *v25)
    {
      v24 = (const void **)((char *)v24 + 1);
      ++v25;
      if (!--v20)
        goto LABEL_55;
    }
    return 0;
  }
LABEL_55:
  v26 = *((unsigned __int8 *)v11 + 175);
  if (*((char *)v11 + 175) < 0)
  {
    if (!v11[20])
      goto LABEL_74;
  }
  else if (!*((_BYTE *)v11 + 175))
  {
    goto LABEL_74;
  }
  if ((v26 & 0x80u) == 0)
    v27 = *((unsigned __int8 *)v11 + 175);
  else
    v27 = v11[20];
  v28 = a2[119];
  v29 = (char)v28;
  if ((v28 & 0x80u) != 0)
    v28 = *((_QWORD *)a2 + 13);
  if (v27 != v28)
    return 0;
  v30 = (const void **)(v11 + 19);
  if (v29 >= 0)
    v31 = a2 + 96;
  else
    v31 = (unsigned __int8 *)*((_QWORD *)a2 + 12);
  if ((v26 & 0x80) != 0)
  {
    if (memcmp(*v30, v31, v11[20]))
      return 0;
  }
  else if (*((_BYTE *)v11 + 175))
  {
    while (*(unsigned __int8 *)v30 == *v31)
    {
      v30 = (const void **)((char *)v30 + 1);
      ++v31;
      if (!--v26)
        goto LABEL_74;
    }
    return 0;
  }
LABEL_74:
  v32 = *((unsigned __int8 *)v11 + 199);
  if (*((char *)v11 + 199) < 0)
    v33 = v11[23];
  else
    v33 = *((unsigned __int8 *)v11 + 199);
  if (v33)
  {
    if ((v32 & 0x80u) == 0)
      v34 = *((unsigned __int8 *)v11 + 199);
    else
      v34 = v11[23];
    v35 = a2[143];
    v36 = (char)v35;
    if ((v35 & 0x80u) != 0)
      v35 = *((_QWORD *)a2 + 16);
    if (v34 != v35)
      return 0;
    v37 = (const void **)(v11 + 22);
    if (v36 >= 0)
      v38 = a2 + 120;
    else
      v38 = (unsigned __int8 *)*((_QWORD *)a2 + 15);
    if ((v32 & 0x80) == 0)
    {
      if (*((_BYTE *)v11 + 199))
      {
        while (*(unsigned __int8 *)v37 == *v38)
        {
          v37 = (const void **)((char *)v37 + 1);
          ++v38;
          if (!--v32)
            goto LABEL_95;
        }
        return 0;
      }
      goto LABEL_95;
    }
    if (memcmp(*v37, v38, v11[23]))
      return 0;
  }
LABEL_95:
  if (qword_1022A0000 != -1)
    dispatch_once(&qword_1022A0000, &stru_102183CE0);
  v39 = qword_1022A0008;
  if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_INFO))
  {
    if ((a2[47] & 0x80u) == 0)
      v40 = v4;
    else
      v40 = (const void **)*((_QWORD *)a2 + 3);
    if ((a2[23] & 0x80u) == 0)
      v41 = a2;
    else
      v41 = *(unsigned __int8 **)a2;
    if ((a2[71] & 0x80u) == 0)
      v42 = a2 + 48;
    else
      v42 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
    if ((a2[119] & 0x80u) == 0)
      v43 = a2 + 96;
    else
      v43 = (unsigned __int8 *)*((_QWORD *)a2 + 12);
    if ((a2[143] & 0x80u) == 0)
      v44 = a2 + 120;
    else
      v44 = (unsigned __int8 *)*((_QWORD *)a2 + 15);
    v45 = *((unsigned __int8 *)v11 + 224);
    *(_DWORD *)buf = 136447490;
    *(_QWORD *)&buf[4] = v40;
    v71 = 2082;
    v72 = v41;
    v73 = 2082;
    v74 = v42;
    v75 = 2082;
    v76 = v43;
    v77 = 2082;
    v78 = v44;
    v79 = 1026;
    v80 = v45;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "Accessory MA settings available,name,%{public}s,manufacturer,%{public}s,model,%{public}s,fw,%{public}s,hw,%{public}s,denied,%{public}d", buf, 0x3Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_102183CE0);
    if ((a2[47] & 0x80u) == 0)
      v46 = v4;
    else
      v46 = (const void **)*((_QWORD *)a2 + 3);
    if ((a2[23] & 0x80u) == 0)
      v47 = a2;
    else
      v47 = *(unsigned __int8 **)a2;
    if ((a2[71] & 0x80u) == 0)
      v48 = a2 + 48;
    else
      v48 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
    if ((a2[119] & 0x80u) == 0)
      v49 = a2 + 96;
    else
      v49 = (unsigned __int8 *)*((_QWORD *)a2 + 12);
    v50 = (char)a2[143];
    v53 = (unsigned __int8 *)*((_QWORD *)a2 + 15);
    v52 = a2 + 120;
    v51 = v53;
    if (v50 >= 0)
      v54 = v52;
    else
      v54 = v51;
    v55 = *((unsigned __int8 *)v11 + 224);
    v58 = 136447490;
    v59 = v46;
    v60 = 2082;
    v61 = v47;
    v62 = 2082;
    v63 = v48;
    v64 = 2082;
    v65 = v49;
    v66 = 2082;
    v67 = v54;
    v68 = 1026;
    v69 = v55;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 1, "Accessory MA settings available,name,%{public}s,manufacturer,%{public}s,model,%{public}s,fw,%{public}s,hw,%{public}s,denied,%{public}d", &v58, 58);
    v57 = (char *)v56;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLAccessoryUtils::CLAccessoryMobileAssetReader::isLocationDeniedFromThisAccessory(const CLAccessoryInfo &)", "%s\n", v56);
    if (v57 != buf)
      free(v57);
  }
  return *((_BYTE *)v11 + 224) != 0;
}

void sub_100D858BC(id a1)
{
  qword_1022A0008 = (uint64_t)os_log_create("com.apple.locationd.Position", "GpsAccessory");
}

uint64_t *sub_100D858E8(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_10019C424((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_100D85990((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000145B0(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_100D85A7C((uint64_t)v10, 0);
  }
  return v7;
}

char *sub_100D85990@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0xE8uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_100D859F8(v6 + 32, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100D859E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100D85A7C(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_100D859F8(char *__dst, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  *(_OWORD *)(__dst + 184) = 0u;
  *(_OWORD *)(__dst + 168) = 0u;
  *(_OWORD *)(__dst + 152) = 0u;
  *(_OWORD *)(__dst + 136) = 0u;
  *(_OWORD *)(__dst + 120) = 0u;
  *(_OWORD *)(__dst + 104) = 0u;
  *(_OWORD *)(__dst + 88) = 0u;
  *(_OWORD *)(__dst + 72) = 0u;
  *(_OWORD *)(__dst + 56) = 0u;
  *(_OWORD *)(__dst + 40) = 0u;
  *(_OWORD *)(__dst + 24) = 0u;
  *(_WORD *)(__dst + 193) = 257;
  return __dst;
}

void sub_100D85A7C(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_10065CA34((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t sub_100D85AC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 8;
  else
    v2 = 0;
  return sub_100D86780(v2, a2);
}

uint64_t sub_100D85AD0(uint64_t result)
{
  uint64_t v1;

  v1 = result - 8;
  if (!result)
    v1 = 0;
  *(_DWORD *)(v1 + 280) = 0;
  *(_QWORD *)(v1 + 272) = 0;
  *(_QWORD *)(v1 + 788) = 0;
  return result;
}

double sub_100D85AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  if (a1)
    v2 = a1 - 8;
  else
    v2 = 0;
  *(_QWORD *)&result = sub_100D86D7C(v2, a2).n128_u64[0];
  return result;
}

uint64_t sub_100D85B04(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 8;
  else
    v2 = 0;
  return sub_100D86AAC(v2, a2);
}

uint64_t sub_100D85B14(uint64_t result)
{
  uint64_t v1;

  v1 = result - 8;
  if (!result)
    v1 = 0;
  *(_DWORD *)(v1 + 280) = 0;
  *(_QWORD *)(v1 + 272) = 0;
  *(_QWORD *)(v1 + 788) = 0;
  return result;
}

uint64_t sub_100D85B34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 8;
  else
    v2 = 0;
  return sub_100D86BC8(v2, a2);
}

double sub_100D85B44(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 16) = 9;
  *(_WORD *)(a1 + 24) = 512;
  *(_QWORD *)a1 = off_102183DE8;
  *(_QWORD *)(a1 + 8) = &unk_102183D00;
  *(_BYTE *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 44) = 0xC00000000;
  *(_DWORD *)(a1 + 40) = 1031798784;
  *(_QWORD *)(a1 + 104) = off_10214EBA0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 168) = a1 + 176;
  *(_BYTE *)(a1 + 192) = 1;
  *(_DWORD *)(a1 + 212) = 4;
  *(_QWORD *)(a1 + 204) = 0;
  *(_BYTE *)(a1 + 232) = 1;
  *(_DWORD *)(a1 + 252) = 4;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = off_10215FBA0;
  *(_QWORD *)(a1 + 296) = 0x4039000000000000;
  *(_OWORD *)(a1 + 304) = xmmword_101BB7190;
  *(_DWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 352) = 1;
  *(_QWORD *)(a1 + 368) = 0x4B00000000;
  *(_DWORD *)(a1 + 364) = 0;
  *(_QWORD *)(a1 + 680) = 0;
  *(_QWORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 696) = 0xC08F380000000000;
  *(_QWORD *)(a1 + 704) = 0xC08F380000000000;
  *(_BYTE *)(a1 + 712) = 0;
  *(_QWORD *)(a1 + 720) = 0;
  *(_BYTE *)(a1 + 728) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 736) = xmmword_101BB71B0;
  *(_QWORD *)(a1 + 752) = 0xC08F380000000000;
  *(_BYTE *)(a1 + 760) = 0;
  *(_QWORD *)(a1 + 768) = 0;
  *(_BYTE *)(a1 + 776) = 0;
  *(_QWORD *)(a1 + 784) = 0;
  *(_QWORD *)(a1 + 792) = 0;
  *(_DWORD *)(a1 + 800) = 60;
  *(_QWORD *)(a1 + 1044) = 0x3C00000000;
  *(_DWORD *)(a1 + 112) = 4;
  return result;
}

BOOL sub_100D85C84(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  unsigned __int16 *v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  _BOOL4 v23;
  float v24;
  int v25;

  v4 = (_QWORD *)(a1 + 104);
  sub_1006D82B8(a1 + 104, (float *)(a2 + 124));
  if (*(_DWORD *)(a2 + 872))
    v5 = 1;
  else
    v5 = (*(_BYTE *)(a2 + 816) & 0xFD) == 1;
  v6 = v5;
  v25 = v6;
  sub_1000E3564((unsigned __int16 *)(a1 + 208), &v25);
  *(_BYTE *)(a1 + 192) = 1;
  v7 = *(unsigned __int16 *)(a1 + 210);
  if (*(_DWORD *)(a1 + 212) != (_DWORD)v7)
    return 0;
  if (*(_WORD *)(a1 + 210))
  {
    v8 = 0;
    v9 = 0;
    do
      v9 += *(_DWORD *)sub_1000E3624((unsigned __int16 *)(a1 + 208), v8++);
    while (v7 != v8);
    v10 = *(unsigned __int16 *)(a1 + 210);
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  v11 = v9 == v10;
  v24 = 0.0;
  sub_100A4533C(v4, 2, &v24);
  if (*(_QWORD *)(a1 + 184))
  {
    v12 = a1 + 176;
    v13 = *(_QWORD *)(a1 + 176);
    if (v13)
    {
      do
      {
        v14 = v13;
        v13 = *(_QWORD *)(v13 + 8);
      }
      while (v13);
    }
    else
    {
      do
      {
        v14 = *(_QWORD *)(v12 + 16);
        v5 = *(_QWORD *)v14 == v12;
        v12 = v14;
      }
      while (v5);
    }
    v15 = *(float *)(v14 + 28);
    v16 = *(float *)(*(_QWORD *)(a1 + 168) + 28);
  }
  else
  {
    v15 = 0.0;
    v16 = 0.0;
  }
  if (v24 > 0.25 && v24 < 3.0 && v16 > 0.0 && (float)(v24 / v16) < 2.5)
    v11 = (float)(v15 / v24) < 2.5 || v9 == v10;
  v23 = v11;
  v18 = (unsigned __int16 *)(a1 + 248);
  sub_1000E3564((unsigned __int16 *)(a1 + 248), &v23);
  *(_BYTE *)(a1 + 232) = 1;
  v19 = *(unsigned __int16 *)(a1 + 250);
  if (!*(_WORD *)(a1 + 250))
    return 0;
  v20 = 0;
  v21 = 0;
  do
    v21 += *(_DWORD *)sub_1000E3624(v18, v20++);
  while (v19 != v20);
  return v21 > 0;
}

unint64_t sub_100D85E58(uint64_t a1, double *a2)
{
  _DWORD *v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  float v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int16 v16;
  float v17;
  float v18;
  BOOL v19;
  float v20;
  float v21;
  __int128 v22;
  BOOL v23;
  BOOL v24;
  int v25;
  NSObject *v26;
  double v27;
  int v28;
  int v29;
  int v30;
  double v31;
  int v33;
  const char *v34;
  uint8_t *v35;
  double v36;
  int v37;
  int v38;
  int v39;
  double v40;
  const char *v41;
  uint8_t *v42;
  double v43;
  double v44;
  __int128 v45;
  _BYTE v46[28];
  double v47;
  void *__p;
  void *v49;
  char *v50;
  _DWORD v51[2];
  __int16 v52;
  int v53;
  __int16 v54;
  double v55;
  __int16 v56;
  double v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  int v61;
  __int16 v62;
  double v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  double v71;
  __int16 v72;
  double v73;
  _OWORD v74[7];
  __int128 v75;
  _BYTE v76[23];
  __int16 v77;
  __int128 v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  _QWORD v82[6];
  char v83;
  __int128 v84;
  uint64_t v85;
  int v86;
  unint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  int v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  _BYTE v97[25];
  int v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  int v108;
  uint64_t v109;
  __int16 v110;
  __int128 v111;
  __int128 v112;
  char v113;
  _BYTE v114[11];
  int v115;
  unint64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  unint64_t v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  unint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  char v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  unint64_t v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  int v165;
  unint64_t v166;
  __int16 v167;
  int v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint8_t buf[8];
  __int16 v177;
  int v178;
  __int16 v179;
  double v180;
  __int16 v181;
  double v182;
  __int16 v183;
  uint64_t v184;
  __int16 v185;
  int v186;
  __int16 v187;
  double v188;
  __int16 v189;
  int v190;
  __int16 v191;
  int v192;
  __int16 v193;
  int v194;
  __int16 v195;
  double v196;
  __int16 v197;
  double v198;

  v4 = operator new(0xCuLL);
  v49 = v4 + 3;
  v50 = (char *)(v4 + 3);
  *(_QWORD *)v4 = 7;
  v4[2] = 8;
  __p = v4;
  v5 = sub_100955CE0(a1 + 288, (uint64_t)a2);
  if (!(_DWORD)v5)
  {
    v77 = 0;
    v74[0] = xmmword_101BB1ED0;
    memset(&v74[1], 0, 96);
    v75 = 0u;
    memset(v76, 0, sizeof(v76));
    v78 = xmmword_101BB1ED0;
    v79 = 0;
    v80 = 0;
    v81 = 0;
    v82[0] = 0;
    *(_QWORD *)((char *)v82 + 5) = 0;
    *(_QWORD *)((char *)&v82[1] + 6) = 0;
    v83 = 0;
    memset(&v82[3], 0, 24);
    v84 = xmmword_101BB1ED0;
    v85 = 0;
    v86 = 0;
    v87 = 0xFFEFFFFFFFFFFFFFLL;
    v98 = 0;
    v88 = 0u;
    v89 = 0u;
    v90 = 0u;
    v91 = 0u;
    v92 = 0u;
    v93 = 0;
    v94 = 0u;
    v95 = 0u;
    v96 = 0u;
    memset(v97, 0, sizeof(v97));
    v99 = 0;
    v100 = 0;
    v101 = 0xFFEFFFFFFFFFFFFFLL;
    v102 = 0;
    v103 = 0;
    v109 = 0;
    v110 = 0;
    v115 = 0;
    v108 = 0;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v112 = 0u;
    v111 = 0u;
    v113 = 0;
    memset(v114, 0, sizeof(v114));
    v116 = 0xFFEFFFFFFFFFFFFFLL;
    v135 = 0u;
    v134 = 0u;
    v133 = 0u;
    v132 = 0u;
    v131 = 0u;
    v130 = 0u;
    v129 = 0u;
    v128 = 0u;
    v127 = 0u;
    v126 = 0u;
    v125 = 0u;
    v124 = 0u;
    v123 = 0u;
    v122 = 0u;
    v121 = 0u;
    v120 = 0u;
    v119 = 0u;
    v118 = 0u;
    v117 = 0u;
    v136 = 0;
    v137 = 0xFFEFFFFFFFFFFFFFLL;
    v138 = 0u;
    v139 = 0u;
    v140 = 0u;
    v141 = 0u;
    v142 = 0xFFEFFFFFFFFFFFFFLL;
    v143 = 0;
    v144 = 0;
    v145 = 0;
    v146 = 0;
    v147 = 0xFFEFFFFFFFFFFFFFLL;
    v149 = 0;
    v148 = 0;
    v150 = 0x80000000800000;
    v152 = 0;
    v151 = 0;
    v153 = xmmword_101BB1EE0;
    v154 = 0x80000000800000;
    v155 = 0u;
    v156 = 0u;
    v157 = 0;
    v158 = 0xFFEFFFFFFFFFFFFFLL;
    v159 = 0u;
    v160 = 0u;
    v161 = 0u;
    v162 = 0u;
    v163 = 0u;
    v164 = 0u;
    v165 = 0;
    v166 = 0xFFEFFFFFFFFFFFFFLL;
    v167 = 0;
    v168 = 0;
    v169 = 0xFFEFFFFFFFFFFFFFLL;
    v170 = 7;
    v171 = 0xFFEFFFFFFFFFFFFFLL;
    v172 = 0;
    v174 = 0;
    v173 = 0;
    v175 = 0;
    if ((sub_1000D03AC(a2, &__p, (uint64_t)v74) & 1) != 0)
    {
      v9 = *(unsigned __int16 *)(a1 + 44);
      v10 = (_BYTE *)(a1 + 28);
      v11 = *((float *)&v148 + 1) * 57.296;
      v12 = *(unsigned __int16 *)(a1 + 46);
      v13 = *(unsigned int *)(a1 + 48);
      if (v9 + v12 >= v13)
        v14 = *(unsigned int *)(a1 + 48);
      else
        v14 = 0;
      *(float *)(a1 + 44 + 4 * (v9 + v12 - v14) + 8) = v11;
      if (v13 <= v12)
      {
        v15 = v9 + 1;
        if (v15 >= v13)
          v16 = v13;
        else
          v16 = 0;
        *(_WORD *)(a1 + 44) = v15 - v16;
      }
      else
      {
        LOWORD(v12) = v12 + 1;
        *(_WORD *)(a1 + 46) = v12;
        LODWORD(v12) = (unsigned __int16)v12;
      }
      *v10 = 1;
      if ((_DWORD)v13 == (_DWORD)v12)
      {
        if (sub_1011F6EE4((unsigned __int16 *)(a1 + 796), a1 + 688, v11))
        {
          LODWORD(v5) = 12;
LABEL_43:
          v8 = 0;
          goto LABEL_44;
        }
        LOBYTE(v44) = 0;
        v43 = 0.0;
        v45 = xmmword_101BB71B0;
        *(_QWORD *)v46 = 0xC08F380000000000;
        v46[8] = 0;
        *(_QWORD *)&v46[16] = 0;
        v46[24] = 0;
        if (*v10)
          sub_1004786E8(a1 + 28);
        v17 = *(float *)(a1 + 36);
        v18 = sqrtf(v17);
        v19 = v17 <= 0.0;
        v20 = 0.0;
        if (!v19)
          v20 = v18;
        v21 = *(float *)&v151;
        if (*(float *)&v151 >= *(float *)&v148)
          v21 = *(float *)&v148;
        *(float *)&v43 = v20;
        *((float *)&v43 + 1) = v21 * 57.296;
        v22 = *(_OWORD *)(a1 + 704);
        v45 = *(_OWORD *)(a1 + 688);
        *(_OWORD *)v46 = v22;
        *(_OWORD *)&v46[9] = *(_OWORD *)(a1 + 713);
        v23 = sub_100D85C84(a1, (uint64_t)v74);
        v24 = *((float *)&v43 + 1) < 15.0 && v23;
        LOBYTE(v44) = v24;
        LODWORD(v47) = DWORD1(v75);
        sub_10023195C(a1 + 8, 0, (uint64_t)&v43);
        v25 = *(unsigned __int8 *)(a1 + 24);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_102183E40);
        v26 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
        {
          v27 = -999.0;
          v28 = *(_DWORD *)(a1 + 276);
          v29 = *(_DWORD *)(a1 + 280);
          v30 = *(_DWORD *)(a1 + 788);
          if (*((double *)&v45 + 1) != -999.0 && *(double *)v46 != -999.0)
            v27 = *(double *)v46 - *((double *)&v45 + 1);
          v31 = *(float *)(a1 + 792);
          *(_DWORD *)buf = 67111936;
          *(_DWORD *)&buf[4] = v25;
          v177 = 1024;
          v178 = v28;
          v179 = 2048;
          v180 = *(float *)&v43;
          v181 = 2048;
          v182 = *((float *)&v43 + 1);
          v183 = 2048;
          v184 = v45;
          v185 = 1024;
          v186 = v46[8];
          v187 = 2048;
          v188 = *((float *)&v75 + 3);
          v189 = 1024;
          v190 = LOBYTE(v44);
          v191 = 1024;
          v192 = v29;
          v193 = 1024;
          v194 = v30;
          v195 = 2048;
          v196 = v27;
          v197 = 2048;
          v198 = v31;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "StairStop,state,%d,onCnt,%d,longStd,%f,shortStd,%f,exertionDelta,%f,exertionLow,%d,machineFreq,%f,on,%d,offCnt,%d,headCnt,%d,eDiff,%f,maxH,%f", buf, 0x62u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_102183E40);
          v36 = -999.0;
          v37 = *(_DWORD *)(a1 + 276);
          v38 = *(_DWORD *)(a1 + 280);
          v39 = *(_DWORD *)(a1 + 788);
          if (*((double *)&v45 + 1) != -999.0 && *(double *)v46 != -999.0)
            v36 = *(double *)v46 - *((double *)&v45 + 1);
          v40 = *(float *)(a1 + 792);
          v51[0] = 67111936;
          v51[1] = v25;
          v52 = 1024;
          v53 = v37;
          v54 = 2048;
          v55 = *(float *)&v43;
          v56 = 2048;
          v57 = *((float *)&v43 + 1);
          v58 = 2048;
          v59 = v45;
          v60 = 1024;
          v61 = v46[8];
          v62 = 2048;
          v63 = *((float *)&v75 + 3);
          v64 = 1024;
          v65 = LOBYTE(v44);
          v66 = 1024;
          v67 = v38;
          v68 = 1024;
          v69 = v39;
          v70 = 2048;
          v71 = v36;
          v72 = 2048;
          v73 = v40;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "StairStop,state,%d,onCnt,%d,longStd,%f,shortStd,%f,exertionDelta,%f,exertionLow,%d,machineFreq,%f,on,%d,offCnt,%d,headCnt,%d,eDiff,%f,maxH,%f", v51, 98, v43, v44, *(double *)&v45, DWORD2(v45), *(double *)v46, *(_DWORD *)&v46[8], *(_DWORD *)&v46[16], *(_DWORD *)&v46[24],
            v47,
            *(double *)&__p);
          v42 = (uint8_t *)v41;
          sub_100512490("Generic", 1, 0, 2, "virtual CLWorkoutPredictor_Type::WorkoutStopDetectionEvent CLStairStepperWorkoutStopModel::update(const CLWorkoutPredictorInputs &)", "%s\n", v41);
          if (v42 != buf)
            free(v42);
        }
        if (*(_BYTE *)(a1 + 24) == 4)
        {
          LODWORD(v5) = 1;
          goto LABEL_43;
        }
      }
    }
    else
    {
      sub_1015A2E04(buf, "StairStop");
      sub_101069F5C(a2, (uint64_t *)buf, (uint64_t)&__p);
      if (SHIBYTE(v180) < 0)
        operator delete(*(void **)buf);
    }
    LODWORD(v5) = 0;
    goto LABEL_43;
  }
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102183E40);
  v6 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(unsigned __int8 *)(a1 + 24);
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "HRStop detect in stairclimber model during state,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102183E40);
    v33 = *(unsigned __int8 *)(a1 + 24);
    LODWORD(v74[0]) = 67240192;
    DWORD1(v74[0]) = v33;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "HRStop detect in stairclimber model during state,%{public}d", v74, 8);
    v35 = (uint8_t *)v34;
    sub_100512490("Generic", 1, 0, 2, "virtual CLWorkoutPredictor_Type::WorkoutStopDetectionEvent CLStairStepperWorkoutStopModel::update(const CLWorkoutPredictorInputs &)", "%s\n", v34);
    if (v35 != buf)
      free(v35);
  }
  v8 = v5 & 0xFFFFFFFF00000000;
LABEL_44:
  if (__p)
  {
    v49 = __p;
    operator delete(__p);
  }
  return v8 | v5;
}

void sub_100D8672C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100D86780(uint64_t result, uint64_t a2)
{
  int v2;
  char v3;

  if (*(float *)a2 <= 30.0)
  {
    v2 = *(_DWORD *)(result + 788) + 1;
    *(_DWORD *)(result + 788) = v2;
  }
  else
  {
    v2 = 0;
    *(_DWORD *)(result + 788) = 0;
    *(_DWORD *)(result + 276) = 0;
  }
  if (*(_BYTE *)(a2 + 8))
    ++*(_DWORD *)(result + 276);
  if (v2 >= 71 && *(int *)(result + 276) >= 24)
    return sub_10023195C(result + 8, 1, (uint64_t)&v3);
  return result;
}

uint64_t sub_100D867FC(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  _BOOL4 v4;
  double v5;
  uint64_t result;

  v2 = *(double *)(a2 + 24);
  if (v2 == -999.0)
  {
    result = 0;
  }
  else
  {
    v3 = *(double *)(a2 + 32);
    v4 = v3 == -999.0;
    v5 = v3 - v2;
    if (v5 < -20.0)
      v4 = 1;
    if (v3 == -999.0)
      v4 = 0;
    result = v5 != -999.0 && v4;
  }
  if (*(float *)(a2 + 4) > 15.0 && !*(_BYTE *)(a2 + 8))
    return 1;
  return result;
}

uint64_t sub_100D86868(uint64_t a1, uint64_t a2)
{
  _BOOL4 v2;
  int v3;
  double v4;
  double v5;
  double v6;
  double v7;
  int v8;
  float v9;
  float v10;
  _BOOL4 v11;
  double v12;
  _BOOL4 v13;
  double v14;
  double v15;
  float v16;

  v2 = *(float *)a2 > 30.0 && *(float *)(a2 + 4) > 5.0;
  if (*(double *)(a2 + 16) <= -0.75 || (v3 = *(unsigned __int8 *)(a2 + 40), *(_BYTE *)(a2 + 40)))
  {
    if (*(double *)(a2 + 48) <= 0.75 || (v4 = *(double *)(a2 + 32), v5 = -999.0, v4 == -999.0))
    {
      v3 = 0;
    }
    else
    {
      v6 = *(double *)(a2 + 24);
      v7 = v4 - v6;
      if (v6 != -999.0)
        v5 = v7;
      v3 = v5 < -5.0;
    }
  }
  if (((v2 | v3) & 1) != 0 || !*(_BYTE *)(a2 + 8) || *(float *)(a2 + 64) < 0.25)
    ++*(_DWORD *)(a1 + 280);
  if (v2)
    ++*(_DWORD *)(a1 + 788);
  v8 = *(_DWORD *)(a1 + 272);
  v11 = v8 >= 24
     && ((v9 = 180.0 / *(float *)(a1 + 792), v9 <= 1.0) ? (v10 = 11.719) : (v10 = v9 * 11.719),
         fminf(v10, 46.875) < (float)*(int *)(a1 + 280))
     && *(_DWORD *)(a1 + 788) > 0;
  v12 = *(double *)(a2 + 24);
  if (v12 == -999.0)
    goto LABEL_34;
  v13 = 0;
  if (v8 >= 24)
  {
    v14 = *(double *)(a2 + 32);
    if (v14 != -999.0)
    {
      v15 = v14 - v12;
      if (v15 != -999.0)
      {
        v16 = v15;
        if (fmaxf((float)(v16 * 1.5) + 60.0, 1.0) < (float)*(int *)(a1 + 788) && v15 <= -20.0)
        {
          v13 = *(double *)(a2 + 48) > 0.75;
          return v11 | v13;
        }
LABEL_34:
        v13 = 0;
      }
    }
  }
  return v11 | v13;
}

uint64_t sub_100D86A18(uint64_t result, _OWORD *a2)
{
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  __int128 v7;
  __int128 v8;

  v3 = result;
  v4 = *(float *)(result + 784);
  if (*(_WORD *)(result + 46))
  {
    result = sub_1004784C4((unsigned __int16 *)(result + 44), *(unsigned __int16 *)(result + 46) - 1);
    v5 = *(float *)result;
  }
  else
  {
    v5 = 0.0;
  }
  v6 = vabds_f32(v4, v5);
  if (*(float *)(v3 + 792) >= v6)
    v6 = *(float *)(v3 + 792);
  *(float *)(v3 + 792) = v6;
  ++*(_DWORD *)(v3 + 272);
  if (*(double *)(v3 + 752) == -999.0)
  {
    v7 = a2[1];
    v8 = a2[2];
    *(_OWORD *)(v3 + 761) = *(_OWORD *)((char *)a2 + 41);
    *(_OWORD *)(v3 + 736) = v7;
    *(_OWORD *)(v3 + 752) = v8;
  }
  return result;
}

uint64_t sub_100D86AAC(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t result;
  char v8;
  char v9;

  sub_100D86A18(a1, a2);
  if (sub_100D86B18(a1, (uint64_t)a2))
  {
    v4 = a1 + 8;
    v5 = &v9;
    v6 = 2;
  }
  else
  {
    result = sub_100D86868(a1, (uint64_t)a2);
    if (!(_DWORD)result)
      return result;
    v4 = a1 + 8;
    v5 = &v8;
    v6 = 3;
  }
  return sub_10023195C(v4, v6, (uint64_t)v5);
}

uint64_t sub_100D86B18(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  double v3;
  double v4;
  uint64_t v5;
  double v6;

  v2 = *(int *)(a1 + 272) >= 71 && *(_BYTE *)(a1 + 24) != 3;
  v3 = *(double *)(a2 + 24);
  if (v3 == -999.0)
  {
    v5 = 1;
  }
  else
  {
    v4 = *(double *)(a2 + 32);
    LODWORD(v5) = v4 == -999.0;
    v6 = v4 - v3;
    if (v6 == -999.0)
      LODWORD(v5) = 1;
    if (v6 > -20.0)
      v5 = 1;
    else
      v5 = v5;
  }
  if (*(_BYTE *)(a2 + 8) && (*(float *)a2 < 30.0 || *(float *)(a2 + 4) < 15.0))
    ++*(_DWORD *)(a1 + 276);
  if (!v2 && *(int *)(a1 + 276) < 30)
    return 0;
  return v5;
}

uint64_t sub_100D86BC8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  char *v6;
  int v7;
  int v8;
  double v9;
  BOOL v10;
  char v11;
  char v12;

  sub_100D86A18(a1, (_OWORD *)a2);
  result = sub_100D86B18(a1, a2);
  if ((_DWORD)result)
  {
    v5 = a1 + 8;
    v6 = &v12;
    v7 = 2;
    return sub_10023195C(v5, v7, (uint64_t)v6);
  }
  v8 = *(_DWORD *)(a1 + 272);
  if (v8 >= 24)
  {
    v9 = *(double *)(a2 + 32);
    v10 = v9 != -999.0;
    if (v9 <= 70.0)
      v10 = 0;
    if (v8 >= 0x33 && !v10)
    {
      v5 = a1 + 8;
      v6 = &v11;
      v7 = 4;
      return sub_10023195C(v5, v7, (uint64_t)v6);
    }
  }
  return result;
}

uint64_t sub_100D86C60(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_102183DE8;
  *(_QWORD *)(a1 + 288) = off_10215FBA0;
  v2 = *(void **)(a1 + 328);
  if (v2)
  {
    *(_QWORD *)(a1 + 336) = v2;
    operator delete(v2);
  }
  *(_QWORD *)(a1 + 104) = off_10214EBA0;
  sub_100008848(a1 + 168, *(_QWORD **)(a1 + 176));
  sub_10047F25C((_QWORD *)(a1 + 120));
  return a1;
}

void sub_100D86CD0(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_102183DE8;
  *(_QWORD *)(a1 + 288) = off_10215FBA0;
  v2 = *(void **)(a1 + 328);
  if (v2)
  {
    *(_QWORD *)(a1 + 336) = v2;
    operator delete(v2);
  }
  *(_QWORD *)(a1 + 104) = off_10214EBA0;
  sub_100008848(a1 + 168, *(_QWORD **)(a1 + 176));
  sub_10047F25C((_QWORD *)(a1 + 120));
  operator delete();
}

void sub_100D86D50(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

__n128 sub_100D86D7C(uint64_t a1, uint64_t a2)
{
  int v4;
  __n128 result;
  __int128 v6;

  *(_DWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 788) = 0;
  if (*(_WORD *)(a1 + 46))
    v4 = *(_DWORD *)sub_1004784C4((unsigned __int16 *)(a1 + 44), 0);
  else
    v4 = 0;
  *(_DWORD *)(a1 + 784) = v4;
  result = *(__n128 *)(a2 + 16);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 761) = *(_OWORD *)(a2 + 41);
  *(__n128 *)(a1 + 736) = result;
  *(_OWORD *)(a1 + 752) = v6;
  return result;
}

uint64_t sub_100D86DE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  void *v7;
  char v8;
  void *v9[2];
  char v10;
  void *v11;
  char v12;
  void *__p;
  char v14;

  *(_QWORD *)a1 = off_102183E70;
  v5 = (void *)(a1 + 8);
  sub_1015A2E04(&__p, "Workout");
  sub_100AABE0C(v5);
  if (v14 < 0)
    operator delete(__p);
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0x3FE0000000000000;
  *(CFAbsoluteTime *)(a1 + 80) = CFAbsoluteTimeGetCurrent();
  *(_OWORD *)(a1 + 88) = xmmword_101C24BC0;
  *(_QWORD *)(a1 + 104) = 0x4059800000000000;
  *(_WORD *)(a1 + 112) = 0;
  sub_1015A2E04(&v11, "Workout");
  sub_10077EF3C((void *)(a1 + 440));
  if (v12 < 0)
    operator delete(v11);
  sub_1015A2E04(v9, "Workout");
  sub_10132A884((char *)(a1 + 512), (__int128 *)v9);
  if (v10 < 0)
    operator delete(v9[0]);
  sub_1015A2E04(&v7, "Workout");
  sub_10104F000((void *)(a1 + 616));
  if (v8 < 0)
    operator delete(v7);
  return a1;
}

void sub_100D86F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (a14 < 0)
    operator delete(__p);
  sub_1005938E4(v35);
  sub_100D86FBC(v34);
  if (*(char *)(v33 + 31) < 0)
    operator delete(*v32);
  _Unwind_Resume(a1);
}

uint64_t sub_100D86FBC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100D87000(uint64_t a1, double a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  double v8;
  uint8_t buf[4];
  double v10;

  if (qword_10229FF40 != -1)
    dispatch_once(&qword_10229FF40, &stru_102183EF8);
  v4 = qword_10229FF48;
  if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "MaxAllowedSecondsForIndoorOutdoorDetector was forced to %f seconds", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_102183EF8);
    v7 = 134217984;
    v8 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 2, "MaxAllowedSecondsForIndoorOutdoorDetector was forced to %f seconds", COERCE_DOUBLE(&v7));
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLIndoorOutdoorDetectorWatch::overrideMaxAllowedSecondsForIndoorOutdoorDetector(const CFTimeInterval)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  *(double *)(a1 + 96) = a2;
  *(_QWORD *)(a1 + 104) = 0xBFF0000000000000;
}

uint64_t sub_100D871C0(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  uint64_t v8;
  uint8_t buf[4];
  uint64_t v10;

  if ((unint64_t)(a2 - 1) <= 1)
  {
    v3 = (_QWORD *)result;
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_102183EF8);
    v4 = qword_10229FF48;
    if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v10 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Location type was forced to %ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF40 != -1)
        dispatch_once(&qword_10229FF40, &stru_102183EF8);
      v7 = 134217984;
      v8 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 2, "Location type was forced to %ld", &v7);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLIndoorOutdoorDetectorWatch::forceLocationType(CMWorkoutLocationType)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    v3[7] = a2;
    v3[8] = 0;
    v3[9] = 0x3FE0000000000000;
    return (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD *))(*v3 + 72))(v3, 1, v3 + 7);
  }
  return result;
}

uint64_t sub_100D8739C(uint64_t a1)
{
  uint64_t result;

  result = sub_10104F0EC(a1 + 616);
  *(_QWORD *)(a1 + 88) = 0xFFEFFFFFFFFFFFFFLL;
  return result;
}

void sub_100D873C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double Current;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  Current = CFAbsoluteTimeGetCurrent();
  sub_1000EFEC4(a1 + 440, (uint64_t)v5, Current);
}

uint64_t sub_100D87400(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;

  if (qword_10229FF40 != -1)
    dispatch_once(&qword_10229FF40, &stru_102183EF8);
  v4 = qword_10229FF48;
  if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 56);
    v6 = *a2;
    v7 = *((_QWORD *)a2 + 1);
    v8 = *((_QWORD *)a2 + 2);
    *(_DWORD *)buf = 134218752;
    v27 = v5;
    v28 = 1026;
    v29 = v6;
    v30 = 2050;
    v31 = v7;
    v32 = 2050;
    v33 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "IndoorOutdoor,starting session,currentState,%ld,disableDistance,%{public}d,forceLocation,%{public}ld,overrideSeconds,%{public}f", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_102183EF8);
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *a2;
    v14 = *((_QWORD *)a2 + 1);
    v15 = *((_QWORD *)a2 + 2);
    v18 = 134218752;
    v19 = v12;
    v20 = 1026;
    v21 = v13;
    v22 = 2050;
    v23 = v14;
    v24 = 2050;
    v25 = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 0, "IndoorOutdoor,starting session,currentState,%ld,disableDistance,%{public}d,forceLocation,%{public}ld,overrideSeconds,%{public}f", &v18, 38);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorOutdoorDetectorWatch::startSession(const CLIndoorOutdoorProtocol::IndoorOutdoorSettings &)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  *(_BYTE *)(a1 + 113) = 1;
  *(CFAbsoluteTime *)(a1 + 80) = CFAbsoluteTimeGetCurrent();
  if (*a2)
    *(_QWORD *)(a1 + 104) = 0xBFF0000000000000;
  v9 = *((double *)a2 + 2);
  if (v9 != 2.22507386e-308)
    sub_100D87000(a1, v9);
  v10 = *((_QWORD *)a2 + 1);
  if (v10 && v10 != 3)
    sub_100D871C0(a1, v10);
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, 1);
  return result;
}

uint64_t sub_100D87670(uint64_t a1)
{
  NSObject *v2;
  CFAbsoluteTime Current;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  CFAbsoluteTime v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  CFAbsoluteTime v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint8_t buf[4];
  CFAbsoluteTime v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;

  if (*(_BYTE *)(a1 + 113) && !*(_BYTE *)(a1 + 112))
  {
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_102183EF8);
    v2 = qword_10229FF48;
    if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_DEFAULT))
    {
      Current = CFAbsoluteTimeGetCurrent();
      v4 = *(_QWORD *)(a1 + 56);
      v5 = *(_QWORD *)(a1 + 64);
      v6 = *(_QWORD *)(a1 + 72);
      *(_DWORD *)buf = 134218752;
      v24 = Current;
      v25 = 2048;
      v26 = v4;
      v27 = 2048;
      v28 = v5;
      v29 = 2048;
      v30 = v6;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "IndoorOutdoor,last state,time,%f,new location type,%ld,confidence,%ld,probability,%f", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF40 != -1)
        dispatch_once(&qword_10229FF40, &stru_102183EF8);
      v8 = qword_10229FF48;
      v9 = CFAbsoluteTimeGetCurrent();
      v10 = *(_QWORD *)(a1 + 56);
      v11 = *(_QWORD *)(a1 + 64);
      v12 = *(_QWORD *)(a1 + 72);
      v15 = 134218752;
      v16 = v9;
      v17 = 2048;
      v18 = v10;
      v19 = 2048;
      v20 = v11;
      v21 = 2048;
      v22 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 0, "IndoorOutdoor,last state,time,%f,new location type,%ld,confidence,%ld,probability,%f", COERCE_DOUBLE(&v15), 42);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorOutdoorDetectorWatch::stopSession()", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 72))(a1, 0, a1 + 56);
  }
  *(_OWORD *)(a1 + 96) = xmmword_101C24BD0;
  *(_WORD *)(a1 + 112) = 0;
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 16))(result, 0);
  return result;
}

BOOL sub_100D878BC(uint64_t a1)
{
  return vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 80)) > *(double *)(a1 + 96);
}

BOOL sub_100D878F0(uint64_t a1)
{
  return sub_1000E4754(a1 + 512) > *(double *)(a1 + 104);
}

BOOL sub_100D87920(uint64_t a1)
{
  return *(_BYTE *)(a1 + 113)
      && vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 80)) > *(double *)(a1 + 96)
      && sub_1000E4754(a1 + 512) > *(double *)(a1 + 104);
}

uint64_t sub_100D87978(float a1)
{
  if (a1 < 0.5)
    return 1;
  else
    return 2;
}

uint64_t sub_100D8798C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  int v6;
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  sub_10104F0F0();
  v8 = *a3;
  v9 = *((_QWORD *)a3 + 2);
  v10 = v8;
  v11 = v6;
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)result + 24))(result, &v8, a2);
  return result;
}

void sub_100D87A00(id a1)
{
  qword_10229FF48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "IndoorOutdoor");
}

void sub_100D87B88(id a1)
{
  qword_102308178 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLBatchedAccelerometerServiceSilo"));
}

void sub_100D87CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100D880D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  operator delete();
}

void sub_100D88540(id a1)
{
  qword_10229FFB8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "BatchedSensor");
}

void sub_100D88570()
{
  operator delete();
}

_QWORD *sub_100D88584(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102183F68;
  result[1] = v3;
  return result;
}

uint64_t sub_100D885B8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102183F68;
  a2[1] = v2;
  return result;
}

id sub_100D885D4(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  return _objc_msgSend(*(id *)(a1 + 8), "onBatchedData:N:", a2, *a3);
}

uint64_t sub_100D885E4(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_102183FD8))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100D88620()
{
  return &off_102183FD8;
}

uint64_t sub_100D8862C()
{
  sub_1015A2E04(&xmmword_102308138, "Acc800Fp");
  dword_102308150 = 800;
  __cxa_atexit((void (*)(void *))sub_1005CB0EC, &xmmword_102308138, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102308158, "DmFp");
  dword_102308170 = 200;
  return __cxa_atexit((void (*)(void *))sub_1005CB0EC, qword_102308158, (void *)&_mh_execute_header);
}

void sub_100D886B8(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  NSObject *v6;
  char *v7;
  uint64_t v8;
  _WORD v9[8];
  uint8_t buf[1640];

  v4 = (uint64_t *)a1;
  sub_100130820((_DWORD *)a3, a1);
  if (!*((_BYTE *)v4 + 6448) || *((int *)v4 + 1618) <= 0)
    return;
  if (!*a2)
  {
    v4 = &qword_1022A0000;
    if (qword_1022A0050 == -1)
    {
LABEL_5:
      v6 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "WifiTimer, set, power, now", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v4[10] != -1)
          dispatch_once(&qword_1022A0050, &stru_102183FE8);
        v9[0] = 0;
        LODWORD(v8) = 2;
        v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WifiTimer, set, power, now", v9, v8);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::ScheduleClientUpdateTimer::HandleEvent::operator()(const Events::Wifi::Power &) const", "%s\n", v7);
        if (v7 != (char *)buf)
          free(v7);
      }
      if (!*(_BYTE *)(a3 + 1952))
        *(_BYTE *)(a3 + 1952) = 1;
      *(_QWORD *)(a3 + 1944) = 0x3FD3333333333333;
      return;
    }
LABEL_16:
    dispatch_once(&qword_1022A0050, &stru_102183FE8);
    goto LABEL_5;
  }
  if (*a2 != 1)
  {
    sub_101929ACC();
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Wifi1/Logic/Policies/CLScheduleClientUpdateTimerPolicy.mm", 76, "operator()");
    __break(1u);
    goto LABEL_16;
  }
  if (!*(_BYTE *)(a3 + 1961))
    *(_BYTE *)(a3 + 1961) = 1;
}

void sub_100D888E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_100D88904(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v6;
  _BOOL4 v7;
  _BOOL4 v8;
  NSObject *v9;
  NSObject *v10;
  const char *v11;
  int v12;
  uint64_t v13;
  const char *v14;
  int v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int v19;
  const char *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  int v30;

  sub_100130820((_DWORD *)a3, a1);
  if (*(_BYTE *)(a1 + 6448))
  {
    v6 = (unsigned int *)(a1 + 816);
    if (sub_10007099C(v6) && ((v7 = sub_1000709AC(v6), *a2 == 10) ? (v8 = v7) : (v8 = 0), v8))
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102183FE8);
      v9 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        LODWORD(v26) = 1;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "WifiTimer, set, scanbusy, %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_102183FE8);
        v19 = 67240192;
        LODWORD(v20) = 1;
        v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WifiTimer, set, scanbusy, %{public}d", &v19, 8);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::ScheduleClientUpdateTimer::HandleEvent::operator()(const Events::Wifi::ScanBusy &) const", "%s\n", v17);
        if (v17 != (char *)buf)
          free(v17);
      }
      if (!*(_BYTE *)(a3 + 1952))
        *(_BYTE *)(a3 + 1952) = 1;
      *(_QWORD *)(a3 + 1944) = 0x3FF0000000000000;
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102183FE8);
      v10 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        v11 = sub_1000A9998((char)*a2);
        v12 = sub_100217A98(v6);
        *(_DWORD *)buf = 136446722;
        v26 = v11;
        v27 = 2048;
        v28 = 1;
        v29 = 1026;
        v30 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "@EmerWarn, ScanErrorBusy, %{public}s, retry in, %{pupblic}lld, reqtype, %{public}d", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_102183FE8);
        v13 = qword_1022A0058;
        v14 = sub_1000A9998((char)*a2);
        v15 = sub_100217A98(v6);
        v19 = 136446722;
        v20 = v14;
        v21 = 2048;
        v22 = 1;
        v23 = 1026;
        v24 = v15;
        LODWORD(v18) = 28;
        v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 0, "@EmerWarn, ScanErrorBusy, %{public}s, retry in, %{pupblic}lld, reqtype, %{public}d", &v19, v18);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::ScheduleClientUpdateTimer::HandleEvent::operator()(const Events::Wifi::ScanBusy &) const", "%s\n", v16);
        if (v16 != (char *)buf)
          free(v16);
      }
    }
    else
    {
      if (!*(_BYTE *)(a3 + 1952))
        *(_BYTE *)(a3 + 1952) = 1;
      *(_QWORD *)(a3 + 1944) = 0x4018000000000000;
    }
  }
}

void sub_100D88CDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_100D88D00(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  NSObject *v5;
  char *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  sub_100130820((_DWORD *)a2, a1);
  if (*(_BYTE *)(a1 + 6448) && *(int *)(a1 + 6472) >= 1)
  {
    if (sub_1000709AC((_DWORD *)(a1 + 816)))
      v4 = 2.0;
    else
      v4 = 6.0;
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_102183FE8);
    v5 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      v9 = (int)v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "WifiTimer, set, scanerror, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102183FE8);
      v7[0] = 67240192;
      v7[1] = (int)v4;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WifiTimer, set, scanerror, %{public}d", v7, 8);
      sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::ScheduleClientUpdateTimer::HandleEvent::operator()(const Events::Wifi::ScanError &) const", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
    if (!*(_BYTE *)(a2 + 1952))
      *(_BYTE *)(a2 + 1952) = 1;
    *(double *)(a2 + 1944) = v4;
  }
}

void sub_100D88F0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_100D88F24(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v4;
  double v5;
  NSObject *v6;
  char *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  v4 = (_BYTE *)(a1 + 6244);
  sub_100130820((_DWORD *)a2, a1);
  if (v4[204] && *(int *)(a1 + 6472) >= 1 && *(_BYTE *)(a1 + 810))
  {
    if (*v4)
      v5 = 6.0;
    else
      v5 = 15.0;
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_102183FE8);
    v6 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      v10 = (int)v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "WifiTimer, nextscan, %{public}d, timer", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102183FE8);
      v8[0] = 67240192;
      v8[1] = (int)v5;
      v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WifiTimer, nextscan, %{public}d, timer", v8, 8);
      sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::ScheduleClientUpdateTimer::HandleEvent::operator()(const Events::Client::UpdateTimer &) const", "%s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
    }
    if (!*(_BYTE *)(a2 + 1952))
      *(_BYTE *)(a2 + 1952) = 1;
    *(double *)(a2 + 1944) = v5;
  }
}

void sub_100D89138(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_100D89150(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v7;
  char *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  sub_100130820((_DWORD *)a3, a1);
  if (*(_BYTE *)(a1 + 6448))
  {
    if (*(int *)(a1 + 6472) >= 1 && *(_BYTE *)(a2 + 88) == 0)
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102183FE8);
      v7 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "WifiTimer, set, linkstatus, now", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_102183FE8);
        v9[0] = 0;
        v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WifiTimer, set, linkstatus, now", v9, 2);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::ScheduleClientUpdateTimer::HandleEvent::operator()(const Events::Wifi::LinkStatus &) const", "%s\n", v8);
        if (v8 != (char *)buf)
          free(v8);
      }
      if (!*(_BYTE *)(a3 + 1952))
        *(_BYTE *)(a3 + 1952) = 1;
      *(_QWORD *)(a3 + 1944) = 0x3FD3333333333333;
    }
  }
}

void sub_100D89330(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_100D89348@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  _DWORD *result;

  result = sub_100130820(a2, a1);
  if (*(_BYTE *)(a1 + 6448) && *(int *)(a1 + 6472) >= 1)
  {
    if (!*((_BYTE *)result + 1952))
      *((_BYTE *)result + 1952) = 1;
    *((_QWORD *)result + 243) = 0x3FD3333333333333;
  }
  return result;
}

void sub_100D893A4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  int v7;
  char *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  sub_100130820((_DWORD *)a2, a1);
  if (*(_BYTE *)(a1 + 1656))
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_102183FE8);
    v4 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      v5 = (int)*(double *)(a1 + 6424);
      *(_DWORD *)buf = 67240192;
      v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@WsbTimer, buffer, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102183FE8);
      v7 = (int)*(double *)(a1 + 6424);
      v9[0] = 67240192;
      v9[1] = v7;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WsbTimer, buffer, %{public}d", v9, 8);
      sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::ScheduleClientUpdateTimer::HandleEvent::operator()(const Events::Wifi::Wsb &) const", "%s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
    v6 = *(_QWORD *)(a1 + 6424);
    if (!*(_BYTE *)(a2 + 1976))
      *(_BYTE *)(a2 + 1976) = 1;
    *(_QWORD *)(a2 + 1968) = v6;
  }
}

void sub_100D8958C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_100D895A4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  char *v9;
  char *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  sub_100130820((_DWORD *)a2, a1);
  if (*(int *)(a1 + 6472) >= 1)
  {
    if (*(double *)(a1 + 6232) >= *(double *)(a1 + 6464) - *(double *)(a1 + 6456))
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102183FE8);
      v7 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "@WifiTimer, skip, motion", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_102183FE8);
        LOWORD(v11[0]) = 0;
        v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@WifiTimer, skip, motion", v11, 2);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::ScheduleClientUpdateTimer::HandleEvent::operator()(const Events::System::CoarseMotion &) const", "%s\n", v10);
        if (v10 != (char *)buf)
          free(v10);
      }
    }
    else
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102183FE8);
      v4 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
      {
        v5 = (int)*(double *)(a1 + 6232);
        *(_DWORD *)buf = 67240192;
        v13 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "@WifiTimer, set, motion, %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_102183FE8);
        v8 = (int)*(double *)(a1 + 6232);
        v11[0] = 67240192;
        v11[1] = v8;
        v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@WifiTimer, set, motion, %{public}d", v11, 8);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::ScheduleClientUpdateTimer::HandleEvent::operator()(const Events::System::CoarseMotion &) const", "%s\n", v9);
        if (v9 != (char *)buf)
          free(v9);
      }
      v6 = *(_QWORD *)(a1 + 6232);
      if (!*(_BYTE *)(a2 + 1952))
        *(_BYTE *)(a2 + 1952) = 1;
      *(_QWORD *)(a2 + 1944) = v6;
    }
  }
}

void sub_100D898D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_100D898F0(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  char *v18;
  int v19;
  char *v20;
  uint64_t v21;
  int v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  uint8_t buf[4];
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;

  sub_100130820((_DWORD *)a3, a1);
  if (*(_BYTE *)(a1 + 6448) && *(int *)(a1 + 6484) > 0)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_102183FE8);
    v6 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *a2;
      v8 = *(_DWORD *)(a1 + 6416);
      v9 = (int)*(double *)(a1 + 6424);
      v10 = *(unsigned __int8 *)(a1 + 1656);
      *(_DWORD *)buf = 67240960;
      v31 = v7;
      v32 = 1026;
      v33 = v8;
      v34 = 1026;
      v35 = v9;
      v36 = 1026;
      v37 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "WsbAls, resulttag, %{public}d, wsbtag, %{public}d, delay, %{public}d, set, %{public}d", buf, 0x1Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102183FE8);
      v14 = *a2;
      v15 = *(_DWORD *)(a1 + 6416);
      v16 = (int)*(double *)(a1 + 6424);
      v17 = *(unsigned __int8 *)(a1 + 1656);
      v22 = 67240960;
      v23 = v14;
      v24 = 1026;
      v25 = v15;
      v26 = 1026;
      v27 = v16;
      v28 = 1026;
      v29 = v17;
      v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WsbAls, resulttag, %{public}d, wsbtag, %{public}d, delay, %{public}d, set, %{public}d", &v22, 26);
      sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::ScheduleClientUpdateTimer::HandleEvent::operator()(const Events::Network::AlsRequestResult &) const", "%s\n", v18);
      if (v18 != (char *)buf)
        free(v18);
    }
    if (*a2 == -1 && *(_BYTE *)(a1 + 1656))
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102183FE8);
      v11 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        v12 = (int)*(double *)(a1 + 6424);
        *(_DWORD *)buf = 67240192;
        v31 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "@WsbTimer, alsresult, %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_102183FE8);
        v19 = (int)*(double *)(a1 + 6424);
        v22 = 67240192;
        v23 = v19;
        LODWORD(v21) = 8;
        v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WsbTimer, alsresult, %{public}d", &v22, v21);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::ScheduleClientUpdateTimer::HandleEvent::operator()(const Events::Network::AlsRequestResult &) const", "%s\n", v20);
        if (v20 != (char *)buf)
          free(v20);
      }
      v13 = *(_QWORD *)(a1 + 6424);
      if (!*(_BYTE *)(a3 + 1976))
        *(_BYTE *)(a3 + 1976) = 1;
      *(_QWORD *)(a3 + 1968) = v13;
    }
  }
}

void sub_100D89CA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_100D89CC4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  NSObject *v5;
  char *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v4 = a1 + 5092;
  sub_100130820((_DWORD *)a2, a1);
  if (*(_BYTE *)(v4 + 1356)
    && (*(int *)(a1 + 6472) > 0 || *(int *)(a1 + 6476) >= 1)
    && *(double *)(a1 + 6456) - *(double *)v4 >= 6.0)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_102183FE8);
    v5 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "WifiTimer, set, alsreply, now", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102183FE8);
      v7[0] = 0;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WifiTimer, set, alsreply, now", v7, 2);
      sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::ScheduleClientUpdateTimer::HandleEvent::operator()(const Events::Network::AlsFinished &) const", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
    if (!*(_BYTE *)(a2 + 1952))
      *(_BYTE *)(a2 + 1952) = 1;
    *(_QWORD *)(a2 + 1944) = 0;
  }
}

void sub_100D89EB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_100D89ED0(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  BOOL v11;
  NSObject *v12;
  char *v13;
  int v14;
  char *v15;
  uint64_t v16;
  _DWORD v17[4];
  uint8_t buf[4];
  int v19;

  sub_100130820((_DWORD *)a3, a1);
  if (*(int *)(a1 + 6484) >= 1 && *(_BYTE *)(a1 + 1656))
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_102183FE8);
    v6 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      v7 = (int)*(double *)(a1 + 6424);
      *(_DWORD *)buf = 67240192;
      v19 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "@WsbTimer, reach, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102183FE8);
      v14 = (int)*(double *)(a1 + 6424);
      v17[0] = 67240192;
      v17[1] = v14;
      v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WsbTimer, reach, %{public}d", v17, 8);
      sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::ScheduleClientUpdateTimer::HandleEvent::operator()(const Events::System::Reachability &) const", "%s\n", v15);
      if (v15 != (char *)buf)
        free(v15);
    }
    v8 = *(_QWORD *)(a1 + 6424);
    if (!*(_BYTE *)(a3 + 1976))
      *(_BYTE *)(a3 + 1976) = 1;
    *(_QWORD *)(a3 + 1968) = v8;
  }
  if (*(int *)(a1 + 6472) > 0 || *(int *)(a1 + 6476) >= 1)
  {
    v10 = *a2;
    v9 = a2[1];
    v11 = v9 == 1 && v10 == 2;
    if (v11 || v9 == 2 && v10 == 1 || !v9)
    {
      if (!*(_BYTE *)(a3 + 1952))
        *(_BYTE *)(a3 + 1952) = 1;
      *(_QWORD *)(a3 + 1944) = 0;
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102183FE8);
      v12 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "WifiTimer, set, reach, now", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_102183FE8);
        LOWORD(v17[0]) = 0;
        LODWORD(v16) = 2;
        v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WifiTimer, set, reach, now", v17, v16);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::ScheduleClientUpdateTimer::HandleEvent::operator()(const Events::System::Reachability &) const", "%s\n", v13);
        if (v13 != (char *)buf)
          free(v13);
      }
    }
  }
}

void sub_100D8A250(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_100D8A270(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  char *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  sub_100130820((_DWORD *)a2, a1);
  if (*(int *)(a1 + 6472) > 0)
  {
    if (!*(_BYTE *)(a2 + 1952))
      *(_BYTE *)(a2 + 1952) = 1;
    *(_QWORD *)(a2 + 1944) = 0x3FD3333333333333;
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_102183FE8);
    v4 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "WifiTimer, set, wake, now", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102183FE8);
      v6[0] = 0;
      v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WifiTimer, set, wake, now", v6, 2);
      sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::ScheduleClientUpdateTimer::HandleEvent::operator()(const Events::System::DeviceWake &) const", "%s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
  }
}

void sub_100D8A438(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_100D8A450(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v3;
  char *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  sub_100130820((_DWORD *)a2, a1);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_102183FE8);
  v3 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "@WsbTimer, fired, 0", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_102183FE8);
    v5[0] = 0;
    v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WsbTimer, fired, 0", v5, 2);
    sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::ScheduleClientUpdateTimer::HandleEvent::operator()(const Events::Client::WsbTimer &) const", "%s\n", v4);
    if (v4 != (char *)buf)
      free(v4);
  }
  if (!*(_BYTE *)(a2 + 1985))
    *(_BYTE *)(a2 + 1985) = 1;
}

void sub_100D8A5FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_100D8A614(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_100D8A640()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100D8A6DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100D8A6F4()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100D8A780(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_100D8A798(uint64_t a1)
{
  _QWORD *v2;
  float *v3;
  float *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v2 = (_QWORD *)sub_101401EBC(a1);
  *v2 = off_102184018;
  v3 = (float *)v2 + 5;
  v2[2] = 0x41C000003F800000;
  v4 = (float *)(v2 + 2);
  v5 = sub_100127B9C();
  sub_100081C10(v5, &v14);
  sub_100526804(v14, "RunModelMetsScale", v4);
  v6 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = sub_100127B9C();
  sub_100081C10(v9, &v14);
  sub_100526804(v14, "RunVMThreshold", v3);
  v10 = v15;
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return a1;
}

void sub_100D8A8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100D8A8CC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_100D8A8E0(a2, *(unsigned __int8 *)(a1 + 9), a3, *(float *)(a1 + 16), *(_DWORD *)(a1 + 20));
}

void sub_100D8A8E0(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>, float a4@<S0>, unsigned int a5@<S1>)
{
  double v8;
  float v9;
  double v10;
  double v11;
  float v12;
  float v13;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  int v22;
  float v23;
  float v24;
  NSObject *v25;
  double v26;
  double v27;
  _BOOL4 v28;
  NSObject *v29;
  int v30;
  double v31;
  float v32;
  float v33;
  float v34;
  NSObject *v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  float v40;
  int v42;
  NSObject *v43;
  double v44;
  double v45;
  _BOOL4 v46;
  char *v47;
  int v48;
  double v49;
  float v50;
  char *v51;
  char *v52;
  char *v53;
  double v54;
  double v55;
  double v56;
  _BYTE v57[72];
  __int16 v58;
  _BOOL4 v59;
  __int16 v60;
  double v61;
  uint8_t buf[4];
  _BYTE v63[68];
  __int16 v64;
  _BOOL4 v65;
  __int16 v66;
  double v67;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 3;
  *(_QWORD *)(a3 + 32) = 3;
  v8 = *(double *)(a1 + 408);
  v10 = *(double *)(a1 + 128) - *(double *)(a1 + 120);
  v11 = 0.0;
  if (v10 > 0.0)
    v11 = v8 * 2.23693991 / v10;
  v9 = *(double *)(a1 + 840);
  v12 = v9 * 2.2369;
  v13 = *(double *)(a1 + 448);
  v56 = COERCE_DOUBLE(__PAIR64__(a5, LODWORD(v13)));
  if (*(_BYTE *)(a1 + 352))
  {
    if (v13 > 2.2369 || v13 <= 0.14)
      v15 = 0.0;
    else
      v15 = 2.2369 / v13;
  }
  else
  {
    v15 = v11;
  }
  v16 = *(float *)(a1 + 296);
  v17 = (float)((float)(v15 * 1.5395) + 0.34316) * a4;
  v18 = 1.1;
  if (*(_BYTE *)(a1 + 528) != 1)
    v18 = 1.0;
  v19 = v17 * v18;
  v20 = 20.0;
  if (v19 <= 20.0)
    v21 = v19;
  else
    v21 = 20.0;
  if (a2)
    v22 = 2;
  else
    v22 = *(_DWORD *)(a1 + 832);
  sub_10006011C(v22, v12, v15, 3.6);
  v24 = v23 * v21;
  if (v24 <= 20.0)
    v20 = v24;
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102184068);
  v25 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v26 = *(double *)(a1 + 128);
    v27 = v26 - *(double *)(a1 + 120);
    v28 = *(unsigned __int8 *)(a1 + 528) == 1;
    *(_DWORD *)buf = 134220032;
    *(double *)v63 = v15;
    *(_WORD *)&v63[8] = 2048;
    *(double *)&v63[10] = v8;
    *(_WORD *)&v63[18] = 2048;
    *(double *)&v63[20] = v27;
    *(_WORD *)&v63[28] = 2048;
    *(double *)&v63[30] = v17;
    *(_WORD *)&v63[38] = 2048;
    *(double *)&v63[40] = a4;
    *(_WORD *)&v63[48] = 2048;
    *(double *)&v63[50] = v26;
    *(_WORD *)&v63[58] = 2048;
    *(double *)&v63[60] = *(float *)&v56;
    v64 = 1024;
    v65 = v28;
    v66 = 2048;
    v67 = v21;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "Run, WorkRate, %f, distance(m), %f, duration(s), %f, mets, %f, fMetsScaling, %f, endTime, %f, currentPace, %f, isStroller, %d, metsStrollerCorrected, %f", buf, 0x58u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102184068);
    v44 = *(double *)(a1 + 128);
    v45 = v44 - *(double *)(a1 + 120);
    v46 = *(unsigned __int8 *)(a1 + 528) == 1;
    *(_DWORD *)v57 = 134220032;
    *(double *)&v57[4] = v15;
    *(_WORD *)&v57[12] = 2048;
    *(double *)&v57[14] = v8;
    *(_WORD *)&v57[22] = 2048;
    *(double *)&v57[24] = v45;
    *(_WORD *)&v57[32] = 2048;
    *(double *)&v57[34] = v17;
    *(_WORD *)&v57[42] = 2048;
    *(double *)&v57[44] = a4;
    *(_WORD *)&v57[52] = 2048;
    *(double *)&v57[54] = v44;
    *(_WORD *)&v57[62] = 2048;
    *(double *)&v57[64] = *(float *)&v56;
    v58 = 1024;
    v59 = v46;
    v60 = 2048;
    v61 = v21;
    LODWORD(v54) = 88;
    v47 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Run, WorkRate, %f, distance(m), %f, duration(s), %f, mets, %f, fMetsScaling, %f, endTime, %f, currentPace, %f, isStroller, %d, metsStrollerCorrected, %f", COERCE_DOUBLE(v57), v54, v55, v56);
    sub_100512490("Generic", 1, 0, 2, "static CLMetsInfo CLCalorieRunModel::calculateWorkRateMETS(const CLNatalieModelInput &, const BOOL, const float, const float)", "%s\n", v47);
    if (v47 != (char *)buf)
      free(v47);
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102184068);
  v29 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v30 = *(_DWORD *)(a1 + 832);
    v31 = *(double *)(a1 + 128) - *(double *)(a1 + 120);
    *(_DWORD *)buf = 67110656;
    *(_DWORD *)v63 = v30;
    *(_WORD *)&v63[4] = 2048;
    *(double *)&v63[6] = v12;
    v32 = 0.0;
    *(_WORD *)&v63[14] = 2048;
    *(double *)&v63[16] = v31;
    *(_WORD *)&v63[24] = 2048;
    *(double *)&v63[26] = v15;
    if (v15 >= 0.5)
      v32 = (float)(v12 / v15) * 100.0;
    *(_WORD *)&v63[34] = 2048;
    *(double *)&v63[36] = v17;
    *(_WORD *)&v63[44] = 2048;
    *(double *)&v63[46] = v20;
    *(_WORD *)&v63[54] = 2048;
    *(double *)&v63[56] = v32;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "Run, WorkRate, Grade type, %d, vertical speed %f, interval %f, workrate %f, mets %f, mets + grade %f, percent grade %f", buf, 0x44u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102184068);
    v48 = *(_DWORD *)(a1 + 832);
    v49 = *(double *)(a1 + 128) - *(double *)(a1 + 120);
    *(_DWORD *)v57 = 67110656;
    *(_DWORD *)&v57[4] = v48;
    *(_WORD *)&v57[8] = 2048;
    *(double *)&v57[10] = v12;
    v50 = 0.0;
    *(_WORD *)&v57[18] = 2048;
    *(double *)&v57[20] = v49;
    *(_WORD *)&v57[28] = 2048;
    *(double *)&v57[30] = v15;
    if (v15 >= 0.5)
      v50 = (float)(v12 / v15) * 100.0;
    *(_WORD *)&v57[38] = 2048;
    *(double *)&v57[40] = v17;
    *(_WORD *)&v57[48] = 2048;
    *(double *)&v57[50] = v20;
    *(_WORD *)&v57[58] = 2048;
    *(double *)&v57[60] = v50;
    LODWORD(v54) = 68;
    v51 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Run, WorkRate, Grade type, %d, vertical speed %f, interval %f, workrate %f, mets %f, mets + grade %f, percent grade %f", v57, v54, v55, v56, *(double *)v57, *(double *)&v57[8], *(double *)&v57[16]);
    sub_100512490("Generic", 1, 0, 2, "static CLMetsInfo CLCalorieRunModel::calculateWorkRateMETS(const CLNatalieModelInput &, const BOOL, const float, const float)", "%s\n", v51);
    if (v51 != (char *)buf)
      free(v51);
  }
  v33 = 0.0;
  if (v16 > *((float *)&v56 + 1))
  {
    sub_1006B2E70();
    v33 = v34;
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102184068);
  v35 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218240;
    *(double *)v63 = v16;
    *(_WORD *)&v63[8] = 2048;
    *(double *)&v63[10] = v33;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "Run, WorkRate, energy, %.1f,mets from intensity, %.1f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102184068);
    *(_DWORD *)v57 = 134218240;
    *(double *)&v57[4] = v16;
    *(_WORD *)&v57[12] = 2048;
    *(double *)&v57[14] = v33;
    LODWORD(v54) = 22;
    v52 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Run, WorkRate, energy, %.1f,mets from intensity, %.1f", COERCE_DOUBLE(v57), v54);
    sub_100512490("Generic", 1, 0, 2, "static CLMetsInfo CLCalorieRunModel::calculateWorkRateMETS(const CLNatalieModelInput &, const BOOL, const float, const float)", "%s\n", v52);
    if (v52 != (char *)buf)
      free(v52);
  }
  if (*(_BYTE *)(a1 + 352))
  {
    v36 = sub_10009ED0C();
    sub_10004FB90(v36, (uint64_t)(float)(v20 - v17));
    if (v20 >= 2.1)
      v37 = v20;
    else
      v37 = 2.1;
  }
  else
  {
    v38 = 2.23693991 / sub_100E65558(*(float *)(a1 + 1360));
    if (v20 >= v33)
      v39 = v20;
    else
      v39 = v33;
    if (*(float *)&v56 < v38)
      v37 = v39;
    else
      v37 = v20;
    if (*(float *)&v56 < v38)
      v20 = v39;
  }
  *(float *)(a3 + 20) = v37;
  *(float *)(a3 + 28) = v20;
  v40 = fmaxf(v33, 0.0);
  if (v15 > 0.0)
    v40 = v20;
  if (v33 <= 0.0 && v15 <= 0.0)
    v42 = 0;
  else
    v42 = 9;
  *(float *)(a3 + 12) = v40;
  *(_DWORD *)(a3 + 36) = v42;
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102184068);
  v43 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218240;
    *(double *)v63 = v37;
    *(_WORD *)&v63[8] = 2048;
    *(double *)&v63[10] = v20;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "Run,WorkRate,finalUserMets,%f,finalTruthMets,%f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102184068);
    *(_DWORD *)v57 = 134218240;
    *(double *)&v57[4] = v37;
    *(_WORD *)&v57[12] = 2048;
    *(double *)&v57[14] = v20;
    LODWORD(v54) = 22;
    v53 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Run,WorkRate,finalUserMets,%f,finalTruthMets,%f", COERCE_DOUBLE(v57), v54);
    sub_100512490("Generic", 1, 0, 2, "static CLMetsInfo CLCalorieRunModel::calculateWorkRateMETS(const CLNatalieModelInput &, const BOOL, const float, const float)", "%s\n", v53);
    if (v53 != (char *)buf)
      free(v53);
  }
}

void sub_100D8B250(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100D8A8E0(a1, 0, a2, 1.0, COERCE_UNSIGNED_INT(24.0));
}

float sub_100D8B260(float a1)
{
  return (float)(a1 * 1.5395) + 0.34316;
}

void sub_100D8B278(int a1, float a2, float a3)
{
  sub_10006011C(a1, a2, a3, 3.6);
}

void sub_100D8B28C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v6;
  double v7;
  BOOL v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  int v14;
  float v15;
  float v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  double v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;
  uint8_t buf[4];
  uint64_t v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 3;
  *(_QWORD *)(a3 + 32) = 3;
  if (*(_BYTE *)(a2 + 352) && CLMotionActivity::isTypeIndoorPedestrian(*(unsigned int *)(a2 + 152)))
  {
    v6 = *(double *)(a2 + 1040);
    v7 = *(double *)(a2 + 1104);
    v8 = v7 <= 0.447039278 || v7 > 7.14285711;
    v9 = v7 * 2.23693991;
    v10 = 0.0;
    if (v8)
      v11 = 0.0;
    else
      v11 = v9;
    v12 = *(double *)(a2 + 1192) * 2.23693991;
    if (v6 > 0.0)
    {
      v13 = (float)((float)(v11 * 1.5395) + 0.34316) * *(float *)(a1 + 16);
      if (v12 > 0.0)
        v14 = 1;
      else
        v14 = 2;
      sub_10006011C(v14, v12, v11, 3.6);
      v16 = v13 * v15;
      if (v16 <= 20.0)
        v10 = v16;
      else
        v10 = 20.0;
    }
    *(float *)(a3 + 20) = v10;
    *(float *)(a3 + 28) = v10;
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102184068);
    v17 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      v18 = *(_QWORD *)(a2 + 112);
      *(_DWORD *)buf = 134219264;
      v36 = v18;
      v37 = 2048;
      v38 = v6;
      v39 = 2048;
      v40 = v11;
      v41 = 2048;
      v42 = v12;
      v43 = 2048;
      v44 = v10;
      v45 = 2048;
      v46 = v10;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Run,fitness machine,computeTime,%.3f,startTime,%.3f,wr,%f,vertSpeed,%f,userMets,%f,truthMets,%f", buf, 0x3Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102184068);
      v19 = *(_QWORD *)(a2 + 112);
      v23 = 134219264;
      v24 = v19;
      v25 = 2048;
      v26 = v6;
      v27 = 2048;
      v28 = v11;
      v29 = 2048;
      v30 = v12;
      v31 = 2048;
      v32 = v10;
      v33 = 2048;
      v34 = v10;
      LODWORD(v22) = 62;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Run,fitness machine,computeTime,%.3f,startTime,%.3f,wr,%f,vertSpeed,%f,userMets,%f,truthMets,%f", COERCE_DOUBLE(&v23), v22);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLCalorieRunModel::computeFitnessMachineMETS(const CLNatalieModelInput &)", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
  }
}

void sub_100D8B598()
{
  operator delete();
}

void sub_100D8B5AC(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_100D8B5D8()
{
  operator new();
}

void sub_100D8B63C()
{
  operator delete();
}

uint64_t sub_100D8B660()
{
  if (qword_102308188 != -1)
    dispatch_once(&qword_102308188, &stru_102184088);
  return qword_102311570;
}

_QWORD *sub_100D8B6A4(_QWORD *a1)
{
  *a1 = off_1021840B8;
  sub_100D8B6D8(a1);
  return sub_1009BAD18(a1);
}

_QWORD *sub_100D8B6D8(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (result[4])
  {
    v1 = result;
    v2 = sub_10024095C();
    sub_1000A4A6C(v2, 0, v1[4]);
    result = (_QWORD *)v1[4];
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    v1[4] = 0;
  }
  return result;
}

void sub_100D8B728(_QWORD *a1)
{
  sub_100D8B6A4(a1);
  operator delete();
}

uint64_t sub_100D8B74C(uint64_t result, int a2, uint64_t a3)
{
  if (!a2)
  {
    if (a3)
      return sub_100D8B760(result);
    else
      return (uint64_t)sub_100D8B6D8((_QWORD *)result);
  }
  return result;
}

uint64_t sub_100D8B760(uint64_t result)
{
  uint64_t v1;

  if (!*(_QWORD *)(result + 32))
  {
    v1 = result;
    *(double *)(result + 40) = sub_100078B88();
    *(_QWORD *)(v1 + 48) = 0xBFF0000000000000;
    operator new();
  }
  return result;
}

void sub_100D8B828()
{
  operator delete();
}

__n128 sub_100D8B84C(uint64_t a1, uint64_t a2)
{
  __n128 *v3;
  float v4;
  float v5;
  float v6;
  double v7;
  int v8;
  __n128 result;
  char v10;

  v3 = (__n128 *)(a2 + 48);
  if (*(double *)(a2 + 48) > 0.0)
  {
    v4 = *(float *)(a1 + 8) - *(float *)(a2 + 56);
    v5 = *(float *)(a1 + 16) - *(float *)(a2 + 64);
    v6 = (float)((float)((float)(*(float *)(a1 + 12) - *(float *)(a2 + 60))
                       * (float)(*(float *)(a1 + 12) - *(float *)(a2 + 60)))
               + (float)(v4 * v4))
       + (float)(v5 * v5);
    v7 = *(double *)a1;
    if (v6 >= 0.0009)
    {
      v8 = 0;
      *(double *)(a2 + 40) = v7;
    }
    else
    {
      v8 = v7 - *(double *)(a2 + 40) > 1.0;
    }
    v10 = v8;
    if (*(unsigned __int8 *)(a2 + 72) != v8)
    {
      *(_BYTE *)(a2 + 72) = v8;
      sub_10012AC18(a2, 0, (uint64_t)&v10, 1);
    }
  }
  result = *(__n128 *)a1;
  v3[1].n128_u64[0] = *(_QWORD *)(a1 + 16);
  *v3 = result;
  return result;
}

void sub_100D8B9C8(id a1)
{
  qword_102308190 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLRemoteMotionAlarmSilo"));
}

void sub_100D8BA38(id a1)
{
  uint64_t v1;

  if (objc_opt_class(IDSService, v1))
  {
    sub_100197040();
    if (sub_100195F08())
      byte_1023081A0 = 1;
  }
}

id sub_100D8BBF8(uint64_t a1)
{
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_102184140);
  v2 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Resending motion alarm request\"}", (uint8_t *)v4, 0x12u);
  }
  return objc_msgSend(*(id *)(a1 + 32), "sendMotionAlarmRequest");
}

id sub_100D8BCD8(uint64_t a1)
{
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_102184140);
  v2 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"We haven't received an update in a while\"}", (uint8_t *)v4, 0x12u);
  }
  return objc_msgSend(*(id *)(a1 + 32), "setLastKnownMotionState:", 0);
}

void sub_100D8C73C(id a1)
{
  qword_1022A01E8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Streaming");
}

id sub_100D8D8B4(uint64_t a1)
{
  id v2;
  const __CFString *v3;
  const __CFString *v4;
  id result;

  if (objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "settings"), "loggingPersistentInTempFolder"))
  {
    v2 = objc_msgSend(*(id *)(a1 + 32), "persistenceDirectory");
    v3 = CFSTR("gathering_ble_advs.bin");
  }
  else
  {
    qword_1023081B8 = (uint64_t)objc_alloc_init((Class)NSDateFormatter);
    objc_msgSend((id)qword_1023081B8, "setDateFormat:", CFSTR("yyyy_MM_dd-"));
    v4 = (const __CFString *)objc_msgSend(objc_msgSend((id)qword_1023081B8, "stringFromDate:", +[NSDate now](NSDate, "now")), "stringByAppendingString:", CFSTR("gathering_ble_advs.bin"));
    v2 = objc_msgSend(*(id *)(a1 + 32), "persistenceDirectory");
    v3 = v4;
  }
  result = objc_msgSend(v2, "URLByAppendingPathComponent:", v3);
  qword_1023081B0 = (uint64_t)result;
  return result;
}

id sub_100D8E830(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_cleanupVolatileStorage");
}

id sub_100D8F120(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_cleanupPersistentStorage");
}

id sub_100D8F590(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_cleanupVolatileStorage");
}

id sub_100D8F598(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_cleanupPersistentStorage");
}

NSDictionary *sub_100D8FA14(uint64_t a1)
{
  _QWORD v3[4];
  _QWORD v4[4];

  v3[0] = CFSTR("Cause");
  v4[0] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 40) + 8 * *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88));
  v3[1] = CFSTR("Policy");
  v4[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 56));
  v3[2] = CFSTR("Duration");
  v4[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 48));
  v3[3] = CFSTR("TimeSinceLast");
  v4[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 80));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 4);
}

void sub_100D8FB34(id a1)
{
  qword_1022A0158 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gathering");
}

_QWORD *sub_100D8FB60(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  a1[4] = a3;
  a1[5] = a2;
  *a1 = off_1021841B8;
  v6 = a4[1];
  a1[6] = *a4;
  a1[7] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = a5[1];
  a1[8] = *a5;
  a1[9] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  a1[1] = objc_opt_new(NSMutableArray);
  a1[3] = 0;
  return a1;
}

void sub_100D8FBF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100261F44(v2);
  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100D8FC14(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021841B8;

  sub_100261F44(a1 + 64);
  sub_100261F44(a1 + 48);
  return a1;
}

id sub_100D8FC64(id *a1, int a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  double v7;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  id v13;

  v3 = a1[3];
  if (a2)
  {
    v4 = (void *)(*((uint64_t (**)(id *, id))*a1 + 16))(a1, objc_msgSend(a1[3], "index"));
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021842A8);
    v5 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      v9[0] = 68289282;
      v9[1] = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = objc_msgSend(v4, "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"discard trace in slot\", \"suffix\":%{public, location:escape_only}s}", (uint8_t *)v9, 0x1Cu);
    }
  }
  else
  {
    v6 = (*((uint64_t (**)(id *))*a1 + 20))(a1);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
    objc_msgSend(v3, "setScore:");
    (*((void (**)(id *))*a1 + 18))(a1);
  }
  objc_msgSend(objc_msgSend(a1[3], "archive"), "eraseAllData");
  LODWORD(v7) = 0;
  return objc_msgSend(a1[3], "setScore:", v7);
}

char *sub_100D8FDCC(uint64_t a1)
{
  return (char *)objc_msgSend(*(id *)(a1 + 8), "count") - (*(_QWORD *)(a1 + 24) != 0);
}

id sub_100D8FE00(uint64_t a1, uint64_t a2)
{
  _QWORD v3[6];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100D8FE54;
  v3[3] = &unk_102184270;
  v3[4] = a2;
  v3[5] = a1;
  return objc_msgSend(*(id *)(a1 + 8), "enumerateObjectsUsingBlock:", v3);
}

uint64_t sub_100D8FE54(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  int v9;

  v4 = *(_QWORD **)(result + 40);
  if ((void *)v4[3] != a2)
  {
    v8 = result;
    if ((*(unsigned int (**)(_QWORD))(*v4 + 88))(*(_QWORD *)(result + 40)))
      v9 = 2;
    else
      v9 = 1;
    sub_10110A1F4(v4[8], v9, 1, 0, (int)objc_msgSend(objc_msgSend(a2, "archive"), "secondaryDataSize"));
    return (*(uint64_t (**)(_QWORD, id, uint64_t, uint64_t))(*(_QWORD *)(v8 + 32) + 16))(*(_QWORD *)(v8 + 32), objc_msgSend(a2, "archive"), a3, a4);
  }
  return result;
}

id sub_100D8FF14(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 24), "archive");
}

id sub_100D8FF1C(uint64_t a1, void *a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  return sub_1006DE92C(v3, a2);
}

uint64_t sub_100D8FF48(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[40];

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  sub_1006DFA98(v5, a2);
  result = sub_1006DEE90(v3, (uint64_t)v5);
  if (v5[32])
    return sub_1001FF18C((uint64_t)v5);
  return result;
}

void sub_100D8FFA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14)
    sub_1001FF18C((uint64_t)&a10);
  _Unwind_Resume(exception_object);
}

id sub_100D8FFC0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
    objc_msgSend(objc_msgSend(v2, "archive"), "eraseAllData");
  *(_QWORD *)(a1 + 24) = 0;
  return objc_msgSend(*(id *)(a1 + 8), "removeAllObjects");
}

void sub_100D8FFF4(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_100D90084(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  NSObject *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  uint8_t buf[1640];

  v21 = a2;
  sub_100D90464("kCLConnectionMessageCheckInNoMovementUpdate", &v21, &v19);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v17 = v19;
    v18 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    CLConnection::sendMessage(v3);
    if (v18)
    {
      v6 = &v18->__shared_owners_;
      do
        v7 = __ldaxr((unint64_t *)v6);
      while (__stlxr(v7 - 1, (unint64_t *)v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (qword_10229FFE0 != -1)
      dispatch_once(&qword_10229FFE0, &stru_1021842C8);
    v8 = qword_10229FFE8;
    if (os_log_type_enabled((os_log_t)qword_10229FFE8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[CLNoMovement] subscription: sent state update message", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFE0 != -1)
        dispatch_once(&qword_10229FFE0, &stru_1021842C8);
      v16 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFE8, 0, "[CLNoMovement] subscription: sent state update message", &v16, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLNoMovementSubscription::onStateUpdate(CMNoMovementStateUpdate *)", "%s\n", v9);
LABEL_32:
      if (v10 != buf)
        free(v10);
    }
  }
  else
  {
    if (qword_10229FFE0 != -1)
      dispatch_once(&qword_10229FFE0, &stru_1021842C8);
    v11 = qword_10229FFE8;
    if (os_log_type_enabled((os_log_t)qword_10229FFE8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[CLNoMovement] subscription: connection invalid; cannot send state update message",
        buf,
        2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFE0 != -1)
        dispatch_once(&qword_10229FFE0, &stru_1021842C8);
      v16 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFE8, 0, "[CLNoMovement] subscription: connection invalid; cannot send state update message",
        &v16,
        2);
      v10 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLNoMovementSubscription::onStateUpdate(CMNoMovementStateUpdate *)", "%s\n", v15);
      goto LABEL_32;
    }
  }
  v12 = v20;
  if (v20)
  {
    v13 = (unint64_t *)&v20->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_100D903E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100D90438(id a1)
{
  qword_10229FFE8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CheckIn");
}

_QWORD *sub_100D90464@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_100487B64(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_100D904B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_100D904C4()
{
  unint64_t result;

  result = sub_10051CF08();
  if ((_DWORD)result)
    operator new();
  return result;
}

void sub_100D9050C()
{
  operator delete();
}

uint64_t sub_100D90530()
{
  if (qword_1023081C8 != -1)
    dispatch_once(&qword_1023081C8, &stru_1021842E8);
  return qword_102311578;
}

uint64_t sub_100D90574(uint64_t a1)
{
  unsigned __int8 *v2;
  uint64_t v3;
  _QWORD v5[5];
  int v6;

  v2 = (unsigned __int8 *)sub_10051CBA0((_QWORD *)a1);
  *(_QWORD *)v2 = off_102184318;
  LOBYTE(v6) = 0;
  sub_1018BF25C(v2 + 32, "AlwaysOnSuppression", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 1;
  sub_1018BF25C((unsigned __int8 *)(a1 + 35), "EnableViewObstructedMLSuppression", (unsigned __int8 *)&v6, 0);
  v6 = 1084227584;
  sub_1018C2254((unsigned __int8 *)(a1 + 40), "ViewObstructedSuppressionDelaySecs", &v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C((unsigned __int8 *)(a1 + 52), "DisableViewObstructedSuppression", (unsigned __int8 *)&v6, 0);
  v6 = 1092616192;
  sub_1018C2254((unsigned __int8 *)(a1 + 56), "KeepViewObstructedRunningDelaySecs", &v6, 0);
  LOBYTE(v6) = 1;
  sub_1018BF25C((unsigned __int8 *)(a1 + 68), "EnableProxBaselineEstimation", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C((unsigned __int8 *)(a1 + 71), "ForceAlwaysOnViewObstructed", (unsigned __int8 *)&v6, 0);
  *(_BYTE *)(a1 + 74) = 0;
  *(_DWORD *)(a1 + 76) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 92) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  v3 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100D90704;
  v5[3] = &unk_10212ECA0;
  v5[4] = a1;
  sub_1000A50A8(v3, (uint64_t)v5);
  return a1;
}

void sub_100D906D4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10051CE2C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100D90704(uint64_t a1)
{
  uint64_t **v1;

  v1 = *(uint64_t ***)(a1 + 32);
  sub_100A0A4BC(v1[1], (uint64_t)sub_100D90740, (uint64_t)v1);
  return ((uint64_t (*)(uint64_t **))(*v1)[2])(v1);
}

_BYTE *sub_100D90740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE *result;
  NSObject *v6;
  int v7;
  unint64_t TimeStamp;
  double v9;
  NSNumber *v10;
  const __CFString *v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  float v17;
  float v18;
  unsigned __int8 v19;
  size_t v20;
  unsigned __int8 *v21;
  _QWORD v22[3];
  _QWORD v23[3];
  _DWORD v24[2];
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  int v38;
  uint8_t buf[4];
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  double v50;
  __int16 v51;
  double v52;
  __int16 v53;
  int v54;

  v20 = 0;
  v21 = 0;
  IOHIDEventGetVendorDefinedData(a4, &v21, &v20);
  result = sub_10051CB38((_BYTE *)&v14 + 4, v21, v20);
  if (BYTE4(v14) == 2)
  {
    if (qword_10229FC60 != -1)
      dispatch_once(&qword_10229FC60, &stru_102184370);
    v6 = qword_10229FC68;
    if (os_log_type_enabled((os_log_t)qword_10229FC68, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67241984;
      v40 = BYTE5(v14);
      v41 = 1026;
      v42 = BYTE6(v14);
      v43 = 1026;
      v44 = HIBYTE(v14);
      v45 = 1026;
      v46 = v15;
      v47 = 1026;
      v48 = v16;
      v49 = 2050;
      v50 = v17;
      v51 = 2050;
      v52 = v18;
      v53 = 1026;
      v54 = v19;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[CLSPUEclipseControl] Suppression Report received shouldSuppress,%{public}d,APAwake,%{public}d,currentState,%{public}hhu,orientation,%{public}hhu,motionType,%{public}hhu,lux,%{public}f,pocketProbability,%{public}f,facedownStatic,%{public}hhu", buf, 0x3Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC60 != -1)
        dispatch_once(&qword_10229FC60, &stru_102184370);
      v24[0] = 67241984;
      v24[1] = BYTE5(v14);
      v25 = 1026;
      v26 = BYTE6(v14);
      v27 = 1026;
      v28 = HIBYTE(v14);
      v29 = 1026;
      v30 = v15;
      v31 = 1026;
      v32 = v16;
      v33 = 2050;
      v34 = v17;
      v35 = 2050;
      v36 = v18;
      v37 = 1026;
      v38 = v19;
      LODWORD(v14) = 58;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC68, 0, "[CLSPUEclipseControl] Suppression Report received shouldSuppress,%{public}d,APAwake,%{public}d,currentState,%{public}hhu,orientation,%{public}hhu,motionType,%{public}hhu,lux,%{public}f,pocketProbability,%{public}f,facedownStatic,%{public}hhu", v24, v14);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "static void CLSPUEclipseControl::eclipseControlCallback(void *, void *, void *, IOHIDEventRef)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    v7 = BYTE5(v14);
    TimeStamp = IOHIDEventGetTimeStamp(a4);
    v9 = sub_100127828(TimeStamp);
    v22[0] = CFSTR("eventTime");
    v23[0] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v9);
    v22[1] = CFSTR("eventTimeNS");
    -[NSDate timeIntervalSince1970](+[NSDate date](NSDate, "date"), "timeIntervalSince1970");
    v10 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    v22[2] = CFSTR("VOEvent");
    v11 = CFSTR("suppress");
    if (!v7)
      v11 = CFSTR("unsuppress");
    v23[1] = v10;
    v23[2] = v11;
    return (_BYTE *)sub_10019E128((uint64_t)+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v23, v22, 3), (uint64_t)"ViewObstructedStateChange");
  }
  return result;
}

uint64_t sub_100D90A88(uint64_t a1, char a2, int a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];
  int v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;

  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v18 = 1;
  v8 = sub_100127B9C();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100D90B5C;
  v11[3] = &unk_102184338;
  v13 = a2;
  v14 = a4;
  v12 = a3;
  v11[4] = &v15;
  v11[5] = a1;
  sub_1000A50A8(v8, (uint64_t)v11);
  v9 = *((unsigned __int8 *)v16 + 24);
  _Block_object_dispose(&v15, 8);
  return v9;
}

void sub_100D90B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100D90B5C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  int v8;
  int v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  uint64_t v13;
  double v14;
  NSNumber *v15;
  const __CFString *v16;
  int v17;
  int v18;
  int v19;
  _BOOL4 v20;
  int v21;
  int v22;
  BOOL v23;
  NSObject *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int *v31;
  unsigned int v32;
  NSObject *v33;
  int v34;
  unsigned int *v35;
  unsigned int v36;
  int v37;
  unsigned int *v38;
  unsigned int v39;
  int v40;
  unsigned int *v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  const char *v46;
  uint8_t *v47;
  const char *v48;
  uint8_t *v49;
  uint8_t *v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  _BOOL4 v59;
  __int16 v60;
  int v61;
  _QWORD v62[5];
  _QWORD v63[5];
  uint8_t buf[4];
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  _BOOL4 v71;
  __int16 v72;
  int v73;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_DWORD *)(v2 + 76);
  if (*(_BYTE *)(a1 + 52))
  {
    if (v3 != -1)
    {
      v4 = v3 + 1;
LABEL_6:
      *(_DWORD *)(v2 + 76) = v4;
      goto LABEL_20;
    }
    if (qword_10229FC60 != -1)
      dispatch_once(&qword_10229FC60, &stru_102184370);
    v5 = qword_10229FC68;
    if (os_log_type_enabled((os_log_t)qword_10229FC68, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[CLSPUEclipseControl] Invalid client count. Not increasing.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC60 != -1)
        dispatch_once(&qword_10229FC60, &stru_102184370);
      LOWORD(v53) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC68, 16, "[CLSPUEclipseControl] Invalid client count. Not increasing.", &v53, 2, v53);
LABEL_98:
      v50 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLSPUEclipseControl::setSuppressionEnabled(BOOL, int, BOOL)_block_invoke", "%s\n", v6);
      if (v50 != buf)
        free(v50);
    }
  }
  else
  {
    if (v3)
    {
      v4 = v3 - 1;
      goto LABEL_6;
    }
    if (qword_10229FC60 != -1)
      dispatch_once(&qword_10229FC60, &stru_102184370);
    v7 = qword_10229FC68;
    if (os_log_type_enabled((os_log_t)qword_10229FC68, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[CLSPUEclipseControl] Invalid client count. Not decreasing.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC60 != -1)
        dispatch_once(&qword_10229FC60, &stru_102184370);
      LOWORD(v53) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC68, 16, "[CLSPUEclipseControl] Invalid client count. Not decreasing.", &v53, 2, v53);
      goto LABEL_98;
    }
  }
LABEL_20:
  if (!*(_BYTE *)(a1 + 53))
    goto LABEL_40;
  v8 = *(_DWORD *)(v2 + 84);
  if (*(_BYTE *)(a1 + 52))
  {
    if (v8 != -1)
    {
      v9 = v8 + 1;
LABEL_26:
      *(_DWORD *)(v2 + 84) = v9;
      goto LABEL_40;
    }
    if (qword_10229FC60 != -1)
      dispatch_once(&qword_10229FC60, &stru_102184370);
    v10 = qword_10229FC68;
    if (os_log_type_enabled((os_log_t)qword_10229FC68, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[CLSPUEclipseControl] Invalid Always On View Obstructed client count. Not increasing.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC60 != -1)
        dispatch_once(&qword_10229FC60, &stru_102184370);
      LOWORD(v53) = 0;
      LODWORD(v52) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC68, 16, "[CLSPUEclipseControl] Invalid Always On View Obstructed client count. Not increasing.", &v53, v52, v53);
LABEL_103:
      v51 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLSPUEclipseControl::setSuppressionEnabled(BOOL, int, BOOL)_block_invoke", "%s\n", v11);
      if (v51 != buf)
        free(v51);
    }
  }
  else
  {
    if (v8)
    {
      v9 = v8 - 1;
      goto LABEL_26;
    }
    if (qword_10229FC60 != -1)
      dispatch_once(&qword_10229FC60, &stru_102184370);
    v12 = qword_10229FC68;
    if (os_log_type_enabled((os_log_t)qword_10229FC68, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "[CLSPUEclipseControl] Invalid Always On View Obstructed count. Not decreasing.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC60 != -1)
        dispatch_once(&qword_10229FC60, &stru_102184370);
      LOWORD(v53) = 0;
      LODWORD(v52) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC68, 16, "[CLSPUEclipseControl] Invalid Always On View Obstructed count. Not decreasing.", &v53, v52, v53);
      goto LABEL_103;
    }
  }
LABEL_40:
  v13 = mach_absolute_time();
  v14 = sub_100127828(v13);
  v62[0] = CFSTR("eventTime");
  v63[0] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v14);
  v62[1] = CFSTR("eventTimeNS");
  -[NSDate timeIntervalSince1970](+[NSDate date](NSDate, "date"), "timeIntervalSince1970");
  v63[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v62[2] = CFSTR("clientType");
  v15 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48));
  if (*(_BYTE *)(a1 + 52))
    v16 = CFSTR("enabled");
  else
    v16 = CFSTR("disabled");
  v63[2] = v15;
  v63[3] = v16;
  v62[3] = CFSTR("clientEvent");
  v62[4] = CFSTR("clientNumbers");
  v63[4] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v2 + 76));
  sub_10019E128((uint64_t)+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v63, v62, 5), (uint64_t)"SuppressionManagerClientStateChange");
  v17 = *(_DWORD *)(v2 + 76);
  v18 = v17 != 0;
  v19 = *(unsigned __int8 *)(v2 + 74);
  v20 = v19 != v18;
  v21 = *(_DWORD *)(v2 + 84);
  if (*(_BYTE *)(v2 + 72) || v21)
  {
    if (v21)
      v23 = v21 == v17;
    else
      v23 = 0;
    v22 = v23 || *(_BYTE *)(v2 + 72) != 0;
    v20 = v19 != v18 || *(unsigned __int8 *)(v2 + 80) != v22;
  }
  else
  {
    v22 = 0;
  }
  if (qword_10229FC60 != -1)
    dispatch_once(&qword_10229FC60, &stru_102184370);
  v26 = qword_10229FC68;
  if (os_log_type_enabled((os_log_t)qword_10229FC68, OS_LOG_TYPE_DEFAULT))
  {
    v27 = *(_DWORD *)(v2 + 76);
    v28 = *(_DWORD *)(a1 + 48);
    v29 = *(unsigned __int8 *)(v2 + 74);
    *(_DWORD *)buf = 67241216;
    v65 = v27;
    v66 = 1026;
    v67 = v28;
    v68 = 1026;
    v69 = v29;
    v70 = 1026;
    v71 = v20;
    v72 = 1026;
    v73 = v22;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "[CLSPUEclipseControl] Number of clients,%{public}u, clientType,%{public}u, enabled,%{public}d, shouldConfigure,%{public}d, enableAlwaysOnViewObstructed,%{public}u", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC60 != -1)
      dispatch_once(&qword_10229FC60, &stru_102184370);
    v43 = *(_DWORD *)(v2 + 76);
    v44 = *(_DWORD *)(a1 + 48);
    v45 = *(unsigned __int8 *)(v2 + 74);
    LODWORD(v53) = 67241216;
    HIDWORD(v53) = v43;
    v54 = 1026;
    v55 = v44;
    v56 = 1026;
    v57 = v45;
    v58 = 1026;
    v59 = v20;
    v60 = 1026;
    v61 = v22;
    LODWORD(v52) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC68, 0, "[CLSPUEclipseControl] Number of clients,%{public}u, clientType,%{public}u, enabled,%{public}d, shouldConfigure,%{public}d, enableAlwaysOnViewObstructed,%{public}u", &v53, v52);
    v47 = (uint8_t *)v46;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLSPUEclipseControl::setSuppressionEnabled(BOOL, int, BOOL)_block_invoke", "%s\n", v46);
    if (v47 != buf)
      free(v47);
  }
  if (v20)
  {
    *(_BYTE *)(v2 + 74) = v18;
    *(_BYTE *)(v2 + 80) = v22;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    {
      v30 = 1 << *(_DWORD *)(a1 + 48);
      if (*(_BYTE *)(a1 + 52))
      {
        v31 = (unsigned int *)(v2 + 92);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 | v30, v31));
      }
      else
      {
        v40 = ~v30;
        v41 = (unsigned int *)(v2 + 92);
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 & v40, v41));
      }
    }
  }
  else
  {
    if (qword_10229FC60 != -1)
      dispatch_once(&qword_10229FC60, &stru_102184370);
    v33 = qword_10229FC68;
    if (os_log_type_enabled((os_log_t)qword_10229FC68, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "[CLSPUEclipseControl] No configure needed.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC60 != -1)
        dispatch_once(&qword_10229FC60, &stru_102184370);
      LOWORD(v53) = 0;
      LODWORD(v52) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC68, 2, "[CLSPUEclipseControl] No configure needed.", &v53, v52);
      v49 = (uint8_t *)v48;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLSPUEclipseControl::setSuppressionEnabled(BOOL, int, BOOL)_block_invoke", "%s\n", v48);
      if (v49 != buf)
        free(v49);
    }
    v34 = 1 << *(_DWORD *)(a1 + 48);
    if (*(_BYTE *)(a1 + 52))
    {
      v35 = (unsigned int *)(v2 + 92);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 | v34, v35));
    }
    else
    {
      v37 = ~v34;
      v38 = (unsigned int *)(v2 + 92);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 & v37, v38));
    }
  }
}

uint64_t sub_100D914CC(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[6];
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  v4 = sub_100127B9C();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100D91584;
  v7[3] = &unk_1021634F0;
  v8 = a2;
  v7[4] = &v9;
  v7[5] = a1;
  sub_1000A50A8(v4, (uint64_t)v7);
  v5 = *((unsigned __int8 *)v10 + 24);
  _Block_object_dispose(&v9, 8);
  return v5;
}

void sub_100D9156C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100D91584(uint64_t a1)
{
  _BYTE *v2;
  uint64_t result;

  v2 = *(_BYTE **)(a1 + 40);
  v2[88] = *(_BYTE *)(a1 + 48);
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 16))(v2);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

BOOL sub_100D915C4(uint64_t a1)
{
  int v2;
  uint64_t v3;
  char v4;
  int v5;
  int v6;
  float v7;
  unint64_t v8;
  float v9;
  unint64_t v10;
  NSObject *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  _BOOL8 v16;
  NSObject *v17;
  int v19;
  int v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v27;
  _BYTE v28[4];
  unint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  char v33;
  _DWORD v34[2];
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  unint64_t v42;
  __int16 v43;
  int v44;
  __int16 v45;
  unint64_t v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  uint8_t buf[4];
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  unint64_t v60;
  __int16 v61;
  int v62;
  __int16 v63;
  unint64_t v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;

  sub_100127B9C();
  sub_100127BDC();
  v2 = *(unsigned __int8 *)(a1 + 33);
  if (*(_BYTE *)(a1 + 33))
  {
    v3 = 1;
    v4 = 1;
  }
  else
  {
    v3 = *(unsigned __int8 *)(a1 + 74);
    v4 = *(_BYTE *)(a1 + 74);
  }
  sub_10006BD2C(*(_QWORD *)(a1 + 8), v3);
  v5 = *(unsigned __int8 *)(a1 + 36);
  v6 = *(unsigned __int8 *)(a1 + 69);
  v7 = *(float *)(a1 + 44);
  if (v7 <= 1.0)
    v8 = 1000000;
  else
    v8 = (unint64_t)(float)(v7 * 1000000.0);
  v9 = *(float *)(a1 + 60);
  if (v9 <= 0.0)
    v10 = 10000000;
  else
    v10 = (unint64_t)(float)(v9 * 1000000.0);
  v28[0] = 2;
  v28[1] = v4;
  v28[2] = v5;
  v28[3] = *(_BYTE *)(a1 + 88);
  v29 = v8;
  v30 = *(_BYTE *)(a1 + 53);
  v31 = v10;
  v32 = v6;
  v33 = *(_BYTE *)(a1 + 80);
  if (qword_10229FC60 != -1)
    dispatch_once(&qword_10229FC60, &stru_102184370);
  v11 = qword_10229FC68;
  if (os_log_type_enabled((os_log_t)qword_10229FC68, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *(unsigned __int8 *)(a1 + 74);
    v13 = *(unsigned __int8 *)(a1 + 88);
    v14 = *(unsigned __int8 *)(a1 + 53);
    v15 = *(unsigned __int8 *)(a1 + 80);
    *(_DWORD *)buf = 67242240;
    v52 = v12;
    v53 = 1026;
    v54 = v2;
    v55 = 1026;
    v56 = v5;
    v57 = 1026;
    v58 = v13;
    v59 = 2050;
    v60 = v8;
    v61 = 1026;
    v62 = v14;
    v63 = 2050;
    v64 = v10;
    v65 = 1026;
    v66 = v6;
    v67 = 1026;
    v68 = v15;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[CLSPUEclipseControl] Configuring,clientEnabled,%{public}d,alwaysOn,%{public}d,mlEnabled,%{public}d,viewObstructedStateDebugEnabled,%{public}d,suppressionDelayUs,%{public}llu,disableViewObstructedSuppression,%{public}d,keepViewObstructedRunningDelaySecs,%{public}llu,enableProxBaselineEstimation,%{public}d,enableAlwaysOnViewObstructed,%{public}d", buf, 0x40u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC60 != -1)
      dispatch_once(&qword_10229FC60, &stru_102184370);
    v19 = *(unsigned __int8 *)(a1 + 74);
    v20 = *(unsigned __int8 *)(a1 + 88);
    v21 = *(unsigned __int8 *)(a1 + 53);
    v22 = *(unsigned __int8 *)(a1 + 80);
    v34[0] = 67242240;
    v34[1] = v19;
    v35 = 1026;
    v36 = v2;
    v37 = 1026;
    v38 = v5;
    v39 = 1026;
    v40 = v20;
    v41 = 2050;
    v42 = v8;
    v43 = 1026;
    v44 = v21;
    v45 = 2050;
    v46 = v10;
    v47 = 1026;
    v48 = v6;
    v49 = 1026;
    v50 = v22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC68, 0, "[CLSPUEclipseControl] Configuring,clientEnabled,%{public}d,alwaysOn,%{public}d,mlEnabled,%{public}d,viewObstructedStateDebugEnabled,%{public}d,suppressionDelayUs,%{public}llu,disableViewObstructedSuppression,%{public}d,keepViewObstructedRunningDelaySecs,%{public}llu,enableProxBaselineEstimation,%{public}d,enableAlwaysOnViewObstructed,%{public}d", v34, 64);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSPUEclipseControl::configure()", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  v16 = sub_10051CF20(a1, (uint64_t)v28, (char *)0x17);
  if (v16)
  {
    atomic_store(*(_BYTE *)(a1 + 80), (unsigned __int8 *)(a1 + 96));
  }
  else
  {
    if (qword_10229FC60 != -1)
      dispatch_once(&qword_10229FC60, &stru_102184370);
    v17 = qword_10229FC68;
    if (os_log_type_enabled((os_log_t)qword_10229FC68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "[CLSPUEclipseControl] Configure failed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC60 != -1)
        dispatch_once(&qword_10229FC60, &stru_102184370);
      LOWORD(v34[0]) = 0;
      LODWORD(v27) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC68, 0, "[CLSPUEclipseControl] Configure failed", v34, v27);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSPUEclipseControl::configure()", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
  }
  return v16;
}

void sub_100D91A34(_QWORD *a1)
{
  sub_10051CE2C(a1);
  operator delete();
}

void sub_100D91A58(id a1)
{
  qword_10229FC68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Eclipse");
}

void sub_100D91B28(id a1)
{
  qword_102308200 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLUnifiedCellLocationProviderSilo"));
}

uint64_t sub_100D91BDC(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100D91F40;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102308220 != -1)
    dispatch_once(&qword_102308220, block);
  return qword_102311580;
}

void sub_100D91F18(id a1)
{
  sub_100197040();
  if ((sub_1001B796C() & 1) != 0)
    byte_102308210 = 1;
}

void sub_100D91F40()
{
  operator new();
}

void sub_100D91F88()
{
  operator delete();
}

void sub_100D91FAC(uint64_t a1, void *a2)
{
  uint64_t v3;

  v3 = sub_1006DAF10(a1, "UnifiedCell", a2);
  *(_QWORD *)v3 = off_1021843E0;
  *(_QWORD *)(v3 + 120) = off_102184590;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_QWORD *)(v3 + 176) = 0;
  sub_101348D60(v3 + 184);
  *(_DWORD *)(a1 + 880) = 0xFFFF;
  *(_QWORD *)(a1 + 892) = 0;
  *(_QWORD *)(a1 + 884) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 900) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 916) = _Q1;
  *(_OWORD *)(a1 + 932) = _Q1;
  *(_OWORD *)(a1 + 948) = _Q1;
  *(_DWORD *)(a1 + 964) = 0;
  *(_QWORD *)(a1 + 968) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 984) = 0;
  *(_QWORD *)(a1 + 976) = 0;
  *(_DWORD *)(a1 + 992) = 0;
  *(_QWORD *)(a1 + 996) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1004) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 1008) = 0;
  *(_QWORD *)(a1 + 1024) = 0;
  *(_QWORD *)(a1 + 1016) = 0;
  *(_BYTE *)(a1 + 1032) = 0;
  *(_QWORD *)(a1 + 1120) = 0;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1101) = 0u;
  *(_QWORD *)(a1 + 1128) = "na";
  *(_DWORD *)(a1 + 1136) = 0;
  *(_BYTE *)(a1 + 1140) = 0;
  sub_10064AD18(a1 + 1144);
  sub_100647FA8();
}

void sub_100D925F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, _QWORD *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t i;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  if (a17 < 0)
    operator delete(__p);
  nullsub_34(v27);
  for (i = 0; i != -6; i -= 3)
  {
    a20 = &v25[i + 136];
    sub_10087B4F8((void ***)&a20);
  }
  sub_10087B4F8((void ***)&a20);
  sub_1005A1100(v26);
  v31 = v25[22];
  v25[22] = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = v25[21];
  v25[21] = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = v25[20];
  v25[20] = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = v25[19];
  v25[19] = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v35 = v25[18];
  v25[18] = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = v25[17];
  v25[17] = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = *v28;
  *v28 = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  sub_1006DB4AC(v25);
  _Unwind_Resume(a1);
}

void sub_100D92790(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLUnifiedCellLocationProvider::onStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021846B8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLUnifiedCellLocationProvider::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021846B8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLUnifiedCellLocationProvider::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100D96094(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100D92948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100D92968(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLUnifiedCellLocationProvider::onNetworkLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021846B8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLUnifiedCellLocationProvider::onNetworkLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021846B8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLUnifiedCellLocationProvider::onNetworkLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100D96C0C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100D92B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100D92B40(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLUnifiedCellLocationProvider::onClientNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021846B8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLUnifiedCellLocationProvider::onClientNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021846B8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLUnifiedCellLocationProvider::onClientNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100D95CB0(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100D92CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100D92D18(uint64_t a1, int *a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLUnifiedCellLocationProvider::onCompanionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021846B8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLUnifiedCellLocationProvider::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021846B8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLUnifiedCellLocationProvider::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100D96704(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100D92ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100D92EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLUnifiedCellLocationProvider::onTileDownloadNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021846B8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLUnifiedCellLocationProvider::onTileDownloadNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021846B8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLUnifiedCellLocationProvider::onTileDownloadNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100D966B4(a4, v6, v7, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100D930A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100D930C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLUnifiedCellLocationProvider::onTileDownloadNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021846B8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLUnifiedCellLocationProvider::onTileDownloadNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021846B8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLUnifiedCellLocationProvider::onTileDownloadNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100D966B4(a4, v6, v7, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100D93270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

double sub_100D93290(uint64_t a1)
{
  void *v2;
  void *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void **v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  double result;
  _BYTE __p[24];
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[2];
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;

  *(_BYTE *)a1 = 0;
  sub_1001C4198((uint64_t)__p);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)__p;
  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  v3 = 0;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)&__p[8];
  *(_QWORD *)(a1 + 104) = v19;
  *(_QWORD *)&__p[16] = 0;
  v19 = 0;
  *(_QWORD *)&__p[8] = 0;
  v4 = v31[0];
  *(_OWORD *)(a1 + 272) = v30;
  *(_OWORD *)(a1 + 288) = v4;
  v5 = v27;
  *(_OWORD *)(a1 + 208) = v26;
  *(_OWORD *)(a1 + 224) = v5;
  v6 = v29;
  *(_OWORD *)(a1 + 240) = v28;
  *(_OWORD *)(a1 + 256) = v6;
  v7 = v23;
  *(_OWORD *)(a1 + 144) = v22;
  *(_OWORD *)(a1 + 160) = v7;
  v8 = v25;
  *(_OWORD *)(a1 + 176) = v24;
  *(_OWORD *)(a1 + 192) = v8;
  v9 = v21;
  *(_OWORD *)(a1 + 112) = v20;
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 300) = *(_OWORD *)((char *)v31 + 12);
  v10 = (void **)(a1 + 320);
  if (*(char *)(a1 + 343) < 0)
  {
    operator delete(*v10);
    v3 = *(void **)&__p[8];
  }
  *(_OWORD *)v10 = v32;
  *(_QWORD *)(a1 + 336) = v33;
  HIBYTE(v33) = 0;
  LOBYTE(v32) = 0;
  *(_DWORD *)(a1 + 504) = v44;
  v11 = v43;
  *(_OWORD *)(a1 + 472) = v42;
  *(_OWORD *)(a1 + 488) = v11;
  v12 = v39;
  *(_OWORD *)(a1 + 408) = v38;
  *(_OWORD *)(a1 + 424) = v12;
  v13 = v41;
  *(_OWORD *)(a1 + 440) = v40;
  *(_OWORD *)(a1 + 456) = v13;
  v14 = v35;
  *(_OWORD *)(a1 + 344) = v34;
  *(_OWORD *)(a1 + 360) = v14;
  v15 = v37;
  *(_OWORD *)(a1 + 376) = v36;
  *(_OWORD *)(a1 + 392) = v15;
  if (v3)
  {
    *(_QWORD *)&__p[16] = v3;
    operator delete(v3);
  }
  *(_QWORD *)&v16 = -1;
  *((_QWORD *)&v16 + 1) = -1;
  *(_OWORD *)(a1 + 28) = v16;
  *(_OWORD *)(a1 + 12) = v16;
  *(_OWORD *)&__p[4] = 0uLL;
  *(_QWORD *)(a1 + 512) = -1;
  *(_QWORD *)(a1 + 520) = -1;
  *(_QWORD *)(a1 + 528) = -1;
  *(_DWORD *)(a1 + 536) = -1;
  *(_OWORD *)(a1 + 540) = *(_OWORD *)__p;
  *(_DWORD *)(a1 + 556) = *(_DWORD *)&__p[16];
  *(_QWORD *)(a1 + 560) = -1;
  *(_QWORD *)(a1 + 568) = -1;
  *(_DWORD *)(a1 + 576) = -1;
  *(_OWORD *)(a1 + 580) = xmmword_101BB6FC0;
  *(_OWORD *)(a1 + 60) = v16;
  *(_OWORD *)(a1 + 44) = v16;
  *(_QWORD *)&__p[12] = 0;
  *(_QWORD *)&__p[4] = 0;
  *(_QWORD *)(a1 + 600) = -1;
  *(_DWORD *)(a1 + 608) = -1;
  *(_QWORD *)(a1 + 616) = -1;
  *(_QWORD *)(a1 + 624) = -1;
  *(_DWORD *)(a1 + 632) = -1;
  *(_OWORD *)(a1 + 636) = *(_OWORD *)__p;
  *(_DWORD *)(a1 + 652) = *(_DWORD *)&__p[16];
  *(_QWORD *)(a1 + 656) = -1;
  *(_QWORD *)(a1 + 664) = -1;
  *(_QWORD *)(a1 + 672) = -1;
  result = NAN;
  *(_QWORD *)(a1 + 680) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 688) = -1;
  return result;
}

void sub_100D93460(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLUnifiedCellLocationProvider::onDelayedCellPropagationTimer");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021846B8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLUnifiedCellLocationProvider::onDelayedCellPropagationTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021846B8);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLUnifiedCellLocationProvider::onDelayedCellPropagationTimer\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_100D968E4(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_100D93610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D93630(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v15;
  uint8_t *v16;
  _WORD v17[8];
  uint8_t buf[8];

  *(_QWORD *)a1 = off_1021843E0;
  *(_QWORD *)(a1 + 120) = off_102184590;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021846D8);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CellLoc, delete CLUnifiedCellLocationProvider", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021846D8);
    v17[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "CellLoc, delete CLUnifiedCellLocationProvider", v17, 2);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "virtual CLUnifiedCellLocationProvider::~CLUnifiedCellLocationProvider()", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  v3 = *(_QWORD *)(a1 + 1120);
  if (v3)
  {
    sub_10016E3C4(v3);
    v4 = *(_QWORD *)(a1 + 1120);
    if (v4)
    {
      sub_1009865B8(v4);
      operator delete();
    }
    *(_QWORD *)(a1 + 1120) = 0;
  }
  nullsub_34(a1 + 1144);
  for (i = 1088; i != 1040; i -= 24)
  {
    *(_QWORD *)buf = a1 + i;
    sub_10087B4F8((void ***)buf);
  }
  *(_QWORD *)buf = a1 + 1040;
  sub_10087B4F8((void ***)buf);
  if (*(char *)(a1 + 527) < 0)
    operator delete(*(void **)(a1 + 504));
  v6 = *(void **)(a1 + 272);
  if (v6)
  {
    *(_QWORD *)(a1 + 280) = v6;
    operator delete(v6);
  }
  v7 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  sub_1006DB4AC(a1);
  return a1;
}

void sub_100D93910(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_100D93920(uint64_t a1)
{
  return sub_100D93630(a1 - 120);
}

void sub_100D93928(uint64_t a1)
{
  sub_100D93630(a1);
  operator delete();
}

void sub_100D9394C(uint64_t a1)
{
  sub_100D93630(a1 - 120);
  operator delete();
}

NSDictionary *sub_100D93974(uint64_t a1)
{
  NSNumber *v1;
  _QWORD v3[3];
  _QWORD v4[3];

  v4[0] = CFSTR("na");
  v3[0] = CFSTR("name");
  v3[1] = CFSTR("clients");
  v1 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32));
  v3[2] = CFSTR("daily");
  v4[1] = v1;
  v4[2] = &off_10221C020;
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 3);
}

uint64_t sub_100D93A1C(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  NSObject *v11;
  int v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  _QWORD v21[4];
  int v22;
  int v23;
  int v24;
  uint8_t buf[4];
  int v26;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021846D8);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67240192;
    v26 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CellLoc, unregisterForNotificationInternal, notification, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021846D8);
    v13 = *a2;
    v23 = 67240192;
    v24 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "CellLoc, unregisterForNotificationInternal, notification, %{public}d", &v23, 8);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLUnifiedCellLocationProvider::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  sub_10003DFD4(a1);
  if (*a2 <= 4 && ((1 << *a2) & 0x19) != 0)
  {
    if (!sub_1001DFB18(a1))
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021846D8);
      v6 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CellLoc, no more location-related clients - stopping telephony notifications", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021846D8);
        LOWORD(v23) = 0;
        LODWORD(v20) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "CellLoc, no more location-related clients - stopping telephony notifications", &v23, v20);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLUnifiedCellLocationProvider::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
      v7 = *(_QWORD *)(a1 + 136);
      sub_10013F950(buf, CFSTR("kCellInfoNotification"));
      objc_msgSend(*(id *)(v7 + 16), "unregister:forNotification:", *(_QWORD *)(v7 + 8), sub_1001CFE7C((unsigned int *)buf));
      v8 = *(_QWORD *)(a1 + 136);
      sub_10013F950(buf, CFSTR("kCellMonitorRefreshResultNotification"));
      objc_msgSend(*(id *)(v8 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v8 + 8), sub_1001CFE7C((unsigned int *)buf), 0);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 144) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8), 3);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 144) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8), 0);
    }
    if (!*a2)
    {
      *(_DWORD *)buf = 0;
      if (!sub_1001B7864(a1, (int *)buf, 1) && *(double *)(a1 + 1208) > 0.0)
      {
        v9 = (unint64_t)(2290649225 * (int)(CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 1208) + 30.0)) >> 32;
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021846D8);
        v10 = (v9 >> 5) + (v9 >> 31);
        v11 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67240192;
          v26 = v10;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "UclpMetric, regperiod, %{public}d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021846D8);
          v23 = 67240192;
          v24 = v10;
          LODWORD(v20) = 8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "UclpMetric, regperiod, %{public}d", &v23, v20);
          v19 = (uint8_t *)v18;
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLUnifiedCellLocationProvider::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v18);
          if (v19 != buf)
            free(v19);
        }
        v21[0] = _NSConcreteStackBlock;
        v21[1] = 3221225472;
        v21[2] = sub_100D93FB0;
        v21[3] = &unk_102146830;
        v22 = v10;
        AnalyticsSendEventLazy(CFSTR("com.apple.clx.cellloc.regperiod"), v21);
      }
      *(CFAbsoluteTime *)(a1 + 1208) = CFAbsoluteTimeGetCurrent();
    }
  }
  return 1;
}

NSDictionary *sub_100D93FB0(uint64_t a1)
{
  _QWORD v2[2];
  _QWORD v3[2];

  v2[1] = CFSTR("duration");
  v3[0] = CFSTR("unregister");
  v2[0] = CFSTR("trigger");
  v3[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v3, v2, 2);
}

uint64_t sub_100D94044(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021846D8);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CellLoc, shutdown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021846D8);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "CellLoc, shutdown", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLUnifiedCellLocationProvider::shutdown()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  sub_1006DB4DC((uint64_t)a1);
  v3 = a1[16];
  a1[16] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[17];
  a1[17] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  result = a1[18];
  a1[18] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_100D94224(uint64_t a1, int a2, int a3, int a4)
{
  int *v7;

  v7 = (int *)(a1 + 1144);
  CFAbsoluteTimeGetCurrent();
  sub_1001F3EC0(v7, a2, a3, a4);
}

uint64_t sub_100D94268(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  int v5;
  int v6;
  NSObject *v7;
  int v8;
  int v9;
  void **v10;
  void **v11;
  void **v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  int v18;
  void **v19;
  void **v20;
  void **v21;
  char *v22;
  char *v23;
  void *v24[2];
  char v25;
  void *__p[2];
  char v27;
  _QWORD v28[7];
  _QWORD v29[7];
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char v33;
  void *v34;
  __int16 v35;
  void **v36;
  __int16 v37;
  void **v38;
  uint8_t buf[4];
  int v40;
  __int16 v41;
  void **v42;
  __int16 v43;
  void **v44;

  v30 = 0;
  v31 = &v30;
  v32 = 0x2020000000;
  v33 = 0;
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_100D94644;
  v29[3] = &unk_102184610;
  v29[4] = &v30;
  v29[5] = a2;
  v29[6] = a3;
  sub_1011782A0((uint64_t)v29);
  if (*((_BYTE *)v31 + 24))
  {
    v5 = 1;
  }
  else
  {
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_100D94724;
    v28[3] = &unk_102184610;
    v28[4] = &v30;
    v28[5] = a2;
    v28[6] = a3;
    sub_100CBB9AC((uint64_t)v28);
    v5 = *((unsigned __int8 *)v31 + 24);
  }
  v6 = *(_DWORD *)(a3 + 96);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021846D8);
  v7 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    v8 = *((unsigned __int8 *)v31 + 24);
    sub_101347C78(a2, &v34);
    v9 = SBYTE3(v38);
    v10 = (void **)v34;
    sub_100071A00(a3, __p);
    v11 = &v34;
    if (v9 < 0)
      v11 = v10;
    if (v27 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    *(_DWORD *)buf = 67240707;
    v40 = v8;
    v41 = 2081;
    v42 = v11;
    v43 = 2081;
    v44 = v12;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CellLoc, getCellFromTilesManager, isFound, %{public}d, cell, %{private}s, location, %{private}s", buf, 0x1Cu);
    if (v27 < 0)
      operator delete(__p[0]);
    if (SBYTE3(v38) < 0)
      operator delete(v34);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021846D8);
    v16 = qword_1022A0048;
    v17 = *((unsigned __int8 *)v31 + 24);
    sub_101347C78(a2, __p);
    v18 = v27;
    v19 = (void **)__p[0];
    sub_100071A00(a3, v24);
    v20 = __p;
    if (v18 < 0)
      v20 = v19;
    if (v25 >= 0)
      v21 = v24;
    else
      v21 = (void **)v24[0];
    LODWORD(v34) = 67240707;
    HIDWORD(v34) = v17;
    v35 = 2081;
    v36 = v20;
    v37 = 2081;
    v38 = v21;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 1, "CellLoc, getCellFromTilesManager, isFound, %{public}d, cell, %{private}s, location, %{private}s", &v34, 28);
    v23 = v22;
    if (v25 < 0)
      operator delete(v24[0]);
    if (v27 < 0)
      operator delete(__p[0]);
    sub_100512490("Generic", 1, 0, 2, "virtual CLNetworkLocationProvider::BestMatchLevel CLUnifiedCellLocationProvider::getCellFromTilesManager(const CLCell &, CLDaemonLocation &)", "%s\n", v23);
    if (v23 != (char *)buf)
      free(v23);
  }
  if (v6 == 6)
    v13 = 2;
  else
    v13 = 1;
  if (v5)
    v14 = v13;
  else
    v14 = 0;
  _Block_object_dispose(&v30, 8);
  return v14;
}

void sub_100D945F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  _Block_object_dispose(&a34, 8);
  _Unwind_Resume(a1);
}

void sub_100D94644(_QWORD *a1, uint64_t a2)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _BYTE v27[16];
  char *v28[5];

  sub_100D974B8((uint64_t)v27);
  v9 = 0xFFFF;
  v10 = 0;
  v11 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v12 = xmmword_101BAFC90;
  v13 = _Q0;
  v14 = _Q0;
  v15 = _Q0;
  v16 = 0;
  v19 = 0;
  v17 = 0xBFF0000000000000;
  v18 = 0;
  v20 = 0;
  v21 = 0xBFF0000000000000;
  v22 = 0x7FFFFFFF;
  v25 = 0;
  v23 = 0;
  v24 = 0;
  v26 = 0;
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = sub_101172C08(a2, a1[5], (uint64_t)&v9, (uint64_t)v27, a1[6]);
  sub_100067A00((uint64_t)v28, v28[1]);
}

void sub_100D9470C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100067A00(v2 + 16, *(char **)(v1 + 24));
  _Unwind_Resume(a1);
}

void sub_100D94724(uint64_t a1, uint64_t a2)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _BYTE v27[16];
  char *v28[5];

  sub_100D974B8((uint64_t)v27);
  v9 = 0xFFFF;
  v10 = 0;
  v11 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v12 = xmmword_101BAFC90;
  v13 = _Q0;
  v14 = _Q0;
  v15 = _Q0;
  v16 = 0;
  v19 = 0;
  v17 = 0xBFF0000000000000;
  v18 = 0;
  v20 = 0;
  v21 = 0xBFF0000000000000;
  v22 = 0x7FFFFFFF;
  v25 = 0;
  v23 = 0;
  v24 = 0;
  v26 = 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sub_100CB9364(a2, *(unsigned int **)(a1 + 40), (uint64_t)&v9, (uint64_t)v27, *(_QWORD *)(a1 + 48));
  sub_100067A00((uint64_t)v28, v28[1]);
}

void sub_100D947EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100067A00(v2 + 16, *(char **)(v1 + 24));
  _Unwind_Resume(a1);
}

id sub_100D94808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLNetworkLocationProvider")), "syncgetBestMatchLocation:forCell:", a3, a2);
}

BOOL sub_100D94844(uint64_t a1)
{
  int v2;

  v2 = 0;
  return sub_1001B7864(a1, &v2, 1) != 0;
}

BOOL sub_100D94874(uint64_t a1)
{
  int v2;

  v2 = 0;
  return sub_1001B7864(a1 - 120, &v2, 1) != 0;
}

uint64_t sub_100D948A8(uint64_t a1, uint64_t a2)
{
  int v3;

  v3 = 0;
  return (*(uint64_t (**)(uint64_t, int *, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v3, a2, 0, 0xFFFFFFFFLL, 0);
}

double sub_100D948E4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  double result;
  const char *v11;
  uint8_t *v12;
  int v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021846D8);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446210;
    v16 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@ClxCell, Fix, 0, ll, N/A, %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021846D8);
    v13 = 136446210;
    v14 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@ClxCell, Fix, 0, ll, N/A, %{public}s", &v13, 12);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLUnifiedCellLocationProvider::handleLocationFailed(const char *)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 368))(a1, a2);
  *(_DWORD *)buf = 9;
  (*(void (**)(uint64_t, uint8_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, buf, 1, 0xFFFFFFFFLL);
  sub_100D93290(a1 + 184);
  *(_DWORD *)(a1 + 880) = 0xFFFF;
  *(_QWORD *)(a1 + 892) = 0;
  *(_QWORD *)(a1 + 884) = 0;
  result = -1.0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 900) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 916) = _Q1;
  *(_OWORD *)(a1 + 932) = _Q1;
  *(_OWORD *)(a1 + 948) = _Q1;
  *(_DWORD *)(a1 + 964) = 0;
  *(_QWORD *)(a1 + 968) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 984) = 0;
  *(_QWORD *)(a1 + 976) = 0;
  *(_DWORD *)(a1 + 992) = 0;
  *(_QWORD *)(a1 + 996) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1004) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 1008) = 0;
  *(_QWORD *)(a1 + 1024) = 0;
  *(_QWORD *)(a1 + 1016) = 0;
  *(_BYTE *)(a1 + 1032) = 0;
  return result;
}

double sub_100D94B38(uint64_t a1, uint64_t a2)
{
  return sub_100D948E4(a1 - 120, a2);
}

uint64_t sub_100D94B40(uint64_t a1)
{
  double Current;
  unsigned int *v3;
  unsigned int *v4;
  uint64_t *v5;
  double v6;
  int v12;
  uint64_t *v13;
  NSObject *v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  NSObject *v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  char *v24;
  NSObject *v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE *v28;
  char *v29;
  NSObject *v30;
  _BYTE *v31;
  unint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  _BYTE *v38;
  char *v39;
  char *v40;
  NSObject *v41;
  int v42;
  int v43;
  id v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v48;
  int v49;
  int v50;
  const char *v51;
  char *v52;
  const char *v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _BYTE buf[22];
  char v61;
  int v62;
  _QWORD v63[3];
  _BYTE v64[12];
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  _BYTE __p[12];
  __int16 v82;
  _BYTE v83[10];

  if (*(_QWORD *)(a1 + 1040) == *(_QWORD *)(a1 + 1048))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021846D8);
    v46 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "CellQuery, skip, empty", __p, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021846D8);
      *(_WORD *)v64 = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 0, "CellQuery, skip, empty", v64, 2);
      v54 = (char *)v53;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLUnifiedCellLocationProvider::queryCellLocations()", "%s\n", v53);
      if (v54 != __p)
        free(v54);
    }
    return 0;
  }
  else
  {
    v57 = 0;
    v58 = 0;
    v59 = 0;
    Current = CFAbsoluteTimeGetCurrent();
    v3 = *(unsigned int **)(a1 + 1040);
    v4 = *(unsigned int **)(a1 + 1048);
    v5 = &qword_1022A0000;
    if (v3 != v4)
    {
      v6 = Current;
      __asm { FMOV            V0.2D, #-1.0 }
      v56 = _Q0;
      while ((sub_1006B57E8((uint64_t)v3) & 1) != 0)
      {
        if (!sub_1001EC790(v3[2]))
        {
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021846D8);
          v25 = v5[9];
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
          {
            sub_101347C78(v3, __p);
            v26 = __p;
            if (v83[9] < 0)
              v26 = *(_BYTE **)__p;
            *(_DWORD *)v64 = 136380675;
            *(_QWORD *)&v64[4] = v26;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "CellQuery, ignore, unqueirable, %{private}s", v64, 0xCu);
            if ((v83[9] & 0x80000000) != 0)
              operator delete(*(void **)__p);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_75;
          bzero(__p, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021846D8);
          v27 = v5[9];
          sub_101347C78(v3, v64);
          v28 = v64;
          if (SBYTE3(v66) < 0)
            v28 = *(_BYTE **)v64;
          *(_DWORD *)buf = 136380675;
          *(_QWORD *)&buf[4] = v28;
          LODWORD(v55) = 12;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v27, 2, "CellQuery, ignore, unqueirable, %{private}s", buf, v55);
          v19 = v29;
          if (SBYTE3(v66) < 0)
            operator delete(*(void **)v64);
          goto LABEL_51;
        }
        *(_DWORD *)v64 = 0xFFFF;
        *(_QWORD *)&v64[4] = 0;
        v65 = 0;
        v66 = xmmword_101BAFC90;
        v67 = v56;
        v68 = v56;
        v69 = v56;
        v70 = 0;
        v71 = 0xBFF0000000000000;
        v72 = 0;
        v73 = 0;
        v74 = 0;
        v75 = 0xBFF0000000000000;
        v76 = 0x7FFFFFFF;
        v78 = 0;
        v79 = 0;
        v77 = 0;
        v80 = 0;
        v12 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLNetworkLocationProvider")), "syncgetBestMatchLocation:forCell:", v64, v3);
        if (v12 < 3)
        {
          if (v6 - *((double *)&v69 + 1) > 28800.0)
          {
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_1021846D8);
            v30 = v5[9];
            if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
            {
              sub_101347C78(v3, __p);
              v31 = __p;
              if (v83[9] < 0)
                v31 = *(_BYTE **)__p;
              *(_DWORD *)buf = 136380675;
              *(_QWORD *)&buf[4] = v31;
              _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "CellQuery, query, %{private}s", buf, 0xCu);
              if ((v83[9] & 0x80000000) != 0)
                operator delete(*(void **)__p);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(__p, 0x65CuLL);
              if (qword_1022A0040 != -1)
                dispatch_once(&qword_1022A0040, &stru_1021846D8);
              v37 = v5[9];
              sub_101347C78(v3, buf);
              v38 = buf;
              if (v61 < 0)
                v38 = *(_BYTE **)buf;
              v62 = 136380675;
              v63[0] = v38;
              LODWORD(v55) = 12;
              _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v37, 1, "CellQuery, query, %{private}s", &v62, v55);
              v40 = v39;
              if (v61 < 0)
                operator delete(*(void **)buf);
              sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLUnifiedCellLocationProvider::queryCellLocations()", "%s\n", v40);
              if (v40 != __p)
                free(v40);
            }
            v32 = v58;
            if (v58 >= v59)
            {
              v33 = sub_1005A9E3C(&v57, (uint64_t)v3);
            }
            else
            {
              sub_1005A9F60((uint64_t)&v59, v58, (uint64_t)v3);
              v33 = v32 + 696;
            }
            v58 = v33;
            goto LABEL_75;
          }
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021846D8);
          v34 = v5[9];
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__p = 134349313;
            *(double *)&__p[4] = v6 - *((double *)&v69 + 1);
            v82 = 2049;
            *(_QWORD *)v83 = 0x40DC200000000000;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "CellQuery, ignore, fresh, %{public}.1f, %{private}.1f", __p, 0x16u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_75;
          bzero(__p, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021846D8);
          v35 = v5[9];
          *(_DWORD *)buf = 134349313;
          *(double *)&buf[4] = v6 - *((double *)&v69 + 1);
          *(_WORD *)&buf[12] = 2049;
          *(_QWORD *)&buf[14] = 0x40DC200000000000;
          LODWORD(v55) = 22;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v35, 2, "CellQuery, ignore, fresh, %{public}.1f, %{private}.1f", buf, v55);
          v19 = (char *)v36;
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLUnifiedCellLocationProvider::queryCellLocations()", "%s\n", v36);
        }
        else
        {
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021846D8);
          v13 = v5;
          v14 = v5[9];
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          {
            sub_101347C78(v3, __p);
            v15 = __p;
            if (v83[9] < 0)
              v15 = *(_BYTE **)__p;
            *(_DWORD *)buf = 67240451;
            *(_DWORD *)&buf[4] = v12;
            *(_WORD *)&buf[8] = 2081;
            *(_QWORD *)&buf[10] = v15;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CellQuery, ignore, matched, %{public}d, %{private}s", buf, 0x12u);
            if ((v83[9] & 0x80000000) != 0)
              operator delete(*(void **)__p);
          }
          v5 = v13;
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_75;
          bzero(__p, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021846D8);
          v16 = v13[9];
          sub_101347C78(v3, buf);
          v17 = buf;
          if (v61 < 0)
            v17 = *(_BYTE **)buf;
          v62 = 67240451;
          LODWORD(v63[0]) = v12;
          WORD2(v63[0]) = 2081;
          *(_QWORD *)((char *)v63 + 6) = v17;
          LODWORD(v55) = 18;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v16, 2, "CellQuery, ignore, matched, %{public}d, %{private}s", &v62, v55);
          v19 = v18;
          if (v61 < 0)
            operator delete(*(void **)buf);
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLUnifiedCellLocationProvider::queryCellLocations()", "%s\n", v19);
          v5 = v13;
        }
LABEL_52:
        if (v19 != __p)
          free(v19);
LABEL_75:
        v3 += 174;
        if (v3 == v4)
          goto LABEL_85;
      }
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021846D8);
      v20 = v5[9];
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        sub_101347C78(v3, __p);
        v21 = __p;
        if (v83[9] < 0)
          v21 = *(_BYTE **)__p;
        *(_DWORD *)v64 = 136446210;
        *(_QWORD *)&v64[4] = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "CellQuery, skip, invalid cell, %{public}s, #CloneMe", v64, 0xCu);
        if ((v83[9] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_75;
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021846D8);
      v22 = v5[9];
      sub_101347C78(v3, v64);
      v23 = v64;
      if (SBYTE3(v66) < 0)
        v23 = *(_BYTE **)v64;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v23;
      LODWORD(v55) = 12;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v22, 0, "CellQuery, skip, invalid cell, %{public}s, #CloneMe", buf, v55);
      v19 = v24;
      if (SBYTE3(v66) < 0)
        operator delete(*(void **)v64);
LABEL_51:
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLUnifiedCellLocationProvider::queryCellLocations()", "%s\n", v19);
      goto LABEL_52;
    }
LABEL_85:
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021846D8);
    v41 = v5[9];
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      v42 = *(_DWORD *)(a1 + 1136);
      v43 = *(unsigned __int8 *)(a1 + 1140);
      *(_DWORD *)__p = 134349568;
      *(_QWORD *)&__p[4] = 0x66FD0EB66FD0EB67 * ((uint64_t)(v58 - v57) >> 3);
      v82 = 1026;
      *(_DWORD *)v83 = v42;
      *(_WORD *)&v83[4] = 1026;
      *(_DWORD *)&v83[6] = v43;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "CellFlow, alsquery, num, %{public}lu, reach, %{public}d, nearby, %{public}d", __p, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021846D8);
      v48 = v5[9];
      v49 = *(_DWORD *)(a1 + 1136);
      v50 = *(unsigned __int8 *)(a1 + 1140);
      *(_DWORD *)v64 = 134349568;
      *(_QWORD *)&v64[4] = 0x66FD0EB66FD0EB67 * ((uint64_t)(v58 - v57) >> 3);
      LOWORD(v65) = 1026;
      *(_DWORD *)((char *)&v65 + 2) = v49;
      HIWORD(v65) = 1026;
      LODWORD(v66) = v50;
      LODWORD(v55) = 24;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v48, 0, "CellFlow, alsquery, num, %{public}lu, reach, %{public}d, nearby, %{public}d", v64, v55);
      v52 = (char *)v51;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLUnifiedCellLocationProvider::queryCellLocations()", "%s\n", v51);
      if (v52 != __p)
        free(v52);
    }
    if (v58 != v57 && (*(_DWORD *)(a1 + 1136) || *(_BYTE *)(a1 + 1140)))
    {
      v44 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLNetworkLocationProvider"));
      v45 = 1;
      objc_msgSend(v44, "syncgetQueryLocationsForCells:useCache:", &v57, 1);
    }
    else
    {
      v45 = 0;
    }
    *(_QWORD *)__p = &v57;
    sub_10087B4F8((void ***)__p);
  }
  return v45;
}

void sub_100D9587C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void **a57)
{
  a57 = (void **)&a26;
  sub_10087B4F8(&a57);
  _Unwind_Resume(a1);
}

uint64_t sub_100D958F0(uint64_t a1)
{
  return sub_100D94B40(a1 - 120);
}

id sub_100D958F8(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  return _objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLCellTilesManager")), "requestCellTileDownloadByType:lat:lon:seckey:", a2, a3, a4, a5);
}

void sub_100D9594C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  double Current;
  id v6;
  const char *v7;
  char *v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[2];
  __int128 v17;
  uint64_t v18;
  void *__p[2];
  char v20;
  int v21;
  uint64_t v22;
  _BYTE buf[12];
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[2];
  __int128 v30;
  uint64_t v31;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021846D8);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CellFlow, requestWifiLocationUpdate, reason, %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021846D8);
    v21 = 136446210;
    v22 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "CellFlow, requestWifiLocationUpdate, reason, %{public}s", &v21, 12);
    v8 = (char *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLUnifiedCellLocationProvider::requestWiFiLocationUpdate(const char *)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  Current = CFAbsoluteTimeGetCurrent();
  sub_1015A2E04(__p, "uclp");
  sub_100225558((uint64_t)buf, 4, 1, (__int128 *)__p, Current);
  if (v20 < 0)
    operator delete(__p[0]);
  v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLWifiLocationProvider"));
  v9 = *(_QWORD *)buf;
  v10 = buf[8];
  if (SHIBYTE(v25) < 0)
  {
    sub_100115CE4(&v11, (void *)v24, *((unint64_t *)&v24 + 1));
  }
  else
  {
    v11 = v24;
    v12 = v25;
  }
  v14 = v27;
  v15 = v28;
  v16[0] = v29[0];
  *(_OWORD *)((char *)v16 + 12) = *(_OWORD *)((char *)v29 + 12);
  v13 = v26;
  if (SHIBYTE(v31) < 0)
  {
    sub_100115CE4(&v17, (void *)v30, *((unint64_t *)&v30 + 1));
  }
  else
  {
    v17 = v30;
    v18 = v31;
  }
  objc_msgSend(v6, "requestLocationUpdateWithParameters:", sub_10061AB3C((uint64_t)&v9));
  if (SHIBYTE(v18) < 0)
    operator delete((void *)v17);
  if (SHIBYTE(v12) < 0)
    operator delete((void *)v11);
  if (SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  if (SHIBYTE(v25) < 0)
    operator delete((void *)v24);
}

void sub_100D95C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,char a41)
{
  if (a19 < 0)
    operator delete(__p);
  sub_10055A600((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_100D95CA8(uint64_t a1, uint64_t a2)
{
  sub_100D9594C(a1 - 120, a2);
}

double sub_100D95CB0(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v5;
  NSObject *v6;
  id v12;
  uint64_t *v13;
  double result;
  NSObject *v15;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  _WORD v21[8];
  uint8_t buf[1640];

  v5 = a1 + 900;
  if (*a3 == 4)
  {
    if (*(_DWORD *)(a4 + 188) != 1)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021846D8);
      v15 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Cell, kNotificationLocationServicesStatus", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021846D8);
        v21[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "Cell, kNotificationLocationServicesStatus", v21, 2);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 2, "void CLUnifiedCellLocationProvider::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
      *(_DWORD *)(a1 + 880) = 0xFFFF;
      *(_QWORD *)(a1 + 892) = 0;
      *(_QWORD *)(a1 + 884) = 0;
      result = -1.0;
      __asm { FMOV            V1.2D, #-1.0 }
      *(_OWORD *)v5 = xmmword_101BAFC90;
      *(_OWORD *)(v5 + 16) = _Q1;
      *(_OWORD *)(v5 + 32) = _Q1;
      *(_OWORD *)(v5 + 48) = _Q1;
      *(_DWORD *)(a1 + 964) = 0;
      *(_QWORD *)(a1 + 968) = 0xBFF0000000000000;
      *(_QWORD *)(a1 + 984) = 0;
      *(_QWORD *)(a1 + 976) = 0;
      *(_DWORD *)(a1 + 992) = 0;
      *(_QWORD *)(v5 + 96) = 0xBFF0000000000000;
      *(_DWORD *)(a1 + 1004) = 0x7FFFFFFF;
      *(_QWORD *)(a1 + 1008) = 0;
      *(_QWORD *)(a1 + 1024) = 0;
      *(_QWORD *)(a1 + 1016) = 0;
      *(_BYTE *)(a1 + 1032) = 0;
    }
  }
  else if (!*a3)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021846D8);
    v6 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Cell, kNotificationReset", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021846D8);
      v21[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "Cell, kNotificationReset", v21, 2);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLUnifiedCellLocationProvider::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    *(_DWORD *)(a1 + 880) = 0xFFFF;
    *(_QWORD *)(a1 + 892) = 0;
    *(_QWORD *)(a1 + 884) = 0;
    __asm { FMOV            V1.2D, #-1.0 }
    *(_OWORD *)v5 = xmmword_101BAFC90;
    *(_OWORD *)(v5 + 16) = _Q1;
    *(_OWORD *)(v5 + 32) = _Q1;
    *(_OWORD *)(v5 + 48) = _Q1;
    *(_DWORD *)(a1 + 964) = 0;
    *(_QWORD *)(a1 + 968) = 0xBFF0000000000000;
    *(_QWORD *)(a1 + 984) = 0;
    *(_QWORD *)(a1 + 976) = 0;
    *(_DWORD *)(a1 + 992) = 0;
    *(_QWORD *)(v5 + 96) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 1004) = 0x7FFFFFFF;
    *(_QWORD *)(a1 + 1008) = 0;
    *(_QWORD *)(a1 + 1024) = 0;
    *(_QWORD *)(a1 + 1016) = 0;
    *(_BYTE *)(a1 + 1032) = 0;
    v12 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLClientManager"));
    if (byte_1023081FF >= 0)
      v13 = &qword_1023081E8;
    else
      v13 = (uint64_t *)qword_1023081E8;
    objc_msgSend(v12, "resetNotificationConsumedForIdentifier:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13));
  }
  return result;
}

uint64_t sub_100D96094(uint64_t result, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  CFAbsoluteTime Current;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  _QWORD v24[4];
  int v25;
  _QWORD v26[5];
  int v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  uint8_t buf[4];
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;

  v4 = result;
  v5 = *a3;
  if (*a3 == 3)
  {
    result = sub_1001DFB18(result);
    if ((_DWORD)result)
    {
      Current = CFAbsoluteTimeGetCurrent();
      return (*(uint64_t (**)(uint64_t, const char *, CFAbsoluteTime, double))(*(_QWORD *)v4 + 312))(v4, "wake", Current, 2.0);
    }
  }
  else if (v5 == 16)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021846D8);
    v7 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_DWORD *)(v4 + 1184);
      v9 = *(_DWORD *)(v4 + 1188);
      v10 = *(_DWORD *)(v4 + 1192);
      v11 = *(_DWORD *)(v4 + 1196);
      *(_DWORD *)buf = 67240960;
      v36 = v8;
      v37 = 1026;
      v38 = v9;
      v39 = 1026;
      v40 = v10;
      v41 = 1026;
      v42 = v11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "UclpMetric, heartbeat, registrants, %{public}d, requests, %{public}d, infonotify, %{public}d, monitor, %{public}d", buf, 0x1Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021846D8);
      v15 = *(_DWORD *)(v4 + 1184);
      v16 = *(_DWORD *)(v4 + 1188);
      v17 = *(_DWORD *)(v4 + 1192);
      v18 = *(_DWORD *)(v4 + 1196);
      v27 = 67240960;
      v28 = v15;
      v29 = 1026;
      v30 = v16;
      v31 = 1026;
      v32 = v17;
      v33 = 1026;
      v34 = v18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "UclpMetric, heartbeat, registrants, %{public}d, requests, %{public}d, infonotify, %{public}d, monitor, %{public}d", &v27, 26);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLUnifiedCellLocationProvider::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_100D96544;
    v26[3] = &unk_102131FE8;
    v26[4] = v4;
    AnalyticsSendEventLazy(CFSTR("com.apple.clx.cellloc.heartbeat"), v26);
    *(_OWORD *)(v4 + 1184) = 0u;
    sub_10064AD28((int *)(v4 + 1144));
    sub_10064AD18(v4 + 1144);
    *(_DWORD *)buf = 0;
    result = sub_1001B7864(v4, (int *)buf, 1);
    if ((_DWORD)result && *(double *)(v4 + 1208) > 0.0)
    {
      v12 = (unint64_t)(2290649225 * (int)(CFAbsoluteTimeGetCurrent() - *(double *)(v4 + 1208) + 30.0)) >> 32;
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021846D8);
      v13 = (v12 >> 5) + (v12 >> 31);
      v14 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67240192;
        v36 = v13;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "UclpMetric, regperiod, %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021846D8);
        v27 = 67240192;
        v28 = v13;
        LODWORD(v23) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "UclpMetric, regperiod, %{public}d", &v27, v23);
        v22 = (uint8_t *)v21;
        sub_100512490("Generic", 1, 0, 2, "void CLUnifiedCellLocationProvider::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v21);
        if (v22 != buf)
          free(v22);
      }
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_100D96620;
      v24[3] = &unk_102146830;
      v25 = v13;
      return AnalyticsSendEventLazy(CFSTR("com.apple.clx.cellloc.regperiod"), v24);
    }
  }
  else if (v5 == 6)
  {
    *(_DWORD *)(result + 1136) = *(_DWORD *)(a4 + 4);
  }
  return result;
}

NSDictionary *sub_100D96544(uint64_t a1)
{
  unsigned int *v1;
  _QWORD v3[4];
  _QWORD v4[4];

  v1 = *(unsigned int **)(a1 + 32);
  v3[0] = CFSTR("registrants");
  v4[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v1[296]);
  v3[1] = CFSTR("requests");
  v4[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v1[297]);
  v3[2] = CFSTR("infonotify");
  v4[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v1[298]);
  v3[3] = CFSTR("monitor");
  v4[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v1[299]);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 4);
}

NSDictionary *sub_100D96620(uint64_t a1)
{
  _QWORD v2[2];
  _QWORD v3[2];

  v2[1] = CFSTR("duration");
  v3[0] = CFSTR("heartbeat");
  v2[0] = CFSTR("trigger");
  v3[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v3, v2, 2);
}

void sub_100D966B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  _DWORD *v5;
  int v6;

  v4 = *(_DWORD *)(a4 + 80);
  if (v4)
  {
    v5 = (_DWORD *)(a1 + 1144);
    v6 = *(unsigned __int8 *)(a4 + 84);
    CFAbsoluteTimeGetCurrent();
    sub_10064B5D8(v5, v6, v4);
  }
}

void sub_100D96704(uint64_t a1, uint64_t a2, int *a3, _BYTE *a4)
{
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021846D8);
  v7 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v8 = *a3;
    *(_DWORD *)buf = 67240192;
    v14 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CellLoc, onCompanionNotification, notification, %{public}d, Tiles", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021846D8);
    v9 = *a3;
    v12[0] = 67240192;
    v12[1] = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "CellLoc, onCompanionNotification, notification, %{public}d, Tiles", v12, 8);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLUnifiedCellLocationProvider::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if (*a3 == 5)
  {
    sub_100197040();
    if (sub_100195F08())
      *(_BYTE *)(a1 + 1140) = *a4;
  }
}

void sub_100D968E4(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (a2 && *(_QWORD *)(a1 + 1120) == a2)
  {
    if (sub_1001DFB18(a1))
    {
      sub_100019640(a1, *(const char **)(a1 + 1128));
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021846D8);
      v4 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CellFlow, timer, cancel, -1", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021846D8);
        v9[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "CellFlow, timer, cancel, -1", v9, 2);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "void CLUnifiedCellLocationProvider::onDelayedCellPropagationTimer(CLPersistentTimer *)", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
      sub_1001F40D0(*(_QWORD *)(a1 + 1120), 1.79769313e308);
    }
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021846D8);
    v3 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CellLoc, ignore timer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021846D8);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "CellLoc, ignore timer", v9, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLUnifiedCellLocationProvider::onDelayedCellPropagationTimer(CLPersistentTimer *)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
}

void sub_100D96C0C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  _BOOL4 v13;
  int v14;
  NSObject *v15;
  double Current;
  NSObject *v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  _BOOL4 v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  const char *v27;
  uint8_t *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  _BOOL4 v33;
  uint8_t buf[4];
  uint64_t v35;
  __int16 v36;
  _BOOL4 v37;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021846D8);
  v7 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *a3;
    *(_DWORD *)buf = 67240192;
    LODWORD(v35) = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CellQuery, notify, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021846D8);
    v18 = *a3;
    v30 = 67240192;
    LODWORD(v31) = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "CellQuery, notify, %{public}d", &v30, 8);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLUnifiedCellLocationProvider::onNetworkLocationNotification(int, const CLNetworkLocationProvider_Type::Notification &, const CLNetworkLocationProvider_Type::NotificationData &)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  if (*a3)
  {
    if (*a3 == 3)
    {
      v9 = (uint64_t *)(a1 + 900);
      if (*(double *)(a1 + 900) < 0.0
        || (v10 = *(_QWORD *)(a1 + 1040), v10 == *(_QWORD *)(a1 + 1048))
        || sub_101348D90(v10, a1 + 184))
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021846D8);
        v11 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          v12 = *v9;
          v13 = *(_QWORD *)(a1 + 1040) == *(_QWORD *)(a1 + 1048);
          *(_DWORD *)buf = 134349312;
          v35 = v12;
          v36 = 1026;
          v37 = v13;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "CellQuery, fail, acc, %{public}.1f, empty, %{public}d", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021846D8);
          v21 = *v9;
          v22 = *(_QWORD *)(a1 + 1040) == *(_QWORD *)(a1 + 1048);
          v30 = 134349312;
          v31 = v21;
          v32 = 1026;
          v33 = v22;
          LODWORD(v29) = 18;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "CellQuery, fail, acc, %{public}.1f, empty, %{public}d", &v30, v29);
          v24 = (uint8_t *)v23;
          sub_100512490("Generic", 1, 0, 2, "void CLUnifiedCellLocationProvider::onNetworkLocationNotification(int, const CLNetworkLocationProvider_Type::Notification &, const CLNetworkLocationProvider_Type::NotificationData &)", "%s\n", v23);
          if (v24 != buf)
            free(v24);
        }
        (*(void (**)(uint64_t, const char *))(*(_QWORD *)a1 + 384))(a1, "alserror");
        CFAbsoluteTimeGetCurrent();
        sub_10064B400(a1 + 1144, 0);
      }
    }
  }
  else if (sub_1001DFB18(a1))
  {
    v14 = *(_DWORD *)(a4 + 8);
    CFAbsoluteTimeGetCurrent();
    sub_10064B400(a1 + 1144, v14);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021846D8);
    v15 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "CellQuery, response", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021846D8);
      LOWORD(v30) = 0;
      LODWORD(v29) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "CellQuery, response", &v30, v29);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "void CLUnifiedCellLocationProvider::onNetworkLocationNotification(int, const CLNetworkLocationProvider_Type::Notification &, const CLNetworkLocationProvider_Type::NotificationData &)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    Current = CFAbsoluteTimeGetCurrent();
    sub_1001E6A38(a1 + 120, (uint64_t)"als", (_OWORD **)(a1 + 1040), a1 + 880, Current);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021846D8);
    v17 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "CellQuery, no client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021846D8);
      LOWORD(v30) = 0;
      LODWORD(v29) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "CellQuery, no client", &v30, v29);
      v28 = (uint8_t *)v27;
      sub_100512490("Generic", 1, 0, 2, "void CLUnifiedCellLocationProvider::onNetworkLocationNotification(int, const CLNetworkLocationProvider_Type::Notification &, const CLNetworkLocationProvider_Type::NotificationData &)", "%s\n", v27);
      if (v28 != buf)
        free(v28);
    }
  }
}

void sub_100D97258()
{
  operator new();
}

void sub_100D97300(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_100D9733C()
{
  operator new();
}

void sub_100D973EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

id sub_100D97428(uint64_t a1)
{
  return objc_msgSend(-[CLServiceVendor proxyForService:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "proxyForService:", CFSTR("CLUnifiedCellLocationProvider")), "syncgetDoSync:", a1);
}

void sub_100D97460(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100D9748C(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_100D974B8(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = clock();
  *(_QWORD *)(a1 + 48) = clock();
  return a1;
}

void sub_100D9750C(_Unwind_Exception *a1)
{
  uint64_t v1;
  char **v2;

  sub_100067A00(v1, *v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_100D97524(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_100D975A8(result, a4);
    result = (_QWORD *)sub_100D975FC((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_100D97588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_10087B4F8(&a9);
  _Unwind_Resume(a1);
}

char *sub_100D975A8(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x5E293205E29321)
    sub_100259694();
  result = (char *)sub_1005A9B68((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[696 * v4];
  return result;
}

uint64_t sub_100D975FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_1005A9F60(a1, v4, v6);
      v6 += 696;
      v4 = v12 + 696;
      v12 += 696;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_1006B6614((uint64_t)v9);
  return v4;
}

void sub_100D97690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1006B6614((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100D976A4()
{
  sub_1015A2E04(qword_1023081D0, "t");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023081D0, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023081E8, "UnifiedCellLocationProvider");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023081E8, (void *)&_mh_execute_header);
}

void sub_100D977C4(id a1)
{
  qword_102308228 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLNoMovementServiceSilo"));
}

void sub_100D97878(id a1)
{
  sub_100197040();
  if (sub_100195F08())
    byte_102308238 = 1;
}

void sub_100D97C44()
{
  operator delete();
}

id sub_100D97C70(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _objc_msgSend(a4, "onWatchOrientationSettingsNotification:data:", a2, a3);
}

id sub_100D97C80(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "onDeviceMotionData:", a1);
}

id sub_100D97C90(void *a1, uint64_t a2)
{
  return _objc_msgSend(a1, "toggleDeviceMotion:", a2);
}

uint64_t sub_100D97C98(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  _BYTE v8[16];
  uint64_t v9;

  v6 = *a2;
  sub_100525028(v8);
  v9 = *(_QWORD *)(a3 + 16);
  objc_msgSend(a4, "onMobileAssetNotification:data:", v6, v8);
  return sub_10011A5A8(v8);
}

void sub_100D97CF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_100D98F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100D990A4(id a1)
{
  qword_10229FFE8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CheckIn");
}

uint64_t sub_100D990D0()
{
  if ((sub_10114BBB0() & 1) != 0)
    return 1;
  else
    return sub_100D990F4();
}

uint64_t sub_100D990F4()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[8];
  std::__shared_weak_count *v12;

  sub_1001E4804(buf);
  v0 = *(_QWORD *)buf;
  sub_100197040();
  v1 = sub_10075D288();
  LOBYTE(v10[0]) = 0;
  if (sub_1001E4874(v0, "EnableRavenRecorder", (BOOL *)v10))
    v2 = LOBYTE(v10[0]) != 0;
  else
    v2 = v1;
  v3 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_102184790);
  v6 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Raven: EnableRavenRecorder,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_102184790);
    v10[0] = 67240192;
    v10[1] = v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: EnableRavenRecorder,%{public}d", v10, 8);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLRavenSerializer::isDiskEnabled()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  return v2;
}

void sub_100D9931C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D99338@<X0>(std::string *a1@<X8>)
{
  std::string *v2;
  int v3;
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  const std::string::value_type *v14;
  int v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  uint64_t result;
  const char *v22;
  uint8_t *v23;
  BOOL v24[16];
  uint8_t buf[8];
  std::__shared_weak_count *v26;

  v2 = (std::string *)sub_1004886A8((uint64_t)a1);
  std::string::assign(v2, "raven");
  sub_1001E4804(buf);
  v24[0] = 0;
  v3 = sub_1001E4874(*(uint64_t *)buf, "WriteRavenLogsToCrashReporterFolder", v24);
  if (v24[0])
    v4 = v3;
  else
    v4 = 0;
  v5 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_1001E4804(buf);
  v24[0] = 0;
  v8 = sub_1001E4874(*(uint64_t *)buf, "WriteLocationdLogsToCrashReporterFolder", v24);
  if (v24[0])
    v9 = v8;
  else
    v9 = 0;
  v10 = v4 | v9;
  v11 = v26;
  if (v26)
  {
    v12 = (unint64_t *)&v26->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
    v14 = "/var/mobile/Library/Logs/CrashReporter/raven";
  else
    v14 = "/var/mobile/Library/Logs/raven";
  std::string::assign(a1 + 2, v14);
  sub_1001E4804(buf);
  v24[0] = 0;
  v15 = sub_1001E4874(*(uint64_t *)buf, "EnableLargeRavenLogs", v24);
  if (v24[0])
    v16 = v15;
  else
    v16 = 0;
  v17 = v26;
  if (!v26)
    goto LABEL_27;
  v18 = (unint64_t *)&v26->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if (!v16)
      goto LABEL_34;
  }
  else
  {
LABEL_27:
    if (!v16)
      goto LABEL_34;
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_102184790);
  v20 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "EnableLargeRavenLogs is set", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_102184790);
    *(_WORD *)v24 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "EnableLargeRavenLogs is set", v24, 2);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "static CLProtobufSerializer::Config CLRavenSerializer::generateConfig()", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  a1[4].__r_.__value_.__l.__size_ *= 16;
LABEL_34:
  a1[4].__r_.__value_.__s.__data_[21] = sub_10114BBB0();
  result = sub_100D990F4();
  a1[4].__r_.__value_.__s.__data_[22] = result;
  return result;
}

void sub_100D99660(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10048839C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100D996A4(_QWORD *a1)
{
  std::string v3;
  void *v4;
  char v5;
  void *v6;
  char v7;
  void *__p;
  char v9;

  sub_100D99338(&v3);
  sub_10114BC58((uint64_t)a1, (__int128 *)&v3);
  if (v9 < 0)
    operator delete(__p);
  if (v7 < 0)
    operator delete(v6);
  if (v5 < 0)
    operator delete(v4);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  *a1 = &off_102184768;
  return a1;
}

void sub_100D99730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10048839C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100D9974C(id a1)
{
  qword_1022A00A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Raven");
}

uint64_t sub_100D99778(uint64_t a1, char *a2, uint64_t *a3, double a4)
{
  char *v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  __int16 v11;
  double v12;
  uint8_t buf[1640];

  v12 = a4;
  sub_10067D0DC(a1, a3, &v12);
  *(_QWORD *)a1 = off_1021847C0;
  sub_1015A2E04((_QWORD *)(a1 + 232), a2);
  sub_100E81598((_QWORD *)(a1 + 256), a1 + 64, 0);
  if (sub_1000CC4F4(a1 + 64))
  {
    v6 = (char *)(a1 + 232);
    if (*(char *)(a1 + 255) < 0)
      v6 = *(char **)(a1 + 232);
    sub_100634364(a1 + 64, v6, (const char **)&qword_102308248, 0, 0);
    sub_10067D20C(a1);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021847F0);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning Database is not valid; not initializing",
        buf,
        2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021847F0);
      v11 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Database is not valid; not initializing",
        &v11,
        2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "CLLteCellLocationDatabase::CLLteCellLocationDatabase(const char *, const CLSqliteDatabase::SqliteProperties &, double)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  return a1;
}

void sub_100D99994(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 255) < 0)
    operator delete(*v2);
  sub_10067D1C4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100D999D0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021847C0;
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  return sub_10067D1C4(a1);
}

void sub_100D99A10(uint64_t a1)
{
  sub_100D999D0(a1);
  operator delete();
}

uint64_t sub_100D99A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  const char *v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  NSObject *v23;
  void **v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  sqlite3_stmt *v28;
  sqlite3_stmt *v29;
  sqlite3_stmt *v30;
  sqlite3_stmt *v31;
  sqlite3_stmt *v32;
  sqlite3_stmt *v33;
  sqlite3_stmt *v34;
  sqlite3_int64 v35;
  NSObject *v36;
  void **v37;
  uint64_t v38;
  NSObject *v39;
  void **v40;
  sqlite3_stmt *v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v46;
  _BYTE *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  _BYTE *v51;
  char *v52;
  char *v53;
  const char *v54;
  void **v55;
  uint64_t v56;
  _BYTE *v57;
  char *v58;
  char *v59;
  sqlite3_int64 v60;
  _BYTE buf[12];
  __int16 v62;
  sqlite3_int64 v63;
  char v64;
  _BYTE v65[12];
  void *__p[2];
  char v67;
  _BYTE v68[12];
  __int16 v69;
  _BYTE v70[10];
  _QWORD v71[8];
  void *v72;
  char v73;
  _BYTE v74[152];

  v60 = 0;
  v6 = (_QWORD *)(a1 + 256);
  if (sub_100E815A0((_QWORD *)(a1 + 256)))
  {
LABEL_22:
    sub_100087AF4(v6, v65);
    v28 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v65);
    if (sub_1000CD75C(v28, 1, *(_DWORD *)a2)
      && (v29 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v65), sub_1000CD75C(v29, 2, *(_DWORD *)(a2 + 4)))
      && (v30 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v65), sub_1000CD75C(v30, 3, *(_DWORD *)(a2 + 8)))
      && (v31 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v65), sub_1000CD75C(v31, 4, *(_DWORD *)(a2 + 12)))
      && (v32 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v65), sub_1000CD75C(v32, 5, *(_DWORD *)(a2 + 16)))
      && (v33 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v65), sub_1000CD75C(v33, 6, *(_DWORD *)(a2 + 20))))
    {
      v34 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v65);
      sub_10023C9B0(a1 + 64, v34);
      v35 = sub_10063E99C(a1 + 64);
      v60 = v35;
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021847F0);
      v36 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        sub_10009643C((unsigned int *)a2, __p);
        v37 = v67 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)v68 = 136315394;
        *(_QWORD *)&v68[4] = v37;
        v69 = 2048;
        *(_QWORD *)v70 = v35;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "CELL_CEN: adding cell, %s, rowid, %lld", v68, 0x16u);
        if (v67 < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021847F0);
        v56 = qword_1022A02D8;
        sub_10009643C((unsigned int *)a2, v68);
        if (v70[9] >= 0)
          v57 = v68;
        else
          v57 = *(_BYTE **)v68;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v57;
        v62 = 2048;
        v63 = v35;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v56, 2, "CELL_CEN: adding cell, %s, rowid, %lld", buf, 22);
        v59 = v58;
        if ((v70[9] & 0x80000000) != 0)
          operator delete(*(void **)v68);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLLteCellLocationDatabase::setLocation(const CLTelephonyService_Type::LteCell &, const CLDaemonLocation &)", "%s\n", v59);
        if (v59 != (char *)__p)
          free(v59);
      }
      v38 = sub_10067E190((_QWORD *)a1, &v60, a3);
    }
    else
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021847F0);
      v39 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        sub_10009643C((unsigned int *)a2, __p);
        v40 = v67 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)v68 = 136315138;
        *(_QWORD *)&v68[4] = v40;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_FAULT, "CELL_LOC: failed to bind %s", v68, 0xCu);
        if (v67 < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021847F0);
        v46 = qword_1022A02D8;
        sub_10009643C((unsigned int *)a2, v68);
        if (v70[9] >= 0)
          v47 = v68;
        else
          v47 = *(_BYTE **)v68;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v47;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v46, 17, "CELL_LOC: failed to bind %s", buf);
        v49 = v48;
        if ((v70[9] & 0x80000000) != 0)
          operator delete(*(void **)v68);
        sub_100512490("Generic", 1, 0, 0, "BOOL CLLteCellLocationDatabase::setLocation(const CLTelephonyService_Type::LteCell &, const CLDaemonLocation &)", "%s\n", v49);
        if (v49 != (char *)__p)
          free(v49);
      }
      v41 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v65);
      sqlite3_reset(v41);
      v38 = 0;
    }
    v42 = *(_QWORD *)v65;
    *(_QWORD *)v65 = 0;
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
    return v38;
  }
  sub_100263E50((uint64_t)v68);
  v7 = sub_100263F7C(&v70[2], (uint64_t)"INSERT OR REPLACE INTO ", 23);
  v8 = (const char *)(a1 + 232);
  if (*(char *)(a1 + 255) < 0)
    v8 = *(const char **)v8;
  v9 = strlen(v8);
  v10 = sub_100263F7C(v7, (uint64_t)v8, v9);
  v11 = sub_100263F7C(v10, (uint64_t)" (", 2);
  v12 = sub_100263F7C(v11, (uint64_t)"MCC", 3);
  v13 = sub_100263F7C(v12, (uint64_t)", ", 2);
  v14 = sub_100263F7C(v13, (uint64_t)"MNC", 3);
  v15 = sub_100263F7C(v14, (uint64_t)", ", 2);
  v16 = sub_100263F7C(v15, (uint64_t)"TAC", 3);
  v17 = sub_100263F7C(v16, (uint64_t)", ", 2);
  v18 = sub_100263F7C(v17, (uint64_t)"CI", 2);
  v19 = sub_100263F7C(v18, (uint64_t)", ", 2);
  v20 = sub_100263F7C(v19, (uint64_t)"UARFCN", 6);
  v21 = sub_100263F7C(v20, (uint64_t)", ", 2);
  v22 = sub_100263F7C(v21, (uint64_t)"PID", 3);
  sub_100263F7C(v22, (uint64_t)") VALUES (?, ?, ?, ?, ?, ?)", 27);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021847F0);
  v23 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    std::stringbuf::str(__p, v71);
    v24 = v67 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CELL_LOC: fInsertStatement [%s]", buf, 0xCu);
    if (v67 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021847F0);
    v50 = qword_1022A02D8;
    std::stringbuf::str(buf, v71);
    if (v64 >= 0)
      v51 = buf;
    else
      v51 = *(_BYTE **)buf;
    *(_DWORD *)v65 = 136315138;
    *(_QWORD *)&v65[4] = v51;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v50, 2, "CELL_LOC: fInsertStatement [%s]", v65);
    v53 = v52;
    if (v64 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLLteCellLocationDatabase::setLocation(const CLTelephonyService_Type::LteCell &, const CLDaemonLocation &)", "%s\n", v53);
    if (v53 != (char *)__p)
      free(v53);
  }
  std::stringbuf::str(__p, v71);
  if (v67 >= 0)
    v25 = (char *)__p;
  else
    v25 = (char *)__p[0];
  *(_QWORD *)(a1 + 256) = sub_10063D314(a1 + 64, v25);
  *(_QWORD *)(a1 + 264) = v26;
  if (v67 < 0)
    operator delete(__p[0]);
  if (sub_100E815A0(v6))
  {
    *(_QWORD *)&v70[2] = v27;
    if (v73 < 0)
      operator delete(v72);
    std::streambuf::~streambuf(v71);
    std::ios::~ios(v74);
    goto LABEL_22;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021847F0);
  v43 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_FAULT, "Could not prepare cached insert statement", (uint8_t *)__p, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021847F0);
    *(_WORD *)buf = 0;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Could not prepare cached insert statement", buf, 2);
    v55 = (void **)v54;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLLteCellLocationDatabase::setLocation(const CLTelephonyService_Type::LteCell &, const CLDaemonLocation &)", "%s\n", v54);
    if (v55 != __p)
      free(v55);
  }
  *(_QWORD *)&v70[2] = v44;
  if (v73 < 0)
    operator delete(v72);
  std::streambuf::~streambuf(v71);
  std::ios::~ios(v74);
  return 0;
}

void sub_100D9A43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  _Unwind_Resume(a1);
}

void sub_100D9A4BC(uint64_t a1)
{
  sub_1000CD250(a1);
}

void sub_100D9A4FC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[8];
  void *__p[2];
  char v22;

  sub_100263E50((uint64_t)&v18);
  v2 = sub_100263F7C(&v19, (uint64_t)"SELECT ", 7);
  v3 = sub_100263F7C(v2, (uint64_t)"MCC", 3);
  v4 = sub_100263F7C(v3, (uint64_t)", ", 2);
  v5 = sub_100263F7C(v4, (uint64_t)"MNC", 3);
  v6 = sub_100263F7C(v5, (uint64_t)", ", 2);
  v7 = sub_100263F7C(v6, (uint64_t)"TAC", 3);
  v8 = sub_100263F7C(v7, (uint64_t)", ", 2);
  v9 = sub_100263F7C(v8, (uint64_t)"CI", 2);
  v10 = sub_100263F7C(v9, (uint64_t)" FROM ", 6);
  v11 = (const char *)(a1 + 232);
  if (*(char *)(a1 + 255) < 0)
    v11 = *(const char **)v11;
  v12 = strlen(v11);
  v13 = sub_100263F7C(v10, (uint64_t)v11, v12);
  v14 = sub_100263F7C(v13, (uint64_t)" WHERE ", 7);
  v15 = strlen("ROWID");
  v16 = sub_100263F7C(v14, (uint64_t)"ROWID", v15);
  sub_100263F7C(v16, (uint64_t)"=?", 2);
  std::stringbuf::str(__p, v20);
  if (v22 >= 0)
    v17 = (char *)__p;
  else
    v17 = (char *)__p[0];
  sub_1000CDA68(a1 + 64, v17);
}

void sub_100D9A90C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  sub_1018B38B4((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_100D9A964(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100D9A990()
{
  qword_102308248 = (uint64_t)"MCC";
  dword_102308250 = 1;
  word_102308254 = 1;
  byte_102308258 = 0;
  byte_102308270 = 0;
  qword_102308278 = (uint64_t)"MNC";
  dword_102308280 = 1;
  word_102308284 = 1;
  byte_102308288 = 0;
  byte_1023082A0 = 0;
  qword_1023082A8 = (uint64_t)"TAC";
  dword_1023082B0 = 1;
  word_1023082B4 = 1;
  byte_1023082B8 = 0;
  byte_1023082D0 = 0;
  qword_1023082D8 = (uint64_t)"CI";
  dword_1023082E0 = 1;
  word_1023082E4 = 1;
  byte_1023082E8 = 0;
  byte_102308300 = 0;
  qword_102308308 = (uint64_t)"UARFCN";
  dword_102308310 = 1;
  word_102308314 = 1;
  byte_102308318 = 0;
  byte_102308330 = 0;
  qword_102308338 = (uint64_t)"PID";
  dword_102308340 = 1;
  word_102308344 = 1;
  byte_102308348 = 0;
  byte_102308360 = 0;
  qword_102308368 = (uint64_t)"Timestamp";
  dword_102308370 = 2;
  word_102308374 = 0;
  byte_102308378 = 0;
  byte_102308390 = 0;
  qword_102308398 = (uint64_t)"Latitude";
  dword_1023083A0 = 2;
  word_1023083A4 = 0;
  byte_1023083A8 = 0;
  byte_1023083C0 = 0;
  qword_1023083C8 = (uint64_t)"Longitude";
  dword_1023083D0 = 2;
  word_1023083D4 = 0;
  byte_1023083D8 = 0;
  byte_1023083F0 = 0;
  qword_1023083F8 = (uint64_t)"HorizontalAccuracy";
  dword_102308400 = 2;
  word_102308404 = 0;
  byte_102308408 = 0;
  byte_102308420 = 0;
  qword_102308428 = (uint64_t)"Altitude";
  dword_102308430 = 2;
  word_102308434 = 0;
  byte_102308438 = 0;
  byte_102308450 = 0;
  qword_102308458 = (uint64_t)"VerticalAccuracy";
  dword_102308460 = 2;
  word_102308464 = 0;
  byte_102308468 = 0;
  byte_102308480 = 0;
  qword_102308488 = (uint64_t)"Speed";
  dword_102308490 = 2;
  word_102308494 = 0;
  byte_102308498 = 0;
  byte_1023084B0 = 0;
  qword_1023084B8 = (uint64_t)"Course";
  dword_1023084C0 = 2;
  word_1023084C4 = 0;
  byte_1023084C8 = 0;
  byte_1023084E0 = 0;
  qword_1023084E8 = (uint64_t)"Confidence";
  dword_1023084F0 = 1;
  word_1023084F4 = 0;
  byte_1023084F8 = 0;
  byte_102308510 = 0;
  qword_102308518 = 0;
  dword_102308520 = 5;
  word_102308524 = 0;
  byte_102308528 = 0;
  byte_102308540 = 0;
}

uint64_t sub_100D9AB84(uint64_t a1, uint64_t a2, uint64_t a3, void *aBlock, double a5)
{
  CMActivityAlarmLocal *v9;
  uint64_t v10;
  _QWORD v12[5];

  *(_QWORD *)a1 = off_102184820;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = _Block_copy(aBlock);
  dispatch_retain(*(dispatch_object_t *)(a1 + 16));
  if (a2 >= 2)
    sub_101929E5C();
  v9 = [CMActivityAlarmLocal alloc];
  v10 = *(_QWORD *)(a1 + 16);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100D9AC4C;
  v12[3] = &unk_102184838;
  v12[4] = aBlock;
  *(_QWORD *)(a1 + 8) = -[CMActivityAlarmLocal initWithTrigger:duration:onQueue:withHandler:](v9, "initWithTrigger:duration:onQueue:withHandler:", a2, v10, v12, a5);
  return a1;
}

uint64_t sub_100D9AC4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100D9AC58(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[6];

  *(_QWORD *)a1 = off_102184820;
  objc_msgSend(*(id *)(a1 + 8), "invalidate");
  v2 = *(NSObject **)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100D9ACE0;
  v6[3] = &unk_102159978;
  v6[4] = v4;
  v6[5] = v3;
  dispatch_async(v2, v6);
  dispatch_release(*(dispatch_object_t *)(a1 + 16));
  return a1;
}

void sub_100D9ACE0(uint64_t a1)
{

  _Block_release(*(const void **)(a1 + 40));
}

void sub_100D9AD0C(uint64_t a1)
{
  sub_100D9AC58(a1);
  operator delete();
}

void sub_100D9AD30(uint64_t a1, int a2, uint64_t a3, void *aBlock, double a5)
{
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t j;
  uint64_t v14;
  __int128 v15;
  uint64_t *v16;
  uint64_t k;
  uint64_t v18;
  __int128 v19;
  unsigned __int8 v20;
  void *__p[2];
  char v22;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = off_102184868;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = _Block_copy(aBlock);
  *(_DWORD *)(a1 + 32) = a2;
  *(double *)(a1 + 40) = a5;
  sub_10023CFD8(a1 + 48, (uint64_t)"CLSensorCalibrationStaticDetectorAccel", a1, 0.0);
  *(_QWORD *)(a1 + 96) = 0x7FEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 104) = xmmword_101C24EF0;
  v8 = &qword_101C24F00;
  for (i = 192; i != 152; i -= 8)
  {
    v10 = *v8++;
    *(_QWORD *)(a1 + i) = v10;
  }
  *(double *)(a1 + 168) = -*(double *)(a1 + 168);
  *(double *)(a1 + 184) = -*(double *)(a1 + 184);
  v11 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a1 + 216) = v11;
  *(_OWORD *)(a1 + 232) = xmmword_101C24EF0;
  v12 = &qword_101C24F00;
  for (j = 320; j != 280; j -= 8)
  {
    v14 = *v12++;
    *(_QWORD *)(a1 + j) = v14;
  }
  *(double *)(a1 + 296) = -*(double *)(a1 + 296);
  *(double *)(a1 + 312) = -*(double *)(a1 + 312);
  v15 = *(_OWORD *)(a1 + 304);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a1 + 288);
  *(_OWORD *)(a1 + 344) = v15;
  *(_QWORD *)(a1 + 360) = 2;
  *(_QWORD *)(a1 + 368) = 0;
  v16 = &qword_101C24F00;
  for (k = 448; k != 408; k -= 8)
  {
    v18 = *v16++;
    *(_QWORD *)(a1 + k) = v18;
  }
  *(double *)(a1 + 424) = -*(double *)(a1 + 424);
  *(double *)(a1 + 440) = -*(double *)(a1 + 440);
  v19 = *(_OWORD *)(a1 + 432);
  *(_OWORD *)(a1 + 456) = *(_OWORD *)(a1 + 416);
  *(_OWORD *)(a1 + 472) = v19;
  *(_QWORD *)(a1 + 488) = off_1021693C8;
  *(_QWORD *)(a1 + 496) = 128;
  *(_QWORD *)(a1 + 504) = off_1021693F8;
  *(_QWORD *)(a1 + 512) = 128;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_QWORD *)(a1 + 584) = off_1021693F8;
  *(_QWORD *)(a1 + 592) = 128;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_QWORD *)(a1 + 664) = off_1021693F8;
  *(_QWORD *)(a1 + 672) = 128;
  *(_QWORD *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "silo"), "assertInside");
  v20 = atomic_load((unsigned __int8 *)&qword_102308550);
  if ((v20 & 1) == 0)
    goto LABEL_14;
  while (1)
  {
    *(_BYTE *)(a1 + 8) = byte_102308548;
    if (a2 != 1 || a5 == 0.0)
    {
      sub_1015A2E04(__p, "ctor");
      sub_10002B684(a1 + 48, (uint64_t *)__p);
      if (v22 < 0)
        operator delete(__p[0]);
      operator new();
    }
    sub_101929FDC();
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/DeviceMotion/CLSensorCalibrationStaticDetector.mm", 170, "CLSensorCalibrationStaticDetectorAccel");
    __break(1u);
LABEL_14:
    if (__cxa_guard_acquire(&qword_102308550))
    {
      byte_102308548 = sub_100D9B0A0();
      __cxa_guard_release(&qword_102308550);
    }
  }
}

void sub_100D9B038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  _QWORD *v24;

  __cxa_guard_abort(&qword_102308550);
  sub_100ADB1A0(v24);
  sub_100E3E6C8(v23);
  _Unwind_Resume(a1);
}

uint64_t sub_100D9B0A0()
{
  uint64_t v0;
  unsigned int v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  BOOL v8;

  v8 = 0;
  v0 = sub_100127B9C();
  sub_100081C10(v0, &v6);
  v1 = sub_1001E4874(v6, "LogGyroCalibrationStaticDetectorAccelState", &v8);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (v8)
    return v1;
  else
    return 0;
}

void sub_100D9B130(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100D9B144(uint64_t a1, unsigned int a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  os_activity_scope_state_s state;
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;

  CLProfilingIdentify("CLSensorCalibrationStaticDetectorAccel::onAccelerometerData");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 16), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021848D8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v9 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSensorCalibrationStaticDetectorAccel::onAccelerometerData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021848D8);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "activity";
      v16 = 2050;
      v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSensorCalibrationStaticDetectorAccel::onAccelerometerData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v9 = 0;
  }
  sub_100D9B800(a3, a1, a2);
  if (v9)
    os_activity_scope_leave(&state);
}

void sub_100D9B2FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D9B31C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = sub_10024095C();
  return sub_1000A4FD8(v2, 0, *(_QWORD *)(v1 + 744), 0.02);
}

_QWORD *sub_100D9B34C(_QWORD *a1)
{
  *a1 = off_102184868;
  sub_100D9B390((uint64_t)a1);
  sub_100ADB1A0(a1 + 61);
  sub_100E3E6C8(a1 + 6);
  return a1;
}

void sub_100D9B390(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  uint64_t v4;

  objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "silo"), "assertInside");
  v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    _Block_release(v2);
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(int *)(a1 + 56) >= 1)
    sub_100E3E6F0(a1 + 48);
  if (*(_QWORD *)(a1 + 744))
  {
    v3 = sub_10024095C();
    sub_1000A4A6C(v3, 0, *(_QWORD *)(a1 + 744));
    v4 = *(_QWORD *)(a1 + 744);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    *(_QWORD *)(a1 + 744) = 0;
  }
}

void sub_100D9B410(_QWORD *a1)
{
  sub_100D9B34C(a1);
  operator delete();
}

void sub_100D9B434(uint64_t a1, int a2, double a3)
{
  NSObject *v6;
  double v7;
  const char *v8;
  uint8_t *v9;
  double v10;
  _DWORD v11[2];
  __int16 v12;
  double v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  double v17;

  if (*(_BYTE *)(a1 + 8))
  {
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_1021848B8);
    v6 = qword_10229FD38;
    if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109376;
      v15 = a2;
      v16 = 2048;
      v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "moving,%d,now,%f", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_1021848B8);
      v11[0] = 67109376;
      v11[1] = a2;
      v12 = 2048;
      v13 = a3;
      LODWORD(v10) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 1, "moving,%d,now,%f", v11, v10);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLSensorCalibrationStaticDetectorAccel::processStaticMoving(BOOL, CLMotionTypeTimestamp)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  if (a2)
  {
    *(_QWORD *)(a1 + 96) = 0x7FEFFFFFFFFFFFFFLL;
    if (*(_DWORD *)(a1 + 32) != 1)
      return;
    goto LABEL_14;
  }
  v7 = *(double *)(a1 + 96);
  if (v7 > a3)
    v7 = a3;
  *(double *)(a1 + 96) = v7;
  if (!*(_DWORD *)(a1 + 32) && v7 + *(double *)(a1 + 40) <= a3)
LABEL_14:
    sub_100D9B658(a1);
}

void sub_100D9B658(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_10229FD30 != -1)
    dispatch_once(&qword_10229FD30, &stru_1021848B8);
  v2 = qword_10229FD38;
  if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLSensorCalibrationStaticDetectorAccel::fire()", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_1021848B8);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 1, "CLSensorCalibrationStaticDetectorAccel::fire()", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLSensorCalibrationStaticDetectorAccel::fire()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "silo"), "async:", *(_QWORD *)(a1 + 24));
  sub_100D9B390(a1);
}

void sub_100D9B800(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  float *v6;
  int v7;
  int v8;
  int v9;
  NSObject *v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  const char *v26;
  char *v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  const char *v32;
  char *v33;
  unint64_t v34;
  double v35;
  double v36;
  double v37;
  unint64_t v38;
  double v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  double v46;
  double v47;
  unint64_t v48;
  double v49;
  double v50;
  unint64_t v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  char *v62;
  double v63;
  double v64;
  double v65;
  int v66;
  uint64_t v67;
  _BYTE v68[12];
  __int16 v69;
  double v70;
  __int16 v71;
  double v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  _BOOL4 v76;
  _BYTE buf[12];
  __int16 v78;
  double v79;
  __int16 v80;
  double v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  _BOOL4 v85;

  v65 = *(double *)&a2;
  objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "silo"), "assertInside");
  HIDWORD(v64) = a3;
  if (a3)
  {
    v5 = 24 * a3;
    v6 = (float *)(*(_QWORD *)&v65 + 16);
    v66 = 134219008;
    do
    {
      v7 = sub_100D9C09C((uint64_t *)(a1 + 104), *(v6 - 2));
      v8 = sub_100D9C09C((uint64_t *)(a1 + 232), *(v6 - 1));
      v9 = v7 ^ sub_100D9C09C((uint64_t *)(a1 + 360), *v6);
      if (v7 != v8 || v9 != 0)
        sub_10192A14C();
      if (*(_BYTE *)(a1 + 8))
      {
        if (qword_10229FD30 != -1)
          dispatch_once(&qword_10229FD30, &stru_1021848B8);
        v11 = qword_10229FD38;
        if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_INFO))
        {
          v12 = *(v6 - 2);
          v13 = *(v6 - 1);
          v14 = *v6;
          v15 = *((_QWORD *)v6 - 2);
          *(_DWORD *)buf = 134218752;
          *(double *)&buf[4] = v12;
          v78 = 2048;
          v79 = v13;
          v80 = 2048;
          v81 = v14;
          v82 = 2048;
          v83 = v15;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "RawAccelerometer,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f", buf, 0x2Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD30 != -1)
            dispatch_once(&qword_10229FD30, &stru_1021848B8);
          v22 = *(v6 - 2);
          v23 = *(v6 - 1);
          v24 = *v6;
          v25 = *((_QWORD *)v6 - 2);
          *(_DWORD *)v68 = 134218752;
          *(double *)&v68[4] = v22;
          v69 = 2048;
          v70 = v23;
          v71 = 2048;
          v72 = v24;
          v73 = 2048;
          v74 = v25;
          LODWORD(v63) = 42;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 1, "RawAccelerometer,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f", COERCE_DOUBLE(v68), v63, v64, v65);
          v27 = (char *)v26;
          sub_100512490("Generic", 1, 0, 2, "void CLSensorCalibrationStaticDetectorAccel::onAccelerometerData(const CLAccelerometer::Sample *, unsigned int)", "%s\n", v26);
          if (v27 != buf)
            free(v27);
        }
        if (qword_10229FD30 != -1)
          dispatch_once(&qword_10229FD30, &stru_1021848B8);
        v16 = qword_10229FD38;
        if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_INFO))
        {
          v17 = *(_QWORD *)(a1 + 8 * *(_QWORD *)(a1 + 112) + 120);
          v18 = *(double *)(a1 + 8 * *(_QWORD *)(a1 + 240) + 248);
          v19 = *(double *)(a1 + 8 * *(_QWORD *)(a1 + 368) + 376);
          v20 = *((_QWORD *)v6 - 2);
          *(_DWORD *)buf = v66;
          *(_QWORD *)&buf[4] = v17;
          v78 = 2048;
          v79 = v18;
          v80 = 2048;
          v81 = v19;
          v82 = 2048;
          v83 = v20;
          v84 = 1024;
          v85 = v7;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "FilteredAccelerometer,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f,readyX,%d", buf, 0x30u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD30 != -1)
            dispatch_once(&qword_10229FD30, &stru_1021848B8);
          v28 = *(_QWORD *)(a1 + 8 * *(_QWORD *)(a1 + 112) + 120);
          v29 = *(double *)(a1 + 8 * *(_QWORD *)(a1 + 240) + 248);
          v30 = *(double *)(a1 + 8 * *(_QWORD *)(a1 + 368) + 376);
          v31 = *((_QWORD *)v6 - 2);
          *(_DWORD *)v68 = v66;
          *(_QWORD *)&v68[4] = v28;
          v69 = 2048;
          v70 = v29;
          v71 = 2048;
          v72 = v30;
          v73 = 2048;
          v74 = v31;
          v75 = 1024;
          v76 = v7;
          LODWORD(v63) = 48;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 1, "FilteredAccelerometer,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f,readyX,%d", COERCE_DOUBLE(v68), v63, v64, v65, v66);
          v33 = (char *)v32;
          sub_100512490("Generic", 1, 0, 2, "void CLSensorCalibrationStaticDetectorAccel::onAccelerometerData(const CLAccelerometer::Sample *, unsigned int)", "%s\n", v32);
          if (v33 != buf)
            free(v33);
        }
      }
      if (v7)
      {
        *(_QWORD *)buf = *(_QWORD *)(a1 + 8 * *(_QWORD *)(a1 + 112) + 120);
        v21 = *(_QWORD *)(a1 + 8 * *(_QWORD *)(a1 + 240) + 248);
        v67 = *(_QWORD *)(a1 + 8 * *(_QWORD *)(a1 + 368) + 376);
        *(_QWORD *)v68 = v21;
        sub_100ADB200(a1 + 504, (double *)buf);
        sub_100ADB200(a1 + 584, (double *)v68);
        sub_100ADB200(a1 + 664, (double *)&v67);
      }
      v6 += 6;
      v5 -= 24;
    }
    while (v5);
  }
  v34 = *(_QWORD *)(a1 + 576);
  if (v34 >= *(_QWORD *)(a1 + 512))
  {
    v35 = 0.0;
    v36 = 0.0;
    v37 = 0.0;
    if ((int)v34 >= 2)
    {
      v38 = *(_QWORD *)(a1 + 656);
      v39 = 0.0;
      v40 = 0.0;
      if (v38)
        v40 = *(double *)(a1 + 600) / (double)v38;
      v41 = *(_QWORD *)(a1 + 736);
      if (v41)
        v39 = *(double *)(a1 + 680) / (double)v41;
      v42 = *(_QWORD *)(a1 + 568);
      v43 = *(_QWORD *)(a1 + 576);
      v44 = 0.0;
      v45 = 0.0;
      v46 = 0.0;
      v47 = 0.0;
      v48 = *(_QWORD *)(a1 + 648);
      v49 = 0.0;
      v50 = 0.0;
      v51 = *(_QWORD *)(a1 + 728);
      do
      {
        v52 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 544) + ((v42 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v42 & 0x1FF))
            - *(double *)(a1 + 520) / (double)v34;
        v53 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 624) + ((v48 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v48 & 0x1FF))
            - v40;
        v54 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 704) + ((v51 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v51 & 0x1FF))
            - v39;
        v46 = v46 + v52 * v52;
        v45 = v45 + v53 * v53;
        v44 = v44 + v54 * v54;
        v50 = v50 + v52;
        v49 = v49 + v53;
        v47 = v47 + v54;
        ++v51;
        ++v48;
        ++v42;
        --v43;
      }
      while (v43);
      v55 = v46 - v50 * v50 / (double)(int)v34;
      v56 = (double)((int)v34 - 1);
      v35 = v55 / v56;
      v36 = (v45 - v49 * v49 / (double)(int)v34) / v56;
      v37 = (v44 - v47 * v47 / (double)(int)v34) / v56;
    }
    v57 = fabs(v35) + fabs(v36) + fabs(v37);
    if (*(_BYTE *)(a1 + 8))
    {
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_1021848B8);
      v58 = qword_10229FD38;
      if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_INFO))
      {
        v59 = *(_QWORD *)(*(_QWORD *)&v65 + 24 * (HIDWORD(v64) - 1));
        *(_DWORD *)buf = 134219008;
        *(double *)&buf[4] = v35;
        v78 = 2048;
        v79 = v36;
        v80 = 2048;
        v81 = v37;
        v82 = 2048;
        v83 = v59;
        v84 = 1024;
        v85 = v57 >= 0.000144;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_INFO, "Variance,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f,Moving,%d", buf, 0x30u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD30 != -1)
          dispatch_once(&qword_10229FD30, &stru_1021848B8);
        v60 = *(_QWORD *)(*(_QWORD *)&v65 + 24 * (HIDWORD(v64) - 1));
        *(_DWORD *)v68 = 134219008;
        *(double *)&v68[4] = v35;
        v69 = 2048;
        v70 = v36;
        v71 = 2048;
        v72 = v37;
        v73 = 2048;
        v74 = v60;
        v75 = 1024;
        v76 = v57 >= 0.000144;
        LODWORD(v63) = 48;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 1, "Variance,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f,Moving,%d", COERCE_DOUBLE(v68), v63, v64, v65, v66);
        v62 = (char *)v61;
        sub_100512490("Generic", 1, 0, 2, "void CLSensorCalibrationStaticDetectorAccel::onAccelerometerData(const CLAccelerometer::Sample *, unsigned int)", "%s\n", v61);
        if (v62 != buf)
          free(v62);
      }
    }
    sub_100D9B434(a1, v57 >= 0.000144, *(double *)(*(_QWORD *)&v65 + 24 * (HIDWORD(v64) - 1)));
  }
}

BOOL sub_100D9C09C(uint64_t *a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    if ((unint64_t)(v3 + 1) <= 4)
      v4 = v3 + 1;
    else
      v4 = 0;
    *(double *)&a1[v4 + 2] = a2;
    if ((unint64_t)(v4 + 1) <= 4)
      v5 = v4 + 1;
    else
      v5 = 0;
    *a1 = v2 - 1;
  }
  else
  {
    v6 = 0;
    v7 = a1[1];
    if ((unint64_t)(v7 + 1) <= 4)
      v8 = v7 + 1;
    else
      v8 = 0;
    *(double *)&a1[v8 + 2] = a2;
    a2 = 0.0;
    do
    {
      a2 = a2 + *(double *)&a1[v6 + 11 - v8] * *(double *)&a1[v6 + 2];
      ++v6;
    }
    while (v6 != 5);
    if ((unint64_t)(v8 + 1) <= 4)
      v5 = v8 + 1;
    else
      v5 = 0;
  }
  a1[1] = v5;
  *(double *)&a1[v5 + 2] = a2;
  return v2 == 0;
}

void sub_100D9C13C()
{
  if (+[CMActivityAlarmLocal activityAlarmAvailable](CMActivityAlarmLocal, "activityAlarmAvailable"))
    operator new();
  operator new();
}

void sub_100D9C208()
{
  operator delete();
}

void sub_100D9C248(id a1)
{
  qword_10229FD38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Sensors");
}

void sub_100D9C274(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100D9C2A0(uint64_t a1)
{
  uint64_t v1;

  if (a1)
    v1 = a1 - 8;
  else
    v1 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v1 + 48) = _Q0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

BOOL sub_100D9C2C4(uint64_t a1)
{
  double *v1;
  double v2;

  if (a1)
    v1 = (double *)(a1 - 8);
  else
    v1 = 0;
  v2 = (*(double (**)(double *))(*(_QWORD *)v1 + 72))(v1);
  v1[4] = v2;
  return v2 != -1.0;
}

uint64_t sub_100D9C308(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a1)
    v2 = (_QWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = *a2;
  v4 = v2[4];
  v5 = (*(uint64_t (**)(_QWORD *))(*v2 + 40))(v2);
  v2[6] = v3;
  v2[7] = v4;
  v2[8] = 2;
  v2[9] = v5;
  return (*(uint64_t (**)(_QWORD *))(*v2 + 48))(v2);
}

BOOL sub_100D9C36C(uint64_t a1)
{
  double *v1;
  double v2;

  if (a1)
    v1 = (double *)(a1 - 8);
  else
    v1 = 0;
  v2 = (*(double (**)(double *))(*(_QWORD *)v1 + 80))(v1);
  v1[5] = v2;
  return v2 != -1.0;
}

uint64_t sub_100D9C3B0(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a1)
    v2 = (_QWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = *a2;
  v4 = v2[5];
  v5 = (*(uint64_t (**)(_QWORD *))(*v2 + 40))(v2);
  v2[6] = v3;
  v2[7] = v4;
  v2[8] = 1;
  v2[9] = v5;
  return (*(uint64_t (**)(_QWORD *))(*v2 + 56))(v2);
}

__n128 sub_100D9C414(__n128 *a1)
{
  __n128 result;

  a1[1].n128_u64[0] = 3;
  a1[1].n128_u16[4] = 512;
  a1->n128_u64[0] = (unint64_t)off_102184950;
  a1->n128_u64[1] = (unint64_t)&unk_1021848F8;
  __asm { FMOV            V0.2D, #-1.0 }
  a1[2] = result;
  a1[3] = result;
  a1[4].n128_u64[0] = 0;
  a1[4].n128_u64[1] = 0;
  a1[5].n128_u32[0] = 0;
  a1[5].n128_u8[4] = 1;
  return result;
}

uint64_t sub_100D9C454@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  CFAbsoluteTime Current;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t result;
  __int128 v10;
  CFAbsoluteTime v11;
  void *__p[2];
  char v13;

  Current = CFAbsoluteTimeGetCurrent();
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  *(CFAbsoluteTime *)(a1 + 48) = Current;
  *(_QWORD *)(a1 + 56) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = v7;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 64))(a1, a2);
  v11 = CFAbsoluteTimeGetCurrent();
  if (*(_BYTE *)(a1 + 84))
  {
    v8 = atomic_load((unsigned __int8 *)&qword_102308570);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_102308570))
    {
      *(_OWORD *)__p = xmmword_101C24FD0;
      sub_100546300(qword_102308558, __p, 4uLL);
      __cxa_atexit((void (*)(void *))sub_100546380, qword_102308558, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_102308570);
    }
    sub_1015A2E04(__p, "CLWorkoutSeriesActivityDetectionModel");
    sub_101069F5C(a2, (uint64_t *)__p, (uint64_t)qword_102308558);
    if (v13 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 84) = 0;
  }
  sub_10023195C(a1 + 8, 1, (uint64_t)&v11);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  *(_DWORD *)(a1 + 68) = result;
  v10 = *(_OWORD *)(a1 + 64);
  *a3 = *(_OWORD *)(a1 + 48);
  a3[1] = v10;
  return result;
}

void sub_100D9C5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  __cxa_guard_abort(&qword_102308570);
  _Unwind_Resume(a1);
}

uint64_t sub_100D9C618(uint64_t a1)
{
  uint64_t result;
  CFAbsoluteTime Current;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  if ((_DWORD)result)
  {
    Current = CFAbsoluteTimeGetCurrent();
    return sub_10023195C(a1 + 8, 2, (uint64_t)&Current);
  }
  return result;
}

uint64_t sub_100D9C664(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;

  *(_DWORD *)(result + 80) = 0;
  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = (_DWORD *)result;
    do
    {
      result = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)v4 + 96))(v4, *(_QWORD *)v2);
      if ((_DWORD)result)
        v4[20] = *(_DWORD *)(v2 + 8);
      v2 += 16;
    }
    while (v2 != v3);
  }
  return result;
}

BOOL sub_100D9C6C4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) == a2;
}

__n128 sub_100D9C6F4(uint64_t a1)
{
  __n128 result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(__n128 *)(a1 + 104) = result;
  *(_DWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 124) = 0;
  return result;
}

void sub_100D9C728(uint64_t *a1@<X1>, __int128 **a2@<X8>, float a3@<S0>)
{
  float v4;
  float v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  float v9;
  float v10;
  double *v11;
  float v13;
  float v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v4 = fmaxf(a3 + -6.0, 3.0);
  v5 = a3 + 6.0;
  v7 = (__int128 *)*a1;
  v6 = (__int128 *)a1[1];
  v8 = (__int128 *)*a1;
  if ((__int128 *)*a1 != v6)
  {
    v8 = (__int128 *)*a1;
    while (1)
    {
      v9 = *((double *)v8 + 12);
      if (v5 < v9)
        break;
      v10 = *((double *)v8 + 13);
      if (v4 > v10)
        break;
      v8 += 7;
      if (v8 == v6)
        goto LABEL_18;
    }
  }
  v11 = (double *)(v8 + 7);
  if (v8 != v6 && v11 != (double *)v6)
  {
    do
    {
      v13 = v11[12];
      if (v5 >= v13)
      {
        v14 = v11[13];
        if (v4 <= v14)
        {
          v15 = *(_OWORD *)v11;
          v16 = *((_OWORD *)v11 + 2);
          v8[1] = *((_OWORD *)v11 + 1);
          v8[2] = v16;
          *v8 = v15;
          v17 = *((_OWORD *)v11 + 3);
          v18 = *((_OWORD *)v11 + 4);
          v19 = *((_OWORD *)v11 + 6);
          v8[5] = *((_OWORD *)v11 + 5);
          v8[6] = v19;
          v8[3] = v17;
          v8[4] = v18;
          v8 += 7;
        }
      }
      v11 += 14;
    }
    while (v11 != (double *)v6);
    v7 = (__int128 *)*a1;
    v6 = (__int128 *)a1[1];
  }
  if (v8 != v6)
  {
    v6 = v8;
    a1[1] = (uint64_t)v8;
  }
LABEL_18:
  *a2 = v7;
  a2[1] = v6;
  a2[2] = (__int128 *)a1[2];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_100D9C854(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  float v7;
  _BYTE *v8;
  __int128 *v9;
  __int128 *v10;
  NSObject *v11;
  int v12;
  __int128 *v13;
  __int128 *v14;
  float v15;
  float *v16;
  float *v17;
  float *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  float *v24;
  int v25;
  float v26;
  float *v27;
  float *v28;
  float *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  float *v35;
  int v36;
  float v37;
  float v38;
  uint64_t v39;
  const char *v41;
  uint8_t *v42;
  void *v43;
  float *v44;
  float *v45;
  void *v46;
  float *v47;
  float *v48;
  void *__p;
  void *v50;
  uint64_t v51;
  __int128 *v52;
  __int128 *v53;
  void *v54;
  _BYTE *v55;
  _QWORD v56[3];
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  int v61;
  double v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  void *v66;
  void *v67;
  uint8_t buf[4];
  double v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  void *v73;
  void *v74;

  (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t))(*(_QWORD *)*a1 + 24))(&v59, *a1, *(unsigned int *)(a2 + 8), 6);
  v6 = v59;
  if (v59 == v60)
  {
    v39 = 0;
    if (!v59)
      return v39;
    goto LABEL_71;
  }
  sub_100D9DC54(v56, (uint64_t *)&v59);
  v7 = sub_100D9DF60((uint64_t)v56, 0.5);
  (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(*(_QWORD *)*a1 + 152))(&v54, *a1, *(unsigned int *)(a2 + 8));
  v8 = v54;
  if (v54 != v55)
  {
    v50 = 0;
    v51 = 0;
    __p = 0;
    sub_100480554(&__p, v54, (uint64_t)v55, 0x6DB6DB6DB6DB6DB7 * ((v55 - (_BYTE *)v54) >> 4));
    sub_100D9C728((uint64_t *)&__p, &v52, v7);
    if (__p)
    {
      v50 = __p;
      operator delete(__p);
    }
    v9 = v52;
    v10 = v53;
    if (v52 == v53)
      goto LABEL_64;
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_102184A20);
    v11 = qword_10229FCA8;
    if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218496;
      v69 = v7;
      v70 = 2048;
      v71 = 0x6DB6DB6DB6DB6DB7 * ((v55 - (_BYTE *)v54) >> 4);
      v72 = 2048;
      v73 = (void *)(0x6DB6DB6DB6DB6DB7 * (v10 - v9));
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "searchMedian, %f, historicalDistributionCount, %lu, historicalMatchingDistributionCount, %lu", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_102184A20);
      v61 = 134218496;
      v62 = v7;
      v63 = 2048;
      v64 = 0x6DB6DB6DB6DB6DB7 * ((v55 - (_BYTE *)v54) >> 4);
      v65 = 2048;
      v66 = (void *)(0x6DB6DB6DB6DB6DB7 * (v10 - v9));
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 2, "searchMedian, %f, historicalDistributionCount, %lu, historicalMatchingDistributionCount, %lu", COERCE_DOUBLE(&v61), 32, v43);
      v42 = (uint8_t *)v41;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLSwimLapDetect::convergedHistoricalSessionTurns(CLSwimDetectedTurn, CLSwimStrokesPerTurnDistribution &) const", "%s\n", v41);
      if (v42 != buf)
        free(v42);
    }
    v12 = 0;
    v13 = v9;
    do
    {
      v12 += *((_DWORD *)v13 + 16);
      v13 += 7;
    }
    while (v13 != v10);
    if (v12 <= 11)
    {
LABEL_64:
      v39 = 0;
      if (!v9)
        goto LABEL_66;
    }
    else
    {
      v46 = 0;
      v47 = 0;
      v48 = 0;
      v43 = 0;
      v44 = 0;
      v14 = v9;
      v45 = 0;
      do
      {
        v15 = *((double *)v14 + 12);
        v16 = v47;
        if (v47 >= v48)
        {
          v18 = (float *)v46;
          v19 = ((char *)v47 - (_BYTE *)v46) >> 2;
          v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 62)
            sub_100259694();
          v21 = (char *)v48 - (_BYTE *)v46;
          if (((char *)v48 - (_BYTE *)v46) >> 1 > v20)
            v20 = v21 >> 1;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
            v22 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v22 = v20;
          if (v22)
          {
            v23 = (char *)sub_100260634((uint64_t)&v48, v22);
            v18 = (float *)v46;
            v16 = v47;
          }
          else
          {
            v23 = 0;
          }
          v24 = (float *)&v23[4 * v19];
          *v24 = v15;
          v17 = v24 + 1;
          while (v16 != v18)
          {
            v25 = *((_DWORD *)v16-- - 1);
            *((_DWORD *)v24-- - 1) = v25;
          }
          v46 = v24;
          v47 = v17;
          v48 = (float *)&v23[4 * v22];
          if (v18)
            operator delete(v18);
        }
        else
        {
          *v47 = v15;
          v17 = v16 + 1;
        }
        v47 = v17;
        v26 = *((double *)v14 + 13);
        v27 = v44;
        if (v44 >= v45)
        {
          v29 = (float *)v43;
          v30 = ((char *)v44 - (_BYTE *)v43) >> 2;
          v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 62)
            sub_100259694();
          v32 = (char *)v45 - (_BYTE *)v43;
          if (((char *)v45 - (_BYTE *)v43) >> 1 > v31)
            v31 = v32 >> 1;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
            v33 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v33 = v31;
          if (v33)
          {
            v34 = (char *)sub_100260634((uint64_t)&v45, v33);
            v29 = (float *)v43;
            v27 = v44;
          }
          else
          {
            v34 = 0;
          }
          v35 = (float *)&v34[4 * v30];
          *v35 = v26;
          v28 = v35 + 1;
          while (v27 != v29)
          {
            v36 = *((_DWORD *)v27-- - 1);
            *((_DWORD *)v35-- - 1) = v36;
          }
          v43 = v35;
          v44 = v28;
          v45 = (float *)&v34[4 * v33];
          if (v29)
            operator delete(v29);
        }
        else
        {
          *v44 = v26;
          v28 = v27 + 1;
        }
        v44 = v28;
        v14 += 7;
      }
      while (v14 != v10);
      sub_100D9DDC8((uint64_t)buf, (float **)&v46);
      v37 = sub_100D9DF60((uint64_t)buf, 0.5);
      if ((float)(v7 + -6.0) < v37)
        v37 = v7 + -6.0;
      *(double *)(a3 + 80) = fmaxf(v37, 3.0);
      sub_100D9DDC8((uint64_t)&v61, (float **)&v43);
      v38 = sub_100D9DF60((uint64_t)&v61, 0.5);
      if (v38 < (float)(v7 + 6.0))
        v38 = v7 + 6.0;
      *(double *)(a3 + 88) = v38;
      if (v66)
      {
        v67 = v66;
        operator delete(v66);
      }
      if (v73)
      {
        v74 = v73;
        operator delete(v73);
      }
      if (v43)
      {
        v44 = (float *)v43;
        operator delete(v43);
      }
      if (v46)
      {
        v47 = (float *)v46;
        operator delete(v46);
      }
      v39 = 1;
      if (!v9)
      {
LABEL_66:
        v8 = v54;
        if (!v54)
          goto LABEL_68;
        goto LABEL_67;
      }
    }
    operator delete(v9);
    goto LABEL_66;
  }
  v39 = 0;
  if (v54)
  {
LABEL_67:
    v55 = v8;
    operator delete(v8);
  }
LABEL_68:
  if (v57)
  {
    v58 = v57;
    operator delete(v57);
  }
  v6 = v59;
  if (v59)
  {
LABEL_71:
    v60 = v6;
    operator delete(v6);
  }
  return v39;
}

void sub_100D9CE38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45)
{
  void *v45;

  if (v45)
    operator delete(v45);
  if (__p)
    operator delete(__p);
  if (a29)
    operator delete(a29);
  if (a32)
    operator delete(a32);
  _Unwind_Resume(exception_object);
}

float sub_100D9CF14(uint64_t a1)
{
  return sub_100D9DF60(a1, 0.5);
}

BOOL sub_100D9CF20(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  float v3;
  _BYTE *v4;
  uint64_t v7;
  float v8;
  void *__p;
  void *v10;
  void *v11;
  _BYTE *v12;

  (*(void (**)(void **__return_ptr))(**(_QWORD **)a1 + 24))(&v11);
  sub_100D9DC54(&v7, (uint64_t *)&v11);
  v2 = v11;
  v1 = v12;
  v3 = v8;
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
    v4 = v11;
    if (!v11)
      return sqrtf(v3) <= 1.5 && (unint64_t)(v1 - v2) > 0x50;
    goto LABEL_3;
  }
  v4 = v11;
  if (v11)
  {
LABEL_3:
    v12 = v4;
    operator delete(v4);
  }
  return sqrtf(v3) <= 1.5 && (unint64_t)(v1 - v2) > 0x50;
}

void sub_100D9CFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_100D9CFD8@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 24) = 0;
  result = -1.0;
  *(_OWORD *)(a1 + 8) = xmmword_101C25040;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  return result;
}

void sub_100D9CFF8(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, void **a7@<X8>)
{
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  int v19;
  __int128 v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  __int128 v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  char *v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  char *v54;
  __int128 v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;

  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  v10 = a1 + 8;
  if (*(double *)(a1 + 8) >= 0.0)
  {
    if (*((_DWORD *)a2 + 2) == 6)
    {
      v28 = *a2;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v10 = v28;
      sub_100D9D9C0((double *)a1, 0, 0, a3, a4, a5, a6, (uint64_t)&v62, *(double *)a2);
      v29 = (char *)a7[2];
      v22 = (char *)a7[1];
      if (v22 >= v29)
      {
        v30 = 0xAAAAAAAAAAAAAAABLL * ((v22 - (_BYTE *)*a7) >> 3);
        v31 = v30 + 1;
        if (v30 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_100259694();
        v32 = 0xAAAAAAAAAAAAAAABLL * ((v29 - (_BYTE *)*a7) >> 3);
        if (2 * v32 > v31)
          v31 = 2 * v32;
        if (v32 >= 0x555555555555555)
          v33 = 0xAAAAAAAAAAAAAAALL;
        else
          v33 = v31;
        if (v33)
          v34 = (char *)sub_1002596A8((uint64_t)(a7 + 2), v33);
        else
          v34 = 0;
        v49 = &v34[24 * v30];
        v50 = &v34[24 * v33];
        *(_OWORD *)v49 = v62;
        *((_QWORD *)v49 + 2) = v63;
        v43 = v49 + 24;
        v52 = (char *)*a7;
        v51 = (char *)a7[1];
        if (v51 == *a7)
          goto LABEL_48;
        do
        {
          v53 = *(_OWORD *)(v51 - 24);
          *(_QWORD *)(v49 - 11) = *(_QWORD *)(v51 - 11);
          *(_OWORD *)(v49 - 24) = v53;
          v49 -= 24;
          v51 -= 24;
        }
        while (v51 != v52);
        goto LABEL_47;
      }
    }
    else
    {
      v35 = *((_DWORD *)a2 + 3);
      v36 = *(_DWORD *)(a1 + 20);
      v58 = *a2;
      v59 = *((_QWORD *)a2 + 2);
      if (sub_100D9D48C((_QWORD *)a1, &v58) > (float)(v35 - v36))
        return;
      v41 = *a2;
      *(_QWORD *)(v10 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v10 = v41;
      sub_100D9D9C0((double *)a1, 0, 0, v37, v38, v39, v40, (uint64_t)&v62, *(double *)a2);
      v42 = (char *)a7[2];
      v22 = (char *)a7[1];
      if (v22 >= v42)
      {
        v44 = 0xAAAAAAAAAAAAAAABLL * ((v22 - (_BYTE *)*a7) >> 3);
        v45 = v44 + 1;
        if (v44 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_100259694();
        v46 = 0xAAAAAAAAAAAAAAABLL * ((v42 - (_BYTE *)*a7) >> 3);
        if (2 * v46 > v45)
          v45 = 2 * v46;
        if (v46 >= 0x555555555555555)
          v47 = 0xAAAAAAAAAAAAAAALL;
        else
          v47 = v45;
        if (v47)
          v48 = (char *)sub_1002596A8((uint64_t)(a7 + 2), v47);
        else
          v48 = 0;
        v49 = &v48[24 * v44];
        v50 = &v48[24 * v47];
        *(_OWORD *)v49 = v62;
        *((_QWORD *)v49 + 2) = v63;
        v43 = v49 + 24;
        v56 = (char *)*a7;
        v51 = (char *)a7[1];
        if (v51 == *a7)
          goto LABEL_48;
        do
        {
          v57 = *(_OWORD *)(v51 - 24);
          *(_QWORD *)(v49 - 11) = *(_QWORD *)(v51 - 11);
          *(_OWORD *)(v49 - 24) = v57;
          v49 -= 24;
          v51 -= 24;
        }
        while (v51 != v56);
        goto LABEL_47;
      }
    }
LABEL_27:
    *(_OWORD *)v22 = v62;
    *((_QWORD *)v22 + 2) = v63;
    v43 = v22 + 24;
LABEL_50:
    a7[1] = v43;
    return;
  }
  v11 = *((_DWORD *)a2 + 3);
  v71 = 0;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v62 = 0u;
  v12 = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 120))();
  v13 = DWORD2(v68);
  v60 = *a2;
  v61 = *((_QWORD *)a2 + 2);
  v18 = sub_100D9D48C((_QWORD *)a1, &v60);
  if (v12)
    v19 = v13;
  else
    v19 = 0;
  if (v18 < (float)(v11 - v19))
  {
    v20 = *a2;
    *(_QWORD *)(v10 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v10 = v20;
    sub_100D9D9C0((double *)a1, 0, 0, v14, v15, v16, v17, (uint64_t)&v62, *(double *)a2);
    v21 = (char *)a7[2];
    v22 = (char *)a7[1];
    if (v22 >= v21)
    {
      v23 = 0xAAAAAAAAAAAAAAABLL * ((v22 - (_BYTE *)*a7) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v25 = 0xAAAAAAAAAAAAAAABLL * ((v21 - (_BYTE *)*a7) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x555555555555555)
        v26 = 0xAAAAAAAAAAAAAAALL;
      else
        v26 = v24;
      if (v26)
        v27 = (char *)sub_1002596A8((uint64_t)(a7 + 2), v26);
      else
        v27 = 0;
      v49 = &v27[24 * v23];
      v50 = &v27[24 * v26];
      *(_OWORD *)v49 = v62;
      *((_QWORD *)v49 + 2) = v63;
      v43 = v49 + 24;
      v54 = (char *)*a7;
      v51 = (char *)a7[1];
      if (v51 == *a7)
        goto LABEL_48;
      do
      {
        v55 = *(_OWORD *)(v51 - 24);
        *(_QWORD *)(v49 - 11) = *(_QWORD *)(v51 - 11);
        *(_OWORD *)(v49 - 24) = v55;
        v49 -= 24;
        v51 -= 24;
      }
      while (v51 != v54);
LABEL_47:
      v51 = (char *)*a7;
LABEL_48:
      *a7 = v49;
      a7[1] = v43;
      a7[2] = v50;
      if (v51)
        operator delete(v51);
      goto LABEL_50;
    }
    goto LABEL_27;
  }
}

void sub_100D9D45C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float sub_100D9D48C(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  NSObject *v5;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  const char *v10;
  char *v11;
  char *v12;
  double v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _BYTE v17[18];
  _BYTE buf[32];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v4 = *((unsigned int *)a2 + 2);
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v24 = 0u;
  (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 160))(&v24, *a1, v4);
  if (!sub_100D9CF20((uint64_t)a1))
  {
    v14 = *a2;
    v15 = *((_QWORD *)a2 + 2);
    if (sub_100D9C854(a1, (uint64_t)&v14, (uint64_t)&v24))
    {
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_102184A20);
      v7 = qword_10229FCA8;
      if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = 3;
        *(_WORD *)&buf[8] = 2048;
        *(_QWORD *)&buf[10] = *((_QWORD *)&v29 + 1);
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "distribution,historicalSessionLimits,min,%d,max,%f", buf, 0x12u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 3.0;
      bzero(buf, 0x65CuLL);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_102184A20);
      v16 = 67109376;
      *(_DWORD *)v17 = 3;
      *(_WORD *)&v17[4] = 2048;
      *(_QWORD *)&v17[6] = *((_QWORD *)&v29 + 1);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 1, "distribution,historicalSessionLimits,min,%d,max,%f", &v16);
    }
    else
    {
      (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 40))(buf, *a1, v4);
      v28 = v21;
      v29 = v22;
      v30 = v23;
      v24 = *(_OWORD *)buf;
      v25 = *(_OWORD *)&buf[16];
      v26 = v19;
      v27 = v20;
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_102184A20);
      v9 = qword_10229FCA8;
      if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = 3;
        *(_WORD *)&buf[8] = 2048;
        *(_QWORD *)&buf[10] = *((_QWORD *)&v29 + 1);
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "distribution,lastGood-populationLimits,min,%d,max,%f", buf, 0x12u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 3.0;
      bzero(buf, 0x65CuLL);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_102184A20);
      v16 = 67109376;
      *(_DWORD *)v17 = 3;
      *(_WORD *)&v17[4] = 2048;
      *(_QWORD *)&v17[6] = *((_QWORD *)&v29 + 1);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 1, "distribution,lastGood-populationLimits,min,%d,max,%f", &v16);
    }
    v12 = (char *)v8;
    sub_100512490("Generic", 1, 0, 2, "std::pair<float, float> CLSwimLapDetect::getLapStrokeThreshold(CLSwimDetectedTurn) const", "%s\n", v8);
    if (v12 != buf)
      free(v12);
    return 3.0;
  }
  (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 40))(buf, *a1, v4);
  v28 = v21;
  v29 = v22;
  v30 = v23;
  v24 = *(_OWORD *)buf;
  v25 = *(_OWORD *)&buf[16];
  v26 = v19;
  v27 = v20;
  if (qword_10229FCA0 != -1)
    dispatch_once(&qword_10229FCA0, &stru_102184A20);
  v5 = qword_10229FCA8;
  if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v29;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = *((_QWORD *)&v29 + 1);
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "distribution,localLimits,min,%f,max,%f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_102184A20);
    v16 = 134218240;
    *(_QWORD *)v17 = v29;
    *(_WORD *)&v17[8] = 2048;
    *(_QWORD *)&v17[10] = *((_QWORD *)&v29 + 1);
    LODWORD(v13) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 1, "distribution,localLimits,min,%f,max,%f", COERCE_DOUBLE(&v16), v13);
    v11 = (char *)v10;
    sub_100512490("Generic", 1, 0, 2, "std::pair<float, float> CLSwimLapDetect::getLapStrokeThreshold(CLSwimDetectedTurn) const", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  return *(double *)&v29;
}

void sub_100D9D9C0(double *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, double a9@<D0>)
{
  int v9;
  double *v14;
  double v15;
  _OWORD v16[3];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v9 = a3;
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  memset(v16, 0, sizeof(v16));
  v14 = a1 + 13;
  if (a1[14] <= 0.0)
  {
    if ((*(unsigned int (**)(_QWORD, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)a1 + 120))(*(_QWORD *)a1, v16, a3, a4, a5, a6, a7))
    {
      v15 = *((double *)&v17 + 1);
    }
    else
    {
      v15 = (*(double (**)(_QWORD))(**(_QWORD **)a1 + 184))(*(_QWORD *)a1);
    }
  }
  else
  {
    v15 = *v14;
  }
  *(double *)a8 = a9;
  *(double *)(a8 + 8) = v15;
  *(_DWORD *)(a8 + 16) = a2;
  *(_BYTE *)(a8 + 20) = 0;
  sub_100D9DFE8(a1, a8, v9);
  *(_OWORD *)v14 = *(_OWORD *)a8;
  *(double *)((char *)v14 + 13) = *(double *)(a8 + 13);
}

BOOL sub_100D9DAC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v6;

  v6 = sub_100D9CF20(a1);
  if (v6)
    sub_100D9DB18(a1, a2, a3);
  return v6;
}

void sub_100D9DB18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v4;
  double v5;
  double v6;
  uint64_t v7;
  float v8;
  float v9;
  void *__p;
  void *v11;
  void *v12[3];

  (*(void (**)(void **__return_ptr))(**(_QWORD **)a1 + 24))(v12);
  sub_100D9DC54(&v7, (uint64_t *)v12);
  v4 = v9;
  *(double *)(a3 + 48) = v8;
  *(double *)(a3 + 72) = sqrtf(v4);
  *(double *)(a3 + 56) = sub_100D9DF60((uint64_t)&v7, 0.5);
  *(_DWORD *)(a3 + 64) = v7;
  *(double *)(a3 + 96) = sub_100D9DF60((uint64_t)&v7, 0.1);
  *(double *)(a3 + 104) = sub_100D9DF60((uint64_t)&v7, 0.9);
  v5 = *(double *)(a3 + 48);
  v6 = 8.0;
  if (v5 <= 20.0)
    v6 = 6.0;
  if (v6 < *(double *)(a3 + 72) + *(double *)(a3 + 72))
    v6 = *(double *)(a3 + 72) + *(double *)(a3 + 72);
  *(double *)(a3 + 80) = fmax(v5 - v6, 3.0);
  *(double *)(a3 + 88) = v5 + v6;
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
}

void sub_100D9DC20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  uint64_t v14;
  void *v16;

  v16 = *(void **)(v14 - 40);
  if (v16)
  {
    *(_QWORD *)(v14 - 32) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100D9DC54(_QWORD *a1, uint64_t *a2)
{
  void **v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  unint64_t v7;
  float *v8;
  float *v9;
  float *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  float *v16;
  int v17;
  _QWORD v19[2];
  _QWORD *v20;

  a1[3] = 0;
  v3 = (void **)(a1 + 3);
  *a1 = 0;
  a1[1] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      v19[0] = v4 + 8;
      v19[1] = a1;
      v20 = v19;
      sub_100D9E790((uint64_t)a1, (uint64_t *)&v20);
      v6 = (float)*(int *)(v4 + 8);
      v8 = (float *)a1[4];
      v7 = a1[5];
      if ((unint64_t)v8 >= v7)
      {
        v10 = (float *)*v3;
        v11 = ((char *)v8 - (_BYTE *)*v3) >> 2;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62)
          sub_100259694();
        v13 = v7 - (_QWORD)v10;
        if (v13 >> 1 > v12)
          v12 = v13 >> 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
          v14 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          v15 = (char *)sub_100260634((uint64_t)(a1 + 5), v14);
          v10 = (float *)a1[3];
          v8 = (float *)a1[4];
        }
        else
        {
          v15 = 0;
        }
        v16 = (float *)&v15[4 * v11];
        *v16 = v6;
        v9 = v16 + 1;
        while (v8 != v10)
        {
          v17 = *((_DWORD *)v8-- - 1);
          *((_DWORD *)v16-- - 1) = v17;
        }
        a1[3] = v16;
        a1[4] = v9;
        a1[5] = &v15[4 * v14];
        if (v10)
          operator delete(v10);
      }
      else
      {
        *v8 = v6;
        v9 = v8 + 1;
      }
      a1[4] = v9;
      v4 += 16;
    }
    while (v4 != v5);
  }
  return a1;
}

void sub_100D9DDA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D9DDC8(uint64_t a1, float **a2)
{
  void **v3;
  float *v4;
  float *v5;
  char *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  float v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;

  *(_QWORD *)(a1 + 24) = 0;
  v3 = (void **)(a1 + 24);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v6 = 0;
    v7 = (_QWORD *)(a1 + 40);
    do
    {
      v8 = *(_QWORD *)a1;
      v9 = *(_QWORD *)a1 + 1;
      *(_QWORD *)a1 = v9;
      v10 = (float)(*v4 + (float)(*(float *)(a1 + 8) * (float)v8)) / (float)v9;
      *(float *)(a1 + 8) = v10;
      if (v9 >= 2)
        *(float *)(a1 + 12) = (float)((float)(*(float *)(a1 + 12) * (float)v8) / (float)v9)
                            + (float)((float)((float)(*v4 - v10) * (float)(*v4 - v10)) / (float)v8);
      if ((unint64_t)v6 >= *v7)
      {
        v12 = (char *)*v3;
        v13 = (v6 - (_BYTE *)*v3) >> 2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          sub_100259694();
        v15 = *v7 - (_QWORD)v12;
        if (v15 >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v17 = (char *)sub_100260634(a1 + 40, v16);
          v12 = *(char **)(a1 + 24);
          v6 = *(char **)(a1 + 32);
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[4 * v13];
        *(float *)v18 = *v4;
        v11 = v18 + 4;
        while (v6 != v12)
        {
          v19 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v18 - 1) = v19;
          v18 -= 4;
        }
        *(_QWORD *)(a1 + 24) = v18;
        *(_QWORD *)(a1 + 32) = v11;
        *(_QWORD *)(a1 + 40) = &v17[4 * v16];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *(float *)v6 = *v4;
        v11 = v6 + 4;
      }
      *(_QWORD *)(a1 + 32) = v11;
      ++v4;
      v6 = v11;
    }
    while (v4 != v5);
  }
  return a1;
}

void sub_100D9DF40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

float sub_100D9DF60(uint64_t a1, float a2)
{
  float *v3;
  float *v4;
  float v6;
  uint64_t v7;
  float *v8;

  v3 = *(float **)(a1 + 24);
  v4 = *(float **)(a1 + 32);
  if (v3 == v4)
    return 0.0;
  if (a2 < 0.0 || a2 > 1.0)
    sub_10192A2CC();
  v6 = (float)(unint64_t)(v4 - v3 - 1) * a2;
  v7 = (int)v6;
  v8 = &v3[v7];
  if (v8 != v4)
  {
    sub_10053EEC0(v3, v8, v4, v6);
    v3 = *(float **)(a1 + 24);
  }
  return v3[v7];
}

int8x16_t sub_100D9DFE8(double *a1, uint64_t a2, int a3)
{
  float64x2_t v6;
  float64x2_t v7;
  int8x16_t result;
  int8x16_t v9;

  v9 = *(int8x16_t *)a2;
  sub_100D9E454(a1, (__int128 *)a2);
  if (a3)
    sub_100D9E5E0((uint64_t)a1, (__int128 *)a2);
  else
    sub_100D9E6C8((uint64_t)a1, (__int128 *)a2);
  *(_QWORD *)&v6.f64[0] = v9.i64[0];
  v6.f64[1] = *(float64_t *)(a2 + 8);
  v7.f64[0] = *(float64_t *)a2;
  *(_QWORD *)&v7.f64[1] = v9.i64[1];
  result = vbslq_s8((int8x16_t)vcgtq_f64(v7, v6), v9, *(int8x16_t *)a2);
  *(int8x16_t *)a2 = result;
  return result;
}

void sub_100D9E064(uint64_t a1@<X0>, float *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  unint64_t v10;
  int v11;
  float *v12;
  uint64_t v13;
  float v14;
  void *v15;
  float *v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  char *v21;
  float *v22;
  int v23;
  unint64_t v24;
  int v25;
  const char *v26;
  uint8_t *v27;
  void *__p[4];
  uint8_t buf[4];
  unint64_t v30;
  __int16 v31;
  int v32;
  void *v33;
  void *v34;

  *a2 = 0.0;
  (*(void (**)(uint64_t *__return_ptr, double, double))(**(_QWORD **)a1 + 80))(a4, *(double *)(a3 + 8), *(double *)a3);
  v8 = *a4;
  v7 = a4[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - *a4) >> 3) > 1)
  {
    memset(__p, 0, 24);
    if (v7 != v8)
    {
      v12 = 0;
      do
      {
        v13 = v7 - 24;
        if (v7 - 24 == v8)
          break;
        v14 = *(double *)(v7 - 24) - *(double *)(v7 - 48);
        if (v12 >= __p[2])
        {
          v16 = (float *)__p[0];
          v17 = ((char *)v12 - (char *)__p[0]) >> 2;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 62)
            sub_100259694();
          v19 = (char *)__p[2] - (char *)__p[0];
          if (((char *)__p[2] - (char *)__p[0]) >> 1 > v18)
            v18 = v19 >> 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
            v20 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            v21 = (char *)sub_100260634((uint64_t)&__p[2], v20);
            v16 = (float *)__p[0];
            v12 = (float *)__p[1];
          }
          else
          {
            v21 = 0;
          }
          v22 = (float *)&v21[4 * v17];
          *v22 = v14;
          v15 = v22 + 1;
          while (v12 != v16)
          {
            v23 = *((_DWORD *)v12-- - 1);
            *((_DWORD *)v22-- - 1) = v23;
          }
          __p[0] = v22;
          __p[1] = v15;
          __p[2] = &v21[4 * v20];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *v12 = v14;
          v15 = v12 + 1;
        }
        __p[1] = v15;
        v8 = *a4;
        v12 = (float *)v15;
        v7 = v13;
      }
      while (v13 != *a4);
    }
    sub_100D9DDC8((uint64_t)buf, (float **)__p);
    *a2 = 1.0 / sub_100D9DF60((uint64_t)buf, 0.5);
    if (v33)
    {
      v34 = v33;
      operator delete(v33);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_102184A20);
    v9 = qword_10229FCA8;
    if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_ERROR))
    {
      v10 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
      v11 = *(_DWORD *)(a3 + 16);
      *(_DWORD *)buf = 134218240;
      v30 = v10;
      v31 = 1024;
      v32 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "lap detected with one or less strokes,strokes,%lu,lapType,%d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_102184A20);
      v24 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
      v25 = *(_DWORD *)(a3 + 16);
      LODWORD(__p[0]) = 134218240;
      *(void **)((char *)__p + 4) = (void *)v24;
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = v25;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 16, "lap detected with one or less strokes,strokes,%lu,lapType,%d", __p, 18);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 0, "std::vector<CLSwimDataInterface::StrokeEntry> CLSwimLapDetect::getStrokesInLap(float &, CLSwimDetectedLap) const", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
    a4[1] = *a4;
  }
}

void sub_100D9E3FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  uint64_t v19;
  void *v21;

  v21 = *(void **)v19;
  if (*(_QWORD *)v19)
  {
    *(_QWORD *)(v19 + 8) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D9E454(double *a1, __int128 *a2)
{
  double *v4;
  double v5;
  double *v6;
  float v7;
  float v8;
  double v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  void *__p;
  double *v14;
  float v15;
  _OWORD v16[3];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v15 = 0.0;
  v11 = *a2;
  v12 = *((_QWORD *)a2 + 2);
  sub_100D9E064((uint64_t)a1, &v15, (uint64_t)&v11, (uint64_t *)&__p);
  v4 = (double *)__p;
  if (__p != v14)
  {
    if (*((_BYTE *)__p + 16))
    {
      v5 = *(double *)__p + -1.0 / v15;
    }
    else
    {
      v6 = (double *)__p;
      while (!*((_BYTE *)v6 + 16))
      {
        v6 += 3;
        if (v6 == v14)
          goto LABEL_10;
      }
      if (v6 != v14)
      {
        v7 = v15;
        v8 = 4.0;
        v4 = v6;
        goto LABEL_11;
      }
LABEL_10:
      v7 = v15;
      v8 = 1.0;
LABEL_11:
      v5 = *v4 - (float)(v8 / v7);
    }
    *((double *)a2 + 1) = v5;
    v23 = 0;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    memset(v16, 0, sizeof(v16));
    v9 = a1[13];
    if (v9 <= 0.0)
    {
      v10 = (*(uint64_t (**)(_QWORD, _OWORD *))(**(_QWORD **)a1 + 120))(*(_QWORD *)a1, v16);
      v9 = -1.0;
      if (v10)
        v9 = *((double *)&v17 + 1);
    }
    if (*((double *)a2 + 1) >= v9)
      v9 = *((double *)a2 + 1);
    *((double *)a2 + 1) = v9;
    v4 = (double *)__p;
  }
  if (v4)
  {
    v14 = v4;
    operator delete(v4);
  }
}

void sub_100D9E5BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100D9E5E0(uint64_t a1, __int128 *a2)
{
  double *v3;
  double *v4;
  double *v5;
  double *v6;
  int v7;
  int v8;
  BOOL v9;
  double *v10;
  double v11;
  double v12;
  __int128 v13;
  uint64_t v14;
  double *v15;
  double *v16;
  float v17;

  v17 = 0.0;
  v13 = *a2;
  v14 = *((_QWORD *)a2 + 2);
  sub_100D9E064(a1, &v17, (uint64_t)&v13, (uint64_t *)&v15);
  v3 = v15;
  v4 = v16;
  if (v15 != v16)
  {
    v5 = v16;
    while (v5 != v15)
    {
      v6 = v5 - 3;
      v7 = *((unsigned __int8 *)v5 - 8);
      v8 = *((_DWORD *)v5 - 4);
      if (v7)
        v9 = v8 == 0;
      else
        v9 = 1;
      v5 = v6;
      if (!v9)
      {
        v10 = v6 + 3;
        goto LABEL_10;
      }
    }
    v10 = v16;
LABEL_10:
    v11 = *(v10 - 3) + (float)(1.5 / v17);
    while (v4 != v15)
    {
      v4 -= 3;
      if (v4 == v15)
        break;
      v12 = *(v4 - 3);
      if (*v4 - v12 > 10.0)
      {
        if (v12 < v11)
          v11 = *(v4 - 3);
        break;
      }
    }
    *(double *)a2 = v11;
  }
  if (v3)
  {
    v16 = v3;
    operator delete(v3);
  }
}

void sub_100D9E6C8(uint64_t a1, __int128 *a2)
{
  double *v3;
  double *v4;
  double *v5;
  char *v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  double *v10;
  double *v11;
  float v12;

  v12 = 0.0;
  v8 = *a2;
  v9 = *((_QWORD *)a2 + 2);
  sub_100D9E064(a1, &v12, (uint64_t)&v8, (uint64_t *)&v10);
  v3 = v10;
  v4 = v11;
  if (v10 != v11)
  {
    v5 = v11;
    while (v5 != v10)
    {
      v6 = (char *)(v5 - 3);
      v7 = *((unsigned __int8 *)v5 - 8);
      v5 -= 3;
      if (v7)
      {
        v4 = (double *)(v6 + 24);
        break;
      }
    }
    *(double *)a2 = *(v4 - 3) + (float)(1.0 / v12);
  }
  if (v3)
  {
    v11 = v3;
    operator delete(v3);
  }
}

void sub_100D9E764(id a1)
{
  qword_10229FCA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

float sub_100D9E790(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  ++*(_QWORD *)a1;
  *(float *)(a1 + 8) = (float)((float)**(int **)v2
                             + (float)(*(float *)(a1 + 8) * (float)(unint64_t)(**(_QWORD **)(v2 + 8) - 1)))
                     / (float)**(unint64_t **)(v2 + 8);
  return sub_100D9E7D4((float *)(a1 + 12), v2);
}

float sub_100D9E7D4(float *a1, uint64_t a2)
{
  uint64_t v2;
  float v3;
  float result;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)v2 >= 2uLL)
  {
    v3 = (float)**(int **)a2 - *(float *)(v2 + 8);
    result = (float)((float)(*a1 * (float)(unint64_t)(*(_QWORD *)v2 - 1)) / (float)*(unint64_t *)v2)
           + (float)((float)(v3 * v3) / (float)(unint64_t)(*(_QWORD *)v2 - 1));
    *a1 = result;
  }
  return result;
}

uint64_t sub_100D9E824(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  unsigned __int8 v5[4];
  int v6;

  v3 = sub_101476A58((_QWORD *)a1, a2);
  *v3 = off_102184A50;
  v3[11] = 0;
  v3[12] = 0;
  v3[13] = 0;
  *((_DWORD *)v3 + 28) = 0;
  sub_1004AD1D8(v5, "MinimumFTPRequiredTimeInSecondsToBeEligibleForFTPCompute", &dword_101C25058, 0);
  *(_DWORD *)(a1 + 116) = v6;
  sub_1004AD1D8(v5, "NumberOfRequiredSamplesFTPWithPowerAndHR", &dword_101C2505C, 0);
  *(_DWORD *)(a1 + 120) = v6;
  sub_1004AD1D8(v5, "NumberOfRequiredFTPSamplesWithPower", &dword_101C25060, 0);
  *(_DWORD *)(a1 + 124) = v6;
  return a1;
}

void sub_100D9E8E0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  sub_100261F44(v2);
  *v1 = off_102184AD0;
  sub_100261F44((uint64_t)(v1 + 1));
  _Unwind_Resume(a1);
}

uint64_t sub_100D9E918()
{
  return 1;
}

uint64_t sub_100D9E920(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  v12 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(&v13, v2, a1);
  sub_100349198((_QWORD *)(a1 + 88), &v13);
  v6 = v14;
  if (v14)
  {
    v7 = (unint64_t *)&v14->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  return 1;
}

void sub_100D9EA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100D9EA18(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t sub_100D9EA20(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 88);
  if (v2)
    sub_100E49BB4(v2);
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  return 1;
}

uint64_t sub_100D9EA54(uint64_t a1)
{
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  return 1;
}

uint64_t sub_100D9EA64(_DWORD *a1, unsigned __int8 *uu)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  _BYTE v10[37];

  a1[27] = 0;
  a1[28] = 0;
  v4 = (uint64_t *)*((_QWORD *)uu + 6);
  v5 = *v4;
  v6 = v4[1];
  if (v5 != v6)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      if (*(float *)(v5 + 32) >= 0.0)
      {
        a1[27] = ++v8;
        if (*(float *)(v5 + 20) > 0.39)
          a1[28] = ++v7;
      }
      v5 += 64;
    }
    while (v5 != v6);
  }
  memset(v10, 0, sizeof(v10));
  uuid_unparse(uu, v10);
  if (sub_100D9EB74((uint64_t)a1, 1, a1[31], a1[30], a1[29], (uint64_t)v10, *((double *)uu + 2), *((double *)uu + 3)))
    ++a1[26];
  return 1;
}

BOOL sub_100D9EB5C(int *a1, int a2, uint64_t a3, double a4, double a5)
{
  return sub_100D9EB74((uint64_t)a1, a2, a1[31], a1[30], a1[29], a3, a4, a5);
}

uint64_t sub_100D9EB6C()
{
  return 1;
}

BOOL sub_100D9EB74(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, double a7, double a8)
{
  NSObject *v13;
  _BOOL8 result;
  const char *v15;
  NSObject *v16;
  NSObject *v17;
  const char *v18;
  uint8_t *v19;
  uint8_t *v20;
  const char *v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  int v34;

  if (a8 - a7 >= (double)a5)
  {
    if (sub_100D9F020(a1, a3, a4, a7, a8))
    {
      if (qword_10229FF90 != -1)
        dispatch_once(&qword_10229FF90, &stru_102184B18);
      v16 = qword_10229FF98;
      if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109378;
        v26 = a2;
        v27 = 2080;
        v28 = a6;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Session %d, session Id, %s, is eligible to trigger FTP calculation.", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF90 != -1)
          dispatch_once(&qword_10229FF90, &stru_102184B18);
        LODWORD(v22) = 67109378;
        HIDWORD(v22) = a2;
        v23 = 2080;
        v24 = a6;
        LODWORD(v21) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "Session %d, session Id, %s, is eligible to trigger FTP calculation.", &v22, v21);
        v19 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLCyclingValidSessionCounter::isValidSession(CFAbsoluteTime, CFAbsoluteTime, int, const int, const int, const int, char *)", "%s\n", v18);
        if (v19 != buf)
          free(v19);
      }
      return 1;
    }
    else
    {
      if (qword_10229FF90 != -1)
        dispatch_once(&qword_10229FF90, &stru_102184B18);
      v17 = qword_10229FF98;
      if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109378;
        v26 = a2;
        v27 = 2080;
        v28 = a6;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Session %d, session Id, %s, is not eligible to trigger FTP calculation.", buf, 0x12u);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF90 != -1)
          dispatch_once(&qword_10229FF90, &stru_102184B18);
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "Session %d, session Id, %s, is not eligible to trigger FTP calculation.", &v22, 18);
        goto LABEL_30;
      }
    }
  }
  else
  {
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_102184B18);
    v13 = qword_10229FF98;
    if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67110146;
      v26 = a2;
      v27 = 2080;
      v28 = a6;
      v29 = 2048;
      v30 = a7;
      v31 = 2048;
      v32 = a8;
      v33 = 1024;
      v34 = a5;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Short period workout. Can not calculate FTP for session number %d, sessionId, %s. start time:%f and end time:%f, minimum required time:%d", buf, 0x2Cu);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF90 != -1)
        dispatch_once(&qword_10229FF90, &stru_102184B18);
      LODWORD(v22) = 67110146;
      HIDWORD(v22) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "Short period workout. Can not calculate FTP for session number %d, sessionId, %s. start time:%f and end time:%f, minimum required time:%d", &v22, 44, v22);
LABEL_30:
      v20 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLCyclingValidSessionCounter::isValidSession(CFAbsoluteTime, CFAbsoluteTime, int, const int, const int, const int, char *)", "%s\n", v15);
      if (v20 != buf)
        free(v20);
      return 0;
    }
  }
  return result;
}

BOOL sub_100D9F020(uint64_t a1, int a2, int a3, double a4, double a5)
{
  int v9;
  int v10;
  _BOOL8 v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  uint8_t *v17;
  int v18;
  uint8_t buf[4];
  double v20;
  __int16 v21;
  double v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;

  v10 = *(_DWORD *)(a1 + 108);
  v9 = *(_DWORD *)(a1 + 112);
  v12 = v10 >= a2 || v9 >= a3;
  if (v12)
  {
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_102184B18);
    v13 = qword_10229FF98;
    if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134219264;
      v20 = a4;
      v21 = 2048;
      v22 = a5;
      v23 = 1024;
      v24 = v10;
      v25 = 1024;
      v26 = a2;
      v27 = 1024;
      v28 = v9;
      v29 = 1024;
      v30 = a3;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Checked session from, %f, to %f, Number of samples with power and heart rate are enough to calculate the FTP. Number of samples with power: %d, required number of samples with power is %d, number of samples with power and heart rate:%d. Required number of samples with power and heart rate is %d", buf, 0x2Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF90 != -1)
        dispatch_once(&qword_10229FF90, &stru_102184B18);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 2, "Checked session from, %f, to %f, Number of samples with power and heart rate are enough to calculate the FTP. Number of samples with power: %d, required number of samples with power is %d, number of samples with power and heart rate:%d. Required number of samples with power and heart rate is %d", &v18, 46);
LABEL_25:
      v17 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLCyclingValidSessionCounter::hasEnoughHRAndPowerSamples(const CFAbsoluteTime, CFAbsoluteTime, const int, const int)", "%s\n", v14);
      if (v17 != buf)
        free(v17);
    }
  }
  else
  {
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_102184B18);
    v15 = qword_10229FF98;
    if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134219264;
      v20 = a4;
      v21 = 2048;
      v22 = a5;
      v23 = 1024;
      v24 = v10;
      v25 = 1024;
      v26 = a2;
      v27 = 1024;
      v28 = v9;
      v29 = 1024;
      v30 = a3;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Checked session from, %f, to %f, Number of samples with power and heart rate are not enough to calculate the FTP for this session. Number of samples with power: %d, required number of samples with power is %d, number of samples with power and heart rate:%d. Required number of samples with power and heart rate is %d", buf, 0x2Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF90 != -1)
        dispatch_once(&qword_10229FF90, &stru_102184B18);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "Checked session from, %f, to %f, Number of samples with power and heart rate are not enough to calculate the FTP for this session. Number of samples with power: %d, required number of samples with power is %d, number of samples with power and heart rate:%d. Required number of samples with power and heart rate is %d", &v18, 46);
      goto LABEL_25;
    }
  }
  return v12;
}

_QWORD *sub_100D9F3C4(_QWORD *a1)
{
  *a1 = off_102184A50;
  sub_100261F44((uint64_t)(a1 + 11));
  *a1 = off_102184AD0;
  sub_100261F44((uint64_t)(a1 + 1));
  return a1;
}

void sub_100D9F40C(_QWORD *a1)
{
  *a1 = off_102184A50;
  sub_100261F44((uint64_t)(a1 + 11));
  *a1 = off_102184AD0;
  sub_100261F44((uint64_t)(a1 + 1));
  operator delete();
}

__n128 sub_100D9F464(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 68) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 56) = v4;
  *(_OWORD *)(a1 + 40) = v3;
  *(__n128 *)(a1 + 24) = result;
  return result;
}

void sub_100D9F484(id a1)
{
  qword_10229FF98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CyclingPower");
}

uint64_t sub_100DA1150(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80);
}

uint64_t sub_100DA13C0(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112);
}

void sub_100DA15A4(id a1)
{
  qword_1022A01F8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Routine");
}

void sub_100DA15D0(uint64_t a1, void *a2, uint64_t a3)
{
  int v5;
  int v6;
  NSObject *v7;
  _QWORD *v8;
  const char *v9;
  uint8_t *v10;
  _WORD v11[12];
  _QWORD *v12;
  uint8_t buf[24];

  *(_DWORD *)a1 = 0;
  sub_100270E34(a1 + 8, a3);
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 55) = 0;
  v5 = sub_100241698();
  *(_QWORD *)(a1 + 64) = 0;
  if (v5)
    v6 = 0;
  else
    v6 = 512;
  *(_DWORD *)(a1 + 60) = v6;
  *(_QWORD *)(a1 + 72) = 0;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102184B58);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "L5Context,initializing", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102184B58);
    v11[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "L5Context,initializing", v11, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "CLGnssL5Context::CLGnssL5Context(id<CLIntersiloUniverse>, CLGnssL5UpdateCallbackType)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  v8 = operator new(0x20uLL);
  *v8 = off_102184BA8;
  v8[1] = sub_100DA1DCC;
  v8[2] = 0;
  v8[3] = a1;
  v12 = v8;
  operator new();
}

void sub_100DA1A1C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v1 + 72) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_10042B248(v3, 0);
  v6 = *(_QWORD **)(v1 + 32);
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
      goto LABEL_8;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_8:
  _Unwind_Resume(a1);
}

uint64_t sub_100DA1B20(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 72) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8), 41);
  v5 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);

  v6 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_10042B248((uint64_t *)(a1 + 64), 0);
  v7 = *(_QWORD **)(a1 + 32);
  if (v7 == v2)
  {
    v8 = 4;
    goto LABEL_14;
  }
  if (v7)
  {
    v8 = 5;
    v2 = *(_QWORD **)(a1 + 32);
LABEL_14:
    (*(void (**)(_QWORD *))(*v2 + 8 * v8))(v2);
  }
  return a1;
}

void sub_100DA1C00(uint64_t a1, int a2)
{
  int v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  v4 = *(unsigned __int8 *)(a1 + 50);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102184B58);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "L5Context,kNotificationBatterySaverMode,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102184B58);
    v8[0] = 67240192;
    v8[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "L5Context,kNotificationBatterySaverMode,%{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssL5Context::feedBatterySaverMode(const BOOL)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  *(_BYTE *)(a1 + 50) = a2;
  if (v4 != a2)
    sub_100240068(a1);
}

void sub_100DA1DCC(uint64_t a1, uint64_t a2, int *a3)
{
  BOOL v5;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[2];
  __int16 v14;
  int v15;
  uint8_t buf[4];
  int v17;
  void *__p;
  char v19;
  int v20;

  if ((*a3 & 0xFFFFFFFE) == 6)
  {
    *(_BYTE *)(a1 + 48) = 0;
    if (sub_100219670(*(_QWORD *)(a1 + 64)))
    {
      *(_BYTE *)(a1 + 48) = 1;
      sub_1014801C4(*(_QWORD *)(a1 + 64), (uint64_t)buf);
      v5 = sub_1000AFA5C(v20);
      if (v19 < 0)
        operator delete(__p);
      if (!v5)
        *(_BYTE *)(a1 + 48) = 0;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102184B58);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v7 = *a3;
      v8 = *(unsigned __int8 *)(a1 + 48);
      *(_DWORD *)buf = 67240448;
      v17 = v7;
      LOWORD(__p) = 1026;
      *(_DWORD *)((char *)&__p + 2) = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "L5Context,WiFi notification,%{public}d,associated,%{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102184B58);
      v9 = *a3;
      v10 = *(unsigned __int8 *)(a1 + 48);
      v13[0] = 67240448;
      v13[1] = v9;
      v14 = 1026;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "L5Context,WiFi notification,%{public}d,associated,%{public}d", v13, 14);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssL5Context::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    sub_100240068(a1);
  }
}

void sub_100DA2000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100DA2024(uint64_t a1, int a2)
{
  NSObject *v4;
  char *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102184B58);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "L5Context,Focused Nav,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102184B58);
    v6[0] = 67240192;
    v6[1] = a2;
    v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "L5Context,Focused Nav,%{public}d", v6, 8);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssL5Context::feedFocusedNavigation(const BOOL)", "%s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
  if (*(unsigned __int8 *)(a1 + 54) != a2)
  {
    *(_BYTE *)(a1 + 54) = a2;
    sub_100240068(a1);
  }
}

void sub_100DA21E8(uint64_t a1, int a2)
{
  NSObject *v4;
  char *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102184B58);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "L5Context,Fitness Activity,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102184B58);
    v6[0] = 67240192;
    v6[1] = a2;
    v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "L5Context,Fitness Activity,%{public}d", v6, 8);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssL5Context::feedFitnessActivity(const BOOL)", "%s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
  if (*(unsigned __int8 *)(a1 + 56) != a2)
  {
    *(_BYTE *)(a1 + 56) = a2;
    sub_100240068(a1);
  }
}

void sub_100DA23AC(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102184B58);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "L5Context,LowPowerLongDurationHKWorkoutForceOff,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102184B58);
    v7[0] = 67240192;
    v7[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "L5Context,LowPowerLongDurationHKWorkoutForceOff,%{public}d", v7, 8);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssL5Context::feedLowPowerLongDurationHKWorkoutForceOff(const BOOL)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if (*(unsigned __int8 *)(a1 + 58) != a2)
  {
    *(_BYTE *)(a1 + 58) = a2;
    sub_100240068(a1);
  }
}

void sub_100DA2570(int *a1)
{
  int v2;
  int v3;
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  int v17;
  uint64_t v18;
  NSObject *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  char *v30;
  _DWORD *v31;
  _DWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  int v40;
  _DWORD *v41;
  _DWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  char *v57;
  uint64_t v58;
  int v59;
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  uint8_t buf[8];
  _DWORD *v70;
  _BYTE v71[10];
  __int16 v72;
  int v73;

  if (*((_BYTE *)a1 + 48) && !*((_BYTE *)a1 + 55))
  {
    v2 = 1;
    v3 = 1;
    if ((sub_100762C38() & 1) != 0)
      goto LABEL_11;
  }
  else
  {
    v2 = 0;
  }
  if (*((_BYTE *)a1 + 50))
  {
    v3 = 1;
  }
  else if (*((_BYTE *)a1 + 53))
  {
    v3 = sub_100762AD8();
  }
  else
  {
    v3 = 0;
  }
LABEL_11:
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102184B58);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *((unsigned __int8 *)a1 + 48);
    v6 = *((unsigned __int8 *)a1 + 53);
    v7 = *((unsigned __int8 *)a1 + 50);
    v8 = *((unsigned __int8 *)a1 + 55);
    v9 = *a1;
    *(_DWORD *)buf = 67241216;
    *(_DWORD *)&buf[4] = v5;
    LOWORD(v70) = 1026;
    *(_DWORD *)((char *)&v70 + 2) = v6;
    HIWORD(v70) = 1026;
    *(_DWORD *)v71 = v7;
    *(_WORD *)&v71[4] = 1026;
    *(_DWORD *)&v71[6] = v8;
    v72 = 1026;
    v73 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "L5ContextMajorPower,WiFiAssoc,%{public}d,VoiceCall,%{public}d,BattSav,%{public}d,Driving,%{public}d,L5Enable,%{public}d", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102184B58);
    v52 = *((unsigned __int8 *)a1 + 48);
    v53 = *((unsigned __int8 *)a1 + 53);
    v54 = *((unsigned __int8 *)a1 + 50);
    v55 = *((unsigned __int8 *)a1 + 55);
    v56 = *a1;
    v59 = 67241216;
    v60 = v52;
    v61 = 1026;
    v62 = v53;
    v63 = 1026;
    v64 = v54;
    v65 = 1026;
    v66 = v55;
    v67 = 1026;
    v68 = v56;
    v57 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "L5ContextMajorPower,WiFiAssoc,%{public}d,VoiceCall,%{public}d,BattSav,%{public}d,Driving,%{public}d,L5Enable,%{public}d", &v59, 32);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssL5Context::tickL5EnablementForPlatformsWithMajorPowerImpact()", "%s\n", v57);
    if (v57 != (char *)buf)
      free(v57);
  }
  if (v3)
  {
    v10 = 0;
    *(_QWORD *)buf = 0;
    v70 = 0;
    *(_QWORD *)v71 = 0;
    if (v2)
    {
      v11 = sub_100260634((uint64_t)v71, 1uLL);
      v12 = *(_DWORD **)buf;
      v13 = v70;
      v15 = &v11[v14];
      *v11 = 1;
      v10 = v11 + 1;
      while (v13 != v12)
      {
        v16 = *--v13;
        *--v11 = v16;
      }
      *(_QWORD *)buf = v11;
      v70 = v10;
      *(_QWORD *)v71 = v15;
      if (v12)
        operator delete(v12);
      v70 = v10;
    }
    if (*((_BYTE *)a1 + 50))
    {
      if ((unint64_t)v10 >= *(_QWORD *)v71)
      {
        v32 = *(_DWORD **)buf;
        v33 = ((uint64_t)v10 - *(_QWORD *)buf) >> 2;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 62)
          sub_100259694();
        v35 = *(_QWORD *)v71 - *(_QWORD *)buf;
        if ((uint64_t)(*(_QWORD *)v71 - *(_QWORD *)buf) >> 1 > v34)
          v34 = v35 >> 1;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
          v36 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        if (v36)
        {
          v37 = (char *)sub_100260634((uint64_t)v71, v36);
          v32 = *(_DWORD **)buf;
          v10 = v70;
        }
        else
        {
          v37 = 0;
        }
        v38 = &v37[4 * v33];
        v39 = &v37[4 * v36];
        *(_DWORD *)v38 = 2;
        v31 = v38 + 4;
        while (v10 != v32)
        {
          v40 = *--v10;
          *((_DWORD *)v38 - 1) = v40;
          v38 -= 4;
        }
        *(_QWORD *)buf = v38;
        v70 = v31;
        *(_QWORD *)v71 = v39;
        if (v32)
          operator delete(v32);
      }
      else
      {
        *v10 = 2;
        v31 = v10 + 1;
      }
      v70 = v31;
      v10 = v31;
    }
    if (*((_BYTE *)a1 + 53))
    {
      if ((unint64_t)v10 >= *(_QWORD *)v71)
      {
        v42 = *(_DWORD **)buf;
        v43 = ((uint64_t)v10 - *(_QWORD *)buf) >> 2;
        v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 62)
          sub_100259694();
        v45 = *(_QWORD *)v71 - *(_QWORD *)buf;
        if ((uint64_t)(*(_QWORD *)v71 - *(_QWORD *)buf) >> 1 > v44)
          v44 = v45 >> 1;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
          v46 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v46 = v44;
        if (v46)
        {
          v47 = (char *)sub_100260634((uint64_t)v71, v46);
          v42 = *(_DWORD **)buf;
          v10 = v70;
        }
        else
        {
          v47 = 0;
        }
        v48 = &v47[4 * v43];
        v49 = &v47[4 * v46];
        *(_DWORD *)v48 = 3;
        v41 = v48 + 4;
        while (v10 != v42)
        {
          v50 = *--v10;
          *((_DWORD *)v48 - 1) = v50;
          v48 -= 4;
        }
        *(_QWORD *)buf = v48;
        v70 = v41;
        *(_QWORD *)v71 = v49;
        if (v42)
          operator delete(v42);
      }
      else
      {
        *v10 = 3;
        v41 = v10 + 1;
      }
      v70 = v41;
    }
    *a1 = 0;
    v51 = *((_QWORD *)a1 + 4);
    if (v51)
    {
      v59 = 0;
      (*(void (**)(uint64_t, int *, uint8_t *))(*(_QWORD *)v51 + 48))(v51, &v59, buf);
    }
    if (*(_QWORD *)buf)
    {
      v70 = *(_DWORD **)buf;
      operator delete(*(void **)buf);
    }
    return;
  }
  if (*((_BYTE *)a1 + 54) || *((_BYTE *)a1 + 56) || *((_BYTE *)a1 + 52))
  {
    if (*((_BYTE *)a1 + 53))
      v17 = 256;
    else
      v17 = 512;
    *(_QWORD *)buf = 0;
    v70 = 0;
    *(_QWORD *)v71 = 0;
    *a1 = v17;
    v18 = *((_QWORD *)a1 + 4);
    if (v18)
    {
LABEL_28:
      v59 = v17;
      (*(void (**)(uint64_t, int *, uint8_t *))(*(_QWORD *)v18 + 48))(v18, &v59, buf);
      if (*(_QWORD *)buf)
      {
        v70 = *(_DWORD **)buf;
        operator delete(*(void **)buf);
      }
    }
  }
  else
  {
    v17 = a1[15];
    *(_QWORD *)buf = 0;
    v70 = 0;
    *(_QWORD *)v71 = 0;
    *a1 = v17;
    v18 = *((_QWORD *)a1 + 4);
    if (v18)
      goto LABEL_28;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102184B58);
  v19 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v20 = *((unsigned __int8 *)a1 + 54);
    v21 = *((unsigned __int8 *)a1 + 56);
    v22 = *((unsigned __int8 *)a1 + 52);
    v23 = *((unsigned __int8 *)a1 + 49);
    v24 = *a1;
    *(_DWORD *)buf = 67241216;
    *(_DWORD *)&buf[4] = v20;
    LOWORD(v70) = 1026;
    *(_DWORD *)((char *)&v70 + 2) = v21;
    HIWORD(v70) = 1026;
    *(_DWORD *)v71 = v22;
    *(_WORD *)&v71[4] = 1026;
    *(_DWORD *)&v71[6] = v23;
    v72 = 1026;
    v73 = v24;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "L5ContextMajorPower,FocusedNav,%{public}d,ActFitness,%{public}d,AccHigh,%{public}d,SigEnv,%{public}d,L5Enable,%{public}d", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102184B58);
    v25 = *((unsigned __int8 *)a1 + 54);
    v26 = *((unsigned __int8 *)a1 + 56);
    v27 = *((unsigned __int8 *)a1 + 52);
    v28 = *((unsigned __int8 *)a1 + 49);
    v29 = *a1;
    v59 = 67241216;
    v60 = v25;
    v61 = 1026;
    v62 = v26;
    v63 = 1026;
    v64 = v27;
    v65 = 1026;
    v66 = v28;
    v67 = 1026;
    v68 = v29;
    LODWORD(v58) = 32;
    v30 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "L5ContextMajorPower,FocusedNav,%{public}d,ActFitness,%{public}d,AccHigh,%{public}d,SigEnv,%{public}d,L5Enable,%{public}d", &v59, v58);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssL5Context::tickL5EnablementForPlatformsWithMajorPowerImpact()", "%s\n", v30);
    if (v30 != (char *)buf)
      free(v30);
  }
}

void sub_100DA2C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100DA2C88(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100DA2CB4(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

__n128 sub_100DA2CE0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_102184BA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_100DA2D24(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102184BA8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100DA2D50(_QWORD *a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, _QWORD);
  _QWORD *v4;

  v2 = a1[2];
  v3 = (uint64_t (*)(_QWORD *, _QWORD))a1[1];
  v4 = (_QWORD *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v3);
  return v3(v4, *a2);
}

uint64_t sub_100DA2D70(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DA2DAC()
{
}

void sub_100DA2DB8()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C250B8;
      v1[3] = unk_101C250C8;
      v1[4] = xmmword_101C250D8;
      v1[0] = xmmword_101C25098;
      v1[1] = unk_101C250A8;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100DA2E8C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

__n128 sub_100DA2EA4(uint64_t a1)
{
  __n128 result;

  *(_QWORD *)a1 = off_102184C40;
  *(_OWORD *)(a1 + 8) = xmmword_101C252F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a1 + 24) = result;
  return result;
}

uint64_t sub_100DA2ECC(uint64_t a1, uint64_t *a2)
{
  int v3;
  float v4;
  unsigned int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  const char *v23;
  char *v24;
  double v25;
  int v26;
  uint64_t v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  int v43;
  _BYTE buf[12];
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;
  __int16 v57;
  double v58;
  __int16 v59;
  int v60;

  v3 = *((_DWORD *)a2 + 5);
  *(int32x2_t *)buf = vrev64_s32(*(int32x2_t *)((char *)a2 + 12));
  *(_DWORD *)&buf[8] = v3;
  sub_1000F08C0((uint64_t)buf, (float *)&v26, (int *)(a1 + 24), 2, 3);
  v4 = *(float *)&v27;
  v5 = sub_100DA31E0(*(float *)&v27);
  if (v5 == 1)
  {
    if (sub_100DA33DC(v4, *((float *)a2 + 6), *((float *)a2 + 3)))
      v5 = 2;
    else
      v5 = 1;
  }
  if (*((float *)a2 + 4) >= 0.01)
    v6 = v5;
  else
    v6 = 2;
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102184C60);
  v7 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v8 = *a2;
    v9 = *((float *)a2 + 2);
    v10 = *((float *)a2 + 3);
    v11 = *((float *)a2 + 4);
    v12 = *((float *)a2 + 5);
    v13 = *((float *)a2 + 6);
    v14 = *((float *)a2 + 7);
    *(_DWORD *)buf = 134220032;
    *(_QWORD *)&buf[4] = v8;
    v45 = 2048;
    v46 = v9;
    v47 = 2048;
    v48 = v10;
    v49 = 2048;
    v50 = v11;
    v51 = 2048;
    v52 = v12;
    v53 = 2048;
    v54 = v13;
    v55 = 2048;
    v56 = v14;
    v57 = 2048;
    v58 = v4;
    v59 = 1024;
    v60 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "FST DM Features, startTime, %f, accelMag, %f, inertialAccelZMag, %f, rotationalAccelZMag, %f, rotationToAccelCorrelation, %f, pctDominanceCrownPlane, %f, gravityX, %f, pBody, %f, FSTMotionType, %d", buf, 0x58u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102184C60);
    v16 = *a2;
    v17 = *((float *)a2 + 2);
    v18 = *((float *)a2 + 3);
    v19 = *((float *)a2 + 4);
    v20 = *((float *)a2 + 5);
    v21 = *((float *)a2 + 6);
    v22 = *((float *)a2 + 7);
    v26 = 134220032;
    v27 = v16;
    v28 = 2048;
    v29 = v17;
    v30 = 2048;
    v31 = v18;
    v32 = 2048;
    v33 = v19;
    v34 = 2048;
    v35 = v20;
    v36 = 2048;
    v37 = v21;
    v38 = 2048;
    v39 = v22;
    v40 = 2048;
    v41 = v4;
    v42 = 1024;
    v43 = v6;
    LODWORD(v25) = 88;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "FST DM Features, startTime, %f, accelMag, %f, inertialAccelZMag, %f, rotationalAccelZMag, %f, rotationToAccelCorrelation, %f, pctDominanceCrownPlane, %f, gravityX, %f, pBody, %f, FSTMotionType, %d", COERCE_DOUBLE(&v26), v25);
    v24 = (char *)v23;
    sub_100512490("Generic", 1, 0, 2, "FSTMotionType CLFunctionalStrengthMotionClassifier::classifyMotion(const CLFunctionalStrengthDMIntermediateFeatures &)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  return v6;
}

uint64_t sub_100DA31E0(float a1)
{
  unsigned int v2;
  uint64_t v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  double v8;
  _DWORD v9[2];
  __int16 v10;
  double v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  double v15;

  if (a1 >= 0.7)
    v2 = 2;
  else
    v2 = 3;
  if (a1 <= 0.4)
    v3 = 1;
  else
    v3 = v2;
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102184C60);
  v4 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    v13 = v3;
    v14 = 2048;
    v15 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "FSTMotionClassifier, classifyByLikelihoodBody, FSTMotionType, %d, pBody, %f", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102184C60);
    v9[0] = 67109376;
    v9[1] = v3;
    v10 = 2048;
    v11 = a1;
    LODWORD(v8) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "FSTMotionClassifier, classifyByLikelihoodBody, FSTMotionType, %d, pBody, %f", v9, v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "FSTMotionType CLFunctionalStrengthMotionClassifier::classifyByLikelihoodBody(const float)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return v3;
}

uint64_t sub_100DA33DC(float a1, float a2, float a3)
{
  _BOOL4 v4;
  _BOOL4 v5;
  uint64_t v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  int v11;
  int v12;
  _BOOL4 v13;
  __int16 v14;
  _BOOL4 v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  _BOOL4 v19;
  __int16 v20;
  _BOOL4 v21;
  __int16 v22;
  _BOOL4 v23;

  v4 = a3 < 0.4 && a3 > 0.2;
  v5 = a1 <= 0.4 && a1 >= 0.1;
  if (a2 <= 99.0)
    v6 = v5 & v4;
  else
    v6 = 0;
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102184C60);
  v7 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109888;
    v17 = v6;
    v18 = 1024;
    v19 = a2 <= 99.0;
    v20 = 1024;
    v21 = v4;
    v22 = 1024;
    v23 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "FSTMotionClassifier, containsBodyMotion, %d, isNotDominantlyPlanar, %d, isBodyRangeAccelZMag, %d, isModerateBodyLikelihood, %d", buf, 0x1Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102184C60);
    LOWORD(v12) = 1024;
    HIWORD(v12) = a2 <= 99.0;
    v13 = v4;
    v14 = 1024;
    v15 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "FSTMotionClassifier, containsBodyMotion, %d, isNotDominantlyPlanar, %d, isBodyRangeAccelZMag, %d, isModerateBodyLikelihood, %d", &v11, 26, 67109888, v12);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLFunctionalStrengthMotionClassifier::containsBodyMotion(const float, const float, const float)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  return v6;
}

BOOL sub_100DA3634(uint64_t a1)
{
  return *(float *)(a1 + 28) < -0.6;
}

void sub_100DA364C()
{
  operator delete();
}

void sub_100DA3660(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100DA368C(uint64_t result, int a2, char a3)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_102184C90;
  *(_BYTE *)(result + 24) = a3;
  *(_BYTE *)(result + 25) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_BYTE *)(result + 72) = 0;
  *(_BYTE *)(result + 73) = a2 != 0;
  return result;
}

_QWORD *sub_100DA36BC(_QWORD *a1)
{
  *a1 = off_102184C90;
  sub_100DA3700(a1);
  sub_100DA374C(a1);
  sub_100DA3798(a1);
  return a1;
}

_QWORD *sub_100DA3700(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (result[2])
  {
    v1 = result;
    v2 = sub_10021C350();
    sub_1000A4A6C(v2, 0, v1[2]);
    result = (_QWORD *)v1[2];
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    v1[2] = 0;
  }
  return result;
}

_QWORD *sub_100DA374C(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (result[1])
  {
    v1 = result;
    v2 = sub_10024095C();
    sub_1000A4A6C(v2, 0, v1[1]);
    result = (_QWORD *)v1[1];
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    v1[1] = 0;
  }
  return result;
}

_QWORD *sub_100DA3798(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (result[7])
  {
    v1 = result;
    v2 = sub_1000A5944();
    sub_1000A4A6C(v2, 0, v1[7]);
    v3 = v1[7];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v1[7] = 0;
    v4 = sub_1000A5944();
    sub_1000A4A6C(v4, 1, v1[8]);
    result = (_QWORD *)v1[8];
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    v1[8] = 0;
  }
  return result;
}

uint64_t sub_100DA3814(uint64_t result)
{
  if (!*(_QWORD *)(result + 16))
    operator new();
  return result;
}

void sub_100DA38B4()
{
  operator delete();
}

uint64_t sub_100DA38D8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
}

void sub_100DA38F0(uint64_t a1)
{
  uint64_t v2;

  if (!*(_BYTE *)(a1 + 25))
  {
    v2 = sub_100C58624();
    sub_100C58680(v2, (uint64_t)sub_100DA3934, *(_BYTE *)(a1 + 24), a1);
    *(_BYTE *)(a1 + 25) = 1;
  }
}

void sub_100DA3934(_OWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v4[5];
  _OWORD v5[2];

  v5[0] = *a1;
  *(_OWORD *)((char *)v5 + 12) = *(_OWORD *)((char *)a1 + 12);
  v3 = sub_100127B9C();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100DA3BF4;
  v4[3] = &unk_102146A10;
  v4[4] = a2;
  sub_1000A57FC(v3, (uint64_t)v4);
}

void sub_100DA39A4(uint64_t a1)
{
  uint64_t v2;

  if (*(_BYTE *)(a1 + 25))
  {
    v2 = sub_100C58624();
    sub_100C58718(v2);
    *(_BYTE *)(a1 + 25) = 0;
  }
}

uint64_t sub_100DA39D4(uint64_t result)
{
  if (!*(_QWORD *)(result + 8))
    operator new();
  return result;
}

void sub_100DA3A74()
{
  operator delete();
}

uint64_t sub_100DA3A98(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a1);
}

uint64_t sub_100DA3AB0(uint64_t result)
{
  if (!*(_QWORD *)(result + 56))
    operator new();
  return result;
}

void sub_100DA3BA8()
{
  operator delete();
}

uint64_t sub_100DA3BD0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1);
}

_BYTE *sub_100DA3BE8(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 72) = *result;
  return result;
}

void sub_100DA3BF4(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  NSObject *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  int v33;
  const char *v34;
  uint8_t *v35;
  double v36;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  _BYTE v56[44];
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  int v63;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 52);
  *(_OWORD *)(v2 + 28) = v3;
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_102184CD0);
  v4 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(float *)(a1 + 40);
    v6 = *(float *)(a1 + 44);
    v7 = *(float *)(a1 + 48);
    v8 = *(float *)(a1 + 52);
    v9 = *(float *)(a1 + 56);
    v10 = *(float *)(a1 + 60);
    v11 = *(unsigned __int8 *)(a1 + 64);
    *(_DWORD *)buf = 136316930;
    v38 = "GyroBias";
    v39 = 2048;
    v40 = v5;
    v41 = 2048;
    v42 = v6;
    v43 = 2048;
    v44 = v7;
    v45 = 2048;
    v46 = v8;
    v47 = 2048;
    v48 = v9;
    v49 = 2048;
    v50 = v10;
    v51 = 1024;
    v52 = v11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Type,%s,bias.x,%20.20f,bias.y,%20.20f,bias.z,%20.20f,variance.x,%20.20f,variance.y,%20.20f,variance.z,%20.20f,doingBiasEstimation,%d", buf, 0x4Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_102184CD0);
    v27 = *(float *)(a1 + 40);
    v28 = *(float *)(a1 + 44);
    v29 = *(float *)(a1 + 48);
    v30 = *(float *)(a1 + 52);
    v31 = *(float *)(a1 + 56);
    v32 = *(float *)(a1 + 60);
    v33 = *(unsigned __int8 *)(a1 + 64);
    *(_DWORD *)v56 = 136316930;
    *(_QWORD *)&v56[4] = "GyroBias";
    *(_WORD *)&v56[12] = 2048;
    *(double *)&v56[14] = v27;
    *(_WORD *)&v56[22] = 2048;
    *(double *)&v56[24] = v28;
    *(_WORD *)&v56[32] = 2048;
    *(double *)&v56[34] = v29;
    *(_WORD *)&v56[42] = 2048;
    v57 = v30;
    v58 = 2048;
    v59 = v31;
    v60 = 2048;
    v61 = v32;
    v62 = 1024;
    v63 = v33;
    LODWORD(v36) = 78;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "Type,%s,bias.x,%20.20f,bias.y,%20.20f,bias.z,%20.20f,variance.x,%20.20f,variance.y,%20.20f,variance.z,%20.20f,doingBiasEstimation,%d", v56, v36);
    v35 = (uint8_t *)v34;
    sub_100512490("Generic", 1, 0, 2, "void CLSensorFusionServiceAP::onBiasAndVariance(const CLMotionTypeGyroBiasAndVariance)_block_invoke", "%s\n", v34);
    if (v35 != buf)
      free(v35);
  }
  if (*(_BYTE *)(v2 + 73))
  {
    *(_QWORD *)v56 = off_102172378;
    *(_QWORD *)&v56[8] = CFAbsoluteTimeGetCurrent();
    *(_OWORD *)&v56[20] = *(_OWORD *)(a1 + 40);
    *(_QWORD *)&v56[36] = *(_QWORD *)(a1 + 56);
    LOBYTE(v57) = *(_BYTE *)(a1 + 64);
    v12 = sub_1011B78D4();
    sub_1011B8DB0(v12, (uint64_t)v56);
    sub_1015EB864(buf);
    sub_101604C40((uint64_t)buf);
    v55 |= 1u;
    v53 = *(_QWORD *)&v56[8];
    v13 = v54;
    v14 = *(_DWORD *)(a1 + 40);
    *(_BYTE *)(v54 + 36) |= 1u;
    *(_DWORD *)(v13 + 8) = v14;
    v15 = v54;
    v16 = *(_DWORD *)(a1 + 44);
    *(_BYTE *)(v54 + 36) |= 2u;
    *(_DWORD *)(v15 + 12) = v16;
    v17 = v54;
    v18 = *(_DWORD *)(a1 + 48);
    *(_BYTE *)(v54 + 36) |= 4u;
    *(_DWORD *)(v17 + 16) = v18;
    v19 = v54;
    v20 = *(_DWORD *)(a1 + 52);
    *(_BYTE *)(v54 + 36) |= 0x10u;
    *(_DWORD *)(v19 + 24) = v20;
    v21 = v54;
    v22 = *(_DWORD *)(a1 + 56);
    *(_BYTE *)(v54 + 36) |= 0x20u;
    *(_DWORD *)(v21 + 28) = v22;
    v23 = v54;
    v24 = *(_DWORD *)(a1 + 60);
    *(_BYTE *)(v54 + 36) |= 0x40u;
    *(_DWORD *)(v23 + 32) = v24;
    v25 = v54;
    v26 = *(unsigned __int8 *)(a1 + 64);
    *(_BYTE *)(v54 + 36) |= 8u;
    *(_DWORD *)(v25 + 20) = v26;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_102184CF0);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)buf);
    sub_1015EE304((PB::Base *)buf);
  }
  if (*(_BYTE *)(v2 + 25))
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 24))(v2, a1 + 40, a1 + 52);
}

void sub_100DA4018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100DA4038(id a1)
{
  qword_10229FD28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

uint64_t sub_100DA4068(__int128 **a1, __int128 *a2)
{
  __int128 *v2;
  __int128 *v3;
  int v4;
  __int128 *v5;
  __int128 *v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v2 = *a1;
  v3 = a1[1];
  if (*a1 == v3)
  {
    LOBYTE(v4) = 0;
  }
  else
  {
    v4 = 0;
    v9 = *a2;
    v5 = *a1;
    do
    {
      v6 = v2;
      if (v2 != v5)
      {
        v12 = v9;
        v7 = *v5;
        v10 = *v2;
        v11 = v7;
        v4 += sub_100DA40FC((double *)&v12, (double *)&v11, (double *)&v10);
      }
      v2 = v6 + 1;
      v5 = v6;
    }
    while (v6 + 1 != v3);
  }
  return v4 & 1;
}

BOOL sub_100DA40FC(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;

  v3 = *a1;
  if (vabdd_f64(*a2, *a1) < 0.0000011920929)
  {
    *a2 = *a2 + 0.0000011920929;
    v3 = *a1;
  }
  v4 = *a3;
  if (vabdd_f64(*a3, v3) < 0.0000011920929)
  {
    v4 = v4 + 0.0000011920929;
    *a3 = v4;
  }
  v5 = a3[1];
  v6 = a2[1];
  if (v5 >= v6)
    v7 = a2[1];
  else
    v7 = a3[1];
  v8 = a1[1];
  if (v7 <= v8
    && (v6 >= v5 ? (v9 = a2[1]) : (v9 = a3[1]),
        v9 >= v8 && (*a2 >= v4 ? (v10 = *a2) : (v10 = v4), v10 >= *a1 && vabdd_f64(v5, v6) >= 0.0000011920929)))
  {
    return *a2 + (v8 - v6) / (v5 - v6) * (v4 - *a2) > *a1;
  }
  else
  {
    return 0;
  }
}

BOOL sub_100DA41C4(double *a1, double *a2)
{
  double v2;

  if (*a2 <= a1[2] && *a2 >= *a1 && (v2 = a2[1], v2 <= a1[3]))
    return v2 >= a1[1];
  else
    return 0;
}

double sub_100DA4208@<D0>(double **a1@<X0>, uint64_t a2@<X8>)
{
  double *v2;
  double *v3;
  double result;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;

  v2 = *a1;
  v3 = a1[1];
  if (*a1 == v3)
  {
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else
  {
    result = *v2;
    v5 = v2[1];
    v6 = *v2;
    v7 = v5;
    do
    {
      v8 = *v2;
      v9 = v2[1];
      v2 += 2;
      if (v8 < result)
        result = v8;
      if (v9 < v5)
        v5 = v9;
      if (v6 < v8)
        v6 = v8;
      if (v7 < v9)
        v7 = v9;
    }
    while (v2 != v3);
    *(double *)a2 = result;
    *(double *)(a2 + 8) = v5;
    *(double *)(a2 + 16) = v6;
    *(double *)(a2 + 24) = v7;
  }
  return result;
}

uint64_t sub_100DA4264()
{
  uint64_t result;

  if (qword_102311588)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311588 + 8))(qword_102311588);
  if (qword_102311590)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311590 + 8))(qword_102311590);
  if (qword_102311598)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311598 + 8))(qword_102311598);
  if (qword_1023115A0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023115A0 + 8))(qword_1023115A0);
  if (qword_1023115A8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023115A8 + 8))(qword_1023115A8);
  if (qword_1023115B0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023115B0 + 8))(qword_1023115B0);
  if (qword_1023115B8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023115B8 + 8))(qword_1023115B8);
  if (qword_1023115C0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023115C0 + 8))(qword_1023115C0);
  if (qword_1023115C8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023115C8 + 8))(qword_1023115C8);
  if (qword_1023115D0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023115D0 + 8))(qword_1023115D0);
  if (qword_1023115D8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023115D8 + 8))(qword_1023115D8);
  if (qword_1023115E0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023115E0 + 8))(qword_1023115E0);
  if (qword_1023115E8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023115E8 + 8))(qword_1023115E8);
  if (qword_1023115F0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023115F0 + 8))(qword_1023115F0);
  if (qword_1023115F8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023115F8 + 8))(qword_1023115F8);
  if (qword_102311600)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311600 + 8))(qword_102311600);
  if (qword_102311608)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311608 + 8))(qword_102311608);
  if (qword_102311610)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311610 + 8))(qword_102311610);
  if (qword_102311618)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311618 + 8))(qword_102311618);
  if (qword_102311620)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311620 + 8))(qword_102311620);
  if (qword_102311628)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311628 + 8))(qword_102311628);
  if (qword_102311630)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311630 + 8))(qword_102311630);
  if (qword_102311638)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311638 + 8))(qword_102311638);
  if (qword_102311640)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311640 + 8))(qword_102311640);
  if (qword_102311648)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311648 + 8))(qword_102311648);
  if (qword_102311650)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311650 + 8))(qword_102311650);
  if (qword_102311658)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311658 + 8))(qword_102311658);
  if (qword_102311660)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311660 + 8))(qword_102311660);
  if (qword_102311668)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311668 + 8))(qword_102311668);
  if (qword_102311670)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311670 + 8))(qword_102311670);
  if (qword_102311678)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311678 + 8))(qword_102311678);
  if (qword_102311680)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311680 + 8))(qword_102311680);
  if (qword_102311688)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311688 + 8))(qword_102311688);
  if (qword_102311690)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311690 + 8))(qword_102311690);
  if (qword_102311698)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311698 + 8))(qword_102311698);
  if (qword_1023116A0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023116A0 + 8))(qword_1023116A0);
  if (qword_1023116A8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023116A8 + 8))(qword_1023116A8);
  if (qword_1023116B0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023116B0 + 8))(qword_1023116B0);
  if (qword_1023116B8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023116B8 + 8))(qword_1023116B8);
  if (qword_1023116C0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023116C0 + 8))(qword_1023116C0);
  if (qword_1023116C8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023116C8 + 8))(qword_1023116C8);
  if (qword_1023116D0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023116D0 + 8))(qword_1023116D0);
  if (qword_1023116D8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023116D8 + 8))(qword_1023116D8);
  if (qword_1023116E0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023116E0 + 8))(qword_1023116E0);
  if (qword_1023116E8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023116E8 + 8))(qword_1023116E8);
  if (qword_1023116F0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023116F0 + 8))(qword_1023116F0);
  if (qword_1023116F8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1023116F8 + 8))(qword_1023116F8);
  if (qword_102311700)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311700 + 8))(qword_102311700);
  if (qword_102311708)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_102311708 + 8))(qword_102311708);
  result = qword_102311710;
  if (qword_102311710)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_102311710 + 8))(qword_102311710);
  return result;
}

void sub_100DA4728(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_102308578 & 1) == 0)
  {
    byte_102308578 = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", a4);
    operator new();
  }
}

_QWORD *sub_100DA562C(_QWORD *result)
{
  result[1] = 0;
  result[2] = 0;
  *result = off_102184D70;
  return result;
}

uint64_t sub_100DA5640(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_102184DE8;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

double sub_100DA5658(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_102184E60;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

uint64_t sub_100DA5678(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_102184ED8;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_100DA5690(uint64_t result)
{
  *(_QWORD *)result = off_102184F50;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100DA56A4(uint64_t result)
{
  *(_QWORD *)result = off_102184FC8;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 12) = 0;
  return result;
}

uint64_t sub_100DA56C0(uint64_t result)
{
  *(_QWORD *)result = off_102185040;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100DA56D4(uint64_t result)
{
  *(_QWORD *)result = off_1021850B8;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 12) = 0;
  return result;
}

uint64_t sub_100DA56F0(uint64_t result)
{
  *(_QWORD *)result = off_102185130;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100DA5704(uint64_t result)
{
  *(_QWORD *)result = off_1021851A8;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100DA5718(uint64_t result)
{
  *(_QWORD *)result = off_102185220;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100DA572C(uint64_t result)
{
  *(_DWORD *)(result + 20) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)result = off_102185298;
  *(_QWORD *)(result + 8) = 0;
  *(_WORD *)(result + 16) = 0;
  return result;
}

double sub_100DA5744(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102185388;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  return result;
}

uint64_t sub_100DA5770(uint64_t result)
{
  *(_DWORD *)(result + 28) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_102185400;
  *(_BYTE *)(result + 24) = 0;
  return result;
}

uint64_t sub_100DA578C(uint64_t result)
{
  *(_DWORD *)(result + 28) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_102185478;
  *(_BYTE *)(result + 24) = 0;
  return result;
}

uint64_t sub_100DA57A8(uint64_t result)
{
  *(_DWORD *)(result + 28) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_1021854F0;
  *(_WORD *)(result + 24) = 0;
  return result;
}

double sub_100DA57C4(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102185568;
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_BYTE *)(a1 + 40) = 0;
  return result;
}

uint64_t sub_100DA57E8(uint64_t result)
{
  *(_QWORD *)result = off_1021855E0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_100DA5800(uint64_t result)
{
  *(_QWORD *)result = off_102185658;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_100DA5818(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_1021856D0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

double sub_100DA5830(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102185748;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 112) = 0;
  return result;
}

double sub_100DA586C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_1021857C0;
  *(_DWORD *)(a1 + 108) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_BYTE *)(a1 + 104) = 0;
  return result;
}

uint64_t sub_100DA58A0(uint64_t result)
{
  *(_DWORD *)(result + 28) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_102185838;
  *(_BYTE *)(result + 24) = 0;
  return result;
}

double sub_100DA58BC(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_1021858B0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

double sub_100DA58DC(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102185928;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

double sub_100DA58FC(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_1021859A0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

uint64_t sub_100DA591C(uint64_t result)
{
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)result = off_102185A18;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

double sub_100DA5938(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102185A90;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

double sub_100DA5954(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_102185BF8;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  return result;
}

uint64_t sub_100DA597C(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_102185D60;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

_QWORD *sub_100DA5994(_QWORD *result)
{
  *result = &off_102185DD8;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

double sub_100DA59A8(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102185E50;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

uint64_t sub_100DA59C8(uint64_t result)
{
  *(_QWORD *)result = off_102185EC8;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

_QWORD *sub_100DA59E0(_QWORD *result)
{
  *result = off_102185F40;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

double sub_100DA59F4(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102185FB8;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

double sub_100DA5A14(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102186030;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

double sub_100DA5A30(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_1021860A8;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  return result;
}

double sub_100DA5A54(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102186120;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

uint64_t sub_100DA5A74(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_102186198;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

double sub_100DA5A8C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102186210;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

double sub_100DA5AAC(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102186288;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

double sub_100DA5ACC(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102186300;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

double sub_100DA5AE8(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102186378;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

double sub_100DA5B04(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_1021863F0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

uint64_t sub_100DA5B20(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = (_QWORD *)result;
  v2 = qword_1023115A8;
  if (!qword_1023115A8)
  {
    result = sub_100DA4728();
    v2 = qword_1023115A8;
  }
  v1[1] = v2;
  v3 = qword_1023115B0;
  if (!qword_1023115B0)
  {
    result = sub_100DA4728();
    v3 = qword_1023115B0;
  }
  v1[2] = v3;
  v4 = qword_1023115B8;
  if (!qword_1023115B8)
  {
    result = sub_100DA4728();
    v4 = qword_1023115B8;
  }
  v1[3] = v4;
  v5 = qword_1023115C0;
  if (!qword_1023115C0)
  {
    result = sub_100DA4728();
    v5 = qword_1023115C0;
  }
  v1[4] = v5;
  v6 = qword_1023115C8;
  if (!qword_1023115C8)
  {
    result = sub_100DA4728();
    v6 = qword_1023115C8;
  }
  v1[5] = v6;
  v7 = qword_1023115D0;
  if (!qword_1023115D0)
  {
    result = sub_100DA4728();
    v7 = qword_1023115D0;
  }
  v1[6] = v7;
  v8 = qword_1023115D8;
  if (!qword_1023115D8)
  {
    result = sub_100DA4728();
    v8 = qword_1023115D8;
  }
  v1[7] = v8;
  v9 = qword_1023115E0;
  if (!qword_1023115E0)
  {
    result = sub_100DA4728();
    v9 = qword_1023115E0;
  }
  v1[8] = v9;
  v10 = qword_1023115E8;
  if (!qword_1023115E8)
  {
    result = sub_100DA4728();
    v10 = qword_1023115E8;
  }
  v1[9] = v10;
  v11 = qword_1023115A8;
  if (!qword_1023115A8)
  {
    result = sub_100DA4728();
    v11 = qword_1023115A8;
  }
  v1[10] = v11;
  return result;
}

uint64_t sub_100DA5C30(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)result;
  v2 = qword_102311620;
  if (!qword_102311620)
  {
    result = ((uint64_t (*)(void))sub_100DA4728)();
    v2 = qword_102311620;
  }
  v1[2] = v2;
  v3 = qword_102311628;
  if (qword_102311628)
  {
    v1[3] = qword_102311628;
LABEL_6:
    v1[4] = v3;
    goto LABEL_7;
  }
  result = ((uint64_t (*)(void))sub_100DA4728)();
  v3 = qword_102311628;
  v1[3] = qword_102311628;
  if (v3)
    goto LABEL_6;
  result = sub_100DA4728(result);
  v3 = qword_102311628;
  v1[4] = qword_102311628;
  if (!v3)
  {
    result = sub_100DA4728(result);
    v3 = qword_102311628;
  }
LABEL_7:
  v1[5] = v3;
  return result;
}

uint64_t sub_100DA5CAC(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = (_QWORD *)result;
  v2 = qword_1023115A0;
  if (!qword_1023115A0)
  {
    result = sub_100DA4728(result);
    v2 = qword_1023115A0;
  }
  v1[1] = v2;
  v3 = qword_1023115F0;
  if (!qword_1023115F0)
  {
    result = sub_100DA4728(result);
    v3 = qword_1023115F0;
  }
  v1[2] = v3;
  v4 = qword_1023115F8;
  if (!qword_1023115F8)
  {
    result = sub_100DA4728(result);
    v4 = qword_1023115F8;
  }
  v1[6] = v4;
  v5 = qword_102311600;
  if (!qword_102311600)
  {
    result = sub_100DA4728(result);
    v5 = qword_102311600;
  }
  v1[7] = v5;
  v6 = qword_102311610;
  if (!qword_102311610)
  {
    result = sub_100DA4728(result);
    v6 = qword_102311610;
  }
  v1[8] = v6;
  v7 = qword_102311630;
  if (!qword_102311630)
  {
    result = sub_100DA4728(result);
    v7 = qword_102311630;
  }
  v1[9] = v7;
  v8 = qword_102311600;
  if (!qword_102311600)
  {
    result = sub_100DA4728(result);
    v8 = qword_102311600;
  }
  v1[11] = v8;
  v9 = qword_102311608;
  if (!qword_102311608)
  {
    result = sub_100DA4728(result);
    v9 = qword_102311608;
  }
  v1[12] = v9;
  return result;
}

uint64_t sub_100DA5D8C(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)result;
  v2 = qword_1023116A0;
  if (!qword_1023116A0)
  {
    result = sub_100DA4728(result);
    v2 = qword_1023116A0;
  }
  v1[1] = v2;
  v3 = qword_1023116C8;
  if (qword_1023116C8)
  {
    v1[2] = qword_1023116C8;
LABEL_6:
    v1[3] = v3;
LABEL_7:
    v1[4] = v3;
    goto LABEL_8;
  }
  result = sub_100DA4728(result);
  v3 = qword_1023116C8;
  v1[2] = qword_1023116C8;
  if (v3)
    goto LABEL_6;
  result = sub_100DA4728(result);
  v3 = qword_1023116C8;
  v1[3] = qword_1023116C8;
  if (v3)
    goto LABEL_7;
  result = sub_100DA4728(result);
  v3 = qword_1023116C8;
  v1[4] = qword_1023116C8;
  if (!v3)
  {
    result = sub_100DA4728(result);
    v3 = qword_1023116C8;
  }
LABEL_8:
  v1[5] = v3;
  return result;
}

uint64_t sub_100DA5E1C(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (_QWORD *)result;
  v2 = qword_1023116B0;
  if (!qword_1023116B0)
  {
    result = sub_100DA4728(result);
    v2 = qword_1023116B0;
  }
  v1[1] = v2;
  v3 = qword_1023116C0;
  if (!qword_1023116C0)
  {
    result = sub_100DA4728(result);
    v3 = qword_1023116C0;
  }
  v1[2] = v3;
  v4 = qword_1023116D0;
  if (!qword_1023116D0)
  {
    result = sub_100DA4728(result);
    v4 = qword_1023116D0;
  }
  v1[3] = v4;
  v5 = qword_1023116D8;
  if (!qword_1023116D8)
  {
    result = sub_100DA4728(result);
    v5 = qword_1023116D8;
  }
  v1[4] = v5;
  v6 = qword_1023116E0;
  if (!qword_1023116E0)
  {
    result = sub_100DA4728(result);
    v6 = qword_1023116E0;
  }
  v1[5] = v6;
  return result;
}

uint64_t sub_100DA5EB0(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (_QWORD *)result;
  v2 = qword_102311708;
  if (!qword_102311708)
  {
    result = sub_100DA4728(result);
    v2 = qword_102311708;
  }
  v1[1] = v2;
  v3 = qword_102311660;
  if (!qword_102311660)
  {
    result = sub_100DA4728(result);
    v3 = qword_102311660;
  }
  v1[2] = v3;
  v4 = qword_1023116E8;
  if (!qword_1023116E8)
  {
    result = sub_100DA4728(result);
    v4 = qword_1023116E8;
  }
  v1[9] = v4;
  v5 = qword_1023116F0;
  if (!qword_1023116F0)
  {
    result = sub_100DA4728(result);
    v5 = qword_1023116F0;
  }
  v1[12] = v5;
  return result;
}

BOOL sub_100DA5F2C(unsigned int a1)
{
  return a1 < 0xD;
}

void sub_100DA5F38(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  char v8;
  _BYTE v9[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 541);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 20);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      a1[5] |= 1u;
      a1[2] = v6;
      v5 = *(_DWORD *)(a2 + 20);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 5)
        sub_10192A498();
      a1[5] |= 2u;
      a1[3] = v7;
    }
  }
}

void sub_100DA5FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DA6004(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102184D70;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DA6014(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102184D70;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100DA6044()
{
  operator new();
}

uint64_t sub_100DA607C(uint64_t result)
{
  if (*(_BYTE *)(result + 20))
    *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_100DA6090(unsigned int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  unsigned int v13;
  uint64_t result;
  unsigned int v15;

  v5 = a1 + 2;
  while (1)
  {
    while (1)
    {
      v6 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v6 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v8 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_16;
      v11 = (char *)*((_QWORD *)this + 1);
      v9 = *((_QWORD *)this + 2);
      if ((unint64_t)v11 >= v9 || *v11 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
        if (!(_DWORD)result)
          return result;
        v12 = (_BYTE *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
      }
      else
      {
        *v5 = *v11;
        v12 = v11 + 1;
        *((_QWORD *)this + 1) = v12;
      }
      a1[5] |= 1u;
      if ((unint64_t)v12 < v9 && *v12 == 16)
      {
        v10 = v12 + 1;
        *((_QWORD *)this + 1) = v10;
LABEL_24:
        v15 = 0;
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v15);
          if (!(_DWORD)result)
            return result;
          v13 = v15;
        }
        else
        {
          v13 = *v10;
          *((_QWORD *)this + 1) = v10 + 1;
        }
        if (v13 <= 4)
        {
          a1[5] |= 2u;
          a1[3] = v13;
        }
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v8 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v10 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        goto LABEL_24;
      }
    }
    else
    {
      v8 = TagFallback & 7;
    }
LABEL_16:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_100DA6240(uint64_t result, unsigned int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 20);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), a2, a4);
  return result;
}

uint64_t sub_100DA6298(uint64_t a1, unsigned int a2)
{
  char v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;

  v3 = *(_BYTE *)(a1 + 20);
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
      if (v5 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*(_DWORD *)(a1 + 20) & 2) == 0)
          goto LABEL_16;
      }
      else
      {
        v4 = 2;
        if ((v3 & 2) == 0)
          goto LABEL_16;
      }
    }
    else
    {
      v4 = 0;
      if ((*(_BYTE *)(a1 + 20) & 2) == 0)
        goto LABEL_16;
    }
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
    if ((v6 & 0x80000000) != 0)
    {
      v7 = 11;
    }
    else if (v6 >= 0x80)
    {
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    }
    else
    {
      v7 = 2;
    }
    v4 = (v7 + v4);
  }
  else
  {
    v4 = 0;
  }
LABEL_16:
  *(_DWORD *)(a1 + 16) = v4;
  return v4;
}

void sub_100DA6330(_DWORD *a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100DA5F38(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DA637C()
{
  return 1;
}

_QWORD *sub_100DA6384@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.GlonassSlotInfo");
}

void sub_100DA6394(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 751);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_DWORD *)(a1 + 16) = v6;
      v5 = *(_DWORD *)(a2 + 24);
    }
    if ((v5 & 2) != 0)
    {
      *(_DWORD *)(a1 + 24) |= 2u;
      v7 = *(_DWORD **)(a1 + 8);
      if (!v7)
        operator new();
      v8 = *(_QWORD *)(a2 + 8);
      if (!v8)
        v8 = *(_QWORD *)(qword_102311590 + 8);
      sub_100DA5F38(v7, v8);
    }
  }
}

void sub_100DA6480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DA6498(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_102184DE8;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311590 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100DA64EC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100DA6498(a1);
  operator delete();
}

void sub_100DA6510()
{
  operator new();
}

uint64_t sub_100DA654C(uint64_t result)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(result + 24);
  if (v1)
  {
    *(_DWORD *)(result + 16) = 0;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(result + 8);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 20))
          *(_QWORD *)(v2 + 8) = 0;
        *(_DWORD *)(v2 + 20) = 0;
      }
    }
  }
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_100DA657C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  int v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  uint64_t result;
  unsigned int *v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  int v22;
  unsigned int v23;
  unsigned int v24;

  while (1)
  {
    do
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 == 1)
          break;
        if (TagFallback >> 3 == 2)
        {
          v7 = TagFallback & 7;
          if (v7 == 2)
          {
            v8 = *(_DWORD *)(a1 + 24);
            goto LABEL_23;
          }
        }
        else
        {
          v7 = TagFallback & 7;
        }
LABEL_15:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
      }
      v7 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_15;
      v23 = 0;
      v10 = (char *)*((_QWORD *)this + 1);
      v9 = *((_QWORD *)this + 2);
      if ((unint64_t)v10 >= v9 || *v10 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23);
        if (!(_DWORD)result)
          return result;
        v11 = v23;
        v12 = (_BYTE *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
      }
      else
      {
        v11 = *v10;
        v12 = v10 + 1;
        *((_QWORD *)this + 1) = v12;
      }
      *(_DWORD *)(a1 + 16) = v11;
      v8 = *(_DWORD *)(a1 + 24) | 1;
      *(_DWORD *)(a1 + 24) = v8;
    }
    while ((unint64_t)v12 >= v9 || *v12 != 18);
    *((_QWORD *)this + 1) = v12 + 1;
LABEL_23:
    *(_DWORD *)(a1 + 24) = v8 | 2;
    v14 = *(unsigned int **)(a1 + 8);
    if (!v14)
      operator new();
    v24 = 0;
    v15 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v15 >= *((_QWORD *)this + 2) || *v15 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v24))
        return 0;
    }
    else
    {
      v24 = *v15;
      *((_QWORD *)this + 1) = v15 + 1;
    }
    v16 = *((_DWORD *)this + 14);
    v17 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v16 + 1;
    if (v16 >= v17)
      return 0;
    v18 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v24);
    if (!sub_100DA6090(v14, this, v19) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v18);
    v20 = *((_DWORD *)this + 14);
    v21 = __OFSUB__(v20, 1);
    v22 = v20 - 1;
    if (v22 < 0 == v21)
      *((_DWORD *)this + 14) = v22;
    if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      result = 1;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_100DA67C0(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 24) & 2) == 0)
      return result;
  }
  else if ((v6 & 2) == 0)
  {
    return result;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311590 + 8);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
}

uint64_t sub_100DA682C(uint64_t a1, unsigned int a2)
{
  char v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  uint64_t v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  unsigned int v8;
  int v9;
  int v10;

  v3 = *(_BYTE *)(a1 + 24);
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
      if ((v5 & 0x80000000) != 0)
      {
        v4 = 11;
        if ((v3 & 2) == 0)
          goto LABEL_19;
      }
      else if (v5 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*(_DWORD *)(a1 + 24) & 2) == 0)
          goto LABEL_19;
      }
      else
      {
        v4 = 2;
        if ((v3 & 2) == 0)
          goto LABEL_19;
      }
    }
    else
    {
      v4 = 0;
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
        goto LABEL_19;
    }
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6)
      v6 = *(_QWORD *)(qword_102311590 + 8);
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DA6298(v6, a2);
    v9 = (int)v7;
    if (v7 >= 0x80)
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, v8);
    else
      v10 = 1;
    v4 = (v4 + v9 + v10 + 1);
  }
  else
  {
    v4 = 0;
  }
LABEL_19:
  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

void sub_100DA68F0(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100DA6394(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DA693C()
{
  return 1;
}

_QWORD *sub_100DA6944@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.GlonassId");
}

void sub_100DA6954(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char v14;
  _BYTE v15[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v15, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 1116);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v14, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 44);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) != 0)
    {
      v7 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 44) |= 1u;
      *(_DWORD *)(a1 + 16) = v7;
      v5 = *(_DWORD *)(a2 + 44);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_19;
      }
    }
    else if ((*(_BYTE *)(a2 + 44) & 2) == 0)
    {
      goto LABEL_6;
    }
    *(_DWORD *)(a1 + 44) |= 2u;
    v8 = *(_QWORD *)(a1 + 8);
    if (!v8)
      operator new();
    v9 = *(_QWORD *)(a2 + 8);
    if (!v9)
      v9 = *(_QWORD *)(qword_102311598 + 8);
    sub_100DA6394(v8, v9);
    v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        goto LABEL_8;
      goto LABEL_20;
    }
LABEL_19:
    v10 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 44) |= 4u;
    *(_DWORD *)(a1 + 20) = v10;
    v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_21;
    }
LABEL_20:
    v11 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 8u;
    *(_DWORD *)(a1 + 24) = v11;
    v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0)
        goto LABEL_10;
      goto LABEL_22;
    }
LABEL_21:
    v12 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a1 + 44) |= 0x10u;
    *(_DWORD *)(a1 + 28) = v12;
    v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 0x20) == 0)
    {
LABEL_10:
      if ((v5 & 0x40) == 0)
        return;
      goto LABEL_11;
    }
LABEL_22:
    v13 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 0x20u;
    *(_DWORD *)(a1 + 32) = v13;
    if ((*(_DWORD *)(a2 + 44) & 0x40) == 0)
      return;
LABEL_11:
    v6 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 44) |= 0x40u;
    *(_DWORD *)(a1 + 36) = v6;
  }
}

void sub_100DA6AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DA6B08()
{
  operator new();
}

uint64_t sub_100DA6B4C(uint64_t result)
{
  uint64_t v1;
  char v2;

  v1 = result;
  v2 = *(_BYTE *)(result + 44);
  if (v2)
  {
    *(_DWORD *)(result + 16) = 0;
    if ((v2 & 2) != 0)
    {
      result = *(_QWORD *)(result + 8);
      if (result)
        result = sub_100DA654C(result);
    }
    *(_QWORD *)(v1 + 28) = 0;
    *(_QWORD *)(v1 + 20) = 0;
    *(_DWORD *)(v1 + 36) = 0;
  }
  *(_DWORD *)(v1 + 44) = 0;
  return result;
}

uint64_t sub_100DA6B94(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 44);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311598 + 8);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 20), a2, a4);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(v5 + 24), a2, a4);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_DWORD *)(v5 + 28), a2, a4);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(_DWORD *)(v5 + 36), a2, a4);
  }
LABEL_16:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_DWORD *)(v5 + 32), a2, a4);
  if ((*(_DWORD *)(v5 + 44) & 0x40) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(_DWORD *)(v5 + 36), a2, a4);
  return result;
}

uint64_t sub_100DA6C8C(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  uint64_t v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  int v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  int v19;

  LOBYTE(v3) = *(_BYTE *)(a1 + 44);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_42;
  }
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 44);
      if ((v3 & 2) == 0)
        goto LABEL_16;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_16;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 44) & 2) == 0)
      goto LABEL_16;
  }
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
    v6 = *(_QWORD *)(qword_102311598 + 8);
  v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DA682C(v6, a2);
  v8 = (int)v7;
  if (v7 >= 0x80)
    v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
  else
    v9 = 1;
  v4 = (v4 + v8 + v9 + 1);
  v3 = *(_DWORD *)(a1 + 44);
LABEL_16:
  if ((v3 & 4) != 0)
  {
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if (v10 >= 0x80)
    {
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
      v3 = *(_DWORD *)(a1 + 44);
    }
    else
    {
      v11 = 2;
    }
    v4 = (v11 + v4);
    if ((v3 & 8) == 0)
    {
LABEL_18:
      if ((v3 & 0x10) == 0)
        goto LABEL_19;
      goto LABEL_30;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_18;
  }
  v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if (v12 >= 0x80)
  {
    v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
    v3 = *(_DWORD *)(a1 + 44);
  }
  else
  {
    v13 = 2;
  }
  v4 = (v13 + v4);
  if ((v3 & 0x10) == 0)
  {
LABEL_19:
    if ((v3 & 0x20) == 0)
      goto LABEL_20;
    goto LABEL_34;
  }
LABEL_30:
  v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
  if (v14 >= 0x80)
  {
    v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2) + 1;
    v3 = *(_DWORD *)(a1 + 44);
  }
  else
  {
    v15 = 2;
  }
  v4 = (v15 + v4);
  if ((v3 & 0x20) == 0)
  {
LABEL_20:
    if ((v3 & 0x40) == 0)
      goto LABEL_42;
    goto LABEL_38;
  }
LABEL_34:
  v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
  if (v16 >= 0x80)
  {
    v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16, a2) + 1;
    v3 = *(_DWORD *)(a1 + 44);
  }
  else
  {
    v17 = 2;
  }
  v4 = (v17 + v4);
  if ((v3 & 0x40) != 0)
  {
LABEL_38:
    v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
    if (v18 >= 0x80)
      v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2) + 1;
    else
      v19 = 2;
    v4 = (v19 + v4);
  }
LABEL_42:
  *(_DWORD *)(a1 + 40) = v4;
  return v4;
}

void sub_100DA6E1C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100DA6954(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DA6E68()
{
  return 1;
}

_QWORD *sub_100DA6E70@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.ConstellationId");
}

void sub_100DA6E80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 1346);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_DWORD *)(a1 + 16) = v6;
      v5 = *(_DWORD *)(a2 + 24);
    }
    if ((v5 & 2) != 0)
    {
      *(_DWORD *)(a1 + 24) |= 2u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v8 = *(_QWORD *)(a2 + 8);
      if (!v8)
        v8 = *(_QWORD *)(qword_1023115A0 + 8);
      sub_100DA6954(v7, v8);
    }
  }
}

void sub_100DA6F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DA6F94()
{
  operator new();
}

uint64_t sub_100DA6FD0(uint64_t result)
{
  uint64_t v1;
  char v2;

  v1 = result;
  v2 = *(_BYTE *)(result + 24);
  if (v2)
  {
    *(_DWORD *)(result + 16) = 0;
    if ((v2 & 2) != 0)
    {
      result = *(_QWORD *)(result + 8);
      if (result)
        result = sub_100DA6B4C(result);
    }
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t sub_100DA700C(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), a2, a4);
    if ((*(_DWORD *)(v5 + 24) & 2) == 0)
      return result;
  }
  else if ((v6 & 2) == 0)
  {
    return result;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7)
    v7 = *(_QWORD *)(qword_1023115A0 + 8);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
}

uint64_t sub_100DA7078(uint64_t a1, unsigned int a2)
{
  char v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  uint64_t v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  unsigned int v8;
  int v9;
  int v10;

  v3 = *(_BYTE *)(a1 + 24);
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
      if (v5 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*(_DWORD *)(a1 + 24) & 2) == 0)
          goto LABEL_16;
      }
      else
      {
        v4 = 2;
        if ((v3 & 2) == 0)
          goto LABEL_16;
      }
    }
    else
    {
      v4 = 0;
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
        goto LABEL_16;
    }
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6)
      v6 = *(_QWORD *)(qword_1023115A0 + 8);
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DA6C8C(v6, a2);
    v9 = (int)v7;
    if (v7 >= 0x80)
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, v8);
    else
      v10 = 1;
    v4 = (v4 + v9 + v10 + 1);
  }
  else
  {
    v4 = 0;
  }
LABEL_16:
  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

void sub_100DA712C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100DA6E80(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DA7178()
{
  return 1;
}

_QWORD *sub_100DA7180@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.SvId");
}

void sub_100DA7190(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  int v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  _BYTE v11[48];

  if (a2 == (_BYTE *)a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 1602);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = a2[16];
  if ((_BYTE)v5)
  {
    if ((a2[16] & 1) != 0)
    {
      v7 = a2[8];
      *(_DWORD *)(a1 + 16) |= 1u;
      *(_BYTE *)(a1 + 8) = v7;
      v5 = *((_DWORD *)a2 + 4);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_12;
      }
    }
    else if ((a2[16] & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = a2[9];
    *(_DWORD *)(a1 + 16) |= 2u;
    *(_BYTE *)(a1 + 9) = v8;
    v5 = *((_DWORD *)a2 + 4);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        return;
      goto LABEL_8;
    }
LABEL_12:
    v9 = a2[10];
    *(_DWORD *)(a1 + 16) |= 4u;
    *(_BYTE *)(a1 + 10) = v9;
    if ((*((_DWORD *)a2 + 4) & 8) == 0)
      return;
LABEL_8:
    v6 = a2[11];
    *(_DWORD *)(a1 + 16) |= 8u;
    *(_BYTE *)(a1 + 11) = v6;
  }
}

void sub_100DA7280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DA7298(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102184F50;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DA72A8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102184F50;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100DA72D8()
{
  operator new();
}

uint64_t sub_100DA7310(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100DA7324(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  unsigned int v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  char *v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned int v19;
  unsigned __int8 *v20;
  uint64_t result;
  unsigned int v22;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v22 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        if ((unint64_t)v9 < v8 && (*v9 & 0x80000000) == 0)
        {
          v10 = *v9;
          v11 = v9 + 1;
          *((_QWORD *)this + 1) = v11;
LABEL_23:
          *(_BYTE *)(a1 + 8) = v10 != 0;
          *(_DWORD *)(a1 + 16) |= 1u;
          if ((unint64_t)v11 < v8 && *v11 == 16)
          {
            v12 = v11 + 1;
            *((_QWORD *)this + 1) = v12;
            goto LABEL_26;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
        if ((_DWORD)result)
        {
          v10 = v22;
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
          goto LABEL_23;
        }
        break;
      case 2u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v12 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
LABEL_26:
        v22 = 0;
        if ((unint64_t)v12 >= v8 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
          if (!(_DWORD)result)
            return result;
          v15 = v22;
          v16 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v15 = *v12;
          v16 = v12 + 1;
          *((_QWORD *)this + 1) = v16;
        }
        *(_BYTE *)(a1 + 9) = v15 != 0;
        *(_DWORD *)(a1 + 16) |= 2u;
        if ((unint64_t)v16 >= v8 || *v16 != 24)
          continue;
        v13 = v16 + 1;
        *((_QWORD *)this + 1) = v13;
LABEL_34:
        v22 = 0;
        if ((unint64_t)v13 >= v8 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
          if (!(_DWORD)result)
            return result;
          v17 = v22;
          v18 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v17 = *v13;
          v18 = v13 + 1;
          *((_QWORD *)this + 1) = v18;
        }
        *(_BYTE *)(a1 + 10) = v17 != 0;
        *(_DWORD *)(a1 + 16) |= 4u;
        if ((unint64_t)v18 >= v8 || *v18 != 32)
          continue;
        v14 = v18 + 1;
        *((_QWORD *)this + 1) = v14;
LABEL_42:
        v22 = 0;
        if ((unint64_t)v14 >= v8 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
          if (!(_DWORD)result)
            return result;
          v19 = v22;
          v20 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v19 = *v14;
          v20 = (unsigned __int8 *)(v14 + 1);
          *((_QWORD *)this + 1) = v20;
        }
        *(_BYTE *)(a1 + 11) = v19 != 0;
        *(_DWORD *)(a1 + 16) |= 8u;
        if (v20 != (unsigned __int8 *)v8 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v13 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_34;
      case 4u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v14 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_42;
      default:
        v7 = TagFallback & 7;
LABEL_17:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_100DA75F8(uint64_t result, BOOL a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 16);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 16);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 9), a2, a4);
  v6 = *(_DWORD *)(v5 + 16);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 11), a2, a4);
  }
LABEL_8:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 10), a2, a4);
  if ((*(_DWORD *)(v5 + 16) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 11), a2, a4);
  return result;
}

uint64_t sub_100DA768C(uint64_t a1)
{
  int v1;
  unsigned int v2;
  uint64_t v3;

  v1 = *(_DWORD *)(a1 + 16);
  v2 = 2 * (v1 & 1);
  if ((v1 & 2) != 0)
    v2 += 2;
  if ((v1 & 4) != 0)
    v2 += 2;
  if ((v1 & 8) != 0)
    v2 += 2;
  if (*(_DWORD *)(a1 + 16))
    v3 = v2;
  else
    v3 = 0;
  *(_DWORD *)(a1 + 12) = v3;
  return v3;
}

void sub_100DA76CC(uint64_t a1, _BYTE *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100DA7190(a1, lpsrc);
}

uint64_t sub_100DA7718()
{
  return 1;
}

_QWORD *sub_100DA7720@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.GpsL1SyncState");
}

void sub_100DA7730(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  int v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  _BYTE v12[48];

  if (a2 == (_BYTE *)a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 1895);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = a2[20];
  if ((_BYTE)v5)
  {
    if ((a2[20] & 1) != 0)
    {
      v7 = a2[8];
      *(_DWORD *)(a1 + 20) |= 1u;
      *(_BYTE *)(a1 + 8) = v7;
      v5 = *((_DWORD *)a2 + 5);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_13;
      }
    }
    else if ((a2[20] & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = a2[9];
    *(_DWORD *)(a1 + 20) |= 2u;
    *(_BYTE *)(a1 + 9) = v8;
    v5 = *((_DWORD *)a2 + 5);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        goto LABEL_8;
      goto LABEL_14;
    }
LABEL_13:
    v9 = a2[10];
    *(_DWORD *)(a1 + 20) |= 4u;
    *(_BYTE *)(a1 + 10) = v9;
    v5 = *((_DWORD *)a2 + 5);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0)
        return;
      goto LABEL_9;
    }
LABEL_14:
    v10 = a2[11];
    *(_DWORD *)(a1 + 20) |= 8u;
    *(_BYTE *)(a1 + 11) = v10;
    if ((*((_DWORD *)a2 + 5) & 0x10) == 0)
      return;
LABEL_9:
    v6 = a2[12];
    *(_DWORD *)(a1 + 20) |= 0x10u;
    *(_BYTE *)(a1 + 12) = v6;
  }
}

void sub_100DA7840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DA7858(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102184FC8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DA7868(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102184FC8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100DA7898()
{
  operator new();
}

uint64_t sub_100DA78D8(uint64_t result)
{
  if (*(_BYTE *)(result + 20))
  {
    *(_BYTE *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
  }
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_100DA78F0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  unsigned int v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  unsigned int v16;
  _BYTE *v17;
  unsigned int v18;
  _BYTE *v19;
  unsigned int v20;
  _BYTE *v21;
  unsigned int v22;
  unsigned __int8 *v23;
  uint64_t result;
  unsigned int v25;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v25 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        if ((unint64_t)v9 < v8 && (*v9 & 0x80000000) == 0)
        {
          v10 = *v9;
          v11 = v9 + 1;
          *((_QWORD *)this + 1) = v11;
LABEL_25:
          *(_BYTE *)(a1 + 8) = v10 != 0;
          *(_DWORD *)(a1 + 20) |= 1u;
          if ((unint64_t)v11 < v8 && *v11 == 16)
          {
            v12 = v11 + 1;
            *((_QWORD *)this + 1) = v12;
            goto LABEL_28;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v25);
        if ((_DWORD)result)
        {
          v10 = v25;
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
          goto LABEL_25;
        }
        break;
      case 2u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v12 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
LABEL_28:
        v25 = 0;
        if ((unint64_t)v12 >= v8 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v25);
          if (!(_DWORD)result)
            return result;
          v16 = v25;
          v17 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v16 = *v12;
          v17 = v12 + 1;
          *((_QWORD *)this + 1) = v17;
        }
        *(_BYTE *)(a1 + 9) = v16 != 0;
        *(_DWORD *)(a1 + 20) |= 2u;
        if ((unint64_t)v17 >= v8 || *v17 != 24)
          continue;
        v13 = v17 + 1;
        *((_QWORD *)this + 1) = v13;
LABEL_36:
        v25 = 0;
        if ((unint64_t)v13 >= v8 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v25);
          if (!(_DWORD)result)
            return result;
          v18 = v25;
          v19 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v18 = *v13;
          v19 = v13 + 1;
          *((_QWORD *)this + 1) = v19;
        }
        *(_BYTE *)(a1 + 10) = v18 != 0;
        *(_DWORD *)(a1 + 20) |= 4u;
        if ((unint64_t)v19 >= v8 || *v19 != 32)
          continue;
        v14 = v19 + 1;
        *((_QWORD *)this + 1) = v14;
LABEL_44:
        v25 = 0;
        if ((unint64_t)v14 >= v8 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v25);
          if (!(_DWORD)result)
            return result;
          v20 = v25;
          v21 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v20 = *v14;
          v21 = v14 + 1;
          *((_QWORD *)this + 1) = v21;
        }
        *(_BYTE *)(a1 + 11) = v20 != 0;
        *(_DWORD *)(a1 + 20) |= 8u;
        if ((unint64_t)v21 >= v8 || *v21 != 40)
          continue;
        v15 = v21 + 1;
        *((_QWORD *)this + 1) = v15;
LABEL_52:
        v25 = 0;
        if ((unint64_t)v15 >= v8 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v25);
          if (!(_DWORD)result)
            return result;
          v22 = v25;
          v23 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v22 = *v15;
          v23 = (unsigned __int8 *)(v15 + 1);
          *((_QWORD *)this + 1) = v23;
        }
        *(_BYTE *)(a1 + 12) = v22 != 0;
        *(_DWORD *)(a1 + 20) |= 0x10u;
        if (v23 != (unsigned __int8 *)v8 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v13 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_36;
      case 4u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v14 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_44;
      case 5u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v15 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_52;
      default:
        v7 = TagFallback & 7;
LABEL_19:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_100DA7C44(uint64_t result, BOOL a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 20);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 20);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 9), a2, a4);
  v6 = *(_DWORD *)(v5 + 20);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 10), a2, a4);
  v6 = *(_DWORD *)(v5 + 20);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 12), a2, a4);
  }
LABEL_10:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 11), a2, a4);
  if ((*(_DWORD *)(v5 + 20) & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 12), a2, a4);
  return result;
}

uint64_t sub_100DA7CF4(uint64_t a1)
{
  int v1;
  unsigned int v2;
  uint64_t v3;

  v1 = *(_DWORD *)(a1 + 20);
  if ((_BYTE)v1)
  {
    v2 = 2 * (v1 & 1);
    if ((v1 & 2) != 0)
      v2 += 2;
    if ((v1 & 4) != 0)
      v2 += 2;
    if ((v1 & 8) != 0)
      v2 += 2;
    if ((v1 & 0x10) != 0)
      v3 = v2 + 2;
    else
      v3 = v2;
  }
  else
  {
    v3 = 0;
  }
  *(_DWORD *)(a1 + 16) = v3;
  return v3;
}

void sub_100DA7D48(uint64_t a1, _BYTE *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100DA7730(a1, lpsrc);
}

uint64_t sub_100DA7D94()
{
  return 1;
}

_QWORD *sub_100DA7D9C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.GpsL2CSyncState");
}

void sub_100DA7DAC(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  int v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  _BYTE v11[48];

  if (a2 == (_BYTE *)a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 2163);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = a2[16];
  if ((_BYTE)v5)
  {
    if ((a2[16] & 1) != 0)
    {
      v7 = a2[8];
      *(_DWORD *)(a1 + 16) |= 1u;
      *(_BYTE *)(a1 + 8) = v7;
      v5 = *((_DWORD *)a2 + 4);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_12;
      }
    }
    else if ((a2[16] & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = a2[9];
    *(_DWORD *)(a1 + 16) |= 2u;
    *(_BYTE *)(a1 + 9) = v8;
    v5 = *((_DWORD *)a2 + 4);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        return;
      goto LABEL_8;
    }
LABEL_12:
    v9 = a2[10];
    *(_DWORD *)(a1 + 16) |= 4u;
    *(_BYTE *)(a1 + 10) = v9;
    if ((*((_DWORD *)a2 + 4) & 8) == 0)
      return;
LABEL_8:
    v6 = a2[11];
    *(_DWORD *)(a1 + 16) |= 8u;
    *(_BYTE *)(a1 + 11) = v6;
  }
}

void sub_100DA7E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DA7EB4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185040;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DA7EC4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185040;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100DA7EF4()
{
  operator new();
}

uint64_t sub_100DA7F2C(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100DA7F40(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  unsigned int v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  char *v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned int v19;
  unsigned __int8 *v20;
  uint64_t result;
  unsigned int v22;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v22 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        if ((unint64_t)v9 < v8 && (*v9 & 0x80000000) == 0)
        {
          v10 = *v9;
          v11 = v9 + 1;
          *((_QWORD *)this + 1) = v11;
LABEL_23:
          *(_BYTE *)(a1 + 8) = v10 != 0;
          *(_DWORD *)(a1 + 16) |= 1u;
          if ((unint64_t)v11 < v8 && *v11 == 16)
          {
            v12 = v11 + 1;
            *((_QWORD *)this + 1) = v12;
            goto LABEL_26;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
        if ((_DWORD)result)
        {
          v10 = v22;
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
          goto LABEL_23;
        }
        break;
      case 2u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v12 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
LABEL_26:
        v22 = 0;
        if ((unint64_t)v12 >= v8 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
          if (!(_DWORD)result)
            return result;
          v15 = v22;
          v16 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v15 = *v12;
          v16 = v12 + 1;
          *((_QWORD *)this + 1) = v16;
        }
        *(_BYTE *)(a1 + 9) = v15 != 0;
        *(_DWORD *)(a1 + 16) |= 2u;
        if ((unint64_t)v16 >= v8 || *v16 != 24)
          continue;
        v13 = v16 + 1;
        *((_QWORD *)this + 1) = v13;
LABEL_34:
        v22 = 0;
        if ((unint64_t)v13 >= v8 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
          if (!(_DWORD)result)
            return result;
          v17 = v22;
          v18 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v17 = *v13;
          v18 = v13 + 1;
          *((_QWORD *)this + 1) = v18;
        }
        *(_BYTE *)(a1 + 10) = v17 != 0;
        *(_DWORD *)(a1 + 16) |= 4u;
        if ((unint64_t)v18 >= v8 || *v18 != 32)
          continue;
        v14 = v18 + 1;
        *((_QWORD *)this + 1) = v14;
LABEL_42:
        v22 = 0;
        if ((unint64_t)v14 >= v8 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
          if (!(_DWORD)result)
            return result;
          v19 = v22;
          v20 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v19 = *v14;
          v20 = (unsigned __int8 *)(v14 + 1);
          *((_QWORD *)this + 1) = v20;
        }
        *(_BYTE *)(a1 + 11) = v19 != 0;
        *(_DWORD *)(a1 + 16) |= 8u;
        if (v20 != (unsigned __int8 *)v8 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v13 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_34;
      case 4u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v14 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_42;
      default:
        v7 = TagFallback & 7;
LABEL_17:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_100DA8214(uint64_t result, BOOL a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 16);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 16);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 9), a2, a4);
  v6 = *(_DWORD *)(v5 + 16);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 11), a2, a4);
  }
LABEL_8:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 10), a2, a4);
  if ((*(_DWORD *)(v5 + 16) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 11), a2, a4);
  return result;
}

uint64_t sub_100DA82A8(uint64_t a1)
{
  int v1;
  unsigned int v2;
  uint64_t v3;

  v1 = *(_DWORD *)(a1 + 16);
  v2 = 2 * (v1 & 1);
  if ((v1 & 2) != 0)
    v2 += 2;
  if ((v1 & 4) != 0)
    v2 += 2;
  if ((v1 & 8) != 0)
    v2 += 2;
  if (*(_DWORD *)(a1 + 16))
    v3 = v2;
  else
    v3 = 0;
  *(_DWORD *)(a1 + 12) = v3;
  return v3;
}

void sub_100DA82E8(uint64_t a1, _BYTE *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100DA7DAC(a1, lpsrc);
}

uint64_t sub_100DA8334()
{
  return 1;
}

_QWORD *sub_100DA833C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.GpsL5SyncState");
}

void sub_100DA834C(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  int v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  _BYTE v12[48];

  if (a2 == (_BYTE *)a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 2456);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = a2[20];
  if ((_BYTE)v5)
  {
    if ((a2[20] & 1) != 0)
    {
      v7 = a2[8];
      *(_DWORD *)(a1 + 20) |= 1u;
      *(_BYTE *)(a1 + 8) = v7;
      v5 = *((_DWORD *)a2 + 5);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_13;
      }
    }
    else if ((a2[20] & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = a2[9];
    *(_DWORD *)(a1 + 20) |= 2u;
    *(_BYTE *)(a1 + 9) = v8;
    v5 = *((_DWORD *)a2 + 5);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        goto LABEL_8;
      goto LABEL_14;
    }
LABEL_13:
    v9 = a2[10];
    *(_DWORD *)(a1 + 20) |= 4u;
    *(_BYTE *)(a1 + 10) = v9;
    v5 = *((_DWORD *)a2 + 5);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0)
        return;
      goto LABEL_9;
    }
LABEL_14:
    v10 = a2[11];
    *(_DWORD *)(a1 + 20) |= 8u;
    *(_BYTE *)(a1 + 11) = v10;
    if ((*((_DWORD *)a2 + 5) & 0x10) == 0)
      return;
LABEL_9:
    v6 = a2[12];
    *(_DWORD *)(a1 + 20) |= 0x10u;
    *(_BYTE *)(a1 + 12) = v6;
  }
}

void sub_100DA845C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DA8474(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021850B8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DA8484(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021850B8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100DA84B4()
{
  operator new();
}

uint64_t sub_100DA84F4(uint64_t result)
{
  if (*(_BYTE *)(result + 20))
  {
    *(_BYTE *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
  }
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_100DA850C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  unsigned int v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  unsigned int v16;
  _BYTE *v17;
  unsigned int v18;
  _BYTE *v19;
  unsigned int v20;
  _BYTE *v21;
  unsigned int v22;
  unsigned __int8 *v23;
  uint64_t result;
  unsigned int v25;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v25 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        if ((unint64_t)v9 < v8 && (*v9 & 0x80000000) == 0)
        {
          v10 = *v9;
          v11 = v9 + 1;
          *((_QWORD *)this + 1) = v11;
LABEL_25:
          *(_BYTE *)(a1 + 8) = v10 != 0;
          *(_DWORD *)(a1 + 20) |= 1u;
          if ((unint64_t)v11 < v8 && *v11 == 16)
          {
            v12 = v11 + 1;
            *((_QWORD *)this + 1) = v12;
            goto LABEL_28;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v25);
        if ((_DWORD)result)
        {
          v10 = v25;
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
          goto LABEL_25;
        }
        break;
      case 2u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v12 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
LABEL_28:
        v25 = 0;
        if ((unint64_t)v12 >= v8 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v25);
          if (!(_DWORD)result)
            return result;
          v16 = v25;
          v17 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v16 = *v12;
          v17 = v12 + 1;
          *((_QWORD *)this + 1) = v17;
        }
        *(_BYTE *)(a1 + 9) = v16 != 0;
        *(_DWORD *)(a1 + 20) |= 2u;
        if ((unint64_t)v17 >= v8 || *v17 != 24)
          continue;
        v13 = v17 + 1;
        *((_QWORD *)this + 1) = v13;
LABEL_36:
        v25 = 0;
        if ((unint64_t)v13 >= v8 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v25);
          if (!(_DWORD)result)
            return result;
          v18 = v25;
          v19 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v18 = *v13;
          v19 = v13 + 1;
          *((_QWORD *)this + 1) = v19;
        }
        *(_BYTE *)(a1 + 10) = v18 != 0;
        *(_DWORD *)(a1 + 20) |= 4u;
        if ((unint64_t)v19 >= v8 || *v19 != 32)
          continue;
        v14 = v19 + 1;
        *((_QWORD *)this + 1) = v14;
LABEL_44:
        v25 = 0;
        if ((unint64_t)v14 >= v8 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v25);
          if (!(_DWORD)result)
            return result;
          v20 = v25;
          v21 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v20 = *v14;
          v21 = v14 + 1;
          *((_QWORD *)this + 1) = v21;
        }
        *(_BYTE *)(a1 + 11) = v20 != 0;
        *(_DWORD *)(a1 + 20) |= 8u;
        if ((unint64_t)v21 >= v8 || *v21 != 40)
          continue;
        v15 = v21 + 1;
        *((_QWORD *)this + 1) = v15;
LABEL_52:
        v25 = 0;
        if ((unint64_t)v15 >= v8 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v25);
          if (!(_DWORD)result)
            return result;
          v22 = v25;
          v23 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v22 = *v15;
          v23 = (unsigned __int8 *)(v15 + 1);
          *((_QWORD *)this + 1) = v23;
        }
        *(_BYTE *)(a1 + 12) = v22 != 0;
        *(_DWORD *)(a1 + 20) |= 0x10u;
        if (v23 != (unsigned __int8 *)v8 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v13 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_36;
      case 4u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v14 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_44;
      case 5u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v15 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_52;
      default:
        v7 = TagFallback & 7;
LABEL_19:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_100DA8860(uint64_t result, BOOL a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 20);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 20);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 9), a2, a4);
  v6 = *(_DWORD *)(v5 + 20);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 10), a2, a4);
  v6 = *(_DWORD *)(v5 + 20);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 12), a2, a4);
  }
LABEL_10:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 11), a2, a4);
  if ((*(_DWORD *)(v5 + 20) & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 12), a2, a4);
  return result;
}

uint64_t sub_100DA8910(uint64_t a1)
{
  int v1;
  unsigned int v2;
  uint64_t v3;

  v1 = *(_DWORD *)(a1 + 20);
  if ((_BYTE)v1)
  {
    v2 = 2 * (v1 & 1);
    if ((v1 & 2) != 0)
      v2 += 2;
    if ((v1 & 4) != 0)
      v2 += 2;
    if ((v1 & 8) != 0)
      v2 += 2;
    if ((v1 & 0x10) != 0)
      v3 = v2 + 2;
    else
      v3 = v2;
  }
  else
  {
    v3 = 0;
  }
  *(_DWORD *)(a1 + 16) = v3;
  return v3;
}

void sub_100DA8964(uint64_t a1, _BYTE *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100DA834C(a1, lpsrc);
}

uint64_t sub_100DA89B0()
{
  return 1;
}

_QWORD *sub_100DA89B8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.GlonassL1fSyncState");
}

void sub_100DA89C8(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  int v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  _BYTE v11[48];

  if (a2 == (_BYTE *)a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 2724);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = a2[16];
  if ((_BYTE)v5)
  {
    if ((a2[16] & 1) != 0)
    {
      v7 = a2[8];
      *(_DWORD *)(a1 + 16) |= 1u;
      *(_BYTE *)(a1 + 8) = v7;
      v5 = *((_DWORD *)a2 + 4);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_12;
      }
    }
    else if ((a2[16] & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = a2[9];
    *(_DWORD *)(a1 + 16) |= 2u;
    *(_BYTE *)(a1 + 9) = v8;
    v5 = *((_DWORD *)a2 + 4);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        return;
      goto LABEL_8;
    }
LABEL_12:
    v9 = a2[10];
    *(_DWORD *)(a1 + 16) |= 4u;
    *(_BYTE *)(a1 + 10) = v9;
    if ((*((_DWORD *)a2 + 4) & 8) == 0)
      return;
LABEL_8:
    v6 = a2[11];
    *(_DWORD *)(a1 + 16) |= 8u;
    *(_BYTE *)(a1 + 11) = v6;
  }
}

void sub_100DA8AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DA8AD0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185130;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DA8AE0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185130;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100DA8B10()
{
  operator new();
}

uint64_t sub_100DA8B48(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100DA8B5C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  unsigned int v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  char *v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned int v19;
  unsigned __int8 *v20;
  uint64_t result;
  unsigned int v22;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v22 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        if ((unint64_t)v9 < v8 && (*v9 & 0x80000000) == 0)
        {
          v10 = *v9;
          v11 = v9 + 1;
          *((_QWORD *)this + 1) = v11;
LABEL_23:
          *(_BYTE *)(a1 + 8) = v10 != 0;
          *(_DWORD *)(a1 + 16) |= 1u;
          if ((unint64_t)v11 < v8 && *v11 == 16)
          {
            v12 = v11 + 1;
            *((_QWORD *)this + 1) = v12;
            goto LABEL_26;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
        if ((_DWORD)result)
        {
          v10 = v22;
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
          goto LABEL_23;
        }
        break;
      case 2u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v12 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
LABEL_26:
        v22 = 0;
        if ((unint64_t)v12 >= v8 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
          if (!(_DWORD)result)
            return result;
          v15 = v22;
          v16 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v15 = *v12;
          v16 = v12 + 1;
          *((_QWORD *)this + 1) = v16;
        }
        *(_BYTE *)(a1 + 9) = v15 != 0;
        *(_DWORD *)(a1 + 16) |= 2u;
        if ((unint64_t)v16 >= v8 || *v16 != 24)
          continue;
        v13 = v16 + 1;
        *((_QWORD *)this + 1) = v13;
LABEL_34:
        v22 = 0;
        if ((unint64_t)v13 >= v8 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
          if (!(_DWORD)result)
            return result;
          v17 = v22;
          v18 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v17 = *v13;
          v18 = v13 + 1;
          *((_QWORD *)this + 1) = v18;
        }
        *(_BYTE *)(a1 + 10) = v17 != 0;
        *(_DWORD *)(a1 + 16) |= 4u;
        if ((unint64_t)v18 >= v8 || *v18 != 32)
          continue;
        v14 = v18 + 1;
        *((_QWORD *)this + 1) = v14;
LABEL_42:
        v22 = 0;
        if ((unint64_t)v14 >= v8 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
          if (!(_DWORD)result)
            return result;
          v19 = v22;
          v20 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v19 = *v14;
          v20 = (unsigned __int8 *)(v14 + 1);
          *((_QWORD *)this + 1) = v20;
        }
        *(_BYTE *)(a1 + 11) = v19 != 0;
        *(_DWORD *)(a1 + 16) |= 8u;
        if (v20 != (unsigned __int8 *)v8 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v13 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_34;
      case 4u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v14 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_42;
      default:
        v7 = TagFallback & 7;
LABEL_17:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_100DA8E30(uint64_t result, BOOL a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 16);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 16);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 9), a2, a4);
  v6 = *(_DWORD *)(v5 + 16);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 11), a2, a4);
  }
LABEL_8:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 10), a2, a4);
  if ((*(_DWORD *)(v5 + 16) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 11), a2, a4);
  return result;
}

uint64_t sub_100DA8EC4(uint64_t a1)
{
  int v1;
  unsigned int v2;
  uint64_t v3;

  v1 = *(_DWORD *)(a1 + 16);
  v2 = 2 * (v1 & 1);
  if ((v1 & 2) != 0)
    v2 += 2;
  if ((v1 & 4) != 0)
    v2 += 2;
  if ((v1 & 8) != 0)
    v2 += 2;
  if (*(_DWORD *)(a1 + 16))
    v3 = v2;
  else
    v3 = 0;
  *(_DWORD *)(a1 + 12) = v3;
  return v3;
}

void sub_100DA8F04(uint64_t a1, _BYTE *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100DA89C8(a1, lpsrc);
}

uint64_t sub_100DA8F50()
{
  return 1;
}

_QWORD *sub_100DA8F58@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.BeidouB1SyncState");
}

void sub_100DA8F68(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  int v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  _BYTE v11[48];

  if (a2 == (_BYTE *)a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 2988);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = a2[16];
  if ((_BYTE)v5)
  {
    if ((a2[16] & 1) != 0)
    {
      v7 = a2[8];
      *(_DWORD *)(a1 + 16) |= 1u;
      *(_BYTE *)(a1 + 8) = v7;
      v5 = *((_DWORD *)a2 + 4);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_12;
      }
    }
    else if ((a2[16] & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = a2[9];
    *(_DWORD *)(a1 + 16) |= 2u;
    *(_BYTE *)(a1 + 9) = v8;
    v5 = *((_DWORD *)a2 + 4);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        return;
      goto LABEL_8;
    }
LABEL_12:
    v9 = a2[10];
    *(_DWORD *)(a1 + 16) |= 4u;
    *(_BYTE *)(a1 + 10) = v9;
    if ((*((_DWORD *)a2 + 4) & 8) == 0)
      return;
LABEL_8:
    v6 = a2[11];
    *(_DWORD *)(a1 + 16) |= 8u;
    *(_BYTE *)(a1 + 11) = v6;
  }
}

void sub_100DA9058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DA9070(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021851A8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DA9080(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021851A8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100DA90B0()
{
  operator new();
}

uint64_t sub_100DA90E8(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100DA90FC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  unsigned int v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  char *v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned int v19;
  unsigned __int8 *v20;
  uint64_t result;
  unsigned int v22;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v22 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        if ((unint64_t)v9 < v8 && (*v9 & 0x80000000) == 0)
        {
          v10 = *v9;
          v11 = v9 + 1;
          *((_QWORD *)this + 1) = v11;
LABEL_23:
          *(_BYTE *)(a1 + 8) = v10 != 0;
          *(_DWORD *)(a1 + 16) |= 1u;
          if ((unint64_t)v11 < v8 && *v11 == 16)
          {
            v12 = v11 + 1;
            *((_QWORD *)this + 1) = v12;
            goto LABEL_26;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
        if ((_DWORD)result)
        {
          v10 = v22;
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
          goto LABEL_23;
        }
        break;
      case 2u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v12 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
LABEL_26:
        v22 = 0;
        if ((unint64_t)v12 >= v8 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
          if (!(_DWORD)result)
            return result;
          v15 = v22;
          v16 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v15 = *v12;
          v16 = v12 + 1;
          *((_QWORD *)this + 1) = v16;
        }
        *(_BYTE *)(a1 + 9) = v15 != 0;
        *(_DWORD *)(a1 + 16) |= 2u;
        if ((unint64_t)v16 >= v8 || *v16 != 24)
          continue;
        v13 = v16 + 1;
        *((_QWORD *)this + 1) = v13;
LABEL_34:
        v22 = 0;
        if ((unint64_t)v13 >= v8 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
          if (!(_DWORD)result)
            return result;
          v17 = v22;
          v18 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v17 = *v13;
          v18 = v13 + 1;
          *((_QWORD *)this + 1) = v18;
        }
        *(_BYTE *)(a1 + 10) = v17 != 0;
        *(_DWORD *)(a1 + 16) |= 4u;
        if ((unint64_t)v18 >= v8 || *v18 != 32)
          continue;
        v14 = v18 + 1;
        *((_QWORD *)this + 1) = v14;
LABEL_42:
        v22 = 0;
        if ((unint64_t)v14 >= v8 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
          if (!(_DWORD)result)
            return result;
          v19 = v22;
          v20 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v19 = *v14;
          v20 = (unsigned __int8 *)(v14 + 1);
          *((_QWORD *)this + 1) = v20;
        }
        *(_BYTE *)(a1 + 11) = v19 != 0;
        *(_DWORD *)(a1 + 16) |= 8u;
        if (v20 != (unsigned __int8 *)v8 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v13 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_34;
      case 4u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v14 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_42;
      default:
        v7 = TagFallback & 7;
LABEL_17:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_100DA93D0(uint64_t result, BOOL a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 16);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 16);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 9), a2, a4);
  v6 = *(_DWORD *)(v5 + 16);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 11), a2, a4);
  }
LABEL_8:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 10), a2, a4);
  if ((*(_DWORD *)(v5 + 16) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 11), a2, a4);
  return result;
}

uint64_t sub_100DA9464(uint64_t a1)
{
  int v1;
  unsigned int v2;
  uint64_t v3;

  v1 = *(_DWORD *)(a1 + 16);
  v2 = 2 * (v1 & 1);
  if ((v1 & 2) != 0)
    v2 += 2;
  if ((v1 & 4) != 0)
    v2 += 2;
  if ((v1 & 8) != 0)
    v2 += 2;
  if (*(_DWORD *)(a1 + 16))
    v3 = v2;
  else
    v3 = 0;
  *(_DWORD *)(a1 + 12) = v3;
  return v3;
}

void sub_100DA94A4(uint64_t a1, _BYTE *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100DA8F68(a1, lpsrc);
}

uint64_t sub_100DA94F0()
{
  return 1;
}

_QWORD *sub_100DA94F8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.BeidouB2SyncState");
}

void sub_100DA9508(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  int v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  _BYTE v11[48];

  if (a2 == (_BYTE *)a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 3252);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = a2[16];
  if ((_BYTE)v5)
  {
    if ((a2[16] & 1) != 0)
    {
      v7 = a2[8];
      *(_DWORD *)(a1 + 16) |= 1u;
      *(_BYTE *)(a1 + 8) = v7;
      v5 = *((_DWORD *)a2 + 4);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_12;
      }
    }
    else if ((a2[16] & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = a2[9];
    *(_DWORD *)(a1 + 16) |= 2u;
    *(_BYTE *)(a1 + 9) = v8;
    v5 = *((_DWORD *)a2 + 4);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        return;
      goto LABEL_8;
    }
LABEL_12:
    v9 = a2[10];
    *(_DWORD *)(a1 + 16) |= 4u;
    *(_BYTE *)(a1 + 10) = v9;
    if ((*((_DWORD *)a2 + 4) & 8) == 0)
      return;
LABEL_8:
    v6 = a2[11];
    *(_DWORD *)(a1 + 16) |= 8u;
    *(_BYTE *)(a1 + 11) = v6;
  }
}

void sub_100DA95F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DA9610(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185220;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DA9620(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185220;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100DA9650()
{
  operator new();
}

uint64_t sub_100DA9688(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100DA969C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  unsigned int v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  char *v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned int v19;
  unsigned __int8 *v20;
  uint64_t result;
  unsigned int v22;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v22 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        if ((unint64_t)v9 < v8 && (*v9 & 0x80000000) == 0)
        {
          v10 = *v9;
          v11 = v9 + 1;
          *((_QWORD *)this + 1) = v11;
LABEL_23:
          *(_BYTE *)(a1 + 8) = v10 != 0;
          *(_DWORD *)(a1 + 16) |= 1u;
          if ((unint64_t)v11 < v8 && *v11 == 16)
          {
            v12 = v11 + 1;
            *((_QWORD *)this + 1) = v12;
            goto LABEL_26;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
        if ((_DWORD)result)
        {
          v10 = v22;
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
          goto LABEL_23;
        }
        break;
      case 2u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v12 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
LABEL_26:
        v22 = 0;
        if ((unint64_t)v12 >= v8 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
          if (!(_DWORD)result)
            return result;
          v15 = v22;
          v16 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v15 = *v12;
          v16 = v12 + 1;
          *((_QWORD *)this + 1) = v16;
        }
        *(_BYTE *)(a1 + 9) = v15 != 0;
        *(_DWORD *)(a1 + 16) |= 2u;
        if ((unint64_t)v16 >= v8 || *v16 != 24)
          continue;
        v13 = v16 + 1;
        *((_QWORD *)this + 1) = v13;
LABEL_34:
        v22 = 0;
        if ((unint64_t)v13 >= v8 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
          if (!(_DWORD)result)
            return result;
          v17 = v22;
          v18 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v17 = *v13;
          v18 = v13 + 1;
          *((_QWORD *)this + 1) = v18;
        }
        *(_BYTE *)(a1 + 10) = v17 != 0;
        *(_DWORD *)(a1 + 16) |= 4u;
        if ((unint64_t)v18 >= v8 || *v18 != 32)
          continue;
        v14 = v18 + 1;
        *((_QWORD *)this + 1) = v14;
LABEL_42:
        v22 = 0;
        if ((unint64_t)v14 >= v8 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
          if (!(_DWORD)result)
            return result;
          v19 = v22;
          v20 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v19 = *v14;
          v20 = (unsigned __int8 *)(v14 + 1);
          *((_QWORD *)this + 1) = v20;
        }
        *(_BYTE *)(a1 + 11) = v19 != 0;
        *(_DWORD *)(a1 + 16) |= 8u;
        if (v20 != (unsigned __int8 *)v8 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v13 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_34;
      case 4u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v14 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_42;
      default:
        v7 = TagFallback & 7;
LABEL_17:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_100DA9970(uint64_t result, BOOL a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 16);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 16);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 9), a2, a4);
  v6 = *(_DWORD *)(v5 + 16);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 11), a2, a4);
  }
LABEL_8:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 10), a2, a4);
  if ((*(_DWORD *)(v5 + 16) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 11), a2, a4);
  return result;
}

uint64_t sub_100DA9A04(uint64_t a1)
{
  int v1;
  unsigned int v2;
  uint64_t v3;

  v1 = *(_DWORD *)(a1 + 16);
  v2 = 2 * (v1 & 1);
  if ((v1 & 2) != 0)
    v2 += 2;
  if ((v1 & 4) != 0)
    v2 += 2;
  if ((v1 & 8) != 0)
    v2 += 2;
  if (*(_DWORD *)(a1 + 16))
    v3 = v2;
  else
    v3 = 0;
  *(_DWORD *)(a1 + 12) = v3;
  return v3;
}

void sub_100DA9A44(uint64_t a1, _BYTE *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100DA9508(a1, lpsrc);
}

uint64_t sub_100DA9A90()
{
  return 1;
}

_QWORD *sub_100DA9A98@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.GalileoE1SyncState");
}

void sub_100DA9AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  _BYTE v17[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v17, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 3694);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v17, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v16, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v17);
  }
  v5 = *(_DWORD *)(a2 + 24);
  if (!(_BYTE)v5)
    goto LABEL_13;
  if ((v5 & 1) != 0)
  {
    v9 = *(_BYTE *)(a2 + 8);
    *(_DWORD *)(a1 + 24) |= 1u;
    *(_BYTE *)(a1 + 8) = v9;
    v5 = *(_DWORD *)(a2 + 24);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_21;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_6;
  }
  v10 = *(_BYTE *)(a2 + 9);
  *(_DWORD *)(a1 + 24) |= 2u;
  *(_BYTE *)(a1 + 9) = v10;
  v5 = *(_DWORD *)(a2 + 24);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  v11 = *(_BYTE *)(a2 + 10);
  *(_DWORD *)(a1 + 24) |= 4u;
  *(_BYTE *)(a1 + 10) = v11;
  v5 = *(_DWORD *)(a2 + 24);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  v12 = *(_BYTE *)(a2 + 11);
  *(_DWORD *)(a1 + 24) |= 8u;
  *(_BYTE *)(a1 + 11) = v12;
  v5 = *(_DWORD *)(a2 + 24);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
LABEL_24:
    v14 = *(_BYTE *)(a2 + 13);
    *(_DWORD *)(a1 + 24) |= 0x20u;
    *(_BYTE *)(a1 + 13) = v14;
    v5 = *(_DWORD *)(a2 + 24);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_23:
  v13 = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 24) |= 0x10u;
  *(_BYTE *)(a1 + 12) = v13;
  v5 = *(_DWORD *)(a2 + 24);
  if ((v5 & 0x20) != 0)
    goto LABEL_24;
LABEL_10:
  if ((v5 & 0x40) == 0)
    goto LABEL_11;
LABEL_25:
  v15 = *(_BYTE *)(a2 + 14);
  *(_DWORD *)(a1 + 24) |= 0x40u;
  *(_BYTE *)(a1 + 14) = v15;
  v5 = *(_DWORD *)(a2 + 24);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    v6 = *(_BYTE *)(a2 + 15);
    *(_DWORD *)(a1 + 24) |= 0x80u;
    *(_BYTE *)(a1 + 15) = v6;
    v5 = *(_DWORD *)(a2 + 24);
  }
LABEL_13:
  if ((v5 & 0xFF00) != 0)
  {
    if ((v5 & 0x100) != 0)
    {
      v7 = *(_BYTE *)(a2 + 16);
      *(_DWORD *)(a1 + 24) |= 0x100u;
      *(_BYTE *)(a1 + 16) = v7;
      v5 = *(_DWORD *)(a2 + 24);
    }
    if ((v5 & 0x200) != 0)
    {
      v8 = *(_BYTE *)(a2 + 17);
      *(_DWORD *)(a1 + 24) |= 0x200u;
      *(_BYTE *)(a1 + 17) = v8;
    }
  }
}

void sub_100DA9C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DA9C74(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185298;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DA9C84(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185298;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100DA9CB4()
{
  operator new();
}

uint64_t sub_100DA9CF0(uint64_t result)
{
  int v1;

  v1 = *(_DWORD *)(result + 24);
  if ((_BYTE)v1)
    *(_QWORD *)(result + 8) = 0;
  if ((v1 & 0xFF00) != 0)
    *(_WORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_100DA9D14(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  unsigned int v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  unsigned int v21;
  _BYTE *v22;
  unsigned int v23;
  _BYTE *v24;
  unsigned int v25;
  _BYTE *v26;
  unsigned int v27;
  _BYTE *v28;
  unsigned int v29;
  _BYTE *v30;
  unsigned int v31;
  _BYTE *v32;
  unsigned int v33;
  _BYTE *v34;
  unsigned int v35;
  _BYTE *v36;
  unsigned int v37;
  unsigned __int8 *v38;
  uint64_t result;
  unsigned int v40;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_29;
        v40 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        if ((unint64_t)v9 < v8 && (*v9 & 0x80000000) == 0)
        {
          v10 = *v9;
          v11 = v9 + 1;
          *((_QWORD *)this + 1) = v11;
LABEL_35:
          *(_BYTE *)(a1 + 8) = v10 != 0;
          *(_DWORD *)(a1 + 24) |= 1u;
          if ((unint64_t)v11 < v8 && *v11 == 16)
          {
            v12 = v11 + 1;
            *((_QWORD *)this + 1) = v12;
            goto LABEL_38;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v40);
        if ((_DWORD)result)
        {
          v10 = v40;
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
          goto LABEL_35;
        }
        break;
      case 2u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_29;
        v12 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
LABEL_38:
        v40 = 0;
        if ((unint64_t)v12 >= v8 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v40);
          if (!(_DWORD)result)
            return result;
          v21 = v40;
          v22 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v21 = *v12;
          v22 = v12 + 1;
          *((_QWORD *)this + 1) = v22;
        }
        *(_BYTE *)(a1 + 9) = v21 != 0;
        *(_DWORD *)(a1 + 24) |= 2u;
        if ((unint64_t)v22 >= v8 || *v22 != 24)
          continue;
        v13 = v22 + 1;
        *((_QWORD *)this + 1) = v13;
LABEL_46:
        v40 = 0;
        if ((unint64_t)v13 >= v8 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v40);
          if (!(_DWORD)result)
            return result;
          v23 = v40;
          v24 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v23 = *v13;
          v24 = v13 + 1;
          *((_QWORD *)this + 1) = v24;
        }
        *(_BYTE *)(a1 + 10) = v23 != 0;
        *(_DWORD *)(a1 + 24) |= 4u;
        if ((unint64_t)v24 >= v8 || *v24 != 32)
          continue;
        v14 = v24 + 1;
        *((_QWORD *)this + 1) = v14;
LABEL_54:
        v40 = 0;
        if ((unint64_t)v14 >= v8 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v40);
          if (!(_DWORD)result)
            return result;
          v25 = v40;
          v26 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v25 = *v14;
          v26 = v14 + 1;
          *((_QWORD *)this + 1) = v26;
        }
        *(_BYTE *)(a1 + 11) = v25 != 0;
        *(_DWORD *)(a1 + 24) |= 8u;
        if ((unint64_t)v26 >= v8 || *v26 != 40)
          continue;
        v15 = v26 + 1;
        *((_QWORD *)this + 1) = v15;
LABEL_62:
        v40 = 0;
        if ((unint64_t)v15 >= v8 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v40);
          if (!(_DWORD)result)
            return result;
          v27 = v40;
          v28 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v27 = *v15;
          v28 = v15 + 1;
          *((_QWORD *)this + 1) = v28;
        }
        *(_BYTE *)(a1 + 12) = v27 != 0;
        *(_DWORD *)(a1 + 24) |= 0x10u;
        if ((unint64_t)v28 >= v8 || *v28 != 48)
          continue;
        v16 = v28 + 1;
        *((_QWORD *)this + 1) = v16;
LABEL_70:
        v40 = 0;
        if ((unint64_t)v16 >= v8 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v40);
          if (!(_DWORD)result)
            return result;
          v29 = v40;
          v30 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v29 = *v16;
          v30 = v16 + 1;
          *((_QWORD *)this + 1) = v30;
        }
        *(_BYTE *)(a1 + 13) = v29 != 0;
        *(_DWORD *)(a1 + 24) |= 0x20u;
        if ((unint64_t)v30 >= v8 || *v30 != 56)
          continue;
        v17 = v30 + 1;
        *((_QWORD *)this + 1) = v17;
LABEL_78:
        v40 = 0;
        if ((unint64_t)v17 >= v8 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v40);
          if (!(_DWORD)result)
            return result;
          v31 = v40;
          v32 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v31 = *v17;
          v32 = v17 + 1;
          *((_QWORD *)this + 1) = v32;
        }
        *(_BYTE *)(a1 + 14) = v31 != 0;
        *(_DWORD *)(a1 + 24) |= 0x40u;
        if ((unint64_t)v32 >= v8 || *v32 != 64)
          continue;
        v18 = v32 + 1;
        *((_QWORD *)this + 1) = v18;
LABEL_86:
        v40 = 0;
        if ((unint64_t)v18 >= v8 || *v18 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v40);
          if (!(_DWORD)result)
            return result;
          v33 = v40;
          v34 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v33 = *v18;
          v34 = v18 + 1;
          *((_QWORD *)this + 1) = v34;
        }
        *(_BYTE *)(a1 + 15) = v33 != 0;
        *(_DWORD *)(a1 + 24) |= 0x80u;
        if ((unint64_t)v34 >= v8 || *v34 != 72)
          continue;
        v19 = v34 + 1;
        *((_QWORD *)this + 1) = v19;
LABEL_94:
        v40 = 0;
        if ((unint64_t)v19 >= v8 || *v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v40);
          if (!(_DWORD)result)
            return result;
          v35 = v40;
          v36 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v35 = *v19;
          v36 = v19 + 1;
          *((_QWORD *)this + 1) = v36;
        }
        *(_BYTE *)(a1 + 16) = v35 != 0;
        *(_DWORD *)(a1 + 24) |= 0x100u;
        if ((unint64_t)v36 >= v8 || *v36 != 80)
          continue;
        v20 = v36 + 1;
        *((_QWORD *)this + 1) = v20;
LABEL_102:
        v40 = 0;
        if ((unint64_t)v20 >= v8 || *v20 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v40);
          if (!(_DWORD)result)
            return result;
          v37 = v40;
          v38 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v37 = *v20;
          v38 = (unsigned __int8 *)(v20 + 1);
          *((_QWORD *)this + 1) = v38;
        }
        *(_BYTE *)(a1 + 17) = v37 != 0;
        *(_DWORD *)(a1 + 24) |= 0x200u;
        if (v38 != (unsigned __int8 *)v8 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_29;
        v13 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_46;
      case 4u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_29;
        v14 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_54;
      case 5u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_29;
        v15 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_62;
      case 6u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_29;
        v16 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_70;
      case 7u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_29;
        v17 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_78;
      case 8u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_29;
        v18 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_86;
      case 9u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_29;
        v19 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_94;
      case 0xAu:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_29;
        v20 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_102;
      default:
        v7 = TagFallback & 7;
LABEL_29:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_100DAA2E8(uint64_t result, BOOL a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 24);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 9), a2, a4);
  v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 10), a2, a4);
  v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 11), a2, a4);
  v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 12), a2, a4);
  v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 13), a2, a4);
  v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned __int8 *)(v5 + 14), a2, a4);
  v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned __int8 *)(v5 + 15), a2, a4);
  v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned __int8 *)(v5 + 17), a2, a4);
  }
LABEL_20:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned __int8 *)(v5 + 16), a2, a4);
  if ((*(_DWORD *)(v5 + 24) & 0x200) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned __int8 *)(v5 + 17), a2, a4);
  return result;
}

uint64_t sub_100DAA424(uint64_t a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;

  v1 = *(_DWORD *)(a1 + 24);
  if ((_BYTE)v1)
  {
    v2 = 2 * (v1 & 1);
    if ((v1 & 2) != 0)
      v2 += 2;
    if ((v1 & 4) != 0)
      v2 += 2;
    if ((v1 & 8) != 0)
      v2 += 2;
    if ((v1 & 0x10) != 0)
      v2 += 2;
    if ((v1 & 0x20) != 0)
      v2 += 2;
    if ((v1 & 0x40) != 0)
      v2 += 2;
    if ((v1 & 0x80) != 0)
      v2 += 2;
  }
  else
  {
    v2 = 0;
  }
  v3 = v2 + 2;
  if ((v1 & 0x100) == 0)
    v3 = v2;
  if ((v1 & 0x200) != 0)
    v3 += 2;
  if ((v1 & 0xFF00) != 0)
    v4 = v3;
  else
    v4 = v2;
  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

void sub_100DAA4BC(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100DA9AA8(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DAA508()
{
  return 1;
}

_QWORD *sub_100DAA510@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.GalileoE5SyncState");
}

void sub_100DAA520(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  int v5;
  char v6;
  char v7;
  char v8;
  char v9;
  _BYTE v10[48];

  if (a2 == (_BYTE *)a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 3955);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = a2[16];
  if ((_BYTE)v5)
  {
    if ((a2[16] & 1) != 0)
    {
      v7 = a2[8];
      *(_DWORD *)(a1 + 16) |= 1u;
      *(_BYTE *)(a1 + 8) = v7;
      v5 = *((_DWORD *)a2 + 4);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          return;
        goto LABEL_7;
      }
    }
    else if ((a2[16] & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = a2[9];
    *(_DWORD *)(a1 + 16) |= 2u;
    *(_BYTE *)(a1 + 9) = v8;
    if ((*((_DWORD *)a2 + 4) & 4) == 0)
      return;
LABEL_7:
    v6 = a2[10];
    *(_DWORD *)(a1 + 16) |= 4u;
    *(_BYTE *)(a1 + 10) = v6;
  }
}

void sub_100DAA5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DAA608(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185310;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DAA618(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185310;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100DAA648()
{
  operator new();
}

uint64_t sub_100DAA688(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
  {
    *(_WORD *)(result + 8) = 0;
    *(_BYTE *)(result + 10) = 0;
  }
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100DAA6A0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unsigned int v12;
  _BYTE *v13;
  char *v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned __int8 *v18;
  uint64_t result;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v22 = 0;
        v11 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        if ((unint64_t)v11 >= v9 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
          if (!(_DWORD)result)
            return result;
          v12 = v22;
          v13 = (_BYTE *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          v12 = *v11;
          v13 = v11 + 1;
          *((_QWORD *)this + 1) = v13;
        }
        *(_BYTE *)(a1 + 8) = v12 != 0;
        *(_DWORD *)(a1 + 16) |= 1u;
        if ((unint64_t)v13 < v9 && *v13 == 16)
        {
          v14 = v13 + 1;
          *((_QWORD *)this + 1) = v14;
          goto LABEL_26;
        }
      }
      if (v7 != 2)
        break;
      v8 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_18;
      v14 = (char *)*((_QWORD *)this + 1);
      v9 = *((_QWORD *)this + 2);
LABEL_26:
      v21 = 0;
      if ((unint64_t)v14 >= v9 || *v14 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v21);
        if (!(_DWORD)result)
          return result;
        v15 = v21;
        v16 = (_BYTE *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
      }
      else
      {
        v15 = *v14;
        v16 = v14 + 1;
        *((_QWORD *)this + 1) = v16;
      }
      *(_BYTE *)(a1 + 9) = v15 != 0;
      *(_DWORD *)(a1 + 16) |= 2u;
      if ((unint64_t)v16 < v9 && *v16 == 24)
      {
        v10 = v16 + 1;
        *((_QWORD *)this + 1) = v10;
LABEL_34:
        v20 = 0;
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v20);
          if (!(_DWORD)result)
            return result;
          v17 = v20;
          v18 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          v17 = *v10;
          v18 = (unsigned __int8 *)(v10 + 1);
          *((_QWORD *)this + 1) = v18;
        }
        *(_BYTE *)(a1 + 10) = v17 != 0;
        *(_DWORD *)(a1 + 16) |= 4u;
        if (v18 == (unsigned __int8 *)v9 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v7 == 3)
    {
      v8 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v10 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        goto LABEL_34;
      }
    }
    else
    {
      v8 = TagFallback & 7;
    }
LABEL_18:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_100DAA8DC(uint64_t result, BOOL a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 16);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 16);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 10), a2, a4);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 9), a2, a4);
  if ((*(_DWORD *)(v5 + 16) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 10), a2, a4);
  return result;
}

uint64_t sub_100DAA954(uint64_t a1)
{
  int v1;
  unsigned int v2;
  uint64_t v3;

  v1 = *(_DWORD *)(a1 + 16);
  v2 = 2 * (v1 & 1);
  if ((v1 & 2) != 0)
    v2 += 2;
  if ((v1 & 4) != 0)
    v2 += 2;
  if (*(_DWORD *)(a1 + 16))
    v3 = v2;
  else
    v3 = 0;
  *(_DWORD *)(a1 + 12) = v3;
  return v3;
}

void sub_100DAA988(uint64_t a1, _BYTE *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100DAA520(a1, lpsrc);
}

uint64_t sub_100DAA9D4()
{
  return 1;
}

_QWORD *sub_100DAA9DC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.SbasL1SyncState");
}

void sub_100DAA9EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  _BYTE *v26;
  char v27;
  _BYTE v28[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v28, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 4527);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v27, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v28);
  }
  v5 = *(_DWORD *)(a2 + 96);
  if (!(_BYTE)v5)
    goto LABEL_50;
  if ((v5 & 1) != 0)
  {
    v6 = *(_DWORD *)(a2 + 88);
    if (v6 >= 0xD)
      sub_10192A4C0();
    *(_DWORD *)(a1 + 96) |= 1u;
    *(_DWORD *)(a1 + 88) = v6;
    v5 = *(_DWORD *)(a2 + 96);
  }
  if ((v5 & 2) != 0)
  {
    *(_DWORD *)(a1 + 96) |= 2u;
    v7 = *(_QWORD *)(a1 + 8);
    if (!v7)
      operator new();
    v8 = *(_BYTE **)(a2 + 8);
    if (!v8)
      v8 = *(_BYTE **)(qword_1023115F0 + 8);
    sub_100DA7190(v7, v8);
    v5 = *(_DWORD *)(a2 + 96);
    if ((v5 & 4) == 0)
    {
LABEL_9:
      if ((v5 & 8) == 0)
        goto LABEL_10;
      goto LABEL_25;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_9;
  }
  *(_DWORD *)(a1 + 96) |= 4u;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    operator new();
  v10 = *(_BYTE **)(a2 + 16);
  if (!v10)
    v10 = *(_BYTE **)(qword_1023115F0 + 16);
  sub_100DA7730(v9, v10);
  v5 = *(_DWORD *)(a2 + 96);
  if ((v5 & 8) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_25:
  *(_DWORD *)(a1 + 96) |= 8u;
  v11 = *(_QWORD *)(a1 + 24);
  if (!v11)
    operator new();
  v12 = *(_BYTE **)(a2 + 24);
  if (!v12)
    v12 = *(_BYTE **)(qword_1023115F0 + 24);
  sub_100DA7DAC(v11, v12);
  v5 = *(_DWORD *)(a2 + 96);
  if ((v5 & 0x10) == 0)
  {
LABEL_11:
    if ((v5 & 0x20) == 0)
      goto LABEL_12;
LABEL_35:
    *(_DWORD *)(a1 + 96) |= 0x20u;
    v15 = *(_QWORD *)(a1 + 40);
    if (!v15)
      operator new();
    v16 = *(_BYTE **)(a2 + 40);
    if (!v16)
      v16 = *(_BYTE **)(qword_1023115F0 + 40);
    sub_100DA89C8(v15, v16);
    v5 = *(_DWORD *)(a2 + 96);
    if ((v5 & 0x40) == 0)
    {
LABEL_13:
      if ((v5 & 0x80) == 0)
        goto LABEL_50;
      goto LABEL_45;
    }
    goto LABEL_40;
  }
LABEL_30:
  *(_DWORD *)(a1 + 96) |= 0x10u;
  v13 = *(_QWORD *)(a1 + 32);
  if (!v13)
    operator new();
  v14 = *(_BYTE **)(a2 + 32);
  if (!v14)
    v14 = *(_BYTE **)(qword_1023115F0 + 32);
  sub_100DA834C(v13, v14);
  v5 = *(_DWORD *)(a2 + 96);
  if ((v5 & 0x20) != 0)
    goto LABEL_35;
LABEL_12:
  if ((v5 & 0x40) == 0)
    goto LABEL_13;
LABEL_40:
  *(_DWORD *)(a1 + 96) |= 0x40u;
  v17 = *(_QWORD *)(a1 + 48);
  if (!v17)
    operator new();
  v18 = *(_BYTE **)(a2 + 48);
  if (!v18)
    v18 = *(_BYTE **)(qword_1023115F0 + 48);
  sub_100DA8F68(v17, v18);
  v5 = *(_DWORD *)(a2 + 96);
  if ((v5 & 0x80) != 0)
  {
LABEL_45:
    *(_DWORD *)(a1 + 96) |= 0x80u;
    v19 = *(_QWORD *)(a1 + 56);
    if (!v19)
      operator new();
    v20 = *(_BYTE **)(a2 + 56);
    if (!v20)
      v20 = *(_BYTE **)(qword_1023115F0 + 56);
    sub_100DA9508(v19, v20);
    v5 = *(_DWORD *)(a2 + 96);
  }
LABEL_50:
  if ((v5 & 0xFF00) == 0)
    return;
  if ((v5 & 0x100) != 0)
  {
    *(_DWORD *)(a1 + 96) |= 0x100u;
    v21 = *(_QWORD *)(a1 + 64);
    if (!v21)
      operator new();
    v22 = *(_QWORD *)(a2 + 64);
    if (!v22)
      v22 = *(_QWORD *)(qword_1023115F0 + 64);
    sub_100DA9AA8(v21, v22);
    v5 = *(_DWORD *)(a2 + 96);
    if ((v5 & 0x200) == 0)
    {
LABEL_53:
      if ((v5 & 0x400) == 0)
        return;
      goto LABEL_65;
    }
  }
  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_53;
  }
  *(_DWORD *)(a1 + 96) |= 0x200u;
  v23 = *(_QWORD *)(a1 + 72);
  if (!v23)
    operator new();
  v24 = *(_BYTE **)(a2 + 72);
  if (!v24)
    v24 = *(_BYTE **)(qword_1023115F0 + 72);
  sub_100DAA520(v23, v24);
  if ((*(_DWORD *)(a2 + 96) & 0x400) != 0)
  {
LABEL_65:
    *(_DWORD *)(a1 + 96) |= 0x400u;
    v25 = *(_QWORD *)(a1 + 80);
    if (!v25)
      operator new();
    v26 = *(_BYTE **)(a2 + 80);
    if (!v26)
      v26 = *(_BYTE **)(qword_1023115F0 + 80);
    sub_100DA7190(v25, v26);
  }
}

void sub_100DAAE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100DAAEAC(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((_QWORD *)qword_1023115F0 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[2];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v1[3];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v1[4];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = v1[5];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = v1[6];
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = v1[7];
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = v1[8];
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = v1[9];
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    result = (_QWORD *)v1[10];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_100DAAFA8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185388;
  sub_100DAAEAC(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DAAFD8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185388;
  sub_100DAAEAC(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100DAB01C()
{
  operator new();
}

uint64_t sub_100DAB06C(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_DWORD *)(result + 96);
  if ((_BYTE)v1)
  {
    *(_DWORD *)(result + 88) = 0;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(result + 8);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 16))
          *(_DWORD *)(v2 + 8) = 0;
        *(_DWORD *)(v2 + 16) = 0;
        v1 = *(_DWORD *)(result + 96);
      }
    }
    if ((v1 & 4) != 0)
    {
      v3 = *(_QWORD *)(result + 16);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 20))
        {
          *(_BYTE *)(v3 + 12) = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        *(_DWORD *)(v3 + 20) = 0;
        v1 = *(_DWORD *)(result + 96);
      }
    }
    if ((v1 & 8) != 0)
    {
      v4 = *(_QWORD *)(result + 24);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 16))
          *(_DWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        v1 = *(_DWORD *)(result + 96);
      }
    }
    if ((v1 & 0x10) != 0)
    {
      v5 = *(_QWORD *)(result + 32);
      if (v5)
      {
        if (*(_BYTE *)(v5 + 20))
        {
          *(_BYTE *)(v5 + 12) = 0;
          *(_DWORD *)(v5 + 8) = 0;
        }
        *(_DWORD *)(v5 + 20) = 0;
        v1 = *(_DWORD *)(result + 96);
      }
    }
    if ((v1 & 0x20) != 0)
    {
      v6 = *(_QWORD *)(result + 40);
      if (v6)
      {
        if (*(_BYTE *)(v6 + 16))
          *(_DWORD *)(v6 + 8) = 0;
        *(_DWORD *)(v6 + 16) = 0;
        v1 = *(_DWORD *)(result + 96);
      }
    }
    if ((v1 & 0x40) != 0)
    {
      v7 = *(_QWORD *)(result + 48);
      if (v7)
      {
        if (*(_BYTE *)(v7 + 16))
          *(_DWORD *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 16) = 0;
        v1 = *(_DWORD *)(result + 96);
      }
    }
    if ((v1 & 0x80) != 0)
    {
      v8 = *(_QWORD *)(result + 56);
      if (v8)
      {
        if (*(_BYTE *)(v8 + 16))
          *(_DWORD *)(v8 + 8) = 0;
        *(_DWORD *)(v8 + 16) = 0;
        v1 = *(_DWORD *)(result + 96);
      }
    }
  }
  if ((v1 & 0xFF00) != 0)
  {
    if ((v1 & 0x100) != 0)
    {
      v9 = *(_QWORD *)(result + 64);
      if (v9)
      {
        v10 = *(_DWORD *)(v9 + 24);
        if ((_BYTE)v10)
          *(_QWORD *)(v9 + 8) = 0;
        if ((v10 & 0xFF00) != 0)
          *(_WORD *)(v9 + 16) = 0;
        *(_DWORD *)(v9 + 24) = 0;
        v1 = *(_DWORD *)(result + 96);
      }
    }
    if ((v1 & 0x200) != 0)
    {
      v11 = *(_QWORD *)(result + 72);
      if (v11)
      {
        if (*(_BYTE *)(v11 + 16))
        {
          *(_WORD *)(v11 + 8) = 0;
          *(_BYTE *)(v11 + 10) = 0;
        }
        *(_DWORD *)(v11 + 16) = 0;
        v1 = *(_DWORD *)(result + 96);
      }
    }
    if ((v1 & 0x400) != 0)
    {
      v12 = *(_QWORD *)(result + 80);
      if (v12)
      {
        if (*(_BYTE *)(v12 + 16))
          *(_DWORD *)(v12 + 8) = 0;
        *(_DWORD *)(v12 + 16) = 0;
      }
    }
  }
  *(_DWORD *)(result + 96) = 0;
  return result;
}

uint64_t sub_100DAB1E4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t result;
  _BYTE *v11;
  uint64_t v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  char *v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  _BYTE *v30;
  uint64_t v31;
  char *v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  _BYTE *v39;
  uint64_t v40;
  char *v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  _BYTE *v48;
  uint64_t v49;
  char *v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  int v56;
  _BYTE *v57;
  uint64_t v58;
  char *v59;
  int v60;
  int v61;
  int v62;
  unsigned int v63;
  int v64;
  int v65;
  _BYTE *v66;
  uint64_t v67;
  char *v68;
  int v69;
  int v70;
  int v71;
  unsigned int v72;
  int v73;
  int v74;
  _BYTE *v75;
  uint64_t v76;
  char *v77;
  int v78;
  int v79;
  int v80;
  unsigned int v81;
  int v82;
  int v83;
  _BYTE *v84;
  uint64_t v85;
  char *v86;
  int v87;
  int v88;
  int v89;
  unsigned int v90;
  int v91;
  int v92;
  _BYTE *v93;
  uint64_t v94;
  char *v95;
  int v96;
  int v97;
  int v98;
  unsigned int v99;
  int v100;
  int v101;
  unsigned int v102;

  while (1)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 < *((_QWORD *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_6;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_31;
        v102 = 0;
        v8 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v102);
          if (!(_DWORD)result)
            return result;
          v9 = v102;
        }
        else
        {
          v9 = *v8;
          *((_QWORD *)this + 1) = v8 + 1;
        }
        if (v9 <= 0xC)
        {
          *(_DWORD *)(a1 + 96) |= 1u;
          *(_DWORD *)(a1 + 88) = v9;
        }
        v11 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v11 < *((_QWORD *)this + 2) && *v11 == 18)
        {
          *((_QWORD *)this + 1) = v11 + 1;
          goto LABEL_41;
        }
        continue;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_31;
LABEL_41:
        *(_DWORD *)(a1 + 96) |= 2u;
        v12 = *(_QWORD *)(a1 + 8);
        if (!v12)
          operator new();
        v102 = 0;
        v13 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v13 >= *((_QWORD *)this + 2) || *v13 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v102))return 0;
        }
        else
        {
          v102 = *v13;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        v14 = *((_DWORD *)this + 14);
        v15 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v14 + 1;
        if (v14 >= v15)
          return 0;
        v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v102);
        if (!sub_100DA7324(v12, this, v17) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
        v18 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v18, 1);
        v20 = v18 - 1;
        if (v20 < 0 == v19)
          *((_DWORD *)this + 14) = v20;
        v21 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v21 >= *((_QWORD *)this + 2) || *v21 != 26)
          continue;
        *((_QWORD *)this + 1) = v21 + 1;
LABEL_55:
        *(_DWORD *)(a1 + 96) |= 4u;
        v22 = *(_QWORD *)(a1 + 16);
        if (!v22)
          operator new();
        v102 = 0;
        v23 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v23 >= *((_QWORD *)this + 2) || *v23 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v102))return 0;
        }
        else
        {
          v102 = *v23;
          *((_QWORD *)this + 1) = v23 + 1;
        }
        v24 = *((_DWORD *)this + 14);
        v25 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v24 + 1;
        if (v24 >= v25)
          return 0;
        v26 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v102);
        if (!sub_100DA78F0(v22, this, v27) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v26);
        v28 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v28, 1);
        v29 = v28 - 1;
        if (v29 < 0 == v19)
          *((_DWORD *)this + 14) = v29;
        v30 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v30 >= *((_QWORD *)this + 2) || *v30 != 34)
          continue;
        *((_QWORD *)this + 1) = v30 + 1;
LABEL_69:
        *(_DWORD *)(a1 + 96) |= 8u;
        v31 = *(_QWORD *)(a1 + 24);
        if (!v31)
          operator new();
        v102 = 0;
        v32 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v32 >= *((_QWORD *)this + 2) || *v32 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v102))return 0;
        }
        else
        {
          v102 = *v32;
          *((_QWORD *)this + 1) = v32 + 1;
        }
        v33 = *((_DWORD *)this + 14);
        v34 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v33 + 1;
        if (v33 >= v34)
          return 0;
        v35 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v102);
        if (!sub_100DA7F40(v31, this, v36) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v35);
        v37 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v37, 1);
        v38 = v37 - 1;
        if (v38 < 0 == v19)
          *((_DWORD *)this + 14) = v38;
        v39 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v39 >= *((_QWORD *)this + 2) || *v39 != 42)
          continue;
        *((_QWORD *)this + 1) = v39 + 1;
LABEL_83:
        *(_DWORD *)(a1 + 96) |= 0x10u;
        v40 = *(_QWORD *)(a1 + 32);
        if (!v40)
          operator new();
        v102 = 0;
        v41 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v41 >= *((_QWORD *)this + 2) || *v41 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v102))return 0;
        }
        else
        {
          v102 = *v41;
          *((_QWORD *)this + 1) = v41 + 1;
        }
        v42 = *((_DWORD *)this + 14);
        v43 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v42 + 1;
        if (v42 >= v43)
          return 0;
        v44 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v102);
        if (!sub_100DA850C(v40, this, v45) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v44);
        v46 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v46, 1);
        v47 = v46 - 1;
        if (v47 < 0 == v19)
          *((_DWORD *)this + 14) = v47;
        v48 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v48 >= *((_QWORD *)this + 2) || *v48 != 50)
          continue;
        *((_QWORD *)this + 1) = v48 + 1;
LABEL_97:
        *(_DWORD *)(a1 + 96) |= 0x20u;
        v49 = *(_QWORD *)(a1 + 40);
        if (!v49)
          operator new();
        v102 = 0;
        v50 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v50 >= *((_QWORD *)this + 2) || *v50 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v102))return 0;
        }
        else
        {
          v102 = *v50;
          *((_QWORD *)this + 1) = v50 + 1;
        }
        v51 = *((_DWORD *)this + 14);
        v52 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v51 + 1;
        if (v51 >= v52)
          return 0;
        v53 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v102);
        if (!sub_100DA8B5C(v49, this, v54) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v53);
        v55 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v55, 1);
        v56 = v55 - 1;
        if (v56 < 0 == v19)
          *((_DWORD *)this + 14) = v56;
        v57 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v57 >= *((_QWORD *)this + 2) || *v57 != 58)
          continue;
        *((_QWORD *)this + 1) = v57 + 1;
LABEL_111:
        *(_DWORD *)(a1 + 96) |= 0x40u;
        v58 = *(_QWORD *)(a1 + 48);
        if (!v58)
          operator new();
        v102 = 0;
        v59 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v59 >= *((_QWORD *)this + 2) || *v59 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v102))return 0;
        }
        else
        {
          v102 = *v59;
          *((_QWORD *)this + 1) = v59 + 1;
        }
        v60 = *((_DWORD *)this + 14);
        v61 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v60 + 1;
        if (v60 >= v61)
          return 0;
        v62 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v102);
        if (!sub_100DA90FC(v58, this, v63) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v62);
        v64 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v64, 1);
        v65 = v64 - 1;
        if (v65 < 0 == v19)
          *((_DWORD *)this + 14) = v65;
        v66 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v66 >= *((_QWORD *)this + 2) || *v66 != 66)
          continue;
        *((_QWORD *)this + 1) = v66 + 1;
LABEL_125:
        *(_DWORD *)(a1 + 96) |= 0x80u;
        v67 = *(_QWORD *)(a1 + 56);
        if (!v67)
          operator new();
        v102 = 0;
        v68 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v68 >= *((_QWORD *)this + 2) || *v68 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v102))return 0;
        }
        else
        {
          v102 = *v68;
          *((_QWORD *)this + 1) = v68 + 1;
        }
        v69 = *((_DWORD *)this + 14);
        v70 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v69 + 1;
        if (v69 >= v70)
          return 0;
        v71 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v102);
        if (!sub_100DA969C(v67, this, v72) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v71);
        v73 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v73, 1);
        v74 = v73 - 1;
        if (v74 < 0 == v19)
          *((_DWORD *)this + 14) = v74;
        v75 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v75 >= *((_QWORD *)this + 2) || *v75 != 74)
          continue;
        *((_QWORD *)this + 1) = v75 + 1;
LABEL_139:
        *(_DWORD *)(a1 + 96) |= 0x100u;
        v76 = *(_QWORD *)(a1 + 64);
        if (!v76)
          operator new();
        v102 = 0;
        v77 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v77 >= *((_QWORD *)this + 2) || *v77 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v102))return 0;
        }
        else
        {
          v102 = *v77;
          *((_QWORD *)this + 1) = v77 + 1;
        }
        v78 = *((_DWORD *)this + 14);
        v79 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v78 + 1;
        if (v78 >= v79)
          return 0;
        v80 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v102);
        if (!sub_100DA9D14(v76, this, v81) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v80);
        v82 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v82, 1);
        v83 = v82 - 1;
        if (v83 < 0 == v19)
          *((_DWORD *)this + 14) = v83;
        v84 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v84 >= *((_QWORD *)this + 2) || *v84 != 82)
          continue;
        *((_QWORD *)this + 1) = v84 + 1;
LABEL_153:
        *(_DWORD *)(a1 + 96) |= 0x200u;
        v85 = *(_QWORD *)(a1 + 72);
        if (!v85)
          operator new();
        v102 = 0;
        v86 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v86 >= *((_QWORD *)this + 2) || *v86 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v102))return 0;
        }
        else
        {
          v102 = *v86;
          *((_QWORD *)this + 1) = v86 + 1;
        }
        v87 = *((_DWORD *)this + 14);
        v88 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v87 + 1;
        if (v87 >= v88)
          return 0;
        v89 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v102);
        if (!sub_100DAA6A0(v85, this, v90) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v89);
        v91 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v91, 1);
        v92 = v91 - 1;
        if (v92 < 0 == v19)
          *((_DWORD *)this + 14) = v92;
        v93 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v93 >= *((_QWORD *)this + 2) || *v93 != 90)
          continue;
        *((_QWORD *)this + 1) = v93 + 1;
LABEL_167:
        *(_DWORD *)(a1 + 96) |= 0x400u;
        v94 = *(_QWORD *)(a1 + 80);
        if (!v94)
          operator new();
        v102 = 0;
        v95 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v95 >= *((_QWORD *)this + 2) || *v95 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v102))return 0;
        }
        else
        {
          v102 = *v95;
          *((_QWORD *)this + 1) = v95 + 1;
        }
        v96 = *((_DWORD *)this + 14);
        v97 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v96 + 1;
        if (v96 >= v97)
          return 0;
        v98 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v102);
        if (!sub_100DA7324(v94, this, v99) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v98);
        v100 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v100, 1);
        v101 = v100 - 1;
        if (v101 < 0 == v19)
          *((_DWORD *)this + 14) = v101;
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
        break;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_55;
        goto LABEL_31;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_69;
        goto LABEL_31;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_83;
        goto LABEL_31;
      case 6u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_97;
        goto LABEL_31;
      case 7u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_111;
        goto LABEL_31;
      case 8u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_125;
        goto LABEL_31;
      case 9u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_139;
        goto LABEL_31;
      case 0xAu:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_153;
        goto LABEL_31;
      case 0xBu:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_31;
        goto LABEL_167;
      default:
        v7 = TagFallback & 7;
LABEL_31:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_100DABDB0(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = result;
  v6 = *(_DWORD *)(result + 96);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 88), (int)a2, a4);
    v6 = *(_DWORD *)(v5 + 96);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7)
    v7 = *(_QWORD *)(qword_1023115F0 + 8);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_17:
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
    v8 = *(_QWORD *)(qword_1023115F0 + 16);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v8, a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_20:
  v9 = *(_QWORD *)(v5 + 24);
  if (!v9)
    v9 = *(_QWORD *)(qword_1023115F0 + 24);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v9, a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_23:
  v10 = *(_QWORD *)(v5 + 32);
  if (!v10)
    v10 = *(_QWORD *)(qword_1023115F0 + 32);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v10, a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_29;
  }
LABEL_26:
  v11 = *(_QWORD *)(v5 + 40);
  if (!v11)
    v11 = *(_QWORD *)(qword_1023115F0 + 40);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v11, a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_32;
  }
LABEL_29:
  v12 = *(_QWORD *)(v5 + 48);
  if (!v12)
    v12 = *(_QWORD *)(qword_1023115F0 + 48);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v12, a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_32:
  v13 = *(_QWORD *)(v5 + 56);
  if (!v13)
    v13 = *(_QWORD *)(qword_1023115F0 + 56);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v13, a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_35:
  v14 = *(_QWORD *)(v5 + 64);
  if (!v14)
    v14 = *(_QWORD *)(qword_1023115F0 + 64);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v14, a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      return result;
    goto LABEL_41;
  }
LABEL_38:
  v15 = *(_QWORD *)(v5 + 72);
  if (!v15)
    v15 = *(_QWORD *)(qword_1023115F0 + 72);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, v15, a2, a4);
  if ((*(_DWORD *)(v5 + 96) & 0x400) != 0)
  {
LABEL_41:
    v16 = *(_QWORD *)(v5 + 80);
    if (!v16)
      v16 = *(_QWORD *)(qword_1023115F0 + 80);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, v16, a2, a4);
  }
  return result;
}

uint64_t sub_100DABFA8(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  uint64_t v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  unsigned int v9;
  int v10;
  int v11;
  uint64_t v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t v27;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v28;
  unsigned int v29;
  int v30;
  int v31;
  uint64_t v32;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v33;
  unsigned int v34;
  int v35;
  int v36;
  uint64_t v37;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v38;
  unsigned int v39;
  int v40;
  int v41;
  uint64_t v42;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v43;
  unsigned int v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v52;
  unsigned int v53;
  int v54;
  int v55;

  v3 = *(_DWORD *)(a1 + 96);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_61;
  }
  if ((v3 & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 88);
    if ((v5 & 0x80000000) != 0)
    {
      v6 = 10;
    }
    else if (v5 >= 0x80)
    {
      v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
      v3 = *(_DWORD *)(a1 + 96);
    }
    else
    {
      v6 = 1;
    }
    v4 = (v6 + 1);
    if ((v3 & 2) == 0)
      goto LABEL_18;
  }
  else
  {
    v4 = 0;
    if ((v3 & 2) == 0)
      goto LABEL_18;
  }
  v7 = *(_QWORD *)(a1 + 8);
  if (!v7)
    v7 = *(_QWORD *)(qword_1023115F0 + 8);
  v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DA768C(v7);
  v10 = (int)v8;
  if (v8 >= 0x80)
    v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, v9);
  else
    v11 = 1;
  v4 = (v4 + v10 + v11 + 1);
  v3 = *(_DWORD *)(a1 + 96);
LABEL_18:
  if ((v3 & 4) != 0)
  {
    v12 = *(_QWORD *)(a1 + 16);
    if (!v12)
      v12 = *(_QWORD *)(qword_1023115F0 + 16);
    v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DA7CF4(v12);
    v15 = (int)v13;
    if (v13 >= 0x80)
      v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, v14);
    else
      v16 = 1;
    v4 = (v4 + v15 + v16 + 1);
    v3 = *(_DWORD *)(a1 + 96);
    if ((v3 & 8) == 0)
    {
LABEL_20:
      if ((v3 & 0x10) == 0)
        goto LABEL_21;
      goto LABEL_37;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_20;
  }
  v17 = *(_QWORD *)(a1 + 24);
  if (!v17)
    v17 = *(_QWORD *)(qword_1023115F0 + 24);
  v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DA82A8(v17);
  v20 = (int)v18;
  if (v18 >= 0x80)
    v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, v19);
  else
    v21 = 1;
  v4 = (v4 + v20 + v21 + 1);
  v3 = *(_DWORD *)(a1 + 96);
  if ((v3 & 0x10) == 0)
  {
LABEL_21:
    if ((v3 & 0x20) == 0)
      goto LABEL_22;
    goto LABEL_43;
  }
LABEL_37:
  v22 = *(_QWORD *)(a1 + 32);
  if (!v22)
    v22 = *(_QWORD *)(qword_1023115F0 + 32);
  v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DA8910(v22);
  v25 = (int)v23;
  if (v23 >= 0x80)
    v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23, v24);
  else
    v26 = 1;
  v4 = (v4 + v25 + v26 + 1);
  v3 = *(_DWORD *)(a1 + 96);
  if ((v3 & 0x20) == 0)
  {
LABEL_22:
    if ((v3 & 0x40) == 0)
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_43:
  v27 = *(_QWORD *)(a1 + 40);
  if (!v27)
    v27 = *(_QWORD *)(qword_1023115F0 + 40);
  v28 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DA8EC4(v27);
  v30 = (int)v28;
  if (v28 >= 0x80)
    v31 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v28, v29);
  else
    v31 = 1;
  v4 = (v4 + v30 + v31 + 1);
  v3 = *(_DWORD *)(a1 + 96);
  if ((v3 & 0x40) == 0)
  {
LABEL_23:
    if ((v3 & 0x80) == 0)
      goto LABEL_61;
    goto LABEL_55;
  }
LABEL_49:
  v32 = *(_QWORD *)(a1 + 48);
  if (!v32)
    v32 = *(_QWORD *)(qword_1023115F0 + 48);
  v33 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DA9464(v32);
  v35 = (int)v33;
  if (v33 >= 0x80)
    v36 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v33, v34);
  else
    v36 = 1;
  v4 = (v4 + v35 + v36 + 1);
  v3 = *(_DWORD *)(a1 + 96);
  if ((v3 & 0x80) != 0)
  {
LABEL_55:
    v37 = *(_QWORD *)(a1 + 56);
    if (!v37)
      v37 = *(_QWORD *)(qword_1023115F0 + 56);
    v38 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DA9A04(v37);
    v40 = (int)v38;
    if (v38 >= 0x80)
      v41 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v38, v39);
    else
      v41 = 1;
    v4 = (v4 + v40 + v41 + 1);
    v3 = *(_DWORD *)(a1 + 96);
  }
LABEL_61:
  if ((v3 & 0xFF00) == 0)
    goto LABEL_88;
  if ((v3 & 0x100) != 0)
  {
    v42 = *(_QWORD *)(a1 + 64);
    if (!v42)
      v42 = *(_QWORD *)(qword_1023115F0 + 64);
    v43 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DAA424(v42);
    v45 = (int)v43;
    if (v43 >= 0x80)
      v46 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v43, v44);
    else
      v46 = 1;
    v4 = (v4 + v45 + v46 + 1);
    v3 = *(_DWORD *)(a1 + 96);
    if ((v3 & 0x200) == 0)
    {
LABEL_64:
      if ((v3 & 0x400) == 0)
        goto LABEL_88;
      goto LABEL_82;
    }
  }
  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_64;
  }
  v47 = *(_QWORD *)(a1 + 72);
  if (!v47)
    v47 = *(_QWORD *)(qword_1023115F0 + 72);
  v48 = *(_DWORD *)(v47 + 16);
  v49 = 2 * (v48 & 1);
  if ((v48 & 2) != 0)
    v49 += 2;
  if ((v48 & 4) != 0)
    v49 += 2;
  if (*(_DWORD *)(v47 + 16))
    v50 = v49;
  else
    v50 = 0;
  *(_DWORD *)(v47 + 12) = v50;
  v4 = (v4 + v50 + 2);
  if ((*(_DWORD *)(a1 + 96) & 0x400) != 0)
  {
LABEL_82:
    v51 = *(_QWORD *)(a1 + 80);
    if (!v51)
      v51 = *(_QWORD *)(qword_1023115F0 + 80);
    v52 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DA768C(v51);
    v54 = (int)v52;
    if (v52 >= 0x80)
      v55 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v52, v53);
    else
      v55 = 1;
    v4 = (v4 + v54 + v55 + 1);
  }
LABEL_88:
  *(_DWORD *)(a1 + 92) = v4;
  return v4;
}

void sub_100DAC324(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100DAA9EC(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DAC370()
{
  return 1;
}

_QWORD *sub_100DAC378@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.SyncState");
}

double sub_100DAC388(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  char v7;
  char v8;
  _BYTE v9[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 4792);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 32);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 32) |= 1u;
      *(double *)(a1 + 8) = result;
      v6 = *(_DWORD *)(a2 + 32);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          return result;
        goto LABEL_7;
      }
    }
    else if ((*(_BYTE *)(a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 32) |= 2u;
    *(double *)(a1 + 16) = result;
    if ((*(_DWORD *)(a2 + 32) & 4) == 0)
      return result;
LABEL_7:
    v7 = *(_BYTE *)(a2 + 24);
    *(_DWORD *)(a1 + 32) |= 4u;
    *(_BYTE *)(a1 + 24) = v7;
  }
  return result;
}

void sub_100DAC458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DAC470(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185400;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DAC480(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185400;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100DAC4B0()
{
  operator new();
}

uint64_t sub_100DAC4F0(uint64_t result)
{
  if (*(_BYTE *)(result + 32))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_100DAC508(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned __int8 *v14;
  uint64_t result;
  unsigned int v16[2];

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_25;
        *(_QWORD *)v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v16) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)v16;
        *(_DWORD *)(a1 + 32) |= 1u;
        v11 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v11 < *((_QWORD *)this + 2) && *v11 == 17)
        {
          *((_QWORD *)this + 1) = v11 + 1;
          goto LABEL_17;
        }
      }
      if (v7 != 2)
        break;
      v8 = TagFallback & 7;
      if (v8 != 1)
        goto LABEL_25;
LABEL_17:
      *(_QWORD *)v16 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v16) & 1) == 0)return 0;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)v16;
      *(_DWORD *)(a1 + 32) |= 2u;
      v12 = (_BYTE *)*((_QWORD *)this + 1);
      v9 = *((_QWORD *)this + 2);
      if ((unint64_t)v12 < v9 && *v12 == 24)
      {
        v10 = v12 + 1;
        *((_QWORD *)this + 1) = v10;
LABEL_21:
        v16[0] = 0;
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v16);
          if (!(_DWORD)result)
            return result;
          v13 = v16[0];
          v14 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          v13 = *v10;
          v14 = (unsigned __int8 *)(v10 + 1);
          *((_QWORD *)this + 1) = v14;
        }
        *(_BYTE *)(a1 + 24) = v13 != 0;
        *(_DWORD *)(a1 + 32) |= 4u;
        if (v14 == (unsigned __int8 *)v9 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v7 == 3)
    {
      v8 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v10 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        goto LABEL_21;
      }
    }
    else
    {
      v8 = TagFallback & 7;
    }
LABEL_25:
    if (v8 == 4)
      return 1;
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0);
  return 0;
}

uint64_t sub_100DAC6F4(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 32);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 24), a2, a4);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 16), a3);
  if ((*(_DWORD *)(v5 + 32) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 24), a2, a4);
  return result;
}

uint64_t sub_100DAC76C(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(a1 + 32);
  if (*(_BYTE *)(a1 + 32))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0)
      v2 += 9;
    if ((v1 & 4) != 0)
      v1 = v2 + 2;
    else
      v1 = v2;
  }
  *(_DWORD *)(a1 + 28) = v1;
  return v1;
}

double sub_100DAC7A4(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100DAC388(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DAC7F0()
{
  return 1;
}

_QWORD *sub_100DAC7F8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.SvTime");
}

double sub_100DAC808(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  char v7;
  char v8;
  _BYTE v9[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 5023);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 32);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 32) |= 1u;
      *(double *)(a1 + 8) = result;
      v6 = *(_DWORD *)(a2 + 32);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          return result;
        goto LABEL_7;
      }
    }
    else if ((*(_BYTE *)(a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 32) |= 2u;
    *(double *)(a1 + 16) = result;
    if ((*(_DWORD *)(a2 + 32) & 4) == 0)
      return result;
LABEL_7:
    v7 = *(_BYTE *)(a2 + 24);
    *(_DWORD *)(a1 + 32) |= 4u;
    *(_BYTE *)(a1 + 24) = v7;
  }
  return result;
}

void sub_100DAC8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DAC8F0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185478;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DAC900(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185478;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100DAC930()
{
  operator new();
}

uint64_t sub_100DAC970(uint64_t result)
{
  if (*(_BYTE *)(result + 32))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_100DAC988(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned __int8 *v14;
  uint64_t result;
  unsigned int v16[2];

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_25;
        *(_QWORD *)v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v16) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)v16;
        *(_DWORD *)(a1 + 32) |= 1u;
        v11 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v11 < *((_QWORD *)this + 2) && *v11 == 17)
        {
          *((_QWORD *)this + 1) = v11 + 1;
          goto LABEL_17;
        }
      }
      if (v7 != 2)
        break;
      v8 = TagFallback & 7;
      if (v8 != 1)
        goto LABEL_25;
LABEL_17:
      *(_QWORD *)v16 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v16) & 1) == 0)return 0;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)v16;
      *(_DWORD *)(a1 + 32) |= 2u;
      v12 = (_BYTE *)*((_QWORD *)this + 1);
      v9 = *((_QWORD *)this + 2);
      if ((unint64_t)v12 < v9 && *v12 == 24)
      {
        v10 = v12 + 1;
        *((_QWORD *)this + 1) = v10;
LABEL_21:
        v16[0] = 0;
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v16);
          if (!(_DWORD)result)
            return result;
          v13 = v16[0];
          v14 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          v13 = *v10;
          v14 = (unsigned __int8 *)(v10 + 1);
          *((_QWORD *)this + 1) = v14;
        }
        *(_BYTE *)(a1 + 24) = v13 != 0;
        *(_DWORD *)(a1 + 32) |= 4u;
        if (v14 == (unsigned __int8 *)v9 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v7 == 3)
    {
      v8 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v10 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        goto LABEL_21;
      }
    }
    else
    {
      v8 = TagFallback & 7;
    }
LABEL_25:
    if (v8 == 4)
      return 1;
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0);
  return 0;
}

uint64_t sub_100DACB74(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 32);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 24), a2, a4);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 16), a3);
  if ((*(_DWORD *)(v5 + 32) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 24), a2, a4);
  return result;
}

uint64_t sub_100DACBEC(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(a1 + 32);
  if (*(_BYTE *)(a1 + 32))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0)
      v2 += 9;
    if ((v1 & 4) != 0)
      v1 = v2 + 2;
    else
      v1 = v2;
  }
  *(_DWORD *)(a1 + 28) = v1;
  return v1;
}

double sub_100DACC24(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100DAC808(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DACC70()
{
  return 1;
}

_QWORD *sub_100DACC78@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.FrequencyOffset");
}

void sub_100DACC88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 5283);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      v7 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 32) |= 1u;
      *(_QWORD *)(a1 + 8) = v7;
      v5 = *(_DWORD *)(a2 + 32);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_12;
      }
    }
    else if ((*(_BYTE *)(a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 32) |= 2u;
    *(_QWORD *)(a1 + 16) = v8;
    v5 = *(_DWORD *)(a2 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        return;
      goto LABEL_8;
    }
LABEL_12:
    v9 = *(_BYTE *)(a2 + 24);
    *(_DWORD *)(a1 + 32) |= 4u;
    *(_BYTE *)(a1 + 24) = v9;
    if ((*(_DWORD *)(a2 + 32) & 8) == 0)
      return;
LABEL_8:
    v6 = *(_BYTE *)(a2 + 25);
    *(_DWORD *)(a1 + 32) |= 8u;
    *(_BYTE *)(a1 + 25) = v6;
  }
}

void sub_100DACD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DACD90(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021854F0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DACDA0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021854F0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100DACDD0()
{
  operator new();
}

uint64_t sub_100DACE10(uint64_t result)
{
  if (*(_BYTE *)(result + 32))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_100DACE28(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  _BYTE *v8;
  unint64_t v9;
  _BYTE *v10;
  char *v11;
  unsigned int v12;
  _BYTE *v13;
  char *v14;
  uint64_t result;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned int v18[2];

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_24;
        *(_QWORD *)v18 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v18) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)v18;
        *(_DWORD *)(a1 + 32) |= 1u;
        v8 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 != 17)
          continue;
        *((_QWORD *)this + 1) = v8 + 1;
        goto LABEL_14;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_24;
LABEL_14:
        *(_QWORD *)v18 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v18) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)v18;
        *(_DWORD *)(a1 + 32) |= 2u;
        v10 = (_BYTE *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        if ((unint64_t)v10 >= v9 || *v10 != 24)
          continue;
        v11 = v10 + 1;
        *((_QWORD *)this + 1) = v11;
LABEL_20:
        v18[0] = 0;
        if ((unint64_t)v11 >= v9 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v18);
          if (!(_DWORD)result)
            return result;
          v12 = v18[0];
          v13 = (_BYTE *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          v12 = *v11;
          v13 = v11 + 1;
          *((_QWORD *)this + 1) = v13;
        }
        *(_BYTE *)(a1 + 24) = v12 != 0;
        *(_DWORD *)(a1 + 32) |= 4u;
        if ((unint64_t)v13 >= v9 || *v13 != 32)
          continue;
        v14 = v13 + 1;
        *((_QWORD *)this + 1) = v14;
LABEL_33:
        v18[0] = 0;
        if ((unint64_t)v14 >= v9 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v18);
          if (!(_DWORD)result)
            return result;
          v16 = v18[0];
          v17 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          v16 = *v14;
          v17 = (unsigned __int8 *)(v14 + 1);
          *((_QWORD *)this + 1) = v17;
        }
        *(_BYTE *)(a1 + 25) = v16 != 0;
        *(_DWORD *)(a1 + 32) |= 8u;
        if (v17 != (unsigned __int8 *)v9 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        break;
      case 3u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v11 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        goto LABEL_20;
      case 4u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v14 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        goto LABEL_33;
      default:
        v7 = TagFallback & 7;
LABEL_24:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_100DAD0AC(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 32);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 25), a2, a4);
  }
LABEL_8:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 24), a2, a4);
  if ((*(_DWORD *)(v5 + 32) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 25), a2, a4);
  return result;
}

uint64_t sub_100DAD140(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(a1 + 32);
  if (*(_BYTE *)(a1 + 32))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0)
      v2 += 9;
    if ((v1 & 4) != 0)
      v2 += 2;
    if ((v1 & 8) != 0)
      v1 = v2 + 2;
    else
      v1 = v2;
  }
  *(_DWORD *)(a1 + 28) = v1;
  return v1;
}

void sub_100DAD184(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100DACC88(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DAD1D0()
{
  return 1;
}

_QWORD *sub_100DAD1D8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.FrequencyOffsetFromPhaseTracking");
}

double sub_100DAD1E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 5580);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 48);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 48) & 1) != 0)
    {
      v8 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 48) |= 1u;
      *(_QWORD *)(a1 + 8) = v8;
      v6 = *(_DWORD *)(a2 + 48);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          goto LABEL_7;
        goto LABEL_13;
      }
    }
    else if ((*(_BYTE *)(a2 + 48) & 2) == 0)
    {
      goto LABEL_6;
    }
    v9 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 48) |= 2u;
    *(_QWORD *)(a1 + 16) = v9;
    v6 = *(_DWORD *)(a2 + 48);
    if ((v6 & 4) == 0)
    {
LABEL_7:
      if ((v6 & 8) == 0)
        goto LABEL_8;
      goto LABEL_14;
    }
LABEL_13:
    result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 48) |= 4u;
    *(double *)(a1 + 24) = result;
    v6 = *(_DWORD *)(a2 + 48);
    if ((v6 & 8) == 0)
    {
LABEL_8:
      if ((v6 & 0x10) == 0)
        return result;
      goto LABEL_9;
    }
LABEL_14:
    result = *(double *)(a2 + 32);
    *(_DWORD *)(a1 + 48) |= 8u;
    *(double *)(a1 + 32) = result;
    if ((*(_DWORD *)(a2 + 48) & 0x10) == 0)
      return result;
LABEL_9:
    v7 = *(_BYTE *)(a2 + 40);
    *(_DWORD *)(a1 + 48) |= 0x10u;
    *(_BYTE *)(a1 + 40) = v7;
  }
  return result;
}

void sub_100DAD2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DAD310(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185568;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DAD320(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185568;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100DAD350()
{
  operator new();
}

uint64_t sub_100DAD398(uint64_t result)
{
  if (*(_BYTE *)(result + 48))
  {
    *(_BYTE *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
  }
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t sub_100DAD3B8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  unint64_t *v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  unint64_t v10;
  char *v11;
  _BYTE *v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t result;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  unsigned int v20;
  unsigned __int8 *v21;
  unsigned int v22[2];

  v5 = (unint64_t *)(a1 + 8);
  v6 = (unint64_t *)(a1 + 16);
  while (2)
  {
    v7 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v7 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v11 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v12 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v11;
          v12 = v11 + 1;
          *((_QWORD *)this + 1) = v12;
        }
        *(_DWORD *)(a1 + 48) |= 1u;
        if ((unint64_t)v12 < v10 && *v12 == 16)
        {
          v13 = v12 + 1;
          *((_QWORD *)this + 1) = v13;
          goto LABEL_29;
        }
        continue;
      case 2u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v13 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
LABEL_29:
        if ((unint64_t)v13 >= v10 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v6);
          if (!(_DWORD)result)
            return result;
          v17 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          *v6 = *v13;
          v17 = v13 + 1;
          *((_QWORD *)this + 1) = v17;
        }
        *(_DWORD *)(a1 + 48) |= 2u;
        if ((unint64_t)v17 >= v10 || *v17 != 25)
          continue;
        *((_QWORD *)this + 1) = v17 + 1;
LABEL_37:
        *(_QWORD *)v22 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v22) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)v22;
        *(_DWORD *)(a1 + 48) |= 4u;
        v18 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v18 >= *((_QWORD *)this + 2) || *v18 != 33)
          continue;
        *((_QWORD *)this + 1) = v18 + 1;
LABEL_41:
        *(_QWORD *)v22 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v22) & 1) != 0)
        {
          *(_QWORD *)(a1 + 32) = *(_QWORD *)v22;
          *(_DWORD *)(a1 + 48) |= 8u;
          v19 = (_BYTE *)*((_QWORD *)this + 1);
          v14 = *((_QWORD *)this + 2);
          if ((unint64_t)v19 < v14 && *v19 == 40)
          {
            v15 = v19 + 1;
            *((_QWORD *)this + 1) = v15;
LABEL_45:
            v22[0] = 0;
            if ((unint64_t)v15 >= v14 || *v15 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v22);
              if (!(_DWORD)result)
                return result;
              v20 = v22[0];
              v21 = (unsigned __int8 *)*((_QWORD *)this + 1);
              v14 = *((_QWORD *)this + 2);
            }
            else
            {
              v20 = *v15;
              v21 = (unsigned __int8 *)(v15 + 1);
              *((_QWORD *)this + 1) = v21;
            }
            *(_BYTE *)(a1 + 40) = v20 != 0;
            *(_DWORD *)(a1 + 48) |= 0x10u;
            if (v21 == (unsigned __int8 *)v14
              && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
            {
              *((_DWORD *)this + 8) = 0;
              result = 1;
              *((_BYTE *)this + 36) = 1;
              return result;
            }
          }
          continue;
        }
        return 0;
      case 3u:
        v9 = TagFallback & 7;
        if (v9 == 1)
          goto LABEL_37;
        goto LABEL_20;
      case 4u:
        v9 = TagFallback & 7;
        if (v9 == 1)
          goto LABEL_41;
        goto LABEL_20;
      case 5u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v15 = (char *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
        goto LABEL_45;
      default:
        v9 = TagFallback & 7;
LABEL_20:
        if (v9 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_100DAD6AC(uint64_t result, unint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 48);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(result + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 48);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 16), a2, a4);
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v5 + 24), a3);
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 40), a2, a4);
  }
LABEL_10:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, a2, *(double *)(v5 + 32), a3);
  if ((*(_DWORD *)(v5 + 48) & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 40), a2, a4);
  return result;
}

uint64_t sub_100DAD75C(uint64_t a1, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;
  unsigned int v6;

  LOBYTE(v3) = *(_BYTE *)(a1 + 48);
  if (!(_BYTE)v3)
  {
    result = 0;
    goto LABEL_15;
  }
  if ((*(_BYTE *)(a1 + 48) & 1) == 0)
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 48) & 2) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
  v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 2) != 0)
  {
LABEL_7:
    v4 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 16), a2)+ 1;
    v3 = *(_DWORD *)(a1 + 48);
  }
LABEL_8:
  v6 = v4 + 9;
  if ((v3 & 4) == 0)
    v6 = v4;
  if ((v3 & 8) != 0)
    v6 += 9;
  if ((v3 & 0x10) != 0)
    result = v6 + 2;
  else
    result = v6;
LABEL_15:
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

double sub_100DAD7E8(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100DAD1E8(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DAD834()
{
  return 1;
}

_QWORD *sub_100DAD83C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.PhaseTracking");
}

double sub_100DAD84C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 5839);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 32);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      *(_DWORD *)(a1 + 32) |= 1u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v8 = *(_QWORD *)(a2 + 8);
      if (!v8)
        v8 = *(_QWORD *)(qword_102311618 + 8);
      result = sub_100DAC388(v7, v8);
      v6 = *(_DWORD *)(a2 + 32);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          return result;
        goto LABEL_7;
      }
    }
    else if ((*(_BYTE *)(a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    *(_DWORD *)(a1 + 32) |= 2u;
    v9 = *(_QWORD *)(a1 + 16);
    if (!v9)
      operator new();
    v10 = *(_QWORD *)(a2 + 16);
    if (!v10)
      v10 = *(_QWORD *)(qword_102311618 + 16);
    result = sub_100DAC808(v9, v10);
    if ((*(_DWORD *)(a2 + 32) & 4) != 0)
    {
LABEL_7:
      LODWORD(result) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a1 + 32) |= 4u;
      *(_DWORD *)(a1 + 24) = LODWORD(result);
    }
  }
  return result;
}

void sub_100DAD9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100DAD9CC(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if ((_QWORD *)qword_102311618 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    result = (_QWORD *)v1[2];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_100DADA28(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021855E0;
  sub_100DAD9CC(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DADA58(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021855E0;
  sub_100DAD9CC(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100DADA9C()
{
  operator new();
}

uint64_t sub_100DADAD8(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  LOBYTE(v1) = *(_BYTE *)(result + 32);
  if ((_BYTE)v1)
  {
    if ((*(_BYTE *)(result + 32) & 1) != 0)
    {
      v2 = *(_QWORD *)(result + 8);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 32))
        {
          *(_QWORD *)(v2 + 8) = 0;
          *(_QWORD *)(v2 + 16) = 0;
          *(_BYTE *)(v2 + 24) = 0;
        }
        *(_DWORD *)(v2 + 32) = 0;
        v1 = *(_DWORD *)(result + 32);
      }
    }
    if ((v1 & 2) != 0)
    {
      v3 = *(_QWORD *)(result + 16);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 32))
        {
          *(_QWORD *)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 16) = 0;
          *(_BYTE *)(v3 + 24) = 0;
        }
        *(_DWORD *)(v3 + 32) = 0;
      }
    }
    *(_DWORD *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_100DADB30(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  _BYTE *v27;
  uint64_t result;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v5 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((_QWORD *)this + 1) = v5 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v8 = TagFallback & 7;
          if (v8 != 2)
            goto LABEL_20;
          *(_DWORD *)(a1 + 32) |= 1u;
          v9 = *(_QWORD *)(a1 + 8);
          if (!v9)
            operator new();
          v30 = 0;
          v10 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v10 >= *((_QWORD *)this + 2) || *v10 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v30))return 0;
          }
          else
          {
            v30 = *v10;
            *((_QWORD *)this + 1) = v10 + 1;
          }
          v11 = *((_DWORD *)this + 14);
          v12 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v11 + 1;
          if (v11 >= v12)
            return 0;
          v13 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v30);
          if (!sub_100DAC508(v9, this, v14) || !*((_BYTE *)this + 36))
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v13);
          v15 = *((_DWORD *)this + 14);
          v16 = __OFSUB__(v15, 1);
          v17 = v15 - 1;
          if (v17 < 0 == v16)
            *((_DWORD *)this + 14) = v17;
          v18 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v18 < *((_QWORD *)this + 2) && *v18 == 18)
          {
            *((_QWORD *)this + 1) = v18 + 1;
            goto LABEL_32;
          }
        }
        if (v7 != 2)
          break;
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_20;
LABEL_32:
        *(_DWORD *)(a1 + 32) |= 2u;
        v19 = *(_QWORD *)(a1 + 16);
        if (!v19)
          operator new();
        v31 = 0;
        v20 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v20 >= *((_QWORD *)this + 2) || *v20 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v31))return 0;
        }
        else
        {
          v31 = *v20;
          *((_QWORD *)this + 1) = v20 + 1;
        }
        v21 = *((_DWORD *)this + 14);
        v22 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v21 + 1;
        if (v21 >= v22)
          return 0;
        v23 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v31);
        if (!sub_100DAC988(v19, this, v24) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v23);
        v25 = *((_DWORD *)this + 14);
        v16 = __OFSUB__(v25, 1);
        v26 = v25 - 1;
        if (v26 < 0 == v16)
          *((_DWORD *)this + 14) = v26;
        v27 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v27 < *((_QWORD *)this + 2) && *v27 == 29)
        {
          *((_QWORD *)this + 1) = v27 + 1;
          goto LABEL_46;
        }
      }
      if (v7 != 3)
        break;
      v8 = TagFallback & 7;
      if (v8 != 5)
        goto LABEL_20;
LABEL_46:
      v29 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v29) & 1) == 0)
        return 0;
      *(_DWORD *)(a1 + 24) = v29;
      *(_DWORD *)(a1 + 32) |= 4u;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    v8 = TagFallback & 7;
LABEL_20:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_100DADE74(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = result;
  v6 = *(_DWORD *)(result + 32);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102311618 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (int)a2, *(float *)(v5 + 24), a3);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
    v8 = *(_QWORD *)(qword_102311618 + 16);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  if ((*(_DWORD *)(v5 + 32) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (int)a2, *(float *)(v5 + 24), a3);
  return result;
}

uint64_t sub_100DADF0C(uint64_t a1)
{
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;

  LOBYTE(v1) = *(_BYTE *)(a1 + 32);
  if (!(_BYTE)v1)
  {
    v2 = 0;
    goto LABEL_27;
  }
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (!v2)
      v2 = *(_QWORD *)(qword_102311618 + 8);
    v3 = *(unsigned __int8 *)(v2 + 32);
    if (*(_BYTE *)(v2 + 32))
    {
      v4 = (v3 << 31 >> 31) & 9;
      if ((v3 & 2) != 0)
        v4 += 9;
      if ((v3 & 4) != 0)
        v3 = v4 + 2;
      else
        v3 = v4;
    }
    *(_DWORD *)(v2 + 28) = v3;
    LODWORD(v2) = v3 + 2;
    v1 = *(_DWORD *)(a1 + 32);
    if ((v1 & 2) == 0)
      goto LABEL_24;
    goto LABEL_15;
  }
  LODWORD(v2) = 0;
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
LABEL_15:
    v5 = *(_QWORD *)(a1 + 16);
    if (!v5)
      v5 = *(_QWORD *)(qword_102311618 + 16);
    v6 = *(unsigned __int8 *)(v5 + 32);
    if (*(_BYTE *)(v5 + 32))
    {
      v7 = (v6 << 31 >> 31) & 9;
      if ((v6 & 2) != 0)
        v7 += 9;
      if ((v6 & 4) != 0)
        v6 = v7 + 2;
      else
        v6 = v7;
    }
    *(_DWORD *)(v5 + 28) = v6;
    LODWORD(v2) = v2 + v6 + 2;
    v1 = *(_DWORD *)(a1 + 32);
  }
LABEL_24:
  if ((v1 & 4) != 0)
    v2 = (v2 + 5);
  else
    v2 = v2;
LABEL_27:
  *(_DWORD *)(a1 + 28) = v2;
  return v2;
}

double sub_100DADFE4(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100DAD84C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DAE030()
{
  return 1;
}

_QWORD *sub_100DAE038@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.SignalCorrelationPeak");
}

void sub_100DAE048(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 6075);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      v6 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 32) |= 1u;
      *(_QWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 32);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          return;
LABEL_10:
        v8 = *(_DWORD *)(a2 + 24);
        if (v8 >= 6)
          sub_10192A4E8();
        *(_DWORD *)(a1 + 32) |= 4u;
        *(_DWORD *)(a1 + 24) = v8;
        return;
      }
    }
    else if ((*(_BYTE *)(a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    v7 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 32) |= 2u;
    *(_QWORD *)(a1 + 16) = v7;
    if ((*(_DWORD *)(a2 + 32) & 4) == 0)
      return;
    goto LABEL_10;
  }
}

void sub_100DAE124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DAE13C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185658;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DAE14C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185658;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100DAE17C()
{
  operator new();
}

uint64_t sub_100DAE1B8(uint64_t result)
{
  if (*(_BYTE *)(result + 32))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_100DAE1D0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned int v13;
  uint64_t result;
  unsigned int v15[2];

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_25;
        *(_QWORD *)v15 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v15) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)v15;
        *(_DWORD *)(a1 + 32) |= 1u;
        v11 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v11 < *((_QWORD *)this + 2) && *v11 == 17)
        {
          *((_QWORD *)this + 1) = v11 + 1;
          goto LABEL_17;
        }
      }
      if (v7 != 2)
        break;
      v8 = TagFallback & 7;
      if (v8 != 1)
        goto LABEL_25;
LABEL_17:
      *(_QWORD *)v15 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v15) & 1) == 0)return 0;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)v15;
      *(_DWORD *)(a1 + 32) |= 2u;
      v12 = (_BYTE *)*((_QWORD *)this + 1);
      v9 = *((_QWORD *)this + 2);
      if ((unint64_t)v12 < v9 && *v12 == 24)
      {
        v10 = v12 + 1;
        *((_QWORD *)this + 1) = v10;
LABEL_21:
        v15[0] = 0;
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v15);
          if (!(_DWORD)result)
            return result;
          v13 = v15[0];
        }
        else
        {
          v13 = *v10;
          *((_QWORD *)this + 1) = v10 + 1;
        }
        if (v13 <= 5)
        {
          *(_DWORD *)(a1 + 32) |= 4u;
          *(_DWORD *)(a1 + 24) = v13;
        }
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v7 == 3)
    {
      v8 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v10 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        goto LABEL_21;
      }
    }
    else
    {
      v8 = TagFallback & 7;
    }
LABEL_25:
    if (v8 == 4)
      return 1;
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0);
  return 0;
}

uint64_t sub_100DAE3BC(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 32);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 24), a2, a4);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 16), a3);
  if ((*(_DWORD *)(v5 + 32) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 24), a2, a4);
  return result;
}

uint64_t sub_100DAE434(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;

  v3 = *(unsigned __int8 *)(a1 + 32);
  if (*(_BYTE *)(a1 + 32))
  {
    v4 = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0)
      v5 = v4 + 9;
    else
      v5 = v4;
    if ((v3 & 4) != 0)
    {
      v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
      if ((v6 & 0x80000000) != 0)
      {
        v7 = 11;
      }
      else if (v6 >= 0x80)
      {
        v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      }
      else
      {
        v7 = 2;
      }
      v5 = (v7 + v5);
    }
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a1 + 28) = v5;
  return v5;
}

void sub_100DAE4B0(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100DAE048(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DAE4FC()
{
  return 1;
}

_QWORD *sub_100DAE504@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.FullSvTime");
}

float sub_100DAE514(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float result;
  int v6;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 6306);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      result = *(float *)(a2 + 8);
      *(_DWORD *)(a1 + 24) |= 1u;
      *(float *)(a1 + 8) = result;
      v6 = *(_DWORD *)(a2 + 24);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          return result;
        goto LABEL_7;
      }
    }
    else if ((*(_BYTE *)(a2 + 24) & 2) == 0)
    {
      goto LABEL_6;
    }
    result = *(float *)(a2 + 12);
    *(_DWORD *)(a1 + 24) |= 2u;
    *(float *)(a1 + 12) = result;
    if ((*(_DWORD *)(a2 + 24) & 4) == 0)
      return result;
LABEL_7:
    result = *(float *)(a2 + 16);
    *(_DWORD *)(a1 + 24) |= 4u;
    *(float *)(a1 + 16) = result;
  }
  return result;
}

void sub_100DAE5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DAE5FC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021856D0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DAE60C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021856D0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100DAE63C()
{
  operator new();
}

uint64_t sub_100DAE678(uint64_t result)
{
  if (*(_BYTE *)(result + 24))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_100DAE690(_DWORD *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t result;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if (v8 != 5)
          goto LABEL_27;
        v14 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v14) & 1) == 0)
          return 0;
        a1[2] = v14;
        a1[6] |= 1u;
        v9 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 < *((_QWORD *)this + 2) && *v9 == 21)
        {
          *((_QWORD *)this + 1) = v9 + 1;
LABEL_17:
          v13 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v13) & 1) == 0)
            return 0;
          a1[3] = v13;
          a1[6] |= 2u;
          v10 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v10 < *((_QWORD *)this + 2) && *v10 == 29)
          {
            *((_QWORD *)this + 1) = v10 + 1;
            goto LABEL_21;
          }
        }
      }
      if (v7 == 2)
      {
        v8 = TagFallback & 7;
        if (v8 != 5)
          goto LABEL_27;
        goto LABEL_17;
      }
      if (v7 != 3)
      {
        v8 = TagFallback & 7;
        goto LABEL_27;
      }
      v8 = TagFallback & 7;
      if (v8 == 5)
        break;
LABEL_27:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_21:
    v12 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v12) & 1) == 0)
      return 0;
    a1[4] = v12;
    a1[6] |= 4u;
  }
  while (*((_QWORD *)this + 1) != *((_QWORD *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  result = 1;
  *((_BYTE *)this + 36) = 1;
  return result;
}

uint64_t sub_100DAE854(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  int v5;

  v4 = result;
  v5 = *(_DWORD *)(result + 24);
  if ((v5 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(float *)(result + 8), a3);
    v5 = *(_DWORD *)(v4 + 24);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        return result;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(float *)(v4 + 16), a3);
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(float *)(v4 + 12), a3);
  if ((*(_DWORD *)(v4 + 24) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(float *)(v4 + 16), a3);
  return result;
}

uint64_t sub_100DAE8CC(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(a1 + 24);
  if (*(_BYTE *)(a1 + 24))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 5;
    if ((v1 & 2) != 0)
      v2 += 5;
    if ((v1 & 4) != 0)
      v1 = v2 + 5;
    else
      v1 = v2;
  }
  *(_DWORD *)(a1 + 20) = v1;
  return v1;
}

float sub_100DAE904(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100DAE514(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DAE950()
{
  return 1;
}

_QWORD *sub_100DAE958@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.SvMeasurementUsage");
}

void sub_100DAE968(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  const std::string *v29;
  std::string *v30;
  char v31;
  _BYTE v32[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v32, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 6986);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v32, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v31, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v32);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 88), *(_DWORD *)(a2 + 96) + *(_DWORD *)(a1 + 96));
  if (*(int *)(a2 + 96) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 8 * v5);
      v7 = *(_DWORD *)(a1 + 100);
      v8 = *(int *)(a1 + 96);
      if ((int)v8 >= v7)
      {
        if (v7 == *(_DWORD *)(a1 + 104))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 88), v7 + 1);
          v7 = *(_DWORD *)(a1 + 100);
        }
        *(_DWORD *)(a1 + 100) = v7 + 1;
        operator new();
      }
      v9 = *(_QWORD *)(a1 + 88);
      *(_DWORD *)(a1 + 96) = v8 + 1;
      sub_100DAD84C(*(_QWORD *)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *(int *)(a2 + 96));
  }
  v10 = *(_DWORD *)(a2 + 116);
  if (!(_BYTE)v10)
    goto LABEL_21;
  if ((v10 & 1) != 0)
  {
    v15 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 116) |= 1u;
    *(_DWORD *)(a1 + 8) = v15;
    v10 = *(_DWORD *)(a2 + 116);
    if ((v10 & 2) == 0)
    {
LABEL_14:
      if ((v10 & 4) == 0)
        goto LABEL_15;
      goto LABEL_37;
    }
  }
  else if ((v10 & 2) == 0)
  {
    goto LABEL_14;
  }
  v16 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 116) |= 2u;
  *(_DWORD *)(a1 + 12) = v16;
  v10 = *(_DWORD *)(a2 + 116);
  if ((v10 & 4) == 0)
  {
LABEL_15:
    if ((v10 & 8) == 0)
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_37:
  *(_DWORD *)(a1 + 116) |= 4u;
  v17 = *(_QWORD *)(a1 + 16);
  if (!v17)
    operator new();
  v18 = *(_QWORD *)(a2 + 16);
  if (!v18)
    v18 = *(_QWORD *)(qword_102311630 + 16);
  sub_100DAE048(v17, v18);
  v10 = *(_DWORD *)(a2 + 116);
  if ((v10 & 8) == 0)
  {
LABEL_16:
    if ((v10 & 0x10) == 0)
      goto LABEL_17;
    goto LABEL_47;
  }
LABEL_42:
  *(_DWORD *)(a1 + 116) |= 8u;
  v19 = *(_QWORD *)(a1 + 24);
  if (!v19)
    operator new();
  v20 = *(_QWORD *)(a2 + 24);
  if (!v20)
    v20 = *(_QWORD *)(qword_102311630 + 24);
  sub_100DAE514(v19, v20);
  v10 = *(_DWORD *)(a2 + 116);
  if ((v10 & 0x10) == 0)
  {
LABEL_17:
    if ((v10 & 0x20) == 0)
      goto LABEL_18;
LABEL_52:
    *(_DWORD *)(a1 + 116) |= 0x20u;
    v23 = *(_QWORD *)(a1 + 40);
    if (!v23)
      operator new();
    v24 = *(_QWORD *)(a2 + 40);
    if (!v24)
      v24 = *(_QWORD *)(qword_102311630 + 40);
    sub_100DAE514(v23, v24);
    v10 = *(_DWORD *)(a2 + 116);
    if ((v10 & 0x40) == 0)
    {
LABEL_19:
      if ((v10 & 0x80) == 0)
        goto LABEL_21;
      goto LABEL_20;
    }
    goto LABEL_57;
  }
LABEL_47:
  *(_DWORD *)(a1 + 116) |= 0x10u;
  v21 = *(_QWORD *)(a1 + 32);
  if (!v21)
    operator new();
  v22 = *(_QWORD *)(a2 + 32);
  if (!v22)
    v22 = *(_QWORD *)(qword_102311630 + 32);
  sub_100DAE514(v21, v22);
  v10 = *(_DWORD *)(a2 + 116);
  if ((v10 & 0x20) != 0)
    goto LABEL_52;
LABEL_18:
  if ((v10 & 0x40) == 0)
    goto LABEL_19;
LABEL_57:
  v25 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 116) |= 0x40u;
  *(_DWORD *)(a1 + 48) = v25;
  v10 = *(_DWORD *)(a2 + 116);
  if ((v10 & 0x80) != 0)
  {
LABEL_20:
    v11 = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(a1 + 116) |= 0x80u;
    *(_DWORD *)(a1 + 52) = v11;
    v10 = *(_DWORD *)(a2 + 116);
  }
LABEL_21:
  if ((v10 & 0xFF00) == 0)
    return;
  if ((v10 & 0x100) != 0)
  {
    v12 = *(_DWORD *)(a2 + 56);
    if (v12 >= 7)
      sub_10192A538();
    *(_DWORD *)(a1 + 116) |= 0x100u;
    *(_DWORD *)(a1 + 56) = v12;
    v10 = *(_DWORD *)(a2 + 116);
  }
  if ((v10 & 0x200) != 0)
  {
    v13 = *(_DWORD *)(a2 + 60);
    if (v13 >= 7)
      sub_10192A510();
    *(_DWORD *)(a1 + 116) |= 0x200u;
    *(_DWORD *)(a1 + 60) = v13;
    v10 = *(_DWORD *)(a2 + 116);
  }
  if ((v10 & 0x400) != 0)
  {
    v26 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a1 + 116) |= 0x400u;
    *(_DWORD *)(a1 + 64) = v26;
    v10 = *(_DWORD *)(a2 + 116);
    if ((v10 & 0x800) == 0)
    {
LABEL_30:
      if ((v10 & 0x1000) == 0)
        goto LABEL_31;
      goto LABEL_61;
    }
  }
  else if ((v10 & 0x800) == 0)
  {
    goto LABEL_30;
  }
  v27 = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 116) |= 0x800u;
  *(_DWORD *)(a1 + 68) = v27;
  v10 = *(_DWORD *)(a2 + 116);
  if ((v10 & 0x1000) == 0)
  {
LABEL_31:
    if ((v10 & 0x2000) == 0)
      goto LABEL_32;
    goto LABEL_62;
  }
LABEL_61:
  v28 = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 116) |= 0x1000u;
  *(_DWORD *)(a1 + 72) = v28;
  v10 = *(_DWORD *)(a2 + 116);
  if ((v10 & 0x2000) == 0)
  {
LABEL_32:
    if ((v10 & 0x4000) == 0)
      return;
    goto LABEL_33;
  }
LABEL_62:
  v29 = *(const std::string **)(a2 + 80);
  *(_DWORD *)(a1 + 116) |= 0x2000u;
  v30 = *(std::string **)(a1 + 80);
  if (v30 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v30, v29);
  if ((*(_DWORD *)(a2 + 116) & 0x4000) != 0)
  {
LABEL_33:
    v14 = *(_DWORD *)(a2 + 76);
    *(_DWORD *)(a1 + 116) |= 0x4000u;
    *(_DWORD *)(a1 + 76) = v14;
  }
}

void sub_100DAEE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DAEE28(uint64_t *a1)
{
  uint64_t *v2;

  *a1 = (uint64_t)off_102185748;
  v2 = a1 + 11;
  sub_100DAEE68(a1);
  sub_10010C59C(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

_QWORD *sub_100DAEE68(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = result;
  v2 = result[10];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete();
  }
  if ((_QWORD *)qword_102311630 != result)
  {
    v4 = result[2];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v1[3];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = v1[4];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    result = (_QWORD *)v1[5];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_100DAEF30(uint64_t *a1)
{
  sub_100DAEE28(a1);
  operator delete();
}

void sub_100DAEF54()
{
  operator new();
}

uint64_t sub_100DAEFB4(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = result;
  v2 = *(_DWORD *)(result + 116);
  if ((_BYTE)v2)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((v2 & 4) != 0)
    {
      v3 = *(_QWORD *)(result + 16);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 32))
        {
          *(_QWORD *)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 16) = 0;
          *(_DWORD *)(v3 + 24) = 0;
        }
        *(_DWORD *)(v3 + 32) = 0;
        v2 = *(_DWORD *)(result + 116);
      }
    }
    if ((v2 & 8) != 0)
    {
      v4 = *(_QWORD *)(result + 24);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 24))
        {
          *(_QWORD *)(v4 + 8) = 0;
          *(_DWORD *)(v4 + 16) = 0;
        }
        *(_DWORD *)(v4 + 24) = 0;
        v2 = *(_DWORD *)(result + 116);
      }
    }
    if ((v2 & 0x10) != 0)
    {
      v5 = *(_QWORD *)(result + 32);
      if (v5)
      {
        if (*(_BYTE *)(v5 + 24))
        {
          *(_QWORD *)(v5 + 8) = 0;
          *(_DWORD *)(v5 + 16) = 0;
        }
        *(_DWORD *)(v5 + 24) = 0;
        v2 = *(_DWORD *)(result + 116);
      }
    }
    if ((v2 & 0x20) != 0)
    {
      v6 = *(_QWORD *)(result + 40);
      if (v6)
      {
        if (*(_BYTE *)(v6 + 24))
        {
          *(_QWORD *)(v6 + 8) = 0;
          *(_DWORD *)(v6 + 16) = 0;
        }
        *(_DWORD *)(v6 + 24) = 0;
        v2 = *(_DWORD *)(result + 116);
      }
    }
    *(_QWORD *)(result + 48) = 0;
  }
  if ((v2 & 0xFF00) != 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_DWORD *)(result + 72) = 0;
    if ((v2 & 0x2000) != 0)
    {
      v7 = *(_QWORD *)(result + 80);
      if ((_UNKNOWN *)v7 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v7 + 23) < 0)
        {
          **(_BYTE **)v7 = 0;
          *(_QWORD *)(v7 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v7 = 0;
          *(_BYTE *)(v7 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(result + 76) = 0;
  }
  if (*(int *)(result + 96) >= 1)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v1 + 88) + 8 * v8);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
      ++v8;
    }
    while (v8 < *(int *)(v1 + 96));
  }
  *(_DWORD *)(v1 + 96) = 0;
  *(_DWORD *)(v1 + 116) = 0;
  return result;
}

uint64_t sub_100DAF0FC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v8;
  char *v9;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v11;
  _BYTE *v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  int v25;
  unint64_t v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  int v34;
  _BYTE *v35;
  _DWORD *v36;
  char *v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  int v43;
  _BYTE *v44;
  _DWORD *v45;
  char *v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  _BYTE *v53;
  _DWORD *v54;
  char *v55;
  int v56;
  int v57;
  int v58;
  unsigned int v59;
  int v60;
  int v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t result;
  _BYTE *v65;
  unsigned int v66;
  _BYTE *v67;
  unsigned int v68;
  _BYTE *v69;
  unsigned int v70;
  _BYTE *v71;
  _BYTE *v72;
  _BYTE *v73;
  void *v74;
  _BYTE *v75;
  unsigned __int8 *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  int v82;
  int v83;
  int v84;
  unsigned int v85;
  int v86;
  int v87;
  unsigned __int8 *v88;
  unsigned int v89;

  v5 = (unsigned int *)(a1 + 48);
  v6 = (unsigned int *)(a1 + 52);
  v7 = (unsigned int *)(a1 + 76);
  v8 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 88);
  while (2)
  {
    v9 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v9;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v9 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v11 = TagFallback & 7;
        if (v11 != 5)
          goto LABEL_51;
        v89 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v89) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 8) = v89;
        *(_DWORD *)(a1 + 116) |= 1u;
        v12 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v12 >= *((_QWORD *)this + 2) || *v12 != 21)
          continue;
        *((_QWORD *)this + 1) = v12 + 1;
        goto LABEL_15;
      case 2u:
        v11 = TagFallback & 7;
        if (v11 != 5)
          goto LABEL_51;
LABEL_15:
        v89 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v89) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 12) = v89;
        v13 = *(_DWORD *)(a1 + 116) | 2;
        *(_DWORD *)(a1 + 116) = v13;
        v14 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v14 >= *((_QWORD *)this + 2) || *v14 != 26)
          continue;
        *((_QWORD *)this + 1) = v14 + 1;
LABEL_21:
        *(_DWORD *)(a1 + 116) = v13 | 4;
        v15 = *(_QWORD *)(a1 + 16);
        if (!v15)
          operator new();
        v89 = 0;
        v16 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v16 >= *((_QWORD *)this + 2) || *v16 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v89))return 0;
        }
        else
        {
          v89 = *v16;
          *((_QWORD *)this + 1) = v16 + 1;
        }
        v28 = *((_DWORD *)this + 14);
        v29 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v28 + 1;
        if (v28 >= v29)
          return 0;
        v30 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v89);
        if (!sub_100DAE1D0(v15, this, v31) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v30);
        v32 = *((_DWORD *)this + 14);
        v33 = __OFSUB__(v32, 1);
        v34 = v32 - 1;
        if (v34 < 0 == v33)
          *((_DWORD *)this + 14) = v34;
        v35 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v35 >= *((_QWORD *)this + 2) || *v35 != 34)
          continue;
        *((_QWORD *)this + 1) = v35 + 1;
LABEL_63:
        *(_DWORD *)(a1 + 116) |= 8u;
        v36 = *(_DWORD **)(a1 + 24);
        if (!v36)
          operator new();
        v89 = 0;
        v37 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v37 >= *((_QWORD *)this + 2) || *v37 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v89))return 0;
        }
        else
        {
          v89 = *v37;
          *((_QWORD *)this + 1) = v37 + 1;
        }
        v38 = *((_DWORD *)this + 14);
        v39 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v38 + 1;
        if (v38 >= v39)
          return 0;
        v40 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v89);
        if (!sub_100DAE690(v36, this, v41) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v40);
        v42 = *((_DWORD *)this + 14);
        v33 = __OFSUB__(v42, 1);
        v43 = v42 - 1;
        if (v43 < 0 == v33)
          *((_DWORD *)this + 14) = v43;
        v44 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v44 >= *((_QWORD *)this + 2) || *v44 != 42)
          continue;
        *((_QWORD *)this + 1) = v44 + 1;
LABEL_77:
        *(_DWORD *)(a1 + 116) |= 0x10u;
        v45 = *(_DWORD **)(a1 + 32);
        if (!v45)
          operator new();
        v89 = 0;
        v46 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v46 >= *((_QWORD *)this + 2) || *v46 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v89))return 0;
        }
        else
        {
          v89 = *v46;
          *((_QWORD *)this + 1) = v46 + 1;
        }
        v47 = *((_DWORD *)this + 14);
        v48 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v47 + 1;
        if (v47 >= v48)
          return 0;
        v49 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v89);
        if (!sub_100DAE690(v45, this, v50) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v49);
        v51 = *((_DWORD *)this + 14);
        v33 = __OFSUB__(v51, 1);
        v52 = v51 - 1;
        if (v52 < 0 == v33)
          *((_DWORD *)this + 14) = v52;
        v53 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v53 >= *((_QWORD *)this + 2) || *v53 != 50)
          continue;
        *((_QWORD *)this + 1) = v53 + 1;
LABEL_91:
        *(_DWORD *)(a1 + 116) |= 0x20u;
        v54 = *(_DWORD **)(a1 + 40);
        if (!v54)
          operator new();
        v89 = 0;
        v55 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v55 >= *((_QWORD *)this + 2) || *v55 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v89))return 0;
        }
        else
        {
          v89 = *v55;
          *((_QWORD *)this + 1) = v55 + 1;
        }
        v56 = *((_DWORD *)this + 14);
        v57 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v56 + 1;
        if (v56 >= v57)
          return 0;
        v58 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v89);
        if (!sub_100DAE690(v54, this, v59) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v58);
        v60 = *((_DWORD *)this + 14);
        v33 = __OFSUB__(v60, 1);
        v61 = v60 - 1;
        if (v61 < 0 == v33)
          *((_DWORD *)this + 14) = v61;
        v62 = (_BYTE *)*((_QWORD *)this + 1);
        v17 = *((_QWORD *)this + 2);
        if ((unint64_t)v62 >= v17 || *v62 != 56)
          continue;
        v18 = v62 + 1;
        *((_QWORD *)this + 1) = v18;
LABEL_105:
        if ((unint64_t)v18 >= v17 || *v18 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v63 = (_BYTE *)*((_QWORD *)this + 1);
          v17 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v18;
          v63 = v18 + 1;
          *((_QWORD *)this + 1) = v63;
        }
        *(_DWORD *)(a1 + 116) |= 0x40u;
        if ((unint64_t)v63 >= v17 || *v63 != 64)
          continue;
        v19 = v63 + 1;
        *((_QWORD *)this + 1) = v19;
LABEL_113:
        if ((unint64_t)v19 >= v17 || *v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!(_DWORD)result)
            return result;
          v65 = (_BYTE *)*((_QWORD *)this + 1);
          v17 = *((_QWORD *)this + 2);
        }
        else
        {
          *v6 = *v19;
          v65 = v19 + 1;
          *((_QWORD *)this + 1) = v65;
        }
        *(_DWORD *)(a1 + 116) |= 0x80u;
        if ((unint64_t)v65 >= v17 || *v65 != 72)
          continue;
        v20 = v65 + 1;
        *((_QWORD *)this + 1) = v20;
LABEL_121:
        v89 = 0;
        if ((unint64_t)v20 >= v17 || *v20 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v89);
          if (!(_DWORD)result)
            return result;
          v66 = v89;
        }
        else
        {
          v66 = *v20;
          *((_QWORD *)this + 1) = v20 + 1;
        }
        if (v66 <= 6)
        {
          *(_DWORD *)(a1 + 116) |= 0x100u;
          *(_DWORD *)(a1 + 56) = v66;
        }
        v67 = (_BYTE *)*((_QWORD *)this + 1);
        v21 = *((_QWORD *)this + 2);
        if ((unint64_t)v67 >= v21 || *v67 != 80)
          continue;
        v22 = v67 + 1;
        *((_QWORD *)this + 1) = v22;
LABEL_131:
        v89 = 0;
        if ((unint64_t)v22 >= v21 || *v22 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v89);
          if (!(_DWORD)result)
            return result;
          v68 = v89;
        }
        else
        {
          v68 = *v22;
          *((_QWORD *)this + 1) = v22 + 1;
        }
        if (v68 <= 6)
        {
          *(_DWORD *)(a1 + 116) |= 0x200u;
          *(_DWORD *)(a1 + 60) = v68;
        }
        v69 = (_BYTE *)*((_QWORD *)this + 1);
        v23 = *((_QWORD *)this + 2);
        if ((unint64_t)v69 >= v23 || *v69 != 88)
          continue;
        v24 = v69 + 1;
        *((_QWORD *)this + 1) = v24;
LABEL_141:
        v89 = 0;
        if ((unint64_t)v24 >= v23 || *v24 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v89);
          if (!(_DWORD)result)
            return result;
          v70 = v89;
          v71 = (_BYTE *)*((_QWORD *)this + 1);
          v23 = *((_QWORD *)this + 2);
        }
        else
        {
          v70 = *v24;
          v71 = v24 + 1;
          *((_QWORD *)this + 1) = v71;
        }
        *(_DWORD *)(a1 + 64) = v70;
        *(_DWORD *)(a1 + 116) |= 0x400u;
        if ((unint64_t)v71 >= v23 || *v71 != 101)
          continue;
        *((_QWORD *)this + 1) = v71 + 1;
LABEL_149:
        v89 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v89) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 68) = v89;
        *(_DWORD *)(a1 + 116) |= 0x800u;
        v72 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v72 >= *((_QWORD *)this + 2) || *v72 != 109)
          continue;
        *((_QWORD *)this + 1) = v72 + 1;
LABEL_153:
        v89 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v89) & 1) != 0)
        {
          *(_DWORD *)(a1 + 72) = v89;
          v25 = *(_DWORD *)(a1 + 116) | 0x1000;
          *(_DWORD *)(a1 + 116) = v25;
          v73 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v73 < *((_QWORD *)this + 2) && *v73 == 114)
          {
            *((_QWORD *)this + 1) = v73 + 1;
LABEL_157:
            *(_DWORD *)(a1 + 116) = v25 | 0x2000;
            v74 = *(void **)(a1 + 80);
            if (v74 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
              operator new();
            result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v74);
            if (!(_DWORD)result)
              return result;
            v75 = (_BYTE *)*((_QWORD *)this + 1);
            v26 = *((_QWORD *)this + 2);
            if ((unint64_t)v75 < v26 && *v75 == 120)
            {
              v27 = v75 + 1;
              *((_QWORD *)this + 1) = v27;
LABEL_163:
              if ((unint64_t)v27 >= v26 || (char)*v27 < 0)
              {
                result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
                if (!(_DWORD)result)
                  return result;
                v76 = (unsigned __int8 *)*((_QWORD *)this + 1);
                v26 = *((_QWORD *)this + 2);
              }
              else
              {
                *v7 = *v27;
                v76 = v27 + 1;
                *((_QWORD *)this + 1) = v76;
              }
              *(_DWORD *)(a1 + 116) |= 0x4000u;
              if ((int)v26 - (int)v76 >= 2 && *v76 == 130 && v76[1] == 1)
              {
                do
                {
                  *((_QWORD *)this + 1) = v76 + 2;
LABEL_172:
                  v77 = *(_DWORD *)(a1 + 100);
                  v78 = *(int *)(a1 + 96);
                  if ((int)v78 >= v77)
                  {
                    if (v77 == *(_DWORD *)(a1 + 104))
                    {
                      wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v8, v77 + 1);
                      v77 = *(_DWORD *)(a1 + 100);
                    }
                    *(_DWORD *)(a1 + 100) = v77 + 1;
                    operator new();
                  }
                  v79 = *(_QWORD *)(a1 + 88);
                  *(_DWORD *)(a1 + 96) = v78 + 1;
                  v80 = *(_QWORD *)(v79 + 8 * v78);
                  v89 = 0;
                  v81 = (char *)*((_QWORD *)this + 1);
                  if ((unint64_t)v81 >= *((_QWORD *)this + 2) || *v81 < 0)
                  {
                    if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v89))return 0;
                  }
                  else
                  {
                    v89 = *v81;
                    *((_QWORD *)this + 1) = v81 + 1;
                  }
                  v82 = *((_DWORD *)this + 14);
                  v83 = *((_DWORD *)this + 15);
                  *((_DWORD *)this + 14) = v82 + 1;
                  if (v82 >= v83)
                    return 0;
                  v84 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v89);
                  if (!sub_100DADB30(v80, this, v85) || !*((_BYTE *)this + 36))
                    return 0;
                  wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v84);
                  v86 = *((_DWORD *)this + 14);
                  v33 = __OFSUB__(v86, 1);
                  v87 = v86 - 1;
                  if (v87 < 0 == v33)
                    *((_DWORD *)this + 14) = v87;
                  v76 = (unsigned __int8 *)*((_QWORD *)this + 1);
                  v88 = (unsigned __int8 *)*((_QWORD *)this + 2);
                }
                while ((int)v88 - (int)v76 > 1 && *v76 == 130 && v76[1] == 1);
                if (v76 == v88 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                {
                  *((_DWORD *)this + 8) = 0;
                  result = 1;
                  *((_BYTE *)this + 36) = 1;
                  return result;
                }
              }
            }
          }
          continue;
        }
        return 0;
      case 3u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_51;
        v13 = *(_DWORD *)(a1 + 116);
        goto LABEL_21;
      case 4u:
        v11 = TagFallback & 7;
        if (v11 == 2)
          goto LABEL_63;
        goto LABEL_51;
      case 5u:
        v11 = TagFallback & 7;
        if (v11 == 2)
          goto LABEL_77;
        goto LABEL_51;
      case 6u:
        v11 = TagFallback & 7;
        if (v11 == 2)
          goto LABEL_91;
        goto LABEL_51;
      case 7u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_51;
        v18 = (char *)*((_QWORD *)this + 1);
        v17 = *((_QWORD *)this + 2);
        goto LABEL_105;
      case 8u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_51;
        v19 = (char *)*((_QWORD *)this + 1);
        v17 = *((_QWORD *)this + 2);
        goto LABEL_113;
      case 9u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_51;
        v20 = (char *)*((_QWORD *)this + 1);
        v17 = *((_QWORD *)this + 2);
        goto LABEL_121;
      case 0xAu:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_51;
        v22 = (char *)*((_QWORD *)this + 1);
        v21 = *((_QWORD *)this + 2);
        goto LABEL_131;
      case 0xBu:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_51;
        v24 = (char *)*((_QWORD *)this + 1);
        v23 = *((_QWORD *)this + 2);
        goto LABEL_141;
      case 0xCu:
        v11 = TagFallback & 7;
        if (v11 == 5)
          goto LABEL_149;
        goto LABEL_51;
      case 0xDu:
        v11 = TagFallback & 7;
        if (v11 == 5)
          goto LABEL_153;
        goto LABEL_51;
      case 0xEu:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_51;
        v25 = *(_DWORD *)(a1 + 116);
        goto LABEL_157;
      case 0xFu:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_51;
        v27 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v26 = *((_QWORD *)this + 2);
        goto LABEL_163;
      case 0x10u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_51;
        goto LABEL_172;
      default:
        v11 = TagFallback & 7;
LABEL_51:
        if (v11 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_100DAFC44(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  v6 = *(_DWORD *)(result + 116);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (int)a2, *(float *)(result + 8), a3);
    v6 = *(_DWORD *)(v5 + 116);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (int)a2, *(float *)(v5 + 12), a3);
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_23:
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
    v8 = *(_QWORD *)(qword_102311630 + 16);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v8, a2, a4);
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_29;
  }
LABEL_26:
  v9 = *(_QWORD *)(v5 + 24);
  if (!v9)
    v9 = *(_QWORD *)(qword_102311630 + 24);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v9, a2, a4);
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_32;
  }
LABEL_29:
  v10 = *(_QWORD *)(v5 + 32);
  if (!v10)
    v10 = *(_QWORD *)(qword_102311630 + 32);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v10, a2, a4);
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_32:
  v11 = *(_QWORD *)(v5 + 40);
  if (!v11)
    v11 = *(_QWORD *)(qword_102311630 + 40);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v11, a2, a4);
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_36;
  }
LABEL_35:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(_DWORD *)(v5 + 48), a2, a4);
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_37;
  }
LABEL_36:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(_DWORD *)(v5 + 52), a2, a4);
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_37:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(_DWORD *)(v5 + 56), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_38:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(_DWORD *)(v5 + 60), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_39:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(_DWORD *)(v5 + 64), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_40:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, (int)a2, *(float *)(v5 + 68), a3);
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, (int)a2, *(float *)(v5 + 72), a3);
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_42:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(14, *(_QWORD *)(v5 + 80), a2);
  if ((*(_DWORD *)(v5 + 116) & 0x4000) != 0)
LABEL_16:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, *(_DWORD *)(v5 + 76), a2, a4);
LABEL_17:
  if (*(int *)(v5 + 96) >= 1)
  {
    v7 = 0;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, *(_QWORD *)(*(_QWORD *)(v5 + 88) + 8 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 96));
  }
  return result;
}

uint64_t sub_100DAFE84(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v21;
  int v22;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v23;
  int v24;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v25;
  int v26;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v27;
  int v28;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v43;
  unsigned int v44;
  int v45;
  int v46;

  v3 = *(_DWORD *)(a1 + 116);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_57;
  }
  if ((v3 & 2) != 0)
    v4 = ((v3 << 31 >> 31) & 5) + 5;
  else
    v4 = (v3 << 31 >> 31) & 5;
  if ((v3 & 4) != 0)
  {
    v5 = *(_QWORD *)(a1 + 16);
    if (!v5)
      v5 = *(_QWORD *)(qword_102311630 + 16);
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DAE434(v5, a2);
    v7 = (int)v6;
    if (v6 >= 0x80)
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
    else
      v8 = 1;
    v4 += v7 + v8 + 1;
    v3 = *(_DWORD *)(a1 + 116);
    if ((v3 & 8) == 0)
    {
LABEL_7:
      if ((v3 & 0x10) == 0)
        goto LABEL_8;
      goto LABEL_29;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_7;
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (!v9)
    v9 = *(_QWORD *)(qword_102311630 + 24);
  v10 = *(unsigned __int8 *)(v9 + 24);
  v11 = (v10 << 31 >> 31) & 5;
  if ((v10 & 2) != 0)
    v11 += 5;
  if ((v10 & 4) != 0)
    v11 += 5;
  if (*(_BYTE *)(v9 + 24))
    v12 = v11;
  else
    v12 = 0;
  *(_DWORD *)(v9 + 20) = v12;
  v4 += v12 + 2;
  v3 = *(_DWORD *)(a1 + 116);
  if ((v3 & 0x10) == 0)
  {
LABEL_8:
    if ((v3 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_39;
  }
LABEL_29:
  v13 = *(_QWORD *)(a1 + 32);
  if (!v13)
    v13 = *(_QWORD *)(qword_102311630 + 32);
  v14 = *(unsigned __int8 *)(v13 + 24);
  v15 = (v14 << 31 >> 31) & 5;
  if ((v14 & 2) != 0)
    v15 += 5;
  if ((v14 & 4) != 0)
    v15 += 5;
  if (*(_BYTE *)(v13 + 24))
    v16 = v15;
  else
    v16 = 0;
  *(_DWORD *)(v13 + 20) = v16;
  v4 += v16 + 2;
  v3 = *(_DWORD *)(a1 + 116);
  if ((v3 & 0x20) == 0)
  {
LABEL_9:
    if ((v3 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_49;
  }
LABEL_39:
  v17 = *(_QWORD *)(a1 + 40);
  if (!v17)
    v17 = *(_QWORD *)(qword_102311630 + 40);
  v18 = *(unsigned __int8 *)(v17 + 24);
  v19 = (v18 << 31 >> 31) & 5;
  if ((v18 & 2) != 0)
    v19 += 5;
  if ((v18 & 4) != 0)
    v19 += 5;
  if (*(_BYTE *)(v17 + 24))
    v20 = v19;
  else
    v20 = 0;
  *(_DWORD *)(v17 + 20) = v20;
  v4 += v20 + 2;
  v3 = *(_DWORD *)(a1 + 116);
  if ((v3 & 0x40) == 0)
  {
LABEL_10:
    if ((v3 & 0x80) == 0)
      goto LABEL_57;
    goto LABEL_53;
  }
LABEL_49:
  v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
  if (v21 >= 0x80)
  {
    v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2);
    v3 = *(_DWORD *)(a1 + 116);
  }
  else
  {
    v22 = 1;
  }
  v4 += v22 + 1;
  if ((v3 & 0x80) != 0)
  {
LABEL_53:
    v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 52);
    if (v23 >= 0x80)
    {
      v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23, a2) + 1;
      v3 = *(_DWORD *)(a1 + 116);
    }
    else
    {
      v24 = 2;
    }
    v4 += v24;
  }
LABEL_57:
  if ((v3 & 0xFF00) == 0)
    goto LABEL_100;
  if ((v3 & 0x100) == 0)
  {
    if ((v3 & 0x200) == 0)
      goto LABEL_60;
LABEL_68:
    v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 60);
    if ((v27 & 0x80000000) != 0)
    {
      v28 = 11;
    }
    else if (v27 >= 0x80)
    {
      v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v27, a2) + 1;
      v3 = *(_DWORD *)(a1 + 116);
    }
    else
    {
      v28 = 2;
    }
    v4 += v28;
    if ((v3 & 0x400) == 0)
      goto LABEL_80;
    goto LABEL_74;
  }
  v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 56);
  if ((v25 & 0x80000000) != 0)
  {
    v26 = 11;
  }
  else if (v25 >= 0x80)
  {
    v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25, a2) + 1;
    v3 = *(_DWORD *)(a1 + 116);
  }
  else
  {
    v26 = 2;
  }
  v4 += v26;
  if ((v3 & 0x200) != 0)
    goto LABEL_68;
LABEL_60:
  if ((v3 & 0x400) != 0)
  {
LABEL_74:
    v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 64);
    if ((v29 & 0x80000000) != 0)
    {
      v30 = 11;
    }
    else if (v29 >= 0x80)
    {
      v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v29, a2) + 1;
      v3 = *(_DWORD *)(a1 + 116);
    }
    else
    {
      v30 = 2;
    }
    v4 += v30;
  }
LABEL_80:
  v31 = v4 + 5;
  if ((v3 & 0x800) == 0)
    v31 = v4;
  if ((v3 & 0x1000) != 0)
    v4 = v31 + 5;
  else
    v4 = v31;
  if ((v3 & 0x2000) != 0)
  {
    v32 = *(_QWORD *)(a1 + 80);
    v33 = *(unsigned __int8 *)(v32 + 23);
    v34 = v33;
    v35 = *(_QWORD *)(v32 + 8);
    if ((v33 & 0x80u) == 0)
      v36 = *(unsigned __int8 *)(v32 + 23);
    else
      v36 = v35;
    if (v36 >= 0x80)
    {
      v37 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v36, a2);
      v33 = *(unsigned __int8 *)(v32 + 23);
      v35 = *(_QWORD *)(v32 + 8);
      v3 = *(_DWORD *)(a1 + 116);
      v34 = *(_BYTE *)(v32 + 23);
    }
    else
    {
      v37 = 1;
    }
    if (v34 < 0)
      v33 = v35;
    v4 += v37 + v33 + 1;
  }
  if ((v3 & 0x4000) != 0)
  {
    v38 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 76);
    if (v38 >= 0x80)
      v39 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v38, a2) + 1;
    else
      v39 = 2;
    v4 += v39;
  }
LABEL_100:
  v40 = *(_DWORD *)(a1 + 96);
  v41 = (v4 + 2 * v40);
  if (v40 >= 1)
  {
    v42 = 0;
    do
    {
      v43 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DADF0C(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v42));
      v45 = (int)v43;
      if (v43 >= 0x80)
        v46 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v43, v44);
      else
        v46 = 1;
      v41 = (v45 + v41 + v46);
      ++v42;
    }
    while (v42 < *(int *)(a1 + 96));
  }
  *(_DWORD *)(a1 + 112) = v41;
  return v41;
}

void sub_100DB022C(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100DAE968(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DB0278()
{
  return 1;
}

_QWORD *sub_100DB0280@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.MeasurementExtension");
}

void sub_100DB0290(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _BYTE v29[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v29, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 7683);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v29, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v28, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v29);
  }
  v5 = *(_DWORD *)(a2 + 112);
  if (!(_BYTE)v5)
    goto LABEL_41;
  if ((v5 & 1) != 0)
  {
    *(_DWORD *)(a1 + 112) |= 1u;
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6)
      operator new();
    v7 = *(_QWORD *)(a2 + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102311638 + 8);
    sub_100DA6E80(v6, v7);
    v5 = *(_DWORD *)(a2 + 112);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_23;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_6;
  }
  *(_DWORD *)(a1 + 112) |= 2u;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    operator new();
  v9 = *(_QWORD *)(a2 + 16);
  if (!v9)
    v9 = *(_QWORD *)(qword_102311638 + 16);
  sub_100DAA9EC(v8, v9);
  v5 = *(_DWORD *)(a2 + 112);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  v10 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 112) |= 4u;
  *(_QWORD *)(a1 + 24) = v10;
  v5 = *(_DWORD *)(a2 + 112);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  v11 = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 112) |= 8u;
  *(_QWORD *)(a1 + 32) = v11;
  v5 = *(_DWORD *)(a2 + 112);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
LABEL_26:
    *(_DWORD *)(a1 + 112) |= 0x20u;
    v13 = *(_QWORD *)(a1 + 48);
    if (!v13)
      operator new();
    v14 = *(_QWORD *)(a2 + 48);
    if (!v14)
      v14 = *(_QWORD *)(qword_102311638 + 48);
    sub_100DAC388(v13, v14);
    v5 = *(_DWORD *)(a2 + 112);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0)
        goto LABEL_41;
      goto LABEL_36;
    }
    goto LABEL_31;
  }
LABEL_25:
  v12 = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 112) |= 0x10u;
  *(_QWORD *)(a1 + 40) = v12;
  v5 = *(_DWORD *)(a2 + 112);
  if ((v5 & 0x20) != 0)
    goto LABEL_26;
LABEL_10:
  if ((v5 & 0x40) == 0)
    goto LABEL_11;
LABEL_31:
  *(_DWORD *)(a1 + 112) |= 0x40u;
  v15 = *(_QWORD *)(a1 + 56);
  if (!v15)
    operator new();
  v16 = *(_QWORD *)(a2 + 56);
  if (!v16)
    v16 = *(_QWORD *)(qword_102311638 + 56);
  sub_100DAC808(v15, v16);
  v5 = *(_DWORD *)(a2 + 112);
  if ((v5 & 0x80) != 0)
  {
LABEL_36:
    *(_DWORD *)(a1 + 112) |= 0x80u;
    v17 = *(_QWORD *)(a1 + 64);
    if (!v17)
      operator new();
    v18 = *(_QWORD *)(a2 + 64);
    if (!v18)
      v18 = *(_QWORD *)(qword_102311638 + 64);
    sub_100DAD1E8(v17, v18);
    v5 = *(_DWORD *)(a2 + 112);
  }
LABEL_41:
  if ((v5 & 0xFF00) == 0)
    return;
  if ((v5 & 0x100) != 0)
  {
    *(_DWORD *)(a1 + 112) |= 0x100u;
    v19 = *(_QWORD *)(a1 + 72);
    if (!v19)
      operator new();
    v20 = *(_QWORD *)(a2 + 72);
    if (!v20)
      v20 = *(_QWORD *)(qword_102311638 + 72);
    sub_100DAE968(v19, v20);
    v5 = *(_DWORD *)(a2 + 112);
    if ((v5 & 0x200) == 0)
    {
LABEL_44:
      if ((v5 & 0x400) == 0)
        goto LABEL_45;
      goto LABEL_55;
    }
  }
  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_44;
  }
  v21 = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 112) |= 0x200u;
  *(_DWORD *)(a1 + 80) = v21;
  v5 = *(_DWORD *)(a2 + 112);
  if ((v5 & 0x400) == 0)
  {
LABEL_45:
    if ((v5 & 0x800) == 0)
      goto LABEL_46;
    goto LABEL_57;
  }
LABEL_55:
  v22 = *(_DWORD *)(a2 + 84);
  if (v22 >= 5)
    sub_10192A560();
  *(_DWORD *)(a1 + 112) |= 0x400u;
  *(_DWORD *)(a1 + 84) = v22;
  v5 = *(_DWORD *)(a2 + 112);
  if ((v5 & 0x800) == 0)
  {
LABEL_46:
    if ((v5 & 0x1000) == 0)
      goto LABEL_47;
LABEL_62:
    v25 = *(_BYTE *)(a2 + 104);
    *(_DWORD *)(a1 + 112) |= 0x1000u;
    *(_BYTE *)(a1 + 104) = v25;
    if ((*(_DWORD *)(a2 + 112) & 0x2000) == 0)
      return;
    goto LABEL_63;
  }
LABEL_57:
  *(_DWORD *)(a1 + 112) |= 0x800u;
  v23 = *(_QWORD *)(a1 + 88);
  if (!v23)
    operator new();
  v24 = *(_QWORD *)(a2 + 88);
  if (!v24)
    v24 = *(_QWORD *)(qword_102311638 + 88);
  sub_100DAC808(v23, v24);
  v5 = *(_DWORD *)(a2 + 112);
  if ((v5 & 0x1000) != 0)
    goto LABEL_62;
LABEL_47:
  if ((v5 & 0x2000) == 0)
    return;
LABEL_63:
  *(_DWORD *)(a1 + 112) |= 0x2000u;
  v26 = *(_QWORD *)(a1 + 96);
  if (!v26)
    operator new();
  v27 = *(_QWORD *)(a2 + 96);
  if (!v27)
    v27 = *(_QWORD *)(qword_102311638 + 96);
  sub_100DACC88(v26, v27);
}

void sub_100DB076C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100DB0784(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((_QWORD *)qword_102311638 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[2];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v1[6];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v1[7];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = v1[8];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = v1[9];
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = v1[11];
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    result = (_QWORD *)v1[12];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_100DB0858(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021857C0;
  sub_100DB0784(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DB0888(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021857C0;
  sub_100DB0784(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100DB08CC()
{
  operator new();
}

uint64_t sub_100DB0924(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = result;
  v2 = *(_DWORD *)(result + 112);
  if ((_BYTE)v2)
  {
    if ((v2 & 1) != 0)
    {
      result = *(_QWORD *)(result + 8);
      if (result)
      {
        result = sub_100DA6FD0(result);
        v2 = *(_DWORD *)(v1 + 112);
      }
    }
    if ((v2 & 2) != 0)
    {
      result = *(_QWORD *)(v1 + 16);
      if (result)
      {
        result = sub_100DAB06C(result);
        v2 = *(_DWORD *)(v1 + 112);
      }
    }
    *(_QWORD *)(v1 + 24) = 0;
    *(_QWORD *)(v1 + 32) = 0;
    *(_QWORD *)(v1 + 40) = 0;
    if ((v2 & 0x20) != 0)
    {
      v3 = *(_QWORD *)(v1 + 48);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 32))
        {
          *(_QWORD *)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 16) = 0;
          *(_BYTE *)(v3 + 24) = 0;
        }
        *(_DWORD *)(v3 + 32) = 0;
        v2 = *(_DWORD *)(v1 + 112);
      }
    }
    if ((v2 & 0x40) != 0)
    {
      v4 = *(_QWORD *)(v1 + 56);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 32))
        {
          *(_QWORD *)(v4 + 8) = 0;
          *(_QWORD *)(v4 + 16) = 0;
          *(_BYTE *)(v4 + 24) = 0;
        }
        *(_DWORD *)(v4 + 32) = 0;
        v2 = *(_DWORD *)(v1 + 112);
      }
    }
    if ((v2 & 0x80) != 0)
    {
      v5 = *(_QWORD *)(v1 + 64);
      if (v5)
      {
        if (*(_BYTE *)(v5 + 48))
        {
          *(_BYTE *)(v5 + 40) = 0;
          *(_OWORD *)(v5 + 24) = 0u;
          *(_OWORD *)(v5 + 8) = 0u;
        }
        *(_DWORD *)(v5 + 48) = 0;
        v2 = *(_DWORD *)(v1 + 112);
      }
    }
  }
  if ((v2 & 0xFF00) != 0)
  {
    if ((v2 & 0x100) != 0)
    {
      result = *(_QWORD *)(v1 + 72);
      if (result)
      {
        result = sub_100DAEFB4(result);
        v2 = *(_DWORD *)(v1 + 112);
      }
    }
    *(_QWORD *)(v1 + 80) = 0;
    if ((v2 & 0x800) != 0)
    {
      v6 = *(_QWORD *)(v1 + 88);
      if (v6)
      {
        if (*(_BYTE *)(v6 + 32))
        {
          *(_QWORD *)(v6 + 8) = 0;
          *(_QWORD *)(v6 + 16) = 0;
          *(_BYTE *)(v6 + 24) = 0;
        }
        *(_DWORD *)(v6 + 32) = 0;
        v2 = *(_DWORD *)(v1 + 112);
      }
    }
    *(_BYTE *)(v1 + 104) = 0;
    if ((v2 & 0x2000) != 0)
    {
      v7 = *(_QWORD *)(v1 + 96);
      if (v7)
      {
        if (*(_BYTE *)(v7 + 32))
        {
          *(_QWORD *)(v7 + 8) = 0;
          *(_QWORD *)(v7 + 16) = 0;
          *(_WORD *)(v7 + 24) = 0;
        }
        *(_DWORD *)(v7 + 32) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 112) = 0;
  return result;
}

uint64_t sub_100DB0A5C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  unint64_t *v6;
  unint64_t *v7;
  char *v8;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  int v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  BOOL v28;
  int v29;
  _BYTE *v30;
  uint64_t v31;
  char *v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t result;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  char *v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  _BYTE *v52;
  uint64_t v53;
  char *v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  _BYTE *v61;
  uint64_t v62;
  char *v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  int v68;
  int v69;
  _BYTE *v70;
  uint64_t v71;
  char *v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  int v78;
  _BYTE *v79;
  _BYTE *v80;
  unsigned int v81;
  _BYTE *v82;
  uint64_t v83;
  char *v84;
  int v85;
  int v86;
  int v87;
  unsigned int v88;
  int v89;
  int v90;
  _BYTE *v91;
  unsigned int v92;
  _BYTE *v93;
  uint64_t v94;
  char *v95;
  int v96;
  int v97;
  int v98;
  unsigned int v99;
  int v100;
  int v101;
  unsigned int v102;

  v5 = (unint64_t *)(a1 + 24);
  v6 = (unint64_t *)(a1 + 32);
  v7 = (unint64_t *)(a1 + 40);
  while (1)
  {
    v8 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v8 < *((_QWORD *)this + 2) && (*v8 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v8 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_7;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_41;
        *(_DWORD *)(a1 + 112) |= 1u;
        v11 = *(_QWORD *)(a1 + 8);
        if (!v11)
          operator new();
        v102 = 0;
        v12 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v12 >= *((_QWORD *)this + 2) || *v12 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v102))return 0;
        }
        else
        {
          v102 = *v12;
          *((_QWORD *)this + 1) = v12 + 1;
        }
        v23 = *((_DWORD *)this + 14);
        v24 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v23 + 1;
        if (v23 >= v24)
          return 0;
        v25 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v102);
        if (!sub_1000F909C(v11, this, v26) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v25);
        v27 = *((_DWORD *)this + 14);
        v28 = __OFSUB__(v27, 1);
        v29 = v27 - 1;
        if (v29 < 0 == v28)
          *((_DWORD *)this + 14) = v29;
        v30 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v30 >= *((_QWORD *)this + 2) || *v30 != 18)
          continue;
        *((_QWORD *)this + 1) = v30 + 1;
        goto LABEL_53;
      case 2u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_41;
LABEL_53:
        *(_DWORD *)(a1 + 112) |= 2u;
        v31 = *(_QWORD *)(a1 + 16);
        if (!v31)
          operator new();
        v102 = 0;
        v32 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v32 >= *((_QWORD *)this + 2) || *v32 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v102))return 0;
        }
        else
        {
          v102 = *v32;
          *((_QWORD *)this + 1) = v32 + 1;
        }
        v33 = *((_DWORD *)this + 14);
        v34 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v33 + 1;
        if (v33 >= v34)
          return 0;
        v35 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v102);
        if (!sub_100DAB1E4(v31, this, v36) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v35);
        v37 = *((_DWORD *)this + 14);
        v28 = __OFSUB__(v37, 1);
        v38 = v37 - 1;
        if (v38 < 0 == v28)
          *((_DWORD *)this + 14) = v38;
        v39 = (_BYTE *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        if ((unint64_t)v39 >= v13 || *v39 != 24)
          continue;
        v14 = v39 + 1;
        *((_QWORD *)this + 1) = v14;
LABEL_67:
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v40 = (_BYTE *)*((_QWORD *)this + 1);
          v13 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v14;
          v40 = v14 + 1;
          *((_QWORD *)this + 1) = v40;
        }
        *(_DWORD *)(a1 + 112) |= 4u;
        if ((unint64_t)v40 >= v13 || *v40 != 32)
          continue;
        v15 = v40 + 1;
        *((_QWORD *)this + 1) = v15;
LABEL_75:
        if ((unint64_t)v15 >= v13 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v6);
          if (!(_DWORD)result)
            return result;
          v42 = (_BYTE *)*((_QWORD *)this + 1);
          v13 = *((_QWORD *)this + 2);
        }
        else
        {
          *v6 = *v15;
          v42 = v15 + 1;
          *((_QWORD *)this + 1) = v42;
        }
        *(_DWORD *)(a1 + 112) |= 8u;
        if ((unint64_t)v42 >= v13 || *v42 != 40)
          continue;
        v16 = v42 + 1;
        *((_QWORD *)this + 1) = v16;
LABEL_83:
        if ((unint64_t)v16 >= v13 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v7);
          if (!(_DWORD)result)
            return result;
          v43 = (_BYTE *)*((_QWORD *)this + 1);
          v13 = *((_QWORD *)this + 2);
        }
        else
        {
          *v7 = *v16;
          v43 = v16 + 1;
          *((_QWORD *)this + 1) = v43;
        }
        v17 = *(_DWORD *)(a1 + 112) | 0x10;
        *(_DWORD *)(a1 + 112) = v17;
        if ((unint64_t)v43 >= v13 || *v43 != 50)
          continue;
        *((_QWORD *)this + 1) = v43 + 1;
LABEL_91:
        *(_DWORD *)(a1 + 112) = v17 | 0x20;
        v44 = *(_QWORD *)(a1 + 48);
        if (!v44)
          operator new();
        v102 = 0;
        v45 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v45 >= *((_QWORD *)this + 2) || *v45 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v102))return 0;
        }
        else
        {
          v102 = *v45;
          *((_QWORD *)this + 1) = v45 + 1;
        }
        v46 = *((_DWORD *)this + 14);
        v47 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v46 + 1;
        if (v46 >= v47)
          return 0;
        v48 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v102);
        if (!sub_100DAC508(v44, this, v49) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v48);
        v50 = *((_DWORD *)this + 14);
        v28 = __OFSUB__(v50, 1);
        v51 = v50 - 1;
        if (v51 < 0 == v28)
          *((_DWORD *)this + 14) = v51;
        v52 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v52 >= *((_QWORD *)this + 2) || *v52 != 58)
          continue;
        *((_QWORD *)this + 1) = v52 + 1;
LABEL_105:
        *(_DWORD *)(a1 + 112) |= 0x40u;
        v53 = *(_QWORD *)(a1 + 56);
        if (!v53)
          operator new();
        v102 = 0;
        v54 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v54 >= *((_QWORD *)this + 2) || *v54 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v102))return 0;
        }
        else
        {
          v102 = *v54;
          *((_QWORD *)this + 1) = v54 + 1;
        }
        v55 = *((_DWORD *)this + 14);
        v56 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v55 + 1;
        if (v55 >= v56)
          return 0;
        v57 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v102);
        if (!sub_100DAC988(v53, this, v58) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v57);
        v59 = *((_DWORD *)this + 14);
        v28 = __OFSUB__(v59, 1);
        v60 = v59 - 1;
        if (v60 < 0 == v28)
          *((_DWORD *)this + 14) = v60;
        v61 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v61 >= *((_QWORD *)this + 2) || *v61 != 66)
          continue;
        *((_QWORD *)this + 1) = v61 + 1;
LABEL_119:
        *(_DWORD *)(a1 + 112) |= 0x80u;
        v62 = *(_QWORD *)(a1 + 64);
        if (!v62)
          operator new();
        v102 = 0;
        v63 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v63 >= *((_QWORD *)this + 2) || *v63 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v102))return 0;
        }
        else
        {
          v102 = *v63;
          *((_QWORD *)this + 1) = v63 + 1;
        }
        v64 = *((_DWORD *)this + 14);
        v65 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v64 + 1;
        if (v64 >= v65)
          return 0;
        v66 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v102);
        if (!sub_100DAD3B8(v62, this, v67) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v66);
        v68 = *((_DWORD *)this + 14);
        v28 = __OFSUB__(v68, 1);
        v69 = v68 - 1;
        if (v69 < 0 == v28)
          *((_DWORD *)this + 14) = v69;
        v70 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v70 >= *((_QWORD *)this + 2) || *v70 != 74)
          continue;
        *((_QWORD *)this + 1) = v70 + 1;
LABEL_133:
        *(_DWORD *)(a1 + 112) |= 0x100u;
        v71 = *(_QWORD *)(a1 + 72);
        if (!v71)
          operator new();
        v102 = 0;
        v72 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v72 >= *((_QWORD *)this + 2) || *v72 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v102))return 0;
        }
        else
        {
          v102 = *v72;
          *((_QWORD *)this + 1) = v72 + 1;
        }
        v73 = *((_DWORD *)this + 14);
        v74 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v73 + 1;
        if (v73 >= v74)
          return 0;
        v75 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v102);
        if (!sub_100DAF0FC(v71, this, v76) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v75);
        v77 = *((_DWORD *)this + 14);
        v28 = __OFSUB__(v77, 1);
        v78 = v77 - 1;
        if (v78 < 0 == v28)
          *((_DWORD *)this + 14) = v78;
        v79 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v79 >= *((_QWORD *)this + 2) || *v79 != 85)
          continue;
        *((_QWORD *)this + 1) = v79 + 1;
LABEL_147:
        v102 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v102) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 80) = v102;
        *(_DWORD *)(a1 + 112) |= 0x200u;
        v80 = (_BYTE *)*((_QWORD *)this + 1);
        v18 = *((_QWORD *)this + 2);
        if ((unint64_t)v80 >= v18 || *v80 != 88)
          continue;
        v19 = v80 + 1;
        *((_QWORD *)this + 1) = v19;
LABEL_151:
        v102 = 0;
        if ((unint64_t)v19 >= v18 || *v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v102);
          if (!(_DWORD)result)
            return result;
          v81 = v102;
        }
        else
        {
          v81 = *v19;
          *((_QWORD *)this + 1) = v19 + 1;
        }
        if (v81 <= 4)
        {
          *(_DWORD *)(a1 + 112) |= 0x400u;
          *(_DWORD *)(a1 + 84) = v81;
        }
        v82 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v82 >= *((_QWORD *)this + 2) || *v82 != 98)
          continue;
        *((_QWORD *)this + 1) = v82 + 1;
LABEL_161:
        *(_DWORD *)(a1 + 112) |= 0x800u;
        v83 = *(_QWORD *)(a1 + 88);
        if (!v83)
          operator new();
        v102 = 0;
        v84 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v84 >= *((_QWORD *)this + 2) || *v84 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v102))return 0;
        }
        else
        {
          v102 = *v84;
          *((_QWORD *)this + 1) = v84 + 1;
        }
        v85 = *((_DWORD *)this + 14);
        v86 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v85 + 1;
        if (v85 >= v86)
          return 0;
        v87 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v102);
        if (!sub_100DAC988(v83, this, v88) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v87);
        v89 = *((_DWORD *)this + 14);
        v28 = __OFSUB__(v89, 1);
        v90 = v89 - 1;
        if (v90 < 0 == v28)
          *((_DWORD *)this + 14) = v90;
        v91 = (_BYTE *)*((_QWORD *)this + 1);
        v20 = *((_QWORD *)this + 2);
        if ((unint64_t)v91 >= v20 || *v91 != 104)
          continue;
        v21 = v91 + 1;
        *((_QWORD *)this + 1) = v21;
LABEL_175:
        v102 = 0;
        if ((unint64_t)v21 >= v20 || *v21 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v102);
          if (!(_DWORD)result)
            return result;
          v92 = v102;
          v93 = (_BYTE *)*((_QWORD *)this + 1);
          v20 = *((_QWORD *)this + 2);
        }
        else
        {
          v92 = *v21;
          v93 = v21 + 1;
          *((_QWORD *)this + 1) = v93;
        }
        *(_BYTE *)(a1 + 104) = v92 != 0;
        v22 = *(_DWORD *)(a1 + 112) | 0x1000;
        *(_DWORD *)(a1 + 112) = v22;
        if ((unint64_t)v93 >= v20 || *v93 != 114)
          continue;
        *((_QWORD *)this + 1) = v93 + 1;
LABEL_183:
        *(_DWORD *)(a1 + 112) = v22 | 0x2000;
        v94 = *(_QWORD *)(a1 + 96);
        if (!v94)
          operator new();
        v102 = 0;
        v95 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v95 >= *((_QWORD *)this + 2) || *v95 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v102))return 0;
        }
        else
        {
          v102 = *v95;
          *((_QWORD *)this + 1) = v95 + 1;
        }
        v96 = *((_DWORD *)this + 14);
        v97 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v96 + 1;
        if (v96 >= v97)
          return 0;
        v98 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v102);
        if (!sub_100DACE28(v94, this, v99) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v98);
        v100 = *((_DWORD *)this + 14);
        v28 = __OFSUB__(v100, 1);
        v101 = v100 - 1;
        if (v101 < 0 == v28)
          *((_DWORD *)this + 14) = v101;
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
        break;
      case 3u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_41;
        v14 = (char *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        goto LABEL_67;
      case 4u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_41;
        v15 = (char *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        goto LABEL_75;
      case 5u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_41;
        v16 = (char *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        goto LABEL_83;
      case 6u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_41;
        v17 = *(_DWORD *)(a1 + 112);
        goto LABEL_91;
      case 7u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_105;
        goto LABEL_41;
      case 8u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_119;
        goto LABEL_41;
      case 9u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_133;
        goto LABEL_41;
      case 0xAu:
        v10 = TagFallback & 7;
        if (v10 == 5)
          goto LABEL_147;
        goto LABEL_41;
      case 0xBu:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_41;
        v19 = (char *)*((_QWORD *)this + 1);
        v18 = *((_QWORD *)this + 2);
        goto LABEL_151;
      case 0xCu:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_161;
        goto LABEL_41;
      case 0xDu:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_41;
        v21 = (char *)*((_QWORD *)this + 1);
        v20 = *((_QWORD *)this + 2);
        goto LABEL_175;
      case 0xEu:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_41;
        v22 = *(_DWORD *)(a1 + 112);
        goto LABEL_183;
      default:
        v10 = TagFallback & 7;
LABEL_41:
        if (v10 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_100DB16A8(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = result;
  v6 = *(_DWORD *)(result + 112);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102311638 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 112);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
    v8 = *(_QWORD *)(qword_102311638 + 16);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(v5 + 24), (unint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 32), (unint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_QWORD *)(v5 + 40), (unint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_25:
  v9 = *(_QWORD *)(v5 + 48);
  if (!v9)
    v9 = *(_QWORD *)(qword_102311638 + 48);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v9, a2, a4);
  v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_31;
  }
LABEL_28:
  v10 = *(_QWORD *)(v5 + 56);
  if (!v10)
    v10 = *(_QWORD *)(qword_102311638 + 56);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v10, a2, a4);
  v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_31:
  v11 = *(_QWORD *)(v5 + 64);
  if (!v11)
    v11 = *(_QWORD *)(qword_102311638 + 64);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v11, a2, a4);
  v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_34:
  v12 = *(_QWORD *)(v5 + 72);
  if (!v12)
    v12 = *(_QWORD *)(qword_102311638 + 72);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v12, a2, a4);
  v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, (int)a2, *(float *)(v5 + 80), a3);
  v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(_DWORD *)(v5 + 84), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_14;
LABEL_42:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(unsigned __int8 *)(v5 + 104), (BOOL)a2, a4);
    if ((*(_DWORD *)(v5 + 112) & 0x2000) == 0)
      return result;
    goto LABEL_43;
  }
LABEL_39:
  v13 = *(_QWORD *)(v5 + 88);
  if (!v13)
    v13 = *(_QWORD *)(qword_102311638 + 88);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, v13, a2, a4);
  v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x1000) != 0)
    goto LABEL_42;
LABEL_14:
  if ((v6 & 0x2000) == 0)
    return result;
LABEL_43:
  v14 = *(_QWORD *)(v5 + 96);
  if (!v14)
    v14 = *(_QWORD *)(qword_102311638 + 96);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, v14, a2, a4);
}

uint64_t sub_100DB18D4(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  uint64_t v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  int v21;
  int v22;
  uint64_t v23;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v24;
  int v25;
  int v26;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v34;
  unsigned int v35;
  int v36;
  int v37;

  v3 = *(_DWORD *)(a1 + 112);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_52;
  }
  if ((v3 & 1) == 0)
  {
    v4 = 0;
    if ((v3 & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    v5 = *(_QWORD *)(qword_102311638 + 8);
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DA7078(v5, a2);
  v7 = (int)v6;
  if (v6 >= 0x80)
    v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
  else
    v8 = 1;
  v4 = (v7 + v8 + 1);
  v3 = *(_DWORD *)(a1 + 112);
  if ((v3 & 2) != 0)
  {
LABEL_12:
    v9 = *(_QWORD *)(a1 + 16);
    if (!v9)
      v9 = *(_QWORD *)(qword_102311638 + 16);
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DABFA8(v9, a2);
    v11 = (int)v10;
    if (v10 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
    else
      v12 = 1;
    v4 = (v4 + v11 + v12 + 1);
    v3 = *(_DWORD *)(a1 + 112);
  }
LABEL_18:
  if ((v3 & 4) != 0)
  {
    v4 = v4
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 24), a2)+ 1;
    v3 = *(_DWORD *)(a1 + 112);
    if ((v3 & 8) == 0)
    {
LABEL_20:
      if ((v3 & 0x10) == 0)
        goto LABEL_21;
      goto LABEL_27;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_20;
  }
  v4 = v4
     + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 32), a2)+ 1;
  v3 = *(_DWORD *)(a1 + 112);
  if ((v3 & 0x10) == 0)
  {
LABEL_21:
    if ((v3 & 0x20) == 0)
      goto LABEL_22;
    goto LABEL_28;
  }
LABEL_27:
  v4 = v4
     + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 40), a2)+ 1;
  v3 = *(_DWORD *)(a1 + 112);
  if ((v3 & 0x20) == 0)
  {
LABEL_22:
    if ((v3 & 0x40) == 0)
      goto LABEL_23;
    goto LABEL_37;
  }
LABEL_28:
  v13 = *(_QWORD *)(a1 + 48);
  if (!v13)
    v13 = *(_QWORD *)(qword_102311638 + 48);
  v14 = *(unsigned __int8 *)(v13 + 32);
  if (*(_BYTE *)(v13 + 32))
  {
    v15 = (v14 << 31 >> 31) & 9;
    if ((v14 & 2) != 0)
      v15 += 9;
    if ((v14 & 4) != 0)
      v14 = v15 + 2;
    else
      v14 = v15;
  }
  *(_DWORD *)(v13 + 28) = v14;
  v4 = (v4 + v14 + 2);
  v3 = *(_DWORD *)(a1 + 112);
  if ((v3 & 0x40) == 0)
  {
LABEL_23:
    if ((v3 & 0x80) == 0)
      goto LABEL_52;
    goto LABEL_46;
  }
LABEL_37:
  v16 = *(_QWORD *)(a1 + 56);
  if (!v16)
    v16 = *(_QWORD *)(qword_102311638 + 56);
  v17 = *(unsigned __int8 *)(v16 + 32);
  if (*(_BYTE *)(v16 + 32))
  {
    v18 = (v17 << 31 >> 31) & 9;
    if ((v17 & 2) != 0)
      v18 += 9;
    if ((v17 & 4) != 0)
      v17 = v18 + 2;
    else
      v17 = v18;
  }
  *(_DWORD *)(v16 + 28) = v17;
  v4 = (v4 + v17 + 2);
  v3 = *(_DWORD *)(a1 + 112);
  if ((v3 & 0x80) != 0)
  {
LABEL_46:
    v19 = *(_QWORD *)(a1 + 64);
    if (!v19)
      v19 = *(_QWORD *)(qword_102311638 + 64);
    v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DAD75C(v19, a2);
    v21 = (int)v20;
    if (v20 >= 0x80)
      v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20, a2);
    else
      v22 = 1;
    v4 = (v4 + v21 + v22 + 1);
    v3 = *(_DWORD *)(a1 + 112);
  }
LABEL_52:
  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      v23 = *(_QWORD *)(a1 + 72);
      if (!v23)
        v23 = *(_QWORD *)(qword_102311638 + 72);
      v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DAFE84(v23, a2);
      v25 = (int)v24;
      if (v24 >= 0x80)
        v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24, a2);
      else
        v26 = 1;
      LODWORD(v4) = v4 + v25 + v26 + 1;
      v3 = *(_DWORD *)(a1 + 112);
    }
    if ((v3 & 0x200) != 0)
      LODWORD(v4) = v4 + 5;
    if ((v3 & 0x400) != 0)
    {
      v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 84);
      if ((v27 & 0x80000000) != 0)
      {
        v28 = 11;
      }
      else if (v27 >= 0x80)
      {
        v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v27, a2) + 1;
        v3 = *(_DWORD *)(a1 + 112);
      }
      else
      {
        v28 = 2;
      }
      LODWORD(v4) = v28 + v4;
    }
    if ((v3 & 0x800) != 0)
    {
      v29 = *(_QWORD *)(a1 + 88);
      if (!v29)
        v29 = *(_QWORD *)(qword_102311638 + 88);
      v30 = *(unsigned __int8 *)(v29 + 32);
      v31 = (v30 << 31 >> 31) & 9;
      if ((v30 & 2) != 0)
        v31 += 9;
      if ((v30 & 4) != 0)
        v31 += 2;
      if (*(_BYTE *)(v29 + 32))
        v32 = v31;
      else
        v32 = 0;
      *(_DWORD *)(v29 + 28) = v32;
      LODWORD(v4) = v4 + v32 + 2;
      v3 = *(_DWORD *)(a1 + 112);
    }
    if ((v3 & 0x1000) != 0)
      v4 = (v4 + 2);
    else
      v4 = v4;
    if ((v3 & 0x2000) != 0)
    {
      v33 = *(_QWORD *)(a1 + 96);
      if (!v33)
        v33 = *(_QWORD *)(qword_102311638 + 96);
      v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DAD140(v33);
      v36 = (int)v34;
      if (v34 >= 0x80)
        v37 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v34, v35);
      else
        v37 = 1;
      v4 = (v4 + v36 + v37 + 1);
    }
  }
  *(_DWORD *)(a1 + 108) = v4;
  return v4;
}

void sub_100DB1C34(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  sub_100DB0290(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DB1C80()
{
  return 1;
}

_QWORD *sub_100DB1C88@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.Measurement");
}

float sub_100DB1C98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float result;
  int v6;
  char v7;
  char v8;
  _BYTE v9[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 8018);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 32);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      result = *(float *)(a2 + 8);
      *(_DWORD *)(a1 + 32) |= 1u;
      *(float *)(a1 + 8) = result;
      v6 = *(_DWORD *)(a2 + 32);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          goto LABEL_7;
        goto LABEL_13;
      }
    }
    else if ((*(_BYTE *)(a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    result = *(float *)(a2 + 12);
    *(_DWORD *)(a1 + 32) |= 2u;
    *(float *)(a1 + 12) = result;
    v6 = *(_DWORD *)(a2 + 32);
    if ((v6 & 4) == 0)
    {
LABEL_7:
      if ((v6 & 8) == 0)
        goto LABEL_8;
      goto LABEL_14;
    }
LABEL_13:
    result = *(float *)(a2 + 16);
    *(_DWORD *)(a1 + 32) |= 4u;
    *(float *)(a1 + 16) = result;
    v6 = *(_DWORD *)(a2 + 32);
    if ((v6 & 8) == 0)
    {
LABEL_8:
      if ((v6 & 0x10) == 0)
        return result;
      goto LABEL_9;
    }
LABEL_14:
    result = *(float *)(a2 + 20);
    *(_DWORD *)(a1 + 32) |= 8u;
    *(float *)(a1 + 20) = result;
    if ((*(_DWORD *)(a2 + 32) & 0x10) == 0)
      return result;
LABEL_9:
    v7 = *(_BYTE *)(a2 + 24);
    *(_DWORD *)(a1 + 32) |= 0x10u;
    *(_BYTE *)(a1 + 24) = v7;
  }
  return result;
}

void sub_100DB1DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DB1DC0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185838;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DB1DD0()
{
  operator new();
}

uint64_t sub_100DB1E10(uint64_t result)
{
  if (*(_BYTE *)(result + 32))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_100DB1E28(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 32);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(float *)(result + 8), a3);
    v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(float *)(v5 + 12), a3);
  v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(float *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 24), a2, a4);
  }
LABEL_10:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, a2, *(float *)(v5 + 20), a3);
  if ((*(_DWORD *)(v5 + 32) & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 24), a2, a4);
  return result;
}

uint64_t sub_100DB1ED8(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(a1 + 32);
  if (*(_BYTE *)(a1 + 32))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 5;
    if ((v1 & 2) != 0)
      v2 += 5;
    if ((v1 & 4) != 0)
      v2 += 5;
    if ((v1 & 8) != 0)
      v2 += 5;
    if ((v1 & 0x10) != 0)
      v1 = v2 + 2;
    else
      v1 = v2;
  }
  *(_DWORD *)(a1 + 28) = v1;
  return v1;
}

float sub_100DB1F28(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100DB1C98(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DB1F74()
{
  return 1;
}

_QWORD *sub_100DB1F7C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.ReceiverClockModel");
}

double sub_100DB1F8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 8315);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 52);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 52) & 1) != 0)
    {
      result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 52) |= 1u;
      *(double *)(a1 + 8) = result;
      v6 = *(_DWORD *)(a2 + 52);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          goto LABEL_7;
        goto LABEL_13;
      }
    }
    else if ((*(_BYTE *)(a2 + 52) & 2) == 0)
    {
      goto LABEL_6;
    }
    result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 52) |= 2u;
    *(double *)(a1 + 16) = result;
    v6 = *(_DWORD *)(a2 + 52);
    if ((v6 & 4) == 0)
    {
LABEL_7:
      if ((v6 & 8) == 0)
        goto LABEL_8;
      goto LABEL_14;
    }
LABEL_13:
    result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 52) |= 4u;
    *(double *)(a1 + 24) = result;
    v6 = *(_DWORD *)(a2 + 52);
    if ((v6 & 8) == 0)
    {
LABEL_8:
      if ((v6 & 0x10) == 0)
        return result;
      goto LABEL_9;
    }
LABEL_14:
    result = *(double *)(a2 + 32);
    *(_DWORD *)(a1 + 52) |= 8u;
    *(double *)(a1 + 32) = result;
    if ((*(_DWORD *)(a2 + 52) & 0x10) == 0)
      return result;
LABEL_9:
    result = *(double *)(a2 + 40);
    *(_DWORD *)(a1 + 52) |= 0x10u;
    *(double *)(a1 + 40) = result;
  }
  return result;
}

void sub_100DB209C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DB20B4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021858B0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DB20C4()
{
  operator new();
}

uint64_t sub_100DB2108(uint64_t result)
{
  if (*(_BYTE *)(result + 52))
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
  }
  *(_DWORD *)(result + 52) = 0;
  return result;
}

uint64_t sub_100DB2128(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  int v5;

  v4 = result;
  v5 = *(_DWORD *)(result + 52);
  if ((v5 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    v5 = *(_DWORD *)(v4 + 52);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v4 + 16), a3);
  v5 = *(_DWORD *)(v4 + 52);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v4 + 24), a3);
  v5 = *(_DWORD *)(v4 + 52);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, a2, *(double *)(v4 + 40), a3);
  }
LABEL_10:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, a2, *(double *)(v4 + 32), a3);
  if ((*(_DWORD *)(v4 + 52) & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, a2, *(double *)(v4 + 40), a3);
  return result;
}

uint64_t sub_100DB21D8(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(a1 + 52);
  if (*(_BYTE *)(a1 + 52))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0)
      v2 += 9;
    if ((v1 & 4) != 0)
      v2 += 9;
    if ((v1 & 8) != 0)
      v2 += 9;
    if ((v1 & 0x10) != 0)
      v1 = v2 + 9;
    else
      v1 = v2;
  }
  *(_DWORD *)(a1 + 48) = v1;
  return v1;
}

double sub_100DB2228(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return sub_100DB1F8C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100DB2274()
{
  return 1;
}

_QWORD *sub_100DB227C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.ReceiverClockCorrections");
}

double sub_100DB228C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  uint64_t v7;
  char v8;
  _BYTE v9[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPGnssMeasApi.pb.cc", 8614);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 40);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) != 0)
    {
      v7 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 40) |= 1u;
      *(_QWORD *)(a1 + 8) = v7;
      v6 = *(_DWORD *)(a2 + 40);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          goto LABEL_7;
        goto LABEL_13;
      }
    }
    else if ((*(_BYTE *)(a2 + 40) & 2) == 0)
    {
      goto LABEL_6;
    }
    LODWORD(result) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 40) |= 2u;
    *(_DWORD *)(a1 + 16) = LODWORD(result);
    v6 = *(_DWORD *)(a2 + 40);
    if ((v6 & 4) == 0)
    {
LABEL_7:
      if ((v6 & 8) == 0)
        goto LABEL_8;
      goto LABEL_14;
    }
LABEL_13:
    LODWORD(result) = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 40) |= 4u;
    *(_DWORD *)(a1 + 20) = LODWORD(result);
    v6 = *(_DWORD *)(a2 + 40);
    if ((v6 & 8) == 0)
    {
LABEL_8:
      if ((v6 & 0x10) == 0)
        return result;
      goto LABEL_9;
    }
LABEL_14:
    result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 40) |= 8u;
    *(double *)(a1 + 24) = result;
    if ((*(_DWORD *)(a2 + 40) & 0x10) == 0)
      return result;
LABEL_9:
    LODWORD(result) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 40) |= 0x10u;
    *(_DWORD *)(a1 + 32) = LODWORD(result);
  }
  return result;
}

void sub_100DB239C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100DB23B4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185928;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100DB23C4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185928;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100DB23F4()
{
  operator new();
}

uint64_t sub_100DB2438(uint64_t result)
{
  if (*(_BYTE *)(result + 40))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_100DB2454(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t result;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  unsigned int v16[2];

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        *(_QWORD *)v16 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, (unint64_t *)v16);
          if (!(_DWORD)result)
            return result;
          v10 = *(_QWORD *)v16;
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v10 = *v9;
          v11 = v9 + 1;
          *((_QWORD *)this + 1) = v11;
        }
        *(_QWORD *)(a1 + 8) = v10;
        *(_DWORD *)(a1 + 40) |= 1u;
        if ((unint64_t)v11 < v8 && *v11 == 21)
        {
          *((_QWORD *)this + 1) = v11 + 1;
          goto LABEL_27;
        }
        continue;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 5)
          goto LABEL_19;
LABEL_27:
        v16[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v16) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 16) = v16[0];
        *(_DWORD *)(a1 + 40) |= 2u;
        v13 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v13 >= *((_QWORD *)this + 2) || *v13 != 29)
          continue;
        *((_QWORD *)this + 1) = v13 + 1;
LABEL_31:
        v16[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v16) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 20) = v16[0];
        *(_DWORD *)(a1 + 40) |= 4u;
        v14 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v14 >= *((_QWORD *)this + 2) || *v14 != 33)
          continue;
        *((_QWORD *)this + 1) = v14 + 1;
LABEL_35:
        *(_QWORD *)v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v16) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)v16;
        *(_DWORD *)(a1 + 40) |= 8u;
        v15 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v15 >= *((_QWORD *)this + 2) || *v15 != 45)
          continue;
        *((_QWORD *)this + 1) = v15 + 1;
LABEL_39:
        v16[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v16) & 1) != 0)
        {
          *(_DWORD *)(a1 + 32) = v16[0];
          *(_DWORD *)(a1 + 40) |= 0x10u;
          if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            result = 1;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 5)
          goto LABEL_31;
        goto LABEL_19;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 1)
          goto LABEL_35;
        goto LABEL_19;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 != 5)
          goto LABEL_19;
        goto LABEL_39;
      default:
        v7 = TagFallback & 7;
LABEL_19:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

